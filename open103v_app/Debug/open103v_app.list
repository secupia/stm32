
open103v_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002000  080041e4  080041e4  000041e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080061e4  080061e4  000061e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006288  08006288  00010070  2**0
                  CONTENTS
  4 .ARM          00000000  08006288  08006288  00010070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006288  08006288  00010070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006288  08006288  00006288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800628c  0800628c  0000628c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006290  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000070  08006300  00010070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08006300  000100e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006f5c  00000000  00000000  00010099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001522  00000000  00000000  00016ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006b8  00000000  00000000  00018518  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000630  00000000  00000000  00018bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000198de  00000000  00000000  00019200  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005bf8  00000000  00000000  00032ade  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009153c  00000000  00000000  000386d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c9c12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f50  00000000  00000000  000c9c90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080041e4 <__do_global_dtors_aux>:
 80041e4:	b510      	push	{r4, lr}
 80041e6:	4c05      	ldr	r4, [pc, #20]	; (80041fc <__do_global_dtors_aux+0x18>)
 80041e8:	7823      	ldrb	r3, [r4, #0]
 80041ea:	b933      	cbnz	r3, 80041fa <__do_global_dtors_aux+0x16>
 80041ec:	4b04      	ldr	r3, [pc, #16]	; (8004200 <__do_global_dtors_aux+0x1c>)
 80041ee:	b113      	cbz	r3, 80041f6 <__do_global_dtors_aux+0x12>
 80041f0:	4804      	ldr	r0, [pc, #16]	; (8004204 <__do_global_dtors_aux+0x20>)
 80041f2:	f3af 8000 	nop.w
 80041f6:	2301      	movs	r3, #1
 80041f8:	7023      	strb	r3, [r4, #0]
 80041fa:	bd10      	pop	{r4, pc}
 80041fc:	20000070 	.word	0x20000070
 8004200:	00000000 	.word	0x00000000
 8004204:	080061cc 	.word	0x080061cc

08004208 <frame_dummy>:
 8004208:	b508      	push	{r3, lr}
 800420a:	4b03      	ldr	r3, [pc, #12]	; (8004218 <frame_dummy+0x10>)
 800420c:	b11b      	cbz	r3, 8004216 <frame_dummy+0xe>
 800420e:	4903      	ldr	r1, [pc, #12]	; (800421c <frame_dummy+0x14>)
 8004210:	4803      	ldr	r0, [pc, #12]	; (8004220 <frame_dummy+0x18>)
 8004212:	f3af 8000 	nop.w
 8004216:	bd08      	pop	{r3, pc}
 8004218:	00000000 	.word	0x00000000
 800421c:	20000074 	.word	0x20000074
 8004220:	080061cc 	.word	0x080061cc

08004224 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004230:	2300      	movs	r3, #0
 8004232:	617b      	str	r3, [r7, #20]
 8004234:	e00b      	b.n	800424e <_write+0x2a>
  {
    //__io_putchar(*ptr++);
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr++, 1, 0xFFFF);
 8004236:	68b9      	ldr	r1, [r7, #8]
 8004238:	1c4b      	adds	r3, r1, #1
 800423a:	60bb      	str	r3, [r7, #8]
 800423c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004240:	2201      	movs	r2, #1
 8004242:	4807      	ldr	r0, [pc, #28]	; (8004260 <_write+0x3c>)
 8004244:	f001 f9bf 	bl	80055c6 <HAL_UART_Transmit>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	3301      	adds	r3, #1
 800424c:	617b      	str	r3, [r7, #20]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	429a      	cmp	r2, r3
 8004254:	dbef      	blt.n	8004236 <_write+0x12>
  }
  return len;
 8004256:	687b      	ldr	r3, [r7, #4]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	20000098 	.word	0x20000098

08004264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004268:	f000 fa40 	bl	80046ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800426c:	f000 f814 	bl	8004298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004270:	f000 f882 	bl	8004378 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8004274:	f000 f856 	bl	8004324 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    printf("Application SW!!\r\n");
 8004278:	4805      	ldr	r0, [pc, #20]	; (8004290 <main+0x2c>)
 800427a:	f001 fb9d 	bl	80059b8 <puts>
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800427e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004282:	4804      	ldr	r0, [pc, #16]	; (8004294 <main+0x30>)
 8004284:	f000 fd1c 	bl	8004cc0 <HAL_GPIO_TogglePin>
    HAL_Delay(250);
 8004288:	20fa      	movs	r0, #250	; 0xfa
 800428a:	f000 fa91 	bl	80047b0 <HAL_Delay>
    printf("Application SW!!\r\n");
 800428e:	e7f3      	b.n	8004278 <main+0x14>
 8004290:	080061e4 	.word	0x080061e4
 8004294:	40010c00 	.word	0x40010c00

08004298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b090      	sub	sp, #64	; 0x40
 800429c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800429e:	f107 0318 	add.w	r3, r7, #24
 80042a2:	2228      	movs	r2, #40	; 0x28
 80042a4:	2100      	movs	r1, #0
 80042a6:	4618      	mov	r0, r3
 80042a8:	f001 fb22 	bl	80058f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042ac:	1d3b      	adds	r3, r7, #4
 80042ae:	2200      	movs	r2, #0
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	605a      	str	r2, [r3, #4]
 80042b4:	609a      	str	r2, [r3, #8]
 80042b6:	60da      	str	r2, [r3, #12]
 80042b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80042ba:	2301      	movs	r3, #1
 80042bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80042be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80042c4:	2300      	movs	r3, #0
 80042c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80042c8:	2301      	movs	r3, #1
 80042ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042cc:	2302      	movs	r3, #2
 80042ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80042d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80042d6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80042da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042dc:	f107 0318 	add.w	r3, r7, #24
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fd07 	bl	8004cf4 <HAL_RCC_OscConfig>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80042ec:	f000 f89e 	bl	800442c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042f0:	230f      	movs	r3, #15
 80042f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042f4:	2302      	movs	r3, #2
 80042f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042f8:	2300      	movs	r3, #0
 80042fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80042fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004300:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004306:	1d3b      	adds	r3, r7, #4
 8004308:	2102      	movs	r1, #2
 800430a:	4618      	mov	r0, r3
 800430c:	f000 ff72 	bl	80051f4 <HAL_RCC_ClockConfig>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8004316:	f000 f889 	bl	800442c <Error_Handler>
  }
}
 800431a:	bf00      	nop
 800431c:	3740      	adds	r7, #64	; 0x40
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004328:	4b11      	ldr	r3, [pc, #68]	; (8004370 <MX_USART1_UART_Init+0x4c>)
 800432a:	4a12      	ldr	r2, [pc, #72]	; (8004374 <MX_USART1_UART_Init+0x50>)
 800432c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800432e:	4b10      	ldr	r3, [pc, #64]	; (8004370 <MX_USART1_UART_Init+0x4c>)
 8004330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004334:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004336:	4b0e      	ldr	r3, [pc, #56]	; (8004370 <MX_USART1_UART_Init+0x4c>)
 8004338:	2200      	movs	r2, #0
 800433a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800433c:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <MX_USART1_UART_Init+0x4c>)
 800433e:	2200      	movs	r2, #0
 8004340:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004342:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <MX_USART1_UART_Init+0x4c>)
 8004344:	2200      	movs	r2, #0
 8004346:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004348:	4b09      	ldr	r3, [pc, #36]	; (8004370 <MX_USART1_UART_Init+0x4c>)
 800434a:	220c      	movs	r2, #12
 800434c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800434e:	4b08      	ldr	r3, [pc, #32]	; (8004370 <MX_USART1_UART_Init+0x4c>)
 8004350:	2200      	movs	r2, #0
 8004352:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004354:	4b06      	ldr	r3, [pc, #24]	; (8004370 <MX_USART1_UART_Init+0x4c>)
 8004356:	2200      	movs	r2, #0
 8004358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800435a:	4805      	ldr	r0, [pc, #20]	; (8004370 <MX_USART1_UART_Init+0x4c>)
 800435c:	f001 f8e6 	bl	800552c <HAL_UART_Init>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004366:	f000 f861 	bl	800442c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800436a:	bf00      	nop
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	20000098 	.word	0x20000098
 8004374:	40013800 	.word	0x40013800

08004378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800437e:	f107 0310 	add.w	r3, r7, #16
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	605a      	str	r2, [r3, #4]
 8004388:	609a      	str	r2, [r3, #8]
 800438a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800438c:	4b24      	ldr	r3, [pc, #144]	; (8004420 <MX_GPIO_Init+0xa8>)
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	4a23      	ldr	r2, [pc, #140]	; (8004420 <MX_GPIO_Init+0xa8>)
 8004392:	f043 0310 	orr.w	r3, r3, #16
 8004396:	6193      	str	r3, [r2, #24]
 8004398:	4b21      	ldr	r3, [pc, #132]	; (8004420 <MX_GPIO_Init+0xa8>)
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	f003 0310 	and.w	r3, r3, #16
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80043a4:	4b1e      	ldr	r3, [pc, #120]	; (8004420 <MX_GPIO_Init+0xa8>)
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	4a1d      	ldr	r2, [pc, #116]	; (8004420 <MX_GPIO_Init+0xa8>)
 80043aa:	f043 0308 	orr.w	r3, r3, #8
 80043ae:	6193      	str	r3, [r2, #24]
 80043b0:	4b1b      	ldr	r3, [pc, #108]	; (8004420 <MX_GPIO_Init+0xa8>)
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	f003 0308 	and.w	r3, r3, #8
 80043b8:	60bb      	str	r3, [r7, #8]
 80043ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043bc:	4b18      	ldr	r3, [pc, #96]	; (8004420 <MX_GPIO_Init+0xa8>)
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	4a17      	ldr	r2, [pc, #92]	; (8004420 <MX_GPIO_Init+0xa8>)
 80043c2:	f043 0304 	orr.w	r3, r3, #4
 80043c6:	6193      	str	r3, [r2, #24]
 80043c8:	4b15      	ldr	r3, [pc, #84]	; (8004420 <MX_GPIO_Init+0xa8>)
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	f003 0304 	and.w	r3, r3, #4
 80043d0:	607b      	str	r3, [r7, #4]
 80043d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80043d4:	2200      	movs	r2, #0
 80043d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80043da:	4812      	ldr	r0, [pc, #72]	; (8004424 <MX_GPIO_Init+0xac>)
 80043dc:	f000 fc58 	bl	8004c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : KEY1_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80043e0:	2301      	movs	r3, #1
 80043e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043e4:	2300      	movs	r3, #0
 80043e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e8:	2300      	movs	r3, #0
 80043ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 80043ec:	f107 0310 	add.w	r3, r7, #16
 80043f0:	4619      	mov	r1, r3
 80043f2:	480d      	ldr	r0, [pc, #52]	; (8004428 <MX_GPIO_Init+0xb0>)
 80043f4:	f000 fae2 	bl	80049bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80043f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043fe:	2301      	movs	r3, #1
 8004400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004402:	2300      	movs	r3, #0
 8004404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004406:	2302      	movs	r3, #2
 8004408:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800440a:	f107 0310 	add.w	r3, r7, #16
 800440e:	4619      	mov	r1, r3
 8004410:	4804      	ldr	r0, [pc, #16]	; (8004424 <MX_GPIO_Init+0xac>)
 8004412:	f000 fad3 	bl	80049bc <HAL_GPIO_Init>

}
 8004416:	bf00      	nop
 8004418:	3720      	adds	r7, #32
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	40021000 	.word	0x40021000
 8004424:	40010c00 	.word	0x40010c00
 8004428:	40011000 	.word	0x40011000

0800442c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004430:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004432:	e7fe      	b.n	8004432 <Error_Handler+0x6>

08004434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800443a:	4b15      	ldr	r3, [pc, #84]	; (8004490 <HAL_MspInit+0x5c>)
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	4a14      	ldr	r2, [pc, #80]	; (8004490 <HAL_MspInit+0x5c>)
 8004440:	f043 0301 	orr.w	r3, r3, #1
 8004444:	6193      	str	r3, [r2, #24]
 8004446:	4b12      	ldr	r3, [pc, #72]	; (8004490 <HAL_MspInit+0x5c>)
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	60bb      	str	r3, [r7, #8]
 8004450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004452:	4b0f      	ldr	r3, [pc, #60]	; (8004490 <HAL_MspInit+0x5c>)
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	4a0e      	ldr	r2, [pc, #56]	; (8004490 <HAL_MspInit+0x5c>)
 8004458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800445c:	61d3      	str	r3, [r2, #28]
 800445e:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <HAL_MspInit+0x5c>)
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004466:	607b      	str	r3, [r7, #4]
 8004468:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800446a:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <HAL_MspInit+0x60>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	4a04      	ldr	r2, [pc, #16]	; (8004494 <HAL_MspInit+0x60>)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004486:	bf00      	nop
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	bc80      	pop	{r7}
 800448e:	4770      	bx	lr
 8004490:	40021000 	.word	0x40021000
 8004494:	40010000 	.word	0x40010000

08004498 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b088      	sub	sp, #32
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a0:	f107 0310 	add.w	r3, r7, #16
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	605a      	str	r2, [r3, #4]
 80044aa:	609a      	str	r2, [r3, #8]
 80044ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a1c      	ldr	r2, [pc, #112]	; (8004524 <HAL_UART_MspInit+0x8c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d131      	bne.n	800451c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80044b8:	4b1b      	ldr	r3, [pc, #108]	; (8004528 <HAL_UART_MspInit+0x90>)
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	4a1a      	ldr	r2, [pc, #104]	; (8004528 <HAL_UART_MspInit+0x90>)
 80044be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044c2:	6193      	str	r3, [r2, #24]
 80044c4:	4b18      	ldr	r3, [pc, #96]	; (8004528 <HAL_UART_MspInit+0x90>)
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044d0:	4b15      	ldr	r3, [pc, #84]	; (8004528 <HAL_UART_MspInit+0x90>)
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	4a14      	ldr	r2, [pc, #80]	; (8004528 <HAL_UART_MspInit+0x90>)
 80044d6:	f043 0304 	orr.w	r3, r3, #4
 80044da:	6193      	str	r3, [r2, #24]
 80044dc:	4b12      	ldr	r3, [pc, #72]	; (8004528 <HAL_UART_MspInit+0x90>)
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	60bb      	str	r3, [r7, #8]
 80044e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80044e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ee:	2302      	movs	r3, #2
 80044f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044f2:	2303      	movs	r3, #3
 80044f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044f6:	f107 0310 	add.w	r3, r7, #16
 80044fa:	4619      	mov	r1, r3
 80044fc:	480b      	ldr	r0, [pc, #44]	; (800452c <HAL_UART_MspInit+0x94>)
 80044fe:	f000 fa5d 	bl	80049bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004506:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004508:	2300      	movs	r3, #0
 800450a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450c:	2300      	movs	r3, #0
 800450e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004510:	f107 0310 	add.w	r3, r7, #16
 8004514:	4619      	mov	r1, r3
 8004516:	4805      	ldr	r0, [pc, #20]	; (800452c <HAL_UART_MspInit+0x94>)
 8004518:	f000 fa50 	bl	80049bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800451c:	bf00      	nop
 800451e:	3720      	adds	r7, #32
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40013800 	.word	0x40013800
 8004528:	40021000 	.word	0x40021000
 800452c:	40010800 	.word	0x40010800

08004530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004534:	e7fe      	b.n	8004534 <NMI_Handler+0x4>

08004536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004536:	b480      	push	{r7}
 8004538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800453a:	e7fe      	b.n	800453a <HardFault_Handler+0x4>

0800453c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004540:	e7fe      	b.n	8004540 <MemManage_Handler+0x4>

08004542 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004542:	b480      	push	{r7}
 8004544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004546:	e7fe      	b.n	8004546 <BusFault_Handler+0x4>

08004548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800454c:	e7fe      	b.n	800454c <UsageFault_Handler+0x4>

0800454e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800454e:	b480      	push	{r7}
 8004550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004552:	bf00      	nop
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr

0800455a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800455a:	b480      	push	{r7}
 800455c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800455e:	bf00      	nop
 8004560:	46bd      	mov	sp, r7
 8004562:	bc80      	pop	{r7}
 8004564:	4770      	bx	lr

08004566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004566:	b480      	push	{r7}
 8004568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800456a:	bf00      	nop
 800456c:	46bd      	mov	sp, r7
 800456e:	bc80      	pop	{r7}
 8004570:	4770      	bx	lr

08004572 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004576:	f000 f8ff 	bl	8004778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800457a:	bf00      	nop
 800457c:	bd80      	pop	{r7, pc}

0800457e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b086      	sub	sp, #24
 8004582:	af00      	add	r7, sp, #0
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800458a:	2300      	movs	r3, #0
 800458c:	617b      	str	r3, [r7, #20]
 800458e:	e00a      	b.n	80045a6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004590:	f3af 8000 	nop.w
 8004594:	4601      	mov	r1, r0
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	60ba      	str	r2, [r7, #8]
 800459c:	b2ca      	uxtb	r2, r1
 800459e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	3301      	adds	r3, #1
 80045a4:	617b      	str	r3, [r7, #20]
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	dbf0      	blt.n	8004590 <_read+0x12>
	}

return len;
 80045ae:	687b      	ldr	r3, [r7, #4]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3718      	adds	r7, #24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <_close>:
	}
	return len;
}

int _close(int file)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
	return -1;
 80045c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bc80      	pop	{r7}
 80045cc:	4770      	bx	lr

080045ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b083      	sub	sp, #12
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80045de:	605a      	str	r2, [r3, #4]
	return 0;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bc80      	pop	{r7}
 80045ea:	4770      	bx	lr

080045ec <_isatty>:

int _isatty(int file)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
	return 1;
 80045f4:	2301      	movs	r3, #1
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
	return 0;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	bc80      	pop	{r7}
 8004616:	4770      	bx	lr

08004618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004620:	4a14      	ldr	r2, [pc, #80]	; (8004674 <_sbrk+0x5c>)
 8004622:	4b15      	ldr	r3, [pc, #84]	; (8004678 <_sbrk+0x60>)
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800462c:	4b13      	ldr	r3, [pc, #76]	; (800467c <_sbrk+0x64>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d102      	bne.n	800463a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004634:	4b11      	ldr	r3, [pc, #68]	; (800467c <_sbrk+0x64>)
 8004636:	4a12      	ldr	r2, [pc, #72]	; (8004680 <_sbrk+0x68>)
 8004638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800463a:	4b10      	ldr	r3, [pc, #64]	; (800467c <_sbrk+0x64>)
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4413      	add	r3, r2
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	429a      	cmp	r2, r3
 8004646:	d207      	bcs.n	8004658 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004648:	f001 f928 	bl	800589c <__errno>
 800464c:	4602      	mov	r2, r0
 800464e:	230c      	movs	r3, #12
 8004650:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004652:	f04f 33ff 	mov.w	r3, #4294967295
 8004656:	e009      	b.n	800466c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004658:	4b08      	ldr	r3, [pc, #32]	; (800467c <_sbrk+0x64>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800465e:	4b07      	ldr	r3, [pc, #28]	; (800467c <_sbrk+0x64>)
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4413      	add	r3, r2
 8004666:	4a05      	ldr	r2, [pc, #20]	; (800467c <_sbrk+0x64>)
 8004668:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800466a:	68fb      	ldr	r3, [r7, #12]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3718      	adds	r7, #24
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	2000c000 	.word	0x2000c000
 8004678:	00000400 	.word	0x00000400
 800467c:	2000008c 	.word	0x2000008c
 8004680:	200000e8 	.word	0x200000e8

08004684 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8004688:	4b03      	ldr	r3, [pc, #12]	; (8004698 <SystemInit+0x14>)
 800468a:	4a04      	ldr	r2, [pc, #16]	; (800469c <SystemInit+0x18>)
 800468c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800468e:	bf00      	nop
 8004690:	46bd      	mov	sp, r7
 8004692:	bc80      	pop	{r7}
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	e000ed00 	.word	0xe000ed00
 800469c:	08004000 	.word	0x08004000

080046a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80046a0:	480c      	ldr	r0, [pc, #48]	; (80046d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80046a2:	490d      	ldr	r1, [pc, #52]	; (80046d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80046a4:	4a0d      	ldr	r2, [pc, #52]	; (80046dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80046a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046a8:	e002      	b.n	80046b0 <LoopCopyDataInit>

080046aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046ae:	3304      	adds	r3, #4

080046b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046b4:	d3f9      	bcc.n	80046aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046b6:	4a0a      	ldr	r2, [pc, #40]	; (80046e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80046b8:	4c0a      	ldr	r4, [pc, #40]	; (80046e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80046ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046bc:	e001      	b.n	80046c2 <LoopFillZerobss>

080046be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046c0:	3204      	adds	r2, #4

080046c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046c4:	d3fb      	bcc.n	80046be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80046c6:	f7ff ffdd 	bl	8004684 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046ca:	f001 f8ed 	bl	80058a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80046ce:	f7ff fdc9 	bl	8004264 <main>
  bx lr
 80046d2:	4770      	bx	lr
  ldr r0, =_sdata
 80046d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046d8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80046dc:	08006290 	.word	0x08006290
  ldr r2, =_sbss
 80046e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80046e4:	200000e4 	.word	0x200000e4

080046e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80046e8:	e7fe      	b.n	80046e8 <ADC1_2_IRQHandler>
	...

080046ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046f0:	4b08      	ldr	r3, [pc, #32]	; (8004714 <HAL_Init+0x28>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a07      	ldr	r2, [pc, #28]	; (8004714 <HAL_Init+0x28>)
 80046f6:	f043 0310 	orr.w	r3, r3, #16
 80046fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046fc:	2003      	movs	r0, #3
 80046fe:	f000 f929 	bl	8004954 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004702:	2000      	movs	r0, #0
 8004704:	f000 f808 	bl	8004718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004708:	f7ff fe94 	bl	8004434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	40022000 	.word	0x40022000

08004718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004720:	4b12      	ldr	r3, [pc, #72]	; (800476c <HAL_InitTick+0x54>)
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	4b12      	ldr	r3, [pc, #72]	; (8004770 <HAL_InitTick+0x58>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	4619      	mov	r1, r3
 800472a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800472e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004732:	fbb2 f3f3 	udiv	r3, r2, r3
 8004736:	4618      	mov	r0, r3
 8004738:	f000 f933 	bl	80049a2 <HAL_SYSTICK_Config>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e00e      	b.n	8004764 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b0f      	cmp	r3, #15
 800474a:	d80a      	bhi.n	8004762 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800474c:	2200      	movs	r2, #0
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	f04f 30ff 	mov.w	r0, #4294967295
 8004754:	f000 f909 	bl	800496a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004758:	4a06      	ldr	r2, [pc, #24]	; (8004774 <HAL_InitTick+0x5c>)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800475e:	2300      	movs	r3, #0
 8004760:	e000      	b.n	8004764 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
}
 8004764:	4618      	mov	r0, r3
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	20000000 	.word	0x20000000
 8004770:	20000008 	.word	0x20000008
 8004774:	20000004 	.word	0x20000004

08004778 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800477c:	4b05      	ldr	r3, [pc, #20]	; (8004794 <HAL_IncTick+0x1c>)
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	461a      	mov	r2, r3
 8004782:	4b05      	ldr	r3, [pc, #20]	; (8004798 <HAL_IncTick+0x20>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4413      	add	r3, r2
 8004788:	4a03      	ldr	r2, [pc, #12]	; (8004798 <HAL_IncTick+0x20>)
 800478a:	6013      	str	r3, [r2, #0]
}
 800478c:	bf00      	nop
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr
 8004794:	20000008 	.word	0x20000008
 8004798:	200000dc 	.word	0x200000dc

0800479c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  return uwTick;
 80047a0:	4b02      	ldr	r3, [pc, #8]	; (80047ac <HAL_GetTick+0x10>)
 80047a2:	681b      	ldr	r3, [r3, #0]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr
 80047ac:	200000dc 	.word	0x200000dc

080047b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047b8:	f7ff fff0 	bl	800479c <HAL_GetTick>
 80047bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c8:	d005      	beq.n	80047d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047ca:	4b09      	ldr	r3, [pc, #36]	; (80047f0 <HAL_Delay+0x40>)
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	461a      	mov	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4413      	add	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047d6:	bf00      	nop
 80047d8:	f7ff ffe0 	bl	800479c <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d8f7      	bhi.n	80047d8 <HAL_Delay+0x28>
  {
  }
}
 80047e8:	bf00      	nop
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	20000008 	.word	0x20000008

080047f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004804:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <__NVIC_SetPriorityGrouping+0x44>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004810:	4013      	ands	r3, r2
 8004812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800481c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004826:	4a04      	ldr	r2, [pc, #16]	; (8004838 <__NVIC_SetPriorityGrouping+0x44>)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	60d3      	str	r3, [r2, #12]
}
 800482c:	bf00      	nop
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	e000ed00 	.word	0xe000ed00

0800483c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004840:	4b04      	ldr	r3, [pc, #16]	; (8004854 <__NVIC_GetPriorityGrouping+0x18>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	0a1b      	lsrs	r3, r3, #8
 8004846:	f003 0307 	and.w	r3, r3, #7
}
 800484a:	4618      	mov	r0, r3
 800484c:	46bd      	mov	sp, r7
 800484e:	bc80      	pop	{r7}
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	e000ed00 	.word	0xe000ed00

08004858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	4603      	mov	r3, r0
 8004860:	6039      	str	r1, [r7, #0]
 8004862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004868:	2b00      	cmp	r3, #0
 800486a:	db0a      	blt.n	8004882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	b2da      	uxtb	r2, r3
 8004870:	490c      	ldr	r1, [pc, #48]	; (80048a4 <__NVIC_SetPriority+0x4c>)
 8004872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004876:	0112      	lsls	r2, r2, #4
 8004878:	b2d2      	uxtb	r2, r2
 800487a:	440b      	add	r3, r1
 800487c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004880:	e00a      	b.n	8004898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	b2da      	uxtb	r2, r3
 8004886:	4908      	ldr	r1, [pc, #32]	; (80048a8 <__NVIC_SetPriority+0x50>)
 8004888:	79fb      	ldrb	r3, [r7, #7]
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	3b04      	subs	r3, #4
 8004890:	0112      	lsls	r2, r2, #4
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	440b      	add	r3, r1
 8004896:	761a      	strb	r2, [r3, #24]
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	bc80      	pop	{r7}
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	e000e100 	.word	0xe000e100
 80048a8:	e000ed00 	.word	0xe000ed00

080048ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b089      	sub	sp, #36	; 0x24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	f1c3 0307 	rsb	r3, r3, #7
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	bf28      	it	cs
 80048ca:	2304      	movcs	r3, #4
 80048cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	3304      	adds	r3, #4
 80048d2:	2b06      	cmp	r3, #6
 80048d4:	d902      	bls.n	80048dc <NVIC_EncodePriority+0x30>
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	3b03      	subs	r3, #3
 80048da:	e000      	b.n	80048de <NVIC_EncodePriority+0x32>
 80048dc:	2300      	movs	r3, #0
 80048de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048e0:	f04f 32ff 	mov.w	r2, #4294967295
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	43da      	mvns	r2, r3
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	401a      	ands	r2, r3
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048f4:	f04f 31ff 	mov.w	r1, #4294967295
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	fa01 f303 	lsl.w	r3, r1, r3
 80048fe:	43d9      	mvns	r1, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004904:	4313      	orrs	r3, r2
         );
}
 8004906:	4618      	mov	r0, r3
 8004908:	3724      	adds	r7, #36	; 0x24
 800490a:	46bd      	mov	sp, r7
 800490c:	bc80      	pop	{r7}
 800490e:	4770      	bx	lr

08004910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3b01      	subs	r3, #1
 800491c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004920:	d301      	bcc.n	8004926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004922:	2301      	movs	r3, #1
 8004924:	e00f      	b.n	8004946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004926:	4a0a      	ldr	r2, [pc, #40]	; (8004950 <SysTick_Config+0x40>)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3b01      	subs	r3, #1
 800492c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800492e:	210f      	movs	r1, #15
 8004930:	f04f 30ff 	mov.w	r0, #4294967295
 8004934:	f7ff ff90 	bl	8004858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004938:	4b05      	ldr	r3, [pc, #20]	; (8004950 <SysTick_Config+0x40>)
 800493a:	2200      	movs	r2, #0
 800493c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800493e:	4b04      	ldr	r3, [pc, #16]	; (8004950 <SysTick_Config+0x40>)
 8004940:	2207      	movs	r2, #7
 8004942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	e000e010 	.word	0xe000e010

08004954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7ff ff49 	bl	80047f4 <__NVIC_SetPriorityGrouping>
}
 8004962:	bf00      	nop
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800496a:	b580      	push	{r7, lr}
 800496c:	b086      	sub	sp, #24
 800496e:	af00      	add	r7, sp, #0
 8004970:	4603      	mov	r3, r0
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	607a      	str	r2, [r7, #4]
 8004976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004978:	2300      	movs	r3, #0
 800497a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800497c:	f7ff ff5e 	bl	800483c <__NVIC_GetPriorityGrouping>
 8004980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	68b9      	ldr	r1, [r7, #8]
 8004986:	6978      	ldr	r0, [r7, #20]
 8004988:	f7ff ff90 	bl	80048ac <NVIC_EncodePriority>
 800498c:	4602      	mov	r2, r0
 800498e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004992:	4611      	mov	r1, r2
 8004994:	4618      	mov	r0, r3
 8004996:	f7ff ff5f 	bl	8004858 <__NVIC_SetPriority>
}
 800499a:	bf00      	nop
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b082      	sub	sp, #8
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7ff ffb0 	bl	8004910 <SysTick_Config>
 80049b0:	4603      	mov	r3, r0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049bc:	b480      	push	{r7}
 80049be:	b08b      	sub	sp, #44	; 0x2c
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049c6:	2300      	movs	r3, #0
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80049ca:	2300      	movs	r3, #0
 80049cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049ce:	e133      	b.n	8004c38 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80049d0:	2201      	movs	r2, #1
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	fa02 f303 	lsl.w	r3, r2, r3
 80049d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	69fa      	ldr	r2, [r7, #28]
 80049e0:	4013      	ands	r3, r2
 80049e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	f040 8122 	bne.w	8004c32 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b12      	cmp	r3, #18
 80049f4:	d034      	beq.n	8004a60 <HAL_GPIO_Init+0xa4>
 80049f6:	2b12      	cmp	r3, #18
 80049f8:	d80d      	bhi.n	8004a16 <HAL_GPIO_Init+0x5a>
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d02b      	beq.n	8004a56 <HAL_GPIO_Init+0x9a>
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d804      	bhi.n	8004a0c <HAL_GPIO_Init+0x50>
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d031      	beq.n	8004a6a <HAL_GPIO_Init+0xae>
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d01c      	beq.n	8004a44 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004a0a:	e048      	b.n	8004a9e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004a0c:	2b03      	cmp	r3, #3
 8004a0e:	d043      	beq.n	8004a98 <HAL_GPIO_Init+0xdc>
 8004a10:	2b11      	cmp	r3, #17
 8004a12:	d01b      	beq.n	8004a4c <HAL_GPIO_Init+0x90>
          break;
 8004a14:	e043      	b.n	8004a9e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004a16:	4a8f      	ldr	r2, [pc, #572]	; (8004c54 <HAL_GPIO_Init+0x298>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d026      	beq.n	8004a6a <HAL_GPIO_Init+0xae>
 8004a1c:	4a8d      	ldr	r2, [pc, #564]	; (8004c54 <HAL_GPIO_Init+0x298>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d806      	bhi.n	8004a30 <HAL_GPIO_Init+0x74>
 8004a22:	4a8d      	ldr	r2, [pc, #564]	; (8004c58 <HAL_GPIO_Init+0x29c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d020      	beq.n	8004a6a <HAL_GPIO_Init+0xae>
 8004a28:	4a8c      	ldr	r2, [pc, #560]	; (8004c5c <HAL_GPIO_Init+0x2a0>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d01d      	beq.n	8004a6a <HAL_GPIO_Init+0xae>
          break;
 8004a2e:	e036      	b.n	8004a9e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004a30:	4a8b      	ldr	r2, [pc, #556]	; (8004c60 <HAL_GPIO_Init+0x2a4>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d019      	beq.n	8004a6a <HAL_GPIO_Init+0xae>
 8004a36:	4a8b      	ldr	r2, [pc, #556]	; (8004c64 <HAL_GPIO_Init+0x2a8>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d016      	beq.n	8004a6a <HAL_GPIO_Init+0xae>
 8004a3c:	4a8a      	ldr	r2, [pc, #552]	; (8004c68 <HAL_GPIO_Init+0x2ac>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d013      	beq.n	8004a6a <HAL_GPIO_Init+0xae>
          break;
 8004a42:	e02c      	b.n	8004a9e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	623b      	str	r3, [r7, #32]
          break;
 8004a4a:	e028      	b.n	8004a9e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	3304      	adds	r3, #4
 8004a52:	623b      	str	r3, [r7, #32]
          break;
 8004a54:	e023      	b.n	8004a9e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	3308      	adds	r3, #8
 8004a5c:	623b      	str	r3, [r7, #32]
          break;
 8004a5e:	e01e      	b.n	8004a9e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	330c      	adds	r3, #12
 8004a66:	623b      	str	r3, [r7, #32]
          break;
 8004a68:	e019      	b.n	8004a9e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d102      	bne.n	8004a78 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004a72:	2304      	movs	r3, #4
 8004a74:	623b      	str	r3, [r7, #32]
          break;
 8004a76:	e012      	b.n	8004a9e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d105      	bne.n	8004a8c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a80:	2308      	movs	r3, #8
 8004a82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	69fa      	ldr	r2, [r7, #28]
 8004a88:	611a      	str	r2, [r3, #16]
          break;
 8004a8a:	e008      	b.n	8004a9e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a8c:	2308      	movs	r3, #8
 8004a8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	69fa      	ldr	r2, [r7, #28]
 8004a94:	615a      	str	r2, [r3, #20]
          break;
 8004a96:	e002      	b.n	8004a9e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	623b      	str	r3, [r7, #32]
          break;
 8004a9c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	2bff      	cmp	r3, #255	; 0xff
 8004aa2:	d801      	bhi.n	8004aa8 <HAL_GPIO_Init+0xec>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	e001      	b.n	8004aac <HAL_GPIO_Init+0xf0>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3304      	adds	r3, #4
 8004aac:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	2bff      	cmp	r3, #255	; 0xff
 8004ab2:	d802      	bhi.n	8004aba <HAL_GPIO_Init+0xfe>
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	e002      	b.n	8004ac0 <HAL_GPIO_Init+0x104>
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	3b08      	subs	r3, #8
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	210f      	movs	r1, #15
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	fa01 f303 	lsl.w	r3, r1, r3
 8004ace:	43db      	mvns	r3, r3
 8004ad0:	401a      	ands	r2, r3
 8004ad2:	6a39      	ldr	r1, [r7, #32]
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8004ada:	431a      	orrs	r2, r3
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 80a2 	beq.w	8004c32 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004aee:	4b5f      	ldr	r3, [pc, #380]	; (8004c6c <HAL_GPIO_Init+0x2b0>)
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	4a5e      	ldr	r2, [pc, #376]	; (8004c6c <HAL_GPIO_Init+0x2b0>)
 8004af4:	f043 0301 	orr.w	r3, r3, #1
 8004af8:	6193      	str	r3, [r2, #24]
 8004afa:	4b5c      	ldr	r3, [pc, #368]	; (8004c6c <HAL_GPIO_Init+0x2b0>)
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	60bb      	str	r3, [r7, #8]
 8004b04:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004b06:	4a5a      	ldr	r2, [pc, #360]	; (8004c70 <HAL_GPIO_Init+0x2b4>)
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	089b      	lsrs	r3, r3, #2
 8004b0c:	3302      	adds	r3, #2
 8004b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b12:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	f003 0303 	and.w	r3, r3, #3
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	220f      	movs	r2, #15
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	43db      	mvns	r3, r3
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4013      	ands	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a51      	ldr	r2, [pc, #324]	; (8004c74 <HAL_GPIO_Init+0x2b8>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d01f      	beq.n	8004b72 <HAL_GPIO_Init+0x1b6>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a50      	ldr	r2, [pc, #320]	; (8004c78 <HAL_GPIO_Init+0x2bc>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d019      	beq.n	8004b6e <HAL_GPIO_Init+0x1b2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a4f      	ldr	r2, [pc, #316]	; (8004c7c <HAL_GPIO_Init+0x2c0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d013      	beq.n	8004b6a <HAL_GPIO_Init+0x1ae>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a4e      	ldr	r2, [pc, #312]	; (8004c80 <HAL_GPIO_Init+0x2c4>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d00d      	beq.n	8004b66 <HAL_GPIO_Init+0x1aa>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a4d      	ldr	r2, [pc, #308]	; (8004c84 <HAL_GPIO_Init+0x2c8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d007      	beq.n	8004b62 <HAL_GPIO_Init+0x1a6>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a4c      	ldr	r2, [pc, #304]	; (8004c88 <HAL_GPIO_Init+0x2cc>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d101      	bne.n	8004b5e <HAL_GPIO_Init+0x1a2>
 8004b5a:	2305      	movs	r3, #5
 8004b5c:	e00a      	b.n	8004b74 <HAL_GPIO_Init+0x1b8>
 8004b5e:	2306      	movs	r3, #6
 8004b60:	e008      	b.n	8004b74 <HAL_GPIO_Init+0x1b8>
 8004b62:	2304      	movs	r3, #4
 8004b64:	e006      	b.n	8004b74 <HAL_GPIO_Init+0x1b8>
 8004b66:	2303      	movs	r3, #3
 8004b68:	e004      	b.n	8004b74 <HAL_GPIO_Init+0x1b8>
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	e002      	b.n	8004b74 <HAL_GPIO_Init+0x1b8>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <HAL_GPIO_Init+0x1b8>
 8004b72:	2300      	movs	r3, #0
 8004b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b76:	f002 0203 	and.w	r2, r2, #3
 8004b7a:	0092      	lsls	r2, r2, #2
 8004b7c:	4093      	lsls	r3, r2
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004b84:	493a      	ldr	r1, [pc, #232]	; (8004c70 <HAL_GPIO_Init+0x2b4>)
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	089b      	lsrs	r3, r3, #2
 8004b8a:	3302      	adds	r3, #2
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d006      	beq.n	8004bac <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004b9e:	4b3b      	ldr	r3, [pc, #236]	; (8004c8c <HAL_GPIO_Init+0x2d0>)
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	493a      	ldr	r1, [pc, #232]	; (8004c8c <HAL_GPIO_Init+0x2d0>)
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	600b      	str	r3, [r1, #0]
 8004baa:	e006      	b.n	8004bba <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004bac:	4b37      	ldr	r3, [pc, #220]	; (8004c8c <HAL_GPIO_Init+0x2d0>)
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	43db      	mvns	r3, r3
 8004bb4:	4935      	ldr	r1, [pc, #212]	; (8004c8c <HAL_GPIO_Init+0x2d0>)
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d006      	beq.n	8004bd4 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004bc6:	4b31      	ldr	r3, [pc, #196]	; (8004c8c <HAL_GPIO_Init+0x2d0>)
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	4930      	ldr	r1, [pc, #192]	; (8004c8c <HAL_GPIO_Init+0x2d0>)
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	604b      	str	r3, [r1, #4]
 8004bd2:	e006      	b.n	8004be2 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004bd4:	4b2d      	ldr	r3, [pc, #180]	; (8004c8c <HAL_GPIO_Init+0x2d0>)
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	43db      	mvns	r3, r3
 8004bdc:	492b      	ldr	r1, [pc, #172]	; (8004c8c <HAL_GPIO_Init+0x2d0>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d006      	beq.n	8004bfc <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004bee:	4b27      	ldr	r3, [pc, #156]	; (8004c8c <HAL_GPIO_Init+0x2d0>)
 8004bf0:	689a      	ldr	r2, [r3, #8]
 8004bf2:	4926      	ldr	r1, [pc, #152]	; (8004c8c <HAL_GPIO_Init+0x2d0>)
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	608b      	str	r3, [r1, #8]
 8004bfa:	e006      	b.n	8004c0a <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004bfc:	4b23      	ldr	r3, [pc, #140]	; (8004c8c <HAL_GPIO_Init+0x2d0>)
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	43db      	mvns	r3, r3
 8004c04:	4921      	ldr	r1, [pc, #132]	; (8004c8c <HAL_GPIO_Init+0x2d0>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d006      	beq.n	8004c24 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004c16:	4b1d      	ldr	r3, [pc, #116]	; (8004c8c <HAL_GPIO_Init+0x2d0>)
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	491c      	ldr	r1, [pc, #112]	; (8004c8c <HAL_GPIO_Init+0x2d0>)
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60cb      	str	r3, [r1, #12]
 8004c22:	e006      	b.n	8004c32 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004c24:	4b19      	ldr	r3, [pc, #100]	; (8004c8c <HAL_GPIO_Init+0x2d0>)
 8004c26:	68da      	ldr	r2, [r3, #12]
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	43db      	mvns	r3, r3
 8004c2c:	4917      	ldr	r1, [pc, #92]	; (8004c8c <HAL_GPIO_Init+0x2d0>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	3301      	adds	r3, #1
 8004c36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f47f aec4 	bne.w	80049d0 <HAL_GPIO_Init+0x14>
  }
}
 8004c48:	bf00      	nop
 8004c4a:	372c      	adds	r7, #44	; 0x2c
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bc80      	pop	{r7}
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	10210000 	.word	0x10210000
 8004c58:	10110000 	.word	0x10110000
 8004c5c:	10120000 	.word	0x10120000
 8004c60:	10310000 	.word	0x10310000
 8004c64:	10320000 	.word	0x10320000
 8004c68:	10220000 	.word	0x10220000
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	40010000 	.word	0x40010000
 8004c74:	40010800 	.word	0x40010800
 8004c78:	40010c00 	.word	0x40010c00
 8004c7c:	40011000 	.word	0x40011000
 8004c80:	40011400 	.word	0x40011400
 8004c84:	40011800 	.word	0x40011800
 8004c88:	40011c00 	.word	0x40011c00
 8004c8c:	40010400 	.word	0x40010400

08004c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	807b      	strh	r3, [r7, #2]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ca0:	787b      	ldrb	r3, [r7, #1]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ca6:	887a      	ldrh	r2, [r7, #2]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004cac:	e003      	b.n	8004cb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004cae:	887b      	ldrh	r3, [r7, #2]
 8004cb0:	041a      	lsls	r2, r3, #16
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	611a      	str	r2, [r3, #16]
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bc80      	pop	{r7}
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004cd2:	887a      	ldrh	r2, [r7, #2]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	041a      	lsls	r2, r3, #16
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	43d9      	mvns	r1, r3
 8004cde:	887b      	ldrh	r3, [r7, #2]
 8004ce0:	400b      	ands	r3, r1
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	611a      	str	r2, [r3, #16]
}
 8004ce8:	bf00      	nop
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bc80      	pop	{r7}
 8004cf0:	4770      	bx	lr
	...

08004cf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e26c      	b.n	80051e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 8087 	beq.w	8004e22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d14:	4b92      	ldr	r3, [pc, #584]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f003 030c 	and.w	r3, r3, #12
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	d00c      	beq.n	8004d3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d20:	4b8f      	ldr	r3, [pc, #572]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f003 030c 	and.w	r3, r3, #12
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d112      	bne.n	8004d52 <HAL_RCC_OscConfig+0x5e>
 8004d2c:	4b8c      	ldr	r3, [pc, #560]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d38:	d10b      	bne.n	8004d52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d3a:	4b89      	ldr	r3, [pc, #548]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d06c      	beq.n	8004e20 <HAL_RCC_OscConfig+0x12c>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d168      	bne.n	8004e20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e246      	b.n	80051e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d5a:	d106      	bne.n	8004d6a <HAL_RCC_OscConfig+0x76>
 8004d5c:	4b80      	ldr	r3, [pc, #512]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a7f      	ldr	r2, [pc, #508]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d66:	6013      	str	r3, [r2, #0]
 8004d68:	e02e      	b.n	8004dc8 <HAL_RCC_OscConfig+0xd4>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10c      	bne.n	8004d8c <HAL_RCC_OscConfig+0x98>
 8004d72:	4b7b      	ldr	r3, [pc, #492]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a7a      	ldr	r2, [pc, #488]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d7c:	6013      	str	r3, [r2, #0]
 8004d7e:	4b78      	ldr	r3, [pc, #480]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a77      	ldr	r2, [pc, #476]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004d84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d88:	6013      	str	r3, [r2, #0]
 8004d8a:	e01d      	b.n	8004dc8 <HAL_RCC_OscConfig+0xd4>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d94:	d10c      	bne.n	8004db0 <HAL_RCC_OscConfig+0xbc>
 8004d96:	4b72      	ldr	r3, [pc, #456]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a71      	ldr	r2, [pc, #452]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004da0:	6013      	str	r3, [r2, #0]
 8004da2:	4b6f      	ldr	r3, [pc, #444]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a6e      	ldr	r2, [pc, #440]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	e00b      	b.n	8004dc8 <HAL_RCC_OscConfig+0xd4>
 8004db0:	4b6b      	ldr	r3, [pc, #428]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a6a      	ldr	r2, [pc, #424]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dba:	6013      	str	r3, [r2, #0]
 8004dbc:	4b68      	ldr	r3, [pc, #416]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a67      	ldr	r2, [pc, #412]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d013      	beq.n	8004df8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd0:	f7ff fce4 	bl	800479c <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dd8:	f7ff fce0 	bl	800479c <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b64      	cmp	r3, #100	; 0x64
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e1fa      	b.n	80051e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dea:	4b5d      	ldr	r3, [pc, #372]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d0f0      	beq.n	8004dd8 <HAL_RCC_OscConfig+0xe4>
 8004df6:	e014      	b.n	8004e22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df8:	f7ff fcd0 	bl	800479c <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e00:	f7ff fccc 	bl	800479c <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b64      	cmp	r3, #100	; 0x64
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e1e6      	b.n	80051e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e12:	4b53      	ldr	r3, [pc, #332]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1f0      	bne.n	8004e00 <HAL_RCC_OscConfig+0x10c>
 8004e1e:	e000      	b.n	8004e22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d063      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e2e:	4b4c      	ldr	r3, [pc, #304]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f003 030c 	and.w	r3, r3, #12
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00b      	beq.n	8004e52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e3a:	4b49      	ldr	r3, [pc, #292]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f003 030c 	and.w	r3, r3, #12
 8004e42:	2b08      	cmp	r3, #8
 8004e44:	d11c      	bne.n	8004e80 <HAL_RCC_OscConfig+0x18c>
 8004e46:	4b46      	ldr	r3, [pc, #280]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d116      	bne.n	8004e80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e52:	4b43      	ldr	r3, [pc, #268]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d005      	beq.n	8004e6a <HAL_RCC_OscConfig+0x176>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d001      	beq.n	8004e6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e1ba      	b.n	80051e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e6a:	4b3d      	ldr	r3, [pc, #244]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	4939      	ldr	r1, [pc, #228]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e7e:	e03a      	b.n	8004ef6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d020      	beq.n	8004eca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e88:	4b36      	ldr	r3, [pc, #216]	; (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8e:	f7ff fc85 	bl	800479c <HAL_GetTick>
 8004e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e94:	e008      	b.n	8004ea8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e96:	f7ff fc81 	bl	800479c <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e19b      	b.n	80051e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea8:	4b2d      	ldr	r3, [pc, #180]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0f0      	beq.n	8004e96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eb4:	4b2a      	ldr	r3, [pc, #168]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	4927      	ldr	r1, [pc, #156]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	600b      	str	r3, [r1, #0]
 8004ec8:	e015      	b.n	8004ef6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eca:	4b26      	ldr	r3, [pc, #152]	; (8004f64 <HAL_RCC_OscConfig+0x270>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed0:	f7ff fc64 	bl	800479c <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ed8:	f7ff fc60 	bl	800479c <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e17a      	b.n	80051e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eea:	4b1d      	ldr	r3, [pc, #116]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1f0      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0308 	and.w	r3, r3, #8
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d03a      	beq.n	8004f78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d019      	beq.n	8004f3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f0a:	4b17      	ldr	r3, [pc, #92]	; (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f10:	f7ff fc44 	bl	800479c <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f18:	f7ff fc40 	bl	800479c <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e15a      	b.n	80051e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f2a:	4b0d      	ldr	r3, [pc, #52]	; (8004f60 <HAL_RCC_OscConfig+0x26c>)
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0f0      	beq.n	8004f18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004f36:	2001      	movs	r0, #1
 8004f38:	f000 fada 	bl	80054f0 <RCC_Delay>
 8004f3c:	e01c      	b.n	8004f78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f3e:	4b0a      	ldr	r3, [pc, #40]	; (8004f68 <HAL_RCC_OscConfig+0x274>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f44:	f7ff fc2a 	bl	800479c <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f4a:	e00f      	b.n	8004f6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f4c:	f7ff fc26 	bl	800479c <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d908      	bls.n	8004f6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e140      	b.n	80051e0 <HAL_RCC_OscConfig+0x4ec>
 8004f5e:	bf00      	nop
 8004f60:	40021000 	.word	0x40021000
 8004f64:	42420000 	.word	0x42420000
 8004f68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f6c:	4b9e      	ldr	r3, [pc, #632]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1e9      	bne.n	8004f4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 80a6 	beq.w	80050d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f86:	2300      	movs	r3, #0
 8004f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f8a:	4b97      	ldr	r3, [pc, #604]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10d      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f96:	4b94      	ldr	r3, [pc, #592]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	4a93      	ldr	r2, [pc, #588]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 8004f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fa0:	61d3      	str	r3, [r2, #28]
 8004fa2:	4b91      	ldr	r3, [pc, #580]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004faa:	60bb      	str	r3, [r7, #8]
 8004fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fb2:	4b8e      	ldr	r3, [pc, #568]	; (80051ec <HAL_RCC_OscConfig+0x4f8>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d118      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fbe:	4b8b      	ldr	r3, [pc, #556]	; (80051ec <HAL_RCC_OscConfig+0x4f8>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a8a      	ldr	r2, [pc, #552]	; (80051ec <HAL_RCC_OscConfig+0x4f8>)
 8004fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fca:	f7ff fbe7 	bl	800479c <HAL_GetTick>
 8004fce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fd2:	f7ff fbe3 	bl	800479c <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b64      	cmp	r3, #100	; 0x64
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e0fd      	b.n	80051e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe4:	4b81      	ldr	r3, [pc, #516]	; (80051ec <HAL_RCC_OscConfig+0x4f8>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0f0      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d106      	bne.n	8005006 <HAL_RCC_OscConfig+0x312>
 8004ff8:	4b7b      	ldr	r3, [pc, #492]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	4a7a      	ldr	r2, [pc, #488]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 8004ffe:	f043 0301 	orr.w	r3, r3, #1
 8005002:	6213      	str	r3, [r2, #32]
 8005004:	e02d      	b.n	8005062 <HAL_RCC_OscConfig+0x36e>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10c      	bne.n	8005028 <HAL_RCC_OscConfig+0x334>
 800500e:	4b76      	ldr	r3, [pc, #472]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	4a75      	ldr	r2, [pc, #468]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 8005014:	f023 0301 	bic.w	r3, r3, #1
 8005018:	6213      	str	r3, [r2, #32]
 800501a:	4b73      	ldr	r3, [pc, #460]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	4a72      	ldr	r2, [pc, #456]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 8005020:	f023 0304 	bic.w	r3, r3, #4
 8005024:	6213      	str	r3, [r2, #32]
 8005026:	e01c      	b.n	8005062 <HAL_RCC_OscConfig+0x36e>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	2b05      	cmp	r3, #5
 800502e:	d10c      	bne.n	800504a <HAL_RCC_OscConfig+0x356>
 8005030:	4b6d      	ldr	r3, [pc, #436]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	4a6c      	ldr	r2, [pc, #432]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 8005036:	f043 0304 	orr.w	r3, r3, #4
 800503a:	6213      	str	r3, [r2, #32]
 800503c:	4b6a      	ldr	r3, [pc, #424]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	4a69      	ldr	r2, [pc, #420]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 8005042:	f043 0301 	orr.w	r3, r3, #1
 8005046:	6213      	str	r3, [r2, #32]
 8005048:	e00b      	b.n	8005062 <HAL_RCC_OscConfig+0x36e>
 800504a:	4b67      	ldr	r3, [pc, #412]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	4a66      	ldr	r2, [pc, #408]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 8005050:	f023 0301 	bic.w	r3, r3, #1
 8005054:	6213      	str	r3, [r2, #32]
 8005056:	4b64      	ldr	r3, [pc, #400]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	4a63      	ldr	r2, [pc, #396]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 800505c:	f023 0304 	bic.w	r3, r3, #4
 8005060:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d015      	beq.n	8005096 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800506a:	f7ff fb97 	bl	800479c <HAL_GetTick>
 800506e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005070:	e00a      	b.n	8005088 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005072:	f7ff fb93 	bl	800479c <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005080:	4293      	cmp	r3, r2
 8005082:	d901      	bls.n	8005088 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e0ab      	b.n	80051e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005088:	4b57      	ldr	r3, [pc, #348]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0ee      	beq.n	8005072 <HAL_RCC_OscConfig+0x37e>
 8005094:	e014      	b.n	80050c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005096:	f7ff fb81 	bl	800479c <HAL_GetTick>
 800509a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800509c:	e00a      	b.n	80050b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800509e:	f7ff fb7d 	bl	800479c <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e095      	b.n	80051e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050b4:	4b4c      	ldr	r3, [pc, #304]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1ee      	bne.n	800509e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80050c0:	7dfb      	ldrb	r3, [r7, #23]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d105      	bne.n	80050d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050c6:	4b48      	ldr	r3, [pc, #288]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	4a47      	ldr	r2, [pc, #284]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 80050cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f000 8081 	beq.w	80051de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050dc:	4b42      	ldr	r3, [pc, #264]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f003 030c 	and.w	r3, r3, #12
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d061      	beq.n	80051ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d146      	bne.n	800517e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050f0:	4b3f      	ldr	r3, [pc, #252]	; (80051f0 <HAL_RCC_OscConfig+0x4fc>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f6:	f7ff fb51 	bl	800479c <HAL_GetTick>
 80050fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050fc:	e008      	b.n	8005110 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050fe:	f7ff fb4d 	bl	800479c <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d901      	bls.n	8005110 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e067      	b.n	80051e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005110:	4b35      	ldr	r3, [pc, #212]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1f0      	bne.n	80050fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005124:	d108      	bne.n	8005138 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005126:	4b30      	ldr	r3, [pc, #192]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	492d      	ldr	r1, [pc, #180]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 8005134:	4313      	orrs	r3, r2
 8005136:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005138:	4b2b      	ldr	r3, [pc, #172]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a19      	ldr	r1, [r3, #32]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	430b      	orrs	r3, r1
 800514a:	4927      	ldr	r1, [pc, #156]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 800514c:	4313      	orrs	r3, r2
 800514e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005150:	4b27      	ldr	r3, [pc, #156]	; (80051f0 <HAL_RCC_OscConfig+0x4fc>)
 8005152:	2201      	movs	r2, #1
 8005154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005156:	f7ff fb21 	bl	800479c <HAL_GetTick>
 800515a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800515c:	e008      	b.n	8005170 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800515e:	f7ff fb1d 	bl	800479c <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d901      	bls.n	8005170 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e037      	b.n	80051e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005170:	4b1d      	ldr	r3, [pc, #116]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0f0      	beq.n	800515e <HAL_RCC_OscConfig+0x46a>
 800517c:	e02f      	b.n	80051de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800517e:	4b1c      	ldr	r3, [pc, #112]	; (80051f0 <HAL_RCC_OscConfig+0x4fc>)
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005184:	f7ff fb0a 	bl	800479c <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800518c:	f7ff fb06 	bl	800479c <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e020      	b.n	80051e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800519e:	4b12      	ldr	r3, [pc, #72]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1f0      	bne.n	800518c <HAL_RCC_OscConfig+0x498>
 80051aa:	e018      	b.n	80051de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e013      	b.n	80051e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80051b8:	4b0b      	ldr	r3, [pc, #44]	; (80051e8 <HAL_RCC_OscConfig+0x4f4>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d106      	bne.n	80051da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d001      	beq.n	80051de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e000      	b.n	80051e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	40021000 	.word	0x40021000
 80051ec:	40007000 	.word	0x40007000
 80051f0:	42420060 	.word	0x42420060

080051f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e0d0      	b.n	80053aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005208:	4b6a      	ldr	r3, [pc, #424]	; (80053b4 <HAL_RCC_ClockConfig+0x1c0>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	429a      	cmp	r2, r3
 8005214:	d910      	bls.n	8005238 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005216:	4b67      	ldr	r3, [pc, #412]	; (80053b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f023 0207 	bic.w	r2, r3, #7
 800521e:	4965      	ldr	r1, [pc, #404]	; (80053b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	4313      	orrs	r3, r2
 8005224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005226:	4b63      	ldr	r3, [pc, #396]	; (80053b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0307 	and.w	r3, r3, #7
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	429a      	cmp	r2, r3
 8005232:	d001      	beq.n	8005238 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e0b8      	b.n	80053aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d020      	beq.n	8005286 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	d005      	beq.n	800525c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005250:	4b59      	ldr	r3, [pc, #356]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	4a58      	ldr	r2, [pc, #352]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005256:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800525a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0308 	and.w	r3, r3, #8
 8005264:	2b00      	cmp	r3, #0
 8005266:	d005      	beq.n	8005274 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005268:	4b53      	ldr	r3, [pc, #332]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	4a52      	ldr	r2, [pc, #328]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 800526e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005272:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005274:	4b50      	ldr	r3, [pc, #320]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	494d      	ldr	r1, [pc, #308]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005282:	4313      	orrs	r3, r2
 8005284:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d040      	beq.n	8005314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d107      	bne.n	80052aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800529a:	4b47      	ldr	r3, [pc, #284]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d115      	bne.n	80052d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e07f      	b.n	80053aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d107      	bne.n	80052c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052b2:	4b41      	ldr	r3, [pc, #260]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d109      	bne.n	80052d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e073      	b.n	80053aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052c2:	4b3d      	ldr	r3, [pc, #244]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e06b      	b.n	80053aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052d2:	4b39      	ldr	r3, [pc, #228]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f023 0203 	bic.w	r2, r3, #3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	4936      	ldr	r1, [pc, #216]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052e4:	f7ff fa5a 	bl	800479c <HAL_GetTick>
 80052e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ea:	e00a      	b.n	8005302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ec:	f7ff fa56 	bl	800479c <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e053      	b.n	80053aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005302:	4b2d      	ldr	r3, [pc, #180]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f003 020c 	and.w	r2, r3, #12
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	429a      	cmp	r2, r3
 8005312:	d1eb      	bne.n	80052ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005314:	4b27      	ldr	r3, [pc, #156]	; (80053b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	429a      	cmp	r2, r3
 8005320:	d210      	bcs.n	8005344 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005322:	4b24      	ldr	r3, [pc, #144]	; (80053b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f023 0207 	bic.w	r2, r3, #7
 800532a:	4922      	ldr	r1, [pc, #136]	; (80053b4 <HAL_RCC_ClockConfig+0x1c0>)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	4313      	orrs	r3, r2
 8005330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005332:	4b20      	ldr	r3, [pc, #128]	; (80053b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d001      	beq.n	8005344 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e032      	b.n	80053aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	d008      	beq.n	8005362 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005350:	4b19      	ldr	r3, [pc, #100]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	4916      	ldr	r1, [pc, #88]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 800535e:	4313      	orrs	r3, r2
 8005360:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0308 	and.w	r3, r3, #8
 800536a:	2b00      	cmp	r3, #0
 800536c:	d009      	beq.n	8005382 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800536e:	4b12      	ldr	r3, [pc, #72]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	490e      	ldr	r1, [pc, #56]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 800537e:	4313      	orrs	r3, r2
 8005380:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005382:	f000 f821 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 8005386:	4601      	mov	r1, r0
 8005388:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	091b      	lsrs	r3, r3, #4
 800538e:	f003 030f 	and.w	r3, r3, #15
 8005392:	4a0a      	ldr	r2, [pc, #40]	; (80053bc <HAL_RCC_ClockConfig+0x1c8>)
 8005394:	5cd3      	ldrb	r3, [r2, r3]
 8005396:	fa21 f303 	lsr.w	r3, r1, r3
 800539a:	4a09      	ldr	r2, [pc, #36]	; (80053c0 <HAL_RCC_ClockConfig+0x1cc>)
 800539c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800539e:	4b09      	ldr	r3, [pc, #36]	; (80053c4 <HAL_RCC_ClockConfig+0x1d0>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7ff f9b8 	bl	8004718 <HAL_InitTick>

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	40022000 	.word	0x40022000
 80053b8:	40021000 	.word	0x40021000
 80053bc:	0800620c 	.word	0x0800620c
 80053c0:	20000000 	.word	0x20000000
 80053c4:	20000004 	.word	0x20000004

080053c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053c8:	b490      	push	{r4, r7}
 80053ca:	b08a      	sub	sp, #40	; 0x28
 80053cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80053ce:	4b2a      	ldr	r3, [pc, #168]	; (8005478 <HAL_RCC_GetSysClockFreq+0xb0>)
 80053d0:	1d3c      	adds	r4, r7, #4
 80053d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80053d8:	4b28      	ldr	r3, [pc, #160]	; (800547c <HAL_RCC_GetSysClockFreq+0xb4>)
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80053de:	2300      	movs	r3, #0
 80053e0:	61fb      	str	r3, [r7, #28]
 80053e2:	2300      	movs	r3, #0
 80053e4:	61bb      	str	r3, [r7, #24]
 80053e6:	2300      	movs	r3, #0
 80053e8:	627b      	str	r3, [r7, #36]	; 0x24
 80053ea:	2300      	movs	r3, #0
 80053ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80053f2:	4b23      	ldr	r3, [pc, #140]	; (8005480 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	f003 030c 	and.w	r3, r3, #12
 80053fe:	2b04      	cmp	r3, #4
 8005400:	d002      	beq.n	8005408 <HAL_RCC_GetSysClockFreq+0x40>
 8005402:	2b08      	cmp	r3, #8
 8005404:	d003      	beq.n	800540e <HAL_RCC_GetSysClockFreq+0x46>
 8005406:	e02d      	b.n	8005464 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005408:	4b1e      	ldr	r3, [pc, #120]	; (8005484 <HAL_RCC_GetSysClockFreq+0xbc>)
 800540a:	623b      	str	r3, [r7, #32]
      break;
 800540c:	e02d      	b.n	800546a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	0c9b      	lsrs	r3, r3, #18
 8005412:	f003 030f 	and.w	r3, r3, #15
 8005416:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800541a:	4413      	add	r3, r2
 800541c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005420:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d013      	beq.n	8005454 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800542c:	4b14      	ldr	r3, [pc, #80]	; (8005480 <HAL_RCC_GetSysClockFreq+0xb8>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	0c5b      	lsrs	r3, r3, #17
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800543a:	4413      	add	r3, r2
 800543c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005440:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	4a0f      	ldr	r2, [pc, #60]	; (8005484 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005446:	fb02 f203 	mul.w	r2, r2, r3
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005450:	627b      	str	r3, [r7, #36]	; 0x24
 8005452:	e004      	b.n	800545e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	4a0c      	ldr	r2, [pc, #48]	; (8005488 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005458:	fb02 f303 	mul.w	r3, r2, r3
 800545c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	623b      	str	r3, [r7, #32]
      break;
 8005462:	e002      	b.n	800546a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005464:	4b07      	ldr	r3, [pc, #28]	; (8005484 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005466:	623b      	str	r3, [r7, #32]
      break;
 8005468:	bf00      	nop
    }
  }
  return sysclockfreq;
 800546a:	6a3b      	ldr	r3, [r7, #32]
}
 800546c:	4618      	mov	r0, r3
 800546e:	3728      	adds	r7, #40	; 0x28
 8005470:	46bd      	mov	sp, r7
 8005472:	bc90      	pop	{r4, r7}
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	080061f8 	.word	0x080061f8
 800547c:	08006208 	.word	0x08006208
 8005480:	40021000 	.word	0x40021000
 8005484:	007a1200 	.word	0x007a1200
 8005488:	003d0900 	.word	0x003d0900

0800548c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005490:	4b02      	ldr	r3, [pc, #8]	; (800549c <HAL_RCC_GetHCLKFreq+0x10>)
 8005492:	681b      	ldr	r3, [r3, #0]
}
 8005494:	4618      	mov	r0, r3
 8005496:	46bd      	mov	sp, r7
 8005498:	bc80      	pop	{r7}
 800549a:	4770      	bx	lr
 800549c:	20000000 	.word	0x20000000

080054a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054a4:	f7ff fff2 	bl	800548c <HAL_RCC_GetHCLKFreq>
 80054a8:	4601      	mov	r1, r0
 80054aa:	4b05      	ldr	r3, [pc, #20]	; (80054c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	0a1b      	lsrs	r3, r3, #8
 80054b0:	f003 0307 	and.w	r3, r3, #7
 80054b4:	4a03      	ldr	r2, [pc, #12]	; (80054c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054b6:	5cd3      	ldrb	r3, [r2, r3]
 80054b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80054bc:	4618      	mov	r0, r3
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	40021000 	.word	0x40021000
 80054c4:	0800621c 	.word	0x0800621c

080054c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054cc:	f7ff ffde 	bl	800548c <HAL_RCC_GetHCLKFreq>
 80054d0:	4601      	mov	r1, r0
 80054d2:	4b05      	ldr	r3, [pc, #20]	; (80054e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	0adb      	lsrs	r3, r3, #11
 80054d8:	f003 0307 	and.w	r3, r3, #7
 80054dc:	4a03      	ldr	r2, [pc, #12]	; (80054ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80054de:	5cd3      	ldrb	r3, [r2, r3]
 80054e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	40021000 	.word	0x40021000
 80054ec:	0800621c 	.word	0x0800621c

080054f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80054f8:	4b0a      	ldr	r3, [pc, #40]	; (8005524 <RCC_Delay+0x34>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a0a      	ldr	r2, [pc, #40]	; (8005528 <RCC_Delay+0x38>)
 80054fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005502:	0a5b      	lsrs	r3, r3, #9
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	fb02 f303 	mul.w	r3, r2, r3
 800550a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800550c:	bf00      	nop
  }
  while (Delay --);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	1e5a      	subs	r2, r3, #1
 8005512:	60fa      	str	r2, [r7, #12]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1f9      	bne.n	800550c <RCC_Delay+0x1c>
}
 8005518:	bf00      	nop
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	bc80      	pop	{r7}
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	20000000 	.word	0x20000000
 8005528:	10624dd3 	.word	0x10624dd3

0800552c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e03f      	b.n	80055be <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d106      	bne.n	8005558 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7fe ffa0 	bl	8004498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2224      	movs	r2, #36	; 0x24
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68da      	ldr	r2, [r3, #12]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800556e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f905 	bl	8005780 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	691a      	ldr	r2, [r3, #16]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005584:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	695a      	ldr	r2, [r3, #20]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005594:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68da      	ldr	r2, [r3, #12]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2220      	movs	r2, #32
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2220      	movs	r2, #32
 80055b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b08a      	sub	sp, #40	; 0x28
 80055ca:	af02      	add	r7, sp, #8
 80055cc:	60f8      	str	r0, [r7, #12]
 80055ce:	60b9      	str	r1, [r7, #8]
 80055d0:	603b      	str	r3, [r7, #0]
 80055d2:	4613      	mov	r3, r2
 80055d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055d6:	2300      	movs	r3, #0
 80055d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b20      	cmp	r3, #32
 80055e4:	d17c      	bne.n	80056e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d002      	beq.n	80055f2 <HAL_UART_Transmit+0x2c>
 80055ec:	88fb      	ldrh	r3, [r7, #6]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e075      	b.n	80056e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d101      	bne.n	8005604 <HAL_UART_Transmit+0x3e>
 8005600:	2302      	movs	r3, #2
 8005602:	e06e      	b.n	80056e2 <HAL_UART_Transmit+0x11c>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2221      	movs	r2, #33	; 0x21
 8005616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800561a:	f7ff f8bf 	bl	800479c <HAL_GetTick>
 800561e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	88fa      	ldrh	r2, [r7, #6]
 8005624:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	88fa      	ldrh	r2, [r7, #6]
 800562a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005634:	d108      	bne.n	8005648 <HAL_UART_Transmit+0x82>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d104      	bne.n	8005648 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800563e:	2300      	movs	r3, #0
 8005640:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	61bb      	str	r3, [r7, #24]
 8005646:	e003      	b.n	8005650 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800564c:	2300      	movs	r3, #0
 800564e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005658:	e02a      	b.n	80056b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	2200      	movs	r2, #0
 8005662:	2180      	movs	r1, #128	; 0x80
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 f840 	bl	80056ea <UART_WaitOnFlagUntilTimeout>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e036      	b.n	80056e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10b      	bne.n	8005692 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	461a      	mov	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005688:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	3302      	adds	r3, #2
 800568e:	61bb      	str	r3, [r7, #24]
 8005690:	e007      	b.n	80056a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	781a      	ldrb	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	3301      	adds	r3, #1
 80056a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	3b01      	subs	r3, #1
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1cf      	bne.n	800565a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	2200      	movs	r2, #0
 80056c2:	2140      	movs	r1, #64	; 0x40
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 f810 	bl	80056ea <UART_WaitOnFlagUntilTimeout>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e006      	b.n	80056e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2220      	movs	r2, #32
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80056dc:	2300      	movs	r3, #0
 80056de:	e000      	b.n	80056e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80056e0:	2302      	movs	r3, #2
  }
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3720      	adds	r7, #32
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b084      	sub	sp, #16
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	60f8      	str	r0, [r7, #12]
 80056f2:	60b9      	str	r1, [r7, #8]
 80056f4:	603b      	str	r3, [r7, #0]
 80056f6:	4613      	mov	r3, r2
 80056f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056fa:	e02c      	b.n	8005756 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005702:	d028      	beq.n	8005756 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d007      	beq.n	800571a <UART_WaitOnFlagUntilTimeout+0x30>
 800570a:	f7ff f847 	bl	800479c <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	429a      	cmp	r2, r3
 8005718:	d21d      	bcs.n	8005756 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68da      	ldr	r2, [r3, #12]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005728:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	695a      	ldr	r2, [r3, #20]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0201 	bic.w	r2, r2, #1
 8005738:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2220      	movs	r2, #32
 800573e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2220      	movs	r2, #32
 8005746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e00f      	b.n	8005776 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	4013      	ands	r3, r2
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	429a      	cmp	r2, r3
 8005764:	bf0c      	ite	eq
 8005766:	2301      	moveq	r3, #1
 8005768:	2300      	movne	r3, #0
 800576a:	b2db      	uxtb	r3, r3
 800576c:	461a      	mov	r2, r3
 800576e:	79fb      	ldrb	r3, [r7, #7]
 8005770:	429a      	cmp	r2, r3
 8005772:	d0c3      	beq.n	80056fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
	...

08005780 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68da      	ldr	r2, [r3, #12]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	689a      	ldr	r2, [r3, #8]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	431a      	orrs	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80057ba:	f023 030c 	bic.w	r3, r3, #12
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	6812      	ldr	r2, [r2, #0]
 80057c2:	68b9      	ldr	r1, [r7, #8]
 80057c4:	430b      	orrs	r3, r1
 80057c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	699a      	ldr	r2, [r3, #24]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a2c      	ldr	r2, [pc, #176]	; (8005894 <UART_SetConfig+0x114>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d103      	bne.n	80057f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80057e8:	f7ff fe6e 	bl	80054c8 <HAL_RCC_GetPCLK2Freq>
 80057ec:	60f8      	str	r0, [r7, #12]
 80057ee:	e002      	b.n	80057f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80057f0:	f7ff fe56 	bl	80054a0 <HAL_RCC_GetPCLK1Freq>
 80057f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	4613      	mov	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	009a      	lsls	r2, r3, #2
 8005800:	441a      	add	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	fbb2 f3f3 	udiv	r3, r2, r3
 800580c:	4a22      	ldr	r2, [pc, #136]	; (8005898 <UART_SetConfig+0x118>)
 800580e:	fba2 2303 	umull	r2, r3, r2, r3
 8005812:	095b      	lsrs	r3, r3, #5
 8005814:	0119      	lsls	r1, r3, #4
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	4613      	mov	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	009a      	lsls	r2, r3, #2
 8005820:	441a      	add	r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	fbb2 f2f3 	udiv	r2, r2, r3
 800582c:	4b1a      	ldr	r3, [pc, #104]	; (8005898 <UART_SetConfig+0x118>)
 800582e:	fba3 0302 	umull	r0, r3, r3, r2
 8005832:	095b      	lsrs	r3, r3, #5
 8005834:	2064      	movs	r0, #100	; 0x64
 8005836:	fb00 f303 	mul.w	r3, r0, r3
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	011b      	lsls	r3, r3, #4
 800583e:	3332      	adds	r3, #50	; 0x32
 8005840:	4a15      	ldr	r2, [pc, #84]	; (8005898 <UART_SetConfig+0x118>)
 8005842:	fba2 2303 	umull	r2, r3, r2, r3
 8005846:	095b      	lsrs	r3, r3, #5
 8005848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800584c:	4419      	add	r1, r3
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4613      	mov	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	009a      	lsls	r2, r3, #2
 8005858:	441a      	add	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	fbb2 f2f3 	udiv	r2, r2, r3
 8005864:	4b0c      	ldr	r3, [pc, #48]	; (8005898 <UART_SetConfig+0x118>)
 8005866:	fba3 0302 	umull	r0, r3, r3, r2
 800586a:	095b      	lsrs	r3, r3, #5
 800586c:	2064      	movs	r0, #100	; 0x64
 800586e:	fb00 f303 	mul.w	r3, r0, r3
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	011b      	lsls	r3, r3, #4
 8005876:	3332      	adds	r3, #50	; 0x32
 8005878:	4a07      	ldr	r2, [pc, #28]	; (8005898 <UART_SetConfig+0x118>)
 800587a:	fba2 2303 	umull	r2, r3, r2, r3
 800587e:	095b      	lsrs	r3, r3, #5
 8005880:	f003 020f 	and.w	r2, r3, #15
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	440a      	add	r2, r1
 800588a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800588c:	bf00      	nop
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	40013800 	.word	0x40013800
 8005898:	51eb851f 	.word	0x51eb851f

0800589c <__errno>:
 800589c:	4b01      	ldr	r3, [pc, #4]	; (80058a4 <__errno+0x8>)
 800589e:	6818      	ldr	r0, [r3, #0]
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	2000000c 	.word	0x2000000c

080058a8 <__libc_init_array>:
 80058a8:	b570      	push	{r4, r5, r6, lr}
 80058aa:	2500      	movs	r5, #0
 80058ac:	4e0c      	ldr	r6, [pc, #48]	; (80058e0 <__libc_init_array+0x38>)
 80058ae:	4c0d      	ldr	r4, [pc, #52]	; (80058e4 <__libc_init_array+0x3c>)
 80058b0:	1ba4      	subs	r4, r4, r6
 80058b2:	10a4      	asrs	r4, r4, #2
 80058b4:	42a5      	cmp	r5, r4
 80058b6:	d109      	bne.n	80058cc <__libc_init_array+0x24>
 80058b8:	f000 fc88 	bl	80061cc <_init>
 80058bc:	2500      	movs	r5, #0
 80058be:	4e0a      	ldr	r6, [pc, #40]	; (80058e8 <__libc_init_array+0x40>)
 80058c0:	4c0a      	ldr	r4, [pc, #40]	; (80058ec <__libc_init_array+0x44>)
 80058c2:	1ba4      	subs	r4, r4, r6
 80058c4:	10a4      	asrs	r4, r4, #2
 80058c6:	42a5      	cmp	r5, r4
 80058c8:	d105      	bne.n	80058d6 <__libc_init_array+0x2e>
 80058ca:	bd70      	pop	{r4, r5, r6, pc}
 80058cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058d0:	4798      	blx	r3
 80058d2:	3501      	adds	r5, #1
 80058d4:	e7ee      	b.n	80058b4 <__libc_init_array+0xc>
 80058d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058da:	4798      	blx	r3
 80058dc:	3501      	adds	r5, #1
 80058de:	e7f2      	b.n	80058c6 <__libc_init_array+0x1e>
 80058e0:	08006288 	.word	0x08006288
 80058e4:	08006288 	.word	0x08006288
 80058e8:	08006288 	.word	0x08006288
 80058ec:	0800628c 	.word	0x0800628c

080058f0 <memset>:
 80058f0:	4603      	mov	r3, r0
 80058f2:	4402      	add	r2, r0
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d100      	bne.n	80058fa <memset+0xa>
 80058f8:	4770      	bx	lr
 80058fa:	f803 1b01 	strb.w	r1, [r3], #1
 80058fe:	e7f9      	b.n	80058f4 <memset+0x4>

08005900 <_puts_r>:
 8005900:	b570      	push	{r4, r5, r6, lr}
 8005902:	460e      	mov	r6, r1
 8005904:	4605      	mov	r5, r0
 8005906:	b118      	cbz	r0, 8005910 <_puts_r+0x10>
 8005908:	6983      	ldr	r3, [r0, #24]
 800590a:	b90b      	cbnz	r3, 8005910 <_puts_r+0x10>
 800590c:	f000 fa0c 	bl	8005d28 <__sinit>
 8005910:	69ab      	ldr	r3, [r5, #24]
 8005912:	68ac      	ldr	r4, [r5, #8]
 8005914:	b913      	cbnz	r3, 800591c <_puts_r+0x1c>
 8005916:	4628      	mov	r0, r5
 8005918:	f000 fa06 	bl	8005d28 <__sinit>
 800591c:	4b23      	ldr	r3, [pc, #140]	; (80059ac <_puts_r+0xac>)
 800591e:	429c      	cmp	r4, r3
 8005920:	d117      	bne.n	8005952 <_puts_r+0x52>
 8005922:	686c      	ldr	r4, [r5, #4]
 8005924:	89a3      	ldrh	r3, [r4, #12]
 8005926:	071b      	lsls	r3, r3, #28
 8005928:	d51d      	bpl.n	8005966 <_puts_r+0x66>
 800592a:	6923      	ldr	r3, [r4, #16]
 800592c:	b1db      	cbz	r3, 8005966 <_puts_r+0x66>
 800592e:	3e01      	subs	r6, #1
 8005930:	68a3      	ldr	r3, [r4, #8]
 8005932:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005936:	3b01      	subs	r3, #1
 8005938:	60a3      	str	r3, [r4, #8]
 800593a:	b9e9      	cbnz	r1, 8005978 <_puts_r+0x78>
 800593c:	2b00      	cmp	r3, #0
 800593e:	da2e      	bge.n	800599e <_puts_r+0x9e>
 8005940:	4622      	mov	r2, r4
 8005942:	210a      	movs	r1, #10
 8005944:	4628      	mov	r0, r5
 8005946:	f000 f83f 	bl	80059c8 <__swbuf_r>
 800594a:	3001      	adds	r0, #1
 800594c:	d011      	beq.n	8005972 <_puts_r+0x72>
 800594e:	200a      	movs	r0, #10
 8005950:	e011      	b.n	8005976 <_puts_r+0x76>
 8005952:	4b17      	ldr	r3, [pc, #92]	; (80059b0 <_puts_r+0xb0>)
 8005954:	429c      	cmp	r4, r3
 8005956:	d101      	bne.n	800595c <_puts_r+0x5c>
 8005958:	68ac      	ldr	r4, [r5, #8]
 800595a:	e7e3      	b.n	8005924 <_puts_r+0x24>
 800595c:	4b15      	ldr	r3, [pc, #84]	; (80059b4 <_puts_r+0xb4>)
 800595e:	429c      	cmp	r4, r3
 8005960:	bf08      	it	eq
 8005962:	68ec      	ldreq	r4, [r5, #12]
 8005964:	e7de      	b.n	8005924 <_puts_r+0x24>
 8005966:	4621      	mov	r1, r4
 8005968:	4628      	mov	r0, r5
 800596a:	f000 f87f 	bl	8005a6c <__swsetup_r>
 800596e:	2800      	cmp	r0, #0
 8005970:	d0dd      	beq.n	800592e <_puts_r+0x2e>
 8005972:	f04f 30ff 	mov.w	r0, #4294967295
 8005976:	bd70      	pop	{r4, r5, r6, pc}
 8005978:	2b00      	cmp	r3, #0
 800597a:	da04      	bge.n	8005986 <_puts_r+0x86>
 800597c:	69a2      	ldr	r2, [r4, #24]
 800597e:	429a      	cmp	r2, r3
 8005980:	dc06      	bgt.n	8005990 <_puts_r+0x90>
 8005982:	290a      	cmp	r1, #10
 8005984:	d004      	beq.n	8005990 <_puts_r+0x90>
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	1c5a      	adds	r2, r3, #1
 800598a:	6022      	str	r2, [r4, #0]
 800598c:	7019      	strb	r1, [r3, #0]
 800598e:	e7cf      	b.n	8005930 <_puts_r+0x30>
 8005990:	4622      	mov	r2, r4
 8005992:	4628      	mov	r0, r5
 8005994:	f000 f818 	bl	80059c8 <__swbuf_r>
 8005998:	3001      	adds	r0, #1
 800599a:	d1c9      	bne.n	8005930 <_puts_r+0x30>
 800599c:	e7e9      	b.n	8005972 <_puts_r+0x72>
 800599e:	200a      	movs	r0, #10
 80059a0:	6823      	ldr	r3, [r4, #0]
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	6022      	str	r2, [r4, #0]
 80059a6:	7018      	strb	r0, [r3, #0]
 80059a8:	e7e5      	b.n	8005976 <_puts_r+0x76>
 80059aa:	bf00      	nop
 80059ac:	08006248 	.word	0x08006248
 80059b0:	08006268 	.word	0x08006268
 80059b4:	08006228 	.word	0x08006228

080059b8 <puts>:
 80059b8:	4b02      	ldr	r3, [pc, #8]	; (80059c4 <puts+0xc>)
 80059ba:	4601      	mov	r1, r0
 80059bc:	6818      	ldr	r0, [r3, #0]
 80059be:	f7ff bf9f 	b.w	8005900 <_puts_r>
 80059c2:	bf00      	nop
 80059c4:	2000000c 	.word	0x2000000c

080059c8 <__swbuf_r>:
 80059c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ca:	460e      	mov	r6, r1
 80059cc:	4614      	mov	r4, r2
 80059ce:	4605      	mov	r5, r0
 80059d0:	b118      	cbz	r0, 80059da <__swbuf_r+0x12>
 80059d2:	6983      	ldr	r3, [r0, #24]
 80059d4:	b90b      	cbnz	r3, 80059da <__swbuf_r+0x12>
 80059d6:	f000 f9a7 	bl	8005d28 <__sinit>
 80059da:	4b21      	ldr	r3, [pc, #132]	; (8005a60 <__swbuf_r+0x98>)
 80059dc:	429c      	cmp	r4, r3
 80059de:	d12a      	bne.n	8005a36 <__swbuf_r+0x6e>
 80059e0:	686c      	ldr	r4, [r5, #4]
 80059e2:	69a3      	ldr	r3, [r4, #24]
 80059e4:	60a3      	str	r3, [r4, #8]
 80059e6:	89a3      	ldrh	r3, [r4, #12]
 80059e8:	071a      	lsls	r2, r3, #28
 80059ea:	d52e      	bpl.n	8005a4a <__swbuf_r+0x82>
 80059ec:	6923      	ldr	r3, [r4, #16]
 80059ee:	b363      	cbz	r3, 8005a4a <__swbuf_r+0x82>
 80059f0:	6923      	ldr	r3, [r4, #16]
 80059f2:	6820      	ldr	r0, [r4, #0]
 80059f4:	b2f6      	uxtb	r6, r6
 80059f6:	1ac0      	subs	r0, r0, r3
 80059f8:	6963      	ldr	r3, [r4, #20]
 80059fa:	4637      	mov	r7, r6
 80059fc:	4283      	cmp	r3, r0
 80059fe:	dc04      	bgt.n	8005a0a <__swbuf_r+0x42>
 8005a00:	4621      	mov	r1, r4
 8005a02:	4628      	mov	r0, r5
 8005a04:	f000 f926 	bl	8005c54 <_fflush_r>
 8005a08:	bb28      	cbnz	r0, 8005a56 <__swbuf_r+0x8e>
 8005a0a:	68a3      	ldr	r3, [r4, #8]
 8005a0c:	3001      	adds	r0, #1
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	60a3      	str	r3, [r4, #8]
 8005a12:	6823      	ldr	r3, [r4, #0]
 8005a14:	1c5a      	adds	r2, r3, #1
 8005a16:	6022      	str	r2, [r4, #0]
 8005a18:	701e      	strb	r6, [r3, #0]
 8005a1a:	6963      	ldr	r3, [r4, #20]
 8005a1c:	4283      	cmp	r3, r0
 8005a1e:	d004      	beq.n	8005a2a <__swbuf_r+0x62>
 8005a20:	89a3      	ldrh	r3, [r4, #12]
 8005a22:	07db      	lsls	r3, r3, #31
 8005a24:	d519      	bpl.n	8005a5a <__swbuf_r+0x92>
 8005a26:	2e0a      	cmp	r6, #10
 8005a28:	d117      	bne.n	8005a5a <__swbuf_r+0x92>
 8005a2a:	4621      	mov	r1, r4
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	f000 f911 	bl	8005c54 <_fflush_r>
 8005a32:	b190      	cbz	r0, 8005a5a <__swbuf_r+0x92>
 8005a34:	e00f      	b.n	8005a56 <__swbuf_r+0x8e>
 8005a36:	4b0b      	ldr	r3, [pc, #44]	; (8005a64 <__swbuf_r+0x9c>)
 8005a38:	429c      	cmp	r4, r3
 8005a3a:	d101      	bne.n	8005a40 <__swbuf_r+0x78>
 8005a3c:	68ac      	ldr	r4, [r5, #8]
 8005a3e:	e7d0      	b.n	80059e2 <__swbuf_r+0x1a>
 8005a40:	4b09      	ldr	r3, [pc, #36]	; (8005a68 <__swbuf_r+0xa0>)
 8005a42:	429c      	cmp	r4, r3
 8005a44:	bf08      	it	eq
 8005a46:	68ec      	ldreq	r4, [r5, #12]
 8005a48:	e7cb      	b.n	80059e2 <__swbuf_r+0x1a>
 8005a4a:	4621      	mov	r1, r4
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	f000 f80d 	bl	8005a6c <__swsetup_r>
 8005a52:	2800      	cmp	r0, #0
 8005a54:	d0cc      	beq.n	80059f0 <__swbuf_r+0x28>
 8005a56:	f04f 37ff 	mov.w	r7, #4294967295
 8005a5a:	4638      	mov	r0, r7
 8005a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	08006248 	.word	0x08006248
 8005a64:	08006268 	.word	0x08006268
 8005a68:	08006228 	.word	0x08006228

08005a6c <__swsetup_r>:
 8005a6c:	4b32      	ldr	r3, [pc, #200]	; (8005b38 <__swsetup_r+0xcc>)
 8005a6e:	b570      	push	{r4, r5, r6, lr}
 8005a70:	681d      	ldr	r5, [r3, #0]
 8005a72:	4606      	mov	r6, r0
 8005a74:	460c      	mov	r4, r1
 8005a76:	b125      	cbz	r5, 8005a82 <__swsetup_r+0x16>
 8005a78:	69ab      	ldr	r3, [r5, #24]
 8005a7a:	b913      	cbnz	r3, 8005a82 <__swsetup_r+0x16>
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	f000 f953 	bl	8005d28 <__sinit>
 8005a82:	4b2e      	ldr	r3, [pc, #184]	; (8005b3c <__swsetup_r+0xd0>)
 8005a84:	429c      	cmp	r4, r3
 8005a86:	d10f      	bne.n	8005aa8 <__swsetup_r+0x3c>
 8005a88:	686c      	ldr	r4, [r5, #4]
 8005a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	0715      	lsls	r5, r2, #28
 8005a92:	d42c      	bmi.n	8005aee <__swsetup_r+0x82>
 8005a94:	06d0      	lsls	r0, r2, #27
 8005a96:	d411      	bmi.n	8005abc <__swsetup_r+0x50>
 8005a98:	2209      	movs	r2, #9
 8005a9a:	6032      	str	r2, [r6, #0]
 8005a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aa0:	81a3      	strh	r3, [r4, #12]
 8005aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa6:	e03e      	b.n	8005b26 <__swsetup_r+0xba>
 8005aa8:	4b25      	ldr	r3, [pc, #148]	; (8005b40 <__swsetup_r+0xd4>)
 8005aaa:	429c      	cmp	r4, r3
 8005aac:	d101      	bne.n	8005ab2 <__swsetup_r+0x46>
 8005aae:	68ac      	ldr	r4, [r5, #8]
 8005ab0:	e7eb      	b.n	8005a8a <__swsetup_r+0x1e>
 8005ab2:	4b24      	ldr	r3, [pc, #144]	; (8005b44 <__swsetup_r+0xd8>)
 8005ab4:	429c      	cmp	r4, r3
 8005ab6:	bf08      	it	eq
 8005ab8:	68ec      	ldreq	r4, [r5, #12]
 8005aba:	e7e6      	b.n	8005a8a <__swsetup_r+0x1e>
 8005abc:	0751      	lsls	r1, r2, #29
 8005abe:	d512      	bpl.n	8005ae6 <__swsetup_r+0x7a>
 8005ac0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ac2:	b141      	cbz	r1, 8005ad6 <__swsetup_r+0x6a>
 8005ac4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ac8:	4299      	cmp	r1, r3
 8005aca:	d002      	beq.n	8005ad2 <__swsetup_r+0x66>
 8005acc:	4630      	mov	r0, r6
 8005ace:	f000 fa19 	bl	8005f04 <_free_r>
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	6363      	str	r3, [r4, #52]	; 0x34
 8005ad6:	89a3      	ldrh	r3, [r4, #12]
 8005ad8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005adc:	81a3      	strh	r3, [r4, #12]
 8005ade:	2300      	movs	r3, #0
 8005ae0:	6063      	str	r3, [r4, #4]
 8005ae2:	6923      	ldr	r3, [r4, #16]
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	89a3      	ldrh	r3, [r4, #12]
 8005ae8:	f043 0308 	orr.w	r3, r3, #8
 8005aec:	81a3      	strh	r3, [r4, #12]
 8005aee:	6923      	ldr	r3, [r4, #16]
 8005af0:	b94b      	cbnz	r3, 8005b06 <__swsetup_r+0x9a>
 8005af2:	89a3      	ldrh	r3, [r4, #12]
 8005af4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005afc:	d003      	beq.n	8005b06 <__swsetup_r+0x9a>
 8005afe:	4621      	mov	r1, r4
 8005b00:	4630      	mov	r0, r6
 8005b02:	f000 f9bf 	bl	8005e84 <__smakebuf_r>
 8005b06:	89a2      	ldrh	r2, [r4, #12]
 8005b08:	f012 0301 	ands.w	r3, r2, #1
 8005b0c:	d00c      	beq.n	8005b28 <__swsetup_r+0xbc>
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60a3      	str	r3, [r4, #8]
 8005b12:	6963      	ldr	r3, [r4, #20]
 8005b14:	425b      	negs	r3, r3
 8005b16:	61a3      	str	r3, [r4, #24]
 8005b18:	6923      	ldr	r3, [r4, #16]
 8005b1a:	b953      	cbnz	r3, 8005b32 <__swsetup_r+0xc6>
 8005b1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b20:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005b24:	d1ba      	bne.n	8005a9c <__swsetup_r+0x30>
 8005b26:	bd70      	pop	{r4, r5, r6, pc}
 8005b28:	0792      	lsls	r2, r2, #30
 8005b2a:	bf58      	it	pl
 8005b2c:	6963      	ldrpl	r3, [r4, #20]
 8005b2e:	60a3      	str	r3, [r4, #8]
 8005b30:	e7f2      	b.n	8005b18 <__swsetup_r+0xac>
 8005b32:	2000      	movs	r0, #0
 8005b34:	e7f7      	b.n	8005b26 <__swsetup_r+0xba>
 8005b36:	bf00      	nop
 8005b38:	2000000c 	.word	0x2000000c
 8005b3c:	08006248 	.word	0x08006248
 8005b40:	08006268 	.word	0x08006268
 8005b44:	08006228 	.word	0x08006228

08005b48 <__sflush_r>:
 8005b48:	898a      	ldrh	r2, [r1, #12]
 8005b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b4e:	4605      	mov	r5, r0
 8005b50:	0710      	lsls	r0, r2, #28
 8005b52:	460c      	mov	r4, r1
 8005b54:	d458      	bmi.n	8005c08 <__sflush_r+0xc0>
 8005b56:	684b      	ldr	r3, [r1, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	dc05      	bgt.n	8005b68 <__sflush_r+0x20>
 8005b5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	dc02      	bgt.n	8005b68 <__sflush_r+0x20>
 8005b62:	2000      	movs	r0, #0
 8005b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b6a:	2e00      	cmp	r6, #0
 8005b6c:	d0f9      	beq.n	8005b62 <__sflush_r+0x1a>
 8005b6e:	2300      	movs	r3, #0
 8005b70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b74:	682f      	ldr	r7, [r5, #0]
 8005b76:	6a21      	ldr	r1, [r4, #32]
 8005b78:	602b      	str	r3, [r5, #0]
 8005b7a:	d032      	beq.n	8005be2 <__sflush_r+0x9a>
 8005b7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b7e:	89a3      	ldrh	r3, [r4, #12]
 8005b80:	075a      	lsls	r2, r3, #29
 8005b82:	d505      	bpl.n	8005b90 <__sflush_r+0x48>
 8005b84:	6863      	ldr	r3, [r4, #4]
 8005b86:	1ac0      	subs	r0, r0, r3
 8005b88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b8a:	b10b      	cbz	r3, 8005b90 <__sflush_r+0x48>
 8005b8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b8e:	1ac0      	subs	r0, r0, r3
 8005b90:	2300      	movs	r3, #0
 8005b92:	4602      	mov	r2, r0
 8005b94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b96:	6a21      	ldr	r1, [r4, #32]
 8005b98:	4628      	mov	r0, r5
 8005b9a:	47b0      	blx	r6
 8005b9c:	1c43      	adds	r3, r0, #1
 8005b9e:	89a3      	ldrh	r3, [r4, #12]
 8005ba0:	d106      	bne.n	8005bb0 <__sflush_r+0x68>
 8005ba2:	6829      	ldr	r1, [r5, #0]
 8005ba4:	291d      	cmp	r1, #29
 8005ba6:	d848      	bhi.n	8005c3a <__sflush_r+0xf2>
 8005ba8:	4a29      	ldr	r2, [pc, #164]	; (8005c50 <__sflush_r+0x108>)
 8005baa:	40ca      	lsrs	r2, r1
 8005bac:	07d6      	lsls	r6, r2, #31
 8005bae:	d544      	bpl.n	8005c3a <__sflush_r+0xf2>
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	6062      	str	r2, [r4, #4]
 8005bb4:	6922      	ldr	r2, [r4, #16]
 8005bb6:	04d9      	lsls	r1, r3, #19
 8005bb8:	6022      	str	r2, [r4, #0]
 8005bba:	d504      	bpl.n	8005bc6 <__sflush_r+0x7e>
 8005bbc:	1c42      	adds	r2, r0, #1
 8005bbe:	d101      	bne.n	8005bc4 <__sflush_r+0x7c>
 8005bc0:	682b      	ldr	r3, [r5, #0]
 8005bc2:	b903      	cbnz	r3, 8005bc6 <__sflush_r+0x7e>
 8005bc4:	6560      	str	r0, [r4, #84]	; 0x54
 8005bc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bc8:	602f      	str	r7, [r5, #0]
 8005bca:	2900      	cmp	r1, #0
 8005bcc:	d0c9      	beq.n	8005b62 <__sflush_r+0x1a>
 8005bce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bd2:	4299      	cmp	r1, r3
 8005bd4:	d002      	beq.n	8005bdc <__sflush_r+0x94>
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	f000 f994 	bl	8005f04 <_free_r>
 8005bdc:	2000      	movs	r0, #0
 8005bde:	6360      	str	r0, [r4, #52]	; 0x34
 8005be0:	e7c0      	b.n	8005b64 <__sflush_r+0x1c>
 8005be2:	2301      	movs	r3, #1
 8005be4:	4628      	mov	r0, r5
 8005be6:	47b0      	blx	r6
 8005be8:	1c41      	adds	r1, r0, #1
 8005bea:	d1c8      	bne.n	8005b7e <__sflush_r+0x36>
 8005bec:	682b      	ldr	r3, [r5, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d0c5      	beq.n	8005b7e <__sflush_r+0x36>
 8005bf2:	2b1d      	cmp	r3, #29
 8005bf4:	d001      	beq.n	8005bfa <__sflush_r+0xb2>
 8005bf6:	2b16      	cmp	r3, #22
 8005bf8:	d101      	bne.n	8005bfe <__sflush_r+0xb6>
 8005bfa:	602f      	str	r7, [r5, #0]
 8005bfc:	e7b1      	b.n	8005b62 <__sflush_r+0x1a>
 8005bfe:	89a3      	ldrh	r3, [r4, #12]
 8005c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c04:	81a3      	strh	r3, [r4, #12]
 8005c06:	e7ad      	b.n	8005b64 <__sflush_r+0x1c>
 8005c08:	690f      	ldr	r7, [r1, #16]
 8005c0a:	2f00      	cmp	r7, #0
 8005c0c:	d0a9      	beq.n	8005b62 <__sflush_r+0x1a>
 8005c0e:	0793      	lsls	r3, r2, #30
 8005c10:	bf18      	it	ne
 8005c12:	2300      	movne	r3, #0
 8005c14:	680e      	ldr	r6, [r1, #0]
 8005c16:	bf08      	it	eq
 8005c18:	694b      	ldreq	r3, [r1, #20]
 8005c1a:	eba6 0807 	sub.w	r8, r6, r7
 8005c1e:	600f      	str	r7, [r1, #0]
 8005c20:	608b      	str	r3, [r1, #8]
 8005c22:	f1b8 0f00 	cmp.w	r8, #0
 8005c26:	dd9c      	ble.n	8005b62 <__sflush_r+0x1a>
 8005c28:	4643      	mov	r3, r8
 8005c2a:	463a      	mov	r2, r7
 8005c2c:	6a21      	ldr	r1, [r4, #32]
 8005c2e:	4628      	mov	r0, r5
 8005c30:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c32:	47b0      	blx	r6
 8005c34:	2800      	cmp	r0, #0
 8005c36:	dc06      	bgt.n	8005c46 <__sflush_r+0xfe>
 8005c38:	89a3      	ldrh	r3, [r4, #12]
 8005c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c3e:	81a3      	strh	r3, [r4, #12]
 8005c40:	f04f 30ff 	mov.w	r0, #4294967295
 8005c44:	e78e      	b.n	8005b64 <__sflush_r+0x1c>
 8005c46:	4407      	add	r7, r0
 8005c48:	eba8 0800 	sub.w	r8, r8, r0
 8005c4c:	e7e9      	b.n	8005c22 <__sflush_r+0xda>
 8005c4e:	bf00      	nop
 8005c50:	20400001 	.word	0x20400001

08005c54 <_fflush_r>:
 8005c54:	b538      	push	{r3, r4, r5, lr}
 8005c56:	690b      	ldr	r3, [r1, #16]
 8005c58:	4605      	mov	r5, r0
 8005c5a:	460c      	mov	r4, r1
 8005c5c:	b1db      	cbz	r3, 8005c96 <_fflush_r+0x42>
 8005c5e:	b118      	cbz	r0, 8005c68 <_fflush_r+0x14>
 8005c60:	6983      	ldr	r3, [r0, #24]
 8005c62:	b90b      	cbnz	r3, 8005c68 <_fflush_r+0x14>
 8005c64:	f000 f860 	bl	8005d28 <__sinit>
 8005c68:	4b0c      	ldr	r3, [pc, #48]	; (8005c9c <_fflush_r+0x48>)
 8005c6a:	429c      	cmp	r4, r3
 8005c6c:	d109      	bne.n	8005c82 <_fflush_r+0x2e>
 8005c6e:	686c      	ldr	r4, [r5, #4]
 8005c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c74:	b17b      	cbz	r3, 8005c96 <_fflush_r+0x42>
 8005c76:	4621      	mov	r1, r4
 8005c78:	4628      	mov	r0, r5
 8005c7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c7e:	f7ff bf63 	b.w	8005b48 <__sflush_r>
 8005c82:	4b07      	ldr	r3, [pc, #28]	; (8005ca0 <_fflush_r+0x4c>)
 8005c84:	429c      	cmp	r4, r3
 8005c86:	d101      	bne.n	8005c8c <_fflush_r+0x38>
 8005c88:	68ac      	ldr	r4, [r5, #8]
 8005c8a:	e7f1      	b.n	8005c70 <_fflush_r+0x1c>
 8005c8c:	4b05      	ldr	r3, [pc, #20]	; (8005ca4 <_fflush_r+0x50>)
 8005c8e:	429c      	cmp	r4, r3
 8005c90:	bf08      	it	eq
 8005c92:	68ec      	ldreq	r4, [r5, #12]
 8005c94:	e7ec      	b.n	8005c70 <_fflush_r+0x1c>
 8005c96:	2000      	movs	r0, #0
 8005c98:	bd38      	pop	{r3, r4, r5, pc}
 8005c9a:	bf00      	nop
 8005c9c:	08006248 	.word	0x08006248
 8005ca0:	08006268 	.word	0x08006268
 8005ca4:	08006228 	.word	0x08006228

08005ca8 <std>:
 8005ca8:	2300      	movs	r3, #0
 8005caa:	b510      	push	{r4, lr}
 8005cac:	4604      	mov	r4, r0
 8005cae:	e9c0 3300 	strd	r3, r3, [r0]
 8005cb2:	6083      	str	r3, [r0, #8]
 8005cb4:	8181      	strh	r1, [r0, #12]
 8005cb6:	6643      	str	r3, [r0, #100]	; 0x64
 8005cb8:	81c2      	strh	r2, [r0, #14]
 8005cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cbe:	6183      	str	r3, [r0, #24]
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	2208      	movs	r2, #8
 8005cc4:	305c      	adds	r0, #92	; 0x5c
 8005cc6:	f7ff fe13 	bl	80058f0 <memset>
 8005cca:	4b05      	ldr	r3, [pc, #20]	; (8005ce0 <std+0x38>)
 8005ccc:	6224      	str	r4, [r4, #32]
 8005cce:	6263      	str	r3, [r4, #36]	; 0x24
 8005cd0:	4b04      	ldr	r3, [pc, #16]	; (8005ce4 <std+0x3c>)
 8005cd2:	62a3      	str	r3, [r4, #40]	; 0x28
 8005cd4:	4b04      	ldr	r3, [pc, #16]	; (8005ce8 <std+0x40>)
 8005cd6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005cd8:	4b04      	ldr	r3, [pc, #16]	; (8005cec <std+0x44>)
 8005cda:	6323      	str	r3, [r4, #48]	; 0x30
 8005cdc:	bd10      	pop	{r4, pc}
 8005cde:	bf00      	nop
 8005ce0:	08006071 	.word	0x08006071
 8005ce4:	08006093 	.word	0x08006093
 8005ce8:	080060cb 	.word	0x080060cb
 8005cec:	080060ef 	.word	0x080060ef

08005cf0 <_cleanup_r>:
 8005cf0:	4901      	ldr	r1, [pc, #4]	; (8005cf8 <_cleanup_r+0x8>)
 8005cf2:	f000 b885 	b.w	8005e00 <_fwalk_reent>
 8005cf6:	bf00      	nop
 8005cf8:	08005c55 	.word	0x08005c55

08005cfc <__sfmoreglue>:
 8005cfc:	b570      	push	{r4, r5, r6, lr}
 8005cfe:	2568      	movs	r5, #104	; 0x68
 8005d00:	1e4a      	subs	r2, r1, #1
 8005d02:	4355      	muls	r5, r2
 8005d04:	460e      	mov	r6, r1
 8005d06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d0a:	f000 f947 	bl	8005f9c <_malloc_r>
 8005d0e:	4604      	mov	r4, r0
 8005d10:	b140      	cbz	r0, 8005d24 <__sfmoreglue+0x28>
 8005d12:	2100      	movs	r1, #0
 8005d14:	e9c0 1600 	strd	r1, r6, [r0]
 8005d18:	300c      	adds	r0, #12
 8005d1a:	60a0      	str	r0, [r4, #8]
 8005d1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d20:	f7ff fde6 	bl	80058f0 <memset>
 8005d24:	4620      	mov	r0, r4
 8005d26:	bd70      	pop	{r4, r5, r6, pc}

08005d28 <__sinit>:
 8005d28:	6983      	ldr	r3, [r0, #24]
 8005d2a:	b510      	push	{r4, lr}
 8005d2c:	4604      	mov	r4, r0
 8005d2e:	bb33      	cbnz	r3, 8005d7e <__sinit+0x56>
 8005d30:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005d34:	6503      	str	r3, [r0, #80]	; 0x50
 8005d36:	4b12      	ldr	r3, [pc, #72]	; (8005d80 <__sinit+0x58>)
 8005d38:	4a12      	ldr	r2, [pc, #72]	; (8005d84 <__sinit+0x5c>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6282      	str	r2, [r0, #40]	; 0x28
 8005d3e:	4298      	cmp	r0, r3
 8005d40:	bf04      	itt	eq
 8005d42:	2301      	moveq	r3, #1
 8005d44:	6183      	streq	r3, [r0, #24]
 8005d46:	f000 f81f 	bl	8005d88 <__sfp>
 8005d4a:	6060      	str	r0, [r4, #4]
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	f000 f81b 	bl	8005d88 <__sfp>
 8005d52:	60a0      	str	r0, [r4, #8]
 8005d54:	4620      	mov	r0, r4
 8005d56:	f000 f817 	bl	8005d88 <__sfp>
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	60e0      	str	r0, [r4, #12]
 8005d5e:	2104      	movs	r1, #4
 8005d60:	6860      	ldr	r0, [r4, #4]
 8005d62:	f7ff ffa1 	bl	8005ca8 <std>
 8005d66:	2201      	movs	r2, #1
 8005d68:	2109      	movs	r1, #9
 8005d6a:	68a0      	ldr	r0, [r4, #8]
 8005d6c:	f7ff ff9c 	bl	8005ca8 <std>
 8005d70:	2202      	movs	r2, #2
 8005d72:	2112      	movs	r1, #18
 8005d74:	68e0      	ldr	r0, [r4, #12]
 8005d76:	f7ff ff97 	bl	8005ca8 <std>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	61a3      	str	r3, [r4, #24]
 8005d7e:	bd10      	pop	{r4, pc}
 8005d80:	08006224 	.word	0x08006224
 8005d84:	08005cf1 	.word	0x08005cf1

08005d88 <__sfp>:
 8005d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8a:	4b1b      	ldr	r3, [pc, #108]	; (8005df8 <__sfp+0x70>)
 8005d8c:	4607      	mov	r7, r0
 8005d8e:	681e      	ldr	r6, [r3, #0]
 8005d90:	69b3      	ldr	r3, [r6, #24]
 8005d92:	b913      	cbnz	r3, 8005d9a <__sfp+0x12>
 8005d94:	4630      	mov	r0, r6
 8005d96:	f7ff ffc7 	bl	8005d28 <__sinit>
 8005d9a:	3648      	adds	r6, #72	; 0x48
 8005d9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005da0:	3b01      	subs	r3, #1
 8005da2:	d503      	bpl.n	8005dac <__sfp+0x24>
 8005da4:	6833      	ldr	r3, [r6, #0]
 8005da6:	b133      	cbz	r3, 8005db6 <__sfp+0x2e>
 8005da8:	6836      	ldr	r6, [r6, #0]
 8005daa:	e7f7      	b.n	8005d9c <__sfp+0x14>
 8005dac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005db0:	b16d      	cbz	r5, 8005dce <__sfp+0x46>
 8005db2:	3468      	adds	r4, #104	; 0x68
 8005db4:	e7f4      	b.n	8005da0 <__sfp+0x18>
 8005db6:	2104      	movs	r1, #4
 8005db8:	4638      	mov	r0, r7
 8005dba:	f7ff ff9f 	bl	8005cfc <__sfmoreglue>
 8005dbe:	6030      	str	r0, [r6, #0]
 8005dc0:	2800      	cmp	r0, #0
 8005dc2:	d1f1      	bne.n	8005da8 <__sfp+0x20>
 8005dc4:	230c      	movs	r3, #12
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	603b      	str	r3, [r7, #0]
 8005dca:	4620      	mov	r0, r4
 8005dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dce:	4b0b      	ldr	r3, [pc, #44]	; (8005dfc <__sfp+0x74>)
 8005dd0:	6665      	str	r5, [r4, #100]	; 0x64
 8005dd2:	e9c4 5500 	strd	r5, r5, [r4]
 8005dd6:	60a5      	str	r5, [r4, #8]
 8005dd8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005ddc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005de0:	2208      	movs	r2, #8
 8005de2:	4629      	mov	r1, r5
 8005de4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005de8:	f7ff fd82 	bl	80058f0 <memset>
 8005dec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005df0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005df4:	e7e9      	b.n	8005dca <__sfp+0x42>
 8005df6:	bf00      	nop
 8005df8:	08006224 	.word	0x08006224
 8005dfc:	ffff0001 	.word	0xffff0001

08005e00 <_fwalk_reent>:
 8005e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e04:	4680      	mov	r8, r0
 8005e06:	4689      	mov	r9, r1
 8005e08:	2600      	movs	r6, #0
 8005e0a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e0e:	b914      	cbnz	r4, 8005e16 <_fwalk_reent+0x16>
 8005e10:	4630      	mov	r0, r6
 8005e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e16:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005e1a:	3f01      	subs	r7, #1
 8005e1c:	d501      	bpl.n	8005e22 <_fwalk_reent+0x22>
 8005e1e:	6824      	ldr	r4, [r4, #0]
 8005e20:	e7f5      	b.n	8005e0e <_fwalk_reent+0xe>
 8005e22:	89ab      	ldrh	r3, [r5, #12]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d907      	bls.n	8005e38 <_fwalk_reent+0x38>
 8005e28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	d003      	beq.n	8005e38 <_fwalk_reent+0x38>
 8005e30:	4629      	mov	r1, r5
 8005e32:	4640      	mov	r0, r8
 8005e34:	47c8      	blx	r9
 8005e36:	4306      	orrs	r6, r0
 8005e38:	3568      	adds	r5, #104	; 0x68
 8005e3a:	e7ee      	b.n	8005e1a <_fwalk_reent+0x1a>

08005e3c <__swhatbuf_r>:
 8005e3c:	b570      	push	{r4, r5, r6, lr}
 8005e3e:	460e      	mov	r6, r1
 8005e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e44:	b096      	sub	sp, #88	; 0x58
 8005e46:	2900      	cmp	r1, #0
 8005e48:	4614      	mov	r4, r2
 8005e4a:	461d      	mov	r5, r3
 8005e4c:	da07      	bge.n	8005e5e <__swhatbuf_r+0x22>
 8005e4e:	2300      	movs	r3, #0
 8005e50:	602b      	str	r3, [r5, #0]
 8005e52:	89b3      	ldrh	r3, [r6, #12]
 8005e54:	061a      	lsls	r2, r3, #24
 8005e56:	d410      	bmi.n	8005e7a <__swhatbuf_r+0x3e>
 8005e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e5c:	e00e      	b.n	8005e7c <__swhatbuf_r+0x40>
 8005e5e:	466a      	mov	r2, sp
 8005e60:	f000 f96c 	bl	800613c <_fstat_r>
 8005e64:	2800      	cmp	r0, #0
 8005e66:	dbf2      	blt.n	8005e4e <__swhatbuf_r+0x12>
 8005e68:	9a01      	ldr	r2, [sp, #4]
 8005e6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005e6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005e72:	425a      	negs	r2, r3
 8005e74:	415a      	adcs	r2, r3
 8005e76:	602a      	str	r2, [r5, #0]
 8005e78:	e7ee      	b.n	8005e58 <__swhatbuf_r+0x1c>
 8005e7a:	2340      	movs	r3, #64	; 0x40
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	6023      	str	r3, [r4, #0]
 8005e80:	b016      	add	sp, #88	; 0x58
 8005e82:	bd70      	pop	{r4, r5, r6, pc}

08005e84 <__smakebuf_r>:
 8005e84:	898b      	ldrh	r3, [r1, #12]
 8005e86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e88:	079d      	lsls	r5, r3, #30
 8005e8a:	4606      	mov	r6, r0
 8005e8c:	460c      	mov	r4, r1
 8005e8e:	d507      	bpl.n	8005ea0 <__smakebuf_r+0x1c>
 8005e90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e94:	6023      	str	r3, [r4, #0]
 8005e96:	6123      	str	r3, [r4, #16]
 8005e98:	2301      	movs	r3, #1
 8005e9a:	6163      	str	r3, [r4, #20]
 8005e9c:	b002      	add	sp, #8
 8005e9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ea0:	ab01      	add	r3, sp, #4
 8005ea2:	466a      	mov	r2, sp
 8005ea4:	f7ff ffca 	bl	8005e3c <__swhatbuf_r>
 8005ea8:	9900      	ldr	r1, [sp, #0]
 8005eaa:	4605      	mov	r5, r0
 8005eac:	4630      	mov	r0, r6
 8005eae:	f000 f875 	bl	8005f9c <_malloc_r>
 8005eb2:	b948      	cbnz	r0, 8005ec8 <__smakebuf_r+0x44>
 8005eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eb8:	059a      	lsls	r2, r3, #22
 8005eba:	d4ef      	bmi.n	8005e9c <__smakebuf_r+0x18>
 8005ebc:	f023 0303 	bic.w	r3, r3, #3
 8005ec0:	f043 0302 	orr.w	r3, r3, #2
 8005ec4:	81a3      	strh	r3, [r4, #12]
 8005ec6:	e7e3      	b.n	8005e90 <__smakebuf_r+0xc>
 8005ec8:	4b0d      	ldr	r3, [pc, #52]	; (8005f00 <__smakebuf_r+0x7c>)
 8005eca:	62b3      	str	r3, [r6, #40]	; 0x28
 8005ecc:	89a3      	ldrh	r3, [r4, #12]
 8005ece:	6020      	str	r0, [r4, #0]
 8005ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed4:	81a3      	strh	r3, [r4, #12]
 8005ed6:	9b00      	ldr	r3, [sp, #0]
 8005ed8:	6120      	str	r0, [r4, #16]
 8005eda:	6163      	str	r3, [r4, #20]
 8005edc:	9b01      	ldr	r3, [sp, #4]
 8005ede:	b15b      	cbz	r3, 8005ef8 <__smakebuf_r+0x74>
 8005ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ee4:	4630      	mov	r0, r6
 8005ee6:	f000 f93b 	bl	8006160 <_isatty_r>
 8005eea:	b128      	cbz	r0, 8005ef8 <__smakebuf_r+0x74>
 8005eec:	89a3      	ldrh	r3, [r4, #12]
 8005eee:	f023 0303 	bic.w	r3, r3, #3
 8005ef2:	f043 0301 	orr.w	r3, r3, #1
 8005ef6:	81a3      	strh	r3, [r4, #12]
 8005ef8:	89a3      	ldrh	r3, [r4, #12]
 8005efa:	431d      	orrs	r5, r3
 8005efc:	81a5      	strh	r5, [r4, #12]
 8005efe:	e7cd      	b.n	8005e9c <__smakebuf_r+0x18>
 8005f00:	08005cf1 	.word	0x08005cf1

08005f04 <_free_r>:
 8005f04:	b538      	push	{r3, r4, r5, lr}
 8005f06:	4605      	mov	r5, r0
 8005f08:	2900      	cmp	r1, #0
 8005f0a:	d043      	beq.n	8005f94 <_free_r+0x90>
 8005f0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f10:	1f0c      	subs	r4, r1, #4
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	bfb8      	it	lt
 8005f16:	18e4      	addlt	r4, r4, r3
 8005f18:	f000 f944 	bl	80061a4 <__malloc_lock>
 8005f1c:	4a1e      	ldr	r2, [pc, #120]	; (8005f98 <_free_r+0x94>)
 8005f1e:	6813      	ldr	r3, [r2, #0]
 8005f20:	4610      	mov	r0, r2
 8005f22:	b933      	cbnz	r3, 8005f32 <_free_r+0x2e>
 8005f24:	6063      	str	r3, [r4, #4]
 8005f26:	6014      	str	r4, [r2, #0]
 8005f28:	4628      	mov	r0, r5
 8005f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f2e:	f000 b93a 	b.w	80061a6 <__malloc_unlock>
 8005f32:	42a3      	cmp	r3, r4
 8005f34:	d90b      	bls.n	8005f4e <_free_r+0x4a>
 8005f36:	6821      	ldr	r1, [r4, #0]
 8005f38:	1862      	adds	r2, r4, r1
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	bf01      	itttt	eq
 8005f3e:	681a      	ldreq	r2, [r3, #0]
 8005f40:	685b      	ldreq	r3, [r3, #4]
 8005f42:	1852      	addeq	r2, r2, r1
 8005f44:	6022      	streq	r2, [r4, #0]
 8005f46:	6063      	str	r3, [r4, #4]
 8005f48:	6004      	str	r4, [r0, #0]
 8005f4a:	e7ed      	b.n	8005f28 <_free_r+0x24>
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	b10a      	cbz	r2, 8005f56 <_free_r+0x52>
 8005f52:	42a2      	cmp	r2, r4
 8005f54:	d9fa      	bls.n	8005f4c <_free_r+0x48>
 8005f56:	6819      	ldr	r1, [r3, #0]
 8005f58:	1858      	adds	r0, r3, r1
 8005f5a:	42a0      	cmp	r0, r4
 8005f5c:	d10b      	bne.n	8005f76 <_free_r+0x72>
 8005f5e:	6820      	ldr	r0, [r4, #0]
 8005f60:	4401      	add	r1, r0
 8005f62:	1858      	adds	r0, r3, r1
 8005f64:	4282      	cmp	r2, r0
 8005f66:	6019      	str	r1, [r3, #0]
 8005f68:	d1de      	bne.n	8005f28 <_free_r+0x24>
 8005f6a:	6810      	ldr	r0, [r2, #0]
 8005f6c:	6852      	ldr	r2, [r2, #4]
 8005f6e:	4401      	add	r1, r0
 8005f70:	6019      	str	r1, [r3, #0]
 8005f72:	605a      	str	r2, [r3, #4]
 8005f74:	e7d8      	b.n	8005f28 <_free_r+0x24>
 8005f76:	d902      	bls.n	8005f7e <_free_r+0x7a>
 8005f78:	230c      	movs	r3, #12
 8005f7a:	602b      	str	r3, [r5, #0]
 8005f7c:	e7d4      	b.n	8005f28 <_free_r+0x24>
 8005f7e:	6820      	ldr	r0, [r4, #0]
 8005f80:	1821      	adds	r1, r4, r0
 8005f82:	428a      	cmp	r2, r1
 8005f84:	bf01      	itttt	eq
 8005f86:	6811      	ldreq	r1, [r2, #0]
 8005f88:	6852      	ldreq	r2, [r2, #4]
 8005f8a:	1809      	addeq	r1, r1, r0
 8005f8c:	6021      	streq	r1, [r4, #0]
 8005f8e:	6062      	str	r2, [r4, #4]
 8005f90:	605c      	str	r4, [r3, #4]
 8005f92:	e7c9      	b.n	8005f28 <_free_r+0x24>
 8005f94:	bd38      	pop	{r3, r4, r5, pc}
 8005f96:	bf00      	nop
 8005f98:	20000090 	.word	0x20000090

08005f9c <_malloc_r>:
 8005f9c:	b570      	push	{r4, r5, r6, lr}
 8005f9e:	1ccd      	adds	r5, r1, #3
 8005fa0:	f025 0503 	bic.w	r5, r5, #3
 8005fa4:	3508      	adds	r5, #8
 8005fa6:	2d0c      	cmp	r5, #12
 8005fa8:	bf38      	it	cc
 8005faa:	250c      	movcc	r5, #12
 8005fac:	2d00      	cmp	r5, #0
 8005fae:	4606      	mov	r6, r0
 8005fb0:	db01      	blt.n	8005fb6 <_malloc_r+0x1a>
 8005fb2:	42a9      	cmp	r1, r5
 8005fb4:	d903      	bls.n	8005fbe <_malloc_r+0x22>
 8005fb6:	230c      	movs	r3, #12
 8005fb8:	6033      	str	r3, [r6, #0]
 8005fba:	2000      	movs	r0, #0
 8005fbc:	bd70      	pop	{r4, r5, r6, pc}
 8005fbe:	f000 f8f1 	bl	80061a4 <__malloc_lock>
 8005fc2:	4a21      	ldr	r2, [pc, #132]	; (8006048 <_malloc_r+0xac>)
 8005fc4:	6814      	ldr	r4, [r2, #0]
 8005fc6:	4621      	mov	r1, r4
 8005fc8:	b991      	cbnz	r1, 8005ff0 <_malloc_r+0x54>
 8005fca:	4c20      	ldr	r4, [pc, #128]	; (800604c <_malloc_r+0xb0>)
 8005fcc:	6823      	ldr	r3, [r4, #0]
 8005fce:	b91b      	cbnz	r3, 8005fd8 <_malloc_r+0x3c>
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	f000 f83d 	bl	8006050 <_sbrk_r>
 8005fd6:	6020      	str	r0, [r4, #0]
 8005fd8:	4629      	mov	r1, r5
 8005fda:	4630      	mov	r0, r6
 8005fdc:	f000 f838 	bl	8006050 <_sbrk_r>
 8005fe0:	1c43      	adds	r3, r0, #1
 8005fe2:	d124      	bne.n	800602e <_malloc_r+0x92>
 8005fe4:	230c      	movs	r3, #12
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	6033      	str	r3, [r6, #0]
 8005fea:	f000 f8dc 	bl	80061a6 <__malloc_unlock>
 8005fee:	e7e4      	b.n	8005fba <_malloc_r+0x1e>
 8005ff0:	680b      	ldr	r3, [r1, #0]
 8005ff2:	1b5b      	subs	r3, r3, r5
 8005ff4:	d418      	bmi.n	8006028 <_malloc_r+0x8c>
 8005ff6:	2b0b      	cmp	r3, #11
 8005ff8:	d90f      	bls.n	800601a <_malloc_r+0x7e>
 8005ffa:	600b      	str	r3, [r1, #0]
 8005ffc:	18cc      	adds	r4, r1, r3
 8005ffe:	50cd      	str	r5, [r1, r3]
 8006000:	4630      	mov	r0, r6
 8006002:	f000 f8d0 	bl	80061a6 <__malloc_unlock>
 8006006:	f104 000b 	add.w	r0, r4, #11
 800600a:	1d23      	adds	r3, r4, #4
 800600c:	f020 0007 	bic.w	r0, r0, #7
 8006010:	1ac3      	subs	r3, r0, r3
 8006012:	d0d3      	beq.n	8005fbc <_malloc_r+0x20>
 8006014:	425a      	negs	r2, r3
 8006016:	50e2      	str	r2, [r4, r3]
 8006018:	e7d0      	b.n	8005fbc <_malloc_r+0x20>
 800601a:	684b      	ldr	r3, [r1, #4]
 800601c:	428c      	cmp	r4, r1
 800601e:	bf16      	itet	ne
 8006020:	6063      	strne	r3, [r4, #4]
 8006022:	6013      	streq	r3, [r2, #0]
 8006024:	460c      	movne	r4, r1
 8006026:	e7eb      	b.n	8006000 <_malloc_r+0x64>
 8006028:	460c      	mov	r4, r1
 800602a:	6849      	ldr	r1, [r1, #4]
 800602c:	e7cc      	b.n	8005fc8 <_malloc_r+0x2c>
 800602e:	1cc4      	adds	r4, r0, #3
 8006030:	f024 0403 	bic.w	r4, r4, #3
 8006034:	42a0      	cmp	r0, r4
 8006036:	d005      	beq.n	8006044 <_malloc_r+0xa8>
 8006038:	1a21      	subs	r1, r4, r0
 800603a:	4630      	mov	r0, r6
 800603c:	f000 f808 	bl	8006050 <_sbrk_r>
 8006040:	3001      	adds	r0, #1
 8006042:	d0cf      	beq.n	8005fe4 <_malloc_r+0x48>
 8006044:	6025      	str	r5, [r4, #0]
 8006046:	e7db      	b.n	8006000 <_malloc_r+0x64>
 8006048:	20000090 	.word	0x20000090
 800604c:	20000094 	.word	0x20000094

08006050 <_sbrk_r>:
 8006050:	b538      	push	{r3, r4, r5, lr}
 8006052:	2300      	movs	r3, #0
 8006054:	4c05      	ldr	r4, [pc, #20]	; (800606c <_sbrk_r+0x1c>)
 8006056:	4605      	mov	r5, r0
 8006058:	4608      	mov	r0, r1
 800605a:	6023      	str	r3, [r4, #0]
 800605c:	f7fe fadc 	bl	8004618 <_sbrk>
 8006060:	1c43      	adds	r3, r0, #1
 8006062:	d102      	bne.n	800606a <_sbrk_r+0x1a>
 8006064:	6823      	ldr	r3, [r4, #0]
 8006066:	b103      	cbz	r3, 800606a <_sbrk_r+0x1a>
 8006068:	602b      	str	r3, [r5, #0]
 800606a:	bd38      	pop	{r3, r4, r5, pc}
 800606c:	200000e0 	.word	0x200000e0

08006070 <__sread>:
 8006070:	b510      	push	{r4, lr}
 8006072:	460c      	mov	r4, r1
 8006074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006078:	f000 f896 	bl	80061a8 <_read_r>
 800607c:	2800      	cmp	r0, #0
 800607e:	bfab      	itete	ge
 8006080:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006082:	89a3      	ldrhlt	r3, [r4, #12]
 8006084:	181b      	addge	r3, r3, r0
 8006086:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800608a:	bfac      	ite	ge
 800608c:	6563      	strge	r3, [r4, #84]	; 0x54
 800608e:	81a3      	strhlt	r3, [r4, #12]
 8006090:	bd10      	pop	{r4, pc}

08006092 <__swrite>:
 8006092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006096:	461f      	mov	r7, r3
 8006098:	898b      	ldrh	r3, [r1, #12]
 800609a:	4605      	mov	r5, r0
 800609c:	05db      	lsls	r3, r3, #23
 800609e:	460c      	mov	r4, r1
 80060a0:	4616      	mov	r6, r2
 80060a2:	d505      	bpl.n	80060b0 <__swrite+0x1e>
 80060a4:	2302      	movs	r3, #2
 80060a6:	2200      	movs	r2, #0
 80060a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ac:	f000 f868 	bl	8006180 <_lseek_r>
 80060b0:	89a3      	ldrh	r3, [r4, #12]
 80060b2:	4632      	mov	r2, r6
 80060b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060b8:	81a3      	strh	r3, [r4, #12]
 80060ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060be:	463b      	mov	r3, r7
 80060c0:	4628      	mov	r0, r5
 80060c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060c6:	f000 b817 	b.w	80060f8 <_write_r>

080060ca <__sseek>:
 80060ca:	b510      	push	{r4, lr}
 80060cc:	460c      	mov	r4, r1
 80060ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060d2:	f000 f855 	bl	8006180 <_lseek_r>
 80060d6:	1c43      	adds	r3, r0, #1
 80060d8:	89a3      	ldrh	r3, [r4, #12]
 80060da:	bf15      	itete	ne
 80060dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80060de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80060e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80060e6:	81a3      	strheq	r3, [r4, #12]
 80060e8:	bf18      	it	ne
 80060ea:	81a3      	strhne	r3, [r4, #12]
 80060ec:	bd10      	pop	{r4, pc}

080060ee <__sclose>:
 80060ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060f2:	f000 b813 	b.w	800611c <_close_r>
	...

080060f8 <_write_r>:
 80060f8:	b538      	push	{r3, r4, r5, lr}
 80060fa:	4605      	mov	r5, r0
 80060fc:	4608      	mov	r0, r1
 80060fe:	4611      	mov	r1, r2
 8006100:	2200      	movs	r2, #0
 8006102:	4c05      	ldr	r4, [pc, #20]	; (8006118 <_write_r+0x20>)
 8006104:	6022      	str	r2, [r4, #0]
 8006106:	461a      	mov	r2, r3
 8006108:	f7fe f88c 	bl	8004224 <_write>
 800610c:	1c43      	adds	r3, r0, #1
 800610e:	d102      	bne.n	8006116 <_write_r+0x1e>
 8006110:	6823      	ldr	r3, [r4, #0]
 8006112:	b103      	cbz	r3, 8006116 <_write_r+0x1e>
 8006114:	602b      	str	r3, [r5, #0]
 8006116:	bd38      	pop	{r3, r4, r5, pc}
 8006118:	200000e0 	.word	0x200000e0

0800611c <_close_r>:
 800611c:	b538      	push	{r3, r4, r5, lr}
 800611e:	2300      	movs	r3, #0
 8006120:	4c05      	ldr	r4, [pc, #20]	; (8006138 <_close_r+0x1c>)
 8006122:	4605      	mov	r5, r0
 8006124:	4608      	mov	r0, r1
 8006126:	6023      	str	r3, [r4, #0]
 8006128:	f7fe fa46 	bl	80045b8 <_close>
 800612c:	1c43      	adds	r3, r0, #1
 800612e:	d102      	bne.n	8006136 <_close_r+0x1a>
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	b103      	cbz	r3, 8006136 <_close_r+0x1a>
 8006134:	602b      	str	r3, [r5, #0]
 8006136:	bd38      	pop	{r3, r4, r5, pc}
 8006138:	200000e0 	.word	0x200000e0

0800613c <_fstat_r>:
 800613c:	b538      	push	{r3, r4, r5, lr}
 800613e:	2300      	movs	r3, #0
 8006140:	4c06      	ldr	r4, [pc, #24]	; (800615c <_fstat_r+0x20>)
 8006142:	4605      	mov	r5, r0
 8006144:	4608      	mov	r0, r1
 8006146:	4611      	mov	r1, r2
 8006148:	6023      	str	r3, [r4, #0]
 800614a:	f7fe fa40 	bl	80045ce <_fstat>
 800614e:	1c43      	adds	r3, r0, #1
 8006150:	d102      	bne.n	8006158 <_fstat_r+0x1c>
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	b103      	cbz	r3, 8006158 <_fstat_r+0x1c>
 8006156:	602b      	str	r3, [r5, #0]
 8006158:	bd38      	pop	{r3, r4, r5, pc}
 800615a:	bf00      	nop
 800615c:	200000e0 	.word	0x200000e0

08006160 <_isatty_r>:
 8006160:	b538      	push	{r3, r4, r5, lr}
 8006162:	2300      	movs	r3, #0
 8006164:	4c05      	ldr	r4, [pc, #20]	; (800617c <_isatty_r+0x1c>)
 8006166:	4605      	mov	r5, r0
 8006168:	4608      	mov	r0, r1
 800616a:	6023      	str	r3, [r4, #0]
 800616c:	f7fe fa3e 	bl	80045ec <_isatty>
 8006170:	1c43      	adds	r3, r0, #1
 8006172:	d102      	bne.n	800617a <_isatty_r+0x1a>
 8006174:	6823      	ldr	r3, [r4, #0]
 8006176:	b103      	cbz	r3, 800617a <_isatty_r+0x1a>
 8006178:	602b      	str	r3, [r5, #0]
 800617a:	bd38      	pop	{r3, r4, r5, pc}
 800617c:	200000e0 	.word	0x200000e0

08006180 <_lseek_r>:
 8006180:	b538      	push	{r3, r4, r5, lr}
 8006182:	4605      	mov	r5, r0
 8006184:	4608      	mov	r0, r1
 8006186:	4611      	mov	r1, r2
 8006188:	2200      	movs	r2, #0
 800618a:	4c05      	ldr	r4, [pc, #20]	; (80061a0 <_lseek_r+0x20>)
 800618c:	6022      	str	r2, [r4, #0]
 800618e:	461a      	mov	r2, r3
 8006190:	f7fe fa36 	bl	8004600 <_lseek>
 8006194:	1c43      	adds	r3, r0, #1
 8006196:	d102      	bne.n	800619e <_lseek_r+0x1e>
 8006198:	6823      	ldr	r3, [r4, #0]
 800619a:	b103      	cbz	r3, 800619e <_lseek_r+0x1e>
 800619c:	602b      	str	r3, [r5, #0]
 800619e:	bd38      	pop	{r3, r4, r5, pc}
 80061a0:	200000e0 	.word	0x200000e0

080061a4 <__malloc_lock>:
 80061a4:	4770      	bx	lr

080061a6 <__malloc_unlock>:
 80061a6:	4770      	bx	lr

080061a8 <_read_r>:
 80061a8:	b538      	push	{r3, r4, r5, lr}
 80061aa:	4605      	mov	r5, r0
 80061ac:	4608      	mov	r0, r1
 80061ae:	4611      	mov	r1, r2
 80061b0:	2200      	movs	r2, #0
 80061b2:	4c05      	ldr	r4, [pc, #20]	; (80061c8 <_read_r+0x20>)
 80061b4:	6022      	str	r2, [r4, #0]
 80061b6:	461a      	mov	r2, r3
 80061b8:	f7fe f9e1 	bl	800457e <_read>
 80061bc:	1c43      	adds	r3, r0, #1
 80061be:	d102      	bne.n	80061c6 <_read_r+0x1e>
 80061c0:	6823      	ldr	r3, [r4, #0]
 80061c2:	b103      	cbz	r3, 80061c6 <_read_r+0x1e>
 80061c4:	602b      	str	r3, [r5, #0]
 80061c6:	bd38      	pop	{r3, r4, r5, pc}
 80061c8:	200000e0 	.word	0x200000e0

080061cc <_init>:
 80061cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ce:	bf00      	nop
 80061d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061d2:	bc08      	pop	{r3}
 80061d4:	469e      	mov	lr, r3
 80061d6:	4770      	bx	lr

080061d8 <_fini>:
 80061d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061da:	bf00      	nop
 80061dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061de:	bc08      	pop	{r3}
 80061e0:	469e      	mov	lr, r3
 80061e2:	4770      	bx	lr
