
FreeRTOS_A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022f0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080024a0  080024a0  000124a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800252c  0800252c  0001252c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002534  08002534  00012534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002538  08002538  00012538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000020  20000000  0800253c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
  8 .bss          00004048  20000020  20000020  00020020  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20004068  20004068  00020020  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 11 .debug_info   000141db  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002d29  00000000  00000000  0003422b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008697  00000000  00000000  00036f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cf8  00000000  00000000  0003f5f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f38  00000000  00000000  000402e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000066a2  00000000  00000000  00041220  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005620  00000000  00000000  000478c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0004cee2  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000025c8  00000000  00000000  0004cf60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000020 	.word	0x20000020
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002488 	.word	0x08002488

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000024 	.word	0x20000024
 80001ec:	08002488 	.word	0x08002488

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b97a 	b.w	800050c <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	468c      	mov	ip, r1
 8000236:	460d      	mov	r5, r1
 8000238:	4604      	mov	r4, r0
 800023a:	9e08      	ldr	r6, [sp, #32]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d151      	bne.n	80002e4 <__udivmoddi4+0xb4>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d96d      	bls.n	8000322 <__udivmoddi4+0xf2>
 8000246:	fab2 fe82 	clz	lr, r2
 800024a:	f1be 0f00 	cmp.w	lr, #0
 800024e:	d00b      	beq.n	8000268 <__udivmoddi4+0x38>
 8000250:	f1ce 0c20 	rsb	ip, lr, #32
 8000254:	fa01 f50e 	lsl.w	r5, r1, lr
 8000258:	fa20 fc0c 	lsr.w	ip, r0, ip
 800025c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000260:	ea4c 0c05 	orr.w	ip, ip, r5
 8000264:	fa00 f40e 	lsl.w	r4, r0, lr
 8000268:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800026c:	0c25      	lsrs	r5, r4, #16
 800026e:	fbbc f8fa 	udiv	r8, ip, sl
 8000272:	fa1f f987 	uxth.w	r9, r7
 8000276:	fb0a cc18 	mls	ip, sl, r8, ip
 800027a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800027e:	fb08 f309 	mul.w	r3, r8, r9
 8000282:	42ab      	cmp	r3, r5
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x6c>
 8000286:	19ed      	adds	r5, r5, r7
 8000288:	f108 32ff 	add.w	r2, r8, #4294967295
 800028c:	f080 8123 	bcs.w	80004d6 <__udivmoddi4+0x2a6>
 8000290:	42ab      	cmp	r3, r5
 8000292:	f240 8120 	bls.w	80004d6 <__udivmoddi4+0x2a6>
 8000296:	f1a8 0802 	sub.w	r8, r8, #2
 800029a:	443d      	add	r5, r7
 800029c:	1aed      	subs	r5, r5, r3
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ac:	fb00 f909 	mul.w	r9, r0, r9
 80002b0:	45a1      	cmp	r9, r4
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x98>
 80002b4:	19e4      	adds	r4, r4, r7
 80002b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ba:	f080 810a 	bcs.w	80004d2 <__udivmoddi4+0x2a2>
 80002be:	45a1      	cmp	r9, r4
 80002c0:	f240 8107 	bls.w	80004d2 <__udivmoddi4+0x2a2>
 80002c4:	3802      	subs	r0, #2
 80002c6:	443c      	add	r4, r7
 80002c8:	eba4 0409 	sub.w	r4, r4, r9
 80002cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d0:	2100      	movs	r1, #0
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d061      	beq.n	800039a <__udivmoddi4+0x16a>
 80002d6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002da:	2300      	movs	r3, #0
 80002dc:	6034      	str	r4, [r6, #0]
 80002de:	6073      	str	r3, [r6, #4]
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0xc8>
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d054      	beq.n	8000396 <__udivmoddi4+0x166>
 80002ec:	2100      	movs	r1, #0
 80002ee:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f2:	4608      	mov	r0, r1
 80002f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f8:	fab3 f183 	clz	r1, r3
 80002fc:	2900      	cmp	r1, #0
 80002fe:	f040 808e 	bne.w	800041e <__udivmoddi4+0x1ee>
 8000302:	42ab      	cmp	r3, r5
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xdc>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80fa 	bhi.w	8000500 <__udivmoddi4+0x2d0>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb65 0503 	sbc.w	r5, r5, r3
 8000312:	2001      	movs	r0, #1
 8000314:	46ac      	mov	ip, r5
 8000316:	2e00      	cmp	r6, #0
 8000318:	d03f      	beq.n	800039a <__udivmoddi4+0x16a>
 800031a:	e886 1010 	stmia.w	r6, {r4, ip}
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	b912      	cbnz	r2, 800032a <__udivmoddi4+0xfa>
 8000324:	2701      	movs	r7, #1
 8000326:	fbb7 f7f2 	udiv	r7, r7, r2
 800032a:	fab7 fe87 	clz	lr, r7
 800032e:	f1be 0f00 	cmp.w	lr, #0
 8000332:	d134      	bne.n	800039e <__udivmoddi4+0x16e>
 8000334:	1beb      	subs	r3, r5, r7
 8000336:	0c3a      	lsrs	r2, r7, #16
 8000338:	fa1f fc87 	uxth.w	ip, r7
 800033c:	2101      	movs	r1, #1
 800033e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000342:	0c25      	lsrs	r5, r4, #16
 8000344:	fb02 3318 	mls	r3, r2, r8, r3
 8000348:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800034c:	fb0c f308 	mul.w	r3, ip, r8
 8000350:	42ab      	cmp	r3, r5
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x134>
 8000354:	19ed      	adds	r5, r5, r7
 8000356:	f108 30ff 	add.w	r0, r8, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x132>
 800035c:	42ab      	cmp	r3, r5
 800035e:	f200 80d1 	bhi.w	8000504 <__udivmoddi4+0x2d4>
 8000362:	4680      	mov	r8, r0
 8000364:	1aed      	subs	r5, r5, r3
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb5 f0f2 	udiv	r0, r5, r2
 800036c:	fb02 5510 	mls	r5, r2, r0, r5
 8000370:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000374:	fb0c fc00 	mul.w	ip, ip, r0
 8000378:	45a4      	cmp	ip, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x15c>
 800037c:	19e4      	adds	r4, r4, r7
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x15a>
 8000384:	45a4      	cmp	ip, r4
 8000386:	f200 80b8 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 040c 	sub.w	r4, r4, ip
 8000390:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000394:	e79d      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000396:	4631      	mov	r1, r6
 8000398:	4630      	mov	r0, r6
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	f1ce 0420 	rsb	r4, lr, #32
 80003a2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003a6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003aa:	fa20 f804 	lsr.w	r8, r0, r4
 80003ae:	0c3a      	lsrs	r2, r7, #16
 80003b0:	fa25 f404 	lsr.w	r4, r5, r4
 80003b4:	ea48 0803 	orr.w	r8, r8, r3
 80003b8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003bc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c0:	fb02 4411 	mls	r4, r2, r1, r4
 80003c4:	fa1f fc87 	uxth.w	ip, r7
 80003c8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003cc:	fb01 f30c 	mul.w	r3, r1, ip
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x1bc>
 80003d8:	19ed      	adds	r5, r5, r7
 80003da:	f101 30ff 	add.w	r0, r1, #4294967295
 80003de:	f080 808a 	bcs.w	80004f6 <__udivmoddi4+0x2c6>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	f240 8087 	bls.w	80004f6 <__udivmoddi4+0x2c6>
 80003e8:	3902      	subs	r1, #2
 80003ea:	443d      	add	r5, r7
 80003ec:	1aeb      	subs	r3, r5, r3
 80003ee:	fa1f f588 	uxth.w	r5, r8
 80003f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003f6:	fb02 3310 	mls	r3, r2, r0, r3
 80003fa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fe:	fb00 f30c 	mul.w	r3, r0, ip
 8000402:	42ab      	cmp	r3, r5
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1e6>
 8000406:	19ed      	adds	r5, r5, r7
 8000408:	f100 38ff 	add.w	r8, r0, #4294967295
 800040c:	d26f      	bcs.n	80004ee <__udivmoddi4+0x2be>
 800040e:	42ab      	cmp	r3, r5
 8000410:	d96d      	bls.n	80004ee <__udivmoddi4+0x2be>
 8000412:	3802      	subs	r0, #2
 8000414:	443d      	add	r5, r7
 8000416:	1aeb      	subs	r3, r5, r3
 8000418:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041c:	e78f      	b.n	800033e <__udivmoddi4+0x10e>
 800041e:	f1c1 0720 	rsb	r7, r1, #32
 8000422:	fa22 f807 	lsr.w	r8, r2, r7
 8000426:	408b      	lsls	r3, r1
 8000428:	fa05 f401 	lsl.w	r4, r5, r1
 800042c:	ea48 0303 	orr.w	r3, r8, r3
 8000430:	fa20 fe07 	lsr.w	lr, r0, r7
 8000434:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000438:	40fd      	lsrs	r5, r7
 800043a:	ea4e 0e04 	orr.w	lr, lr, r4
 800043e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000442:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000446:	fb0c 5519 	mls	r5, ip, r9, r5
 800044a:	fa1f f883 	uxth.w	r8, r3
 800044e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000452:	fb09 f408 	mul.w	r4, r9, r8
 8000456:	42ac      	cmp	r4, r5
 8000458:	fa02 f201 	lsl.w	r2, r2, r1
 800045c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x244>
 8000462:	18ed      	adds	r5, r5, r3
 8000464:	f109 30ff 	add.w	r0, r9, #4294967295
 8000468:	d243      	bcs.n	80004f2 <__udivmoddi4+0x2c2>
 800046a:	42ac      	cmp	r4, r5
 800046c:	d941      	bls.n	80004f2 <__udivmoddi4+0x2c2>
 800046e:	f1a9 0902 	sub.w	r9, r9, #2
 8000472:	441d      	add	r5, r3
 8000474:	1b2d      	subs	r5, r5, r4
 8000476:	fa1f fe8e 	uxth.w	lr, lr
 800047a:	fbb5 f0fc 	udiv	r0, r5, ip
 800047e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000482:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000486:	fb00 f808 	mul.w	r8, r0, r8
 800048a:	45a0      	cmp	r8, r4
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x26e>
 800048e:	18e4      	adds	r4, r4, r3
 8000490:	f100 35ff 	add.w	r5, r0, #4294967295
 8000494:	d229      	bcs.n	80004ea <__udivmoddi4+0x2ba>
 8000496:	45a0      	cmp	r8, r4
 8000498:	d927      	bls.n	80004ea <__udivmoddi4+0x2ba>
 800049a:	3802      	subs	r0, #2
 800049c:	441c      	add	r4, r3
 800049e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a2:	eba4 0408 	sub.w	r4, r4, r8
 80004a6:	fba0 8902 	umull	r8, r9, r0, r2
 80004aa:	454c      	cmp	r4, r9
 80004ac:	46c6      	mov	lr, r8
 80004ae:	464d      	mov	r5, r9
 80004b0:	d315      	bcc.n	80004de <__udivmoddi4+0x2ae>
 80004b2:	d012      	beq.n	80004da <__udivmoddi4+0x2aa>
 80004b4:	b156      	cbz	r6, 80004cc <__udivmoddi4+0x29c>
 80004b6:	ebba 030e 	subs.w	r3, sl, lr
 80004ba:	eb64 0405 	sbc.w	r4, r4, r5
 80004be:	fa04 f707 	lsl.w	r7, r4, r7
 80004c2:	40cb      	lsrs	r3, r1
 80004c4:	431f      	orrs	r7, r3
 80004c6:	40cc      	lsrs	r4, r1
 80004c8:	6037      	str	r7, [r6, #0]
 80004ca:	6074      	str	r4, [r6, #4]
 80004cc:	2100      	movs	r1, #0
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	4618      	mov	r0, r3
 80004d4:	e6f8      	b.n	80002c8 <__udivmoddi4+0x98>
 80004d6:	4690      	mov	r8, r2
 80004d8:	e6e0      	b.n	800029c <__udivmoddi4+0x6c>
 80004da:	45c2      	cmp	sl, r8
 80004dc:	d2ea      	bcs.n	80004b4 <__udivmoddi4+0x284>
 80004de:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e2:	eb69 0503 	sbc.w	r5, r9, r3
 80004e6:	3801      	subs	r0, #1
 80004e8:	e7e4      	b.n	80004b4 <__udivmoddi4+0x284>
 80004ea:	4628      	mov	r0, r5
 80004ec:	e7d7      	b.n	800049e <__udivmoddi4+0x26e>
 80004ee:	4640      	mov	r0, r8
 80004f0:	e791      	b.n	8000416 <__udivmoddi4+0x1e6>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e7be      	b.n	8000474 <__udivmoddi4+0x244>
 80004f6:	4601      	mov	r1, r0
 80004f8:	e778      	b.n	80003ec <__udivmoddi4+0x1bc>
 80004fa:	3802      	subs	r0, #2
 80004fc:	443c      	add	r4, r7
 80004fe:	e745      	b.n	800038c <__udivmoddi4+0x15c>
 8000500:	4608      	mov	r0, r1
 8000502:	e708      	b.n	8000316 <__udivmoddi4+0xe6>
 8000504:	f1a8 0802 	sub.w	r8, r8, #2
 8000508:	443d      	add	r5, r7
 800050a:	e72b      	b.n	8000364 <__udivmoddi4+0x134>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000510:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <HAL_Init+0x30>)
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800051a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000522:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800052a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f81b 	bl	8000568 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f001 fee2 	bl	80022fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f001 fe86 	bl	8002248 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800053c:	2000      	movs	r0, #0
 800053e:	bd08      	pop	{r3, pc}
 8000540:	40023c00 	.word	0x40023c00

08000544 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000544:	4a03      	ldr	r2, [pc, #12]	; (8000554 <HAL_IncTick+0x10>)
 8000546:	4b04      	ldr	r3, [pc, #16]	; (8000558 <HAL_IncTick+0x14>)
 8000548:	6811      	ldr	r1, [r2, #0]
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	440b      	add	r3, r1
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20003fd8 	.word	0x20003fd8
 8000558:	20000000 	.word	0x20000000

0800055c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800055c:	4b01      	ldr	r3, [pc, #4]	; (8000564 <HAL_GetTick+0x8>)
 800055e:	6818      	ldr	r0, [r3, #0]
}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20003fd8 	.word	0x20003fd8

08000568 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000568:	4a07      	ldr	r2, [pc, #28]	; (8000588 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800056a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800056c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000570:	041b      	lsls	r3, r3, #16
 8000572:	0c1b      	lsrs	r3, r3, #16
 8000574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000578:	0200      	lsls	r0, r0, #8
 800057a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800057e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000582:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000584:	60d3      	str	r3, [r2, #12]
 8000586:	4770      	bx	lr
 8000588:	e000ed00 	.word	0xe000ed00

0800058c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800058c:	4b17      	ldr	r3, [pc, #92]	; (80005ec <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	68dc      	ldr	r4, [r3, #12]
 8000592:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000596:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800059a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800059c:	2b04      	cmp	r3, #4
 800059e:	bf28      	it	cs
 80005a0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a4:	f04f 0501 	mov.w	r5, #1
 80005a8:	fa05 f303 	lsl.w	r3, r5, r3
 80005ac:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b0:	bf8c      	ite	hi
 80005b2:	3c03      	subhi	r4, #3
 80005b4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b6:	4019      	ands	r1, r3
 80005b8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005ba:	fa05 f404 	lsl.w	r4, r5, r4
 80005be:	3c01      	subs	r4, #1
 80005c0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005c2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c4:	ea42 0201 	orr.w	r2, r2, r1
 80005c8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005cc:	bfad      	iteet	ge
 80005ce:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d2:	f000 000f 	andlt.w	r0, r0, #15
 80005d6:	4b06      	ldrlt	r3, [pc, #24]	; (80005f0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005dc:	bfb5      	itete	lt
 80005de:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	bf00      	nop
 80005ec:	e000ed00 	.word	0xe000ed00
 80005f0:	e000ed14 	.word	0xe000ed14

080005f4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80005f4:	2800      	cmp	r0, #0
 80005f6:	db08      	blt.n	800060a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005f8:	0942      	lsrs	r2, r0, #5
 80005fa:	2301      	movs	r3, #1
 80005fc:	f000 001f 	and.w	r0, r0, #31
 8000600:	fa03 f000 	lsl.w	r0, r3, r0
 8000604:	4b01      	ldr	r3, [pc, #4]	; (800060c <HAL_NVIC_EnableIRQ+0x18>)
 8000606:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800060a:	4770      	bx	lr
 800060c:	e000e100 	.word	0xe000e100

08000610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000614:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000616:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000618:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 80007e0 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800061c:	4a6e      	ldr	r2, [pc, #440]	; (80007d8 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800061e:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80007e4 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000622:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000624:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000626:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800062a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 800062c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000630:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000634:	45b6      	cmp	lr, r6
 8000636:	f040 80b6 	bne.w	80007a6 <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800063a:	684c      	ldr	r4, [r1, #4]
 800063c:	f024 0710 	bic.w	r7, r4, #16
 8000640:	2f02      	cmp	r7, #2
 8000642:	d116      	bne.n	8000672 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000644:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000648:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800064c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000650:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000654:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000658:	f04f 0c0f 	mov.w	ip, #15
 800065c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000660:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000664:	690d      	ldr	r5, [r1, #16]
 8000666:	fa05 f50b 	lsl.w	r5, r5, fp
 800066a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800066e:	f8ca 5020 	str.w	r5, [sl, #32]
 8000672:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000676:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000678:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800067c:	fa05 f50a 	lsl.w	r5, r5, sl
 8000680:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000682:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000686:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800068a:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800068e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000690:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000694:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000696:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800069a:	d811      	bhi.n	80006c0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800069c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800069e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006a2:	68cf      	ldr	r7, [r1, #12]
 80006a4:	fa07 fc0a 	lsl.w	ip, r7, sl
 80006a8:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80006ac:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80006ae:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006b0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006b4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80006b8:	409f      	lsls	r7, r3
 80006ba:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80006be:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80006c0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006c2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006c4:	688f      	ldr	r7, [r1, #8]
 80006c6:	fa07 f70a 	lsl.w	r7, r7, sl
 80006ca:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80006cc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006ce:	00e5      	lsls	r5, r4, #3
 80006d0:	d569      	bpl.n	80007a6 <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d2:	f04f 0b00 	mov.w	fp, #0
 80006d6:	f8cd b00c 	str.w	fp, [sp, #12]
 80006da:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006de:	4d3f      	ldr	r5, [pc, #252]	; (80007dc <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e0:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80006e4:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80006e8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80006ec:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80006f0:	9703      	str	r7, [sp, #12]
 80006f2:	9f03      	ldr	r7, [sp, #12]
 80006f4:	f023 0703 	bic.w	r7, r3, #3
 80006f8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80006fc:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000700:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000704:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000708:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800070c:	f04f 0e0f 	mov.w	lr, #15
 8000710:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000714:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000716:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800071a:	d04b      	beq.n	80007b4 <HAL_GPIO_Init+0x1a4>
 800071c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000720:	42a8      	cmp	r0, r5
 8000722:	d049      	beq.n	80007b8 <HAL_GPIO_Init+0x1a8>
 8000724:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000728:	42a8      	cmp	r0, r5
 800072a:	d047      	beq.n	80007bc <HAL_GPIO_Init+0x1ac>
 800072c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000730:	42a8      	cmp	r0, r5
 8000732:	d045      	beq.n	80007c0 <HAL_GPIO_Init+0x1b0>
 8000734:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000738:	42a8      	cmp	r0, r5
 800073a:	d043      	beq.n	80007c4 <HAL_GPIO_Init+0x1b4>
 800073c:	4548      	cmp	r0, r9
 800073e:	d043      	beq.n	80007c8 <HAL_GPIO_Init+0x1b8>
 8000740:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000744:	42a8      	cmp	r0, r5
 8000746:	d041      	beq.n	80007cc <HAL_GPIO_Init+0x1bc>
 8000748:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800074c:	42a8      	cmp	r0, r5
 800074e:	d03f      	beq.n	80007d0 <HAL_GPIO_Init+0x1c0>
 8000750:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000754:	42a8      	cmp	r0, r5
 8000756:	d03d      	beq.n	80007d4 <HAL_GPIO_Init+0x1c4>
 8000758:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800075c:	42a8      	cmp	r0, r5
 800075e:	bf14      	ite	ne
 8000760:	250a      	movne	r5, #10
 8000762:	2509      	moveq	r5, #9
 8000764:	fa05 f50c 	lsl.w	r5, r5, ip
 8000768:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800076c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800076e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000770:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000772:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000776:	bf0c      	ite	eq
 8000778:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800077a:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800077c:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800077e:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000780:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000784:	bf0c      	ite	eq
 8000786:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000788:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800078a:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800078c:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800078e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000792:	bf0c      	ite	eq
 8000794:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000796:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000798:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800079a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800079c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800079e:	bf54      	ite	pl
 80007a0:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80007a2:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80007a4:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007a6:	3301      	adds	r3, #1
 80007a8:	2b10      	cmp	r3, #16
 80007aa:	f47f af3c 	bne.w	8000626 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80007ae:	b005      	add	sp, #20
 80007b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007b4:	465d      	mov	r5, fp
 80007b6:	e7d5      	b.n	8000764 <HAL_GPIO_Init+0x154>
 80007b8:	2501      	movs	r5, #1
 80007ba:	e7d3      	b.n	8000764 <HAL_GPIO_Init+0x154>
 80007bc:	2502      	movs	r5, #2
 80007be:	e7d1      	b.n	8000764 <HAL_GPIO_Init+0x154>
 80007c0:	2503      	movs	r5, #3
 80007c2:	e7cf      	b.n	8000764 <HAL_GPIO_Init+0x154>
 80007c4:	2504      	movs	r5, #4
 80007c6:	e7cd      	b.n	8000764 <HAL_GPIO_Init+0x154>
 80007c8:	2505      	movs	r5, #5
 80007ca:	e7cb      	b.n	8000764 <HAL_GPIO_Init+0x154>
 80007cc:	2506      	movs	r5, #6
 80007ce:	e7c9      	b.n	8000764 <HAL_GPIO_Init+0x154>
 80007d0:	2507      	movs	r5, #7
 80007d2:	e7c7      	b.n	8000764 <HAL_GPIO_Init+0x154>
 80007d4:	2508      	movs	r5, #8
 80007d6:	e7c5      	b.n	8000764 <HAL_GPIO_Init+0x154>
 80007d8:	40013c00 	.word	0x40013c00
 80007dc:	40020000 	.word	0x40020000
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40021400 	.word	0x40021400

080007e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007e8:	b10a      	cbz	r2, 80007ee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007ea:	6181      	str	r1, [r0, #24]
 80007ec:	4770      	bx	lr
 80007ee:	0409      	lsls	r1, r1, #16
 80007f0:	e7fb      	b.n	80007ea <HAL_GPIO_WritePin+0x2>
	...

080007f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007f8:	4604      	mov	r4, r0
 80007fa:	b918      	cbnz	r0, 8000804 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80007fc:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80007fe:	b002      	add	sp, #8
 8000800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000804:	6803      	ldr	r3, [r0, #0]
 8000806:	07dd      	lsls	r5, r3, #31
 8000808:	d410      	bmi.n	800082c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800080a:	6823      	ldr	r3, [r4, #0]
 800080c:	0798      	lsls	r0, r3, #30
 800080e:	d458      	bmi.n	80008c2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000810:	6823      	ldr	r3, [r4, #0]
 8000812:	071a      	lsls	r2, r3, #28
 8000814:	f100 809a 	bmi.w	800094c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000818:	6823      	ldr	r3, [r4, #0]
 800081a:	075b      	lsls	r3, r3, #29
 800081c:	f100 80b8 	bmi.w	8000990 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000820:	69a2      	ldr	r2, [r4, #24]
 8000822:	2a00      	cmp	r2, #0
 8000824:	f040 8119 	bne.w	8000a5a <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000828:	2000      	movs	r0, #0
 800082a:	e7e8      	b.n	80007fe <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800082c:	4ba6      	ldr	r3, [pc, #664]	; (8000ac8 <HAL_RCC_OscConfig+0x2d4>)
 800082e:	689a      	ldr	r2, [r3, #8]
 8000830:	f002 020c 	and.w	r2, r2, #12
 8000834:	2a04      	cmp	r2, #4
 8000836:	d007      	beq.n	8000848 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000838:	689a      	ldr	r2, [r3, #8]
 800083a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800083e:	2a08      	cmp	r2, #8
 8000840:	d10a      	bne.n	8000858 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	0259      	lsls	r1, r3, #9
 8000846:	d507      	bpl.n	8000858 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000848:	4b9f      	ldr	r3, [pc, #636]	; (8000ac8 <HAL_RCC_OscConfig+0x2d4>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	039a      	lsls	r2, r3, #14
 800084e:	d5dc      	bpl.n	800080a <HAL_RCC_OscConfig+0x16>
 8000850:	6863      	ldr	r3, [r4, #4]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d1d9      	bne.n	800080a <HAL_RCC_OscConfig+0x16>
 8000856:	e7d1      	b.n	80007fc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000858:	6863      	ldr	r3, [r4, #4]
 800085a:	4d9b      	ldr	r5, [pc, #620]	; (8000ac8 <HAL_RCC_OscConfig+0x2d4>)
 800085c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000860:	d111      	bne.n	8000886 <HAL_RCC_OscConfig+0x92>
 8000862:	682b      	ldr	r3, [r5, #0]
 8000864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000868:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800086a:	f7ff fe77 	bl	800055c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800086e:	4d96      	ldr	r5, [pc, #600]	; (8000ac8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000870:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000872:	682b      	ldr	r3, [r5, #0]
 8000874:	039b      	lsls	r3, r3, #14
 8000876:	d4c8      	bmi.n	800080a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000878:	f7ff fe70 	bl	800055c <HAL_GetTick>
 800087c:	1b80      	subs	r0, r0, r6
 800087e:	2864      	cmp	r0, #100	; 0x64
 8000880:	d9f7      	bls.n	8000872 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000882:	2003      	movs	r0, #3
 8000884:	e7bb      	b.n	80007fe <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000886:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800088a:	d104      	bne.n	8000896 <HAL_RCC_OscConfig+0xa2>
 800088c:	682b      	ldr	r3, [r5, #0]
 800088e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000892:	602b      	str	r3, [r5, #0]
 8000894:	e7e5      	b.n	8000862 <HAL_RCC_OscConfig+0x6e>
 8000896:	682a      	ldr	r2, [r5, #0]
 8000898:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800089c:	602a      	str	r2, [r5, #0]
 800089e:	682a      	ldr	r2, [r5, #0]
 80008a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80008a4:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d1df      	bne.n	800086a <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80008aa:	f7ff fe57 	bl	800055c <HAL_GetTick>
 80008ae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008b0:	682b      	ldr	r3, [r5, #0]
 80008b2:	039f      	lsls	r7, r3, #14
 80008b4:	d5a9      	bpl.n	800080a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008b6:	f7ff fe51 	bl	800055c <HAL_GetTick>
 80008ba:	1b80      	subs	r0, r0, r6
 80008bc:	2864      	cmp	r0, #100	; 0x64
 80008be:	d9f7      	bls.n	80008b0 <HAL_RCC_OscConfig+0xbc>
 80008c0:	e7df      	b.n	8000882 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008c2:	4b81      	ldr	r3, [pc, #516]	; (8000ac8 <HAL_RCC_OscConfig+0x2d4>)
 80008c4:	689a      	ldr	r2, [r3, #8]
 80008c6:	f012 0f0c 	tst.w	r2, #12
 80008ca:	d007      	beq.n	80008dc <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008cc:	689a      	ldr	r2, [r3, #8]
 80008ce:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008d2:	2a08      	cmp	r2, #8
 80008d4:	d111      	bne.n	80008fa <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	025e      	lsls	r6, r3, #9
 80008da:	d40e      	bmi.n	80008fa <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008dc:	4b7a      	ldr	r3, [pc, #488]	; (8000ac8 <HAL_RCC_OscConfig+0x2d4>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	0795      	lsls	r5, r2, #30
 80008e2:	d502      	bpl.n	80008ea <HAL_RCC_OscConfig+0xf6>
 80008e4:	68e2      	ldr	r2, [r4, #12]
 80008e6:	2a01      	cmp	r2, #1
 80008e8:	d188      	bne.n	80007fc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	6921      	ldr	r1, [r4, #16]
 80008ee:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80008f2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80008f6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008f8:	e78a      	b.n	8000810 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80008fa:	68e2      	ldr	r2, [r4, #12]
 80008fc:	4b73      	ldr	r3, [pc, #460]	; (8000acc <HAL_RCC_OscConfig+0x2d8>)
 80008fe:	b1b2      	cbz	r2, 800092e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000900:	2201      	movs	r2, #1
 8000902:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000904:	f7ff fe2a 	bl	800055c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000908:	4d6f      	ldr	r5, [pc, #444]	; (8000ac8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800090a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800090c:	682b      	ldr	r3, [r5, #0]
 800090e:	0798      	lsls	r0, r3, #30
 8000910:	d507      	bpl.n	8000922 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000912:	682b      	ldr	r3, [r5, #0]
 8000914:	6922      	ldr	r2, [r4, #16]
 8000916:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800091a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800091e:	602b      	str	r3, [r5, #0]
 8000920:	e776      	b.n	8000810 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000922:	f7ff fe1b 	bl	800055c <HAL_GetTick>
 8000926:	1b80      	subs	r0, r0, r6
 8000928:	2802      	cmp	r0, #2
 800092a:	d9ef      	bls.n	800090c <HAL_RCC_OscConfig+0x118>
 800092c:	e7a9      	b.n	8000882 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800092e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000930:	f7ff fe14 	bl	800055c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000934:	4d64      	ldr	r5, [pc, #400]	; (8000ac8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000936:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000938:	682b      	ldr	r3, [r5, #0]
 800093a:	0799      	lsls	r1, r3, #30
 800093c:	f57f af68 	bpl.w	8000810 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000940:	f7ff fe0c 	bl	800055c <HAL_GetTick>
 8000944:	1b80      	subs	r0, r0, r6
 8000946:	2802      	cmp	r0, #2
 8000948:	d9f6      	bls.n	8000938 <HAL_RCC_OscConfig+0x144>
 800094a:	e79a      	b.n	8000882 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800094c:	6962      	ldr	r2, [r4, #20]
 800094e:	4b60      	ldr	r3, [pc, #384]	; (8000ad0 <HAL_RCC_OscConfig+0x2dc>)
 8000950:	b17a      	cbz	r2, 8000972 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000952:	2201      	movs	r2, #1
 8000954:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000956:	f7ff fe01 	bl	800055c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800095a:	4d5b      	ldr	r5, [pc, #364]	; (8000ac8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800095c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800095e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000960:	079f      	lsls	r7, r3, #30
 8000962:	f53f af59 	bmi.w	8000818 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000966:	f7ff fdf9 	bl	800055c <HAL_GetTick>
 800096a:	1b80      	subs	r0, r0, r6
 800096c:	2802      	cmp	r0, #2
 800096e:	d9f6      	bls.n	800095e <HAL_RCC_OscConfig+0x16a>
 8000970:	e787      	b.n	8000882 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000972:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000974:	f7ff fdf2 	bl	800055c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000978:	4d53      	ldr	r5, [pc, #332]	; (8000ac8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800097a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800097c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800097e:	0798      	lsls	r0, r3, #30
 8000980:	f57f af4a 	bpl.w	8000818 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000984:	f7ff fdea 	bl	800055c <HAL_GetTick>
 8000988:	1b80      	subs	r0, r0, r6
 800098a:	2802      	cmp	r0, #2
 800098c:	d9f6      	bls.n	800097c <HAL_RCC_OscConfig+0x188>
 800098e:	e778      	b.n	8000882 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000990:	4b4d      	ldr	r3, [pc, #308]	; (8000ac8 <HAL_RCC_OscConfig+0x2d4>)
 8000992:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000994:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000998:	d128      	bne.n	80009ec <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	9201      	str	r2, [sp, #4]
 800099c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800099e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009a2:	641a      	str	r2, [r3, #64]	; 0x40
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009aa:	9301      	str	r3, [sp, #4]
 80009ac:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80009ae:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009b0:	4d48      	ldr	r5, [pc, #288]	; (8000ad4 <HAL_RCC_OscConfig+0x2e0>)
 80009b2:	682b      	ldr	r3, [r5, #0]
 80009b4:	05d9      	lsls	r1, r3, #23
 80009b6:	d51b      	bpl.n	80009f0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009b8:	68a3      	ldr	r3, [r4, #8]
 80009ba:	4d43      	ldr	r5, [pc, #268]	; (8000ac8 <HAL_RCC_OscConfig+0x2d4>)
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d127      	bne.n	8000a10 <HAL_RCC_OscConfig+0x21c>
 80009c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009c2:	f043 0301 	orr.w	r3, r3, #1
 80009c6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80009c8:	f7ff fdc8 	bl	800055c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009cc:	4d3e      	ldr	r5, [pc, #248]	; (8000ac8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80009ce:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009d0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009d4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009d6:	079b      	lsls	r3, r3, #30
 80009d8:	d539      	bpl.n	8000a4e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80009da:	2e00      	cmp	r6, #0
 80009dc:	f43f af20 	beq.w	8000820 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80009e0:	4a39      	ldr	r2, [pc, #228]	; (8000ac8 <HAL_RCC_OscConfig+0x2d4>)
 80009e2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80009e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009e8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ea:	e719      	b.n	8000820 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80009ec:	2600      	movs	r6, #0
 80009ee:	e7df      	b.n	80009b0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009f0:	682b      	ldr	r3, [r5, #0]
 80009f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80009f8:	f7ff fdb0 	bl	800055c <HAL_GetTick>
 80009fc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009fe:	682b      	ldr	r3, [r5, #0]
 8000a00:	05da      	lsls	r2, r3, #23
 8000a02:	d4d9      	bmi.n	80009b8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a04:	f7ff fdaa 	bl	800055c <HAL_GetTick>
 8000a08:	1bc0      	subs	r0, r0, r7
 8000a0a:	2802      	cmp	r0, #2
 8000a0c:	d9f7      	bls.n	80009fe <HAL_RCC_OscConfig+0x20a>
 8000a0e:	e738      	b.n	8000882 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a10:	2b05      	cmp	r3, #5
 8000a12:	d104      	bne.n	8000a1e <HAL_RCC_OscConfig+0x22a>
 8000a14:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a16:	f043 0304 	orr.w	r3, r3, #4
 8000a1a:	672b      	str	r3, [r5, #112]	; 0x70
 8000a1c:	e7d0      	b.n	80009c0 <HAL_RCC_OscConfig+0x1cc>
 8000a1e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a20:	f022 0201 	bic.w	r2, r2, #1
 8000a24:	672a      	str	r2, [r5, #112]	; 0x70
 8000a26:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a28:	f022 0204 	bic.w	r2, r2, #4
 8000a2c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d1ca      	bne.n	80009c8 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000a32:	f7ff fd93 	bl	800055c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a36:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a3a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a3c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a3e:	0798      	lsls	r0, r3, #30
 8000a40:	d5cb      	bpl.n	80009da <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a42:	f7ff fd8b 	bl	800055c <HAL_GetTick>
 8000a46:	1bc0      	subs	r0, r0, r7
 8000a48:	4540      	cmp	r0, r8
 8000a4a:	d9f7      	bls.n	8000a3c <HAL_RCC_OscConfig+0x248>
 8000a4c:	e719      	b.n	8000882 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a4e:	f7ff fd85 	bl	800055c <HAL_GetTick>
 8000a52:	1bc0      	subs	r0, r0, r7
 8000a54:	4540      	cmp	r0, r8
 8000a56:	d9bd      	bls.n	80009d4 <HAL_RCC_OscConfig+0x1e0>
 8000a58:	e713      	b.n	8000882 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a5a:	4d1b      	ldr	r5, [pc, #108]	; (8000ac8 <HAL_RCC_OscConfig+0x2d4>)
 8000a5c:	68ab      	ldr	r3, [r5, #8]
 8000a5e:	f003 030c 	and.w	r3, r3, #12
 8000a62:	2b08      	cmp	r3, #8
 8000a64:	f43f aeca 	beq.w	80007fc <HAL_RCC_OscConfig+0x8>
 8000a68:	4e1b      	ldr	r6, [pc, #108]	; (8000ad8 <HAL_RCC_OscConfig+0x2e4>)
 8000a6a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a6c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000a6e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a70:	d134      	bne.n	8000adc <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000a72:	f7ff fd73 	bl	800055c <HAL_GetTick>
 8000a76:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a78:	682b      	ldr	r3, [r5, #0]
 8000a7a:	0199      	lsls	r1, r3, #6
 8000a7c:	d41e      	bmi.n	8000abc <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a7e:	6a22      	ldr	r2, [r4, #32]
 8000a80:	69e3      	ldr	r3, [r4, #28]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a86:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000a8a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000a8c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000a90:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a92:	4c0d      	ldr	r4, [pc, #52]	; (8000ac8 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a94:	0852      	lsrs	r2, r2, #1
 8000a96:	3a01      	subs	r2, #1
 8000a98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a9c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000aa2:	f7ff fd5b 	bl	800055c <HAL_GetTick>
 8000aa6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000aa8:	6823      	ldr	r3, [r4, #0]
 8000aaa:	019a      	lsls	r2, r3, #6
 8000aac:	f53f aebc 	bmi.w	8000828 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ab0:	f7ff fd54 	bl	800055c <HAL_GetTick>
 8000ab4:	1b40      	subs	r0, r0, r5
 8000ab6:	2802      	cmp	r0, #2
 8000ab8:	d9f6      	bls.n	8000aa8 <HAL_RCC_OscConfig+0x2b4>
 8000aba:	e6e2      	b.n	8000882 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000abc:	f7ff fd4e 	bl	800055c <HAL_GetTick>
 8000ac0:	1bc0      	subs	r0, r0, r7
 8000ac2:	2802      	cmp	r0, #2
 8000ac4:	d9d8      	bls.n	8000a78 <HAL_RCC_OscConfig+0x284>
 8000ac6:	e6dc      	b.n	8000882 <HAL_RCC_OscConfig+0x8e>
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	42470000 	.word	0x42470000
 8000ad0:	42470e80 	.word	0x42470e80
 8000ad4:	40007000 	.word	0x40007000
 8000ad8:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000adc:	f7ff fd3e 	bl	800055c <HAL_GetTick>
 8000ae0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ae2:	682b      	ldr	r3, [r5, #0]
 8000ae4:	019b      	lsls	r3, r3, #6
 8000ae6:	f57f ae9f 	bpl.w	8000828 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000aea:	f7ff fd37 	bl	800055c <HAL_GetTick>
 8000aee:	1b00      	subs	r0, r0, r4
 8000af0:	2802      	cmp	r0, #2
 8000af2:	d9f6      	bls.n	8000ae2 <HAL_RCC_OscConfig+0x2ee>
 8000af4:	e6c5      	b.n	8000882 <HAL_RCC_OscConfig+0x8e>
 8000af6:	bf00      	nop

08000af8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000af8:	4913      	ldr	r1, [pc, #76]	; (8000b48 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000afa:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000afc:	688b      	ldr	r3, [r1, #8]
 8000afe:	f003 030c 	and.w	r3, r3, #12
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	d003      	beq.n	8000b0e <HAL_RCC_GetSysClockFreq+0x16>
 8000b06:	2b08      	cmp	r3, #8
 8000b08:	d003      	beq.n	8000b12 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b0a:	4810      	ldr	r0, [pc, #64]	; (8000b4c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b0c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000b0e:	4810      	ldr	r0, [pc, #64]	; (8000b50 <HAL_RCC_GetSysClockFreq+0x58>)
 8000b10:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b12:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b14:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b16:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b18:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b1c:	bf14      	ite	ne
 8000b1e:	480c      	ldrne	r0, [pc, #48]	; (8000b50 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b20:	480a      	ldreq	r0, [pc, #40]	; (8000b4c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b22:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000b26:	bf18      	it	ne
 8000b28:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b2a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b2e:	fba1 0100 	umull	r0, r1, r1, r0
 8000b32:	f7ff fb65 	bl	8000200 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000b36:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <HAL_RCC_GetSysClockFreq+0x50>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000b3e:	3301      	adds	r3, #1
 8000b40:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000b42:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b46:	bd08      	pop	{r3, pc}
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	00f42400 	.word	0x00f42400
 8000b50:	007a1200 	.word	0x007a1200

08000b54 <HAL_RCC_ClockConfig>:
{
 8000b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b58:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000b5a:	4604      	mov	r4, r0
 8000b5c:	b910      	cbnz	r0, 8000b64 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b5e:	2001      	movs	r0, #1
 8000b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b64:	4b44      	ldr	r3, [pc, #272]	; (8000c78 <HAL_RCC_ClockConfig+0x124>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	f002 020f 	and.w	r2, r2, #15
 8000b6c:	428a      	cmp	r2, r1
 8000b6e:	d328      	bcc.n	8000bc2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b70:	6821      	ldr	r1, [r4, #0]
 8000b72:	078f      	lsls	r7, r1, #30
 8000b74:	d42d      	bmi.n	8000bd2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b76:	07c8      	lsls	r0, r1, #31
 8000b78:	d440      	bmi.n	8000bfc <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000b7a:	4b3f      	ldr	r3, [pc, #252]	; (8000c78 <HAL_RCC_ClockConfig+0x124>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	f002 020f 	and.w	r2, r2, #15
 8000b82:	4295      	cmp	r5, r2
 8000b84:	d366      	bcc.n	8000c54 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b86:	6822      	ldr	r2, [r4, #0]
 8000b88:	0751      	lsls	r1, r2, #29
 8000b8a:	d46c      	bmi.n	8000c66 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b8c:	0713      	lsls	r3, r2, #28
 8000b8e:	d507      	bpl.n	8000ba0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000b90:	4a3a      	ldr	r2, [pc, #232]	; (8000c7c <HAL_RCC_ClockConfig+0x128>)
 8000b92:	6921      	ldr	r1, [r4, #16]
 8000b94:	6893      	ldr	r3, [r2, #8]
 8000b96:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000b9a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000b9e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ba0:	f7ff ffaa 	bl	8000af8 <HAL_RCC_GetSysClockFreq>
 8000ba4:	4b35      	ldr	r3, [pc, #212]	; (8000c7c <HAL_RCC_ClockConfig+0x128>)
 8000ba6:	4a36      	ldr	r2, [pc, #216]	; (8000c80 <HAL_RCC_ClockConfig+0x12c>)
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000bae:	5cd3      	ldrb	r3, [r2, r3]
 8000bb0:	40d8      	lsrs	r0, r3
 8000bb2:	4b34      	ldr	r3, [pc, #208]	; (8000c84 <HAL_RCC_ClockConfig+0x130>)
 8000bb4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f001 fba0 	bl	80022fc <HAL_InitTick>
  return HAL_OK;
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bc2:	b2ca      	uxtb	r2, r1
 8000bc4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f003 030f 	and.w	r3, r3, #15
 8000bcc:	4299      	cmp	r1, r3
 8000bce:	d1c6      	bne.n	8000b5e <HAL_RCC_ClockConfig+0xa>
 8000bd0:	e7ce      	b.n	8000b70 <HAL_RCC_ClockConfig+0x1c>
 8000bd2:	4b2a      	ldr	r3, [pc, #168]	; (8000c7c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bd4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000bd8:	bf1e      	ittt	ne
 8000bda:	689a      	ldrne	r2, [r3, #8]
 8000bdc:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000be0:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000be2:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000be4:	bf42      	ittt	mi
 8000be6:	689a      	ldrmi	r2, [r3, #8]
 8000be8:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000bec:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000bee:	689a      	ldr	r2, [r3, #8]
 8000bf0:	68a0      	ldr	r0, [r4, #8]
 8000bf2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000bf6:	4302      	orrs	r2, r0
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	e7bc      	b.n	8000b76 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bfc:	6862      	ldr	r2, [r4, #4]
 8000bfe:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <HAL_RCC_ClockConfig+0x128>)
 8000c00:	2a01      	cmp	r2, #1
 8000c02:	d11d      	bne.n	8000c40 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c0a:	d0a8      	beq.n	8000b5e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c0c:	4e1b      	ldr	r6, [pc, #108]	; (8000c7c <HAL_RCC_ClockConfig+0x128>)
 8000c0e:	68b3      	ldr	r3, [r6, #8]
 8000c10:	f023 0303 	bic.w	r3, r3, #3
 8000c14:	4313      	orrs	r3, r2
 8000c16:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000c18:	f7ff fca0 	bl	800055c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c1c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c20:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c22:	68b3      	ldr	r3, [r6, #8]
 8000c24:	6862      	ldr	r2, [r4, #4]
 8000c26:	f003 030c 	and.w	r3, r3, #12
 8000c2a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c2e:	d0a4      	beq.n	8000b7a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c30:	f7ff fc94 	bl	800055c <HAL_GetTick>
 8000c34:	1bc0      	subs	r0, r0, r7
 8000c36:	4540      	cmp	r0, r8
 8000c38:	d9f3      	bls.n	8000c22 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000c3a:	2003      	movs	r0, #3
}
 8000c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c40:	1e91      	subs	r1, r2, #2
 8000c42:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c44:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c46:	d802      	bhi.n	8000c4e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c48:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c4c:	e7dd      	b.n	8000c0a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c4e:	f013 0f02 	tst.w	r3, #2
 8000c52:	e7da      	b.n	8000c0a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c54:	b2ea      	uxtb	r2, r5
 8000c56:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f003 030f 	and.w	r3, r3, #15
 8000c5e:	429d      	cmp	r5, r3
 8000c60:	f47f af7d 	bne.w	8000b5e <HAL_RCC_ClockConfig+0xa>
 8000c64:	e78f      	b.n	8000b86 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c66:	4905      	ldr	r1, [pc, #20]	; (8000c7c <HAL_RCC_ClockConfig+0x128>)
 8000c68:	68e0      	ldr	r0, [r4, #12]
 8000c6a:	688b      	ldr	r3, [r1, #8]
 8000c6c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000c70:	4303      	orrs	r3, r0
 8000c72:	608b      	str	r3, [r1, #8]
 8000c74:	e78a      	b.n	8000b8c <HAL_RCC_ClockConfig+0x38>
 8000c76:	bf00      	nop
 8000c78:	40023c00 	.word	0x40023c00
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	08002511 	.word	0x08002511
 8000c84:	2000001c 	.word	0x2000001c

08000c88 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <HAL_RCC_GetPCLK1Freq+0x14>)
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000c92:	5cd3      	ldrb	r3, [r2, r3]
 8000c94:	4a03      	ldr	r2, [pc, #12]	; (8000ca4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000c96:	6810      	ldr	r0, [r2, #0]
}
 8000c98:	40d8      	lsrs	r0, r3
 8000c9a:	4770      	bx	lr
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	08002521 	.word	0x08002521
 8000ca4:	2000001c 	.word	0x2000001c

08000ca8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <HAL_RCC_GetPCLK2Freq+0x14>)
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000cb2:	5cd3      	ldrb	r3, [r2, r3]
 8000cb4:	4a03      	ldr	r2, [pc, #12]	; (8000cc4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000cb6:	6810      	ldr	r0, [r2, #0]
}
 8000cb8:	40d8      	lsrs	r0, r3
 8000cba:	4770      	bx	lr
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	08002521 	.word	0x08002521
 8000cc4:	2000001c 	.word	0x2000001c

08000cc8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000cc8:	230f      	movs	r3, #15
 8000cca:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <HAL_RCC_GetClockConfig+0x34>)
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	f002 0203 	and.w	r2, r2, #3
 8000cd4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000cd6:	689a      	ldr	r2, [r3, #8]
 8000cd8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000cdc:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000cde:	689a      	ldr	r2, [r3, #8]
 8000ce0:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000ce4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	08db      	lsrs	r3, r3, #3
 8000cea:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000cee:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <HAL_RCC_GetClockConfig+0x38>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f003 030f 	and.w	r3, r3, #15
 8000cf8:	600b      	str	r3, [r1, #0]
 8000cfa:	4770      	bx	lr
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40023c00 	.word	0x40023c00

08000d04 <HAL_TIM_Base_MspInit>:
 8000d04:	4770      	bx	lr

08000d06 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000d06:	6803      	ldr	r3, [r0, #0]
 8000d08:	68da      	ldr	r2, [r3, #12]
 8000d0a:	f042 0201 	orr.w	r2, r2, #1
 8000d0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000d10:	689a      	ldr	r2, [r3, #8]
 8000d12:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000d16:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8000d18:	bf1e      	ittt	ne
 8000d1a:	681a      	ldrne	r2, [r3, #0]
 8000d1c:	f042 0201 	orrne.w	r2, r2, #1
 8000d20:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8000d22:	2000      	movs	r0, #0
 8000d24:	4770      	bx	lr

08000d26 <HAL_TIM_OC_DelayElapsedCallback>:
 8000d26:	4770      	bx	lr

08000d28 <HAL_TIM_IC_CaptureCallback>:
 8000d28:	4770      	bx	lr

08000d2a <HAL_TIM_PWM_PulseFinishedCallback>:
 8000d2a:	4770      	bx	lr

08000d2c <HAL_TIM_TriggerCallback>:
 8000d2c:	4770      	bx	lr

08000d2e <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d2e:	6803      	ldr	r3, [r0, #0]
 8000d30:	691a      	ldr	r2, [r3, #16]
 8000d32:	0791      	lsls	r1, r2, #30
{
 8000d34:	b510      	push	{r4, lr}
 8000d36:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d38:	d50e      	bpl.n	8000d58 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000d3a:	68da      	ldr	r2, [r3, #12]
 8000d3c:	0792      	lsls	r2, r2, #30
 8000d3e:	d50b      	bpl.n	8000d58 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000d40:	f06f 0202 	mvn.w	r2, #2
 8000d44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d46:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d48:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d4a:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d4c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d4e:	d077      	beq.n	8000e40 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000d50:	f7ff ffea 	bl	8000d28 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d54:	2300      	movs	r3, #0
 8000d56:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000d58:	6823      	ldr	r3, [r4, #0]
 8000d5a:	691a      	ldr	r2, [r3, #16]
 8000d5c:	0750      	lsls	r0, r2, #29
 8000d5e:	d510      	bpl.n	8000d82 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000d60:	68da      	ldr	r2, [r3, #12]
 8000d62:	0751      	lsls	r1, r2, #29
 8000d64:	d50d      	bpl.n	8000d82 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000d66:	f06f 0204 	mvn.w	r2, #4
 8000d6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d6c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d6e:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d70:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d74:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000d76:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d78:	d068      	beq.n	8000e4c <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d7a:	f7ff ffd5 	bl	8000d28 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000d82:	6823      	ldr	r3, [r4, #0]
 8000d84:	691a      	ldr	r2, [r3, #16]
 8000d86:	0712      	lsls	r2, r2, #28
 8000d88:	d50f      	bpl.n	8000daa <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000d8a:	68da      	ldr	r2, [r3, #12]
 8000d8c:	0710      	lsls	r0, r2, #28
 8000d8e:	d50c      	bpl.n	8000daa <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000d90:	f06f 0208 	mvn.w	r2, #8
 8000d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d96:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d98:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d9a:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d9c:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000d9e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000da0:	d05a      	beq.n	8000e58 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000da2:	f7ff ffc1 	bl	8000d28 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000da6:	2300      	movs	r3, #0
 8000da8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000daa:	6823      	ldr	r3, [r4, #0]
 8000dac:	691a      	ldr	r2, [r3, #16]
 8000dae:	06d2      	lsls	r2, r2, #27
 8000db0:	d510      	bpl.n	8000dd4 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000db2:	68da      	ldr	r2, [r3, #12]
 8000db4:	06d0      	lsls	r0, r2, #27
 8000db6:	d50d      	bpl.n	8000dd4 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000db8:	f06f 0210 	mvn.w	r2, #16
 8000dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000dbe:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000dc0:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000dc2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000dc6:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000dc8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000dca:	d04b      	beq.n	8000e64 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000dcc:	f7ff ffac 	bl	8000d28 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000dd4:	6823      	ldr	r3, [r4, #0]
 8000dd6:	691a      	ldr	r2, [r3, #16]
 8000dd8:	07d1      	lsls	r1, r2, #31
 8000dda:	d508      	bpl.n	8000dee <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000ddc:	68da      	ldr	r2, [r3, #12]
 8000dde:	07d2      	lsls	r2, r2, #31
 8000de0:	d505      	bpl.n	8000dee <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000de2:	f06f 0201 	mvn.w	r2, #1
 8000de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000de8:	4620      	mov	r0, r4
 8000dea:	f001 fa23 	bl	8002234 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000dee:	6823      	ldr	r3, [r4, #0]
 8000df0:	691a      	ldr	r2, [r3, #16]
 8000df2:	0610      	lsls	r0, r2, #24
 8000df4:	d508      	bpl.n	8000e08 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000df6:	68da      	ldr	r2, [r3, #12]
 8000df8:	0611      	lsls	r1, r2, #24
 8000dfa:	d505      	bpl.n	8000e08 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000dfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000e02:	4620      	mov	r0, r4
 8000e04:	f000 f8b7 	bl	8000f76 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000e08:	6823      	ldr	r3, [r4, #0]
 8000e0a:	691a      	ldr	r2, [r3, #16]
 8000e0c:	0652      	lsls	r2, r2, #25
 8000e0e:	d508      	bpl.n	8000e22 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000e10:	68da      	ldr	r2, [r3, #12]
 8000e12:	0650      	lsls	r0, r2, #25
 8000e14:	d505      	bpl.n	8000e22 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000e16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000e1c:	4620      	mov	r0, r4
 8000e1e:	f7ff ff85 	bl	8000d2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000e22:	6823      	ldr	r3, [r4, #0]
 8000e24:	691a      	ldr	r2, [r3, #16]
 8000e26:	0691      	lsls	r1, r2, #26
 8000e28:	d522      	bpl.n	8000e70 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000e2a:	68da      	ldr	r2, [r3, #12]
 8000e2c:	0692      	lsls	r2, r2, #26
 8000e2e:	d51f      	bpl.n	8000e70 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e30:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000e34:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e36:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8000e3c:	f000 b89a 	b.w	8000f74 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e40:	f7ff ff71 	bl	8000d26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e44:	4620      	mov	r0, r4
 8000e46:	f7ff ff70 	bl	8000d2a <HAL_TIM_PWM_PulseFinishedCallback>
 8000e4a:	e783      	b.n	8000d54 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e4c:	f7ff ff6b 	bl	8000d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e50:	4620      	mov	r0, r4
 8000e52:	f7ff ff6a 	bl	8000d2a <HAL_TIM_PWM_PulseFinishedCallback>
 8000e56:	e792      	b.n	8000d7e <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e58:	f7ff ff65 	bl	8000d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	f7ff ff64 	bl	8000d2a <HAL_TIM_PWM_PulseFinishedCallback>
 8000e62:	e7a0      	b.n	8000da6 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e64:	f7ff ff5f 	bl	8000d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e68:	4620      	mov	r0, r4
 8000e6a:	f7ff ff5e 	bl	8000d2a <HAL_TIM_PWM_PulseFinishedCallback>
 8000e6e:	e7af      	b.n	8000dd0 <HAL_TIM_IRQHandler+0xa2>
 8000e70:	bd10      	pop	{r4, pc}
	...

08000e74 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e74:	4a30      	ldr	r2, [pc, #192]	; (8000f38 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8000e76:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e78:	4290      	cmp	r0, r2
 8000e7a:	d012      	beq.n	8000ea2 <TIM_Base_SetConfig+0x2e>
 8000e7c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e80:	d00f      	beq.n	8000ea2 <TIM_Base_SetConfig+0x2e>
 8000e82:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000e86:	4290      	cmp	r0, r2
 8000e88:	d00b      	beq.n	8000ea2 <TIM_Base_SetConfig+0x2e>
 8000e8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e8e:	4290      	cmp	r0, r2
 8000e90:	d007      	beq.n	8000ea2 <TIM_Base_SetConfig+0x2e>
 8000e92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e96:	4290      	cmp	r0, r2
 8000e98:	d003      	beq.n	8000ea2 <TIM_Base_SetConfig+0x2e>
 8000e9a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000e9e:	4290      	cmp	r0, r2
 8000ea0:	d119      	bne.n	8000ed6 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000ea2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000ea8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000eaa:	4a23      	ldr	r2, [pc, #140]	; (8000f38 <TIM_Base_SetConfig+0xc4>)
 8000eac:	4290      	cmp	r0, r2
 8000eae:	d029      	beq.n	8000f04 <TIM_Base_SetConfig+0x90>
 8000eb0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000eb4:	d026      	beq.n	8000f04 <TIM_Base_SetConfig+0x90>
 8000eb6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000eba:	4290      	cmp	r0, r2
 8000ebc:	d022      	beq.n	8000f04 <TIM_Base_SetConfig+0x90>
 8000ebe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ec2:	4290      	cmp	r0, r2
 8000ec4:	d01e      	beq.n	8000f04 <TIM_Base_SetConfig+0x90>
 8000ec6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	d01a      	beq.n	8000f04 <TIM_Base_SetConfig+0x90>
 8000ece:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000ed2:	4290      	cmp	r0, r2
 8000ed4:	d016      	beq.n	8000f04 <TIM_Base_SetConfig+0x90>
 8000ed6:	4a19      	ldr	r2, [pc, #100]	; (8000f3c <TIM_Base_SetConfig+0xc8>)
 8000ed8:	4290      	cmp	r0, r2
 8000eda:	d013      	beq.n	8000f04 <TIM_Base_SetConfig+0x90>
 8000edc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ee0:	4290      	cmp	r0, r2
 8000ee2:	d00f      	beq.n	8000f04 <TIM_Base_SetConfig+0x90>
 8000ee4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ee8:	4290      	cmp	r0, r2
 8000eea:	d00b      	beq.n	8000f04 <TIM_Base_SetConfig+0x90>
 8000eec:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000ef0:	4290      	cmp	r0, r2
 8000ef2:	d007      	beq.n	8000f04 <TIM_Base_SetConfig+0x90>
 8000ef4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ef8:	4290      	cmp	r0, r2
 8000efa:	d003      	beq.n	8000f04 <TIM_Base_SetConfig+0x90>
 8000efc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f00:	4290      	cmp	r0, r2
 8000f02:	d103      	bne.n	8000f0c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f04:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f0a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000f0c:	694a      	ldr	r2, [r1, #20]
 8000f0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f12:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000f14:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000f16:	688b      	ldr	r3, [r1, #8]
 8000f18:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000f1a:	680b      	ldr	r3, [r1, #0]
 8000f1c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <TIM_Base_SetConfig+0xc4>)
 8000f20:	4298      	cmp	r0, r3
 8000f22:	d003      	beq.n	8000f2c <TIM_Base_SetConfig+0xb8>
 8000f24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f28:	4298      	cmp	r0, r3
 8000f2a:	d101      	bne.n	8000f30 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000f2c:	690b      	ldr	r3, [r1, #16]
 8000f2e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000f30:	2301      	movs	r3, #1
 8000f32:	6143      	str	r3, [r0, #20]
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	40010000 	.word	0x40010000
 8000f3c:	40014000 	.word	0x40014000

08000f40 <HAL_TIM_Base_Init>:
{
 8000f40:	b510      	push	{r4, lr}
  if (htim == NULL)
 8000f42:	4604      	mov	r4, r0
 8000f44:	b1a0      	cbz	r0, 8000f70 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000f46:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000f4a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f4e:	b91b      	cbnz	r3, 8000f58 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000f50:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000f54:	f7ff fed6 	bl	8000d04 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f5e:	6820      	ldr	r0, [r4, #0]
 8000f60:	1d21      	adds	r1, r4, #4
 8000f62:	f7ff ff87 	bl	8000e74 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8000f66:	2301      	movs	r3, #1
 8000f68:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f70:	2001      	movs	r0, #1
}
 8000f72:	bd10      	pop	{r4, pc}

08000f74 <HAL_TIMEx_CommutCallback>:
 8000f74:	4770      	bx	lr

08000f76 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000f76:	4770      	bx	lr

08000f78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f7c:	6806      	ldr	r6, [r0, #0]
 8000f7e:	68c2      	ldr	r2, [r0, #12]
 8000f80:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f82:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	6133      	str	r3, [r6, #16]
{
 8000f8c:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f8e:	6883      	ldr	r3, [r0, #8]
 8000f90:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8000f92:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f94:	4303      	orrs	r3, r0
 8000f96:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8000f98:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f9c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8000f9e:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000fa2:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000fa8:	6973      	ldr	r3, [r6, #20]
 8000faa:	69a2      	ldr	r2, [r4, #24]
 8000fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000fb0:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000fb2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000fb6:	6173      	str	r3, [r6, #20]
 8000fb8:	4b7a      	ldr	r3, [pc, #488]	; (80011a4 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000fba:	d17c      	bne.n	80010b6 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d003      	beq.n	8000fc8 <UART_SetConfig+0x50>
 8000fc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fc4:	429e      	cmp	r6, r3
 8000fc6:	d144      	bne.n	8001052 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000fc8:	f7ff fe6e 	bl	8000ca8 <HAL_RCC_GetPCLK2Freq>
 8000fcc:	2519      	movs	r5, #25
 8000fce:	fb05 f300 	mul.w	r3, r5, r0
 8000fd2:	6860      	ldr	r0, [r4, #4]
 8000fd4:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000fd8:	0040      	lsls	r0, r0, #1
 8000fda:	fbb3 f3f0 	udiv	r3, r3, r0
 8000fde:	fbb3 f3f9 	udiv	r3, r3, r9
 8000fe2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000fe6:	f7ff fe5f 	bl	8000ca8 <HAL_RCC_GetPCLK2Freq>
 8000fea:	6863      	ldr	r3, [r4, #4]
 8000fec:	4368      	muls	r0, r5
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fbb0 f7f3 	udiv	r7, r0, r3
 8000ff4:	f7ff fe58 	bl	8000ca8 <HAL_RCC_GetPCLK2Freq>
 8000ff8:	6863      	ldr	r3, [r4, #4]
 8000ffa:	4368      	muls	r0, r5
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001002:	fbb3 f3f9 	udiv	r3, r3, r9
 8001006:	fb09 7313 	mls	r3, r9, r3, r7
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	3332      	adds	r3, #50	; 0x32
 800100e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001018:	f7ff fe46 	bl	8000ca8 <HAL_RCC_GetPCLK2Freq>
 800101c:	6862      	ldr	r2, [r4, #4]
 800101e:	4368      	muls	r0, r5
 8001020:	0052      	lsls	r2, r2, #1
 8001022:	fbb0 faf2 	udiv	sl, r0, r2
 8001026:	f7ff fe3f 	bl	8000ca8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800102a:	6863      	ldr	r3, [r4, #4]
 800102c:	4368      	muls	r0, r5
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	fbb0 f3f3 	udiv	r3, r0, r3
 8001034:	fbb3 f3f9 	udiv	r3, r3, r9
 8001038:	fb09 a313 	mls	r3, r9, r3, sl
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	3332      	adds	r3, #50	; 0x32
 8001040:	fbb3 f3f9 	udiv	r3, r3, r9
 8001044:	f003 0307 	and.w	r3, r3, #7
 8001048:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800104a:	443b      	add	r3, r7
 800104c:	60b3      	str	r3, [r6, #8]
 800104e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001052:	f7ff fe19 	bl	8000c88 <HAL_RCC_GetPCLK1Freq>
 8001056:	2519      	movs	r5, #25
 8001058:	fb05 f300 	mul.w	r3, r5, r0
 800105c:	6860      	ldr	r0, [r4, #4]
 800105e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001062:	0040      	lsls	r0, r0, #1
 8001064:	fbb3 f3f0 	udiv	r3, r3, r0
 8001068:	fbb3 f3f9 	udiv	r3, r3, r9
 800106c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001070:	f7ff fe0a 	bl	8000c88 <HAL_RCC_GetPCLK1Freq>
 8001074:	6863      	ldr	r3, [r4, #4]
 8001076:	4368      	muls	r0, r5
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	fbb0 f7f3 	udiv	r7, r0, r3
 800107e:	f7ff fe03 	bl	8000c88 <HAL_RCC_GetPCLK1Freq>
 8001082:	6863      	ldr	r3, [r4, #4]
 8001084:	4368      	muls	r0, r5
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	fbb0 f3f3 	udiv	r3, r0, r3
 800108c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001090:	fb09 7313 	mls	r3, r9, r3, r7
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	3332      	adds	r3, #50	; 0x32
 8001098:	fbb3 f3f9 	udiv	r3, r3, r9
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80010a2:	f7ff fdf1 	bl	8000c88 <HAL_RCC_GetPCLK1Freq>
 80010a6:	6862      	ldr	r2, [r4, #4]
 80010a8:	4368      	muls	r0, r5
 80010aa:	0052      	lsls	r2, r2, #1
 80010ac:	fbb0 faf2 	udiv	sl, r0, r2
 80010b0:	f7ff fdea 	bl	8000c88 <HAL_RCC_GetPCLK1Freq>
 80010b4:	e7b9      	b.n	800102a <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80010b6:	429e      	cmp	r6, r3
 80010b8:	d002      	beq.n	80010c0 <UART_SetConfig+0x148>
 80010ba:	4b3b      	ldr	r3, [pc, #236]	; (80011a8 <UART_SetConfig+0x230>)
 80010bc:	429e      	cmp	r6, r3
 80010be:	d140      	bne.n	8001142 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80010c0:	f7ff fdf2 	bl	8000ca8 <HAL_RCC_GetPCLK2Freq>
 80010c4:	6867      	ldr	r7, [r4, #4]
 80010c6:	2519      	movs	r5, #25
 80010c8:	f04f 0964 	mov.w	r9, #100	; 0x64
 80010cc:	fb05 f300 	mul.w	r3, r5, r0
 80010d0:	00bf      	lsls	r7, r7, #2
 80010d2:	fbb3 f3f7 	udiv	r3, r3, r7
 80010d6:	fbb3 f3f9 	udiv	r3, r3, r9
 80010da:	011f      	lsls	r7, r3, #4
 80010dc:	f7ff fde4 	bl	8000ca8 <HAL_RCC_GetPCLK2Freq>
 80010e0:	6863      	ldr	r3, [r4, #4]
 80010e2:	4368      	muls	r0, r5
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	fbb0 f8f3 	udiv	r8, r0, r3
 80010ea:	f7ff fddd 	bl	8000ca8 <HAL_RCC_GetPCLK2Freq>
 80010ee:	6863      	ldr	r3, [r4, #4]
 80010f0:	4368      	muls	r0, r5
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80010f8:	fbb3 f3f9 	udiv	r3, r3, r9
 80010fc:	fb09 8313 	mls	r3, r9, r3, r8
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	3332      	adds	r3, #50	; 0x32
 8001104:	fbb3 f3f9 	udiv	r3, r3, r9
 8001108:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800110c:	f7ff fdcc 	bl	8000ca8 <HAL_RCC_GetPCLK2Freq>
 8001110:	6862      	ldr	r2, [r4, #4]
 8001112:	4368      	muls	r0, r5
 8001114:	0092      	lsls	r2, r2, #2
 8001116:	fbb0 faf2 	udiv	sl, r0, r2
 800111a:	f7ff fdc5 	bl	8000ca8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800111e:	6863      	ldr	r3, [r4, #4]
 8001120:	4368      	muls	r0, r5
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	fbb0 f3f3 	udiv	r3, r0, r3
 8001128:	fbb3 f3f9 	udiv	r3, r3, r9
 800112c:	fb09 a313 	mls	r3, r9, r3, sl
 8001130:	011b      	lsls	r3, r3, #4
 8001132:	3332      	adds	r3, #50	; 0x32
 8001134:	fbb3 f3f9 	udiv	r3, r3, r9
 8001138:	f003 030f 	and.w	r3, r3, #15
 800113c:	ea43 0308 	orr.w	r3, r3, r8
 8001140:	e783      	b.n	800104a <UART_SetConfig+0xd2>
 8001142:	f7ff fda1 	bl	8000c88 <HAL_RCC_GetPCLK1Freq>
 8001146:	6867      	ldr	r7, [r4, #4]
 8001148:	2519      	movs	r5, #25
 800114a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800114e:	fb05 f300 	mul.w	r3, r5, r0
 8001152:	00bf      	lsls	r7, r7, #2
 8001154:	fbb3 f3f7 	udiv	r3, r3, r7
 8001158:	fbb3 f3f9 	udiv	r3, r3, r9
 800115c:	011f      	lsls	r7, r3, #4
 800115e:	f7ff fd93 	bl	8000c88 <HAL_RCC_GetPCLK1Freq>
 8001162:	6863      	ldr	r3, [r4, #4]
 8001164:	4368      	muls	r0, r5
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	fbb0 f8f3 	udiv	r8, r0, r3
 800116c:	f7ff fd8c 	bl	8000c88 <HAL_RCC_GetPCLK1Freq>
 8001170:	6863      	ldr	r3, [r4, #4]
 8001172:	4368      	muls	r0, r5
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	fbb0 f3f3 	udiv	r3, r0, r3
 800117a:	fbb3 f3f9 	udiv	r3, r3, r9
 800117e:	fb09 8313 	mls	r3, r9, r3, r8
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	3332      	adds	r3, #50	; 0x32
 8001186:	fbb3 f3f9 	udiv	r3, r3, r9
 800118a:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800118e:	f7ff fd7b 	bl	8000c88 <HAL_RCC_GetPCLK1Freq>
 8001192:	6862      	ldr	r2, [r4, #4]
 8001194:	4368      	muls	r0, r5
 8001196:	0092      	lsls	r2, r2, #2
 8001198:	fbb0 faf2 	udiv	sl, r0, r2
 800119c:	f7ff fd74 	bl	8000c88 <HAL_RCC_GetPCLK1Freq>
 80011a0:	e7bd      	b.n	800111e <UART_SetConfig+0x1a6>
 80011a2:	bf00      	nop
 80011a4:	40011000 	.word	0x40011000
 80011a8:	40011400 	.word	0x40011400

080011ac <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80011ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ae:	4604      	mov	r4, r0
 80011b0:	460e      	mov	r6, r1
 80011b2:	4617      	mov	r7, r2
 80011b4:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80011b6:	6821      	ldr	r1, [r4, #0]
 80011b8:	680b      	ldr	r3, [r1, #0]
 80011ba:	ea36 0303 	bics.w	r3, r6, r3
 80011be:	d101      	bne.n	80011c4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80011c0:	2000      	movs	r0, #0
}
 80011c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80011c4:	1c6b      	adds	r3, r5, #1
 80011c6:	d0f7      	beq.n	80011b8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80011c8:	b995      	cbnz	r5, 80011f0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80011ca:	6823      	ldr	r3, [r4, #0]
 80011cc:	68da      	ldr	r2, [r3, #12]
 80011ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80011d2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80011d4:	695a      	ldr	r2, [r3, #20]
 80011d6:	f022 0201 	bic.w	r2, r2, #1
 80011da:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80011dc:	2320      	movs	r3, #32
 80011de:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80011e2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80011e6:	2300      	movs	r3, #0
 80011e8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80011ec:	2003      	movs	r0, #3
 80011ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80011f0:	f7ff f9b4 	bl	800055c <HAL_GetTick>
 80011f4:	1bc0      	subs	r0, r0, r7
 80011f6:	4285      	cmp	r5, r0
 80011f8:	d2dd      	bcs.n	80011b6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80011fa:	e7e6      	b.n	80011ca <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080011fc <HAL_UART_Init>:
{
 80011fc:	b510      	push	{r4, lr}
  if (huart == NULL)
 80011fe:	4604      	mov	r4, r0
 8001200:	b340      	cbz	r0, 8001254 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001202:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001206:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800120a:	b91b      	cbnz	r3, 8001214 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800120c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001210:	f001 f83c 	bl	800228c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001214:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001216:	2324      	movs	r3, #36	; 0x24
 8001218:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800121c:	68d3      	ldr	r3, [r2, #12]
 800121e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001222:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001224:	4620      	mov	r0, r4
 8001226:	f7ff fea7 	bl	8000f78 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800122a:	6823      	ldr	r3, [r4, #0]
 800122c:	691a      	ldr	r2, [r3, #16]
 800122e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001232:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001234:	695a      	ldr	r2, [r3, #20]
 8001236:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800123a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800123c:	68da      	ldr	r2, [r3, #12]
 800123e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001242:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001244:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001246:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001248:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800124a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800124e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001252:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001254:	2001      	movs	r0, #1
}
 8001256:	bd10      	pop	{r4, pc}

08001258 <HAL_UART_Transmit>:
{
 8001258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800125c:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800125e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001262:	2b20      	cmp	r3, #32
{
 8001264:	4604      	mov	r4, r0
 8001266:	460d      	mov	r5, r1
 8001268:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800126a:	d14f      	bne.n	800130c <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 800126c:	2900      	cmp	r1, #0
 800126e:	d04a      	beq.n	8001306 <HAL_UART_Transmit+0xae>
 8001270:	2a00      	cmp	r2, #0
 8001272:	d048      	beq.n	8001306 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001274:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001278:	2b01      	cmp	r3, #1
 800127a:	d047      	beq.n	800130c <HAL_UART_Transmit+0xb4>
 800127c:	2301      	movs	r3, #1
 800127e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001282:	2300      	movs	r3, #0
 8001284:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001286:	2321      	movs	r3, #33	; 0x21
 8001288:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800128c:	f7ff f966 	bl	800055c <HAL_GetTick>
    huart->TxXferSize = Size;
 8001290:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001294:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001296:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800129a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800129c:	b29b      	uxth	r3, r3
 800129e:	b96b      	cbnz	r3, 80012bc <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80012a0:	463b      	mov	r3, r7
 80012a2:	4632      	mov	r2, r6
 80012a4:	2140      	movs	r1, #64	; 0x40
 80012a6:	4620      	mov	r0, r4
 80012a8:	f7ff ff80 	bl	80011ac <UART_WaitOnFlagUntilTimeout.constprop.3>
 80012ac:	b9b0      	cbnz	r0, 80012dc <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 80012ae:	2320      	movs	r3, #32
 80012b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80012b4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80012b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80012bc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80012be:	3b01      	subs	r3, #1
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80012c4:	68a3      	ldr	r3, [r4, #8]
 80012c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80012ca:	4632      	mov	r2, r6
 80012cc:	463b      	mov	r3, r7
 80012ce:	f04f 0180 	mov.w	r1, #128	; 0x80
 80012d2:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80012d4:	d10e      	bne.n	80012f4 <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80012d6:	f7ff ff69 	bl	80011ac <UART_WaitOnFlagUntilTimeout.constprop.3>
 80012da:	b110      	cbz	r0, 80012e2 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 80012dc:	2003      	movs	r0, #3
 80012de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80012e2:	882b      	ldrh	r3, [r5, #0]
 80012e4:	6822      	ldr	r2, [r4, #0]
 80012e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012ea:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80012ec:	6923      	ldr	r3, [r4, #16]
 80012ee:	b943      	cbnz	r3, 8001302 <HAL_UART_Transmit+0xaa>
          pData += 2U;
 80012f0:	3502      	adds	r5, #2
 80012f2:	e7d2      	b.n	800129a <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80012f4:	f7ff ff5a 	bl	80011ac <UART_WaitOnFlagUntilTimeout.constprop.3>
 80012f8:	2800      	cmp	r0, #0
 80012fa:	d1ef      	bne.n	80012dc <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80012fc:	6823      	ldr	r3, [r4, #0]
 80012fe:	782a      	ldrb	r2, [r5, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	3501      	adds	r5, #1
 8001304:	e7c9      	b.n	800129a <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001306:	2001      	movs	r0, #1
 8001308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800130c:	2002      	movs	r0, #2
}
 800130e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001312 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001312:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001314:	f000 fcac 	bl	8001c70 <vTaskStartScheduler>
  
  return osOK;
}
 8001318:	2000      	movs	r0, #0
 800131a:	bd08      	pop	{r3, pc}

0800131c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800131c:	b570      	push	{r4, r5, r6, lr}
 800131e:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001320:	6946      	ldr	r6, [r0, #20]
 8001322:	692a      	ldr	r2, [r5, #16]
 8001324:	6840      	ldr	r0, [r0, #4]
 8001326:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 800132a:	460b      	mov	r3, r1
 800132c:	b086      	sub	sp, #24
 800132e:	6829      	ldr	r1, [r5, #0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001330:	b176      	cbz	r6, 8001350 <osThreadCreate+0x34>
 8001332:	69ad      	ldr	r5, [r5, #24]
 8001334:	b165      	cbz	r5, 8001350 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8001336:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001338:	bf14      	ite	ne
 800133a:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800133c:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800133e:	9502      	str	r5, [sp, #8]
 8001340:	e88d 0050 	stmia.w	sp, {r4, r6}
 8001344:	f000 fc30 	bl	8001ba8 <xTaskCreateStatic>
 8001348:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800134a:	9805      	ldr	r0, [sp, #20]
}
 800134c:	b006      	add	sp, #24
 800134e:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8001350:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001352:	bf14      	ite	ne
 8001354:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001356:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001358:	ad05      	add	r5, sp, #20
 800135a:	b292      	uxth	r2, r2
 800135c:	e88d 0030 	stmia.w	sp, {r4, r5}
 8001360:	f000 fc59 	bl	8001c16 <xTaskCreate>
 8001364:	2801      	cmp	r0, #1
 8001366:	d0f0      	beq.n	800134a <osThreadCreate+0x2e>
      return NULL;
 8001368:	2000      	movs	r0, #0
 800136a:	e7ef      	b.n	800134c <osThreadCreate+0x30>

0800136c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800136c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800136e:	2800      	cmp	r0, #0
 8001370:	bf08      	it	eq
 8001372:	2001      	moveq	r0, #1
 8001374:	f000 fdc4 	bl	8001f00 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001378:	2000      	movs	r0, #0
 800137a:	bd08      	pop	{r3, pc}

0800137c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800137c:	f100 0308 	add.w	r3, r0, #8
 8001380:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001382:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001386:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001388:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800138a:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800138c:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800138e:	6003      	str	r3, [r0, #0]
 8001390:	4770      	bx	lr

08001392 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001392:	2300      	movs	r3, #0
 8001394:	6103      	str	r3, [r0, #16]
 8001396:	4770      	bx	lr

08001398 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001398:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800139a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80013a4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80013a6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80013a8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80013aa:	3301      	adds	r3, #1
 80013ac:	6003      	str	r3, [r0, #0]
 80013ae:	4770      	bx	lr

080013b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80013b0:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80013b2:	1c53      	adds	r3, r2, #1
{
 80013b4:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 80013b6:	d10a      	bne.n	80013ce <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80013b8:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80013be:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80013c0:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80013c2:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80013c4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80013c6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80013c8:	3301      	adds	r3, #1
 80013ca:	6003      	str	r3, [r0, #0]
 80013cc:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013ce:	f100 0308 	add.w	r3, r0, #8
 80013d2:	685c      	ldr	r4, [r3, #4]
 80013d4:	6825      	ldr	r5, [r4, #0]
 80013d6:	42aa      	cmp	r2, r5
 80013d8:	d3ef      	bcc.n	80013ba <vListInsert+0xa>
 80013da:	4623      	mov	r3, r4
 80013dc:	e7f9      	b.n	80013d2 <vListInsert+0x22>

080013de <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80013de:	6841      	ldr	r1, [r0, #4]
 80013e0:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80013e2:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80013e4:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80013e6:	6882      	ldr	r2, [r0, #8]
 80013e8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80013ea:	6859      	ldr	r1, [r3, #4]
 80013ec:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80013ee:	bf08      	it	eq
 80013f0:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80013f2:	2200      	movs	r2, #0
 80013f4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	3a01      	subs	r2, #1
 80013fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80013fc:	6818      	ldr	r0, [r3, #0]
}
 80013fe:	4770      	bx	lr

08001400 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001400:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001406:	4b0d      	ldr	r3, [pc, #52]	; (800143c <prvTaskExitError+0x3c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	3301      	adds	r3, #1
 800140c:	d008      	beq.n	8001420 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800140e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001412:	f383 8811 	msr	BASEPRI, r3
 8001416:	f3bf 8f6f 	isb	sy
 800141a:	f3bf 8f4f 	dsb	sy
 800141e:	e7fe      	b.n	800141e <prvTaskExitError+0x1e>
 8001420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001424:	f383 8811 	msr	BASEPRI, r3
 8001428:	f3bf 8f6f 	isb	sy
 800142c:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001430:	9b01      	ldr	r3, [sp, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0fc      	beq.n	8001430 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001436:	b002      	add	sp, #8
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000004 	.word	0x20000004

08001440 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001440:	4808      	ldr	r0, [pc, #32]	; (8001464 <prvPortStartFirstTask+0x24>)
 8001442:	6800      	ldr	r0, [r0, #0]
 8001444:	6800      	ldr	r0, [r0, #0]
 8001446:	f380 8808 	msr	MSP, r0
 800144a:	f04f 0000 	mov.w	r0, #0
 800144e:	f380 8814 	msr	CONTROL, r0
 8001452:	b662      	cpsie	i
 8001454:	b661      	cpsie	f
 8001456:	f3bf 8f4f 	dsb	sy
 800145a:	f3bf 8f6f 	isb	sy
 800145e:	df00      	svc	0
 8001460:	bf00      	nop
 8001462:	0000      	.short	0x0000
 8001464:	e000ed08 	.word	0xe000ed08

08001468 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001468:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001478 <vPortEnableVFP+0x10>
 800146c:	6801      	ldr	r1, [r0, #0]
 800146e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001472:	6001      	str	r1, [r0, #0]
 8001474:	4770      	bx	lr
 8001476:	0000      	.short	0x0000
 8001478:	e000ed88 	.word	0xe000ed88

0800147c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800147c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001480:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <pxPortInitialiseStack+0x28>)
 8001486:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800148a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800148e:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001492:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001496:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800149a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800149e:	3844      	subs	r0, #68	; 0x44
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	08001401 	.word	0x08001401
	...

080014b0 <SVC_Handler>:
	__asm volatile (
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <pxCurrentTCBConst2>)
 80014b2:	6819      	ldr	r1, [r3, #0]
 80014b4:	6808      	ldr	r0, [r1, #0]
 80014b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014ba:	f380 8809 	msr	PSP, r0
 80014be:	f3bf 8f6f 	isb	sy
 80014c2:	f04f 0000 	mov.w	r0, #0
 80014c6:	f380 8811 	msr	BASEPRI, r0
 80014ca:	4770      	bx	lr
 80014cc:	f3af 8000 	nop.w

080014d0 <pxCurrentTCBConst2>:
 80014d0:	20003c5c 	.word	0x20003c5c

080014d4 <vPortEnterCritical>:
 80014d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014d8:	f383 8811 	msr	BASEPRI, r3
 80014dc:	f3bf 8f6f 	isb	sy
 80014e0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80014e4:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <vPortEnterCritical+0x3c>)
 80014e6:	6813      	ldr	r3, [r2, #0]
 80014e8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80014ea:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80014ec:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80014ee:	d10d      	bne.n	800150c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <vPortEnterCritical+0x40>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80014f8:	d008      	beq.n	800150c <vPortEnterCritical+0x38>
 80014fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014fe:	f383 8811 	msr	BASEPRI, r3
 8001502:	f3bf 8f6f 	isb	sy
 8001506:	f3bf 8f4f 	dsb	sy
 800150a:	e7fe      	b.n	800150a <vPortEnterCritical+0x36>
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	20000004 	.word	0x20000004
 8001514:	e000ed04 	.word	0xe000ed04

08001518 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001518:	4a08      	ldr	r2, [pc, #32]	; (800153c <vPortExitCritical+0x24>)
 800151a:	6813      	ldr	r3, [r2, #0]
 800151c:	b943      	cbnz	r3, 8001530 <vPortExitCritical+0x18>
 800151e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001522:	f383 8811 	msr	BASEPRI, r3
 8001526:	f3bf 8f6f 	isb	sy
 800152a:	f3bf 8f4f 	dsb	sy
 800152e:	e7fe      	b.n	800152e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001530:	3b01      	subs	r3, #1
 8001532:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001534:	b90b      	cbnz	r3, 800153a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001536:	f383 8811 	msr	BASEPRI, r3
 800153a:	4770      	bx	lr
 800153c:	20000004 	.word	0x20000004

08001540 <PendSV_Handler>:
	__asm volatile
 8001540:	f3ef 8009 	mrs	r0, PSP
 8001544:	f3bf 8f6f 	isb	sy
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <pxCurrentTCBConst>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	f01e 0f10 	tst.w	lr, #16
 8001550:	bf08      	it	eq
 8001552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800155a:	6010      	str	r0, [r2, #0]
 800155c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001560:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001564:	f380 8811 	msr	BASEPRI, r0
 8001568:	f3bf 8f4f 	dsb	sy
 800156c:	f3bf 8f6f 	isb	sy
 8001570:	f000 fcea 	bl	8001f48 <vTaskSwitchContext>
 8001574:	f04f 0000 	mov.w	r0, #0
 8001578:	f380 8811 	msr	BASEPRI, r0
 800157c:	bc09      	pop	{r0, r3}
 800157e:	6819      	ldr	r1, [r3, #0]
 8001580:	6808      	ldr	r0, [r1, #0]
 8001582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001586:	f01e 0f10 	tst.w	lr, #16
 800158a:	bf08      	it	eq
 800158c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001590:	f380 8809 	msr	PSP, r0
 8001594:	f3bf 8f6f 	isb	sy
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	f3af 8000 	nop.w

080015a0 <pxCurrentTCBConst>:
 80015a0:	20003c5c 	.word	0x20003c5c

080015a4 <SysTick_Handler>:
{
 80015a4:	b508      	push	{r3, lr}
	__asm volatile
 80015a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015aa:	f383 8811 	msr	BASEPRI, r3
 80015ae:	f3bf 8f6f 	isb	sy
 80015b2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80015b6:	f000 fb99 	bl	8001cec <xTaskIncrementTick>
 80015ba:	b118      	cbz	r0, 80015c4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <SysTick_Handler+0x28>)
 80015be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015c2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80015c4:	2300      	movs	r3, #0
 80015c6:	f383 8811 	msr	BASEPRI, r3
 80015ca:	bd08      	pop	{r3, pc}
 80015cc:	e000ed04 	.word	0xe000ed04

080015d0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80015d0:	4a08      	ldr	r2, [pc, #32]	; (80015f4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80015d2:	4909      	ldr	r1, [pc, #36]	; (80015f8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80015d8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <vPortSetupTimerInterrupt+0x2c>)
 80015dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e6:	4906      	ldr	r1, [pc, #24]	; (8001600 <vPortSetupTimerInterrupt+0x30>)
 80015e8:	3b01      	subs	r3, #1
 80015ea:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80015ec:	2307      	movs	r3, #7
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000e010 	.word	0xe000e010
 80015f8:	e000e018 	.word	0xe000e018
 80015fc:	2000001c 	.word	0x2000001c
 8001600:	e000e014 	.word	0xe000e014

08001604 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001604:	4b39      	ldr	r3, [pc, #228]	; (80016ec <xPortStartScheduler+0xe8>)
 8001606:	4a3a      	ldr	r2, [pc, #232]	; (80016f0 <xPortStartScheduler+0xec>)
{
 8001608:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800160a:	6819      	ldr	r1, [r3, #0]
 800160c:	4291      	cmp	r1, r2
 800160e:	d108      	bne.n	8001622 <xPortStartScheduler+0x1e>
	__asm volatile
 8001610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001614:	f383 8811 	msr	BASEPRI, r3
 8001618:	f3bf 8f6f 	isb	sy
 800161c:	f3bf 8f4f 	dsb	sy
 8001620:	e7fe      	b.n	8001620 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b33      	ldr	r3, [pc, #204]	; (80016f4 <xPortStartScheduler+0xf0>)
 8001626:	429a      	cmp	r2, r3
 8001628:	d108      	bne.n	800163c <xPortStartScheduler+0x38>
 800162a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800162e:	f383 8811 	msr	BASEPRI, r3
 8001632:	f3bf 8f6f 	isb	sy
 8001636:	f3bf 8f4f 	dsb	sy
 800163a:	e7fe      	b.n	800163a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800163c:	4b2e      	ldr	r3, [pc, #184]	; (80016f8 <xPortStartScheduler+0xf4>)
 800163e:	781a      	ldrb	r2, [r3, #0]
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001644:	22ff      	movs	r2, #255	; 0xff
 8001646:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001648:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800164a:	4a2c      	ldr	r2, [pc, #176]	; (80016fc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800164c:	b2db      	uxtb	r3, r3
 800164e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001652:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001656:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800165a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800165c:	4b28      	ldr	r3, [pc, #160]	; (8001700 <xPortStartScheduler+0xfc>)
 800165e:	2207      	movs	r2, #7
 8001660:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001662:	2100      	movs	r1, #0
 8001664:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001668:	0600      	lsls	r0, r0, #24
 800166a:	f102 34ff 	add.w	r4, r2, #4294967295
 800166e:	d40d      	bmi.n	800168c <xPortStartScheduler+0x88>
 8001670:	b101      	cbz	r1, 8001674 <xPortStartScheduler+0x70>
 8001672:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	2a03      	cmp	r2, #3
 8001678:	d011      	beq.n	800169e <xPortStartScheduler+0x9a>
 800167a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800167e:	f383 8811 	msr	BASEPRI, r3
 8001682:	f3bf 8f6f 	isb	sy
 8001686:	f3bf 8f4f 	dsb	sy
 800168a:	e7fe      	b.n	800168a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800168c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001690:	0052      	lsls	r2, r2, #1
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	f88d 2003 	strb.w	r2, [sp, #3]
 8001698:	2101      	movs	r1, #1
 800169a:	4622      	mov	r2, r4
 800169c:	e7e2      	b.n	8001664 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800169e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80016a0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80016a4:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80016a6:	9b01      	ldr	r3, [sp, #4]
 80016a8:	4a13      	ldr	r2, [pc, #76]	; (80016f8 <xPortStartScheduler+0xf4>)
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <xPortStartScheduler+0x100>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80016b6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80016be:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80016c0:	f7ff ff86 	bl	80015d0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80016c4:	4b10      	ldr	r3, [pc, #64]	; (8001708 <xPortStartScheduler+0x104>)
 80016c6:	2400      	movs	r4, #0
 80016c8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80016ca:	f7ff fecd 	bl	8001468 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80016ce:	4a0f      	ldr	r2, [pc, #60]	; (800170c <xPortStartScheduler+0x108>)
 80016d0:	6813      	ldr	r3, [r2, #0]
 80016d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80016d6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80016d8:	f7ff feb2 	bl	8001440 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80016dc:	f000 fc34 	bl	8001f48 <vTaskSwitchContext>
	prvTaskExitError();
 80016e0:	f7ff fe8e 	bl	8001400 <prvTaskExitError>
}
 80016e4:	4620      	mov	r0, r4
 80016e6:	b002      	add	sp, #8
 80016e8:	bd10      	pop	{r4, pc}
 80016ea:	bf00      	nop
 80016ec:	e000ed00 	.word	0xe000ed00
 80016f0:	410fc271 	.word	0x410fc271
 80016f4:	410fc270 	.word	0x410fc270
 80016f8:	e000e400 	.word	0xe000e400
 80016fc:	2000003c 	.word	0x2000003c
 8001700:	20000040 	.word	0x20000040
 8001704:	e000ed20 	.word	0xe000ed20
 8001708:	20000004 	.word	0x20000004
 800170c:	e000ef34 	.word	0xe000ef34

08001710 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001710:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001712:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <prvInsertBlockIntoFreeList+0x40>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4282      	cmp	r2, r0
 8001718:	d318      	bcc.n	800174c <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800171a:	685c      	ldr	r4, [r3, #4]
 800171c:	1919      	adds	r1, r3, r4
 800171e:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001720:	bf01      	itttt	eq
 8001722:	6841      	ldreq	r1, [r0, #4]
 8001724:	4618      	moveq	r0, r3
 8001726:	1909      	addeq	r1, r1, r4
 8001728:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800172a:	6844      	ldr	r4, [r0, #4]
 800172c:	1901      	adds	r1, r0, r4
 800172e:	428a      	cmp	r2, r1
 8001730:	d107      	bne.n	8001742 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001732:	4908      	ldr	r1, [pc, #32]	; (8001754 <prvInsertBlockIntoFreeList+0x44>)
 8001734:	6809      	ldr	r1, [r1, #0]
 8001736:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001738:	bf1f      	itttt	ne
 800173a:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800173c:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800173e:	1909      	addne	r1, r1, r4
 8001740:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001742:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001744:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001746:	bf18      	it	ne
 8001748:	6018      	strne	r0, [r3, #0]
 800174a:	bd10      	pop	{r4, pc}
 800174c:	4613      	mov	r3, r2
 800174e:	e7e1      	b.n	8001714 <prvInsertBlockIntoFreeList+0x4>
 8001750:	20003c54 	.word	0x20003c54
 8001754:	20000044 	.word	0x20000044

08001758 <pvPortMalloc>:
{
 8001758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800175c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800175e:	f000 fabd 	bl	8001cdc <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001762:	493e      	ldr	r1, [pc, #248]	; (800185c <pvPortMalloc+0x104>)
 8001764:	4d3e      	ldr	r5, [pc, #248]	; (8001860 <pvPortMalloc+0x108>)
 8001766:	680b      	ldr	r3, [r1, #0]
 8001768:	bb0b      	cbnz	r3, 80017ae <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800176a:	4a3e      	ldr	r2, [pc, #248]	; (8001864 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800176c:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800176e:	bf1f      	itttt	ne
 8001770:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001772:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001776:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 800177a:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800177c:	bf14      	ite	ne
 800177e:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001780:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001784:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8001786:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001788:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800178c:	4e36      	ldr	r6, [pc, #216]	; (8001868 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 800178e:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001790:	2000      	movs	r0, #0
 8001792:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001794:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8001796:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001798:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800179a:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800179c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800179e:	4b33      	ldr	r3, [pc, #204]	; (800186c <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80017a0:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80017a2:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80017a4:	4b32      	ldr	r3, [pc, #200]	; (8001870 <pvPortMalloc+0x118>)
 80017a6:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80017a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80017ac:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80017ae:	682f      	ldr	r7, [r5, #0]
 80017b0:	4227      	tst	r7, r4
 80017b2:	d116      	bne.n	80017e2 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80017b4:	2c00      	cmp	r4, #0
 80017b6:	d041      	beq.n	800183c <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 80017b8:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80017bc:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80017be:	bf1c      	itt	ne
 80017c0:	f023 0307 	bicne.w	r3, r3, #7
 80017c4:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80017c6:	b163      	cbz	r3, 80017e2 <pvPortMalloc+0x8a>
 80017c8:	4a29      	ldr	r2, [pc, #164]	; (8001870 <pvPortMalloc+0x118>)
 80017ca:	6816      	ldr	r6, [r2, #0]
 80017cc:	42b3      	cmp	r3, r6
 80017ce:	4690      	mov	r8, r2
 80017d0:	d807      	bhi.n	80017e2 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80017d2:	4a25      	ldr	r2, [pc, #148]	; (8001868 <pvPortMalloc+0x110>)
 80017d4:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80017d6:	6868      	ldr	r0, [r5, #4]
 80017d8:	4283      	cmp	r3, r0
 80017da:	d804      	bhi.n	80017e6 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80017dc:	6809      	ldr	r1, [r1, #0]
 80017de:	428d      	cmp	r5, r1
 80017e0:	d107      	bne.n	80017f2 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80017e2:	2400      	movs	r4, #0
 80017e4:	e02a      	b.n	800183c <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80017e6:	682c      	ldr	r4, [r5, #0]
 80017e8:	2c00      	cmp	r4, #0
 80017ea:	d0f7      	beq.n	80017dc <pvPortMalloc+0x84>
 80017ec:	462a      	mov	r2, r5
 80017ee:	4625      	mov	r5, r4
 80017f0:	e7f1      	b.n	80017d6 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80017f2:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80017f4:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80017f6:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80017f8:	1ac2      	subs	r2, r0, r3
 80017fa:	2a10      	cmp	r2, #16
 80017fc:	d90f      	bls.n	800181e <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80017fe:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001800:	0741      	lsls	r1, r0, #29
 8001802:	d008      	beq.n	8001816 <pvPortMalloc+0xbe>
 8001804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001808:	f383 8811 	msr	BASEPRI, r3
 800180c:	f3bf 8f6f 	isb	sy
 8001810:	f3bf 8f4f 	dsb	sy
 8001814:	e7fe      	b.n	8001814 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001816:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001818:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800181a:	f7ff ff79 	bl	8001710 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800181e:	4913      	ldr	r1, [pc, #76]	; (800186c <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001820:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001822:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001824:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001826:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001828:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800182a:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800182e:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001832:	bf38      	it	cc
 8001834:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001836:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001838:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800183a:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800183c:	f000 fae8 	bl	8001e10 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001840:	0763      	lsls	r3, r4, #29
 8001842:	d008      	beq.n	8001856 <pvPortMalloc+0xfe>
 8001844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001848:	f383 8811 	msr	BASEPRI, r3
 800184c:	f3bf 8f6f 	isb	sy
 8001850:	f3bf 8f4f 	dsb	sy
 8001854:	e7fe      	b.n	8001854 <pvPortMalloc+0xfc>
}
 8001856:	4620      	mov	r0, r4
 8001858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800185c:	20000044 	.word	0x20000044
 8001860:	20003c48 	.word	0x20003c48
 8001864:	20000048 	.word	0x20000048
 8001868:	20003c54 	.word	0x20003c54
 800186c:	20003c50 	.word	0x20003c50
 8001870:	20003c4c 	.word	0x20003c4c

08001874 <vPortFree>:
{
 8001874:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001876:	4604      	mov	r4, r0
 8001878:	b370      	cbz	r0, 80018d8 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800187a:	4a18      	ldr	r2, [pc, #96]	; (80018dc <vPortFree+0x68>)
 800187c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001880:	6812      	ldr	r2, [r2, #0]
 8001882:	4213      	tst	r3, r2
 8001884:	d108      	bne.n	8001898 <vPortFree+0x24>
 8001886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800188a:	f383 8811 	msr	BASEPRI, r3
 800188e:	f3bf 8f6f 	isb	sy
 8001892:	f3bf 8f4f 	dsb	sy
 8001896:	e7fe      	b.n	8001896 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001898:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800189c:	b141      	cbz	r1, 80018b0 <vPortFree+0x3c>
 800189e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018a2:	f383 8811 	msr	BASEPRI, r3
 80018a6:	f3bf 8f6f 	isb	sy
 80018aa:	f3bf 8f4f 	dsb	sy
 80018ae:	e7fe      	b.n	80018ae <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80018b0:	ea23 0302 	bic.w	r3, r3, r2
 80018b4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80018b8:	f000 fa10 	bl	8001cdc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80018bc:	4a08      	ldr	r2, [pc, #32]	; (80018e0 <vPortFree+0x6c>)
 80018be:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80018c2:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80018c4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80018c8:	440b      	add	r3, r1
 80018ca:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80018cc:	f7ff ff20 	bl	8001710 <prvInsertBlockIntoFreeList>
}
 80018d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80018d4:	f000 ba9c 	b.w	8001e10 <xTaskResumeAll>
 80018d8:	bd10      	pop	{r4, pc}
 80018da:	bf00      	nop
 80018dc:	20003c48 	.word	0x20003c48
 80018e0:	20003c4c 	.word	0x20003c4c

080018e4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80018e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018e8:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80018ea:	f7ff fdf3 	bl	80014d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80018ee:	4b2d      	ldr	r3, [pc, #180]	; (80019a4 <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 80018f0:	4c2d      	ldr	r4, [pc, #180]	; (80019a8 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4f2d      	ldr	r7, [pc, #180]	; (80019ac <prvAddNewTaskToReadyList+0xc8>)
 80018f6:	3201      	adds	r2, #1
 80018f8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80018fa:	6825      	ldr	r5, [r4, #0]
 80018fc:	2d00      	cmp	r5, #0
 80018fe:	d145      	bne.n	800198c <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001900:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d11c      	bne.n	8001942 <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001908:	1978      	adds	r0, r7, r5
 800190a:	3514      	adds	r5, #20
 800190c:	f7ff fd36 	bl	800137c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001910:	2d8c      	cmp	r5, #140	; 0x8c
 8001912:	d1f9      	bne.n	8001908 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001914:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80019d8 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8001918:	4d25      	ldr	r5, [pc, #148]	; (80019b0 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 800191a:	4640      	mov	r0, r8
 800191c:	f7ff fd2e 	bl	800137c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001920:	4628      	mov	r0, r5
 8001922:	f7ff fd2b 	bl	800137c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001926:	4823      	ldr	r0, [pc, #140]	; (80019b4 <prvAddNewTaskToReadyList+0xd0>)
 8001928:	f7ff fd28 	bl	800137c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800192c:	4822      	ldr	r0, [pc, #136]	; (80019b8 <prvAddNewTaskToReadyList+0xd4>)
 800192e:	f7ff fd25 	bl	800137c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001932:	4822      	ldr	r0, [pc, #136]	; (80019bc <prvAddNewTaskToReadyList+0xd8>)
 8001934:	f7ff fd22 	bl	800137c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001938:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <prvAddNewTaskToReadyList+0xdc>)
 800193a:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800193e:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <prvAddNewTaskToReadyList+0xe0>)
 8001940:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8001942:	4a21      	ldr	r2, [pc, #132]	; (80019c8 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 8001944:	4921      	ldr	r1, [pc, #132]	; (80019cc <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8001946:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001948:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 800194a:	3301      	adds	r3, #1
 800194c:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800194e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001950:	2301      	movs	r3, #1
 8001952:	4093      	lsls	r3, r2
 8001954:	4303      	orrs	r3, r0
 8001956:	2014      	movs	r0, #20
 8001958:	600b      	str	r3, [r1, #0]
 800195a:	fb00 7002 	mla	r0, r0, r2, r7
 800195e:	1d31      	adds	r1, r6, #4
 8001960:	f7ff fd1a 	bl	8001398 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001964:	f7ff fdd8 	bl	8001518 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001968:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <prvAddNewTaskToReadyList+0xec>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	b163      	cbz	r3, 8001988 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800196e:	6823      	ldr	r3, [r4, #0]
 8001970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001972:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8001974:	429a      	cmp	r2, r3
 8001976:	d207      	bcs.n	8001988 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8001978:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <prvAddNewTaskToReadyList+0xf0>)
 800197a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	f3bf 8f4f 	dsb	sy
 8001984:	f3bf 8f6f 	isb	sy
 8001988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800198c:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <prvAddNewTaskToReadyList+0xec>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1d6      	bne.n	8001942 <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001998:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800199a:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800199c:	bf98      	it	ls
 800199e:	6026      	strls	r6, [r4, #0]
 80019a0:	e7cf      	b.n	8001942 <prvAddNewTaskToReadyList+0x5e>
 80019a2:	bf00      	nop
 80019a4:	20003cf4 	.word	0x20003cf4
 80019a8:	20003c5c 	.word	0x20003c5c
 80019ac:	20003c68 	.word	0x20003c68
 80019b0:	20003d20 	.word	0x20003d20
 80019b4:	20003d3c 	.word	0x20003d3c
 80019b8:	20003d68 	.word	0x20003d68
 80019bc:	20003d54 	.word	0x20003d54
 80019c0:	20003c60 	.word	0x20003c60
 80019c4:	20003c64 	.word	0x20003c64
 80019c8:	20003d04 	.word	0x20003d04
 80019cc:	20003d08 	.word	0x20003d08
 80019d0:	20003d50 	.word	0x20003d50
 80019d4:	e000ed04 	.word	0xe000ed04
 80019d8:	20003d0c 	.word	0x20003d0c

080019dc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80019dc:	4a06      	ldr	r2, [pc, #24]	; (80019f8 <prvResetNextTaskUnblockTime+0x1c>)
 80019de:	6813      	ldr	r3, [r2, #0]
 80019e0:	6819      	ldr	r1, [r3, #0]
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <prvResetNextTaskUnblockTime+0x20>)
 80019e4:	b919      	cbnz	r1, 80019ee <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80019e6:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80019f2:	68d2      	ldr	r2, [r2, #12]
 80019f4:	6852      	ldr	r2, [r2, #4]
 80019f6:	e7f8      	b.n	80019ea <prvResetNextTaskUnblockTime+0xe>
 80019f8:	20003c60 	.word	0x20003c60
 80019fc:	20003d34 	.word	0x20003d34

08001a00 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8001a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a04:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001a06:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001a0a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8001a0c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001a10:	3a01      	subs	r2, #1
 8001a12:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8001a16:	469a      	mov	sl, r3
 8001a18:	4681      	mov	r9, r0
 8001a1a:	1e4b      	subs	r3, r1, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001a1c:	f026 0607 	bic.w	r6, r6, #7
 8001a20:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8001a24:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001a26:	7858      	ldrb	r0, [r3, #1]
 8001a28:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8001a2c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8001a30:	b108      	cbz	r0, 8001a36 <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a32:	428b      	cmp	r3, r1
 8001a34:	d1f7      	bne.n	8001a26 <prvInitialiseNewTask.isra.2+0x26>
 8001a36:	9d08      	ldr	r5, [sp, #32]
 8001a38:	2d06      	cmp	r5, #6
 8001a3a:	bf28      	it	cs
 8001a3c:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001a3e:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 8001a40:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001a42:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001a44:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001a46:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8001a4a:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001a4c:	f7ff fca1 	bl	8001392 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a50:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001a54:	f104 0018 	add.w	r0, r4, #24
 8001a58:	f7ff fc9b 	bl	8001392 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001a5c:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001a5e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a60:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001a62:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001a64:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001a68:	4652      	mov	r2, sl
 8001a6a:	4649      	mov	r1, r9
 8001a6c:	4630      	mov	r0, r6
 8001a6e:	f7ff fd05 	bl	800147c <pxPortInitialiseStack>
 8001a72:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8001a74:	f1b8 0f00 	cmp.w	r8, #0
 8001a78:	d001      	beq.n	8001a7e <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001a7a:	f8c8 4000 	str.w	r4, [r8]
 8001a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001a82 <prvDeleteTCB>:
	{
 8001a82:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001a84:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8001a88:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001a8a:	b93b      	cbnz	r3, 8001a9c <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8001a8c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001a8e:	f7ff fef1 	bl	8001874 <vPortFree>
				vPortFree( pxTCB );
 8001a92:	4620      	mov	r0, r4
	}
 8001a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8001a98:	f7ff beec 	b.w	8001874 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d0f9      	beq.n	8001a94 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d008      	beq.n	8001ab6 <prvDeleteTCB+0x34>
 8001aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aa8:	f383 8811 	msr	BASEPRI, r3
 8001aac:	f3bf 8f6f 	isb	sy
 8001ab0:	f3bf 8f4f 	dsb	sy
 8001ab4:	e7fe      	b.n	8001ab4 <prvDeleteTCB+0x32>
 8001ab6:	bd10      	pop	{r4, pc}

08001ab8 <prvIdleTask>:
{
 8001ab8:	b580      	push	{r7, lr}
				taskYIELD();
 8001aba:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8001b18 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001abe:	4f12      	ldr	r7, [pc, #72]	; (8001b08 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001ac0:	4c12      	ldr	r4, [pc, #72]	; (8001b0c <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8001ac2:	4d13      	ldr	r5, [pc, #76]	; (8001b10 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001ac4:	6823      	ldr	r3, [r4, #0]
 8001ac6:	b963      	cbnz	r3, 8001ae2 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001ac8:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <prvIdleTask+0x5c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d9f8      	bls.n	8001ac2 <prvIdleTask+0xa>
				taskYIELD();
 8001ad0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001ad4:	f8c8 3000 	str.w	r3, [r8]
 8001ad8:	f3bf 8f4f 	dsb	sy
 8001adc:	f3bf 8f6f 	isb	sy
 8001ae0:	e7ee      	b.n	8001ac0 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8001ae2:	f7ff fcf7 	bl	80014d4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001aea:	1d30      	adds	r0, r6, #4
 8001aec:	f7ff fc77 	bl	80013de <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001af0:	682b      	ldr	r3, [r5, #0]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001af6:	6823      	ldr	r3, [r4, #0]
 8001af8:	3b01      	subs	r3, #1
 8001afa:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8001afc:	f7ff fd0c 	bl	8001518 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8001b00:	4630      	mov	r0, r6
 8001b02:	f7ff ffbe 	bl	8001a82 <prvDeleteTCB>
 8001b06:	e7dd      	b.n	8001ac4 <prvIdleTask+0xc>
 8001b08:	20003d68 	.word	0x20003d68
 8001b0c:	20003cf8 	.word	0x20003cf8
 8001b10:	20003cf4 	.word	0x20003cf4
 8001b14:	20003c68 	.word	0x20003c68
 8001b18:	e000ed04 	.word	0xe000ed04

08001b1c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001b1e:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b20:	4e1b      	ldr	r6, [pc, #108]	; (8001b90 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8001b22:	681d      	ldr	r5, [r3, #0]
{
 8001b24:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b26:	6830      	ldr	r0, [r6, #0]
 8001b28:	3004      	adds	r0, #4
{
 8001b2a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b2c:	f7ff fc57 	bl	80013de <uxListRemove>
 8001b30:	4633      	mov	r3, r6
 8001b32:	b940      	cbnz	r0, 8001b46 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001b34:	6831      	ldr	r1, [r6, #0]
 8001b36:	4e17      	ldr	r6, [pc, #92]	; (8001b94 <prvAddCurrentTaskToDelayedList+0x78>)
 8001b38:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001b3a:	6832      	ldr	r2, [r6, #0]
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	4088      	lsls	r0, r1
 8001b40:	ea22 0200 	bic.w	r2, r2, r0
 8001b44:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001b46:	1c62      	adds	r2, r4, #1
 8001b48:	d107      	bne.n	8001b5a <prvAddCurrentTaskToDelayedList+0x3e>
 8001b4a:	b137      	cbz	r7, 8001b5a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b4c:	6819      	ldr	r1, [r3, #0]
 8001b4e:	4812      	ldr	r0, [pc, #72]	; (8001b98 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001b50:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001b52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b56:	f7ff bc1f 	b.w	8001398 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001b5a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001b5c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8001b5e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001b60:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8001b62:	d907      	bls.n	8001b74 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b64:	4a0d      	ldr	r2, [pc, #52]	; (8001b9c <prvAddCurrentTaskToDelayedList+0x80>)
 8001b66:	6810      	ldr	r0, [r2, #0]
 8001b68:	6819      	ldr	r1, [r3, #0]
}
 8001b6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b6e:	3104      	adds	r1, #4
 8001b70:	f7ff bc1e 	b.w	80013b0 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b74:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <prvAddCurrentTaskToDelayedList+0x84>)
 8001b76:	6810      	ldr	r0, [r2, #0]
 8001b78:	6819      	ldr	r1, [r3, #0]
 8001b7a:	3104      	adds	r1, #4
 8001b7c:	f7ff fc18 	bl	80013b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <prvAddCurrentTaskToDelayedList+0x88>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8001b86:	bf38      	it	cc
 8001b88:	601c      	strcc	r4, [r3, #0]
 8001b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b8c:	20003d7c 	.word	0x20003d7c
 8001b90:	20003c5c 	.word	0x20003c5c
 8001b94:	20003d08 	.word	0x20003d08
 8001b98:	20003d54 	.word	0x20003d54
 8001b9c:	20003c64 	.word	0x20003c64
 8001ba0:	20003c60 	.word	0x20003c60
 8001ba4:	20003d34 	.word	0x20003d34

08001ba8 <xTaskCreateStatic>:
	{
 8001ba8:	b570      	push	{r4, r5, r6, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8001bae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8001bb0:	b945      	cbnz	r5, 8001bc4 <xTaskCreateStatic+0x1c>
 8001bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bb6:	f383 8811 	msr	BASEPRI, r3
 8001bba:	f3bf 8f6f 	isb	sy
 8001bbe:	f3bf 8f4f 	dsb	sy
 8001bc2:	e7fe      	b.n	8001bc2 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8001bc4:	b944      	cbnz	r4, 8001bd8 <xTaskCreateStatic+0x30>
 8001bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bca:	f383 8811 	msr	BASEPRI, r3
 8001bce:	f3bf 8f6f 	isb	sy
 8001bd2:	f3bf 8f4f 	dsb	sy
 8001bd6:	e7fe      	b.n	8001bd6 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8001bd8:	2654      	movs	r6, #84	; 0x54
 8001bda:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001bdc:	9e04      	ldr	r6, [sp, #16]
 8001bde:	2e54      	cmp	r6, #84	; 0x54
 8001be0:	d008      	beq.n	8001bf4 <xTaskCreateStatic+0x4c>
 8001be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001be6:	f383 8811 	msr	BASEPRI, r3
 8001bea:	f3bf 8f6f 	isb	sy
 8001bee:	f3bf 8f4f 	dsb	sy
 8001bf2:	e7fe      	b.n	8001bf2 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001bf4:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001bf6:	2502      	movs	r5, #2
 8001bf8:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001bfc:	ad05      	add	r5, sp, #20
 8001bfe:	9501      	str	r5, [sp, #4]
 8001c00:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001c02:	9402      	str	r4, [sp, #8]
 8001c04:	9500      	str	r5, [sp, #0]
 8001c06:	f7ff fefb 	bl	8001a00 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f7ff fe6a 	bl	80018e4 <prvAddNewTaskToReadyList>
	}
 8001c10:	9805      	ldr	r0, [sp, #20]
 8001c12:	b006      	add	sp, #24
 8001c14:	bd70      	pop	{r4, r5, r6, pc}

08001c16 <xTaskCreate>:
	{
 8001c16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c1a:	4607      	mov	r7, r0
 8001c1c:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c1e:	0090      	lsls	r0, r2, #2
	{
 8001c20:	4688      	mov	r8, r1
 8001c22:	4616      	mov	r6, r2
 8001c24:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c26:	f7ff fd97 	bl	8001758 <pvPortMalloc>
			if( pxStack != NULL )
 8001c2a:	4605      	mov	r5, r0
 8001c2c:	b1e8      	cbz	r0, 8001c6a <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001c2e:	2054      	movs	r0, #84	; 0x54
 8001c30:	f7ff fd92 	bl	8001758 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001c34:	4604      	mov	r4, r0
 8001c36:	b1a8      	cbz	r0, 8001c64 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001c3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8001c40:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001c42:	9301      	str	r3, [sp, #4]
 8001c44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001c46:	9002      	str	r0, [sp, #8]
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	4632      	mov	r2, r6
 8001c4c:	464b      	mov	r3, r9
 8001c4e:	4641      	mov	r1, r8
 8001c50:	4638      	mov	r0, r7
 8001c52:	f7ff fed5 	bl	8001a00 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001c56:	4620      	mov	r0, r4
 8001c58:	f7ff fe44 	bl	80018e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001c5c:	2001      	movs	r0, #1
	}
 8001c5e:	b005      	add	sp, #20
 8001c60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8001c64:	4628      	mov	r0, r5
 8001c66:	f7ff fe05 	bl	8001874 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001c6a:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8001c6e:	e7f6      	b.n	8001c5e <xTaskCreate+0x48>

08001c70 <vTaskStartScheduler>:
{
 8001c70:	b510      	push	{r4, lr}
 8001c72:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001c74:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001c76:	aa07      	add	r2, sp, #28
 8001c78:	a906      	add	r1, sp, #24
 8001c7a:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001c7c:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001c7e:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001c80:	f000 f99c 	bl	8001fbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001c84:	9b05      	ldr	r3, [sp, #20]
 8001c86:	9302      	str	r3, [sp, #8]
 8001c88:	9b06      	ldr	r3, [sp, #24]
 8001c8a:	9301      	str	r3, [sp, #4]
 8001c8c:	9400      	str	r4, [sp, #0]
 8001c8e:	4623      	mov	r3, r4
 8001c90:	9a07      	ldr	r2, [sp, #28]
 8001c92:	490d      	ldr	r1, [pc, #52]	; (8001cc8 <vTaskStartScheduler+0x58>)
 8001c94:	480d      	ldr	r0, [pc, #52]	; (8001ccc <vTaskStartScheduler+0x5c>)
 8001c96:	f7ff ff87 	bl	8001ba8 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8001c9a:	b190      	cbz	r0, 8001cc2 <vTaskStartScheduler+0x52>
 8001c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ca0:	f383 8811 	msr	BASEPRI, r3
 8001ca4:	f3bf 8f6f 	isb	sy
 8001ca8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8001cac:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <vTaskStartScheduler+0x60>)
 8001cae:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001cb4:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <vTaskStartScheduler+0x64>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <vTaskStartScheduler+0x68>)
 8001cbc:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8001cbe:	f7ff fca1 	bl	8001604 <xPortStartScheduler>
}
 8001cc2:	b008      	add	sp, #32
 8001cc4:	bd10      	pop	{r4, pc}
 8001cc6:	bf00      	nop
 8001cc8:	080024f4 	.word	0x080024f4
 8001ccc:	08001ab9 	.word	0x08001ab9
 8001cd0:	20003d34 	.word	0x20003d34
 8001cd4:	20003d50 	.word	0x20003d50
 8001cd8:	20003d7c 	.word	0x20003d7c

08001cdc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001cdc:	4a02      	ldr	r2, [pc, #8]	; (8001ce8 <vTaskSuspendAll+0xc>)
 8001cde:	6813      	ldr	r3, [r2, #0]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20003d00 	.word	0x20003d00

08001cec <xTaskIncrementTick>:
{
 8001cec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001cf0:	4b3c      	ldr	r3, [pc, #240]	; (8001de4 <xTaskIncrementTick+0xf8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d153      	bne.n	8001da0 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001cf8:	4b3b      	ldr	r3, [pc, #236]	; (8001de8 <xTaskIncrementTick+0xfc>)
 8001cfa:	681c      	ldr	r4, [r3, #0]
 8001cfc:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8001cfe:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001d00:	b9bc      	cbnz	r4, 8001d32 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8001d02:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <xTaskIncrementTick+0x100>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	b142      	cbz	r2, 8001d1c <xTaskIncrementTick+0x30>
 8001d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d0e:	f383 8811 	msr	BASEPRI, r3
 8001d12:	f3bf 8f6f 	isb	sy
 8001d16:	f3bf 8f4f 	dsb	sy
 8001d1a:	e7fe      	b.n	8001d1a <xTaskIncrementTick+0x2e>
 8001d1c:	4a34      	ldr	r2, [pc, #208]	; (8001df0 <xTaskIncrementTick+0x104>)
 8001d1e:	6819      	ldr	r1, [r3, #0]
 8001d20:	6810      	ldr	r0, [r2, #0]
 8001d22:	6018      	str	r0, [r3, #0]
 8001d24:	6011      	str	r1, [r2, #0]
 8001d26:	4a33      	ldr	r2, [pc, #204]	; (8001df4 <xTaskIncrementTick+0x108>)
 8001d28:	6813      	ldr	r3, [r2, #0]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	f7ff fe55 	bl	80019dc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001d32:	4d31      	ldr	r5, [pc, #196]	; (8001df8 <xTaskIncrementTick+0x10c>)
 8001d34:	4f31      	ldr	r7, [pc, #196]	; (8001dfc <xTaskIncrementTick+0x110>)
 8001d36:	682b      	ldr	r3, [r5, #0]
 8001d38:	429c      	cmp	r4, r3
 8001d3a:	f04f 0b00 	mov.w	fp, #0
 8001d3e:	d33e      	bcc.n	8001dbe <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d40:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001dec <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8001d44:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8001e0c <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d48:	f8d8 2000 	ldr.w	r2, [r8]
 8001d4c:	6812      	ldr	r2, [r2, #0]
 8001d4e:	bb72      	cbnz	r2, 8001dae <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d50:	f04f 32ff 	mov.w	r2, #4294967295
 8001d54:	602a      	str	r2, [r5, #0]
					break;
 8001d56:	e032      	b.n	8001dbe <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d58:	f106 0a04 	add.w	sl, r6, #4
 8001d5c:	4650      	mov	r0, sl
 8001d5e:	f7ff fb3e 	bl	80013de <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001d62:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8001d64:	b119      	cbz	r1, 8001d6e <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d66:	f106 0018 	add.w	r0, r6, #24
 8001d6a:	f7ff fb38 	bl	80013de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001d6e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001d70:	f8d9 3000 	ldr.w	r3, [r9]
 8001d74:	2201      	movs	r2, #1
 8001d76:	fa02 f100 	lsl.w	r1, r2, r0
 8001d7a:	4319      	orrs	r1, r3
 8001d7c:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <xTaskIncrementTick+0x114>)
 8001d7e:	f8c9 1000 	str.w	r1, [r9]
 8001d82:	f04f 0e14 	mov.w	lr, #20
 8001d86:	4651      	mov	r1, sl
 8001d88:	fb0e 3000 	mla	r0, lr, r0, r3
 8001d8c:	f7ff fb04 	bl	8001398 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001d90:	6838      	ldr	r0, [r7, #0]
 8001d92:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8001d94:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8001d96:	4291      	cmp	r1, r2
 8001d98:	bf28      	it	cs
 8001d9a:	f04f 0b01 	movcs.w	fp, #1
 8001d9e:	e7d3      	b.n	8001d48 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8001da0:	4a18      	ldr	r2, [pc, #96]	; (8001e04 <xTaskIncrementTick+0x118>)
 8001da2:	6813      	ldr	r3, [r2, #0]
 8001da4:	3301      	adds	r3, #1
 8001da6:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8001da8:	f04f 0b00 	mov.w	fp, #0
 8001dac:	e011      	b.n	8001dd2 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001dae:	f8d8 2000 	ldr.w	r2, [r8]
 8001db2:	68d2      	ldr	r2, [r2, #12]
 8001db4:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001db6:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8001db8:	428c      	cmp	r4, r1
 8001dba:	d2cd      	bcs.n	8001d58 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8001dbc:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <xTaskIncrementTick+0x114>)
 8001dc2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001dc4:	2214      	movs	r2, #20
 8001dc6:	434a      	muls	r2, r1
 8001dc8:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8001dca:	2a02      	cmp	r2, #2
 8001dcc:	bf28      	it	cs
 8001dce:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8001dd2:	4a0d      	ldr	r2, [pc, #52]	; (8001e08 <xTaskIncrementTick+0x11c>)
 8001dd4:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8001dd6:	2a00      	cmp	r2, #0
 8001dd8:	bf18      	it	ne
 8001dda:	f04f 0b01 	movne.w	fp, #1
}
 8001dde:	4658      	mov	r0, fp
 8001de0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001de4:	20003d00 	.word	0x20003d00
 8001de8:	20003d7c 	.word	0x20003d7c
 8001dec:	20003c60 	.word	0x20003c60
 8001df0:	20003c64 	.word	0x20003c64
 8001df4:	20003d38 	.word	0x20003d38
 8001df8:	20003d34 	.word	0x20003d34
 8001dfc:	20003c5c 	.word	0x20003c5c
 8001e00:	20003c68 	.word	0x20003c68
 8001e04:	20003cfc 	.word	0x20003cfc
 8001e08:	20003d80 	.word	0x20003d80
 8001e0c:	20003d08 	.word	0x20003d08

08001e10 <xTaskResumeAll>:
{
 8001e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8001e14:	4c31      	ldr	r4, [pc, #196]	; (8001edc <xTaskResumeAll+0xcc>)
 8001e16:	6823      	ldr	r3, [r4, #0]
 8001e18:	b943      	cbnz	r3, 8001e2c <xTaskResumeAll+0x1c>
 8001e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e1e:	f383 8811 	msr	BASEPRI, r3
 8001e22:	f3bf 8f6f 	isb	sy
 8001e26:	f3bf 8f4f 	dsb	sy
 8001e2a:	e7fe      	b.n	8001e2a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8001e2c:	f7ff fb52 	bl	80014d4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001e30:	6823      	ldr	r3, [r4, #0]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e36:	6824      	ldr	r4, [r4, #0]
 8001e38:	b12c      	cbz	r4, 8001e46 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8001e3a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001e3c:	f7ff fb6c 	bl	8001518 <vPortExitCritical>
}
 8001e40:	4620      	mov	r0, r4
 8001e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001e46:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <xTaskResumeAll+0xd0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f5      	beq.n	8001e3a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e4e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001ef8 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8001e52:	4f24      	ldr	r7, [pc, #144]	; (8001ee4 <xTaskResumeAll+0xd4>)
 8001e54:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8001efc <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e58:	f8d9 3000 	ldr.w	r3, [r9]
 8001e5c:	b9e3      	cbnz	r3, 8001e98 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8001e5e:	b10c      	cbz	r4, 8001e64 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8001e60:	f7ff fdbc 	bl	80019dc <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001e64:	4d20      	ldr	r5, [pc, #128]	; (8001ee8 <xTaskResumeAll+0xd8>)
 8001e66:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001e68:	b144      	cbz	r4, 8001e7c <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8001e6a:	4e20      	ldr	r6, [pc, #128]	; (8001eec <xTaskResumeAll+0xdc>)
 8001e6c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8001e6e:	f7ff ff3d 	bl	8001cec <xTaskIncrementTick>
 8001e72:	b100      	cbz	r0, 8001e76 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8001e74:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001e76:	3c01      	subs	r4, #1
 8001e78:	d1f9      	bne.n	8001e6e <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8001e7a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <xTaskResumeAll+0xdc>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0da      	beq.n	8001e3a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8001e84:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <xTaskResumeAll+0xe0>)
 8001e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	f3bf 8f4f 	dsb	sy
 8001e90:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8001e94:	2401      	movs	r4, #1
 8001e96:	e7d1      	b.n	8001e3c <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001e98:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8001e9c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e9e:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001ea0:	f104 0018 	add.w	r0, r4, #24
 8001ea4:	f7ff fa9b 	bl	80013de <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ea8:	4630      	mov	r0, r6
 8001eaa:	f7ff fa98 	bl	80013de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001eae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001eb0:	6839      	ldr	r1, [r7, #0]
 8001eb2:	2501      	movs	r5, #1
 8001eb4:	fa05 f302 	lsl.w	r3, r5, r2
 8001eb8:	2014      	movs	r0, #20
 8001eba:	430b      	orrs	r3, r1
 8001ebc:	fb00 8002 	mla	r0, r0, r2, r8
 8001ec0:	4631      	mov	r1, r6
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	f7ff fa68 	bl	8001398 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ec8:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <xTaskResumeAll+0xe4>)
 8001eca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed0:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8001ed2:	bf24      	itt	cs
 8001ed4:	4b05      	ldrcs	r3, [pc, #20]	; (8001eec <xTaskResumeAll+0xdc>)
 8001ed6:	601d      	strcs	r5, [r3, #0]
 8001ed8:	e7be      	b.n	8001e58 <xTaskResumeAll+0x48>
 8001eda:	bf00      	nop
 8001edc:	20003d00 	.word	0x20003d00
 8001ee0:	20003cf4 	.word	0x20003cf4
 8001ee4:	20003d08 	.word	0x20003d08
 8001ee8:	20003cfc 	.word	0x20003cfc
 8001eec:	20003d80 	.word	0x20003d80
 8001ef0:	e000ed04 	.word	0xe000ed04
 8001ef4:	20003c5c 	.word	0x20003c5c
 8001ef8:	20003d3c 	.word	0x20003d3c
 8001efc:	20003c68 	.word	0x20003c68

08001f00 <vTaskDelay>:
	{
 8001f00:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001f02:	b940      	cbnz	r0, 8001f16 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8001f04:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <vTaskDelay+0x40>)
 8001f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	f3bf 8f4f 	dsb	sy
 8001f10:	f3bf 8f6f 	isb	sy
 8001f14:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8001f16:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <vTaskDelay+0x44>)
 8001f18:	6819      	ldr	r1, [r3, #0]
 8001f1a:	b141      	cbz	r1, 8001f2e <vTaskDelay+0x2e>
 8001f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f20:	f383 8811 	msr	BASEPRI, r3
 8001f24:	f3bf 8f6f 	isb	sy
 8001f28:	f3bf 8f4f 	dsb	sy
 8001f2c:	e7fe      	b.n	8001f2c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001f2e:	f7ff fed5 	bl	8001cdc <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001f32:	f7ff fdf3 	bl	8001b1c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8001f36:	f7ff ff6b 	bl	8001e10 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8001f3a:	2800      	cmp	r0, #0
 8001f3c:	d0e2      	beq.n	8001f04 <vTaskDelay+0x4>
 8001f3e:	bd08      	pop	{r3, pc}
 8001f40:	e000ed04 	.word	0xe000ed04
 8001f44:	20003d00 	.word	0x20003d00

08001f48 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001f48:	4b17      	ldr	r3, [pc, #92]	; (8001fa8 <vTaskSwitchContext+0x60>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b17      	ldr	r3, [pc, #92]	; (8001fac <vTaskSwitchContext+0x64>)
{
 8001f4e:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001f50:	b112      	cbz	r2, 8001f58 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8001f52:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8001f58:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <vTaskSwitchContext+0x68>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001f5e:	fab3 f383 	clz	r3, r3
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	f1c3 031f 	rsb	r3, r3, #31
 8001f68:	2214      	movs	r2, #20
 8001f6a:	4912      	ldr	r1, [pc, #72]	; (8001fb4 <vTaskSwitchContext+0x6c>)
 8001f6c:	435a      	muls	r2, r3
 8001f6e:	1888      	adds	r0, r1, r2
 8001f70:	588c      	ldr	r4, [r1, r2]
 8001f72:	b944      	cbnz	r4, 8001f86 <vTaskSwitchContext+0x3e>
	__asm volatile
 8001f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f78:	f383 8811 	msr	BASEPRI, r3
 8001f7c:	f3bf 8f6f 	isb	sy
 8001f80:	f3bf 8f4f 	dsb	sy
 8001f84:	e7fe      	b.n	8001f84 <vTaskSwitchContext+0x3c>
 8001f86:	6844      	ldr	r4, [r0, #4]
 8001f88:	3208      	adds	r2, #8
 8001f8a:	6864      	ldr	r4, [r4, #4]
 8001f8c:	6044      	str	r4, [r0, #4]
 8001f8e:	440a      	add	r2, r1
 8001f90:	4294      	cmp	r4, r2
 8001f92:	bf04      	itt	eq
 8001f94:	6862      	ldreq	r2, [r4, #4]
 8001f96:	6042      	streq	r2, [r0, #4]
 8001f98:	2214      	movs	r2, #20
 8001f9a:	fb02 1303 	mla	r3, r2, r3, r1
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	68da      	ldr	r2, [r3, #12]
 8001fa2:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <vTaskSwitchContext+0x70>)
 8001fa4:	e7d6      	b.n	8001f54 <vTaskSwitchContext+0xc>
 8001fa6:	bf00      	nop
 8001fa8:	20003d00 	.word	0x20003d00
 8001fac:	20003d80 	.word	0x20003d80
 8001fb0:	20003d08 	.word	0x20003d08
 8001fb4:	20003c68 	.word	0x20003c68
 8001fb8:	20003c5c 	.word	0x20003c5c

08001fbc <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001fbc:	4b03      	ldr	r3, [pc, #12]	; (8001fcc <vApplicationGetIdleTaskMemory+0x10>)
 8001fbe:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001fc0:	4b03      	ldr	r3, [pc, #12]	; (8001fd0 <vApplicationGetIdleTaskMemory+0x14>)
 8001fc2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	6013      	str	r3, [r2, #0]
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	20003f84 	.word	0x20003f84
 8001fd0:	20003d84 	.word	0x20003d84

08001fd4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001fd4:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	f7ff f9c8 	bl	800136c <osDelay>
 8001fdc:	e7fb      	b.n	8001fd6 <StartDefaultTask+0x2>
	...

08001fe0 <vTask1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTask1 */
void vTask1(void const * argument)
{
 8001fe0:	b508      	push	{r3, lr}
	volatile unsigned long ul;

  /* Infinite loop */
  for(;;)
  {
   	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001fe2:	4d0e      	ldr	r5, [pc, #56]	; (800201c <vTask1+0x3c>)
  	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
    //HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
    HAL_UART_Transmit(&huart1, (uint8_t*)&sMessage1[0], (uint16_t)strlen(&sMessage1[0]), (uint32_t)0xFFFFFFFF);
 8001fe4:	4c0e      	ldr	r4, [pc, #56]	; (8002020 <vTask1+0x40>)
   	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001fe6:	4628      	mov	r0, r5
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fee:	f7fe fbfb 	bl	80007e8 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ff8:	4628      	mov	r0, r5
 8001ffa:	f7fe fbf5 	bl	80007e8 <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart1, (uint8_t*)&sMessage1[0], (uint16_t)strlen(&sMessage1[0]), (uint32_t)0xFFFFFFFF);
 8001ffe:	4620      	mov	r0, r4
 8002000:	f7fe f8f6 	bl	80001f0 <strlen>
 8002004:	f04f 33ff 	mov.w	r3, #4294967295
 8002008:	b282      	uxth	r2, r0
 800200a:	4621      	mov	r1, r4
 800200c:	4805      	ldr	r0, [pc, #20]	; (8002024 <vTask1+0x44>)
 800200e:	f7ff f923 	bl	8001258 <HAL_UART_Transmit>

    //for(ul = 0; ul < mainDELAY_LOOP_COUNT; ul++);
    osDelay(1);
 8002012:	2001      	movs	r0, #1
 8002014:	f7ff f9aa 	bl	800136c <osDelay>
 8002018:	e7e5      	b.n	8001fe6 <vTask1+0x6>
 800201a:	bf00      	nop
 800201c:	40021800 	.word	0x40021800
 8002020:	20000008 	.word	0x20000008
 8002024:	20003fe4 	.word	0x20003fe4

08002028 <vTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTask2 */
void vTask2(void const * argument)
{
 8002028:	b508      	push	{r3, lr}

  /* Infinite loop */
  for(;;)
  {
		//osDelay(250);
  	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800202a:	4d0e      	ldr	r5, [pc, #56]	; (8002064 <vTask2+0x3c>)
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
		//HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
		HAL_UART_Transmit(&huart1, (uint8_t*)&sMessage1[0], (uint16_t)strlen(&sMessage1[0]), (uint32_t)0xFFFFFFFF);
 800202c:	4c0e      	ldr	r4, [pc, #56]	; (8002068 <vTask2+0x40>)
  	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800202e:	4628      	mov	r0, r5
 8002030:	2200      	movs	r2, #0
 8002032:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002036:	f7fe fbd7 	bl	80007e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 800203a:	2201      	movs	r2, #1
 800203c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002040:	4628      	mov	r0, r5
 8002042:	f7fe fbd1 	bl	80007e8 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart1, (uint8_t*)&sMessage1[0], (uint16_t)strlen(&sMessage1[0]), (uint32_t)0xFFFFFFFF);
 8002046:	4620      	mov	r0, r4
 8002048:	f7fe f8d2 	bl	80001f0 <strlen>
 800204c:	f04f 33ff 	mov.w	r3, #4294967295
 8002050:	b282      	uxth	r2, r0
 8002052:	4621      	mov	r1, r4
 8002054:	4805      	ldr	r0, [pc, #20]	; (800206c <vTask2+0x44>)
 8002056:	f7ff f8ff 	bl	8001258 <HAL_UART_Transmit>

		//for(ul = 0; ul < mainDELAY_LOOP_COUNT; ul++);
		osDelay(1);
 800205a:	2001      	movs	r0, #1
 800205c:	f7ff f986 	bl	800136c <osDelay>
 8002060:	e7e5      	b.n	800202e <vTask2+0x6>
 8002062:	bf00      	nop
 8002064:	40021800 	.word	0x40021800
 8002068:	20000008 	.word	0x20000008
 800206c:	20003fe4 	.word	0x20003fe4

08002070 <SystemClock_Config>:
{
 8002070:	b530      	push	{r4, r5, lr}
 8002072:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002074:	2230      	movs	r2, #48	; 0x30
 8002076:	2100      	movs	r1, #0
 8002078:	a808      	add	r0, sp, #32
 800207a:	f000 f9fd 	bl	8002478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800207e:	2100      	movs	r1, #0
 8002080:	2214      	movs	r2, #20
 8002082:	a803      	add	r0, sp, #12
 8002084:	f000 f9f8 	bl	8002478 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8002088:	2400      	movs	r4, #0
 800208a:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <SystemClock_Config+0x94>)
 800208c:	9401      	str	r4, [sp, #4]
 800208e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002090:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002094:	641a      	str	r2, [r3, #64]	; 0x40
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002098:	4a1b      	ldr	r2, [pc, #108]	; (8002108 <SystemClock_Config+0x98>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209e:	9301      	str	r3, [sp, #4]
 80020a0:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80020a2:	9402      	str	r4, [sp, #8]
 80020a4:	6813      	ldr	r3, [r2, #0]
 80020a6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80020aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ae:	6013      	str	r3, [r2, #0]
 80020b0:	6813      	ldr	r3, [r2, #0]
 80020b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020b6:	9302      	str	r3, [sp, #8]
 80020b8:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020ba:	2301      	movs	r3, #1
 80020bc:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020c2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020c8:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 64;
 80020ca:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020cc:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020ce:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 80020d0:	2304      	movs	r3, #4
 80020d2:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80020d4:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80020d6:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020d8:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020da:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020dc:	f7fe fb8a 	bl	80007f4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020e0:	230f      	movs	r3, #15
 80020e2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80020e4:	23a0      	movs	r3, #160	; 0xa0
 80020e6:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80020e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80020ec:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020ee:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020f4:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020f6:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020f8:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020fa:	f7fe fd2b 	bl	8000b54 <HAL_RCC_ClockConfig>
}
 80020fe:	b015      	add	sp, #84	; 0x54
 8002100:	bd30      	pop	{r4, r5, pc}
 8002102:	bf00      	nop
 8002104:	40023800 	.word	0x40023800
 8002108:	40007000 	.word	0x40007000

0800210c <main>:
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b09a      	sub	sp, #104	; 0x68
  HAL_Init();
 8002110:	f7fe f9fe 	bl	8000510 <HAL_Init>
  SystemClock_Config();
 8002114:	f7ff ffac 	bl	8002070 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002118:	2214      	movs	r2, #20
 800211a:	2100      	movs	r1, #0
 800211c:	a813      	add	r0, sp, #76	; 0x4c
 800211e:	f000 f9ab 	bl	8002478 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002122:	2500      	movs	r5, #0
 8002124:	4b3b      	ldr	r3, [pc, #236]	; (8002214 <main+0x108>)
 8002126:	9501      	str	r5, [sp, #4]
 8002128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 800212a:	483b      	ldr	r0, [pc, #236]	; (8002218 <main+0x10c>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800212c:	4c3b      	ldr	r4, [pc, #236]	; (800221c <main+0x110>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800212e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002132:	631a      	str	r2, [r3, #48]	; 0x30
 8002134:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002136:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800213a:	9201      	str	r2, [sp, #4]
 800213c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800213e:	9502      	str	r5, [sp, #8]
 8002140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002142:	f042 0201 	orr.w	r2, r2, #1
 8002146:	631a      	str	r2, [r3, #48]	; 0x30
 8002148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800214a:	f002 0201 	and.w	r2, r2, #1
 800214e:	9202      	str	r2, [sp, #8]
 8002150:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002152:	9503      	str	r5, [sp, #12]
 8002154:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002156:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800215a:	631a      	str	r2, [r3, #48]	; 0x30
 800215c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800215e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002162:	9203      	str	r2, [sp, #12]
 8002164:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002166:	9504      	str	r5, [sp, #16]
 8002168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800216a:	f042 0202 	orr.w	r2, r2, #2
 800216e:	631a      	str	r2, [r3, #48]	; 0x30
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8002176:	462a      	mov	r2, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002178:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 800217a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800217e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8002180:	f7fe fb32 	bl	80007e8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 8002184:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002188:	a913      	add	r1, sp, #76	; 0x4c
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 800218a:	9313      	str	r3, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800218c:	4822      	ldr	r0, [pc, #136]	; (8002218 <main+0x10c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002190:	2301      	movs	r3, #1
 8002192:	9314      	str	r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002194:	9516      	str	r5, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002196:	f7fe fa3b 	bl	8000610 <HAL_GPIO_Init>
  huart1.Instance = USART1;
 800219a:	4821      	ldr	r0, [pc, #132]	; (8002220 <main+0x114>)
  huart1.Init.BaudRate = 115200;
 800219c:	4a21      	ldr	r2, [pc, #132]	; (8002224 <main+0x118>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800219e:	6085      	str	r5, [r0, #8]
  huart1.Init.BaudRate = 115200;
 80021a0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80021a4:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021a8:	230c      	movs	r3, #12
 80021aa:	6143      	str	r3, [r0, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021ac:	60c5      	str	r5, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021ae:	6105      	str	r5, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021b0:	6185      	str	r5, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b2:	61c5      	str	r5, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021b4:	f7ff f822 	bl	80011fc <HAL_UART_Init>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80021b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ba:	ae05      	add	r6, sp, #20
 80021bc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80021be:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80021c2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80021c6:	4629      	mov	r1, r5
 80021c8:	a805      	add	r0, sp, #20
 80021ca:	f7ff f8a7 	bl	800131c <osThreadCreate>
 80021ce:	4b16      	ldr	r3, [pc, #88]	; (8002228 <main+0x11c>)
  osThreadDef(Task1, vTask1, osPriorityIdle, 0, 128);
 80021d0:	f104 070c 	add.w	r7, r4, #12
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80021d4:	6018      	str	r0, [r3, #0]
  osThreadDef(Task1, vTask1, osPriorityIdle, 0, 128);
 80021d6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80021d8:	ae0c      	add	r6, sp, #48	; 0x30
 80021da:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80021dc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80021e0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 80021e4:	4629      	mov	r1, r5
 80021e6:	a80c      	add	r0, sp, #48	; 0x30
 80021e8:	f7ff f898 	bl	800131c <osThreadCreate>
 80021ec:	4b0f      	ldr	r3, [pc, #60]	; (800222c <main+0x120>)
  osThreadDef(Task2, vTask2, osPriorityIdle, 0, 128);
 80021ee:	3428      	adds	r4, #40	; 0x28
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 80021f0:	6018      	str	r0, [r3, #0]
  osThreadDef(Task2, vTask2, osPriorityIdle, 0, 128);
 80021f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021f4:	ae13      	add	r6, sp, #76	; 0x4c
 80021f6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80021f8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80021fc:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8002200:	4629      	mov	r1, r5
 8002202:	a813      	add	r0, sp, #76	; 0x4c
 8002204:	f7ff f88a 	bl	800131c <osThreadCreate>
 8002208:	4b09      	ldr	r3, [pc, #36]	; (8002230 <main+0x124>)
 800220a:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800220c:	f7ff f881 	bl	8001312 <osKernelStart>
 8002210:	e7fe      	b.n	8002210 <main+0x104>
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800
 8002218:	40021800 	.word	0x40021800
 800221c:	080024a0 	.word	0x080024a0
 8002220:	20003fe4 	.word	0x20003fe4
 8002224:	40011000 	.word	0x40011000
 8002228:	20003fdc 	.word	0x20003fdc
 800222c:	20003fe0 	.word	0x20003fe0
 8002230:	20004024 	.word	0x20004024

08002234 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002234:	6802      	ldr	r2, [r0, #0]
 8002236:	4b03      	ldr	r3, [pc, #12]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002238:	429a      	cmp	r2, r3
 800223a:	d101      	bne.n	8002240 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800223c:	f7fe b982 	b.w	8000544 <HAL_IncTick>
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40001000 	.word	0x40001000

08002248 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002248:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224a:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <HAL_MspInit+0x40>)
 800224c:	2200      	movs	r2, #0
 800224e:	9200      	str	r2, [sp, #0]
 8002250:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002252:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002256:	6459      	str	r1, [r3, #68]	; 0x44
 8002258:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800225a:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800225e:	9100      	str	r1, [sp, #0]
 8002260:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002262:	9201      	str	r2, [sp, #4]
 8002264:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002266:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800226a:	6419      	str	r1, [r3, #64]	; 0x40
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002272:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002274:	210f      	movs	r1, #15
 8002276:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800227a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800227c:	f7fe f986 	bl	800058c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002280:	b003      	add	sp, #12
 8002282:	f85d fb04 	ldr.w	pc, [sp], #4
 8002286:	bf00      	nop
 8002288:	40023800 	.word	0x40023800

0800228c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800228c:	b510      	push	{r4, lr}
 800228e:	4604      	mov	r4, r0
 8002290:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002292:	2214      	movs	r2, #20
 8002294:	2100      	movs	r1, #0
 8002296:	a803      	add	r0, sp, #12
 8002298:	f000 f8ee 	bl	8002478 <memset>
  if(huart->Instance==USART1)
 800229c:	6822      	ldr	r2, [r4, #0]
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <HAL_UART_MspInit+0x68>)
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d125      	bne.n	80022f0 <HAL_UART_MspInit+0x64>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022a4:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 80022a8:	2100      	movs	r1, #0
 80022aa:	9101      	str	r1, [sp, #4]
 80022ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ae:	4812      	ldr	r0, [pc, #72]	; (80022f8 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80022b0:	f042 0210 	orr.w	r2, r2, #16
 80022b4:	645a      	str	r2, [r3, #68]	; 0x44
 80022b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022b8:	f002 0210 	and.w	r2, r2, #16
 80022bc:	9201      	str	r2, [sp, #4]
 80022be:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c0:	9102      	str	r1, [sp, #8]
 80022c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022c4:	f042 0201 	orr.w	r2, r2, #1
 80022c8:	631a      	str	r2, [r3, #48]	; 0x30
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	9302      	str	r3, [sp, #8]
 80022d2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022d4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022d8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022de:	2301      	movs	r3, #1
 80022e0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e2:	2303      	movs	r3, #3
 80022e4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022e8:	2307      	movs	r3, #7
 80022ea:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ec:	f7fe f990 	bl	8000610 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022f0:	b008      	add	sp, #32
 80022f2:	bd10      	pop	{r4, pc}
 80022f4:	40011000 	.word	0x40011000
 80022f8:	40020000 	.word	0x40020000

080022fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022fc:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80022fe:	4601      	mov	r1, r0
{
 8002300:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002302:	2200      	movs	r2, #0
 8002304:	2036      	movs	r0, #54	; 0x36
 8002306:	f7fe f941 	bl	800058c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800230a:	2036      	movs	r0, #54	; 0x36
 800230c:	f7fe f972 	bl	80005f4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002310:	2500      	movs	r5, #0
 8002312:	4b15      	ldr	r3, [pc, #84]	; (8002368 <HAL_InitTick+0x6c>)
 8002314:	9502      	str	r5, [sp, #8]
 8002316:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002318:	4c14      	ldr	r4, [pc, #80]	; (800236c <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 800231a:	f042 0210 	orr.w	r2, r2, #16
 800231e:	641a      	str	r2, [r3, #64]	; 0x40
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002328:	a901      	add	r1, sp, #4
 800232a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800232c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800232e:	f7fe fccb 	bl	8000cc8 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002332:	f7fe fca9 	bl	8000c88 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <HAL_InitTick+0x74>)
 8002338:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800233a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800233e:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002340:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002342:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <HAL_InitTick+0x78>)
 8002344:	fbb0 f0f3 	udiv	r0, r0, r3
 8002348:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 800234a:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800234c:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 800234e:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002350:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002352:	f7fe fdf5 	bl	8000f40 <HAL_TIM_Base_Init>
 8002356:	b920      	cbnz	r0, 8002362 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002358:	4620      	mov	r0, r4
 800235a:	f7fe fcd4 	bl	8000d06 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800235e:	b009      	add	sp, #36	; 0x24
 8002360:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8002362:	2001      	movs	r0, #1
 8002364:	e7fb      	b.n	800235e <HAL_InitTick+0x62>
 8002366:	bf00      	nop
 8002368:	40023800 	.word	0x40023800
 800236c:	20004028 	.word	0x20004028
 8002370:	40001000 	.word	0x40001000
 8002374:	000f4240 	.word	0x000f4240

08002378 <NMI_Handler>:
 8002378:	4770      	bx	lr

0800237a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800237a:	e7fe      	b.n	800237a <HardFault_Handler>

0800237c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800237c:	e7fe      	b.n	800237c <MemManage_Handler>

0800237e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800237e:	e7fe      	b.n	800237e <BusFault_Handler>

08002380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002380:	e7fe      	b.n	8002380 <UsageFault_Handler>

08002382 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002382:	4770      	bx	lr

08002384 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002384:	4801      	ldr	r0, [pc, #4]	; (800238c <TIM6_DAC_IRQHandler+0x8>)
 8002386:	f7fe bcd2 	b.w	8000d2e <HAL_TIM_IRQHandler>
 800238a:	bf00      	nop
 800238c:	20004028 	.word	0x20004028

08002390 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002390:	490f      	ldr	r1, [pc, #60]	; (80023d0 <SystemInit+0x40>)
 8002392:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002396:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800239e:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <SystemInit+0x44>)
 80023a0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80023a2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80023a4:	f042 0201 	orr.w	r2, r2, #1
 80023a8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80023aa:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80023b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023b6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80023b8:	4a07      	ldr	r2, [pc, #28]	; (80023d8 <SystemInit+0x48>)
 80023ba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023c2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80023c4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80023ca:	608b      	str	r3, [r1, #8]
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	e000ed00 	.word	0xe000ed00
 80023d4:	40023800 	.word	0x40023800
 80023d8:	24003010 	.word	0x24003010

080023dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80023dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002414 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80023e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80023e2:	e003      	b.n	80023ec <LoopCopyDataInit>

080023e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80023e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023ea:	3104      	adds	r1, #4

080023ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80023ec:	480b      	ldr	r0, [pc, #44]	; (800241c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80023ee:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80023f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80023f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80023f4:	d3f6      	bcc.n	80023e4 <CopyDataInit>
  ldr  r2, =_sbss
 80023f6:	4a0b      	ldr	r2, [pc, #44]	; (8002424 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80023f8:	e002      	b.n	8002400 <LoopFillZerobss>

080023fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80023fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80023fc:	f842 3b04 	str.w	r3, [r2], #4

08002400 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002400:	4b09      	ldr	r3, [pc, #36]	; (8002428 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002402:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002404:	d3f9      	bcc.n	80023fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002406:	f7ff ffc3 	bl	8002390 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800240a:	f000 f811 	bl	8002430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800240e:	f7ff fe7d 	bl	800210c <main>
  bx  lr    
 8002412:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002414:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002418:	0800253c 	.word	0x0800253c
  ldr  r0, =_sdata
 800241c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002420:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 8002424:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 8002428:	20004068 	.word	0x20004068

0800242c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800242c:	e7fe      	b.n	800242c <ADC_IRQHandler>
	...

08002430 <__libc_init_array>:
 8002430:	b570      	push	{r4, r5, r6, lr}
 8002432:	4e0d      	ldr	r6, [pc, #52]	; (8002468 <__libc_init_array+0x38>)
 8002434:	4c0d      	ldr	r4, [pc, #52]	; (800246c <__libc_init_array+0x3c>)
 8002436:	1ba4      	subs	r4, r4, r6
 8002438:	10a4      	asrs	r4, r4, #2
 800243a:	2500      	movs	r5, #0
 800243c:	42a5      	cmp	r5, r4
 800243e:	d109      	bne.n	8002454 <__libc_init_array+0x24>
 8002440:	4e0b      	ldr	r6, [pc, #44]	; (8002470 <__libc_init_array+0x40>)
 8002442:	4c0c      	ldr	r4, [pc, #48]	; (8002474 <__libc_init_array+0x44>)
 8002444:	f000 f820 	bl	8002488 <_init>
 8002448:	1ba4      	subs	r4, r4, r6
 800244a:	10a4      	asrs	r4, r4, #2
 800244c:	2500      	movs	r5, #0
 800244e:	42a5      	cmp	r5, r4
 8002450:	d105      	bne.n	800245e <__libc_init_array+0x2e>
 8002452:	bd70      	pop	{r4, r5, r6, pc}
 8002454:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002458:	4798      	blx	r3
 800245a:	3501      	adds	r5, #1
 800245c:	e7ee      	b.n	800243c <__libc_init_array+0xc>
 800245e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002462:	4798      	blx	r3
 8002464:	3501      	adds	r5, #1
 8002466:	e7f2      	b.n	800244e <__libc_init_array+0x1e>
 8002468:	08002534 	.word	0x08002534
 800246c:	08002534 	.word	0x08002534
 8002470:	08002534 	.word	0x08002534
 8002474:	08002538 	.word	0x08002538

08002478 <memset>:
 8002478:	4402      	add	r2, r0
 800247a:	4603      	mov	r3, r0
 800247c:	4293      	cmp	r3, r2
 800247e:	d100      	bne.n	8002482 <memset+0xa>
 8002480:	4770      	bx	lr
 8002482:	f803 1b01 	strb.w	r1, [r3], #1
 8002486:	e7f9      	b.n	800247c <memset+0x4>

08002488 <_init>:
 8002488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800248a:	bf00      	nop
 800248c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800248e:	bc08      	pop	{r3}
 8002490:	469e      	mov	lr, r3
 8002492:	4770      	bx	lr

08002494 <_fini>:
 8002494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002496:	bf00      	nop
 8002498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800249a:	bc08      	pop	{r3}
 800249c:	469e      	mov	lr, r3
 800249e:	4770      	bx	lr
