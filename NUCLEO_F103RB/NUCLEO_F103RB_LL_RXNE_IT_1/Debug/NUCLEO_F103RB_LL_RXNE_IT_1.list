
NUCLEO_F103RB_LL_RXNE_IT_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08001f54  08001f54  00011f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002044  08002044  00012044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002048  08002048  00012048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  0800204c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000030  20000070  080020bc  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000a0  080020bc  000200a0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   00007565  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001efb  00000000  00000000  000275fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bff  00000000  00000000  000294f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000510  00000000  00000000  0002b0f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000788  00000000  00000000  0002b608  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003051  00000000  00000000  0002bd90  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000209e  00000000  00000000  0002ede1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00030e7f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001218  00000000  00000000  00030efc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08001f3c 	.word	0x08001f3c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08001f3c 	.word	0x08001f3c

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f8a0 	bl	80002a8 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f854 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f82d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f000 fe16 	bl	8000ddc <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000098 	.word	0x20000098
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000098 	.word	0x20000098

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000202:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000206:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800020e:	041b      	lsls	r3, r3, #16
 8000210:	0c1b      	lsrs	r3, r3, #16
 8000212:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800021a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800021c:	60d3      	str	r3, [r2, #12]
 800021e:	4770      	bx	lr
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	68dc      	ldr	r4, [r3, #12]
 800022a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000232:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000234:	2b04      	cmp	r3, #4
 8000236:	bf28      	it	cs
 8000238:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf98      	it	ls
 8000242:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	fa05 f303 	lsl.w	r3, r5, r3
 8000248:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	bf88      	it	hi
 800024e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000250:	4019      	ands	r1, r3
 8000252:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000254:	fa05 f404 	lsl.w	r4, r5, r4
 8000258:	3c01      	subs	r4, #1
 800025a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800025c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	ea42 0201 	orr.w	r2, r2, r1
 8000262:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	bfa9      	itett	ge
 8000268:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	4b06      	ldrlt	r3, [pc, #24]	; (8000288 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026e:	b2d2      	uxtbge	r2, r2
 8000270:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	bfbb      	ittet	lt
 8000276:	f000 000f 	andlt.w	r0, r0, #15
 800027a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000280:	541a      	strblt	r2, [r3, r0]
 8000282:	bd30      	pop	{r4, r5, pc}
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000ed14 	.word	0xe000ed14

0800028c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800028c:	2800      	cmp	r0, #0
 800028e:	db08      	blt.n	80002a2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000290:	2301      	movs	r3, #1
 8000292:	0942      	lsrs	r2, r0, #5
 8000294:	f000 001f 	and.w	r0, r0, #31
 8000298:	fa03 f000 	lsl.w	r0, r3, r0
 800029c:	4b01      	ldr	r3, [pc, #4]	; (80002a4 <HAL_NVIC_EnableIRQ+0x18>)
 800029e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002a2:	4770      	bx	lr
 80002a4:	e000e100 	.word	0xe000e100

080002a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002a8:	3801      	subs	r0, #1
 80002aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ae:	d20a      	bcs.n	80002c6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002b2:	4b06      	ldr	r3, [pc, #24]	; (80002cc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b4:	4a06      	ldr	r2, [pc, #24]	; (80002d0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002b6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002bc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002be:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002c0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002c6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	e000e010 	.word	0xe000e010
 80002d0:	e000ed00 	.word	0xe000ed00

080002d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80002d8:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80002da:	4626      	mov	r6, r4
 80002dc:	4b66      	ldr	r3, [pc, #408]	; (8000478 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002de:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000488 <HAL_GPIO_Init+0x1b4>
 80002e2:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 800048c <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80002e6:	680a      	ldr	r2, [r1, #0]
 80002e8:	fa32 f506 	lsrs.w	r5, r2, r6
 80002ec:	d102      	bne.n	80002f4 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80002ee:	b003      	add	sp, #12
 80002f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80002f4:	f04f 0801 	mov.w	r8, #1
 80002f8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002fc:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000300:	4590      	cmp	r8, r2
 8000302:	d17f      	bne.n	8000404 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8000304:	684d      	ldr	r5, [r1, #4]
 8000306:	2d12      	cmp	r5, #18
 8000308:	f000 80aa 	beq.w	8000460 <HAL_GPIO_Init+0x18c>
 800030c:	f200 8083 	bhi.w	8000416 <HAL_GPIO_Init+0x142>
 8000310:	2d02      	cmp	r5, #2
 8000312:	f000 80a2 	beq.w	800045a <HAL_GPIO_Init+0x186>
 8000316:	d877      	bhi.n	8000408 <HAL_GPIO_Init+0x134>
 8000318:	2d00      	cmp	r5, #0
 800031a:	f000 8089 	beq.w	8000430 <HAL_GPIO_Init+0x15c>
 800031e:	2d01      	cmp	r5, #1
 8000320:	f000 8099 	beq.w	8000456 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000324:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000328:	2aff      	cmp	r2, #255	; 0xff
 800032a:	bf93      	iteet	ls
 800032c:	4682      	movls	sl, r0
 800032e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000332:	3d08      	subhi	r5, #8
 8000334:	f8d0 b000 	ldrls.w	fp, [r0]
 8000338:	bf92      	itee	ls
 800033a:	00b5      	lslls	r5, r6, #2
 800033c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000340:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000342:	fa09 f805 	lsl.w	r8, r9, r5
 8000346:	ea2b 0808 	bic.w	r8, fp, r8
 800034a:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800034e:	bf88      	it	hi
 8000350:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000354:	ea48 0505 	orr.w	r5, r8, r5
 8000358:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800035c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000360:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000364:	d04e      	beq.n	8000404 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000366:	4d45      	ldr	r5, [pc, #276]	; (800047c <HAL_GPIO_Init+0x1a8>)
 8000368:	4f44      	ldr	r7, [pc, #272]	; (800047c <HAL_GPIO_Init+0x1a8>)
 800036a:	69ad      	ldr	r5, [r5, #24]
 800036c:	f026 0803 	bic.w	r8, r6, #3
 8000370:	f045 0501 	orr.w	r5, r5, #1
 8000374:	61bd      	str	r5, [r7, #24]
 8000376:	69bd      	ldr	r5, [r7, #24]
 8000378:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800037c:	f005 0501 	and.w	r5, r5, #1
 8000380:	9501      	str	r5, [sp, #4]
 8000382:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000386:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800038a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800038c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000390:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000394:	fa09 f90b 	lsl.w	r9, r9, fp
 8000398:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800039c:	4d38      	ldr	r5, [pc, #224]	; (8000480 <HAL_GPIO_Init+0x1ac>)
 800039e:	42a8      	cmp	r0, r5
 80003a0:	d063      	beq.n	800046a <HAL_GPIO_Init+0x196>
 80003a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003a6:	42a8      	cmp	r0, r5
 80003a8:	d061      	beq.n	800046e <HAL_GPIO_Init+0x19a>
 80003aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003ae:	42a8      	cmp	r0, r5
 80003b0:	d05f      	beq.n	8000472 <HAL_GPIO_Init+0x19e>
 80003b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003b6:	42a8      	cmp	r0, r5
 80003b8:	bf0c      	ite	eq
 80003ba:	2503      	moveq	r5, #3
 80003bc:	2504      	movne	r5, #4
 80003be:	fa05 f50b 	lsl.w	r5, r5, fp
 80003c2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80003c6:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80003ca:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003cc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003d0:	bf14      	ite	ne
 80003d2:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003d4:	4395      	biceq	r5, r2
 80003d6:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80003d8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003da:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003de:	bf14      	ite	ne
 80003e0:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003e2:	4395      	biceq	r5, r2
 80003e4:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80003e6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003e8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003ec:	bf14      	ite	ne
 80003ee:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003f0:	4395      	biceq	r5, r2
 80003f2:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80003f4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003f6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003fa:	bf14      	ite	ne
 80003fc:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003fe:	ea25 0202 	biceq.w	r2, r5, r2
 8000402:	60da      	str	r2, [r3, #12]
	position++;
 8000404:	3601      	adds	r6, #1
 8000406:	e76e      	b.n	80002e6 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8000408:	2d03      	cmp	r5, #3
 800040a:	d022      	beq.n	8000452 <HAL_GPIO_Init+0x17e>
 800040c:	2d11      	cmp	r5, #17
 800040e:	d189      	bne.n	8000324 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000410:	68cc      	ldr	r4, [r1, #12]
 8000412:	3404      	adds	r4, #4
          break;
 8000414:	e786      	b.n	8000324 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000416:	4f1b      	ldr	r7, [pc, #108]	; (8000484 <HAL_GPIO_Init+0x1b0>)
 8000418:	42bd      	cmp	r5, r7
 800041a:	d009      	beq.n	8000430 <HAL_GPIO_Init+0x15c>
 800041c:	d812      	bhi.n	8000444 <HAL_GPIO_Init+0x170>
 800041e:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000490 <HAL_GPIO_Init+0x1bc>
 8000422:	454d      	cmp	r5, r9
 8000424:	d004      	beq.n	8000430 <HAL_GPIO_Init+0x15c>
 8000426:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800042a:	454d      	cmp	r5, r9
 800042c:	f47f af7a 	bne.w	8000324 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000430:	688c      	ldr	r4, [r1, #8]
 8000432:	b1c4      	cbz	r4, 8000466 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000434:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8000436:	bf0c      	ite	eq
 8000438:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800043c:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000440:	2408      	movs	r4, #8
 8000442:	e76f      	b.n	8000324 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000444:	4575      	cmp	r5, lr
 8000446:	d0f3      	beq.n	8000430 <HAL_GPIO_Init+0x15c>
 8000448:	4565      	cmp	r5, ip
 800044a:	d0f1      	beq.n	8000430 <HAL_GPIO_Init+0x15c>
 800044c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000494 <HAL_GPIO_Init+0x1c0>
 8000450:	e7eb      	b.n	800042a <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000452:	2400      	movs	r4, #0
 8000454:	e766      	b.n	8000324 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000456:	68cc      	ldr	r4, [r1, #12]
          break;
 8000458:	e764      	b.n	8000324 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800045a:	68cc      	ldr	r4, [r1, #12]
 800045c:	3408      	adds	r4, #8
          break;
 800045e:	e761      	b.n	8000324 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000460:	68cc      	ldr	r4, [r1, #12]
 8000462:	340c      	adds	r4, #12
          break;
 8000464:	e75e      	b.n	8000324 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000466:	2404      	movs	r4, #4
 8000468:	e75c      	b.n	8000324 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800046a:	2500      	movs	r5, #0
 800046c:	e7a7      	b.n	80003be <HAL_GPIO_Init+0xea>
 800046e:	2501      	movs	r5, #1
 8000470:	e7a5      	b.n	80003be <HAL_GPIO_Init+0xea>
 8000472:	2502      	movs	r5, #2
 8000474:	e7a3      	b.n	80003be <HAL_GPIO_Init+0xea>
 8000476:	bf00      	nop
 8000478:	40010400 	.word	0x40010400
 800047c:	40021000 	.word	0x40021000
 8000480:	40010800 	.word	0x40010800
 8000484:	10210000 	.word	0x10210000
 8000488:	10310000 	.word	0x10310000
 800048c:	10320000 	.word	0x10320000
 8000490:	10110000 	.word	0x10110000
 8000494:	10220000 	.word	0x10220000

08000498 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000498:	b10a      	cbz	r2, 800049e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800049a:	6101      	str	r1, [r0, #16]
 800049c:	4770      	bx	lr
 800049e:	0409      	lsls	r1, r1, #16
 80004a0:	e7fb      	b.n	800049a <HAL_GPIO_WritePin+0x2>

080004a2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80004a2:	68c3      	ldr	r3, [r0, #12]
 80004a4:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004a6:	bf14      	ite	ne
 80004a8:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004aa:	6101      	streq	r1, [r0, #16]
 80004ac:	4770      	bx	lr

080004ae <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004ae:	4770      	bx	lr

080004b0 <HAL_GPIO_EXTI_IRQHandler>:
{
 80004b0:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80004b2:	4b04      	ldr	r3, [pc, #16]	; (80004c4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80004b4:	6959      	ldr	r1, [r3, #20]
 80004b6:	4201      	tst	r1, r0
 80004b8:	d002      	beq.n	80004c0 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80004ba:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80004bc:	f7ff fff7 	bl	80004ae <HAL_GPIO_EXTI_Callback>
 80004c0:	bd08      	pop	{r3, pc}
 80004c2:	bf00      	nop
 80004c4:	40010400 	.word	0x40010400

080004c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80004cc:	4605      	mov	r5, r0
 80004ce:	b908      	cbnz	r0, 80004d4 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80004d0:	2001      	movs	r0, #1
 80004d2:	e03c      	b.n	800054e <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004d4:	6803      	ldr	r3, [r0, #0]
 80004d6:	07db      	lsls	r3, r3, #31
 80004d8:	d410      	bmi.n	80004fc <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004da:	682b      	ldr	r3, [r5, #0]
 80004dc:	079f      	lsls	r7, r3, #30
 80004de:	d45d      	bmi.n	800059c <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004e0:	682b      	ldr	r3, [r5, #0]
 80004e2:	0719      	lsls	r1, r3, #28
 80004e4:	f100 8094 	bmi.w	8000610 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004e8:	682b      	ldr	r3, [r5, #0]
 80004ea:	075a      	lsls	r2, r3, #29
 80004ec:	f100 80be 	bmi.w	800066c <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004f0:	69e8      	ldr	r0, [r5, #28]
 80004f2:	2800      	cmp	r0, #0
 80004f4:	f040 812c 	bne.w	8000750 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80004f8:	2000      	movs	r0, #0
 80004fa:	e028      	b.n	800054e <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80004fc:	4c8f      	ldr	r4, [pc, #572]	; (800073c <HAL_RCC_OscConfig+0x274>)
 80004fe:	6863      	ldr	r3, [r4, #4]
 8000500:	f003 030c 	and.w	r3, r3, #12
 8000504:	2b04      	cmp	r3, #4
 8000506:	d007      	beq.n	8000518 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000508:	6863      	ldr	r3, [r4, #4]
 800050a:	f003 030c 	and.w	r3, r3, #12
 800050e:	2b08      	cmp	r3, #8
 8000510:	d109      	bne.n	8000526 <HAL_RCC_OscConfig+0x5e>
 8000512:	6863      	ldr	r3, [r4, #4]
 8000514:	03de      	lsls	r6, r3, #15
 8000516:	d506      	bpl.n	8000526 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000518:	6823      	ldr	r3, [r4, #0]
 800051a:	039c      	lsls	r4, r3, #14
 800051c:	d5dd      	bpl.n	80004da <HAL_RCC_OscConfig+0x12>
 800051e:	686b      	ldr	r3, [r5, #4]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d1da      	bne.n	80004da <HAL_RCC_OscConfig+0x12>
 8000524:	e7d4      	b.n	80004d0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000526:	686b      	ldr	r3, [r5, #4]
 8000528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800052c:	d112      	bne.n	8000554 <HAL_RCC_OscConfig+0x8c>
 800052e:	6823      	ldr	r3, [r4, #0]
 8000530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000534:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000536:	f7ff fe4b 	bl	80001d0 <HAL_GetTick>
 800053a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800053c:	6823      	ldr	r3, [r4, #0]
 800053e:	0398      	lsls	r0, r3, #14
 8000540:	d4cb      	bmi.n	80004da <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000542:	f7ff fe45 	bl	80001d0 <HAL_GetTick>
 8000546:	1b80      	subs	r0, r0, r6
 8000548:	2864      	cmp	r0, #100	; 0x64
 800054a:	d9f7      	bls.n	800053c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 800054c:	2003      	movs	r0, #3
}
 800054e:	b002      	add	sp, #8
 8000550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000554:	b99b      	cbnz	r3, 800057e <HAL_RCC_OscConfig+0xb6>
 8000556:	6823      	ldr	r3, [r4, #0]
 8000558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800055c:	6023      	str	r3, [r4, #0]
 800055e:	6823      	ldr	r3, [r4, #0]
 8000560:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000564:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000566:	f7ff fe33 	bl	80001d0 <HAL_GetTick>
 800056a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800056c:	6823      	ldr	r3, [r4, #0]
 800056e:	0399      	lsls	r1, r3, #14
 8000570:	d5b3      	bpl.n	80004da <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000572:	f7ff fe2d 	bl	80001d0 <HAL_GetTick>
 8000576:	1b80      	subs	r0, r0, r6
 8000578:	2864      	cmp	r0, #100	; 0x64
 800057a:	d9f7      	bls.n	800056c <HAL_RCC_OscConfig+0xa4>
 800057c:	e7e6      	b.n	800054c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800057e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000582:	6823      	ldr	r3, [r4, #0]
 8000584:	d103      	bne.n	800058e <HAL_RCC_OscConfig+0xc6>
 8000586:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800058a:	6023      	str	r3, [r4, #0]
 800058c:	e7cf      	b.n	800052e <HAL_RCC_OscConfig+0x66>
 800058e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000592:	6023      	str	r3, [r4, #0]
 8000594:	6823      	ldr	r3, [r4, #0]
 8000596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800059a:	e7cb      	b.n	8000534 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800059c:	4c67      	ldr	r4, [pc, #412]	; (800073c <HAL_RCC_OscConfig+0x274>)
 800059e:	6863      	ldr	r3, [r4, #4]
 80005a0:	f013 0f0c 	tst.w	r3, #12
 80005a4:	d007      	beq.n	80005b6 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80005a6:	6863      	ldr	r3, [r4, #4]
 80005a8:	f003 030c 	and.w	r3, r3, #12
 80005ac:	2b08      	cmp	r3, #8
 80005ae:	d110      	bne.n	80005d2 <HAL_RCC_OscConfig+0x10a>
 80005b0:	6863      	ldr	r3, [r4, #4]
 80005b2:	03da      	lsls	r2, r3, #15
 80005b4:	d40d      	bmi.n	80005d2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80005b6:	6823      	ldr	r3, [r4, #0]
 80005b8:	079b      	lsls	r3, r3, #30
 80005ba:	d502      	bpl.n	80005c2 <HAL_RCC_OscConfig+0xfa>
 80005bc:	692b      	ldr	r3, [r5, #16]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d186      	bne.n	80004d0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80005c2:	6823      	ldr	r3, [r4, #0]
 80005c4:	696a      	ldr	r2, [r5, #20]
 80005c6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80005ca:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80005ce:	6023      	str	r3, [r4, #0]
 80005d0:	e786      	b.n	80004e0 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005d2:	692a      	ldr	r2, [r5, #16]
 80005d4:	4b5a      	ldr	r3, [pc, #360]	; (8000740 <HAL_RCC_OscConfig+0x278>)
 80005d6:	b16a      	cbz	r2, 80005f4 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 80005d8:	2201      	movs	r2, #1
 80005da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005dc:	f7ff fdf8 	bl	80001d0 <HAL_GetTick>
 80005e0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005e2:	6823      	ldr	r3, [r4, #0]
 80005e4:	079f      	lsls	r7, r3, #30
 80005e6:	d4ec      	bmi.n	80005c2 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80005e8:	f7ff fdf2 	bl	80001d0 <HAL_GetTick>
 80005ec:	1b80      	subs	r0, r0, r6
 80005ee:	2802      	cmp	r0, #2
 80005f0:	d9f7      	bls.n	80005e2 <HAL_RCC_OscConfig+0x11a>
 80005f2:	e7ab      	b.n	800054c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005f6:	f7ff fdeb 	bl	80001d0 <HAL_GetTick>
 80005fa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005fc:	6823      	ldr	r3, [r4, #0]
 80005fe:	0798      	lsls	r0, r3, #30
 8000600:	f57f af6e 	bpl.w	80004e0 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000604:	f7ff fde4 	bl	80001d0 <HAL_GetTick>
 8000608:	1b80      	subs	r0, r0, r6
 800060a:	2802      	cmp	r0, #2
 800060c:	d9f6      	bls.n	80005fc <HAL_RCC_OscConfig+0x134>
 800060e:	e79d      	b.n	800054c <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000610:	69aa      	ldr	r2, [r5, #24]
 8000612:	4c4a      	ldr	r4, [pc, #296]	; (800073c <HAL_RCC_OscConfig+0x274>)
 8000614:	4b4b      	ldr	r3, [pc, #300]	; (8000744 <HAL_RCC_OscConfig+0x27c>)
 8000616:	b1da      	cbz	r2, 8000650 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000618:	2201      	movs	r2, #1
 800061a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800061c:	f7ff fdd8 	bl	80001d0 <HAL_GetTick>
 8000620:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000624:	079b      	lsls	r3, r3, #30
 8000626:	d50d      	bpl.n	8000644 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000628:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800062c:	4b46      	ldr	r3, [pc, #280]	; (8000748 <HAL_RCC_OscConfig+0x280>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	fbb3 f3f2 	udiv	r3, r3, r2
 8000634:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000636:	bf00      	nop
  }
  while (Delay --);
 8000638:	9b01      	ldr	r3, [sp, #4]
 800063a:	1e5a      	subs	r2, r3, #1
 800063c:	9201      	str	r2, [sp, #4]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d1f9      	bne.n	8000636 <HAL_RCC_OscConfig+0x16e>
 8000642:	e751      	b.n	80004e8 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000644:	f7ff fdc4 	bl	80001d0 <HAL_GetTick>
 8000648:	1b80      	subs	r0, r0, r6
 800064a:	2802      	cmp	r0, #2
 800064c:	d9e9      	bls.n	8000622 <HAL_RCC_OscConfig+0x15a>
 800064e:	e77d      	b.n	800054c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000650:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000652:	f7ff fdbd 	bl	80001d0 <HAL_GetTick>
 8000656:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000658:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800065a:	079f      	lsls	r7, r3, #30
 800065c:	f57f af44 	bpl.w	80004e8 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000660:	f7ff fdb6 	bl	80001d0 <HAL_GetTick>
 8000664:	1b80      	subs	r0, r0, r6
 8000666:	2802      	cmp	r0, #2
 8000668:	d9f6      	bls.n	8000658 <HAL_RCC_OscConfig+0x190>
 800066a:	e76f      	b.n	800054c <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800066c:	4c33      	ldr	r4, [pc, #204]	; (800073c <HAL_RCC_OscConfig+0x274>)
 800066e:	69e3      	ldr	r3, [r4, #28]
 8000670:	00d8      	lsls	r0, r3, #3
 8000672:	d424      	bmi.n	80006be <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000674:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000676:	69e3      	ldr	r3, [r4, #28]
 8000678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067c:	61e3      	str	r3, [r4, #28]
 800067e:	69e3      	ldr	r3, [r4, #28]
 8000680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000688:	4e30      	ldr	r6, [pc, #192]	; (800074c <HAL_RCC_OscConfig+0x284>)
 800068a:	6833      	ldr	r3, [r6, #0]
 800068c:	05d9      	lsls	r1, r3, #23
 800068e:	d518      	bpl.n	80006c2 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000690:	68eb      	ldr	r3, [r5, #12]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d126      	bne.n	80006e4 <HAL_RCC_OscConfig+0x21c>
 8000696:	6a23      	ldr	r3, [r4, #32]
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800069e:	f7ff fd97 	bl	80001d0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80006a2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80006a6:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80006a8:	6a23      	ldr	r3, [r4, #32]
 80006aa:	079b      	lsls	r3, r3, #30
 80006ac:	d53f      	bpl.n	800072e <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 80006ae:	2f00      	cmp	r7, #0
 80006b0:	f43f af1e 	beq.w	80004f0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80006b4:	69e3      	ldr	r3, [r4, #28]
 80006b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80006ba:	61e3      	str	r3, [r4, #28]
 80006bc:	e718      	b.n	80004f0 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80006be:	2700      	movs	r7, #0
 80006c0:	e7e2      	b.n	8000688 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80006c2:	6833      	ldr	r3, [r6, #0]
 80006c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80006ca:	f7ff fd81 	bl	80001d0 <HAL_GetTick>
 80006ce:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006d0:	6833      	ldr	r3, [r6, #0]
 80006d2:	05da      	lsls	r2, r3, #23
 80006d4:	d4dc      	bmi.n	8000690 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006d6:	f7ff fd7b 	bl	80001d0 <HAL_GetTick>
 80006da:	eba0 0008 	sub.w	r0, r0, r8
 80006de:	2864      	cmp	r0, #100	; 0x64
 80006e0:	d9f6      	bls.n	80006d0 <HAL_RCC_OscConfig+0x208>
 80006e2:	e733      	b.n	800054c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006e4:	b9ab      	cbnz	r3, 8000712 <HAL_RCC_OscConfig+0x24a>
 80006e6:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80006e8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006ec:	f023 0301 	bic.w	r3, r3, #1
 80006f0:	6223      	str	r3, [r4, #32]
 80006f2:	6a23      	ldr	r3, [r4, #32]
 80006f4:	f023 0304 	bic.w	r3, r3, #4
 80006f8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006fa:	f7ff fd69 	bl	80001d0 <HAL_GetTick>
 80006fe:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000700:	6a23      	ldr	r3, [r4, #32]
 8000702:	0798      	lsls	r0, r3, #30
 8000704:	d5d3      	bpl.n	80006ae <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000706:	f7ff fd63 	bl	80001d0 <HAL_GetTick>
 800070a:	1b80      	subs	r0, r0, r6
 800070c:	4540      	cmp	r0, r8
 800070e:	d9f7      	bls.n	8000700 <HAL_RCC_OscConfig+0x238>
 8000710:	e71c      	b.n	800054c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000712:	2b05      	cmp	r3, #5
 8000714:	6a23      	ldr	r3, [r4, #32]
 8000716:	d103      	bne.n	8000720 <HAL_RCC_OscConfig+0x258>
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6223      	str	r3, [r4, #32]
 800071e:	e7ba      	b.n	8000696 <HAL_RCC_OscConfig+0x1ce>
 8000720:	f023 0301 	bic.w	r3, r3, #1
 8000724:	6223      	str	r3, [r4, #32]
 8000726:	6a23      	ldr	r3, [r4, #32]
 8000728:	f023 0304 	bic.w	r3, r3, #4
 800072c:	e7b6      	b.n	800069c <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800072e:	f7ff fd4f 	bl	80001d0 <HAL_GetTick>
 8000732:	eba0 0008 	sub.w	r0, r0, r8
 8000736:	42b0      	cmp	r0, r6
 8000738:	d9b6      	bls.n	80006a8 <HAL_RCC_OscConfig+0x1e0>
 800073a:	e707      	b.n	800054c <HAL_RCC_OscConfig+0x84>
 800073c:	40021000 	.word	0x40021000
 8000740:	42420000 	.word	0x42420000
 8000744:	42420480 	.word	0x42420480
 8000748:	20000008 	.word	0x20000008
 800074c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000750:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <HAL_RCC_OscConfig+0x334>)
 8000752:	685a      	ldr	r2, [r3, #4]
 8000754:	461c      	mov	r4, r3
 8000756:	f002 020c 	and.w	r2, r2, #12
 800075a:	2a08      	cmp	r2, #8
 800075c:	d03d      	beq.n	80007da <HAL_RCC_OscConfig+0x312>
 800075e:	2300      	movs	r3, #0
 8000760:	4e27      	ldr	r6, [pc, #156]	; (8000800 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000762:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000764:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000766:	d12b      	bne.n	80007c0 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000768:	f7ff fd32 	bl	80001d0 <HAL_GetTick>
 800076c:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800076e:	6823      	ldr	r3, [r4, #0]
 8000770:	0199      	lsls	r1, r3, #6
 8000772:	d41f      	bmi.n	80007b4 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000774:	6a2b      	ldr	r3, [r5, #32]
 8000776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800077a:	d105      	bne.n	8000788 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800077c:	6862      	ldr	r2, [r4, #4]
 800077e:	68a9      	ldr	r1, [r5, #8]
 8000780:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000784:	430a      	orrs	r2, r1
 8000786:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000788:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800078a:	6862      	ldr	r2, [r4, #4]
 800078c:	430b      	orrs	r3, r1
 800078e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000792:	4313      	orrs	r3, r2
 8000794:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000796:	2301      	movs	r3, #1
 8000798:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800079a:	f7ff fd19 	bl	80001d0 <HAL_GetTick>
 800079e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80007a0:	6823      	ldr	r3, [r4, #0]
 80007a2:	019a      	lsls	r2, r3, #6
 80007a4:	f53f aea8 	bmi.w	80004f8 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80007a8:	f7ff fd12 	bl	80001d0 <HAL_GetTick>
 80007ac:	1b40      	subs	r0, r0, r5
 80007ae:	2802      	cmp	r0, #2
 80007b0:	d9f6      	bls.n	80007a0 <HAL_RCC_OscConfig+0x2d8>
 80007b2:	e6cb      	b.n	800054c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80007b4:	f7ff fd0c 	bl	80001d0 <HAL_GetTick>
 80007b8:	1bc0      	subs	r0, r0, r7
 80007ba:	2802      	cmp	r0, #2
 80007bc:	d9d7      	bls.n	800076e <HAL_RCC_OscConfig+0x2a6>
 80007be:	e6c5      	b.n	800054c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80007c0:	f7ff fd06 	bl	80001d0 <HAL_GetTick>
 80007c4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007c6:	6823      	ldr	r3, [r4, #0]
 80007c8:	019b      	lsls	r3, r3, #6
 80007ca:	f57f ae95 	bpl.w	80004f8 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80007ce:	f7ff fcff 	bl	80001d0 <HAL_GetTick>
 80007d2:	1b40      	subs	r0, r0, r5
 80007d4:	2802      	cmp	r0, #2
 80007d6:	d9f6      	bls.n	80007c6 <HAL_RCC_OscConfig+0x2fe>
 80007d8:	e6b8      	b.n	800054c <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80007da:	2801      	cmp	r0, #1
 80007dc:	f43f aeb7 	beq.w	800054e <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80007e0:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80007e2:	6a2b      	ldr	r3, [r5, #32]
 80007e4:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80007e8:	429a      	cmp	r2, r3
 80007ea:	f47f ae71 	bne.w	80004d0 <HAL_RCC_OscConfig+0x8>
 80007ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80007f0:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80007f4:	1ac0      	subs	r0, r0, r3
 80007f6:	bf18      	it	ne
 80007f8:	2001      	movne	r0, #1
 80007fa:	e6a8      	b.n	800054e <HAL_RCC_OscConfig+0x86>
 80007fc:	40021000 	.word	0x40021000
 8000800:	42420060 	.word	0x42420060

08000804 <HAL_RCC_GetSysClockFreq>:
{
 8000804:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000806:	4b19      	ldr	r3, [pc, #100]	; (800086c <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000808:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800080a:	ac02      	add	r4, sp, #8
 800080c:	f103 0510 	add.w	r5, r3, #16
 8000810:	4622      	mov	r2, r4
 8000812:	6818      	ldr	r0, [r3, #0]
 8000814:	6859      	ldr	r1, [r3, #4]
 8000816:	3308      	adds	r3, #8
 8000818:	c203      	stmia	r2!, {r0, r1}
 800081a:	42ab      	cmp	r3, r5
 800081c:	4614      	mov	r4, r2
 800081e:	d1f7      	bne.n	8000810 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000820:	2301      	movs	r3, #1
 8000822:	f88d 3004 	strb.w	r3, [sp, #4]
 8000826:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000828:	4911      	ldr	r1, [pc, #68]	; (8000870 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800082a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800082e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000830:	f003 020c 	and.w	r2, r3, #12
 8000834:	2a08      	cmp	r2, #8
 8000836:	d117      	bne.n	8000868 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000838:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800083c:	a806      	add	r0, sp, #24
 800083e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000840:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000842:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000846:	d50c      	bpl.n	8000862 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000848:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800084a:	480a      	ldr	r0, [pc, #40]	; (8000874 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800084c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000850:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000852:	aa06      	add	r2, sp, #24
 8000854:	4413      	add	r3, r2
 8000856:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800085a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800085e:	b007      	add	sp, #28
 8000860:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <HAL_RCC_GetSysClockFreq+0x74>)
 8000864:	4350      	muls	r0, r2
 8000866:	e7fa      	b.n	800085e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000868:	4802      	ldr	r0, [pc, #8]	; (8000874 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800086a:	e7f8      	b.n	800085e <HAL_RCC_GetSysClockFreq+0x5a>
 800086c:	08001f54 	.word	0x08001f54
 8000870:	40021000 	.word	0x40021000
 8000874:	007a1200 	.word	0x007a1200
 8000878:	003d0900 	.word	0x003d0900

0800087c <HAL_RCC_ClockConfig>:
{
 800087c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000880:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000882:	4604      	mov	r4, r0
 8000884:	b910      	cbnz	r0, 800088c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000886:	2001      	movs	r0, #1
 8000888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800088c:	4a45      	ldr	r2, [pc, #276]	; (80009a4 <HAL_RCC_ClockConfig+0x128>)
 800088e:	6813      	ldr	r3, [r2, #0]
 8000890:	f003 0307 	and.w	r3, r3, #7
 8000894:	428b      	cmp	r3, r1
 8000896:	d329      	bcc.n	80008ec <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000898:	6821      	ldr	r1, [r4, #0]
 800089a:	078e      	lsls	r6, r1, #30
 800089c:	d431      	bmi.n	8000902 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800089e:	07ca      	lsls	r2, r1, #31
 80008a0:	d444      	bmi.n	800092c <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80008a2:	4a40      	ldr	r2, [pc, #256]	; (80009a4 <HAL_RCC_ClockConfig+0x128>)
 80008a4:	6813      	ldr	r3, [r2, #0]
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	429d      	cmp	r5, r3
 80008ac:	d367      	bcc.n	800097e <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008ae:	6822      	ldr	r2, [r4, #0]
 80008b0:	4d3d      	ldr	r5, [pc, #244]	; (80009a8 <HAL_RCC_ClockConfig+0x12c>)
 80008b2:	f012 0f04 	tst.w	r2, #4
 80008b6:	d16e      	bne.n	8000996 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008b8:	0713      	lsls	r3, r2, #28
 80008ba:	d506      	bpl.n	80008ca <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80008bc:	686b      	ldr	r3, [r5, #4]
 80008be:	6922      	ldr	r2, [r4, #16]
 80008c0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80008c4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80008c8:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80008ca:	f7ff ff9b 	bl	8000804 <HAL_RCC_GetSysClockFreq>
 80008ce:	686b      	ldr	r3, [r5, #4]
 80008d0:	4a36      	ldr	r2, [pc, #216]	; (80009ac <HAL_RCC_ClockConfig+0x130>)
 80008d2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80008d6:	5cd3      	ldrb	r3, [r2, r3]
 80008d8:	40d8      	lsrs	r0, r3
 80008da:	4b35      	ldr	r3, [pc, #212]	; (80009b0 <HAL_RCC_ClockConfig+0x134>)
 80008dc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80008de:	4b35      	ldr	r3, [pc, #212]	; (80009b4 <HAL_RCC_ClockConfig+0x138>)
 80008e0:	6818      	ldr	r0, [r3, #0]
 80008e2:	f7ff fc33 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 80008e6:	2000      	movs	r0, #0
 80008e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008ec:	6813      	ldr	r3, [r2, #0]
 80008ee:	f023 0307 	bic.w	r3, r3, #7
 80008f2:	430b      	orrs	r3, r1
 80008f4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80008f6:	6813      	ldr	r3, [r2, #0]
 80008f8:	f003 0307 	and.w	r3, r3, #7
 80008fc:	4299      	cmp	r1, r3
 80008fe:	d1c2      	bne.n	8000886 <HAL_RCC_ClockConfig+0xa>
 8000900:	e7ca      	b.n	8000898 <HAL_RCC_ClockConfig+0x1c>
 8000902:	4b29      	ldr	r3, [pc, #164]	; (80009a8 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000904:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000908:	bf1e      	ittt	ne
 800090a:	685a      	ldrne	r2, [r3, #4]
 800090c:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000910:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000912:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000914:	bf42      	ittt	mi
 8000916:	685a      	ldrmi	r2, [r3, #4]
 8000918:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800091c:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800091e:	685a      	ldr	r2, [r3, #4]
 8000920:	68a0      	ldr	r0, [r4, #8]
 8000922:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000926:	4302      	orrs	r2, r0
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	e7b8      	b.n	800089e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800092c:	6862      	ldr	r2, [r4, #4]
 800092e:	4e1e      	ldr	r6, [pc, #120]	; (80009a8 <HAL_RCC_ClockConfig+0x12c>)
 8000930:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000932:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000934:	d11b      	bne.n	800096e <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000936:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800093a:	d0a4      	beq.n	8000886 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800093c:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800093e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000942:	f023 0303 	bic.w	r3, r3, #3
 8000946:	4313      	orrs	r3, r2
 8000948:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800094a:	f7ff fc41 	bl	80001d0 <HAL_GetTick>
 800094e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000950:	6873      	ldr	r3, [r6, #4]
 8000952:	6862      	ldr	r2, [r4, #4]
 8000954:	f003 030c 	and.w	r3, r3, #12
 8000958:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800095c:	d0a1      	beq.n	80008a2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800095e:	f7ff fc37 	bl	80001d0 <HAL_GetTick>
 8000962:	1bc0      	subs	r0, r0, r7
 8000964:	4540      	cmp	r0, r8
 8000966:	d9f3      	bls.n	8000950 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000968:	2003      	movs	r0, #3
}
 800096a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800096e:	2a02      	cmp	r2, #2
 8000970:	d102      	bne.n	8000978 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000972:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000976:	e7e0      	b.n	800093a <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000978:	f013 0f02 	tst.w	r3, #2
 800097c:	e7dd      	b.n	800093a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800097e:	6813      	ldr	r3, [r2, #0]
 8000980:	f023 0307 	bic.w	r3, r3, #7
 8000984:	432b      	orrs	r3, r5
 8000986:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000988:	6813      	ldr	r3, [r2, #0]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	429d      	cmp	r5, r3
 8000990:	f47f af79 	bne.w	8000886 <HAL_RCC_ClockConfig+0xa>
 8000994:	e78b      	b.n	80008ae <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000996:	686b      	ldr	r3, [r5, #4]
 8000998:	68e1      	ldr	r1, [r4, #12]
 800099a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800099e:	430b      	orrs	r3, r1
 80009a0:	606b      	str	r3, [r5, #4]
 80009a2:	e789      	b.n	80008b8 <HAL_RCC_ClockConfig+0x3c>
 80009a4:	40022000 	.word	0x40022000
 80009a8:	40021000 	.word	0x40021000
 80009ac:	08001f91 	.word	0x08001f91
 80009b0:	20000008 	.word	0x20000008
 80009b4:	20000004 	.word	0x20000004

080009b8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80009b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80009bc:	680c      	ldr	r4, [r1, #0]
 80009be:	f3c4 240f 	ubfx	r4, r4, #8, #16
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009c2:	fa94 f2a4 	rbit	r2, r4
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80009c6:	f04f 090f 	mov.w	r9, #15
  pinpos = POSITION_VAL(pinmask);
 80009ca:	fab2 f282 	clz	r2, r2
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80009ce:	f04f 0803 	mov.w	r8, #3
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80009d2:	f04f 0c04 	mov.w	ip, #4
    if ((pinmask & (1u << pinpos)) != 0u)
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
      {
        currentpin = (0x00000101uL << pinpos);
 80009d6:	f240 1e01 	movw	lr, #257	; 0x101
  while ((pinmask  >> pinpos) != 0u)
 80009da:	fa34 f302 	lsrs.w	r3, r4, r2
 80009de:	d102      	bne.n	80009e6 <LL_GPIO_Init+0x2e>
      }
    }
    pinpos++;
  }
  return (SUCCESS);
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pinmask & (1u << pinpos)) != 0u)
 80009e6:	2301      	movs	r3, #1
 80009e8:	4093      	lsls	r3, r2
 80009ea:	4223      	tst	r3, r4
 80009ec:	d063      	beq.n	8000ab6 <LL_GPIO_Init+0xfe>
      if (pinpos < GPIO_PIN_MASK_POS)
 80009ee:	2a07      	cmp	r2, #7
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80009f0:	bf83      	ittte	hi
 80009f2:	f04f 1501 	movhi.w	r5, #65537	; 0x10001
 80009f6:	f1a2 0308 	subhi.w	r3, r2, #8
 80009fa:	fa05 f303 	lslhi.w	r3, r5, r3
        currentpin = (0x00000101uL << pinpos);
 80009fe:	fa0e f302 	lslls.w	r3, lr, r2
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8000a02:	bf88      	it	hi
 8000a04:	f043 6380 	orrhi.w	r3, r3, #67108864	; 0x4000000
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8000a08:	0e1e      	lsrs	r6, r3, #24
 8000a0a:	fa93 faa3 	rbit	sl, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000a0e:	faba fa8a 	clz	sl, sl
 8000a12:	fa93 fba3 	rbit	fp, r3
 8000a16:	fabb fb8b 	clz	fp, fp
 8000a1a:	5985      	ldr	r5, [r0, r6]
 8000a1c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000a20:	fa09 fa0a 	lsl.w	sl, r9, sl
 8000a24:	ea25 0a0a 	bic.w	sl, r5, sl
 8000a28:	684d      	ldr	r5, [r1, #4]
 8000a2a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000a2e:	fa05 fb0b 	lsl.w	fp, r5, fp
 8000a32:	ea4a 050b 	orr.w	r5, sl, fp
 8000a36:	5185      	str	r5, [r0, r6]
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8000a38:	68c5      	ldr	r5, [r0, #12]
 8000a3a:	ea4f 2a13 	mov.w	sl, r3, lsr #8
 8000a3e:	fa9a fbaa 	rbit	fp, sl
 8000a42:	fabb fb8b 	clz	fp, fp
 8000a46:	ea25 0a0a 	bic.w	sl, r5, sl
 8000a4a:	690d      	ldr	r5, [r1, #16]
 8000a4c:	fa05 f50b 	lsl.w	r5, r5, fp
 8000a50:	ea4a 0505 	orr.w	r5, sl, r5
 8000a54:	60c5      	str	r5, [r0, #12]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000a56:	684d      	ldr	r5, [r1, #4]
 8000a58:	f025 0508 	bic.w	r5, r5, #8
 8000a5c:	2d01      	cmp	r5, #1
 8000a5e:	d12a      	bne.n	8000ab6 <LL_GPIO_Init+0xfe>
 8000a60:	fa93 faa3 	rbit	sl, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8000a64:	faba fa8a 	clz	sl, sl
 8000a68:	fa93 f5a3 	rbit	r5, r3
 8000a6c:	fab5 f585 	clz	r5, r5
 8000a70:	5987      	ldr	r7, [r0, r6]
 8000a72:	ea4f 0b85 	mov.w	fp, r5, lsl #2
 8000a76:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000a7a:	688d      	ldr	r5, [r1, #8]
 8000a7c:	fa08 fa0a 	lsl.w	sl, r8, sl
 8000a80:	ea27 0a0a 	bic.w	sl, r7, sl
 8000a84:	fa05 f50b 	lsl.w	r5, r5, fp
 8000a88:	ea4a 0505 	orr.w	r5, sl, r5
 8000a8c:	5185      	str	r5, [r0, r6]
 8000a8e:	fa93 fba3 	rbit	fp, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000a92:	fabb fb8b 	clz	fp, fp
 8000a96:	fa93 f3a3 	rbit	r3, r3
 8000a9a:	fab3 f383 	clz	r3, r3
 8000a9e:	68cf      	ldr	r7, [r1, #12]
 8000aa0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000aa4:	fa0c fb0b 	lsl.w	fp, ip, fp
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	ea25 050b 	bic.w	r5, r5, fp
 8000aae:	fa07 f303 	lsl.w	r3, r7, r3
 8000ab2:	431d      	orrs	r5, r3
 8000ab4:	5185      	str	r5, [r0, r6]
    pinpos++;
 8000ab6:	3201      	adds	r2, #1
 8000ab8:	e78f      	b.n	80009da <LL_GPIO_Init+0x22>
	...

08000abc <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000abe:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <RCC_GetHCLKClockFreq+0x14>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ac6:	5cd3      	ldrb	r3, [r2, r3]
}
 8000ac8:	40d8      	lsrs	r0, r3
 8000aca:	4770      	bx	lr
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	08001f91 	.word	0x08001f91

08000ad4 <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000ad4:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000ad6:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <RCC_GetPCLK1ClockFreq+0x14>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000ade:	5cd3      	ldrb	r3, [r2, r3]
}
 8000ae0:	40d8      	lsrs	r0, r3
 8000ae2:	4770      	bx	lr
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	08001fa1 	.word	0x08001fa1

08000aec <RCC_GetPCLK2ClockFreq>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000aee:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <RCC_GetPCLK2ClockFreq+0x14>)
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000af6:	5cd3      	ldrb	r3, [r2, r3]
}
 8000af8:	40d8      	lsrs	r0, r3
 8000afa:	4770      	bx	lr
 8000afc:	40021000 	.word	0x40021000
 8000b00:	08001fa1 	.word	0x08001fa1

08000b04 <RCC_PLL_GetFreqDomain_SYS>:
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8000b04:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <RCC_PLL_GetFreqDomain_SYS+0x28>)
 8000b06:	685a      	ldr	r2, [r3, #4]
 8000b08:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8000b0c:	b162      	cbz	r2, 8000b28 <RCC_PLL_GetFreqDomain_SYS+0x24>
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8000b0e:	6858      	ldr	r0, [r3, #4]
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
      break;

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8000b10:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <RCC_PLL_GetFreqDomain_SYS+0x2c>)
 8000b12:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8000b16:	3001      	adds	r0, #1
 8000b18:	fbb2 f0f0 	udiv	r0, r2, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8000b1c:	685b      	ldr	r3, [r3, #4]

    default:
      pllinputfreq = HSI_VALUE / 2U;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8000b1e:	f3c3 4383 	ubfx	r3, r3, #18, #4
 8000b22:	3302      	adds	r3, #2
}
 8000b24:	4358      	muls	r0, r3
 8000b26:	4770      	bx	lr
      pllinputfreq = HSI_VALUE / 2U;
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <RCC_PLL_GetFreqDomain_SYS+0x30>)
 8000b2a:	e7f7      	b.n	8000b1c <RCC_PLL_GetFreqDomain_SYS+0x18>
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	007a1200 	.word	0x007a1200
 8000b34:	003d0900 	.word	0x003d0900

08000b38 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <RCC_GetSystemClockFreq+0x14>)
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8000b40:	2b08      	cmp	r3, #8
 8000b42:	d101      	bne.n	8000b48 <RCC_GetSystemClockFreq+0x10>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8000b44:	f7ff bfde 	b.w	8000b04 <RCC_PLL_GetFreqDomain_SYS>
}
 8000b48:	4801      	ldr	r0, [pc, #4]	; (8000b50 <RCC_GetSystemClockFreq+0x18>)
 8000b4a:	4770      	bx	lr
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	007a1200 	.word	0x007a1200

08000b54 <LL_RCC_GetSystemClocksFreq>:
{
 8000b54:	b508      	push	{r3, lr}
 8000b56:	4601      	mov	r1, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000b58:	f7ff ffee 	bl	8000b38 <RCC_GetSystemClockFreq>
 8000b5c:	6008      	str	r0, [r1, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000b5e:	f7ff ffad 	bl	8000abc <RCC_GetHCLKClockFreq>
 8000b62:	6048      	str	r0, [r1, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000b64:	f7ff ffb6 	bl	8000ad4 <RCC_GetPCLK1ClockFreq>
 8000b68:	6088      	str	r0, [r1, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000b6a:	6848      	ldr	r0, [r1, #4]
 8000b6c:	f7ff ffbe 	bl	8000aec <RCC_GetPCLK2ClockFreq>
 8000b70:	60c8      	str	r0, [r1, #12]
 8000b72:	bd08      	pop	{r3, pc}

08000b74 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8000b74:	b530      	push	{r4, r5, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8000b76:	68c3      	ldr	r3, [r0, #12]
 8000b78:	b085      	sub	sp, #20
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8000b7a:	049b      	lsls	r3, r3, #18
{
 8000b7c:	4604      	mov	r4, r0
 8000b7e:	460d      	mov	r5, r1
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8000b80:	d502      	bpl.n	8000b88 <LL_USART_Init+0x14>
  ErrorStatus status = ERROR;
 8000b82:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8000b84:	b005      	add	sp, #20
 8000b86:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(USARTx->CR1,
 8000b88:	684b      	ldr	r3, [r1, #4]
 8000b8a:	68c9      	ldr	r1, [r1, #12]
 8000b8c:	68c2      	ldr	r2, [r0, #12]
 8000b8e:	430b      	orrs	r3, r1
 8000b90:	6929      	ldr	r1, [r5, #16]
 8000b92:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000b96:	430b      	orrs	r3, r1
 8000b98:	f022 020c 	bic.w	r2, r2, #12
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	60c3      	str	r3, [r0, #12]
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000ba0:	6903      	ldr	r3, [r0, #16]
 8000ba2:	68aa      	ldr	r2, [r5, #8]
 8000ba4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	6103      	str	r3, [r0, #16]
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8000bac:	6943      	ldr	r3, [r0, #20]
 8000bae:	696a      	ldr	r2, [r5, #20]
 8000bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8000bb8:	4668      	mov	r0, sp
 8000bba:	f7ff ffcb 	bl	8000b54 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8000bbe:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <LL_USART_Init+0x98>)
 8000bc0:	429c      	cmp	r4, r3
 8000bc2:	d119      	bne.n	8000bf8 <LL_USART_Init+0x84>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8000bc4:	9903      	ldr	r1, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8000bc6:	2900      	cmp	r1, #0
 8000bc8:	d0db      	beq.n	8000b82 <LL_USART_Init+0xe>
        && (USART_InitStruct->BaudRate != 0U))
 8000bca:	682a      	ldr	r2, [r5, #0]
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	d0d8      	beq.n	8000b82 <LL_USART_Init+0xe>
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000bd0:	2319      	movs	r3, #25
 8000bd2:	434b      	muls	r3, r1
 8000bd4:	0092      	lsls	r2, r2, #2
 8000bd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bda:	2264      	movs	r2, #100	; 0x64
 8000bdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8000be0:	fb02 3311 	mls	r3, r2, r1, r3
 8000be4:	011b      	lsls	r3, r3, #4
 8000be6:	3332      	adds	r3, #50	; 0x32
 8000be8:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bec:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	e7c5      	b.n	8000b84 <LL_USART_Init+0x10>
    else if (USARTx == USART2)
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <LL_USART_Init+0x9c>)
 8000bfa:	429c      	cmp	r4, r3
 8000bfc:	d101      	bne.n	8000c02 <LL_USART_Init+0x8e>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8000bfe:	9902      	ldr	r1, [sp, #8]
 8000c00:	e7e1      	b.n	8000bc6 <LL_USART_Init+0x52>
    else if (USARTx == USART3)
 8000c02:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <LL_USART_Init+0xa0>)
 8000c04:	429c      	cmp	r4, r3
 8000c06:	d1bc      	bne.n	8000b82 <LL_USART_Init+0xe>
 8000c08:	e7f9      	b.n	8000bfe <LL_USART_Init+0x8a>
 8000c0a:	bf00      	nop
 8000c0c:	40013800 	.word	0x40013800
 8000c10:	40004400 	.word	0x40004400
 8000c14:	40004800 	.word	0x40004800

08000c18 <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	2210      	movs	r2, #16
{
 8000c1a:	b530      	push	{r4, r5, lr}
 8000c1c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	eb0d 0002 	add.w	r0, sp, r2
 8000c22:	2100      	movs	r1, #0
 8000c24:	f000 fa1a 	bl	800105c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c28:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <MX_GPIO_Init+0x98>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c2a:	4c22      	ldr	r4, [pc, #136]	; (8000cb4 <MX_GPIO_Init+0x9c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c2e:	4620      	mov	r0, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c30:	f042 0210 	orr.w	r2, r2, #16
 8000c34:	619a      	str	r2, [r3, #24]
 8000c36:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c38:	2120      	movs	r1, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3a:	f002 0210 	and.w	r2, r2, #16
 8000c3e:	9200      	str	r2, [sp, #0]
 8000c40:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c42:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2500      	movs	r5, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c46:	f042 0220 	orr.w	r2, r2, #32
 8000c4a:	619a      	str	r2, [r3, #24]
 8000c4c:	699a      	ldr	r2, [r3, #24]
 8000c4e:	f002 0220 	and.w	r2, r2, #32
 8000c52:	9201      	str	r2, [sp, #4]
 8000c54:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	699a      	ldr	r2, [r3, #24]
 8000c58:	f042 0204 	orr.w	r2, r2, #4
 8000c5c:	619a      	str	r2, [r3, #24]
 8000c5e:	699a      	ldr	r2, [r3, #24]
 8000c60:	f002 0204 	and.w	r2, r2, #4
 8000c64:	9202      	str	r2, [sp, #8]
 8000c66:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c68:	699a      	ldr	r2, [r3, #24]
 8000c6a:	f042 0208 	orr.w	r2, r2, #8
 8000c6e:	619a      	str	r2, [r3, #24]
 8000c70:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c74:	f003 0308 	and.w	r3, r3, #8
 8000c78:	9303      	str	r3, [sp, #12]
 8000c7a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c7c:	f7ff fc0c 	bl	8000498 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8000c80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c84:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <MX_GPIO_Init+0xa0>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c88:	a904      	add	r1, sp, #16
 8000c8a:	480c      	ldr	r0, [pc, #48]	; (8000cbc <MX_GPIO_Init+0xa4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c8c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f7ff fb20 	bl	80002d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c94:	2320      	movs	r3, #32
 8000c96:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2302      	movs	r3, #2
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	a904      	add	r1, sp, #16
 8000ca0:	4620      	mov	r0, r4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f7ff fb15 	bl	80002d4 <HAL_GPIO_Init>

}
 8000caa:	b009      	add	sp, #36	; 0x24
 8000cac:	bd30      	pop	{r4, r5, pc}
 8000cae:	bf00      	nop
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40010800 	.word	0x40010800
 8000cb8:	10110000 	.word	0x10110000
 8000cbc:	40011000 	.word	0x40011000

08000cc0 <_write>:
#if 1
int _write(int file, char *ptr, int len)
{
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc0:	460b      	mov	r3, r1
{
 8000cc2:	b510      	push	{r4, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000cc4:	4806      	ldr	r0, [pc, #24]	; (8000ce0 <_write+0x20>)
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc6:	1a5c      	subs	r4, r3, r1
 8000cc8:	4294      	cmp	r4, r2
 8000cca:	db01      	blt.n	8000cd0 <_write+0x10>

		}
		LL_USART_TransmitData8(USART2, *ptr++);
	}
	return len;
}
 8000ccc:	4610      	mov	r0, r2
 8000cce:	bd10      	pop	{r4, pc}
 8000cd0:	6804      	ldr	r4, [r0, #0]
		while(!LL_USART_IsActiveFlag_TXE(USART2))
 8000cd2:	0624      	lsls	r4, r4, #24
 8000cd4:	d5fc      	bpl.n	8000cd0 <_write+0x10>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8000cd6:	f813 4b01 	ldrb.w	r4, [r3], #1
 8000cda:	6044      	str	r4, [r0, #4]
 8000cdc:	e7f3      	b.n	8000cc6 <_write+0x6>
 8000cde:	bf00      	nop
 8000ce0:	40004400 	.word	0x40004400

08000ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce4:	b510      	push	{r4, lr}
 8000ce6:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce8:	2228      	movs	r2, #40	; 0x28
 8000cea:	2100      	movs	r1, #0
 8000cec:	a806      	add	r0, sp, #24
 8000cee:	f000 f9b5 	bl	800105c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf2:	2214      	movs	r2, #20
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	a801      	add	r0, sp, #4
 8000cf8:	f000 f9b0 	bl	800105c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d00:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d02:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d04:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d06:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d0c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d0e:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d10:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d12:	f7ff fbd9 	bl	80004c8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d16:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d18:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d1e:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d20:	4621      	mov	r1, r4
 8000d22:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d24:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d26:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d28:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d2a:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d2c:	f7ff fda6 	bl	800087c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000d30:	b010      	add	sp, #64	; 0x40
 8000d32:	bd10      	pop	{r4, pc}

08000d34 <main>:
{
 8000d34:	b538      	push	{r3, r4, r5, lr}
  HAL_Init();
 8000d36:	f7ff fa2d 	bl	8000194 <HAL_Init>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	2400      	movs	r4, #0
  SystemClock_Config();
 8000d3c:	f7ff ffd2 	bl	8000ce4 <SystemClock_Config>
  MX_GPIO_Init();
 8000d40:	f7ff ff6a 	bl	8000c18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d44:	f000 f8e2 	bl	8000f0c <MX_USART2_UART_Init>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d48:	2240      	movs	r2, #64	; 0x40
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <main+0x58>)
{
  /* USART2_IRQn interrupt configuration */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
  NVIC_EnableIRQ(USART2_IRQn);
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d4c:	4621      	mov	r1, r4
 8000d4e:	68db      	ldr	r3, [r3, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <main+0x5c>)
 8000d52:	2028      	movs	r0, #40	; 0x28
 8000d54:	f883 4326 	strb.w	r4, [r3, #806]	; 0x326
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	4622      	mov	r2, r4
 8000d5c:	f7ff fa62 	bl	8000224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d60:	2028      	movs	r0, #40	; 0x28
 8000d62:	f7ff fa93 	bl	800028c <HAL_NVIC_EnableIRQ>
	uint8_t i=0;
 8000d66:	4621      	mov	r1, r4
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000d68:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <main+0x60>)
  	printf("Hello Nucleo LL Drive Application : %2d \r\n", i++);
 8000d6a:	4d0b      	ldr	r5, [pc, #44]	; (8000d98 <main+0x64>)
 8000d6c:	68d3      	ldr	r3, [r2, #12]
 8000d6e:	f043 0320 	orr.w	r3, r3, #32
 8000d72:	60d3      	str	r3, [r2, #12]
 8000d74:	1c4c      	adds	r4, r1, #1
 8000d76:	4628      	mov	r0, r5
 8000d78:	f000 f978 	bl	800106c <iprintf>
 8000d7c:	b2e4      	uxtb	r4, r4
  	HAL_Delay(500);
 8000d7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d82:	f7ff fa2b 	bl	80001dc <HAL_Delay>
  	printf("Hello Nucleo LL Drive Application : %2d \r\n", i++);
 8000d86:	4621      	mov	r1, r4
 8000d88:	e7f4      	b.n	8000d74 <main+0x40>
 8000d8a:	bf00      	nop
 8000d8c:	e000ed00 	.word	0xe000ed00
 8000d90:	e000e100 	.word	0xe000e100
 8000d94:	40004400 	.word	0x40004400
 8000d98:	08001f66 	.word	0x08001f66

08000d9c <USART_CharReception_Callback>:
{

}

void USART_CharReception_Callback(void)
{
 8000d9c:	b513      	push	{r0, r1, r4, lr}
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000d9e:	4c0b      	ldr	r4, [pc, #44]	; (8000dcc <USART_CharReception_Callback+0x30>)
 8000da0:	6862      	ldr	r2, [r4, #4]
 8000da2:	b2d2      	uxtb	r2, r2
	__IO uint32_t received_char;

	/* Read Received character. RXNE flag is cleared by reading of DR register */
	received_char = LL_USART_ReceiveData8(USART2);
 8000da4:	9201      	str	r2, [sp, #4]

	/* Check if received value is corresponding to specific one : S or s */
	if ((received_char == 'S') || (received_char == 's'))
 8000da6:	9a01      	ldr	r2, [sp, #4]
 8000da8:	2a53      	cmp	r2, #83	; 0x53
 8000daa:	d002      	beq.n	8000db2 <USART_CharReception_Callback+0x16>
 8000dac:	9b01      	ldr	r3, [sp, #4]
 8000dae:	2b73      	cmp	r3, #115	; 0x73
 8000db0:	d103      	bne.n	8000dba <USART_CharReception_Callback+0x1e>
	{
		/* Turn LED2 On : Expected character has been received */
		//LED_On();
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000db2:	2120      	movs	r1, #32
 8000db4:	4806      	ldr	r0, [pc, #24]	; (8000dd0 <USART_CharReception_Callback+0x34>)
 8000db6:	f7ff fb74 	bl	80004a2 <HAL_GPIO_TogglePin>
	}

	/* Echo received character on TX */
	LL_USART_TransmitData8(USART2, received_char);
 8000dba:	9b01      	ldr	r3, [sp, #4]
	printf("\r\n");
 8000dbc:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <USART_CharReception_Callback+0x38>)
 8000dbe:	b2db      	uxtb	r3, r3
  USARTx->DR = Value;
 8000dc0:	6063      	str	r3, [r4, #4]
 8000dc2:	f000 f9c7 	bl	8001154 <puts>
}
 8000dc6:	b002      	add	sp, #8
 8000dc8:	bd10      	pop	{r4, pc}
 8000dca:	bf00      	nop
 8000dcc:	40004400 	.word	0x40004400
 8000dd0:	40010800 	.word	0x40010800
 8000dd4:	08001f64 	.word	0x08001f64

08000dd8 <Error_Callback>:
 8000dd8:	4770      	bx	lr
	...

08000ddc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <HAL_MspInit+0x3c>)
{
 8000dde:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000de0:	699a      	ldr	r2, [r3, #24]
 8000de2:	f042 0201 	orr.w	r2, r2, #1
 8000de6:	619a      	str	r2, [r3, #24]
 8000de8:	699a      	ldr	r2, [r3, #24]
 8000dea:	f002 0201 	and.w	r2, r2, #1
 8000dee:	9200      	str	r2, [sp, #0]
 8000df0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df2:	69da      	ldr	r2, [r3, #28]
 8000df4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000df8:	61da      	str	r2, [r3, #28]
 8000dfa:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dfc:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	9301      	str	r3, [sp, #4]
 8000e04:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e06:	6853      	ldr	r3, [r2, #4]
 8000e08:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e12:	b002      	add	sp, #8
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	40010000 	.word	0x40010000

08000e20 <NMI_Handler>:
 8000e20:	4770      	bx	lr

08000e22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e22:	e7fe      	b.n	8000e22 <HardFault_Handler>

08000e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e24:	e7fe      	b.n	8000e24 <MemManage_Handler>

08000e26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e26:	e7fe      	b.n	8000e26 <BusFault_Handler>

08000e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e28:	e7fe      	b.n	8000e28 <UsageFault_Handler>

08000e2a <SVC_Handler>:
 8000e2a:	4770      	bx	lr

08000e2c <DebugMon_Handler>:
 8000e2c:	4770      	bx	lr

08000e2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2e:	4770      	bx	lr

08000e30 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e30:	f7ff b9c2 	b.w	80001b8 <HAL_IncTick>

08000e34 <USART2_IRQHandler>:
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <USART2_IRQHandler+0x18>)
 8000e36:	681a      	ldr	r2, [r3, #0]
  */
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* Check RXNE flag value in SR register */
  if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 8000e38:	0692      	lsls	r2, r2, #26
 8000e3a:	d504      	bpl.n	8000e46 <USART2_IRQHandler+0x12>
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	069b      	lsls	r3, r3, #26
 8000e40:	d501      	bpl.n	8000e46 <USART2_IRQHandler+0x12>
  {
    /* RXNE flag will be cleared by reading of DR register (done in call) */
    /* Call function in charge of handling Character reception */
    USART_CharReception_Callback();
 8000e42:	f7ff bfab 	b.w	8000d9c <USART_CharReception_Callback>
  }
  else
  {
    /* Call Error function */
    Error_Callback();
 8000e46:	f7ff bfc7 	b.w	8000dd8 <Error_Callback>
 8000e4a:	bf00      	nop
 8000e4c:	40004400 	.word	0x40004400

08000e50 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000e50:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e54:	f7ff bb2c 	b.w	80004b0 <HAL_GPIO_EXTI_IRQHandler>

08000e58 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e58:	b570      	push	{r4, r5, r6, lr}
 8000e5a:	460e      	mov	r6, r1
 8000e5c:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5e:	460c      	mov	r4, r1
 8000e60:	1ba3      	subs	r3, r4, r6
 8000e62:	429d      	cmp	r5, r3
 8000e64:	dc01      	bgt.n	8000e6a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8000e66:	4628      	mov	r0, r5
 8000e68:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8000e6a:	f3af 8000 	nop.w
 8000e6e:	f804 0b01 	strb.w	r0, [r4], #1
 8000e72:	e7f5      	b.n	8000e60 <_read+0x8>

08000e74 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000e74:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <_sbrk+0x2c>)
{
 8000e78:	4602      	mov	r2, r0
	if (heap_end == 0)
 8000e7a:	6819      	ldr	r1, [r3, #0]
 8000e7c:	b909      	cbnz	r1, 8000e82 <_sbrk+0xe>
		heap_end = &end;
 8000e7e:	4909      	ldr	r1, [pc, #36]	; (8000ea4 <_sbrk+0x30>)
 8000e80:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8000e82:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8000e84:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8000e86:	4402      	add	r2, r0
 8000e88:	428a      	cmp	r2, r1
 8000e8a:	d906      	bls.n	8000e9a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000e8c:	f000 f8bc 	bl	8001008 <__errno>
 8000e90:	230c      	movs	r3, #12
 8000e92:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8000e9a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8000e9c:	bd08      	pop	{r3, pc}
 8000e9e:	bf00      	nop
 8000ea0:	2000008c 	.word	0x2000008c
 8000ea4:	200000a0 	.word	0x200000a0

08000ea8 <_close>:

int _close(int file)
{
	return -1;
}
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	4770      	bx	lr

08000eae <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000eae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8000eb2:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8000eb4:	604b      	str	r3, [r1, #4]
}
 8000eb6:	4770      	bx	lr

08000eb8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000eb8:	2001      	movs	r0, #1
 8000eba:	4770      	bx	lr

08000ebc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	4770      	bx	lr

08000ec0 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <SystemInit+0x40>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	f042 0201 	orr.w	r2, r2, #1
 8000ec8:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000eca:	6859      	ldr	r1, [r3, #4]
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <SystemInit+0x44>)
 8000ece:	400a      	ands	r2, r1
 8000ed0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000ed8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000edc:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ee4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000eec:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000eee:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000ef2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000ef4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <SystemInit+0x48>)
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40021000 	.word	0x40021000
 8000f04:	f8ff0000 	.word	0xf8ff0000
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <MX_USART2_UART_Init>:

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000f0c:	221c      	movs	r2, #28
{
 8000f0e:	b530      	push	{r4, r5, lr}
 8000f10:	b08f      	sub	sp, #60	; 0x3c
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000f12:	eb0d 0002 	add.w	r0, sp, r2
 8000f16:	2100      	movs	r1, #0
 8000f18:	f000 f8a0 	bl	800105c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	2214      	movs	r2, #20
 8000f1e:	2100      	movs	r1, #0
 8000f20:	a802      	add	r0, sp, #8
 8000f22:	f000 f89b 	bl	800105c <memset>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000f26:	4b23      	ldr	r3, [pc, #140]	; (8000fb4 <MX_USART2_UART_Init+0xa8>)
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f28:	2509      	movs	r5, #9
 8000f2a:	69da      	ldr	r2, [r3, #28]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	4c22      	ldr	r4, [pc, #136]	; (8000fb8 <MX_USART2_UART_Init+0xac>)
 8000f2e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000f32:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000f34:	69da      	ldr	r2, [r3, #28]
 8000f36:	a902      	add	r1, sp, #8
 8000f38:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000f3c:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000f3e:	9a01      	ldr	r2, [sp, #4]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f40:	699a      	ldr	r2, [r3, #24]
 8000f42:	4620      	mov	r0, r4
 8000f44:	f042 0204 	orr.w	r2, r2, #4
 8000f48:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f4a:	699b      	ldr	r3, [r3, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f4c:	9503      	str	r5, [sp, #12]
 8000f4e:	f003 0304 	and.w	r3, r3, #4
 8000f52:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000f54:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000f56:	f240 4304 	movw	r3, #1028	; 0x404
 8000f5a:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	9304      	str	r3, [sp, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f60:	f7ff fd2a 	bl	80009b8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000f64:	f640 0308 	movw	r3, #2056	; 0x808
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f68:	a902      	add	r1, sp, #8
 8000f6a:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000f6c:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f6e:	9503      	str	r5, [sp, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	f7ff fd22 	bl	80009b8 <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 8000f74:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000f78:	220c      	movs	r2, #12
  USART_InitStruct.BaudRate = 115200;
 8000f7a:	9307      	str	r3, [sp, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000f7c:	2300      	movs	r3, #0
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
  LL_USART_Init(USART2, &USART_InitStruct);
 8000f7e:	f5a4 4444 	sub.w	r4, r4, #50176	; 0xc400
 8000f82:	a907      	add	r1, sp, #28
 8000f84:	4620      	mov	r0, r4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000f86:	9308      	str	r3, [sp, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000f88:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000f8a:	930a      	str	r3, [sp, #40]	; 0x28
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000f8c:	930c      	str	r3, [sp, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000f8e:	930d      	str	r3, [sp, #52]	; 0x34
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000f90:	920b      	str	r2, [sp, #44]	; 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 8000f92:	f7ff fdef 	bl	8000b74 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f96:	6923      	ldr	r3, [r4, #16]
 8000f98:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000f9c:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000f9e:	6963      	ldr	r3, [r4, #20]
 8000fa0:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8000fa4:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000fa6:	68e3      	ldr	r3, [r4, #12]
 8000fa8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fac:	60e3      	str	r3, [r4, #12]
  LL_USART_ConfigAsyncMode(USART2);
  LL_USART_Enable(USART2);

}
 8000fae:	b00f      	add	sp, #60	; 0x3c
 8000fb0:	bd30      	pop	{r4, r5, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40010800 	.word	0x40010800

08000fbc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000fbc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000fbe:	e003      	b.n	8000fc8 <LoopCopyDataInit>

08000fc0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000fc2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000fc4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000fc6:	3104      	adds	r1, #4

08000fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000fc8:	480a      	ldr	r0, [pc, #40]	; (8000ff4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000fcc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000fce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000fd0:	d3f6      	bcc.n	8000fc0 <CopyDataInit>
  ldr r2, =_sbss
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000fd4:	e002      	b.n	8000fdc <LoopFillZerobss>

08000fd6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000fd8:	f842 3b04 	str.w	r3, [r2], #4

08000fdc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000fde:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000fe0:	d3f9      	bcc.n	8000fd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fe2:	f7ff ff6d 	bl	8000ec0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fe6:	f000 f815 	bl	8001014 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fea:	f7ff fea3 	bl	8000d34 <main>
  bx lr
 8000fee:	4770      	bx	lr
  ldr r3, =_sidata
 8000ff0:	0800204c 	.word	0x0800204c
  ldr r0, =_sdata
 8000ff4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ff8:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000ffc:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001000:	200000a0 	.word	0x200000a0

08001004 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC1_2_IRQHandler>
	...

08001008 <__errno>:
 8001008:	4b01      	ldr	r3, [pc, #4]	; (8001010 <__errno+0x8>)
 800100a:	6818      	ldr	r0, [r3, #0]
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	2000000c 	.word	0x2000000c

08001014 <__libc_init_array>:
 8001014:	b570      	push	{r4, r5, r6, lr}
 8001016:	2500      	movs	r5, #0
 8001018:	4e0c      	ldr	r6, [pc, #48]	; (800104c <__libc_init_array+0x38>)
 800101a:	4c0d      	ldr	r4, [pc, #52]	; (8001050 <__libc_init_array+0x3c>)
 800101c:	1ba4      	subs	r4, r4, r6
 800101e:	10a4      	asrs	r4, r4, #2
 8001020:	42a5      	cmp	r5, r4
 8001022:	d109      	bne.n	8001038 <__libc_init_array+0x24>
 8001024:	f000 ff8a 	bl	8001f3c <_init>
 8001028:	2500      	movs	r5, #0
 800102a:	4e0a      	ldr	r6, [pc, #40]	; (8001054 <__libc_init_array+0x40>)
 800102c:	4c0a      	ldr	r4, [pc, #40]	; (8001058 <__libc_init_array+0x44>)
 800102e:	1ba4      	subs	r4, r4, r6
 8001030:	10a4      	asrs	r4, r4, #2
 8001032:	42a5      	cmp	r5, r4
 8001034:	d105      	bne.n	8001042 <__libc_init_array+0x2e>
 8001036:	bd70      	pop	{r4, r5, r6, pc}
 8001038:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800103c:	4798      	blx	r3
 800103e:	3501      	adds	r5, #1
 8001040:	e7ee      	b.n	8001020 <__libc_init_array+0xc>
 8001042:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001046:	4798      	blx	r3
 8001048:	3501      	adds	r5, #1
 800104a:	e7f2      	b.n	8001032 <__libc_init_array+0x1e>
 800104c:	08002044 	.word	0x08002044
 8001050:	08002044 	.word	0x08002044
 8001054:	08002044 	.word	0x08002044
 8001058:	08002048 	.word	0x08002048

0800105c <memset>:
 800105c:	4603      	mov	r3, r0
 800105e:	4402      	add	r2, r0
 8001060:	4293      	cmp	r3, r2
 8001062:	d100      	bne.n	8001066 <memset+0xa>
 8001064:	4770      	bx	lr
 8001066:	f803 1b01 	strb.w	r1, [r3], #1
 800106a:	e7f9      	b.n	8001060 <memset+0x4>

0800106c <iprintf>:
 800106c:	b40f      	push	{r0, r1, r2, r3}
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <iprintf+0x2c>)
 8001070:	b513      	push	{r0, r1, r4, lr}
 8001072:	681c      	ldr	r4, [r3, #0]
 8001074:	b124      	cbz	r4, 8001080 <iprintf+0x14>
 8001076:	69a3      	ldr	r3, [r4, #24]
 8001078:	b913      	cbnz	r3, 8001080 <iprintf+0x14>
 800107a:	4620      	mov	r0, r4
 800107c:	f000 fa24 	bl	80014c8 <__sinit>
 8001080:	ab05      	add	r3, sp, #20
 8001082:	9a04      	ldr	r2, [sp, #16]
 8001084:	68a1      	ldr	r1, [r4, #8]
 8001086:	4620      	mov	r0, r4
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	f000 fbdd 	bl	8001848 <_vfiprintf_r>
 800108e:	b002      	add	sp, #8
 8001090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001094:	b004      	add	sp, #16
 8001096:	4770      	bx	lr
 8001098:	2000000c 	.word	0x2000000c

0800109c <_puts_r>:
 800109c:	b570      	push	{r4, r5, r6, lr}
 800109e:	460e      	mov	r6, r1
 80010a0:	4605      	mov	r5, r0
 80010a2:	b118      	cbz	r0, 80010ac <_puts_r+0x10>
 80010a4:	6983      	ldr	r3, [r0, #24]
 80010a6:	b90b      	cbnz	r3, 80010ac <_puts_r+0x10>
 80010a8:	f000 fa0e 	bl	80014c8 <__sinit>
 80010ac:	69ab      	ldr	r3, [r5, #24]
 80010ae:	68ac      	ldr	r4, [r5, #8]
 80010b0:	b913      	cbnz	r3, 80010b8 <_puts_r+0x1c>
 80010b2:	4628      	mov	r0, r5
 80010b4:	f000 fa08 	bl	80014c8 <__sinit>
 80010b8:	4b23      	ldr	r3, [pc, #140]	; (8001148 <_puts_r+0xac>)
 80010ba:	429c      	cmp	r4, r3
 80010bc:	d117      	bne.n	80010ee <_puts_r+0x52>
 80010be:	686c      	ldr	r4, [r5, #4]
 80010c0:	89a3      	ldrh	r3, [r4, #12]
 80010c2:	071b      	lsls	r3, r3, #28
 80010c4:	d51d      	bpl.n	8001102 <_puts_r+0x66>
 80010c6:	6923      	ldr	r3, [r4, #16]
 80010c8:	b1db      	cbz	r3, 8001102 <_puts_r+0x66>
 80010ca:	3e01      	subs	r6, #1
 80010cc:	68a3      	ldr	r3, [r4, #8]
 80010ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80010d2:	3b01      	subs	r3, #1
 80010d4:	60a3      	str	r3, [r4, #8]
 80010d6:	b9e9      	cbnz	r1, 8001114 <_puts_r+0x78>
 80010d8:	2b00      	cmp	r3, #0
 80010da:	da2e      	bge.n	800113a <_puts_r+0x9e>
 80010dc:	4622      	mov	r2, r4
 80010de:	210a      	movs	r1, #10
 80010e0:	4628      	mov	r0, r5
 80010e2:	f000 f83f 	bl	8001164 <__swbuf_r>
 80010e6:	3001      	adds	r0, #1
 80010e8:	d011      	beq.n	800110e <_puts_r+0x72>
 80010ea:	200a      	movs	r0, #10
 80010ec:	bd70      	pop	{r4, r5, r6, pc}
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <_puts_r+0xb0>)
 80010f0:	429c      	cmp	r4, r3
 80010f2:	d101      	bne.n	80010f8 <_puts_r+0x5c>
 80010f4:	68ac      	ldr	r4, [r5, #8]
 80010f6:	e7e3      	b.n	80010c0 <_puts_r+0x24>
 80010f8:	4b15      	ldr	r3, [pc, #84]	; (8001150 <_puts_r+0xb4>)
 80010fa:	429c      	cmp	r4, r3
 80010fc:	bf08      	it	eq
 80010fe:	68ec      	ldreq	r4, [r5, #12]
 8001100:	e7de      	b.n	80010c0 <_puts_r+0x24>
 8001102:	4621      	mov	r1, r4
 8001104:	4628      	mov	r0, r5
 8001106:	f000 f87f 	bl	8001208 <__swsetup_r>
 800110a:	2800      	cmp	r0, #0
 800110c:	d0dd      	beq.n	80010ca <_puts_r+0x2e>
 800110e:	f04f 30ff 	mov.w	r0, #4294967295
 8001112:	bd70      	pop	{r4, r5, r6, pc}
 8001114:	2b00      	cmp	r3, #0
 8001116:	da04      	bge.n	8001122 <_puts_r+0x86>
 8001118:	69a2      	ldr	r2, [r4, #24]
 800111a:	4293      	cmp	r3, r2
 800111c:	db06      	blt.n	800112c <_puts_r+0x90>
 800111e:	290a      	cmp	r1, #10
 8001120:	d004      	beq.n	800112c <_puts_r+0x90>
 8001122:	6823      	ldr	r3, [r4, #0]
 8001124:	1c5a      	adds	r2, r3, #1
 8001126:	6022      	str	r2, [r4, #0]
 8001128:	7019      	strb	r1, [r3, #0]
 800112a:	e7cf      	b.n	80010cc <_puts_r+0x30>
 800112c:	4622      	mov	r2, r4
 800112e:	4628      	mov	r0, r5
 8001130:	f000 f818 	bl	8001164 <__swbuf_r>
 8001134:	3001      	adds	r0, #1
 8001136:	d1c9      	bne.n	80010cc <_puts_r+0x30>
 8001138:	e7e9      	b.n	800110e <_puts_r+0x72>
 800113a:	200a      	movs	r0, #10
 800113c:	6823      	ldr	r3, [r4, #0]
 800113e:	1c5a      	adds	r2, r3, #1
 8001140:	6022      	str	r2, [r4, #0]
 8001142:	7018      	strb	r0, [r3, #0]
 8001144:	bd70      	pop	{r4, r5, r6, pc}
 8001146:	bf00      	nop
 8001148:	08001fd0 	.word	0x08001fd0
 800114c:	08001ff0 	.word	0x08001ff0
 8001150:	08001fb0 	.word	0x08001fb0

08001154 <puts>:
 8001154:	4b02      	ldr	r3, [pc, #8]	; (8001160 <puts+0xc>)
 8001156:	4601      	mov	r1, r0
 8001158:	6818      	ldr	r0, [r3, #0]
 800115a:	f7ff bf9f 	b.w	800109c <_puts_r>
 800115e:	bf00      	nop
 8001160:	2000000c 	.word	0x2000000c

08001164 <__swbuf_r>:
 8001164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001166:	460e      	mov	r6, r1
 8001168:	4614      	mov	r4, r2
 800116a:	4605      	mov	r5, r0
 800116c:	b118      	cbz	r0, 8001176 <__swbuf_r+0x12>
 800116e:	6983      	ldr	r3, [r0, #24]
 8001170:	b90b      	cbnz	r3, 8001176 <__swbuf_r+0x12>
 8001172:	f000 f9a9 	bl	80014c8 <__sinit>
 8001176:	4b21      	ldr	r3, [pc, #132]	; (80011fc <__swbuf_r+0x98>)
 8001178:	429c      	cmp	r4, r3
 800117a:	d12a      	bne.n	80011d2 <__swbuf_r+0x6e>
 800117c:	686c      	ldr	r4, [r5, #4]
 800117e:	69a3      	ldr	r3, [r4, #24]
 8001180:	60a3      	str	r3, [r4, #8]
 8001182:	89a3      	ldrh	r3, [r4, #12]
 8001184:	071a      	lsls	r2, r3, #28
 8001186:	d52e      	bpl.n	80011e6 <__swbuf_r+0x82>
 8001188:	6923      	ldr	r3, [r4, #16]
 800118a:	b363      	cbz	r3, 80011e6 <__swbuf_r+0x82>
 800118c:	6923      	ldr	r3, [r4, #16]
 800118e:	6820      	ldr	r0, [r4, #0]
 8001190:	b2f6      	uxtb	r6, r6
 8001192:	1ac0      	subs	r0, r0, r3
 8001194:	6963      	ldr	r3, [r4, #20]
 8001196:	4637      	mov	r7, r6
 8001198:	4298      	cmp	r0, r3
 800119a:	db04      	blt.n	80011a6 <__swbuf_r+0x42>
 800119c:	4621      	mov	r1, r4
 800119e:	4628      	mov	r0, r5
 80011a0:	f000 f928 	bl	80013f4 <_fflush_r>
 80011a4:	bb28      	cbnz	r0, 80011f2 <__swbuf_r+0x8e>
 80011a6:	68a3      	ldr	r3, [r4, #8]
 80011a8:	3001      	adds	r0, #1
 80011aa:	3b01      	subs	r3, #1
 80011ac:	60a3      	str	r3, [r4, #8]
 80011ae:	6823      	ldr	r3, [r4, #0]
 80011b0:	1c5a      	adds	r2, r3, #1
 80011b2:	6022      	str	r2, [r4, #0]
 80011b4:	701e      	strb	r6, [r3, #0]
 80011b6:	6963      	ldr	r3, [r4, #20]
 80011b8:	4298      	cmp	r0, r3
 80011ba:	d004      	beq.n	80011c6 <__swbuf_r+0x62>
 80011bc:	89a3      	ldrh	r3, [r4, #12]
 80011be:	07db      	lsls	r3, r3, #31
 80011c0:	d519      	bpl.n	80011f6 <__swbuf_r+0x92>
 80011c2:	2e0a      	cmp	r6, #10
 80011c4:	d117      	bne.n	80011f6 <__swbuf_r+0x92>
 80011c6:	4621      	mov	r1, r4
 80011c8:	4628      	mov	r0, r5
 80011ca:	f000 f913 	bl	80013f4 <_fflush_r>
 80011ce:	b190      	cbz	r0, 80011f6 <__swbuf_r+0x92>
 80011d0:	e00f      	b.n	80011f2 <__swbuf_r+0x8e>
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <__swbuf_r+0x9c>)
 80011d4:	429c      	cmp	r4, r3
 80011d6:	d101      	bne.n	80011dc <__swbuf_r+0x78>
 80011d8:	68ac      	ldr	r4, [r5, #8]
 80011da:	e7d0      	b.n	800117e <__swbuf_r+0x1a>
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <__swbuf_r+0xa0>)
 80011de:	429c      	cmp	r4, r3
 80011e0:	bf08      	it	eq
 80011e2:	68ec      	ldreq	r4, [r5, #12]
 80011e4:	e7cb      	b.n	800117e <__swbuf_r+0x1a>
 80011e6:	4621      	mov	r1, r4
 80011e8:	4628      	mov	r0, r5
 80011ea:	f000 f80d 	bl	8001208 <__swsetup_r>
 80011ee:	2800      	cmp	r0, #0
 80011f0:	d0cc      	beq.n	800118c <__swbuf_r+0x28>
 80011f2:	f04f 37ff 	mov.w	r7, #4294967295
 80011f6:	4638      	mov	r0, r7
 80011f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011fa:	bf00      	nop
 80011fc:	08001fd0 	.word	0x08001fd0
 8001200:	08001ff0 	.word	0x08001ff0
 8001204:	08001fb0 	.word	0x08001fb0

08001208 <__swsetup_r>:
 8001208:	4b32      	ldr	r3, [pc, #200]	; (80012d4 <__swsetup_r+0xcc>)
 800120a:	b570      	push	{r4, r5, r6, lr}
 800120c:	681d      	ldr	r5, [r3, #0]
 800120e:	4606      	mov	r6, r0
 8001210:	460c      	mov	r4, r1
 8001212:	b125      	cbz	r5, 800121e <__swsetup_r+0x16>
 8001214:	69ab      	ldr	r3, [r5, #24]
 8001216:	b913      	cbnz	r3, 800121e <__swsetup_r+0x16>
 8001218:	4628      	mov	r0, r5
 800121a:	f000 f955 	bl	80014c8 <__sinit>
 800121e:	4b2e      	ldr	r3, [pc, #184]	; (80012d8 <__swsetup_r+0xd0>)
 8001220:	429c      	cmp	r4, r3
 8001222:	d10f      	bne.n	8001244 <__swsetup_r+0x3c>
 8001224:	686c      	ldr	r4, [r5, #4]
 8001226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800122a:	b29a      	uxth	r2, r3
 800122c:	0715      	lsls	r5, r2, #28
 800122e:	d42c      	bmi.n	800128a <__swsetup_r+0x82>
 8001230:	06d0      	lsls	r0, r2, #27
 8001232:	d411      	bmi.n	8001258 <__swsetup_r+0x50>
 8001234:	2209      	movs	r2, #9
 8001236:	6032      	str	r2, [r6, #0]
 8001238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800123c:	81a3      	strh	r3, [r4, #12]
 800123e:	f04f 30ff 	mov.w	r0, #4294967295
 8001242:	bd70      	pop	{r4, r5, r6, pc}
 8001244:	4b25      	ldr	r3, [pc, #148]	; (80012dc <__swsetup_r+0xd4>)
 8001246:	429c      	cmp	r4, r3
 8001248:	d101      	bne.n	800124e <__swsetup_r+0x46>
 800124a:	68ac      	ldr	r4, [r5, #8]
 800124c:	e7eb      	b.n	8001226 <__swsetup_r+0x1e>
 800124e:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <__swsetup_r+0xd8>)
 8001250:	429c      	cmp	r4, r3
 8001252:	bf08      	it	eq
 8001254:	68ec      	ldreq	r4, [r5, #12]
 8001256:	e7e6      	b.n	8001226 <__swsetup_r+0x1e>
 8001258:	0751      	lsls	r1, r2, #29
 800125a:	d512      	bpl.n	8001282 <__swsetup_r+0x7a>
 800125c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800125e:	b141      	cbz	r1, 8001272 <__swsetup_r+0x6a>
 8001260:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001264:	4299      	cmp	r1, r3
 8001266:	d002      	beq.n	800126e <__swsetup_r+0x66>
 8001268:	4630      	mov	r0, r6
 800126a:	f000 fa1b 	bl	80016a4 <_free_r>
 800126e:	2300      	movs	r3, #0
 8001270:	6363      	str	r3, [r4, #52]	; 0x34
 8001272:	89a3      	ldrh	r3, [r4, #12]
 8001274:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001278:	81a3      	strh	r3, [r4, #12]
 800127a:	2300      	movs	r3, #0
 800127c:	6063      	str	r3, [r4, #4]
 800127e:	6923      	ldr	r3, [r4, #16]
 8001280:	6023      	str	r3, [r4, #0]
 8001282:	89a3      	ldrh	r3, [r4, #12]
 8001284:	f043 0308 	orr.w	r3, r3, #8
 8001288:	81a3      	strh	r3, [r4, #12]
 800128a:	6923      	ldr	r3, [r4, #16]
 800128c:	b94b      	cbnz	r3, 80012a2 <__swsetup_r+0x9a>
 800128e:	89a3      	ldrh	r3, [r4, #12]
 8001290:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001298:	d003      	beq.n	80012a2 <__swsetup_r+0x9a>
 800129a:	4621      	mov	r1, r4
 800129c:	4630      	mov	r0, r6
 800129e:	f000 f9c1 	bl	8001624 <__smakebuf_r>
 80012a2:	89a2      	ldrh	r2, [r4, #12]
 80012a4:	f012 0301 	ands.w	r3, r2, #1
 80012a8:	d00c      	beq.n	80012c4 <__swsetup_r+0xbc>
 80012aa:	2300      	movs	r3, #0
 80012ac:	60a3      	str	r3, [r4, #8]
 80012ae:	6963      	ldr	r3, [r4, #20]
 80012b0:	425b      	negs	r3, r3
 80012b2:	61a3      	str	r3, [r4, #24]
 80012b4:	6923      	ldr	r3, [r4, #16]
 80012b6:	b953      	cbnz	r3, 80012ce <__swsetup_r+0xc6>
 80012b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012bc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80012c0:	d1ba      	bne.n	8001238 <__swsetup_r+0x30>
 80012c2:	bd70      	pop	{r4, r5, r6, pc}
 80012c4:	0792      	lsls	r2, r2, #30
 80012c6:	bf58      	it	pl
 80012c8:	6963      	ldrpl	r3, [r4, #20]
 80012ca:	60a3      	str	r3, [r4, #8]
 80012cc:	e7f2      	b.n	80012b4 <__swsetup_r+0xac>
 80012ce:	2000      	movs	r0, #0
 80012d0:	e7f7      	b.n	80012c2 <__swsetup_r+0xba>
 80012d2:	bf00      	nop
 80012d4:	2000000c 	.word	0x2000000c
 80012d8:	08001fd0 	.word	0x08001fd0
 80012dc:	08001ff0 	.word	0x08001ff0
 80012e0:	08001fb0 	.word	0x08001fb0

080012e4 <__sflush_r>:
 80012e4:	898a      	ldrh	r2, [r1, #12]
 80012e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012ea:	4605      	mov	r5, r0
 80012ec:	0710      	lsls	r0, r2, #28
 80012ee:	460c      	mov	r4, r1
 80012f0:	d45a      	bmi.n	80013a8 <__sflush_r+0xc4>
 80012f2:	684b      	ldr	r3, [r1, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	dc05      	bgt.n	8001304 <__sflush_r+0x20>
 80012f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	dc02      	bgt.n	8001304 <__sflush_r+0x20>
 80012fe:	2000      	movs	r0, #0
 8001300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001304:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001306:	2e00      	cmp	r6, #0
 8001308:	d0f9      	beq.n	80012fe <__sflush_r+0x1a>
 800130a:	2300      	movs	r3, #0
 800130c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001310:	682f      	ldr	r7, [r5, #0]
 8001312:	602b      	str	r3, [r5, #0]
 8001314:	d033      	beq.n	800137e <__sflush_r+0x9a>
 8001316:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001318:	89a3      	ldrh	r3, [r4, #12]
 800131a:	075a      	lsls	r2, r3, #29
 800131c:	d505      	bpl.n	800132a <__sflush_r+0x46>
 800131e:	6863      	ldr	r3, [r4, #4]
 8001320:	1ac0      	subs	r0, r0, r3
 8001322:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001324:	b10b      	cbz	r3, 800132a <__sflush_r+0x46>
 8001326:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001328:	1ac0      	subs	r0, r0, r3
 800132a:	2300      	movs	r3, #0
 800132c:	4602      	mov	r2, r0
 800132e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001330:	6a21      	ldr	r1, [r4, #32]
 8001332:	4628      	mov	r0, r5
 8001334:	47b0      	blx	r6
 8001336:	1c43      	adds	r3, r0, #1
 8001338:	89a3      	ldrh	r3, [r4, #12]
 800133a:	d106      	bne.n	800134a <__sflush_r+0x66>
 800133c:	6829      	ldr	r1, [r5, #0]
 800133e:	291d      	cmp	r1, #29
 8001340:	d84b      	bhi.n	80013da <__sflush_r+0xf6>
 8001342:	4a2b      	ldr	r2, [pc, #172]	; (80013f0 <__sflush_r+0x10c>)
 8001344:	40ca      	lsrs	r2, r1
 8001346:	07d6      	lsls	r6, r2, #31
 8001348:	d547      	bpl.n	80013da <__sflush_r+0xf6>
 800134a:	2200      	movs	r2, #0
 800134c:	6062      	str	r2, [r4, #4]
 800134e:	6922      	ldr	r2, [r4, #16]
 8001350:	04d9      	lsls	r1, r3, #19
 8001352:	6022      	str	r2, [r4, #0]
 8001354:	d504      	bpl.n	8001360 <__sflush_r+0x7c>
 8001356:	1c42      	adds	r2, r0, #1
 8001358:	d101      	bne.n	800135e <__sflush_r+0x7a>
 800135a:	682b      	ldr	r3, [r5, #0]
 800135c:	b903      	cbnz	r3, 8001360 <__sflush_r+0x7c>
 800135e:	6560      	str	r0, [r4, #84]	; 0x54
 8001360:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001362:	602f      	str	r7, [r5, #0]
 8001364:	2900      	cmp	r1, #0
 8001366:	d0ca      	beq.n	80012fe <__sflush_r+0x1a>
 8001368:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800136c:	4299      	cmp	r1, r3
 800136e:	d002      	beq.n	8001376 <__sflush_r+0x92>
 8001370:	4628      	mov	r0, r5
 8001372:	f000 f997 	bl	80016a4 <_free_r>
 8001376:	2000      	movs	r0, #0
 8001378:	6360      	str	r0, [r4, #52]	; 0x34
 800137a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800137e:	6a21      	ldr	r1, [r4, #32]
 8001380:	2301      	movs	r3, #1
 8001382:	4628      	mov	r0, r5
 8001384:	47b0      	blx	r6
 8001386:	1c41      	adds	r1, r0, #1
 8001388:	d1c6      	bne.n	8001318 <__sflush_r+0x34>
 800138a:	682b      	ldr	r3, [r5, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0c3      	beq.n	8001318 <__sflush_r+0x34>
 8001390:	2b1d      	cmp	r3, #29
 8001392:	d001      	beq.n	8001398 <__sflush_r+0xb4>
 8001394:	2b16      	cmp	r3, #22
 8001396:	d101      	bne.n	800139c <__sflush_r+0xb8>
 8001398:	602f      	str	r7, [r5, #0]
 800139a:	e7b0      	b.n	80012fe <__sflush_r+0x1a>
 800139c:	89a3      	ldrh	r3, [r4, #12]
 800139e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013a2:	81a3      	strh	r3, [r4, #12]
 80013a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013a8:	690f      	ldr	r7, [r1, #16]
 80013aa:	2f00      	cmp	r7, #0
 80013ac:	d0a7      	beq.n	80012fe <__sflush_r+0x1a>
 80013ae:	0793      	lsls	r3, r2, #30
 80013b0:	bf18      	it	ne
 80013b2:	2300      	movne	r3, #0
 80013b4:	680e      	ldr	r6, [r1, #0]
 80013b6:	bf08      	it	eq
 80013b8:	694b      	ldreq	r3, [r1, #20]
 80013ba:	eba6 0807 	sub.w	r8, r6, r7
 80013be:	600f      	str	r7, [r1, #0]
 80013c0:	608b      	str	r3, [r1, #8]
 80013c2:	f1b8 0f00 	cmp.w	r8, #0
 80013c6:	dd9a      	ble.n	80012fe <__sflush_r+0x1a>
 80013c8:	4643      	mov	r3, r8
 80013ca:	463a      	mov	r2, r7
 80013cc:	6a21      	ldr	r1, [r4, #32]
 80013ce:	4628      	mov	r0, r5
 80013d0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80013d2:	47b0      	blx	r6
 80013d4:	2800      	cmp	r0, #0
 80013d6:	dc07      	bgt.n	80013e8 <__sflush_r+0x104>
 80013d8:	89a3      	ldrh	r3, [r4, #12]
 80013da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013de:	81a3      	strh	r3, [r4, #12]
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013e8:	4407      	add	r7, r0
 80013ea:	eba8 0800 	sub.w	r8, r8, r0
 80013ee:	e7e8      	b.n	80013c2 <__sflush_r+0xde>
 80013f0:	20400001 	.word	0x20400001

080013f4 <_fflush_r>:
 80013f4:	b538      	push	{r3, r4, r5, lr}
 80013f6:	690b      	ldr	r3, [r1, #16]
 80013f8:	4605      	mov	r5, r0
 80013fa:	460c      	mov	r4, r1
 80013fc:	b1db      	cbz	r3, 8001436 <_fflush_r+0x42>
 80013fe:	b118      	cbz	r0, 8001408 <_fflush_r+0x14>
 8001400:	6983      	ldr	r3, [r0, #24]
 8001402:	b90b      	cbnz	r3, 8001408 <_fflush_r+0x14>
 8001404:	f000 f860 	bl	80014c8 <__sinit>
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <_fflush_r+0x48>)
 800140a:	429c      	cmp	r4, r3
 800140c:	d109      	bne.n	8001422 <_fflush_r+0x2e>
 800140e:	686c      	ldr	r4, [r5, #4]
 8001410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001414:	b17b      	cbz	r3, 8001436 <_fflush_r+0x42>
 8001416:	4621      	mov	r1, r4
 8001418:	4628      	mov	r0, r5
 800141a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800141e:	f7ff bf61 	b.w	80012e4 <__sflush_r>
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <_fflush_r+0x4c>)
 8001424:	429c      	cmp	r4, r3
 8001426:	d101      	bne.n	800142c <_fflush_r+0x38>
 8001428:	68ac      	ldr	r4, [r5, #8]
 800142a:	e7f1      	b.n	8001410 <_fflush_r+0x1c>
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <_fflush_r+0x50>)
 800142e:	429c      	cmp	r4, r3
 8001430:	bf08      	it	eq
 8001432:	68ec      	ldreq	r4, [r5, #12]
 8001434:	e7ec      	b.n	8001410 <_fflush_r+0x1c>
 8001436:	2000      	movs	r0, #0
 8001438:	bd38      	pop	{r3, r4, r5, pc}
 800143a:	bf00      	nop
 800143c:	08001fd0 	.word	0x08001fd0
 8001440:	08001ff0 	.word	0x08001ff0
 8001444:	08001fb0 	.word	0x08001fb0

08001448 <_cleanup_r>:
 8001448:	4901      	ldr	r1, [pc, #4]	; (8001450 <_cleanup_r+0x8>)
 800144a:	f000 b8a9 	b.w	80015a0 <_fwalk_reent>
 800144e:	bf00      	nop
 8001450:	080013f5 	.word	0x080013f5

08001454 <std.isra.0>:
 8001454:	2300      	movs	r3, #0
 8001456:	b510      	push	{r4, lr}
 8001458:	4604      	mov	r4, r0
 800145a:	6003      	str	r3, [r0, #0]
 800145c:	6043      	str	r3, [r0, #4]
 800145e:	6083      	str	r3, [r0, #8]
 8001460:	8181      	strh	r1, [r0, #12]
 8001462:	6643      	str	r3, [r0, #100]	; 0x64
 8001464:	81c2      	strh	r2, [r0, #14]
 8001466:	6103      	str	r3, [r0, #16]
 8001468:	6143      	str	r3, [r0, #20]
 800146a:	6183      	str	r3, [r0, #24]
 800146c:	4619      	mov	r1, r3
 800146e:	2208      	movs	r2, #8
 8001470:	305c      	adds	r0, #92	; 0x5c
 8001472:	f7ff fdf3 	bl	800105c <memset>
 8001476:	4b05      	ldr	r3, [pc, #20]	; (800148c <std.isra.0+0x38>)
 8001478:	6224      	str	r4, [r4, #32]
 800147a:	6263      	str	r3, [r4, #36]	; 0x24
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <std.isra.0+0x3c>)
 800147e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <std.isra.0+0x40>)
 8001482:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <std.isra.0+0x44>)
 8001486:	6323      	str	r3, [r4, #48]	; 0x30
 8001488:	bd10      	pop	{r4, pc}
 800148a:	bf00      	nop
 800148c:	08001dc5 	.word	0x08001dc5
 8001490:	08001de7 	.word	0x08001de7
 8001494:	08001e1f 	.word	0x08001e1f
 8001498:	08001e43 	.word	0x08001e43

0800149c <__sfmoreglue>:
 800149c:	b570      	push	{r4, r5, r6, lr}
 800149e:	2568      	movs	r5, #104	; 0x68
 80014a0:	1e4a      	subs	r2, r1, #1
 80014a2:	4355      	muls	r5, r2
 80014a4:	460e      	mov	r6, r1
 80014a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80014aa:	f000 f947 	bl	800173c <_malloc_r>
 80014ae:	4604      	mov	r4, r0
 80014b0:	b140      	cbz	r0, 80014c4 <__sfmoreglue+0x28>
 80014b2:	2100      	movs	r1, #0
 80014b4:	e880 0042 	stmia.w	r0, {r1, r6}
 80014b8:	300c      	adds	r0, #12
 80014ba:	60a0      	str	r0, [r4, #8]
 80014bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80014c0:	f7ff fdcc 	bl	800105c <memset>
 80014c4:	4620      	mov	r0, r4
 80014c6:	bd70      	pop	{r4, r5, r6, pc}

080014c8 <__sinit>:
 80014c8:	6983      	ldr	r3, [r0, #24]
 80014ca:	b510      	push	{r4, lr}
 80014cc:	4604      	mov	r4, r0
 80014ce:	bb33      	cbnz	r3, 800151e <__sinit+0x56>
 80014d0:	6483      	str	r3, [r0, #72]	; 0x48
 80014d2:	64c3      	str	r3, [r0, #76]	; 0x4c
 80014d4:	6503      	str	r3, [r0, #80]	; 0x50
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <__sinit+0x58>)
 80014d8:	4a12      	ldr	r2, [pc, #72]	; (8001524 <__sinit+0x5c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6282      	str	r2, [r0, #40]	; 0x28
 80014de:	4298      	cmp	r0, r3
 80014e0:	bf04      	itt	eq
 80014e2:	2301      	moveq	r3, #1
 80014e4:	6183      	streq	r3, [r0, #24]
 80014e6:	f000 f81f 	bl	8001528 <__sfp>
 80014ea:	6060      	str	r0, [r4, #4]
 80014ec:	4620      	mov	r0, r4
 80014ee:	f000 f81b 	bl	8001528 <__sfp>
 80014f2:	60a0      	str	r0, [r4, #8]
 80014f4:	4620      	mov	r0, r4
 80014f6:	f000 f817 	bl	8001528 <__sfp>
 80014fa:	2200      	movs	r2, #0
 80014fc:	60e0      	str	r0, [r4, #12]
 80014fe:	2104      	movs	r1, #4
 8001500:	6860      	ldr	r0, [r4, #4]
 8001502:	f7ff ffa7 	bl	8001454 <std.isra.0>
 8001506:	2201      	movs	r2, #1
 8001508:	2109      	movs	r1, #9
 800150a:	68a0      	ldr	r0, [r4, #8]
 800150c:	f7ff ffa2 	bl	8001454 <std.isra.0>
 8001510:	2202      	movs	r2, #2
 8001512:	2112      	movs	r1, #18
 8001514:	68e0      	ldr	r0, [r4, #12]
 8001516:	f7ff ff9d 	bl	8001454 <std.isra.0>
 800151a:	2301      	movs	r3, #1
 800151c:	61a3      	str	r3, [r4, #24]
 800151e:	bd10      	pop	{r4, pc}
 8001520:	08001fac 	.word	0x08001fac
 8001524:	08001449 	.word	0x08001449

08001528 <__sfp>:
 8001528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800152a:	4b1c      	ldr	r3, [pc, #112]	; (800159c <__sfp+0x74>)
 800152c:	4607      	mov	r7, r0
 800152e:	681e      	ldr	r6, [r3, #0]
 8001530:	69b3      	ldr	r3, [r6, #24]
 8001532:	b913      	cbnz	r3, 800153a <__sfp+0x12>
 8001534:	4630      	mov	r0, r6
 8001536:	f7ff ffc7 	bl	80014c8 <__sinit>
 800153a:	3648      	adds	r6, #72	; 0x48
 800153c:	68b4      	ldr	r4, [r6, #8]
 800153e:	6873      	ldr	r3, [r6, #4]
 8001540:	3b01      	subs	r3, #1
 8001542:	d503      	bpl.n	800154c <__sfp+0x24>
 8001544:	6833      	ldr	r3, [r6, #0]
 8001546:	b133      	cbz	r3, 8001556 <__sfp+0x2e>
 8001548:	6836      	ldr	r6, [r6, #0]
 800154a:	e7f7      	b.n	800153c <__sfp+0x14>
 800154c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001550:	b16d      	cbz	r5, 800156e <__sfp+0x46>
 8001552:	3468      	adds	r4, #104	; 0x68
 8001554:	e7f4      	b.n	8001540 <__sfp+0x18>
 8001556:	2104      	movs	r1, #4
 8001558:	4638      	mov	r0, r7
 800155a:	f7ff ff9f 	bl	800149c <__sfmoreglue>
 800155e:	6030      	str	r0, [r6, #0]
 8001560:	2800      	cmp	r0, #0
 8001562:	d1f1      	bne.n	8001548 <__sfp+0x20>
 8001564:	230c      	movs	r3, #12
 8001566:	4604      	mov	r4, r0
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	4620      	mov	r0, r4
 800156c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800156e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001572:	81e3      	strh	r3, [r4, #14]
 8001574:	2301      	movs	r3, #1
 8001576:	6665      	str	r5, [r4, #100]	; 0x64
 8001578:	81a3      	strh	r3, [r4, #12]
 800157a:	6025      	str	r5, [r4, #0]
 800157c:	60a5      	str	r5, [r4, #8]
 800157e:	6065      	str	r5, [r4, #4]
 8001580:	6125      	str	r5, [r4, #16]
 8001582:	6165      	str	r5, [r4, #20]
 8001584:	61a5      	str	r5, [r4, #24]
 8001586:	2208      	movs	r2, #8
 8001588:	4629      	mov	r1, r5
 800158a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800158e:	f7ff fd65 	bl	800105c <memset>
 8001592:	6365      	str	r5, [r4, #52]	; 0x34
 8001594:	63a5      	str	r5, [r4, #56]	; 0x38
 8001596:	64a5      	str	r5, [r4, #72]	; 0x48
 8001598:	64e5      	str	r5, [r4, #76]	; 0x4c
 800159a:	e7e6      	b.n	800156a <__sfp+0x42>
 800159c:	08001fac 	.word	0x08001fac

080015a0 <_fwalk_reent>:
 80015a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015a4:	4680      	mov	r8, r0
 80015a6:	4689      	mov	r9, r1
 80015a8:	2600      	movs	r6, #0
 80015aa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80015ae:	b914      	cbnz	r4, 80015b6 <_fwalk_reent+0x16>
 80015b0:	4630      	mov	r0, r6
 80015b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80015b6:	68a5      	ldr	r5, [r4, #8]
 80015b8:	6867      	ldr	r7, [r4, #4]
 80015ba:	3f01      	subs	r7, #1
 80015bc:	d501      	bpl.n	80015c2 <_fwalk_reent+0x22>
 80015be:	6824      	ldr	r4, [r4, #0]
 80015c0:	e7f5      	b.n	80015ae <_fwalk_reent+0xe>
 80015c2:	89ab      	ldrh	r3, [r5, #12]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d907      	bls.n	80015d8 <_fwalk_reent+0x38>
 80015c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80015cc:	3301      	adds	r3, #1
 80015ce:	d003      	beq.n	80015d8 <_fwalk_reent+0x38>
 80015d0:	4629      	mov	r1, r5
 80015d2:	4640      	mov	r0, r8
 80015d4:	47c8      	blx	r9
 80015d6:	4306      	orrs	r6, r0
 80015d8:	3568      	adds	r5, #104	; 0x68
 80015da:	e7ee      	b.n	80015ba <_fwalk_reent+0x1a>

080015dc <__swhatbuf_r>:
 80015dc:	b570      	push	{r4, r5, r6, lr}
 80015de:	460e      	mov	r6, r1
 80015e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015e4:	b090      	sub	sp, #64	; 0x40
 80015e6:	2900      	cmp	r1, #0
 80015e8:	4614      	mov	r4, r2
 80015ea:	461d      	mov	r5, r3
 80015ec:	da07      	bge.n	80015fe <__swhatbuf_r+0x22>
 80015ee:	2300      	movs	r3, #0
 80015f0:	602b      	str	r3, [r5, #0]
 80015f2:	89b3      	ldrh	r3, [r6, #12]
 80015f4:	061a      	lsls	r2, r3, #24
 80015f6:	d410      	bmi.n	800161a <__swhatbuf_r+0x3e>
 80015f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015fc:	e00e      	b.n	800161c <__swhatbuf_r+0x40>
 80015fe:	aa01      	add	r2, sp, #4
 8001600:	f000 fc46 	bl	8001e90 <_fstat_r>
 8001604:	2800      	cmp	r0, #0
 8001606:	dbf2      	blt.n	80015ee <__swhatbuf_r+0x12>
 8001608:	9a02      	ldr	r2, [sp, #8]
 800160a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800160e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001612:	425a      	negs	r2, r3
 8001614:	415a      	adcs	r2, r3
 8001616:	602a      	str	r2, [r5, #0]
 8001618:	e7ee      	b.n	80015f8 <__swhatbuf_r+0x1c>
 800161a:	2340      	movs	r3, #64	; 0x40
 800161c:	2000      	movs	r0, #0
 800161e:	6023      	str	r3, [r4, #0]
 8001620:	b010      	add	sp, #64	; 0x40
 8001622:	bd70      	pop	{r4, r5, r6, pc}

08001624 <__smakebuf_r>:
 8001624:	898b      	ldrh	r3, [r1, #12]
 8001626:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001628:	079d      	lsls	r5, r3, #30
 800162a:	4606      	mov	r6, r0
 800162c:	460c      	mov	r4, r1
 800162e:	d507      	bpl.n	8001640 <__smakebuf_r+0x1c>
 8001630:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001634:	6023      	str	r3, [r4, #0]
 8001636:	6123      	str	r3, [r4, #16]
 8001638:	2301      	movs	r3, #1
 800163a:	6163      	str	r3, [r4, #20]
 800163c:	b002      	add	sp, #8
 800163e:	bd70      	pop	{r4, r5, r6, pc}
 8001640:	ab01      	add	r3, sp, #4
 8001642:	466a      	mov	r2, sp
 8001644:	f7ff ffca 	bl	80015dc <__swhatbuf_r>
 8001648:	9900      	ldr	r1, [sp, #0]
 800164a:	4605      	mov	r5, r0
 800164c:	4630      	mov	r0, r6
 800164e:	f000 f875 	bl	800173c <_malloc_r>
 8001652:	b948      	cbnz	r0, 8001668 <__smakebuf_r+0x44>
 8001654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001658:	059a      	lsls	r2, r3, #22
 800165a:	d4ef      	bmi.n	800163c <__smakebuf_r+0x18>
 800165c:	f023 0303 	bic.w	r3, r3, #3
 8001660:	f043 0302 	orr.w	r3, r3, #2
 8001664:	81a3      	strh	r3, [r4, #12]
 8001666:	e7e3      	b.n	8001630 <__smakebuf_r+0xc>
 8001668:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <__smakebuf_r+0x7c>)
 800166a:	62b3      	str	r3, [r6, #40]	; 0x28
 800166c:	89a3      	ldrh	r3, [r4, #12]
 800166e:	6020      	str	r0, [r4, #0]
 8001670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001674:	81a3      	strh	r3, [r4, #12]
 8001676:	9b00      	ldr	r3, [sp, #0]
 8001678:	6120      	str	r0, [r4, #16]
 800167a:	6163      	str	r3, [r4, #20]
 800167c:	9b01      	ldr	r3, [sp, #4]
 800167e:	b15b      	cbz	r3, 8001698 <__smakebuf_r+0x74>
 8001680:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001684:	4630      	mov	r0, r6
 8001686:	f000 fc15 	bl	8001eb4 <_isatty_r>
 800168a:	b128      	cbz	r0, 8001698 <__smakebuf_r+0x74>
 800168c:	89a3      	ldrh	r3, [r4, #12]
 800168e:	f023 0303 	bic.w	r3, r3, #3
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	81a3      	strh	r3, [r4, #12]
 8001698:	89a3      	ldrh	r3, [r4, #12]
 800169a:	431d      	orrs	r5, r3
 800169c:	81a5      	strh	r5, [r4, #12]
 800169e:	e7cd      	b.n	800163c <__smakebuf_r+0x18>
 80016a0:	08001449 	.word	0x08001449

080016a4 <_free_r>:
 80016a4:	b538      	push	{r3, r4, r5, lr}
 80016a6:	4605      	mov	r5, r0
 80016a8:	2900      	cmp	r1, #0
 80016aa:	d043      	beq.n	8001734 <_free_r+0x90>
 80016ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016b0:	1f0c      	subs	r4, r1, #4
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	bfb8      	it	lt
 80016b6:	18e4      	addlt	r4, r4, r3
 80016b8:	f000 fc2c 	bl	8001f14 <__malloc_lock>
 80016bc:	4a1e      	ldr	r2, [pc, #120]	; (8001738 <_free_r+0x94>)
 80016be:	6813      	ldr	r3, [r2, #0]
 80016c0:	4610      	mov	r0, r2
 80016c2:	b933      	cbnz	r3, 80016d2 <_free_r+0x2e>
 80016c4:	6063      	str	r3, [r4, #4]
 80016c6:	6014      	str	r4, [r2, #0]
 80016c8:	4628      	mov	r0, r5
 80016ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016ce:	f000 bc22 	b.w	8001f16 <__malloc_unlock>
 80016d2:	42a3      	cmp	r3, r4
 80016d4:	d90b      	bls.n	80016ee <_free_r+0x4a>
 80016d6:	6821      	ldr	r1, [r4, #0]
 80016d8:	1862      	adds	r2, r4, r1
 80016da:	4293      	cmp	r3, r2
 80016dc:	bf01      	itttt	eq
 80016de:	681a      	ldreq	r2, [r3, #0]
 80016e0:	685b      	ldreq	r3, [r3, #4]
 80016e2:	1852      	addeq	r2, r2, r1
 80016e4:	6022      	streq	r2, [r4, #0]
 80016e6:	6063      	str	r3, [r4, #4]
 80016e8:	6004      	str	r4, [r0, #0]
 80016ea:	e7ed      	b.n	80016c8 <_free_r+0x24>
 80016ec:	4613      	mov	r3, r2
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	b10a      	cbz	r2, 80016f6 <_free_r+0x52>
 80016f2:	42a2      	cmp	r2, r4
 80016f4:	d9fa      	bls.n	80016ec <_free_r+0x48>
 80016f6:	6819      	ldr	r1, [r3, #0]
 80016f8:	1858      	adds	r0, r3, r1
 80016fa:	42a0      	cmp	r0, r4
 80016fc:	d10b      	bne.n	8001716 <_free_r+0x72>
 80016fe:	6820      	ldr	r0, [r4, #0]
 8001700:	4401      	add	r1, r0
 8001702:	1858      	adds	r0, r3, r1
 8001704:	4282      	cmp	r2, r0
 8001706:	6019      	str	r1, [r3, #0]
 8001708:	d1de      	bne.n	80016c8 <_free_r+0x24>
 800170a:	6810      	ldr	r0, [r2, #0]
 800170c:	6852      	ldr	r2, [r2, #4]
 800170e:	4401      	add	r1, r0
 8001710:	6019      	str	r1, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	e7d8      	b.n	80016c8 <_free_r+0x24>
 8001716:	d902      	bls.n	800171e <_free_r+0x7a>
 8001718:	230c      	movs	r3, #12
 800171a:	602b      	str	r3, [r5, #0]
 800171c:	e7d4      	b.n	80016c8 <_free_r+0x24>
 800171e:	6820      	ldr	r0, [r4, #0]
 8001720:	1821      	adds	r1, r4, r0
 8001722:	428a      	cmp	r2, r1
 8001724:	bf01      	itttt	eq
 8001726:	6811      	ldreq	r1, [r2, #0]
 8001728:	6852      	ldreq	r2, [r2, #4]
 800172a:	1809      	addeq	r1, r1, r0
 800172c:	6021      	streq	r1, [r4, #0]
 800172e:	6062      	str	r2, [r4, #4]
 8001730:	605c      	str	r4, [r3, #4]
 8001732:	e7c9      	b.n	80016c8 <_free_r+0x24>
 8001734:	bd38      	pop	{r3, r4, r5, pc}
 8001736:	bf00      	nop
 8001738:	20000090 	.word	0x20000090

0800173c <_malloc_r>:
 800173c:	b570      	push	{r4, r5, r6, lr}
 800173e:	1ccd      	adds	r5, r1, #3
 8001740:	f025 0503 	bic.w	r5, r5, #3
 8001744:	3508      	adds	r5, #8
 8001746:	2d0c      	cmp	r5, #12
 8001748:	bf38      	it	cc
 800174a:	250c      	movcc	r5, #12
 800174c:	2d00      	cmp	r5, #0
 800174e:	4606      	mov	r6, r0
 8001750:	db01      	blt.n	8001756 <_malloc_r+0x1a>
 8001752:	42a9      	cmp	r1, r5
 8001754:	d903      	bls.n	800175e <_malloc_r+0x22>
 8001756:	230c      	movs	r3, #12
 8001758:	6033      	str	r3, [r6, #0]
 800175a:	2000      	movs	r0, #0
 800175c:	bd70      	pop	{r4, r5, r6, pc}
 800175e:	f000 fbd9 	bl	8001f14 <__malloc_lock>
 8001762:	4a23      	ldr	r2, [pc, #140]	; (80017f0 <_malloc_r+0xb4>)
 8001764:	6814      	ldr	r4, [r2, #0]
 8001766:	4621      	mov	r1, r4
 8001768:	b991      	cbnz	r1, 8001790 <_malloc_r+0x54>
 800176a:	4c22      	ldr	r4, [pc, #136]	; (80017f4 <_malloc_r+0xb8>)
 800176c:	6823      	ldr	r3, [r4, #0]
 800176e:	b91b      	cbnz	r3, 8001778 <_malloc_r+0x3c>
 8001770:	4630      	mov	r0, r6
 8001772:	f000 fb17 	bl	8001da4 <_sbrk_r>
 8001776:	6020      	str	r0, [r4, #0]
 8001778:	4629      	mov	r1, r5
 800177a:	4630      	mov	r0, r6
 800177c:	f000 fb12 	bl	8001da4 <_sbrk_r>
 8001780:	1c43      	adds	r3, r0, #1
 8001782:	d126      	bne.n	80017d2 <_malloc_r+0x96>
 8001784:	230c      	movs	r3, #12
 8001786:	4630      	mov	r0, r6
 8001788:	6033      	str	r3, [r6, #0]
 800178a:	f000 fbc4 	bl	8001f16 <__malloc_unlock>
 800178e:	e7e4      	b.n	800175a <_malloc_r+0x1e>
 8001790:	680b      	ldr	r3, [r1, #0]
 8001792:	1b5b      	subs	r3, r3, r5
 8001794:	d41a      	bmi.n	80017cc <_malloc_r+0x90>
 8001796:	2b0b      	cmp	r3, #11
 8001798:	d90f      	bls.n	80017ba <_malloc_r+0x7e>
 800179a:	600b      	str	r3, [r1, #0]
 800179c:	18cc      	adds	r4, r1, r3
 800179e:	50cd      	str	r5, [r1, r3]
 80017a0:	4630      	mov	r0, r6
 80017a2:	f000 fbb8 	bl	8001f16 <__malloc_unlock>
 80017a6:	f104 000b 	add.w	r0, r4, #11
 80017aa:	1d23      	adds	r3, r4, #4
 80017ac:	f020 0007 	bic.w	r0, r0, #7
 80017b0:	1ac3      	subs	r3, r0, r3
 80017b2:	d01b      	beq.n	80017ec <_malloc_r+0xb0>
 80017b4:	425a      	negs	r2, r3
 80017b6:	50e2      	str	r2, [r4, r3]
 80017b8:	bd70      	pop	{r4, r5, r6, pc}
 80017ba:	428c      	cmp	r4, r1
 80017bc:	bf0b      	itete	eq
 80017be:	6863      	ldreq	r3, [r4, #4]
 80017c0:	684b      	ldrne	r3, [r1, #4]
 80017c2:	6013      	streq	r3, [r2, #0]
 80017c4:	6063      	strne	r3, [r4, #4]
 80017c6:	bf18      	it	ne
 80017c8:	460c      	movne	r4, r1
 80017ca:	e7e9      	b.n	80017a0 <_malloc_r+0x64>
 80017cc:	460c      	mov	r4, r1
 80017ce:	6849      	ldr	r1, [r1, #4]
 80017d0:	e7ca      	b.n	8001768 <_malloc_r+0x2c>
 80017d2:	1cc4      	adds	r4, r0, #3
 80017d4:	f024 0403 	bic.w	r4, r4, #3
 80017d8:	42a0      	cmp	r0, r4
 80017da:	d005      	beq.n	80017e8 <_malloc_r+0xac>
 80017dc:	1a21      	subs	r1, r4, r0
 80017de:	4630      	mov	r0, r6
 80017e0:	f000 fae0 	bl	8001da4 <_sbrk_r>
 80017e4:	3001      	adds	r0, #1
 80017e6:	d0cd      	beq.n	8001784 <_malloc_r+0x48>
 80017e8:	6025      	str	r5, [r4, #0]
 80017ea:	e7d9      	b.n	80017a0 <_malloc_r+0x64>
 80017ec:	bd70      	pop	{r4, r5, r6, pc}
 80017ee:	bf00      	nop
 80017f0:	20000090 	.word	0x20000090
 80017f4:	20000094 	.word	0x20000094

080017f8 <__sfputc_r>:
 80017f8:	6893      	ldr	r3, [r2, #8]
 80017fa:	b410      	push	{r4}
 80017fc:	3b01      	subs	r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	6093      	str	r3, [r2, #8]
 8001802:	da08      	bge.n	8001816 <__sfputc_r+0x1e>
 8001804:	6994      	ldr	r4, [r2, #24]
 8001806:	42a3      	cmp	r3, r4
 8001808:	db02      	blt.n	8001810 <__sfputc_r+0x18>
 800180a:	b2cb      	uxtb	r3, r1
 800180c:	2b0a      	cmp	r3, #10
 800180e:	d102      	bne.n	8001816 <__sfputc_r+0x1e>
 8001810:	bc10      	pop	{r4}
 8001812:	f7ff bca7 	b.w	8001164 <__swbuf_r>
 8001816:	6813      	ldr	r3, [r2, #0]
 8001818:	1c58      	adds	r0, r3, #1
 800181a:	6010      	str	r0, [r2, #0]
 800181c:	7019      	strb	r1, [r3, #0]
 800181e:	b2c8      	uxtb	r0, r1
 8001820:	bc10      	pop	{r4}
 8001822:	4770      	bx	lr

08001824 <__sfputs_r>:
 8001824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001826:	4606      	mov	r6, r0
 8001828:	460f      	mov	r7, r1
 800182a:	4614      	mov	r4, r2
 800182c:	18d5      	adds	r5, r2, r3
 800182e:	42ac      	cmp	r4, r5
 8001830:	d101      	bne.n	8001836 <__sfputs_r+0x12>
 8001832:	2000      	movs	r0, #0
 8001834:	e007      	b.n	8001846 <__sfputs_r+0x22>
 8001836:	463a      	mov	r2, r7
 8001838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800183c:	4630      	mov	r0, r6
 800183e:	f7ff ffdb 	bl	80017f8 <__sfputc_r>
 8001842:	1c43      	adds	r3, r0, #1
 8001844:	d1f3      	bne.n	800182e <__sfputs_r+0xa>
 8001846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001848 <_vfiprintf_r>:
 8001848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800184c:	b09d      	sub	sp, #116	; 0x74
 800184e:	460c      	mov	r4, r1
 8001850:	4617      	mov	r7, r2
 8001852:	9303      	str	r3, [sp, #12]
 8001854:	4606      	mov	r6, r0
 8001856:	b118      	cbz	r0, 8001860 <_vfiprintf_r+0x18>
 8001858:	6983      	ldr	r3, [r0, #24]
 800185a:	b90b      	cbnz	r3, 8001860 <_vfiprintf_r+0x18>
 800185c:	f7ff fe34 	bl	80014c8 <__sinit>
 8001860:	4b7c      	ldr	r3, [pc, #496]	; (8001a54 <_vfiprintf_r+0x20c>)
 8001862:	429c      	cmp	r4, r3
 8001864:	d157      	bne.n	8001916 <_vfiprintf_r+0xce>
 8001866:	6874      	ldr	r4, [r6, #4]
 8001868:	89a3      	ldrh	r3, [r4, #12]
 800186a:	0718      	lsls	r0, r3, #28
 800186c:	d55d      	bpl.n	800192a <_vfiprintf_r+0xe2>
 800186e:	6923      	ldr	r3, [r4, #16]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d05a      	beq.n	800192a <_vfiprintf_r+0xe2>
 8001874:	2300      	movs	r3, #0
 8001876:	9309      	str	r3, [sp, #36]	; 0x24
 8001878:	2320      	movs	r3, #32
 800187a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800187e:	2330      	movs	r3, #48	; 0x30
 8001880:	f04f 0b01 	mov.w	fp, #1
 8001884:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001888:	46b8      	mov	r8, r7
 800188a:	4645      	mov	r5, r8
 800188c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	d155      	bne.n	8001940 <_vfiprintf_r+0xf8>
 8001894:	ebb8 0a07 	subs.w	sl, r8, r7
 8001898:	d00b      	beq.n	80018b2 <_vfiprintf_r+0x6a>
 800189a:	4653      	mov	r3, sl
 800189c:	463a      	mov	r2, r7
 800189e:	4621      	mov	r1, r4
 80018a0:	4630      	mov	r0, r6
 80018a2:	f7ff ffbf 	bl	8001824 <__sfputs_r>
 80018a6:	3001      	adds	r0, #1
 80018a8:	f000 80c4 	beq.w	8001a34 <_vfiprintf_r+0x1ec>
 80018ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018ae:	4453      	add	r3, sl
 80018b0:	9309      	str	r3, [sp, #36]	; 0x24
 80018b2:	f898 3000 	ldrb.w	r3, [r8]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 80bc 	beq.w	8001a34 <_vfiprintf_r+0x1ec>
 80018bc:	2300      	movs	r3, #0
 80018be:	f04f 32ff 	mov.w	r2, #4294967295
 80018c2:	9304      	str	r3, [sp, #16]
 80018c4:	9307      	str	r3, [sp, #28]
 80018c6:	9205      	str	r2, [sp, #20]
 80018c8:	9306      	str	r3, [sp, #24]
 80018ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80018ce:	931a      	str	r3, [sp, #104]	; 0x68
 80018d0:	2205      	movs	r2, #5
 80018d2:	7829      	ldrb	r1, [r5, #0]
 80018d4:	4860      	ldr	r0, [pc, #384]	; (8001a58 <_vfiprintf_r+0x210>)
 80018d6:	f000 fb0f 	bl	8001ef8 <memchr>
 80018da:	f105 0801 	add.w	r8, r5, #1
 80018de:	9b04      	ldr	r3, [sp, #16]
 80018e0:	2800      	cmp	r0, #0
 80018e2:	d131      	bne.n	8001948 <_vfiprintf_r+0x100>
 80018e4:	06d9      	lsls	r1, r3, #27
 80018e6:	bf44      	itt	mi
 80018e8:	2220      	movmi	r2, #32
 80018ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80018ee:	071a      	lsls	r2, r3, #28
 80018f0:	bf44      	itt	mi
 80018f2:	222b      	movmi	r2, #43	; 0x2b
 80018f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80018f8:	782a      	ldrb	r2, [r5, #0]
 80018fa:	2a2a      	cmp	r2, #42	; 0x2a
 80018fc:	d02c      	beq.n	8001958 <_vfiprintf_r+0x110>
 80018fe:	2100      	movs	r1, #0
 8001900:	200a      	movs	r0, #10
 8001902:	9a07      	ldr	r2, [sp, #28]
 8001904:	46a8      	mov	r8, r5
 8001906:	f898 3000 	ldrb.w	r3, [r8]
 800190a:	3501      	adds	r5, #1
 800190c:	3b30      	subs	r3, #48	; 0x30
 800190e:	2b09      	cmp	r3, #9
 8001910:	d96d      	bls.n	80019ee <_vfiprintf_r+0x1a6>
 8001912:	b371      	cbz	r1, 8001972 <_vfiprintf_r+0x12a>
 8001914:	e026      	b.n	8001964 <_vfiprintf_r+0x11c>
 8001916:	4b51      	ldr	r3, [pc, #324]	; (8001a5c <_vfiprintf_r+0x214>)
 8001918:	429c      	cmp	r4, r3
 800191a:	d101      	bne.n	8001920 <_vfiprintf_r+0xd8>
 800191c:	68b4      	ldr	r4, [r6, #8]
 800191e:	e7a3      	b.n	8001868 <_vfiprintf_r+0x20>
 8001920:	4b4f      	ldr	r3, [pc, #316]	; (8001a60 <_vfiprintf_r+0x218>)
 8001922:	429c      	cmp	r4, r3
 8001924:	bf08      	it	eq
 8001926:	68f4      	ldreq	r4, [r6, #12]
 8001928:	e79e      	b.n	8001868 <_vfiprintf_r+0x20>
 800192a:	4621      	mov	r1, r4
 800192c:	4630      	mov	r0, r6
 800192e:	f7ff fc6b 	bl	8001208 <__swsetup_r>
 8001932:	2800      	cmp	r0, #0
 8001934:	d09e      	beq.n	8001874 <_vfiprintf_r+0x2c>
 8001936:	f04f 30ff 	mov.w	r0, #4294967295
 800193a:	b01d      	add	sp, #116	; 0x74
 800193c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001940:	2b25      	cmp	r3, #37	; 0x25
 8001942:	d0a7      	beq.n	8001894 <_vfiprintf_r+0x4c>
 8001944:	46a8      	mov	r8, r5
 8001946:	e7a0      	b.n	800188a <_vfiprintf_r+0x42>
 8001948:	4a43      	ldr	r2, [pc, #268]	; (8001a58 <_vfiprintf_r+0x210>)
 800194a:	4645      	mov	r5, r8
 800194c:	1a80      	subs	r0, r0, r2
 800194e:	fa0b f000 	lsl.w	r0, fp, r0
 8001952:	4318      	orrs	r0, r3
 8001954:	9004      	str	r0, [sp, #16]
 8001956:	e7bb      	b.n	80018d0 <_vfiprintf_r+0x88>
 8001958:	9a03      	ldr	r2, [sp, #12]
 800195a:	1d11      	adds	r1, r2, #4
 800195c:	6812      	ldr	r2, [r2, #0]
 800195e:	9103      	str	r1, [sp, #12]
 8001960:	2a00      	cmp	r2, #0
 8001962:	db01      	blt.n	8001968 <_vfiprintf_r+0x120>
 8001964:	9207      	str	r2, [sp, #28]
 8001966:	e004      	b.n	8001972 <_vfiprintf_r+0x12a>
 8001968:	4252      	negs	r2, r2
 800196a:	f043 0302 	orr.w	r3, r3, #2
 800196e:	9207      	str	r2, [sp, #28]
 8001970:	9304      	str	r3, [sp, #16]
 8001972:	f898 3000 	ldrb.w	r3, [r8]
 8001976:	2b2e      	cmp	r3, #46	; 0x2e
 8001978:	d110      	bne.n	800199c <_vfiprintf_r+0x154>
 800197a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800197e:	f108 0101 	add.w	r1, r8, #1
 8001982:	2b2a      	cmp	r3, #42	; 0x2a
 8001984:	d137      	bne.n	80019f6 <_vfiprintf_r+0x1ae>
 8001986:	9b03      	ldr	r3, [sp, #12]
 8001988:	f108 0802 	add.w	r8, r8, #2
 800198c:	1d1a      	adds	r2, r3, #4
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	9203      	str	r2, [sp, #12]
 8001992:	2b00      	cmp	r3, #0
 8001994:	bfb8      	it	lt
 8001996:	f04f 33ff 	movlt.w	r3, #4294967295
 800199a:	9305      	str	r3, [sp, #20]
 800199c:	4d31      	ldr	r5, [pc, #196]	; (8001a64 <_vfiprintf_r+0x21c>)
 800199e:	2203      	movs	r2, #3
 80019a0:	f898 1000 	ldrb.w	r1, [r8]
 80019a4:	4628      	mov	r0, r5
 80019a6:	f000 faa7 	bl	8001ef8 <memchr>
 80019aa:	b140      	cbz	r0, 80019be <_vfiprintf_r+0x176>
 80019ac:	2340      	movs	r3, #64	; 0x40
 80019ae:	1b40      	subs	r0, r0, r5
 80019b0:	fa03 f000 	lsl.w	r0, r3, r0
 80019b4:	9b04      	ldr	r3, [sp, #16]
 80019b6:	f108 0801 	add.w	r8, r8, #1
 80019ba:	4303      	orrs	r3, r0
 80019bc:	9304      	str	r3, [sp, #16]
 80019be:	f898 1000 	ldrb.w	r1, [r8]
 80019c2:	2206      	movs	r2, #6
 80019c4:	4828      	ldr	r0, [pc, #160]	; (8001a68 <_vfiprintf_r+0x220>)
 80019c6:	f108 0701 	add.w	r7, r8, #1
 80019ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80019ce:	f000 fa93 	bl	8001ef8 <memchr>
 80019d2:	2800      	cmp	r0, #0
 80019d4:	d034      	beq.n	8001a40 <_vfiprintf_r+0x1f8>
 80019d6:	4b25      	ldr	r3, [pc, #148]	; (8001a6c <_vfiprintf_r+0x224>)
 80019d8:	bb03      	cbnz	r3, 8001a1c <_vfiprintf_r+0x1d4>
 80019da:	9b03      	ldr	r3, [sp, #12]
 80019dc:	3307      	adds	r3, #7
 80019de:	f023 0307 	bic.w	r3, r3, #7
 80019e2:	3308      	adds	r3, #8
 80019e4:	9303      	str	r3, [sp, #12]
 80019e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019e8:	444b      	add	r3, r9
 80019ea:	9309      	str	r3, [sp, #36]	; 0x24
 80019ec:	e74c      	b.n	8001888 <_vfiprintf_r+0x40>
 80019ee:	fb00 3202 	mla	r2, r0, r2, r3
 80019f2:	2101      	movs	r1, #1
 80019f4:	e786      	b.n	8001904 <_vfiprintf_r+0xbc>
 80019f6:	2300      	movs	r3, #0
 80019f8:	250a      	movs	r5, #10
 80019fa:	4618      	mov	r0, r3
 80019fc:	9305      	str	r3, [sp, #20]
 80019fe:	4688      	mov	r8, r1
 8001a00:	f898 2000 	ldrb.w	r2, [r8]
 8001a04:	3101      	adds	r1, #1
 8001a06:	3a30      	subs	r2, #48	; 0x30
 8001a08:	2a09      	cmp	r2, #9
 8001a0a:	d903      	bls.n	8001a14 <_vfiprintf_r+0x1cc>
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0c5      	beq.n	800199c <_vfiprintf_r+0x154>
 8001a10:	9005      	str	r0, [sp, #20]
 8001a12:	e7c3      	b.n	800199c <_vfiprintf_r+0x154>
 8001a14:	fb05 2000 	mla	r0, r5, r0, r2
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e7f0      	b.n	80019fe <_vfiprintf_r+0x1b6>
 8001a1c:	ab03      	add	r3, sp, #12
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	4622      	mov	r2, r4
 8001a22:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <_vfiprintf_r+0x228>)
 8001a24:	a904      	add	r1, sp, #16
 8001a26:	4630      	mov	r0, r6
 8001a28:	f3af 8000 	nop.w
 8001a2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001a30:	4681      	mov	r9, r0
 8001a32:	d1d8      	bne.n	80019e6 <_vfiprintf_r+0x19e>
 8001a34:	89a3      	ldrh	r3, [r4, #12]
 8001a36:	065b      	lsls	r3, r3, #25
 8001a38:	f53f af7d 	bmi.w	8001936 <_vfiprintf_r+0xee>
 8001a3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a3e:	e77c      	b.n	800193a <_vfiprintf_r+0xf2>
 8001a40:	ab03      	add	r3, sp, #12
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	4622      	mov	r2, r4
 8001a46:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <_vfiprintf_r+0x228>)
 8001a48:	a904      	add	r1, sp, #16
 8001a4a:	4630      	mov	r0, r6
 8001a4c:	f000 f88a 	bl	8001b64 <_printf_i>
 8001a50:	e7ec      	b.n	8001a2c <_vfiprintf_r+0x1e4>
 8001a52:	bf00      	nop
 8001a54:	08001fd0 	.word	0x08001fd0
 8001a58:	08002010 	.word	0x08002010
 8001a5c:	08001ff0 	.word	0x08001ff0
 8001a60:	08001fb0 	.word	0x08001fb0
 8001a64:	08002016 	.word	0x08002016
 8001a68:	0800201a 	.word	0x0800201a
 8001a6c:	00000000 	.word	0x00000000
 8001a70:	08001825 	.word	0x08001825

08001a74 <_printf_common>:
 8001a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a78:	4691      	mov	r9, r2
 8001a7a:	461f      	mov	r7, r3
 8001a7c:	688a      	ldr	r2, [r1, #8]
 8001a7e:	690b      	ldr	r3, [r1, #16]
 8001a80:	4606      	mov	r6, r0
 8001a82:	4293      	cmp	r3, r2
 8001a84:	bfb8      	it	lt
 8001a86:	4613      	movlt	r3, r2
 8001a88:	f8c9 3000 	str.w	r3, [r9]
 8001a8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001a90:	460c      	mov	r4, r1
 8001a92:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001a96:	b112      	cbz	r2, 8001a9e <_printf_common+0x2a>
 8001a98:	3301      	adds	r3, #1
 8001a9a:	f8c9 3000 	str.w	r3, [r9]
 8001a9e:	6823      	ldr	r3, [r4, #0]
 8001aa0:	0699      	lsls	r1, r3, #26
 8001aa2:	bf42      	ittt	mi
 8001aa4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001aa8:	3302      	addmi	r3, #2
 8001aaa:	f8c9 3000 	strmi.w	r3, [r9]
 8001aae:	6825      	ldr	r5, [r4, #0]
 8001ab0:	f015 0506 	ands.w	r5, r5, #6
 8001ab4:	d107      	bne.n	8001ac6 <_printf_common+0x52>
 8001ab6:	f104 0a19 	add.w	sl, r4, #25
 8001aba:	68e3      	ldr	r3, [r4, #12]
 8001abc:	f8d9 2000 	ldr.w	r2, [r9]
 8001ac0:	1a9b      	subs	r3, r3, r2
 8001ac2:	429d      	cmp	r5, r3
 8001ac4:	db2a      	blt.n	8001b1c <_printf_common+0xa8>
 8001ac6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001aca:	6822      	ldr	r2, [r4, #0]
 8001acc:	3300      	adds	r3, #0
 8001ace:	bf18      	it	ne
 8001ad0:	2301      	movne	r3, #1
 8001ad2:	0692      	lsls	r2, r2, #26
 8001ad4:	d42f      	bmi.n	8001b36 <_printf_common+0xc2>
 8001ad6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ada:	4639      	mov	r1, r7
 8001adc:	4630      	mov	r0, r6
 8001ade:	47c0      	blx	r8
 8001ae0:	3001      	adds	r0, #1
 8001ae2:	d022      	beq.n	8001b2a <_printf_common+0xb6>
 8001ae4:	6823      	ldr	r3, [r4, #0]
 8001ae6:	68e5      	ldr	r5, [r4, #12]
 8001ae8:	f003 0306 	and.w	r3, r3, #6
 8001aec:	2b04      	cmp	r3, #4
 8001aee:	bf18      	it	ne
 8001af0:	2500      	movne	r5, #0
 8001af2:	f8d9 2000 	ldr.w	r2, [r9]
 8001af6:	f04f 0900 	mov.w	r9, #0
 8001afa:	bf08      	it	eq
 8001afc:	1aad      	subeq	r5, r5, r2
 8001afe:	68a3      	ldr	r3, [r4, #8]
 8001b00:	6922      	ldr	r2, [r4, #16]
 8001b02:	bf08      	it	eq
 8001b04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	bfc4      	itt	gt
 8001b0c:	1a9b      	subgt	r3, r3, r2
 8001b0e:	18ed      	addgt	r5, r5, r3
 8001b10:	341a      	adds	r4, #26
 8001b12:	454d      	cmp	r5, r9
 8001b14:	d11b      	bne.n	8001b4e <_printf_common+0xda>
 8001b16:	2000      	movs	r0, #0
 8001b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	4652      	mov	r2, sl
 8001b20:	4639      	mov	r1, r7
 8001b22:	4630      	mov	r0, r6
 8001b24:	47c0      	blx	r8
 8001b26:	3001      	adds	r0, #1
 8001b28:	d103      	bne.n	8001b32 <_printf_common+0xbe>
 8001b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b32:	3501      	adds	r5, #1
 8001b34:	e7c1      	b.n	8001aba <_printf_common+0x46>
 8001b36:	2030      	movs	r0, #48	; 0x30
 8001b38:	18e1      	adds	r1, r4, r3
 8001b3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b44:	4422      	add	r2, r4
 8001b46:	3302      	adds	r3, #2
 8001b48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b4c:	e7c3      	b.n	8001ad6 <_printf_common+0x62>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	4622      	mov	r2, r4
 8001b52:	4639      	mov	r1, r7
 8001b54:	4630      	mov	r0, r6
 8001b56:	47c0      	blx	r8
 8001b58:	3001      	adds	r0, #1
 8001b5a:	d0e6      	beq.n	8001b2a <_printf_common+0xb6>
 8001b5c:	f109 0901 	add.w	r9, r9, #1
 8001b60:	e7d7      	b.n	8001b12 <_printf_common+0x9e>
	...

08001b64 <_printf_i>:
 8001b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b68:	4617      	mov	r7, r2
 8001b6a:	7e0a      	ldrb	r2, [r1, #24]
 8001b6c:	b085      	sub	sp, #20
 8001b6e:	2a6e      	cmp	r2, #110	; 0x6e
 8001b70:	4698      	mov	r8, r3
 8001b72:	4606      	mov	r6, r0
 8001b74:	460c      	mov	r4, r1
 8001b76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001b78:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001b7c:	f000 80bc 	beq.w	8001cf8 <_printf_i+0x194>
 8001b80:	d81a      	bhi.n	8001bb8 <_printf_i+0x54>
 8001b82:	2a63      	cmp	r2, #99	; 0x63
 8001b84:	d02e      	beq.n	8001be4 <_printf_i+0x80>
 8001b86:	d80a      	bhi.n	8001b9e <_printf_i+0x3a>
 8001b88:	2a00      	cmp	r2, #0
 8001b8a:	f000 80c8 	beq.w	8001d1e <_printf_i+0x1ba>
 8001b8e:	2a58      	cmp	r2, #88	; 0x58
 8001b90:	f000 808a 	beq.w	8001ca8 <_printf_i+0x144>
 8001b94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b98:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001b9c:	e02a      	b.n	8001bf4 <_printf_i+0x90>
 8001b9e:	2a64      	cmp	r2, #100	; 0x64
 8001ba0:	d001      	beq.n	8001ba6 <_printf_i+0x42>
 8001ba2:	2a69      	cmp	r2, #105	; 0x69
 8001ba4:	d1f6      	bne.n	8001b94 <_printf_i+0x30>
 8001ba6:	6821      	ldr	r1, [r4, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001bae:	d023      	beq.n	8001bf8 <_printf_i+0x94>
 8001bb0:	1d11      	adds	r1, r2, #4
 8001bb2:	6019      	str	r1, [r3, #0]
 8001bb4:	6813      	ldr	r3, [r2, #0]
 8001bb6:	e027      	b.n	8001c08 <_printf_i+0xa4>
 8001bb8:	2a73      	cmp	r2, #115	; 0x73
 8001bba:	f000 80b4 	beq.w	8001d26 <_printf_i+0x1c2>
 8001bbe:	d808      	bhi.n	8001bd2 <_printf_i+0x6e>
 8001bc0:	2a6f      	cmp	r2, #111	; 0x6f
 8001bc2:	d02a      	beq.n	8001c1a <_printf_i+0xb6>
 8001bc4:	2a70      	cmp	r2, #112	; 0x70
 8001bc6:	d1e5      	bne.n	8001b94 <_printf_i+0x30>
 8001bc8:	680a      	ldr	r2, [r1, #0]
 8001bca:	f042 0220 	orr.w	r2, r2, #32
 8001bce:	600a      	str	r2, [r1, #0]
 8001bd0:	e003      	b.n	8001bda <_printf_i+0x76>
 8001bd2:	2a75      	cmp	r2, #117	; 0x75
 8001bd4:	d021      	beq.n	8001c1a <_printf_i+0xb6>
 8001bd6:	2a78      	cmp	r2, #120	; 0x78
 8001bd8:	d1dc      	bne.n	8001b94 <_printf_i+0x30>
 8001bda:	2278      	movs	r2, #120	; 0x78
 8001bdc:	496f      	ldr	r1, [pc, #444]	; (8001d9c <_printf_i+0x238>)
 8001bde:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001be2:	e064      	b.n	8001cae <_printf_i+0x14a>
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001bea:	1d11      	adds	r1, r2, #4
 8001bec:	6019      	str	r1, [r3, #0]
 8001bee:	6813      	ldr	r3, [r2, #0]
 8001bf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e0a3      	b.n	8001d40 <_printf_i+0x1dc>
 8001bf8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001bfc:	f102 0104 	add.w	r1, r2, #4
 8001c00:	6019      	str	r1, [r3, #0]
 8001c02:	d0d7      	beq.n	8001bb4 <_printf_i+0x50>
 8001c04:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	da03      	bge.n	8001c14 <_printf_i+0xb0>
 8001c0c:	222d      	movs	r2, #45	; 0x2d
 8001c0e:	425b      	negs	r3, r3
 8001c10:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001c14:	4962      	ldr	r1, [pc, #392]	; (8001da0 <_printf_i+0x23c>)
 8001c16:	220a      	movs	r2, #10
 8001c18:	e017      	b.n	8001c4a <_printf_i+0xe6>
 8001c1a:	6820      	ldr	r0, [r4, #0]
 8001c1c:	6819      	ldr	r1, [r3, #0]
 8001c1e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001c22:	d003      	beq.n	8001c2c <_printf_i+0xc8>
 8001c24:	1d08      	adds	r0, r1, #4
 8001c26:	6018      	str	r0, [r3, #0]
 8001c28:	680b      	ldr	r3, [r1, #0]
 8001c2a:	e006      	b.n	8001c3a <_printf_i+0xd6>
 8001c2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c30:	f101 0004 	add.w	r0, r1, #4
 8001c34:	6018      	str	r0, [r3, #0]
 8001c36:	d0f7      	beq.n	8001c28 <_printf_i+0xc4>
 8001c38:	880b      	ldrh	r3, [r1, #0]
 8001c3a:	2a6f      	cmp	r2, #111	; 0x6f
 8001c3c:	bf14      	ite	ne
 8001c3e:	220a      	movne	r2, #10
 8001c40:	2208      	moveq	r2, #8
 8001c42:	4957      	ldr	r1, [pc, #348]	; (8001da0 <_printf_i+0x23c>)
 8001c44:	2000      	movs	r0, #0
 8001c46:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001c4a:	6865      	ldr	r5, [r4, #4]
 8001c4c:	2d00      	cmp	r5, #0
 8001c4e:	60a5      	str	r5, [r4, #8]
 8001c50:	f2c0 809c 	blt.w	8001d8c <_printf_i+0x228>
 8001c54:	6820      	ldr	r0, [r4, #0]
 8001c56:	f020 0004 	bic.w	r0, r0, #4
 8001c5a:	6020      	str	r0, [r4, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d13f      	bne.n	8001ce0 <_printf_i+0x17c>
 8001c60:	2d00      	cmp	r5, #0
 8001c62:	f040 8095 	bne.w	8001d90 <_printf_i+0x22c>
 8001c66:	4675      	mov	r5, lr
 8001c68:	2a08      	cmp	r2, #8
 8001c6a:	d10b      	bne.n	8001c84 <_printf_i+0x120>
 8001c6c:	6823      	ldr	r3, [r4, #0]
 8001c6e:	07da      	lsls	r2, r3, #31
 8001c70:	d508      	bpl.n	8001c84 <_printf_i+0x120>
 8001c72:	6923      	ldr	r3, [r4, #16]
 8001c74:	6862      	ldr	r2, [r4, #4]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	bfde      	ittt	le
 8001c7a:	2330      	movle	r3, #48	; 0x30
 8001c7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001c80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001c84:	ebae 0305 	sub.w	r3, lr, r5
 8001c88:	6123      	str	r3, [r4, #16]
 8001c8a:	f8cd 8000 	str.w	r8, [sp]
 8001c8e:	463b      	mov	r3, r7
 8001c90:	aa03      	add	r2, sp, #12
 8001c92:	4621      	mov	r1, r4
 8001c94:	4630      	mov	r0, r6
 8001c96:	f7ff feed 	bl	8001a74 <_printf_common>
 8001c9a:	3001      	adds	r0, #1
 8001c9c:	d155      	bne.n	8001d4a <_printf_i+0x1e6>
 8001c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca2:	b005      	add	sp, #20
 8001ca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ca8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001cac:	493c      	ldr	r1, [pc, #240]	; (8001da0 <_printf_i+0x23c>)
 8001cae:	6822      	ldr	r2, [r4, #0]
 8001cb0:	6818      	ldr	r0, [r3, #0]
 8001cb2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001cb6:	f100 0504 	add.w	r5, r0, #4
 8001cba:	601d      	str	r5, [r3, #0]
 8001cbc:	d001      	beq.n	8001cc2 <_printf_i+0x15e>
 8001cbe:	6803      	ldr	r3, [r0, #0]
 8001cc0:	e002      	b.n	8001cc8 <_printf_i+0x164>
 8001cc2:	0655      	lsls	r5, r2, #25
 8001cc4:	d5fb      	bpl.n	8001cbe <_printf_i+0x15a>
 8001cc6:	8803      	ldrh	r3, [r0, #0]
 8001cc8:	07d0      	lsls	r0, r2, #31
 8001cca:	bf44      	itt	mi
 8001ccc:	f042 0220 	orrmi.w	r2, r2, #32
 8001cd0:	6022      	strmi	r2, [r4, #0]
 8001cd2:	b91b      	cbnz	r3, 8001cdc <_printf_i+0x178>
 8001cd4:	6822      	ldr	r2, [r4, #0]
 8001cd6:	f022 0220 	bic.w	r2, r2, #32
 8001cda:	6022      	str	r2, [r4, #0]
 8001cdc:	2210      	movs	r2, #16
 8001cde:	e7b1      	b.n	8001c44 <_printf_i+0xe0>
 8001ce0:	4675      	mov	r5, lr
 8001ce2:	fbb3 f0f2 	udiv	r0, r3, r2
 8001ce6:	fb02 3310 	mls	r3, r2, r0, r3
 8001cea:	5ccb      	ldrb	r3, [r1, r3]
 8001cec:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2800      	cmp	r0, #0
 8001cf4:	d1f5      	bne.n	8001ce2 <_printf_i+0x17e>
 8001cf6:	e7b7      	b.n	8001c68 <_printf_i+0x104>
 8001cf8:	6808      	ldr	r0, [r1, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001d00:	6949      	ldr	r1, [r1, #20]
 8001d02:	d004      	beq.n	8001d0e <_printf_i+0x1aa>
 8001d04:	1d10      	adds	r0, r2, #4
 8001d06:	6018      	str	r0, [r3, #0]
 8001d08:	6813      	ldr	r3, [r2, #0]
 8001d0a:	6019      	str	r1, [r3, #0]
 8001d0c:	e007      	b.n	8001d1e <_printf_i+0x1ba>
 8001d0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001d12:	f102 0004 	add.w	r0, r2, #4
 8001d16:	6018      	str	r0, [r3, #0]
 8001d18:	6813      	ldr	r3, [r2, #0]
 8001d1a:	d0f6      	beq.n	8001d0a <_printf_i+0x1a6>
 8001d1c:	8019      	strh	r1, [r3, #0]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	4675      	mov	r5, lr
 8001d22:	6123      	str	r3, [r4, #16]
 8001d24:	e7b1      	b.n	8001c8a <_printf_i+0x126>
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	1d11      	adds	r1, r2, #4
 8001d2a:	6019      	str	r1, [r3, #0]
 8001d2c:	6815      	ldr	r5, [r2, #0]
 8001d2e:	2100      	movs	r1, #0
 8001d30:	6862      	ldr	r2, [r4, #4]
 8001d32:	4628      	mov	r0, r5
 8001d34:	f000 f8e0 	bl	8001ef8 <memchr>
 8001d38:	b108      	cbz	r0, 8001d3e <_printf_i+0x1da>
 8001d3a:	1b40      	subs	r0, r0, r5
 8001d3c:	6060      	str	r0, [r4, #4]
 8001d3e:	6863      	ldr	r3, [r4, #4]
 8001d40:	6123      	str	r3, [r4, #16]
 8001d42:	2300      	movs	r3, #0
 8001d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d48:	e79f      	b.n	8001c8a <_printf_i+0x126>
 8001d4a:	6923      	ldr	r3, [r4, #16]
 8001d4c:	462a      	mov	r2, r5
 8001d4e:	4639      	mov	r1, r7
 8001d50:	4630      	mov	r0, r6
 8001d52:	47c0      	blx	r8
 8001d54:	3001      	adds	r0, #1
 8001d56:	d0a2      	beq.n	8001c9e <_printf_i+0x13a>
 8001d58:	6823      	ldr	r3, [r4, #0]
 8001d5a:	079b      	lsls	r3, r3, #30
 8001d5c:	d507      	bpl.n	8001d6e <_printf_i+0x20a>
 8001d5e:	2500      	movs	r5, #0
 8001d60:	f104 0919 	add.w	r9, r4, #25
 8001d64:	68e3      	ldr	r3, [r4, #12]
 8001d66:	9a03      	ldr	r2, [sp, #12]
 8001d68:	1a9b      	subs	r3, r3, r2
 8001d6a:	429d      	cmp	r5, r3
 8001d6c:	db05      	blt.n	8001d7a <_printf_i+0x216>
 8001d6e:	68e0      	ldr	r0, [r4, #12]
 8001d70:	9b03      	ldr	r3, [sp, #12]
 8001d72:	4298      	cmp	r0, r3
 8001d74:	bfb8      	it	lt
 8001d76:	4618      	movlt	r0, r3
 8001d78:	e793      	b.n	8001ca2 <_printf_i+0x13e>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	464a      	mov	r2, r9
 8001d7e:	4639      	mov	r1, r7
 8001d80:	4630      	mov	r0, r6
 8001d82:	47c0      	blx	r8
 8001d84:	3001      	adds	r0, #1
 8001d86:	d08a      	beq.n	8001c9e <_printf_i+0x13a>
 8001d88:	3501      	adds	r5, #1
 8001d8a:	e7eb      	b.n	8001d64 <_printf_i+0x200>
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1a7      	bne.n	8001ce0 <_printf_i+0x17c>
 8001d90:	780b      	ldrb	r3, [r1, #0]
 8001d92:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d9a:	e765      	b.n	8001c68 <_printf_i+0x104>
 8001d9c:	08002032 	.word	0x08002032
 8001da0:	08002021 	.word	0x08002021

08001da4 <_sbrk_r>:
 8001da4:	b538      	push	{r3, r4, r5, lr}
 8001da6:	2300      	movs	r3, #0
 8001da8:	4c05      	ldr	r4, [pc, #20]	; (8001dc0 <_sbrk_r+0x1c>)
 8001daa:	4605      	mov	r5, r0
 8001dac:	4608      	mov	r0, r1
 8001dae:	6023      	str	r3, [r4, #0]
 8001db0:	f7ff f860 	bl	8000e74 <_sbrk>
 8001db4:	1c43      	adds	r3, r0, #1
 8001db6:	d102      	bne.n	8001dbe <_sbrk_r+0x1a>
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	b103      	cbz	r3, 8001dbe <_sbrk_r+0x1a>
 8001dbc:	602b      	str	r3, [r5, #0]
 8001dbe:	bd38      	pop	{r3, r4, r5, pc}
 8001dc0:	2000009c 	.word	0x2000009c

08001dc4 <__sread>:
 8001dc4:	b510      	push	{r4, lr}
 8001dc6:	460c      	mov	r4, r1
 8001dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dcc:	f000 f8a4 	bl	8001f18 <_read_r>
 8001dd0:	2800      	cmp	r0, #0
 8001dd2:	bfab      	itete	ge
 8001dd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001dd6:	89a3      	ldrhlt	r3, [r4, #12]
 8001dd8:	181b      	addge	r3, r3, r0
 8001dda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001dde:	bfac      	ite	ge
 8001de0:	6563      	strge	r3, [r4, #84]	; 0x54
 8001de2:	81a3      	strhlt	r3, [r4, #12]
 8001de4:	bd10      	pop	{r4, pc}

08001de6 <__swrite>:
 8001de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dea:	461f      	mov	r7, r3
 8001dec:	898b      	ldrh	r3, [r1, #12]
 8001dee:	4605      	mov	r5, r0
 8001df0:	05db      	lsls	r3, r3, #23
 8001df2:	460c      	mov	r4, r1
 8001df4:	4616      	mov	r6, r2
 8001df6:	d505      	bpl.n	8001e04 <__swrite+0x1e>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e00:	f000 f868 	bl	8001ed4 <_lseek_r>
 8001e04:	89a3      	ldrh	r3, [r4, #12]
 8001e06:	4632      	mov	r2, r6
 8001e08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e0c:	81a3      	strh	r3, [r4, #12]
 8001e0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e12:	463b      	mov	r3, r7
 8001e14:	4628      	mov	r0, r5
 8001e16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e1a:	f000 b817 	b.w	8001e4c <_write_r>

08001e1e <__sseek>:
 8001e1e:	b510      	push	{r4, lr}
 8001e20:	460c      	mov	r4, r1
 8001e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e26:	f000 f855 	bl	8001ed4 <_lseek_r>
 8001e2a:	1c43      	adds	r3, r0, #1
 8001e2c:	89a3      	ldrh	r3, [r4, #12]
 8001e2e:	bf15      	itete	ne
 8001e30:	6560      	strne	r0, [r4, #84]	; 0x54
 8001e32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001e36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001e3a:	81a3      	strheq	r3, [r4, #12]
 8001e3c:	bf18      	it	ne
 8001e3e:	81a3      	strhne	r3, [r4, #12]
 8001e40:	bd10      	pop	{r4, pc}

08001e42 <__sclose>:
 8001e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e46:	f000 b813 	b.w	8001e70 <_close_r>
	...

08001e4c <_write_r>:
 8001e4c:	b538      	push	{r3, r4, r5, lr}
 8001e4e:	4605      	mov	r5, r0
 8001e50:	4608      	mov	r0, r1
 8001e52:	4611      	mov	r1, r2
 8001e54:	2200      	movs	r2, #0
 8001e56:	4c05      	ldr	r4, [pc, #20]	; (8001e6c <_write_r+0x20>)
 8001e58:	6022      	str	r2, [r4, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	f7fe ff30 	bl	8000cc0 <_write>
 8001e60:	1c43      	adds	r3, r0, #1
 8001e62:	d102      	bne.n	8001e6a <_write_r+0x1e>
 8001e64:	6823      	ldr	r3, [r4, #0]
 8001e66:	b103      	cbz	r3, 8001e6a <_write_r+0x1e>
 8001e68:	602b      	str	r3, [r5, #0]
 8001e6a:	bd38      	pop	{r3, r4, r5, pc}
 8001e6c:	2000009c 	.word	0x2000009c

08001e70 <_close_r>:
 8001e70:	b538      	push	{r3, r4, r5, lr}
 8001e72:	2300      	movs	r3, #0
 8001e74:	4c05      	ldr	r4, [pc, #20]	; (8001e8c <_close_r+0x1c>)
 8001e76:	4605      	mov	r5, r0
 8001e78:	4608      	mov	r0, r1
 8001e7a:	6023      	str	r3, [r4, #0]
 8001e7c:	f7ff f814 	bl	8000ea8 <_close>
 8001e80:	1c43      	adds	r3, r0, #1
 8001e82:	d102      	bne.n	8001e8a <_close_r+0x1a>
 8001e84:	6823      	ldr	r3, [r4, #0]
 8001e86:	b103      	cbz	r3, 8001e8a <_close_r+0x1a>
 8001e88:	602b      	str	r3, [r5, #0]
 8001e8a:	bd38      	pop	{r3, r4, r5, pc}
 8001e8c:	2000009c 	.word	0x2000009c

08001e90 <_fstat_r>:
 8001e90:	b538      	push	{r3, r4, r5, lr}
 8001e92:	2300      	movs	r3, #0
 8001e94:	4c06      	ldr	r4, [pc, #24]	; (8001eb0 <_fstat_r+0x20>)
 8001e96:	4605      	mov	r5, r0
 8001e98:	4608      	mov	r0, r1
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	6023      	str	r3, [r4, #0]
 8001e9e:	f7ff f806 	bl	8000eae <_fstat>
 8001ea2:	1c43      	adds	r3, r0, #1
 8001ea4:	d102      	bne.n	8001eac <_fstat_r+0x1c>
 8001ea6:	6823      	ldr	r3, [r4, #0]
 8001ea8:	b103      	cbz	r3, 8001eac <_fstat_r+0x1c>
 8001eaa:	602b      	str	r3, [r5, #0]
 8001eac:	bd38      	pop	{r3, r4, r5, pc}
 8001eae:	bf00      	nop
 8001eb0:	2000009c 	.word	0x2000009c

08001eb4 <_isatty_r>:
 8001eb4:	b538      	push	{r3, r4, r5, lr}
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	4c05      	ldr	r4, [pc, #20]	; (8001ed0 <_isatty_r+0x1c>)
 8001eba:	4605      	mov	r5, r0
 8001ebc:	4608      	mov	r0, r1
 8001ebe:	6023      	str	r3, [r4, #0]
 8001ec0:	f7fe fffa 	bl	8000eb8 <_isatty>
 8001ec4:	1c43      	adds	r3, r0, #1
 8001ec6:	d102      	bne.n	8001ece <_isatty_r+0x1a>
 8001ec8:	6823      	ldr	r3, [r4, #0]
 8001eca:	b103      	cbz	r3, 8001ece <_isatty_r+0x1a>
 8001ecc:	602b      	str	r3, [r5, #0]
 8001ece:	bd38      	pop	{r3, r4, r5, pc}
 8001ed0:	2000009c 	.word	0x2000009c

08001ed4 <_lseek_r>:
 8001ed4:	b538      	push	{r3, r4, r5, lr}
 8001ed6:	4605      	mov	r5, r0
 8001ed8:	4608      	mov	r0, r1
 8001eda:	4611      	mov	r1, r2
 8001edc:	2200      	movs	r2, #0
 8001ede:	4c05      	ldr	r4, [pc, #20]	; (8001ef4 <_lseek_r+0x20>)
 8001ee0:	6022      	str	r2, [r4, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	f7fe ffea 	bl	8000ebc <_lseek>
 8001ee8:	1c43      	adds	r3, r0, #1
 8001eea:	d102      	bne.n	8001ef2 <_lseek_r+0x1e>
 8001eec:	6823      	ldr	r3, [r4, #0]
 8001eee:	b103      	cbz	r3, 8001ef2 <_lseek_r+0x1e>
 8001ef0:	602b      	str	r3, [r5, #0]
 8001ef2:	bd38      	pop	{r3, r4, r5, pc}
 8001ef4:	2000009c 	.word	0x2000009c

08001ef8 <memchr>:
 8001ef8:	b510      	push	{r4, lr}
 8001efa:	b2c9      	uxtb	r1, r1
 8001efc:	4402      	add	r2, r0
 8001efe:	4290      	cmp	r0, r2
 8001f00:	4603      	mov	r3, r0
 8001f02:	d101      	bne.n	8001f08 <memchr+0x10>
 8001f04:	2000      	movs	r0, #0
 8001f06:	bd10      	pop	{r4, pc}
 8001f08:	781c      	ldrb	r4, [r3, #0]
 8001f0a:	3001      	adds	r0, #1
 8001f0c:	428c      	cmp	r4, r1
 8001f0e:	d1f6      	bne.n	8001efe <memchr+0x6>
 8001f10:	4618      	mov	r0, r3
 8001f12:	bd10      	pop	{r4, pc}

08001f14 <__malloc_lock>:
 8001f14:	4770      	bx	lr

08001f16 <__malloc_unlock>:
 8001f16:	4770      	bx	lr

08001f18 <_read_r>:
 8001f18:	b538      	push	{r3, r4, r5, lr}
 8001f1a:	4605      	mov	r5, r0
 8001f1c:	4608      	mov	r0, r1
 8001f1e:	4611      	mov	r1, r2
 8001f20:	2200      	movs	r2, #0
 8001f22:	4c05      	ldr	r4, [pc, #20]	; (8001f38 <_read_r+0x20>)
 8001f24:	6022      	str	r2, [r4, #0]
 8001f26:	461a      	mov	r2, r3
 8001f28:	f7fe ff96 	bl	8000e58 <_read>
 8001f2c:	1c43      	adds	r3, r0, #1
 8001f2e:	d102      	bne.n	8001f36 <_read_r+0x1e>
 8001f30:	6823      	ldr	r3, [r4, #0]
 8001f32:	b103      	cbz	r3, 8001f36 <_read_r+0x1e>
 8001f34:	602b      	str	r3, [r5, #0]
 8001f36:	bd38      	pop	{r3, r4, r5, pc}
 8001f38:	2000009c 	.word	0x2000009c

08001f3c <_init>:
 8001f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f3e:	bf00      	nop
 8001f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f42:	bc08      	pop	{r3}
 8001f44:	469e      	mov	lr, r3
 8001f46:	4770      	bx	lr

08001f48 <_fini>:
 8001f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f4a:	bf00      	nop
 8001f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f4e:	bc08      	pop	{r3}
 8001f50:	469e      	mov	lr, r3
 8001f52:	4770      	bx	lr
