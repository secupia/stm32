
LED_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001338  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800151c  0800151c  0001151c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001548  08001548  00011548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800154c  0800154c  0001154c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  2000000c  0800155c  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000002c  0800155c  0002002c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000080de  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001727  00000000  00000000  00028113  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000188  00000000  00000000  00029840  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002163  00000000  00000000  000299c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000163a  00000000  00000000  0002bb2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000007c  00000000  00000000  0002d165  2**0
                  CONTENTS, READONLY
 15 .debug_frame  000007c4  00000000  00000000  0002d1e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000010f4  00000000  00000000  0002d9a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000000a0  00000000  00000000  0002eaa0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08001504 	.word	0x08001504

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08001504 	.word	0x08001504

08000224 <apInit>:
 *      Author: Marshall
 */


void apInit(void)
{
 8000224:	4770      	bx	lr

08000226 <apMain>:

}

void apMain(void)
{
 8000226:	b508      	push	{r3, lr}
  while(1)
  {
    ledToggle(0);
 8000228:	2000      	movs	r0, #0
 800022a:	f000 f8e9 	bl	8000400 <ledToggle>
    delay(500);
 800022e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000232:	f000 f8f3 	bl	800041c <delay>
 8000236:	e7f7      	b.n	8000228 <apMain+0x2>

08000238 <SystemClock_Config>:
  *            Flash Latency(WS)              = 2
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b500      	push	{lr}
 800023a:	b091      	sub	sp, #68	; 0x44
  RCC_ClkInitTypeDef clkinitstruct = {0};
 800023c:	2100      	movs	r1, #0
 800023e:	910b      	str	r1, [sp, #44]	; 0x2c
 8000240:	910c      	str	r1, [sp, #48]	; 0x30
 8000242:	910d      	str	r1, [sp, #52]	; 0x34
 8000244:	910e      	str	r1, [sp, #56]	; 0x38
 8000246:	910f      	str	r1, [sp, #60]	; 0x3c
  RCC_OscInitTypeDef oscinitstruct = {0};
 8000248:	2228      	movs	r2, #40	; 0x28
 800024a:	a801      	add	r0, sp, #4
 800024c:	f001 f952 	bl	80014f4 <memset>

  /* Configure PLL ------------------------------------------------------*/
  /* PLL configuration: PLLCLK = (HSI / 2) * PLLMUL = (8 / 2) * 16 = 64 MHz */
  /* PREDIV1 configuration: PREDIV1CLK = PLLCLK / HSEPredivValue = 64 / 1 = 64 MHz */
  /* Enable HSI and activate PLL with HSi_DIV2 as source */
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_HSI;
 8000250:	2302      	movs	r3, #2
 8000252:	9301      	str	r3, [sp, #4]
  oscinitstruct.HSEState        = RCC_HSE_OFF;
  oscinitstruct.LSEState        = RCC_LSE_OFF;
  oscinitstruct.HSIState        = RCC_HSI_ON;
 8000254:	2201      	movs	r2, #1
 8000256:	9205      	str	r2, [sp, #20]
  oscinitstruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000258:	2210      	movs	r2, #16
 800025a:	9206      	str	r2, [sp, #24]
  oscinitstruct.HSEPredivValue    = RCC_HSE_PREDIV_DIV1;
  oscinitstruct.PLL.PLLState    = RCC_PLL_ON;
 800025c:	9308      	str	r3, [sp, #32]
  oscinitstruct.PLL.PLLSource   = RCC_PLLSOURCE_HSI_DIV2;
  oscinitstruct.PLL.PLLMUL      = RCC_PLL_MUL16;
 800025e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000262:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&oscinitstruct)!= HAL_OK)
 8000264:	a801      	add	r0, sp, #4
 8000266:	f000 fd1b 	bl	8000ca0 <HAL_RCC_OscConfig>
 800026a:	b100      	cbz	r0, 800026e <SystemClock_Config+0x36>
 800026c:	e7fe      	b.n	800026c <SystemClock_Config+0x34>
    while(1);
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800026e:	230f      	movs	r3, #15
 8000270:	930b      	str	r3, [sp, #44]	; 0x2c
  clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000272:	2102      	movs	r1, #2
 8000274:	910c      	str	r1, [sp, #48]	; 0x30
  clkinitstruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	930d      	str	r3, [sp, #52]	; 0x34
  clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027a:	930f      	str	r3, [sp, #60]	; 0x3c
  clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000280:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2)!= HAL_OK)
 8000282:	a80b      	add	r0, sp, #44	; 0x2c
 8000284:	f000 ff64 	bl	8001150 <HAL_RCC_ClockConfig>
 8000288:	b100      	cbz	r0, 800028c <SystemClock_Config+0x54>
 800028a:	e7fe      	b.n	800028a <SystemClock_Config+0x52>
  {
    /* Initialization Error */
    while(1);
  }
}
 800028c:	b011      	add	sp, #68	; 0x44
 800028e:	f85d fb04 	ldr.w	pc, [sp], #4

08000292 <bspInit>:
{
 8000292:	b500      	push	{lr}
 8000294:	b083      	sub	sp, #12
  HAL_Init();
 8000296:	f000 f8ff 	bl	8000498 <HAL_Init>
  SystemClock_Config();
 800029a:	f7ff ffcd 	bl	8000238 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800029e:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <bspInit+0x26>)
 80002a0:	699a      	ldr	r2, [r3, #24]
 80002a2:	f042 0204 	orr.w	r2, r2, #4
 80002a6:	619a      	str	r2, [r3, #24]
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	f003 0304 	and.w	r3, r3, #4
 80002ae:	9301      	str	r3, [sp, #4]
 80002b0:	9b01      	ldr	r3, [sp, #4]
}
 80002b2:	b003      	add	sp, #12
 80002b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80002b8:	40021000 	.word	0x40021000

080002bc <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80002bc:	4b0f      	ldr	r3, [pc, #60]	; (80002fc <SystemInit+0x40>)
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	f042 0201 	orr.w	r2, r2, #1
 80002c4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80002c6:	6859      	ldr	r1, [r3, #4]
 80002c8:	4a0d      	ldr	r2, [pc, #52]	; (8000300 <SystemInit+0x44>)
 80002ca:	400a      	ands	r2, r1
 80002cc:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80002ce:	681a      	ldr	r2, [r3, #0]
 80002d0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80002d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80002d8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80002e0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80002e2:	685a      	ldr	r2, [r3, #4]
 80002e4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80002e8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80002ea:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80002ee:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80002f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80002f4:	4b03      	ldr	r3, [pc, #12]	; (8000304 <SystemInit+0x48>)
 80002f6:	609a      	str	r2, [r3, #8]
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	40021000 	.word	0x40021000
 8000300:	f8ff0000 	.word	0xf8ff0000
 8000304:	e000ed00 	.word	0xe000ed00

08000308 <SystemCoreClockUpdate>:
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000308:	4b1f      	ldr	r3, [pc, #124]	; (8000388 <SystemCoreClockUpdate+0x80>)
 800030a:	685b      	ldr	r3, [r3, #4]
 800030c:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 8000310:	2b04      	cmp	r3, #4
 8000312:	d014      	beq.n	800033e <SystemCoreClockUpdate+0x36>
 8000314:	2b08      	cmp	r3, #8
 8000316:	d016      	beq.n	8000346 <SystemCoreClockUpdate+0x3e>
 8000318:	b11b      	cbz	r3, 8000322 <SystemCoreClockUpdate+0x1a>
      }
#endif /* STM32F105xC */ 
      break;

    default:
      SystemCoreClock = HSI_VALUE;
 800031a:	4a1c      	ldr	r2, [pc, #112]	; (800038c <SystemCoreClockUpdate+0x84>)
 800031c:	4b1c      	ldr	r3, [pc, #112]	; (8000390 <SystemCoreClockUpdate+0x88>)
 800031e:	601a      	str	r2, [r3, #0]
      break;
 8000320:	e002      	b.n	8000328 <SystemCoreClockUpdate+0x20>
      SystemCoreClock = HSI_VALUE;
 8000322:	4a1a      	ldr	r2, [pc, #104]	; (800038c <SystemCoreClockUpdate+0x84>)
 8000324:	4b1a      	ldr	r3, [pc, #104]	; (8000390 <SystemCoreClockUpdate+0x88>)
 8000326:	601a      	str	r2, [r3, #0]
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000328:	4b17      	ldr	r3, [pc, #92]	; (8000388 <SystemCoreClockUpdate+0x80>)
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000330:	4a18      	ldr	r2, [pc, #96]	; (8000394 <SystemCoreClockUpdate+0x8c>)
 8000332:	5cd1      	ldrb	r1, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000334:	4a16      	ldr	r2, [pc, #88]	; (8000390 <SystemCoreClockUpdate+0x88>)
 8000336:	6813      	ldr	r3, [r2, #0]
 8000338:	40cb      	lsrs	r3, r1
 800033a:	6013      	str	r3, [r2, #0]
 800033c:	4770      	bx	lr
      SystemCoreClock = HSE_VALUE;
 800033e:	4a13      	ldr	r2, [pc, #76]	; (800038c <SystemCoreClockUpdate+0x84>)
 8000340:	4b13      	ldr	r3, [pc, #76]	; (8000390 <SystemCoreClockUpdate+0x88>)
 8000342:	601a      	str	r2, [r3, #0]
      break;
 8000344:	e7f0      	b.n	8000328 <SystemCoreClockUpdate+0x20>
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000346:	4a10      	ldr	r2, [pc, #64]	; (8000388 <SystemCoreClockUpdate+0x80>)
 8000348:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800034a:	6852      	ldr	r2, [r2, #4]
      pllmull = ( pllmull >> 18U) + 2U;
 800034c:	f3c3 4383 	ubfx	r3, r3, #18, #4
 8000350:	3302      	adds	r3, #2
      if (pllsource == 0x00U)
 8000352:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8000356:	d00a      	beq.n	800036e <SystemCoreClockUpdate+0x66>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <SystemCoreClockUpdate+0x80>)
 800035a:	6852      	ldr	r2, [r2, #4]
 800035c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000360:	d00b      	beq.n	800037a <SystemCoreClockUpdate+0x72>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 8000362:	4a0d      	ldr	r2, [pc, #52]	; (8000398 <SystemCoreClockUpdate+0x90>)
 8000364:	fb02 f303 	mul.w	r3, r2, r3
 8000368:	4a09      	ldr	r2, [pc, #36]	; (8000390 <SystemCoreClockUpdate+0x88>)
 800036a:	6013      	str	r3, [r2, #0]
 800036c:	e7dc      	b.n	8000328 <SystemCoreClockUpdate+0x20>
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 800036e:	4a0a      	ldr	r2, [pc, #40]	; (8000398 <SystemCoreClockUpdate+0x90>)
 8000370:	fb02 f303 	mul.w	r3, r2, r3
 8000374:	4a06      	ldr	r2, [pc, #24]	; (8000390 <SystemCoreClockUpdate+0x88>)
 8000376:	6013      	str	r3, [r2, #0]
 8000378:	e7d6      	b.n	8000328 <SystemCoreClockUpdate+0x20>
          SystemCoreClock = HSE_VALUE * pllmull;
 800037a:	4a04      	ldr	r2, [pc, #16]	; (800038c <SystemCoreClockUpdate+0x84>)
 800037c:	fb02 f303 	mul.w	r3, r2, r3
 8000380:	4a03      	ldr	r2, [pc, #12]	; (8000390 <SystemCoreClockUpdate+0x88>)
 8000382:	6013      	str	r3, [r2, #0]
 8000384:	e7d0      	b.n	8000328 <SystemCoreClockUpdate+0x20>
 8000386:	bf00      	nop
 8000388:	40021000 	.word	0x40021000
 800038c:	007a1200 	.word	0x007a1200
 8000390:	20000000 	.word	0x20000000
 8000394:	0800151c 	.word	0x0800151c
 8000398:	003d0900 	.word	0x003d0900

0800039c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800039c:	4770      	bx	lr

0800039e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800039e:	e7fe      	b.n	800039e <HardFault_Handler>

080003a0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80003a0:	e7fe      	b.n	80003a0 <MemManage_Handler>

080003a2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80003a2:	e7fe      	b.n	80003a2 <BusFault_Handler>

080003a4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80003a4:	e7fe      	b.n	80003a4 <UsageFault_Handler>

080003a6 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80003a6:	4770      	bx	lr

080003a8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80003a8:	4770      	bx	lr

080003aa <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80003aa:	4770      	bx	lr

080003ac <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80003ac:	b508      	push	{r3, lr}
  HAL_IncTick();
 80003ae:	f000 f885 	bl	80004bc <HAL_IncTick>
 80003b2:	bd08      	pop	{r3, pc}

080003b4 <ledInit>:

#include "led.h"


void ledInit(void)
{
 80003b4:	b500      	push	{lr}
 80003b6:	b085      	sub	sp, #20
  GPIO_InitTypeDef  GPIO_InitStruct;

  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80003b8:	2301      	movs	r3, #1
 80003ba:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80003bc:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003be:	2203      	movs	r2, #3
 80003c0:	9203      	str	r2, [sp, #12]

  //GPIO_InitStruct.Pin = GPIO_PIN_5;
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003c2:	a904      	add	r1, sp, #16
 80003c4:	f841 3d10 	str.w	r3, [r1, #-16]!
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c8:	4802      	ldr	r0, [pc, #8]	; (80003d4 <ledInit+0x20>)
 80003ca:	f000 fa25 	bl	8000818 <HAL_GPIO_Init>
}
 80003ce:	b005      	add	sp, #20
 80003d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80003d4:	40010800 	.word	0x40010800

080003d8 <ledOn>:

void ledOn(uint8_t ch)
{
 80003d8:	b508      	push	{r3, lr}
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80003da:	2201      	movs	r2, #1
 80003dc:	4611      	mov	r1, r2
 80003de:	4802      	ldr	r0, [pc, #8]	; (80003e8 <ledOn+0x10>)
 80003e0:	f000 fba3 	bl	8000b2a <HAL_GPIO_WritePin>
 80003e4:	bd08      	pop	{r3, pc}
 80003e6:	bf00      	nop
 80003e8:	40010800 	.word	0x40010800

080003ec <ledOff>:
}

void ledOff(uint8_t ch)
{
 80003ec:	b508      	push	{r3, lr}
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80003ee:	2200      	movs	r2, #0
 80003f0:	2101      	movs	r1, #1
 80003f2:	4802      	ldr	r0, [pc, #8]	; (80003fc <ledOff+0x10>)
 80003f4:	f000 fb99 	bl	8000b2a <HAL_GPIO_WritePin>
 80003f8:	bd08      	pop	{r3, pc}
 80003fa:	bf00      	nop
 80003fc:	40010800 	.word	0x40010800

08000400 <ledToggle>:
}

void ledToggle(uint8_t ch)
{
 8000400:	b508      	push	{r3, lr}
  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000402:	2101      	movs	r1, #1
 8000404:	4801      	ldr	r0, [pc, #4]	; (800040c <ledToggle+0xc>)
 8000406:	f000 fb96 	bl	8000b36 <HAL_GPIO_TogglePin>
 800040a:	bd08      	pop	{r3, pc}
 800040c:	40010800 	.word	0x40010800

08000410 <hwInit>:


#include "hw.h"

void hwInit(void)
{
 8000410:	b508      	push	{r3, lr}
  bspInit();
 8000412:	f7ff ff3e 	bl	8000292 <bspInit>

  ledInit();
 8000416:	f7ff ffcd 	bl	80003b4 <ledInit>
 800041a:	bd08      	pop	{r3, pc}

0800041c <delay>:
}

void delay(uint32_t time_ms)
{
 800041c:	b508      	push	{r3, lr}
  HAL_Delay(time_ms);
 800041e:	f000 f87b 	bl	8000518 <HAL_Delay>
 8000422:	bd08      	pop	{r3, pc}

08000424 <millis>:
}

uint32_t millis(void)
{
 8000424:	b508      	push	{r3, lr}
  return HAL_GetTick();
 8000426:	f000 f855 	bl	80004d4 <HAL_GetTick>
}
 800042a:	bd08      	pop	{r3, pc}

0800042c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800042c:	4770      	bx	lr

0800042e <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800042e:	4770      	bx	lr

08000430 <HAL_DeInit>:
{
 8000430:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 8000432:	4b06      	ldr	r3, [pc, #24]	; (800044c <HAL_DeInit+0x1c>)
 8000434:	f04f 32ff 	mov.w	r2, #4294967295
 8000438:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 800043a:	2400      	movs	r4, #0
 800043c:	611c      	str	r4, [r3, #16]
  __HAL_RCC_APB2_FORCE_RESET();
 800043e:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8000440:	60dc      	str	r4, [r3, #12]
  HAL_MspDeInit();
 8000442:	f7ff fff4 	bl	800042e <HAL_MspDeInit>
}
 8000446:	4620      	mov	r0, r4
 8000448:	bd10      	pop	{r4, pc}
 800044a:	bf00      	nop
 800044c:	40021000 	.word	0x40021000

08000450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000450:	b510      	push	{r4, lr}
 8000452:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000454:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <HAL_InitTick+0x40>)
 8000456:	7818      	ldrb	r0, [r3, #0]
 8000458:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800045c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000460:	4a0c      	ldr	r2, [pc, #48]	; (8000494 <HAL_InitTick+0x44>)
 8000462:	6810      	ldr	r0, [r2, #0]
 8000464:	fbb0 f0f3 	udiv	r0, r0, r3
 8000468:	f000 f93c 	bl	80006e4 <HAL_SYSTICK_Config>
 800046c:	b968      	cbnz	r0, 800048a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800046e:	2c0f      	cmp	r4, #15
 8000470:	d901      	bls.n	8000476 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000472:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000474:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000476:	2200      	movs	r2, #0
 8000478:	4621      	mov	r1, r4
 800047a:	f04f 30ff 	mov.w	r0, #4294967295
 800047e:	f000 f8d3 	bl	8000628 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000482:	4b03      	ldr	r3, [pc, #12]	; (8000490 <HAL_InitTick+0x40>)
 8000484:	605c      	str	r4, [r3, #4]
  return HAL_OK;
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	bf00      	nop
 8000490:	20000004 	.word	0x20000004
 8000494:	20000000 	.word	0x20000000

08000498 <HAL_Init>:
{
 8000498:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800049a:	4a07      	ldr	r2, [pc, #28]	; (80004b8 <HAL_Init+0x20>)
 800049c:	6813      	ldr	r3, [r2, #0]
 800049e:	f043 0310 	orr.w	r3, r3, #16
 80004a2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004a4:	2003      	movs	r0, #3
 80004a6:	f000 f8ad 	bl	8000604 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80004aa:	200f      	movs	r0, #15
 80004ac:	f7ff ffd0 	bl	8000450 <HAL_InitTick>
  HAL_MspInit();
 80004b0:	f7ff ffbc 	bl	800042c <HAL_MspInit>
}
 80004b4:	2000      	movs	r0, #0
 80004b6:	bd08      	pop	{r3, pc}
 80004b8:	40022000 	.word	0x40022000

080004bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80004bc:	4a03      	ldr	r2, [pc, #12]	; (80004cc <HAL_IncTick+0x10>)
 80004be:	6811      	ldr	r1, [r2, #0]
 80004c0:	4b03      	ldr	r3, [pc, #12]	; (80004d0 <HAL_IncTick+0x14>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	440b      	add	r3, r1
 80004c6:	6013      	str	r3, [r2, #0]
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	20000028 	.word	0x20000028
 80004d0:	20000004 	.word	0x20000004

080004d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80004d4:	4b01      	ldr	r3, [pc, #4]	; (80004dc <HAL_GetTick+0x8>)
 80004d6:	6818      	ldr	r0, [r3, #0]
}
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	20000028 	.word	0x20000028

080004e0 <HAL_GetTickPrio>:
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
}
 80004e0:	4b01      	ldr	r3, [pc, #4]	; (80004e8 <HAL_GetTickPrio+0x8>)
 80004e2:	6858      	ldr	r0, [r3, #4]
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	20000004 	.word	0x20000004

080004ec <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 80004ec:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status  = HAL_OK;
  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <HAL_SetTickFreq+0x1c>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	4283      	cmp	r3, r0
 80004f4:	d005      	beq.n	8000502 <HAL_SetTickFreq+0x16>
  {
    uwTickFreq = Freq;
 80004f6:	4b04      	ldr	r3, [pc, #16]	; (8000508 <HAL_SetTickFreq+0x1c>)
 80004f8:	7018      	strb	r0, [r3, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 80004fa:	6858      	ldr	r0, [r3, #4]
 80004fc:	f7ff ffa8 	bl	8000450 <HAL_InitTick>
 8000500:	bd08      	pop	{r3, pc}
  HAL_StatusTypeDef status  = HAL_OK;
 8000502:	2000      	movs	r0, #0
  }

  return status;
}
 8000504:	bd08      	pop	{r3, pc}
 8000506:	bf00      	nop
 8000508:	20000004 	.word	0x20000004

0800050c <HAL_GetTickFreq>:
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
  return uwTickFreq;
}
 800050c:	4b01      	ldr	r3, [pc, #4]	; (8000514 <HAL_GetTickFreq+0x8>)
 800050e:	7818      	ldrb	r0, [r3, #0]
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	20000004 	.word	0x20000004

08000518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000518:	b538      	push	{r3, r4, r5, lr}
 800051a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800051c:	f7ff ffda 	bl	80004d4 <HAL_GetTick>
 8000520:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000522:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000526:	d002      	beq.n	800052e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000528:	4b04      	ldr	r3, [pc, #16]	; (800053c <HAL_Delay+0x24>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800052e:	f7ff ffd1 	bl	80004d4 <HAL_GetTick>
 8000532:	1b40      	subs	r0, r0, r5
 8000534:	4284      	cmp	r4, r0
 8000536:	d8fa      	bhi.n	800052e <HAL_Delay+0x16>
  {
  }
}
 8000538:	bd38      	pop	{r3, r4, r5, pc}
 800053a:	bf00      	nop
 800053c:	20000004 	.word	0x20000004

08000540 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000540:	4a02      	ldr	r2, [pc, #8]	; (800054c <HAL_SuspendTick+0xc>)
 8000542:	6813      	ldr	r3, [r2, #0]
 8000544:	f023 0302 	bic.w	r3, r3, #2
 8000548:	6013      	str	r3, [r2, #0]
 800054a:	4770      	bx	lr
 800054c:	e000e010 	.word	0xe000e010

08000550 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000550:	4a02      	ldr	r2, [pc, #8]	; (800055c <HAL_ResumeTick+0xc>)
 8000552:	6813      	ldr	r3, [r2, #0]
 8000554:	f043 0302 	orr.w	r3, r3, #2
 8000558:	6013      	str	r3, [r2, #0]
 800055a:	4770      	bx	lr
 800055c:	e000e010 	.word	0xe000e010

08000560 <HAL_GetHalVersion>:
  * @retval version 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return __STM32F1xx_HAL_VERSION;
}
 8000560:	4800      	ldr	r0, [pc, #0]	; (8000564 <HAL_GetHalVersion+0x4>)
 8000562:	4770      	bx	lr
 8000564:	01010300 	.word	0x01010300

08000568 <HAL_GetREVID>:
  *       Refer to errata sheet of these devices for more details.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return ((DBGMCU->IDCODE) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000568:	4b01      	ldr	r3, [pc, #4]	; (8000570 <HAL_GetREVID+0x8>)
 800056a:	6818      	ldr	r0, [r3, #0]
}
 800056c:	0c00      	lsrs	r0, r0, #16
 800056e:	4770      	bx	lr
 8000570:	e0042000 	.word	0xe0042000

08000574 <HAL_GetDEVID>:
  *       Refer to errata sheet of these devices for more details.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
  return ((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8000574:	4b02      	ldr	r3, [pc, #8]	; (8000580 <HAL_GetDEVID+0xc>)
 8000576:	6818      	ldr	r0, [r3, #0]
}
 8000578:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	e0042000 	.word	0xe0042000

08000584 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8000584:	4a02      	ldr	r2, [pc, #8]	; (8000590 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8000586:	6853      	ldr	r3, [r2, #4]
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6053      	str	r3, [r2, #4]
 800058e:	4770      	bx	lr
 8000590:	e0042000 	.word	0xe0042000

08000594 <HAL_DBGMCU_DisableDBGSleepMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8000594:	4a02      	ldr	r2, [pc, #8]	; (80005a0 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8000596:	6853      	ldr	r3, [r2, #4]
 8000598:	f023 0301 	bic.w	r3, r3, #1
 800059c:	6053      	str	r3, [r2, #4]
 800059e:	4770      	bx	lr
 80005a0:	e0042000 	.word	0xe0042000

080005a4 <HAL_DBGMCU_EnableDBGStopMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80005a4:	4a02      	ldr	r2, [pc, #8]	; (80005b0 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 80005a6:	6853      	ldr	r3, [r2, #4]
 80005a8:	f043 0302 	orr.w	r3, r3, #2
 80005ac:	6053      	str	r3, [r2, #4]
 80005ae:	4770      	bx	lr
 80005b0:	e0042000 	.word	0xe0042000

080005b4 <HAL_DBGMCU_DisableDBGStopMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80005b4:	4a02      	ldr	r2, [pc, #8]	; (80005c0 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 80005b6:	6853      	ldr	r3, [r2, #4]
 80005b8:	f023 0302 	bic.w	r3, r3, #2
 80005bc:	6053      	str	r3, [r2, #4]
 80005be:	4770      	bx	lr
 80005c0:	e0042000 	.word	0xe0042000

080005c4 <HAL_DBGMCU_EnableDBGStandbyMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80005c4:	4a02      	ldr	r2, [pc, #8]	; (80005d0 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 80005c6:	6853      	ldr	r3, [r2, #4]
 80005c8:	f043 0304 	orr.w	r3, r3, #4
 80005cc:	6053      	str	r3, [r2, #4]
 80005ce:	4770      	bx	lr
 80005d0:	e0042000 	.word	0xe0042000

080005d4 <HAL_DBGMCU_DisableDBGStandbyMode>:
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80005d4:	4a02      	ldr	r2, [pc, #8]	; (80005e0 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 80005d6:	6853      	ldr	r3, [r2, #4]
 80005d8:	f023 0304 	bic.w	r3, r3, #4
 80005dc:	6053      	str	r3, [r2, #4]
 80005de:	4770      	bx	lr
 80005e0:	e0042000 	.word	0xe0042000

080005e4 <HAL_GetUID>:
  * @param UID pointer to 3 words array.
  * @retval Device identifier
  */
void HAL_GetUID(uint32_t *UID)
{
  UID[0] = (uint32_t)(READ_REG(*((uint32_t *)UID_BASE)));
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <HAL_GetUID+0x14>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	6003      	str	r3, [r0, #0]
  UID[1] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80005ea:	4b04      	ldr	r3, [pc, #16]	; (80005fc <HAL_GetUID+0x18>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	6043      	str	r3, [r0, #4]
  UID[2] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <HAL_GetUID+0x1c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	6083      	str	r3, [r0, #8]
 80005f6:	4770      	bx	lr
 80005f8:	1ffff7e8 	.word	0x1ffff7e8
 80005fc:	1ffff7ec 	.word	0x1ffff7ec
 8000600:	1ffff7f0 	.word	0x1ffff7f0

08000604 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	4a07      	ldr	r2, [pc, #28]	; (8000624 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000606:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000608:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800060c:	041b      	lsls	r3, r3, #16
 800060e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000610:	0200      	lsls	r0, r0, #8
 8000612:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000616:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000618:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800061c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000620:	60d0      	str	r0, [r2, #12]
 8000622:	4770      	bx	lr
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000628:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <HAL_NVIC_SetPriority+0x5c>)
 800062c:	68db      	ldr	r3, [r3, #12]
 800062e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000632:	f1c3 0407 	rsb	r4, r3, #7
 8000636:	2c04      	cmp	r4, #4
 8000638:	bf28      	it	cs
 800063a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800063c:	1d1d      	adds	r5, r3, #4
 800063e:	2d06      	cmp	r5, #6
 8000640:	d917      	bls.n	8000672 <HAL_NVIC_SetPriority+0x4a>
 8000642:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000644:	2501      	movs	r5, #1
 8000646:	fa05 f404 	lsl.w	r4, r5, r4
 800064a:	3c01      	subs	r4, #1
 800064c:	4021      	ands	r1, r4
 800064e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000650:	fa05 f303 	lsl.w	r3, r5, r3
 8000654:	3b01      	subs	r3, #1
 8000656:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000658:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 800065a:	2800      	cmp	r0, #0
 800065c:	db0b      	blt.n	8000676 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065e:	0109      	lsls	r1, r1, #4
 8000660:	b2c9      	uxtb	r1, r1
 8000662:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000666:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800066a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800066e:	bc30      	pop	{r4, r5}
 8000670:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000672:	2300      	movs	r3, #0
 8000674:	e7e6      	b.n	8000644 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000676:	f000 000f 	and.w	r0, r0, #15
 800067a:	0109      	lsls	r1, r1, #4
 800067c:	b2c9      	uxtb	r1, r1
 800067e:	4b02      	ldr	r3, [pc, #8]	; (8000688 <HAL_NVIC_SetPriority+0x60>)
 8000680:	5419      	strb	r1, [r3, r0]
 8000682:	e7f4      	b.n	800066e <HAL_NVIC_SetPriority+0x46>
 8000684:	e000ed00 	.word	0xe000ed00
 8000688:	e000ed14 	.word	0xe000ed14

0800068c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800068c:	0942      	lsrs	r2, r0, #5
 800068e:	f000 001f 	and.w	r0, r0, #31
 8000692:	2301      	movs	r3, #1
 8000694:	fa03 f000 	lsl.w	r0, r3, r0
 8000698:	4b01      	ldr	r3, [pc, #4]	; (80006a0 <HAL_NVIC_EnableIRQ+0x14>)
 800069a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800069e:	4770      	bx	lr
 80006a0:	e000e100 	.word	0xe000e100

080006a4 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006a4:	0943      	lsrs	r3, r0, #5
 80006a6:	f000 001f 	and.w	r0, r0, #31
 80006aa:	2201      	movs	r2, #1
 80006ac:	fa02 f000 	lsl.w	r0, r2, r0
 80006b0:	3320      	adds	r3, #32
 80006b2:	4a02      	ldr	r2, [pc, #8]	; (80006bc <HAL_NVIC_DisableIRQ+0x18>)
 80006b4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	e000e100 	.word	0xe000e100

080006c0 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006c0:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80006c4:	4905      	ldr	r1, [pc, #20]	; (80006dc <HAL_NVIC_SystemReset+0x1c>)
 80006c6:	68ca      	ldr	r2, [r1, #12]
 80006c8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80006cc:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <HAL_NVIC_SystemReset+0x20>)
 80006ce:	4313      	orrs	r3, r2
 80006d0:	60cb      	str	r3, [r1, #12]
 80006d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80006d6:	bf00      	nop
 80006d8:	e7fd      	b.n	80006d6 <HAL_NVIC_SystemReset+0x16>
 80006da:	bf00      	nop
 80006dc:	e000ed00 	.word	0xe000ed00
 80006e0:	05fa0004 	.word	0x05fa0004

080006e4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006e4:	3801      	subs	r0, #1
 80006e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ea:	d20a      	bcs.n	8000702 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <HAL_SYSTICK_Config+0x24>)
 80006ee:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f0:	21f0      	movs	r1, #240	; 0xf0
 80006f2:	4a06      	ldr	r2, [pc, #24]	; (800070c <HAL_SYSTICK_Config+0x28>)
 80006f4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006f8:	2000      	movs	r0, #0
 80006fa:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006fc:	2207      	movs	r2, #7
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000702:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000e010 	.word	0xe000e010
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <HAL_NVIC_GetPriorityGrouping>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000710:	4b02      	ldr	r3, [pc, #8]	; (800071c <HAL_NVIC_GetPriorityGrouping+0xc>)
 8000712:	68d8      	ldr	r0, [r3, #12]
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
}
 8000714:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 8000720:	b470      	push	{r4, r5, r6}
  if ((int32_t)(IRQn) < 0)
 8000722:	2800      	cmp	r0, #0
 8000724:	db1f      	blt.n	8000766 <HAL_NVIC_GetPriority+0x46>
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8000726:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800072a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800072e:	f890 0300 	ldrb.w	r0, [r0, #768]	; 0x300
 8000732:	0905      	lsrs	r5, r0, #4
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000734:	f001 0107 	and.w	r1, r1, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000738:	f1c1 0407 	rsb	r4, r1, #7
 800073c:	2c04      	cmp	r4, #4
 800073e:	bf28      	it	cs
 8000740:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000742:	1d08      	adds	r0, r1, #4
 8000744:	2806      	cmp	r0, #6
 8000746:	d914      	bls.n	8000772 <HAL_NVIC_GetPriority+0x52>
 8000748:	3903      	subs	r1, #3
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 800074a:	fa25 f601 	lsr.w	r6, r5, r1
 800074e:	2001      	movs	r0, #1
 8000750:	fa00 f404 	lsl.w	r4, r0, r4
 8000754:	3c01      	subs	r4, #1
 8000756:	4034      	ands	r4, r6
 8000758:	6014      	str	r4, [r2, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 800075a:	4088      	lsls	r0, r1
 800075c:	3801      	subs	r0, #1
 800075e:	4028      	ands	r0, r5
 8000760:	6018      	str	r0, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
}
 8000762:	bc70      	pop	{r4, r5, r6}
 8000764:	4770      	bx	lr
    return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8000766:	f000 000f 	and.w	r0, r0, #15
 800076a:	4c03      	ldr	r4, [pc, #12]	; (8000778 <HAL_NVIC_GetPriority+0x58>)
 800076c:	5c20      	ldrb	r0, [r4, r0]
 800076e:	0905      	lsrs	r5, r0, #4
 8000770:	e7e0      	b.n	8000734 <HAL_NVIC_GetPriority+0x14>
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000772:	2100      	movs	r1, #0
 8000774:	e7e9      	b.n	800074a <HAL_NVIC_GetPriority+0x2a>
 8000776:	bf00      	nop
 8000778:	e000ed14 	.word	0xe000ed14

0800077c <HAL_NVIC_SetPendingIRQ>:
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800077c:	0943      	lsrs	r3, r0, #5
 800077e:	f000 001f 	and.w	r0, r0, #31
 8000782:	2201      	movs	r2, #1
 8000784:	fa02 f000 	lsl.w	r0, r2, r0
 8000788:	3340      	adds	r3, #64	; 0x40
 800078a:	4a02      	ldr	r2, [pc, #8]	; (8000794 <HAL_NVIC_SetPendingIRQ+0x18>)
 800078c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000e100 	.word	0xe000e100

08000798 <HAL_NVIC_GetPendingIRQ>:
  return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8000798:	0943      	lsrs	r3, r0, #5
 800079a:	3340      	adds	r3, #64	; 0x40
 800079c:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <HAL_NVIC_GetPendingIRQ+0x18>)
 800079e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007a2:	f000 001f 	and.w	r0, r0, #31
 80007a6:	fa23 f000 	lsr.w	r0, r3, r0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
}
 80007aa:	f000 0001 	and.w	r0, r0, #1
 80007ae:	4770      	bx	lr
 80007b0:	e000e100 	.word	0xe000e100

080007b4 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80007b4:	0943      	lsrs	r3, r0, #5
 80007b6:	f000 001f 	and.w	r0, r0, #31
 80007ba:	2201      	movs	r2, #1
 80007bc:	fa02 f000 	lsl.w	r0, r2, r0
 80007c0:	3360      	adds	r3, #96	; 0x60
 80007c2:	4a02      	ldr	r2, [pc, #8]	; (80007cc <HAL_NVIC_ClearPendingIRQ+0x18>)
 80007c4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000e100 	.word	0xe000e100

080007d0 <HAL_NVIC_GetActive>:
  return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80007d0:	0943      	lsrs	r3, r0, #5
 80007d2:	3380      	adds	r3, #128	; 0x80
 80007d4:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <HAL_NVIC_GetActive+0x18>)
 80007d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007da:	f000 001f 	and.w	r0, r0, #31
 80007de:	fa23 f000 	lsr.w	r0, r3, r0
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
}
 80007e2:	f000 0001 	and.w	r0, r0, #1
 80007e6:	4770      	bx	lr
 80007e8:	e000e100 	.word	0xe000e100

080007ec <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80007ec:	2804      	cmp	r0, #4
 80007ee:	d005      	beq.n	80007fc <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80007f0:	4a05      	ldr	r2, [pc, #20]	; (8000808 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80007f2:	6813      	ldr	r3, [r2, #0]
 80007f4:	f023 0304 	bic.w	r3, r3, #4
 80007f8:	6013      	str	r3, [r2, #0]
 80007fa:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80007fc:	4a02      	ldr	r2, [pc, #8]	; (8000808 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80007fe:	6813      	ldr	r3, [r2, #0]
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	6013      	str	r3, [r2, #0]
 8000806:	4770      	bx	lr
 8000808:	e000e010 	.word	0xe000e010

0800080c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800080c:	4770      	bx	lr

0800080e <HAL_SYSTICK_IRQHandler>:
{
 800080e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000810:	f7ff fffc 	bl	800080c <HAL_SYSTICK_Callback>
 8000814:	bd08      	pop	{r3, pc}
 8000816:	bf00      	nop

08000818 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800081a:	b083      	sub	sp, #12
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 800081c:	2600      	movs	r6, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800081e:	4634      	mov	r4, r6
 8000820:	e079      	b.n	8000916 <HAL_GPIO_Init+0xfe>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80a9 	beq.w	800097a <HAL_GPIO_Init+0x162>
 8000828:	2d01      	cmp	r5, #1
 800082a:	d100      	bne.n	800082e <HAL_GPIO_Init+0x16>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800082c:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800082e:	2bff      	cmp	r3, #255	; 0xff
 8000830:	f200 80b7 	bhi.w	80009a2 <HAL_GPIO_Init+0x18a>
 8000834:	4686      	mov	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000836:	2bff      	cmp	r3, #255	; 0xff
 8000838:	f200 80b6 	bhi.w	80009a8 <HAL_GPIO_Init+0x190>
 800083c:	00a5      	lsls	r5, r4, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800083e:	f8de 2000 	ldr.w	r2, [lr]
 8000842:	270f      	movs	r7, #15
 8000844:	40af      	lsls	r7, r5
 8000846:	ea22 0207 	bic.w	r2, r2, r7
 800084a:	fa06 f505 	lsl.w	r5, r6, r5
 800084e:	432a      	orrs	r2, r5
 8000850:	f8ce 2000 	str.w	r2, [lr]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000854:	684a      	ldr	r2, [r1, #4]
 8000856:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800085a:	d05b      	beq.n	8000914 <HAL_GPIO_Init+0xfc>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800085c:	4a67      	ldr	r2, [pc, #412]	; (80009fc <HAL_GPIO_Init+0x1e4>)
 800085e:	6995      	ldr	r5, [r2, #24]
 8000860:	f045 0501 	orr.w	r5, r5, #1
 8000864:	6195      	str	r5, [r2, #24]
 8000866:	6992      	ldr	r2, [r2, #24]
 8000868:	f002 0201 	and.w	r2, r2, #1
 800086c:	9201      	str	r2, [sp, #4]
 800086e:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 8000870:	08a2      	lsrs	r2, r4, #2
 8000872:	1c97      	adds	r7, r2, #2
 8000874:	4d62      	ldr	r5, [pc, #392]	; (8000a00 <HAL_GPIO_Init+0x1e8>)
 8000876:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800087a:	f004 0703 	and.w	r7, r4, #3
 800087e:	ea4f 0e87 	mov.w	lr, r7, lsl #2
 8000882:	270f      	movs	r7, #15
 8000884:	fa07 f70e 	lsl.w	r7, r7, lr
 8000888:	ea25 0507 	bic.w	r5, r5, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800088c:	4f5d      	ldr	r7, [pc, #372]	; (8000a04 <HAL_GPIO_Init+0x1ec>)
 800088e:	42b8      	cmp	r0, r7
 8000890:	f000 8090 	beq.w	80009b4 <HAL_GPIO_Init+0x19c>
 8000894:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000898:	42b8      	cmp	r0, r7
 800089a:	f000 808d 	beq.w	80009b8 <HAL_GPIO_Init+0x1a0>
 800089e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80008a2:	42b8      	cmp	r0, r7
 80008a4:	f000 808a 	beq.w	80009bc <HAL_GPIO_Init+0x1a4>
 80008a8:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80008ac:	42b8      	cmp	r0, r7
 80008ae:	f000 8087 	beq.w	80009c0 <HAL_GPIO_Init+0x1a8>
 80008b2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80008b6:	42b8      	cmp	r0, r7
 80008b8:	f000 8084 	beq.w	80009c4 <HAL_GPIO_Init+0x1ac>
 80008bc:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80008c0:	42b8      	cmp	r0, r7
 80008c2:	d075      	beq.n	80009b0 <HAL_GPIO_Init+0x198>
 80008c4:	2706      	movs	r7, #6
 80008c6:	fa07 f70e 	lsl.w	r7, r7, lr
 80008ca:	433d      	orrs	r5, r7
        AFIO->EXTICR[position >> 2U] = temp;
 80008cc:	3202      	adds	r2, #2
 80008ce:	4f4c      	ldr	r7, [pc, #304]	; (8000a00 <HAL_GPIO_Init+0x1e8>)
 80008d0:	f847 5022 	str.w	r5, [r7, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008d4:	684a      	ldr	r2, [r1, #4]
 80008d6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80008da:	d075      	beq.n	80009c8 <HAL_GPIO_Init+0x1b0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80008dc:	4d4a      	ldr	r5, [pc, #296]	; (8000a08 <HAL_GPIO_Init+0x1f0>)
 80008de:	682a      	ldr	r2, [r5, #0]
 80008e0:	431a      	orrs	r2, r3
 80008e2:	602a      	str	r2, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008e4:	684a      	ldr	r2, [r1, #4]
 80008e6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80008ea:	d073      	beq.n	80009d4 <HAL_GPIO_Init+0x1bc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80008ec:	4d46      	ldr	r5, [pc, #280]	; (8000a08 <HAL_GPIO_Init+0x1f0>)
 80008ee:	686a      	ldr	r2, [r5, #4]
 80008f0:	431a      	orrs	r2, r3
 80008f2:	606a      	str	r2, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008f4:	684a      	ldr	r2, [r1, #4]
 80008f6:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 80008fa:	d071      	beq.n	80009e0 <HAL_GPIO_Init+0x1c8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80008fc:	4d42      	ldr	r5, [pc, #264]	; (8000a08 <HAL_GPIO_Init+0x1f0>)
 80008fe:	68aa      	ldr	r2, [r5, #8]
 8000900:	431a      	orrs	r2, r3
 8000902:	60aa      	str	r2, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000904:	684a      	ldr	r2, [r1, #4]
 8000906:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 800090a:	d06f      	beq.n	80009ec <HAL_GPIO_Init+0x1d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800090c:	4d3e      	ldr	r5, [pc, #248]	; (8000a08 <HAL_GPIO_Init+0x1f0>)
 800090e:	68ea      	ldr	r2, [r5, #12]
 8000910:	4313      	orrs	r3, r2
 8000912:	60eb      	str	r3, [r5, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000914:	3401      	adds	r4, #1
 8000916:	2c0f      	cmp	r4, #15
 8000918:	d86e      	bhi.n	80009f8 <HAL_GPIO_Init+0x1e0>
    ioposition = (0x01U << position);
 800091a:	2201      	movs	r2, #1
 800091c:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800091e:	680b      	ldr	r3, [r1, #0]
 8000920:	4013      	ands	r3, r2
    if (iocurrent == ioposition)
 8000922:	429a      	cmp	r2, r3
 8000924:	d1f6      	bne.n	8000914 <HAL_GPIO_Init+0xfc>
      switch (GPIO_Init->Mode)
 8000926:	684d      	ldr	r5, [r1, #4]
 8000928:	2d12      	cmp	r5, #18
 800092a:	d030      	beq.n	800098e <HAL_GPIO_Init+0x176>
 800092c:	d80b      	bhi.n	8000946 <HAL_GPIO_Init+0x12e>
 800092e:	2d02      	cmp	r5, #2
 8000930:	d02a      	beq.n	8000988 <HAL_GPIO_Init+0x170>
 8000932:	f67f af76 	bls.w	8000822 <HAL_GPIO_Init+0xa>
 8000936:	2d03      	cmp	r5, #3
 8000938:	d02f      	beq.n	800099a <HAL_GPIO_Init+0x182>
 800093a:	2d11      	cmp	r5, #17
 800093c:	f47f af77 	bne.w	800082e <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000940:	68ce      	ldr	r6, [r1, #12]
 8000942:	3604      	adds	r6, #4
          break;
 8000944:	e773      	b.n	800082e <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8000946:	4f31      	ldr	r7, [pc, #196]	; (8000a0c <HAL_GPIO_Init+0x1f4>)
 8000948:	42bd      	cmp	r5, r7
 800094a:	d016      	beq.n	800097a <HAL_GPIO_Init+0x162>
 800094c:	d90c      	bls.n	8000968 <HAL_GPIO_Init+0x150>
 800094e:	4f30      	ldr	r7, [pc, #192]	; (8000a10 <HAL_GPIO_Init+0x1f8>)
 8000950:	42bd      	cmp	r5, r7
 8000952:	d012      	beq.n	800097a <HAL_GPIO_Init+0x162>
 8000954:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000958:	42bd      	cmp	r5, r7
 800095a:	d00e      	beq.n	800097a <HAL_GPIO_Init+0x162>
 800095c:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000960:	42bd      	cmp	r5, r7
 8000962:	f47f af64 	bne.w	800082e <HAL_GPIO_Init+0x16>
 8000966:	e008      	b.n	800097a <HAL_GPIO_Init+0x162>
 8000968:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 800096c:	42bd      	cmp	r5, r7
 800096e:	d004      	beq.n	800097a <HAL_GPIO_Init+0x162>
 8000970:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000974:	42bd      	cmp	r5, r7
 8000976:	f47f af5a 	bne.w	800082e <HAL_GPIO_Init+0x16>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800097a:	688d      	ldr	r5, [r1, #8]
 800097c:	b17d      	cbz	r5, 800099e <HAL_GPIO_Init+0x186>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800097e:	2d01      	cmp	r5, #1
 8000980:	d008      	beq.n	8000994 <HAL_GPIO_Init+0x17c>
            GPIOx->BRR = ioposition;
 8000982:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000984:	2608      	movs	r6, #8
 8000986:	e752      	b.n	800082e <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000988:	68ce      	ldr	r6, [r1, #12]
 800098a:	3608      	adds	r6, #8
          break;
 800098c:	e74f      	b.n	800082e <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800098e:	68ce      	ldr	r6, [r1, #12]
 8000990:	360c      	adds	r6, #12
          break;
 8000992:	e74c      	b.n	800082e <HAL_GPIO_Init+0x16>
            GPIOx->BSRR = ioposition;
 8000994:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000996:	2608      	movs	r6, #8
 8000998:	e749      	b.n	800082e <HAL_GPIO_Init+0x16>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800099a:	2600      	movs	r6, #0
 800099c:	e747      	b.n	800082e <HAL_GPIO_Init+0x16>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800099e:	2604      	movs	r6, #4
 80009a0:	e745      	b.n	800082e <HAL_GPIO_Init+0x16>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009a2:	f100 0e04 	add.w	lr, r0, #4
 80009a6:	e746      	b.n	8000836 <HAL_GPIO_Init+0x1e>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80009a8:	f1a4 0508 	sub.w	r5, r4, #8
 80009ac:	00ad      	lsls	r5, r5, #2
 80009ae:	e746      	b.n	800083e <HAL_GPIO_Init+0x26>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009b0:	2705      	movs	r7, #5
 80009b2:	e788      	b.n	80008c6 <HAL_GPIO_Init+0xae>
 80009b4:	2700      	movs	r7, #0
 80009b6:	e786      	b.n	80008c6 <HAL_GPIO_Init+0xae>
 80009b8:	2701      	movs	r7, #1
 80009ba:	e784      	b.n	80008c6 <HAL_GPIO_Init+0xae>
 80009bc:	2702      	movs	r7, #2
 80009be:	e782      	b.n	80008c6 <HAL_GPIO_Init+0xae>
 80009c0:	2703      	movs	r7, #3
 80009c2:	e780      	b.n	80008c6 <HAL_GPIO_Init+0xae>
 80009c4:	2704      	movs	r7, #4
 80009c6:	e77e      	b.n	80008c6 <HAL_GPIO_Init+0xae>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009c8:	4d0f      	ldr	r5, [pc, #60]	; (8000a08 <HAL_GPIO_Init+0x1f0>)
 80009ca:	682a      	ldr	r2, [r5, #0]
 80009cc:	ea22 0203 	bic.w	r2, r2, r3
 80009d0:	602a      	str	r2, [r5, #0]
 80009d2:	e787      	b.n	80008e4 <HAL_GPIO_Init+0xcc>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80009d4:	4d0c      	ldr	r5, [pc, #48]	; (8000a08 <HAL_GPIO_Init+0x1f0>)
 80009d6:	686a      	ldr	r2, [r5, #4]
 80009d8:	ea22 0203 	bic.w	r2, r2, r3
 80009dc:	606a      	str	r2, [r5, #4]
 80009de:	e789      	b.n	80008f4 <HAL_GPIO_Init+0xdc>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009e0:	4d09      	ldr	r5, [pc, #36]	; (8000a08 <HAL_GPIO_Init+0x1f0>)
 80009e2:	68aa      	ldr	r2, [r5, #8]
 80009e4:	ea22 0203 	bic.w	r2, r2, r3
 80009e8:	60aa      	str	r2, [r5, #8]
 80009ea:	e78b      	b.n	8000904 <HAL_GPIO_Init+0xec>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009ec:	4d06      	ldr	r5, [pc, #24]	; (8000a08 <HAL_GPIO_Init+0x1f0>)
 80009ee:	68ea      	ldr	r2, [r5, #12]
 80009f0:	ea22 0303 	bic.w	r3, r2, r3
 80009f4:	60eb      	str	r3, [r5, #12]
 80009f6:	e78d      	b.n	8000914 <HAL_GPIO_Init+0xfc>
        }
      }
    }
  }
}
 80009f8:	b003      	add	sp, #12
 80009fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009fc:	40021000 	.word	0x40021000
 8000a00:	40010000 	.word	0x40010000
 8000a04:	40010800 	.word	0x40010800
 8000a08:	40010400 	.word	0x40010400
 8000a0c:	10210000 	.word	0x10210000
 8000a10:	10310000 	.word	0x10310000

08000a14 <HAL_GPIO_DeInit>:
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00U;
 8000a14:	2200      	movs	r2, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8000a16:	e071      	b.n	8000afc <HAL_GPIO_DeInit+0xe8>
    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a18:	f100 0e04 	add.w	lr, r0, #4
 8000a1c:	e015      	b.n	8000a4a <HAL_GPIO_DeInit+0x36>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000a1e:	f1a2 0608 	sub.w	r6, r2, #8
 8000a22:	00b7      	lsls	r7, r6, #2
 8000a24:	e014      	b.n	8000a50 <HAL_GPIO_DeInit+0x3c>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2U];
      tmp &= 0x0FU << (4U * (position & 0x03U));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8000a26:	2705      	movs	r7, #5
 8000a28:	e000      	b.n	8000a2c <HAL_GPIO_DeInit+0x18>
 8000a2a:	2700      	movs	r7, #0
 8000a2c:	fa07 f404 	lsl.w	r4, r7, r4
 8000a30:	42a6      	cmp	r6, r4
 8000a32:	d04a      	beq.n	8000aca <HAL_GPIO_DeInit+0xb6>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }

    position++;
 8000a34:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0U)
 8000a36:	fa31 f302 	lsrs.w	r3, r1, r2
 8000a3a:	d05d      	beq.n	8000af8 <HAL_GPIO_DeInit+0xe4>
    iocurrent = (GPIO_Pin) & (1U << position);
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	4093      	lsls	r3, r2
    if (iocurrent)
 8000a40:	400b      	ands	r3, r1
 8000a42:	d0f7      	beq.n	8000a34 <HAL_GPIO_DeInit+0x20>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a44:	2bff      	cmp	r3, #255	; 0xff
 8000a46:	d8e7      	bhi.n	8000a18 <HAL_GPIO_DeInit+0x4>
 8000a48:	4686      	mov	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000a4a:	2bff      	cmp	r3, #255	; 0xff
 8000a4c:	d8e7      	bhi.n	8000a1e <HAL_GPIO_DeInit+0xa>
 8000a4e:	0097      	lsls	r7, r2, #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8000a50:	f8de 4000 	ldr.w	r4, [lr]
 8000a54:	250f      	movs	r5, #15
 8000a56:	fa05 f607 	lsl.w	r6, r5, r7
 8000a5a:	ea24 0406 	bic.w	r4, r4, r6
 8000a5e:	2604      	movs	r6, #4
 8000a60:	40be      	lsls	r6, r7
 8000a62:	4334      	orrs	r4, r6
 8000a64:	f8ce 4000 	str.w	r4, [lr]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8000a68:	68c4      	ldr	r4, [r0, #12]
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	401c      	ands	r4, r3
 8000a6e:	60c4      	str	r4, [r0, #12]
      tmp = AFIO->EXTICR[position >> 2U];
 8000a70:	ea4f 0e92 	mov.w	lr, r2, lsr #2
 8000a74:	f10e 0602 	add.w	r6, lr, #2
 8000a78:	4c25      	ldr	r4, [pc, #148]	; (8000b10 <HAL_GPIO_DeInit+0xfc>)
 8000a7a:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
      tmp &= 0x0FU << (4U * (position & 0x03U));
 8000a7e:	f002 0403 	and.w	r4, r2, #3
 8000a82:	00a4      	lsls	r4, r4, #2
 8000a84:	40a5      	lsls	r5, r4
 8000a86:	402e      	ands	r6, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8000a88:	4f22      	ldr	r7, [pc, #136]	; (8000b14 <HAL_GPIO_DeInit+0x100>)
 8000a8a:	42b8      	cmp	r0, r7
 8000a8c:	d0cd      	beq.n	8000a2a <HAL_GPIO_DeInit+0x16>
 8000a8e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000a92:	42b8      	cmp	r0, r7
 8000a94:	d011      	beq.n	8000aba <HAL_GPIO_DeInit+0xa6>
 8000a96:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000a9a:	42b8      	cmp	r0, r7
 8000a9c:	d00f      	beq.n	8000abe <HAL_GPIO_DeInit+0xaa>
 8000a9e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000aa2:	42b8      	cmp	r0, r7
 8000aa4:	d00d      	beq.n	8000ac2 <HAL_GPIO_DeInit+0xae>
 8000aa6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000aaa:	42b8      	cmp	r0, r7
 8000aac:	d00b      	beq.n	8000ac6 <HAL_GPIO_DeInit+0xb2>
 8000aae:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000ab2:	42b8      	cmp	r0, r7
 8000ab4:	d0b7      	beq.n	8000a26 <HAL_GPIO_DeInit+0x12>
 8000ab6:	2706      	movs	r7, #6
 8000ab8:	e7b8      	b.n	8000a2c <HAL_GPIO_DeInit+0x18>
 8000aba:	2701      	movs	r7, #1
 8000abc:	e7b6      	b.n	8000a2c <HAL_GPIO_DeInit+0x18>
 8000abe:	2702      	movs	r7, #2
 8000ac0:	e7b4      	b.n	8000a2c <HAL_GPIO_DeInit+0x18>
 8000ac2:	2703      	movs	r7, #3
 8000ac4:	e7b2      	b.n	8000a2c <HAL_GPIO_DeInit+0x18>
 8000ac6:	2704      	movs	r7, #4
 8000ac8:	e7b0      	b.n	8000a2c <HAL_GPIO_DeInit+0x18>
        CLEAR_BIT(AFIO->EXTICR[position >> 2U], tmp);
 8000aca:	4f11      	ldr	r7, [pc, #68]	; (8000b10 <HAL_GPIO_DeInit+0xfc>)
 8000acc:	f10e 0402 	add.w	r4, lr, #2
 8000ad0:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
 8000ad4:	ea26 0505 	bic.w	r5, r6, r5
 8000ad8:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8000adc:	4c0e      	ldr	r4, [pc, #56]	; (8000b18 <HAL_GPIO_DeInit+0x104>)
 8000ade:	6825      	ldr	r5, [r4, #0]
 8000ae0:	401d      	ands	r5, r3
 8000ae2:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8000ae4:	6865      	ldr	r5, [r4, #4]
 8000ae6:	401d      	ands	r5, r3
 8000ae8:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8000aea:	68a5      	ldr	r5, [r4, #8]
 8000aec:	401d      	ands	r5, r3
 8000aee:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8000af0:	68e5      	ldr	r5, [r4, #12]
 8000af2:	402b      	ands	r3, r5
 8000af4:	60e3      	str	r3, [r4, #12]
 8000af6:	e79d      	b.n	8000a34 <HAL_GPIO_DeInit+0x20>
  }
}
 8000af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    position++;
 8000afa:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0U)
 8000afc:	fa31 f302 	lsrs.w	r3, r1, r2
 8000b00:	d005      	beq.n	8000b0e <HAL_GPIO_DeInit+0xfa>
    iocurrent = (GPIO_Pin) & (1U << position);
 8000b02:	2301      	movs	r3, #1
 8000b04:	4093      	lsls	r3, r2
    if (iocurrent)
 8000b06:	400b      	ands	r3, r1
 8000b08:	d0f7      	beq.n	8000afa <HAL_GPIO_DeInit+0xe6>
{
 8000b0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b0c:	e79a      	b.n	8000a44 <HAL_GPIO_DeInit+0x30>
 8000b0e:	4770      	bx	lr
 8000b10:	40010000 	.word	0x40010000
 8000b14:	40010800 	.word	0x40010800
 8000b18:	40010400 	.word	0x40010400

08000b1c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b1c:	6883      	ldr	r3, [r0, #8]
 8000b1e:	4219      	tst	r1, r3
 8000b20:	d101      	bne.n	8000b26 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b22:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8000b24:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8000b26:	2001      	movs	r0, #1
 8000b28:	4770      	bx	lr

08000b2a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b2a:	b912      	cbnz	r2, 8000b32 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b2c:	0409      	lsls	r1, r1, #16
 8000b2e:	6101      	str	r1, [r0, #16]
 8000b30:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000b32:	6101      	str	r1, [r0, #16]
 8000b34:	4770      	bx	lr

08000b36 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000b36:	68c3      	ldr	r3, [r0, #12]
 8000b38:	4059      	eors	r1, r3
 8000b3a:	60c1      	str	r1, [r0, #12]
 8000b3c:	4770      	bx	lr

08000b3e <HAL_GPIO_LockPin>:
* @param  GPIO_Pin: specifies the port bit to be locked.
*         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
* @retval None
*/
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b3e:	b082      	sub	sp, #8
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 8000b40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b44:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  SET_BIT(tmp, GPIO_Pin);
 8000b46:	9b01      	ldr	r3, [sp, #4]
 8000b48:	430b      	orrs	r3, r1
 8000b4a:	9301      	str	r3, [sp, #4]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8000b4c:	9b01      	ldr	r3, [sp, #4]
 8000b4e:	6183      	str	r3, [r0, #24]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 8000b50:	6181      	str	r1, [r0, #24]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8000b52:	9b01      	ldr	r3, [sp, #4]
 8000b54:	6183      	str	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000b56:	6983      	ldr	r3, [r0, #24]
 8000b58:	9301      	str	r3, [sp, #4]

  if ((uint32_t)(GPIOx->LCKR & GPIO_LCKR_LCKK))
 8000b5a:	6983      	ldr	r3, [r0, #24]
 8000b5c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000b60:	d102      	bne.n	8000b68 <HAL_GPIO_LockPin+0x2a>
  {
    return HAL_OK;
  }
  else
  {
    return HAL_ERROR;
 8000b62:	2001      	movs	r0, #1
  }
}
 8000b64:	b002      	add	sp, #8
 8000b66:	4770      	bx	lr
    return HAL_OK;
 8000b68:	2000      	movs	r0, #0
 8000b6a:	e7fb      	b.n	8000b64 <HAL_GPIO_LockPin+0x26>

08000b6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b6c:	4770      	bx	lr

08000b6e <HAL_GPIO_EXTI_IRQHandler>:
{
 8000b6e:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <HAL_GPIO_EXTI_IRQHandler+0x16>)
 8000b72:	695b      	ldr	r3, [r3, #20]
 8000b74:	4203      	tst	r3, r0
 8000b76:	d100      	bne.n	8000b7a <HAL_GPIO_EXTI_IRQHandler+0xc>
 8000b78:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b7a:	4b02      	ldr	r3, [pc, #8]	; (8000b84 <HAL_GPIO_EXTI_IRQHandler+0x16>)
 8000b7c:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b7e:	f7ff fff5 	bl	8000b6c <HAL_GPIO_EXTI_Callback>
}
 8000b82:	e7f9      	b.n	8000b78 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000b84:	40010400 	.word	0x40010400

08000b88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000b88:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <RCC_Delay+0x24>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a08      	ldr	r2, [pc, #32]	; (8000bb0 <RCC_Delay+0x28>)
 8000b90:	fba2 2303 	umull	r2, r3, r2, r3
 8000b94:	0a5b      	lsrs	r3, r3, #9
 8000b96:	fb00 f003 	mul.w	r0, r0, r3
 8000b9a:	9001      	str	r0, [sp, #4]
 8000b9c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000b9e:	9b01      	ldr	r3, [sp, #4]
 8000ba0:	1e5a      	subs	r2, r3, #1
 8000ba2:	9201      	str	r2, [sp, #4]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d1f9      	bne.n	8000b9c <RCC_Delay+0x14>
}
 8000ba8:	b002      	add	sp, #8
 8000baa:	4770      	bx	lr
 8000bac:	20000000 	.word	0x20000000
 8000bb0:	10624dd3 	.word	0x10624dd3

08000bb4 <HAL_RCC_DeInit>:
{
 8000bb4:	b570      	push	{r4, r5, r6, lr}
  tickstart = HAL_GetTick();
 8000bb6:	f7ff fc8d 	bl	80004d4 <HAL_GetTick>
 8000bba:	4604      	mov	r4, r0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000bbc:	4a35      	ldr	r2, [pc, #212]	; (8000c94 <HAL_RCC_DeInit+0xe0>)
 8000bbe:	6813      	ldr	r3, [r2, #0]
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000bc6:	4b33      	ldr	r3, [pc, #204]	; (8000c94 <HAL_RCC_DeInit+0xe0>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f013 0f02 	tst.w	r3, #2
 8000bce:	d107      	bne.n	8000be0 <HAL_RCC_DeInit+0x2c>
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bd0:	f7ff fc80 	bl	80004d4 <HAL_GetTick>
 8000bd4:	1b00      	subs	r0, r0, r4
 8000bd6:	2802      	cmp	r0, #2
 8000bd8:	d9f5      	bls.n	8000bc6 <HAL_RCC_DeInit+0x12>
      return HAL_TIMEOUT;
 8000bda:	2403      	movs	r4, #3
}
 8000bdc:	4620      	mov	r0, r4
 8000bde:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8000be0:	4d2c      	ldr	r5, [pc, #176]	; (8000c94 <HAL_RCC_DeInit+0xe0>)
 8000be2:	682b      	ldr	r3, [r5, #0]
 8000be4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bec:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8000bee:	f7ff fc71 	bl	80004d4 <HAL_GetTick>
 8000bf2:	4604      	mov	r4, r0
  CLEAR_REG(RCC->CFGR);
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	606b      	str	r3, [r5, #4]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8000bf8:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <HAL_RCC_DeInit+0xe0>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f013 0f0c 	tst.w	r3, #12
 8000c00:	d008      	beq.n	8000c14 <HAL_RCC_DeInit+0x60>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c02:	f7ff fc67 	bl	80004d4 <HAL_GetTick>
 8000c06:	1b00      	subs	r0, r0, r4
 8000c08:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c0c:	4298      	cmp	r0, r3
 8000c0e:	d9f3      	bls.n	8000bf8 <HAL_RCC_DeInit+0x44>
      return HAL_TIMEOUT;
 8000c10:	2403      	movs	r4, #3
 8000c12:	e7e3      	b.n	8000bdc <HAL_RCC_DeInit+0x28>
  SystemCoreClock = HSI_VALUE;
 8000c14:	4a20      	ldr	r2, [pc, #128]	; (8000c98 <HAL_RCC_DeInit+0xe4>)
 8000c16:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <HAL_RCC_DeInit+0xe8>)
 8000c18:	601a      	str	r2, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c1a:	200f      	movs	r0, #15
 8000c1c:	f7ff fc18 	bl	8000450 <HAL_InitTick>
 8000c20:	4604      	mov	r4, r0
 8000c22:	b108      	cbz	r0, 8000c28 <HAL_RCC_DeInit+0x74>
    return HAL_ERROR;
 8000c24:	2401      	movs	r4, #1
 8000c26:	e7d9      	b.n	8000bdc <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 8000c28:	f7ff fc54 	bl	80004d4 <HAL_GetTick>
 8000c2c:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000c2e:	4a19      	ldr	r2, [pc, #100]	; (8000c94 <HAL_RCC_DeInit+0xe0>)
 8000c30:	6813      	ldr	r3, [r2, #0]
 8000c32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c36:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <HAL_RCC_DeInit+0xe0>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c40:	d006      	beq.n	8000c50 <HAL_RCC_DeInit+0x9c>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c42:	f7ff fc47 	bl	80004d4 <HAL_GetTick>
 8000c46:	1b40      	subs	r0, r0, r5
 8000c48:	2802      	cmp	r0, #2
 8000c4a:	d9f5      	bls.n	8000c38 <HAL_RCC_DeInit+0x84>
      return HAL_TIMEOUT;
 8000c4c:	2403      	movs	r4, #3
 8000c4e:	e7c5      	b.n	8000bdc <HAL_RCC_DeInit+0x28>
  CLEAR_REG(RCC->CFGR);
 8000c50:	4e10      	ldr	r6, [pc, #64]	; (8000c94 <HAL_RCC_DeInit+0xe0>)
 8000c52:	2300      	movs	r3, #0
 8000c54:	6073      	str	r3, [r6, #4]
  tickstart = HAL_GetTick();
 8000c56:	f7ff fc3d 	bl	80004d4 <HAL_GetTick>
 8000c5a:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8000c5c:	6833      	ldr	r3, [r6, #0]
 8000c5e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c62:	6033      	str	r3, [r6, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <HAL_RCC_DeInit+0xe0>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000c6c:	d006      	beq.n	8000c7c <HAL_RCC_DeInit+0xc8>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c6e:	f7ff fc31 	bl	80004d4 <HAL_GetTick>
 8000c72:	1b40      	subs	r0, r0, r5
 8000c74:	2864      	cmp	r0, #100	; 0x64
 8000c76:	d9f5      	bls.n	8000c64 <HAL_RCC_DeInit+0xb0>
      return HAL_TIMEOUT;
 8000c78:	2403      	movs	r4, #3
 8000c7a:	e7af      	b.n	8000bdc <HAL_RCC_DeInit+0x28>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <HAL_RCC_DeInit+0xe0>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c84:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8000c86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c88:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000c8c:	625a      	str	r2, [r3, #36]	; 0x24
  CLEAR_REG(RCC->CIR);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8000c92:	e7a3      	b.n	8000bdc <HAL_RCC_DeInit+0x28>
 8000c94:	40021000 	.word	0x40021000
 8000c98:	007a1200 	.word	0x007a1200
 8000c9c:	20000000 	.word	0x20000000

08000ca0 <HAL_RCC_OscConfig>:
{
 8000ca0:	b570      	push	{r4, r5, r6, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ca6:	6803      	ldr	r3, [r0, #0]
 8000ca8:	f013 0f01 	tst.w	r3, #1
 8000cac:	d03d      	beq.n	8000d2a <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cae:	4bac      	ldr	r3, [pc, #688]	; (8000f60 <HAL_RCC_OscConfig+0x2c0>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f003 030c 	and.w	r3, r3, #12
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	d02e      	beq.n	8000d18 <HAL_RCC_OscConfig+0x78>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cba:	4ba9      	ldr	r3, [pc, #676]	; (8000f60 <HAL_RCC_OscConfig+0x2c0>)
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f003 030c 	and.w	r3, r3, #12
 8000cc2:	2b08      	cmp	r3, #8
 8000cc4:	d023      	beq.n	8000d0e <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cc6:	6863      	ldr	r3, [r4, #4]
 8000cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ccc:	d051      	beq.n	8000d72 <HAL_RCC_OscConfig+0xd2>
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d155      	bne.n	8000d7e <HAL_RCC_OscConfig+0xde>
 8000cd2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000cd6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ce8:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cea:	6863      	ldr	r3, [r4, #4]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d060      	beq.n	8000db2 <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 8000cf0:	f7ff fbf0 	bl	80004d4 <HAL_GetTick>
 8000cf4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf6:	4b9a      	ldr	r3, [pc, #616]	; (8000f60 <HAL_RCC_OscConfig+0x2c0>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000cfe:	d114      	bne.n	8000d2a <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d00:	f7ff fbe8 	bl	80004d4 <HAL_GetTick>
 8000d04:	1b40      	subs	r0, r0, r5
 8000d06:	2864      	cmp	r0, #100	; 0x64
 8000d08:	d9f5      	bls.n	8000cf6 <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 8000d0a:	2003      	movs	r0, #3
 8000d0c:	e1af      	b.n	800106e <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d0e:	4b94      	ldr	r3, [pc, #592]	; (8000f60 <HAL_RCC_OscConfig+0x2c0>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000d16:	d0d6      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d18:	4b91      	ldr	r3, [pc, #580]	; (8000f60 <HAL_RCC_OscConfig+0x2c0>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000d20:	d003      	beq.n	8000d2a <HAL_RCC_OscConfig+0x8a>
 8000d22:	6863      	ldr	r3, [r4, #4]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	f000 819f 	beq.w	8001068 <HAL_RCC_OscConfig+0x3c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d2a:	6823      	ldr	r3, [r4, #0]
 8000d2c:	f013 0f02 	tst.w	r3, #2
 8000d30:	d065      	beq.n	8000dfe <HAL_RCC_OscConfig+0x15e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d32:	4b8b      	ldr	r3, [pc, #556]	; (8000f60 <HAL_RCC_OscConfig+0x2c0>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f013 0f0c 	tst.w	r3, #12
 8000d3a:	d04e      	beq.n	8000dda <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d3c:	4b88      	ldr	r3, [pc, #544]	; (8000f60 <HAL_RCC_OscConfig+0x2c0>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 030c 	and.w	r3, r3, #12
 8000d44:	2b08      	cmp	r3, #8
 8000d46:	d043      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x130>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d48:	6923      	ldr	r3, [r4, #16]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d079      	beq.n	8000e42 <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4b84      	ldr	r3, [pc, #528]	; (8000f64 <HAL_RCC_OscConfig+0x2c4>)
 8000d52:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d54:	f7ff fbbe 	bl	80004d4 <HAL_GetTick>
 8000d58:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d5a:	4b81      	ldr	r3, [pc, #516]	; (8000f60 <HAL_RCC_OscConfig+0x2c0>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f013 0f02 	tst.w	r3, #2
 8000d62:	d165      	bne.n	8000e30 <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d64:	f7ff fbb6 	bl	80004d4 <HAL_GetTick>
 8000d68:	1b40      	subs	r0, r0, r5
 8000d6a:	2802      	cmp	r0, #2
 8000d6c:	d9f5      	bls.n	8000d5a <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 8000d6e:	2003      	movs	r0, #3
 8000d70:	e17d      	b.n	800106e <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d72:	4a7b      	ldr	r2, [pc, #492]	; (8000f60 <HAL_RCC_OscConfig+0x2c0>)
 8000d74:	6813      	ldr	r3, [r2, #0]
 8000d76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d7a:	6013      	str	r3, [r2, #0]
 8000d7c:	e7b5      	b.n	8000cea <HAL_RCC_OscConfig+0x4a>
 8000d7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d82:	d009      	beq.n	8000d98 <HAL_RCC_OscConfig+0xf8>
 8000d84:	4b76      	ldr	r3, [pc, #472]	; (8000f60 <HAL_RCC_OscConfig+0x2c0>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	e7a8      	b.n	8000cea <HAL_RCC_OscConfig+0x4a>
 8000d98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d9c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	e79b      	b.n	8000cea <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 8000db2:	f7ff fb8f 	bl	80004d4 <HAL_GetTick>
 8000db6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000db8:	4b69      	ldr	r3, [pc, #420]	; (8000f60 <HAL_RCC_OscConfig+0x2c0>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000dc0:	d0b3      	beq.n	8000d2a <HAL_RCC_OscConfig+0x8a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dc2:	f7ff fb87 	bl	80004d4 <HAL_GetTick>
 8000dc6:	1b40      	subs	r0, r0, r5
 8000dc8:	2864      	cmp	r0, #100	; 0x64
 8000dca:	d9f5      	bls.n	8000db8 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8000dcc:	2003      	movs	r0, #3
 8000dce:	e14e      	b.n	800106e <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dd0:	4b63      	ldr	r3, [pc, #396]	; (8000f60 <HAL_RCC_OscConfig+0x2c0>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000dd8:	d1b6      	bne.n	8000d48 <HAL_RCC_OscConfig+0xa8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dda:	4b61      	ldr	r3, [pc, #388]	; (8000f60 <HAL_RCC_OscConfig+0x2c0>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f013 0f02 	tst.w	r3, #2
 8000de2:	d004      	beq.n	8000dee <HAL_RCC_OscConfig+0x14e>
 8000de4:	6923      	ldr	r3, [r4, #16]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d001      	beq.n	8000dee <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 8000dea:	2001      	movs	r0, #1
 8000dec:	e13f      	b.n	800106e <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dee:	4a5c      	ldr	r2, [pc, #368]	; (8000f60 <HAL_RCC_OscConfig+0x2c0>)
 8000df0:	6813      	ldr	r3, [r2, #0]
 8000df2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000df6:	6961      	ldr	r1, [r4, #20]
 8000df8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000dfc:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dfe:	6823      	ldr	r3, [r4, #0]
 8000e00:	f013 0f08 	tst.w	r3, #8
 8000e04:	d032      	beq.n	8000e6c <HAL_RCC_OscConfig+0x1cc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e06:	69a3      	ldr	r3, [r4, #24]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d06e      	beq.n	8000eea <HAL_RCC_OscConfig+0x24a>
      __HAL_RCC_LSI_ENABLE();
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	4b56      	ldr	r3, [pc, #344]	; (8000f68 <HAL_RCC_OscConfig+0x2c8>)
 8000e10:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e12:	f7ff fb5f 	bl	80004d4 <HAL_GetTick>
 8000e16:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e18:	4b51      	ldr	r3, [pc, #324]	; (8000f60 <HAL_RCC_OscConfig+0x2c0>)
 8000e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1c:	f013 0f02 	tst.w	r3, #2
 8000e20:	d121      	bne.n	8000e66 <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e22:	f7ff fb57 	bl	80004d4 <HAL_GetTick>
 8000e26:	1b40      	subs	r0, r0, r5
 8000e28:	2802      	cmp	r0, #2
 8000e2a:	d9f5      	bls.n	8000e18 <HAL_RCC_OscConfig+0x178>
          return HAL_TIMEOUT;
 8000e2c:	2003      	movs	r0, #3
 8000e2e:	e11e      	b.n	800106e <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e30:	4a4b      	ldr	r2, [pc, #300]	; (8000f60 <HAL_RCC_OscConfig+0x2c0>)
 8000e32:	6813      	ldr	r3, [r2, #0]
 8000e34:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e38:	6961      	ldr	r1, [r4, #20]
 8000e3a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e3e:	6013      	str	r3, [r2, #0]
 8000e40:	e7dd      	b.n	8000dfe <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 8000e42:	2200      	movs	r2, #0
 8000e44:	4b47      	ldr	r3, [pc, #284]	; (8000f64 <HAL_RCC_OscConfig+0x2c4>)
 8000e46:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e48:	f7ff fb44 	bl	80004d4 <HAL_GetTick>
 8000e4c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e4e:	4b44      	ldr	r3, [pc, #272]	; (8000f60 <HAL_RCC_OscConfig+0x2c0>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f013 0f02 	tst.w	r3, #2
 8000e56:	d0d2      	beq.n	8000dfe <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e58:	f7ff fb3c 	bl	80004d4 <HAL_GetTick>
 8000e5c:	1b40      	subs	r0, r0, r5
 8000e5e:	2802      	cmp	r0, #2
 8000e60:	d9f5      	bls.n	8000e4e <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 8000e62:	2003      	movs	r0, #3
 8000e64:	e103      	b.n	800106e <HAL_RCC_OscConfig+0x3ce>
      RCC_Delay(1);
 8000e66:	2001      	movs	r0, #1
 8000e68:	f7ff fe8e 	bl	8000b88 <RCC_Delay>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e6c:	6823      	ldr	r3, [r4, #0]
 8000e6e:	f013 0f04 	tst.w	r3, #4
 8000e72:	f000 8099 	beq.w	8000fa8 <HAL_RCC_OscConfig+0x308>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e76:	4b3a      	ldr	r3, [pc, #232]	; (8000f60 <HAL_RCC_OscConfig+0x2c0>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000e7e:	d146      	bne.n	8000f0e <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e80:	4b37      	ldr	r3, [pc, #220]	; (8000f60 <HAL_RCC_OscConfig+0x2c0>)
 8000e82:	69da      	ldr	r2, [r3, #28]
 8000e84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e88:	61da      	str	r2, [r3, #28]
 8000e8a:	69db      	ldr	r3, [r3, #28]
 8000e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e90:	9301      	str	r3, [sp, #4]
 8000e92:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e94:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e96:	4b35      	ldr	r3, [pc, #212]	; (8000f6c <HAL_RCC_OscConfig+0x2cc>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000e9e:	d038      	beq.n	8000f12 <HAL_RCC_OscConfig+0x272>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea0:	68e3      	ldr	r3, [r4, #12]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d049      	beq.n	8000f3a <HAL_RCC_OscConfig+0x29a>
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d14d      	bne.n	8000f46 <HAL_RCC_OscConfig+0x2a6>
 8000eaa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000eae:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000eb2:	6a1a      	ldr	r2, [r3, #32]
 8000eb4:	f022 0201 	bic.w	r2, r2, #1
 8000eb8:	621a      	str	r2, [r3, #32]
 8000eba:	6a1a      	ldr	r2, [r3, #32]
 8000ebc:	f022 0204 	bic.w	r2, r2, #4
 8000ec0:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ec2:	68e3      	ldr	r3, [r4, #12]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d05d      	beq.n	8000f84 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8000ec8:	f7ff fb04 	bl	80004d4 <HAL_GetTick>
 8000ecc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ece:	4b24      	ldr	r3, [pc, #144]	; (8000f60 <HAL_RCC_OscConfig+0x2c0>)
 8000ed0:	6a1b      	ldr	r3, [r3, #32]
 8000ed2:	f013 0f02 	tst.w	r3, #2
 8000ed6:	d166      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ed8:	f7ff fafc 	bl	80004d4 <HAL_GetTick>
 8000edc:	1b80      	subs	r0, r0, r6
 8000ede:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ee2:	4298      	cmp	r0, r3
 8000ee4:	d9f3      	bls.n	8000ece <HAL_RCC_OscConfig+0x22e>
          return HAL_TIMEOUT;
 8000ee6:	2003      	movs	r0, #3
 8000ee8:	e0c1      	b.n	800106e <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_LSI_DISABLE();
 8000eea:	2200      	movs	r2, #0
 8000eec:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <HAL_RCC_OscConfig+0x2c8>)
 8000eee:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ef0:	f7ff faf0 	bl	80004d4 <HAL_GetTick>
 8000ef4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ef6:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <HAL_RCC_OscConfig+0x2c0>)
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efa:	f013 0f02 	tst.w	r3, #2
 8000efe:	d0b5      	beq.n	8000e6c <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f00:	f7ff fae8 	bl	80004d4 <HAL_GetTick>
 8000f04:	1b40      	subs	r0, r0, r5
 8000f06:	2802      	cmp	r0, #2
 8000f08:	d9f5      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8000f0a:	2003      	movs	r0, #3
 8000f0c:	e0af      	b.n	800106e <HAL_RCC_OscConfig+0x3ce>
    FlagStatus       pwrclkchanged = RESET;
 8000f0e:	2500      	movs	r5, #0
 8000f10:	e7c1      	b.n	8000e96 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f12:	4a16      	ldr	r2, [pc, #88]	; (8000f6c <HAL_RCC_OscConfig+0x2cc>)
 8000f14:	6813      	ldr	r3, [r2, #0]
 8000f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000f1c:	f7ff fada 	bl	80004d4 <HAL_GetTick>
 8000f20:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f22:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_RCC_OscConfig+0x2cc>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000f2a:	d1b9      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f2c:	f7ff fad2 	bl	80004d4 <HAL_GetTick>
 8000f30:	1b80      	subs	r0, r0, r6
 8000f32:	2864      	cmp	r0, #100	; 0x64
 8000f34:	d9f5      	bls.n	8000f22 <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 8000f36:	2003      	movs	r0, #3
 8000f38:	e099      	b.n	800106e <HAL_RCC_OscConfig+0x3ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f3a:	4a09      	ldr	r2, [pc, #36]	; (8000f60 <HAL_RCC_OscConfig+0x2c0>)
 8000f3c:	6a13      	ldr	r3, [r2, #32]
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	6213      	str	r3, [r2, #32]
 8000f44:	e7bd      	b.n	8000ec2 <HAL_RCC_OscConfig+0x222>
 8000f46:	2b05      	cmp	r3, #5
 8000f48:	d012      	beq.n	8000f70 <HAL_RCC_OscConfig+0x2d0>
 8000f4a:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_RCC_OscConfig+0x2c0>)
 8000f4c:	6a1a      	ldr	r2, [r3, #32]
 8000f4e:	f022 0201 	bic.w	r2, r2, #1
 8000f52:	621a      	str	r2, [r3, #32]
 8000f54:	6a1a      	ldr	r2, [r3, #32]
 8000f56:	f022 0204 	bic.w	r2, r2, #4
 8000f5a:	621a      	str	r2, [r3, #32]
 8000f5c:	e7b1      	b.n	8000ec2 <HAL_RCC_OscConfig+0x222>
 8000f5e:	bf00      	nop
 8000f60:	40021000 	.word	0x40021000
 8000f64:	42420000 	.word	0x42420000
 8000f68:	42420480 	.word	0x42420480
 8000f6c:	40007000 	.word	0x40007000
 8000f70:	4b41      	ldr	r3, [pc, #260]	; (8001078 <HAL_RCC_OscConfig+0x3d8>)
 8000f72:	6a1a      	ldr	r2, [r3, #32]
 8000f74:	f042 0204 	orr.w	r2, r2, #4
 8000f78:	621a      	str	r2, [r3, #32]
 8000f7a:	6a1a      	ldr	r2, [r3, #32]
 8000f7c:	f042 0201 	orr.w	r2, r2, #1
 8000f80:	621a      	str	r2, [r3, #32]
 8000f82:	e79e      	b.n	8000ec2 <HAL_RCC_OscConfig+0x222>
      tickstart = HAL_GetTick();
 8000f84:	f7ff faa6 	bl	80004d4 <HAL_GetTick>
 8000f88:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f8a:	4b3b      	ldr	r3, [pc, #236]	; (8001078 <HAL_RCC_OscConfig+0x3d8>)
 8000f8c:	6a1b      	ldr	r3, [r3, #32]
 8000f8e:	f013 0f02 	tst.w	r3, #2
 8000f92:	d008      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f94:	f7ff fa9e 	bl	80004d4 <HAL_GetTick>
 8000f98:	1b80      	subs	r0, r0, r6
 8000f9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f9e:	4298      	cmp	r0, r3
 8000fa0:	d9f3      	bls.n	8000f8a <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8000fa2:	2003      	movs	r0, #3
 8000fa4:	e063      	b.n	800106e <HAL_RCC_OscConfig+0x3ce>
    if(pwrclkchanged == SET)
 8000fa6:	b9e5      	cbnz	r5, 8000fe2 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fa8:	69e3      	ldr	r3, [r4, #28]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d05e      	beq.n	800106c <HAL_RCC_OscConfig+0x3cc>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fae:	4a32      	ldr	r2, [pc, #200]	; (8001078 <HAL_RCC_OscConfig+0x3d8>)
 8000fb0:	6852      	ldr	r2, [r2, #4]
 8000fb2:	f002 020c 	and.w	r2, r2, #12
 8000fb6:	2a08      	cmp	r2, #8
 8000fb8:	d05b      	beq.n	8001072 <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d017      	beq.n	8000fee <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	4b2e      	ldr	r3, [pc, #184]	; (800107c <HAL_RCC_OscConfig+0x3dc>)
 8000fc2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fa86 	bl	80004d4 <HAL_GetTick>
 8000fc8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fca:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <HAL_RCC_OscConfig+0x3d8>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000fd2:	d047      	beq.n	8001064 <HAL_RCC_OscConfig+0x3c4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fd4:	f7ff fa7e 	bl	80004d4 <HAL_GetTick>
 8000fd8:	1b00      	subs	r0, r0, r4
 8000fda:	2802      	cmp	r0, #2
 8000fdc:	d9f5      	bls.n	8000fca <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8000fde:	2003      	movs	r0, #3
 8000fe0:	e045      	b.n	800106e <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fe2:	4a25      	ldr	r2, [pc, #148]	; (8001078 <HAL_RCC_OscConfig+0x3d8>)
 8000fe4:	69d3      	ldr	r3, [r2, #28]
 8000fe6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fea:	61d3      	str	r3, [r2, #28]
 8000fec:	e7dc      	b.n	8000fa8 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8000fee:	2200      	movs	r2, #0
 8000ff0:	4b22      	ldr	r3, [pc, #136]	; (800107c <HAL_RCC_OscConfig+0x3dc>)
 8000ff2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ff4:	f7ff fa6e 	bl	80004d4 <HAL_GetTick>
 8000ff8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ffa:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <HAL_RCC_OscConfig+0x3d8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001002:	d006      	beq.n	8001012 <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001004:	f7ff fa66 	bl	80004d4 <HAL_GetTick>
 8001008:	1b40      	subs	r0, r0, r5
 800100a:	2802      	cmp	r0, #2
 800100c:	d9f5      	bls.n	8000ffa <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 800100e:	2003      	movs	r0, #3
 8001010:	e02d      	b.n	800106e <HAL_RCC_OscConfig+0x3ce>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001012:	6a23      	ldr	r3, [r4, #32]
 8001014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001018:	d01a      	beq.n	8001050 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800101a:	4917      	ldr	r1, [pc, #92]	; (8001078 <HAL_RCC_OscConfig+0x3d8>)
 800101c:	684b      	ldr	r3, [r1, #4]
 800101e:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001022:	6a22      	ldr	r2, [r4, #32]
 8001024:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001026:	4302      	orrs	r2, r0
 8001028:	4313      	orrs	r3, r2
 800102a:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 800102c:	2201      	movs	r2, #1
 800102e:	4b13      	ldr	r3, [pc, #76]	; (800107c <HAL_RCC_OscConfig+0x3dc>)
 8001030:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001032:	f7ff fa4f 	bl	80004d4 <HAL_GetTick>
 8001036:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <HAL_RCC_OscConfig+0x3d8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001040:	d10e      	bne.n	8001060 <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001042:	f7ff fa47 	bl	80004d4 <HAL_GetTick>
 8001046:	1b00      	subs	r0, r0, r4
 8001048:	2802      	cmp	r0, #2
 800104a:	d9f5      	bls.n	8001038 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 800104c:	2003      	movs	r0, #3
 800104e:	e00e      	b.n	800106e <HAL_RCC_OscConfig+0x3ce>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001050:	4a09      	ldr	r2, [pc, #36]	; (8001078 <HAL_RCC_OscConfig+0x3d8>)
 8001052:	6853      	ldr	r3, [r2, #4]
 8001054:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001058:	68a1      	ldr	r1, [r4, #8]
 800105a:	430b      	orrs	r3, r1
 800105c:	6053      	str	r3, [r2, #4]
 800105e:	e7dc      	b.n	800101a <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8001060:	2000      	movs	r0, #0
 8001062:	e004      	b.n	800106e <HAL_RCC_OscConfig+0x3ce>
 8001064:	2000      	movs	r0, #0
 8001066:	e002      	b.n	800106e <HAL_RCC_OscConfig+0x3ce>
        return HAL_ERROR;
 8001068:	2001      	movs	r0, #1
 800106a:	e000      	b.n	800106e <HAL_RCC_OscConfig+0x3ce>
  return HAL_OK;
 800106c:	2000      	movs	r0, #0
}
 800106e:	b002      	add	sp, #8
 8001070:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001072:	2001      	movs	r0, #1
 8001074:	e7fb      	b.n	800106e <HAL_RCC_OscConfig+0x3ce>
 8001076:	bf00      	nop
 8001078:	40021000 	.word	0x40021000
 800107c:	42420060 	.word	0x42420060

08001080 <HAL_RCC_MCOConfig>:
{
 8001080:	b530      	push	{r4, r5, lr}
 8001082:	b087      	sub	sp, #28
 8001084:	460d      	mov	r5, r1
  GPIO_InitTypeDef gpio = {0U};
 8001086:	2300      	movs	r3, #0
 8001088:	9304      	str	r3, [sp, #16]
  gpio.Mode      = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	9303      	str	r3, [sp, #12]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800108e:	2303      	movs	r3, #3
 8001090:	9305      	str	r3, [sp, #20]
  gpio.Pin       = MCO1_PIN;
 8001092:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001096:	9302      	str	r3, [sp, #8]
  MCO1_CLK_ENABLE();
 8001098:	4c0a      	ldr	r4, [pc, #40]	; (80010c4 <HAL_RCC_MCOConfig+0x44>)
 800109a:	69a3      	ldr	r3, [r4, #24]
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	61a3      	str	r3, [r4, #24]
 80010a2:	69a3      	ldr	r3, [r4, #24]
 80010a4:	f003 0304 	and.w	r3, r3, #4
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80010ac:	a902      	add	r1, sp, #8
 80010ae:	4806      	ldr	r0, [pc, #24]	; (80010c8 <HAL_RCC_MCOConfig+0x48>)
 80010b0:	f7ff fbb2 	bl	8000818 <HAL_GPIO_Init>
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80010b4:	6861      	ldr	r1, [r4, #4]
 80010b6:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 80010ba:	4329      	orrs	r1, r5
 80010bc:	6061      	str	r1, [r4, #4]
}
 80010be:	b007      	add	sp, #28
 80010c0:	bd30      	pop	{r4, r5, pc}
 80010c2:	bf00      	nop
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40010800 	.word	0x40010800

080010cc <HAL_RCC_EnableCSS>:
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80010cc:	2201      	movs	r2, #1
 80010ce:	4b01      	ldr	r3, [pc, #4]	; (80010d4 <HAL_RCC_EnableCSS+0x8>)
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	4770      	bx	lr
 80010d4:	4242004c 	.word	0x4242004c

080010d8 <HAL_RCC_DisableCSS>:
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 80010d8:	2200      	movs	r2, #0
 80010da:	4b01      	ldr	r3, [pc, #4]	; (80010e0 <HAL_RCC_DisableCSS+0x8>)
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	4770      	bx	lr
 80010e0:	4242004c 	.word	0x4242004c

080010e4 <HAL_RCC_GetSysClockFreq>:
{
 80010e4:	b510      	push	{r4, lr}
 80010e6:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80010e8:	4c15      	ldr	r4, [pc, #84]	; (8001140 <HAL_RCC_GetSysClockFreq+0x5c>)
 80010ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010ee:	f10d 0e18 	add.w	lr, sp, #24
 80010f2:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80010f6:	8a23      	ldrh	r3, [r4, #16]
 80010f8:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <HAL_RCC_GetSysClockFreq+0x60>)
 80010fe:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001100:	f003 020c 	and.w	r2, r3, #12
 8001104:	2a08      	cmp	r2, #8
 8001106:	d118      	bne.n	800113a <HAL_RCC_GetSysClockFreq+0x56>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001108:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800110c:	4472      	add	r2, lr
 800110e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001112:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001116:	d103      	bne.n	8001120 <HAL_RCC_GetSysClockFreq+0x3c>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001118:	480b      	ldr	r0, [pc, #44]	; (8001148 <HAL_RCC_GetSysClockFreq+0x64>)
 800111a:	fb00 f002 	mul.w	r0, r0, r2
 800111e:	e00d      	b.n	800113c <HAL_RCC_GetSysClockFreq+0x58>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <HAL_RCC_GetSysClockFreq+0x60>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001128:	4473      	add	r3, lr
 800112a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800112e:	4807      	ldr	r0, [pc, #28]	; (800114c <HAL_RCC_GetSysClockFreq+0x68>)
 8001130:	fb00 f002 	mul.w	r0, r0, r2
 8001134:	fbb0 f0f3 	udiv	r0, r0, r3
 8001138:	e000      	b.n	800113c <HAL_RCC_GetSysClockFreq+0x58>
      sysclockfreq = HSE_VALUE;
 800113a:	4804      	ldr	r0, [pc, #16]	; (800114c <HAL_RCC_GetSysClockFreq+0x68>)
}
 800113c:	b006      	add	sp, #24
 800113e:	bd10      	pop	{r4, pc}
 8001140:	08001534 	.word	0x08001534
 8001144:	40021000 	.word	0x40021000
 8001148:	003d0900 	.word	0x003d0900
 800114c:	007a1200 	.word	0x007a1200

08001150 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001150:	4b62      	ldr	r3, [pc, #392]	; (80012dc <HAL_RCC_ClockConfig+0x18c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	428b      	cmp	r3, r1
 800115a:	d20c      	bcs.n	8001176 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800115c:	4a5f      	ldr	r2, [pc, #380]	; (80012dc <HAL_RCC_ClockConfig+0x18c>)
 800115e:	6813      	ldr	r3, [r2, #0]
 8001160:	f023 0307 	bic.w	r3, r3, #7
 8001164:	430b      	orrs	r3, r1
 8001166:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001168:	6813      	ldr	r3, [r2, #0]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	4299      	cmp	r1, r3
 8001170:	d001      	beq.n	8001176 <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8001172:	2001      	movs	r0, #1
 8001174:	4770      	bx	lr
{
 8001176:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001178:	6803      	ldr	r3, [r0, #0]
 800117a:	f013 0f02 	tst.w	r3, #2
 800117e:	d017      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x60>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001180:	f013 0f04 	tst.w	r3, #4
 8001184:	d004      	beq.n	8001190 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001186:	4a56      	ldr	r2, [pc, #344]	; (80012e0 <HAL_RCC_ClockConfig+0x190>)
 8001188:	6853      	ldr	r3, [r2, #4]
 800118a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800118e:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001190:	6803      	ldr	r3, [r0, #0]
 8001192:	f013 0f08 	tst.w	r3, #8
 8001196:	d004      	beq.n	80011a2 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001198:	4a51      	ldr	r2, [pc, #324]	; (80012e0 <HAL_RCC_ClockConfig+0x190>)
 800119a:	6853      	ldr	r3, [r2, #4]
 800119c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80011a0:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011a2:	4a4f      	ldr	r2, [pc, #316]	; (80012e0 <HAL_RCC_ClockConfig+0x190>)
 80011a4:	6853      	ldr	r3, [r2, #4]
 80011a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80011aa:	6884      	ldr	r4, [r0, #8]
 80011ac:	4323      	orrs	r3, r4
 80011ae:	6053      	str	r3, [r2, #4]
 80011b0:	460d      	mov	r5, r1
 80011b2:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011b4:	6803      	ldr	r3, [r0, #0]
 80011b6:	f013 0f01 	tst.w	r3, #1
 80011ba:	d052      	beq.n	8001262 <HAL_RCC_ClockConfig+0x112>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011bc:	6843      	ldr	r3, [r0, #4]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d023      	beq.n	800120a <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d028      	beq.n	8001218 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c6:	4a46      	ldr	r2, [pc, #280]	; (80012e0 <HAL_RCC_ClockConfig+0x190>)
 80011c8:	6812      	ldr	r2, [r2, #0]
 80011ca:	f012 0f02 	tst.w	r2, #2
 80011ce:	f000 8082 	beq.w	80012d6 <HAL_RCC_ClockConfig+0x186>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011d2:	4943      	ldr	r1, [pc, #268]	; (80012e0 <HAL_RCC_ClockConfig+0x190>)
 80011d4:	684a      	ldr	r2, [r1, #4]
 80011d6:	f022 0203 	bic.w	r2, r2, #3
 80011da:	4313      	orrs	r3, r2
 80011dc:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80011de:	f7ff f979 	bl	80004d4 <HAL_GetTick>
 80011e2:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011e4:	6863      	ldr	r3, [r4, #4]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d01d      	beq.n	8001226 <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d02a      	beq.n	8001244 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80011ee:	4b3c      	ldr	r3, [pc, #240]	; (80012e0 <HAL_RCC_ClockConfig+0x190>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f013 0f0c 	tst.w	r3, #12
 80011f6:	d034      	beq.n	8001262 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011f8:	f7ff f96c 	bl	80004d4 <HAL_GetTick>
 80011fc:	1b80      	subs	r0, r0, r6
 80011fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8001202:	4298      	cmp	r0, r3
 8001204:	d9f3      	bls.n	80011ee <HAL_RCC_ClockConfig+0x9e>
          return HAL_TIMEOUT;
 8001206:	2003      	movs	r0, #3
 8001208:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120a:	4a35      	ldr	r2, [pc, #212]	; (80012e0 <HAL_RCC_ClockConfig+0x190>)
 800120c:	6812      	ldr	r2, [r2, #0]
 800120e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001212:	d1de      	bne.n	80011d2 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001214:	2001      	movs	r0, #1
 8001216:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001218:	4a31      	ldr	r2, [pc, #196]	; (80012e0 <HAL_RCC_ClockConfig+0x190>)
 800121a:	6812      	ldr	r2, [r2, #0]
 800121c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001220:	d1d7      	bne.n	80011d2 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001222:	2001      	movs	r0, #1
 8001224:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001226:	4b2e      	ldr	r3, [pc, #184]	; (80012e0 <HAL_RCC_ClockConfig+0x190>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 030c 	and.w	r3, r3, #12
 800122e:	2b04      	cmp	r3, #4
 8001230:	d017      	beq.n	8001262 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001232:	f7ff f94f 	bl	80004d4 <HAL_GetTick>
 8001236:	1b80      	subs	r0, r0, r6
 8001238:	f241 3388 	movw	r3, #5000	; 0x1388
 800123c:	4298      	cmp	r0, r3
 800123e:	d9f2      	bls.n	8001226 <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 8001240:	2003      	movs	r0, #3
 8001242:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001244:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <HAL_RCC_ClockConfig+0x190>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 030c 	and.w	r3, r3, #12
 800124c:	2b08      	cmp	r3, #8
 800124e:	d008      	beq.n	8001262 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001250:	f7ff f940 	bl	80004d4 <HAL_GetTick>
 8001254:	1b80      	subs	r0, r0, r6
 8001256:	f241 3388 	movw	r3, #5000	; 0x1388
 800125a:	4298      	cmp	r0, r3
 800125c:	d9f2      	bls.n	8001244 <HAL_RCC_ClockConfig+0xf4>
          return HAL_TIMEOUT;
 800125e:	2003      	movs	r0, #3
 8001260:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001262:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <HAL_RCC_ClockConfig+0x18c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	429d      	cmp	r5, r3
 800126c:	d20c      	bcs.n	8001288 <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800126e:	4a1b      	ldr	r2, [pc, #108]	; (80012dc <HAL_RCC_ClockConfig+0x18c>)
 8001270:	6813      	ldr	r3, [r2, #0]
 8001272:	f023 0307 	bic.w	r3, r3, #7
 8001276:	432b      	orrs	r3, r5
 8001278:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800127a:	6813      	ldr	r3, [r2, #0]
 800127c:	f003 0307 	and.w	r3, r3, #7
 8001280:	429d      	cmp	r5, r3
 8001282:	d001      	beq.n	8001288 <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
 8001284:	2001      	movs	r0, #1
}
 8001286:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001288:	6823      	ldr	r3, [r4, #0]
 800128a:	f013 0f04 	tst.w	r3, #4
 800128e:	d006      	beq.n	800129e <HAL_RCC_ClockConfig+0x14e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001290:	4a13      	ldr	r2, [pc, #76]	; (80012e0 <HAL_RCC_ClockConfig+0x190>)
 8001292:	6853      	ldr	r3, [r2, #4]
 8001294:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001298:	68e1      	ldr	r1, [r4, #12]
 800129a:	430b      	orrs	r3, r1
 800129c:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800129e:	6823      	ldr	r3, [r4, #0]
 80012a0:	f013 0f08 	tst.w	r3, #8
 80012a4:	d007      	beq.n	80012b6 <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012a6:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <HAL_RCC_ClockConfig+0x190>)
 80012a8:	6853      	ldr	r3, [r2, #4]
 80012aa:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80012ae:	6921      	ldr	r1, [r4, #16]
 80012b0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80012b4:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012b6:	f7ff ff15 	bl	80010e4 <HAL_RCC_GetSysClockFreq>
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <HAL_RCC_ClockConfig+0x190>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80012c2:	4a08      	ldr	r2, [pc, #32]	; (80012e4 <HAL_RCC_ClockConfig+0x194>)
 80012c4:	5cd3      	ldrb	r3, [r2, r3]
 80012c6:	40d8      	lsrs	r0, r3
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <HAL_RCC_ClockConfig+0x198>)
 80012ca:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80012cc:	200f      	movs	r0, #15
 80012ce:	f7ff f8bf 	bl	8000450 <HAL_InitTick>
  return HAL_OK;
 80012d2:	2000      	movs	r0, #0
 80012d4:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80012d6:	2001      	movs	r0, #1
 80012d8:	bd70      	pop	{r4, r5, r6, pc}
 80012da:	bf00      	nop
 80012dc:	40022000 	.word	0x40022000
 80012e0:	40021000 	.word	0x40021000
 80012e4:	0800151c 	.word	0x0800151c
 80012e8:	20000000 	.word	0x20000000

080012ec <HAL_RCC_GetHCLKFreq>:
}
 80012ec:	4b01      	ldr	r3, [pc, #4]	; (80012f4 <HAL_RCC_GetHCLKFreq+0x8>)
 80012ee:	6818      	ldr	r0, [r3, #0]
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20000000 	.word	0x20000000

080012f8 <HAL_RCC_GetPCLK1Freq>:
{
 80012f8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012fa:	f7ff fff7 	bl	80012ec <HAL_RCC_GetHCLKFreq>
 80012fe:	4b04      	ldr	r3, [pc, #16]	; (8001310 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001306:	4a03      	ldr	r2, [pc, #12]	; (8001314 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001308:	5cd3      	ldrb	r3, [r2, r3]
}    
 800130a:	40d8      	lsrs	r0, r3
 800130c:	bd08      	pop	{r3, pc}
 800130e:	bf00      	nop
 8001310:	40021000 	.word	0x40021000
 8001314:	0800152c 	.word	0x0800152c

08001318 <HAL_RCC_GetPCLK2Freq>:
{
 8001318:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800131a:	f7ff ffe7 	bl	80012ec <HAL_RCC_GetHCLKFreq>
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001326:	4a03      	ldr	r2, [pc, #12]	; (8001334 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001328:	5cd3      	ldrb	r3, [r2, r3]
} 
 800132a:	40d8      	lsrs	r0, r3
 800132c:	bd08      	pop	{r3, pc}
 800132e:	bf00      	nop
 8001330:	40021000 	.word	0x40021000
 8001334:	0800152c 	.word	0x0800152c

08001338 <HAL_RCC_GetOscConfig>:
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
 8001338:	230f      	movs	r3, #15
 800133a:	6003      	str	r3, [r0, #0]
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 800133c:	4b2a      	ldr	r3, [pc, #168]	; (80013e8 <HAL_RCC_GetOscConfig+0xb0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001344:	d030      	beq.n	80013a8 <HAL_RCC_GetOscConfig+0x70>
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8001346:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800134a:	6043      	str	r3, [r0, #4]
  RCC_OscInitStruct->HSEPredivValue = __HAL_RCC_HSE_GET_PREDIV();
 800134c:	4a26      	ldr	r2, [pc, #152]	; (80013e8 <HAL_RCC_GetOscConfig+0xb0>)
 800134e:	6853      	ldr	r3, [r2, #4]
 8001350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001354:	6083      	str	r3, [r0, #8]
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8001356:	6813      	ldr	r3, [r2, #0]
 8001358:	f013 0f01 	tst.w	r3, #1
 800135c:	d030      	beq.n	80013c0 <HAL_RCC_GetOscConfig+0x88>
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 800135e:	2301      	movs	r3, #1
 8001360:	6103      	str	r3, [r0, #16]
  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 8001362:	4a21      	ldr	r2, [pc, #132]	; (80013e8 <HAL_RCC_GetOscConfig+0xb0>)
 8001364:	6813      	ldr	r3, [r2, #0]
 8001366:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800136a:	6143      	str	r3, [r0, #20]
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 800136c:	6a13      	ldr	r3, [r2, #32]
 800136e:	f013 0f04 	tst.w	r3, #4
 8001372:	d028      	beq.n	80013c6 <HAL_RCC_GetOscConfig+0x8e>
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8001374:	2305      	movs	r3, #5
 8001376:	60c3      	str	r3, [r0, #12]
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <HAL_RCC_GetOscConfig+0xb0>)
 800137a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137c:	f013 0f01 	tst.w	r3, #1
 8001380:	d02c      	beq.n	80013dc <HAL_RCC_GetOscConfig+0xa4>
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8001382:	2301      	movs	r3, #1
 8001384:	6183      	str	r3, [r0, #24]
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <HAL_RCC_GetOscConfig+0xb0>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800138e:	d128      	bne.n	80013e2 <HAL_RCC_GetOscConfig+0xaa>
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8001390:	2301      	movs	r3, #1
 8001392:	61c3      	str	r3, [r0, #28]
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 8001394:	4a14      	ldr	r2, [pc, #80]	; (80013e8 <HAL_RCC_GetOscConfig+0xb0>)
 8001396:	6853      	ldr	r3, [r2, #4]
 8001398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139c:	6203      	str	r3, [r0, #32]
  RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMULL);
 800139e:	6853      	ldr	r3, [r2, #4]
 80013a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80013a4:	6243      	str	r3, [r0, #36]	; 0x24
 80013a6:	4770      	bx	lr
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <HAL_RCC_GetOscConfig+0xb0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80013b0:	d003      	beq.n	80013ba <HAL_RCC_GetOscConfig+0x82>
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 80013b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b6:	6043      	str	r3, [r0, #4]
 80013b8:	e7c8      	b.n	800134c <HAL_RCC_GetOscConfig+0x14>
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 80013ba:	2300      	movs	r3, #0
 80013bc:	6043      	str	r3, [r0, #4]
 80013be:	e7c5      	b.n	800134c <HAL_RCC_GetOscConfig+0x14>
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 80013c0:	2300      	movs	r3, #0
 80013c2:	6103      	str	r3, [r0, #16]
 80013c4:	e7cd      	b.n	8001362 <HAL_RCC_GetOscConfig+0x2a>
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <HAL_RCC_GetOscConfig+0xb0>)
 80013c8:	6a1b      	ldr	r3, [r3, #32]
 80013ca:	f013 0f01 	tst.w	r3, #1
 80013ce:	d002      	beq.n	80013d6 <HAL_RCC_GetOscConfig+0x9e>
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 80013d0:	2301      	movs	r3, #1
 80013d2:	60c3      	str	r3, [r0, #12]
 80013d4:	e7d0      	b.n	8001378 <HAL_RCC_GetOscConfig+0x40>
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60c3      	str	r3, [r0, #12]
 80013da:	e7cd      	b.n	8001378 <HAL_RCC_GetOscConfig+0x40>
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 80013dc:	2300      	movs	r3, #0
 80013de:	6183      	str	r3, [r0, #24]
 80013e0:	e7d1      	b.n	8001386 <HAL_RCC_GetOscConfig+0x4e>
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 80013e2:	2302      	movs	r3, #2
 80013e4:	61c3      	str	r3, [r0, #28]
 80013e6:	e7d5      	b.n	8001394 <HAL_RCC_GetOscConfig+0x5c>
 80013e8:	40021000 	.word	0x40021000

080013ec <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013ec:	230f      	movs	r3, #15
 80013ee:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <HAL_RCC_GetClockConfig+0x34>)
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	f002 0203 	and.w	r2, r2, #3
 80013f8:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001400:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001408:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	08db      	lsrs	r3, r3, #3
 800140e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001412:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <HAL_RCC_GetClockConfig+0x38>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0307 	and.w	r3, r3, #7
 800141c:	600b      	str	r3, [r1, #0]
 800141e:	4770      	bx	lr
 8001420:	40021000 	.word	0x40021000
 8001424:	40022000 	.word	0x40022000

08001428 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001428:	4770      	bx	lr

0800142a <HAL_RCC_NMI_IRQHandler>:
{
 800142a:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_RCC_NMI_IRQHandler+0x1a>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001434:	d100      	bne.n	8001438 <HAL_RCC_NMI_IRQHandler+0xe>
 8001436:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 8001438:	f7ff fff6 	bl	8001428 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800143c:	2280      	movs	r2, #128	; 0x80
 800143e:	4b02      	ldr	r3, [pc, #8]	; (8001448 <HAL_RCC_NMI_IRQHandler+0x1e>)
 8001440:	701a      	strb	r2, [r3, #0]
}
 8001442:	e7f8      	b.n	8001436 <HAL_RCC_NMI_IRQHandler+0xc>
 8001444:	40021000 	.word	0x40021000
 8001448:	4002100a 	.word	0x4002100a

0800144c <main>:


#include "main.h"

int main(void)
{
 800144c:	b508      	push	{r3, lr}
  hwInit();
 800144e:	f7fe ffdf 	bl	8000410 <hwInit>
  apInit();
 8001452:	f7fe fee7 	bl	8000224 <apInit>

  apMain();
 8001456:	f7fe fee6 	bl	8000226 <apMain>
}
 800145a:	2000      	movs	r0, #0
 800145c:	bd08      	pop	{r3, pc}
	...

08001460 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001460:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001462:	e003      	b.n	800146c <LoopCopyDataInit>

08001464 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001464:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001466:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001468:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800146a:	3104      	adds	r1, #4

0800146c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800146c:	480a      	ldr	r0, [pc, #40]	; (8001498 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001470:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001472:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001474:	d3f6      	bcc.n	8001464 <CopyDataInit>
  ldr r2, =_sbss
 8001476:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001478:	e002      	b.n	8001480 <LoopFillZerobss>

0800147a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800147c:	f842 3b04 	str.w	r3, [r2], #4

08001480 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001482:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001484:	d3f9      	bcc.n	800147a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001486:	f7fe ff19 	bl	80002bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800148a:	f000 f80f 	bl	80014ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800148e:	f7ff ffdd 	bl	800144c <main>
  bx lr
 8001492:	4770      	bx	lr
  ldr r3, =_sidata
 8001494:	08001550 	.word	0x08001550
  ldr r0, =_sdata
 8001498:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800149c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80014a0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80014a4:	2000002c 	.word	0x2000002c

080014a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014a8:	e7fe      	b.n	80014a8 <ADC1_IRQHandler>
	...

080014ac <__libc_init_array>:
 80014ac:	b570      	push	{r4, r5, r6, lr}
 80014ae:	2500      	movs	r5, #0
 80014b0:	4e0c      	ldr	r6, [pc, #48]	; (80014e4 <__libc_init_array+0x38>)
 80014b2:	4c0d      	ldr	r4, [pc, #52]	; (80014e8 <__libc_init_array+0x3c>)
 80014b4:	1ba4      	subs	r4, r4, r6
 80014b6:	10a4      	asrs	r4, r4, #2
 80014b8:	42a5      	cmp	r5, r4
 80014ba:	d109      	bne.n	80014d0 <__libc_init_array+0x24>
 80014bc:	f000 f822 	bl	8001504 <_init>
 80014c0:	2500      	movs	r5, #0
 80014c2:	4e0a      	ldr	r6, [pc, #40]	; (80014ec <__libc_init_array+0x40>)
 80014c4:	4c0a      	ldr	r4, [pc, #40]	; (80014f0 <__libc_init_array+0x44>)
 80014c6:	1ba4      	subs	r4, r4, r6
 80014c8:	10a4      	asrs	r4, r4, #2
 80014ca:	42a5      	cmp	r5, r4
 80014cc:	d105      	bne.n	80014da <__libc_init_array+0x2e>
 80014ce:	bd70      	pop	{r4, r5, r6, pc}
 80014d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014d4:	4798      	blx	r3
 80014d6:	3501      	adds	r5, #1
 80014d8:	e7ee      	b.n	80014b8 <__libc_init_array+0xc>
 80014da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014de:	4798      	blx	r3
 80014e0:	3501      	adds	r5, #1
 80014e2:	e7f2      	b.n	80014ca <__libc_init_array+0x1e>
 80014e4:	08001548 	.word	0x08001548
 80014e8:	08001548 	.word	0x08001548
 80014ec:	08001548 	.word	0x08001548
 80014f0:	0800154c 	.word	0x0800154c

080014f4 <memset>:
 80014f4:	4603      	mov	r3, r0
 80014f6:	4402      	add	r2, r0
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d100      	bne.n	80014fe <memset+0xa>
 80014fc:	4770      	bx	lr
 80014fe:	f803 1b01 	strb.w	r1, [r3], #1
 8001502:	e7f9      	b.n	80014f8 <memset+0x4>

08001504 <_init>:
 8001504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001506:	bf00      	nop
 8001508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800150a:	bc08      	pop	{r3}
 800150c:	469e      	mov	lr, r3
 800150e:	4770      	bx	lr

08001510 <_fini>:
 8001510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001512:	bf00      	nop
 8001514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001516:	bc08      	pop	{r3}
 8001518:	469e      	mov	lr, r3
 800151a:	4770      	bx	lr
