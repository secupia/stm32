
02_Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000be8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000cf4  08000cf4  00010cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000d18  08000d18  00010d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000d1c  08000d1c  00010d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000004  08000d24  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000024  08000d24  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00009071  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000019bb  00000000  00000000  0002909e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000003e0  00000000  00000000  0002aa60  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  0002ae40  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002a2a  00000000  00000000  0002b1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001514  00000000  00000000  0002dc02  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002f116  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000007c8  00000000  00000000  0002f194  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    0000104a  00000000  00000000  0002f95c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000cdc 	.word	0x08000cdc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000cdc 	.word	0x08000cdc

0800014c <apInit>:
#include "ap.h"



void apInit(void)
{
 800014c:	4770      	bx	lr

0800014e <apMain>:

}

void apMain(void)
{
 800014e:	b508      	push	{r3, lr}
 8000150:	e002      	b.n	8000158 <apMain+0xa>
    {
      ledOn(0);
    }
    else
    {
      ledOff(0);
 8000152:	2000      	movs	r0, #0
 8000154:	f000 f8ec 	bl	8000330 <ledOff>
    if(buttonGetPressed(0) == true)
 8000158:	2000      	movs	r0, #0
 800015a:	f000 f8bd 	bl	80002d8 <buttonGetPressed>
 800015e:	2800      	cmp	r0, #0
 8000160:	d0f7      	beq.n	8000152 <apMain+0x4>
      ledOn(0);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f8da 	bl	800031c <ledOn>
 8000168:	e7f6      	b.n	8000158 <apMain+0xa>

0800016a <SystemClock_Config>:
  *            Flash Latency(WS)              = 2
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 800016a:	b500      	push	{lr}
 800016c:	b091      	sub	sp, #68	; 0x44
  RCC_ClkInitTypeDef clkinitstruct = {0};
 800016e:	2100      	movs	r1, #0
 8000170:	910b      	str	r1, [sp, #44]	; 0x2c
 8000172:	910c      	str	r1, [sp, #48]	; 0x30
 8000174:	910d      	str	r1, [sp, #52]	; 0x34
 8000176:	910e      	str	r1, [sp, #56]	; 0x38
 8000178:	910f      	str	r1, [sp, #60]	; 0x3c
  RCC_OscInitTypeDef oscinitstruct = {0};
 800017a:	2228      	movs	r2, #40	; 0x28
 800017c:	a801      	add	r0, sp, #4
 800017e:	f000 fda5 	bl	8000ccc <memset>

  /* Configure PLL ------------------------------------------------------*/
  /* PLL configuration: PLLCLK = (HSI / 2) * PLLMUL = (8 / 2) * 16 = 64 MHz */
  /* PREDIV1 configuration: PREDIV1CLK = PLLCLK / HSEPredivValue = 64 / 1 = 64 MHz */
  /* Enable HSI and activate PLL with HSi_DIV2 as source */
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_HSI;
 8000182:	2302      	movs	r3, #2
 8000184:	9301      	str	r3, [sp, #4]
  oscinitstruct.HSEState        = RCC_HSE_OFF;
  oscinitstruct.LSEState        = RCC_LSE_OFF;
  oscinitstruct.HSIState        = RCC_HSI_ON;
 8000186:	2201      	movs	r2, #1
 8000188:	9205      	str	r2, [sp, #20]
  oscinitstruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800018a:	2210      	movs	r2, #16
 800018c:	9206      	str	r2, [sp, #24]
  oscinitstruct.HSEPredivValue    = RCC_HSE_PREDIV_DIV1;
  oscinitstruct.PLL.PLLState    = RCC_PLL_ON;
 800018e:	9308      	str	r3, [sp, #32]
  oscinitstruct.PLL.PLLSource   = RCC_PLLSOURCE_HSI_DIV2;
  oscinitstruct.PLL.PLLMUL      = RCC_PLL_MUL16;
 8000190:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000194:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&oscinitstruct)!= HAL_OK)
 8000196:	a801      	add	r0, sp, #4
 8000198:	f000 fa88 	bl	80006ac <HAL_RCC_OscConfig>
 800019c:	b100      	cbz	r0, 80001a0 <SystemClock_Config+0x36>
 800019e:	e7fe      	b.n	800019e <SystemClock_Config+0x34>
    while(1);
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80001a0:	230f      	movs	r3, #15
 80001a2:	930b      	str	r3, [sp, #44]	; 0x2c
  clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001a4:	2102      	movs	r1, #2
 80001a6:	910c      	str	r1, [sp, #48]	; 0x30
  clkinitstruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001a8:	2300      	movs	r3, #0
 80001aa:	930d      	str	r3, [sp, #52]	; 0x34
  clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ac:	930f      	str	r3, [sp, #60]	; 0x3c
  clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001b2:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2)!= HAL_OK)
 80001b4:	a80b      	add	r0, sp, #44	; 0x2c
 80001b6:	f000 fc9f 	bl	8000af8 <HAL_RCC_ClockConfig>
 80001ba:	b100      	cbz	r0, 80001be <SystemClock_Config+0x54>
 80001bc:	e7fe      	b.n	80001bc <SystemClock_Config+0x52>
  {
    /* Initialization Error */
    while(1);
  }
}
 80001be:	b011      	add	sp, #68	; 0x44
 80001c0:	f85d fb04 	ldr.w	pc, [sp], #4

080001c4 <bspInit>:
{
 80001c4:	b500      	push	{lr}
 80001c6:	b083      	sub	sp, #12
  HAL_Init();
 80001c8:	f000 f8dc 	bl	8000384 <HAL_Init>
  SystemClock_Config();
 80001cc:	f7ff ffcd 	bl	800016a <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001d0:	4b0a      	ldr	r3, [pc, #40]	; (80001fc <bspInit+0x38>)
 80001d2:	699a      	ldr	r2, [r3, #24]
 80001d4:	f042 0204 	orr.w	r2, r2, #4
 80001d8:	619a      	str	r2, [r3, #24]
 80001da:	699a      	ldr	r2, [r3, #24]
 80001dc:	f002 0204 	and.w	r2, r2, #4
 80001e0:	9200      	str	r2, [sp, #0]
 80001e2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001e4:	699a      	ldr	r2, [r3, #24]
 80001e6:	f042 0210 	orr.w	r2, r2, #16
 80001ea:	619a      	str	r2, [r3, #24]
 80001ec:	699b      	ldr	r3, [r3, #24]
 80001ee:	f003 0310 	and.w	r3, r3, #16
 80001f2:	9301      	str	r3, [sp, #4]
 80001f4:	9b01      	ldr	r3, [sp, #4]
}
 80001f6:	b003      	add	sp, #12
 80001f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80001fc:	40021000 	.word	0x40021000

08000200 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000200:	4b0f      	ldr	r3, [pc, #60]	; (8000240 <SystemInit+0x40>)
 8000202:	681a      	ldr	r2, [r3, #0]
 8000204:	f042 0201 	orr.w	r2, r2, #1
 8000208:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800020a:	6859      	ldr	r1, [r3, #4]
 800020c:	4a0d      	ldr	r2, [pc, #52]	; (8000244 <SystemInit+0x44>)
 800020e:	400a      	ands	r2, r1
 8000210:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000212:	681a      	ldr	r2, [r3, #0]
 8000214:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000218:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800021c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000224:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000226:	685a      	ldr	r2, [r3, #4]
 8000228:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800022c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800022e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000232:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000234:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000238:	4b03      	ldr	r3, [pc, #12]	; (8000248 <SystemInit+0x48>)
 800023a:	609a      	str	r2, [r3, #8]
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	40021000 	.word	0x40021000
 8000244:	f8ff0000 	.word	0xf8ff0000
 8000248:	e000ed00 	.word	0xe000ed00

0800024c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800024c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800024e:	e003      	b.n	8000258 <LoopCopyDataInit>

08000250 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000250:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000252:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000254:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000256:	3104      	adds	r1, #4

08000258 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000258:	480a      	ldr	r0, [pc, #40]	; (8000284 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800025a:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800025c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800025e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000260:	d3f6      	bcc.n	8000250 <CopyDataInit>
  ldr r2, =_sbss
 8000262:	4a0a      	ldr	r2, [pc, #40]	; (800028c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000264:	e002      	b.n	800026c <LoopFillZerobss>

08000266 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000266:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000268:	f842 3b04 	str.w	r3, [r2], #4

0800026c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800026c:	4b08      	ldr	r3, [pc, #32]	; (8000290 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800026e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000270:	d3f9      	bcc.n	8000266 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000272:	f7ff ffc5 	bl	8000200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000276:	f000 fd05 	bl	8000c84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800027a:	f000 fcf9 	bl	8000c70 <main>
  bx lr
 800027e:	4770      	bx	lr
  ldr r3, =_sidata
 8000280:	08000d20 	.word	0x08000d20
  ldr r0, =_sdata
 8000284:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000288:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 800028c:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8000290:	20000024 	.word	0x20000024

08000294 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000294:	e7fe      	b.n	8000294 <ADC1_2_IRQHandler>

08000296 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000296:	4770      	bx	lr

08000298 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000298:	e7fe      	b.n	8000298 <HardFault_Handler>

0800029a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800029a:	e7fe      	b.n	800029a <MemManage_Handler>

0800029c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800029c:	e7fe      	b.n	800029c <BusFault_Handler>

0800029e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800029e:	e7fe      	b.n	800029e <UsageFault_Handler>

080002a0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80002a0:	4770      	bx	lr

080002a2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80002a2:	4770      	bx	lr

080002a4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80002a4:	4770      	bx	lr

080002a6 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80002a6:	b508      	push	{r3, lr}
  HAL_IncTick();
 80002a8:	f000 f87e 	bl	80003a8 <HAL_IncTick>
 80002ac:	bd08      	pop	{r3, pc}
	...

080002b0 <buttonInit>:
 */

#include "button.h"

void buttonInit(void)
{
 80002b0:	b500      	push	{lr}
 80002b2:	b085      	sub	sp, #20

  GPIO_InitTypeDef GPIO_InitStruct;

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002b4:	2300      	movs	r3, #0
 80002b6:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b8:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ba:	2302      	movs	r3, #2
 80002bc:	9303      	str	r3, [sp, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80002be:	a904      	add	r1, sp, #16
 80002c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002c4:	f841 3d10 	str.w	r3, [r1, #-16]!
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002c8:	4802      	ldr	r0, [pc, #8]	; (80002d4 <buttonInit+0x24>)
 80002ca:	f000 f8d5 	bl	8000478 <HAL_GPIO_Init>

}
 80002ce:	b005      	add	sp, #20
 80002d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80002d4:	40011000 	.word	0x40011000

080002d8 <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 80002d8:	b508      	push	{r3, lr}

  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 80002da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002de:	4804      	ldr	r0, [pc, #16]	; (80002f0 <buttonGetPressed+0x18>)
 80002e0:	f000 f9c0 	bl	8000664 <HAL_GPIO_ReadPin>
 80002e4:	b108      	cbz	r0, 80002ea <buttonGetPressed+0x12>
  {
    return true;
  }
  else
  {
    return false;
 80002e6:	2000      	movs	r0, #0
  }
}
 80002e8:	bd08      	pop	{r3, pc}
    return true;
 80002ea:	2001      	movs	r0, #1
 80002ec:	bd08      	pop	{r3, pc}
 80002ee:	bf00      	nop
 80002f0:	40011000 	.word	0x40011000

080002f4 <ledInit>:

#include "led.h"


void ledInit(void)
{
 80002f4:	b500      	push	{lr}
 80002f6:	b085      	sub	sp, #20
  GPIO_InitTypeDef  GPIO_InitStruct;

  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80002f8:	2301      	movs	r3, #1
 80002fa:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80002fc:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002fe:	2303      	movs	r3, #3
 8000300:	9303      	str	r3, [sp, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000302:	a904      	add	r1, sp, #16
 8000304:	2320      	movs	r3, #32
 8000306:	f841 3d10 	str.w	r3, [r1, #-16]!
  //GPIO_InitStruct.Pin = GPIO_PIN_0;

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800030a:	4803      	ldr	r0, [pc, #12]	; (8000318 <ledInit+0x24>)
 800030c:	f000 f8b4 	bl	8000478 <HAL_GPIO_Init>
}
 8000310:	b005      	add	sp, #20
 8000312:	f85d fb04 	ldr.w	pc, [sp], #4
 8000316:	bf00      	nop
 8000318:	40010800 	.word	0x40010800

0800031c <ledOn>:

void ledOn(uint8_t ch)
{
 800031c:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800031e:	2201      	movs	r2, #1
 8000320:	2120      	movs	r1, #32
 8000322:	4802      	ldr	r0, [pc, #8]	; (800032c <ledOn+0x10>)
 8000324:	f000 f9a5 	bl	8000672 <HAL_GPIO_WritePin>
 8000328:	bd08      	pop	{r3, pc}
 800032a:	bf00      	nop
 800032c:	40010800 	.word	0x40010800

08000330 <ledOff>:
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
}

void ledOff(uint8_t ch)
{
 8000330:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	2120      	movs	r1, #32
 8000336:	4802      	ldr	r0, [pc, #8]	; (8000340 <ledOff+0x10>)
 8000338:	f000 f99b 	bl	8000672 <HAL_GPIO_WritePin>
 800033c:	bd08      	pop	{r3, pc}
 800033e:	bf00      	nop
 8000340:	40010800 	.word	0x40010800

08000344 <hwInit>:

#include "hw.h"


void hwInit(void)
{
 8000344:	b508      	push	{r3, lr}
  bspInit();
 8000346:	f7ff ff3d 	bl	80001c4 <bspInit>

  ledInit();
 800034a:	f7ff ffd3 	bl	80002f4 <ledInit>
  buttonInit();
 800034e:	f7ff ffaf 	bl	80002b0 <buttonInit>
 8000352:	bd08      	pop	{r3, pc}

08000354 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000354:	4770      	bx	lr
	...

08000358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000358:	b510      	push	{r4, lr}
 800035a:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800035c:	4b07      	ldr	r3, [pc, #28]	; (800037c <HAL_InitTick+0x24>)
 800035e:	6818      	ldr	r0, [r3, #0]
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <HAL_InitTick+0x28>)
 8000362:	fba3 3000 	umull	r3, r0, r3, r0
 8000366:	0980      	lsrs	r0, r0, #6
 8000368:	f000 f870 	bl	800044c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800036c:	2200      	movs	r2, #0
 800036e:	4621      	mov	r1, r4
 8000370:	f04f 30ff 	mov.w	r0, #4294967295
 8000374:	f000 f838 	bl	80003e8 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000378:	2000      	movs	r0, #0
 800037a:	bd10      	pop	{r4, pc}
 800037c:	20000000 	.word	0x20000000
 8000380:	10624dd3 	.word	0x10624dd3

08000384 <HAL_Init>:
{
 8000384:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000386:	4a07      	ldr	r2, [pc, #28]	; (80003a4 <HAL_Init+0x20>)
 8000388:	6813      	ldr	r3, [r2, #0]
 800038a:	f043 0310 	orr.w	r3, r3, #16
 800038e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000390:	2003      	movs	r0, #3
 8000392:	f000 f817 	bl	80003c4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000396:	200f      	movs	r0, #15
 8000398:	f7ff ffde 	bl	8000358 <HAL_InitTick>
  HAL_MspInit();
 800039c:	f7ff ffda 	bl	8000354 <HAL_MspInit>
}
 80003a0:	2000      	movs	r0, #0
 80003a2:	bd08      	pop	{r3, pc}
 80003a4:	40022000 	.word	0x40022000

080003a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80003a8:	4a02      	ldr	r2, [pc, #8]	; (80003b4 <HAL_IncTick+0xc>)
 80003aa:	6813      	ldr	r3, [r2, #0]
 80003ac:	3301      	adds	r3, #1
 80003ae:	6013      	str	r3, [r2, #0]
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	20000020 	.word	0x20000020

080003b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80003b8:	4b01      	ldr	r3, [pc, #4]	; (80003c0 <HAL_GetTick+0x8>)
 80003ba:	6818      	ldr	r0, [r3, #0]
}
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	20000020 	.word	0x20000020

080003c4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003c4:	4a07      	ldr	r2, [pc, #28]	; (80003e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80003c6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80003cc:	041b      	lsls	r3, r3, #16
 80003ce:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80003d0:	0200      	lsls	r0, r0, #8
 80003d2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003d6:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80003d8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80003dc:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80003e0:	60d0      	str	r0, [r2, #12]
 80003e2:	4770      	bx	lr
 80003e4:	e000ed00 	.word	0xe000ed00

080003e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003e8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003ea:	4b16      	ldr	r3, [pc, #88]	; (8000444 <HAL_NVIC_SetPriority+0x5c>)
 80003ec:	68db      	ldr	r3, [r3, #12]
 80003ee:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003f2:	f1c3 0407 	rsb	r4, r3, #7
 80003f6:	2c04      	cmp	r4, #4
 80003f8:	bf28      	it	cs
 80003fa:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003fc:	1d1d      	adds	r5, r3, #4
 80003fe:	2d06      	cmp	r5, #6
 8000400:	d917      	bls.n	8000432 <HAL_NVIC_SetPriority+0x4a>
 8000402:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000404:	2501      	movs	r5, #1
 8000406:	fa05 f404 	lsl.w	r4, r5, r4
 800040a:	3c01      	subs	r4, #1
 800040c:	4021      	ands	r1, r4
 800040e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000410:	fa05 f303 	lsl.w	r3, r5, r3
 8000414:	3b01      	subs	r3, #1
 8000416:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000418:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 800041a:	2800      	cmp	r0, #0
 800041c:	db0b      	blt.n	8000436 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800041e:	0109      	lsls	r1, r1, #4
 8000420:	b2c9      	uxtb	r1, r1
 8000422:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000426:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800042a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800042e:	bc30      	pop	{r4, r5}
 8000430:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000432:	2300      	movs	r3, #0
 8000434:	e7e6      	b.n	8000404 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000436:	f000 000f 	and.w	r0, r0, #15
 800043a:	0109      	lsls	r1, r1, #4
 800043c:	b2c9      	uxtb	r1, r1
 800043e:	4b02      	ldr	r3, [pc, #8]	; (8000448 <HAL_NVIC_SetPriority+0x60>)
 8000440:	5419      	strb	r1, [r3, r0]
 8000442:	e7f4      	b.n	800042e <HAL_NVIC_SetPriority+0x46>
 8000444:	e000ed00 	.word	0xe000ed00
 8000448:	e000ed14 	.word	0xe000ed14

0800044c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800044c:	3801      	subs	r0, #1
 800044e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000452:	d20a      	bcs.n	800046a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <HAL_SYSTICK_Config+0x24>)
 8000456:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000458:	21f0      	movs	r1, #240	; 0xf0
 800045a:	4a06      	ldr	r2, [pc, #24]	; (8000474 <HAL_SYSTICK_Config+0x28>)
 800045c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000460:	2000      	movs	r0, #0
 8000462:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000464:	2207      	movs	r2, #7
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800046a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	e000e010 	.word	0xe000e010
 8000474:	e000ed00 	.word	0xe000ed00

08000478 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800047a:	b083      	sub	sp, #12
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 800047c:	2600      	movs	r6, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800047e:	4634      	mov	r4, r6
 8000480:	e071      	b.n	8000566 <HAL_GPIO_Init+0xee>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000482:	2d00      	cmp	r5, #0
 8000484:	f000 80a1 	beq.w	80005ca <HAL_GPIO_Init+0x152>
 8000488:	2d01      	cmp	r5, #1
 800048a:	d100      	bne.n	800048e <HAL_GPIO_Init+0x16>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800048c:	68ce      	ldr	r6, [r1, #12]
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800048e:	2bff      	cmp	r3, #255	; 0xff
 8000490:	f200 80af 	bhi.w	80005f2 <HAL_GPIO_Init+0x17a>
 8000494:	4686      	mov	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000496:	2bff      	cmp	r3, #255	; 0xff
 8000498:	f200 80ae 	bhi.w	80005f8 <HAL_GPIO_Init+0x180>
 800049c:	00a5      	lsls	r5, r4, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800049e:	f8de 2000 	ldr.w	r2, [lr]
 80004a2:	270f      	movs	r7, #15
 80004a4:	40af      	lsls	r7, r5
 80004a6:	ea22 0207 	bic.w	r2, r2, r7
 80004aa:	fa06 f505 	lsl.w	r5, r6, r5
 80004ae:	432a      	orrs	r2, r5
 80004b0:	f8ce 2000 	str.w	r2, [lr]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80004b4:	684a      	ldr	r2, [r1, #4]
 80004b6:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80004ba:	d053      	beq.n	8000564 <HAL_GPIO_Init+0xec>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80004bc:	4a63      	ldr	r2, [pc, #396]	; (800064c <HAL_GPIO_Init+0x1d4>)
 80004be:	6995      	ldr	r5, [r2, #24]
 80004c0:	f045 0501 	orr.w	r5, r5, #1
 80004c4:	6195      	str	r5, [r2, #24]
 80004c6:	6992      	ldr	r2, [r2, #24]
 80004c8:	f002 0201 	and.w	r2, r2, #1
 80004cc:	9201      	str	r2, [sp, #4]
 80004ce:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 80004d0:	08a5      	lsrs	r5, r4, #2
 80004d2:	1caf      	adds	r7, r5, #2
 80004d4:	4a5e      	ldr	r2, [pc, #376]	; (8000650 <HAL_GPIO_Init+0x1d8>)
 80004d6:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80004da:	f004 0703 	and.w	r7, r4, #3
 80004de:	00bf      	lsls	r7, r7, #2
 80004e0:	f04f 0e0f 	mov.w	lr, #15
 80004e4:	fa0e fe07 	lsl.w	lr, lr, r7
 80004e8:	ea22 020e 	bic.w	r2, r2, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004ec:	f8df e170 	ldr.w	lr, [pc, #368]	; 8000660 <HAL_GPIO_Init+0x1e8>
 80004f0:	4570      	cmp	r0, lr
 80004f2:	f000 8088 	beq.w	8000606 <HAL_GPIO_Init+0x18e>
 80004f6:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 80004fa:	4570      	cmp	r0, lr
 80004fc:	f000 8086 	beq.w	800060c <HAL_GPIO_Init+0x194>
 8000500:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8000504:	4570      	cmp	r0, lr
 8000506:	f000 8084 	beq.w	8000612 <HAL_GPIO_Init+0x19a>
 800050a:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 800050e:	4570      	cmp	r0, lr
 8000510:	d076      	beq.n	8000600 <HAL_GPIO_Init+0x188>
 8000512:	f04f 0e04 	mov.w	lr, #4
 8000516:	fa0e f707 	lsl.w	r7, lr, r7
 800051a:	433a      	orrs	r2, r7
        AFIO->EXTICR[position >> 2U] = temp;
 800051c:	3502      	adds	r5, #2
 800051e:	4f4c      	ldr	r7, [pc, #304]	; (8000650 <HAL_GPIO_Init+0x1d8>)
 8000520:	f847 2025 	str.w	r2, [r7, r5, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000524:	684a      	ldr	r2, [r1, #4]
 8000526:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800052a:	d075      	beq.n	8000618 <HAL_GPIO_Init+0x1a0>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 800052c:	4d49      	ldr	r5, [pc, #292]	; (8000654 <HAL_GPIO_Init+0x1dc>)
 800052e:	682a      	ldr	r2, [r5, #0]
 8000530:	431a      	orrs	r2, r3
 8000532:	602a      	str	r2, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000534:	684a      	ldr	r2, [r1, #4]
 8000536:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800053a:	d073      	beq.n	8000624 <HAL_GPIO_Init+0x1ac>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 800053c:	4d45      	ldr	r5, [pc, #276]	; (8000654 <HAL_GPIO_Init+0x1dc>)
 800053e:	686a      	ldr	r2, [r5, #4]
 8000540:	431a      	orrs	r2, r3
 8000542:	606a      	str	r2, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000544:	684a      	ldr	r2, [r1, #4]
 8000546:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800054a:	d071      	beq.n	8000630 <HAL_GPIO_Init+0x1b8>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 800054c:	4d41      	ldr	r5, [pc, #260]	; (8000654 <HAL_GPIO_Init+0x1dc>)
 800054e:	68aa      	ldr	r2, [r5, #8]
 8000550:	431a      	orrs	r2, r3
 8000552:	60aa      	str	r2, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000554:	684a      	ldr	r2, [r1, #4]
 8000556:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 800055a:	d06f      	beq.n	800063c <HAL_GPIO_Init+0x1c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 800055c:	4d3d      	ldr	r5, [pc, #244]	; (8000654 <HAL_GPIO_Init+0x1dc>)
 800055e:	68ea      	ldr	r2, [r5, #12]
 8000560:	4313      	orrs	r3, r2
 8000562:	60eb      	str	r3, [r5, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000564:	3401      	adds	r4, #1
 8000566:	2c0f      	cmp	r4, #15
 8000568:	d86e      	bhi.n	8000648 <HAL_GPIO_Init+0x1d0>
    ioposition = (0x01U << position);
 800056a:	2201      	movs	r2, #1
 800056c:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800056e:	680b      	ldr	r3, [r1, #0]
 8000570:	4013      	ands	r3, r2
    if (iocurrent == ioposition)
 8000572:	429a      	cmp	r2, r3
 8000574:	d1f6      	bne.n	8000564 <HAL_GPIO_Init+0xec>
      switch (GPIO_Init->Mode)
 8000576:	684d      	ldr	r5, [r1, #4]
 8000578:	2d12      	cmp	r5, #18
 800057a:	d030      	beq.n	80005de <HAL_GPIO_Init+0x166>
 800057c:	d80b      	bhi.n	8000596 <HAL_GPIO_Init+0x11e>
 800057e:	2d02      	cmp	r5, #2
 8000580:	d02a      	beq.n	80005d8 <HAL_GPIO_Init+0x160>
 8000582:	f67f af7e 	bls.w	8000482 <HAL_GPIO_Init+0xa>
 8000586:	2d03      	cmp	r5, #3
 8000588:	d02f      	beq.n	80005ea <HAL_GPIO_Init+0x172>
 800058a:	2d11      	cmp	r5, #17
 800058c:	f47f af7f 	bne.w	800048e <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000590:	68ce      	ldr	r6, [r1, #12]
 8000592:	3604      	adds	r6, #4
          break;
 8000594:	e77b      	b.n	800048e <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8000596:	4f30      	ldr	r7, [pc, #192]	; (8000658 <HAL_GPIO_Init+0x1e0>)
 8000598:	42bd      	cmp	r5, r7
 800059a:	d016      	beq.n	80005ca <HAL_GPIO_Init+0x152>
 800059c:	d90c      	bls.n	80005b8 <HAL_GPIO_Init+0x140>
 800059e:	4f2f      	ldr	r7, [pc, #188]	; (800065c <HAL_GPIO_Init+0x1e4>)
 80005a0:	42bd      	cmp	r5, r7
 80005a2:	d012      	beq.n	80005ca <HAL_GPIO_Init+0x152>
 80005a4:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80005a8:	42bd      	cmp	r5, r7
 80005aa:	d00e      	beq.n	80005ca <HAL_GPIO_Init+0x152>
 80005ac:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80005b0:	42bd      	cmp	r5, r7
 80005b2:	f47f af6c 	bne.w	800048e <HAL_GPIO_Init+0x16>
 80005b6:	e008      	b.n	80005ca <HAL_GPIO_Init+0x152>
 80005b8:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80005bc:	42bd      	cmp	r5, r7
 80005be:	d004      	beq.n	80005ca <HAL_GPIO_Init+0x152>
 80005c0:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80005c4:	42bd      	cmp	r5, r7
 80005c6:	f47f af62 	bne.w	800048e <HAL_GPIO_Init+0x16>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 80005ca:	688d      	ldr	r5, [r1, #8]
 80005cc:	b17d      	cbz	r5, 80005ee <HAL_GPIO_Init+0x176>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 80005ce:	2d01      	cmp	r5, #1
 80005d0:	d008      	beq.n	80005e4 <HAL_GPIO_Init+0x16c>
            GPIOx->BRR = ioposition;
 80005d2:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005d4:	2608      	movs	r6, #8
 80005d6:	e75a      	b.n	800048e <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80005d8:	68ce      	ldr	r6, [r1, #12]
 80005da:	3608      	adds	r6, #8
          break;
 80005dc:	e757      	b.n	800048e <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80005de:	68ce      	ldr	r6, [r1, #12]
 80005e0:	360c      	adds	r6, #12
          break;
 80005e2:	e754      	b.n	800048e <HAL_GPIO_Init+0x16>
            GPIOx->BSRR = ioposition;
 80005e4:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005e6:	2608      	movs	r6, #8
 80005e8:	e751      	b.n	800048e <HAL_GPIO_Init+0x16>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80005ea:	2600      	movs	r6, #0
 80005ec:	e74f      	b.n	800048e <HAL_GPIO_Init+0x16>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80005ee:	2604      	movs	r6, #4
 80005f0:	e74d      	b.n	800048e <HAL_GPIO_Init+0x16>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80005f2:	f100 0e04 	add.w	lr, r0, #4
 80005f6:	e74e      	b.n	8000496 <HAL_GPIO_Init+0x1e>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80005f8:	f1a4 0508 	sub.w	r5, r4, #8
 80005fc:	00ad      	lsls	r5, r5, #2
 80005fe:	e74e      	b.n	800049e <HAL_GPIO_Init+0x26>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000600:	f04f 0e03 	mov.w	lr, #3
 8000604:	e787      	b.n	8000516 <HAL_GPIO_Init+0x9e>
 8000606:	f04f 0e00 	mov.w	lr, #0
 800060a:	e784      	b.n	8000516 <HAL_GPIO_Init+0x9e>
 800060c:	f04f 0e01 	mov.w	lr, #1
 8000610:	e781      	b.n	8000516 <HAL_GPIO_Init+0x9e>
 8000612:	f04f 0e02 	mov.w	lr, #2
 8000616:	e77e      	b.n	8000516 <HAL_GPIO_Init+0x9e>
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8000618:	4d0e      	ldr	r5, [pc, #56]	; (8000654 <HAL_GPIO_Init+0x1dc>)
 800061a:	682a      	ldr	r2, [r5, #0]
 800061c:	ea22 0203 	bic.w	r2, r2, r3
 8000620:	602a      	str	r2, [r5, #0]
 8000622:	e787      	b.n	8000534 <HAL_GPIO_Init+0xbc>
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8000624:	4d0b      	ldr	r5, [pc, #44]	; (8000654 <HAL_GPIO_Init+0x1dc>)
 8000626:	686a      	ldr	r2, [r5, #4]
 8000628:	ea22 0203 	bic.w	r2, r2, r3
 800062c:	606a      	str	r2, [r5, #4]
 800062e:	e789      	b.n	8000544 <HAL_GPIO_Init+0xcc>
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000630:	4d08      	ldr	r5, [pc, #32]	; (8000654 <HAL_GPIO_Init+0x1dc>)
 8000632:	68aa      	ldr	r2, [r5, #8]
 8000634:	ea22 0203 	bic.w	r2, r2, r3
 8000638:	60aa      	str	r2, [r5, #8]
 800063a:	e78b      	b.n	8000554 <HAL_GPIO_Init+0xdc>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 800063c:	4d05      	ldr	r5, [pc, #20]	; (8000654 <HAL_GPIO_Init+0x1dc>)
 800063e:	68ea      	ldr	r2, [r5, #12]
 8000640:	ea22 0303 	bic.w	r3, r2, r3
 8000644:	60eb      	str	r3, [r5, #12]
 8000646:	e78d      	b.n	8000564 <HAL_GPIO_Init+0xec>
        }
      }
    }
  }
}
 8000648:	b003      	add	sp, #12
 800064a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800064c:	40021000 	.word	0x40021000
 8000650:	40010000 	.word	0x40010000
 8000654:	40010400 	.word	0x40010400
 8000658:	10210000 	.word	0x10210000
 800065c:	10310000 	.word	0x10310000
 8000660:	40010800 	.word	0x40010800

08000664 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000664:	6883      	ldr	r3, [r0, #8]
 8000666:	4219      	tst	r1, r3
 8000668:	d101      	bne.n	800066e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800066a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800066c:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 800066e:	2001      	movs	r0, #1
 8000670:	4770      	bx	lr

08000672 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000672:	b912      	cbnz	r2, 800067a <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000674:	0409      	lsls	r1, r1, #16
 8000676:	6101      	str	r1, [r0, #16]
 8000678:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800067a:	6101      	str	r1, [r0, #16]
 800067c:	4770      	bx	lr
	...

08000680 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000680:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <RCC_Delay+0x24>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a08      	ldr	r2, [pc, #32]	; (80006a8 <RCC_Delay+0x28>)
 8000688:	fba2 2303 	umull	r2, r3, r2, r3
 800068c:	0a5b      	lsrs	r3, r3, #9
 800068e:	fb00 f003 	mul.w	r0, r0, r3
 8000692:	9001      	str	r0, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000694:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000696:	9b01      	ldr	r3, [sp, #4]
 8000698:	1e5a      	subs	r2, r3, #1
 800069a:	9201      	str	r2, [sp, #4]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d1f9      	bne.n	8000694 <RCC_Delay+0x14>
}
 80006a0:	b002      	add	sp, #8
 80006a2:	4770      	bx	lr
 80006a4:	20000000 	.word	0x20000000
 80006a8:	10624dd3 	.word	0x10624dd3

080006ac <HAL_RCC_OscConfig>:
{
 80006ac:	b570      	push	{r4, r5, r6, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006b2:	6803      	ldr	r3, [r0, #0]
 80006b4:	f013 0f01 	tst.w	r3, #1
 80006b8:	d03d      	beq.n	8000736 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80006ba:	4bac      	ldr	r3, [pc, #688]	; (800096c <HAL_RCC_OscConfig+0x2c0>)
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	f003 030c 	and.w	r3, r3, #12
 80006c2:	2b04      	cmp	r3, #4
 80006c4:	d02e      	beq.n	8000724 <HAL_RCC_OscConfig+0x78>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80006c6:	4ba9      	ldr	r3, [pc, #676]	; (800096c <HAL_RCC_OscConfig+0x2c0>)
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	f003 030c 	and.w	r3, r3, #12
 80006ce:	2b08      	cmp	r3, #8
 80006d0:	d023      	beq.n	800071a <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006d2:	6863      	ldr	r3, [r4, #4]
 80006d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006d8:	d051      	beq.n	800077e <HAL_RCC_OscConfig+0xd2>
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d155      	bne.n	800078a <HAL_RCC_OscConfig+0xde>
 80006de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80006e2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80006f4:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80006f6:	6863      	ldr	r3, [r4, #4]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d060      	beq.n	80007be <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 80006fc:	f7ff fe5c 	bl	80003b8 <HAL_GetTick>
 8000700:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000702:	4b9a      	ldr	r3, [pc, #616]	; (800096c <HAL_RCC_OscConfig+0x2c0>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800070a:	d114      	bne.n	8000736 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800070c:	f7ff fe54 	bl	80003b8 <HAL_GetTick>
 8000710:	1b40      	subs	r0, r0, r5
 8000712:	2864      	cmp	r0, #100	; 0x64
 8000714:	d9f5      	bls.n	8000702 <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 8000716:	2003      	movs	r0, #3
 8000718:	e1af      	b.n	8000a7a <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800071a:	4b94      	ldr	r3, [pc, #592]	; (800096c <HAL_RCC_OscConfig+0x2c0>)
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000722:	d0d6      	beq.n	80006d2 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000724:	4b91      	ldr	r3, [pc, #580]	; (800096c <HAL_RCC_OscConfig+0x2c0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800072c:	d003      	beq.n	8000736 <HAL_RCC_OscConfig+0x8a>
 800072e:	6863      	ldr	r3, [r4, #4]
 8000730:	2b00      	cmp	r3, #0
 8000732:	f000 819f 	beq.w	8000a74 <HAL_RCC_OscConfig+0x3c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000736:	6823      	ldr	r3, [r4, #0]
 8000738:	f013 0f02 	tst.w	r3, #2
 800073c:	d065      	beq.n	800080a <HAL_RCC_OscConfig+0x15e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800073e:	4b8b      	ldr	r3, [pc, #556]	; (800096c <HAL_RCC_OscConfig+0x2c0>)
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	f013 0f0c 	tst.w	r3, #12
 8000746:	d04e      	beq.n	80007e6 <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000748:	4b88      	ldr	r3, [pc, #544]	; (800096c <HAL_RCC_OscConfig+0x2c0>)
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	f003 030c 	and.w	r3, r3, #12
 8000750:	2b08      	cmp	r3, #8
 8000752:	d043      	beq.n	80007dc <HAL_RCC_OscConfig+0x130>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000754:	6923      	ldr	r3, [r4, #16]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d079      	beq.n	800084e <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 800075a:	2201      	movs	r2, #1
 800075c:	4b84      	ldr	r3, [pc, #528]	; (8000970 <HAL_RCC_OscConfig+0x2c4>)
 800075e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000760:	f7ff fe2a 	bl	80003b8 <HAL_GetTick>
 8000764:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000766:	4b81      	ldr	r3, [pc, #516]	; (800096c <HAL_RCC_OscConfig+0x2c0>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f013 0f02 	tst.w	r3, #2
 800076e:	d165      	bne.n	800083c <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000770:	f7ff fe22 	bl	80003b8 <HAL_GetTick>
 8000774:	1b40      	subs	r0, r0, r5
 8000776:	2802      	cmp	r0, #2
 8000778:	d9f5      	bls.n	8000766 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 800077a:	2003      	movs	r0, #3
 800077c:	e17d      	b.n	8000a7a <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800077e:	4a7b      	ldr	r2, [pc, #492]	; (800096c <HAL_RCC_OscConfig+0x2c0>)
 8000780:	6813      	ldr	r3, [r2, #0]
 8000782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	e7b5      	b.n	80006f6 <HAL_RCC_OscConfig+0x4a>
 800078a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800078e:	d009      	beq.n	80007a4 <HAL_RCC_OscConfig+0xf8>
 8000790:	4b76      	ldr	r3, [pc, #472]	; (800096c <HAL_RCC_OscConfig+0x2c0>)
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	e7a8      	b.n	80006f6 <HAL_RCC_OscConfig+0x4a>
 80007a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80007a8:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	e79b      	b.n	80006f6 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 80007be:	f7ff fdfb 	bl	80003b8 <HAL_GetTick>
 80007c2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80007c4:	4b69      	ldr	r3, [pc, #420]	; (800096c <HAL_RCC_OscConfig+0x2c0>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80007cc:	d0b3      	beq.n	8000736 <HAL_RCC_OscConfig+0x8a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80007ce:	f7ff fdf3 	bl	80003b8 <HAL_GetTick>
 80007d2:	1b40      	subs	r0, r0, r5
 80007d4:	2864      	cmp	r0, #100	; 0x64
 80007d6:	d9f5      	bls.n	80007c4 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 80007d8:	2003      	movs	r0, #3
 80007da:	e14e      	b.n	8000a7a <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80007dc:	4b63      	ldr	r3, [pc, #396]	; (800096c <HAL_RCC_OscConfig+0x2c0>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80007e4:	d1b6      	bne.n	8000754 <HAL_RCC_OscConfig+0xa8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80007e6:	4b61      	ldr	r3, [pc, #388]	; (800096c <HAL_RCC_OscConfig+0x2c0>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f013 0f02 	tst.w	r3, #2
 80007ee:	d004      	beq.n	80007fa <HAL_RCC_OscConfig+0x14e>
 80007f0:	6923      	ldr	r3, [r4, #16]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d001      	beq.n	80007fa <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 80007f6:	2001      	movs	r0, #1
 80007f8:	e13f      	b.n	8000a7a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80007fa:	4a5c      	ldr	r2, [pc, #368]	; (800096c <HAL_RCC_OscConfig+0x2c0>)
 80007fc:	6813      	ldr	r3, [r2, #0]
 80007fe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000802:	6961      	ldr	r1, [r4, #20]
 8000804:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000808:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800080a:	6823      	ldr	r3, [r4, #0]
 800080c:	f013 0f08 	tst.w	r3, #8
 8000810:	d032      	beq.n	8000878 <HAL_RCC_OscConfig+0x1cc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000812:	69a3      	ldr	r3, [r4, #24]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d06e      	beq.n	80008f6 <HAL_RCC_OscConfig+0x24a>
      __HAL_RCC_LSI_ENABLE();
 8000818:	2201      	movs	r2, #1
 800081a:	4b56      	ldr	r3, [pc, #344]	; (8000974 <HAL_RCC_OscConfig+0x2c8>)
 800081c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800081e:	f7ff fdcb 	bl	80003b8 <HAL_GetTick>
 8000822:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000824:	4b51      	ldr	r3, [pc, #324]	; (800096c <HAL_RCC_OscConfig+0x2c0>)
 8000826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000828:	f013 0f02 	tst.w	r3, #2
 800082c:	d121      	bne.n	8000872 <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800082e:	f7ff fdc3 	bl	80003b8 <HAL_GetTick>
 8000832:	1b40      	subs	r0, r0, r5
 8000834:	2802      	cmp	r0, #2
 8000836:	d9f5      	bls.n	8000824 <HAL_RCC_OscConfig+0x178>
          return HAL_TIMEOUT;
 8000838:	2003      	movs	r0, #3
 800083a:	e11e      	b.n	8000a7a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800083c:	4a4b      	ldr	r2, [pc, #300]	; (800096c <HAL_RCC_OscConfig+0x2c0>)
 800083e:	6813      	ldr	r3, [r2, #0]
 8000840:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000844:	6961      	ldr	r1, [r4, #20]
 8000846:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	e7dd      	b.n	800080a <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 800084e:	2200      	movs	r2, #0
 8000850:	4b47      	ldr	r3, [pc, #284]	; (8000970 <HAL_RCC_OscConfig+0x2c4>)
 8000852:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000854:	f7ff fdb0 	bl	80003b8 <HAL_GetTick>
 8000858:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800085a:	4b44      	ldr	r3, [pc, #272]	; (800096c <HAL_RCC_OscConfig+0x2c0>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f013 0f02 	tst.w	r3, #2
 8000862:	d0d2      	beq.n	800080a <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000864:	f7ff fda8 	bl	80003b8 <HAL_GetTick>
 8000868:	1b40      	subs	r0, r0, r5
 800086a:	2802      	cmp	r0, #2
 800086c:	d9f5      	bls.n	800085a <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 800086e:	2003      	movs	r0, #3
 8000870:	e103      	b.n	8000a7a <HAL_RCC_OscConfig+0x3ce>
      RCC_Delay(1);
 8000872:	2001      	movs	r0, #1
 8000874:	f7ff ff04 	bl	8000680 <RCC_Delay>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000878:	6823      	ldr	r3, [r4, #0]
 800087a:	f013 0f04 	tst.w	r3, #4
 800087e:	f000 8099 	beq.w	80009b4 <HAL_RCC_OscConfig+0x308>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000882:	4b3a      	ldr	r3, [pc, #232]	; (800096c <HAL_RCC_OscConfig+0x2c0>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800088a:	d146      	bne.n	800091a <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800088c:	4b37      	ldr	r3, [pc, #220]	; (800096c <HAL_RCC_OscConfig+0x2c0>)
 800088e:	69da      	ldr	r2, [r3, #28]
 8000890:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000894:	61da      	str	r2, [r3, #28]
 8000896:	69db      	ldr	r3, [r3, #28]
 8000898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089c:	9301      	str	r3, [sp, #4]
 800089e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80008a0:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008a2:	4b35      	ldr	r3, [pc, #212]	; (8000978 <HAL_RCC_OscConfig+0x2cc>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80008aa:	d038      	beq.n	800091e <HAL_RCC_OscConfig+0x272>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008ac:	68e3      	ldr	r3, [r4, #12]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d049      	beq.n	8000946 <HAL_RCC_OscConfig+0x29a>
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d14d      	bne.n	8000952 <HAL_RCC_OscConfig+0x2a6>
 80008b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80008ba:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80008be:	6a1a      	ldr	r2, [r3, #32]
 80008c0:	f022 0201 	bic.w	r2, r2, #1
 80008c4:	621a      	str	r2, [r3, #32]
 80008c6:	6a1a      	ldr	r2, [r3, #32]
 80008c8:	f022 0204 	bic.w	r2, r2, #4
 80008cc:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80008ce:	68e3      	ldr	r3, [r4, #12]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d05d      	beq.n	8000990 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 80008d4:	f7ff fd70 	bl	80003b8 <HAL_GetTick>
 80008d8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008da:	4b24      	ldr	r3, [pc, #144]	; (800096c <HAL_RCC_OscConfig+0x2c0>)
 80008dc:	6a1b      	ldr	r3, [r3, #32]
 80008de:	f013 0f02 	tst.w	r3, #2
 80008e2:	d166      	bne.n	80009b2 <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008e4:	f7ff fd68 	bl	80003b8 <HAL_GetTick>
 80008e8:	1b80      	subs	r0, r0, r6
 80008ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80008ee:	4298      	cmp	r0, r3
 80008f0:	d9f3      	bls.n	80008da <HAL_RCC_OscConfig+0x22e>
          return HAL_TIMEOUT;
 80008f2:	2003      	movs	r0, #3
 80008f4:	e0c1      	b.n	8000a7a <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_LSI_DISABLE();
 80008f6:	2200      	movs	r2, #0
 80008f8:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <HAL_RCC_OscConfig+0x2c8>)
 80008fa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80008fc:	f7ff fd5c 	bl	80003b8 <HAL_GetTick>
 8000900:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <HAL_RCC_OscConfig+0x2c0>)
 8000904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000906:	f013 0f02 	tst.w	r3, #2
 800090a:	d0b5      	beq.n	8000878 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800090c:	f7ff fd54 	bl	80003b8 <HAL_GetTick>
 8000910:	1b40      	subs	r0, r0, r5
 8000912:	2802      	cmp	r0, #2
 8000914:	d9f5      	bls.n	8000902 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8000916:	2003      	movs	r0, #3
 8000918:	e0af      	b.n	8000a7a <HAL_RCC_OscConfig+0x3ce>
    FlagStatus       pwrclkchanged = RESET;
 800091a:	2500      	movs	r5, #0
 800091c:	e7c1      	b.n	80008a2 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800091e:	4a16      	ldr	r2, [pc, #88]	; (8000978 <HAL_RCC_OscConfig+0x2cc>)
 8000920:	6813      	ldr	r3, [r2, #0]
 8000922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000926:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000928:	f7ff fd46 	bl	80003b8 <HAL_GetTick>
 800092c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_RCC_OscConfig+0x2cc>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000936:	d1b9      	bne.n	80008ac <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000938:	f7ff fd3e 	bl	80003b8 <HAL_GetTick>
 800093c:	1b80      	subs	r0, r0, r6
 800093e:	2864      	cmp	r0, #100	; 0x64
 8000940:	d9f5      	bls.n	800092e <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 8000942:	2003      	movs	r0, #3
 8000944:	e099      	b.n	8000a7a <HAL_RCC_OscConfig+0x3ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000946:	4a09      	ldr	r2, [pc, #36]	; (800096c <HAL_RCC_OscConfig+0x2c0>)
 8000948:	6a13      	ldr	r3, [r2, #32]
 800094a:	f043 0301 	orr.w	r3, r3, #1
 800094e:	6213      	str	r3, [r2, #32]
 8000950:	e7bd      	b.n	80008ce <HAL_RCC_OscConfig+0x222>
 8000952:	2b05      	cmp	r3, #5
 8000954:	d012      	beq.n	800097c <HAL_RCC_OscConfig+0x2d0>
 8000956:	4b05      	ldr	r3, [pc, #20]	; (800096c <HAL_RCC_OscConfig+0x2c0>)
 8000958:	6a1a      	ldr	r2, [r3, #32]
 800095a:	f022 0201 	bic.w	r2, r2, #1
 800095e:	621a      	str	r2, [r3, #32]
 8000960:	6a1a      	ldr	r2, [r3, #32]
 8000962:	f022 0204 	bic.w	r2, r2, #4
 8000966:	621a      	str	r2, [r3, #32]
 8000968:	e7b1      	b.n	80008ce <HAL_RCC_OscConfig+0x222>
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000
 8000970:	42420000 	.word	0x42420000
 8000974:	42420480 	.word	0x42420480
 8000978:	40007000 	.word	0x40007000
 800097c:	4b41      	ldr	r3, [pc, #260]	; (8000a84 <HAL_RCC_OscConfig+0x3d8>)
 800097e:	6a1a      	ldr	r2, [r3, #32]
 8000980:	f042 0204 	orr.w	r2, r2, #4
 8000984:	621a      	str	r2, [r3, #32]
 8000986:	6a1a      	ldr	r2, [r3, #32]
 8000988:	f042 0201 	orr.w	r2, r2, #1
 800098c:	621a      	str	r2, [r3, #32]
 800098e:	e79e      	b.n	80008ce <HAL_RCC_OscConfig+0x222>
      tickstart = HAL_GetTick();
 8000990:	f7ff fd12 	bl	80003b8 <HAL_GetTick>
 8000994:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000996:	4b3b      	ldr	r3, [pc, #236]	; (8000a84 <HAL_RCC_OscConfig+0x3d8>)
 8000998:	6a1b      	ldr	r3, [r3, #32]
 800099a:	f013 0f02 	tst.w	r3, #2
 800099e:	d008      	beq.n	80009b2 <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009a0:	f7ff fd0a 	bl	80003b8 <HAL_GetTick>
 80009a4:	1b80      	subs	r0, r0, r6
 80009a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80009aa:	4298      	cmp	r0, r3
 80009ac:	d9f3      	bls.n	8000996 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 80009ae:	2003      	movs	r0, #3
 80009b0:	e063      	b.n	8000a7a <HAL_RCC_OscConfig+0x3ce>
    if(pwrclkchanged == SET)
 80009b2:	b9e5      	cbnz	r5, 80009ee <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80009b4:	69e3      	ldr	r3, [r4, #28]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d05e      	beq.n	8000a78 <HAL_RCC_OscConfig+0x3cc>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009ba:	4a32      	ldr	r2, [pc, #200]	; (8000a84 <HAL_RCC_OscConfig+0x3d8>)
 80009bc:	6852      	ldr	r2, [r2, #4]
 80009be:	f002 020c 	and.w	r2, r2, #12
 80009c2:	2a08      	cmp	r2, #8
 80009c4:	d05b      	beq.n	8000a7e <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d017      	beq.n	80009fa <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 80009ca:	2200      	movs	r2, #0
 80009cc:	4b2e      	ldr	r3, [pc, #184]	; (8000a88 <HAL_RCC_OscConfig+0x3dc>)
 80009ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009d0:	f7ff fcf2 	bl	80003b8 <HAL_GetTick>
 80009d4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009d6:	4b2b      	ldr	r3, [pc, #172]	; (8000a84 <HAL_RCC_OscConfig+0x3d8>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80009de:	d047      	beq.n	8000a70 <HAL_RCC_OscConfig+0x3c4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009e0:	f7ff fcea 	bl	80003b8 <HAL_GetTick>
 80009e4:	1b00      	subs	r0, r0, r4
 80009e6:	2802      	cmp	r0, #2
 80009e8:	d9f5      	bls.n	80009d6 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80009ea:	2003      	movs	r0, #3
 80009ec:	e045      	b.n	8000a7a <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_PWR_CLK_DISABLE();
 80009ee:	4a25      	ldr	r2, [pc, #148]	; (8000a84 <HAL_RCC_OscConfig+0x3d8>)
 80009f0:	69d3      	ldr	r3, [r2, #28]
 80009f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009f6:	61d3      	str	r3, [r2, #28]
 80009f8:	e7dc      	b.n	80009b4 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 80009fa:	2200      	movs	r2, #0
 80009fc:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <HAL_RCC_OscConfig+0x3dc>)
 80009fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a00:	f7ff fcda 	bl	80003b8 <HAL_GetTick>
 8000a04:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a06:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <HAL_RCC_OscConfig+0x3d8>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000a0e:	d006      	beq.n	8000a1e <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a10:	f7ff fcd2 	bl	80003b8 <HAL_GetTick>
 8000a14:	1b40      	subs	r0, r0, r5
 8000a16:	2802      	cmp	r0, #2
 8000a18:	d9f5      	bls.n	8000a06 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8000a1a:	2003      	movs	r0, #3
 8000a1c:	e02d      	b.n	8000a7a <HAL_RCC_OscConfig+0x3ce>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000a1e:	6a23      	ldr	r3, [r4, #32]
 8000a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a24:	d01a      	beq.n	8000a5c <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a26:	4917      	ldr	r1, [pc, #92]	; (8000a84 <HAL_RCC_OscConfig+0x3d8>)
 8000a28:	684b      	ldr	r3, [r1, #4]
 8000a2a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000a2e:	6a22      	ldr	r2, [r4, #32]
 8000a30:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000a32:	4302      	orrs	r2, r0
 8000a34:	4313      	orrs	r3, r2
 8000a36:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8000a38:	2201      	movs	r2, #1
 8000a3a:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <HAL_RCC_OscConfig+0x3dc>)
 8000a3c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a3e:	f7ff fcbb 	bl	80003b8 <HAL_GetTick>
 8000a42:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <HAL_RCC_OscConfig+0x3d8>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000a4c:	d10e      	bne.n	8000a6c <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a4e:	f7ff fcb3 	bl	80003b8 <HAL_GetTick>
 8000a52:	1b00      	subs	r0, r0, r4
 8000a54:	2802      	cmp	r0, #2
 8000a56:	d9f5      	bls.n	8000a44 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8000a58:	2003      	movs	r0, #3
 8000a5a:	e00e      	b.n	8000a7a <HAL_RCC_OscConfig+0x3ce>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000a5c:	4a09      	ldr	r2, [pc, #36]	; (8000a84 <HAL_RCC_OscConfig+0x3d8>)
 8000a5e:	6853      	ldr	r3, [r2, #4]
 8000a60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000a64:	68a1      	ldr	r1, [r4, #8]
 8000a66:	430b      	orrs	r3, r1
 8000a68:	6053      	str	r3, [r2, #4]
 8000a6a:	e7dc      	b.n	8000a26 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	e004      	b.n	8000a7a <HAL_RCC_OscConfig+0x3ce>
 8000a70:	2000      	movs	r0, #0
 8000a72:	e002      	b.n	8000a7a <HAL_RCC_OscConfig+0x3ce>
        return HAL_ERROR;
 8000a74:	2001      	movs	r0, #1
 8000a76:	e000      	b.n	8000a7a <HAL_RCC_OscConfig+0x3ce>
  return HAL_OK;
 8000a78:	2000      	movs	r0, #0
}
 8000a7a:	b002      	add	sp, #8
 8000a7c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000a7e:	2001      	movs	r0, #1
 8000a80:	e7fb      	b.n	8000a7a <HAL_RCC_OscConfig+0x3ce>
 8000a82:	bf00      	nop
 8000a84:	40021000 	.word	0x40021000
 8000a88:	42420060 	.word	0x42420060

08000a8c <HAL_RCC_GetSysClockFreq>:
{
 8000a8c:	b510      	push	{r4, lr}
 8000a8e:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a90:	4c15      	ldr	r4, [pc, #84]	; (8000ae8 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000a92:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a96:	f10d 0e18 	add.w	lr, sp, #24
 8000a9a:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000a9e:	8a23      	ldrh	r3, [r4, #16]
 8000aa0:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <HAL_RCC_GetSysClockFreq+0x60>)
 8000aa6:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000aa8:	f003 020c 	and.w	r2, r3, #12
 8000aac:	2a08      	cmp	r2, #8
 8000aae:	d118      	bne.n	8000ae2 <HAL_RCC_GetSysClockFreq+0x56>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000ab0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000ab4:	4472      	add	r2, lr
 8000ab6:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000aba:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000abe:	d103      	bne.n	8000ac8 <HAL_RCC_GetSysClockFreq+0x3c>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <HAL_RCC_GetSysClockFreq+0x64>)
 8000ac2:	fb03 f000 	mul.w	r0, r3, r0
 8000ac6:	e00d      	b.n	8000ae4 <HAL_RCC_GetSysClockFreq+0x58>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <HAL_RCC_GetSysClockFreq+0x60>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8000ad0:	4473      	add	r3, lr
 8000ad2:	f813 2c14 	ldrb.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8000ad6:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <HAL_RCC_GetSysClockFreq+0x68>)
 8000ad8:	fbb3 f3f2 	udiv	r3, r3, r2
 8000adc:	fb03 f000 	mul.w	r0, r3, r0
 8000ae0:	e000      	b.n	8000ae4 <HAL_RCC_GetSysClockFreq+0x58>
      sysclockfreq = HSE_VALUE;
 8000ae2:	4804      	ldr	r0, [pc, #16]	; (8000af4 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8000ae4:	b006      	add	sp, #24
 8000ae6:	bd10      	pop	{r4, pc}
 8000ae8:	08000cf4 	.word	0x08000cf4
 8000aec:	40021000 	.word	0x40021000
 8000af0:	003d0900 	.word	0x003d0900
 8000af4:	007a1200 	.word	0x007a1200

08000af8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000af8:	4b59      	ldr	r3, [pc, #356]	; (8000c60 <HAL_RCC_ClockConfig+0x168>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f003 0307 	and.w	r3, r3, #7
 8000b00:	428b      	cmp	r3, r1
 8000b02:	d20c      	bcs.n	8000b1e <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b04:	4a56      	ldr	r2, [pc, #344]	; (8000c60 <HAL_RCC_ClockConfig+0x168>)
 8000b06:	6813      	ldr	r3, [r2, #0]
 8000b08:	f023 0307 	bic.w	r3, r3, #7
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b10:	6813      	ldr	r3, [r2, #0]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	4299      	cmp	r1, r3
 8000b18:	d001      	beq.n	8000b1e <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	4770      	bx	lr
{
 8000b1e:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b20:	6803      	ldr	r3, [r0, #0]
 8000b22:	f013 0f02 	tst.w	r3, #2
 8000b26:	d006      	beq.n	8000b36 <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b28:	4a4e      	ldr	r2, [pc, #312]	; (8000c64 <HAL_RCC_ClockConfig+0x16c>)
 8000b2a:	6853      	ldr	r3, [r2, #4]
 8000b2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b30:	6884      	ldr	r4, [r0, #8]
 8000b32:	4323      	orrs	r3, r4
 8000b34:	6053      	str	r3, [r2, #4]
 8000b36:	460d      	mov	r5, r1
 8000b38:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b3a:	6803      	ldr	r3, [r0, #0]
 8000b3c:	f013 0f01 	tst.w	r3, #1
 8000b40:	d052      	beq.n	8000be8 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b42:	6843      	ldr	r3, [r0, #4]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d023      	beq.n	8000b90 <HAL_RCC_ClockConfig+0x98>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b48:	2b02      	cmp	r3, #2
 8000b4a:	d028      	beq.n	8000b9e <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b4c:	4a45      	ldr	r2, [pc, #276]	; (8000c64 <HAL_RCC_ClockConfig+0x16c>)
 8000b4e:	6812      	ldr	r2, [r2, #0]
 8000b50:	f012 0f02 	tst.w	r2, #2
 8000b54:	f000 8082 	beq.w	8000c5c <HAL_RCC_ClockConfig+0x164>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b58:	4942      	ldr	r1, [pc, #264]	; (8000c64 <HAL_RCC_ClockConfig+0x16c>)
 8000b5a:	684a      	ldr	r2, [r1, #4]
 8000b5c:	f022 0203 	bic.w	r2, r2, #3
 8000b60:	4313      	orrs	r3, r2
 8000b62:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000b64:	f7ff fc28 	bl	80003b8 <HAL_GetTick>
 8000b68:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b6a:	6863      	ldr	r3, [r4, #4]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d01d      	beq.n	8000bac <HAL_RCC_ClockConfig+0xb4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d02a      	beq.n	8000bca <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b74:	4b3b      	ldr	r3, [pc, #236]	; (8000c64 <HAL_RCC_ClockConfig+0x16c>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f013 0f0c 	tst.w	r3, #12
 8000b7c:	d034      	beq.n	8000be8 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b7e:	f7ff fc1b 	bl	80003b8 <HAL_GetTick>
 8000b82:	1b80      	subs	r0, r0, r6
 8000b84:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b88:	4298      	cmp	r0, r3
 8000b8a:	d9f3      	bls.n	8000b74 <HAL_RCC_ClockConfig+0x7c>
          return HAL_TIMEOUT;
 8000b8c:	2003      	movs	r0, #3
 8000b8e:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b90:	4a34      	ldr	r2, [pc, #208]	; (8000c64 <HAL_RCC_ClockConfig+0x16c>)
 8000b92:	6812      	ldr	r2, [r2, #0]
 8000b94:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000b98:	d1de      	bne.n	8000b58 <HAL_RCC_ClockConfig+0x60>
        return HAL_ERROR;
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b9e:	4a31      	ldr	r2, [pc, #196]	; (8000c64 <HAL_RCC_ClockConfig+0x16c>)
 8000ba0:	6812      	ldr	r2, [r2, #0]
 8000ba2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000ba6:	d1d7      	bne.n	8000b58 <HAL_RCC_ClockConfig+0x60>
        return HAL_ERROR;
 8000ba8:	2001      	movs	r0, #1
 8000baa:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bac:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <HAL_RCC_ClockConfig+0x16c>)
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f003 030c 	and.w	r3, r3, #12
 8000bb4:	2b04      	cmp	r3, #4
 8000bb6:	d017      	beq.n	8000be8 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bb8:	f7ff fbfe 	bl	80003b8 <HAL_GetTick>
 8000bbc:	1b80      	subs	r0, r0, r6
 8000bbe:	f241 3388 	movw	r3, #5000	; 0x1388
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d9f2      	bls.n	8000bac <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8000bc6:	2003      	movs	r0, #3
 8000bc8:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bca:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <HAL_RCC_ClockConfig+0x16c>)
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f003 030c 	and.w	r3, r3, #12
 8000bd2:	2b08      	cmp	r3, #8
 8000bd4:	d008      	beq.n	8000be8 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bd6:	f7ff fbef 	bl	80003b8 <HAL_GetTick>
 8000bda:	1b80      	subs	r0, r0, r6
 8000bdc:	f241 3388 	movw	r3, #5000	; 0x1388
 8000be0:	4298      	cmp	r0, r3
 8000be2:	d9f2      	bls.n	8000bca <HAL_RCC_ClockConfig+0xd2>
          return HAL_TIMEOUT;
 8000be4:	2003      	movs	r0, #3
 8000be6:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000be8:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <HAL_RCC_ClockConfig+0x168>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f003 0307 	and.w	r3, r3, #7
 8000bf0:	429d      	cmp	r5, r3
 8000bf2:	d20c      	bcs.n	8000c0e <HAL_RCC_ClockConfig+0x116>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bf4:	4a1a      	ldr	r2, [pc, #104]	; (8000c60 <HAL_RCC_ClockConfig+0x168>)
 8000bf6:	6813      	ldr	r3, [r2, #0]
 8000bf8:	f023 0307 	bic.w	r3, r3, #7
 8000bfc:	432b      	orrs	r3, r5
 8000bfe:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c00:	6813      	ldr	r3, [r2, #0]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	429d      	cmp	r5, r3
 8000c08:	d001      	beq.n	8000c0e <HAL_RCC_ClockConfig+0x116>
      return HAL_ERROR;
 8000c0a:	2001      	movs	r0, #1
}
 8000c0c:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c0e:	6823      	ldr	r3, [r4, #0]
 8000c10:	f013 0f04 	tst.w	r3, #4
 8000c14:	d006      	beq.n	8000c24 <HAL_RCC_ClockConfig+0x12c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c16:	4a13      	ldr	r2, [pc, #76]	; (8000c64 <HAL_RCC_ClockConfig+0x16c>)
 8000c18:	6853      	ldr	r3, [r2, #4]
 8000c1a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c1e:	68e1      	ldr	r1, [r4, #12]
 8000c20:	430b      	orrs	r3, r1
 8000c22:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c24:	6823      	ldr	r3, [r4, #0]
 8000c26:	f013 0f08 	tst.w	r3, #8
 8000c2a:	d007      	beq.n	8000c3c <HAL_RCC_ClockConfig+0x144>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <HAL_RCC_ClockConfig+0x16c>)
 8000c2e:	6853      	ldr	r3, [r2, #4]
 8000c30:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000c34:	6921      	ldr	r1, [r4, #16]
 8000c36:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c3a:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c3c:	f7ff ff26 	bl	8000a8c <HAL_RCC_GetSysClockFreq>
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <HAL_RCC_ClockConfig+0x16c>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c48:	4a07      	ldr	r2, [pc, #28]	; (8000c68 <HAL_RCC_ClockConfig+0x170>)
 8000c4a:	5cd3      	ldrb	r3, [r2, r3]
 8000c4c:	40d8      	lsrs	r0, r3
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <HAL_RCC_ClockConfig+0x174>)
 8000c50:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c52:	200f      	movs	r0, #15
 8000c54:	f7ff fb80 	bl	8000358 <HAL_InitTick>
  return HAL_OK;
 8000c58:	2000      	movs	r0, #0
 8000c5a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	bd70      	pop	{r4, r5, r6, pc}
 8000c60:	40022000 	.word	0x40022000
 8000c64:	40021000 	.word	0x40021000
 8000c68:	08000d08 	.word	0x08000d08
 8000c6c:	20000000 	.word	0x20000000

08000c70 <main>:
#include "main.h"



int main(void)
{
 8000c70:	b508      	push	{r3, lr}
  hwInit();
 8000c72:	f7ff fb67 	bl	8000344 <hwInit>
  apInit();
 8000c76:	f7ff fa69 	bl	800014c <apInit>


  apMain();
 8000c7a:	f7ff fa68 	bl	800014e <apMain>
}
 8000c7e:	2000      	movs	r0, #0
 8000c80:	bd08      	pop	{r3, pc}
	...

08000c84 <__libc_init_array>:
 8000c84:	b570      	push	{r4, r5, r6, lr}
 8000c86:	2500      	movs	r5, #0
 8000c88:	4e0c      	ldr	r6, [pc, #48]	; (8000cbc <__libc_init_array+0x38>)
 8000c8a:	4c0d      	ldr	r4, [pc, #52]	; (8000cc0 <__libc_init_array+0x3c>)
 8000c8c:	1ba4      	subs	r4, r4, r6
 8000c8e:	10a4      	asrs	r4, r4, #2
 8000c90:	42a5      	cmp	r5, r4
 8000c92:	d109      	bne.n	8000ca8 <__libc_init_array+0x24>
 8000c94:	f000 f822 	bl	8000cdc <_init>
 8000c98:	2500      	movs	r5, #0
 8000c9a:	4e0a      	ldr	r6, [pc, #40]	; (8000cc4 <__libc_init_array+0x40>)
 8000c9c:	4c0a      	ldr	r4, [pc, #40]	; (8000cc8 <__libc_init_array+0x44>)
 8000c9e:	1ba4      	subs	r4, r4, r6
 8000ca0:	10a4      	asrs	r4, r4, #2
 8000ca2:	42a5      	cmp	r5, r4
 8000ca4:	d105      	bne.n	8000cb2 <__libc_init_array+0x2e>
 8000ca6:	bd70      	pop	{r4, r5, r6, pc}
 8000ca8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cac:	4798      	blx	r3
 8000cae:	3501      	adds	r5, #1
 8000cb0:	e7ee      	b.n	8000c90 <__libc_init_array+0xc>
 8000cb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cb6:	4798      	blx	r3
 8000cb8:	3501      	adds	r5, #1
 8000cba:	e7f2      	b.n	8000ca2 <__libc_init_array+0x1e>
 8000cbc:	08000d18 	.word	0x08000d18
 8000cc0:	08000d18 	.word	0x08000d18
 8000cc4:	08000d18 	.word	0x08000d18
 8000cc8:	08000d1c 	.word	0x08000d1c

08000ccc <memset>:
 8000ccc:	4603      	mov	r3, r0
 8000cce:	4402      	add	r2, r0
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d100      	bne.n	8000cd6 <memset+0xa>
 8000cd4:	4770      	bx	lr
 8000cd6:	f803 1b01 	strb.w	r1, [r3], #1
 8000cda:	e7f9      	b.n	8000cd0 <memset+0x4>

08000cdc <_init>:
 8000cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cde:	bf00      	nop
 8000ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ce2:	bc08      	pop	{r3}
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	4770      	bx	lr

08000ce8 <_fini>:
 8000ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cea:	bf00      	nop
 8000cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cee:	bc08      	pop	{r3}
 8000cf0:	469e      	mov	lr, r3
 8000cf2:	4770      	bx	lr
