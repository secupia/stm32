
03_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002204  08002204  00012204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002270  08002270  00012270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002274  08002274  00012274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  08002278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000ac  20000068  080022e0  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000114  080022e0  00020114  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000dab5  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002307  00000000  00000000  0002db46  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000720  00000000  00000000  0002fe50  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000698  00000000  00000000  00030570  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000043ce  00000000  00000000  00030c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000021d8  00000000  00000000  00034fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000371ae  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001404  00000000  00000000  0003722c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    000034bb  00000000  00000000  00038630  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080021ec 	.word	0x080021ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080021ec 	.word	0x080021ec

0800014c <apInit>:
#include "ap.h"



void apInit(void)
{
 800014c:	b508      	push	{r3, lr}
  uartOpen(_DEF_UART1, 115200);
 800014e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000152:	2000      	movs	r0, #0
 8000154:	f000 f9b8 	bl	80004c8 <uartOpen>
 8000158:	bd08      	pop	{r3, pc}
	...

0800015c <apMain>:
}

void apMain(void)
{
 800015c:	b508      	push	{r3, lr}
 800015e:	e006      	b.n	800016e <apMain+0x12>
    {
      ledOn(0);
    }
    else
    {
      ledOff(0);
 8000160:	2000      	movs	r0, #0
 8000162:	f000 f953 	bl	800040c <ledOff>
    }

    if(uartAvailable(_DEF_UART1)>0)
 8000166:	2000      	movs	r0, #0
 8000168:	f000 f9f0 	bl	800054c <uartAvailable>
 800016c:	b940      	cbnz	r0, 8000180 <apMain+0x24>
    if(buttonGetPressed(0) == true)
 800016e:	2000      	movs	r0, #0
 8000170:	f000 f920 	bl	80003b4 <buttonGetPressed>
 8000174:	2800      	cmp	r0, #0
 8000176:	d0f3      	beq.n	8000160 <apMain+0x4>
      ledOn(0);
 8000178:	2000      	movs	r0, #0
 800017a:	f000 f93d 	bl	80003f8 <ledOn>
 800017e:	e7f2      	b.n	8000166 <apMain+0xa>
    {
      uartPrintf(_DEF_UART1, "rx: 0x%X \n", uartRead(_DEF_UART1));
 8000180:	2000      	movs	r0, #0
 8000182:	f000 fa27 	bl	80005d4 <uartRead>
 8000186:	4602      	mov	r2, r0
 8000188:	4902      	ldr	r1, [pc, #8]	; (8000194 <apMain+0x38>)
 800018a:	2000      	movs	r0, #0
 800018c:	f000 fa42 	bl	8000614 <uartPrintf>
 8000190:	e7ed      	b.n	800016e <apMain+0x12>
 8000192:	bf00      	nop
 8000194:	08002218 	.word	0x08002218

08000198 <SystemClock_Config>:
  *            Flash Latency(WS)              = 2
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8000198:	b500      	push	{lr}
 800019a:	b091      	sub	sp, #68	; 0x44
  RCC_ClkInitTypeDef clkinitstruct = {0};
 800019c:	2100      	movs	r1, #0
 800019e:	910b      	str	r1, [sp, #44]	; 0x2c
 80001a0:	910c      	str	r1, [sp, #48]	; 0x30
 80001a2:	910d      	str	r1, [sp, #52]	; 0x34
 80001a4:	910e      	str	r1, [sp, #56]	; 0x38
 80001a6:	910f      	str	r1, [sp, #60]	; 0x3c
  RCC_OscInitTypeDef oscinitstruct = {0};
 80001a8:	2228      	movs	r2, #40	; 0x28
 80001aa:	a801      	add	r0, sp, #4
 80001ac:	f001 fbc6 	bl	800193c <memset>

  /* Configure PLL ------------------------------------------------------*/
  /* PLL configuration: PLLCLK = (HSI / 2) * PLLMUL = (8 / 2) * 16 = 64 MHz */
  /* PREDIV1 configuration: PREDIV1CLK = PLLCLK / HSEPredivValue = 64 / 1 = 64 MHz */
  /* Enable HSI and activate PLL with HSi_DIV2 as source */
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_HSI;
 80001b0:	2302      	movs	r3, #2
 80001b2:	9301      	str	r3, [sp, #4]
  oscinitstruct.HSEState        = RCC_HSE_OFF;
  oscinitstruct.LSEState        = RCC_LSE_OFF;
  oscinitstruct.HSIState        = RCC_HSI_ON;
 80001b4:	2201      	movs	r2, #1
 80001b6:	9205      	str	r2, [sp, #20]
  oscinitstruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001b8:	2210      	movs	r2, #16
 80001ba:	9206      	str	r2, [sp, #24]
  oscinitstruct.HSEPredivValue    = RCC_HSE_PREDIV_DIV1;
  oscinitstruct.PLL.PLLState    = RCC_PLL_ON;
 80001bc:	9308      	str	r3, [sp, #32]
  oscinitstruct.PLL.PLLSource   = RCC_PLLSOURCE_HSI_DIV2;
  oscinitstruct.PLL.PLLMUL      = RCC_PLL_MUL16;
 80001be:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001c2:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&oscinitstruct)!= HAL_OK)
 80001c4:	a801      	add	r0, sp, #4
 80001c6:	f000 fd5f 	bl	8000c88 <HAL_RCC_OscConfig>
 80001ca:	b100      	cbz	r0, 80001ce <SystemClock_Config+0x36>
 80001cc:	e7fe      	b.n	80001cc <SystemClock_Config+0x34>
    while(1);
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80001ce:	230f      	movs	r3, #15
 80001d0:	930b      	str	r3, [sp, #44]	; 0x2c
  clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d2:	2102      	movs	r1, #2
 80001d4:	910c      	str	r1, [sp, #48]	; 0x30
  clkinitstruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d6:	2300      	movs	r3, #0
 80001d8:	930d      	str	r3, [sp, #52]	; 0x34
  clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001da:	930f      	str	r3, [sp, #60]	; 0x3c
  clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e0:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2)!= HAL_OK)
 80001e2:	a80b      	add	r0, sp, #44	; 0x2c
 80001e4:	f000 ff76 	bl	80010d4 <HAL_RCC_ClockConfig>
 80001e8:	b100      	cbz	r0, 80001ec <SystemClock_Config+0x54>
 80001ea:	e7fe      	b.n	80001ea <SystemClock_Config+0x52>
  {
    /* Initialization Error */
    while(1);
  }
}
 80001ec:	b011      	add	sp, #68	; 0x44
 80001ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080001f4 <bspInit>:
{
 80001f4:	b500      	push	{lr}
 80001f6:	b083      	sub	sp, #12
  HAL_Init();
 80001f8:	f000 fad4 	bl	80007a4 <HAL_Init>
  SystemClock_Config();
 80001fc:	f7ff ffcc 	bl	8000198 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000200:	4b0a      	ldr	r3, [pc, #40]	; (800022c <bspInit+0x38>)
 8000202:	699a      	ldr	r2, [r3, #24]
 8000204:	f042 0204 	orr.w	r2, r2, #4
 8000208:	619a      	str	r2, [r3, #24]
 800020a:	699a      	ldr	r2, [r3, #24]
 800020c:	f002 0204 	and.w	r2, r2, #4
 8000210:	9200      	str	r2, [sp, #0]
 8000212:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000214:	699a      	ldr	r2, [r3, #24]
 8000216:	f042 0210 	orr.w	r2, r2, #16
 800021a:	619a      	str	r2, [r3, #24]
 800021c:	699b      	ldr	r3, [r3, #24]
 800021e:	f003 0310 	and.w	r3, r3, #16
 8000222:	9301      	str	r3, [sp, #4]
 8000224:	9b01      	ldr	r3, [sp, #4]
}
 8000226:	b003      	add	sp, #12
 8000228:	f85d fb04 	ldr.w	pc, [sp], #4
 800022c:	40021000 	.word	0x40021000

08000230 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000230:	4b0f      	ldr	r3, [pc, #60]	; (8000270 <SystemInit+0x40>)
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	f042 0201 	orr.w	r2, r2, #1
 8000238:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800023a:	6859      	ldr	r1, [r3, #4]
 800023c:	4a0d      	ldr	r2, [pc, #52]	; (8000274 <SystemInit+0x44>)
 800023e:	400a      	ands	r2, r1
 8000240:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000248:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800024c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800024e:	681a      	ldr	r2, [r3, #0]
 8000250:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000254:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000256:	685a      	ldr	r2, [r3, #4]
 8000258:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800025c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800025e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000262:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000264:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000268:	4b03      	ldr	r3, [pc, #12]	; (8000278 <SystemInit+0x48>)
 800026a:	609a      	str	r2, [r3, #8]
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	40021000 	.word	0x40021000
 8000274:	f8ff0000 	.word	0xf8ff0000
 8000278:	e000ed00 	.word	0xe000ed00

0800027c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800027c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800027e:	e003      	b.n	8000288 <LoopCopyDataInit>

08000280 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000280:	4b0b      	ldr	r3, [pc, #44]	; (80002b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000282:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000284:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000286:	3104      	adds	r1, #4

08000288 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000288:	480a      	ldr	r0, [pc, #40]	; (80002b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800028a:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800028c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800028e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000290:	d3f6      	bcc.n	8000280 <CopyDataInit>
  ldr r2, =_sbss
 8000292:	4a0a      	ldr	r2, [pc, #40]	; (80002bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000294:	e002      	b.n	800029c <LoopFillZerobss>

08000296 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000298:	f842 3b04 	str.w	r3, [r2], #4

0800029c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800029c:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800029e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80002a0:	d3f9      	bcc.n	8000296 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80002a2:	f7ff ffc5 	bl	8000230 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002a6:	f001 fb25 	bl	80018f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002aa:	f001 fb19 	bl	80018e0 <main>
  bx lr
 80002ae:	4770      	bx	lr
  ldr r3, =_sidata
 80002b0:	08002278 	.word	0x08002278
  ldr r0, =_sdata
 80002b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80002b8:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 80002bc:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 80002c0:	20000114 	.word	0x20000114

080002c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c4:	e7fe      	b.n	80002c4 <ADC1_2_IRQHandler>

080002c6 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80002c6:	4770      	bx	lr

080002c8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80002c8:	e7fe      	b.n	80002c8 <HardFault_Handler>

080002ca <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80002ca:	e7fe      	b.n	80002ca <MemManage_Handler>

080002cc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80002cc:	e7fe      	b.n	80002cc <BusFault_Handler>

080002ce <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80002ce:	e7fe      	b.n	80002ce <UsageFault_Handler>

080002d0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80002d0:	4770      	bx	lr

080002d2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80002d2:	4770      	bx	lr

080002d4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80002d4:	4770      	bx	lr

080002d6 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80002d6:	b508      	push	{r3, lr}
  HAL_IncTick();
 80002d8:	f000 fa76 	bl	80007c8 <HAL_IncTick>
 80002dc:	bd08      	pop	{r3, pc}

080002de <qbufferCreate>:

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
  bool ret = true;

  p_node->ptr_in  = 0;
 80002de:	2300      	movs	r3, #0
 80002e0:	6003      	str	r3, [r0, #0]
  p_node->ptr_out = 0;
 80002e2:	6043      	str	r3, [r0, #4]
  p_node->length = length;
 80002e4:	6082      	str	r2, [r0, #8]
  p_node->p_buf  = p_buf;
 80002e6:	60c1      	str	r1, [r0, #12]

  if(p_node->p_buf == NULL)
 80002e8:	b109      	cbz	r1, 80002ee <qbufferCreate+0x10>
  bool ret = true;
 80002ea:	2001      	movs	r0, #1
    p_node->length = 0;
    ret = false;
  }

  return ret;
}
 80002ec:	4770      	bx	lr
    p_node->length = 0;
 80002ee:	6083      	str	r3, [r0, #8]
    ret = false;
 80002f0:	4618      	mov	r0, r3
 80002f2:	4770      	bx	lr

080002f4 <qbufferWrite>:
  bool ret = true;
  uint32_t index;
  uint32_t next_index;
  uint32_t i;

  if(p_node->p_buf == NULL) return false;
 80002f4:	68c3      	ldr	r3, [r0, #12]
 80002f6:	b1b3      	cbz	r3, 8000326 <qbufferWrite+0x32>
{
 80002f8:	b4f0      	push	{r4, r5, r6, r7}
 80002fa:	2400      	movs	r4, #0
 80002fc:	e007      	b.n	800030e <qbufferWrite+0x1a>
    if(next_index == p_node->length)
    {
      next_index = 0;
    }

    if(next_index != p_node->ptr_out)
 80002fe:	6846      	ldr	r6, [r0, #4]
 8000300:	42b3      	cmp	r3, r6
 8000302:	d012      	beq.n	800032a <qbufferWrite+0x36>
    {
      p_node->p_buf[index] = p_data[i];
 8000304:	68c6      	ldr	r6, [r0, #12]
 8000306:	5d0f      	ldrb	r7, [r1, r4]
 8000308:	5577      	strb	r7, [r6, r5]
      p_node->ptr_in = next_index;
 800030a:	6003      	str	r3, [r0, #0]
  for(i=0; i<length; i++)
 800030c:	3401      	adds	r4, #1
 800030e:	4294      	cmp	r4, r2
 8000310:	d206      	bcs.n	8000320 <qbufferWrite+0x2c>
    index = p_node->ptr_in;
 8000312:	6805      	ldr	r5, [r0, #0]
    next_index = p_node->ptr_in+1;
 8000314:	1c6b      	adds	r3, r5, #1
    if(next_index == p_node->length)
 8000316:	6886      	ldr	r6, [r0, #8]
 8000318:	42b3      	cmp	r3, r6
 800031a:	d1f0      	bne.n	80002fe <qbufferWrite+0xa>
      next_index = 0;
 800031c:	2300      	movs	r3, #0
 800031e:	e7ee      	b.n	80002fe <qbufferWrite+0xa>
  bool ret = true;
 8000320:	2001      	movs	r0, #1
      break;
    }
  }

  return ret;
}
 8000322:	bcf0      	pop	{r4, r5, r6, r7}
 8000324:	4770      	bx	lr
  if(p_node->p_buf == NULL) return false;
 8000326:	2000      	movs	r0, #0
 8000328:	4770      	bx	lr
      ret = false;  // ERR_FULL
 800032a:	2000      	movs	r0, #0
 800032c:	e7f9      	b.n	8000322 <qbufferWrite+0x2e>

0800032e <qbufferRead>:
  bool ret = true;
  uint32_t index;
  uint32_t next_index;
  uint32_t i;

  if(p_node->p_buf == NULL) return false;
 800032e:	68c3      	ldr	r3, [r0, #12]
 8000330:	b1c3      	cbz	r3, 8000364 <qbufferRead+0x36>
 8000332:	2300      	movs	r3, #0

  for(i=0; i<length; i++)
 8000334:	4293      	cmp	r3, r2
 8000336:	d219      	bcs.n	800036c <qbufferRead+0x3e>
{
 8000338:	b470      	push	{r4, r5, r6}
 800033a:	e009      	b.n	8000350 <qbufferRead+0x22>
    if(next_index == p_node->length)
    {
      next_index = 0;
    }

    if(index != p_node->ptr_in)
 800033c:	6806      	ldr	r6, [r0, #0]
 800033e:	42b4      	cmp	r4, r6
 8000340:	d012      	beq.n	8000368 <qbufferRead+0x3a>
    {
      p_data[i] = p_node->p_buf[index];
 8000342:	68c6      	ldr	r6, [r0, #12]
 8000344:	5d34      	ldrb	r4, [r6, r4]
 8000346:	54cc      	strb	r4, [r1, r3]
      p_node->ptr_out = next_index;
 8000348:	6045      	str	r5, [r0, #4]
  for(i=0; i<length; i++)
 800034a:	3301      	adds	r3, #1
 800034c:	4293      	cmp	r3, r2
 800034e:	d206      	bcs.n	800035e <qbufferRead+0x30>
    index = p_node->ptr_out;
 8000350:	6844      	ldr	r4, [r0, #4]
    next_index = p_node->ptr_out+1;
 8000352:	1c65      	adds	r5, r4, #1
    if(next_index == p_node->length)
 8000354:	6886      	ldr	r6, [r0, #8]
 8000356:	42b5      	cmp	r5, r6
 8000358:	d1f0      	bne.n	800033c <qbufferRead+0xe>
      next_index = 0;
 800035a:	2500      	movs	r5, #0
 800035c:	e7ee      	b.n	800033c <qbufferRead+0xe>
  bool ret = true;
 800035e:	2001      	movs	r0, #1
      break;
    }
  }

  return ret;
}
 8000360:	bc70      	pop	{r4, r5, r6}
 8000362:	4770      	bx	lr
  if(p_node->p_buf == NULL) return false;
 8000364:	2000      	movs	r0, #0
 8000366:	4770      	bx	lr
      ret = false;  // ERR_EMPTY
 8000368:	2000      	movs	r0, #0
 800036a:	e7f9      	b.n	8000360 <qbufferRead+0x32>
  bool ret = true;
 800036c:	2001      	movs	r0, #1
}
 800036e:	4770      	bx	lr

08000370 <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
  uint32_t length;

  length = (p_node->length + p_node->ptr_in - p_node->ptr_out) % p_node->length;
 8000370:	6882      	ldr	r2, [r0, #8]
 8000372:	6803      	ldr	r3, [r0, #0]
 8000374:	4413      	add	r3, r2
 8000376:	6840      	ldr	r0, [r0, #4]
 8000378:	1a1b      	subs	r3, r3, r0
 800037a:	fbb3 f0f2 	udiv	r0, r3, r2

  return length;
}
 800037e:	fb02 3010 	mls	r0, r2, r0, r3
 8000382:	4770      	bx	lr

08000384 <qbufferFlush>:

void  qbufferFlush(qbuffer_t *p_node)
{
  p_node->ptr_in = 0;
 8000384:	2300      	movs	r3, #0
 8000386:	6003      	str	r3, [r0, #0]
  p_node->ptr_out = 0;
 8000388:	6043      	str	r3, [r0, #4]
 800038a:	4770      	bx	lr

0800038c <buttonInit>:
 */

#include "button.h"

void buttonInit(void)
{
 800038c:	b500      	push	{lr}
 800038e:	b085      	sub	sp, #20

  GPIO_InitTypeDef GPIO_InitStruct;

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000390:	2300      	movs	r3, #0
 8000392:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000394:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000396:	2302      	movs	r3, #2
 8000398:	9303      	str	r3, [sp, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800039a:	a904      	add	r1, sp, #16
 800039c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003a0:	f841 3d10 	str.w	r3, [r1, #-16]!
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003a4:	4802      	ldr	r0, [pc, #8]	; (80003b0 <buttonInit+0x24>)
 80003a6:	f000 fadd 	bl	8000964 <HAL_GPIO_Init>

}
 80003aa:	b005      	add	sp, #20
 80003ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80003b0:	40011000 	.word	0x40011000

080003b4 <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 80003b4:	b508      	push	{r3, lr}

  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 80003b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ba:	4804      	ldr	r0, [pc, #16]	; (80003cc <buttonGetPressed+0x18>)
 80003bc:	f000 fc40 	bl	8000c40 <HAL_GPIO_ReadPin>
 80003c0:	b108      	cbz	r0, 80003c6 <buttonGetPressed+0x12>
  {
    return true;
  }
  else
  {
    return false;
 80003c2:	2000      	movs	r0, #0
  }
}
 80003c4:	bd08      	pop	{r3, pc}
    return true;
 80003c6:	2001      	movs	r0, #1
 80003c8:	bd08      	pop	{r3, pc}
 80003ca:	bf00      	nop
 80003cc:	40011000 	.word	0x40011000

080003d0 <ledInit>:

#include "led.h"


void ledInit(void)
{
 80003d0:	b500      	push	{lr}
 80003d2:	b085      	sub	sp, #20
  GPIO_InitTypeDef  GPIO_InitStruct;

  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80003d4:	2301      	movs	r3, #1
 80003d6:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80003d8:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003da:	2303      	movs	r3, #3
 80003dc:	9303      	str	r3, [sp, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80003de:	a904      	add	r1, sp, #16
 80003e0:	2320      	movs	r3, #32
 80003e2:	f841 3d10 	str.w	r3, [r1, #-16]!
  //GPIO_InitStruct.Pin = GPIO_PIN_0;

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e6:	4803      	ldr	r0, [pc, #12]	; (80003f4 <ledInit+0x24>)
 80003e8:	f000 fabc 	bl	8000964 <HAL_GPIO_Init>
}
 80003ec:	b005      	add	sp, #20
 80003ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80003f2:	bf00      	nop
 80003f4:	40010800 	.word	0x40010800

080003f8 <ledOn>:

void ledOn(uint8_t ch)
{
 80003f8:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	2120      	movs	r1, #32
 80003fe:	4802      	ldr	r0, [pc, #8]	; (8000408 <ledOn+0x10>)
 8000400:	f000 fc25 	bl	8000c4e <HAL_GPIO_WritePin>
 8000404:	bd08      	pop	{r3, pc}
 8000406:	bf00      	nop
 8000408:	40010800 	.word	0x40010800

0800040c <ledOff>:
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
}

void ledOff(uint8_t ch)
{
 800040c:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800040e:	2200      	movs	r2, #0
 8000410:	2120      	movs	r1, #32
 8000412:	4802      	ldr	r0, [pc, #8]	; (800041c <ledOff+0x10>)
 8000414:	f000 fc1b 	bl	8000c4e <HAL_GPIO_WritePin>
 8000418:	bd08      	pop	{r3, pc}
 800041a:	bf00      	nop
 800041c:	40010800 	.word	0x40010800

08000420 <uartStartRx>:

  return ret;
}

void uartStartRx(uint8_t channel)
{
 8000420:	b508      	push	{r3, lr}
  uart_t *p_uart = &uart_tbl[channel];

  if(p_uart->rx_mode == UART_MODE_INTERRUPT)
 8000422:	236c      	movs	r3, #108	; 0x6c
 8000424:	4a0a      	ldr	r2, [pc, #40]	; (8000450 <uartStartRx+0x30>)
 8000426:	fb03 2300 	mla	r3, r3, r0, r2
 800042a:	7a5b      	ldrb	r3, [r3, #9]
 800042c:	2b01      	cmp	r3, #1
 800042e:	d000      	beq.n	8000432 <uartStartRx+0x12>
 8000430:	bd08      	pop	{r3, pc}
  {
    HAL_UART_Receive_IT(&p_uart->handle, p_uart->rx_buf, 1);
 8000432:	236c      	movs	r3, #108	; 0x6c
 8000434:	fb03 f000 	mul.w	r0, r3, r0
 8000438:	f100 0108 	add.w	r1, r0, #8
 800043c:	4411      	add	r1, r2
 800043e:	3028      	adds	r0, #40	; 0x28
 8000440:	4410      	add	r0, r2
 8000442:	2201      	movs	r2, #1
 8000444:	3102      	adds	r1, #2
 8000446:	3004      	adds	r0, #4
 8000448:	f001 f927 	bl	800169a <HAL_UART_Receive_IT>
  }
}
 800044c:	e7f0      	b.n	8000430 <uartStartRx+0x10>
 800044e:	bf00      	nop
 8000450:	20000090 	.word	0x20000090

08000454 <uartRxHandler>:
void uartRxHandler(uint8_t channel)
{
  uart_t *p_uart = &uart_tbl[channel];


  if(p_uart->rx_mode == UART_MODE_INTERRUPT)
 8000454:	236c      	movs	r3, #108	; 0x6c
 8000456:	4a10      	ldr	r2, [pc, #64]	; (8000498 <uartRxHandler+0x44>)
 8000458:	fb03 2300 	mla	r3, r3, r0, r2
 800045c:	7a5b      	ldrb	r3, [r3, #9]
 800045e:	2b01      	cmp	r3, #1
 8000460:	d000      	beq.n	8000464 <uartRxHandler+0x10>
 8000462:	4770      	bx	lr
{
 8000464:	b570      	push	{r4, r5, r6, lr}
 8000466:	4604      	mov	r4, r0
  {
      qbufferWrite(&p_uart->qbuffer_rx, &p_uart->rx_buf[0], 1);
 8000468:	256c      	movs	r5, #108	; 0x6c
 800046a:	fb05 f600 	mul.w	r6, r5, r0
 800046e:	f106 0108 	add.w	r1, r6, #8
 8000472:	4615      	mov	r5, r2
 8000474:	4411      	add	r1, r2
 8000476:	f106 0018 	add.w	r0, r6, #24
 800047a:	4410      	add	r0, r2
 800047c:	2201      	movs	r2, #1
 800047e:	3102      	adds	r1, #2
 8000480:	3004      	adds	r0, #4
 8000482:	f7ff ff37 	bl	80002f4 <qbufferWrite>

      __HAL_UNLOCK(&p_uart->handle);
 8000486:	4435      	add	r5, r6
 8000488:	2300      	movs	r3, #0
 800048a:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
      uartStartRx(channel);
 800048e:	4620      	mov	r0, r4
 8000490:	f7ff ffc6 	bl	8000420 <uartStartRx>
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	bf00      	nop
 8000498:	20000090 	.word	0x20000090

0800049c <uartInit>:
  for(i=0; i<UART_MAX_CH; i++)
 800049c:	2300      	movs	r3, #0
 800049e:	b103      	cbz	r3, 80004a2 <uartInit+0x6>
 80004a0:	4770      	bx	lr
{
 80004a2:	b410      	push	{r4}
    uart_tbl[i].is_open = false;
 80004a4:	4c07      	ldr	r4, [pc, #28]	; (80004c4 <uartInit+0x28>)
 80004a6:	226c      	movs	r2, #108	; 0x6c
 80004a8:	fb02 f203 	mul.w	r2, r2, r3
 80004ac:	18a0      	adds	r0, r4, r2
 80004ae:	2100      	movs	r1, #0
 80004b0:	54a1      	strb	r1, [r4, r2]
    uart_tbl[i].rx_mode = UART_MODE_POLLING;
 80004b2:	7241      	strb	r1, [r0, #9]
    uart_tbl[i].tx_mode = UART_MODE_POLLING;
 80004b4:	7201      	strb	r1, [r0, #8]
  for(i=0; i<UART_MAX_CH; i++)
 80004b6:	3301      	adds	r3, #1
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d0f2      	beq.n	80004a4 <uartInit+0x8>
}
 80004be:	bc10      	pop	{r4}
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	20000090 	.word	0x20000090

080004c8 <uartOpen>:
  switch(channel)
 80004c8:	b108      	cbz	r0, 80004ce <uartOpen+0x6>
}
 80004ca:	2000      	movs	r0, #0
 80004cc:	4770      	bx	lr
{
 80004ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d0:	4605      	mov	r5, r0
 80004d2:	460e      	mov	r6, r1
      p_uart->handle.Instance = USART2;
 80004d4:	481a      	ldr	r0, [pc, #104]	; (8000540 <uartOpen+0x78>)
 80004d6:	236c      	movs	r3, #108	; 0x6c
 80004d8:	fb03 f305 	mul.w	r3, r3, r5
 80004dc:	18c2      	adds	r2, r0, r3
 80004de:	4919      	ldr	r1, [pc, #100]	; (8000544 <uartOpen+0x7c>)
 80004e0:	62d1      	str	r1, [r2, #44]	; 0x2c
      p_uart->handle.Init.BaudRate = baud;
 80004e2:	6316      	str	r6, [r2, #48]	; 0x30
      p_uart->handle.Init.WordLength = UART_WORDLENGTH_8B;
 80004e4:	2100      	movs	r1, #0
 80004e6:	6351      	str	r1, [r2, #52]	; 0x34
      p_uart->handle.Init.StopBits = UART_STOPBITS_1;
 80004e8:	6391      	str	r1, [r2, #56]	; 0x38
      p_uart->handle.Init.Parity = UART_PARITY_NONE;
 80004ea:	63d1      	str	r1, [r2, #60]	; 0x3c
      p_uart->handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ec:	6451      	str	r1, [r2, #68]	; 0x44
      p_uart->handle.Init.Mode = UART_MODE_TX_RX;
 80004ee:	210c      	movs	r1, #12
 80004f0:	6411      	str	r1, [r2, #64]	; 0x40
      if(HAL_UART_DeInit(&p_uart->handle) != HAL_OK)
 80004f2:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80004f6:	4404      	add	r4, r0
 80004f8:	3404      	adds	r4, #4
 80004fa:	4620      	mov	r0, r4
 80004fc:	f001 f849 	bl	8001592 <HAL_UART_DeInit>
 8000500:	b108      	cbz	r0, 8000506 <uartOpen+0x3e>
}
 8000502:	2000      	movs	r0, #0
 8000504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_UART_Init(&p_uart->handle) != HAL_OK)
 8000506:	4620      	mov	r0, r4
 8000508:	f001 f814 	bl	8001534 <HAL_UART_Init>
 800050c:	2800      	cmp	r0, #0
 800050e:	d1f8      	bne.n	8000502 <uartOpen+0x3a>
      qbufferCreate(&p_uart->qbuffer_rx, uart_rx_qbuf[channel], UART_RX_BUF_LENGTH);
 8000510:	246c      	movs	r4, #108	; 0x6c
 8000512:	fb04 f405 	mul.w	r4, r4, r5
 8000516:	f104 0018 	add.w	r0, r4, #24
 800051a:	4f09      	ldr	r7, [pc, #36]	; (8000540 <uartOpen+0x78>)
 800051c:	4438      	add	r0, r7
 800051e:	2210      	movs	r2, #16
 8000520:	4909      	ldr	r1, [pc, #36]	; (8000548 <uartOpen+0x80>)
 8000522:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8000526:	3004      	adds	r0, #4
 8000528:	f7ff fed9 	bl	80002de <qbufferCreate>
      p_uart->rx_mode = UART_MODE_INTERRUPT;
 800052c:	193a      	adds	r2, r7, r4
 800052e:	2301      	movs	r3, #1
 8000530:	7253      	strb	r3, [r2, #9]
      p_uart->baud = baud;
 8000532:	6056      	str	r6, [r2, #4]
      p_uart->is_open = true;
 8000534:	553b      	strb	r3, [r7, r4]
      uartStartRx(channel);
 8000536:	4628      	mov	r0, r5
 8000538:	f7ff ff72 	bl	8000420 <uartStartRx>
      break;
 800053c:	e7e1      	b.n	8000502 <uartOpen+0x3a>
 800053e:	bf00      	nop
 8000540:	20000090 	.word	0x20000090
 8000544:	40004400 	.word	0x40004400
 8000548:	200000fc 	.word	0x200000fc

0800054c <uartAvailable>:
  if(channel >= UART_MAX_CH)
 800054c:	b108      	cbz	r0, 8000552 <uartAvailable+0x6>
    return 0;
 800054e:	2000      	movs	r0, #0
 8000550:	4770      	bx	lr
{
 8000552:	b508      	push	{r3, lr}
 8000554:	4603      	mov	r3, r0
  return qbufferAvailable(&uart_tbl[channel].qbuffer_rx);
 8000556:	206c      	movs	r0, #108	; 0x6c
 8000558:	fb00 f003 	mul.w	r0, r0, r3
 800055c:	3018      	adds	r0, #24
 800055e:	4b03      	ldr	r3, [pc, #12]	; (800056c <uartAvailable+0x20>)
 8000560:	4418      	add	r0, r3
 8000562:	3004      	adds	r0, #4
 8000564:	f7ff ff04 	bl	8000370 <qbufferAvailable>
 8000568:	bd08      	pop	{r3, pc}
 800056a:	bf00      	nop
 800056c:	20000090 	.word	0x20000090

08000570 <uartFlush>:
{
 8000570:	b508      	push	{r3, lr}
  if(uart_tbl[channel].rx_mode == UART_MODE_INTERRUPT)
 8000572:	236c      	movs	r3, #108	; 0x6c
 8000574:	4a07      	ldr	r2, [pc, #28]	; (8000594 <uartFlush+0x24>)
 8000576:	fb03 2300 	mla	r3, r3, r0, r2
 800057a:	7a5b      	ldrb	r3, [r3, #9]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d000      	beq.n	8000582 <uartFlush+0x12>
 8000580:	bd08      	pop	{r3, pc}
    qbufferFlush(&uart_tbl[channel].qbuffer_rx);
 8000582:	236c      	movs	r3, #108	; 0x6c
 8000584:	fb03 f000 	mul.w	r0, r3, r0
 8000588:	3018      	adds	r0, #24
 800058a:	4410      	add	r0, r2
 800058c:	3004      	adds	r0, #4
 800058e:	f7ff fef9 	bl	8000384 <qbufferFlush>
}
 8000592:	e7f5      	b.n	8000580 <uartFlush+0x10>
 8000594:	20000090 	.word	0x20000090

08000598 <uartWrite>:
{
 8000598:	b538      	push	{r3, r4, r5, lr}
  if(p_uart->rx_mode == UART_MODE_INTERRUPT)
 800059a:	236c      	movs	r3, #108	; 0x6c
 800059c:	4d0c      	ldr	r5, [pc, #48]	; (80005d0 <uartWrite+0x38>)
 800059e:	fb03 5300 	mla	r3, r3, r0, r5
 80005a2:	7a5b      	ldrb	r3, [r3, #9]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d001      	beq.n	80005ac <uartWrite+0x14>
  int32_t ret = 0;
 80005a8:	2000      	movs	r0, #0
 80005aa:	bd38      	pop	{r3, r4, r5, pc}
 80005ac:	4614      	mov	r4, r2
    if(HAL_UART_Transmit(&p_uart->handle, (uint8_t*)p_data, length, 1000) == HAL_OK)
 80005ae:	236c      	movs	r3, #108	; 0x6c
 80005b0:	fb03 f000 	mul.w	r0, r3, r0
 80005b4:	3028      	adds	r0, #40	; 0x28
 80005b6:	4428      	add	r0, r5
 80005b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005bc:	b292      	uxth	r2, r2
 80005be:	3004      	adds	r0, #4
 80005c0:	f000 fffa 	bl	80015b8 <HAL_UART_Transmit>
 80005c4:	b908      	cbnz	r0, 80005ca <uartWrite+0x32>
      ret = length;
 80005c6:	4620      	mov	r0, r4
 80005c8:	bd38      	pop	{r3, r4, r5, pc}
  int32_t ret = 0;
 80005ca:	2000      	movs	r0, #0
}
 80005cc:	bd38      	pop	{r3, r4, r5, pc}
 80005ce:	bf00      	nop
 80005d0:	20000090 	.word	0x20000090

080005d4 <uartRead>:
{
 80005d4:	b500      	push	{lr}
 80005d6:	b083      	sub	sp, #12
  uint8_t ret = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	f88d 3007 	strb.w	r3, [sp, #7]
  if(p_uart->rx_mode == UART_MODE_INTERRUPT)
 80005de:	236c      	movs	r3, #108	; 0x6c
 80005e0:	4a0b      	ldr	r2, [pc, #44]	; (8000610 <uartRead+0x3c>)
 80005e2:	fb03 2300 	mla	r3, r3, r0, r2
 80005e6:	7a5b      	ldrb	r3, [r3, #9]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d004      	beq.n	80005f6 <uartRead+0x22>
}
 80005ec:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80005f0:	b003      	add	sp, #12
 80005f2:	f85d fb04 	ldr.w	pc, [sp], #4
    qbufferRead(&p_uart->qbuffer_rx, &ret, 1);
 80005f6:	236c      	movs	r3, #108	; 0x6c
 80005f8:	fb03 f000 	mul.w	r0, r3, r0
 80005fc:	3018      	adds	r0, #24
 80005fe:	4410      	add	r0, r2
 8000600:	2201      	movs	r2, #1
 8000602:	f10d 0107 	add.w	r1, sp, #7
 8000606:	3004      	adds	r0, #4
 8000608:	f7ff fe91 	bl	800032e <qbufferRead>
 800060c:	e7ee      	b.n	80005ec <uartRead+0x18>
 800060e:	bf00      	nop
 8000610:	20000090 	.word	0x20000090

08000614 <uartPrintf>:
{
 8000614:	b40e      	push	{r1, r2, r3}
 8000616:	b510      	push	{r4, lr}
 8000618:	b0c3      	sub	sp, #268	; 0x10c
 800061a:	4604      	mov	r4, r0
 800061c:	ab45      	add	r3, sp, #276	; 0x114
 800061e:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start (arg, fmt);
 8000622:	9341      	str	r3, [sp, #260]	; 0x104
  len = vsnprintf(print_buffer, 255, fmt, arg);
 8000624:	21ff      	movs	r1, #255	; 0xff
 8000626:	a801      	add	r0, sp, #4
 8000628:	f001 f9bc 	bl	80019a4 <vsniprintf>
  ret = uartWrite(channel, (uint8_t *)print_buffer, len);
 800062c:	4602      	mov	r2, r0
 800062e:	a901      	add	r1, sp, #4
 8000630:	4620      	mov	r0, r4
 8000632:	f7ff ffb1 	bl	8000598 <uartWrite>
}
 8000636:	b043      	add	sp, #268	; 0x10c
 8000638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800063c:	b003      	add	sp, #12
 800063e:	4770      	bx	lr

08000640 <uartErrHandler>:
  }
}

void uartErrHandler(uint8_t channel)
{
 8000640:	b510      	push	{r4, lr}
 8000642:	4604      	mov	r4, r0
  uartFlush(channel);
 8000644:	f7ff ff94 	bl	8000570 <uartFlush>
  uartStartRx(channel);
 8000648:	4620      	mov	r0, r4
 800064a:	f7ff fee9 	bl	8000420 <uartStartRx>
 800064e:	bd10      	pop	{r4, pc}

08000650 <HAL_UART_RxCpltCallback>:
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000650:	b508      	push	{r3, lr}
  if (UartHandle->Instance == USART2)
 8000652:	6802      	ldr	r2, [r0, #0]
 8000654:	4b03      	ldr	r3, [pc, #12]	; (8000664 <HAL_UART_RxCpltCallback+0x14>)
 8000656:	429a      	cmp	r2, r3
 8000658:	d000      	beq.n	800065c <HAL_UART_RxCpltCallback+0xc>
 800065a:	bd08      	pop	{r3, pc}
  {
    uartRxHandler(_DEF_UART1);
 800065c:	2000      	movs	r0, #0
 800065e:	f7ff fef9 	bl	8000454 <uartRxHandler>
  }
}
 8000662:	e7fa      	b.n	800065a <HAL_UART_RxCpltCallback+0xa>
 8000664:	40004400 	.word	0x40004400

08000668 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8000668:	b510      	push	{r4, lr}
 800066a:	4604      	mov	r4, r0
  HAL_UART_DeInit(UartHandle);
 800066c:	f000 ff91 	bl	8001592 <HAL_UART_DeInit>
  HAL_UART_Init(UartHandle);
 8000670:	4620      	mov	r0, r4
 8000672:	f000 ff5f 	bl	8001534 <HAL_UART_Init>

  if (UartHandle->Instance == USART2)
 8000676:	6822      	ldr	r2, [r4, #0]
 8000678:	4b03      	ldr	r3, [pc, #12]	; (8000688 <HAL_UART_ErrorCallback+0x20>)
 800067a:	429a      	cmp	r2, r3
 800067c:	d000      	beq.n	8000680 <HAL_UART_ErrorCallback+0x18>
 800067e:	bd10      	pop	{r4, pc}
  {
    uartErrHandler(_DEF_UART1);
 8000680:	2000      	movs	r0, #0
 8000682:	f7ff ffdd 	bl	8000640 <uartErrHandler>
  }
}
 8000686:	e7fa      	b.n	800067e <HAL_UART_ErrorCallback+0x16>
 8000688:	40004400 	.word	0x40004400

0800068c <USART2_IRQHandler>:

//-- _DEF_UART1 Interrupt
//
void USART2_IRQHandler(void)
{
 800068c:	b508      	push	{r3, lr}
  HAL_UART_IRQHandler(&uart_tbl[_DEF_UART1].handle);
 800068e:	4802      	ldr	r0, [pc, #8]	; (8000698 <USART2_IRQHandler+0xc>)
 8000690:	f001 f88e 	bl	80017b0 <HAL_UART_IRQHandler>
 8000694:	bd08      	pop	{r3, pc}
 8000696:	bf00      	nop
 8000698:	200000bc 	.word	0x200000bc

0800069c <HAL_UART_MspInit>:
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
  GPIO_InitTypeDef  GPIO_InitStruct;


  if (huart->Instance == USART2)
 800069c:	6802      	ldr	r2, [r0, #0]
 800069e:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <HAL_UART_MspInit+0x78>)
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d000      	beq.n	80006a6 <HAL_UART_MspInit+0xa>
 80006a4:	4770      	bx	lr
{
 80006a6:	b570      	push	{r4, r5, r6, lr}
 80006a8:	b086      	sub	sp, #24
  {
    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80006ae:	699a      	ldr	r2, [r3, #24]
 80006b0:	f042 0204 	orr.w	r2, r2, #4
 80006b4:	619a      	str	r2, [r3, #24]
 80006b6:	699a      	ldr	r2, [r3, #24]
 80006b8:	f002 0204 	and.w	r2, r2, #4
 80006bc:	9200      	str	r2, [sp, #0]
 80006be:	9a00      	ldr	r2, [sp, #0]


    /* Enable USARTx clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006c0:	69da      	ldr	r2, [r3, #28]
 80006c2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80006c6:	61da      	str	r2, [r3, #28]
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ce:	9301      	str	r3, [sp, #4]
 80006d0:	9b01      	ldr	r3, [sp, #4]

    /*##-2- Configure peripheral GPIO ##########################################*/
    /* UART TX GPIO pin configuration  */
    GPIO_InitStruct.Pin       = GPIO_PIN_2;
 80006d2:	2304      	movs	r3, #4
 80006d4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80006d6:	2302      	movs	r3, #2
 80006d8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80006da:	2501      	movs	r5, #1
 80006dc:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 80006de:	2303      	movs	r3, #3
 80006e0:	9305      	str	r3, [sp, #20]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e2:	4e0d      	ldr	r6, [pc, #52]	; (8000718 <HAL_UART_MspInit+0x7c>)
 80006e4:	a902      	add	r1, sp, #8
 80006e6:	4630      	mov	r0, r6
 80006e8:	f000 f93c 	bl	8000964 <HAL_GPIO_Init>

    /* UART RX GPIO pin configuration  */
    GPIO_InitStruct.Pin       = GPIO_PIN_3;
 80006ec:	2308      	movs	r3, #8
 80006ee:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 80006f0:	2400      	movs	r4, #0
 80006f2:	9403      	str	r4, [sp, #12]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f4:	eb0d 0103 	add.w	r1, sp, r3
 80006f8:	4630      	mov	r0, r6
 80006fa:	f000 f933 	bl	8000964 <HAL_GPIO_Init>

    /*##-3- Configure the NVIC for UART ########################################*/
    /* NVIC for USART */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 80006fe:	462a      	mov	r2, r5
 8000700:	4621      	mov	r1, r4
 8000702:	2026      	movs	r0, #38	; 0x26
 8000704:	f000 f880 	bl	8000808 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000708:	2026      	movs	r0, #38	; 0x26
 800070a:	f000 f8af 	bl	800086c <HAL_NVIC_EnableIRQ>
  }
}
 800070e:	b006      	add	sp, #24
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	bf00      	nop
 8000714:	40004400 	.word	0x40004400
 8000718:	40010800 	.word	0x40010800

0800071c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  if (huart->Instance == USART2)
 800071c:	6802      	ldr	r2, [r0, #0]
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <HAL_UART_MspDeInit+0x3c>)
 8000720:	429a      	cmp	r2, r3
 8000722:	d000      	beq.n	8000726 <HAL_UART_MspDeInit+0xa>
 8000724:	4770      	bx	lr
{
 8000726:	b510      	push	{r4, lr}
  {
    /*##-1- Reset peripherals ##################################################*/
    __HAL_RCC_USART2_FORCE_RESET();
 8000728:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800072c:	691a      	ldr	r2, [r3, #16]
 800072e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000732:	611a      	str	r2, [r3, #16]
    __HAL_RCC_USART2_RELEASE_RESET();
 8000734:	691a      	ldr	r2, [r3, #16]
 8000736:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800073a:	611a      	str	r2, [r3, #16]

    /*##-2- Disable peripherals and GPIO Clocks #################################*/
    /* Configure UART Tx as alternate function  */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 800073c:	4c07      	ldr	r4, [pc, #28]	; (800075c <HAL_UART_MspDeInit+0x40>)
 800073e:	2104      	movs	r1, #4
 8000740:	4620      	mov	r0, r4
 8000742:	f000 fa05 	bl	8000b50 <HAL_GPIO_DeInit>
    /* Configure UART Rx as alternate function  */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3);
 8000746:	2108      	movs	r1, #8
 8000748:	4620      	mov	r0, r4
 800074a:	f000 fa01 	bl	8000b50 <HAL_GPIO_DeInit>

    /*##-3- Disable the NVIC for UART ##########################################*/
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800074e:	2026      	movs	r0, #38	; 0x26
 8000750:	f000 f898 	bl	8000884 <HAL_NVIC_DisableIRQ>
 8000754:	bd10      	pop	{r4, pc}
 8000756:	bf00      	nop
 8000758:	40004400 	.word	0x40004400
 800075c:	40010800 	.word	0x40010800

08000760 <hwInit>:

#include "hw.h"


void hwInit(void)
{
 8000760:	b508      	push	{r3, lr}
  bspInit();
 8000762:	f7ff fd47 	bl	80001f4 <bspInit>

  ledInit();
 8000766:	f7ff fe33 	bl	80003d0 <ledInit>
  buttonInit();
 800076a:	f7ff fe0f 	bl	800038c <buttonInit>
  uartInit();
 800076e:	f7ff fe95 	bl	800049c <uartInit>
 8000772:	bd08      	pop	{r3, pc}

08000774 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000774:	4770      	bx	lr
	...

08000778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000778:	b510      	push	{r4, lr}
 800077a:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <HAL_InitTick+0x24>)
 800077e:	6818      	ldr	r0, [r3, #0]
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <HAL_InitTick+0x28>)
 8000782:	fba3 3000 	umull	r3, r0, r3, r0
 8000786:	0980      	lsrs	r0, r0, #6
 8000788:	f000 f88a 	bl	80008a0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800078c:	2200      	movs	r2, #0
 800078e:	4621      	mov	r1, r4
 8000790:	f04f 30ff 	mov.w	r0, #4294967295
 8000794:	f000 f838 	bl	8000808 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000798:	2000      	movs	r0, #0
 800079a:	bd10      	pop	{r4, pc}
 800079c:	20000000 	.word	0x20000000
 80007a0:	10624dd3 	.word	0x10624dd3

080007a4 <HAL_Init>:
{
 80007a4:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a6:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <HAL_Init+0x20>)
 80007a8:	6813      	ldr	r3, [r2, #0]
 80007aa:	f043 0310 	orr.w	r3, r3, #16
 80007ae:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b0:	2003      	movs	r0, #3
 80007b2:	f000 f817 	bl	80007e4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80007b6:	200f      	movs	r0, #15
 80007b8:	f7ff ffde 	bl	8000778 <HAL_InitTick>
  HAL_MspInit();
 80007bc:	f7ff ffda 	bl	8000774 <HAL_MspInit>
}
 80007c0:	2000      	movs	r0, #0
 80007c2:	bd08      	pop	{r3, pc}
 80007c4:	40022000 	.word	0x40022000

080007c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80007c8:	4a02      	ldr	r2, [pc, #8]	; (80007d4 <HAL_IncTick+0xc>)
 80007ca:	6813      	ldr	r3, [r2, #0]
 80007cc:	3301      	adds	r3, #1
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	2000010c 	.word	0x2000010c

080007d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80007d8:	4b01      	ldr	r3, [pc, #4]	; (80007e0 <HAL_GetTick+0x8>)
 80007da:	6818      	ldr	r0, [r3, #0]
}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	2000010c 	.word	0x2000010c

080007e4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e4:	4a07      	ldr	r2, [pc, #28]	; (8000804 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80007e6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007ec:	041b      	lsls	r3, r3, #16
 80007ee:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80007f0:	0200      	lsls	r0, r0, #8
 80007f2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007f6:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80007f8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80007fc:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000800:	60d0      	str	r0, [r2, #12]
 8000802:	4770      	bx	lr
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000808:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800080a:	4b16      	ldr	r3, [pc, #88]	; (8000864 <HAL_NVIC_SetPriority+0x5c>)
 800080c:	68db      	ldr	r3, [r3, #12]
 800080e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000812:	f1c3 0407 	rsb	r4, r3, #7
 8000816:	2c04      	cmp	r4, #4
 8000818:	bf28      	it	cs
 800081a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800081c:	1d1d      	adds	r5, r3, #4
 800081e:	2d06      	cmp	r5, #6
 8000820:	d917      	bls.n	8000852 <HAL_NVIC_SetPriority+0x4a>
 8000822:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000824:	2501      	movs	r5, #1
 8000826:	fa05 f404 	lsl.w	r4, r5, r4
 800082a:	3c01      	subs	r4, #1
 800082c:	4021      	ands	r1, r4
 800082e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000830:	fa05 f303 	lsl.w	r3, r5, r3
 8000834:	3b01      	subs	r3, #1
 8000836:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000838:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 800083a:	2800      	cmp	r0, #0
 800083c:	db0b      	blt.n	8000856 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083e:	0109      	lsls	r1, r1, #4
 8000840:	b2c9      	uxtb	r1, r1
 8000842:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000846:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800084a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800084e:	bc30      	pop	{r4, r5}
 8000850:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000852:	2300      	movs	r3, #0
 8000854:	e7e6      	b.n	8000824 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000856:	f000 000f 	and.w	r0, r0, #15
 800085a:	0109      	lsls	r1, r1, #4
 800085c:	b2c9      	uxtb	r1, r1
 800085e:	4b02      	ldr	r3, [pc, #8]	; (8000868 <HAL_NVIC_SetPriority+0x60>)
 8000860:	5419      	strb	r1, [r3, r0]
 8000862:	e7f4      	b.n	800084e <HAL_NVIC_SetPriority+0x46>
 8000864:	e000ed00 	.word	0xe000ed00
 8000868:	e000ed14 	.word	0xe000ed14

0800086c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800086c:	0942      	lsrs	r2, r0, #5
 800086e:	f000 001f 	and.w	r0, r0, #31
 8000872:	2301      	movs	r3, #1
 8000874:	fa03 f000 	lsl.w	r0, r3, r0
 8000878:	4b01      	ldr	r3, [pc, #4]	; (8000880 <HAL_NVIC_EnableIRQ+0x14>)
 800087a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800087e:	4770      	bx	lr
 8000880:	e000e100 	.word	0xe000e100

08000884 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000884:	0943      	lsrs	r3, r0, #5
 8000886:	f000 001f 	and.w	r0, r0, #31
 800088a:	2201      	movs	r2, #1
 800088c:	fa02 f000 	lsl.w	r0, r2, r0
 8000890:	3320      	adds	r3, #32
 8000892:	4a02      	ldr	r2, [pc, #8]	; (800089c <HAL_NVIC_DisableIRQ+0x18>)
 8000894:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000e100 	.word	0xe000e100

080008a0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008a0:	3801      	subs	r0, #1
 80008a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008a6:	d20a      	bcs.n	80008be <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_SYSTICK_Config+0x24>)
 80008aa:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ac:	21f0      	movs	r1, #240	; 0xf0
 80008ae:	4a06      	ldr	r2, [pc, #24]	; (80008c8 <HAL_SYSTICK_Config+0x28>)
 80008b0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b4:	2000      	movs	r0, #0
 80008b6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008b8:	2207      	movs	r2, #7
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80008be:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000e010 	.word	0xe000e010
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80008cc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80008ce:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80008d2:	2b02      	cmp	r3, #2
 80008d4:	d003      	beq.n	80008de <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008d6:	2304      	movs	r3, #4
 80008d8:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80008da:	2001      	movs	r0, #1
 80008dc:	bd08      	pop	{r3, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008de:	6802      	ldr	r2, [r0, #0]
 80008e0:	6813      	ldr	r3, [r2, #0]
 80008e2:	f023 030e 	bic.w	r3, r3, #14
 80008e6:	6013      	str	r3, [r2, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80008e8:	6802      	ldr	r2, [r0, #0]
 80008ea:	6813      	ldr	r3, [r2, #0]
 80008ec:	f023 0301 	bic.w	r3, r3, #1
 80008f0:	6013      	str	r3, [r2, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80008f2:	6803      	ldr	r3, [r0, #0]
 80008f4:	4a19      	ldr	r2, [pc, #100]	; (800095c <HAL_DMA_Abort_IT+0x90>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d014      	beq.n	8000924 <HAL_DMA_Abort_IT+0x58>
 80008fa:	3214      	adds	r2, #20
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d01f      	beq.n	8000940 <HAL_DMA_Abort_IT+0x74>
 8000900:	3214      	adds	r2, #20
 8000902:	4293      	cmp	r3, r2
 8000904:	d01e      	beq.n	8000944 <HAL_DMA_Abort_IT+0x78>
 8000906:	3214      	adds	r2, #20
 8000908:	4293      	cmp	r3, r2
 800090a:	d01e      	beq.n	800094a <HAL_DMA_Abort_IT+0x7e>
 800090c:	3214      	adds	r2, #20
 800090e:	4293      	cmp	r3, r2
 8000910:	d01e      	beq.n	8000950 <HAL_DMA_Abort_IT+0x84>
 8000912:	3214      	adds	r2, #20
 8000914:	4293      	cmp	r3, r2
 8000916:	d002      	beq.n	800091e <HAL_DMA_Abort_IT+0x52>
 8000918:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800091c:	e003      	b.n	8000926 <HAL_DMA_Abort_IT+0x5a>
 800091e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000922:	e000      	b.n	8000926 <HAL_DMA_Abort_IT+0x5a>
 8000924:	2201      	movs	r2, #1
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <HAL_DMA_Abort_IT+0x94>)
 8000928:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800092a:	2301      	movs	r3, #1
 800092c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000930:	2300      	movs	r3, #0
 8000932:	f880 3020 	strb.w	r3, [r0, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000936:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000938:	b16b      	cbz	r3, 8000956 <HAL_DMA_Abort_IT+0x8a>
    {
      hdma->XferAbortCallback(hdma);
 800093a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800093c:	2000      	movs	r0, #0
 800093e:	bd08      	pop	{r3, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000940:	2210      	movs	r2, #16
 8000942:	e7f0      	b.n	8000926 <HAL_DMA_Abort_IT+0x5a>
 8000944:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000948:	e7ed      	b.n	8000926 <HAL_DMA_Abort_IT+0x5a>
 800094a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800094e:	e7ea      	b.n	8000926 <HAL_DMA_Abort_IT+0x5a>
 8000950:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000954:	e7e7      	b.n	8000926 <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8000956:	2000      	movs	r0, #0
    } 
  }
  return status;
}
 8000958:	bd08      	pop	{r3, pc}
 800095a:	bf00      	nop
 800095c:	40020008 	.word	0x40020008
 8000960:	40020000 	.word	0x40020000

08000964 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000966:	b083      	sub	sp, #12
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000968:	2600      	movs	r6, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800096a:	4634      	mov	r4, r6
 800096c:	e071      	b.n	8000a52 <HAL_GPIO_Init+0xee>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800096e:	2d00      	cmp	r5, #0
 8000970:	f000 80a1 	beq.w	8000ab6 <HAL_GPIO_Init+0x152>
 8000974:	2d01      	cmp	r5, #1
 8000976:	d100      	bne.n	800097a <HAL_GPIO_Init+0x16>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000978:	68ce      	ldr	r6, [r1, #12]
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800097a:	2bff      	cmp	r3, #255	; 0xff
 800097c:	f200 80af 	bhi.w	8000ade <HAL_GPIO_Init+0x17a>
 8000980:	4686      	mov	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000982:	2bff      	cmp	r3, #255	; 0xff
 8000984:	f200 80ae 	bhi.w	8000ae4 <HAL_GPIO_Init+0x180>
 8000988:	00a5      	lsls	r5, r4, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800098a:	f8de 2000 	ldr.w	r2, [lr]
 800098e:	270f      	movs	r7, #15
 8000990:	40af      	lsls	r7, r5
 8000992:	ea22 0207 	bic.w	r2, r2, r7
 8000996:	fa06 f505 	lsl.w	r5, r6, r5
 800099a:	432a      	orrs	r2, r5
 800099c:	f8ce 2000 	str.w	r2, [lr]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80009a0:	684a      	ldr	r2, [r1, #4]
 80009a2:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80009a6:	d053      	beq.n	8000a50 <HAL_GPIO_Init+0xec>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009a8:	4a63      	ldr	r2, [pc, #396]	; (8000b38 <HAL_GPIO_Init+0x1d4>)
 80009aa:	6995      	ldr	r5, [r2, #24]
 80009ac:	f045 0501 	orr.w	r5, r5, #1
 80009b0:	6195      	str	r5, [r2, #24]
 80009b2:	6992      	ldr	r2, [r2, #24]
 80009b4:	f002 0201 	and.w	r2, r2, #1
 80009b8:	9201      	str	r2, [sp, #4]
 80009ba:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 80009bc:	08a5      	lsrs	r5, r4, #2
 80009be:	1caf      	adds	r7, r5, #2
 80009c0:	4a5e      	ldr	r2, [pc, #376]	; (8000b3c <HAL_GPIO_Init+0x1d8>)
 80009c2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80009c6:	f004 0703 	and.w	r7, r4, #3
 80009ca:	00bf      	lsls	r7, r7, #2
 80009cc:	f04f 0e0f 	mov.w	lr, #15
 80009d0:	fa0e fe07 	lsl.w	lr, lr, r7
 80009d4:	ea22 020e 	bic.w	r2, r2, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009d8:	f8df e170 	ldr.w	lr, [pc, #368]	; 8000b4c <HAL_GPIO_Init+0x1e8>
 80009dc:	4570      	cmp	r0, lr
 80009de:	f000 8088 	beq.w	8000af2 <HAL_GPIO_Init+0x18e>
 80009e2:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 80009e6:	4570      	cmp	r0, lr
 80009e8:	f000 8086 	beq.w	8000af8 <HAL_GPIO_Init+0x194>
 80009ec:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 80009f0:	4570      	cmp	r0, lr
 80009f2:	f000 8084 	beq.w	8000afe <HAL_GPIO_Init+0x19a>
 80009f6:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 80009fa:	4570      	cmp	r0, lr
 80009fc:	d076      	beq.n	8000aec <HAL_GPIO_Init+0x188>
 80009fe:	f04f 0e04 	mov.w	lr, #4
 8000a02:	fa0e f707 	lsl.w	r7, lr, r7
 8000a06:	433a      	orrs	r2, r7
        AFIO->EXTICR[position >> 2U] = temp;
 8000a08:	3502      	adds	r5, #2
 8000a0a:	4f4c      	ldr	r7, [pc, #304]	; (8000b3c <HAL_GPIO_Init+0x1d8>)
 8000a0c:	f847 2025 	str.w	r2, [r7, r5, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a10:	684a      	ldr	r2, [r1, #4]
 8000a12:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8000a16:	d075      	beq.n	8000b04 <HAL_GPIO_Init+0x1a0>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000a18:	4d49      	ldr	r5, [pc, #292]	; (8000b40 <HAL_GPIO_Init+0x1dc>)
 8000a1a:	682a      	ldr	r2, [r5, #0]
 8000a1c:	431a      	orrs	r2, r3
 8000a1e:	602a      	str	r2, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a20:	684a      	ldr	r2, [r1, #4]
 8000a22:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000a26:	d073      	beq.n	8000b10 <HAL_GPIO_Init+0x1ac>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000a28:	4d45      	ldr	r5, [pc, #276]	; (8000b40 <HAL_GPIO_Init+0x1dc>)
 8000a2a:	686a      	ldr	r2, [r5, #4]
 8000a2c:	431a      	orrs	r2, r3
 8000a2e:	606a      	str	r2, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a30:	684a      	ldr	r2, [r1, #4]
 8000a32:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8000a36:	d071      	beq.n	8000b1c <HAL_GPIO_Init+0x1b8>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000a38:	4d41      	ldr	r5, [pc, #260]	; (8000b40 <HAL_GPIO_Init+0x1dc>)
 8000a3a:	68aa      	ldr	r2, [r5, #8]
 8000a3c:	431a      	orrs	r2, r3
 8000a3e:	60aa      	str	r2, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a40:	684a      	ldr	r2, [r1, #4]
 8000a42:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8000a46:	d06f      	beq.n	8000b28 <HAL_GPIO_Init+0x1c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000a48:	4d3d      	ldr	r5, [pc, #244]	; (8000b40 <HAL_GPIO_Init+0x1dc>)
 8000a4a:	68ea      	ldr	r2, [r5, #12]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	60eb      	str	r3, [r5, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000a50:	3401      	adds	r4, #1
 8000a52:	2c0f      	cmp	r4, #15
 8000a54:	d86e      	bhi.n	8000b34 <HAL_GPIO_Init+0x1d0>
    ioposition = (0x01U << position);
 8000a56:	2201      	movs	r2, #1
 8000a58:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a5a:	680b      	ldr	r3, [r1, #0]
 8000a5c:	4013      	ands	r3, r2
    if (iocurrent == ioposition)
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d1f6      	bne.n	8000a50 <HAL_GPIO_Init+0xec>
      switch (GPIO_Init->Mode)
 8000a62:	684d      	ldr	r5, [r1, #4]
 8000a64:	2d12      	cmp	r5, #18
 8000a66:	d030      	beq.n	8000aca <HAL_GPIO_Init+0x166>
 8000a68:	d80b      	bhi.n	8000a82 <HAL_GPIO_Init+0x11e>
 8000a6a:	2d02      	cmp	r5, #2
 8000a6c:	d02a      	beq.n	8000ac4 <HAL_GPIO_Init+0x160>
 8000a6e:	f67f af7e 	bls.w	800096e <HAL_GPIO_Init+0xa>
 8000a72:	2d03      	cmp	r5, #3
 8000a74:	d02f      	beq.n	8000ad6 <HAL_GPIO_Init+0x172>
 8000a76:	2d11      	cmp	r5, #17
 8000a78:	f47f af7f 	bne.w	800097a <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a7c:	68ce      	ldr	r6, [r1, #12]
 8000a7e:	3604      	adds	r6, #4
          break;
 8000a80:	e77b      	b.n	800097a <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8000a82:	4f30      	ldr	r7, [pc, #192]	; (8000b44 <HAL_GPIO_Init+0x1e0>)
 8000a84:	42bd      	cmp	r5, r7
 8000a86:	d016      	beq.n	8000ab6 <HAL_GPIO_Init+0x152>
 8000a88:	d90c      	bls.n	8000aa4 <HAL_GPIO_Init+0x140>
 8000a8a:	4f2f      	ldr	r7, [pc, #188]	; (8000b48 <HAL_GPIO_Init+0x1e4>)
 8000a8c:	42bd      	cmp	r5, r7
 8000a8e:	d012      	beq.n	8000ab6 <HAL_GPIO_Init+0x152>
 8000a90:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000a94:	42bd      	cmp	r5, r7
 8000a96:	d00e      	beq.n	8000ab6 <HAL_GPIO_Init+0x152>
 8000a98:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000a9c:	42bd      	cmp	r5, r7
 8000a9e:	f47f af6c 	bne.w	800097a <HAL_GPIO_Init+0x16>
 8000aa2:	e008      	b.n	8000ab6 <HAL_GPIO_Init+0x152>
 8000aa4:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000aa8:	42bd      	cmp	r5, r7
 8000aaa:	d004      	beq.n	8000ab6 <HAL_GPIO_Init+0x152>
 8000aac:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000ab0:	42bd      	cmp	r5, r7
 8000ab2:	f47f af62 	bne.w	800097a <HAL_GPIO_Init+0x16>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8000ab6:	688d      	ldr	r5, [r1, #8]
 8000ab8:	b17d      	cbz	r5, 8000ada <HAL_GPIO_Init+0x176>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8000aba:	2d01      	cmp	r5, #1
 8000abc:	d008      	beq.n	8000ad0 <HAL_GPIO_Init+0x16c>
            GPIOx->BRR = ioposition;
 8000abe:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ac0:	2608      	movs	r6, #8
 8000ac2:	e75a      	b.n	800097a <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ac4:	68ce      	ldr	r6, [r1, #12]
 8000ac6:	3608      	adds	r6, #8
          break;
 8000ac8:	e757      	b.n	800097a <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000aca:	68ce      	ldr	r6, [r1, #12]
 8000acc:	360c      	adds	r6, #12
          break;
 8000ace:	e754      	b.n	800097a <HAL_GPIO_Init+0x16>
            GPIOx->BSRR = ioposition;
 8000ad0:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ad2:	2608      	movs	r6, #8
 8000ad4:	e751      	b.n	800097a <HAL_GPIO_Init+0x16>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ad6:	2600      	movs	r6, #0
 8000ad8:	e74f      	b.n	800097a <HAL_GPIO_Init+0x16>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ada:	2604      	movs	r6, #4
 8000adc:	e74d      	b.n	800097a <HAL_GPIO_Init+0x16>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ade:	f100 0e04 	add.w	lr, r0, #4
 8000ae2:	e74e      	b.n	8000982 <HAL_GPIO_Init+0x1e>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000ae4:	f1a4 0508 	sub.w	r5, r4, #8
 8000ae8:	00ad      	lsls	r5, r5, #2
 8000aea:	e74e      	b.n	800098a <HAL_GPIO_Init+0x26>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000aec:	f04f 0e03 	mov.w	lr, #3
 8000af0:	e787      	b.n	8000a02 <HAL_GPIO_Init+0x9e>
 8000af2:	f04f 0e00 	mov.w	lr, #0
 8000af6:	e784      	b.n	8000a02 <HAL_GPIO_Init+0x9e>
 8000af8:	f04f 0e01 	mov.w	lr, #1
 8000afc:	e781      	b.n	8000a02 <HAL_GPIO_Init+0x9e>
 8000afe:	f04f 0e02 	mov.w	lr, #2
 8000b02:	e77e      	b.n	8000a02 <HAL_GPIO_Init+0x9e>
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8000b04:	4d0e      	ldr	r5, [pc, #56]	; (8000b40 <HAL_GPIO_Init+0x1dc>)
 8000b06:	682a      	ldr	r2, [r5, #0]
 8000b08:	ea22 0203 	bic.w	r2, r2, r3
 8000b0c:	602a      	str	r2, [r5, #0]
 8000b0e:	e787      	b.n	8000a20 <HAL_GPIO_Init+0xbc>
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8000b10:	4d0b      	ldr	r5, [pc, #44]	; (8000b40 <HAL_GPIO_Init+0x1dc>)
 8000b12:	686a      	ldr	r2, [r5, #4]
 8000b14:	ea22 0203 	bic.w	r2, r2, r3
 8000b18:	606a      	str	r2, [r5, #4]
 8000b1a:	e789      	b.n	8000a30 <HAL_GPIO_Init+0xcc>
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000b1c:	4d08      	ldr	r5, [pc, #32]	; (8000b40 <HAL_GPIO_Init+0x1dc>)
 8000b1e:	68aa      	ldr	r2, [r5, #8]
 8000b20:	ea22 0203 	bic.w	r2, r2, r3
 8000b24:	60aa      	str	r2, [r5, #8]
 8000b26:	e78b      	b.n	8000a40 <HAL_GPIO_Init+0xdc>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8000b28:	4d05      	ldr	r5, [pc, #20]	; (8000b40 <HAL_GPIO_Init+0x1dc>)
 8000b2a:	68ea      	ldr	r2, [r5, #12]
 8000b2c:	ea22 0303 	bic.w	r3, r2, r3
 8000b30:	60eb      	str	r3, [r5, #12]
 8000b32:	e78d      	b.n	8000a50 <HAL_GPIO_Init+0xec>
        }
      }
    }
  }
}
 8000b34:	b003      	add	sp, #12
 8000b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40010000 	.word	0x40010000
 8000b40:	40010400 	.word	0x40010400
 8000b44:	10210000 	.word	0x10210000
 8000b48:	10310000 	.word	0x10310000
 8000b4c:	40010800 	.word	0x40010800

08000b50 <HAL_GPIO_DeInit>:
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{ 
  uint32_t position = 0x00U;
 8000b50:	2200      	movs	r2, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8000b52:	e065      	b.n	8000c20 <HAL_GPIO_DeInit+0xd0>
    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b54:	f100 0e04 	add.w	lr, r0, #4
 8000b58:	e03d      	b.n	8000bd6 <HAL_GPIO_DeInit+0x86>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000b5a:	f1a2 0608 	sub.w	r6, r2, #8
 8000b5e:	00b7      	lsls	r7, r6, #2
      
      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), GPIO_CRL_CNF0_0 << registeroffset);
 8000b60:	f8de 4000 	ldr.w	r4, [lr]
 8000b64:	250f      	movs	r5, #15
 8000b66:	fa05 f607 	lsl.w	r6, r5, r7
 8000b6a:	ea24 0406 	bic.w	r4, r4, r6
 8000b6e:	2604      	movs	r6, #4
 8000b70:	40be      	lsls	r6, r7
 8000b72:	4334      	orrs	r4, r6
 8000b74:	f8ce 4000 	str.w	r4, [lr]
      
      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8000b78:	68c4      	ldr	r4, [r0, #12]
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	401c      	ands	r4, r3
 8000b7e:	60c4      	str	r4, [r0, #12]
      
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = AFIO->EXTICR[position >> 2U];
 8000b80:	ea4f 0e92 	mov.w	lr, r2, lsr #2
 8000b84:	f10e 0602 	add.w	r6, lr, #2
 8000b88:	4c2a      	ldr	r4, [pc, #168]	; (8000c34 <HAL_GPIO_DeInit+0xe4>)
 8000b8a:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
      tmp &= 0x0FU << (4U * (position & 0x03U));
 8000b8e:	f002 0403 	and.w	r4, r2, #3
 8000b92:	00a4      	lsls	r4, r4, #2
 8000b94:	40a5      	lsls	r5, r4
 8000b96:	402e      	ands	r6, r5
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8000b98:	4f27      	ldr	r7, [pc, #156]	; (8000c38 <HAL_GPIO_DeInit+0xe8>)
 8000b9a:	42b8      	cmp	r0, r7
 8000b9c:	d021      	beq.n	8000be2 <HAL_GPIO_DeInit+0x92>
 8000b9e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000ba2:	42b8      	cmp	r0, r7
 8000ba4:	d01f      	beq.n	8000be6 <HAL_GPIO_DeInit+0x96>
 8000ba6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000baa:	42b8      	cmp	r0, r7
 8000bac:	d01d      	beq.n	8000bea <HAL_GPIO_DeInit+0x9a>
 8000bae:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000bb2:	42b8      	cmp	r0, r7
 8000bb4:	d013      	beq.n	8000bde <HAL_GPIO_DeInit+0x8e>
 8000bb6:	2704      	movs	r7, #4
 8000bb8:	fa07 f404 	lsl.w	r4, r7, r4
 8000bbc:	42a6      	cmp	r6, r4
 8000bbe:	d016      	beq.n	8000bee <HAL_GPIO_DeInit+0x9e>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8000bc0:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0U)
 8000bc2:	fa31 f302 	lsrs.w	r3, r1, r2
 8000bc6:	d029      	beq.n	8000c1c <HAL_GPIO_DeInit+0xcc>
    iocurrent = (GPIO_Pin) & (1U << position);
 8000bc8:	2301      	movs	r3, #1
 8000bca:	4093      	lsls	r3, r2
    if (iocurrent)
 8000bcc:	400b      	ands	r3, r1
 8000bce:	d0f7      	beq.n	8000bc0 <HAL_GPIO_DeInit+0x70>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bd0:	2bff      	cmp	r3, #255	; 0xff
 8000bd2:	d8bf      	bhi.n	8000b54 <HAL_GPIO_DeInit+0x4>
 8000bd4:	4686      	mov	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000bd6:	2bff      	cmp	r3, #255	; 0xff
 8000bd8:	d8bf      	bhi.n	8000b5a <HAL_GPIO_DeInit+0xa>
 8000bda:	0097      	lsls	r7, r2, #2
 8000bdc:	e7c0      	b.n	8000b60 <HAL_GPIO_DeInit+0x10>
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8000bde:	2703      	movs	r7, #3
 8000be0:	e7ea      	b.n	8000bb8 <HAL_GPIO_DeInit+0x68>
 8000be2:	2700      	movs	r7, #0
 8000be4:	e7e8      	b.n	8000bb8 <HAL_GPIO_DeInit+0x68>
 8000be6:	2701      	movs	r7, #1
 8000be8:	e7e6      	b.n	8000bb8 <HAL_GPIO_DeInit+0x68>
 8000bea:	2702      	movs	r7, #2
 8000bec:	e7e4      	b.n	8000bb8 <HAL_GPIO_DeInit+0x68>
        CLEAR_BIT(AFIO->EXTICR[position >> 2U], tmp);
 8000bee:	4f11      	ldr	r7, [pc, #68]	; (8000c34 <HAL_GPIO_DeInit+0xe4>)
 8000bf0:	f10e 0402 	add.w	r4, lr, #2
 8000bf4:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
 8000bf8:	ea26 0505 	bic.w	r5, r6, r5
 8000bfc:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8000c00:	4c0e      	ldr	r4, [pc, #56]	; (8000c3c <HAL_GPIO_DeInit+0xec>)
 8000c02:	6825      	ldr	r5, [r4, #0]
 8000c04:	401d      	ands	r5, r3
 8000c06:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8000c08:	6865      	ldr	r5, [r4, #4]
 8000c0a:	401d      	ands	r5, r3
 8000c0c:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8000c0e:	68a5      	ldr	r5, [r4, #8]
 8000c10:	401d      	ands	r5, r3
 8000c12:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8000c14:	68e5      	ldr	r5, [r4, #12]
 8000c16:	402b      	ands	r3, r5
 8000c18:	60e3      	str	r3, [r4, #12]
 8000c1a:	e7d1      	b.n	8000bc0 <HAL_GPIO_DeInit+0x70>
  }
}
 8000c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    position++;
 8000c1e:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0U)
 8000c20:	fa31 f302 	lsrs.w	r3, r1, r2
 8000c24:	d005      	beq.n	8000c32 <HAL_GPIO_DeInit+0xe2>
    iocurrent = (GPIO_Pin) & (1U << position);
 8000c26:	2301      	movs	r3, #1
 8000c28:	4093      	lsls	r3, r2
    if (iocurrent)
 8000c2a:	400b      	ands	r3, r1
 8000c2c:	d0f7      	beq.n	8000c1e <HAL_GPIO_DeInit+0xce>
{ 
 8000c2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c30:	e7ce      	b.n	8000bd0 <HAL_GPIO_DeInit+0x80>
 8000c32:	4770      	bx	lr
 8000c34:	40010000 	.word	0x40010000
 8000c38:	40010800 	.word	0x40010800
 8000c3c:	40010400 	.word	0x40010400

08000c40 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c40:	6883      	ldr	r3, [r0, #8]
 8000c42:	4219      	tst	r1, r3
 8000c44:	d101      	bne.n	8000c4a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c46:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8000c48:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	4770      	bx	lr

08000c4e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c4e:	b912      	cbnz	r2, 8000c56 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c50:	0409      	lsls	r1, r1, #16
 8000c52:	6101      	str	r1, [r0, #16]
 8000c54:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000c56:	6101      	str	r1, [r0, #16]
 8000c58:	4770      	bx	lr
	...

08000c5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000c5c:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000c5e:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <RCC_Delay+0x24>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <RCC_Delay+0x28>)
 8000c64:	fba2 2303 	umull	r2, r3, r2, r3
 8000c68:	0a5b      	lsrs	r3, r3, #9
 8000c6a:	fb00 f003 	mul.w	r0, r0, r3
 8000c6e:	9001      	str	r0, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000c70:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000c72:	9b01      	ldr	r3, [sp, #4]
 8000c74:	1e5a      	subs	r2, r3, #1
 8000c76:	9201      	str	r2, [sp, #4]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d1f9      	bne.n	8000c70 <RCC_Delay+0x14>
}
 8000c7c:	b002      	add	sp, #8
 8000c7e:	4770      	bx	lr
 8000c80:	20000000 	.word	0x20000000
 8000c84:	10624dd3 	.word	0x10624dd3

08000c88 <HAL_RCC_OscConfig>:
{
 8000c88:	b570      	push	{r4, r5, r6, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c8e:	6803      	ldr	r3, [r0, #0]
 8000c90:	f013 0f01 	tst.w	r3, #1
 8000c94:	d03d      	beq.n	8000d12 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c96:	4bac      	ldr	r3, [pc, #688]	; (8000f48 <HAL_RCC_OscConfig+0x2c0>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 030c 	and.w	r3, r3, #12
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	d02e      	beq.n	8000d00 <HAL_RCC_OscConfig+0x78>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ca2:	4ba9      	ldr	r3, [pc, #676]	; (8000f48 <HAL_RCC_OscConfig+0x2c0>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 030c 	and.w	r3, r3, #12
 8000caa:	2b08      	cmp	r3, #8
 8000cac:	d023      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cae:	6863      	ldr	r3, [r4, #4]
 8000cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cb4:	d051      	beq.n	8000d5a <HAL_RCC_OscConfig+0xd2>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d155      	bne.n	8000d66 <HAL_RCC_OscConfig+0xde>
 8000cba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000cbe:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000cd0:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cd2:	6863      	ldr	r3, [r4, #4]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d060      	beq.n	8000d9a <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 8000cd8:	f7ff fd7e 	bl	80007d8 <HAL_GetTick>
 8000cdc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cde:	4b9a      	ldr	r3, [pc, #616]	; (8000f48 <HAL_RCC_OscConfig+0x2c0>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000ce6:	d114      	bne.n	8000d12 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ce8:	f7ff fd76 	bl	80007d8 <HAL_GetTick>
 8000cec:	1b40      	subs	r0, r0, r5
 8000cee:	2864      	cmp	r0, #100	; 0x64
 8000cf0:	d9f5      	bls.n	8000cde <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 8000cf2:	2003      	movs	r0, #3
 8000cf4:	e1af      	b.n	8001056 <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cf6:	4b94      	ldr	r3, [pc, #592]	; (8000f48 <HAL_RCC_OscConfig+0x2c0>)
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000cfe:	d0d6      	beq.n	8000cae <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d00:	4b91      	ldr	r3, [pc, #580]	; (8000f48 <HAL_RCC_OscConfig+0x2c0>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000d08:	d003      	beq.n	8000d12 <HAL_RCC_OscConfig+0x8a>
 8000d0a:	6863      	ldr	r3, [r4, #4]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	f000 819f 	beq.w	8001050 <HAL_RCC_OscConfig+0x3c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d12:	6823      	ldr	r3, [r4, #0]
 8000d14:	f013 0f02 	tst.w	r3, #2
 8000d18:	d065      	beq.n	8000de6 <HAL_RCC_OscConfig+0x15e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d1a:	4b8b      	ldr	r3, [pc, #556]	; (8000f48 <HAL_RCC_OscConfig+0x2c0>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f013 0f0c 	tst.w	r3, #12
 8000d22:	d04e      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d24:	4b88      	ldr	r3, [pc, #544]	; (8000f48 <HAL_RCC_OscConfig+0x2c0>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 030c 	and.w	r3, r3, #12
 8000d2c:	2b08      	cmp	r3, #8
 8000d2e:	d043      	beq.n	8000db8 <HAL_RCC_OscConfig+0x130>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d30:	6923      	ldr	r3, [r4, #16]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d079      	beq.n	8000e2a <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 8000d36:	2201      	movs	r2, #1
 8000d38:	4b84      	ldr	r3, [pc, #528]	; (8000f4c <HAL_RCC_OscConfig+0x2c4>)
 8000d3a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d3c:	f7ff fd4c 	bl	80007d8 <HAL_GetTick>
 8000d40:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d42:	4b81      	ldr	r3, [pc, #516]	; (8000f48 <HAL_RCC_OscConfig+0x2c0>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f013 0f02 	tst.w	r3, #2
 8000d4a:	d165      	bne.n	8000e18 <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d4c:	f7ff fd44 	bl	80007d8 <HAL_GetTick>
 8000d50:	1b40      	subs	r0, r0, r5
 8000d52:	2802      	cmp	r0, #2
 8000d54:	d9f5      	bls.n	8000d42 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 8000d56:	2003      	movs	r0, #3
 8000d58:	e17d      	b.n	8001056 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d5a:	4a7b      	ldr	r2, [pc, #492]	; (8000f48 <HAL_RCC_OscConfig+0x2c0>)
 8000d5c:	6813      	ldr	r3, [r2, #0]
 8000d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d62:	6013      	str	r3, [r2, #0]
 8000d64:	e7b5      	b.n	8000cd2 <HAL_RCC_OscConfig+0x4a>
 8000d66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d6a:	d009      	beq.n	8000d80 <HAL_RCC_OscConfig+0xf8>
 8000d6c:	4b76      	ldr	r3, [pc, #472]	; (8000f48 <HAL_RCC_OscConfig+0x2c0>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	e7a8      	b.n	8000cd2 <HAL_RCC_OscConfig+0x4a>
 8000d80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d84:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	e79b      	b.n	8000cd2 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 8000d9a:	f7ff fd1d 	bl	80007d8 <HAL_GetTick>
 8000d9e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000da0:	4b69      	ldr	r3, [pc, #420]	; (8000f48 <HAL_RCC_OscConfig+0x2c0>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000da8:	d0b3      	beq.n	8000d12 <HAL_RCC_OscConfig+0x8a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000daa:	f7ff fd15 	bl	80007d8 <HAL_GetTick>
 8000dae:	1b40      	subs	r0, r0, r5
 8000db0:	2864      	cmp	r0, #100	; 0x64
 8000db2:	d9f5      	bls.n	8000da0 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8000db4:	2003      	movs	r0, #3
 8000db6:	e14e      	b.n	8001056 <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000db8:	4b63      	ldr	r3, [pc, #396]	; (8000f48 <HAL_RCC_OscConfig+0x2c0>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000dc0:	d1b6      	bne.n	8000d30 <HAL_RCC_OscConfig+0xa8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dc2:	4b61      	ldr	r3, [pc, #388]	; (8000f48 <HAL_RCC_OscConfig+0x2c0>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f013 0f02 	tst.w	r3, #2
 8000dca:	d004      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x14e>
 8000dcc:	6923      	ldr	r3, [r4, #16]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d001      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	e13f      	b.n	8001056 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dd6:	4a5c      	ldr	r2, [pc, #368]	; (8000f48 <HAL_RCC_OscConfig+0x2c0>)
 8000dd8:	6813      	ldr	r3, [r2, #0]
 8000dda:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000dde:	6961      	ldr	r1, [r4, #20]
 8000de0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000de4:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000de6:	6823      	ldr	r3, [r4, #0]
 8000de8:	f013 0f08 	tst.w	r3, #8
 8000dec:	d032      	beq.n	8000e54 <HAL_RCC_OscConfig+0x1cc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dee:	69a3      	ldr	r3, [r4, #24]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d06e      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x24a>
      __HAL_RCC_LSI_ENABLE();
 8000df4:	2201      	movs	r2, #1
 8000df6:	4b56      	ldr	r3, [pc, #344]	; (8000f50 <HAL_RCC_OscConfig+0x2c8>)
 8000df8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000dfa:	f7ff fced 	bl	80007d8 <HAL_GetTick>
 8000dfe:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e00:	4b51      	ldr	r3, [pc, #324]	; (8000f48 <HAL_RCC_OscConfig+0x2c0>)
 8000e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e04:	f013 0f02 	tst.w	r3, #2
 8000e08:	d121      	bne.n	8000e4e <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e0a:	f7ff fce5 	bl	80007d8 <HAL_GetTick>
 8000e0e:	1b40      	subs	r0, r0, r5
 8000e10:	2802      	cmp	r0, #2
 8000e12:	d9f5      	bls.n	8000e00 <HAL_RCC_OscConfig+0x178>
          return HAL_TIMEOUT;
 8000e14:	2003      	movs	r0, #3
 8000e16:	e11e      	b.n	8001056 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e18:	4a4b      	ldr	r2, [pc, #300]	; (8000f48 <HAL_RCC_OscConfig+0x2c0>)
 8000e1a:	6813      	ldr	r3, [r2, #0]
 8000e1c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e20:	6961      	ldr	r1, [r4, #20]
 8000e22:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	e7dd      	b.n	8000de6 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	4b47      	ldr	r3, [pc, #284]	; (8000f4c <HAL_RCC_OscConfig+0x2c4>)
 8000e2e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e30:	f7ff fcd2 	bl	80007d8 <HAL_GetTick>
 8000e34:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e36:	4b44      	ldr	r3, [pc, #272]	; (8000f48 <HAL_RCC_OscConfig+0x2c0>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f013 0f02 	tst.w	r3, #2
 8000e3e:	d0d2      	beq.n	8000de6 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e40:	f7ff fcca 	bl	80007d8 <HAL_GetTick>
 8000e44:	1b40      	subs	r0, r0, r5
 8000e46:	2802      	cmp	r0, #2
 8000e48:	d9f5      	bls.n	8000e36 <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 8000e4a:	2003      	movs	r0, #3
 8000e4c:	e103      	b.n	8001056 <HAL_RCC_OscConfig+0x3ce>
      RCC_Delay(1);
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f7ff ff04 	bl	8000c5c <RCC_Delay>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e54:	6823      	ldr	r3, [r4, #0]
 8000e56:	f013 0f04 	tst.w	r3, #4
 8000e5a:	f000 8099 	beq.w	8000f90 <HAL_RCC_OscConfig+0x308>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e5e:	4b3a      	ldr	r3, [pc, #232]	; (8000f48 <HAL_RCC_OscConfig+0x2c0>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000e66:	d146      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e68:	4b37      	ldr	r3, [pc, #220]	; (8000f48 <HAL_RCC_OscConfig+0x2c0>)
 8000e6a:	69da      	ldr	r2, [r3, #28]
 8000e6c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e70:	61da      	str	r2, [r3, #28]
 8000e72:	69db      	ldr	r3, [r3, #28]
 8000e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e78:	9301      	str	r3, [sp, #4]
 8000e7a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e7c:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e7e:	4b35      	ldr	r3, [pc, #212]	; (8000f54 <HAL_RCC_OscConfig+0x2cc>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000e86:	d038      	beq.n	8000efa <HAL_RCC_OscConfig+0x272>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e88:	68e3      	ldr	r3, [r4, #12]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d049      	beq.n	8000f22 <HAL_RCC_OscConfig+0x29a>
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d14d      	bne.n	8000f2e <HAL_RCC_OscConfig+0x2a6>
 8000e92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e96:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000e9a:	6a1a      	ldr	r2, [r3, #32]
 8000e9c:	f022 0201 	bic.w	r2, r2, #1
 8000ea0:	621a      	str	r2, [r3, #32]
 8000ea2:	6a1a      	ldr	r2, [r3, #32]
 8000ea4:	f022 0204 	bic.w	r2, r2, #4
 8000ea8:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000eaa:	68e3      	ldr	r3, [r4, #12]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d05d      	beq.n	8000f6c <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8000eb0:	f7ff fc92 	bl	80007d8 <HAL_GetTick>
 8000eb4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eb6:	4b24      	ldr	r3, [pc, #144]	; (8000f48 <HAL_RCC_OscConfig+0x2c0>)
 8000eb8:	6a1b      	ldr	r3, [r3, #32]
 8000eba:	f013 0f02 	tst.w	r3, #2
 8000ebe:	d166      	bne.n	8000f8e <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ec0:	f7ff fc8a 	bl	80007d8 <HAL_GetTick>
 8000ec4:	1b80      	subs	r0, r0, r6
 8000ec6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000eca:	4298      	cmp	r0, r3
 8000ecc:	d9f3      	bls.n	8000eb6 <HAL_RCC_OscConfig+0x22e>
          return HAL_TIMEOUT;
 8000ece:	2003      	movs	r0, #3
 8000ed0:	e0c1      	b.n	8001056 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_LSI_DISABLE();
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <HAL_RCC_OscConfig+0x2c8>)
 8000ed6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ed8:	f7ff fc7e 	bl	80007d8 <HAL_GetTick>
 8000edc:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ede:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <HAL_RCC_OscConfig+0x2c0>)
 8000ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee2:	f013 0f02 	tst.w	r3, #2
 8000ee6:	d0b5      	beq.n	8000e54 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ee8:	f7ff fc76 	bl	80007d8 <HAL_GetTick>
 8000eec:	1b40      	subs	r0, r0, r5
 8000eee:	2802      	cmp	r0, #2
 8000ef0:	d9f5      	bls.n	8000ede <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8000ef2:	2003      	movs	r0, #3
 8000ef4:	e0af      	b.n	8001056 <HAL_RCC_OscConfig+0x3ce>
    FlagStatus       pwrclkchanged = RESET;
 8000ef6:	2500      	movs	r5, #0
 8000ef8:	e7c1      	b.n	8000e7e <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000efa:	4a16      	ldr	r2, [pc, #88]	; (8000f54 <HAL_RCC_OscConfig+0x2cc>)
 8000efc:	6813      	ldr	r3, [r2, #0]
 8000efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f02:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000f04:	f7ff fc68 	bl	80007d8 <HAL_GetTick>
 8000f08:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f0a:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_RCC_OscConfig+0x2cc>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000f12:	d1b9      	bne.n	8000e88 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f14:	f7ff fc60 	bl	80007d8 <HAL_GetTick>
 8000f18:	1b80      	subs	r0, r0, r6
 8000f1a:	2864      	cmp	r0, #100	; 0x64
 8000f1c:	d9f5      	bls.n	8000f0a <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 8000f1e:	2003      	movs	r0, #3
 8000f20:	e099      	b.n	8001056 <HAL_RCC_OscConfig+0x3ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f22:	4a09      	ldr	r2, [pc, #36]	; (8000f48 <HAL_RCC_OscConfig+0x2c0>)
 8000f24:	6a13      	ldr	r3, [r2, #32]
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	6213      	str	r3, [r2, #32]
 8000f2c:	e7bd      	b.n	8000eaa <HAL_RCC_OscConfig+0x222>
 8000f2e:	2b05      	cmp	r3, #5
 8000f30:	d012      	beq.n	8000f58 <HAL_RCC_OscConfig+0x2d0>
 8000f32:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <HAL_RCC_OscConfig+0x2c0>)
 8000f34:	6a1a      	ldr	r2, [r3, #32]
 8000f36:	f022 0201 	bic.w	r2, r2, #1
 8000f3a:	621a      	str	r2, [r3, #32]
 8000f3c:	6a1a      	ldr	r2, [r3, #32]
 8000f3e:	f022 0204 	bic.w	r2, r2, #4
 8000f42:	621a      	str	r2, [r3, #32]
 8000f44:	e7b1      	b.n	8000eaa <HAL_RCC_OscConfig+0x222>
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	42420000 	.word	0x42420000
 8000f50:	42420480 	.word	0x42420480
 8000f54:	40007000 	.word	0x40007000
 8000f58:	4b41      	ldr	r3, [pc, #260]	; (8001060 <HAL_RCC_OscConfig+0x3d8>)
 8000f5a:	6a1a      	ldr	r2, [r3, #32]
 8000f5c:	f042 0204 	orr.w	r2, r2, #4
 8000f60:	621a      	str	r2, [r3, #32]
 8000f62:	6a1a      	ldr	r2, [r3, #32]
 8000f64:	f042 0201 	orr.w	r2, r2, #1
 8000f68:	621a      	str	r2, [r3, #32]
 8000f6a:	e79e      	b.n	8000eaa <HAL_RCC_OscConfig+0x222>
      tickstart = HAL_GetTick();
 8000f6c:	f7ff fc34 	bl	80007d8 <HAL_GetTick>
 8000f70:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f72:	4b3b      	ldr	r3, [pc, #236]	; (8001060 <HAL_RCC_OscConfig+0x3d8>)
 8000f74:	6a1b      	ldr	r3, [r3, #32]
 8000f76:	f013 0f02 	tst.w	r3, #2
 8000f7a:	d008      	beq.n	8000f8e <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f7c:	f7ff fc2c 	bl	80007d8 <HAL_GetTick>
 8000f80:	1b80      	subs	r0, r0, r6
 8000f82:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f86:	4298      	cmp	r0, r3
 8000f88:	d9f3      	bls.n	8000f72 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8000f8a:	2003      	movs	r0, #3
 8000f8c:	e063      	b.n	8001056 <HAL_RCC_OscConfig+0x3ce>
    if(pwrclkchanged == SET)
 8000f8e:	b9e5      	cbnz	r5, 8000fca <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f90:	69e3      	ldr	r3, [r4, #28]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d05e      	beq.n	8001054 <HAL_RCC_OscConfig+0x3cc>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f96:	4a32      	ldr	r2, [pc, #200]	; (8001060 <HAL_RCC_OscConfig+0x3d8>)
 8000f98:	6852      	ldr	r2, [r2, #4]
 8000f9a:	f002 020c 	and.w	r2, r2, #12
 8000f9e:	2a08      	cmp	r2, #8
 8000fa0:	d05b      	beq.n	800105a <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d017      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	4b2e      	ldr	r3, [pc, #184]	; (8001064 <HAL_RCC_OscConfig+0x3dc>)
 8000faa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fac:	f7ff fc14 	bl	80007d8 <HAL_GetTick>
 8000fb0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fb2:	4b2b      	ldr	r3, [pc, #172]	; (8001060 <HAL_RCC_OscConfig+0x3d8>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000fba:	d047      	beq.n	800104c <HAL_RCC_OscConfig+0x3c4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fbc:	f7ff fc0c 	bl	80007d8 <HAL_GetTick>
 8000fc0:	1b00      	subs	r0, r0, r4
 8000fc2:	2802      	cmp	r0, #2
 8000fc4:	d9f5      	bls.n	8000fb2 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8000fc6:	2003      	movs	r0, #3
 8000fc8:	e045      	b.n	8001056 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fca:	4a25      	ldr	r2, [pc, #148]	; (8001060 <HAL_RCC_OscConfig+0x3d8>)
 8000fcc:	69d3      	ldr	r3, [r2, #28]
 8000fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	61d3      	str	r3, [r2, #28]
 8000fd4:	e7dc      	b.n	8000f90 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	4b22      	ldr	r3, [pc, #136]	; (8001064 <HAL_RCC_OscConfig+0x3dc>)
 8000fda:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fdc:	f7ff fbfc 	bl	80007d8 <HAL_GetTick>
 8000fe0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fe2:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <HAL_RCC_OscConfig+0x3d8>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000fea:	d006      	beq.n	8000ffa <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fec:	f7ff fbf4 	bl	80007d8 <HAL_GetTick>
 8000ff0:	1b40      	subs	r0, r0, r5
 8000ff2:	2802      	cmp	r0, #2
 8000ff4:	d9f5      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8000ff6:	2003      	movs	r0, #3
 8000ff8:	e02d      	b.n	8001056 <HAL_RCC_OscConfig+0x3ce>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ffa:	6a23      	ldr	r3, [r4, #32]
 8000ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001000:	d01a      	beq.n	8001038 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001002:	4917      	ldr	r1, [pc, #92]	; (8001060 <HAL_RCC_OscConfig+0x3d8>)
 8001004:	684b      	ldr	r3, [r1, #4]
 8001006:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800100a:	6a22      	ldr	r2, [r4, #32]
 800100c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800100e:	4302      	orrs	r2, r0
 8001010:	4313      	orrs	r3, r2
 8001012:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001014:	2201      	movs	r2, #1
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <HAL_RCC_OscConfig+0x3dc>)
 8001018:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800101a:	f7ff fbdd 	bl	80007d8 <HAL_GetTick>
 800101e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <HAL_RCC_OscConfig+0x3d8>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001028:	d10e      	bne.n	8001048 <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800102a:	f7ff fbd5 	bl	80007d8 <HAL_GetTick>
 800102e:	1b00      	subs	r0, r0, r4
 8001030:	2802      	cmp	r0, #2
 8001032:	d9f5      	bls.n	8001020 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8001034:	2003      	movs	r0, #3
 8001036:	e00e      	b.n	8001056 <HAL_RCC_OscConfig+0x3ce>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001038:	4a09      	ldr	r2, [pc, #36]	; (8001060 <HAL_RCC_OscConfig+0x3d8>)
 800103a:	6853      	ldr	r3, [r2, #4]
 800103c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001040:	68a1      	ldr	r1, [r4, #8]
 8001042:	430b      	orrs	r3, r1
 8001044:	6053      	str	r3, [r2, #4]
 8001046:	e7dc      	b.n	8001002 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8001048:	2000      	movs	r0, #0
 800104a:	e004      	b.n	8001056 <HAL_RCC_OscConfig+0x3ce>
 800104c:	2000      	movs	r0, #0
 800104e:	e002      	b.n	8001056 <HAL_RCC_OscConfig+0x3ce>
        return HAL_ERROR;
 8001050:	2001      	movs	r0, #1
 8001052:	e000      	b.n	8001056 <HAL_RCC_OscConfig+0x3ce>
  return HAL_OK;
 8001054:	2000      	movs	r0, #0
}
 8001056:	b002      	add	sp, #8
 8001058:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800105a:	2001      	movs	r0, #1
 800105c:	e7fb      	b.n	8001056 <HAL_RCC_OscConfig+0x3ce>
 800105e:	bf00      	nop
 8001060:	40021000 	.word	0x40021000
 8001064:	42420060 	.word	0x42420060

08001068 <HAL_RCC_GetSysClockFreq>:
{
 8001068:	b510      	push	{r4, lr}
 800106a:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800106c:	4c15      	ldr	r4, [pc, #84]	; (80010c4 <HAL_RCC_GetSysClockFreq+0x5c>)
 800106e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001072:	f10d 0e18 	add.w	lr, sp, #24
 8001076:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800107a:	8a23      	ldrh	r3, [r4, #16]
 800107c:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <HAL_RCC_GetSysClockFreq+0x60>)
 8001082:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001084:	f003 020c 	and.w	r2, r3, #12
 8001088:	2a08      	cmp	r2, #8
 800108a:	d118      	bne.n	80010be <HAL_RCC_GetSysClockFreq+0x56>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800108c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001090:	4472      	add	r2, lr
 8001092:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001096:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800109a:	d103      	bne.n	80010a4 <HAL_RCC_GetSysClockFreq+0x3c>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <HAL_RCC_GetSysClockFreq+0x64>)
 800109e:	fb03 f000 	mul.w	r0, r3, r0
 80010a2:	e00d      	b.n	80010c0 <HAL_RCC_GetSysClockFreq+0x58>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <HAL_RCC_GetSysClockFreq+0x60>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80010ac:	4473      	add	r3, lr
 80010ae:	f813 2c14 	ldrb.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <HAL_RCC_GetSysClockFreq+0x68>)
 80010b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80010b8:	fb03 f000 	mul.w	r0, r3, r0
 80010bc:	e000      	b.n	80010c0 <HAL_RCC_GetSysClockFreq+0x58>
      sysclockfreq = HSE_VALUE;
 80010be:	4804      	ldr	r0, [pc, #16]	; (80010d0 <HAL_RCC_GetSysClockFreq+0x68>)
}
 80010c0:	b006      	add	sp, #24
 80010c2:	bd10      	pop	{r4, pc}
 80010c4:	08002204 	.word	0x08002204
 80010c8:	40021000 	.word	0x40021000
 80010cc:	003d0900 	.word	0x003d0900
 80010d0:	007a1200 	.word	0x007a1200

080010d4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010d4:	4b59      	ldr	r3, [pc, #356]	; (800123c <HAL_RCC_ClockConfig+0x168>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0307 	and.w	r3, r3, #7
 80010dc:	428b      	cmp	r3, r1
 80010de:	d20c      	bcs.n	80010fa <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010e0:	4a56      	ldr	r2, [pc, #344]	; (800123c <HAL_RCC_ClockConfig+0x168>)
 80010e2:	6813      	ldr	r3, [r2, #0]
 80010e4:	f023 0307 	bic.w	r3, r3, #7
 80010e8:	430b      	orrs	r3, r1
 80010ea:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010ec:	6813      	ldr	r3, [r2, #0]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	4299      	cmp	r1, r3
 80010f4:	d001      	beq.n	80010fa <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 80010f6:	2001      	movs	r0, #1
 80010f8:	4770      	bx	lr
{
 80010fa:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010fc:	6803      	ldr	r3, [r0, #0]
 80010fe:	f013 0f02 	tst.w	r3, #2
 8001102:	d006      	beq.n	8001112 <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001104:	4a4e      	ldr	r2, [pc, #312]	; (8001240 <HAL_RCC_ClockConfig+0x16c>)
 8001106:	6853      	ldr	r3, [r2, #4]
 8001108:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800110c:	6884      	ldr	r4, [r0, #8]
 800110e:	4323      	orrs	r3, r4
 8001110:	6053      	str	r3, [r2, #4]
 8001112:	460d      	mov	r5, r1
 8001114:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001116:	6803      	ldr	r3, [r0, #0]
 8001118:	f013 0f01 	tst.w	r3, #1
 800111c:	d052      	beq.n	80011c4 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800111e:	6843      	ldr	r3, [r0, #4]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d023      	beq.n	800116c <HAL_RCC_ClockConfig+0x98>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001124:	2b02      	cmp	r3, #2
 8001126:	d028      	beq.n	800117a <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001128:	4a45      	ldr	r2, [pc, #276]	; (8001240 <HAL_RCC_ClockConfig+0x16c>)
 800112a:	6812      	ldr	r2, [r2, #0]
 800112c:	f012 0f02 	tst.w	r2, #2
 8001130:	f000 8082 	beq.w	8001238 <HAL_RCC_ClockConfig+0x164>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001134:	4942      	ldr	r1, [pc, #264]	; (8001240 <HAL_RCC_ClockConfig+0x16c>)
 8001136:	684a      	ldr	r2, [r1, #4]
 8001138:	f022 0203 	bic.w	r2, r2, #3
 800113c:	4313      	orrs	r3, r2
 800113e:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001140:	f7ff fb4a 	bl	80007d8 <HAL_GetTick>
 8001144:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001146:	6863      	ldr	r3, [r4, #4]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d01d      	beq.n	8001188 <HAL_RCC_ClockConfig+0xb4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800114c:	2b02      	cmp	r3, #2
 800114e:	d02a      	beq.n	80011a6 <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001150:	4b3b      	ldr	r3, [pc, #236]	; (8001240 <HAL_RCC_ClockConfig+0x16c>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f013 0f0c 	tst.w	r3, #12
 8001158:	d034      	beq.n	80011c4 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800115a:	f7ff fb3d 	bl	80007d8 <HAL_GetTick>
 800115e:	1b80      	subs	r0, r0, r6
 8001160:	f241 3388 	movw	r3, #5000	; 0x1388
 8001164:	4298      	cmp	r0, r3
 8001166:	d9f3      	bls.n	8001150 <HAL_RCC_ClockConfig+0x7c>
          return HAL_TIMEOUT;
 8001168:	2003      	movs	r0, #3
 800116a:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116c:	4a34      	ldr	r2, [pc, #208]	; (8001240 <HAL_RCC_ClockConfig+0x16c>)
 800116e:	6812      	ldr	r2, [r2, #0]
 8001170:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001174:	d1de      	bne.n	8001134 <HAL_RCC_ClockConfig+0x60>
        return HAL_ERROR;
 8001176:	2001      	movs	r0, #1
 8001178:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800117a:	4a31      	ldr	r2, [pc, #196]	; (8001240 <HAL_RCC_ClockConfig+0x16c>)
 800117c:	6812      	ldr	r2, [r2, #0]
 800117e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001182:	d1d7      	bne.n	8001134 <HAL_RCC_ClockConfig+0x60>
        return HAL_ERROR;
 8001184:	2001      	movs	r0, #1
 8001186:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001188:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <HAL_RCC_ClockConfig+0x16c>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 030c 	and.w	r3, r3, #12
 8001190:	2b04      	cmp	r3, #4
 8001192:	d017      	beq.n	80011c4 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001194:	f7ff fb20 	bl	80007d8 <HAL_GetTick>
 8001198:	1b80      	subs	r0, r0, r6
 800119a:	f241 3388 	movw	r3, #5000	; 0x1388
 800119e:	4298      	cmp	r0, r3
 80011a0:	d9f2      	bls.n	8001188 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 80011a2:	2003      	movs	r0, #3
 80011a4:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011a6:	4b26      	ldr	r3, [pc, #152]	; (8001240 <HAL_RCC_ClockConfig+0x16c>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 030c 	and.w	r3, r3, #12
 80011ae:	2b08      	cmp	r3, #8
 80011b0:	d008      	beq.n	80011c4 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011b2:	f7ff fb11 	bl	80007d8 <HAL_GetTick>
 80011b6:	1b80      	subs	r0, r0, r6
 80011b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80011bc:	4298      	cmp	r0, r3
 80011be:	d9f2      	bls.n	80011a6 <HAL_RCC_ClockConfig+0xd2>
          return HAL_TIMEOUT;
 80011c0:	2003      	movs	r0, #3
 80011c2:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80011c4:	4b1d      	ldr	r3, [pc, #116]	; (800123c <HAL_RCC_ClockConfig+0x168>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	429d      	cmp	r5, r3
 80011ce:	d20c      	bcs.n	80011ea <HAL_RCC_ClockConfig+0x116>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011d0:	4a1a      	ldr	r2, [pc, #104]	; (800123c <HAL_RCC_ClockConfig+0x168>)
 80011d2:	6813      	ldr	r3, [r2, #0]
 80011d4:	f023 0307 	bic.w	r3, r3, #7
 80011d8:	432b      	orrs	r3, r5
 80011da:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011dc:	6813      	ldr	r3, [r2, #0]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	429d      	cmp	r5, r3
 80011e4:	d001      	beq.n	80011ea <HAL_RCC_ClockConfig+0x116>
      return HAL_ERROR;
 80011e6:	2001      	movs	r0, #1
}
 80011e8:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011ea:	6823      	ldr	r3, [r4, #0]
 80011ec:	f013 0f04 	tst.w	r3, #4
 80011f0:	d006      	beq.n	8001200 <HAL_RCC_ClockConfig+0x12c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011f2:	4a13      	ldr	r2, [pc, #76]	; (8001240 <HAL_RCC_ClockConfig+0x16c>)
 80011f4:	6853      	ldr	r3, [r2, #4]
 80011f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011fa:	68e1      	ldr	r1, [r4, #12]
 80011fc:	430b      	orrs	r3, r1
 80011fe:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001200:	6823      	ldr	r3, [r4, #0]
 8001202:	f013 0f08 	tst.w	r3, #8
 8001206:	d007      	beq.n	8001218 <HAL_RCC_ClockConfig+0x144>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <HAL_RCC_ClockConfig+0x16c>)
 800120a:	6853      	ldr	r3, [r2, #4]
 800120c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001210:	6921      	ldr	r1, [r4, #16]
 8001212:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001216:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001218:	f7ff ff26 	bl	8001068 <HAL_RCC_GetSysClockFreq>
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <HAL_RCC_ClockConfig+0x16c>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001224:	4a07      	ldr	r2, [pc, #28]	; (8001244 <HAL_RCC_ClockConfig+0x170>)
 8001226:	5cd3      	ldrb	r3, [r2, r3]
 8001228:	40d8      	lsrs	r0, r3
 800122a:	4b07      	ldr	r3, [pc, #28]	; (8001248 <HAL_RCC_ClockConfig+0x174>)
 800122c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800122e:	200f      	movs	r0, #15
 8001230:	f7ff faa2 	bl	8000778 <HAL_InitTick>
  return HAL_OK;
 8001234:	2000      	movs	r0, #0
 8001236:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001238:	2001      	movs	r0, #1
 800123a:	bd70      	pop	{r4, r5, r6, pc}
 800123c:	40022000 	.word	0x40022000
 8001240:	40021000 	.word	0x40021000
 8001244:	08002224 	.word	0x08002224
 8001248:	20000000 	.word	0x20000000

0800124c <HAL_RCC_GetHCLKFreq>:
}
 800124c:	4b01      	ldr	r3, [pc, #4]	; (8001254 <HAL_RCC_GetHCLKFreq+0x8>)
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000000 	.word	0x20000000

08001258 <HAL_RCC_GetPCLK1Freq>:
{
 8001258:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800125a:	f7ff fff7 	bl	800124c <HAL_RCC_GetHCLKFreq>
 800125e:	4b04      	ldr	r3, [pc, #16]	; (8001270 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001266:	4a03      	ldr	r2, [pc, #12]	; (8001274 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001268:	5cd3      	ldrb	r3, [r2, r3]
}    
 800126a:	40d8      	lsrs	r0, r3
 800126c:	bd08      	pop	{r3, pc}
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000
 8001274:	08002234 	.word	0x08002234

08001278 <HAL_RCC_GetPCLK2Freq>:
{
 8001278:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800127a:	f7ff ffe7 	bl	800124c <HAL_RCC_GetHCLKFreq>
 800127e:	4b04      	ldr	r3, [pc, #16]	; (8001290 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001286:	4a03      	ldr	r2, [pc, #12]	; (8001294 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001288:	5cd3      	ldrb	r3, [r2, r3]
} 
 800128a:	40d8      	lsrs	r0, r3
 800128c:	bd08      	pop	{r3, pc}
 800128e:	bf00      	nop
 8001290:	40021000 	.word	0x40021000
 8001294:	08002234 	.word	0x08002234

08001298 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001298:	6802      	ldr	r2, [r0, #0]
 800129a:	68d3      	ldr	r3, [r2, #12]
 800129c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80012a0:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012a2:	6802      	ldr	r2, [r0, #0]
 80012a4:	6953      	ldr	r3, [r2, #20]
 80012a6:	f023 0301 	bic.w	r3, r3, #1
 80012aa:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80012ac:	2320      	movs	r3, #32
 80012ae:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80012b2:	4770      	bx	lr

080012b4 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80012b4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b21      	cmp	r3, #33	; 0x21
 80012bc:	d001      	beq.n	80012c2 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80012be:	2002      	movs	r0, #2
 80012c0:	4770      	bx	lr
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80012c2:	6883      	ldr	r3, [r0, #8]
 80012c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012c8:	d017      	beq.n	80012fa <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80012ca:	6802      	ldr	r2, [r0, #0]
 80012cc:	6a03      	ldr	r3, [r0, #32]
 80012ce:	1c59      	adds	r1, r3, #1
 80012d0:	6201      	str	r1, [r0, #32]
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	6053      	str	r3, [r2, #4]
    if(--huart->TxXferCount == 0U)
 80012d6:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80012d8:	b29b      	uxth	r3, r3
 80012da:	3b01      	subs	r3, #1
 80012dc:	b29b      	uxth	r3, r3
 80012de:	84c3      	strh	r3, [r0, #38]	; 0x26
 80012e0:	b9db      	cbnz	r3, 800131a <UART_Transmit_IT+0x66>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80012e2:	6802      	ldr	r2, [r0, #0]
 80012e4:	68d3      	ldr	r3, [r2, #12]
 80012e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012ea:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80012ec:	6802      	ldr	r2, [r0, #0]
 80012ee:	68d3      	ldr	r3, [r2, #12]
 80012f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012f4:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 80012f6:	2000      	movs	r0, #0
 80012f8:	4770      	bx	lr
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80012fa:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80012fc:	6802      	ldr	r2, [r0, #0]
 80012fe:	881b      	ldrh	r3, [r3, #0]
 8001300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001304:	6053      	str	r3, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001306:	6903      	ldr	r3, [r0, #16]
 8001308:	b91b      	cbnz	r3, 8001312 <UART_Transmit_IT+0x5e>
        huart->pTxBuffPtr += 2U;
 800130a:	6a03      	ldr	r3, [r0, #32]
 800130c:	3302      	adds	r3, #2
 800130e:	6203      	str	r3, [r0, #32]
 8001310:	e7e1      	b.n	80012d6 <UART_Transmit_IT+0x22>
        huart->pTxBuffPtr += 1U;
 8001312:	6a03      	ldr	r3, [r0, #32]
 8001314:	3301      	adds	r3, #1
 8001316:	6203      	str	r3, [r0, #32]
 8001318:	e7dd      	b.n	80012d6 <UART_Transmit_IT+0x22>
    return HAL_OK;
 800131a:	2000      	movs	r0, #0
  }
}
 800131c:	4770      	bx	lr
	...

08001320 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001324:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001326:	6802      	ldr	r2, [r0, #0]
 8001328:	6913      	ldr	r3, [r2, #16]
 800132a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800132e:	68c1      	ldr	r1, [r0, #12]
 8001330:	430b      	orrs	r3, r1
 8001332:	6113      	str	r3, [r2, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001334:	6883      	ldr	r3, [r0, #8]
 8001336:	6902      	ldr	r2, [r0, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	6942      	ldr	r2, [r0, #20]
 800133c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, 
 800133e:	6801      	ldr	r1, [r0, #0]
 8001340:	68ca      	ldr	r2, [r1, #12]
 8001342:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001346:	f022 020c 	bic.w	r2, r2, #12
 800134a:	4313      	orrs	r3, r2
 800134c:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800134e:	6802      	ldr	r2, [r0, #0]
 8001350:	6953      	ldr	r3, [r2, #20]
 8001352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001356:	6981      	ldr	r1, [r0, #24]
 8001358:	430b      	orrs	r3, r1
 800135a:	6153      	str	r3, [r2, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800135c:	f8d0 8000 	ldr.w	r8, [r0]
 8001360:	4b59      	ldr	r3, [pc, #356]	; (80014c8 <UART_SetConfig+0x1a8>)
 8001362:	4598      	cmp	r8, r3
 8001364:	d057      	beq.n	8001416 <UART_SetConfig+0xf6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001366:	f7ff ff77 	bl	8001258 <HAL_RCC_GetPCLK1Freq>
 800136a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800136e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001372:	686c      	ldr	r4, [r5, #4]
 8001374:	00a4      	lsls	r4, r4, #2
 8001376:	fbb0 f4f4 	udiv	r4, r0, r4
 800137a:	4f54      	ldr	r7, [pc, #336]	; (80014cc <UART_SetConfig+0x1ac>)
 800137c:	fba7 3404 	umull	r3, r4, r7, r4
 8001380:	0964      	lsrs	r4, r4, #5
 8001382:	0126      	lsls	r6, r4, #4
 8001384:	f7ff ff68 	bl	8001258 <HAL_RCC_GetPCLK1Freq>
 8001388:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800138c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001390:	686c      	ldr	r4, [r5, #4]
 8001392:	00a4      	lsls	r4, r4, #2
 8001394:	fbb0 faf4 	udiv	sl, r0, r4
 8001398:	f7ff ff5e 	bl	8001258 <HAL_RCC_GetPCLK1Freq>
 800139c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80013a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80013a4:	686c      	ldr	r4, [r5, #4]
 80013a6:	00a4      	lsls	r4, r4, #2
 80013a8:	fbb0 f4f4 	udiv	r4, r0, r4
 80013ac:	fba7 3404 	umull	r3, r4, r7, r4
 80013b0:	0964      	lsrs	r4, r4, #5
 80013b2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80013b6:	fb09 a414 	mls	r4, r9, r4, sl
 80013ba:	0124      	lsls	r4, r4, #4
 80013bc:	3432      	adds	r4, #50	; 0x32
 80013be:	fba7 3404 	umull	r3, r4, r7, r4
 80013c2:	0964      	lsrs	r4, r4, #5
 80013c4:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 80013c8:	4434      	add	r4, r6
 80013ca:	f7ff ff45 	bl	8001258 <HAL_RCC_GetPCLK1Freq>
 80013ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80013d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80013d6:	686e      	ldr	r6, [r5, #4]
 80013d8:	00b6      	lsls	r6, r6, #2
 80013da:	fbb0 f6f6 	udiv	r6, r0, r6
 80013de:	f7ff ff3b 	bl	8001258 <HAL_RCC_GetPCLK1Freq>
 80013e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80013e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80013ea:	686b      	ldr	r3, [r5, #4]
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	fbb0 f0f3 	udiv	r0, r0, r3
 80013f2:	fba7 3000 	umull	r3, r0, r7, r0
 80013f6:	0940      	lsrs	r0, r0, #5
 80013f8:	fb09 6910 	mls	r9, r9, r0, r6
 80013fc:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001400:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001404:	fba7 3709 	umull	r3, r7, r7, r9
 8001408:	f3c7 1743 	ubfx	r7, r7, #5, #4
 800140c:	4427      	add	r7, r4
 800140e:	f8c8 7008 	str.w	r7, [r8, #8]
 8001412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001416:	f7ff ff2f 	bl	8001278 <HAL_RCC_GetPCLK2Freq>
 800141a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800141e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001422:	686c      	ldr	r4, [r5, #4]
 8001424:	00a4      	lsls	r4, r4, #2
 8001426:	fbb0 f4f4 	udiv	r4, r0, r4
 800142a:	4f28      	ldr	r7, [pc, #160]	; (80014cc <UART_SetConfig+0x1ac>)
 800142c:	fba7 3404 	umull	r3, r4, r7, r4
 8001430:	0964      	lsrs	r4, r4, #5
 8001432:	0126      	lsls	r6, r4, #4
 8001434:	f7ff ff20 	bl	8001278 <HAL_RCC_GetPCLK2Freq>
 8001438:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800143c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001440:	686c      	ldr	r4, [r5, #4]
 8001442:	00a4      	lsls	r4, r4, #2
 8001444:	fbb0 faf4 	udiv	sl, r0, r4
 8001448:	f7ff ff16 	bl	8001278 <HAL_RCC_GetPCLK2Freq>
 800144c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001450:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001454:	686c      	ldr	r4, [r5, #4]
 8001456:	00a4      	lsls	r4, r4, #2
 8001458:	fbb0 f4f4 	udiv	r4, r0, r4
 800145c:	fba7 3404 	umull	r3, r4, r7, r4
 8001460:	0964      	lsrs	r4, r4, #5
 8001462:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001466:	fb09 a414 	mls	r4, r9, r4, sl
 800146a:	0124      	lsls	r4, r4, #4
 800146c:	3432      	adds	r4, #50	; 0x32
 800146e:	fba7 3404 	umull	r3, r4, r7, r4
 8001472:	0964      	lsrs	r4, r4, #5
 8001474:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 8001478:	4434      	add	r4, r6
 800147a:	f7ff fefd 	bl	8001278 <HAL_RCC_GetPCLK2Freq>
 800147e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001482:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001486:	686e      	ldr	r6, [r5, #4]
 8001488:	00b6      	lsls	r6, r6, #2
 800148a:	fbb0 f6f6 	udiv	r6, r0, r6
 800148e:	f7ff fef3 	bl	8001278 <HAL_RCC_GetPCLK2Freq>
 8001492:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001496:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800149a:	686b      	ldr	r3, [r5, #4]
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	fbb0 f3f3 	udiv	r3, r0, r3
 80014a2:	fba7 2303 	umull	r2, r3, r7, r3
 80014a6:	095b      	lsrs	r3, r3, #5
 80014a8:	fb09 6913 	mls	r9, r9, r3, r6
 80014ac:	ea4f 1909 	mov.w	r9, r9, lsl #4
 80014b0:	f109 0932 	add.w	r9, r9, #50	; 0x32
 80014b4:	fba7 3709 	umull	r3, r7, r7, r9
 80014b8:	f3c7 1743 	ubfx	r7, r7, #5, #4
 80014bc:	4427      	add	r7, r4
 80014be:	f8c8 7008 	str.w	r7, [r8, #8]
 80014c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014c6:	bf00      	nop
 80014c8:	40013800 	.word	0x40013800
 80014cc:	51eb851f 	.word	0x51eb851f

080014d0 <UART_WaitOnFlagUntilTimeout>:
{
 80014d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014d4:	4605      	mov	r5, r0
 80014d6:	460f      	mov	r7, r1
 80014d8:	4616      	mov	r6, r2
 80014da:	4698      	mov	r8, r3
 80014dc:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80014de:	682b      	ldr	r3, [r5, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	ea37 0303 	bics.w	r3, r7, r3
 80014e6:	bf0c      	ite	eq
 80014e8:	2301      	moveq	r3, #1
 80014ea:	2300      	movne	r3, #0
 80014ec:	42b3      	cmp	r3, r6
 80014ee:	d11e      	bne.n	800152e <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 80014f0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80014f4:	d0f3      	beq.n	80014de <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80014f6:	b12c      	cbz	r4, 8001504 <UART_WaitOnFlagUntilTimeout+0x34>
 80014f8:	f7ff f96e 	bl	80007d8 <HAL_GetTick>
 80014fc:	eba0 0008 	sub.w	r0, r0, r8
 8001500:	4284      	cmp	r4, r0
 8001502:	d2ec      	bcs.n	80014de <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001504:	682a      	ldr	r2, [r5, #0]
 8001506:	68d3      	ldr	r3, [r2, #12]
 8001508:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800150c:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800150e:	682a      	ldr	r2, [r5, #0]
 8001510:	6953      	ldr	r3, [r2, #20]
 8001512:	f023 0301 	bic.w	r3, r3, #1
 8001516:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001518:	2320      	movs	r3, #32
 800151a:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800151e:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001522:	2300      	movs	r3, #0
 8001524:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8001528:	2003      	movs	r0, #3
 800152a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 800152e:	2000      	movs	r0, #0
}
 8001530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001534 <HAL_UART_Init>:
  if(huart == NULL)
 8001534:	b358      	cbz	r0, 800158e <HAL_UART_Init+0x5a>
{
 8001536:	b510      	push	{r4, lr}
 8001538:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 800153a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800153e:	b30b      	cbz	r3, 8001584 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001540:	2324      	movs	r3, #36	; 0x24
 8001542:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001546:	6822      	ldr	r2, [r4, #0]
 8001548:	68d3      	ldr	r3, [r2, #12]
 800154a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800154e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001550:	4620      	mov	r0, r4
 8001552:	f7ff fee5 	bl	8001320 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001556:	6822      	ldr	r2, [r4, #0]
 8001558:	6913      	ldr	r3, [r2, #16]
 800155a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800155e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001560:	6822      	ldr	r2, [r4, #0]
 8001562:	6953      	ldr	r3, [r2, #20]
 8001564:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001568:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800156a:	6822      	ldr	r2, [r4, #0]
 800156c:	68d3      	ldr	r3, [r2, #12]
 800156e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001572:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001574:	2000      	movs	r0, #0
 8001576:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001578:	2320      	movs	r3, #32
 800157a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800157e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001582:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001584:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001588:	f7ff f888 	bl	800069c <HAL_UART_MspInit>
 800158c:	e7d8      	b.n	8001540 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800158e:	2001      	movs	r0, #1
 8001590:	4770      	bx	lr

08001592 <HAL_UART_DeInit>:
  if(huart == NULL)
 8001592:	b178      	cbz	r0, 80015b4 <HAL_UART_DeInit+0x22>
{
 8001594:	b510      	push	{r4, lr}
 8001596:	4604      	mov	r4, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8001598:	2324      	movs	r3, #36	; 0x24
 800159a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_MspDeInit(huart);
 800159e:	f7ff f8bd 	bl	800071c <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015a2:	2000      	movs	r0, #0
 80015a4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 80015a6:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 80015aa:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
  __HAL_UNLOCK(huart);
 80015ae:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 80015b2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80015b4:	2001      	movs	r0, #1
 80015b6:	4770      	bx	lr

080015b8 <HAL_UART_Transmit>:
{
 80015b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80015c0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b20      	cmp	r3, #32
 80015c8:	d004      	beq.n	80015d4 <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 80015ca:	2302      	movs	r3, #2
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	b002      	add	sp, #8
 80015d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015d4:	4604      	mov	r4, r0
 80015d6:	460d      	mov	r5, r1
 80015d8:	4690      	mov	r8, r2
    if((pData == NULL) || (Size == 0U))
 80015da:	2900      	cmp	r1, #0
 80015dc:	d055      	beq.n	800168a <HAL_UART_Transmit+0xd2>
 80015de:	2a00      	cmp	r2, #0
 80015e0:	d055      	beq.n	800168e <HAL_UART_Transmit+0xd6>
    __HAL_LOCK(huart);
 80015e2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d101      	bne.n	80015ee <HAL_UART_Transmit+0x36>
 80015ea:	2302      	movs	r3, #2
 80015ec:	e7ee      	b.n	80015cc <HAL_UART_Transmit+0x14>
 80015ee:	2301      	movs	r3, #1
 80015f0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80015f8:	2321      	movs	r3, #33	; 0x21
 80015fa:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80015fe:	f7ff f8eb 	bl	80007d8 <HAL_GetTick>
 8001602:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001604:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001608:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800160c:	e010      	b.n	8001630 <HAL_UART_Transmit+0x78>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800160e:	9600      	str	r6, [sp, #0]
 8001610:	463b      	mov	r3, r7
 8001612:	2200      	movs	r2, #0
 8001614:	2180      	movs	r1, #128	; 0x80
 8001616:	4620      	mov	r0, r4
 8001618:	f7ff ff5a 	bl	80014d0 <UART_WaitOnFlagUntilTimeout>
 800161c:	2800      	cmp	r0, #0
 800161e:	d138      	bne.n	8001692 <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001620:	6822      	ldr	r2, [r4, #0]
 8001622:	882b      	ldrh	r3, [r5, #0]
 8001624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001628:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800162a:	6923      	ldr	r3, [r4, #16]
 800162c:	b9cb      	cbnz	r3, 8001662 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 800162e:	3502      	adds	r5, #2
    while(huart->TxXferCount > 0U)
 8001630:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001632:	b29b      	uxth	r3, r3
 8001634:	b1bb      	cbz	r3, 8001666 <HAL_UART_Transmit+0xae>
      huart->TxXferCount--;
 8001636:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001638:	b29b      	uxth	r3, r3
 800163a:	3b01      	subs	r3, #1
 800163c:	b29b      	uxth	r3, r3
 800163e:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001640:	68a3      	ldr	r3, [r4, #8]
 8001642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001646:	d0e2      	beq.n	800160e <HAL_UART_Transmit+0x56>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001648:	9600      	str	r6, [sp, #0]
 800164a:	463b      	mov	r3, r7
 800164c:	2200      	movs	r2, #0
 800164e:	2180      	movs	r1, #128	; 0x80
 8001650:	4620      	mov	r0, r4
 8001652:	f7ff ff3d 	bl	80014d0 <UART_WaitOnFlagUntilTimeout>
 8001656:	b9f0      	cbnz	r0, 8001696 <HAL_UART_Transmit+0xde>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001658:	6823      	ldr	r3, [r4, #0]
 800165a:	782a      	ldrb	r2, [r5, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	3501      	adds	r5, #1
 8001660:	e7e6      	b.n	8001630 <HAL_UART_Transmit+0x78>
          pData +=1U;
 8001662:	3501      	adds	r5, #1
 8001664:	e7e4      	b.n	8001630 <HAL_UART_Transmit+0x78>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001666:	9600      	str	r6, [sp, #0]
 8001668:	463b      	mov	r3, r7
 800166a:	2200      	movs	r2, #0
 800166c:	2140      	movs	r1, #64	; 0x40
 800166e:	4620      	mov	r0, r4
 8001670:	f7ff ff2e 	bl	80014d0 <UART_WaitOnFlagUntilTimeout>
 8001674:	4603      	mov	r3, r0
 8001676:	b108      	cbz	r0, 800167c <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e7a7      	b.n	80015cc <HAL_UART_Transmit+0x14>
    huart->gState = HAL_UART_STATE_READY;
 800167c:	2220      	movs	r2, #32
 800167e:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001682:	2200      	movs	r2, #0
 8001684:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8001688:	e7a0      	b.n	80015cc <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e79e      	b.n	80015cc <HAL_UART_Transmit+0x14>
 800168e:	2301      	movs	r3, #1
 8001690:	e79c      	b.n	80015cc <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e79a      	b.n	80015cc <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e798      	b.n	80015cc <HAL_UART_Transmit+0x14>

0800169a <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 800169a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b20      	cmp	r3, #32
 80016a2:	d001      	beq.n	80016a8 <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 80016a4:	2002      	movs	r0, #2
 80016a6:	4770      	bx	lr
    if((pData == NULL) || (Size == 0U))
 80016a8:	b1f9      	cbz	r1, 80016ea <HAL_UART_Receive_IT+0x50>
 80016aa:	b302      	cbz	r2, 80016ee <HAL_UART_Receive_IT+0x54>
    __HAL_LOCK(huart);
 80016ac:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d01e      	beq.n	80016f2 <HAL_UART_Receive_IT+0x58>
    huart->pRxBuffPtr = pData;
 80016b4:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 80016b6:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 80016b8:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80016be:	2222      	movs	r2, #34	; 0x22
 80016c0:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 80016c4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80016c8:	6801      	ldr	r1, [r0, #0]
 80016ca:	68ca      	ldr	r2, [r1, #12]
 80016cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016d0:	60ca      	str	r2, [r1, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80016d2:	6801      	ldr	r1, [r0, #0]
 80016d4:	694a      	ldr	r2, [r1, #20]
 80016d6:	f042 0201 	orr.w	r2, r2, #1
 80016da:	614a      	str	r2, [r1, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80016dc:	6801      	ldr	r1, [r0, #0]
 80016de:	68ca      	ldr	r2, [r1, #12]
 80016e0:	f042 0220 	orr.w	r2, r2, #32
 80016e4:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 80016e6:	4618      	mov	r0, r3
 80016e8:	4770      	bx	lr
      return HAL_ERROR;
 80016ea:	2001      	movs	r0, #1
 80016ec:	4770      	bx	lr
 80016ee:	2001      	movs	r0, #1
 80016f0:	4770      	bx	lr
    __HAL_LOCK(huart);
 80016f2:	2002      	movs	r0, #2
}
 80016f4:	4770      	bx	lr

080016f6 <HAL_UART_TxCpltCallback>:
{
 80016f6:	4770      	bx	lr

080016f8 <UART_EndTransmit_IT>:
{
 80016f8:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80016fa:	6801      	ldr	r1, [r0, #0]
 80016fc:	68cb      	ldr	r3, [r1, #12]
 80016fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001702:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001704:	2320      	movs	r3, #32
 8001706:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800170a:	f7ff fff4 	bl	80016f6 <HAL_UART_TxCpltCallback>
}
 800170e:	2000      	movs	r0, #0
 8001710:	bd08      	pop	{r3, pc}

08001712 <UART_Receive_IT>:
{
 8001712:	b508      	push	{r3, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001714:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b22      	cmp	r3, #34	; 0x22
 800171c:	d001      	beq.n	8001722 <UART_Receive_IT+0x10>
    return HAL_BUSY;
 800171e:	2002      	movs	r0, #2
 8001720:	bd08      	pop	{r3, pc}
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001722:	6883      	ldr	r3, [r0, #8]
 8001724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001728:	d00f      	beq.n	800174a <UART_Receive_IT+0x38>
      if(huart->Init.Parity == UART_PARITY_NONE)
 800172a:	6903      	ldr	r3, [r0, #16]
 800172c:	bb0b      	cbnz	r3, 8001772 <UART_Receive_IT+0x60>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800172e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001730:	1c5a      	adds	r2, r3, #1
 8001732:	6282      	str	r2, [r0, #40]	; 0x28
 8001734:	6802      	ldr	r2, [r0, #0]
 8001736:	6852      	ldr	r2, [r2, #4]
 8001738:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0U)
 800173a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800173c:	b29b      	uxth	r3, r3
 800173e:	3b01      	subs	r3, #1
 8001740:	b29b      	uxth	r3, r3
 8001742:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8001744:	b1f3      	cbz	r3, 8001784 <UART_Receive_IT+0x72>
    return HAL_OK;
 8001746:	2000      	movs	r0, #0
}
 8001748:	bd08      	pop	{r3, pc}
      tmp = (uint16_t*) huart->pRxBuffPtr;
 800174a:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 800174c:	6903      	ldr	r3, [r0, #16]
 800174e:	b943      	cbnz	r3, 8001762 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001750:	6803      	ldr	r3, [r0, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001758:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 800175a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800175c:	3302      	adds	r3, #2
 800175e:	6283      	str	r3, [r0, #40]	; 0x28
 8001760:	e7eb      	b.n	800173a <UART_Receive_IT+0x28>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001762:	6803      	ldr	r3, [r0, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 800176a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800176c:	3301      	adds	r3, #1
 800176e:	6283      	str	r3, [r0, #40]	; 0x28
 8001770:	e7e3      	b.n	800173a <UART_Receive_IT+0x28>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001772:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001774:	1c53      	adds	r3, r2, #1
 8001776:	6283      	str	r3, [r0, #40]	; 0x28
 8001778:	6803      	ldr	r3, [r0, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001780:	7013      	strb	r3, [r2, #0]
 8001782:	e7da      	b.n	800173a <UART_Receive_IT+0x28>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001784:	6802      	ldr	r2, [r0, #0]
 8001786:	68d3      	ldr	r3, [r2, #12]
 8001788:	f023 0320 	bic.w	r3, r3, #32
 800178c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800178e:	6802      	ldr	r2, [r0, #0]
 8001790:	68d3      	ldr	r3, [r2, #12]
 8001792:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001796:	60d3      	str	r3, [r2, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001798:	6802      	ldr	r2, [r0, #0]
 800179a:	6953      	ldr	r3, [r2, #20]
 800179c:	f023 0301 	bic.w	r3, r3, #1
 80017a0:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80017a2:	2320      	movs	r3, #32
 80017a4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80017a8:	f7fe ff52 	bl	8000650 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80017ac:	2000      	movs	r0, #0
 80017ae:	bd08      	pop	{r3, pc}

080017b0 <HAL_UART_IRQHandler>:
{
 80017b0:	b510      	push	{r4, lr}
 80017b2:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80017b4:	6802      	ldr	r2, [r0, #0]
 80017b6:	6813      	ldr	r3, [r2, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80017b8:	68d1      	ldr	r1, [r2, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80017ba:	6952      	ldr	r2, [r2, #20]
  if(errorflags == RESET)
 80017bc:	f013 000f 	ands.w	r0, r3, #15
 80017c0:	d105      	bne.n	80017ce <HAL_UART_IRQHandler+0x1e>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80017c2:	f013 0f20 	tst.w	r3, #32
 80017c6:	d002      	beq.n	80017ce <HAL_UART_IRQHandler+0x1e>
 80017c8:	f011 0f20 	tst.w	r1, #32
 80017cc:	d153      	bne.n	8001876 <HAL_UART_IRQHandler+0xc6>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80017ce:	2800      	cmp	r0, #0
 80017d0:	d067      	beq.n	80018a2 <HAL_UART_IRQHandler+0xf2>
 80017d2:	f012 0201 	ands.w	r2, r2, #1
 80017d6:	d102      	bne.n	80017de <HAL_UART_IRQHandler+0x2e>
 80017d8:	f411 7f90 	tst.w	r1, #288	; 0x120
 80017dc:	d061      	beq.n	80018a2 <HAL_UART_IRQHandler+0xf2>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80017de:	f013 0f01 	tst.w	r3, #1
 80017e2:	d006      	beq.n	80017f2 <HAL_UART_IRQHandler+0x42>
 80017e4:	f411 7f80 	tst.w	r1, #256	; 0x100
 80017e8:	d003      	beq.n	80017f2 <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80017ea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80017ec:	f040 0001 	orr.w	r0, r0, #1
 80017f0:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80017f2:	f013 0f04 	tst.w	r3, #4
 80017f6:	d004      	beq.n	8001802 <HAL_UART_IRQHandler+0x52>
 80017f8:	b11a      	cbz	r2, 8001802 <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80017fa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80017fc:	f040 0002 	orr.w	r0, r0, #2
 8001800:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001802:	f013 0f02 	tst.w	r3, #2
 8001806:	d004      	beq.n	8001812 <HAL_UART_IRQHandler+0x62>
 8001808:	b11a      	cbz	r2, 8001812 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800180a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800180c:	f040 0004 	orr.w	r0, r0, #4
 8001810:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001812:	f013 0f08 	tst.w	r3, #8
 8001816:	d004      	beq.n	8001822 <HAL_UART_IRQHandler+0x72>
 8001818:	b11a      	cbz	r2, 8001822 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800181a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800181c:	f042 0208 	orr.w	r2, r2, #8
 8001820:	63e2      	str	r2, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001822:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001824:	2a00      	cmp	r2, #0
 8001826:	d048      	beq.n	80018ba <HAL_UART_IRQHandler+0x10a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001828:	f013 0f20 	tst.w	r3, #32
 800182c:	d002      	beq.n	8001834 <HAL_UART_IRQHandler+0x84>
 800182e:	f011 0f20 	tst.w	r1, #32
 8001832:	d124      	bne.n	800187e <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001834:	6823      	ldr	r3, [r4, #0]
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800183c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800183e:	f012 0f08 	tst.w	r2, #8
 8001842:	d100      	bne.n	8001846 <HAL_UART_IRQHandler+0x96>
 8001844:	b33b      	cbz	r3, 8001896 <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8001846:	4620      	mov	r0, r4
 8001848:	f7ff fd26 	bl	8001298 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800184c:	6823      	ldr	r3, [r4, #0]
 800184e:	695a      	ldr	r2, [r3, #20]
 8001850:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001854:	d01b      	beq.n	800188e <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001856:	695a      	ldr	r2, [r3, #20]
 8001858:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800185c:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800185e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001860:	b18b      	cbz	r3, 8001886 <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001862:	4a1a      	ldr	r2, [pc, #104]	; (80018cc <HAL_UART_IRQHandler+0x11c>)
 8001864:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001866:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001868:	f7ff f830 	bl	80008cc <HAL_DMA_Abort_IT>
 800186c:	b328      	cbz	r0, 80018ba <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800186e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001870:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001872:	4798      	blx	r3
 8001874:	bd10      	pop	{r4, pc}
      UART_Receive_IT(huart);
 8001876:	4620      	mov	r0, r4
 8001878:	f7ff ff4b 	bl	8001712 <UART_Receive_IT>
      return;
 800187c:	bd10      	pop	{r4, pc}
        UART_Receive_IT(huart);
 800187e:	4620      	mov	r0, r4
 8001880:	f7ff ff47 	bl	8001712 <UART_Receive_IT>
 8001884:	e7d6      	b.n	8001834 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8001886:	4620      	mov	r0, r4
 8001888:	f7fe feee 	bl	8000668 <HAL_UART_ErrorCallback>
 800188c:	bd10      	pop	{r4, pc}
          HAL_UART_ErrorCallback(huart);
 800188e:	4620      	mov	r0, r4
 8001890:	f7fe feea 	bl	8000668 <HAL_UART_ErrorCallback>
 8001894:	bd10      	pop	{r4, pc}
        HAL_UART_ErrorCallback(huart);
 8001896:	4620      	mov	r0, r4
 8001898:	f7fe fee6 	bl	8000668 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800189c:	2300      	movs	r3, #0
 800189e:	63e3      	str	r3, [r4, #60]	; 0x3c
 80018a0:	bd10      	pop	{r4, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80018a2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80018a6:	d002      	beq.n	80018ae <HAL_UART_IRQHandler+0xfe>
 80018a8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80018ac:	d106      	bne.n	80018bc <HAL_UART_IRQHandler+0x10c>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80018ae:	f013 0f40 	tst.w	r3, #64	; 0x40
 80018b2:	d002      	beq.n	80018ba <HAL_UART_IRQHandler+0x10a>
 80018b4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80018b8:	d104      	bne.n	80018c4 <HAL_UART_IRQHandler+0x114>
 80018ba:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 80018bc:	4620      	mov	r0, r4
 80018be:	f7ff fcf9 	bl	80012b4 <UART_Transmit_IT>
    return;
 80018c2:	bd10      	pop	{r4, pc}
    UART_EndTransmit_IT(huart);
 80018c4:	4620      	mov	r0, r4
 80018c6:	f7ff ff17 	bl	80016f8 <UART_EndTransmit_IT>
    return;
 80018ca:	e7f6      	b.n	80018ba <HAL_UART_IRQHandler+0x10a>
 80018cc:	080018d1 	.word	0x080018d1

080018d0 <UART_DMAAbortOnError>:
{
 80018d0:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018d2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80018d8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80018da:	f7fe fec5 	bl	8000668 <HAL_UART_ErrorCallback>
 80018de:	bd08      	pop	{r3, pc}

080018e0 <main>:
#include "main.h"



int main(void)
{
 80018e0:	b508      	push	{r3, lr}
  hwInit();
 80018e2:	f7fe ff3d 	bl	8000760 <hwInit>
  apInit();
 80018e6:	f7fe fc31 	bl	800014c <apInit>


  apMain();
 80018ea:	f7fe fc37 	bl	800015c <apMain>
}
 80018ee:	2000      	movs	r0, #0
 80018f0:	bd08      	pop	{r3, pc}
	...

080018f4 <__libc_init_array>:
 80018f4:	b570      	push	{r4, r5, r6, lr}
 80018f6:	2500      	movs	r5, #0
 80018f8:	4e0c      	ldr	r6, [pc, #48]	; (800192c <__libc_init_array+0x38>)
 80018fa:	4c0d      	ldr	r4, [pc, #52]	; (8001930 <__libc_init_array+0x3c>)
 80018fc:	1ba4      	subs	r4, r4, r6
 80018fe:	10a4      	asrs	r4, r4, #2
 8001900:	42a5      	cmp	r5, r4
 8001902:	d109      	bne.n	8001918 <__libc_init_array+0x24>
 8001904:	f000 fc72 	bl	80021ec <_init>
 8001908:	2500      	movs	r5, #0
 800190a:	4e0a      	ldr	r6, [pc, #40]	; (8001934 <__libc_init_array+0x40>)
 800190c:	4c0a      	ldr	r4, [pc, #40]	; (8001938 <__libc_init_array+0x44>)
 800190e:	1ba4      	subs	r4, r4, r6
 8001910:	10a4      	asrs	r4, r4, #2
 8001912:	42a5      	cmp	r5, r4
 8001914:	d105      	bne.n	8001922 <__libc_init_array+0x2e>
 8001916:	bd70      	pop	{r4, r5, r6, pc}
 8001918:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800191c:	4798      	blx	r3
 800191e:	3501      	adds	r5, #1
 8001920:	e7ee      	b.n	8001900 <__libc_init_array+0xc>
 8001922:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001926:	4798      	blx	r3
 8001928:	3501      	adds	r5, #1
 800192a:	e7f2      	b.n	8001912 <__libc_init_array+0x1e>
 800192c:	08002270 	.word	0x08002270
 8001930:	08002270 	.word	0x08002270
 8001934:	08002270 	.word	0x08002270
 8001938:	08002274 	.word	0x08002274

0800193c <memset>:
 800193c:	4603      	mov	r3, r0
 800193e:	4402      	add	r2, r0
 8001940:	4293      	cmp	r3, r2
 8001942:	d100      	bne.n	8001946 <memset+0xa>
 8001944:	4770      	bx	lr
 8001946:	f803 1b01 	strb.w	r1, [r3], #1
 800194a:	e7f9      	b.n	8001940 <memset+0x4>

0800194c <_vsniprintf_r>:
 800194c:	b530      	push	{r4, r5, lr}
 800194e:	1e14      	subs	r4, r2, #0
 8001950:	4605      	mov	r5, r0
 8001952:	b09b      	sub	sp, #108	; 0x6c
 8001954:	4618      	mov	r0, r3
 8001956:	da05      	bge.n	8001964 <_vsniprintf_r+0x18>
 8001958:	238b      	movs	r3, #139	; 0x8b
 800195a:	f04f 30ff 	mov.w	r0, #4294967295
 800195e:	602b      	str	r3, [r5, #0]
 8001960:	b01b      	add	sp, #108	; 0x6c
 8001962:	bd30      	pop	{r4, r5, pc}
 8001964:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001968:	f8ad 300c 	strh.w	r3, [sp, #12]
 800196c:	bf0c      	ite	eq
 800196e:	4623      	moveq	r3, r4
 8001970:	f104 33ff 	addne.w	r3, r4, #4294967295
 8001974:	9302      	str	r3, [sp, #8]
 8001976:	9305      	str	r3, [sp, #20]
 8001978:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800197c:	9100      	str	r1, [sp, #0]
 800197e:	9104      	str	r1, [sp, #16]
 8001980:	f8ad 300e 	strh.w	r3, [sp, #14]
 8001984:	4602      	mov	r2, r0
 8001986:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001988:	4669      	mov	r1, sp
 800198a:	4628      	mov	r0, r5
 800198c:	f000 f874 	bl	8001a78 <_svfiprintf_r>
 8001990:	1c43      	adds	r3, r0, #1
 8001992:	bfbc      	itt	lt
 8001994:	238b      	movlt	r3, #139	; 0x8b
 8001996:	602b      	strlt	r3, [r5, #0]
 8001998:	2c00      	cmp	r4, #0
 800199a:	d0e1      	beq.n	8001960 <_vsniprintf_r+0x14>
 800199c:	2200      	movs	r2, #0
 800199e:	9b00      	ldr	r3, [sp, #0]
 80019a0:	701a      	strb	r2, [r3, #0]
 80019a2:	e7dd      	b.n	8001960 <_vsniprintf_r+0x14>

080019a4 <vsniprintf>:
 80019a4:	b507      	push	{r0, r1, r2, lr}
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	4613      	mov	r3, r2
 80019aa:	460a      	mov	r2, r1
 80019ac:	4601      	mov	r1, r0
 80019ae:	4803      	ldr	r0, [pc, #12]	; (80019bc <vsniprintf+0x18>)
 80019b0:	6800      	ldr	r0, [r0, #0]
 80019b2:	f7ff ffcb 	bl	800194c <_vsniprintf_r>
 80019b6:	b003      	add	sp, #12
 80019b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80019bc:	20000004 	.word	0x20000004

080019c0 <__ssputs_r>:
 80019c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019c4:	688e      	ldr	r6, [r1, #8]
 80019c6:	4682      	mov	sl, r0
 80019c8:	429e      	cmp	r6, r3
 80019ca:	460c      	mov	r4, r1
 80019cc:	4691      	mov	r9, r2
 80019ce:	4698      	mov	r8, r3
 80019d0:	d835      	bhi.n	8001a3e <__ssputs_r+0x7e>
 80019d2:	898a      	ldrh	r2, [r1, #12]
 80019d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80019d8:	d031      	beq.n	8001a3e <__ssputs_r+0x7e>
 80019da:	2302      	movs	r3, #2
 80019dc:	6825      	ldr	r5, [r4, #0]
 80019de:	6909      	ldr	r1, [r1, #16]
 80019e0:	1a6f      	subs	r7, r5, r1
 80019e2:	6965      	ldr	r5, [r4, #20]
 80019e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80019e8:	fb95 f5f3 	sdiv	r5, r5, r3
 80019ec:	f108 0301 	add.w	r3, r8, #1
 80019f0:	443b      	add	r3, r7
 80019f2:	429d      	cmp	r5, r3
 80019f4:	bf38      	it	cc
 80019f6:	461d      	movcc	r5, r3
 80019f8:	0553      	lsls	r3, r2, #21
 80019fa:	d531      	bpl.n	8001a60 <__ssputs_r+0xa0>
 80019fc:	4629      	mov	r1, r5
 80019fe:	f000 fb47 	bl	8002090 <_malloc_r>
 8001a02:	4606      	mov	r6, r0
 8001a04:	b950      	cbnz	r0, 8001a1c <__ssputs_r+0x5c>
 8001a06:	230c      	movs	r3, #12
 8001a08:	f8ca 3000 	str.w	r3, [sl]
 8001a0c:	89a3      	ldrh	r3, [r4, #12]
 8001a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a16:	81a3      	strh	r3, [r4, #12]
 8001a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a1c:	463a      	mov	r2, r7
 8001a1e:	6921      	ldr	r1, [r4, #16]
 8001a20:	f000 fac4 	bl	8001fac <memcpy>
 8001a24:	89a3      	ldrh	r3, [r4, #12]
 8001a26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a2e:	81a3      	strh	r3, [r4, #12]
 8001a30:	6126      	str	r6, [r4, #16]
 8001a32:	443e      	add	r6, r7
 8001a34:	6026      	str	r6, [r4, #0]
 8001a36:	4646      	mov	r6, r8
 8001a38:	6165      	str	r5, [r4, #20]
 8001a3a:	1bed      	subs	r5, r5, r7
 8001a3c:	60a5      	str	r5, [r4, #8]
 8001a3e:	4546      	cmp	r6, r8
 8001a40:	bf28      	it	cs
 8001a42:	4646      	movcs	r6, r8
 8001a44:	4649      	mov	r1, r9
 8001a46:	4632      	mov	r2, r6
 8001a48:	6820      	ldr	r0, [r4, #0]
 8001a4a:	f000 faba 	bl	8001fc2 <memmove>
 8001a4e:	68a3      	ldr	r3, [r4, #8]
 8001a50:	2000      	movs	r0, #0
 8001a52:	1b9b      	subs	r3, r3, r6
 8001a54:	60a3      	str	r3, [r4, #8]
 8001a56:	6823      	ldr	r3, [r4, #0]
 8001a58:	441e      	add	r6, r3
 8001a5a:	6026      	str	r6, [r4, #0]
 8001a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a60:	462a      	mov	r2, r5
 8001a62:	f000 fb73 	bl	800214c <_realloc_r>
 8001a66:	4606      	mov	r6, r0
 8001a68:	2800      	cmp	r0, #0
 8001a6a:	d1e1      	bne.n	8001a30 <__ssputs_r+0x70>
 8001a6c:	6921      	ldr	r1, [r4, #16]
 8001a6e:	4650      	mov	r0, sl
 8001a70:	f000 fac2 	bl	8001ff8 <_free_r>
 8001a74:	e7c7      	b.n	8001a06 <__ssputs_r+0x46>
	...

08001a78 <_svfiprintf_r>:
 8001a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a7c:	b09d      	sub	sp, #116	; 0x74
 8001a7e:	9303      	str	r3, [sp, #12]
 8001a80:	898b      	ldrh	r3, [r1, #12]
 8001a82:	4680      	mov	r8, r0
 8001a84:	061c      	lsls	r4, r3, #24
 8001a86:	460d      	mov	r5, r1
 8001a88:	4616      	mov	r6, r2
 8001a8a:	d50f      	bpl.n	8001aac <_svfiprintf_r+0x34>
 8001a8c:	690b      	ldr	r3, [r1, #16]
 8001a8e:	b96b      	cbnz	r3, 8001aac <_svfiprintf_r+0x34>
 8001a90:	2140      	movs	r1, #64	; 0x40
 8001a92:	f000 fafd 	bl	8002090 <_malloc_r>
 8001a96:	6028      	str	r0, [r5, #0]
 8001a98:	6128      	str	r0, [r5, #16]
 8001a9a:	b928      	cbnz	r0, 8001aa8 <_svfiprintf_r+0x30>
 8001a9c:	230c      	movs	r3, #12
 8001a9e:	f8c8 3000 	str.w	r3, [r8]
 8001aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa6:	e0c4      	b.n	8001c32 <_svfiprintf_r+0x1ba>
 8001aa8:	2340      	movs	r3, #64	; 0x40
 8001aaa:	616b      	str	r3, [r5, #20]
 8001aac:	2300      	movs	r3, #0
 8001aae:	9309      	str	r3, [sp, #36]	; 0x24
 8001ab0:	2320      	movs	r3, #32
 8001ab2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001ab6:	2330      	movs	r3, #48	; 0x30
 8001ab8:	f04f 0b01 	mov.w	fp, #1
 8001abc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001ac0:	4637      	mov	r7, r6
 8001ac2:	463c      	mov	r4, r7
 8001ac4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d13c      	bne.n	8001b46 <_svfiprintf_r+0xce>
 8001acc:	ebb7 0a06 	subs.w	sl, r7, r6
 8001ad0:	d00b      	beq.n	8001aea <_svfiprintf_r+0x72>
 8001ad2:	4653      	mov	r3, sl
 8001ad4:	4632      	mov	r2, r6
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	4640      	mov	r0, r8
 8001ada:	f7ff ff71 	bl	80019c0 <__ssputs_r>
 8001ade:	3001      	adds	r0, #1
 8001ae0:	f000 80a2 	beq.w	8001c28 <_svfiprintf_r+0x1b0>
 8001ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ae6:	4453      	add	r3, sl
 8001ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8001aea:	783b      	ldrb	r3, [r7, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 809b 	beq.w	8001c28 <_svfiprintf_r+0x1b0>
 8001af2:	2300      	movs	r3, #0
 8001af4:	f04f 32ff 	mov.w	r2, #4294967295
 8001af8:	9304      	str	r3, [sp, #16]
 8001afa:	9307      	str	r3, [sp, #28]
 8001afc:	9205      	str	r2, [sp, #20]
 8001afe:	9306      	str	r3, [sp, #24]
 8001b00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001b04:	931a      	str	r3, [sp, #104]	; 0x68
 8001b06:	2205      	movs	r2, #5
 8001b08:	7821      	ldrb	r1, [r4, #0]
 8001b0a:	4850      	ldr	r0, [pc, #320]	; (8001c4c <_svfiprintf_r+0x1d4>)
 8001b0c:	f000 fa40 	bl	8001f90 <memchr>
 8001b10:	1c67      	adds	r7, r4, #1
 8001b12:	9b04      	ldr	r3, [sp, #16]
 8001b14:	b9d8      	cbnz	r0, 8001b4e <_svfiprintf_r+0xd6>
 8001b16:	06d9      	lsls	r1, r3, #27
 8001b18:	bf44      	itt	mi
 8001b1a:	2220      	movmi	r2, #32
 8001b1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001b20:	071a      	lsls	r2, r3, #28
 8001b22:	bf44      	itt	mi
 8001b24:	222b      	movmi	r2, #43	; 0x2b
 8001b26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001b2a:	7822      	ldrb	r2, [r4, #0]
 8001b2c:	2a2a      	cmp	r2, #42	; 0x2a
 8001b2e:	d016      	beq.n	8001b5e <_svfiprintf_r+0xe6>
 8001b30:	2100      	movs	r1, #0
 8001b32:	200a      	movs	r0, #10
 8001b34:	9a07      	ldr	r2, [sp, #28]
 8001b36:	4627      	mov	r7, r4
 8001b38:	783b      	ldrb	r3, [r7, #0]
 8001b3a:	3401      	adds	r4, #1
 8001b3c:	3b30      	subs	r3, #48	; 0x30
 8001b3e:	2b09      	cmp	r3, #9
 8001b40:	d950      	bls.n	8001be4 <_svfiprintf_r+0x16c>
 8001b42:	b1c9      	cbz	r1, 8001b78 <_svfiprintf_r+0x100>
 8001b44:	e011      	b.n	8001b6a <_svfiprintf_r+0xf2>
 8001b46:	2b25      	cmp	r3, #37	; 0x25
 8001b48:	d0c0      	beq.n	8001acc <_svfiprintf_r+0x54>
 8001b4a:	4627      	mov	r7, r4
 8001b4c:	e7b9      	b.n	8001ac2 <_svfiprintf_r+0x4a>
 8001b4e:	4a3f      	ldr	r2, [pc, #252]	; (8001c4c <_svfiprintf_r+0x1d4>)
 8001b50:	463c      	mov	r4, r7
 8001b52:	1a80      	subs	r0, r0, r2
 8001b54:	fa0b f000 	lsl.w	r0, fp, r0
 8001b58:	4318      	orrs	r0, r3
 8001b5a:	9004      	str	r0, [sp, #16]
 8001b5c:	e7d3      	b.n	8001b06 <_svfiprintf_r+0x8e>
 8001b5e:	9a03      	ldr	r2, [sp, #12]
 8001b60:	1d11      	adds	r1, r2, #4
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	9103      	str	r1, [sp, #12]
 8001b66:	2a00      	cmp	r2, #0
 8001b68:	db01      	blt.n	8001b6e <_svfiprintf_r+0xf6>
 8001b6a:	9207      	str	r2, [sp, #28]
 8001b6c:	e004      	b.n	8001b78 <_svfiprintf_r+0x100>
 8001b6e:	4252      	negs	r2, r2
 8001b70:	f043 0302 	orr.w	r3, r3, #2
 8001b74:	9207      	str	r2, [sp, #28]
 8001b76:	9304      	str	r3, [sp, #16]
 8001b78:	783b      	ldrb	r3, [r7, #0]
 8001b7a:	2b2e      	cmp	r3, #46	; 0x2e
 8001b7c:	d10d      	bne.n	8001b9a <_svfiprintf_r+0x122>
 8001b7e:	787b      	ldrb	r3, [r7, #1]
 8001b80:	1c79      	adds	r1, r7, #1
 8001b82:	2b2a      	cmp	r3, #42	; 0x2a
 8001b84:	d132      	bne.n	8001bec <_svfiprintf_r+0x174>
 8001b86:	9b03      	ldr	r3, [sp, #12]
 8001b88:	3702      	adds	r7, #2
 8001b8a:	1d1a      	adds	r2, r3, #4
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	9203      	str	r2, [sp, #12]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	bfb8      	it	lt
 8001b94:	f04f 33ff 	movlt.w	r3, #4294967295
 8001b98:	9305      	str	r3, [sp, #20]
 8001b9a:	4c2d      	ldr	r4, [pc, #180]	; (8001c50 <_svfiprintf_r+0x1d8>)
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	7839      	ldrb	r1, [r7, #0]
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	f000 f9f5 	bl	8001f90 <memchr>
 8001ba6:	b138      	cbz	r0, 8001bb8 <_svfiprintf_r+0x140>
 8001ba8:	2340      	movs	r3, #64	; 0x40
 8001baa:	1b00      	subs	r0, r0, r4
 8001bac:	fa03 f000 	lsl.w	r0, r3, r0
 8001bb0:	9b04      	ldr	r3, [sp, #16]
 8001bb2:	3701      	adds	r7, #1
 8001bb4:	4303      	orrs	r3, r0
 8001bb6:	9304      	str	r3, [sp, #16]
 8001bb8:	7839      	ldrb	r1, [r7, #0]
 8001bba:	2206      	movs	r2, #6
 8001bbc:	4825      	ldr	r0, [pc, #148]	; (8001c54 <_svfiprintf_r+0x1dc>)
 8001bbe:	1c7e      	adds	r6, r7, #1
 8001bc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001bc4:	f000 f9e4 	bl	8001f90 <memchr>
 8001bc8:	2800      	cmp	r0, #0
 8001bca:	d035      	beq.n	8001c38 <_svfiprintf_r+0x1c0>
 8001bcc:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <_svfiprintf_r+0x1e0>)
 8001bce:	b9fb      	cbnz	r3, 8001c10 <_svfiprintf_r+0x198>
 8001bd0:	9b03      	ldr	r3, [sp, #12]
 8001bd2:	3307      	adds	r3, #7
 8001bd4:	f023 0307 	bic.w	r3, r3, #7
 8001bd8:	3308      	adds	r3, #8
 8001bda:	9303      	str	r3, [sp, #12]
 8001bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001bde:	444b      	add	r3, r9
 8001be0:	9309      	str	r3, [sp, #36]	; 0x24
 8001be2:	e76d      	b.n	8001ac0 <_svfiprintf_r+0x48>
 8001be4:	fb00 3202 	mla	r2, r0, r2, r3
 8001be8:	2101      	movs	r1, #1
 8001bea:	e7a4      	b.n	8001b36 <_svfiprintf_r+0xbe>
 8001bec:	2300      	movs	r3, #0
 8001bee:	240a      	movs	r4, #10
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	9305      	str	r3, [sp, #20]
 8001bf4:	460f      	mov	r7, r1
 8001bf6:	783a      	ldrb	r2, [r7, #0]
 8001bf8:	3101      	adds	r1, #1
 8001bfa:	3a30      	subs	r2, #48	; 0x30
 8001bfc:	2a09      	cmp	r2, #9
 8001bfe:	d903      	bls.n	8001c08 <_svfiprintf_r+0x190>
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0ca      	beq.n	8001b9a <_svfiprintf_r+0x122>
 8001c04:	9005      	str	r0, [sp, #20]
 8001c06:	e7c8      	b.n	8001b9a <_svfiprintf_r+0x122>
 8001c08:	fb04 2000 	mla	r0, r4, r0, r2
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e7f1      	b.n	8001bf4 <_svfiprintf_r+0x17c>
 8001c10:	ab03      	add	r3, sp, #12
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	462a      	mov	r2, r5
 8001c16:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <_svfiprintf_r+0x1e4>)
 8001c18:	a904      	add	r1, sp, #16
 8001c1a:	4640      	mov	r0, r8
 8001c1c:	f3af 8000 	nop.w
 8001c20:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001c24:	4681      	mov	r9, r0
 8001c26:	d1d9      	bne.n	8001bdc <_svfiprintf_r+0x164>
 8001c28:	89ab      	ldrh	r3, [r5, #12]
 8001c2a:	065b      	lsls	r3, r3, #25
 8001c2c:	f53f af39 	bmi.w	8001aa2 <_svfiprintf_r+0x2a>
 8001c30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001c32:	b01d      	add	sp, #116	; 0x74
 8001c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c38:	ab03      	add	r3, sp, #12
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	462a      	mov	r2, r5
 8001c3e:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <_svfiprintf_r+0x1e4>)
 8001c40:	a904      	add	r1, sp, #16
 8001c42:	4640      	mov	r0, r8
 8001c44:	f000 f884 	bl	8001d50 <_printf_i>
 8001c48:	e7ea      	b.n	8001c20 <_svfiprintf_r+0x1a8>
 8001c4a:	bf00      	nop
 8001c4c:	0800223c 	.word	0x0800223c
 8001c50:	08002242 	.word	0x08002242
 8001c54:	08002246 	.word	0x08002246
 8001c58:	00000000 	.word	0x00000000
 8001c5c:	080019c1 	.word	0x080019c1

08001c60 <_printf_common>:
 8001c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c64:	4691      	mov	r9, r2
 8001c66:	461f      	mov	r7, r3
 8001c68:	688a      	ldr	r2, [r1, #8]
 8001c6a:	690b      	ldr	r3, [r1, #16]
 8001c6c:	4606      	mov	r6, r0
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	bfb8      	it	lt
 8001c72:	4613      	movlt	r3, r2
 8001c74:	f8c9 3000 	str.w	r3, [r9]
 8001c78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001c7c:	460c      	mov	r4, r1
 8001c7e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001c82:	b112      	cbz	r2, 8001c8a <_printf_common+0x2a>
 8001c84:	3301      	adds	r3, #1
 8001c86:	f8c9 3000 	str.w	r3, [r9]
 8001c8a:	6823      	ldr	r3, [r4, #0]
 8001c8c:	0699      	lsls	r1, r3, #26
 8001c8e:	bf42      	ittt	mi
 8001c90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001c94:	3302      	addmi	r3, #2
 8001c96:	f8c9 3000 	strmi.w	r3, [r9]
 8001c9a:	6825      	ldr	r5, [r4, #0]
 8001c9c:	f015 0506 	ands.w	r5, r5, #6
 8001ca0:	d107      	bne.n	8001cb2 <_printf_common+0x52>
 8001ca2:	f104 0a19 	add.w	sl, r4, #25
 8001ca6:	68e3      	ldr	r3, [r4, #12]
 8001ca8:	f8d9 2000 	ldr.w	r2, [r9]
 8001cac:	1a9b      	subs	r3, r3, r2
 8001cae:	429d      	cmp	r5, r3
 8001cb0:	db2a      	blt.n	8001d08 <_printf_common+0xa8>
 8001cb2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001cb6:	6822      	ldr	r2, [r4, #0]
 8001cb8:	3300      	adds	r3, #0
 8001cba:	bf18      	it	ne
 8001cbc:	2301      	movne	r3, #1
 8001cbe:	0692      	lsls	r2, r2, #26
 8001cc0:	d42f      	bmi.n	8001d22 <_printf_common+0xc2>
 8001cc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001cc6:	4639      	mov	r1, r7
 8001cc8:	4630      	mov	r0, r6
 8001cca:	47c0      	blx	r8
 8001ccc:	3001      	adds	r0, #1
 8001cce:	d022      	beq.n	8001d16 <_printf_common+0xb6>
 8001cd0:	6823      	ldr	r3, [r4, #0]
 8001cd2:	68e5      	ldr	r5, [r4, #12]
 8001cd4:	f003 0306 	and.w	r3, r3, #6
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	bf18      	it	ne
 8001cdc:	2500      	movne	r5, #0
 8001cde:	f8d9 2000 	ldr.w	r2, [r9]
 8001ce2:	f04f 0900 	mov.w	r9, #0
 8001ce6:	bf08      	it	eq
 8001ce8:	1aad      	subeq	r5, r5, r2
 8001cea:	68a3      	ldr	r3, [r4, #8]
 8001cec:	6922      	ldr	r2, [r4, #16]
 8001cee:	bf08      	it	eq
 8001cf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	bfc4      	itt	gt
 8001cf8:	1a9b      	subgt	r3, r3, r2
 8001cfa:	18ed      	addgt	r5, r5, r3
 8001cfc:	341a      	adds	r4, #26
 8001cfe:	454d      	cmp	r5, r9
 8001d00:	d11b      	bne.n	8001d3a <_printf_common+0xda>
 8001d02:	2000      	movs	r0, #0
 8001d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d08:	2301      	movs	r3, #1
 8001d0a:	4652      	mov	r2, sl
 8001d0c:	4639      	mov	r1, r7
 8001d0e:	4630      	mov	r0, r6
 8001d10:	47c0      	blx	r8
 8001d12:	3001      	adds	r0, #1
 8001d14:	d103      	bne.n	8001d1e <_printf_common+0xbe>
 8001d16:	f04f 30ff 	mov.w	r0, #4294967295
 8001d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d1e:	3501      	adds	r5, #1
 8001d20:	e7c1      	b.n	8001ca6 <_printf_common+0x46>
 8001d22:	2030      	movs	r0, #48	; 0x30
 8001d24:	18e1      	adds	r1, r4, r3
 8001d26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001d30:	4422      	add	r2, r4
 8001d32:	3302      	adds	r3, #2
 8001d34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001d38:	e7c3      	b.n	8001cc2 <_printf_common+0x62>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	4622      	mov	r2, r4
 8001d3e:	4639      	mov	r1, r7
 8001d40:	4630      	mov	r0, r6
 8001d42:	47c0      	blx	r8
 8001d44:	3001      	adds	r0, #1
 8001d46:	d0e6      	beq.n	8001d16 <_printf_common+0xb6>
 8001d48:	f109 0901 	add.w	r9, r9, #1
 8001d4c:	e7d7      	b.n	8001cfe <_printf_common+0x9e>
	...

08001d50 <_printf_i>:
 8001d50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d54:	4617      	mov	r7, r2
 8001d56:	7e0a      	ldrb	r2, [r1, #24]
 8001d58:	b085      	sub	sp, #20
 8001d5a:	2a6e      	cmp	r2, #110	; 0x6e
 8001d5c:	4698      	mov	r8, r3
 8001d5e:	4606      	mov	r6, r0
 8001d60:	460c      	mov	r4, r1
 8001d62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001d64:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001d68:	f000 80bc 	beq.w	8001ee4 <_printf_i+0x194>
 8001d6c:	d81a      	bhi.n	8001da4 <_printf_i+0x54>
 8001d6e:	2a63      	cmp	r2, #99	; 0x63
 8001d70:	d02e      	beq.n	8001dd0 <_printf_i+0x80>
 8001d72:	d80a      	bhi.n	8001d8a <_printf_i+0x3a>
 8001d74:	2a00      	cmp	r2, #0
 8001d76:	f000 80c8 	beq.w	8001f0a <_printf_i+0x1ba>
 8001d7a:	2a58      	cmp	r2, #88	; 0x58
 8001d7c:	f000 808a 	beq.w	8001e94 <_printf_i+0x144>
 8001d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d84:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001d88:	e02a      	b.n	8001de0 <_printf_i+0x90>
 8001d8a:	2a64      	cmp	r2, #100	; 0x64
 8001d8c:	d001      	beq.n	8001d92 <_printf_i+0x42>
 8001d8e:	2a69      	cmp	r2, #105	; 0x69
 8001d90:	d1f6      	bne.n	8001d80 <_printf_i+0x30>
 8001d92:	6821      	ldr	r1, [r4, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001d9a:	d023      	beq.n	8001de4 <_printf_i+0x94>
 8001d9c:	1d11      	adds	r1, r2, #4
 8001d9e:	6019      	str	r1, [r3, #0]
 8001da0:	6813      	ldr	r3, [r2, #0]
 8001da2:	e027      	b.n	8001df4 <_printf_i+0xa4>
 8001da4:	2a73      	cmp	r2, #115	; 0x73
 8001da6:	f000 80b4 	beq.w	8001f12 <_printf_i+0x1c2>
 8001daa:	d808      	bhi.n	8001dbe <_printf_i+0x6e>
 8001dac:	2a6f      	cmp	r2, #111	; 0x6f
 8001dae:	d02a      	beq.n	8001e06 <_printf_i+0xb6>
 8001db0:	2a70      	cmp	r2, #112	; 0x70
 8001db2:	d1e5      	bne.n	8001d80 <_printf_i+0x30>
 8001db4:	680a      	ldr	r2, [r1, #0]
 8001db6:	f042 0220 	orr.w	r2, r2, #32
 8001dba:	600a      	str	r2, [r1, #0]
 8001dbc:	e003      	b.n	8001dc6 <_printf_i+0x76>
 8001dbe:	2a75      	cmp	r2, #117	; 0x75
 8001dc0:	d021      	beq.n	8001e06 <_printf_i+0xb6>
 8001dc2:	2a78      	cmp	r2, #120	; 0x78
 8001dc4:	d1dc      	bne.n	8001d80 <_printf_i+0x30>
 8001dc6:	2278      	movs	r2, #120	; 0x78
 8001dc8:	496f      	ldr	r1, [pc, #444]	; (8001f88 <_printf_i+0x238>)
 8001dca:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001dce:	e064      	b.n	8001e9a <_printf_i+0x14a>
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001dd6:	1d11      	adds	r1, r2, #4
 8001dd8:	6019      	str	r1, [r3, #0]
 8001dda:	6813      	ldr	r3, [r2, #0]
 8001ddc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0a3      	b.n	8001f2c <_printf_i+0x1dc>
 8001de4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001de8:	f102 0104 	add.w	r1, r2, #4
 8001dec:	6019      	str	r1, [r3, #0]
 8001dee:	d0d7      	beq.n	8001da0 <_printf_i+0x50>
 8001df0:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	da03      	bge.n	8001e00 <_printf_i+0xb0>
 8001df8:	222d      	movs	r2, #45	; 0x2d
 8001dfa:	425b      	negs	r3, r3
 8001dfc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001e00:	4962      	ldr	r1, [pc, #392]	; (8001f8c <_printf_i+0x23c>)
 8001e02:	220a      	movs	r2, #10
 8001e04:	e017      	b.n	8001e36 <_printf_i+0xe6>
 8001e06:	6820      	ldr	r0, [r4, #0]
 8001e08:	6819      	ldr	r1, [r3, #0]
 8001e0a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001e0e:	d003      	beq.n	8001e18 <_printf_i+0xc8>
 8001e10:	1d08      	adds	r0, r1, #4
 8001e12:	6018      	str	r0, [r3, #0]
 8001e14:	680b      	ldr	r3, [r1, #0]
 8001e16:	e006      	b.n	8001e26 <_printf_i+0xd6>
 8001e18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001e1c:	f101 0004 	add.w	r0, r1, #4
 8001e20:	6018      	str	r0, [r3, #0]
 8001e22:	d0f7      	beq.n	8001e14 <_printf_i+0xc4>
 8001e24:	880b      	ldrh	r3, [r1, #0]
 8001e26:	2a6f      	cmp	r2, #111	; 0x6f
 8001e28:	bf14      	ite	ne
 8001e2a:	220a      	movne	r2, #10
 8001e2c:	2208      	moveq	r2, #8
 8001e2e:	4957      	ldr	r1, [pc, #348]	; (8001f8c <_printf_i+0x23c>)
 8001e30:	2000      	movs	r0, #0
 8001e32:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001e36:	6865      	ldr	r5, [r4, #4]
 8001e38:	2d00      	cmp	r5, #0
 8001e3a:	60a5      	str	r5, [r4, #8]
 8001e3c:	f2c0 809c 	blt.w	8001f78 <_printf_i+0x228>
 8001e40:	6820      	ldr	r0, [r4, #0]
 8001e42:	f020 0004 	bic.w	r0, r0, #4
 8001e46:	6020      	str	r0, [r4, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d13f      	bne.n	8001ecc <_printf_i+0x17c>
 8001e4c:	2d00      	cmp	r5, #0
 8001e4e:	f040 8095 	bne.w	8001f7c <_printf_i+0x22c>
 8001e52:	4675      	mov	r5, lr
 8001e54:	2a08      	cmp	r2, #8
 8001e56:	d10b      	bne.n	8001e70 <_printf_i+0x120>
 8001e58:	6823      	ldr	r3, [r4, #0]
 8001e5a:	07da      	lsls	r2, r3, #31
 8001e5c:	d508      	bpl.n	8001e70 <_printf_i+0x120>
 8001e5e:	6923      	ldr	r3, [r4, #16]
 8001e60:	6862      	ldr	r2, [r4, #4]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	bfde      	ittt	le
 8001e66:	2330      	movle	r3, #48	; 0x30
 8001e68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001e6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001e70:	ebae 0305 	sub.w	r3, lr, r5
 8001e74:	6123      	str	r3, [r4, #16]
 8001e76:	f8cd 8000 	str.w	r8, [sp]
 8001e7a:	463b      	mov	r3, r7
 8001e7c:	aa03      	add	r2, sp, #12
 8001e7e:	4621      	mov	r1, r4
 8001e80:	4630      	mov	r0, r6
 8001e82:	f7ff feed 	bl	8001c60 <_printf_common>
 8001e86:	3001      	adds	r0, #1
 8001e88:	d155      	bne.n	8001f36 <_printf_i+0x1e6>
 8001e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8e:	b005      	add	sp, #20
 8001e90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e94:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001e98:	493c      	ldr	r1, [pc, #240]	; (8001f8c <_printf_i+0x23c>)
 8001e9a:	6822      	ldr	r2, [r4, #0]
 8001e9c:	6818      	ldr	r0, [r3, #0]
 8001e9e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001ea2:	f100 0504 	add.w	r5, r0, #4
 8001ea6:	601d      	str	r5, [r3, #0]
 8001ea8:	d001      	beq.n	8001eae <_printf_i+0x15e>
 8001eaa:	6803      	ldr	r3, [r0, #0]
 8001eac:	e002      	b.n	8001eb4 <_printf_i+0x164>
 8001eae:	0655      	lsls	r5, r2, #25
 8001eb0:	d5fb      	bpl.n	8001eaa <_printf_i+0x15a>
 8001eb2:	8803      	ldrh	r3, [r0, #0]
 8001eb4:	07d0      	lsls	r0, r2, #31
 8001eb6:	bf44      	itt	mi
 8001eb8:	f042 0220 	orrmi.w	r2, r2, #32
 8001ebc:	6022      	strmi	r2, [r4, #0]
 8001ebe:	b91b      	cbnz	r3, 8001ec8 <_printf_i+0x178>
 8001ec0:	6822      	ldr	r2, [r4, #0]
 8001ec2:	f022 0220 	bic.w	r2, r2, #32
 8001ec6:	6022      	str	r2, [r4, #0]
 8001ec8:	2210      	movs	r2, #16
 8001eca:	e7b1      	b.n	8001e30 <_printf_i+0xe0>
 8001ecc:	4675      	mov	r5, lr
 8001ece:	fbb3 f0f2 	udiv	r0, r3, r2
 8001ed2:	fb02 3310 	mls	r3, r2, r0, r3
 8001ed6:	5ccb      	ldrb	r3, [r1, r3]
 8001ed8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001edc:	4603      	mov	r3, r0
 8001ede:	2800      	cmp	r0, #0
 8001ee0:	d1f5      	bne.n	8001ece <_printf_i+0x17e>
 8001ee2:	e7b7      	b.n	8001e54 <_printf_i+0x104>
 8001ee4:	6808      	ldr	r0, [r1, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001eec:	6949      	ldr	r1, [r1, #20]
 8001eee:	d004      	beq.n	8001efa <_printf_i+0x1aa>
 8001ef0:	1d10      	adds	r0, r2, #4
 8001ef2:	6018      	str	r0, [r3, #0]
 8001ef4:	6813      	ldr	r3, [r2, #0]
 8001ef6:	6019      	str	r1, [r3, #0]
 8001ef8:	e007      	b.n	8001f0a <_printf_i+0x1ba>
 8001efa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001efe:	f102 0004 	add.w	r0, r2, #4
 8001f02:	6018      	str	r0, [r3, #0]
 8001f04:	6813      	ldr	r3, [r2, #0]
 8001f06:	d0f6      	beq.n	8001ef6 <_printf_i+0x1a6>
 8001f08:	8019      	strh	r1, [r3, #0]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	4675      	mov	r5, lr
 8001f0e:	6123      	str	r3, [r4, #16]
 8001f10:	e7b1      	b.n	8001e76 <_printf_i+0x126>
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	1d11      	adds	r1, r2, #4
 8001f16:	6019      	str	r1, [r3, #0]
 8001f18:	6815      	ldr	r5, [r2, #0]
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	6862      	ldr	r2, [r4, #4]
 8001f1e:	4628      	mov	r0, r5
 8001f20:	f000 f836 	bl	8001f90 <memchr>
 8001f24:	b108      	cbz	r0, 8001f2a <_printf_i+0x1da>
 8001f26:	1b40      	subs	r0, r0, r5
 8001f28:	6060      	str	r0, [r4, #4]
 8001f2a:	6863      	ldr	r3, [r4, #4]
 8001f2c:	6123      	str	r3, [r4, #16]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f34:	e79f      	b.n	8001e76 <_printf_i+0x126>
 8001f36:	6923      	ldr	r3, [r4, #16]
 8001f38:	462a      	mov	r2, r5
 8001f3a:	4639      	mov	r1, r7
 8001f3c:	4630      	mov	r0, r6
 8001f3e:	47c0      	blx	r8
 8001f40:	3001      	adds	r0, #1
 8001f42:	d0a2      	beq.n	8001e8a <_printf_i+0x13a>
 8001f44:	6823      	ldr	r3, [r4, #0]
 8001f46:	079b      	lsls	r3, r3, #30
 8001f48:	d507      	bpl.n	8001f5a <_printf_i+0x20a>
 8001f4a:	2500      	movs	r5, #0
 8001f4c:	f104 0919 	add.w	r9, r4, #25
 8001f50:	68e3      	ldr	r3, [r4, #12]
 8001f52:	9a03      	ldr	r2, [sp, #12]
 8001f54:	1a9b      	subs	r3, r3, r2
 8001f56:	429d      	cmp	r5, r3
 8001f58:	db05      	blt.n	8001f66 <_printf_i+0x216>
 8001f5a:	68e0      	ldr	r0, [r4, #12]
 8001f5c:	9b03      	ldr	r3, [sp, #12]
 8001f5e:	4298      	cmp	r0, r3
 8001f60:	bfb8      	it	lt
 8001f62:	4618      	movlt	r0, r3
 8001f64:	e793      	b.n	8001e8e <_printf_i+0x13e>
 8001f66:	2301      	movs	r3, #1
 8001f68:	464a      	mov	r2, r9
 8001f6a:	4639      	mov	r1, r7
 8001f6c:	4630      	mov	r0, r6
 8001f6e:	47c0      	blx	r8
 8001f70:	3001      	adds	r0, #1
 8001f72:	d08a      	beq.n	8001e8a <_printf_i+0x13a>
 8001f74:	3501      	adds	r5, #1
 8001f76:	e7eb      	b.n	8001f50 <_printf_i+0x200>
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1a7      	bne.n	8001ecc <_printf_i+0x17c>
 8001f7c:	780b      	ldrb	r3, [r1, #0]
 8001f7e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f86:	e765      	b.n	8001e54 <_printf_i+0x104>
 8001f88:	0800225e 	.word	0x0800225e
 8001f8c:	0800224d 	.word	0x0800224d

08001f90 <memchr>:
 8001f90:	b510      	push	{r4, lr}
 8001f92:	b2c9      	uxtb	r1, r1
 8001f94:	4402      	add	r2, r0
 8001f96:	4290      	cmp	r0, r2
 8001f98:	4603      	mov	r3, r0
 8001f9a:	d101      	bne.n	8001fa0 <memchr+0x10>
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	bd10      	pop	{r4, pc}
 8001fa0:	781c      	ldrb	r4, [r3, #0]
 8001fa2:	3001      	adds	r0, #1
 8001fa4:	428c      	cmp	r4, r1
 8001fa6:	d1f6      	bne.n	8001f96 <memchr+0x6>
 8001fa8:	4618      	mov	r0, r3
 8001faa:	bd10      	pop	{r4, pc}

08001fac <memcpy>:
 8001fac:	b510      	push	{r4, lr}
 8001fae:	1e43      	subs	r3, r0, #1
 8001fb0:	440a      	add	r2, r1
 8001fb2:	4291      	cmp	r1, r2
 8001fb4:	d100      	bne.n	8001fb8 <memcpy+0xc>
 8001fb6:	bd10      	pop	{r4, pc}
 8001fb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001fbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001fc0:	e7f7      	b.n	8001fb2 <memcpy+0x6>

08001fc2 <memmove>:
 8001fc2:	4288      	cmp	r0, r1
 8001fc4:	b510      	push	{r4, lr}
 8001fc6:	eb01 0302 	add.w	r3, r1, r2
 8001fca:	d803      	bhi.n	8001fd4 <memmove+0x12>
 8001fcc:	1e42      	subs	r2, r0, #1
 8001fce:	4299      	cmp	r1, r3
 8001fd0:	d10c      	bne.n	8001fec <memmove+0x2a>
 8001fd2:	bd10      	pop	{r4, pc}
 8001fd4:	4298      	cmp	r0, r3
 8001fd6:	d2f9      	bcs.n	8001fcc <memmove+0xa>
 8001fd8:	1881      	adds	r1, r0, r2
 8001fda:	1ad2      	subs	r2, r2, r3
 8001fdc:	42d3      	cmn	r3, r2
 8001fde:	d100      	bne.n	8001fe2 <memmove+0x20>
 8001fe0:	bd10      	pop	{r4, pc}
 8001fe2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001fe6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001fea:	e7f7      	b.n	8001fdc <memmove+0x1a>
 8001fec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001ff0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001ff4:	e7eb      	b.n	8001fce <memmove+0xc>
	...

08001ff8 <_free_r>:
 8001ff8:	b538      	push	{r3, r4, r5, lr}
 8001ffa:	4605      	mov	r5, r0
 8001ffc:	2900      	cmp	r1, #0
 8001ffe:	d043      	beq.n	8002088 <_free_r+0x90>
 8002000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002004:	1f0c      	subs	r4, r1, #4
 8002006:	2b00      	cmp	r3, #0
 8002008:	bfb8      	it	lt
 800200a:	18e4      	addlt	r4, r4, r3
 800200c:	f000 f8d4 	bl	80021b8 <__malloc_lock>
 8002010:	4a1e      	ldr	r2, [pc, #120]	; (800208c <_free_r+0x94>)
 8002012:	6813      	ldr	r3, [r2, #0]
 8002014:	4610      	mov	r0, r2
 8002016:	b933      	cbnz	r3, 8002026 <_free_r+0x2e>
 8002018:	6063      	str	r3, [r4, #4]
 800201a:	6014      	str	r4, [r2, #0]
 800201c:	4628      	mov	r0, r5
 800201e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002022:	f000 b8ca 	b.w	80021ba <__malloc_unlock>
 8002026:	42a3      	cmp	r3, r4
 8002028:	d90b      	bls.n	8002042 <_free_r+0x4a>
 800202a:	6821      	ldr	r1, [r4, #0]
 800202c:	1862      	adds	r2, r4, r1
 800202e:	4293      	cmp	r3, r2
 8002030:	bf01      	itttt	eq
 8002032:	681a      	ldreq	r2, [r3, #0]
 8002034:	685b      	ldreq	r3, [r3, #4]
 8002036:	1852      	addeq	r2, r2, r1
 8002038:	6022      	streq	r2, [r4, #0]
 800203a:	6063      	str	r3, [r4, #4]
 800203c:	6004      	str	r4, [r0, #0]
 800203e:	e7ed      	b.n	800201c <_free_r+0x24>
 8002040:	4613      	mov	r3, r2
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	b10a      	cbz	r2, 800204a <_free_r+0x52>
 8002046:	42a2      	cmp	r2, r4
 8002048:	d9fa      	bls.n	8002040 <_free_r+0x48>
 800204a:	6819      	ldr	r1, [r3, #0]
 800204c:	1858      	adds	r0, r3, r1
 800204e:	42a0      	cmp	r0, r4
 8002050:	d10b      	bne.n	800206a <_free_r+0x72>
 8002052:	6820      	ldr	r0, [r4, #0]
 8002054:	4401      	add	r1, r0
 8002056:	1858      	adds	r0, r3, r1
 8002058:	4282      	cmp	r2, r0
 800205a:	6019      	str	r1, [r3, #0]
 800205c:	d1de      	bne.n	800201c <_free_r+0x24>
 800205e:	6810      	ldr	r0, [r2, #0]
 8002060:	6852      	ldr	r2, [r2, #4]
 8002062:	4401      	add	r1, r0
 8002064:	6019      	str	r1, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
 8002068:	e7d8      	b.n	800201c <_free_r+0x24>
 800206a:	d902      	bls.n	8002072 <_free_r+0x7a>
 800206c:	230c      	movs	r3, #12
 800206e:	602b      	str	r3, [r5, #0]
 8002070:	e7d4      	b.n	800201c <_free_r+0x24>
 8002072:	6820      	ldr	r0, [r4, #0]
 8002074:	1821      	adds	r1, r4, r0
 8002076:	428a      	cmp	r2, r1
 8002078:	bf01      	itttt	eq
 800207a:	6811      	ldreq	r1, [r2, #0]
 800207c:	6852      	ldreq	r2, [r2, #4]
 800207e:	1809      	addeq	r1, r1, r0
 8002080:	6021      	streq	r1, [r4, #0]
 8002082:	6062      	str	r2, [r4, #4]
 8002084:	605c      	str	r4, [r3, #4]
 8002086:	e7c9      	b.n	800201c <_free_r+0x24>
 8002088:	bd38      	pop	{r3, r4, r5, pc}
 800208a:	bf00      	nop
 800208c:	20000084 	.word	0x20000084

08002090 <_malloc_r>:
 8002090:	b570      	push	{r4, r5, r6, lr}
 8002092:	1ccd      	adds	r5, r1, #3
 8002094:	f025 0503 	bic.w	r5, r5, #3
 8002098:	3508      	adds	r5, #8
 800209a:	2d0c      	cmp	r5, #12
 800209c:	bf38      	it	cc
 800209e:	250c      	movcc	r5, #12
 80020a0:	2d00      	cmp	r5, #0
 80020a2:	4606      	mov	r6, r0
 80020a4:	db01      	blt.n	80020aa <_malloc_r+0x1a>
 80020a6:	42a9      	cmp	r1, r5
 80020a8:	d903      	bls.n	80020b2 <_malloc_r+0x22>
 80020aa:	230c      	movs	r3, #12
 80020ac:	6033      	str	r3, [r6, #0]
 80020ae:	2000      	movs	r0, #0
 80020b0:	bd70      	pop	{r4, r5, r6, pc}
 80020b2:	f000 f881 	bl	80021b8 <__malloc_lock>
 80020b6:	4a23      	ldr	r2, [pc, #140]	; (8002144 <_malloc_r+0xb4>)
 80020b8:	6814      	ldr	r4, [r2, #0]
 80020ba:	4621      	mov	r1, r4
 80020bc:	b991      	cbnz	r1, 80020e4 <_malloc_r+0x54>
 80020be:	4c22      	ldr	r4, [pc, #136]	; (8002148 <_malloc_r+0xb8>)
 80020c0:	6823      	ldr	r3, [r4, #0]
 80020c2:	b91b      	cbnz	r3, 80020cc <_malloc_r+0x3c>
 80020c4:	4630      	mov	r0, r6
 80020c6:	f000 f867 	bl	8002198 <_sbrk_r>
 80020ca:	6020      	str	r0, [r4, #0]
 80020cc:	4629      	mov	r1, r5
 80020ce:	4630      	mov	r0, r6
 80020d0:	f000 f862 	bl	8002198 <_sbrk_r>
 80020d4:	1c43      	adds	r3, r0, #1
 80020d6:	d126      	bne.n	8002126 <_malloc_r+0x96>
 80020d8:	230c      	movs	r3, #12
 80020da:	4630      	mov	r0, r6
 80020dc:	6033      	str	r3, [r6, #0]
 80020de:	f000 f86c 	bl	80021ba <__malloc_unlock>
 80020e2:	e7e4      	b.n	80020ae <_malloc_r+0x1e>
 80020e4:	680b      	ldr	r3, [r1, #0]
 80020e6:	1b5b      	subs	r3, r3, r5
 80020e8:	d41a      	bmi.n	8002120 <_malloc_r+0x90>
 80020ea:	2b0b      	cmp	r3, #11
 80020ec:	d90f      	bls.n	800210e <_malloc_r+0x7e>
 80020ee:	600b      	str	r3, [r1, #0]
 80020f0:	18cc      	adds	r4, r1, r3
 80020f2:	50cd      	str	r5, [r1, r3]
 80020f4:	4630      	mov	r0, r6
 80020f6:	f000 f860 	bl	80021ba <__malloc_unlock>
 80020fa:	f104 000b 	add.w	r0, r4, #11
 80020fe:	1d23      	adds	r3, r4, #4
 8002100:	f020 0007 	bic.w	r0, r0, #7
 8002104:	1ac3      	subs	r3, r0, r3
 8002106:	d01b      	beq.n	8002140 <_malloc_r+0xb0>
 8002108:	425a      	negs	r2, r3
 800210a:	50e2      	str	r2, [r4, r3]
 800210c:	bd70      	pop	{r4, r5, r6, pc}
 800210e:	428c      	cmp	r4, r1
 8002110:	bf0b      	itete	eq
 8002112:	6863      	ldreq	r3, [r4, #4]
 8002114:	684b      	ldrne	r3, [r1, #4]
 8002116:	6013      	streq	r3, [r2, #0]
 8002118:	6063      	strne	r3, [r4, #4]
 800211a:	bf18      	it	ne
 800211c:	460c      	movne	r4, r1
 800211e:	e7e9      	b.n	80020f4 <_malloc_r+0x64>
 8002120:	460c      	mov	r4, r1
 8002122:	6849      	ldr	r1, [r1, #4]
 8002124:	e7ca      	b.n	80020bc <_malloc_r+0x2c>
 8002126:	1cc4      	adds	r4, r0, #3
 8002128:	f024 0403 	bic.w	r4, r4, #3
 800212c:	42a0      	cmp	r0, r4
 800212e:	d005      	beq.n	800213c <_malloc_r+0xac>
 8002130:	1a21      	subs	r1, r4, r0
 8002132:	4630      	mov	r0, r6
 8002134:	f000 f830 	bl	8002198 <_sbrk_r>
 8002138:	3001      	adds	r0, #1
 800213a:	d0cd      	beq.n	80020d8 <_malloc_r+0x48>
 800213c:	6025      	str	r5, [r4, #0]
 800213e:	e7d9      	b.n	80020f4 <_malloc_r+0x64>
 8002140:	bd70      	pop	{r4, r5, r6, pc}
 8002142:	bf00      	nop
 8002144:	20000084 	.word	0x20000084
 8002148:	20000088 	.word	0x20000088

0800214c <_realloc_r>:
 800214c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800214e:	4607      	mov	r7, r0
 8002150:	4614      	mov	r4, r2
 8002152:	460e      	mov	r6, r1
 8002154:	b921      	cbnz	r1, 8002160 <_realloc_r+0x14>
 8002156:	4611      	mov	r1, r2
 8002158:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800215c:	f7ff bf98 	b.w	8002090 <_malloc_r>
 8002160:	b922      	cbnz	r2, 800216c <_realloc_r+0x20>
 8002162:	f7ff ff49 	bl	8001ff8 <_free_r>
 8002166:	4625      	mov	r5, r4
 8002168:	4628      	mov	r0, r5
 800216a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800216c:	f000 f826 	bl	80021bc <_malloc_usable_size_r>
 8002170:	4284      	cmp	r4, r0
 8002172:	d90f      	bls.n	8002194 <_realloc_r+0x48>
 8002174:	4621      	mov	r1, r4
 8002176:	4638      	mov	r0, r7
 8002178:	f7ff ff8a 	bl	8002090 <_malloc_r>
 800217c:	4605      	mov	r5, r0
 800217e:	2800      	cmp	r0, #0
 8002180:	d0f2      	beq.n	8002168 <_realloc_r+0x1c>
 8002182:	4631      	mov	r1, r6
 8002184:	4622      	mov	r2, r4
 8002186:	f7ff ff11 	bl	8001fac <memcpy>
 800218a:	4631      	mov	r1, r6
 800218c:	4638      	mov	r0, r7
 800218e:	f7ff ff33 	bl	8001ff8 <_free_r>
 8002192:	e7e9      	b.n	8002168 <_realloc_r+0x1c>
 8002194:	4635      	mov	r5, r6
 8002196:	e7e7      	b.n	8002168 <_realloc_r+0x1c>

08002198 <_sbrk_r>:
 8002198:	b538      	push	{r3, r4, r5, lr}
 800219a:	2300      	movs	r3, #0
 800219c:	4c05      	ldr	r4, [pc, #20]	; (80021b4 <_sbrk_r+0x1c>)
 800219e:	4605      	mov	r5, r0
 80021a0:	4608      	mov	r0, r1
 80021a2:	6023      	str	r3, [r4, #0]
 80021a4:	f000 f814 	bl	80021d0 <_sbrk>
 80021a8:	1c43      	adds	r3, r0, #1
 80021aa:	d102      	bne.n	80021b2 <_sbrk_r+0x1a>
 80021ac:	6823      	ldr	r3, [r4, #0]
 80021ae:	b103      	cbz	r3, 80021b2 <_sbrk_r+0x1a>
 80021b0:	602b      	str	r3, [r5, #0]
 80021b2:	bd38      	pop	{r3, r4, r5, pc}
 80021b4:	20000110 	.word	0x20000110

080021b8 <__malloc_lock>:
 80021b8:	4770      	bx	lr

080021ba <__malloc_unlock>:
 80021ba:	4770      	bx	lr

080021bc <_malloc_usable_size_r>:
 80021bc:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80021c0:	2800      	cmp	r0, #0
 80021c2:	f1a0 0004 	sub.w	r0, r0, #4
 80021c6:	bfbc      	itt	lt
 80021c8:	580b      	ldrlt	r3, [r1, r0]
 80021ca:	18c0      	addlt	r0, r0, r3
 80021cc:	4770      	bx	lr
	...

080021d0 <_sbrk>:
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <_sbrk+0x14>)
 80021d2:	4602      	mov	r2, r0
 80021d4:	6819      	ldr	r1, [r3, #0]
 80021d6:	b909      	cbnz	r1, 80021dc <_sbrk+0xc>
 80021d8:	4903      	ldr	r1, [pc, #12]	; (80021e8 <_sbrk+0x18>)
 80021da:	6019      	str	r1, [r3, #0]
 80021dc:	6818      	ldr	r0, [r3, #0]
 80021de:	4402      	add	r2, r0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	4770      	bx	lr
 80021e4:	2000008c 	.word	0x2000008c
 80021e8:	20000114 	.word	0x20000114

080021ec <_init>:
 80021ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ee:	bf00      	nop
 80021f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021f2:	bc08      	pop	{r3}
 80021f4:	469e      	mov	lr, r3
 80021f6:	4770      	bx	lr

080021f8 <_fini>:
 80021f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021fa:	bf00      	nop
 80021fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021fe:	bc08      	pop	{r3}
 8002200:	469e      	mov	lr, r3
 8002202:	4770      	bx	lr
