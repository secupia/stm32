
01_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b88  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000c94  08000c94  00010c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000cb8  08000cb8  00010cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000cbc  08000cbc  00010cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000cc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000004  08000cc4  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000024  08000cc4  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000858d  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000017ba  00000000  00000000  000285ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000003b8  00000000  00000000  00029d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000380  00000000  00000000  0002a130  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002b06  00000000  00000000  0002a4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000014f6  00000000  00000000  0002cfb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002e4ac  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000784  00000000  00000000  0002e528  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00001029  00000000  00000000  0002ecac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000c7c 	.word	0x08000c7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000c7c 	.word	0x08000c7c

0800014c <apInit>:
#include "ap.h"



void apInit(void)
{
 800014c:	4770      	bx	lr

0800014e <apMain>:

}

void apMain(void)
{
 800014e:	b508      	push	{r3, lr}
  while(1)
  {
    ledToggle(0);
 8000150:	2000      	movs	r0, #0
 8000152:	f000 f8b5 	bl	80002c0 <ledToggle>
    delay(500);
 8000156:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800015a:	f000 f8bf 	bl	80002dc <delay>
 800015e:	e7f7      	b.n	8000150 <apMain+0x2>

08000160 <SystemClock_Config>:
  *            Flash Latency(WS)              = 2
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8000160:	b500      	push	{lr}
 8000162:	b091      	sub	sp, #68	; 0x44
  RCC_ClkInitTypeDef clkinitstruct = {0};
 8000164:	2100      	movs	r1, #0
 8000166:	910b      	str	r1, [sp, #44]	; 0x2c
 8000168:	910c      	str	r1, [sp, #48]	; 0x30
 800016a:	910d      	str	r1, [sp, #52]	; 0x34
 800016c:	910e      	str	r1, [sp, #56]	; 0x38
 800016e:	910f      	str	r1, [sp, #60]	; 0x3c
  RCC_OscInitTypeDef oscinitstruct = {0};
 8000170:	2228      	movs	r2, #40	; 0x28
 8000172:	a801      	add	r0, sp, #4
 8000174:	f000 fd7a 	bl	8000c6c <memset>

  /* Configure PLL ------------------------------------------------------*/
  /* PLL configuration: PLLCLK = (HSI / 2) * PLLMUL = (8 / 2) * 16 = 64 MHz */
  /* PREDIV1 configuration: PREDIV1CLK = PLLCLK / HSEPredivValue = 64 / 1 = 64 MHz */
  /* Enable HSI and activate PLL with HSi_DIV2 as source */
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_HSI;
 8000178:	2302      	movs	r3, #2
 800017a:	9301      	str	r3, [sp, #4]
  oscinitstruct.HSEState        = RCC_HSE_OFF;
  oscinitstruct.LSEState        = RCC_LSE_OFF;
  oscinitstruct.HSIState        = RCC_HSI_ON;
 800017c:	2201      	movs	r2, #1
 800017e:	9205      	str	r2, [sp, #20]
  oscinitstruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000180:	2210      	movs	r2, #16
 8000182:	9206      	str	r2, [sp, #24]
  oscinitstruct.HSEPredivValue    = RCC_HSE_PREDIV_DIV1;
  oscinitstruct.PLL.PLLState    = RCC_PLL_ON;
 8000184:	9308      	str	r3, [sp, #32]
  oscinitstruct.PLL.PLLSource   = RCC_PLLSOURCE_HSI_DIV2;
  oscinitstruct.PLL.PLLMUL      = RCC_PLL_MUL16;
 8000186:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800018a:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&oscinitstruct)!= HAL_OK)
 800018c:	a801      	add	r0, sp, #4
 800018e:	f000 fa5d 	bl	800064c <HAL_RCC_OscConfig>
 8000192:	b100      	cbz	r0, 8000196 <SystemClock_Config+0x36>
 8000194:	e7fe      	b.n	8000194 <SystemClock_Config+0x34>
    while(1);
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000196:	230f      	movs	r3, #15
 8000198:	930b      	str	r3, [sp, #44]	; 0x2c
  clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800019a:	2102      	movs	r1, #2
 800019c:	910c      	str	r1, [sp, #48]	; 0x30
  clkinitstruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800019e:	2300      	movs	r3, #0
 80001a0:	930d      	str	r3, [sp, #52]	; 0x34
  clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001a2:	930f      	str	r3, [sp, #60]	; 0x3c
  clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001a8:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2)!= HAL_OK)
 80001aa:	a80b      	add	r0, sp, #44	; 0x2c
 80001ac:	f000 fc74 	bl	8000a98 <HAL_RCC_ClockConfig>
 80001b0:	b100      	cbz	r0, 80001b4 <SystemClock_Config+0x54>
 80001b2:	e7fe      	b.n	80001b2 <SystemClock_Config+0x52>
  {
    /* Initialization Error */
    while(1);
  }
}
 80001b4:	b011      	add	sp, #68	; 0x44
 80001b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080001bc <bspInit>:
{
 80001bc:	b500      	push	{lr}
 80001be:	b083      	sub	sp, #12
  HAL_Init();
 80001c0:	f000 f8a8 	bl	8000314 <HAL_Init>
  SystemClock_Config();
 80001c4:	f7ff ffcc 	bl	8000160 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001c8:	4b06      	ldr	r3, [pc, #24]	; (80001e4 <bspInit+0x28>)
 80001ca:	699a      	ldr	r2, [r3, #24]
 80001cc:	f042 0204 	orr.w	r2, r2, #4
 80001d0:	619a      	str	r2, [r3, #24]
 80001d2:	699b      	ldr	r3, [r3, #24]
 80001d4:	f003 0304 	and.w	r3, r3, #4
 80001d8:	9301      	str	r3, [sp, #4]
 80001da:	9b01      	ldr	r3, [sp, #4]
}
 80001dc:	b003      	add	sp, #12
 80001de:	f85d fb04 	ldr.w	pc, [sp], #4
 80001e2:	bf00      	nop
 80001e4:	40021000 	.word	0x40021000

080001e8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80001e8:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <SystemInit+0x40>)
 80001ea:	681a      	ldr	r2, [r3, #0]
 80001ec:	f042 0201 	orr.w	r2, r2, #1
 80001f0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80001f2:	6859      	ldr	r1, [r3, #4]
 80001f4:	4a0d      	ldr	r2, [pc, #52]	; (800022c <SystemInit+0x44>)
 80001f6:	400a      	ands	r2, r1
 80001f8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80001fa:	681a      	ldr	r2, [r3, #0]
 80001fc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000200:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000204:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000206:	681a      	ldr	r2, [r3, #0]
 8000208:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800020c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800020e:	685a      	ldr	r2, [r3, #4]
 8000210:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000214:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000216:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800021a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800021c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000220:	4b03      	ldr	r3, [pc, #12]	; (8000230 <SystemInit+0x48>)
 8000222:	609a      	str	r2, [r3, #8]
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	40021000 	.word	0x40021000
 800022c:	f8ff0000 	.word	0xf8ff0000
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000234:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000236:	e003      	b.n	8000240 <LoopCopyDataInit>

08000238 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000238:	4b0b      	ldr	r3, [pc, #44]	; (8000268 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800023a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800023c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800023e:	3104      	adds	r1, #4

08000240 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000240:	480a      	ldr	r0, [pc, #40]	; (800026c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000242:	4b0b      	ldr	r3, [pc, #44]	; (8000270 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000244:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000246:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000248:	d3f6      	bcc.n	8000238 <CopyDataInit>
  ldr r2, =_sbss
 800024a:	4a0a      	ldr	r2, [pc, #40]	; (8000274 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800024c:	e002      	b.n	8000254 <LoopFillZerobss>

0800024e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800024e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000250:	f842 3b04 	str.w	r3, [r2], #4

08000254 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000254:	4b08      	ldr	r3, [pc, #32]	; (8000278 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000256:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000258:	d3f9      	bcc.n	800024e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800025a:	f7ff ffc5 	bl	80001e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800025e:	f000 fce1 	bl	8000c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000262:	f000 fcd5 	bl	8000c10 <main>
  bx lr
 8000266:	4770      	bx	lr
  ldr r3, =_sidata
 8000268:	08000cc0 	.word	0x08000cc0
  ldr r0, =_sdata
 800026c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000270:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8000274:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8000278:	20000024 	.word	0x20000024

0800027c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800027c:	e7fe      	b.n	800027c <ADC1_2_IRQHandler>

0800027e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800027e:	4770      	bx	lr

08000280 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000280:	e7fe      	b.n	8000280 <HardFault_Handler>

08000282 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000282:	e7fe      	b.n	8000282 <MemManage_Handler>

08000284 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000284:	e7fe      	b.n	8000284 <BusFault_Handler>

08000286 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000286:	e7fe      	b.n	8000286 <UsageFault_Handler>

08000288 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000288:	4770      	bx	lr

0800028a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800028a:	4770      	bx	lr

0800028c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800028c:	4770      	bx	lr

0800028e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800028e:	b508      	push	{r3, lr}
  HAL_IncTick();
 8000290:	f000 f852 	bl	8000338 <HAL_IncTick>
 8000294:	bd08      	pop	{r3, pc}
	...

08000298 <ledInit>:

#include "led.h"


void ledInit(void)
{
 8000298:	b500      	push	{lr}
 800029a:	b085      	sub	sp, #20
  GPIO_InitTypeDef  GPIO_InitStruct;

  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800029c:	2301      	movs	r3, #1
 800029e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80002a0:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002a2:	2303      	movs	r3, #3
 80002a4:	9303      	str	r3, [sp, #12]

  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80002a6:	a904      	add	r1, sp, #16
 80002a8:	2320      	movs	r3, #32
 80002aa:	f841 3d10 	str.w	r3, [r1, #-16]!
  //GPIO_InitStruct.Pin = GPIO_PIN_0;

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ae:	4803      	ldr	r0, [pc, #12]	; (80002bc <ledInit+0x24>)
 80002b0:	f000 f8bc 	bl	800042c <HAL_GPIO_Init>
}
 80002b4:	b005      	add	sp, #20
 80002b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80002ba:	bf00      	nop
 80002bc:	40010800 	.word	0x40010800

080002c0 <ledToggle>:
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
}

void ledToggle(uint8_t ch)
{
 80002c0:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80002c2:	2120      	movs	r1, #32
 80002c4:	4801      	ldr	r0, [pc, #4]	; (80002cc <ledToggle+0xc>)
 80002c6:	f000 f9a7 	bl	8000618 <HAL_GPIO_TogglePin>
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	40010800 	.word	0x40010800

080002d0 <hwInit>:

#include "hw.h"


void hwInit(void)
{
 80002d0:	b508      	push	{r3, lr}
  bspInit();
 80002d2:	f7ff ff73 	bl	80001bc <bspInit>

  ledInit();
 80002d6:	f7ff ffdf 	bl	8000298 <ledInit>
 80002da:	bd08      	pop	{r3, pc}

080002dc <delay>:
}

void delay(uint32_t time_ms)
{
 80002dc:	b508      	push	{r3, lr}
  HAL_Delay(time_ms);
 80002de:	f000 f839 	bl	8000354 <HAL_Delay>
 80002e2:	bd08      	pop	{r3, pc}

080002e4 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80002e4:	4770      	bx	lr
	...

080002e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002e8:	b510      	push	{r4, lr}
 80002ea:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80002ec:	4b07      	ldr	r3, [pc, #28]	; (800030c <HAL_InitTick+0x24>)
 80002ee:	6818      	ldr	r0, [r3, #0]
 80002f0:	4b07      	ldr	r3, [pc, #28]	; (8000310 <HAL_InitTick+0x28>)
 80002f2:	fba3 3000 	umull	r3, r0, r3, r0
 80002f6:	0980      	lsrs	r0, r0, #6
 80002f8:	f000 f882 	bl	8000400 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80002fc:	2200      	movs	r2, #0
 80002fe:	4621      	mov	r1, r4
 8000300:	f04f 30ff 	mov.w	r0, #4294967295
 8000304:	f000 f84a 	bl	800039c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000308:	2000      	movs	r0, #0
 800030a:	bd10      	pop	{r4, pc}
 800030c:	20000000 	.word	0x20000000
 8000310:	10624dd3 	.word	0x10624dd3

08000314 <HAL_Init>:
{
 8000314:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000316:	4a07      	ldr	r2, [pc, #28]	; (8000334 <HAL_Init+0x20>)
 8000318:	6813      	ldr	r3, [r2, #0]
 800031a:	f043 0310 	orr.w	r3, r3, #16
 800031e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000320:	2003      	movs	r0, #3
 8000322:	f000 f829 	bl	8000378 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000326:	200f      	movs	r0, #15
 8000328:	f7ff ffde 	bl	80002e8 <HAL_InitTick>
  HAL_MspInit();
 800032c:	f7ff ffda 	bl	80002e4 <HAL_MspInit>
}
 8000330:	2000      	movs	r0, #0
 8000332:	bd08      	pop	{r3, pc}
 8000334:	40022000 	.word	0x40022000

08000338 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000338:	4a02      	ldr	r2, [pc, #8]	; (8000344 <HAL_IncTick+0xc>)
 800033a:	6813      	ldr	r3, [r2, #0]
 800033c:	3301      	adds	r3, #1
 800033e:	6013      	str	r3, [r2, #0]
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	20000020 	.word	0x20000020

08000348 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000348:	4b01      	ldr	r3, [pc, #4]	; (8000350 <HAL_GetTick+0x8>)
 800034a:	6818      	ldr	r0, [r3, #0]
}
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	20000020 	.word	0x20000020

08000354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000354:	b530      	push	{r4, r5, lr}
 8000356:	b083      	sub	sp, #12
 8000358:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800035a:	f7ff fff5 	bl	8000348 <HAL_GetTick>
 800035e:	4605      	mov	r5, r0
  uint32_t wait = Delay;
 8000360:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000362:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000366:	d000      	beq.n	800036a <HAL_Delay+0x16>
  {
     wait++;
 8000368:	3401      	adds	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800036a:	f7ff ffed 	bl	8000348 <HAL_GetTick>
 800036e:	1b40      	subs	r0, r0, r5
 8000370:	42a0      	cmp	r0, r4
 8000372:	d3fa      	bcc.n	800036a <HAL_Delay+0x16>
  {
  }
}
 8000374:	b003      	add	sp, #12
 8000376:	bd30      	pop	{r4, r5, pc}

08000378 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000378:	4a07      	ldr	r2, [pc, #28]	; (8000398 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800037a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800037c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000380:	041b      	lsls	r3, r3, #16
 8000382:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000384:	0200      	lsls	r0, r0, #8
 8000386:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800038a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 800038c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000390:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000394:	60d0      	str	r0, [r2, #12]
 8000396:	4770      	bx	lr
 8000398:	e000ed00 	.word	0xe000ed00

0800039c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800039c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800039e:	4b16      	ldr	r3, [pc, #88]	; (80003f8 <HAL_NVIC_SetPriority+0x5c>)
 80003a0:	68db      	ldr	r3, [r3, #12]
 80003a2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003a6:	f1c3 0407 	rsb	r4, r3, #7
 80003aa:	2c04      	cmp	r4, #4
 80003ac:	bf28      	it	cs
 80003ae:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003b0:	1d1d      	adds	r5, r3, #4
 80003b2:	2d06      	cmp	r5, #6
 80003b4:	d917      	bls.n	80003e6 <HAL_NVIC_SetPriority+0x4a>
 80003b6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003b8:	2501      	movs	r5, #1
 80003ba:	fa05 f404 	lsl.w	r4, r5, r4
 80003be:	3c01      	subs	r4, #1
 80003c0:	4021      	ands	r1, r4
 80003c2:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003c4:	fa05 f303 	lsl.w	r3, r5, r3
 80003c8:	3b01      	subs	r3, #1
 80003ca:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003cc:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80003ce:	2800      	cmp	r0, #0
 80003d0:	db0b      	blt.n	80003ea <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d2:	0109      	lsls	r1, r1, #4
 80003d4:	b2c9      	uxtb	r1, r1
 80003d6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80003da:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80003de:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80003e2:	bc30      	pop	{r4, r5}
 80003e4:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003e6:	2300      	movs	r3, #0
 80003e8:	e7e6      	b.n	80003b8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ea:	f000 000f 	and.w	r0, r0, #15
 80003ee:	0109      	lsls	r1, r1, #4
 80003f0:	b2c9      	uxtb	r1, r1
 80003f2:	4b02      	ldr	r3, [pc, #8]	; (80003fc <HAL_NVIC_SetPriority+0x60>)
 80003f4:	5419      	strb	r1, [r3, r0]
 80003f6:	e7f4      	b.n	80003e2 <HAL_NVIC_SetPriority+0x46>
 80003f8:	e000ed00 	.word	0xe000ed00
 80003fc:	e000ed14 	.word	0xe000ed14

08000400 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000400:	3801      	subs	r0, #1
 8000402:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000406:	d20a      	bcs.n	800041e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <HAL_SYSTICK_Config+0x24>)
 800040a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800040c:	21f0      	movs	r1, #240	; 0xf0
 800040e:	4a06      	ldr	r2, [pc, #24]	; (8000428 <HAL_SYSTICK_Config+0x28>)
 8000410:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000414:	2000      	movs	r0, #0
 8000416:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000418:	2207      	movs	r2, #7
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800041e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	e000e010 	.word	0xe000e010
 8000428:	e000ed00 	.word	0xe000ed00

0800042c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800042c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042e:	b083      	sub	sp, #12
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000430:	2600      	movs	r6, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000432:	4634      	mov	r4, r6
 8000434:	e071      	b.n	800051a <HAL_GPIO_Init+0xee>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000436:	2d00      	cmp	r5, #0
 8000438:	f000 80a1 	beq.w	800057e <HAL_GPIO_Init+0x152>
 800043c:	2d01      	cmp	r5, #1
 800043e:	d100      	bne.n	8000442 <HAL_GPIO_Init+0x16>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000440:	68ce      	ldr	r6, [r1, #12]
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000442:	2bff      	cmp	r3, #255	; 0xff
 8000444:	f200 80af 	bhi.w	80005a6 <HAL_GPIO_Init+0x17a>
 8000448:	4686      	mov	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800044a:	2bff      	cmp	r3, #255	; 0xff
 800044c:	f200 80ae 	bhi.w	80005ac <HAL_GPIO_Init+0x180>
 8000450:	00a5      	lsls	r5, r4, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000452:	f8de 2000 	ldr.w	r2, [lr]
 8000456:	270f      	movs	r7, #15
 8000458:	40af      	lsls	r7, r5
 800045a:	ea22 0207 	bic.w	r2, r2, r7
 800045e:	fa06 f505 	lsl.w	r5, r6, r5
 8000462:	432a      	orrs	r2, r5
 8000464:	f8ce 2000 	str.w	r2, [lr]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000468:	684a      	ldr	r2, [r1, #4]
 800046a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800046e:	d053      	beq.n	8000518 <HAL_GPIO_Init+0xec>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000470:	4a63      	ldr	r2, [pc, #396]	; (8000600 <HAL_GPIO_Init+0x1d4>)
 8000472:	6995      	ldr	r5, [r2, #24]
 8000474:	f045 0501 	orr.w	r5, r5, #1
 8000478:	6195      	str	r5, [r2, #24]
 800047a:	6992      	ldr	r2, [r2, #24]
 800047c:	f002 0201 	and.w	r2, r2, #1
 8000480:	9201      	str	r2, [sp, #4]
 8000482:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 8000484:	08a5      	lsrs	r5, r4, #2
 8000486:	1caf      	adds	r7, r5, #2
 8000488:	4a5e      	ldr	r2, [pc, #376]	; (8000604 <HAL_GPIO_Init+0x1d8>)
 800048a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800048e:	f004 0703 	and.w	r7, r4, #3
 8000492:	00bf      	lsls	r7, r7, #2
 8000494:	f04f 0e0f 	mov.w	lr, #15
 8000498:	fa0e fe07 	lsl.w	lr, lr, r7
 800049c:	ea22 020e 	bic.w	r2, r2, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004a0:	f8df e170 	ldr.w	lr, [pc, #368]	; 8000614 <HAL_GPIO_Init+0x1e8>
 80004a4:	4570      	cmp	r0, lr
 80004a6:	f000 8088 	beq.w	80005ba <HAL_GPIO_Init+0x18e>
 80004aa:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 80004ae:	4570      	cmp	r0, lr
 80004b0:	f000 8086 	beq.w	80005c0 <HAL_GPIO_Init+0x194>
 80004b4:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 80004b8:	4570      	cmp	r0, lr
 80004ba:	f000 8084 	beq.w	80005c6 <HAL_GPIO_Init+0x19a>
 80004be:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 80004c2:	4570      	cmp	r0, lr
 80004c4:	d076      	beq.n	80005b4 <HAL_GPIO_Init+0x188>
 80004c6:	f04f 0e04 	mov.w	lr, #4
 80004ca:	fa0e f707 	lsl.w	r7, lr, r7
 80004ce:	433a      	orrs	r2, r7
        AFIO->EXTICR[position >> 2U] = temp;
 80004d0:	3502      	adds	r5, #2
 80004d2:	4f4c      	ldr	r7, [pc, #304]	; (8000604 <HAL_GPIO_Init+0x1d8>)
 80004d4:	f847 2025 	str.w	r2, [r7, r5, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004d8:	684a      	ldr	r2, [r1, #4]
 80004da:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80004de:	d075      	beq.n	80005cc <HAL_GPIO_Init+0x1a0>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 80004e0:	4d49      	ldr	r5, [pc, #292]	; (8000608 <HAL_GPIO_Init+0x1dc>)
 80004e2:	682a      	ldr	r2, [r5, #0]
 80004e4:	431a      	orrs	r2, r3
 80004e6:	602a      	str	r2, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004e8:	684a      	ldr	r2, [r1, #4]
 80004ea:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80004ee:	d073      	beq.n	80005d8 <HAL_GPIO_Init+0x1ac>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80004f0:	4d45      	ldr	r5, [pc, #276]	; (8000608 <HAL_GPIO_Init+0x1dc>)
 80004f2:	686a      	ldr	r2, [r5, #4]
 80004f4:	431a      	orrs	r2, r3
 80004f6:	606a      	str	r2, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004f8:	684a      	ldr	r2, [r1, #4]
 80004fa:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 80004fe:	d071      	beq.n	80005e4 <HAL_GPIO_Init+0x1b8>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000500:	4d41      	ldr	r5, [pc, #260]	; (8000608 <HAL_GPIO_Init+0x1dc>)
 8000502:	68aa      	ldr	r2, [r5, #8]
 8000504:	431a      	orrs	r2, r3
 8000506:	60aa      	str	r2, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000508:	684a      	ldr	r2, [r1, #4]
 800050a:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 800050e:	d06f      	beq.n	80005f0 <HAL_GPIO_Init+0x1c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000510:	4d3d      	ldr	r5, [pc, #244]	; (8000608 <HAL_GPIO_Init+0x1dc>)
 8000512:	68ea      	ldr	r2, [r5, #12]
 8000514:	4313      	orrs	r3, r2
 8000516:	60eb      	str	r3, [r5, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000518:	3401      	adds	r4, #1
 800051a:	2c0f      	cmp	r4, #15
 800051c:	d86e      	bhi.n	80005fc <HAL_GPIO_Init+0x1d0>
    ioposition = (0x01U << position);
 800051e:	2201      	movs	r2, #1
 8000520:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000522:	680b      	ldr	r3, [r1, #0]
 8000524:	4013      	ands	r3, r2
    if (iocurrent == ioposition)
 8000526:	429a      	cmp	r2, r3
 8000528:	d1f6      	bne.n	8000518 <HAL_GPIO_Init+0xec>
      switch (GPIO_Init->Mode)
 800052a:	684d      	ldr	r5, [r1, #4]
 800052c:	2d12      	cmp	r5, #18
 800052e:	d030      	beq.n	8000592 <HAL_GPIO_Init+0x166>
 8000530:	d80b      	bhi.n	800054a <HAL_GPIO_Init+0x11e>
 8000532:	2d02      	cmp	r5, #2
 8000534:	d02a      	beq.n	800058c <HAL_GPIO_Init+0x160>
 8000536:	f67f af7e 	bls.w	8000436 <HAL_GPIO_Init+0xa>
 800053a:	2d03      	cmp	r5, #3
 800053c:	d02f      	beq.n	800059e <HAL_GPIO_Init+0x172>
 800053e:	2d11      	cmp	r5, #17
 8000540:	f47f af7f 	bne.w	8000442 <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000544:	68ce      	ldr	r6, [r1, #12]
 8000546:	3604      	adds	r6, #4
          break;
 8000548:	e77b      	b.n	8000442 <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 800054a:	4f30      	ldr	r7, [pc, #192]	; (800060c <HAL_GPIO_Init+0x1e0>)
 800054c:	42bd      	cmp	r5, r7
 800054e:	d016      	beq.n	800057e <HAL_GPIO_Init+0x152>
 8000550:	d90c      	bls.n	800056c <HAL_GPIO_Init+0x140>
 8000552:	4f2f      	ldr	r7, [pc, #188]	; (8000610 <HAL_GPIO_Init+0x1e4>)
 8000554:	42bd      	cmp	r5, r7
 8000556:	d012      	beq.n	800057e <HAL_GPIO_Init+0x152>
 8000558:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800055c:	42bd      	cmp	r5, r7
 800055e:	d00e      	beq.n	800057e <HAL_GPIO_Init+0x152>
 8000560:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000564:	42bd      	cmp	r5, r7
 8000566:	f47f af6c 	bne.w	8000442 <HAL_GPIO_Init+0x16>
 800056a:	e008      	b.n	800057e <HAL_GPIO_Init+0x152>
 800056c:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000570:	42bd      	cmp	r5, r7
 8000572:	d004      	beq.n	800057e <HAL_GPIO_Init+0x152>
 8000574:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000578:	42bd      	cmp	r5, r7
 800057a:	f47f af62 	bne.w	8000442 <HAL_GPIO_Init+0x16>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 800057e:	688d      	ldr	r5, [r1, #8]
 8000580:	b17d      	cbz	r5, 80005a2 <HAL_GPIO_Init+0x176>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8000582:	2d01      	cmp	r5, #1
 8000584:	d008      	beq.n	8000598 <HAL_GPIO_Init+0x16c>
            GPIOx->BRR = ioposition;
 8000586:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000588:	2608      	movs	r6, #8
 800058a:	e75a      	b.n	8000442 <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800058c:	68ce      	ldr	r6, [r1, #12]
 800058e:	3608      	adds	r6, #8
          break;
 8000590:	e757      	b.n	8000442 <HAL_GPIO_Init+0x16>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000592:	68ce      	ldr	r6, [r1, #12]
 8000594:	360c      	adds	r6, #12
          break;
 8000596:	e754      	b.n	8000442 <HAL_GPIO_Init+0x16>
            GPIOx->BSRR = ioposition;
 8000598:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800059a:	2608      	movs	r6, #8
 800059c:	e751      	b.n	8000442 <HAL_GPIO_Init+0x16>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800059e:	2600      	movs	r6, #0
 80005a0:	e74f      	b.n	8000442 <HAL_GPIO_Init+0x16>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80005a2:	2604      	movs	r6, #4
 80005a4:	e74d      	b.n	8000442 <HAL_GPIO_Init+0x16>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80005a6:	f100 0e04 	add.w	lr, r0, #4
 80005aa:	e74e      	b.n	800044a <HAL_GPIO_Init+0x1e>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80005ac:	f1a4 0508 	sub.w	r5, r4, #8
 80005b0:	00ad      	lsls	r5, r5, #2
 80005b2:	e74e      	b.n	8000452 <HAL_GPIO_Init+0x26>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80005b4:	f04f 0e03 	mov.w	lr, #3
 80005b8:	e787      	b.n	80004ca <HAL_GPIO_Init+0x9e>
 80005ba:	f04f 0e00 	mov.w	lr, #0
 80005be:	e784      	b.n	80004ca <HAL_GPIO_Init+0x9e>
 80005c0:	f04f 0e01 	mov.w	lr, #1
 80005c4:	e781      	b.n	80004ca <HAL_GPIO_Init+0x9e>
 80005c6:	f04f 0e02 	mov.w	lr, #2
 80005ca:	e77e      	b.n	80004ca <HAL_GPIO_Init+0x9e>
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 80005cc:	4d0e      	ldr	r5, [pc, #56]	; (8000608 <HAL_GPIO_Init+0x1dc>)
 80005ce:	682a      	ldr	r2, [r5, #0]
 80005d0:	ea22 0203 	bic.w	r2, r2, r3
 80005d4:	602a      	str	r2, [r5, #0]
 80005d6:	e787      	b.n	80004e8 <HAL_GPIO_Init+0xbc>
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 80005d8:	4d0b      	ldr	r5, [pc, #44]	; (8000608 <HAL_GPIO_Init+0x1dc>)
 80005da:	686a      	ldr	r2, [r5, #4]
 80005dc:	ea22 0203 	bic.w	r2, r2, r3
 80005e0:	606a      	str	r2, [r5, #4]
 80005e2:	e789      	b.n	80004f8 <HAL_GPIO_Init+0xcc>
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 80005e4:	4d08      	ldr	r5, [pc, #32]	; (8000608 <HAL_GPIO_Init+0x1dc>)
 80005e6:	68aa      	ldr	r2, [r5, #8]
 80005e8:	ea22 0203 	bic.w	r2, r2, r3
 80005ec:	60aa      	str	r2, [r5, #8]
 80005ee:	e78b      	b.n	8000508 <HAL_GPIO_Init+0xdc>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 80005f0:	4d05      	ldr	r5, [pc, #20]	; (8000608 <HAL_GPIO_Init+0x1dc>)
 80005f2:	68ea      	ldr	r2, [r5, #12]
 80005f4:	ea22 0303 	bic.w	r3, r2, r3
 80005f8:	60eb      	str	r3, [r5, #12]
 80005fa:	e78d      	b.n	8000518 <HAL_GPIO_Init+0xec>
        }
      }
    }
  }
}
 80005fc:	b003      	add	sp, #12
 80005fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000600:	40021000 	.word	0x40021000
 8000604:	40010000 	.word	0x40010000
 8000608:	40010400 	.word	0x40010400
 800060c:	10210000 	.word	0x10210000
 8000610:	10310000 	.word	0x10310000
 8000614:	40010800 	.word	0x40010800

08000618 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000618:	68c3      	ldr	r3, [r0, #12]
 800061a:	4059      	eors	r1, r3
 800061c:	60c1      	str	r1, [r0, #12]
 800061e:	4770      	bx	lr

08000620 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000620:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000622:	4b08      	ldr	r3, [pc, #32]	; (8000644 <RCC_Delay+0x24>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a08      	ldr	r2, [pc, #32]	; (8000648 <RCC_Delay+0x28>)
 8000628:	fba2 2303 	umull	r2, r3, r2, r3
 800062c:	0a5b      	lsrs	r3, r3, #9
 800062e:	fb00 f003 	mul.w	r0, r0, r3
 8000632:	9001      	str	r0, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000634:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000636:	9b01      	ldr	r3, [sp, #4]
 8000638:	1e5a      	subs	r2, r3, #1
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1f9      	bne.n	8000634 <RCC_Delay+0x14>
}
 8000640:	b002      	add	sp, #8
 8000642:	4770      	bx	lr
 8000644:	20000000 	.word	0x20000000
 8000648:	10624dd3 	.word	0x10624dd3

0800064c <HAL_RCC_OscConfig>:
{
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000652:	6803      	ldr	r3, [r0, #0]
 8000654:	f013 0f01 	tst.w	r3, #1
 8000658:	d03d      	beq.n	80006d6 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800065a:	4bac      	ldr	r3, [pc, #688]	; (800090c <HAL_RCC_OscConfig+0x2c0>)
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	f003 030c 	and.w	r3, r3, #12
 8000662:	2b04      	cmp	r3, #4
 8000664:	d02e      	beq.n	80006c4 <HAL_RCC_OscConfig+0x78>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000666:	4ba9      	ldr	r3, [pc, #676]	; (800090c <HAL_RCC_OscConfig+0x2c0>)
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	f003 030c 	and.w	r3, r3, #12
 800066e:	2b08      	cmp	r3, #8
 8000670:	d023      	beq.n	80006ba <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000672:	6863      	ldr	r3, [r4, #4]
 8000674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000678:	d051      	beq.n	800071e <HAL_RCC_OscConfig+0xd2>
 800067a:	2b00      	cmp	r3, #0
 800067c:	d155      	bne.n	800072a <HAL_RCC_OscConfig+0xde>
 800067e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000682:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000694:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000696:	6863      	ldr	r3, [r4, #4]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d060      	beq.n	800075e <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 800069c:	f7ff fe54 	bl	8000348 <HAL_GetTick>
 80006a0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006a2:	4b9a      	ldr	r3, [pc, #616]	; (800090c <HAL_RCC_OscConfig+0x2c0>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80006aa:	d114      	bne.n	80006d6 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006ac:	f7ff fe4c 	bl	8000348 <HAL_GetTick>
 80006b0:	1b40      	subs	r0, r0, r5
 80006b2:	2864      	cmp	r0, #100	; 0x64
 80006b4:	d9f5      	bls.n	80006a2 <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 80006b6:	2003      	movs	r0, #3
 80006b8:	e1af      	b.n	8000a1a <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80006ba:	4b94      	ldr	r3, [pc, #592]	; (800090c <HAL_RCC_OscConfig+0x2c0>)
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80006c2:	d0d6      	beq.n	8000672 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80006c4:	4b91      	ldr	r3, [pc, #580]	; (800090c <HAL_RCC_OscConfig+0x2c0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80006cc:	d003      	beq.n	80006d6 <HAL_RCC_OscConfig+0x8a>
 80006ce:	6863      	ldr	r3, [r4, #4]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	f000 819f 	beq.w	8000a14 <HAL_RCC_OscConfig+0x3c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80006d6:	6823      	ldr	r3, [r4, #0]
 80006d8:	f013 0f02 	tst.w	r3, #2
 80006dc:	d065      	beq.n	80007aa <HAL_RCC_OscConfig+0x15e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80006de:	4b8b      	ldr	r3, [pc, #556]	; (800090c <HAL_RCC_OscConfig+0x2c0>)
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	f013 0f0c 	tst.w	r3, #12
 80006e6:	d04e      	beq.n	8000786 <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80006e8:	4b88      	ldr	r3, [pc, #544]	; (800090c <HAL_RCC_OscConfig+0x2c0>)
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	f003 030c 	and.w	r3, r3, #12
 80006f0:	2b08      	cmp	r3, #8
 80006f2:	d043      	beq.n	800077c <HAL_RCC_OscConfig+0x130>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80006f4:	6923      	ldr	r3, [r4, #16]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d079      	beq.n	80007ee <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 80006fa:	2201      	movs	r2, #1
 80006fc:	4b84      	ldr	r3, [pc, #528]	; (8000910 <HAL_RCC_OscConfig+0x2c4>)
 80006fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000700:	f7ff fe22 	bl	8000348 <HAL_GetTick>
 8000704:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000706:	4b81      	ldr	r3, [pc, #516]	; (800090c <HAL_RCC_OscConfig+0x2c0>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f013 0f02 	tst.w	r3, #2
 800070e:	d165      	bne.n	80007dc <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000710:	f7ff fe1a 	bl	8000348 <HAL_GetTick>
 8000714:	1b40      	subs	r0, r0, r5
 8000716:	2802      	cmp	r0, #2
 8000718:	d9f5      	bls.n	8000706 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 800071a:	2003      	movs	r0, #3
 800071c:	e17d      	b.n	8000a1a <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800071e:	4a7b      	ldr	r2, [pc, #492]	; (800090c <HAL_RCC_OscConfig+0x2c0>)
 8000720:	6813      	ldr	r3, [r2, #0]
 8000722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	e7b5      	b.n	8000696 <HAL_RCC_OscConfig+0x4a>
 800072a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800072e:	d009      	beq.n	8000744 <HAL_RCC_OscConfig+0xf8>
 8000730:	4b76      	ldr	r3, [pc, #472]	; (800090c <HAL_RCC_OscConfig+0x2c0>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	e7a8      	b.n	8000696 <HAL_RCC_OscConfig+0x4a>
 8000744:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000748:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	e79b      	b.n	8000696 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 800075e:	f7ff fdf3 	bl	8000348 <HAL_GetTick>
 8000762:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000764:	4b69      	ldr	r3, [pc, #420]	; (800090c <HAL_RCC_OscConfig+0x2c0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800076c:	d0b3      	beq.n	80006d6 <HAL_RCC_OscConfig+0x8a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800076e:	f7ff fdeb 	bl	8000348 <HAL_GetTick>
 8000772:	1b40      	subs	r0, r0, r5
 8000774:	2864      	cmp	r0, #100	; 0x64
 8000776:	d9f5      	bls.n	8000764 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8000778:	2003      	movs	r0, #3
 800077a:	e14e      	b.n	8000a1a <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800077c:	4b63      	ldr	r3, [pc, #396]	; (800090c <HAL_RCC_OscConfig+0x2c0>)
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000784:	d1b6      	bne.n	80006f4 <HAL_RCC_OscConfig+0xa8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000786:	4b61      	ldr	r3, [pc, #388]	; (800090c <HAL_RCC_OscConfig+0x2c0>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f013 0f02 	tst.w	r3, #2
 800078e:	d004      	beq.n	800079a <HAL_RCC_OscConfig+0x14e>
 8000790:	6923      	ldr	r3, [r4, #16]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d001      	beq.n	800079a <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 8000796:	2001      	movs	r0, #1
 8000798:	e13f      	b.n	8000a1a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800079a:	4a5c      	ldr	r2, [pc, #368]	; (800090c <HAL_RCC_OscConfig+0x2c0>)
 800079c:	6813      	ldr	r3, [r2, #0]
 800079e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80007a2:	6961      	ldr	r1, [r4, #20]
 80007a4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80007a8:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80007aa:	6823      	ldr	r3, [r4, #0]
 80007ac:	f013 0f08 	tst.w	r3, #8
 80007b0:	d032      	beq.n	8000818 <HAL_RCC_OscConfig+0x1cc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80007b2:	69a3      	ldr	r3, [r4, #24]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d06e      	beq.n	8000896 <HAL_RCC_OscConfig+0x24a>
      __HAL_RCC_LSI_ENABLE();
 80007b8:	2201      	movs	r2, #1
 80007ba:	4b56      	ldr	r3, [pc, #344]	; (8000914 <HAL_RCC_OscConfig+0x2c8>)
 80007bc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80007be:	f7ff fdc3 	bl	8000348 <HAL_GetTick>
 80007c2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007c4:	4b51      	ldr	r3, [pc, #324]	; (800090c <HAL_RCC_OscConfig+0x2c0>)
 80007c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c8:	f013 0f02 	tst.w	r3, #2
 80007cc:	d121      	bne.n	8000812 <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007ce:	f7ff fdbb 	bl	8000348 <HAL_GetTick>
 80007d2:	1b40      	subs	r0, r0, r5
 80007d4:	2802      	cmp	r0, #2
 80007d6:	d9f5      	bls.n	80007c4 <HAL_RCC_OscConfig+0x178>
          return HAL_TIMEOUT;
 80007d8:	2003      	movs	r0, #3
 80007da:	e11e      	b.n	8000a1a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80007dc:	4a4b      	ldr	r2, [pc, #300]	; (800090c <HAL_RCC_OscConfig+0x2c0>)
 80007de:	6813      	ldr	r3, [r2, #0]
 80007e0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80007e4:	6961      	ldr	r1, [r4, #20]
 80007e6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80007ea:	6013      	str	r3, [r2, #0]
 80007ec:	e7dd      	b.n	80007aa <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 80007ee:	2200      	movs	r2, #0
 80007f0:	4b47      	ldr	r3, [pc, #284]	; (8000910 <HAL_RCC_OscConfig+0x2c4>)
 80007f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80007f4:	f7ff fda8 	bl	8000348 <HAL_GetTick>
 80007f8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007fa:	4b44      	ldr	r3, [pc, #272]	; (800090c <HAL_RCC_OscConfig+0x2c0>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f013 0f02 	tst.w	r3, #2
 8000802:	d0d2      	beq.n	80007aa <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000804:	f7ff fda0 	bl	8000348 <HAL_GetTick>
 8000808:	1b40      	subs	r0, r0, r5
 800080a:	2802      	cmp	r0, #2
 800080c:	d9f5      	bls.n	80007fa <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 800080e:	2003      	movs	r0, #3
 8000810:	e103      	b.n	8000a1a <HAL_RCC_OscConfig+0x3ce>
      RCC_Delay(1);
 8000812:	2001      	movs	r0, #1
 8000814:	f7ff ff04 	bl	8000620 <RCC_Delay>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000818:	6823      	ldr	r3, [r4, #0]
 800081a:	f013 0f04 	tst.w	r3, #4
 800081e:	f000 8099 	beq.w	8000954 <HAL_RCC_OscConfig+0x308>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000822:	4b3a      	ldr	r3, [pc, #232]	; (800090c <HAL_RCC_OscConfig+0x2c0>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800082a:	d146      	bne.n	80008ba <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800082c:	4b37      	ldr	r3, [pc, #220]	; (800090c <HAL_RCC_OscConfig+0x2c0>)
 800082e:	69da      	ldr	r2, [r3, #28]
 8000830:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000834:	61da      	str	r2, [r3, #28]
 8000836:	69db      	ldr	r3, [r3, #28]
 8000838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083c:	9301      	str	r3, [sp, #4]
 800083e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000840:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000842:	4b35      	ldr	r3, [pc, #212]	; (8000918 <HAL_RCC_OscConfig+0x2cc>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f413 7f80 	tst.w	r3, #256	; 0x100
 800084a:	d038      	beq.n	80008be <HAL_RCC_OscConfig+0x272>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800084c:	68e3      	ldr	r3, [r4, #12]
 800084e:	2b01      	cmp	r3, #1
 8000850:	d049      	beq.n	80008e6 <HAL_RCC_OscConfig+0x29a>
 8000852:	2b00      	cmp	r3, #0
 8000854:	d14d      	bne.n	80008f2 <HAL_RCC_OscConfig+0x2a6>
 8000856:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800085a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800085e:	6a1a      	ldr	r2, [r3, #32]
 8000860:	f022 0201 	bic.w	r2, r2, #1
 8000864:	621a      	str	r2, [r3, #32]
 8000866:	6a1a      	ldr	r2, [r3, #32]
 8000868:	f022 0204 	bic.w	r2, r2, #4
 800086c:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800086e:	68e3      	ldr	r3, [r4, #12]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d05d      	beq.n	8000930 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8000874:	f7ff fd68 	bl	8000348 <HAL_GetTick>
 8000878:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800087a:	4b24      	ldr	r3, [pc, #144]	; (800090c <HAL_RCC_OscConfig+0x2c0>)
 800087c:	6a1b      	ldr	r3, [r3, #32]
 800087e:	f013 0f02 	tst.w	r3, #2
 8000882:	d166      	bne.n	8000952 <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000884:	f7ff fd60 	bl	8000348 <HAL_GetTick>
 8000888:	1b80      	subs	r0, r0, r6
 800088a:	f241 3388 	movw	r3, #5000	; 0x1388
 800088e:	4298      	cmp	r0, r3
 8000890:	d9f3      	bls.n	800087a <HAL_RCC_OscConfig+0x22e>
          return HAL_TIMEOUT;
 8000892:	2003      	movs	r0, #3
 8000894:	e0c1      	b.n	8000a1a <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_LSI_DISABLE();
 8000896:	2200      	movs	r2, #0
 8000898:	4b1e      	ldr	r3, [pc, #120]	; (8000914 <HAL_RCC_OscConfig+0x2c8>)
 800089a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800089c:	f7ff fd54 	bl	8000348 <HAL_GetTick>
 80008a0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <HAL_RCC_OscConfig+0x2c0>)
 80008a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a6:	f013 0f02 	tst.w	r3, #2
 80008aa:	d0b5      	beq.n	8000818 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008ac:	f7ff fd4c 	bl	8000348 <HAL_GetTick>
 80008b0:	1b40      	subs	r0, r0, r5
 80008b2:	2802      	cmp	r0, #2
 80008b4:	d9f5      	bls.n	80008a2 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 80008b6:	2003      	movs	r0, #3
 80008b8:	e0af      	b.n	8000a1a <HAL_RCC_OscConfig+0x3ce>
    FlagStatus       pwrclkchanged = RESET;
 80008ba:	2500      	movs	r5, #0
 80008bc:	e7c1      	b.n	8000842 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80008be:	4a16      	ldr	r2, [pc, #88]	; (8000918 <HAL_RCC_OscConfig+0x2cc>)
 80008c0:	6813      	ldr	r3, [r2, #0]
 80008c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008c6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80008c8:	f7ff fd3e 	bl	8000348 <HAL_GetTick>
 80008cc:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <HAL_RCC_OscConfig+0x2cc>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80008d6:	d1b9      	bne.n	800084c <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80008d8:	f7ff fd36 	bl	8000348 <HAL_GetTick>
 80008dc:	1b80      	subs	r0, r0, r6
 80008de:	2864      	cmp	r0, #100	; 0x64
 80008e0:	d9f5      	bls.n	80008ce <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 80008e2:	2003      	movs	r0, #3
 80008e4:	e099      	b.n	8000a1a <HAL_RCC_OscConfig+0x3ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008e6:	4a09      	ldr	r2, [pc, #36]	; (800090c <HAL_RCC_OscConfig+0x2c0>)
 80008e8:	6a13      	ldr	r3, [r2, #32]
 80008ea:	f043 0301 	orr.w	r3, r3, #1
 80008ee:	6213      	str	r3, [r2, #32]
 80008f0:	e7bd      	b.n	800086e <HAL_RCC_OscConfig+0x222>
 80008f2:	2b05      	cmp	r3, #5
 80008f4:	d012      	beq.n	800091c <HAL_RCC_OscConfig+0x2d0>
 80008f6:	4b05      	ldr	r3, [pc, #20]	; (800090c <HAL_RCC_OscConfig+0x2c0>)
 80008f8:	6a1a      	ldr	r2, [r3, #32]
 80008fa:	f022 0201 	bic.w	r2, r2, #1
 80008fe:	621a      	str	r2, [r3, #32]
 8000900:	6a1a      	ldr	r2, [r3, #32]
 8000902:	f022 0204 	bic.w	r2, r2, #4
 8000906:	621a      	str	r2, [r3, #32]
 8000908:	e7b1      	b.n	800086e <HAL_RCC_OscConfig+0x222>
 800090a:	bf00      	nop
 800090c:	40021000 	.word	0x40021000
 8000910:	42420000 	.word	0x42420000
 8000914:	42420480 	.word	0x42420480
 8000918:	40007000 	.word	0x40007000
 800091c:	4b41      	ldr	r3, [pc, #260]	; (8000a24 <HAL_RCC_OscConfig+0x3d8>)
 800091e:	6a1a      	ldr	r2, [r3, #32]
 8000920:	f042 0204 	orr.w	r2, r2, #4
 8000924:	621a      	str	r2, [r3, #32]
 8000926:	6a1a      	ldr	r2, [r3, #32]
 8000928:	f042 0201 	orr.w	r2, r2, #1
 800092c:	621a      	str	r2, [r3, #32]
 800092e:	e79e      	b.n	800086e <HAL_RCC_OscConfig+0x222>
      tickstart = HAL_GetTick();
 8000930:	f7ff fd0a 	bl	8000348 <HAL_GetTick>
 8000934:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000936:	4b3b      	ldr	r3, [pc, #236]	; (8000a24 <HAL_RCC_OscConfig+0x3d8>)
 8000938:	6a1b      	ldr	r3, [r3, #32]
 800093a:	f013 0f02 	tst.w	r3, #2
 800093e:	d008      	beq.n	8000952 <HAL_RCC_OscConfig+0x306>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000940:	f7ff fd02 	bl	8000348 <HAL_GetTick>
 8000944:	1b80      	subs	r0, r0, r6
 8000946:	f241 3388 	movw	r3, #5000	; 0x1388
 800094a:	4298      	cmp	r0, r3
 800094c:	d9f3      	bls.n	8000936 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 800094e:	2003      	movs	r0, #3
 8000950:	e063      	b.n	8000a1a <HAL_RCC_OscConfig+0x3ce>
    if(pwrclkchanged == SET)
 8000952:	b9e5      	cbnz	r5, 800098e <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000954:	69e3      	ldr	r3, [r4, #28]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d05e      	beq.n	8000a18 <HAL_RCC_OscConfig+0x3cc>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800095a:	4a32      	ldr	r2, [pc, #200]	; (8000a24 <HAL_RCC_OscConfig+0x3d8>)
 800095c:	6852      	ldr	r2, [r2, #4]
 800095e:	f002 020c 	and.w	r2, r2, #12
 8000962:	2a08      	cmp	r2, #8
 8000964:	d05b      	beq.n	8000a1e <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000966:	2b02      	cmp	r3, #2
 8000968:	d017      	beq.n	800099a <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 800096a:	2200      	movs	r2, #0
 800096c:	4b2e      	ldr	r3, [pc, #184]	; (8000a28 <HAL_RCC_OscConfig+0x3dc>)
 800096e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000970:	f7ff fcea 	bl	8000348 <HAL_GetTick>
 8000974:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000976:	4b2b      	ldr	r3, [pc, #172]	; (8000a24 <HAL_RCC_OscConfig+0x3d8>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800097e:	d047      	beq.n	8000a10 <HAL_RCC_OscConfig+0x3c4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000980:	f7ff fce2 	bl	8000348 <HAL_GetTick>
 8000984:	1b00      	subs	r0, r0, r4
 8000986:	2802      	cmp	r0, #2
 8000988:	d9f5      	bls.n	8000976 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 800098a:	2003      	movs	r0, #3
 800098c:	e045      	b.n	8000a1a <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_PWR_CLK_DISABLE();
 800098e:	4a25      	ldr	r2, [pc, #148]	; (8000a24 <HAL_RCC_OscConfig+0x3d8>)
 8000990:	69d3      	ldr	r3, [r2, #28]
 8000992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000996:	61d3      	str	r3, [r2, #28]
 8000998:	e7dc      	b.n	8000954 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 800099a:	2200      	movs	r2, #0
 800099c:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <HAL_RCC_OscConfig+0x3dc>)
 800099e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009a0:	f7ff fcd2 	bl	8000348 <HAL_GetTick>
 80009a4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009a6:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <HAL_RCC_OscConfig+0x3d8>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80009ae:	d006      	beq.n	80009be <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009b0:	f7ff fcca 	bl	8000348 <HAL_GetTick>
 80009b4:	1b40      	subs	r0, r0, r5
 80009b6:	2802      	cmp	r0, #2
 80009b8:	d9f5      	bls.n	80009a6 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80009ba:	2003      	movs	r0, #3
 80009bc:	e02d      	b.n	8000a1a <HAL_RCC_OscConfig+0x3ce>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80009be:	6a23      	ldr	r3, [r4, #32]
 80009c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009c4:	d01a      	beq.n	80009fc <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80009c6:	4917      	ldr	r1, [pc, #92]	; (8000a24 <HAL_RCC_OscConfig+0x3d8>)
 80009c8:	684b      	ldr	r3, [r1, #4]
 80009ca:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80009ce:	6a22      	ldr	r2, [r4, #32]
 80009d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80009d2:	4302      	orrs	r2, r0
 80009d4:	4313      	orrs	r3, r2
 80009d6:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80009d8:	2201      	movs	r2, #1
 80009da:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <HAL_RCC_OscConfig+0x3dc>)
 80009dc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009de:	f7ff fcb3 	bl	8000348 <HAL_GetTick>
 80009e2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <HAL_RCC_OscConfig+0x3d8>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80009ec:	d10e      	bne.n	8000a0c <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009ee:	f7ff fcab 	bl	8000348 <HAL_GetTick>
 80009f2:	1b00      	subs	r0, r0, r4
 80009f4:	2802      	cmp	r0, #2
 80009f6:	d9f5      	bls.n	80009e4 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 80009f8:	2003      	movs	r0, #3
 80009fa:	e00e      	b.n	8000a1a <HAL_RCC_OscConfig+0x3ce>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80009fc:	4a09      	ldr	r2, [pc, #36]	; (8000a24 <HAL_RCC_OscConfig+0x3d8>)
 80009fe:	6853      	ldr	r3, [r2, #4]
 8000a00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000a04:	68a1      	ldr	r1, [r4, #8]
 8000a06:	430b      	orrs	r3, r1
 8000a08:	6053      	str	r3, [r2, #4]
 8000a0a:	e7dc      	b.n	80009c6 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	e004      	b.n	8000a1a <HAL_RCC_OscConfig+0x3ce>
 8000a10:	2000      	movs	r0, #0
 8000a12:	e002      	b.n	8000a1a <HAL_RCC_OscConfig+0x3ce>
        return HAL_ERROR;
 8000a14:	2001      	movs	r0, #1
 8000a16:	e000      	b.n	8000a1a <HAL_RCC_OscConfig+0x3ce>
  return HAL_OK;
 8000a18:	2000      	movs	r0, #0
}
 8000a1a:	b002      	add	sp, #8
 8000a1c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000a1e:	2001      	movs	r0, #1
 8000a20:	e7fb      	b.n	8000a1a <HAL_RCC_OscConfig+0x3ce>
 8000a22:	bf00      	nop
 8000a24:	40021000 	.word	0x40021000
 8000a28:	42420060 	.word	0x42420060

08000a2c <HAL_RCC_GetSysClockFreq>:
{
 8000a2c:	b510      	push	{r4, lr}
 8000a2e:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a30:	4c15      	ldr	r4, [pc, #84]	; (8000a88 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000a32:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a36:	f10d 0e18 	add.w	lr, sp, #24
 8000a3a:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000a3e:	8a23      	ldrh	r3, [r4, #16]
 8000a40:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <HAL_RCC_GetSysClockFreq+0x60>)
 8000a46:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000a48:	f003 020c 	and.w	r2, r3, #12
 8000a4c:	2a08      	cmp	r2, #8
 8000a4e:	d118      	bne.n	8000a82 <HAL_RCC_GetSysClockFreq+0x56>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000a50:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000a54:	4472      	add	r2, lr
 8000a56:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000a5a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000a5e:	d103      	bne.n	8000a68 <HAL_RCC_GetSysClockFreq+0x3c>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <HAL_RCC_GetSysClockFreq+0x64>)
 8000a62:	fb03 f000 	mul.w	r0, r3, r0
 8000a66:	e00d      	b.n	8000a84 <HAL_RCC_GetSysClockFreq+0x58>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <HAL_RCC_GetSysClockFreq+0x60>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8000a70:	4473      	add	r3, lr
 8000a72:	f813 2c14 	ldrb.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8000a76:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <HAL_RCC_GetSysClockFreq+0x68>)
 8000a78:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a7c:	fb03 f000 	mul.w	r0, r3, r0
 8000a80:	e000      	b.n	8000a84 <HAL_RCC_GetSysClockFreq+0x58>
      sysclockfreq = HSE_VALUE;
 8000a82:	4804      	ldr	r0, [pc, #16]	; (8000a94 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8000a84:	b006      	add	sp, #24
 8000a86:	bd10      	pop	{r4, pc}
 8000a88:	08000c94 	.word	0x08000c94
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	003d0900 	.word	0x003d0900
 8000a94:	007a1200 	.word	0x007a1200

08000a98 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a98:	4b59      	ldr	r3, [pc, #356]	; (8000c00 <HAL_RCC_ClockConfig+0x168>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f003 0307 	and.w	r3, r3, #7
 8000aa0:	428b      	cmp	r3, r1
 8000aa2:	d20c      	bcs.n	8000abe <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000aa4:	4a56      	ldr	r2, [pc, #344]	; (8000c00 <HAL_RCC_ClockConfig+0x168>)
 8000aa6:	6813      	ldr	r3, [r2, #0]
 8000aa8:	f023 0307 	bic.w	r3, r3, #7
 8000aac:	430b      	orrs	r3, r1
 8000aae:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ab0:	6813      	ldr	r3, [r2, #0]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	4299      	cmp	r1, r3
 8000ab8:	d001      	beq.n	8000abe <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8000aba:	2001      	movs	r0, #1
 8000abc:	4770      	bx	lr
{
 8000abe:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ac0:	6803      	ldr	r3, [r0, #0]
 8000ac2:	f013 0f02 	tst.w	r3, #2
 8000ac6:	d006      	beq.n	8000ad6 <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ac8:	4a4e      	ldr	r2, [pc, #312]	; (8000c04 <HAL_RCC_ClockConfig+0x16c>)
 8000aca:	6853      	ldr	r3, [r2, #4]
 8000acc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ad0:	6884      	ldr	r4, [r0, #8]
 8000ad2:	4323      	orrs	r3, r4
 8000ad4:	6053      	str	r3, [r2, #4]
 8000ad6:	460d      	mov	r5, r1
 8000ad8:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ada:	6803      	ldr	r3, [r0, #0]
 8000adc:	f013 0f01 	tst.w	r3, #1
 8000ae0:	d052      	beq.n	8000b88 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ae2:	6843      	ldr	r3, [r0, #4]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d023      	beq.n	8000b30 <HAL_RCC_ClockConfig+0x98>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d028      	beq.n	8000b3e <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000aec:	4a45      	ldr	r2, [pc, #276]	; (8000c04 <HAL_RCC_ClockConfig+0x16c>)
 8000aee:	6812      	ldr	r2, [r2, #0]
 8000af0:	f012 0f02 	tst.w	r2, #2
 8000af4:	f000 8082 	beq.w	8000bfc <HAL_RCC_ClockConfig+0x164>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000af8:	4942      	ldr	r1, [pc, #264]	; (8000c04 <HAL_RCC_ClockConfig+0x16c>)
 8000afa:	684a      	ldr	r2, [r1, #4]
 8000afc:	f022 0203 	bic.w	r2, r2, #3
 8000b00:	4313      	orrs	r3, r2
 8000b02:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000b04:	f7ff fc20 	bl	8000348 <HAL_GetTick>
 8000b08:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b0a:	6863      	ldr	r3, [r4, #4]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d01d      	beq.n	8000b4c <HAL_RCC_ClockConfig+0xb4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d02a      	beq.n	8000b6a <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b14:	4b3b      	ldr	r3, [pc, #236]	; (8000c04 <HAL_RCC_ClockConfig+0x16c>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f013 0f0c 	tst.w	r3, #12
 8000b1c:	d034      	beq.n	8000b88 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b1e:	f7ff fc13 	bl	8000348 <HAL_GetTick>
 8000b22:	1b80      	subs	r0, r0, r6
 8000b24:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b28:	4298      	cmp	r0, r3
 8000b2a:	d9f3      	bls.n	8000b14 <HAL_RCC_ClockConfig+0x7c>
          return HAL_TIMEOUT;
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b30:	4a34      	ldr	r2, [pc, #208]	; (8000c04 <HAL_RCC_ClockConfig+0x16c>)
 8000b32:	6812      	ldr	r2, [r2, #0]
 8000b34:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000b38:	d1de      	bne.n	8000af8 <HAL_RCC_ClockConfig+0x60>
        return HAL_ERROR;
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b3e:	4a31      	ldr	r2, [pc, #196]	; (8000c04 <HAL_RCC_ClockConfig+0x16c>)
 8000b40:	6812      	ldr	r2, [r2, #0]
 8000b42:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000b46:	d1d7      	bne.n	8000af8 <HAL_RCC_ClockConfig+0x60>
        return HAL_ERROR;
 8000b48:	2001      	movs	r0, #1
 8000b4a:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b4c:	4b2d      	ldr	r3, [pc, #180]	; (8000c04 <HAL_RCC_ClockConfig+0x16c>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f003 030c 	and.w	r3, r3, #12
 8000b54:	2b04      	cmp	r3, #4
 8000b56:	d017      	beq.n	8000b88 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b58:	f7ff fbf6 	bl	8000348 <HAL_GetTick>
 8000b5c:	1b80      	subs	r0, r0, r6
 8000b5e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b62:	4298      	cmp	r0, r3
 8000b64:	d9f2      	bls.n	8000b4c <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8000b66:	2003      	movs	r0, #3
 8000b68:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b6a:	4b26      	ldr	r3, [pc, #152]	; (8000c04 <HAL_RCC_ClockConfig+0x16c>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 030c 	and.w	r3, r3, #12
 8000b72:	2b08      	cmp	r3, #8
 8000b74:	d008      	beq.n	8000b88 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b76:	f7ff fbe7 	bl	8000348 <HAL_GetTick>
 8000b7a:	1b80      	subs	r0, r0, r6
 8000b7c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b80:	4298      	cmp	r0, r3
 8000b82:	d9f2      	bls.n	8000b6a <HAL_RCC_ClockConfig+0xd2>
          return HAL_TIMEOUT;
 8000b84:	2003      	movs	r0, #3
 8000b86:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b88:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <HAL_RCC_ClockConfig+0x168>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f003 0307 	and.w	r3, r3, #7
 8000b90:	429d      	cmp	r5, r3
 8000b92:	d20c      	bcs.n	8000bae <HAL_RCC_ClockConfig+0x116>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b94:	4a1a      	ldr	r2, [pc, #104]	; (8000c00 <HAL_RCC_ClockConfig+0x168>)
 8000b96:	6813      	ldr	r3, [r2, #0]
 8000b98:	f023 0307 	bic.w	r3, r3, #7
 8000b9c:	432b      	orrs	r3, r5
 8000b9e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ba0:	6813      	ldr	r3, [r2, #0]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	429d      	cmp	r5, r3
 8000ba8:	d001      	beq.n	8000bae <HAL_RCC_ClockConfig+0x116>
      return HAL_ERROR;
 8000baa:	2001      	movs	r0, #1
}
 8000bac:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bae:	6823      	ldr	r3, [r4, #0]
 8000bb0:	f013 0f04 	tst.w	r3, #4
 8000bb4:	d006      	beq.n	8000bc4 <HAL_RCC_ClockConfig+0x12c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000bb6:	4a13      	ldr	r2, [pc, #76]	; (8000c04 <HAL_RCC_ClockConfig+0x16c>)
 8000bb8:	6853      	ldr	r3, [r2, #4]
 8000bba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bbe:	68e1      	ldr	r1, [r4, #12]
 8000bc0:	430b      	orrs	r3, r1
 8000bc2:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bc4:	6823      	ldr	r3, [r4, #0]
 8000bc6:	f013 0f08 	tst.w	r3, #8
 8000bca:	d007      	beq.n	8000bdc <HAL_RCC_ClockConfig+0x144>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <HAL_RCC_ClockConfig+0x16c>)
 8000bce:	6853      	ldr	r3, [r2, #4]
 8000bd0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000bd4:	6921      	ldr	r1, [r4, #16]
 8000bd6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000bda:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000bdc:	f7ff ff26 	bl	8000a2c <HAL_RCC_GetSysClockFreq>
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <HAL_RCC_ClockConfig+0x16c>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000be8:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <HAL_RCC_ClockConfig+0x170>)
 8000bea:	5cd3      	ldrb	r3, [r2, r3]
 8000bec:	40d8      	lsrs	r0, r3
 8000bee:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <HAL_RCC_ClockConfig+0x174>)
 8000bf0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000bf2:	200f      	movs	r0, #15
 8000bf4:	f7ff fb78 	bl	80002e8 <HAL_InitTick>
  return HAL_OK;
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	bd70      	pop	{r4, r5, r6, pc}
 8000c00:	40022000 	.word	0x40022000
 8000c04:	40021000 	.word	0x40021000
 8000c08:	08000ca8 	.word	0x08000ca8
 8000c0c:	20000000 	.word	0x20000000

08000c10 <main>:
#include "main.h"



int main(void)
{
 8000c10:	b508      	push	{r3, lr}
  hwInit();
 8000c12:	f7ff fb5d 	bl	80002d0 <hwInit>
  apInit();
 8000c16:	f7ff fa99 	bl	800014c <apInit>


  apMain();
 8000c1a:	f7ff fa98 	bl	800014e <apMain>
}
 8000c1e:	2000      	movs	r0, #0
 8000c20:	bd08      	pop	{r3, pc}
	...

08000c24 <__libc_init_array>:
 8000c24:	b570      	push	{r4, r5, r6, lr}
 8000c26:	2500      	movs	r5, #0
 8000c28:	4e0c      	ldr	r6, [pc, #48]	; (8000c5c <__libc_init_array+0x38>)
 8000c2a:	4c0d      	ldr	r4, [pc, #52]	; (8000c60 <__libc_init_array+0x3c>)
 8000c2c:	1ba4      	subs	r4, r4, r6
 8000c2e:	10a4      	asrs	r4, r4, #2
 8000c30:	42a5      	cmp	r5, r4
 8000c32:	d109      	bne.n	8000c48 <__libc_init_array+0x24>
 8000c34:	f000 f822 	bl	8000c7c <_init>
 8000c38:	2500      	movs	r5, #0
 8000c3a:	4e0a      	ldr	r6, [pc, #40]	; (8000c64 <__libc_init_array+0x40>)
 8000c3c:	4c0a      	ldr	r4, [pc, #40]	; (8000c68 <__libc_init_array+0x44>)
 8000c3e:	1ba4      	subs	r4, r4, r6
 8000c40:	10a4      	asrs	r4, r4, #2
 8000c42:	42a5      	cmp	r5, r4
 8000c44:	d105      	bne.n	8000c52 <__libc_init_array+0x2e>
 8000c46:	bd70      	pop	{r4, r5, r6, pc}
 8000c48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c4c:	4798      	blx	r3
 8000c4e:	3501      	adds	r5, #1
 8000c50:	e7ee      	b.n	8000c30 <__libc_init_array+0xc>
 8000c52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c56:	4798      	blx	r3
 8000c58:	3501      	adds	r5, #1
 8000c5a:	e7f2      	b.n	8000c42 <__libc_init_array+0x1e>
 8000c5c:	08000cb8 	.word	0x08000cb8
 8000c60:	08000cb8 	.word	0x08000cb8
 8000c64:	08000cb8 	.word	0x08000cb8
 8000c68:	08000cbc 	.word	0x08000cbc

08000c6c <memset>:
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	4402      	add	r2, r0
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d100      	bne.n	8000c76 <memset+0xa>
 8000c74:	4770      	bx	lr
 8000c76:	f803 1b01 	strb.w	r1, [r3], #1
 8000c7a:	e7f9      	b.n	8000c70 <memset+0x4>

08000c7c <_init>:
 8000c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c7e:	bf00      	nop
 8000c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c82:	bc08      	pop	{r3}
 8000c84:	469e      	mov	lr, r3
 8000c86:	4770      	bx	lr

08000c88 <_fini>:
 8000c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c8a:	bf00      	nop
 8000c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c8e:	bc08      	pop	{r3}
 8000c90:	469e      	mov	lr, r3
 8000c92:	4770      	bx	lr
