
STM32F429DISCO_GLCD_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040b8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ae0  08004264  08004264  00014264  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005d44  08005d44  00015d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005d4c  08005d4c  00015d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005d50  08005d50  00015d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000004c  20000000  08005d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002004c  2**0
                  CONTENTS
  8 .bss          00000500  2000004c  2000004c  0002004c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000054c  2000054c  0002004c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00021e83  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000417a  00000000  00000000  00041eff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00011d92  00000000  00000000  00046079  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014a8  00000000  00000000  00057e10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001cf8  00000000  00000000  000592b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000b458  00000000  00000000  0005afb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000071f4  00000000  00000000  00066408  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0006d5fc  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004080  00000000  00000000  0006d678  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000004c 	.word	0x2000004c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800424c 	.word	0x0800424c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000050 	.word	0x20000050
 80001e8:	0800424c 	.word	0x0800424c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b97a 	b.w	80004f8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	468c      	mov	ip, r1
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	9e08      	ldr	r6, [sp, #32]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d151      	bne.n	80002d0 <__udivmoddi4+0xb4>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d96d      	bls.n	800030e <__udivmoddi4+0xf2>
 8000232:	fab2 fe82 	clz	lr, r2
 8000236:	f1be 0f00 	cmp.w	lr, #0
 800023a:	d00b      	beq.n	8000254 <__udivmoddi4+0x38>
 800023c:	f1ce 0c20 	rsb	ip, lr, #32
 8000240:	fa01 f50e 	lsl.w	r5, r1, lr
 8000244:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000248:	fa02 f70e 	lsl.w	r7, r2, lr
 800024c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000250:	fa00 f40e 	lsl.w	r4, r0, lr
 8000254:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000258:	0c25      	lsrs	r5, r4, #16
 800025a:	fbbc f8fa 	udiv	r8, ip, sl
 800025e:	fa1f f987 	uxth.w	r9, r7
 8000262:	fb0a cc18 	mls	ip, sl, r8, ip
 8000266:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026a:	fb08 f309 	mul.w	r3, r8, r9
 800026e:	42ab      	cmp	r3, r5
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x6c>
 8000272:	19ed      	adds	r5, r5, r7
 8000274:	f108 32ff 	add.w	r2, r8, #4294967295
 8000278:	f080 8123 	bcs.w	80004c2 <__udivmoddi4+0x2a6>
 800027c:	42ab      	cmp	r3, r5
 800027e:	f240 8120 	bls.w	80004c2 <__udivmoddi4+0x2a6>
 8000282:	f1a8 0802 	sub.w	r8, r8, #2
 8000286:	443d      	add	r5, r7
 8000288:	1aed      	subs	r5, r5, r3
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000290:	fb0a 5510 	mls	r5, sl, r0, r5
 8000294:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000298:	fb00 f909 	mul.w	r9, r0, r9
 800029c:	45a1      	cmp	r9, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x98>
 80002a0:	19e4      	adds	r4, r4, r7
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a6:	f080 810a 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80002aa:	45a1      	cmp	r9, r4
 80002ac:	f240 8107 	bls.w	80004be <__udivmoddi4+0x2a2>
 80002b0:	3802      	subs	r0, #2
 80002b2:	443c      	add	r4, r7
 80002b4:	eba4 0409 	sub.w	r4, r4, r9
 80002b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002bc:	2100      	movs	r1, #0
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d061      	beq.n	8000386 <__udivmoddi4+0x16a>
 80002c2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002c6:	2300      	movs	r3, #0
 80002c8:	6034      	str	r4, [r6, #0]
 80002ca:	6073      	str	r3, [r6, #4]
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xc8>
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d054      	beq.n	8000382 <__udivmoddi4+0x166>
 80002d8:	2100      	movs	r1, #0
 80002da:	e886 0021 	stmia.w	r6, {r0, r5}
 80002de:	4608      	mov	r0, r1
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	fab3 f183 	clz	r1, r3
 80002e8:	2900      	cmp	r1, #0
 80002ea:	f040 808e 	bne.w	800040a <__udivmoddi4+0x1ee>
 80002ee:	42ab      	cmp	r3, r5
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xdc>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2d0>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb65 0503 	sbc.w	r5, r5, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	46ac      	mov	ip, r5
 8000302:	2e00      	cmp	r6, #0
 8000304:	d03f      	beq.n	8000386 <__udivmoddi4+0x16a>
 8000306:	e886 1010 	stmia.w	r6, {r4, ip}
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b912      	cbnz	r2, 8000316 <__udivmoddi4+0xfa>
 8000310:	2701      	movs	r7, #1
 8000312:	fbb7 f7f2 	udiv	r7, r7, r2
 8000316:	fab7 fe87 	clz	lr, r7
 800031a:	f1be 0f00 	cmp.w	lr, #0
 800031e:	d134      	bne.n	800038a <__udivmoddi4+0x16e>
 8000320:	1beb      	subs	r3, r5, r7
 8000322:	0c3a      	lsrs	r2, r7, #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb3 f8f2 	udiv	r8, r3, r2
 800032e:	0c25      	lsrs	r5, r4, #16
 8000330:	fb02 3318 	mls	r3, r2, r8, r3
 8000334:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000338:	fb0c f308 	mul.w	r3, ip, r8
 800033c:	42ab      	cmp	r3, r5
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x134>
 8000340:	19ed      	adds	r5, r5, r7
 8000342:	f108 30ff 	add.w	r0, r8, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x132>
 8000348:	42ab      	cmp	r3, r5
 800034a:	f200 80d1 	bhi.w	80004f0 <__udivmoddi4+0x2d4>
 800034e:	4680      	mov	r8, r0
 8000350:	1aed      	subs	r5, r5, r3
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb5 f0f2 	udiv	r0, r5, r2
 8000358:	fb02 5510 	mls	r5, r2, r0, r5
 800035c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000360:	fb0c fc00 	mul.w	ip, ip, r0
 8000364:	45a4      	cmp	ip, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x15c>
 8000368:	19e4      	adds	r4, r4, r7
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x15a>
 8000370:	45a4      	cmp	ip, r4
 8000372:	f200 80b8 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 040c 	sub.w	r4, r4, ip
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	e79d      	b.n	80002be <__udivmoddi4+0xa2>
 8000382:	4631      	mov	r1, r6
 8000384:	4630      	mov	r0, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	f1ce 0420 	rsb	r4, lr, #32
 800038e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000392:	fa07 f70e 	lsl.w	r7, r7, lr
 8000396:	fa20 f804 	lsr.w	r8, r0, r4
 800039a:	0c3a      	lsrs	r2, r7, #16
 800039c:	fa25 f404 	lsr.w	r4, r5, r4
 80003a0:	ea48 0803 	orr.w	r8, r8, r3
 80003a4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ac:	fb02 4411 	mls	r4, r2, r1, r4
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b8:	fb01 f30c 	mul.w	r3, r1, ip
 80003bc:	42ab      	cmp	r3, r5
 80003be:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1bc>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ca:	f080 808a 	bcs.w	80004e2 <__udivmoddi4+0x2c6>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	f240 8087 	bls.w	80004e2 <__udivmoddi4+0x2c6>
 80003d4:	3902      	subs	r1, #2
 80003d6:	443d      	add	r5, r7
 80003d8:	1aeb      	subs	r3, r5, r3
 80003da:	fa1f f588 	uxth.w	r5, r8
 80003de:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e2:	fb02 3310 	mls	r3, r2, r0, r3
 80003e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ea:	fb00 f30c 	mul.w	r3, r0, ip
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1e6>
 80003f2:	19ed      	adds	r5, r5, r7
 80003f4:	f100 38ff 	add.w	r8, r0, #4294967295
 80003f8:	d26f      	bcs.n	80004da <__udivmoddi4+0x2be>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d96d      	bls.n	80004da <__udivmoddi4+0x2be>
 80003fe:	3802      	subs	r0, #2
 8000400:	443d      	add	r5, r7
 8000402:	1aeb      	subs	r3, r5, r3
 8000404:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000408:	e78f      	b.n	800032a <__udivmoddi4+0x10e>
 800040a:	f1c1 0720 	rsb	r7, r1, #32
 800040e:	fa22 f807 	lsr.w	r8, r2, r7
 8000412:	408b      	lsls	r3, r1
 8000414:	fa05 f401 	lsl.w	r4, r5, r1
 8000418:	ea48 0303 	orr.w	r3, r8, r3
 800041c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000420:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000424:	40fd      	lsrs	r5, r7
 8000426:	ea4e 0e04 	orr.w	lr, lr, r4
 800042a:	fbb5 f9fc 	udiv	r9, r5, ip
 800042e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000432:	fb0c 5519 	mls	r5, ip, r9, r5
 8000436:	fa1f f883 	uxth.w	r8, r3
 800043a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800043e:	fb09 f408 	mul.w	r4, r9, r8
 8000442:	42ac      	cmp	r4, r5
 8000444:	fa02 f201 	lsl.w	r2, r2, r1
 8000448:	fa00 fa01 	lsl.w	sl, r0, r1
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x244>
 800044e:	18ed      	adds	r5, r5, r3
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d243      	bcs.n	80004de <__udivmoddi4+0x2c2>
 8000456:	42ac      	cmp	r4, r5
 8000458:	d941      	bls.n	80004de <__udivmoddi4+0x2c2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	441d      	add	r5, r3
 8000460:	1b2d      	subs	r5, r5, r4
 8000462:	fa1f fe8e 	uxth.w	lr, lr
 8000466:	fbb5 f0fc 	udiv	r0, r5, ip
 800046a:	fb0c 5510 	mls	r5, ip, r0, r5
 800046e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45a0      	cmp	r8, r4
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x26e>
 800047a:	18e4      	adds	r4, r4, r3
 800047c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000480:	d229      	bcs.n	80004d6 <__udivmoddi4+0x2ba>
 8000482:	45a0      	cmp	r8, r4
 8000484:	d927      	bls.n	80004d6 <__udivmoddi4+0x2ba>
 8000486:	3802      	subs	r0, #2
 8000488:	441c      	add	r4, r3
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba4 0408 	sub.w	r4, r4, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454c      	cmp	r4, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	464d      	mov	r5, r9
 800049c:	d315      	bcc.n	80004ca <__udivmoddi4+0x2ae>
 800049e:	d012      	beq.n	80004c6 <__udivmoddi4+0x2aa>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x29c>
 80004a2:	ebba 030e 	subs.w	r3, sl, lr
 80004a6:	eb64 0405 	sbc.w	r4, r4, r5
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40cb      	lsrs	r3, r1
 80004b0:	431f      	orrs	r7, r3
 80004b2:	40cc      	lsrs	r4, r1
 80004b4:	6037      	str	r7, [r6, #0]
 80004b6:	6074      	str	r4, [r6, #4]
 80004b8:	2100      	movs	r1, #0
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	4618      	mov	r0, r3
 80004c0:	e6f8      	b.n	80002b4 <__udivmoddi4+0x98>
 80004c2:	4690      	mov	r8, r2
 80004c4:	e6e0      	b.n	8000288 <__udivmoddi4+0x6c>
 80004c6:	45c2      	cmp	sl, r8
 80004c8:	d2ea      	bcs.n	80004a0 <__udivmoddi4+0x284>
 80004ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ce:	eb69 0503 	sbc.w	r5, r9, r3
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7e4      	b.n	80004a0 <__udivmoddi4+0x284>
 80004d6:	4628      	mov	r0, r5
 80004d8:	e7d7      	b.n	800048a <__udivmoddi4+0x26e>
 80004da:	4640      	mov	r0, r8
 80004dc:	e791      	b.n	8000402 <__udivmoddi4+0x1e6>
 80004de:	4681      	mov	r9, r0
 80004e0:	e7be      	b.n	8000460 <__udivmoddi4+0x244>
 80004e2:	4601      	mov	r1, r0
 80004e4:	e778      	b.n	80003d8 <__udivmoddi4+0x1bc>
 80004e6:	3802      	subs	r0, #2
 80004e8:	443c      	add	r4, r7
 80004ea:	e745      	b.n	8000378 <__udivmoddi4+0x15c>
 80004ec:	4608      	mov	r0, r1
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xe6>
 80004f0:	f1a8 0802 	sub.w	r8, r8, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	e72b      	b.n	8000350 <__udivmoddi4+0x134>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <ili9341_GetLcdPixelWidth>:
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
}
 80004fc:	20f0      	movs	r0, #240	; 0xf0
 80004fe:	4770      	bx	lr

08000500 <ili9341_GetLcdPixelHeight>:
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
}
 8000500:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8000504:	4770      	bx	lr

08000506 <ili9341_DisplayOn>:
  LCD_IO_WriteReg(LCD_Reg);
 8000506:	2029      	movs	r0, #41	; 0x29
 8000508:	f000 ba32 	b.w	8000970 <LCD_IO_WriteReg>

0800050c <ili9341_DisplayOff>:
 800050c:	2028      	movs	r0, #40	; 0x28
 800050e:	f000 ba2f 	b.w	8000970 <LCD_IO_WriteReg>

08000512 <ili9341_Init>:
{
 8000512:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8000514:	f000 f9b4 	bl	8000880 <LCD_IO_Init>
  LCD_IO_WriteReg(LCD_Reg);
 8000518:	20ca      	movs	r0, #202	; 0xca
 800051a:	f000 fa29 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800051e:	20c3      	movs	r0, #195	; 0xc3
 8000520:	f000 fa0a 	bl	8000938 <LCD_IO_WriteData>
 8000524:	2008      	movs	r0, #8
 8000526:	f000 fa07 	bl	8000938 <LCD_IO_WriteData>
 800052a:	2050      	movs	r0, #80	; 0x50
 800052c:	f000 fa04 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000530:	20cf      	movs	r0, #207	; 0xcf
 8000532:	f000 fa1d 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000536:	2000      	movs	r0, #0
 8000538:	f000 f9fe 	bl	8000938 <LCD_IO_WriteData>
 800053c:	20c1      	movs	r0, #193	; 0xc1
 800053e:	f000 f9fb 	bl	8000938 <LCD_IO_WriteData>
 8000542:	2030      	movs	r0, #48	; 0x30
 8000544:	f000 f9f8 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000548:	20ed      	movs	r0, #237	; 0xed
 800054a:	f000 fa11 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800054e:	2064      	movs	r0, #100	; 0x64
 8000550:	f000 f9f2 	bl	8000938 <LCD_IO_WriteData>
 8000554:	2003      	movs	r0, #3
 8000556:	f000 f9ef 	bl	8000938 <LCD_IO_WriteData>
 800055a:	2012      	movs	r0, #18
 800055c:	f000 f9ec 	bl	8000938 <LCD_IO_WriteData>
 8000560:	2081      	movs	r0, #129	; 0x81
 8000562:	f000 f9e9 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000566:	20e8      	movs	r0, #232	; 0xe8
 8000568:	f000 fa02 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800056c:	2085      	movs	r0, #133	; 0x85
 800056e:	f000 f9e3 	bl	8000938 <LCD_IO_WriteData>
 8000572:	2000      	movs	r0, #0
 8000574:	f000 f9e0 	bl	8000938 <LCD_IO_WriteData>
 8000578:	2078      	movs	r0, #120	; 0x78
 800057a:	f000 f9dd 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800057e:	20cb      	movs	r0, #203	; 0xcb
 8000580:	f000 f9f6 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000584:	2039      	movs	r0, #57	; 0x39
 8000586:	f000 f9d7 	bl	8000938 <LCD_IO_WriteData>
 800058a:	202c      	movs	r0, #44	; 0x2c
 800058c:	f000 f9d4 	bl	8000938 <LCD_IO_WriteData>
 8000590:	2000      	movs	r0, #0
 8000592:	f000 f9d1 	bl	8000938 <LCD_IO_WriteData>
 8000596:	2034      	movs	r0, #52	; 0x34
 8000598:	f000 f9ce 	bl	8000938 <LCD_IO_WriteData>
 800059c:	2002      	movs	r0, #2
 800059e:	f000 f9cb 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005a2:	20f7      	movs	r0, #247	; 0xf7
 80005a4:	f000 f9e4 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005a8:	2020      	movs	r0, #32
 80005aa:	f000 f9c5 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005ae:	20ea      	movs	r0, #234	; 0xea
 80005b0:	f000 f9de 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005b4:	2000      	movs	r0, #0
 80005b6:	f000 f9bf 	bl	8000938 <LCD_IO_WriteData>
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 f9bc 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005c0:	20b1      	movs	r0, #177	; 0xb1
 80005c2:	f000 f9d5 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005c6:	2000      	movs	r0, #0
 80005c8:	f000 f9b6 	bl	8000938 <LCD_IO_WriteData>
 80005cc:	201b      	movs	r0, #27
 80005ce:	f000 f9b3 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005d2:	20b6      	movs	r0, #182	; 0xb6
 80005d4:	f000 f9cc 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005d8:	200a      	movs	r0, #10
 80005da:	f000 f9ad 	bl	8000938 <LCD_IO_WriteData>
 80005de:	20a2      	movs	r0, #162	; 0xa2
 80005e0:	f000 f9aa 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005e4:	20c0      	movs	r0, #192	; 0xc0
 80005e6:	f000 f9c3 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005ea:	2010      	movs	r0, #16
 80005ec:	f000 f9a4 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005f0:	20c1      	movs	r0, #193	; 0xc1
 80005f2:	f000 f9bd 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005f6:	2010      	movs	r0, #16
 80005f8:	f000 f99e 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005fc:	20c5      	movs	r0, #197	; 0xc5
 80005fe:	f000 f9b7 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000602:	2045      	movs	r0, #69	; 0x45
 8000604:	f000 f998 	bl	8000938 <LCD_IO_WriteData>
 8000608:	2015      	movs	r0, #21
 800060a:	f000 f995 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800060e:	20c7      	movs	r0, #199	; 0xc7
 8000610:	f000 f9ae 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000614:	2090      	movs	r0, #144	; 0x90
 8000616:	f000 f98f 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800061a:	2036      	movs	r0, #54	; 0x36
 800061c:	f000 f9a8 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000620:	20c8      	movs	r0, #200	; 0xc8
 8000622:	f000 f989 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000626:	20f2      	movs	r0, #242	; 0xf2
 8000628:	f000 f9a2 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800062c:	2000      	movs	r0, #0
 800062e:	f000 f983 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000632:	20b0      	movs	r0, #176	; 0xb0
 8000634:	f000 f99c 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000638:	20c2      	movs	r0, #194	; 0xc2
 800063a:	f000 f97d 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800063e:	20b6      	movs	r0, #182	; 0xb6
 8000640:	f000 f996 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000644:	200a      	movs	r0, #10
 8000646:	f000 f977 	bl	8000938 <LCD_IO_WriteData>
 800064a:	20a7      	movs	r0, #167	; 0xa7
 800064c:	f000 f974 	bl	8000938 <LCD_IO_WriteData>
 8000650:	2027      	movs	r0, #39	; 0x27
 8000652:	f000 f971 	bl	8000938 <LCD_IO_WriteData>
 8000656:	2004      	movs	r0, #4
 8000658:	f000 f96e 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800065c:	202a      	movs	r0, #42	; 0x2a
 800065e:	f000 f987 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000662:	2000      	movs	r0, #0
 8000664:	f000 f968 	bl	8000938 <LCD_IO_WriteData>
 8000668:	2000      	movs	r0, #0
 800066a:	f000 f965 	bl	8000938 <LCD_IO_WriteData>
 800066e:	2000      	movs	r0, #0
 8000670:	f000 f962 	bl	8000938 <LCD_IO_WriteData>
 8000674:	20ef      	movs	r0, #239	; 0xef
 8000676:	f000 f95f 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800067a:	202b      	movs	r0, #43	; 0x2b
 800067c:	f000 f978 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000680:	2000      	movs	r0, #0
 8000682:	f000 f959 	bl	8000938 <LCD_IO_WriteData>
 8000686:	2000      	movs	r0, #0
 8000688:	f000 f956 	bl	8000938 <LCD_IO_WriteData>
 800068c:	2001      	movs	r0, #1
 800068e:	f000 f953 	bl	8000938 <LCD_IO_WriteData>
 8000692:	203f      	movs	r0, #63	; 0x3f
 8000694:	f000 f950 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000698:	20f6      	movs	r0, #246	; 0xf6
 800069a:	f000 f969 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800069e:	2001      	movs	r0, #1
 80006a0:	f000 f94a 	bl	8000938 <LCD_IO_WriteData>
 80006a4:	2000      	movs	r0, #0
 80006a6:	f000 f947 	bl	8000938 <LCD_IO_WriteData>
 80006aa:	2006      	movs	r0, #6
 80006ac:	f000 f944 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006b0:	202c      	movs	r0, #44	; 0x2c
 80006b2:	f000 f95d 	bl	8000970 <LCD_IO_WriteReg>
  LCD_Delay(200);
 80006b6:	20c8      	movs	r0, #200	; 0xc8
 80006b8:	f000 f9ac 	bl	8000a14 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 80006bc:	2026      	movs	r0, #38	; 0x26
 80006be:	f000 f957 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006c2:	2001      	movs	r0, #1
 80006c4:	f000 f938 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006c8:	20e0      	movs	r0, #224	; 0xe0
 80006ca:	f000 f951 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006ce:	200f      	movs	r0, #15
 80006d0:	f000 f932 	bl	8000938 <LCD_IO_WriteData>
 80006d4:	2029      	movs	r0, #41	; 0x29
 80006d6:	f000 f92f 	bl	8000938 <LCD_IO_WriteData>
 80006da:	2024      	movs	r0, #36	; 0x24
 80006dc:	f000 f92c 	bl	8000938 <LCD_IO_WriteData>
 80006e0:	200c      	movs	r0, #12
 80006e2:	f000 f929 	bl	8000938 <LCD_IO_WriteData>
 80006e6:	200e      	movs	r0, #14
 80006e8:	f000 f926 	bl	8000938 <LCD_IO_WriteData>
 80006ec:	2009      	movs	r0, #9
 80006ee:	f000 f923 	bl	8000938 <LCD_IO_WriteData>
 80006f2:	204e      	movs	r0, #78	; 0x4e
 80006f4:	f000 f920 	bl	8000938 <LCD_IO_WriteData>
 80006f8:	2078      	movs	r0, #120	; 0x78
 80006fa:	f000 f91d 	bl	8000938 <LCD_IO_WriteData>
 80006fe:	203c      	movs	r0, #60	; 0x3c
 8000700:	f000 f91a 	bl	8000938 <LCD_IO_WriteData>
 8000704:	2009      	movs	r0, #9
 8000706:	f000 f917 	bl	8000938 <LCD_IO_WriteData>
 800070a:	2013      	movs	r0, #19
 800070c:	f000 f914 	bl	8000938 <LCD_IO_WriteData>
 8000710:	2005      	movs	r0, #5
 8000712:	f000 f911 	bl	8000938 <LCD_IO_WriteData>
 8000716:	2017      	movs	r0, #23
 8000718:	f000 f90e 	bl	8000938 <LCD_IO_WriteData>
 800071c:	2011      	movs	r0, #17
 800071e:	f000 f90b 	bl	8000938 <LCD_IO_WriteData>
 8000722:	2000      	movs	r0, #0
 8000724:	f000 f908 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000728:	20e1      	movs	r0, #225	; 0xe1
 800072a:	f000 f921 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800072e:	2000      	movs	r0, #0
 8000730:	f000 f902 	bl	8000938 <LCD_IO_WriteData>
 8000734:	2016      	movs	r0, #22
 8000736:	f000 f8ff 	bl	8000938 <LCD_IO_WriteData>
 800073a:	201b      	movs	r0, #27
 800073c:	f000 f8fc 	bl	8000938 <LCD_IO_WriteData>
 8000740:	2004      	movs	r0, #4
 8000742:	f000 f8f9 	bl	8000938 <LCD_IO_WriteData>
 8000746:	2011      	movs	r0, #17
 8000748:	f000 f8f6 	bl	8000938 <LCD_IO_WriteData>
 800074c:	2007      	movs	r0, #7
 800074e:	f000 f8f3 	bl	8000938 <LCD_IO_WriteData>
 8000752:	2031      	movs	r0, #49	; 0x31
 8000754:	f000 f8f0 	bl	8000938 <LCD_IO_WriteData>
 8000758:	2033      	movs	r0, #51	; 0x33
 800075a:	f000 f8ed 	bl	8000938 <LCD_IO_WriteData>
 800075e:	2042      	movs	r0, #66	; 0x42
 8000760:	f000 f8ea 	bl	8000938 <LCD_IO_WriteData>
 8000764:	2005      	movs	r0, #5
 8000766:	f000 f8e7 	bl	8000938 <LCD_IO_WriteData>
 800076a:	200c      	movs	r0, #12
 800076c:	f000 f8e4 	bl	8000938 <LCD_IO_WriteData>
 8000770:	200a      	movs	r0, #10
 8000772:	f000 f8e1 	bl	8000938 <LCD_IO_WriteData>
 8000776:	2028      	movs	r0, #40	; 0x28
 8000778:	f000 f8de 	bl	8000938 <LCD_IO_WriteData>
 800077c:	202f      	movs	r0, #47	; 0x2f
 800077e:	f000 f8db 	bl	8000938 <LCD_IO_WriteData>
 8000782:	200f      	movs	r0, #15
 8000784:	f000 f8d8 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000788:	2011      	movs	r0, #17
 800078a:	f000 f8f1 	bl	8000970 <LCD_IO_WriteReg>
  LCD_Delay(200);
 800078e:	20c8      	movs	r0, #200	; 0xc8
 8000790:	f000 f940 	bl	8000a14 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 8000794:	2029      	movs	r0, #41	; 0x29
 8000796:	f000 f8eb 	bl	8000970 <LCD_IO_WriteReg>
 800079a:	202c      	movs	r0, #44	; 0x2c
}
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 80007a0:	f000 b8e6 	b.w	8000970 <LCD_IO_WriteReg>

080007a4 <ili9341_ReadID>:
{
 80007a4:	b508      	push	{r3, lr}
  LCD_IO_Init();
 80007a6:	f000 f86b 	bl	8000880 <LCD_IO_Init>
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80007aa:	2103      	movs	r1, #3
 80007ac:	20d3      	movs	r0, #211	; 0xd3
 80007ae:	f000 f8fb 	bl	80009a8 <LCD_IO_ReadData>
}
 80007b2:	b280      	uxth	r0, r0
 80007b4:	bd08      	pop	{r3, pc}
	...

080007b8 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80007b8:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80007ba:	4c21      	ldr	r4, [pc, #132]	; (8000840 <SPIx_Init+0x88>)
{
 80007bc:	b088      	sub	sp, #32
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80007be:	4620      	mov	r0, r4
 80007c0:	f002 fb9e 	bl	8002f00 <HAL_SPI_GetState>
 80007c4:	2800      	cmp	r0, #0
 80007c6:	d138      	bne.n	800083a <SPIx_Init+0x82>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80007c8:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <SPIx_Init+0x8c>)
 80007ca:	6023      	str	r3, [r4, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80007cc:	2318      	movs	r3, #24
 80007ce:	61e3      	str	r3, [r4, #28]
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial  = 7;
 80007d0:	2307      	movs	r3, #7
 80007d2:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80007d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007d8:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80007da:	f44f 7382 	mov.w	r3, #260	; 0x104
 80007de:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80007e0:	4b19      	ldr	r3, [pc, #100]	; (8000848 <SPIx_Init+0x90>)
 80007e2:	9001      	str	r0, [sp, #4]
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80007e4:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80007e6:	6160      	str	r0, [r4, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80007e8:	6120      	str	r0, [r4, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80007ea:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80007ec:	60e0      	str	r0, [r4, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80007ee:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80007f0:	6260      	str	r0, [r4, #36]	; 0x24
  DISCOVERY_SPIx_CLK_ENABLE();
 80007f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007f4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80007f8:	645a      	str	r2, [r3, #68]	; 0x44
 80007fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007fc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8000800:	9201      	str	r2, [sp, #4]
 8000802:	9a01      	ldr	r2, [sp, #4]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8000804:	9002      	str	r0, [sp, #8]
 8000806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8000808:	4810      	ldr	r0, [pc, #64]	; (800084c <SPIx_Init+0x94>)
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800080a:	f042 0220 	orr.w	r2, r2, #32
 800080e:	631a      	str	r2, [r3, #48]	; 0x30
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0320 	and.w	r3, r3, #32
 8000816:	9302      	str	r3, [sp, #8]
 8000818:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800081a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800081e:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8000820:	2302      	movs	r3, #2
 8000822:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8000824:	9305      	str	r3, [sp, #20]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8000826:	2301      	movs	r3, #1
 8000828:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800082a:	a903      	add	r1, sp, #12
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800082c:	2305      	movs	r3, #5
 800082e:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8000830:	f001 f82a 	bl	8001888 <HAL_GPIO_Init>
    HAL_SPI_Init(&SpiHandle);
 8000834:	4620      	mov	r0, r4
 8000836:	f002 f8e1 	bl	80029fc <HAL_SPI_Init>
}
 800083a:	b008      	add	sp, #32
 800083c:	bd10      	pop	{r4, pc}
 800083e:	bf00      	nop
 8000840:	2000006c 	.word	0x2000006c
 8000844:	40015000 	.word	0x40015000
 8000848:	40023800 	.word	0x40023800
 800084c:	40021400 	.word	0x40021400

08000850 <SPIx_Write>:
{
 8000850:	b507      	push	{r0, r1, r2, lr}
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <SPIx_Write+0x28>)
{
 8000854:	a902      	add	r1, sp, #8
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8000856:	681b      	ldr	r3, [r3, #0]
{
 8000858:	f821 0d02 	strh.w	r0, [r1, #-2]!
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800085c:	2201      	movs	r2, #1
 800085e:	4807      	ldr	r0, [pc, #28]	; (800087c <SPIx_Write+0x2c>)
 8000860:	f002 f91f 	bl	8002aa2 <HAL_SPI_Transmit>
  if(status != HAL_OK)
 8000864:	b120      	cbz	r0, 8000870 <SPIx_Write+0x20>
  HAL_SPI_DeInit(&SpiHandle);
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <SPIx_Write+0x2c>)
 8000868:	f002 f905 	bl	8002a76 <HAL_SPI_DeInit>
  SPIx_Init();
 800086c:	f7ff ffa4 	bl	80007b8 <SPIx_Init>
}
 8000870:	b003      	add	sp, #12
 8000872:	f85d fb04 	ldr.w	pc, [sp], #4
 8000876:	bf00      	nop
 8000878:	20000038 	.word	0x20000038
 800087c:	2000006c 	.word	0x2000006c

08000880 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8000880:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8000882:	4b29      	ldr	r3, [pc, #164]	; (8000928 <LCD_IO_Init+0xa8>)
 8000884:	781d      	ldrb	r5, [r3, #0]
{
 8000886:	b089      	sub	sp, #36	; 0x24
  if(Is_LCD_IO_Initialized == 0)
 8000888:	2d00      	cmp	r5, #0
 800088a:	d14a      	bne.n	8000922 <LCD_IO_Init+0xa2>
  {
    Is_LCD_IO_Initialized = 1; 
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800088c:	4c27      	ldr	r4, [pc, #156]	; (800092c <LCD_IO_Init+0xac>)
 800088e:	9500      	str	r5, [sp, #0]
    Is_LCD_IO_Initialized = 1; 
 8000890:	2601      	movs	r6, #1
 8000892:	701e      	strb	r6, [r3, #0]
    LCD_WRX_GPIO_CLK_ENABLE();
 8000894:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000896:	4826      	ldr	r0, [pc, #152]	; (8000930 <LCD_IO_Init+0xb0>)
    LCD_WRX_GPIO_CLK_ENABLE();
 8000898:	f043 0308 	orr.w	r3, r3, #8
 800089c:	6323      	str	r3, [r4, #48]	; 0x30
 800089e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80008a0:	9604      	str	r6, [sp, #16]
    LCD_WRX_GPIO_CLK_ENABLE();
 80008a2:	f003 0308 	and.w	r3, r3, #8
 80008a6:	9300      	str	r3, [sp, #0]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80008a8:	2702      	movs	r7, #2
    LCD_WRX_GPIO_CLK_ENABLE();
 80008aa:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80008ac:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80008ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80008b2:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80008b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80008b6:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80008b8:	f000 ffe6 	bl	8001888 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80008bc:	9501      	str	r5, [sp, #4]
 80008be:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80008c0:	481b      	ldr	r0, [pc, #108]	; (8000930 <LCD_IO_Init+0xb0>)
    LCD_RDX_GPIO_CLK_ENABLE();
 80008c2:	f043 0308 	orr.w	r3, r3, #8
 80008c6:	6323      	str	r3, [r4, #48]	; 0x30
 80008c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80008ca:	9604      	str	r6, [sp, #16]
    LCD_RDX_GPIO_CLK_ENABLE();
 80008cc:	f003 0308 	and.w	r3, r3, #8
 80008d0:	9301      	str	r3, [sp, #4]
 80008d2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80008d4:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80008d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80008da:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80008dc:	9303      	str	r3, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80008de:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80008e0:	f000 ffd2 	bl	8001888 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80008e4:	9502      	str	r5, [sp, #8]
 80008e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80008e8:	4812      	ldr	r0, [pc, #72]	; (8000934 <LCD_IO_Init+0xb4>)
    LCD_NCS_GPIO_CLK_ENABLE();
 80008ea:	f043 0304 	orr.w	r3, r3, #4
 80008ee:	6323      	str	r3, [r4, #48]	; 0x30
 80008f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80008f2:	9604      	str	r6, [sp, #16]
    LCD_NCS_GPIO_CLK_ENABLE();
 80008f4:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80008f8:	2404      	movs	r4, #4
    LCD_NCS_GPIO_CLK_ENABLE();
 80008fa:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80008fc:	a903      	add	r1, sp, #12
    LCD_NCS_GPIO_CLK_ENABLE();
 80008fe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8000900:	9403      	str	r4, [sp, #12]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000902:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000904:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000906:	f000 ffbf 	bl	8001888 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 800090a:	462a      	mov	r2, r5
 800090c:	4621      	mov	r1, r4
 800090e:	4809      	ldr	r0, [pc, #36]	; (8000934 <LCD_IO_Init+0xb4>)
 8000910:	f001 f940 	bl	8001b94 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8000914:	4632      	mov	r2, r6
 8000916:	4621      	mov	r1, r4
 8000918:	4806      	ldr	r0, [pc, #24]	; (8000934 <LCD_IO_Init+0xb4>)
 800091a:	f001 f93b 	bl	8001b94 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 800091e:	f7ff ff4b 	bl	80007b8 <SPIx_Init>
  }
}
 8000922:	b009      	add	sp, #36	; 0x24
 8000924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000926:	bf00      	nop
 8000928:	20000068 	.word	0x20000068
 800092c:	40023800 	.word	0x40023800
 8000930:	40020c00 	.word	0x40020c00
 8000934:	40020800 	.word	0x40020800

08000938 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8000938:	b538      	push	{r3, r4, r5, lr}
  /* Set WRX to send data */
  LCD_WRX_HIGH();
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800093a:	4c0b      	ldr	r4, [pc, #44]	; (8000968 <LCD_IO_WriteData+0x30>)
{
 800093c:	4605      	mov	r5, r0
  LCD_WRX_HIGH();
 800093e:	2201      	movs	r2, #1
 8000940:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000944:	4809      	ldr	r0, [pc, #36]	; (800096c <LCD_IO_WriteData+0x34>)
 8000946:	f001 f925 	bl	8001b94 <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 800094a:	2200      	movs	r2, #0
 800094c:	2104      	movs	r1, #4
 800094e:	4620      	mov	r0, r4
 8000950:	f001 f920 	bl	8001b94 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8000954:	4628      	mov	r0, r5
 8000956:	f7ff ff7b 	bl	8000850 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800095a:	4620      	mov	r0, r4
 800095c:	2201      	movs	r2, #1
 800095e:	2104      	movs	r1, #4
}
 8000960:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 8000964:	f001 b916 	b.w	8001b94 <HAL_GPIO_WritePin>
 8000968:	40020800 	.word	0x40020800
 800096c:	40020c00 	.word	0x40020c00

08000970 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8000970:	b538      	push	{r3, r4, r5, lr}
  /* Reset WRX to send command */
  LCD_WRX_LOW();
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8000972:	4c0b      	ldr	r4, [pc, #44]	; (80009a0 <LCD_IO_WriteReg+0x30>)
{
 8000974:	4605      	mov	r5, r0
  LCD_WRX_LOW();
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800097c:	4809      	ldr	r0, [pc, #36]	; (80009a4 <LCD_IO_WriteReg+0x34>)
 800097e:	f001 f909 	bl	8001b94 <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 8000982:	2200      	movs	r2, #0
 8000984:	2104      	movs	r1, #4
 8000986:	4620      	mov	r0, r4
 8000988:	f001 f904 	bl	8001b94 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 800098c:	4628      	mov	r0, r5
 800098e:	f7ff ff5f 	bl	8000850 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000992:	4620      	mov	r0, r4
 8000994:	2201      	movs	r2, #1
 8000996:	2104      	movs	r1, #4
}
 8000998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 800099c:	f001 b8fa 	b.w	8001b94 <HAL_GPIO_WritePin>
 80009a0:	40020800 	.word	0x40020800
 80009a4:	40020c00 	.word	0x40020c00

080009a8 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80009a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80009aa:	4605      	mov	r5, r0
 80009ac:	460c      	mov	r4, r1
  uint32_t readvalue = 0;

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80009ae:	2200      	movs	r2, #0
 80009b0:	2104      	movs	r1, #4
 80009b2:	4814      	ldr	r0, [pc, #80]	; (8000a04 <LCD_IO_ReadData+0x5c>)
 80009b4:	f001 f8ee 	bl	8001b94 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80009b8:	2200      	movs	r2, #0
 80009ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009be:	4812      	ldr	r0, [pc, #72]	; (8000a08 <LCD_IO_ReadData+0x60>)
 80009c0:	f001 f8e8 	bl	8001b94 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80009c4:	4628      	mov	r0, r5
 80009c6:	f7ff ff43 	bl	8000850 <SPIx_Write>
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <LCD_IO_ReadData+0x64>)
 80009cc:	4810      	ldr	r0, [pc, #64]	; (8000a10 <LCD_IO_ReadData+0x68>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4622      	mov	r2, r4
 80009d2:	a901      	add	r1, sp, #4
 80009d4:	f002 f9fd 	bl	8002dd2 <HAL_SPI_Receive>
  if(status != HAL_OK)
 80009d8:	b120      	cbz	r0, 80009e4 <LCD_IO_ReadData+0x3c>
  HAL_SPI_DeInit(&SpiHandle);
 80009da:	480d      	ldr	r0, [pc, #52]	; (8000a10 <LCD_IO_ReadData+0x68>)
 80009dc:	f002 f84b 	bl	8002a76 <HAL_SPI_DeInit>
  SPIx_Init();
 80009e0:	f7ff feea 	bl	80007b8 <SPIx_Init>
  
  readvalue = SPIx_Read(ReadSize);

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80009e4:	2201      	movs	r2, #1
 80009e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ea:	4807      	ldr	r0, [pc, #28]	; (8000a08 <LCD_IO_ReadData+0x60>)
  return readvalue;
 80009ec:	9c01      	ldr	r4, [sp, #4]
  LCD_WRX_HIGH();
 80009ee:	f001 f8d1 	bl	8001b94 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80009f2:	2201      	movs	r2, #1
 80009f4:	2104      	movs	r1, #4
 80009f6:	4803      	ldr	r0, [pc, #12]	; (8000a04 <LCD_IO_ReadData+0x5c>)
 80009f8:	f001 f8cc 	bl	8001b94 <HAL_GPIO_WritePin>
  
  return readvalue;
}
 80009fc:	4620      	mov	r0, r4
 80009fe:	b003      	add	sp, #12
 8000a00:	bd30      	pop	{r4, r5, pc}
 8000a02:	bf00      	nop
 8000a04:	40020800 	.word	0x40020800
 8000a08:	40020c00 	.word	0x40020c00
 8000a0c:	20000038 	.word	0x20000038
 8000a10:	2000006c 	.word	0x2000006c

08000a14 <LCD_Delay>:
 8000a14:	f000 bc32 	b.w	800127c <HAL_Delay>

08000a18 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8000a18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8000a1c:	4c15      	ldr	r4, [pc, #84]	; (8000a74 <FillBuffer+0x5c>)
{
 8000a1e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000a20:	4698      	mov	r8, r3
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8000a22:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000a26:	6063      	str	r3, [r4, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60a3      	str	r3, [r4, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8000a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000a2e:	60e3      	str	r3, [r4, #12]
{
 8000a30:	4681      	mov	r9, r0
  
  Dma2dHandler.Instance = DMA2D; 
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <FillBuffer+0x60>)
 8000a34:	6023      	str	r3, [r4, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8000a36:	4620      	mov	r0, r4
{
 8000a38:	460e      	mov	r6, r1
 8000a3a:	4617      	mov	r7, r2
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8000a3c:	f000 fd86 	bl	800154c <HAL_DMA2D_Init>
 8000a40:	b9a0      	cbnz	r0, 8000a6c <FillBuffer+0x54>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8000a42:	4649      	mov	r1, r9
 8000a44:	4620      	mov	r0, r4
 8000a46:	f000 fed5 	bl	80017f4 <HAL_DMA2D_ConfigLayer>
 8000a4a:	b978      	cbnz	r0, 8000a6c <FillBuffer+0x54>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8000a4c:	f8cd 8000 	str.w	r8, [sp]
 8000a50:	463b      	mov	r3, r7
 8000a52:	4632      	mov	r2, r6
 8000a54:	4629      	mov	r1, r5
 8000a56:	4620      	mov	r0, r4
 8000a58:	f000 fda4 	bl	80015a4 <HAL_DMA2D_Start>
 8000a5c:	b930      	cbnz	r0, 8000a6c <FillBuffer+0x54>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8000a5e:	210a      	movs	r1, #10
 8000a60:	4620      	mov	r0, r4
      }
    }
  } 
}
 8000a62:	b003      	add	sp, #12
 8000a64:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8000a68:	f000 bdb6 	b.w	80015d8 <HAL_DMA2D_PollForTransfer>
}
 8000a6c:	b003      	add	sp, #12
 8000a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a72:	bf00      	nop
 8000a74:	200000c8 	.word	0x200000c8
 8000a78:	4002b000 	.word	0x4002b000

08000a7c <BSP_LCD_GetXSize>:
{
 8000a7c:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelWidth();
 8000a7e:	4b02      	ldr	r3, [pc, #8]	; (8000a88 <BSP_LCD_GetXSize+0xc>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a84:	4798      	blx	r3
}
 8000a86:	bd08      	pop	{r3, pc}
 8000a88:	200002bc 	.word	0x200002bc

08000a8c <BSP_LCD_GetYSize>:
{
 8000a8c:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelHeight();
 8000a8e:	4b02      	ldr	r3, [pc, #8]	; (8000a98 <BSP_LCD_GetYSize+0xc>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a94:	4798      	blx	r3
}
 8000a96:	bd08      	pop	{r3, pc}
 8000a98:	200002bc 	.word	0x200002bc

08000a9c <BSP_LCD_LayerDefaultInit>:
{     
 8000a9c:	b570      	push	{r4, r5, r6, lr}
 8000a9e:	b08e      	sub	sp, #56	; 0x38
  Layercfg.WindowX0 = 0;
 8000aa0:	2400      	movs	r4, #0
{     
 8000aa2:	460e      	mov	r6, r1
 8000aa4:	4605      	mov	r5, r0
  Layercfg.WindowX0 = 0;
 8000aa6:	9401      	str	r4, [sp, #4]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8000aa8:	f7ff ffe8 	bl	8000a7c <BSP_LCD_GetXSize>
  Layercfg.WindowY0 = 0;
 8000aac:	9403      	str	r4, [sp, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8000aae:	9002      	str	r0, [sp, #8]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000ab0:	f7ff ffec 	bl	8000a8c <BSP_LCD_GetYSize>
  Layercfg.Alpha = 255;
 8000ab4:	23ff      	movs	r3, #255	; 0xff
 8000ab6:	9306      	str	r3, [sp, #24]
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000ab8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000abc:	9308      	str	r3, [sp, #32]
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000abe:	2307      	movs	r3, #7
 8000ac0:	9309      	str	r3, [sp, #36]	; 0x24
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000ac2:	9405      	str	r4, [sp, #20]
  Layercfg.Alpha0 = 0;
 8000ac4:	9407      	str	r4, [sp, #28]
  Layercfg.Backcolor.Blue = 0;
 8000ac6:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
  Layercfg.Backcolor.Green = 0;
 8000aca:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
  Layercfg.Backcolor.Red = 0;
 8000ace:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000ad2:	9004      	str	r0, [sp, #16]
  Layercfg.FBStartAdress = FB_Address;
 8000ad4:	960a      	str	r6, [sp, #40]	; 0x28
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8000ad6:	f7ff ffd1 	bl	8000a7c <BSP_LCD_GetXSize>
 8000ada:	900b      	str	r0, [sp, #44]	; 0x2c
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8000adc:	f7ff ffd6 	bl	8000a8c <BSP_LCD_GetYSize>
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8000ae0:	4c0b      	ldr	r4, [pc, #44]	; (8000b10 <BSP_LCD_LayerDefaultInit+0x74>)
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8000ae2:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8000ae4:	462a      	mov	r2, r5
 8000ae6:	a901      	add	r1, sp, #4
 8000ae8:	4620      	mov	r0, r4
 8000aea:	f001 fa8d 	bl	8002008 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <BSP_LCD_LayerDefaultInit+0x78>)
 8000af0:	200c      	movs	r0, #12
 8000af2:	4368      	muls	r0, r5
 8000af4:	181a      	adds	r2, r3, r0
 8000af6:	f04f 31ff 	mov.w	r1, #4294967295
 8000afa:	6051      	str	r1, [r2, #4]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000afc:	4906      	ldr	r1, [pc, #24]	; (8000b18 <BSP_LCD_LayerDefaultInit+0x7c>)
 8000afe:	6091      	str	r1, [r2, #8]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8000b00:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000b04:	501a      	str	r2, [r3, r0]
  HAL_LTDC_EnableDither(&LtdcHandler);
 8000b06:	4620      	mov	r0, r4
 8000b08:	f001 faa8 	bl	800205c <HAL_LTDC_EnableDither>
}
 8000b0c:	b00e      	add	sp, #56	; 0x38
 8000b0e:	bd70      	pop	{r4, r5, r6, pc}
 8000b10:	20000214 	.word	0x20000214
 8000b14:	20000108 	.word	0x20000108
 8000b18:	2000003c 	.word	0x2000003c

08000b1c <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8000b1c:	4b01      	ldr	r3, [pc, #4]	; (8000b24 <BSP_LCD_SelectLayer+0x8>)
 8000b1e:	6018      	str	r0, [r3, #0]
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	200000c4 	.word	0x200000c4

08000b28 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <BSP_LCD_SetTextColor+0x10>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	230c      	movs	r3, #12
 8000b2e:	4353      	muls	r3, r2
 8000b30:	4a02      	ldr	r2, [pc, #8]	; (8000b3c <BSP_LCD_SetTextColor+0x14>)
 8000b32:	50d0      	str	r0, [r2, r3]
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	200000c4 	.word	0x200000c4
 8000b3c:	20000108 	.word	0x20000108

08000b40 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <BSP_LCD_SetBackColor+0x10>)
 8000b42:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <BSP_LCD_SetBackColor+0x14>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	210c      	movs	r1, #12
 8000b48:	fb01 2303 	mla	r3, r1, r3, r2
 8000b4c:	6058      	str	r0, [r3, #4]
 8000b4e:	4770      	bx	lr
 8000b50:	200000c4 	.word	0x200000c4
 8000b54:	20000108 	.word	0x20000108

08000b58 <BSP_LCD_Clear>:
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <BSP_LCD_Clear+0x34>)
{ 
 8000b5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000b5c:	681c      	ldr	r4, [r3, #0]
 8000b5e:	4a0c      	ldr	r2, [pc, #48]	; (8000b90 <BSP_LCD_Clear+0x38>)
 8000b60:	2334      	movs	r3, #52	; 0x34
 8000b62:	fb03 2304 	mla	r3, r3, r4, r2
{ 
 8000b66:	4607      	mov	r7, r0
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000b68:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8000b6a:	f7ff ff87 	bl	8000a7c <BSP_LCD_GetXSize>
 8000b6e:	4606      	mov	r6, r0
 8000b70:	f7ff ff8c 	bl	8000a8c <BSP_LCD_GetYSize>
 8000b74:	2300      	movs	r3, #0
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	9701      	str	r7, [sp, #4]
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	4632      	mov	r2, r6
 8000b7e:	4629      	mov	r1, r5
 8000b80:	4620      	mov	r0, r4
 8000b82:	f7ff ff49 	bl	8000a18 <FillBuffer>
}
 8000b86:	b003      	add	sp, #12
 8000b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200000c4 	.word	0x200000c4
 8000b90:	20000214 	.word	0x20000214

08000b94 <BSP_LCD_DisplayOn>:
  if(LcdDrv->DisplayOn != NULL)
 8000b94:	4b02      	ldr	r3, [pc, #8]	; (8000ba0 <BSP_LCD_DisplayOn+0xc>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	b103      	cbz	r3, 8000b9e <BSP_LCD_DisplayOn+0xa>
    LcdDrv->DisplayOn();
 8000b9c:	4718      	bx	r3
 8000b9e:	4770      	bx	lr
 8000ba0:	200002bc 	.word	0x200002bc

08000ba4 <BSP_LCD_MspInit>:
{
 8000ba4:	b530      	push	{r4, r5, lr}
 8000ba6:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000ba8:	4b49      	ldr	r3, [pc, #292]	; (8000cd0 <BSP_LCD_MspInit+0x12c>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000baa:	4d4a      	ldr	r5, [pc, #296]	; (8000cd4 <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000bac:	484a      	ldr	r0, [pc, #296]	; (8000cd8 <BSP_LCD_MspInit+0x134>)
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000bae:	4c4b      	ldr	r4, [pc, #300]	; (8000cdc <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	9201      	str	r2, [sp, #4]
 8000bb4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000bb6:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8000bba:	6459      	str	r1, [r3, #68]	; 0x44
 8000bbc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000bbe:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
 8000bc2:	9101      	str	r1, [sp, #4]
 8000bc4:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8000bc6:	9202      	str	r2, [sp, #8]
 8000bc8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000bca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bce:	6319      	str	r1, [r3, #48]	; 0x30
 8000bd0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000bd2:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8000bd6:	9102      	str	r1, [sp, #8]
 8000bd8:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	9203      	str	r2, [sp, #12]
 8000bdc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000bde:	f041 0101 	orr.w	r1, r1, #1
 8000be2:	6319      	str	r1, [r3, #48]	; 0x30
 8000be4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000be6:	f001 0101 	and.w	r1, r1, #1
 8000bea:	9103      	str	r1, [sp, #12]
 8000bec:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bee:	9204      	str	r2, [sp, #16]
 8000bf0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000bf2:	f041 0102 	orr.w	r1, r1, #2
 8000bf6:	6319      	str	r1, [r3, #48]	; 0x30
 8000bf8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000bfa:	f001 0102 	and.w	r1, r1, #2
 8000bfe:	9104      	str	r1, [sp, #16]
 8000c00:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c02:	9205      	str	r2, [sp, #20]
 8000c04:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c06:	f041 0104 	orr.w	r1, r1, #4
 8000c0a:	6319      	str	r1, [r3, #48]	; 0x30
 8000c0c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c0e:	f001 0104 	and.w	r1, r1, #4
 8000c12:	9105      	str	r1, [sp, #20]
 8000c14:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c16:	9206      	str	r2, [sp, #24]
 8000c18:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c1a:	f041 0108 	orr.w	r1, r1, #8
 8000c1e:	6319      	str	r1, [r3, #48]	; 0x30
 8000c20:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c22:	f001 0108 	and.w	r1, r1, #8
 8000c26:	9106      	str	r1, [sp, #24]
 8000c28:	9906      	ldr	r1, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c2a:	9207      	str	r2, [sp, #28]
 8000c2c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c2e:	f041 0120 	orr.w	r1, r1, #32
 8000c32:	6319      	str	r1, [r3, #48]	; 0x30
 8000c34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c36:	f001 0120 	and.w	r1, r1, #32
 8000c3a:	9107      	str	r1, [sp, #28]
 8000c3c:	9907      	ldr	r1, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c3e:	9208      	str	r2, [sp, #32]
 8000c40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c42:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8000c46:	6319      	str	r1, [r3, #48]	; 0x30
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000c4a:	920b      	str	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c50:	9308      	str	r3, [sp, #32]
 8000c52:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000c54:	f641 0358 	movw	r3, #6232	; 0x1858
 8000c58:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000c5e:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000c60:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000c62:	230e      	movs	r3, #14
 8000c64:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000c66:	f000 fe0f 	bl	8001888 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000c6a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000c6e:	a909      	add	r1, sp, #36	; 0x24
 8000c70:	4628      	mov	r0, r5
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000c72:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000c74:	f000 fe08 	bl	8001888 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000c78:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000c7c:	a909      	add	r1, sp, #36	; 0x24
 8000c7e:	4818      	ldr	r0, [pc, #96]	; (8000ce0 <BSP_LCD_MspInit+0x13c>)
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000c80:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000c82:	f000 fe01 	bl	8001888 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000c86:	2348      	movs	r3, #72	; 0x48
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000c88:	a909      	add	r1, sp, #36	; 0x24
 8000c8a:	4816      	ldr	r0, [pc, #88]	; (8000ce4 <BSP_LCD_MspInit+0x140>)
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000c8c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000c8e:	f000 fdfb 	bl	8001888 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000c92:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8000c96:	a909      	add	r1, sp, #36	; 0x24
 8000c98:	4813      	ldr	r0, [pc, #76]	; (8000ce8 <BSP_LCD_MspInit+0x144>)
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000c9a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8000c9c:	f000 fdf4 	bl	8001888 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000ca0:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000ca4:	a909      	add	r1, sp, #36	; 0x24
 8000ca6:	4620      	mov	r0, r4
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000ca8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000caa:	f000 fded 	bl	8001888 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000cb2:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000cb4:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000cb6:	4628      	mov	r0, r5
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000cb8:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000cba:	f000 fde5 	bl	8001888 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000cbe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000cc2:	a909      	add	r1, sp, #36	; 0x24
 8000cc4:	4620      	mov	r0, r4
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000cc6:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000cc8:	f000 fdde 	bl	8001888 <HAL_GPIO_Init>
}
 8000ccc:	b00f      	add	sp, #60	; 0x3c
 8000cce:	bd30      	pop	{r4, r5, pc}
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020400 	.word	0x40020400
 8000cd8:	40020000 	.word	0x40020000
 8000cdc:	40021800 	.word	0x40021800
 8000ce0:	40020800 	.word	0x40020800
 8000ce4:	40020c00 	.word	0x40020c00
 8000ce8:	40021400 	.word	0x40021400

08000cec <BSP_LCD_Init>:
{ 
 8000cec:	b538      	push	{r3, r4, r5, lr}
    LtdcHandler.Instance = LTDC;
 8000cee:	4c22      	ldr	r4, [pc, #136]	; (8000d78 <BSP_LCD_Init+0x8c>)
 8000cf0:	4b22      	ldr	r3, [pc, #136]	; (8000d7c <BSP_LCD_Init+0x90>)
 8000cf2:	6023      	str	r3, [r4, #0]
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8000cf4:	2309      	movs	r3, #9
 8000cf6:	6163      	str	r3, [r4, #20]
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	61a3      	str	r3, [r4, #24]
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8000cfc:	231d      	movs	r3, #29
 8000cfe:	61e3      	str	r3, [r4, #28]
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8000d00:	2303      	movs	r3, #3
 8000d02:	6223      	str	r3, [r4, #32]
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8000d04:	f240 130d 	movw	r3, #269	; 0x10d
 8000d08:	6263      	str	r3, [r4, #36]	; 0x24
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8000d0a:	f240 1343 	movw	r3, #323	; 0x143
 8000d0e:	62a3      	str	r3, [r4, #40]	; 0x28
    LtdcHandler.Init.TotalWidth = 279;
 8000d10:	f240 1317 	movw	r3, #279	; 0x117
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d14:	481a      	ldr	r0, [pc, #104]	; (8000d80 <BSP_LCD_Init+0x94>)
    LtdcHandler.Init.TotalWidth = 279;
 8000d16:	62e3      	str	r3, [r4, #44]	; 0x2c
    LtdcHandler.Init.TotalHeigh = 327;
 8000d18:	f240 1347 	movw	r3, #327	; 0x147
 8000d1c:	6323      	str	r3, [r4, #48]	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d1e:	2308      	movs	r3, #8
 8000d20:	6003      	str	r3, [r0, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000d22:	23c0      	movs	r3, #192	; 0xc0
 8000d24:	6103      	str	r3, [r0, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000d26:	2304      	movs	r3, #4
    LtdcHandler.Init.Backcolor.Red= 0;
 8000d28:	2500      	movs	r5, #0
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000d2a:	6183      	str	r3, [r0, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000d2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d30:	6243      	str	r3, [r0, #36]	; 0x24
    LtdcHandler.Init.Backcolor.Red= 0;
 8000d32:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8000d36:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8000d3a:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8000d3e:	f001 fc69 	bl	8002614 <HAL_RCCEx_PeriphCLKConfig>
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000d42:	6065      	str	r5, [r4, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000d44:	60a5      	str	r5, [r4, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000d46:	60e5      	str	r5, [r4, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000d48:	6125      	str	r5, [r4, #16]
    BSP_LCD_MspInit();
 8000d4a:	f7ff ff2b 	bl	8000ba4 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8000d4e:	4620      	mov	r0, r4
 8000d50:	f001 f88e 	bl	8001e70 <HAL_LTDC_Init>
    LcdDrv = &ili9341_drv;
 8000d54:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <BSP_LCD_Init+0x98>)
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <BSP_LCD_Init+0x9c>)
 8000d58:	6013      	str	r3, [r2, #0]
    LcdDrv->Init();
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4798      	blx	r3
    BSP_SDRAM_Init();
 8000d5e:	f000 fa23 	bl	80011a8 <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = pFonts;
 8000d62:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <BSP_LCD_Init+0xa0>)
 8000d64:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <BSP_LCD_Init+0xa4>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	210c      	movs	r1, #12
 8000d6a:	fb01 2303 	mla	r3, r1, r3, r2
 8000d6e:	4a09      	ldr	r2, [pc, #36]	; (8000d94 <BSP_LCD_Init+0xa8>)
 8000d70:	609a      	str	r2, [r3, #8]
}  
 8000d72:	4628      	mov	r0, r5
 8000d74:	bd38      	pop	{r3, r4, r5, pc}
 8000d76:	bf00      	nop
 8000d78:	20000214 	.word	0x20000214
 8000d7c:	40016800 	.word	0x40016800
 8000d80:	20000120 	.word	0x20000120
 8000d84:	200002bc 	.word	0x200002bc
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	200000c4 	.word	0x200000c4
 8000d90:	20000108 	.word	0x20000108
 8000d94:	2000003c 	.word	0x2000003c

08000d98 <BSP_LCD_DrawPixel>:
{
 8000d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <BSP_LCD_DrawPixel+0x24>)
{
 8000d9c:	4616      	mov	r6, r2
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <BSP_LCD_DrawPixel+0x28>)
{
 8000da2:	460c      	mov	r4, r1
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000da4:	2134      	movs	r1, #52	; 0x34
 8000da6:	fb01 2303 	mla	r3, r1, r3, r2
{
 8000daa:	4607      	mov	r7, r0
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000dac:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8000dae:	f7ff fe65 	bl	8000a7c <BSP_LCD_GetXSize>
 8000db2:	fb00 7004 	mla	r0, r0, r4, r7
 8000db6:	f845 6020 	str.w	r6, [r5, r0, lsl #2]
 8000dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dbc:	200000c4 	.word	0x200000c4
 8000dc0:	20000214 	.word	0x20000214

08000dc4 <BSP_LCD_DisplayChar>:
{
 8000dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000dc8:	4b2f      	ldr	r3, [pc, #188]	; (8000e88 <BSP_LCD_DisplayChar+0xc4>)
{
 8000dca:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000dcc:	681b      	ldr	r3, [r3, #0]
{
 8000dce:	9102      	str	r1, [sp, #8]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000dd0:	492e      	ldr	r1, [pc, #184]	; (8000e8c <BSP_LCD_DisplayChar+0xc8>)
{
 8000dd2:	9001      	str	r0, [sp, #4]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000dd4:	200c      	movs	r0, #12
 8000dd6:	fb00 1303 	mla	r3, r0, r3, r1
 8000dda:	f1a2 0420 	sub.w	r4, r2, #32
 8000dde:	6899      	ldr	r1, [r3, #8]
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000de0:	f8b1 a004 	ldrh.w	sl, [r1, #4]
 8000de4:	f8b1 b006 	ldrh.w	fp, [r1, #6]
 8000de8:	680a      	ldr	r2, [r1, #0]
 8000dea:	f10a 0607 	add.w	r6, sl, #7
 8000dee:	10f6      	asrs	r6, r6, #3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000df0:	fb0b f404 	mul.w	r4, fp, r4
  offset = 8 *((width + 7)/8) -  width ;
 8000df4:	ebca 00c6 	rsb	r0, sl, r6, lsl #3
 8000df8:	fb06 2404 	mla	r4, r6, r4, r2
      if(line & (1 << (width- j + offset- 1))) 
 8000dfc:	f10a 32ff 	add.w	r2, sl, #4294967295
 8000e00:	fa52 f380 	uxtab	r3, r2, r0
  for(i = 0; i < height; i++)
 8000e04:	f04f 0800 	mov.w	r8, #0
      if(line & (1 << (width- j + offset- 1))) 
 8000e08:	9303      	str	r3, [sp, #12]
 8000e0a:	9b02      	ldr	r3, [sp, #8]
  for(i = 0; i < height; i++)
 8000e0c:	45d8      	cmp	r8, fp
 8000e0e:	eb03 0908 	add.w	r9, r3, r8
 8000e12:	fa1f f989 	uxth.w	r9, r9
 8000e16:	d302      	bcc.n	8000e1e <BSP_LCD_DisplayChar+0x5a>
}
 8000e18:	b005      	add	sp, #20
 8000e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 8000e1e:	2e01      	cmp	r6, #1
 8000e20:	d009      	beq.n	8000e36 <BSP_LCD_DisplayChar+0x72>
 8000e22:	2e02      	cmp	r6, #2
 8000e24:	d00f      	beq.n	8000e46 <BSP_LCD_DisplayChar+0x82>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8000e26:	7865      	ldrb	r5, [r4, #1]
 8000e28:	7822      	ldrb	r2, [r4, #0]
 8000e2a:	022d      	lsls	r5, r5, #8
 8000e2c:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
 8000e30:	78a2      	ldrb	r2, [r4, #2]
 8000e32:	4315      	orrs	r5, r2
 8000e34:	e000      	b.n	8000e38 <BSP_LCD_DisplayChar+0x74>
      line =  pchar[0];      
 8000e36:	7825      	ldrb	r5, [r4, #0]
    for (j = 0; j < width; j++)
 8000e38:	2700      	movs	r7, #0
 8000e3a:	45ba      	cmp	sl, r7
 8000e3c:	d808      	bhi.n	8000e50 <BSP_LCD_DisplayChar+0x8c>
  for(i = 0; i < height; i++)
 8000e3e:	f108 0801 	add.w	r8, r8, #1
 8000e42:	4434      	add	r4, r6
 8000e44:	e7e1      	b.n	8000e0a <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 8) | pchar[1];
 8000e46:	7822      	ldrb	r2, [r4, #0]
 8000e48:	7865      	ldrb	r5, [r4, #1]
 8000e4a:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8000e4e:	e7f3      	b.n	8000e38 <BSP_LCD_DisplayChar+0x74>
      if(line & (1 << (width- j + offset- 1))) 
 8000e50:	9b03      	ldr	r3, [sp, #12]
 8000e52:	2201      	movs	r2, #1
 8000e54:	1bd9      	subs	r1, r3, r7
 8000e56:	408a      	lsls	r2, r1
 8000e58:	490b      	ldr	r1, [pc, #44]	; (8000e88 <BSP_LCD_DisplayChar+0xc4>)
 8000e5a:	422a      	tst	r2, r5
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8000e5c:	6809      	ldr	r1, [r1, #0]
 8000e5e:	f04f 020c 	mov.w	r2, #12
      if(line & (1 << (width- j + offset- 1))) 
 8000e62:	d00a      	beq.n	8000e7a <BSP_LCD_DisplayChar+0xb6>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8000e64:	9b01      	ldr	r3, [sp, #4]
 8000e66:	434a      	muls	r2, r1
 8000e68:	19d8      	adds	r0, r3, r7
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <BSP_LCD_DisplayChar+0xc8>)
 8000e6c:	589a      	ldr	r2, [r3, r2]
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8000e6e:	4649      	mov	r1, r9
 8000e70:	b280      	uxth	r0, r0
 8000e72:	f7ff ff91 	bl	8000d98 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8000e76:	3701      	adds	r7, #1
 8000e78:	e7df      	b.n	8000e3a <BSP_LCD_DisplayChar+0x76>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8000e7a:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <BSP_LCD_DisplayChar+0xc8>)
 8000e7c:	fb02 3201 	mla	r2, r2, r1, r3
 8000e80:	9b01      	ldr	r3, [sp, #4]
 8000e82:	6852      	ldr	r2, [r2, #4]
 8000e84:	19d8      	adds	r0, r3, r7
 8000e86:	e7f2      	b.n	8000e6e <BSP_LCD_DisplayChar+0xaa>
 8000e88:	200000c4 	.word	0x200000c4
 8000e8c:	20000108 	.word	0x20000108

08000e90 <BSP_LCD_DisplayStringAt>:
{
 8000e90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e94:	469a      	mov	sl, r3
 8000e96:	4604      	mov	r4, r0
 8000e98:	460f      	mov	r7, r1
 8000e9a:	4616      	mov	r6, r2
  uint8_t  *ptr = pText;
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	eba3 0906 	sub.w	r9, r3, r6
  while (*ptr++) size ++ ;
 8000ea2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ea6:	2a00      	cmp	r2, #0
 8000ea8:	d1f9      	bne.n	8000e9e <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000eaa:	f7ff fde7 	bl	8000a7c <BSP_LCD_GetXSize>
 8000eae:	4b25      	ldr	r3, [pc, #148]	; (8000f44 <BSP_LCD_DisplayStringAt+0xb4>)
 8000eb0:	4d25      	ldr	r5, [pc, #148]	; (8000f48 <BSP_LCD_DisplayStringAt+0xb8>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	210c      	movs	r1, #12
 8000eb6:	fb01 5202 	mla	r2, r1, r2, r5
  switch (mode)
 8000eba:	f1ba 0f01 	cmp.w	sl, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000ebe:	6892      	ldr	r2, [r2, #8]
 8000ec0:	4698      	mov	r8, r3
 8000ec2:	8892      	ldrh	r2, [r2, #4]
 8000ec4:	fbb0 f0f2 	udiv	r0, r0, r2
  switch (mode)
 8000ec8:	d021      	beq.n	8000f0e <BSP_LCD_DisplayStringAt+0x7e>
 8000eca:	f1ba 0f02 	cmp.w	sl, #2
 8000ece:	d025      	beq.n	8000f1c <BSP_LCD_DisplayStringAt+0x8c>
  uint8_t  *ptr = pText;
 8000ed0:	46b3      	mov	fp, r6
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000ed2:	f04f 0a0c 	mov.w	sl, #12
 8000ed6:	f89b 2000 	ldrb.w	r2, [fp]
 8000eda:	3200      	adds	r2, #0
 8000edc:	bf18      	it	ne
 8000ede:	2201      	movne	r2, #1
 8000ee0:	9201      	str	r2, [sp, #4]
 8000ee2:	f7ff fdcb 	bl	8000a7c <BSP_LCD_GetXSize>
 8000ee6:	f8d8 3000 	ldr.w	r3, [r8]
 8000eea:	fb0a 5303 	mla	r3, sl, r3, r5
 8000eee:	ebab 0906 	sub.w	r9, fp, r6
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	889b      	ldrh	r3, [r3, #4]
 8000ef6:	fa1f f989 	uxth.w	r9, r9
 8000efa:	fb03 0019 	mls	r0, r3, r9, r0
 8000efe:	b280      	uxth	r0, r0
 8000f00:	4298      	cmp	r0, r3
 8000f02:	d301      	bcc.n	8000f08 <BSP_LCD_DisplayStringAt+0x78>
 8000f04:	9a01      	ldr	r2, [sp, #4]
 8000f06:	b972      	cbnz	r2, 8000f26 <BSP_LCD_DisplayStringAt+0x96>
}
 8000f08:	b003      	add	sp, #12
 8000f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8000f0e:	eba0 0009 	sub.w	r0, r0, r9
 8000f12:	4350      	muls	r0, r2
 8000f14:	eb04 0050 	add.w	r0, r4, r0, lsr #1
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8000f18:	b284      	uxth	r4, r0
      break;
 8000f1a:	e7d9      	b.n	8000ed0 <BSP_LCD_DisplayStringAt+0x40>
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8000f1c:	eba0 0009 	sub.w	r0, r0, r9
 8000f20:	fb10 4002 	smlabb	r0, r0, r2, r4
 8000f24:	e7f8      	b.n	8000f18 <BSP_LCD_DisplayStringAt+0x88>
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8000f26:	4620      	mov	r0, r4
 8000f28:	f81b 2b01 	ldrb.w	r2, [fp], #1
 8000f2c:	4639      	mov	r1, r7
 8000f2e:	f7ff ff49 	bl	8000dc4 <BSP_LCD_DisplayChar>
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8000f32:	f8d8 3000 	ldr.w	r3, [r8]
 8000f36:	fb0a 5303 	mla	r3, sl, r3, r5
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	8898      	ldrh	r0, [r3, #4]
 8000f3e:	4420      	add	r0, r4
 8000f40:	b284      	uxth	r4, r0
 8000f42:	e7c8      	b.n	8000ed6 <BSP_LCD_DisplayStringAt+0x46>
 8000f44:	200000c4 	.word	0x200000c4
 8000f48:	20000108 	.word	0x20000108

08000f4c <BSP_LCD_DisplayStringAtLine>:
  return DrawProp[ActiveLayer].pFont;
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <BSP_LCD_DisplayStringAtLine+0x28>)
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <BSP_LCD_DisplayStringAtLine+0x2c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
{
 8000f52:	b410      	push	{r4}
  return DrawProp[ActiveLayer].pFont;
 8000f54:	240c      	movs	r4, #12
 8000f56:	fb04 2303 	mla	r3, r4, r3, r2
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8000f5a:	460a      	mov	r2, r1
 8000f5c:	689b      	ldr	r3, [r3, #8]
}
 8000f5e:	f85d 4b04 	ldr.w	r4, [sp], #4
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8000f62:	88db      	ldrh	r3, [r3, #6]
 8000f64:	fb13 f000 	smulbb	r0, r3, r0
 8000f68:	b281      	uxth	r1, r0
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f7ff bf8f 	b.w	8000e90 <BSP_LCD_DisplayStringAt>
 8000f72:	bf00      	nop
 8000f74:	200000c4 	.word	0x200000c4
 8000f78:	20000108 	.word	0x20000108

08000f7c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8000f7c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t tmpmrd =0;
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8000f80:	4c23      	ldr	r4, [pc, #140]	; (8001010 <BSP_SDRAM_Initialization_sequence+0x94>)
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000f82:	4d24      	ldr	r5, [pc, #144]	; (8001014 <BSP_SDRAM_Initialization_sequence+0x98>)
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000f84:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd =0;
 8000f86:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000f8a:	2708      	movs	r7, #8
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000f8c:	4621      	mov	r1, r4
{
 8000f8e:	4682      	mov	sl, r0
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f94:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd =0;
 8000f96:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000f9a:	e884 00c0 	stmia.w	r4, {r6, r7}
  Command.AutoRefreshNumber       = 1;
 8000f9e:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition  = 0;
 8000fa0:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000fa4:	f001 fc6e 	bl	8002884 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000fa8:	4630      	mov	r0, r6
 8000faa:	f000 f967 	bl	800127c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8000fae:	2302      	movs	r3, #2
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8000fb0:	4621      	mov	r1, r4
 8000fb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fb6:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000fb8:	e884 0088 	stmia.w	r4, {r3, r7}
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 4;
 8000fbc:	f04f 0904 	mov.w	r9, #4
  Command.AutoRefreshNumber       = 1;
 8000fc0:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition  = 0;
 8000fc2:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8000fc6:	f001 fc5d 	bl	8002884 <HAL_SDRAM_SendCommand>
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000fca:	2303      	movs	r3, #3
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000fcc:	4621      	mov	r1, r4
 8000fce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fd2:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000fd4:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.AutoRefreshNumber       = 4;
 8000fd8:	f8c4 9008 	str.w	r9, [r4, #8]
  Command.ModeRegisterDefinition  = 0;
 8000fdc:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000fe0:	f001 fc50 	bl	8002884 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8000fe4:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000fe8:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = tmpmrd;
 8000fea:	9b01      	ldr	r3, [sp, #4]
 8000fec:	60e3      	str	r3, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000fee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ff2:	4621      	mov	r1, r4
 8000ff4:	4628      	mov	r0, r5
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8000ff6:	f8c4 9000 	str.w	r9, [r4]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000ffa:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber       = 1;
 8000ffc:	60a6      	str	r6, [r4, #8]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000ffe:	f001 fc41 	bl	8002884 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8001002:	4651      	mov	r1, sl
 8001004:	4628      	mov	r0, r5
 8001006:	f001 fc54 	bl	80028b2 <HAL_SDRAM_ProgramRefreshRate>
}
 800100a:	b002      	add	sp, #8
 800100c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001010:	20000150 	.word	0x20000150
 8001014:	20000160 	.word	0x20000160

08001018 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8001018:	b570      	push	{r4, r5, r6, lr}
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800101a:	4606      	mov	r6, r0
{
 800101c:	b08e      	sub	sp, #56	; 0x38
  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800101e:	2800      	cmp	r0, #0
 8001020:	f000 80ad 	beq.w	800117e <BSP_SDRAM_MspInit+0x166>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001024:	4b57      	ldr	r3, [pc, #348]	; (8001184 <BSP_SDRAM_MspInit+0x16c>)
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8001026:	4858      	ldr	r0, [pc, #352]	; (8001188 <BSP_SDRAM_MspInit+0x170>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001028:	2500      	movs	r5, #0
 800102a:	9501      	str	r5, [sp, #4]
 800102c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800102e:	f042 0201 	orr.w	r2, r2, #1
 8001032:	639a      	str	r2, [r3, #56]	; 0x38
 8001034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001036:	f002 0201 	and.w	r2, r2, #1
 800103a:	9201      	str	r2, [sp, #4]
 800103c:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 800103e:	9502      	str	r5, [sp, #8]
 8001040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001042:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001046:	631a      	str	r2, [r3, #48]	; 0x30
 8001048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800104a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800104e:	9202      	str	r2, [sp, #8]
 8001050:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	9503      	str	r5, [sp, #12]
 8001054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001056:	f042 0202 	orr.w	r2, r2, #2
 800105a:	631a      	str	r2, [r3, #48]	; 0x30
 800105c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800105e:	f002 0202 	and.w	r2, r2, #2
 8001062:	9203      	str	r2, [sp, #12]
 8001064:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001066:	9504      	str	r5, [sp, #16]
 8001068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800106a:	f042 0204 	orr.w	r2, r2, #4
 800106e:	631a      	str	r2, [r3, #48]	; 0x30
 8001070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001072:	f002 0204 	and.w	r2, r2, #4
 8001076:	9204      	str	r2, [sp, #16]
 8001078:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800107a:	9505      	str	r5, [sp, #20]
 800107c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800107e:	f042 0208 	orr.w	r2, r2, #8
 8001082:	631a      	str	r2, [r3, #48]	; 0x30
 8001084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001086:	f002 0208 	and.w	r2, r2, #8
 800108a:	9205      	str	r2, [sp, #20]
 800108c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800108e:	9506      	str	r5, [sp, #24]
 8001090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001092:	f042 0210 	orr.w	r2, r2, #16
 8001096:	631a      	str	r2, [r3, #48]	; 0x30
 8001098:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800109a:	f002 0210 	and.w	r2, r2, #16
 800109e:	9206      	str	r2, [sp, #24]
 80010a0:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010a2:	9507      	str	r5, [sp, #28]
 80010a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010a6:	f042 0220 	orr.w	r2, r2, #32
 80010aa:	631a      	str	r2, [r3, #48]	; 0x30
 80010ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010ae:	f002 0220 	and.w	r2, r2, #32
 80010b2:	9207      	str	r2, [sp, #28]
 80010b4:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010b6:	9508      	str	r5, [sp, #32]
 80010b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010be:	631a      	str	r2, [r3, #48]	; 0x30
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80010c2:	950b      	str	r5, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c8:	9308      	str	r3, [sp, #32]
 80010ca:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80010ce:	ac0e      	add	r4, sp, #56	; 0x38
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80010d0:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80010d2:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80010d4:	230c      	movs	r3, #12
 80010d6:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80010d8:	2360      	movs	r3, #96	; 0x60
 80010da:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80010de:	4621      	mov	r1, r4
 80010e0:	f000 fbd2 	bl	8001888 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80010e4:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80010e6:	4621      	mov	r1, r4
 80010e8:	4828      	ldr	r0, [pc, #160]	; (800118c <BSP_SDRAM_MspInit+0x174>)
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80010ea:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80010ec:	f000 fbcc 	bl	8001888 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80010f0:	f24c 7303 	movw	r3, #50947	; 0xc703
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80010f4:	4621      	mov	r1, r4
 80010f6:	4826      	ldr	r0, [pc, #152]	; (8001190 <BSP_SDRAM_MspInit+0x178>)
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80010f8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80010fa:	f000 fbc5 	bl	8001888 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80010fe:	f64f 7383 	movw	r3, #65411	; 0xff83
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001102:	4621      	mov	r1, r4
 8001104:	4823      	ldr	r0, [pc, #140]	; (8001194 <BSP_SDRAM_MspInit+0x17c>)
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8001106:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001108:	f000 fbbe 	bl	8001888 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800110c:	f64f 033f 	movw	r3, #63551	; 0xf83f
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001110:	4621      	mov	r1, r4
 8001112:	4821      	ldr	r0, [pc, #132]	; (8001198 <BSP_SDRAM_MspInit+0x180>)
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8001114:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001116:	f000 fbb7 	bl	8001888 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800111a:	4621      	mov	r1, r4
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800111c:	f248 1333 	movw	r3, #33075	; 0x8133

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001120:	4c1e      	ldr	r4, [pc, #120]	; (800119c <BSP_SDRAM_MspInit+0x184>)
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001122:	481f      	ldr	r0, [pc, #124]	; (80011a0 <BSP_SDRAM_MspInit+0x188>)
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8001124:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001126:	f000 fbaf 	bl	8001888 <HAL_GPIO_Init>
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800112a:	2380      	movs	r3, #128	; 0x80
 800112c:	60a3      	str	r3, [r4, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800112e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001132:	60e3      	str	r3, [r4, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8001134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001138:	6123      	str	r3, [r4, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800113a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113e:	6163      	str	r3, [r4, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001140:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001144:	61a3      	str	r3, [r4, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001146:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800114a:	6223      	str	r3, [r4, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800114c:	2303      	movs	r3, #3
 800114e:	62a3      	str	r3, [r4, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001150:	6325      	str	r5, [r4, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <BSP_SDRAM_MspInit+0x18c>)
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8001154:	6334      	str	r4, [r6, #48]	; 0x30
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8001156:	4620      	mov	r0, r4
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8001158:	6023      	str	r3, [r4, #0]
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800115a:	6065      	str	r5, [r4, #4]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800115c:	61e5      	str	r5, [r4, #28]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800115e:	6265      	str	r5, [r4, #36]	; 0x24
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001160:	62e5      	str	r5, [r4, #44]	; 0x2c
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8001162:	63a6      	str	r6, [r4, #56]	; 0x38
  HAL_DMA_DeInit(&dmaHandle);
 8001164:	f000 f986 	bl	8001474 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8001168:	4620      	mov	r0, r4
 800116a:	f000 f905 	bl	8001378 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800116e:	2038      	movs	r0, #56	; 0x38
 8001170:	462a      	mov	r2, r5
 8001172:	210f      	movs	r1, #15
 8001174:	f000 f8a8 	bl	80012c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001178:	2038      	movs	r0, #56	; 0x38
 800117a:	f000 f8d9 	bl	8001330 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800117e:	b00e      	add	sp, #56	; 0x38
 8001180:	bd70      	pop	{r4, r5, r6, pc}
 8001182:	bf00      	nop
 8001184:	40023800 	.word	0x40023800
 8001188:	40020400 	.word	0x40020400
 800118c:	40020800 	.word	0x40020800
 8001190:	40020c00 	.word	0x40020c00
 8001194:	40021000 	.word	0x40021000
 8001198:	40021400 	.word	0x40021400
 800119c:	200001b0 	.word	0x200001b0
 80011a0:	40021800 	.word	0x40021800
 80011a4:	40026410 	.word	0x40026410

080011a8 <BSP_SDRAM_Init>:
{
 80011a8:	b570      	push	{r4, r5, r6, lr}
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80011aa:	4c1a      	ldr	r4, [pc, #104]	; (8001214 <BSP_SDRAM_Init+0x6c>)
  Timing.LoadToActiveDelay    = 2;
 80011ac:	4d1a      	ldr	r5, [pc, #104]	; (8001218 <BSP_SDRAM_Init+0x70>)
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80011ae:	4b1b      	ldr	r3, [pc, #108]	; (800121c <BSP_SDRAM_Init+0x74>)
 80011b0:	6023      	str	r3, [r4, #0]
  Timing.LoadToActiveDelay    = 2;
 80011b2:	2302      	movs	r3, #2
 80011b4:	602b      	str	r3, [r5, #0]
  Timing.WriteRecoveryTime    = 2;
 80011b6:	612b      	str	r3, [r5, #16]
  Timing.RPDelay              = 2;
 80011b8:	616b      	str	r3, [r5, #20]
  Timing.RCDDelay             = 2;
 80011ba:	61ab      	str	r3, [r5, #24]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80011bc:	2310      	movs	r3, #16
 80011be:	6123      	str	r3, [r4, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80011c0:	2340      	movs	r3, #64	; 0x40
 80011c2:	6163      	str	r3, [r4, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80011c4:	f44f 73c0 	mov.w	r3, #384	; 0x180
  Timing.ExitSelfRefreshDelay = 7;
 80011c8:	2107      	movs	r1, #7
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80011ca:	61a3      	str	r3, [r4, #24]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80011cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  Timing.SelfRefreshTime      = 4;
 80011d0:	2204      	movs	r2, #4
  Timing.ExitSelfRefreshDelay = 7;
 80011d2:	6069      	str	r1, [r5, #4]
  Timing.RowCycleDelay        = 7;
 80011d4:	60e9      	str	r1, [r5, #12]
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80011d6:	2601      	movs	r6, #1
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80011d8:	2100      	movs	r1, #0
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80011da:	6223      	str	r3, [r4, #32]
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80011dc:	4620      	mov	r0, r4
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80011de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80011e2:	60e2      	str	r2, [r4, #12]
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80011e4:	62a3      	str	r3, [r4, #40]	; 0x28
  Timing.SelfRefreshTime      = 4;
 80011e6:	60aa      	str	r2, [r5, #8]
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80011e8:	6066      	str	r6, [r4, #4]
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80011ea:	60a1      	str	r1, [r4, #8]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80011ec:	61e1      	str	r1, [r4, #28]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80011ee:	6261      	str	r1, [r4, #36]	; 0x24
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80011f0:	f7ff ff12 	bl	8001018 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80011f4:	4629      	mov	r1, r5
 80011f6:	4620      	mov	r0, r4
 80011f8:	f001 fb24 	bl	8002844 <HAL_SDRAM_Init>
 80011fc:	4c08      	ldr	r4, [pc, #32]	; (8001220 <BSP_SDRAM_Init+0x78>)
    sdramstatus = SDRAM_ERROR;
 80011fe:	2800      	cmp	r0, #0
 8001200:	bf14      	ite	ne
 8001202:	4630      	movne	r0, r6
 8001204:	2000      	moveq	r0, #0
 8001206:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001208:	f240 506a 	movw	r0, #1386	; 0x56a
 800120c:	f7ff feb6 	bl	8000f7c <BSP_SDRAM_Initialization_sequence>
}
 8001210:	7820      	ldrb	r0, [r4, #0]
 8001212:	bd70      	pop	{r4, r5, r6, pc}
 8001214:	20000160 	.word	0x20000160
 8001218:	20000194 	.word	0x20000194
 800121c:	a0000140 	.word	0xa0000140
 8001220:	20000044 	.word	0x20000044

08001224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001224:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <HAL_Init+0x30>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800122e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001236:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800123e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001240:	2003      	movs	r0, #3
 8001242:	f000 f82f 	bl	80012a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001246:	2000      	movs	r0, #0
 8001248:	f002 ff2c 	bl	80040a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800124c:	f002 fcc0 	bl	8003bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001250:	2000      	movs	r0, #0
 8001252:	bd08      	pop	{r3, pc}
 8001254:	40023c00 	.word	0x40023c00

08001258 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001258:	4a03      	ldr	r2, [pc, #12]	; (8001268 <HAL_IncTick+0x10>)
 800125a:	4b04      	ldr	r3, [pc, #16]	; (800126c <HAL_IncTick+0x14>)
 800125c:	6811      	ldr	r1, [r2, #0]
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	440b      	add	r3, r1
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	200002c0 	.word	0x200002c0
 800126c:	20000045 	.word	0x20000045

08001270 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001270:	4b01      	ldr	r3, [pc, #4]	; (8001278 <HAL_GetTick+0x8>)
 8001272:	6818      	ldr	r0, [r3, #0]
}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	200002c0 	.word	0x200002c0

0800127c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800127c:	b538      	push	{r3, r4, r5, lr}
 800127e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001280:	f7ff fff6 	bl	8001270 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001284:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001286:	bf1c      	itt	ne
 8001288:	4b05      	ldrne	r3, [pc, #20]	; (80012a0 <HAL_Delay+0x24>)
 800128a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 800128c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800128e:	bf18      	it	ne
 8001290:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001292:	f7ff ffed 	bl	8001270 <HAL_GetTick>
 8001296:	1b40      	subs	r0, r0, r5
 8001298:	4284      	cmp	r4, r0
 800129a:	d8fa      	bhi.n	8001292 <HAL_Delay+0x16>
  {
  }
}
 800129c:	bd38      	pop	{r3, r4, r5, pc}
 800129e:	bf00      	nop
 80012a0:	20000045 	.word	0x20000045

080012a4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a4:	4a07      	ldr	r2, [pc, #28]	; (80012c4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80012a6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012ac:	041b      	lsls	r3, r3, #16
 80012ae:	0c1b      	lsrs	r3, r3, #16
 80012b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b4:	0200      	lsls	r0, r0, #8
 80012b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ba:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80012be:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80012c0:	60d3      	str	r3, [r2, #12]
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c8:	4b17      	ldr	r3, [pc, #92]	; (8001328 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ca:	b530      	push	{r4, r5, lr}
 80012cc:	68dc      	ldr	r4, [r3, #12]
 80012ce:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d8:	2b04      	cmp	r3, #4
 80012da:	bf28      	it	cs
 80012dc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012de:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	f04f 0501 	mov.w	r5, #1
 80012e4:	fa05 f303 	lsl.w	r3, r5, r3
 80012e8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ec:	bf8c      	ite	hi
 80012ee:	3c03      	subhi	r4, #3
 80012f0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f2:	4019      	ands	r1, r3
 80012f4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f6:	fa05 f404 	lsl.w	r4, r5, r4
 80012fa:	3c01      	subs	r4, #1
 80012fc:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80012fe:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	ea42 0201 	orr.w	r2, r2, r1
 8001304:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001308:	bfad      	iteet	ge
 800130a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130e:	f000 000f 	andlt.w	r0, r0, #15
 8001312:	4b06      	ldrlt	r3, [pc, #24]	; (800132c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001314:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001318:	bfb5      	itete	lt
 800131a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001320:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001324:	bd30      	pop	{r4, r5, pc}
 8001326:	bf00      	nop
 8001328:	e000ed00 	.word	0xe000ed00
 800132c:	e000ed14 	.word	0xe000ed14

08001330 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001330:	2800      	cmp	r0, #0
 8001332:	db08      	blt.n	8001346 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001334:	0942      	lsrs	r2, r0, #5
 8001336:	2301      	movs	r3, #1
 8001338:	f000 001f 	and.w	r0, r0, #31
 800133c:	fa03 f000 	lsl.w	r0, r3, r0
 8001340:	4b01      	ldr	r3, [pc, #4]	; (8001348 <HAL_NVIC_EnableIRQ+0x18>)
 8001342:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001346:	4770      	bx	lr
 8001348:	e000e100 	.word	0xe000e100

0800134c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800134c:	6803      	ldr	r3, [r0, #0]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001354:	f023 0303 	bic.w	r3, r3, #3
 8001358:	2118      	movs	r1, #24
 800135a:	3a10      	subs	r2, #16
 800135c:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001360:	4904      	ldr	r1, [pc, #16]	; (8001374 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8001362:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001364:	bf88      	it	hi
 8001366:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001368:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800136a:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800136c:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 800136e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	08005d1c 	.word	0x08005d1c

08001378 <HAL_DMA_Init>:
{
 8001378:	b570      	push	{r4, r5, r6, lr}
 800137a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800137c:	f7ff ff78 	bl	8001270 <HAL_GetTick>
 8001380:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001382:	2c00      	cmp	r4, #0
 8001384:	d071      	beq.n	800146a <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8001386:	2300      	movs	r3, #0
 8001388:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800138c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800138e:	2302      	movs	r3, #2
 8001390:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001394:	6813      	ldr	r3, [r2, #0]
 8001396:	f023 0301 	bic.w	r3, r3, #1
 800139a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800139c:	6821      	ldr	r1, [r4, #0]
 800139e:	680b      	ldr	r3, [r1, #0]
 80013a0:	07d8      	lsls	r0, r3, #31
 80013a2:	d43c      	bmi.n	800141e <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80013a4:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013a6:	4d32      	ldr	r5, [pc, #200]	; (8001470 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013a8:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013aa:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013ac:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013ae:	68a3      	ldr	r3, [r4, #8]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	68e2      	ldr	r2, [r4, #12]
 80013b4:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b6:	6922      	ldr	r2, [r4, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	6962      	ldr	r2, [r4, #20]
 80013bc:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013be:	69e2      	ldr	r2, [r4, #28]
 80013c0:	4303      	orrs	r3, r0
 80013c2:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80013c4:	6a22      	ldr	r2, [r4, #32]
 80013c6:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80013ca:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013cc:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013d0:	bf01      	itttt	eq
 80013d2:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 80013d4:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 80013d6:	4335      	orreq	r5, r6
 80013d8:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80013da:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80013dc:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013de:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013e0:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80013e4:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013e8:	d10b      	bne.n	8001402 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 80013ea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013ec:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80013ee:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013f0:	b13d      	cbz	r5, 8001402 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80013f2:	b9f8      	cbnz	r0, 8001434 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 80013f4:	2a01      	cmp	r2, #1
 80013f6:	d02d      	beq.n	8001454 <HAL_DMA_Init+0xdc>
 80013f8:	d301      	bcc.n	80013fe <HAL_DMA_Init+0x86>
 80013fa:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80013fc:	d101      	bne.n	8001402 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013fe:	01ea      	lsls	r2, r5, #7
 8001400:	d42b      	bmi.n	800145a <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8001402:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001404:	4620      	mov	r0, r4
 8001406:	f7ff ffa1 	bl	800134c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800140a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800140c:	233f      	movs	r3, #63	; 0x3f
 800140e:	4093      	lsls	r3, r2
 8001410:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001412:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001414:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001416:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001418:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800141c:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800141e:	f7ff ff27 	bl	8001270 <HAL_GetTick>
 8001422:	1b40      	subs	r0, r0, r5
 8001424:	2805      	cmp	r0, #5
 8001426:	d9b9      	bls.n	800139c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001428:	2320      	movs	r3, #32
 800142a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800142c:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 800142e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001432:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001434:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001438:	d113      	bne.n	8001462 <HAL_DMA_Init+0xea>
    switch (tmp)
 800143a:	2a03      	cmp	r2, #3
 800143c:	d8e1      	bhi.n	8001402 <HAL_DMA_Init+0x8a>
 800143e:	a001      	add	r0, pc, #4	; (adr r0, 8001444 <HAL_DMA_Init+0xcc>)
 8001440:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001444:	0800145b 	.word	0x0800145b
 8001448:	080013ff 	.word	0x080013ff
 800144c:	0800145b 	.word	0x0800145b
 8001450:	08001455 	.word	0x08001455
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001454:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001458:	d1d3      	bne.n	8001402 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800145a:	2340      	movs	r3, #64	; 0x40
 800145c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800145e:	2001      	movs	r0, #1
 8001460:	e7e5      	b.n	800142e <HAL_DMA_Init+0xb6>
    switch (tmp)
 8001462:	2a02      	cmp	r2, #2
 8001464:	d9f9      	bls.n	800145a <HAL_DMA_Init+0xe2>
 8001466:	2a03      	cmp	r2, #3
 8001468:	e7c8      	b.n	80013fc <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800146a:	2001      	movs	r0, #1
 800146c:	bd70      	pop	{r4, r5, r6, pc}
 800146e:	bf00      	nop
 8001470:	f010803f 	.word	0xf010803f

08001474 <HAL_DMA_DeInit>:
{
 8001474:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8001476:	4605      	mov	r5, r0
 8001478:	b320      	cbz	r0, 80014c4 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800147a:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800147e:	b2e4      	uxtb	r4, r4
 8001480:	2c02      	cmp	r4, #2
 8001482:	d01d      	beq.n	80014c0 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8001484:	6803      	ldr	r3, [r0, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 800148c:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 800148e:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 8001490:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8001492:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8001494:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8001496:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8001498:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 800149a:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 800149c:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800149e:	f7ff ff55 	bl	800134c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014a2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 80014a4:	63ec      	str	r4, [r5, #60]	; 0x3c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014a6:	233f      	movs	r3, #63	; 0x3f
 80014a8:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 80014aa:	642c      	str	r4, [r5, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80014ac:	646c      	str	r4, [r5, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80014ae:	64ac      	str	r4, [r5, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80014b0:	64ec      	str	r4, [r5, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80014b2:	652c      	str	r4, [r5, #80]	; 0x50
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014b4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014b6:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 80014b8:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 80014bc:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
    return HAL_BUSY;
 80014c0:	4620      	mov	r0, r4
}
 80014c2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80014c4:	2001      	movs	r0, #1
 80014c6:	bd38      	pop	{r3, r4, r5, pc}

080014c8 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80014c8:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80014ca:	6804      	ldr	r4, [r0, #0]
 80014cc:	9d04      	ldr	r5, [sp, #16]
 80014ce:	6c66      	ldr	r6, [r4, #68]	; 0x44
 80014d0:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80014d4:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 80014d8:	4333      	orrs	r3, r6
 80014da:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80014dc:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80014de:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80014e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80014e4:	d130      	bne.n	8001548 <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80014e6:	6886      	ldr	r6, [r0, #8]
 80014e8:	b11e      	cbz	r6, 80014f2 <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80014ea:	2e01      	cmp	r6, #1
 80014ec:	d103      	bne.n	80014f6 <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80014ee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U );
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80014f2:	63a1      	str	r1, [r4, #56]	; 0x38
 80014f4:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80014f6:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80014f8:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80014fc:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001500:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001502:	d107      	bne.n	8001514 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 8001504:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
 8001506:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001508:	02c9      	lsls	r1, r1, #11
 800150a:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 800150e:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 8001512:	e7ee      	b.n	80014f2 <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001514:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001516:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800151a:	d10a      	bne.n	8001532 <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 800151c:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 800151e:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001520:	029b      	lsls	r3, r3, #10
 8001522:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8001526:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
      tmp1 = (tmp1 >> 31U);
 800152a:	0fd1      	lsrs	r1, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800152c:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8001530:	e7df      	b.n	80014f2 <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 8001532:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 8001534:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001536:	0209      	lsls	r1, r1, #8
 8001538:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 800153c:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
      tmp1 = (tmp1 >> 28U);
 8001540:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001542:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 8001546:	e7d4      	b.n	80014f2 <DMA2D_SetConfig+0x2a>
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001548:	60e1      	str	r1, [r4, #12]
 800154a:	bd70      	pop	{r4, r5, r6, pc}

0800154c <HAL_DMA2D_Init>:
{
 800154c:	b510      	push	{r4, lr}
  if(hdma2d == NULL)
 800154e:	4604      	mov	r4, r0
 8001550:	b330      	cbz	r0, 80015a0 <HAL_DMA2D_Init+0x54>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001552:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001556:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800155a:	b91b      	cbnz	r3, 8001564 <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 800155c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8001560:	f002 fb52 	bl	8003c08 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001564:	6822      	ldr	r2, [r4, #0]
 8001566:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001568:	2302      	movs	r3, #2
 800156a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800156e:	6813      	ldr	r3, [r2, #0]
 8001570:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001574:	430b      	orrs	r3, r1
 8001576:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001578:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800157a:	68a1      	ldr	r1, [r4, #8]
 800157c:	f023 0307 	bic.w	r3, r3, #7
 8001580:	430b      	orrs	r3, r1
 8001582:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001584:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001586:	68e1      	ldr	r1, [r4, #12]
 8001588:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800158c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001590:	430b      	orrs	r3, r1
 8001592:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001594:	2000      	movs	r0, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001596:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001598:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800159a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800159e:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 80015a0:	2001      	movs	r0, #1
}
 80015a2:	bd10      	pop	{r4, pc}

080015a4 <HAL_DMA2D_Start>:
{
 80015a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 80015a6:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 80015aa:	2c01      	cmp	r4, #1
{
 80015ac:	4605      	mov	r5, r0
 80015ae:	f04f 0402 	mov.w	r4, #2
  __HAL_LOCK(hdma2d);
 80015b2:	d00f      	beq.n	80015d4 <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80015b4:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 80015b8:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80015ba:	9c06      	ldr	r4, [sp, #24]
  __HAL_LOCK(hdma2d);
 80015bc:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80015c0:	9400      	str	r4, [sp, #0]
 80015c2:	f7ff ff81 	bl	80014c8 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 80015c6:	682a      	ldr	r2, [r5, #0]
 80015c8:	6813      	ldr	r3, [r2, #0]
 80015ca:	4333      	orrs	r3, r6
 80015cc:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80015ce:	2000      	movs	r0, #0
}
 80015d0:	b002      	add	sp, #8
 80015d2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 80015d4:	4620      	mov	r0, r4
 80015d6:	e7fb      	b.n	80015d0 <HAL_DMA2D_Start+0x2c>

080015d8 <HAL_DMA2D_PollForTransfer>:
{
 80015d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 80015da:	2300      	movs	r3, #0
 80015dc:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80015de:	6803      	ldr	r3, [r0, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	07db      	lsls	r3, r3, #31
{
 80015e4:	4604      	mov	r4, r0
 80015e6:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80015e8:	d417      	bmi.n	800161a <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80015ea:	6822      	ldr	r2, [r4, #0]
 80015ec:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80015ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015f0:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 80015f2:	069e      	lsls	r6, r3, #26
 80015f4:	d506      	bpl.n	8001604 <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 80015f6:	f7ff fe3b 	bl	8001270 <HAL_GetTick>
 80015fa:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80015fc:	6823      	ldr	r3, [r4, #0]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	06d2      	lsls	r2, r2, #27
 8001602:	d543      	bpl.n	800168c <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001604:	6823      	ldr	r3, [r4, #0]
 8001606:	2212      	movs	r2, #18
 8001608:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 800160a:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800160c:	2301      	movs	r3, #1
 800160e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8001612:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001616:	b002      	add	sp, #8
 8001618:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 800161a:	f7ff fe29 	bl	8001270 <HAL_GetTick>
 800161e:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001620:	6823      	ldr	r3, [r4, #0]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	0792      	lsls	r2, r2, #30
 8001626:	d4e0      	bmi.n	80015ea <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800162c:	9a01      	ldr	r2, [sp, #4]
 800162e:	f012 0f21 	tst.w	r2, #33	; 0x21
 8001632:	d017      	beq.n	8001664 <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001634:	9a01      	ldr	r2, [sp, #4]
 8001636:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001638:	bf42      	ittt	mi
 800163a:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 800163c:	f042 0202 	orrmi.w	r2, r2, #2
 8001640:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001642:	9a01      	ldr	r2, [sp, #4]
 8001644:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001646:	bf42      	ittt	mi
 8001648:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 800164a:	f042 0201 	orrmi.w	r2, r2, #1
 800164e:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001650:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001652:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001654:	2304      	movs	r3, #4
 8001656:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 800165a:	2300      	movs	r3, #0
 800165c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8001660:	2001      	movs	r0, #1
 8001662:	e7d8      	b.n	8001616 <HAL_DMA2D_PollForTransfer+0x3e>
      if(Timeout != HAL_MAX_DELAY)
 8001664:	1c69      	adds	r1, r5, #1
 8001666:	d0dc      	beq.n	8001622 <HAL_DMA2D_PollForTransfer+0x4a>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001668:	f7ff fe02 	bl	8001270 <HAL_GetTick>
 800166c:	1b80      	subs	r0, r0, r6
 800166e:	4285      	cmp	r5, r0
 8001670:	d301      	bcc.n	8001676 <HAL_DMA2D_PollForTransfer+0x9e>
 8001672:	2d00      	cmp	r5, #0
 8001674:	d1d4      	bne.n	8001620 <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001676:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001678:	f043 0320 	orr.w	r3, r3, #32
 800167c:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800167e:	2003      	movs	r0, #3
          __HAL_UNLOCK(hdma2d);
 8001680:	2300      	movs	r3, #0
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001682:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8001686:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 800168a:	e7c4      	b.n	8001616 <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8001690:	9a01      	ldr	r2, [sp, #4]
 8001692:	f012 0f29 	tst.w	r2, #41	; 0x29
 8001696:	d016      	beq.n	80016c6 <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001698:	9a01      	ldr	r2, [sp, #4]
 800169a:	0716      	lsls	r6, r2, #28
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800169c:	bf42      	ittt	mi
 800169e:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 80016a0:	f042 0204 	orrmi.w	r2, r2, #4
 80016a4:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80016a6:	9a01      	ldr	r2, [sp, #4]
 80016a8:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80016aa:	bf42      	ittt	mi
 80016ac:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 80016ae:	f042 0202 	orrmi.w	r2, r2, #2
 80016b2:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80016b4:	9a01      	ldr	r2, [sp, #4]
 80016b6:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80016b8:	bf42      	ittt	mi
 80016ba:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 80016bc:	f042 0201 	orrmi.w	r2, r2, #1
 80016c0:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80016c2:	2229      	movs	r2, #41	; 0x29
 80016c4:	e7c5      	b.n	8001652 <HAL_DMA2D_PollForTransfer+0x7a>
      if(Timeout != HAL_MAX_DELAY)
 80016c6:	1c69      	adds	r1, r5, #1
 80016c8:	d099      	beq.n	80015fe <HAL_DMA2D_PollForTransfer+0x26>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80016ca:	f7ff fdd1 	bl	8001270 <HAL_GetTick>
 80016ce:	1b80      	subs	r0, r0, r6
 80016d0:	4285      	cmp	r5, r0
 80016d2:	d3d0      	bcc.n	8001676 <HAL_DMA2D_PollForTransfer+0x9e>
 80016d4:	2d00      	cmp	r5, #0
 80016d6:	d191      	bne.n	80015fc <HAL_DMA2D_PollForTransfer+0x24>
 80016d8:	e7cd      	b.n	8001676 <HAL_DMA2D_PollForTransfer+0x9e>

080016da <HAL_DMA2D_LineEventCallback>:
 80016da:	4770      	bx	lr

080016dc <HAL_DMA2D_CLUTLoadingCpltCallback>:
{
 80016dc:	4770      	bx	lr

080016de <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80016de:	6803      	ldr	r3, [r0, #0]
{
 80016e0:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80016e2:	685e      	ldr	r6, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80016e4:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80016e6:	07f2      	lsls	r2, r6, #31
{
 80016e8:	4604      	mov	r4, r0
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80016ea:	d514      	bpl.n	8001716 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 80016ec:	05e9      	lsls	r1, r5, #23
 80016ee:	d512      	bpl.n	8001716 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016f6:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80016f8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80016fa:	f042 0201 	orr.w	r2, r2, #1
 80016fe:	63c2      	str	r2, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001700:	2201      	movs	r2, #1
 8001702:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001704:	2304      	movs	r3, #4
 8001706:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 800170a:	2300      	movs	r3, #0
 800170c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8001710:	6943      	ldr	r3, [r0, #20]
 8001712:	b103      	cbz	r3, 8001716 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8001714:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001716:	06b2      	lsls	r2, r6, #26
 8001718:	d516      	bpl.n	8001748 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800171a:	04ab      	lsls	r3, r5, #18
 800171c:	d514      	bpl.n	8001748 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800171e:	6823      	ldr	r3, [r4, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001726:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001728:	2220      	movs	r2, #32
 800172a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800172c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800172e:	f043 0302 	orr.w	r3, r3, #2
 8001732:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001734:	2304      	movs	r3, #4
 8001736:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 800173a:	2300      	movs	r3, #0
 800173c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8001740:	6963      	ldr	r3, [r4, #20]
 8001742:	b10b      	cbz	r3, 8001748 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8001744:	4620      	mov	r0, r4
 8001746:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001748:	0730      	lsls	r0, r6, #28
 800174a:	d516      	bpl.n	800177a <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800174c:	0529      	lsls	r1, r5, #20
 800174e:	d514      	bpl.n	800177a <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001750:	6823      	ldr	r3, [r4, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001758:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800175a:	2208      	movs	r2, #8
 800175c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800175e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001760:	f043 0304 	orr.w	r3, r3, #4
 8001764:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001766:	2304      	movs	r3, #4
 8001768:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 800176c:	2300      	movs	r3, #0
 800176e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8001772:	6963      	ldr	r3, [r4, #20]
 8001774:	b10b      	cbz	r3, 800177a <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8001776:	4620      	mov	r0, r4
 8001778:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800177a:	0772      	lsls	r2, r6, #29
 800177c:	d50b      	bpl.n	8001796 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800177e:	056b      	lsls	r3, r5, #21
 8001780:	d509      	bpl.n	8001796 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001782:	6823      	ldr	r3, [r4, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800178a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800178c:	2204      	movs	r2, #4
 800178e:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001790:	4620      	mov	r0, r4
 8001792:	f7ff ffa2 	bl	80016da <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001796:	07b0      	lsls	r0, r6, #30
 8001798:	d514      	bpl.n	80017c4 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800179a:	05a9      	lsls	r1, r5, #22
 800179c:	d512      	bpl.n	80017c4 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800179e:	6823      	ldr	r3, [r4, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80017a8:	2202      	movs	r2, #2
 80017aa:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80017ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017ae:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80017b0:	2301      	movs	r3, #1
 80017b2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80017b6:	2300      	movs	r3, #0
 80017b8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferCpltCallback != NULL)
 80017bc:	6923      	ldr	r3, [r4, #16]
 80017be:	b10b      	cbz	r3, 80017c4 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 80017c0:	4620      	mov	r0, r4
 80017c2:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80017c4:	06f2      	lsls	r2, r6, #27
 80017c6:	d513      	bpl.n	80017f0 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80017c8:	04eb      	lsls	r3, r5, #19
 80017ca:	d511      	bpl.n	80017f0 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80017cc:	6823      	ldr	r3, [r4, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017d4:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80017d6:	2210      	movs	r2, #16
 80017d8:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80017da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017dc:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80017de:	2301      	movs	r3, #1
 80017e0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80017e4:	2300      	movs	r3, #0
 80017e6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80017ea:	4620      	mov	r0, r4
 80017ec:	f7ff ff76 	bl	80016dc <HAL_DMA2D_CLUTLoadingCpltCallback>
 80017f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080017f4 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 80017f4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80017f8:	2b01      	cmp	r3, #1
{
 80017fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fc:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdma2d);
 8001800:	d036      	beq.n	8001870 <HAL_DMA2D_ConfigLayer+0x7c>
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001802:	010e      	lsls	r6, r1, #4
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001804:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001808:	1983      	adds	r3, r0, r6
  __HAL_LOCK(hdma2d);
 800180a:	2201      	movs	r2, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800180c:	69dd      	ldr	r5, [r3, #28]
  __HAL_LOCK(hdma2d);
 800180e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001812:	6a1a      	ldr	r2, [r3, #32]
 8001814:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001816:	4f1b      	ldr	r7, [pc, #108]	; (8001884 <HAL_DMA2D_ConfigLayer+0x90>)
 8001818:	6803      	ldr	r3, [r0, #0]
 800181a:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800181e:	3d09      	subs	r5, #9
 8001820:	2d01      	cmp	r5, #1
 8001822:	d80f      	bhi.n	8001844 <HAL_DMA2D_ConfigLayer+0x50>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001824:	f004 4e7f 	and.w	lr, r4, #4278190080	; 0xff000000
 8001828:	ea4e 0202 	orr.w	r2, lr, r2
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800182c:	b969      	cbnz	r1, 800184a <HAL_DMA2D_ConfigLayer+0x56>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800182e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001830:	4039      	ands	r1, r7
 8001832:	430a      	orrs	r2, r1
 8001834:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001836:	6982      	ldr	r2, [r0, #24]
 8001838:	619a      	str	r2, [r3, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800183a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800183c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001840:	629a      	str	r2, [r3, #40]	; 0x28
 8001842:	e00f      	b.n	8001864 <HAL_DMA2D_ConfigLayer+0x70>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001844:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001848:	b1a1      	cbz	r1, 8001874 <HAL_DMA2D_ConfigLayer+0x80>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800184a:	69d9      	ldr	r1, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800184c:	4406      	add	r6, r0
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800184e:	4039      	ands	r1, r7
 8001850:	430a      	orrs	r2, r1
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001852:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001854:	61da      	str	r2, [r3, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001856:	bf98      	it	ls
 8001858:	f024 447f 	bicls.w	r4, r4, #4278190080	; 0xff000000
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800185c:	69b2      	ldr	r2, [r6, #24]
 800185e:	611a      	str	r2, [r3, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001860:	bf98      	it	ls
 8001862:	621c      	strls	r4, [r3, #32]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001864:	2301      	movs	r3, #1
 8001866:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 800186a:	2300      	movs	r3, #0
 800186c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 8001870:	4618      	mov	r0, r3
 8001872:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001874:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001876:	4039      	ands	r1, r7
 8001878:	430a      	orrs	r2, r1
 800187a:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800187c:	6982      	ldr	r2, [r0, #24]
 800187e:	619a      	str	r2, [r3, #24]
 8001880:	e7f0      	b.n	8001864 <HAL_DMA2D_ConfigLayer+0x70>
 8001882:	bf00      	nop
 8001884:	00fcfff0 	.word	0x00fcfff0

08001888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800188c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800188e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001890:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8001a58 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001894:	4a6e      	ldr	r2, [pc, #440]	; (8001a50 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001896:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8001a5c <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800189a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800189c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800189e:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a2:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80018a4:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a8:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80018ac:	45b6      	cmp	lr, r6
 80018ae:	f040 80b6 	bne.w	8001a1e <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018b2:	684c      	ldr	r4, [r1, #4]
 80018b4:	f024 0710 	bic.w	r7, r4, #16
 80018b8:	2f02      	cmp	r7, #2
 80018ba:	d116      	bne.n	80018ea <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80018bc:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80018c0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018c4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80018c8:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018cc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80018d0:	f04f 0c0f 	mov.w	ip, #15
 80018d4:	fa0c fc0b 	lsl.w	ip, ip, fp
 80018d8:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018dc:	690d      	ldr	r5, [r1, #16]
 80018de:	fa05 f50b 	lsl.w	r5, r5, fp
 80018e2:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80018e6:	f8ca 5020 	str.w	r5, [sl, #32]
 80018ea:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ee:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80018f0:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018f4:	fa05 f50a 	lsl.w	r5, r5, sl
 80018f8:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018fa:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018fe:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001902:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001906:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001908:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800190c:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800190e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001912:	d811      	bhi.n	8001938 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001914:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001916:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800191a:	68cf      	ldr	r7, [r1, #12]
 800191c:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001920:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001924:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001926:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001928:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800192c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001930:	409f      	lsls	r7, r3
 8001932:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001936:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001938:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800193a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800193c:	688f      	ldr	r7, [r1, #8]
 800193e:	fa07 f70a 	lsl.w	r7, r7, sl
 8001942:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001944:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001946:	00e5      	lsls	r5, r4, #3
 8001948:	d569      	bpl.n	8001a1e <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194a:	f04f 0b00 	mov.w	fp, #0
 800194e:	f8cd b00c 	str.w	fp, [sp, #12]
 8001952:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001956:	4d3f      	ldr	r5, [pc, #252]	; (8001a54 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001958:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800195c:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001960:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001964:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001968:	9703      	str	r7, [sp, #12]
 800196a:	9f03      	ldr	r7, [sp, #12]
 800196c:	f023 0703 	bic.w	r7, r3, #3
 8001970:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001974:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001978:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800197c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001980:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001984:	f04f 0e0f 	mov.w	lr, #15
 8001988:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800198c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800198e:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001992:	d04b      	beq.n	8001a2c <HAL_GPIO_Init+0x1a4>
 8001994:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001998:	42a8      	cmp	r0, r5
 800199a:	d049      	beq.n	8001a30 <HAL_GPIO_Init+0x1a8>
 800199c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019a0:	42a8      	cmp	r0, r5
 80019a2:	d047      	beq.n	8001a34 <HAL_GPIO_Init+0x1ac>
 80019a4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019a8:	42a8      	cmp	r0, r5
 80019aa:	d045      	beq.n	8001a38 <HAL_GPIO_Init+0x1b0>
 80019ac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019b0:	42a8      	cmp	r0, r5
 80019b2:	d043      	beq.n	8001a3c <HAL_GPIO_Init+0x1b4>
 80019b4:	4548      	cmp	r0, r9
 80019b6:	d043      	beq.n	8001a40 <HAL_GPIO_Init+0x1b8>
 80019b8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80019bc:	42a8      	cmp	r0, r5
 80019be:	d041      	beq.n	8001a44 <HAL_GPIO_Init+0x1bc>
 80019c0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019c4:	42a8      	cmp	r0, r5
 80019c6:	d03f      	beq.n	8001a48 <HAL_GPIO_Init+0x1c0>
 80019c8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019cc:	42a8      	cmp	r0, r5
 80019ce:	d03d      	beq.n	8001a4c <HAL_GPIO_Init+0x1c4>
 80019d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019d4:	42a8      	cmp	r0, r5
 80019d6:	bf14      	ite	ne
 80019d8:	250a      	movne	r5, #10
 80019da:	2509      	moveq	r5, #9
 80019dc:	fa05 f50c 	lsl.w	r5, r5, ip
 80019e0:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019e4:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80019e6:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80019e8:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019ea:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80019ee:	bf0c      	ite	eq
 80019f0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80019f2:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80019f4:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80019f6:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019f8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80019fc:	bf0c      	ite	eq
 80019fe:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001a00:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001a02:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a04:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a06:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001a0a:	bf0c      	ite	eq
 8001a0c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001a0e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001a10:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001a12:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a14:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001a16:	bf54      	ite	pl
 8001a18:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001a1a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001a1c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2b10      	cmp	r3, #16
 8001a22:	f47f af3c 	bne.w	800189e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001a26:	b005      	add	sp, #20
 8001a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a2c:	465d      	mov	r5, fp
 8001a2e:	e7d5      	b.n	80019dc <HAL_GPIO_Init+0x154>
 8001a30:	2501      	movs	r5, #1
 8001a32:	e7d3      	b.n	80019dc <HAL_GPIO_Init+0x154>
 8001a34:	2502      	movs	r5, #2
 8001a36:	e7d1      	b.n	80019dc <HAL_GPIO_Init+0x154>
 8001a38:	2503      	movs	r5, #3
 8001a3a:	e7cf      	b.n	80019dc <HAL_GPIO_Init+0x154>
 8001a3c:	2504      	movs	r5, #4
 8001a3e:	e7cd      	b.n	80019dc <HAL_GPIO_Init+0x154>
 8001a40:	2505      	movs	r5, #5
 8001a42:	e7cb      	b.n	80019dc <HAL_GPIO_Init+0x154>
 8001a44:	2506      	movs	r5, #6
 8001a46:	e7c9      	b.n	80019dc <HAL_GPIO_Init+0x154>
 8001a48:	2507      	movs	r5, #7
 8001a4a:	e7c7      	b.n	80019dc <HAL_GPIO_Init+0x154>
 8001a4c:	2508      	movs	r5, #8
 8001a4e:	e7c5      	b.n	80019dc <HAL_GPIO_Init+0x154>
 8001a50:	40013c00 	.word	0x40013c00
 8001a54:	40020000 	.word	0x40020000
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40021400 	.word	0x40021400

08001a60 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001a64:	4d46      	ldr	r5, [pc, #280]	; (8001b80 <HAL_GPIO_DeInit+0x120>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001a66:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8001b88 <HAL_GPIO_DeInit+0x128>
 8001a6a:	f8df a120 	ldr.w	sl, [pc, #288]	; 8001b8c <HAL_GPIO_DeInit+0x12c>
 8001a6e:	f8df b120 	ldr.w	fp, [pc, #288]	; 8001b90 <HAL_GPIO_DeInit+0x130>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a72:	2200      	movs	r2, #0
    ioposition = 0x01U << position;
 8001a74:	2301      	movs	r3, #1
 8001a76:	fa03 fc02 	lsl.w	ip, r3, r2
    iocurrent = (GPIO_Pin) & ioposition;
 8001a7a:	ea0c 0401 	and.w	r4, ip, r1
    if(iocurrent == ioposition)
 8001a7e:	45a4      	cmp	ip, r4
 8001a80:	d167      	bne.n	8001b52 <HAL_GPIO_DeInit+0xf2>
 8001a82:	f022 0603 	bic.w	r6, r2, #3
 8001a86:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001a8a:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001a8e:	f002 0e03 	and.w	lr, r2, #3
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001a92:	4b3c      	ldr	r3, [pc, #240]	; (8001b84 <HAL_GPIO_DeInit+0x124>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001a94:	f8d6 8008 	ldr.w	r8, [r6, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001a98:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001a9c:	270f      	movs	r7, #15
 8001a9e:	fa07 f70e 	lsl.w	r7, r7, lr
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001aa2:	4298      	cmp	r0, r3
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001aa4:	ea08 0807 	and.w	r8, r8, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001aa8:	d058      	beq.n	8001b5c <HAL_GPIO_DeInit+0xfc>
 8001aaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001aae:	4298      	cmp	r0, r3
 8001ab0:	d056      	beq.n	8001b60 <HAL_GPIO_DeInit+0x100>
 8001ab2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ab6:	4298      	cmp	r0, r3
 8001ab8:	d054      	beq.n	8001b64 <HAL_GPIO_DeInit+0x104>
 8001aba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001abe:	4298      	cmp	r0, r3
 8001ac0:	d052      	beq.n	8001b68 <HAL_GPIO_DeInit+0x108>
 8001ac2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ac6:	4298      	cmp	r0, r3
 8001ac8:	d050      	beq.n	8001b6c <HAL_GPIO_DeInit+0x10c>
 8001aca:	4548      	cmp	r0, r9
 8001acc:	d050      	beq.n	8001b70 <HAL_GPIO_DeInit+0x110>
 8001ace:	4550      	cmp	r0, sl
 8001ad0:	d050      	beq.n	8001b74 <HAL_GPIO_DeInit+0x114>
 8001ad2:	4558      	cmp	r0, fp
 8001ad4:	d050      	beq.n	8001b78 <HAL_GPIO_DeInit+0x118>
 8001ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ada:	4298      	cmp	r0, r3
 8001adc:	d04e      	beq.n	8001b7c <HAL_GPIO_DeInit+0x11c>
 8001ade:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ae2:	4298      	cmp	r0, r3
 8001ae4:	bf0c      	ite	eq
 8001ae6:	2309      	moveq	r3, #9
 8001ae8:	230a      	movne	r3, #10
 8001aea:	fa03 f30e 	lsl.w	r3, r3, lr
 8001aee:	4598      	cmp	r8, r3
 8001af0:	d110      	bne.n	8001b14 <HAL_GPIO_DeInit+0xb4>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001af2:	68b3      	ldr	r3, [r6, #8]
 8001af4:	ea23 0707 	bic.w	r7, r3, r7
 8001af8:	60b7      	str	r7, [r6, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001afa:	682b      	ldr	r3, [r5, #0]
 8001afc:	43e4      	mvns	r4, r4
 8001afe:	4023      	ands	r3, r4
 8001b00:	602b      	str	r3, [r5, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001b02:	686b      	ldr	r3, [r5, #4]
 8001b04:	4023      	ands	r3, r4
 8001b06:	606b      	str	r3, [r5, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001b08:	68ab      	ldr	r3, [r5, #8]
 8001b0a:	4023      	ands	r3, r4
 8001b0c:	60ab      	str	r3, [r5, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001b0e:	68eb      	ldr	r3, [r5, #12]
 8001b10:	401c      	ands	r4, r3
 8001b12:	60ec      	str	r4, [r5, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b14:	0056      	lsls	r6, r2, #1
 8001b16:	2303      	movs	r3, #3
 8001b18:	6804      	ldr	r4, [r0, #0]
 8001b1a:	40b3      	lsls	r3, r6
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	401c      	ands	r4, r3
 8001b20:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b22:	08d4      	lsrs	r4, r2, #3
 8001b24:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8001b28:	f002 0e07 	and.w	lr, r2, #7
 8001b2c:	6a26      	ldr	r6, [r4, #32]
 8001b2e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001b32:	270f      	movs	r7, #15
 8001b34:	fa07 f70e 	lsl.w	r7, r7, lr
 8001b38:	ea26 0707 	bic.w	r7, r6, r7
 8001b3c:	6227      	str	r7, [r4, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b3e:	6884      	ldr	r4, [r0, #8]
 8001b40:	401c      	ands	r4, r3
 8001b42:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b44:	6844      	ldr	r4, [r0, #4]
 8001b46:	ea24 040c 	bic.w	r4, r4, ip
 8001b4a:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b4c:	68c4      	ldr	r4, [r0, #12]
 8001b4e:	4023      	ands	r3, r4
 8001b50:	60c3      	str	r3, [r0, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b52:	3201      	adds	r2, #1
 8001b54:	2a10      	cmp	r2, #16
 8001b56:	d18d      	bne.n	8001a74 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8001b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	e7c4      	b.n	8001aea <HAL_GPIO_DeInit+0x8a>
 8001b60:	2301      	movs	r3, #1
 8001b62:	e7c2      	b.n	8001aea <HAL_GPIO_DeInit+0x8a>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e7c0      	b.n	8001aea <HAL_GPIO_DeInit+0x8a>
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e7be      	b.n	8001aea <HAL_GPIO_DeInit+0x8a>
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	e7bc      	b.n	8001aea <HAL_GPIO_DeInit+0x8a>
 8001b70:	2305      	movs	r3, #5
 8001b72:	e7ba      	b.n	8001aea <HAL_GPIO_DeInit+0x8a>
 8001b74:	2306      	movs	r3, #6
 8001b76:	e7b8      	b.n	8001aea <HAL_GPIO_DeInit+0x8a>
 8001b78:	2307      	movs	r3, #7
 8001b7a:	e7b6      	b.n	8001aea <HAL_GPIO_DeInit+0x8a>
 8001b7c:	2308      	movs	r3, #8
 8001b7e:	e7b4      	b.n	8001aea <HAL_GPIO_DeInit+0x8a>
 8001b80:	40013c00 	.word	0x40013c00
 8001b84:	40020000 	.word	0x40020000
 8001b88:	40021400 	.word	0x40021400
 8001b8c:	40021800 	.word	0x40021800
 8001b90:	40021c00 	.word	0x40021c00

08001b94 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b94:	b10a      	cbz	r2, 8001b9a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b96:	6181      	str	r1, [r0, #24]
 8001b98:	4770      	bx	lr
 8001b9a:	0409      	lsls	r1, r1, #16
 8001b9c:	e7fb      	b.n	8001b96 <HAL_GPIO_WritePin+0x2>
	...

08001ba0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ba0:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ba2:	4604      	mov	r4, r0
 8001ba4:	b908      	cbnz	r0, 8001baa <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001baa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001bae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001bb2:	b91b      	cbnz	r3, 8001bbc <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bb4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bb8:	f002 f844 	bl	8003c44 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bbc:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bbe:	2324      	movs	r3, #36	; 0x24
 8001bc0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001bc4:	6813      	ldr	r3, [r2, #0]
 8001bc6:	f023 0301 	bic.w	r3, r3, #1
 8001bca:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bcc:	f000 fce4 	bl	8002598 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bd0:	6865      	ldr	r5, [r4, #4]
 8001bd2:	4b41      	ldr	r3, [pc, #260]	; (8001cd8 <HAL_I2C_Init+0x138>)
 8001bd4:	429d      	cmp	r5, r3
 8001bd6:	d84d      	bhi.n	8001c74 <HAL_I2C_Init+0xd4>
 8001bd8:	4b40      	ldr	r3, [pc, #256]	; (8001cdc <HAL_I2C_Init+0x13c>)
 8001bda:	4298      	cmp	r0, r3
 8001bdc:	d9e3      	bls.n	8001ba6 <HAL_I2C_Init+0x6>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bde:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001be0:	493f      	ldr	r1, [pc, #252]	; (8001ce0 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001be2:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001be4:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001be8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bec:	430b      	orrs	r3, r1
 8001bee:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bf0:	6a13      	ldr	r3, [r2, #32]
 8001bf2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bf6:	3101      	adds	r1, #1
 8001bf8:	4319      	orrs	r1, r3
 8001bfa:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bfc:	69d1      	ldr	r1, [r2, #28]
 8001bfe:	4b36      	ldr	r3, [pc, #216]	; (8001cd8 <HAL_I2C_Init+0x138>)
 8001c00:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001c04:	429d      	cmp	r5, r3
 8001c06:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001c0a:	f100 30ff 	add.w	r0, r0, #4294967295
 8001c0e:	d848      	bhi.n	8001ca2 <HAL_I2C_Init+0x102>
 8001c10:	006d      	lsls	r5, r5, #1
 8001c12:	fbb0 f0f5 	udiv	r0, r0, r5
 8001c16:	3001      	adds	r0, #1
 8001c18:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	bf38      	it	cc
 8001c20:	2304      	movcc	r3, #4
 8001c22:	430b      	orrs	r3, r1
 8001c24:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c26:	6811      	ldr	r1, [r2, #0]
 8001c28:	6a20      	ldr	r0, [r4, #32]
 8001c2a:	69e3      	ldr	r3, [r4, #28]
 8001c2c:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001c30:	4303      	orrs	r3, r0
 8001c32:	430b      	orrs	r3, r1
 8001c34:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c36:	6891      	ldr	r1, [r2, #8]
 8001c38:	68e0      	ldr	r0, [r4, #12]
 8001c3a:	6923      	ldr	r3, [r4, #16]
 8001c3c:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001c40:	4303      	orrs	r3, r0
 8001c42:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001c46:	430b      	orrs	r3, r1
 8001c48:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c4a:	68d1      	ldr	r1, [r2, #12]
 8001c4c:	69a0      	ldr	r0, [r4, #24]
 8001c4e:	6963      	ldr	r3, [r4, #20]
 8001c50:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001c54:	4303      	orrs	r3, r0
 8001c56:	430b      	orrs	r3, r1
 8001c58:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c5a:	6813      	ldr	r3, [r2, #0]
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c62:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001c64:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c66:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c68:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c6c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c6e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8001c72:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c74:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <HAL_I2C_Init+0x144>)
 8001c76:	4298      	cmp	r0, r3
 8001c78:	d995      	bls.n	8001ba6 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c7a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001c7c:	4e18      	ldr	r6, [pc, #96]	; (8001ce0 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c7e:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001c80:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c88:	4333      	orrs	r3, r6
 8001c8a:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c8c:	6a13      	ldr	r3, [r2, #32]
 8001c8e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001c92:	4371      	muls	r1, r6
 8001c94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c98:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001c9c:	fbb1 f1f6 	udiv	r1, r1, r6
 8001ca0:	e7a9      	b.n	8001bf6 <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ca2:	68a3      	ldr	r3, [r4, #8]
 8001ca4:	b953      	cbnz	r3, 8001cbc <HAL_I2C_Init+0x11c>
 8001ca6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001caa:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cae:	1c43      	adds	r3, r0, #1
 8001cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb4:	b16b      	cbz	r3, 8001cd2 <HAL_I2C_Init+0x132>
 8001cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cba:	e7b2      	b.n	8001c22 <HAL_I2C_Init+0x82>
 8001cbc:	2319      	movs	r3, #25
 8001cbe:	436b      	muls	r3, r5
 8001cc0:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cc4:	1c43      	adds	r3, r0, #1
 8001cc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cca:	b113      	cbz	r3, 8001cd2 <HAL_I2C_Init+0x132>
 8001ccc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cd0:	e7a7      	b.n	8001c22 <HAL_I2C_Init+0x82>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e7a5      	b.n	8001c22 <HAL_I2C_Init+0x82>
 8001cd6:	bf00      	nop
 8001cd8:	000186a0 	.word	0x000186a0
 8001cdc:	001e847f 	.word	0x001e847f
 8001ce0:	000f4240 	.word	0x000f4240
 8001ce4:	003d08ff 	.word	0x003d08ff

08001ce8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ce8:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	2a20      	cmp	r2, #32
{
 8001cf0:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cf2:	d116      	bne.n	8001d22 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cf4:	2324      	movs	r3, #36	; 0x24
 8001cf6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cfa:	6803      	ldr	r3, [r0, #0]
 8001cfc:	681c      	ldr	r4, [r3, #0]
 8001cfe:	f024 0401 	bic.w	r4, r4, #1
 8001d02:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8001d04:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001d06:	f024 0410 	bic.w	r4, r4, #16
 8001d0a:	625c      	str	r4, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8001d0c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001d0e:	4321      	orrs	r1, r4
 8001d10:	6259      	str	r1, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8001d12:	6819      	ldr	r1, [r3, #0]
 8001d14:	f041 0101 	orr.w	r1, r1, #1
 8001d18:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d1a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_OK;
 8001d1e:	2000      	movs	r0, #0
 8001d20:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001d22:	2002      	movs	r0, #2
  }
}
 8001d24:	bd10      	pop	{r4, pc}

08001d26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d26:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d28:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8001d2c:	b2e4      	uxtb	r4, r4
 8001d2e:	2c20      	cmp	r4, #32
 8001d30:	d116      	bne.n	8001d60 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d32:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d34:	2324      	movs	r3, #36	; 0x24
 8001d36:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8001d3a:	6815      	ldr	r5, [r2, #0]
 8001d3c:	f025 0501 	bic.w	r5, r5, #1
 8001d40:	6015      	str	r5, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8001d42:	6a55      	ldr	r5, [r2, #36]	; 0x24

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8001d44:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001d48:	402b      	ands	r3, r5

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8001d4a:	430b      	orrs	r3, r1

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	6253      	str	r3, [r2, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8001d50:	6813      	ldr	r3, [r2, #0]
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d58:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d

    return HAL_OK;
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    return HAL_BUSY;
 8001d60:	2002      	movs	r0, #2
  }
}
 8001d62:	bd30      	pop	{r4, r5, pc}

08001d64 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001d68:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001d6a:	6804      	ldr	r4, [r0, #0]
 8001d6c:	684f      	ldr	r7, [r1, #4]
 8001d6e:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001d70:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8001d74:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001d78:	3284      	adds	r2, #132	; 0x84
 8001d7a:	18a3      	adds	r3, r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001d7c:	f10e 0601 	add.w	r6, lr, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001d80:	6858      	ldr	r0, [r3, #4]
 8001d82:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8001d86:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001d88:	68e0      	ldr	r0, [r4, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001d8a:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001d8e:	f3c0 400b 	ubfx	r0, r0, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001d92:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001d94:	4430      	add	r0, r6
 8001d96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001d9a:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8001d9c:	68e0      	ldr	r0, [r4, #12]
 8001d9e:	68cd      	ldr	r5, [r1, #12]
 8001da0:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8001da4:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001da6:	6898      	ldr	r0, [r3, #8]
 8001da8:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8001dac:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8001dae:	68e6      	ldr	r6, [r4, #12]
 8001db0:	6888      	ldr	r0, [r1, #8]
 8001db2:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8001db6:	3001      	adds	r0, #1
 8001db8:	4430      	add	r0, r6
 8001dba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001dbe:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001dc0:	6918      	ldr	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001dc2:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001dc4:	f020 0007 	bic.w	r0, r0, #7
 8001dc8:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001dca:	f04f 0c00 	mov.w	ip, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001dce:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001dd0:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8001dd2:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8001dd6:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001dda:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8001dde:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8001de2:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8001de6:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8001dea:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001dee:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8001df0:	6958      	ldr	r0, [r3, #20]
 8001df2:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8001df6:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8001df8:	6948      	ldr	r0, [r1, #20]
 8001dfa:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8001dfc:	69d8      	ldr	r0, [r3, #28]
 8001dfe:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8001e02:	f020 0007 	bic.w	r0, r0, #7
 8001e06:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8001e08:	6a08      	ldr	r0, [r1, #32]
 8001e0a:	69cd      	ldr	r5, [r1, #28]
 8001e0c:	4305      	orrs	r5, r0
 8001e0e:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001e10:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001e12:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001e14:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001e18:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001e1a:	b31e      	cbz	r6, 8001e64 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8001e1c:	2e01      	cmp	r6, #1
 8001e1e:	d023      	beq.n	8001e68 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001e20:	1eb0      	subs	r0, r6, #2
 8001e22:	2802      	cmp	r0, #2
 8001e24:	d922      	bls.n	8001e6c <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001e26:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8001e28:	bf0c      	ite	eq
 8001e2a:	2002      	moveq	r0, #2
 8001e2c:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001e2e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8001e30:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8001e34:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001e36:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001e38:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001e3a:	eba7 070e 	sub.w	r7, r7, lr
 8001e3e:	4345      	muls	r5, r0
 8001e40:	4378      	muls	r0, r7
 8001e42:	3003      	adds	r0, #3
 8001e44:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001e48:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001e4a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001e4c:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8001e50:	f020 0007 	bic.w	r0, r0, #7
 8001e54:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001e56:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001e58:	58a3      	ldr	r3, [r4, r2]
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	50a3      	str	r3, [r4, r2]
 8001e60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8001e64:	2004      	movs	r0, #4
 8001e66:	e7e2      	b.n	8001e2e <LTDC_SetConfig+0xca>
    tmp = 3U;
 8001e68:	2003      	movs	r0, #3
 8001e6a:	e7e0      	b.n	8001e2e <LTDC_SetConfig+0xca>
    tmp = 2U;
 8001e6c:	2002      	movs	r0, #2
 8001e6e:	e7de      	b.n	8001e2e <LTDC_SetConfig+0xca>

08001e70 <HAL_LTDC_Init>:
{
 8001e70:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8001e72:	4604      	mov	r4, r0
 8001e74:	2800      	cmp	r0, #0
 8001e76:	d063      	beq.n	8001f40 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8001e78:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8001e7c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e80:	b91b      	cbnz	r3, 8001e8a <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8001e82:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8001e86:	f001 ff31 	bl	8003cec <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001e90:	6823      	ldr	r3, [r4, #0]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001e92:	68a0      	ldr	r0, [r4, #8]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001e94:	699a      	ldr	r2, [r3, #24]
 8001e96:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8001e9a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001e9c:	6862      	ldr	r2, [r4, #4]
 8001e9e:	6999      	ldr	r1, [r3, #24]
 8001ea0:	4302      	orrs	r2, r0
 8001ea2:	68e0      	ldr	r0, [r4, #12]
 8001ea4:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001ea6:	6920      	ldr	r0, [r4, #16]
 8001ea8:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	4924      	ldr	r1, [pc, #144]	; (8001f44 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8001eb2:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001eb4:	400a      	ands	r2, r1
 8001eb6:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001ebe:	69a0      	ldr	r0, [r4, #24]
 8001ec0:	4302      	orrs	r2, r0
 8001ec2:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001ec4:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8001ec6:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001ec8:	400a      	ands	r2, r1
 8001eca:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001ed2:	6a20      	ldr	r0, [r4, #32]
 8001ed4:	4302      	orrs	r2, r0
 8001ed6:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001ed8:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8001eda:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001edc:	400a      	ands	r2, r1
 8001ede:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8001ee0:	691a      	ldr	r2, [r3, #16]
 8001ee2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001ee6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001ee8:	4302      	orrs	r2, r0
 8001eea:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001eec:	695a      	ldr	r2, [r3, #20]
 8001eee:	4011      	ands	r1, r2
 8001ef0:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8001ef2:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8001ef4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8001ef6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001efa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001efc:	430a      	orrs	r2, r1
 8001efe:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001f00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8001f02:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8001f06:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001f0a:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8001f0e:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001f10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f12:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8001f16:	430a      	orrs	r2, r1
 8001f18:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8001f1c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001f20:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8001f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f24:	f042 0206 	orr.w	r2, r2, #6
 8001f28:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8001f2a:	699a      	ldr	r2, [r3, #24]
 8001f2c:	f042 0201 	orr.w	r2, r2, #1
 8001f30:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001f32:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8001f34:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001f36:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8001f3a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 8001f3e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001f40:	2001      	movs	r0, #1
}
 8001f42:	bd38      	pop	{r3, r4, r5, pc}
 8001f44:	f000f800 	.word	0xf000f800

08001f48 <HAL_LTDC_ErrorCallback>:
 8001f48:	4770      	bx	lr

08001f4a <HAL_LTDC_LineEventCallback>:
 8001f4a:	4770      	bx	lr

08001f4c <HAL_LTDC_ReloadEventCallback>:
{
 8001f4c:	4770      	bx	lr

08001f4e <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8001f4e:	6803      	ldr	r3, [r0, #0]
{
 8001f50:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8001f52:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8001f54:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8001f56:	0772      	lsls	r2, r6, #29
{
 8001f58:	4604      	mov	r4, r0
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8001f5a:	d514      	bpl.n	8001f86 <HAL_LTDC_IRQHandler+0x38>
 8001f5c:	0769      	lsls	r1, r5, #29
 8001f5e:	d512      	bpl.n	8001f86 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8001f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f62:	f022 0204 	bic.w	r2, r2, #4
 8001f66:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8001f68:	2204      	movs	r2, #4
 8001f6a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8001f6c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8001f78:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8001f7a:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001f7e:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8001f82:	f7ff ffe1 	bl	8001f48 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8001f86:	07b2      	lsls	r2, r6, #30
 8001f88:	d516      	bpl.n	8001fb8 <HAL_LTDC_IRQHandler+0x6a>
 8001f8a:	07ab      	lsls	r3, r5, #30
 8001f8c:	d514      	bpl.n	8001fb8 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8001f8e:	6823      	ldr	r3, [r4, #0]
 8001f90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f92:	f022 0202 	bic.w	r2, r2, #2
 8001f96:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8001f98:	2202      	movs	r2, #2
 8001f9a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8001f9c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001fac:	2300      	movs	r3, #0
 8001fae:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	f7ff ffc8 	bl	8001f48 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8001fb8:	07f0      	lsls	r0, r6, #31
 8001fba:	d510      	bpl.n	8001fde <HAL_LTDC_IRQHandler+0x90>
 8001fbc:	07e9      	lsls	r1, r5, #31
 8001fbe:	d50e      	bpl.n	8001fde <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8001fc0:	6823      	ldr	r3, [r4, #0]
 8001fc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fc4:	f022 0201 	bic.w	r2, r2, #1
 8001fc8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8001fca:	2201      	movs	r2, #1
 8001fcc:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8001fce:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8001fd0:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001fd4:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f7ff ffb6 	bl	8001f4a <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8001fde:	0732      	lsls	r2, r6, #28
 8001fe0:	d511      	bpl.n	8002006 <HAL_LTDC_IRQHandler+0xb8>
 8001fe2:	072b      	lsls	r3, r5, #28
 8001fe4:	d50f      	bpl.n	8002006 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8001fe6:	6823      	ldr	r3, [r4, #0]
 8001fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fea:	f022 0208 	bic.w	r2, r2, #8
 8001fee:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8001ff0:	2208      	movs	r2, #8
 8001ff2:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8002000:	4620      	mov	r0, r4
 8002002:	f7ff ffa3 	bl	8001f4c <HAL_LTDC_ReloadEventCallback>
 8002006:	bd70      	pop	{r4, r5, r6, pc}

08002008 <HAL_LTDC_ConfigLayer>:
{
 8002008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 800200a:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800200e:	2b01      	cmp	r3, #1
{
 8002010:	4606      	mov	r6, r0
 8002012:	468e      	mov	lr, r1
 8002014:	4694      	mov	ip, r2
 8002016:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 800201a:	d01d      	beq.n	8002058 <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800201c:	2434      	movs	r4, #52	; 0x34
 800201e:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002020:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002024:	fb04 6402 	mla	r4, r4, r2, r6
 8002028:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  __HAL_LOCK(hltdc);
 800202a:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800202c:	3438      	adds	r4, #56	; 0x38
  __HAL_LOCK(hltdc);
 800202e:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800203a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800203c:	682b      	ldr	r3, [r5, #0]
 800203e:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002040:	4630      	mov	r0, r6
 8002042:	4662      	mov	r2, ip
 8002044:	4671      	mov	r1, lr
 8002046:	f7ff fe8d 	bl	8001d64 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800204a:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800204c:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800204e:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002050:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8002054:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8002058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800205c <HAL_LTDC_EnableDither>:
  __HAL_LOCK(hltdc);
 800205c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8002060:	2b01      	cmp	r3, #1
 8002062:	f04f 0302 	mov.w	r3, #2
 8002066:	d00c      	beq.n	8002082 <HAL_LTDC_EnableDither+0x26>
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8002068:	4a07      	ldr	r2, [pc, #28]	; (8002088 <HAL_LTDC_EnableDither+0x2c>)
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800206a:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800206e:	6993      	ldr	r3, [r2, #24]
 8002070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002074:	6193      	str	r3, [r2, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8002076:	2301      	movs	r3, #1
 8002078:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800207c:	2300      	movs	r3, #0
 800207e:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8002082:	4618      	mov	r0, r3
}
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	40016800 	.word	0x40016800

0800208c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800208c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	9301      	str	r3, [sp, #4]
 8002092:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002094:	4c18      	ldr	r4, [pc, #96]	; (80020f8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002096:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002098:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800209c:	641a      	str	r2, [r3, #64]	; 0x40
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a4:	9301      	str	r3, [sp, #4]
 80020a6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80020a8:	4b14      	ldr	r3, [pc, #80]	; (80020fc <HAL_PWREx_EnableOverDrive+0x70>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80020ae:	f7ff f8df 	bl	8001270 <HAL_GetTick>
 80020b2:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020b4:	6863      	ldr	r3, [r4, #4]
 80020b6:	03da      	lsls	r2, r3, #15
 80020b8:	d50b      	bpl.n	80020d2 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80020ba:	4b11      	ldr	r3, [pc, #68]	; (8002100 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020bc:	4c0e      	ldr	r4, [pc, #56]	; (80020f8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80020be:	2201      	movs	r2, #1
 80020c0:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80020c2:	f7ff f8d5 	bl	8001270 <HAL_GetTick>
 80020c6:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020c8:	6863      	ldr	r3, [r4, #4]
 80020ca:	039b      	lsls	r3, r3, #14
 80020cc:	d50a      	bpl.n	80020e4 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80020ce:	2000      	movs	r0, #0
 80020d0:	e006      	b.n	80020e0 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020d2:	f7ff f8cd 	bl	8001270 <HAL_GetTick>
 80020d6:	1b40      	subs	r0, r0, r5
 80020d8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80020dc:	d9ea      	bls.n	80020b4 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 80020de:	2003      	movs	r0, #3
}
 80020e0:	b003      	add	sp, #12
 80020e2:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020e4:	f7ff f8c4 	bl	8001270 <HAL_GetTick>
 80020e8:	1b40      	subs	r0, r0, r5
 80020ea:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80020ee:	d9eb      	bls.n	80020c8 <HAL_PWREx_EnableOverDrive+0x3c>
 80020f0:	e7f5      	b.n	80020de <HAL_PWREx_EnableOverDrive+0x52>
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40007000 	.word	0x40007000
 80020fc:	420e0040 	.word	0x420e0040
 8002100:	420e0044 	.word	0x420e0044

08002104 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002104:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002108:	4604      	mov	r4, r0
 800210a:	b918      	cbnz	r0, 8002114 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800210c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800210e:	b002      	add	sp, #8
 8002110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002114:	6803      	ldr	r3, [r0, #0]
 8002116:	07dd      	lsls	r5, r3, #31
 8002118:	d410      	bmi.n	800213c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800211a:	6823      	ldr	r3, [r4, #0]
 800211c:	0798      	lsls	r0, r3, #30
 800211e:	d458      	bmi.n	80021d2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002120:	6823      	ldr	r3, [r4, #0]
 8002122:	071a      	lsls	r2, r3, #28
 8002124:	f100 809a 	bmi.w	800225c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002128:	6823      	ldr	r3, [r4, #0]
 800212a:	075b      	lsls	r3, r3, #29
 800212c:	f100 80b8 	bmi.w	80022a0 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002130:	69a2      	ldr	r2, [r4, #24]
 8002132:	2a00      	cmp	r2, #0
 8002134:	f040 8119 	bne.w	800236a <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8002138:	2000      	movs	r0, #0
 800213a:	e7e8      	b.n	800210e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800213c:	4ba6      	ldr	r3, [pc, #664]	; (80023d8 <HAL_RCC_OscConfig+0x2d4>)
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	f002 020c 	and.w	r2, r2, #12
 8002144:	2a04      	cmp	r2, #4
 8002146:	d007      	beq.n	8002158 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800214e:	2a08      	cmp	r2, #8
 8002150:	d10a      	bne.n	8002168 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	0259      	lsls	r1, r3, #9
 8002156:	d507      	bpl.n	8002168 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002158:	4b9f      	ldr	r3, [pc, #636]	; (80023d8 <HAL_RCC_OscConfig+0x2d4>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	039a      	lsls	r2, r3, #14
 800215e:	d5dc      	bpl.n	800211a <HAL_RCC_OscConfig+0x16>
 8002160:	6863      	ldr	r3, [r4, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1d9      	bne.n	800211a <HAL_RCC_OscConfig+0x16>
 8002166:	e7d1      	b.n	800210c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002168:	6863      	ldr	r3, [r4, #4]
 800216a:	4d9b      	ldr	r5, [pc, #620]	; (80023d8 <HAL_RCC_OscConfig+0x2d4>)
 800216c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002170:	d111      	bne.n	8002196 <HAL_RCC_OscConfig+0x92>
 8002172:	682b      	ldr	r3, [r5, #0]
 8002174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002178:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800217a:	f7ff f879 	bl	8001270 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217e:	4d96      	ldr	r5, [pc, #600]	; (80023d8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002180:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	682b      	ldr	r3, [r5, #0]
 8002184:	039b      	lsls	r3, r3, #14
 8002186:	d4c8      	bmi.n	800211a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002188:	f7ff f872 	bl	8001270 <HAL_GetTick>
 800218c:	1b80      	subs	r0, r0, r6
 800218e:	2864      	cmp	r0, #100	; 0x64
 8002190:	d9f7      	bls.n	8002182 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8002192:	2003      	movs	r0, #3
 8002194:	e7bb      	b.n	800210e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002196:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800219a:	d104      	bne.n	80021a6 <HAL_RCC_OscConfig+0xa2>
 800219c:	682b      	ldr	r3, [r5, #0]
 800219e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021a2:	602b      	str	r3, [r5, #0]
 80021a4:	e7e5      	b.n	8002172 <HAL_RCC_OscConfig+0x6e>
 80021a6:	682a      	ldr	r2, [r5, #0]
 80021a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80021ac:	602a      	str	r2, [r5, #0]
 80021ae:	682a      	ldr	r2, [r5, #0]
 80021b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021b4:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1df      	bne.n	800217a <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80021ba:	f7ff f859 	bl	8001270 <HAL_GetTick>
 80021be:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c0:	682b      	ldr	r3, [r5, #0]
 80021c2:	039f      	lsls	r7, r3, #14
 80021c4:	d5a9      	bpl.n	800211a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021c6:	f7ff f853 	bl	8001270 <HAL_GetTick>
 80021ca:	1b80      	subs	r0, r0, r6
 80021cc:	2864      	cmp	r0, #100	; 0x64
 80021ce:	d9f7      	bls.n	80021c0 <HAL_RCC_OscConfig+0xbc>
 80021d0:	e7df      	b.n	8002192 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021d2:	4b81      	ldr	r3, [pc, #516]	; (80023d8 <HAL_RCC_OscConfig+0x2d4>)
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	f012 0f0c 	tst.w	r2, #12
 80021da:	d007      	beq.n	80021ec <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021e2:	2a08      	cmp	r2, #8
 80021e4:	d111      	bne.n	800220a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	025e      	lsls	r6, r3, #9
 80021ea:	d40e      	bmi.n	800220a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ec:	4b7a      	ldr	r3, [pc, #488]	; (80023d8 <HAL_RCC_OscConfig+0x2d4>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	0795      	lsls	r5, r2, #30
 80021f2:	d502      	bpl.n	80021fa <HAL_RCC_OscConfig+0xf6>
 80021f4:	68e2      	ldr	r2, [r4, #12]
 80021f6:	2a01      	cmp	r2, #1
 80021f8:	d188      	bne.n	800210c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	6921      	ldr	r1, [r4, #16]
 80021fe:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002202:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002206:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002208:	e78a      	b.n	8002120 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800220a:	68e2      	ldr	r2, [r4, #12]
 800220c:	4b73      	ldr	r3, [pc, #460]	; (80023dc <HAL_RCC_OscConfig+0x2d8>)
 800220e:	b1b2      	cbz	r2, 800223e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8002210:	2201      	movs	r2, #1
 8002212:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002214:	f7ff f82c 	bl	8001270 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002218:	4d6f      	ldr	r5, [pc, #444]	; (80023d8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800221a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221c:	682b      	ldr	r3, [r5, #0]
 800221e:	0798      	lsls	r0, r3, #30
 8002220:	d507      	bpl.n	8002232 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002222:	682b      	ldr	r3, [r5, #0]
 8002224:	6922      	ldr	r2, [r4, #16]
 8002226:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800222a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800222e:	602b      	str	r3, [r5, #0]
 8002230:	e776      	b.n	8002120 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002232:	f7ff f81d 	bl	8001270 <HAL_GetTick>
 8002236:	1b80      	subs	r0, r0, r6
 8002238:	2802      	cmp	r0, #2
 800223a:	d9ef      	bls.n	800221c <HAL_RCC_OscConfig+0x118>
 800223c:	e7a9      	b.n	8002192 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800223e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002240:	f7ff f816 	bl	8001270 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002244:	4d64      	ldr	r5, [pc, #400]	; (80023d8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002246:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002248:	682b      	ldr	r3, [r5, #0]
 800224a:	0799      	lsls	r1, r3, #30
 800224c:	f57f af68 	bpl.w	8002120 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002250:	f7ff f80e 	bl	8001270 <HAL_GetTick>
 8002254:	1b80      	subs	r0, r0, r6
 8002256:	2802      	cmp	r0, #2
 8002258:	d9f6      	bls.n	8002248 <HAL_RCC_OscConfig+0x144>
 800225a:	e79a      	b.n	8002192 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800225c:	6962      	ldr	r2, [r4, #20]
 800225e:	4b60      	ldr	r3, [pc, #384]	; (80023e0 <HAL_RCC_OscConfig+0x2dc>)
 8002260:	b17a      	cbz	r2, 8002282 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8002262:	2201      	movs	r2, #1
 8002264:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002266:	f7ff f803 	bl	8001270 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226a:	4d5b      	ldr	r5, [pc, #364]	; (80023d8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800226c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002270:	079f      	lsls	r7, r3, #30
 8002272:	f53f af59 	bmi.w	8002128 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002276:	f7fe fffb 	bl	8001270 <HAL_GetTick>
 800227a:	1b80      	subs	r0, r0, r6
 800227c:	2802      	cmp	r0, #2
 800227e:	d9f6      	bls.n	800226e <HAL_RCC_OscConfig+0x16a>
 8002280:	e787      	b.n	8002192 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8002282:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002284:	f7fe fff4 	bl	8001270 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002288:	4d53      	ldr	r5, [pc, #332]	; (80023d8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800228a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800228c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800228e:	0798      	lsls	r0, r3, #30
 8002290:	f57f af4a 	bpl.w	8002128 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002294:	f7fe ffec 	bl	8001270 <HAL_GetTick>
 8002298:	1b80      	subs	r0, r0, r6
 800229a:	2802      	cmp	r0, #2
 800229c:	d9f6      	bls.n	800228c <HAL_RCC_OscConfig+0x188>
 800229e:	e778      	b.n	8002192 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a0:	4b4d      	ldr	r3, [pc, #308]	; (80023d8 <HAL_RCC_OscConfig+0x2d4>)
 80022a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022a4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80022a8:	d128      	bne.n	80022fc <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80022aa:	9201      	str	r2, [sp, #4]
 80022ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022b2:	641a      	str	r2, [r3, #64]	; 0x40
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80022be:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c0:	4d48      	ldr	r5, [pc, #288]	; (80023e4 <HAL_RCC_OscConfig+0x2e0>)
 80022c2:	682b      	ldr	r3, [r5, #0]
 80022c4:	05d9      	lsls	r1, r3, #23
 80022c6:	d51b      	bpl.n	8002300 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c8:	68a3      	ldr	r3, [r4, #8]
 80022ca:	4d43      	ldr	r5, [pc, #268]	; (80023d8 <HAL_RCC_OscConfig+0x2d4>)
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d127      	bne.n	8002320 <HAL_RCC_OscConfig+0x21c>
 80022d0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80022d8:	f7fe ffca 	bl	8001270 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022dc:	4d3e      	ldr	r5, [pc, #248]	; (80023d8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80022de:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022e0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80022e6:	079b      	lsls	r3, r3, #30
 80022e8:	d539      	bpl.n	800235e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80022ea:	2e00      	cmp	r6, #0
 80022ec:	f43f af20 	beq.w	8002130 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f0:	4a39      	ldr	r2, [pc, #228]	; (80023d8 <HAL_RCC_OscConfig+0x2d4>)
 80022f2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80022f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f8:	6413      	str	r3, [r2, #64]	; 0x40
 80022fa:	e719      	b.n	8002130 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80022fc:	2600      	movs	r6, #0
 80022fe:	e7df      	b.n	80022c0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002300:	682b      	ldr	r3, [r5, #0]
 8002302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002306:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002308:	f7fe ffb2 	bl	8001270 <HAL_GetTick>
 800230c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230e:	682b      	ldr	r3, [r5, #0]
 8002310:	05da      	lsls	r2, r3, #23
 8002312:	d4d9      	bmi.n	80022c8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002314:	f7fe ffac 	bl	8001270 <HAL_GetTick>
 8002318:	1bc0      	subs	r0, r0, r7
 800231a:	2802      	cmp	r0, #2
 800231c:	d9f7      	bls.n	800230e <HAL_RCC_OscConfig+0x20a>
 800231e:	e738      	b.n	8002192 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002320:	2b05      	cmp	r3, #5
 8002322:	d104      	bne.n	800232e <HAL_RCC_OscConfig+0x22a>
 8002324:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002326:	f043 0304 	orr.w	r3, r3, #4
 800232a:	672b      	str	r3, [r5, #112]	; 0x70
 800232c:	e7d0      	b.n	80022d0 <HAL_RCC_OscConfig+0x1cc>
 800232e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002330:	f022 0201 	bic.w	r2, r2, #1
 8002334:	672a      	str	r2, [r5, #112]	; 0x70
 8002336:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002338:	f022 0204 	bic.w	r2, r2, #4
 800233c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1ca      	bne.n	80022d8 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8002342:	f7fe ff95 	bl	8001270 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002346:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800234a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800234c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800234e:	0798      	lsls	r0, r3, #30
 8002350:	d5cb      	bpl.n	80022ea <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002352:	f7fe ff8d 	bl	8001270 <HAL_GetTick>
 8002356:	1bc0      	subs	r0, r0, r7
 8002358:	4540      	cmp	r0, r8
 800235a:	d9f7      	bls.n	800234c <HAL_RCC_OscConfig+0x248>
 800235c:	e719      	b.n	8002192 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800235e:	f7fe ff87 	bl	8001270 <HAL_GetTick>
 8002362:	1bc0      	subs	r0, r0, r7
 8002364:	4540      	cmp	r0, r8
 8002366:	d9bd      	bls.n	80022e4 <HAL_RCC_OscConfig+0x1e0>
 8002368:	e713      	b.n	8002192 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800236a:	4d1b      	ldr	r5, [pc, #108]	; (80023d8 <HAL_RCC_OscConfig+0x2d4>)
 800236c:	68ab      	ldr	r3, [r5, #8]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	2b08      	cmp	r3, #8
 8002374:	f43f aeca 	beq.w	800210c <HAL_RCC_OscConfig+0x8>
 8002378:	4e1b      	ldr	r6, [pc, #108]	; (80023e8 <HAL_RCC_OscConfig+0x2e4>)
 800237a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800237c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800237e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002380:	d134      	bne.n	80023ec <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8002382:	f7fe ff75 	bl	8001270 <HAL_GetTick>
 8002386:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002388:	682b      	ldr	r3, [r5, #0]
 800238a:	0199      	lsls	r1, r3, #6
 800238c:	d41e      	bmi.n	80023cc <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800238e:	6a22      	ldr	r2, [r4, #32]
 8002390:	69e3      	ldr	r3, [r4, #28]
 8002392:	4313      	orrs	r3, r2
 8002394:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002396:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800239a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800239c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80023a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a2:	4c0d      	ldr	r4, [pc, #52]	; (80023d8 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023a4:	0852      	lsrs	r2, r2, #1
 80023a6:	3a01      	subs	r2, #1
 80023a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80023ac:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80023ae:	2301      	movs	r3, #1
 80023b0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80023b2:	f7fe ff5d 	bl	8001270 <HAL_GetTick>
 80023b6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b8:	6823      	ldr	r3, [r4, #0]
 80023ba:	019a      	lsls	r2, r3, #6
 80023bc:	f53f aebc 	bmi.w	8002138 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c0:	f7fe ff56 	bl	8001270 <HAL_GetTick>
 80023c4:	1b40      	subs	r0, r0, r5
 80023c6:	2802      	cmp	r0, #2
 80023c8:	d9f6      	bls.n	80023b8 <HAL_RCC_OscConfig+0x2b4>
 80023ca:	e6e2      	b.n	8002192 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023cc:	f7fe ff50 	bl	8001270 <HAL_GetTick>
 80023d0:	1bc0      	subs	r0, r0, r7
 80023d2:	2802      	cmp	r0, #2
 80023d4:	d9d8      	bls.n	8002388 <HAL_RCC_OscConfig+0x284>
 80023d6:	e6dc      	b.n	8002192 <HAL_RCC_OscConfig+0x8e>
 80023d8:	40023800 	.word	0x40023800
 80023dc:	42470000 	.word	0x42470000
 80023e0:	42470e80 	.word	0x42470e80
 80023e4:	40007000 	.word	0x40007000
 80023e8:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80023ec:	f7fe ff40 	bl	8001270 <HAL_GetTick>
 80023f0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f2:	682b      	ldr	r3, [r5, #0]
 80023f4:	019b      	lsls	r3, r3, #6
 80023f6:	f57f ae9f 	bpl.w	8002138 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fa:	f7fe ff39 	bl	8001270 <HAL_GetTick>
 80023fe:	1b00      	subs	r0, r0, r4
 8002400:	2802      	cmp	r0, #2
 8002402:	d9f6      	bls.n	80023f2 <HAL_RCC_OscConfig+0x2ee>
 8002404:	e6c5      	b.n	8002192 <HAL_RCC_OscConfig+0x8e>
 8002406:	bf00      	nop

08002408 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002408:	4913      	ldr	r1, [pc, #76]	; (8002458 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800240a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800240c:	688b      	ldr	r3, [r1, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	2b04      	cmp	r3, #4
 8002414:	d003      	beq.n	800241e <HAL_RCC_GetSysClockFreq+0x16>
 8002416:	2b08      	cmp	r3, #8
 8002418:	d003      	beq.n	8002422 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800241a:	4810      	ldr	r0, [pc, #64]	; (800245c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800241c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800241e:	4810      	ldr	r0, [pc, #64]	; (8002460 <HAL_RCC_GetSysClockFreq+0x58>)
 8002420:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002422:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002424:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002426:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002428:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800242c:	bf14      	ite	ne
 800242e:	480c      	ldrne	r0, [pc, #48]	; (8002460 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002430:	480a      	ldreq	r0, [pc, #40]	; (800245c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002432:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002436:	bf18      	it	ne
 8002438:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800243a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800243e:	fba1 0100 	umull	r0, r1, r1, r0
 8002442:	f7fd fed3 	bl	80001ec <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002446:	4b04      	ldr	r3, [pc, #16]	; (8002458 <HAL_RCC_GetSysClockFreq+0x50>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800244e:	3301      	adds	r3, #1
 8002450:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8002452:	fbb0 f0f3 	udiv	r0, r0, r3
 8002456:	bd08      	pop	{r3, pc}
 8002458:	40023800 	.word	0x40023800
 800245c:	00f42400 	.word	0x00f42400
 8002460:	007a1200 	.word	0x007a1200

08002464 <HAL_RCC_ClockConfig>:
{
 8002464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002468:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800246a:	4604      	mov	r4, r0
 800246c:	b910      	cbnz	r0, 8002474 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800246e:	2001      	movs	r0, #1
 8002470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002474:	4b44      	ldr	r3, [pc, #272]	; (8002588 <HAL_RCC_ClockConfig+0x124>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	f002 020f 	and.w	r2, r2, #15
 800247c:	428a      	cmp	r2, r1
 800247e:	d328      	bcc.n	80024d2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002480:	6821      	ldr	r1, [r4, #0]
 8002482:	078f      	lsls	r7, r1, #30
 8002484:	d42d      	bmi.n	80024e2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002486:	07c8      	lsls	r0, r1, #31
 8002488:	d440      	bmi.n	800250c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800248a:	4b3f      	ldr	r3, [pc, #252]	; (8002588 <HAL_RCC_ClockConfig+0x124>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	f002 020f 	and.w	r2, r2, #15
 8002492:	4295      	cmp	r5, r2
 8002494:	d366      	bcc.n	8002564 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002496:	6822      	ldr	r2, [r4, #0]
 8002498:	0751      	lsls	r1, r2, #29
 800249a:	d46c      	bmi.n	8002576 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800249c:	0713      	lsls	r3, r2, #28
 800249e:	d507      	bpl.n	80024b0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024a0:	4a3a      	ldr	r2, [pc, #232]	; (800258c <HAL_RCC_ClockConfig+0x128>)
 80024a2:	6921      	ldr	r1, [r4, #16]
 80024a4:	6893      	ldr	r3, [r2, #8]
 80024a6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80024aa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80024ae:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024b0:	f7ff ffaa 	bl	8002408 <HAL_RCC_GetSysClockFreq>
 80024b4:	4b35      	ldr	r3, [pc, #212]	; (800258c <HAL_RCC_ClockConfig+0x128>)
 80024b6:	4a36      	ldr	r2, [pc, #216]	; (8002590 <HAL_RCC_ClockConfig+0x12c>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80024be:	5cd3      	ldrb	r3, [r2, r3]
 80024c0:	40d8      	lsrs	r0, r3
 80024c2:	4b34      	ldr	r3, [pc, #208]	; (8002594 <HAL_RCC_ClockConfig+0x130>)
 80024c4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80024c6:	2000      	movs	r0, #0
 80024c8:	f001 fdec 	bl	80040a4 <HAL_InitTick>
  return HAL_OK;
 80024cc:	2000      	movs	r0, #0
 80024ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d2:	b2ca      	uxtb	r2, r1
 80024d4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 030f 	and.w	r3, r3, #15
 80024dc:	4299      	cmp	r1, r3
 80024de:	d1c6      	bne.n	800246e <HAL_RCC_ClockConfig+0xa>
 80024e0:	e7ce      	b.n	8002480 <HAL_RCC_ClockConfig+0x1c>
 80024e2:	4b2a      	ldr	r3, [pc, #168]	; (800258c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024e8:	bf1e      	ittt	ne
 80024ea:	689a      	ldrne	r2, [r3, #8]
 80024ec:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80024f0:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f2:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024f4:	bf42      	ittt	mi
 80024f6:	689a      	ldrmi	r2, [r3, #8]
 80024f8:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80024fc:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	68a0      	ldr	r0, [r4, #8]
 8002502:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002506:	4302      	orrs	r2, r0
 8002508:	609a      	str	r2, [r3, #8]
 800250a:	e7bc      	b.n	8002486 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250c:	6862      	ldr	r2, [r4, #4]
 800250e:	4b1f      	ldr	r3, [pc, #124]	; (800258c <HAL_RCC_ClockConfig+0x128>)
 8002510:	2a01      	cmp	r2, #1
 8002512:	d11d      	bne.n	8002550 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251a:	d0a8      	beq.n	800246e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800251c:	4e1b      	ldr	r6, [pc, #108]	; (800258c <HAL_RCC_ClockConfig+0x128>)
 800251e:	68b3      	ldr	r3, [r6, #8]
 8002520:	f023 0303 	bic.w	r3, r3, #3
 8002524:	4313      	orrs	r3, r2
 8002526:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002528:	f7fe fea2 	bl	8001270 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800252c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002530:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002532:	68b3      	ldr	r3, [r6, #8]
 8002534:	6862      	ldr	r2, [r4, #4]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800253e:	d0a4      	beq.n	800248a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002540:	f7fe fe96 	bl	8001270 <HAL_GetTick>
 8002544:	1bc0      	subs	r0, r0, r7
 8002546:	4540      	cmp	r0, r8
 8002548:	d9f3      	bls.n	8002532 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800254a:	2003      	movs	r0, #3
}
 800254c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002550:	1e91      	subs	r1, r2, #2
 8002552:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002554:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002556:	d802      	bhi.n	800255e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002558:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800255c:	e7dd      	b.n	800251a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255e:	f013 0f02 	tst.w	r3, #2
 8002562:	e7da      	b.n	800251a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002564:	b2ea      	uxtb	r2, r5
 8002566:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	429d      	cmp	r5, r3
 8002570:	f47f af7d 	bne.w	800246e <HAL_RCC_ClockConfig+0xa>
 8002574:	e78f      	b.n	8002496 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002576:	4905      	ldr	r1, [pc, #20]	; (800258c <HAL_RCC_ClockConfig+0x128>)
 8002578:	68e0      	ldr	r0, [r4, #12]
 800257a:	688b      	ldr	r3, [r1, #8]
 800257c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002580:	4303      	orrs	r3, r0
 8002582:	608b      	str	r3, [r1, #8]
 8002584:	e78a      	b.n	800249c <HAL_RCC_ClockConfig+0x38>
 8002586:	bf00      	nop
 8002588:	40023c00 	.word	0x40023c00
 800258c:	40023800 	.word	0x40023800
 8002590:	08005d2b 	.word	0x08005d2b
 8002594:	20000048 	.word	0x20000048

08002598 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002598:	4b04      	ldr	r3, [pc, #16]	; (80025ac <HAL_RCC_GetPCLK1Freq+0x14>)
 800259a:	4a05      	ldr	r2, [pc, #20]	; (80025b0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80025a2:	5cd3      	ldrb	r3, [r2, r3]
 80025a4:	4a03      	ldr	r2, [pc, #12]	; (80025b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80025a6:	6810      	ldr	r0, [r2, #0]
}
 80025a8:	40d8      	lsrs	r0, r3
 80025aa:	4770      	bx	lr
 80025ac:	40023800 	.word	0x40023800
 80025b0:	08005d3b 	.word	0x08005d3b
 80025b4:	20000048 	.word	0x20000048

080025b8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025b8:	4b04      	ldr	r3, [pc, #16]	; (80025cc <HAL_RCC_GetPCLK2Freq+0x14>)
 80025ba:	4a05      	ldr	r2, [pc, #20]	; (80025d0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80025c2:	5cd3      	ldrb	r3, [r2, r3]
 80025c4:	4a03      	ldr	r2, [pc, #12]	; (80025d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80025c6:	6810      	ldr	r0, [r2, #0]
}
 80025c8:	40d8      	lsrs	r0, r3
 80025ca:	4770      	bx	lr
 80025cc:	40023800 	.word	0x40023800
 80025d0:	08005d3b 	.word	0x08005d3b
 80025d4:	20000048 	.word	0x20000048

080025d8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025d8:	230f      	movs	r3, #15
 80025da:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <HAL_RCC_GetClockConfig+0x34>)
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	f002 0203 	and.w	r2, r2, #3
 80025e4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80025ec:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80025f4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	08db      	lsrs	r3, r3, #3
 80025fa:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80025fe:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002600:	4b03      	ldr	r3, [pc, #12]	; (8002610 <HAL_RCC_GetClockConfig+0x38>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 030f 	and.w	r3, r3, #15
 8002608:	600b      	str	r3, [r1, #0]
 800260a:	4770      	bx	lr
 800260c:	40023800 	.word	0x40023800
 8002610:	40023c00 	.word	0x40023c00

08002614 <HAL_RCCEx_PeriphCLKConfig>:

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002614:	6803      	ldr	r3, [r0, #0]
{
 8002616:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002618:	079a      	lsls	r2, r3, #30
{
 800261a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800261c:	f040 8088 	bne.w	8002730 <HAL_RCCEx_PeriphCLKConfig+0x11c>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002620:	6823      	ldr	r3, [r4, #0]
 8002622:	f013 0f0c 	tst.w	r3, #12
 8002626:	d044      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002628:	4d80      	ldr	r5, [pc, #512]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x218>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800262a:	4e81      	ldr	r6, [pc, #516]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    __HAL_RCC_PLLSAI_DISABLE();
 800262c:	2300      	movs	r3, #0
 800262e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002630:	f7fe fe1e 	bl	8001270 <HAL_GetTick>
 8002634:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002636:	6833      	ldr	r3, [r6, #0]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	f100 80bd 	bmi.w	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800263e:	6821      	ldr	r1, [r4, #0]
 8002640:	074f      	lsls	r7, r1, #29
 8002642:	d515      	bpl.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x5c>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002644:	6963      	ldr	r3, [r4, #20]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002646:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800264a:	6920      	ldr	r0, [r4, #16]
 800264c:	061b      	lsls	r3, r3, #24
 800264e:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8002652:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800265c:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8002660:	6a22      	ldr	r2, [r4, #32]
 8002662:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002666:	3a01      	subs	r2, #1
 8002668:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800266c:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002670:	070e      	lsls	r6, r1, #28
 8002672:	d514      	bpl.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002674:	4a6e      	ldr	r2, [pc, #440]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002676:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002678:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800267c:	6920      	ldr	r0, [r4, #16]
 800267e:	071b      	lsls	r3, r3, #28
 8002680:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002684:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002688:	430b      	orrs	r3, r1
 800268a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800268e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002692:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002694:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002698:	430b      	orrs	r3, r1
 800269a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800269e:	2301      	movs	r3, #1
 80026a0:	602b      	str	r3, [r5, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80026a2:	f7fe fde5 	bl	8001270 <HAL_GetTick>
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026a6:	4d62      	ldr	r5, [pc, #392]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    tickstart = HAL_GetTick();
 80026a8:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026aa:	682b      	ldr	r3, [r5, #0]
 80026ac:	0098      	lsls	r0, r3, #2
 80026ae:	f140 808a 	bpl.w	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026b2:	6823      	ldr	r3, [r4, #0]
 80026b4:	069a      	lsls	r2, r3, #26
 80026b6:	d531      	bpl.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80026b8:	2300      	movs	r3, #0
 80026ba:	9301      	str	r3, [sp, #4]
 80026bc:	4b5c      	ldr	r3, [pc, #368]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x21c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80026be:	4d5d      	ldr	r5, [pc, #372]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x220>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80026c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026c6:	641a      	str	r2, [r3, #64]	; 0x40
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ce:	9301      	str	r3, [sp, #4]
 80026d0:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80026d2:	682b      	ldr	r3, [r5, #0]
 80026d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d8:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026da:	f7fe fdc9 	bl	8001270 <HAL_GetTick>
 80026de:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80026e0:	682b      	ldr	r3, [r5, #0]
 80026e2:	05d9      	lsls	r1, r3, #23
 80026e4:	d576      	bpl.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026e6:	4d52      	ldr	r5, [pc, #328]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80026e8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026ea:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80026ee:	d177      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80026f2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80026f6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80026fa:	4a4d      	ldr	r2, [pc, #308]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80026fc:	f040 8091 	bne.w	8002822 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8002700:	6891      	ldr	r1, [r2, #8]
 8002702:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8002706:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800270a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800270e:	4301      	orrs	r1, r0
 8002710:	6091      	str	r1, [r2, #8]
 8002712:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002718:	430b      	orrs	r3, r1
 800271a:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800271c:	6820      	ldr	r0, [r4, #0]
 800271e:	f010 0010 	ands.w	r0, r0, #16
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002722:	bf1f      	itttt	ne
 8002724:	4b44      	ldrne	r3, [pc, #272]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002726:	f894 202c 	ldrbne.w	r2, [r4, #44]	; 0x2c
 800272a:	601a      	strne	r2, [r3, #0]
  }
  return HAL_OK;
 800272c:	2000      	movne	r0, #0
 800272e:	e041      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_PLLI2S_DISABLE();
 8002730:	4d42      	ldr	r5, [pc, #264]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x228>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002732:	4e3f      	ldr	r6, [pc, #252]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    __HAL_RCC_PLLI2S_DISABLE();
 8002734:	2300      	movs	r3, #0
 8002736:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002738:	f7fe fd9a 	bl	8001270 <HAL_GetTick>
 800273c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800273e:	6833      	ldr	r3, [r6, #0]
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	d431      	bmi.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002744:	6822      	ldr	r2, [r4, #0]
 8002746:	07d7      	lsls	r7, r2, #31
 8002748:	d506      	bpl.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800274a:	68a3      	ldr	r3, [r4, #8]
 800274c:	6861      	ldr	r1, [r4, #4]
 800274e:	071b      	lsls	r3, r3, #28
 8002750:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002754:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002758:	0790      	lsls	r0, r2, #30
 800275a:	d515      	bpl.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x174>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800275c:	4a34      	ldr	r2, [pc, #208]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800275e:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002760:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8002764:	6860      	ldr	r0, [r4, #4]
 8002766:	061b      	lsls	r3, r3, #24
 8002768:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800276c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002770:	430b      	orrs	r3, r1
 8002772:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002776:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800277a:	69e3      	ldr	r3, [r4, #28]
 800277c:	f021 011f 	bic.w	r1, r1, #31
 8002780:	3b01      	subs	r3, #1
 8002782:	430b      	orrs	r3, r1
 8002784:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLI2S_ENABLE();
 8002788:	2301      	movs	r3, #1
 800278a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800278c:	f7fe fd70 	bl	8001270 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002790:	4d27      	ldr	r5, [pc, #156]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    tickstart = HAL_GetTick();
 8002792:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002794:	682b      	ldr	r3, [r5, #0]
 8002796:	0119      	lsls	r1, r3, #4
 8002798:	f53f af42 	bmi.w	8002620 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800279c:	f7fe fd68 	bl	8001270 <HAL_GetTick>
 80027a0:	1b80      	subs	r0, r0, r6
 80027a2:	2802      	cmp	r0, #2
 80027a4:	d9f6      	bls.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80027a6:	e004      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80027a8:	f7fe fd62 	bl	8001270 <HAL_GetTick>
 80027ac:	1bc0      	subs	r0, r0, r7
 80027ae:	2802      	cmp	r0, #2
 80027b0:	d9c5      	bls.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        return HAL_TIMEOUT;
 80027b2:	2003      	movs	r0, #3
}
 80027b4:	b003      	add	sp, #12
 80027b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80027b8:	f7fe fd5a 	bl	8001270 <HAL_GetTick>
 80027bc:	1bc0      	subs	r0, r0, r7
 80027be:	2802      	cmp	r0, #2
 80027c0:	f67f af39 	bls.w	8002636 <HAL_RCCEx_PeriphCLKConfig+0x22>
 80027c4:	e7f5      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80027c6:	f7fe fd53 	bl	8001270 <HAL_GetTick>
 80027ca:	1b80      	subs	r0, r0, r6
 80027cc:	2802      	cmp	r0, #2
 80027ce:	f67f af6c 	bls.w	80026aa <HAL_RCCEx_PeriphCLKConfig+0x96>
 80027d2:	e7ee      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80027d4:	f7fe fd4c 	bl	8001270 <HAL_GetTick>
 80027d8:	1b80      	subs	r0, r0, r6
 80027da:	2802      	cmp	r0, #2
 80027dc:	d980      	bls.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80027de:	e7e8      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80027e2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d082      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027ea:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80027ec:	4a14      	ldr	r2, [pc, #80]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027ee:	2101      	movs	r1, #1
 80027f0:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027f6:	2100      	movs	r1, #0
 80027f8:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 80027fa:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027fc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80027fe:	07da      	lsls	r2, r3, #31
 8002800:	f57f af76 	bpl.w	80026f0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        tickstart = HAL_GetTick();
 8002804:	f7fe fd34 	bl	8001270 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002808:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800280c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800280e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002810:	079b      	lsls	r3, r3, #30
 8002812:	f53f af6d 	bmi.w	80026f0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002816:	f7fe fd2b 	bl	8001270 <HAL_GetTick>
 800281a:	1b80      	subs	r0, r0, r6
 800281c:	42b8      	cmp	r0, r7
 800281e:	d9f6      	bls.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002820:	e7c7      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002822:	6891      	ldr	r1, [r2, #8]
 8002824:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002828:	e772      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800282a:	bf00      	nop
 800282c:	42470070 	.word	0x42470070
 8002830:	40023800 	.word	0x40023800
 8002834:	40007000 	.word	0x40007000
 8002838:	424711e0 	.word	0x424711e0
 800283c:	42470068 	.word	0x42470068
 8002840:	42470e40 	.word	0x42470e40

08002844 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8002844:	b538      	push	{r3, r4, r5, lr}
 8002846:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8002848:	4604      	mov	r4, r0
 800284a:	b1c8      	cbz	r0, 8002880 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800284c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002850:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002854:	b91b      	cbnz	r3, 800285e <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8002856:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800285a:	f001 fbb3 	bl	8003fc4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800285e:	2302      	movs	r3, #2
 8002860:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002864:	1d21      	adds	r1, r4, #4
 8002866:	6820      	ldr	r0, [r4, #0]
 8002868:	f000 fe8a 	bl	8003580 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800286c:	6862      	ldr	r2, [r4, #4]
 800286e:	6820      	ldr	r0, [r4, #0]
 8002870:	4629      	mov	r1, r5
 8002872:	f000 fec4 	bl	80035fe <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002876:	2301      	movs	r3, #1
 8002878:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 800287c:	2000      	movs	r0, #0
 800287e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002880:	2001      	movs	r0, #1
}
 8002882:	bd38      	pop	{r3, r4, r5, pc}

08002884 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8002884:	b538      	push	{r3, r4, r5, lr}
 8002886:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8002888:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800288c:	b2c0      	uxtb	r0, r0
 800288e:	2802      	cmp	r0, #2
{
 8002890:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8002892:	d00d      	beq.n	80028b0 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002894:	2302      	movs	r3, #2
 8002896:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800289a:	6820      	ldr	r0, [r4, #0]
 800289c:	f000 fef7 	bl	800368e <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80028a0:	682b      	ldr	r3, [r5, #0]
 80028a2:	2b02      	cmp	r3, #2
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80028a4:	bf0c      	ite	eq
 80028a6:	2305      	moveq	r3, #5
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80028a8:	2301      	movne	r3, #1
 80028aa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80028ae:	2000      	movs	r0, #0
}
 80028b0:	bd38      	pop	{r3, r4, r5, pc}

080028b2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80028b2:	b510      	push	{r4, lr}
 80028b4:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80028b6:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80028ba:	b2c0      	uxtb	r0, r0
 80028bc:	2802      	cmp	r0, #2
 80028be:	d009      	beq.n	80028d4 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80028c0:	2302      	movs	r3, #2
 80028c2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80028c6:	6820      	ldr	r0, [r4, #0]
 80028c8:	f000 ff06 	bl	80036d8 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80028cc:	2301      	movs	r3, #1
 80028ce:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 80028d2:	2000      	movs	r0, #0
}
 80028d4:	bd10      	pop	{r4, pc}

080028d6 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80028d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d8:	4604      	mov	r4, r0
 80028da:	460e      	mov	r6, r1
 80028dc:	4615      	mov	r5, r2
 80028de:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028e0:	6821      	ldr	r1, [r4, #0]
 80028e2:	688a      	ldr	r2, [r1, #8]
 80028e4:	ea36 0302 	bics.w	r3, r6, r2
 80028e8:	d001      	beq.n	80028ee <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80028ea:	2000      	movs	r0, #0
}
 80028ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80028ee:	1c6b      	adds	r3, r5, #1
 80028f0:	d0f7      	beq.n	80028e2 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80028f2:	f7fe fcbd 	bl	8001270 <HAL_GetTick>
 80028f6:	1bc0      	subs	r0, r0, r7
 80028f8:	4285      	cmp	r5, r0
 80028fa:	d8f1      	bhi.n	80028e0 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028fc:	6823      	ldr	r3, [r4, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002904:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002906:	6862      	ldr	r2, [r4, #4]
 8002908:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800290c:	d10a      	bne.n	8002924 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 800290e:	68a2      	ldr	r2, [r4, #8]
 8002910:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002914:	d002      	beq.n	800291c <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002916:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800291a:	d103      	bne.n	8002924 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002922:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002924:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002926:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800292a:	d107      	bne.n	800293c <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800293a:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800293c:	2301      	movs	r3, #1
 800293e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8002942:	2300      	movs	r3, #0
 8002944:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8002948:	2003      	movs	r0, #3
 800294a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800294c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800294c:	b538      	push	{r3, r4, r5, lr}
 800294e:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002950:	6842      	ldr	r2, [r0, #4]
 8002952:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8002956:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002958:	d11f      	bne.n	800299a <SPI_EndRxTransaction+0x4e>
 800295a:	6882      	ldr	r2, [r0, #8]
 800295c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002960:	d002      	beq.n	8002968 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002962:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002966:	d107      	bne.n	8002978 <SPI_EndRxTransaction+0x2c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002968:	6825      	ldr	r5, [r4, #0]
 800296a:	6828      	ldr	r0, [r5, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800296c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 8002970:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8002974:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002976:	d007      	beq.n	8002988 <SPI_EndRxTransaction+0x3c>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002978:	460a      	mov	r2, r1
 800297a:	2180      	movs	r1, #128	; 0x80
 800297c:	4620      	mov	r0, r4
 800297e:	f7ff ffaa 	bl	80028d6 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8002982:	b920      	cbnz	r0, 800298e <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8002984:	2000      	movs	r0, #0
 8002986:	bd38      	pop	{r3, r4, r5, pc}
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002988:	460a      	mov	r2, r1
 800298a:	2101      	movs	r1, #1
 800298c:	e7f6      	b.n	800297c <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800298e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002990:	f043 0320 	orr.w	r3, r3, #32
 8002994:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002996:	2003      	movs	r0, #3
 8002998:	bd38      	pop	{r3, r4, r5, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800299a:	460a      	mov	r2, r1
 800299c:	2101      	movs	r1, #1
 800299e:	e7ee      	b.n	800297e <SPI_EndRxTransaction+0x32>

080029a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80029a2:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80029a4:	4a13      	ldr	r2, [pc, #76]	; (80029f4 <SPI_EndRxTxTransaction+0x54>)
 80029a6:	4e14      	ldr	r6, [pc, #80]	; (80029f8 <SPI_EndRxTxTransaction+0x58>)
 80029a8:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029aa:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80029ac:	fbb5 f6f6 	udiv	r6, r5, r6
 80029b0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80029b4:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029b6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 80029ba:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80029bc:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029be:	d10d      	bne.n	80029dc <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029c0:	460a      	mov	r2, r1
 80029c2:	2180      	movs	r1, #128	; 0x80
 80029c4:	f7ff ff87 	bl	80028d6 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 80029c8:	b910      	cbnz	r0, 80029d0 <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 80029ca:	2000      	movs	r0, #0
}
 80029cc:	b002      	add	sp, #8
 80029ce:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80029d2:	f043 0320 	orr.w	r3, r3, #32
 80029d6:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80029d8:	2003      	movs	r0, #3
 80029da:	e7f7      	b.n	80029cc <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 80029dc:	9b01      	ldr	r3, [sp, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0f3      	beq.n	80029ca <SPI_EndRxTxTransaction+0x2a>
      count--;
 80029e2:	9b01      	ldr	r3, [sp, #4]
 80029e4:	3b01      	subs	r3, #1
 80029e6:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80029e8:	6823      	ldr	r3, [r4, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	061b      	lsls	r3, r3, #24
 80029ee:	d4f5      	bmi.n	80029dc <SPI_EndRxTxTransaction+0x3c>
 80029f0:	e7eb      	b.n	80029ca <SPI_EndRxTxTransaction+0x2a>
 80029f2:	bf00      	nop
 80029f4:	20000048 	.word	0x20000048
 80029f8:	016e3600 	.word	0x016e3600

080029fc <HAL_SPI_Init>:
{
 80029fc:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80029fe:	4604      	mov	r4, r0
 8002a00:	2800      	cmp	r0, #0
 8002a02:	d036      	beq.n	8002a72 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a04:	2300      	movs	r3, #0
 8002a06:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a08:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002a0c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a10:	b91b      	cbnz	r3, 8002a1a <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8002a12:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002a16:	f001 fa2f 	bl	8003e78 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8002a1a:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002a1c:	68a0      	ldr	r0, [r4, #8]
 8002a1e:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002a20:	2302      	movs	r3, #2
 8002a22:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002a26:	680b      	ldr	r3, [r1, #0]
 8002a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a2c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002a2e:	6863      	ldr	r3, [r4, #4]
 8002a30:	4303      	orrs	r3, r0
 8002a32:	68e0      	ldr	r0, [r4, #12]
 8002a34:	4303      	orrs	r3, r0
 8002a36:	6920      	ldr	r0, [r4, #16]
 8002a38:	4303      	orrs	r3, r0
 8002a3a:	6960      	ldr	r0, [r4, #20]
 8002a3c:	4303      	orrs	r3, r0
 8002a3e:	69e0      	ldr	r0, [r4, #28]
 8002a40:	4303      	orrs	r3, r0
 8002a42:	6a20      	ldr	r0, [r4, #32]
 8002a44:	4303      	orrs	r3, r0
 8002a46:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002a48:	4303      	orrs	r3, r0
 8002a4a:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8002a4e:	4303      	orrs	r3, r0
 8002a50:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002a52:	0c12      	lsrs	r2, r2, #16
 8002a54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a56:	f002 0204 	and.w	r2, r2, #4
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a5e:	69cb      	ldr	r3, [r1, #28]
 8002a60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a64:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a66:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002a68:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a6a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a6c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8002a70:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002a72:	2001      	movs	r0, #1
}
 8002a74:	bd10      	pop	{r4, pc}

08002a76 <HAL_SPI_DeInit>:
{
 8002a76:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8002a78:	4604      	mov	r4, r0
 8002a7a:	b180      	cbz	r0, 8002a9e <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 8002a7c:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002a84:	6813      	ldr	r3, [r2, #0]
 8002a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a8a:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8002a8c:	f001 fa34 	bl	8003ef8 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a90:	2000      	movs	r0, #0
 8002a92:	6560      	str	r0, [r4, #84]	; 0x54
  __HAL_UNLOCK(hspi);
 8002a94:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hspi->State = HAL_SPI_STATE_RESET;
 8002a98:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  return HAL_OK;
 8002a9c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002a9e:	2001      	movs	r0, #1
}
 8002aa0:	bd10      	pop	{r4, pc}

08002aa2 <HAL_SPI_Transmit>:
{
 8002aa2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002aa6:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002aa8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002aac:	2b01      	cmp	r3, #1
{
 8002aae:	4604      	mov	r4, r0
 8002ab0:	460d      	mov	r5, r1
 8002ab2:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8002ab4:	f000 809b 	beq.w	8002bee <HAL_SPI_Transmit+0x14c>
 8002ab8:	2301      	movs	r3, #1
 8002aba:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002abe:	f7fe fbd7 	bl	8001270 <HAL_GetTick>
 8002ac2:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002ac4:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002ac8:	b2c0      	uxtb	r0, r0
 8002aca:	2801      	cmp	r0, #1
 8002acc:	f040 808d 	bne.w	8002bea <HAL_SPI_Transmit+0x148>
  if ((pData == NULL) || (Size == 0U))
 8002ad0:	2d00      	cmp	r5, #0
 8002ad2:	d05d      	beq.n	8002b90 <HAL_SPI_Transmit+0xee>
 8002ad4:	f1b8 0f00 	cmp.w	r8, #0
 8002ad8:	d05a      	beq.n	8002b90 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ada:	2303      	movs	r3, #3
 8002adc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ae0:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ae2:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ae4:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ae6:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002ae8:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8002aec:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002aee:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002af0:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002af2:	6420      	str	r0, [r4, #64]	; 0x40
 8002af4:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002af6:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002af8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8002afc:	bf08      	it	eq
 8002afe:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8002b00:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8002b04:	bf04      	itt	eq
 8002b06:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8002b0a:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b0c:	6803      	ldr	r3, [r0, #0]
 8002b0e:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8002b10:	bf5e      	ittt	pl
 8002b12:	6803      	ldrpl	r3, [r0, #0]
 8002b14:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8002b18:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b1a:	68e3      	ldr	r3, [r4, #12]
 8002b1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b20:	6863      	ldr	r3, [r4, #4]
 8002b22:	d13e      	bne.n	8002ba2 <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b24:	b113      	cbz	r3, 8002b2c <HAL_SPI_Transmit+0x8a>
 8002b26:	f1b8 0f01 	cmp.w	r8, #1
 8002b2a:	d107      	bne.n	8002b3c <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b2c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002b30:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b32:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002b34:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002b3c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	b9a3      	cbnz	r3, 8002b6c <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b42:	463a      	mov	r2, r7
 8002b44:	4631      	mov	r1, r6
 8002b46:	4620      	mov	r0, r4
 8002b48:	f7ff ff2a 	bl	80029a0 <SPI_EndRxTxTransaction>
 8002b4c:	2800      	cmp	r0, #0
 8002b4e:	d149      	bne.n	8002be4 <HAL_SPI_Transmit+0x142>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b50:	68a3      	ldr	r3, [r4, #8]
 8002b52:	b933      	cbnz	r3, 8002b62 <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b54:	9301      	str	r3, [sp, #4]
 8002b56:	6823      	ldr	r3, [r4, #0]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	9201      	str	r2, [sp, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	9301      	str	r3, [sp, #4]
 8002b60:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b62:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8002b64:	3000      	adds	r0, #0
 8002b66:	bf18      	it	ne
 8002b68:	2001      	movne	r0, #1
 8002b6a:	e011      	b.n	8002b90 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b6c:	6822      	ldr	r2, [r4, #0]
 8002b6e:	6893      	ldr	r3, [r2, #8]
 8002b70:	0798      	lsls	r0, r3, #30
 8002b72:	d505      	bpl.n	8002b80 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b74:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b76:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002b7a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b7c:	6323      	str	r3, [r4, #48]	; 0x30
 8002b7e:	e7d9      	b.n	8002b34 <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b80:	f7fe fb76 	bl	8001270 <HAL_GetTick>
 8002b84:	1bc0      	subs	r0, r0, r7
 8002b86:	42b0      	cmp	r0, r6
 8002b88:	d3d8      	bcc.n	8002b3c <HAL_SPI_Transmit+0x9a>
 8002b8a:	1c71      	adds	r1, r6, #1
 8002b8c:	d0d6      	beq.n	8002b3c <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 8002b8e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002b90:	2301      	movs	r3, #1
 8002b92:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b96:	2300      	movs	r3, #0
 8002b98:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002b9c:	b002      	add	sp, #8
 8002b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ba2:	b113      	cbz	r3, 8002baa <HAL_SPI_Transmit+0x108>
 8002ba4:	f1b8 0f01 	cmp.w	r8, #1
 8002ba8:	d108      	bne.n	8002bbc <HAL_SPI_Transmit+0x11a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002baa:	782b      	ldrb	r3, [r5, #0]
 8002bac:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002bb4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002bbc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0be      	beq.n	8002b42 <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bc4:	6823      	ldr	r3, [r4, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	0792      	lsls	r2, r2, #30
 8002bca:	d503      	bpl.n	8002bd4 <HAL_SPI_Transmit+0x132>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bcc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002bce:	7812      	ldrb	r2, [r2, #0]
 8002bd0:	731a      	strb	r2, [r3, #12]
 8002bd2:	e7ec      	b.n	8002bae <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bd4:	f7fe fb4c 	bl	8001270 <HAL_GetTick>
 8002bd8:	1bc0      	subs	r0, r0, r7
 8002bda:	4286      	cmp	r6, r0
 8002bdc:	d8ee      	bhi.n	8002bbc <HAL_SPI_Transmit+0x11a>
 8002bde:	1c73      	adds	r3, r6, #1
 8002be0:	d0ec      	beq.n	8002bbc <HAL_SPI_Transmit+0x11a>
 8002be2:	e7d4      	b.n	8002b8e <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002be4:	2320      	movs	r3, #32
 8002be6:	6563      	str	r3, [r4, #84]	; 0x54
 8002be8:	e7b2      	b.n	8002b50 <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 8002bea:	2002      	movs	r0, #2
 8002bec:	e7d0      	b.n	8002b90 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 8002bee:	2002      	movs	r0, #2
 8002bf0:	e7d4      	b.n	8002b9c <HAL_SPI_Transmit+0xfa>

08002bf2 <HAL_SPI_TransmitReceive>:
{
 8002bf2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002bf6:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002bf8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8002bfc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8002bfe:	2b01      	cmp	r3, #1
{
 8002c00:	4604      	mov	r4, r0
 8002c02:	460d      	mov	r5, r1
 8002c04:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8002c06:	f000 80e2 	beq.w	8002dce <HAL_SPI_TransmitReceive+0x1dc>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002c10:	f7fe fb2e 	bl	8001270 <HAL_GetTick>
  tmp_state           = hspi->State;
 8002c14:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8002c18:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8002c1a:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c1c:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8002c1e:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c20:	d00a      	beq.n	8002c38 <HAL_SPI_TransmitReceive+0x46>
 8002c22:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8002c26:	f040 80d0 	bne.w	8002dca <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c2a:	68a0      	ldr	r0, [r4, #8]
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	f040 80cc 	bne.w	8002dca <HAL_SPI_TransmitReceive+0x1d8>
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	f040 80c9 	bne.w	8002dca <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c38:	2d00      	cmp	r5, #0
 8002c3a:	f000 80c4 	beq.w	8002dc6 <HAL_SPI_TransmitReceive+0x1d4>
 8002c3e:	f1b9 0f00 	cmp.w	r9, #0
 8002c42:	f000 80c0 	beq.w	8002dc6 <HAL_SPI_TransmitReceive+0x1d4>
 8002c46:	2e00      	cmp	r6, #0
 8002c48:	f000 80bd 	beq.w	8002dc6 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c4c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c50:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c54:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c56:	bf1c      	itt	ne
 8002c58:	2305      	movne	r3, #5
 8002c5a:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8002c62:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c64:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c66:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8002c68:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8002c6a:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c6c:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8002c6e:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c70:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002c72:	bf58      	it	pl
 8002c74:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c76:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8002c78:	bf58      	it	pl
 8002c7a:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8002c7e:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8002c80:	bf58      	it	pl
 8002c82:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c84:	68e2      	ldr	r2, [r4, #12]
 8002c86:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002c8a:	d158      	bne.n	8002d3e <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c8c:	b109      	cbz	r1, 8002c92 <HAL_SPI_TransmitReceive+0xa0>
 8002c8e:	2e01      	cmp	r6, #1
 8002c90:	d107      	bne.n	8002ca2 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c92:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002c96:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002c98:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c9a:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002ca2:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ca4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	b9ab      	cbnz	r3, 8002cd6 <HAL_SPI_TransmitReceive+0xe4>
 8002caa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	b993      	cbnz	r3, 8002cd6 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cb0:	4642      	mov	r2, r8
 8002cb2:	4639      	mov	r1, r7
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	f7ff fe73 	bl	80029a0 <SPI_EndRxTxTransaction>
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	f040 8081 	bne.w	8002dc2 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cc0:	68a3      	ldr	r3, [r4, #8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d132      	bne.n	8002d2c <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cc6:	6823      	ldr	r3, [r4, #0]
 8002cc8:	9001      	str	r0, [sp, #4]
 8002cca:	68da      	ldr	r2, [r3, #12]
 8002ccc:	9201      	str	r2, [sp, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	9301      	str	r3, [sp, #4]
 8002cd2:	9b01      	ldr	r3, [sp, #4]
 8002cd4:	e02a      	b.n	8002d2c <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cd6:	6822      	ldr	r2, [r4, #0]
 8002cd8:	6893      	ldr	r3, [r2, #8]
 8002cda:	0799      	lsls	r1, r3, #30
 8002cdc:	d50d      	bpl.n	8002cfa <HAL_SPI_TransmitReceive+0x108>
 8002cde:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	b153      	cbz	r3, 8002cfa <HAL_SPI_TransmitReceive+0x108>
 8002ce4:	b14d      	cbz	r5, 8002cfa <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ce6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ce8:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002cec:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cee:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002cf0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8002cf8:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cfa:	6893      	ldr	r3, [r2, #8]
 8002cfc:	07db      	lsls	r3, r3, #31
 8002cfe:	d50c      	bpl.n	8002d1a <HAL_SPI_TransmitReceive+0x128>
 8002d00:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	b14b      	cbz	r3, 8002d1a <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d08:	68d2      	ldr	r2, [r2, #12]
 8002d0a:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d0e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002d10:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002d18:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d1a:	f7fe faa9 	bl	8001270 <HAL_GetTick>
 8002d1e:	eba0 0008 	sub.w	r0, r0, r8
 8002d22:	4287      	cmp	r7, r0
 8002d24:	d8be      	bhi.n	8002ca4 <HAL_SPI_TransmitReceive+0xb2>
 8002d26:	1c7e      	adds	r6, r7, #1
 8002d28:	d0bc      	beq.n	8002ca4 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8002d2a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d32:	2300      	movs	r3, #0
 8002d34:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002d38:	b003      	add	sp, #12
 8002d3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d3e:	b109      	cbz	r1, 8002d44 <HAL_SPI_TransmitReceive+0x152>
 8002d40:	2e01      	cmp	r6, #1
 8002d42:	d108      	bne.n	8002d56 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d44:	782a      	ldrb	r2, [r5, #0]
 8002d46:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d48:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002d4e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002d56:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d58:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	b91b      	cbnz	r3, 8002d66 <HAL_SPI_TransmitReceive+0x174>
 8002d5e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0a4      	beq.n	8002cb0 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d66:	6822      	ldr	r2, [r4, #0]
 8002d68:	6893      	ldr	r3, [r2, #8]
 8002d6a:	0798      	lsls	r0, r3, #30
 8002d6c:	d50e      	bpl.n	8002d8c <HAL_SPI_TransmitReceive+0x19a>
 8002d6e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	b15b      	cbz	r3, 8002d8c <HAL_SPI_TransmitReceive+0x19a>
 8002d74:	b155      	cbz	r5, 8002d8c <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d76:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8002d7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002d7e:	3301      	adds	r3, #1
 8002d80:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002d82:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8002d8a:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d8c:	6822      	ldr	r2, [r4, #0]
 8002d8e:	6893      	ldr	r3, [r2, #8]
 8002d90:	07d9      	lsls	r1, r3, #31
 8002d92:	d50d      	bpl.n	8002db0 <HAL_SPI_TransmitReceive+0x1be>
 8002d94:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	b153      	cbz	r3, 8002db0 <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002d9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d9c:	68d2      	ldr	r2, [r2, #12]
 8002d9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002da0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002da2:	3301      	adds	r3, #1
 8002da4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002da6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002dae:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002db0:	f7fe fa5e 	bl	8001270 <HAL_GetTick>
 8002db4:	eba0 0008 	sub.w	r0, r0, r8
 8002db8:	4287      	cmp	r7, r0
 8002dba:	d8cd      	bhi.n	8002d58 <HAL_SPI_TransmitReceive+0x166>
 8002dbc:	1c7b      	adds	r3, r7, #1
 8002dbe:	d0cb      	beq.n	8002d58 <HAL_SPI_TransmitReceive+0x166>
 8002dc0:	e7b3      	b.n	8002d2a <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dc2:	2320      	movs	r3, #32
 8002dc4:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002dc6:	2001      	movs	r0, #1
 8002dc8:	e7b0      	b.n	8002d2c <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 8002dca:	2002      	movs	r0, #2
 8002dcc:	e7ae      	b.n	8002d2c <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 8002dce:	2002      	movs	r0, #2
 8002dd0:	e7b2      	b.n	8002d38 <HAL_SPI_TransmitReceive+0x146>

08002dd2 <HAL_SPI_Receive>:
{
 8002dd2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002dd6:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002dd8:	6843      	ldr	r3, [r0, #4]
 8002dda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8002dde:	4604      	mov	r4, r0
 8002de0:	4688      	mov	r8, r1
 8002de2:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002de4:	d10c      	bne.n	8002e00 <HAL_SPI_Receive+0x2e>
 8002de6:	6883      	ldr	r3, [r0, #8]
 8002de8:	b953      	cbnz	r3, 8002e00 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002dea:	2304      	movs	r3, #4
 8002dec:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002df0:	4613      	mov	r3, r2
 8002df2:	9500      	str	r5, [sp, #0]
 8002df4:	460a      	mov	r2, r1
 8002df6:	f7ff fefc 	bl	8002bf2 <HAL_SPI_TransmitReceive>
}
 8002dfa:	b002      	add	sp, #8
 8002dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8002e00:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d079      	beq.n	8002efc <HAL_SPI_Receive+0x12a>
 8002e08:	2301      	movs	r3, #1
 8002e0a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002e0e:	f7fe fa2f 	bl	8001270 <HAL_GetTick>
 8002e12:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002e14:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002e18:	b2c0      	uxtb	r0, r0
 8002e1a:	2801      	cmp	r0, #1
 8002e1c:	d16c      	bne.n	8002ef8 <HAL_SPI_Receive+0x126>
  if ((pData == NULL) || (Size == 0U))
 8002e1e:	f1b8 0f00 	cmp.w	r8, #0
 8002e22:	d057      	beq.n	8002ed4 <HAL_SPI_Receive+0x102>
 8002e24:	2f00      	cmp	r7, #0
 8002e26:	d055      	beq.n	8002ed4 <HAL_SPI_Receive+0x102>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e28:	2304      	movs	r3, #4
 8002e2a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e32:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8002e34:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8002e36:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002e38:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002e3a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e3c:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e3e:	68a3      	ldr	r3, [r4, #8]
  hspi->RxXferSize  = Size;
 8002e40:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e46:	6823      	ldr	r3, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e48:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
    SPI_1LINE_RX(hspi);
 8002e4c:	bf02      	ittt	eq
 8002e4e:	681a      	ldreq	r2, [r3, #0]
 8002e50:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 8002e54:	601a      	streq	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002e5a:	bf5e      	ittt	pl
 8002e5c:	681a      	ldrpl	r2, [r3, #0]
 8002e5e:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8002e62:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002e64:	68e3      	ldr	r3, [r4, #12]
 8002e66:	b1f3      	cbz	r3, 8002ea6 <HAL_SPI_Receive+0xd4>
    while (hspi->RxXferCount > 0U)
 8002e68:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	b1fb      	cbz	r3, 8002eae <HAL_SPI_Receive+0xdc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e6e:	6823      	ldr	r3, [r4, #0]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	07d2      	lsls	r2, r2, #31
 8002e74:	d535      	bpl.n	8002ee2 <HAL_SPI_Receive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e7a:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e7e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002e80:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002e88:	e7ee      	b.n	8002e68 <HAL_SPI_Receive+0x96>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e8a:	6823      	ldr	r3, [r4, #0]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	07d0      	lsls	r0, r2, #31
 8002e90:	d518      	bpl.n	8002ec4 <HAL_SPI_Receive+0xf2>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002e94:	7b1b      	ldrb	r3, [r3, #12]
 8002e96:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002e98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002e9e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8002ea6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1ed      	bne.n	8002e8a <HAL_SPI_Receive+0xb8>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002eae:	4632      	mov	r2, r6
 8002eb0:	4629      	mov	r1, r5
 8002eb2:	4620      	mov	r0, r4
 8002eb4:	f7ff fd4a 	bl	800294c <SPI_EndRxTransaction>
 8002eb8:	b9d8      	cbnz	r0, 8002ef2 <HAL_SPI_Receive+0x120>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002eba:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8002ebc:	3000      	adds	r0, #0
 8002ebe:	bf18      	it	ne
 8002ec0:	2001      	movne	r0, #1
 8002ec2:	e007      	b.n	8002ed4 <HAL_SPI_Receive+0x102>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ec4:	f7fe f9d4 	bl	8001270 <HAL_GetTick>
 8002ec8:	1b80      	subs	r0, r0, r6
 8002eca:	4285      	cmp	r5, r0
 8002ecc:	d8eb      	bhi.n	8002ea6 <HAL_SPI_Receive+0xd4>
 8002ece:	1c69      	adds	r1, r5, #1
 8002ed0:	d0e9      	beq.n	8002ea6 <HAL_SPI_Receive+0xd4>
          errorcode = HAL_TIMEOUT;
 8002ed2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002eda:	2300      	movs	r3, #0
 8002edc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8002ee0:	e78b      	b.n	8002dfa <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ee2:	f7fe f9c5 	bl	8001270 <HAL_GetTick>
 8002ee6:	1b80      	subs	r0, r0, r6
 8002ee8:	4285      	cmp	r5, r0
 8002eea:	d8bd      	bhi.n	8002e68 <HAL_SPI_Receive+0x96>
 8002eec:	1c6b      	adds	r3, r5, #1
 8002eee:	d0bb      	beq.n	8002e68 <HAL_SPI_Receive+0x96>
 8002ef0:	e7ef      	b.n	8002ed2 <HAL_SPI_Receive+0x100>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ef2:	2320      	movs	r3, #32
 8002ef4:	6563      	str	r3, [r4, #84]	; 0x54
 8002ef6:	e7e0      	b.n	8002eba <HAL_SPI_Receive+0xe8>
    errorcode = HAL_BUSY;
 8002ef8:	2002      	movs	r0, #2
 8002efa:	e7eb      	b.n	8002ed4 <HAL_SPI_Receive+0x102>
  __HAL_LOCK(hspi);
 8002efc:	2002      	movs	r0, #2
 8002efe:	e77c      	b.n	8002dfa <HAL_SPI_Receive+0x28>

08002f00 <HAL_SPI_GetState>:
  return hspi->State;
 8002f00:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8002f04:	4770      	bx	lr

08002f06 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f06:	6803      	ldr	r3, [r0, #0]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f16:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8002f18:	bf1e      	ittt	ne
 8002f1a:	681a      	ldrne	r2, [r3, #0]
 8002f1c:	f042 0201 	orrne.w	r2, r2, #1
 8002f20:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002f22:	2000      	movs	r0, #0
 8002f24:	4770      	bx	lr

08002f26 <HAL_TIM_OC_DelayElapsedCallback>:
 8002f26:	4770      	bx	lr

08002f28 <HAL_TIM_IC_CaptureCallback>:
 8002f28:	4770      	bx	lr

08002f2a <HAL_TIM_PWM_PulseFinishedCallback>:
 8002f2a:	4770      	bx	lr

08002f2c <HAL_TIM_TriggerCallback>:
 8002f2c:	4770      	bx	lr

08002f2e <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f2e:	6803      	ldr	r3, [r0, #0]
 8002f30:	691a      	ldr	r2, [r3, #16]
 8002f32:	0791      	lsls	r1, r2, #30
{
 8002f34:	b510      	push	{r4, lr}
 8002f36:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f38:	d50e      	bpl.n	8002f58 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	0792      	lsls	r2, r2, #30
 8002f3e:	d50b      	bpl.n	8002f58 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f40:	f06f 0202 	mvn.w	r2, #2
 8002f44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f46:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f48:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f4a:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f4c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f4e:	d077      	beq.n	8003040 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f50:	f7ff ffea 	bl	8002f28 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f54:	2300      	movs	r3, #0
 8002f56:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f58:	6823      	ldr	r3, [r4, #0]
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	0750      	lsls	r0, r2, #29
 8002f5e:	d510      	bpl.n	8002f82 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	0751      	lsls	r1, r2, #29
 8002f64:	d50d      	bpl.n	8002f82 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f66:	f06f 0204 	mvn.w	r2, #4
 8002f6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f6c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f6e:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f70:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f74:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f76:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f78:	d068      	beq.n	800304c <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002f7a:	f7ff ffd5 	bl	8002f28 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f82:	6823      	ldr	r3, [r4, #0]
 8002f84:	691a      	ldr	r2, [r3, #16]
 8002f86:	0712      	lsls	r2, r2, #28
 8002f88:	d50f      	bpl.n	8002faa <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	0710      	lsls	r0, r2, #28
 8002f8e:	d50c      	bpl.n	8002faa <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f90:	f06f 0208 	mvn.w	r2, #8
 8002f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f96:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f98:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f9a:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f9c:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f9e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fa0:	d05a      	beq.n	8003058 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa2:	f7ff ffc1 	bl	8002f28 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002faa:	6823      	ldr	r3, [r4, #0]
 8002fac:	691a      	ldr	r2, [r3, #16]
 8002fae:	06d2      	lsls	r2, r2, #27
 8002fb0:	d510      	bpl.n	8002fd4 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	06d0      	lsls	r0, r2, #27
 8002fb6:	d50d      	bpl.n	8002fd4 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fb8:	f06f 0210 	mvn.w	r2, #16
 8002fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fbe:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fc0:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fc2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fc6:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fc8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fca:	d04b      	beq.n	8003064 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002fcc:	f7ff ffac 	bl	8002f28 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fd4:	6823      	ldr	r3, [r4, #0]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	07d1      	lsls	r1, r2, #31
 8002fda:	d508      	bpl.n	8002fee <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	07d2      	lsls	r2, r2, #31
 8002fe0:	d505      	bpl.n	8002fee <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fe2:	f06f 0201 	mvn.w	r2, #1
 8002fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fe8:	4620      	mov	r0, r4
 8002fea:	f000 fde7 	bl	8003bbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fee:	6823      	ldr	r3, [r4, #0]
 8002ff0:	691a      	ldr	r2, [r3, #16]
 8002ff2:	0610      	lsls	r0, r2, #24
 8002ff4:	d508      	bpl.n	8003008 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	0611      	lsls	r1, r2, #24
 8002ffa:	d505      	bpl.n	8003008 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ffc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003002:	4620      	mov	r0, r4
 8003004:	f000 f973 	bl	80032ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003008:	6823      	ldr	r3, [r4, #0]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	0652      	lsls	r2, r2, #25
 800300e:	d508      	bpl.n	8003022 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	0650      	lsls	r0, r2, #25
 8003014:	d505      	bpl.n	8003022 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003016:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800301a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800301c:	4620      	mov	r0, r4
 800301e:	f7ff ff85 	bl	8002f2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003022:	6823      	ldr	r3, [r4, #0]
 8003024:	691a      	ldr	r2, [r3, #16]
 8003026:	0691      	lsls	r1, r2, #26
 8003028:	d522      	bpl.n	8003070 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	0692      	lsls	r2, r2, #26
 800302e:	d51f      	bpl.n	8003070 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003030:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003034:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003036:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800303c:	f000 b956 	b.w	80032ec <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003040:	f7ff ff71 	bl	8002f26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003044:	4620      	mov	r0, r4
 8003046:	f7ff ff70 	bl	8002f2a <HAL_TIM_PWM_PulseFinishedCallback>
 800304a:	e783      	b.n	8002f54 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800304c:	f7ff ff6b 	bl	8002f26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003050:	4620      	mov	r0, r4
 8003052:	f7ff ff6a 	bl	8002f2a <HAL_TIM_PWM_PulseFinishedCallback>
 8003056:	e792      	b.n	8002f7e <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003058:	f7ff ff65 	bl	8002f26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800305c:	4620      	mov	r0, r4
 800305e:	f7ff ff64 	bl	8002f2a <HAL_TIM_PWM_PulseFinishedCallback>
 8003062:	e7a0      	b.n	8002fa6 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003064:	f7ff ff5f 	bl	8002f26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003068:	4620      	mov	r0, r4
 800306a:	f7ff ff5e 	bl	8002f2a <HAL_TIM_PWM_PulseFinishedCallback>
 800306e:	e7af      	b.n	8002fd0 <HAL_TIM_IRQHandler+0xa2>
 8003070:	bd10      	pop	{r4, pc}
	...

08003074 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003074:	4a30      	ldr	r2, [pc, #192]	; (8003138 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8003076:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003078:	4290      	cmp	r0, r2
 800307a:	d012      	beq.n	80030a2 <TIM_Base_SetConfig+0x2e>
 800307c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003080:	d00f      	beq.n	80030a2 <TIM_Base_SetConfig+0x2e>
 8003082:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003086:	4290      	cmp	r0, r2
 8003088:	d00b      	beq.n	80030a2 <TIM_Base_SetConfig+0x2e>
 800308a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800308e:	4290      	cmp	r0, r2
 8003090:	d007      	beq.n	80030a2 <TIM_Base_SetConfig+0x2e>
 8003092:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003096:	4290      	cmp	r0, r2
 8003098:	d003      	beq.n	80030a2 <TIM_Base_SetConfig+0x2e>
 800309a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800309e:	4290      	cmp	r0, r2
 80030a0:	d119      	bne.n	80030d6 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80030a2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80030a8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030aa:	4a23      	ldr	r2, [pc, #140]	; (8003138 <TIM_Base_SetConfig+0xc4>)
 80030ac:	4290      	cmp	r0, r2
 80030ae:	d029      	beq.n	8003104 <TIM_Base_SetConfig+0x90>
 80030b0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80030b4:	d026      	beq.n	8003104 <TIM_Base_SetConfig+0x90>
 80030b6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80030ba:	4290      	cmp	r0, r2
 80030bc:	d022      	beq.n	8003104 <TIM_Base_SetConfig+0x90>
 80030be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030c2:	4290      	cmp	r0, r2
 80030c4:	d01e      	beq.n	8003104 <TIM_Base_SetConfig+0x90>
 80030c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030ca:	4290      	cmp	r0, r2
 80030cc:	d01a      	beq.n	8003104 <TIM_Base_SetConfig+0x90>
 80030ce:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80030d2:	4290      	cmp	r0, r2
 80030d4:	d016      	beq.n	8003104 <TIM_Base_SetConfig+0x90>
 80030d6:	4a19      	ldr	r2, [pc, #100]	; (800313c <TIM_Base_SetConfig+0xc8>)
 80030d8:	4290      	cmp	r0, r2
 80030da:	d013      	beq.n	8003104 <TIM_Base_SetConfig+0x90>
 80030dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030e0:	4290      	cmp	r0, r2
 80030e2:	d00f      	beq.n	8003104 <TIM_Base_SetConfig+0x90>
 80030e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030e8:	4290      	cmp	r0, r2
 80030ea:	d00b      	beq.n	8003104 <TIM_Base_SetConfig+0x90>
 80030ec:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80030f0:	4290      	cmp	r0, r2
 80030f2:	d007      	beq.n	8003104 <TIM_Base_SetConfig+0x90>
 80030f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030f8:	4290      	cmp	r0, r2
 80030fa:	d003      	beq.n	8003104 <TIM_Base_SetConfig+0x90>
 80030fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003100:	4290      	cmp	r0, r2
 8003102:	d103      	bne.n	800310c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003104:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800310a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800310c:	694a      	ldr	r2, [r1, #20]
 800310e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003112:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003114:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003116:	688b      	ldr	r3, [r1, #8]
 8003118:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800311a:	680b      	ldr	r3, [r1, #0]
 800311c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800311e:	4b06      	ldr	r3, [pc, #24]	; (8003138 <TIM_Base_SetConfig+0xc4>)
 8003120:	4298      	cmp	r0, r3
 8003122:	d003      	beq.n	800312c <TIM_Base_SetConfig+0xb8>
 8003124:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003128:	4298      	cmp	r0, r3
 800312a:	d101      	bne.n	8003130 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800312c:	690b      	ldr	r3, [r1, #16]
 800312e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003130:	2301      	movs	r3, #1
 8003132:	6143      	str	r3, [r0, #20]
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40010000 	.word	0x40010000
 800313c:	40014000 	.word	0x40014000

08003140 <HAL_TIM_Base_Init>:
{
 8003140:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003142:	4604      	mov	r4, r0
 8003144:	b1a0      	cbz	r0, 8003170 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003146:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800314a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800314e:	b91b      	cbnz	r3, 8003158 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003150:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003154:	f000 fee6 	bl	8003f24 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003158:	2302      	movs	r3, #2
 800315a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800315e:	6820      	ldr	r0, [r4, #0]
 8003160:	1d21      	adds	r1, r4, #4
 8003162:	f7ff ff87 	bl	8003074 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003166:	2301      	movs	r3, #1
 8003168:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800316c:	2000      	movs	r0, #0
 800316e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003170:	2001      	movs	r0, #1
}
 8003172:	bd10      	pop	{r4, pc}

08003174 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003174:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003176:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003178:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800317a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800317e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8003182:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003184:	6083      	str	r3, [r0, #8]
 8003186:	bd10      	pop	{r4, pc}

08003188 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003188:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800318c:	2b01      	cmp	r3, #1
{
 800318e:	b570      	push	{r4, r5, r6, lr}
 8003190:	4604      	mov	r4, r0
 8003192:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8003196:	d019      	beq.n	80031cc <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 8003198:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800319c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800319e:	2301      	movs	r3, #1
 80031a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80031a4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80031ae:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80031b0:	680b      	ldr	r3, [r1, #0]
 80031b2:	2b40      	cmp	r3, #64	; 0x40
 80031b4:	d065      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0xfa>
 80031b6:	d815      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x5c>
 80031b8:	2b10      	cmp	r3, #16
 80031ba:	d00c      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0x4e>
 80031bc:	d807      	bhi.n	80031ce <HAL_TIM_ConfigClockSource+0x46>
 80031be:	b153      	cbz	r3, 80031d6 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 80031c0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80031c2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80031c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80031c8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80031cc:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80031ce:	2b20      	cmp	r3, #32
 80031d0:	d001      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0x4e>
 80031d2:	2b30      	cmp	r3, #48	; 0x30
 80031d4:	d1f4      	bne.n	80031c0 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 80031d6:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031d8:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80031dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031e0:	4313      	orrs	r3, r2
 80031e2:	e01a      	b.n	800321a <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80031e4:	2b60      	cmp	r3, #96	; 0x60
 80031e6:	d034      	beq.n	8003252 <HAL_TIM_ConfigClockSource+0xca>
 80031e8:	d819      	bhi.n	800321e <HAL_TIM_ConfigClockSource+0x96>
 80031ea:	2b50      	cmp	r3, #80	; 0x50
 80031ec:	d1e8      	bne.n	80031c0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ee:	684a      	ldr	r2, [r1, #4]
 80031f0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80031f2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031f4:	6a05      	ldr	r5, [r0, #32]
 80031f6:	f025 0501 	bic.w	r5, r5, #1
 80031fa:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031fc:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031fe:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003202:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003206:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800320a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800320c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800320e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003210:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003216:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800321a:	6083      	str	r3, [r0, #8]
 800321c:	e7d0      	b.n	80031c0 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 800321e:	2b70      	cmp	r3, #112	; 0x70
 8003220:	d00c      	beq.n	800323c <HAL_TIM_ConfigClockSource+0xb4>
 8003222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003226:	d1cb      	bne.n	80031c0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8003228:	68cb      	ldr	r3, [r1, #12]
 800322a:	684a      	ldr	r2, [r1, #4]
 800322c:	6889      	ldr	r1, [r1, #8]
 800322e:	f7ff ffa1 	bl	8003174 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003232:	6822      	ldr	r2, [r4, #0]
 8003234:	6893      	ldr	r3, [r2, #8]
 8003236:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800323a:	e008      	b.n	800324e <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 800323c:	68cb      	ldr	r3, [r1, #12]
 800323e:	684a      	ldr	r2, [r1, #4]
 8003240:	6889      	ldr	r1, [r1, #8]
 8003242:	f7ff ff97 	bl	8003174 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003246:	6822      	ldr	r2, [r4, #0]
 8003248:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800324a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800324e:	6093      	str	r3, [r2, #8]
      break;
 8003250:	e7b6      	b.n	80031c0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003252:	684d      	ldr	r5, [r1, #4]
 8003254:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003256:	6a01      	ldr	r1, [r0, #32]
 8003258:	f021 0110 	bic.w	r1, r1, #16
 800325c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800325e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003260:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003262:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003266:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800326a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800326e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003272:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003274:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003276:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800327c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8003280:	e7cb      	b.n	800321a <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003282:	684a      	ldr	r2, [r1, #4]
 8003284:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003286:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003288:	6a05      	ldr	r5, [r0, #32]
 800328a:	f025 0501 	bic.w	r5, r5, #1
 800328e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003290:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003292:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003296:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800329a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800329e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80032a0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80032a2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80032a4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80032a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032aa:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80032ae:	e7b4      	b.n	800321a <HAL_TIM_ConfigClockSource+0x92>

080032b0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032b0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80032b4:	2b01      	cmp	r3, #1
{
 80032b6:	b530      	push	{r4, r5, lr}
 80032b8:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80032bc:	d014      	beq.n	80032e8 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032be:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80032c0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80032c4:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032c6:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032c8:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032ca:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 80032cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 80032d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032d4:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032d6:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032d8:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80032da:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032dc:	2301      	movs	r3, #1
 80032de:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032e2:	2300      	movs	r3, #0
 80032e4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80032e8:	4618      	mov	r0, r3

  return HAL_OK;
}
 80032ea:	bd30      	pop	{r4, r5, pc}

080032ec <HAL_TIMEx_CommutCallback>:
 80032ec:	4770      	bx	lr

080032ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032ee:	4770      	bx	lr

080032f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032f4:	6806      	ldr	r6, [r0, #0]
 80032f6:	68c2      	ldr	r2, [r0, #12]
 80032f8:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032fa:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003300:	4313      	orrs	r3, r2
 8003302:	6133      	str	r3, [r6, #16]
{
 8003304:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003306:	6883      	ldr	r3, [r0, #8]
 8003308:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800330a:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800330c:	4303      	orrs	r3, r0
 800330e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003310:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003314:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8003316:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800331a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 800331c:	4313      	orrs	r3, r2
 800331e:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003320:	6973      	ldr	r3, [r6, #20]
 8003322:	69a2      	ldr	r2, [r4, #24]
 8003324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003328:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800332a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800332e:	6173      	str	r3, [r6, #20]
 8003330:	4b7a      	ldr	r3, [pc, #488]	; (800351c <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003332:	d17c      	bne.n	800342e <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003334:	429e      	cmp	r6, r3
 8003336:	d003      	beq.n	8003340 <UART_SetConfig+0x50>
 8003338:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800333c:	429e      	cmp	r6, r3
 800333e:	d144      	bne.n	80033ca <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003340:	f7ff f93a 	bl	80025b8 <HAL_RCC_GetPCLK2Freq>
 8003344:	2519      	movs	r5, #25
 8003346:	fb05 f300 	mul.w	r3, r5, r0
 800334a:	6860      	ldr	r0, [r4, #4]
 800334c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003350:	0040      	lsls	r0, r0, #1
 8003352:	fbb3 f3f0 	udiv	r3, r3, r0
 8003356:	fbb3 f3f9 	udiv	r3, r3, r9
 800335a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800335e:	f7ff f92b 	bl	80025b8 <HAL_RCC_GetPCLK2Freq>
 8003362:	6863      	ldr	r3, [r4, #4]
 8003364:	4368      	muls	r0, r5
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	fbb0 f7f3 	udiv	r7, r0, r3
 800336c:	f7ff f924 	bl	80025b8 <HAL_RCC_GetPCLK2Freq>
 8003370:	6863      	ldr	r3, [r4, #4]
 8003372:	4368      	muls	r0, r5
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	fbb0 f3f3 	udiv	r3, r0, r3
 800337a:	fbb3 f3f9 	udiv	r3, r3, r9
 800337e:	fb09 7313 	mls	r3, r9, r3, r7
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	3332      	adds	r3, #50	; 0x32
 8003386:	fbb3 f3f9 	udiv	r3, r3, r9
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8003390:	f7ff f912 	bl	80025b8 <HAL_RCC_GetPCLK2Freq>
 8003394:	6862      	ldr	r2, [r4, #4]
 8003396:	4368      	muls	r0, r5
 8003398:	0052      	lsls	r2, r2, #1
 800339a:	fbb0 faf2 	udiv	sl, r0, r2
 800339e:	f7ff f90b 	bl	80025b8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80033a2:	6863      	ldr	r3, [r4, #4]
 80033a4:	4368      	muls	r0, r5
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ac:	fbb3 f3f9 	udiv	r3, r3, r9
 80033b0:	fb09 a313 	mls	r3, r9, r3, sl
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	3332      	adds	r3, #50	; 0x32
 80033b8:	fbb3 f3f9 	udiv	r3, r3, r9
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80033c2:	443b      	add	r3, r7
 80033c4:	60b3      	str	r3, [r6, #8]
 80033c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80033ca:	f7ff f8e5 	bl	8002598 <HAL_RCC_GetPCLK1Freq>
 80033ce:	2519      	movs	r5, #25
 80033d0:	fb05 f300 	mul.w	r3, r5, r0
 80033d4:	6860      	ldr	r0, [r4, #4]
 80033d6:	f04f 0964 	mov.w	r9, #100	; 0x64
 80033da:	0040      	lsls	r0, r0, #1
 80033dc:	fbb3 f3f0 	udiv	r3, r3, r0
 80033e0:	fbb3 f3f9 	udiv	r3, r3, r9
 80033e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80033e8:	f7ff f8d6 	bl	8002598 <HAL_RCC_GetPCLK1Freq>
 80033ec:	6863      	ldr	r3, [r4, #4]
 80033ee:	4368      	muls	r0, r5
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	fbb0 f7f3 	udiv	r7, r0, r3
 80033f6:	f7ff f8cf 	bl	8002598 <HAL_RCC_GetPCLK1Freq>
 80033fa:	6863      	ldr	r3, [r4, #4]
 80033fc:	4368      	muls	r0, r5
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	fbb0 f3f3 	udiv	r3, r0, r3
 8003404:	fbb3 f3f9 	udiv	r3, r3, r9
 8003408:	fb09 7313 	mls	r3, r9, r3, r7
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	3332      	adds	r3, #50	; 0x32
 8003410:	fbb3 f3f9 	udiv	r3, r3, r9
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800341a:	f7ff f8bd 	bl	8002598 <HAL_RCC_GetPCLK1Freq>
 800341e:	6862      	ldr	r2, [r4, #4]
 8003420:	4368      	muls	r0, r5
 8003422:	0052      	lsls	r2, r2, #1
 8003424:	fbb0 faf2 	udiv	sl, r0, r2
 8003428:	f7ff f8b6 	bl	8002598 <HAL_RCC_GetPCLK1Freq>
 800342c:	e7b9      	b.n	80033a2 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800342e:	429e      	cmp	r6, r3
 8003430:	d002      	beq.n	8003438 <UART_SetConfig+0x148>
 8003432:	4b3b      	ldr	r3, [pc, #236]	; (8003520 <UART_SetConfig+0x230>)
 8003434:	429e      	cmp	r6, r3
 8003436:	d140      	bne.n	80034ba <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003438:	f7ff f8be 	bl	80025b8 <HAL_RCC_GetPCLK2Freq>
 800343c:	6867      	ldr	r7, [r4, #4]
 800343e:	2519      	movs	r5, #25
 8003440:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003444:	fb05 f300 	mul.w	r3, r5, r0
 8003448:	00bf      	lsls	r7, r7, #2
 800344a:	fbb3 f3f7 	udiv	r3, r3, r7
 800344e:	fbb3 f3f9 	udiv	r3, r3, r9
 8003452:	011f      	lsls	r7, r3, #4
 8003454:	f7ff f8b0 	bl	80025b8 <HAL_RCC_GetPCLK2Freq>
 8003458:	6863      	ldr	r3, [r4, #4]
 800345a:	4368      	muls	r0, r5
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	fbb0 f8f3 	udiv	r8, r0, r3
 8003462:	f7ff f8a9 	bl	80025b8 <HAL_RCC_GetPCLK2Freq>
 8003466:	6863      	ldr	r3, [r4, #4]
 8003468:	4368      	muls	r0, r5
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003470:	fbb3 f3f9 	udiv	r3, r3, r9
 8003474:	fb09 8313 	mls	r3, r9, r3, r8
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	3332      	adds	r3, #50	; 0x32
 800347c:	fbb3 f3f9 	udiv	r3, r3, r9
 8003480:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8003484:	f7ff f898 	bl	80025b8 <HAL_RCC_GetPCLK2Freq>
 8003488:	6862      	ldr	r2, [r4, #4]
 800348a:	4368      	muls	r0, r5
 800348c:	0092      	lsls	r2, r2, #2
 800348e:	fbb0 faf2 	udiv	sl, r0, r2
 8003492:	f7ff f891 	bl	80025b8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003496:	6863      	ldr	r3, [r4, #4]
 8003498:	4368      	muls	r0, r5
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	fbb0 f3f3 	udiv	r3, r0, r3
 80034a0:	fbb3 f3f9 	udiv	r3, r3, r9
 80034a4:	fb09 a313 	mls	r3, r9, r3, sl
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	3332      	adds	r3, #50	; 0x32
 80034ac:	fbb3 f3f9 	udiv	r3, r3, r9
 80034b0:	f003 030f 	and.w	r3, r3, #15
 80034b4:	ea43 0308 	orr.w	r3, r3, r8
 80034b8:	e783      	b.n	80033c2 <UART_SetConfig+0xd2>
 80034ba:	f7ff f86d 	bl	8002598 <HAL_RCC_GetPCLK1Freq>
 80034be:	6867      	ldr	r7, [r4, #4]
 80034c0:	2519      	movs	r5, #25
 80034c2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80034c6:	fb05 f300 	mul.w	r3, r5, r0
 80034ca:	00bf      	lsls	r7, r7, #2
 80034cc:	fbb3 f3f7 	udiv	r3, r3, r7
 80034d0:	fbb3 f3f9 	udiv	r3, r3, r9
 80034d4:	011f      	lsls	r7, r3, #4
 80034d6:	f7ff f85f 	bl	8002598 <HAL_RCC_GetPCLK1Freq>
 80034da:	6863      	ldr	r3, [r4, #4]
 80034dc:	4368      	muls	r0, r5
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	fbb0 f8f3 	udiv	r8, r0, r3
 80034e4:	f7ff f858 	bl	8002598 <HAL_RCC_GetPCLK1Freq>
 80034e8:	6863      	ldr	r3, [r4, #4]
 80034ea:	4368      	muls	r0, r5
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80034f2:	fbb3 f3f9 	udiv	r3, r3, r9
 80034f6:	fb09 8313 	mls	r3, r9, r3, r8
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	3332      	adds	r3, #50	; 0x32
 80034fe:	fbb3 f3f9 	udiv	r3, r3, r9
 8003502:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8003506:	f7ff f847 	bl	8002598 <HAL_RCC_GetPCLK1Freq>
 800350a:	6862      	ldr	r2, [r4, #4]
 800350c:	4368      	muls	r0, r5
 800350e:	0092      	lsls	r2, r2, #2
 8003510:	fbb0 faf2 	udiv	sl, r0, r2
 8003514:	f7ff f840 	bl	8002598 <HAL_RCC_GetPCLK1Freq>
 8003518:	e7bd      	b.n	8003496 <UART_SetConfig+0x1a6>
 800351a:	bf00      	nop
 800351c:	40011000 	.word	0x40011000
 8003520:	40011400 	.word	0x40011400

08003524 <HAL_UART_Init>:
{
 8003524:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003526:	4604      	mov	r4, r0
 8003528:	b340      	cbz	r0, 800357c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800352a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800352e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003532:	b91b      	cbnz	r3, 800353c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003534:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003538:	f000 fd0c 	bl	8003f54 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800353c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800353e:	2324      	movs	r3, #36	; 0x24
 8003540:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003544:	68d3      	ldr	r3, [r2, #12]
 8003546:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800354a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800354c:	4620      	mov	r0, r4
 800354e:	f7ff fecf 	bl	80032f0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003552:	6823      	ldr	r3, [r4, #0]
 8003554:	691a      	ldr	r2, [r3, #16]
 8003556:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800355a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003562:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800356a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800356c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800356e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003570:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003572:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003576:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800357a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800357c:	2001      	movs	r0, #1
}
 800357e:	bd10      	pop	{r4, pc}

08003580 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8003580:	680b      	ldr	r3, [r1, #0]
 8003582:	684a      	ldr	r2, [r1, #4]
 8003584:	f8d1 c010 	ldr.w	ip, [r1, #16]
 8003588:	2b01      	cmp	r3, #1
{
 800358a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800358e:	6803      	ldr	r3, [r0, #0]
 8003590:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8003594:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8003598:	694d      	ldr	r5, [r1, #20]
 800359a:	698c      	ldr	r4, [r1, #24]
 800359c:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 80035a0:	6a0f      	ldr	r7, [r1, #32]
 80035a2:	6a4e      	ldr	r6, [r1, #36]	; 0x24
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80035a4:	d014      	beq.n	80035d0 <FMC_SDRAM_Init+0x50>
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80035a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80035aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80035ae:	431a      	orrs	r2, r3
 80035b0:	ea42 0209 	orr.w	r2, r2, r9
 80035b4:	ea42 0208 	orr.w	r2, r2, r8
 80035b8:	ea42 030c 	orr.w	r3, r2, ip
 80035bc:	432b      	orrs	r3, r5
 80035be:	4323      	orrs	r3, r4
 80035c0:	ea43 030e 	orr.w	r3, r3, lr
 80035c4:	433b      	orrs	r3, r7
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80035c6:	4333      	orrs	r3, r6
                                               Init->WriteProtection    |\
                                               Init->SDClockPeriod      |\
                                               Init->ReadBurst          |\
                                               Init->ReadPipeDelay
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80035c8:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }  
  
  return HAL_OK;
}
 80035ca:	2000      	movs	r0, #0
 80035cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80035d0:	6841      	ldr	r1, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80035d2:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 80035d6:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80035da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035de:	430a      	orrs	r2, r1
 80035e0:	ea43 030e 	orr.w	r3, r3, lr
 80035e4:	ea42 0209 	orr.w	r2, r2, r9
 80035e8:	433b      	orrs	r3, r7
 80035ea:	ea42 0208 	orr.w	r2, r2, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80035ee:	431e      	orrs	r6, r3
 80035f0:	ea42 030c 	orr.w	r3, r2, ip
 80035f4:	432b      	orrs	r3, r5
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80035f6:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80035f8:	6006      	str	r6, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80035fa:	6043      	str	r3, [r0, #4]
 80035fc:	e7e5      	b.n	80035ca <FMC_SDRAM_Init+0x4a>

080035fe <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80035fe:	2a01      	cmp	r2, #1
{
 8003600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003602:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8003606:	688f      	ldr	r7, [r1, #8]
 8003608:	690d      	ldr	r5, [r1, #16]
 800360a:	694e      	ldr	r6, [r1, #20]
 800360c:	e891 4008 	ldmia.w	r1, {r3, lr}
 8003610:	6989      	ldr	r1, [r1, #24]
  if (Bank != FMC_SDRAM_BANK2) 
 8003612:	d01b      	beq.n	800364c <FMC_SDRAM_Timing_Init+0x4e>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003614:	6882      	ldr	r2, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8003616:	f10e 3eff 	add.w	lr, lr, #4294967295
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800361a:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800361e:	3b01      	subs	r3, #1
 8003620:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 8003624:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8003626:	1e7b      	subs	r3, r7, #1
 8003628:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800362c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003630:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8003634:	3d01      	subs	r5, #1
 8003636:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800363a:	3e01      	subs	r6, #1
 800363c:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
                       (((Timing->RCDDelay)-1U) << 24U));
 8003640:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8003642:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003646:	6083      	str	r3, [r0, #8]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  return HAL_OK;
}
 8003648:	2000      	movs	r0, #0
 800364a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800364c:	6884      	ldr	r4, [r0, #8]
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800364e:	68c2      	ldr	r2, [r0, #12]
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8003650:	f10e 3eff 	add.w	lr, lr, #4294967295
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003654:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8003658:	3b01      	subs	r3, #1
 800365a:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 800365e:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8003660:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8003664:	1e7b      	subs	r3, r7, #1
 8003666:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800366a:	f10c 3cff 	add.w	ip, ip, #4294967295
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800366e:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8003672:	1e6b      	subs	r3, r5, #1
 8003674:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8003678:	3e01      	subs	r6, #1
 800367a:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800367e:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8003680:	ea44 5606 	orr.w	r6, r4, r6, lsl #20
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8003684:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003688:	6086      	str	r6, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800368a:	60c3      	str	r3, [r0, #12]
 800368c:	e7dc      	b.n	8003648 <FMC_SDRAM_Timing_Init+0x4a>

0800368e <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800368e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t tmpr = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	9301      	str	r3, [sp, #4]
{
 8003694:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8003696:	e891 000c 	ldmia.w	r1, {r2, r3}
 800369a:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
                    ((Command->ModeRegisterDefinition) << 9U)
 800369c:	68ca      	ldr	r2, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800369e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80036a2:	688a      	ldr	r2, [r1, #8]
 80036a4:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80036a6:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80036aa:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 80036ac:	9b01      	ldr	r3, [sp, #4]
 80036ae:	6103      	str	r3, [r0, #16]
{
 80036b0:	4604      	mov	r4, r0

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80036b2:	f7fd fddd 	bl	8001270 <HAL_GetTick>
 80036b6:	4606      	mov	r6, r0

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80036b8:	69a0      	ldr	r0, [r4, #24]
 80036ba:	f010 0020 	ands.w	r0, r0, #32
 80036be:	d003      	beq.n	80036c8 <FMC_SDRAM_SendCommand+0x3a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80036c0:	1c6b      	adds	r3, r5, #1
 80036c2:	d0f9      	beq.n	80036b8 <FMC_SDRAM_SendCommand+0x2a>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80036c4:	b915      	cbnz	r5, 80036cc <FMC_SDRAM_SendCommand+0x3e>
      {
        return HAL_TIMEOUT;
 80036c6:	2003      	movs	r0, #3
      }
    }
  }

  return HAL_OK;
}
 80036c8:	b002      	add	sp, #8
 80036ca:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80036cc:	f7fd fdd0 	bl	8001270 <HAL_GetTick>
 80036d0:	1b80      	subs	r0, r0, r6
 80036d2:	4285      	cmp	r5, r0
 80036d4:	d2f0      	bcs.n	80036b8 <FMC_SDRAM_SendCommand+0x2a>
 80036d6:	e7f6      	b.n	80036c6 <FMC_SDRAM_SendCommand+0x38>

080036d8 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80036d8:	6943      	ldr	r3, [r0, #20]
 80036da:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 80036de:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 80036e0:	2000      	movs	r0, #0
 80036e2:	4770      	bx	lr

080036e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036e4:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036e6:	2430      	movs	r4, #48	; 0x30
{
 80036e8:	b0a0      	sub	sp, #128	; 0x80
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036ea:	4622      	mov	r2, r4
 80036ec:	2100      	movs	r1, #0
 80036ee:	a808      	add	r0, sp, #32
 80036f0:	f000 fda4 	bl	800423c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036f4:	2214      	movs	r2, #20
 80036f6:	2100      	movs	r1, #0
 80036f8:	a803      	add	r0, sp, #12
 80036fa:	f000 fd9f 	bl	800423c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036fe:	2100      	movs	r1, #0
 8003700:	4622      	mov	r2, r4
 8003702:	a814      	add	r0, sp, #80	; 0x50
 8003704:	f000 fd9a 	bl	800423c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003708:	2400      	movs	r4, #0
 800370a:	4b21      	ldr	r3, [pc, #132]	; (8003790 <SystemClock_Config+0xac>)
 800370c:	9401      	str	r4, [sp, #4]
 800370e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003710:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003714:	641a      	str	r2, [r3, #64]	; 0x40
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371c:	9301      	str	r3, [sp, #4]
 800371e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003720:	4b1c      	ldr	r3, [pc, #112]	; (8003794 <SystemClock_Config+0xb0>)
 8003722:	9402      	str	r4, [sp, #8]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800372e:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003730:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003734:	9302      	str	r3, [sp, #8]
 8003736:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003738:	2301      	movs	r3, #1
 800373a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800373c:	2310      	movs	r3, #16
 800373e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003740:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003742:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003744:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003746:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 3;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003748:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800374a:	2303      	movs	r3, #3
 800374c:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800374e:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003750:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003752:	9610      	str	r6, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003754:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003756:	f7fe fcd5 	bl	8002104 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800375a:	f7fe fc97 	bl	800208c <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800375e:	230f      	movs	r3, #15
 8003760:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003762:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003766:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003768:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800376a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800376e:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003770:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003772:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003774:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003776:	f7fe fe75 	bl	8002464 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 216;
 800377a:	23d8      	movs	r3, #216	; 0xd8
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800377c:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800377e:	9614      	str	r6, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 216;
 8003780:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8003782:	951a      	str	r5, [sp, #104]	; 0x68
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8003784:	941d      	str	r4, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003786:	f7fe ff45 	bl	8002614 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800378a:	b020      	add	sp, #128	; 0x80
 800378c:	bd70      	pop	{r4, r5, r6, pc}
 800378e:	bf00      	nop
 8003790:	40023800 	.word	0x40023800
 8003794:	40007000 	.word	0x40007000

08003798 <main>:
{
 8003798:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800379c:	b099      	sub	sp, #100	; 0x64
	BSP_LCD_Init();
 800379e:	f7fd faa5 	bl	8000cec <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);
 80037a2:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80037a6:	2000      	movs	r0, #0
 80037a8:	f7fd f978 	bl	8000a9c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 80037ac:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80037b0:	2001      	movs	r0, #1
 80037b2:	f7fd f973 	bl	8000a9c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 80037b6:	2001      	movs	r0, #1
 80037b8:	f7fd f9b0 	bl	8000b1c <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 80037bc:	f7fd f9ea 	bl	8000b94 <BSP_LCD_DisplayOn>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80037c0:	48b2      	ldr	r0, [pc, #712]	; (8003a8c <main+0x2f4>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80037c2:	4db3      	ldr	r5, [pc, #716]	; (8003a90 <main+0x2f8>)
  hdma2d.Instance = DMA2D;
 80037c4:	f8df a304 	ldr.w	sl, [pc, #772]	; 8003acc <main+0x334>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80037c8:	f7fd f9ba 	bl	8000b40 <BSP_LCD_SetBackColor>
	BSP_LCD_Clear(LCD_COLOR_BLUE);
 80037cc:	48af      	ldr	r0, [pc, #700]	; (8003a8c <main+0x2f4>)
 80037ce:	f7fd f9c3 	bl	8000b58 <BSP_LCD_Clear>
  HAL_Init();
 80037d2:	f7fd fd27 	bl	8001224 <HAL_Init>
  SystemClock_Config();
 80037d6:	f7ff ff85 	bl	80036e4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037da:	2214      	movs	r2, #20
 80037dc:	2100      	movs	r1, #0
 80037de:	a80b      	add	r0, sp, #44	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037e0:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e2:	f000 fd2b 	bl	800423c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037e6:	4bab      	ldr	r3, [pc, #684]	; (8003a94 <main+0x2fc>)
 80037e8:	9401      	str	r4, [sp, #4]
 80037ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80037ec:	48aa      	ldr	r0, [pc, #680]	; (8003a98 <main+0x300>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ee:	f042 0204 	orr.w	r2, r2, #4
 80037f2:	631a      	str	r2, [r3, #48]	; 0x30
 80037f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037f6:	f002 0204 	and.w	r2, r2, #4
 80037fa:	9201      	str	r2, [sp, #4]
 80037fc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80037fe:	9402      	str	r4, [sp, #8]
 8003800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003802:	f042 0220 	orr.w	r2, r2, #32
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
 8003808:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800380a:	f002 0220 	and.w	r2, r2, #32
 800380e:	9202      	str	r2, [sp, #8]
 8003810:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003812:	9403      	str	r4, [sp, #12]
 8003814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003816:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800381a:	631a      	str	r2, [r3, #48]	; 0x30
 800381c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800381e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003822:	9203      	str	r2, [sp, #12]
 8003824:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003826:	9404      	str	r4, [sp, #16]
 8003828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	631a      	str	r2, [r3, #48]	; 0x30
 8003830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003832:	f002 0201 	and.w	r2, r2, #1
 8003836:	9204      	str	r2, [sp, #16]
 8003838:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800383a:	9405      	str	r4, [sp, #20]
 800383c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800383e:	f042 0202 	orr.w	r2, r2, #2
 8003842:	631a      	str	r2, [r3, #48]	; 0x30
 8003844:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003846:	f002 0202 	and.w	r2, r2, #2
 800384a:	9205      	str	r2, [sp, #20]
 800384c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800384e:	9406      	str	r4, [sp, #24]
 8003850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003852:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003856:	631a      	str	r2, [r3, #48]	; 0x30
 8003858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800385a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800385e:	9206      	str	r2, [sp, #24]
 8003860:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003862:	9407      	str	r4, [sp, #28]
 8003864:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003866:	f042 0210 	orr.w	r2, r2, #16
 800386a:	631a      	str	r2, [r3, #48]	; 0x30
 800386c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800386e:	f002 0210 	and.w	r2, r2, #16
 8003872:	9207      	str	r2, [sp, #28]
 8003874:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003876:	9408      	str	r4, [sp, #32]
 8003878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800387a:	f042 0208 	orr.w	r2, r2, #8
 800387e:	631a      	str	r2, [r3, #48]	; 0x30
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8003886:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003888:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800388a:	2116      	movs	r1, #22
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800388c:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800388e:	f7fe f981 	bl	8001b94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8003892:	4622      	mov	r2, r4
 8003894:	2180      	movs	r1, #128	; 0x80
 8003896:	4881      	ldr	r0, [pc, #516]	; (8003a9c <main+0x304>)
 8003898:	f7fe f97c 	bl	8001b94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800389c:	4622      	mov	r2, r4
 800389e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80038a2:	487f      	ldr	r0, [pc, #508]	; (8003aa0 <main+0x308>)
 80038a4:	f7fe f976 	bl	8001b94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80038a8:	4622      	mov	r2, r4
 80038aa:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80038ae:	487d      	ldr	r0, [pc, #500]	; (8003aa4 <main+0x30c>)
 80038b0:	f7fe f970 	bl	8001b94 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038b4:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80038b6:	2316      	movs	r3, #22
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038b8:	a90b      	add	r1, sp, #44	; 0x2c
 80038ba:	4877      	ldr	r0, [pc, #476]	; (8003a98 <main+0x300>)
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80038bc:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038be:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c0:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038c2:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038c4:	f7fd ffe0 	bl	8001888 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80038c8:	f248 0307 	movw	r3, #32775	; 0x8007
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038cc:	a90b      	add	r1, sp, #44	; 0x2c
 80038ce:	4873      	ldr	r0, [pc, #460]	; (8003a9c <main+0x304>)
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80038d0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80038d2:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d4:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038d6:	f7fd ffd7 	bl	8001888 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80038da:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80038dc:	a90b      	add	r1, sp, #44	; 0x2c
 80038de:	486f      	ldr	r0, [pc, #444]	; (8003a9c <main+0x304>)
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80038e0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e4:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038e6:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80038e8:	f7fd ffce 	bl	8001888 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80038ec:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80038ee:	a90b      	add	r1, sp, #44	; 0x2c
 80038f0:	4869      	ldr	r0, [pc, #420]	; (8003a98 <main+0x300>)
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80038f2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80038f4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f6:	940d      	str	r4, [sp, #52]	; 0x34

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80038f8:	2504      	movs	r5, #4
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80038fa:	f7fd ffc5 	bl	8001888 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80038fe:	a90b      	add	r1, sp, #44	; 0x2c
 8003900:	4869      	ldr	r0, [pc, #420]	; (8003aa8 <main+0x310>)
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003902:	950b      	str	r5, [sp, #44]	; 0x2c

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003904:	2602      	movs	r6, #2
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003906:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003908:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800390a:	f04f 090c 	mov.w	r9, #12
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800390e:	f7fd ffbb 	bl	8001888 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8003912:	f44f 4350 	mov.w	r3, #53248	; 0xd000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003916:	a90b      	add	r1, sp, #44	; 0x2c
 8003918:	4863      	ldr	r0, [pc, #396]	; (8003aa8 <main+0x310>)
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800391a:	930b      	str	r3, [sp, #44]	; 0x2c

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800391c:	f44f 5800 	mov.w	r8, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003920:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003922:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003924:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8003926:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800392a:	f7fd ffad 	bl	8001888 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800392e:	a90b      	add	r1, sp, #44	; 0x2c
 8003930:	485d      	ldr	r0, [pc, #372]	; (8003aa8 <main+0x310>)
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8003932:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8003936:	f44f 6b00 	mov.w	fp, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800393a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800393e:	f7fd ffa3 	bl	8001888 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8003942:	a90b      	add	r1, sp, #44	; 0x2c
 8003944:	4856      	ldr	r0, [pc, #344]	; (8003aa0 <main+0x308>)
  GPIO_InitStruct.Pin = TE_Pin;
 8003946:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800394a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800394e:	f7fd ff9b 	bl	8001888 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8003952:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003956:	a90b      	add	r1, sp, #44	; 0x2c
 8003958:	4851      	ldr	r0, [pc, #324]	; (8003aa0 <main+0x308>)
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800395a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800395e:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003960:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003962:	f7fd ff91 	bl	8001888 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8003966:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800396a:	a90b      	add	r1, sp, #44	; 0x2c
 800396c:	484d      	ldr	r0, [pc, #308]	; (8003aa4 <main+0x30c>)
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800396e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003970:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003972:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003974:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003976:	f7fd ff87 	bl	8001888 <HAL_GPIO_Init>
  hdma2d.Instance = DMA2D;
 800397a:	4b4c      	ldr	r3, [pc, #304]	; (8003aac <main+0x314>)
  hdma2d.LayerCfg[1].InputOffset = 0;
 800397c:	f8ca 4028 	str.w	r4, [sl, #40]	; 0x28
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003980:	f8ca 4030 	str.w	r4, [sl, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8003984:	f8ca 4034 	str.w	r4, [sl, #52]	; 0x34
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8003988:	f8ca 602c 	str.w	r6, [sl, #44]	; 0x2c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800398c:	4650      	mov	r0, sl
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800398e:	e88a 0058 	stmia.w	sl, {r3, r4, r6}
  hdma2d.Init.OutputOffset = 0;
 8003992:	f8ca 400c 	str.w	r4, [sl, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8003996:	f7fd fdd9 	bl	800154c <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800399a:	4639      	mov	r1, r7
 800399c:	4650      	mov	r0, sl
 800399e:	f7fd ff29 	bl	80017f4 <HAL_DMA2D_ConfigLayer>
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80039a2:	221c      	movs	r2, #28
 80039a4:	4621      	mov	r1, r4
 80039a6:	a80b      	add	r0, sp, #44	; 0x2c
 80039a8:	f000 fc48 	bl	800423c <memset>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80039ac:	4840      	ldr	r0, [pc, #256]	; (8003ab0 <main+0x318>)
 80039ae:	4b41      	ldr	r3, [pc, #260]	; (8003ab4 <main+0x31c>)
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80039b0:	f8c0 b020 	str.w	fp, [r0, #32]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80039b4:	e880 0088 	stmia.w	r0, {r3, r7}
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80039b8:	2340      	movs	r3, #64	; 0x40
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80039ba:	a90b      	add	r1, sp, #44	; 0x2c
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80039bc:	f04f 0a10 	mov.w	sl, #16
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80039c0:	6143      	str	r3, [r0, #20]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80039c2:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80039c6:	f44f 73c0 	mov.w	r3, #384	; 0x180
  SdramTiming.ExitSelfRefreshDelay = 7;
 80039ca:	f04f 0807 	mov.w	r8, #7
  SdramTiming.WriteRecoveryTime = 3;
 80039ce:	f04f 0b03 	mov.w	fp, #3
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80039d2:	6084      	str	r4, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80039d4:	60c5      	str	r5, [r0, #12]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80039d6:	6183      	str	r3, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80039d8:	61c4      	str	r4, [r0, #28]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80039da:	6244      	str	r4, [r0, #36]	; 0x24
  SdramTiming.SelfRefreshTime = 4;
 80039dc:	950d      	str	r5, [sp, #52]	; 0x34
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80039de:	f8c0 a010 	str.w	sl, [r0, #16]
  hi2c3.Instance = I2C3;
 80039e2:	4d35      	ldr	r5, [pc, #212]	; (8003ab8 <main+0x320>)
  SdramTiming.LoadToActiveDelay = 2;
 80039e4:	960b      	str	r6, [sp, #44]	; 0x2c
  SdramTiming.ExitSelfRefreshDelay = 7;
 80039e6:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  SdramTiming.RowCycleDelay = 7;
 80039ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  SdramTiming.WriteRecoveryTime = 3;
 80039ee:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  SdramTiming.RPDelay = 2;
 80039f2:	9610      	str	r6, [sp, #64]	; 0x40
  SdramTiming.RCDDelay = 2;
 80039f4:	9611      	str	r6, [sp, #68]	; 0x44
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80039f6:	f7fe ff25 	bl	8002844 <HAL_SDRAM_Init>
  hi2c3.Init.ClockSpeed = 100000;
 80039fa:	4a30      	ldr	r2, [pc, #192]	; (8003abc <main+0x324>)
 80039fc:	4b30      	ldr	r3, [pc, #192]	; (8003ac0 <main+0x328>)
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80039fe:	60ac      	str	r4, [r5, #8]
  hi2c3.Init.ClockSpeed = 100000;
 8003a00:	e885 000c 	stmia.w	r5, {r2, r3}
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003a04:	4628      	mov	r0, r5
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a0a:	612b      	str	r3, [r5, #16]
  hi2c3.Init.OwnAddress1 = 0;
 8003a0c:	60ec      	str	r4, [r5, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a0e:	616c      	str	r4, [r5, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003a10:	61ac      	str	r4, [r5, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a12:	61ec      	str	r4, [r5, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a14:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003a16:	f7fe f8c3 	bl	8001ba0 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003a1a:	4621      	mov	r1, r4
 8003a1c:	4628      	mov	r0, r5
 8003a1e:	f7fe f963 	bl	8001ce8 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003a22:	4621      	mov	r1, r4
 8003a24:	4628      	mov	r0, r5
 8003a26:	f7fe f97e 	bl	8001d26 <HAL_I2CEx_ConfigDigitalFilter>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	2234      	movs	r2, #52	; 0x34
 8003a2e:	a80b      	add	r0, sp, #44	; 0x2c
 8003a30:	f000 fc04 	bl	800423c <memset>
  hltdc.Instance = LTDC;
 8003a34:	4d23      	ldr	r5, [pc, #140]	; (8003ac4 <main+0x32c>)
 8003a36:	4b24      	ldr	r3, [pc, #144]	; (8003ac8 <main+0x330>)
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003a38:	60ac      	str	r4, [r5, #8]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003a3a:	e885 0018 	stmia.w	r5, {r3, r4}
  hltdc.Init.HorizontalSync = 9;
 8003a3e:	2309      	movs	r3, #9
 8003a40:	616b      	str	r3, [r5, #20]
  hltdc.Init.AccumulatedHBP = 29;
 8003a42:	231d      	movs	r3, #29
 8003a44:	61eb      	str	r3, [r5, #28]
  hltdc.Init.AccumulatedActiveW = 349;
 8003a46:	f240 135d 	movw	r3, #349	; 0x15d
 8003a4a:	626b      	str	r3, [r5, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 243;
 8003a4c:	23f3      	movs	r3, #243	; 0xf3
 8003a4e:	62ab      	str	r3, [r5, #40]	; 0x28
  hltdc.Init.TotalWidth = 359;
 8003a50:	f240 1367 	movw	r3, #359	; 0x167
 8003a54:	62eb      	str	r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003a56:	4628      	mov	r0, r5
  hltdc.Init.TotalHeigh = 247;
 8003a58:	23f7      	movs	r3, #247	; 0xf7
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003a5a:	60ec      	str	r4, [r5, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003a5c:	612c      	str	r4, [r5, #16]
  hltdc.Init.TotalHeigh = 247;
 8003a5e:	632b      	str	r3, [r5, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8003a60:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8003a64:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003a68:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.VerticalSync = 1;
 8003a6c:	61af      	str	r7, [r5, #24]
  hltdc.Init.AccumulatedVBP = 3;
 8003a6e:	f8c5 b020 	str.w	fp, [r5, #32]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003a72:	f7fe f9fd 	bl	8001e70 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 8003a76:	21ff      	movs	r1, #255	; 0xff
 8003a78:	9110      	str	r1, [sp, #64]	; 0x40
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003a7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  pLayerCfg.WindowX1 = 240;
 8003a7e:	22f0      	movs	r2, #240	; 0xf0
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003a80:	9112      	str	r1, [sp, #72]	; 0x48
  pLayerCfg.FBStartAdress = 0xD0000000;
 8003a82:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
  pLayerCfg.WindowY1 = 320;
 8003a86:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003a8a:	e021      	b.n	8003ad0 <main+0x338>
 8003a8c:	ff0000ff 	.word	0xff0000ff
 8003a90:	10120000 	.word	0x10120000
 8003a94:	40023800 	.word	0x40023800
 8003a98:	40020800 	.word	0x40020800
 8003a9c:	40020000 	.word	0x40020000
 8003aa0:	40020c00 	.word	0x40020c00
 8003aa4:	40021800 	.word	0x40021800
 8003aa8:	40020400 	.word	0x40020400
 8003aac:	4002b000 	.word	0x4002b000
 8003ab0:	200004d8 	.word	0x200004d8
 8003ab4:	a0000140 	.word	0xa0000140
 8003ab8:	200002c4 	.word	0x200002c4
 8003abc:	40005c00 	.word	0x40005c00
 8003ac0:	000186a0 	.word	0x000186a0
 8003ac4:	20000370 	.word	0x20000370
 8003ac8:	40016800 	.word	0x40016800
 8003acc:	20000498 	.word	0x20000498
  pLayerCfg.WindowX1 = 240;
 8003ad0:	920c      	str	r2, [sp, #48]	; 0x30
  pLayerCfg.FBStartAdress = 0xD0000000;
 8003ad2:	9114      	str	r1, [sp, #80]	; 0x50
  pLayerCfg.ImageWidth = 240;
 8003ad4:	9215      	str	r2, [sp, #84]	; 0x54
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003ad6:	a90b      	add	r1, sp, #44	; 0x2c
 8003ad8:	4622      	mov	r2, r4
 8003ada:	4628      	mov	r0, r5
  pLayerCfg.WindowX0 = 0;
 8003adc:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg.WindowY0 = 0;
 8003ade:	940d      	str	r4, [sp, #52]	; 0x34
  pLayerCfg.WindowY1 = 320;
 8003ae0:	930e      	str	r3, [sp, #56]	; 0x38
  pLayerCfg.Alpha0 = 0;
 8003ae2:	9411      	str	r4, [sp, #68]	; 0x44
  pLayerCfg.ImageHeight = 320;
 8003ae4:	9316      	str	r3, [sp, #88]	; 0x58
  pLayerCfg.Backcolor.Blue = 0;
 8003ae6:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
  pLayerCfg.Backcolor.Green = 0;
 8003aea:	f88d 405d 	strb.w	r4, [sp, #93]	; 0x5d
  pLayerCfg.Backcolor.Red = 0;
 8003aee:	f88d 405e 	strb.w	r4, [sp, #94]	; 0x5e
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8003af2:	960f      	str	r6, [sp, #60]	; 0x3c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003af4:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003af8:	f7fe fa86 	bl	8002008 <HAL_LTDC_ConfigLayer>
  hspi5.Instance = SPI5;
 8003afc:	4827      	ldr	r0, [pc, #156]	; (8003b9c <main+0x404>)
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003afe:	4928      	ldr	r1, [pc, #160]	; (8003ba0 <main+0x408>)
  htim1.Instance = TIM1;
 8003b00:	4d28      	ldr	r5, [pc, #160]	; (8003ba4 <main+0x40c>)
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003b02:	6084      	str	r4, [r0, #8]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003b04:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003b08:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003b0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b10:	6183      	str	r3, [r0, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003b12:	2318      	movs	r3, #24
 8003b14:	61c3      	str	r3, [r0, #28]
  hspi5.Init.CRCPolynomial = 10;
 8003b16:	230a      	movs	r3, #10
 8003b18:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b1a:	60c4      	str	r4, [r0, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b1c:	6104      	str	r4, [r0, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b1e:	6144      	str	r4, [r0, #20]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b20:	6204      	str	r4, [r0, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b22:	6244      	str	r4, [r0, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b24:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003b26:	f7fe ff69 	bl	80029fc <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b2a:	4652      	mov	r2, sl
 8003b2c:	4621      	mov	r1, r4
 8003b2e:	a80b      	add	r0, sp, #44	; 0x2c
 8003b30:	f000 fb84 	bl	800423c <memset>
  htim1.Instance = TIM1;
 8003b34:	4b1c      	ldr	r3, [pc, #112]	; (8003ba8 <main+0x410>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b36:	60ac      	str	r4, [r5, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003b38:	4628      	mov	r0, r5
  htim1.Init.Prescaler = 0;
 8003b3a:	e885 0018 	stmia.w	r5, {r3, r4}
  htim1.Init.Period = 0;
 8003b3e:	60ec      	str	r4, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b40:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8003b42:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b44:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b46:	9409      	str	r4, [sp, #36]	; 0x24
 8003b48:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003b4a:	f7ff faf9 	bl	8003140 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003b52:	a90b      	add	r1, sp, #44	; 0x2c
 8003b54:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b56:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003b58:	f7ff fb16 	bl	8003188 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003b5c:	a909      	add	r1, sp, #36	; 0x24
 8003b5e:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b60:	9409      	str	r4, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b62:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003b64:	f7ff fba4 	bl	80032b0 <HAL_TIMEx_MasterConfigSynchronization>
  huart1.Instance = USART1;
 8003b68:	4810      	ldr	r0, [pc, #64]	; (8003bac <main+0x414>)
  huart1.Init.BaudRate = 115200;
 8003b6a:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <main+0x418>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b6c:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 8003b6e:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
 8003b72:	e880 0028 	stmia.w	r0, {r3, r5}
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b76:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b78:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b7a:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b7c:	61c4      	str	r4, [r0, #28]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b7e:	f8c0 9014 	str.w	r9, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b82:	f7ff fccf 	bl	8003524 <HAL_UART_Init>
    BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
 8003b86:	4d0b      	ldr	r5, [pc, #44]	; (8003bb4 <main+0x41c>)
    BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"Text 1");
 8003b88:	4c0b      	ldr	r4, [pc, #44]	; (8003bb8 <main+0x420>)
    BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
 8003b8a:	4628      	mov	r0, r5
 8003b8c:	f7fc ffcc 	bl	8000b28 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"Text 1");
 8003b90:	4621      	mov	r1, r4
 8003b92:	2001      	movs	r0, #1
 8003b94:	f7fd f9da 	bl	8000f4c <BSP_LCD_DisplayStringAtLine>
 8003b98:	e7f7      	b.n	8003b8a <main+0x3f2>
 8003b9a:	bf00      	nop
 8003b9c:	20000318 	.word	0x20000318
 8003ba0:	40015000 	.word	0x40015000
 8003ba4:	20000458 	.word	0x20000458
 8003ba8:	40010000 	.word	0x40010000
 8003bac:	20000418 	.word	0x20000418
 8003bb0:	40011000 	.word	0x40011000
 8003bb4:	ff404040 	.word	0xff404040
 8003bb8:	08005d24 	.word	0x08005d24

08003bbc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003bbc:	6802      	ldr	r2, [r0, #0]
 8003bbe:	4b03      	ldr	r3, [pc, #12]	; (8003bcc <HAL_TIM_PeriodElapsedCallback+0x10>)
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d101      	bne.n	8003bc8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8003bc4:	f7fd bb48 	b.w	8001258 <HAL_IncTick>
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	40001000 	.word	0x40001000

08003bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bd0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bd2:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <HAL_MspInit+0x34>)
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	9100      	str	r1, [sp, #0]
 8003bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bde:	645a      	str	r2, [r3, #68]	; 0x44
 8003be0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003be2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003be6:	9200      	str	r2, [sp, #0]
 8003be8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bea:	9101      	str	r1, [sp, #4]
 8003bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003bf2:	641a      	str	r2, [r3, #64]	; 0x40
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	9301      	str	r3, [sp, #4]
 8003bfc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bfe:	b002      	add	sp, #8
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40023800 	.word	0x40023800

08003c08 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003c08:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8003c0a:	4b0d      	ldr	r3, [pc, #52]	; (8003c40 <HAL_DMA2D_MspInit+0x38>)
 8003c0c:	6802      	ldr	r2, [r0, #0]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d113      	bne.n	8003c3a <HAL_DMA2D_MspInit+0x32>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003c12:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 8003c16:	2200      	movs	r2, #0
 8003c18:	9201      	str	r2, [sp, #4]
 8003c1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c1c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8003c20:	6319      	str	r1, [r3, #48]	; 0x30
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c28:	9301      	str	r3, [sp, #4]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003c2a:	205a      	movs	r0, #90	; 0x5a
 8003c2c:	2105      	movs	r1, #5
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003c2e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003c30:	f7fd fb4a 	bl	80012c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003c34:	205a      	movs	r0, #90	; 0x5a
 8003c36:	f7fd fb7b 	bl	8001330 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003c3a:	b003      	add	sp, #12
 8003c3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c40:	4002b000 	.word	0x4002b000

08003c44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c48:	4604      	mov	r4, r0
 8003c4a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c4c:	2214      	movs	r2, #20
 8003c4e:	2100      	movs	r1, #0
 8003c50:	a803      	add	r0, sp, #12
 8003c52:	f000 faf3 	bl	800423c <memset>
  if(hi2c->Instance==I2C3)
 8003c56:	6822      	ldr	r2, [r4, #0]
 8003c58:	4b20      	ldr	r3, [pc, #128]	; (8003cdc <HAL_I2C_MspInit+0x98>)
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d13a      	bne.n	8003cd4 <HAL_I2C_MspInit+0x90>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c5e:	4c20      	ldr	r4, [pc, #128]	; (8003ce0 <HAL_I2C_MspInit+0x9c>)
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003c60:	4820      	ldr	r0, [pc, #128]	; (8003ce4 <HAL_I2C_MspInit+0xa0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c62:	2500      	movs	r5, #0
 8003c64:	9500      	str	r5, [sp, #0]
 8003c66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003c68:	f043 0304 	orr.w	r3, r3, #4
 8003c6c:	6323      	str	r3, [r4, #48]	; 0x30
 8003c6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c78:	9501      	str	r5, [sp, #4]
 8003c7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	6323      	str	r3, [r4, #48]	; 0x30
 8003c82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	9301      	str	r3, [sp, #4]
 8003c8a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c8c:	f04f 0812 	mov.w	r8, #18
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003c90:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c94:	2701      	movs	r7, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003c96:	2604      	movs	r6, #4
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003c98:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003c9a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c9c:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ca0:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003ca2:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003ca4:	f7fd fdf0 	bl	8001888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003ca8:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003cac:	a903      	add	r1, sp, #12
 8003cae:	480e      	ldr	r0, [pc, #56]	; (8003ce8 <HAL_I2C_MspInit+0xa4>)
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003cb0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cb2:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cb6:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cb8:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003cba:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003cbc:	f7fd fde4 	bl	8001888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003cc0:	9502      	str	r5, [sp, #8]
 8003cc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cc8:	6423      	str	r3, [r4, #64]	; 0x40
 8003cca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ccc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cd0:	9302      	str	r3, [sp, #8]
 8003cd2:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003cd4:	b008      	add	sp, #32
 8003cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cda:	bf00      	nop
 8003cdc:	40005c00 	.word	0x40005c00
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	40020800 	.word	0x40020800
 8003ce8:	40020000 	.word	0x40020000

08003cec <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cee:	4604      	mov	r4, r0
 8003cf0:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf2:	2214      	movs	r2, #20
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	a807      	add	r0, sp, #28
 8003cf8:	f000 faa0 	bl	800423c <memset>
  if(hltdc->Instance==LTDC)
 8003cfc:	6822      	ldr	r2, [r4, #0]
 8003cfe:	4b57      	ldr	r3, [pc, #348]	; (8003e5c <HAL_LTDC_MspInit+0x170>)
 8003d00:	429a      	cmp	r2, r3
 8003d02:	f040 80a8 	bne.w	8003e56 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003d06:	2400      	movs	r4, #0
 8003d08:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8003d0c:	9400      	str	r4, [sp, #0]
 8003d0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = ENABLE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003d10:	4853      	ldr	r0, [pc, #332]	; (8003e60 <HAL_LTDC_MspInit+0x174>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003d12:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003d16:	645a      	str	r2, [r3, #68]	; 0x44
 8003d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d1a:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8003d1e:	9200      	str	r2, [sp, #0]
 8003d20:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d22:	9401      	str	r4, [sp, #4]
 8003d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d26:	f042 0220 	orr.w	r2, r2, #32
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30
 8003d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d2e:	f002 0220 	and.w	r2, r2, #32
 8003d32:	9201      	str	r2, [sp, #4]
 8003d34:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d36:	9402      	str	r4, [sp, #8]
 8003d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d3a:	f042 0201 	orr.w	r2, r2, #1
 8003d3e:	631a      	str	r2, [r3, #48]	; 0x30
 8003d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d42:	f002 0201 	and.w	r2, r2, #1
 8003d46:	9202      	str	r2, [sp, #8]
 8003d48:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d4a:	9403      	str	r4, [sp, #12]
 8003d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d4e:	f042 0202 	orr.w	r2, r2, #2
 8003d52:	631a      	str	r2, [r3, #48]	; 0x30
 8003d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d56:	f002 0202 	and.w	r2, r2, #2
 8003d5a:	9203      	str	r2, [sp, #12]
 8003d5c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d5e:	9404      	str	r4, [sp, #16]
 8003d60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d66:	631a      	str	r2, [r3, #48]	; 0x30
 8003d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d6a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003d6e:	9204      	str	r2, [sp, #16]
 8003d70:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d72:	9405      	str	r4, [sp, #20]
 8003d74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d76:	f042 0204 	orr.w	r2, r2, #4
 8003d7a:	631a      	str	r2, [r3, #48]	; 0x30
 8003d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d7e:	f002 0204 	and.w	r2, r2, #4
 8003d82:	9205      	str	r2, [sp, #20]
 8003d84:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d86:	9406      	str	r4, [sp, #24]
 8003d88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d8a:	f042 0208 	orr.w	r2, r2, #8
 8003d8e:	631a      	str	r2, [r3, #48]	; 0x30
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d98:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003d9a:	260e      	movs	r6, #14
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d9c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d9e:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8003da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003da4:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8003da6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003da8:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003daa:	f7fd fd6d 	bl	8001888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 8003dae:	f641 0358 	movw	r3, #6232	; 0x1858
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003db2:	a907      	add	r1, sp, #28
 8003db4:	482b      	ldr	r0, [pc, #172]	; (8003e64 <HAL_LTDC_MspInit+0x178>)
    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 8003db6:	9307      	str	r3, [sp, #28]

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003db8:	2709      	movs	r7, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dba:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dbc:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dbe:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003dc0:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dc2:	f7fd fd61 	bl	8001888 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8003dc6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dc8:	a907      	add	r1, sp, #28
 8003dca:	4827      	ldr	r0, [pc, #156]	; (8003e68 <HAL_LTDC_MspInit+0x17c>)
    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8003dcc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dce:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd0:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd2:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003dd4:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dd6:	f7fd fd57 	bl	8001888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8003dda:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dde:	a907      	add	r1, sp, #28
 8003de0:	4821      	ldr	r0, [pc, #132]	; (8003e68 <HAL_LTDC_MspInit+0x17c>)
    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8003de2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de4:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de6:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de8:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003dea:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dec:	f7fd fd4c 	bl	8001888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8003df0:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003df4:	a907      	add	r1, sp, #28
 8003df6:	481d      	ldr	r0, [pc, #116]	; (8003e6c <HAL_LTDC_MspInit+0x180>)
    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8003df8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dfa:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfc:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dfe:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003e00:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003e02:	f7fd fd41 	bl	8001888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8003e06:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e0a:	a907      	add	r1, sp, #28
 8003e0c:	4818      	ldr	r0, [pc, #96]	; (8003e70 <HAL_LTDC_MspInit+0x184>)
    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8003e0e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e10:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e12:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e14:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003e16:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e18:	f7fd fd36 	bl	8001888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8003e1c:	2348      	movs	r3, #72	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e1e:	a907      	add	r1, sp, #28
 8003e20:	4814      	ldr	r0, [pc, #80]	; (8003e74 <HAL_LTDC_MspInit+0x188>)
    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8003e22:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e24:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e26:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e28:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003e2a:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e2c:	f7fd fd2c 	bl	8001888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8003e30:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003e34:	a907      	add	r1, sp, #28
 8003e36:	480d      	ldr	r0, [pc, #52]	; (8003e6c <HAL_LTDC_MspInit+0x180>)
    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8003e38:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e3a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e3e:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003e40:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003e42:	f7fd fd21 	bl	8001888 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003e46:	2058      	movs	r0, #88	; 0x58
 8003e48:	4622      	mov	r2, r4
 8003e4a:	2105      	movs	r1, #5
 8003e4c:	f7fd fa3c 	bl	80012c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003e50:	2058      	movs	r0, #88	; 0x58
 8003e52:	f7fd fa6d 	bl	8001330 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003e56:	b00d      	add	sp, #52	; 0x34
 8003e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40016800 	.word	0x40016800
 8003e60:	40021400 	.word	0x40021400
 8003e64:	40020000 	.word	0x40020000
 8003e68:	40020400 	.word	0x40020400
 8003e6c:	40021800 	.word	0x40021800
 8003e70:	40020800 	.word	0x40020800
 8003e74:	40020c00 	.word	0x40020c00

08003e78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003e78:	b570      	push	{r4, r5, r6, lr}
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e7e:	2214      	movs	r2, #20
 8003e80:	2100      	movs	r1, #0
 8003e82:	a803      	add	r0, sp, #12
 8003e84:	f000 f9da 	bl	800423c <memset>
  if(hspi->Instance==SPI5)
 8003e88:	6822      	ldr	r2, [r4, #0]
 8003e8a:	4b19      	ldr	r3, [pc, #100]	; (8003ef0 <HAL_SPI_MspInit+0x78>)
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d12d      	bne.n	8003eec <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003e90:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8003e94:	2400      	movs	r4, #0
 8003e96:	9401      	str	r4, [sp, #4]
 8003e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e9a:	4816      	ldr	r0, [pc, #88]	; (8003ef4 <HAL_SPI_MspInit+0x7c>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003e9c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003ea0:	645a      	str	r2, [r3, #68]	; 0x44
 8003ea2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ea4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003ea8:	9201      	str	r2, [sp, #4]
 8003eaa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003eac:	9402      	str	r4, [sp, #8]
 8003eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eb0:	f042 0220 	orr.w	r2, r2, #32
 8003eb4:	631a      	str	r2, [r3, #48]	; 0x30
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb8:	f003 0320 	and.w	r3, r3, #32
 8003ebc:	9302      	str	r3, [sp, #8]
 8003ebe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003ec0:	2340      	movs	r3, #64	; 0x40
 8003ec2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec4:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ec6:	2303      	movs	r3, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003ec8:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003eca:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ecc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ece:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003ed0:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003ed2:	f7fd fcd9 	bl	8001888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8003ed6:	f44f 7360 	mov.w	r3, #896	; 0x380
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003eda:	a903      	add	r1, sp, #12
 8003edc:	4805      	ldr	r0, [pc, #20]	; (8003ef4 <HAL_SPI_MspInit+0x7c>)
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8003ede:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee0:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee2:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ee4:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003ee6:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003ee8:	f7fd fcce 	bl	8001888 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8003eec:	b008      	add	sp, #32
 8003eee:	bd70      	pop	{r4, r5, r6, pc}
 8003ef0:	40015000 	.word	0x40015000
 8003ef4:	40021400 	.word	0x40021400

08003ef8 <HAL_SPI_MspDeInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
  if(hspi->Instance==SPI5)
 8003ef8:	6802      	ldr	r2, [r0, #0]
 8003efa:	4b07      	ldr	r3, [pc, #28]	; (8003f18 <HAL_SPI_MspDeInit+0x20>)
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d109      	bne.n	8003f14 <HAL_SPI_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8003f00:	4a06      	ldr	r2, [pc, #24]	; (8003f1c <HAL_SPI_MspDeInit+0x24>)
    PF6     ------> SPI5_NSS
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8003f02:	4807      	ldr	r0, [pc, #28]	; (8003f20 <HAL_SPI_MspDeInit+0x28>)
    __HAL_RCC_SPI5_CLK_DISABLE();
 8003f04:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8003f06:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003f0a:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8003f0c:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8003f10:	f7fd bda6 	b.w	8001a60 <HAL_GPIO_DeInit>
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	40015000 	.word	0x40015000
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	40021400 	.word	0x40021400

08003f24 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8003f24:	6802      	ldr	r2, [r0, #0]
 8003f26:	4b09      	ldr	r3, [pc, #36]	; (8003f4c <HAL_TIM_Base_MspInit+0x28>)
 8003f28:	429a      	cmp	r2, r3
{
 8003f2a:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8003f2c:	d10b      	bne.n	8003f46 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f2e:	2300      	movs	r3, #0
 8003f30:	9301      	str	r3, [sp, #4]
 8003f32:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <HAL_TIM_Base_MspInit+0x2c>)
 8003f34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f36:	f042 0201 	orr.w	r2, r2, #1
 8003f3a:	645a      	str	r2, [r3, #68]	; 0x44
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	9301      	str	r3, [sp, #4]
 8003f44:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003f46:	b002      	add	sp, #8
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	40010000 	.word	0x40010000
 8003f50:	40023800 	.word	0x40023800

08003f54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f54:	b510      	push	{r4, lr}
 8003f56:	4604      	mov	r4, r0
 8003f58:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f5a:	2214      	movs	r2, #20
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	a803      	add	r0, sp, #12
 8003f60:	f000 f96c 	bl	800423c <memset>
  if(huart->Instance==USART1)
 8003f64:	6822      	ldr	r2, [r4, #0]
 8003f66:	4b15      	ldr	r3, [pc, #84]	; (8003fbc <HAL_UART_MspInit+0x68>)
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d125      	bne.n	8003fb8 <HAL_UART_MspInit+0x64>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f6c:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8003f70:	2100      	movs	r1, #0
 8003f72:	9101      	str	r1, [sp, #4]
 8003f74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f76:	4812      	ldr	r0, [pc, #72]	; (8003fc0 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f78:	f042 0210 	orr.w	r2, r2, #16
 8003f7c:	645a      	str	r2, [r3, #68]	; 0x44
 8003f7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f80:	f002 0210 	and.w	r2, r2, #16
 8003f84:	9201      	str	r2, [sp, #4]
 8003f86:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f88:	9102      	str	r1, [sp, #8]
 8003f8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f8c:	f042 0201 	orr.w	r2, r2, #1
 8003f90:	631a      	str	r2, [r3, #48]	; 0x30
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	9302      	str	r3, [sp, #8]
 8003f9a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003f9c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003fa0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003faa:	2303      	movs	r3, #3
 8003fac:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fae:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003fb0:	2307      	movs	r3, #7
 8003fb2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb4:	f7fd fc68 	bl	8001888 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003fb8:	b008      	add	sp, #32
 8003fba:	bd10      	pop	{r4, pc}
 8003fbc:	40011000 	.word	0x40011000
 8003fc0:	40020000 	.word	0x40020000

08003fc4 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fc8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003fca:	2214      	movs	r2, #20
 8003fcc:	2100      	movs	r1, #0
 8003fce:	a801      	add	r0, sp, #4
 8003fd0:	f000 f934 	bl	800423c <memset>
  if (FMC_Initialized) {
 8003fd4:	4b2b      	ldr	r3, [pc, #172]	; (8004084 <HAL_SDRAM_MspInit+0xc0>)
 8003fd6:	681c      	ldr	r4, [r3, #0]
 8003fd8:	2c00      	cmp	r4, #0
 8003fda:	d150      	bne.n	800407e <HAL_SDRAM_MspInit+0xba>
  FMC_Initialized = 1;
 8003fdc:	f04f 0801 	mov.w	r8, #1
 8003fe0:	f8c3 8000 	str.w	r8, [r3]
  __HAL_RCC_FMC_CLK_ENABLE();
 8003fe4:	4b28      	ldr	r3, [pc, #160]	; (8004088 <HAL_SDRAM_MspInit+0xc4>)
 8003fe6:	9400      	str	r4, [sp, #0]
 8003fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003fea:	4828      	ldr	r0, [pc, #160]	; (800408c <HAL_SDRAM_MspInit+0xc8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8003fec:	ea42 0208 	orr.w	r2, r2, r8
 8003ff0:	639a      	str	r2, [r3, #56]	; 0x38
 8003ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff4:	ea03 0308 	and.w	r3, r3, r8
 8003ff8:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ffa:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ffc:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003ffe:	250c      	movs	r5, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8004000:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004002:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8004004:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004008:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 800400a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800400c:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800400e:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004010:	f7fd fc3a 	bl	8001888 <HAL_GPIO_Init>
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8004014:	a901      	add	r1, sp, #4
 8004016:	481e      	ldr	r0, [pc, #120]	; (8004090 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8004018:	f8cd 8004 	str.w	r8, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800401c:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401e:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004020:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004022:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8004024:	f7fd fc30 	bl	8001888 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 8004028:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800402c:	a901      	add	r1, sp, #4
 800402e:	4819      	ldr	r0, [pc, #100]	; (8004094 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 8004030:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004032:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004034:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004036:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004038:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800403a:	f7fd fc25 	bl	8001888 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 800403e:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004042:	a901      	add	r1, sp, #4
 8004044:	4814      	ldr	r0, [pc, #80]	; (8004098 <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 8004046:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004048:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404a:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800404c:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800404e:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004050:	f7fd fc1a 	bl	8001888 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 8004054:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004058:	a901      	add	r1, sp, #4
 800405a:	4810      	ldr	r0, [pc, #64]	; (800409c <HAL_SDRAM_MspInit+0xd8>)
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 800405c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800405e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004060:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004062:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004064:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004066:	f7fd fc0f 	bl	8001888 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800406a:	2360      	movs	r3, #96	; 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800406c:	a901      	add	r1, sp, #4
 800406e:	480c      	ldr	r0, [pc, #48]	; (80040a0 <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8004070:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004072:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004074:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004076:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004078:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800407a:	f7fd fc05 	bl	8001888 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800407e:	b006      	add	sp, #24
 8004080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004084:	20000210 	.word	0x20000210
 8004088:	40023800 	.word	0x40023800
 800408c:	40021400 	.word	0x40021400
 8004090:	40020800 	.word	0x40020800
 8004094:	40021800 	.word	0x40021800
 8004098:	40021000 	.word	0x40021000
 800409c:	40020c00 	.word	0x40020c00
 80040a0:	40020400 	.word	0x40020400

080040a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040a4:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80040a6:	4601      	mov	r1, r0
{
 80040a8:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80040aa:	2200      	movs	r2, #0
 80040ac:	2036      	movs	r0, #54	; 0x36
 80040ae:	f7fd f90b 	bl	80012c8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80040b2:	2036      	movs	r0, #54	; 0x36
 80040b4:	f7fd f93c 	bl	8001330 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80040b8:	2500      	movs	r5, #0
 80040ba:	4b15      	ldr	r3, [pc, #84]	; (8004110 <HAL_InitTick+0x6c>)
 80040bc:	9502      	str	r5, [sp, #8]
 80040be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80040c0:	4c14      	ldr	r4, [pc, #80]	; (8004114 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 80040c2:	f042 0210 	orr.w	r2, r2, #16
 80040c6:	641a      	str	r2, [r3, #64]	; 0x40
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	f003 0310 	and.w	r3, r3, #16
 80040ce:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80040d0:	a901      	add	r1, sp, #4
 80040d2:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 80040d4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80040d6:	f7fe fa7f 	bl	80025d8 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80040da:	f7fe fa5d 	bl	8002598 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80040de:	4b0e      	ldr	r3, [pc, #56]	; (8004118 <HAL_InitTick+0x74>)
 80040e0:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80040e2:	f240 33e7 	movw	r3, #999	; 0x3e7
 80040e6:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80040e8:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80040ea:	4b0c      	ldr	r3, [pc, #48]	; (800411c <HAL_InitTick+0x78>)
 80040ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80040f0:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 80040f2:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80040f4:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80040f6:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040f8:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80040fa:	f7ff f821 	bl	8003140 <HAL_TIM_Base_Init>
 80040fe:	b920      	cbnz	r0, 800410a <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004100:	4620      	mov	r0, r4
 8004102:	f7fe ff00 	bl	8002f06 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8004106:	b009      	add	sp, #36	; 0x24
 8004108:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 800410a:	2001      	movs	r0, #1
 800410c:	e7fb      	b.n	8004106 <HAL_InitTick+0x62>
 800410e:	bf00      	nop
 8004110:	40023800 	.word	0x40023800
 8004114:	2000050c 	.word	0x2000050c
 8004118:	40001000 	.word	0x40001000
 800411c:	000f4240 	.word	0x000f4240

08004120 <NMI_Handler>:
 8004120:	4770      	bx	lr

08004122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004122:	e7fe      	b.n	8004122 <HardFault_Handler>

08004124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004124:	e7fe      	b.n	8004124 <MemManage_Handler>

08004126 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004126:	e7fe      	b.n	8004126 <BusFault_Handler>

08004128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004128:	e7fe      	b.n	8004128 <UsageFault_Handler>

0800412a <SVC_Handler>:
 800412a:	4770      	bx	lr

0800412c <DebugMon_Handler>:
 800412c:	4770      	bx	lr

0800412e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800412e:	4770      	bx	lr

08004130 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004130:	4801      	ldr	r0, [pc, #4]	; (8004138 <TIM6_DAC_IRQHandler+0x8>)
 8004132:	f7fe befc 	b.w	8002f2e <HAL_TIM_IRQHandler>
 8004136:	bf00      	nop
 8004138:	2000050c 	.word	0x2000050c

0800413c <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800413c:	4801      	ldr	r0, [pc, #4]	; (8004144 <LTDC_IRQHandler+0x8>)
 800413e:	f7fd bf06 	b.w	8001f4e <HAL_LTDC_IRQHandler>
 8004142:	bf00      	nop
 8004144:	20000370 	.word	0x20000370

08004148 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004148:	4801      	ldr	r0, [pc, #4]	; (8004150 <DMA2D_IRQHandler+0x8>)
 800414a:	f7fd bac8 	b.w	80016de <HAL_DMA2D_IRQHandler>
 800414e:	bf00      	nop
 8004150:	20000498 	.word	0x20000498

08004154 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004154:	490f      	ldr	r1, [pc, #60]	; (8004194 <SystemInit+0x40>)
 8004156:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800415a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800415e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004162:	4b0d      	ldr	r3, [pc, #52]	; (8004198 <SystemInit+0x44>)
 8004164:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004166:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8004168:	f042 0201 	orr.w	r2, r2, #1
 800416c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800416e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004176:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800417a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800417c:	4a07      	ldr	r2, [pc, #28]	; (800419c <SystemInit+0x48>)
 800417e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004186:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004188:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800418a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800418e:	608b      	str	r3, [r1, #8]
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	e000ed00 	.word	0xe000ed00
 8004198:	40023800 	.word	0x40023800
 800419c:	24003010 	.word	0x24003010

080041a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80041a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041d8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80041a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80041a6:	e003      	b.n	80041b0 <LoopCopyDataInit>

080041a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80041a8:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80041aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80041ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80041ae:	3104      	adds	r1, #4

080041b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80041b0:	480b      	ldr	r0, [pc, #44]	; (80041e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80041b2:	4b0c      	ldr	r3, [pc, #48]	; (80041e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80041b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80041b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80041b8:	d3f6      	bcc.n	80041a8 <CopyDataInit>
  ldr  r2, =_sbss
 80041ba:	4a0b      	ldr	r2, [pc, #44]	; (80041e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80041bc:	e002      	b.n	80041c4 <LoopFillZerobss>

080041be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80041be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80041c0:	f842 3b04 	str.w	r3, [r2], #4

080041c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80041c4:	4b09      	ldr	r3, [pc, #36]	; (80041ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80041c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80041c8:	d3f9      	bcc.n	80041be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80041ca:	f7ff ffc3 	bl	8004154 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041ce:	f000 f811 	bl	80041f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041d2:	f7ff fae1 	bl	8003798 <main>
  bx  lr    
 80041d6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80041d8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80041dc:	08005d54 	.word	0x08005d54
  ldr  r0, =_sdata
 80041e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80041e4:	2000004c 	.word	0x2000004c
  ldr  r2, =_sbss
 80041e8:	2000004c 	.word	0x2000004c
  ldr  r3, = _ebss
 80041ec:	2000054c 	.word	0x2000054c

080041f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041f0:	e7fe      	b.n	80041f0 <ADC_IRQHandler>
	...

080041f4 <__libc_init_array>:
 80041f4:	b570      	push	{r4, r5, r6, lr}
 80041f6:	4e0d      	ldr	r6, [pc, #52]	; (800422c <__libc_init_array+0x38>)
 80041f8:	4c0d      	ldr	r4, [pc, #52]	; (8004230 <__libc_init_array+0x3c>)
 80041fa:	1ba4      	subs	r4, r4, r6
 80041fc:	10a4      	asrs	r4, r4, #2
 80041fe:	2500      	movs	r5, #0
 8004200:	42a5      	cmp	r5, r4
 8004202:	d109      	bne.n	8004218 <__libc_init_array+0x24>
 8004204:	4e0b      	ldr	r6, [pc, #44]	; (8004234 <__libc_init_array+0x40>)
 8004206:	4c0c      	ldr	r4, [pc, #48]	; (8004238 <__libc_init_array+0x44>)
 8004208:	f000 f820 	bl	800424c <_init>
 800420c:	1ba4      	subs	r4, r4, r6
 800420e:	10a4      	asrs	r4, r4, #2
 8004210:	2500      	movs	r5, #0
 8004212:	42a5      	cmp	r5, r4
 8004214:	d105      	bne.n	8004222 <__libc_init_array+0x2e>
 8004216:	bd70      	pop	{r4, r5, r6, pc}
 8004218:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800421c:	4798      	blx	r3
 800421e:	3501      	adds	r5, #1
 8004220:	e7ee      	b.n	8004200 <__libc_init_array+0xc>
 8004222:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004226:	4798      	blx	r3
 8004228:	3501      	adds	r5, #1
 800422a:	e7f2      	b.n	8004212 <__libc_init_array+0x1e>
 800422c:	08005d4c 	.word	0x08005d4c
 8004230:	08005d4c 	.word	0x08005d4c
 8004234:	08005d4c 	.word	0x08005d4c
 8004238:	08005d50 	.word	0x08005d50

0800423c <memset>:
 800423c:	4402      	add	r2, r0
 800423e:	4603      	mov	r3, r0
 8004240:	4293      	cmp	r3, r2
 8004242:	d100      	bne.n	8004246 <memset+0xa>
 8004244:	4770      	bx	lr
 8004246:	f803 1b01 	strb.w	r1, [r3], #1
 800424a:	e7f9      	b.n	8004240 <memset+0x4>

0800424c <_init>:
 800424c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424e:	bf00      	nop
 8004250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004252:	bc08      	pop	{r3}
 8004254:	469e      	mov	lr, r3
 8004256:	4770      	bx	lr

08004258 <_fini>:
 8004258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425a:	bf00      	nop
 800425c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800425e:	bc08      	pop	{r3}
 8004260:	469e      	mov	lr, r3
 8004262:	4770      	bx	lr
