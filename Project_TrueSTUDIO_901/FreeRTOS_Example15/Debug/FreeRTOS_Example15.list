
FreeRTOS_Example15.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000274c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080028fc  080028fc  000128fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002994  08002994  00012994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800299c  0800299c  0001299c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080029a0  080029a0  000129a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080029a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00004004  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20004010  20004010  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00016710  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003576  00000000  00000000  0003674c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00009340  00000000  00000000  00039cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d88  00000000  00000000  00043008  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d8  00000000  00000000  00043d90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000071d1  00000000  00000000  00045168  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005ccf  00000000  00000000  0004c339  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00052008  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002688  00000000  00000000  00052084  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080028e4 	.word	0x080028e4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	080028e4 	.word	0x080028e4

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b97a 	b.w	80004fc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	468c      	mov	ip, r1
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	9e08      	ldr	r6, [sp, #32]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d151      	bne.n	80002d4 <__udivmoddi4+0xb4>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d96d      	bls.n	8000312 <__udivmoddi4+0xf2>
 8000236:	fab2 fe82 	clz	lr, r2
 800023a:	f1be 0f00 	cmp.w	lr, #0
 800023e:	d00b      	beq.n	8000258 <__udivmoddi4+0x38>
 8000240:	f1ce 0c20 	rsb	ip, lr, #32
 8000244:	fa01 f50e 	lsl.w	r5, r1, lr
 8000248:	fa20 fc0c 	lsr.w	ip, r0, ip
 800024c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000250:	ea4c 0c05 	orr.w	ip, ip, r5
 8000254:	fa00 f40e 	lsl.w	r4, r0, lr
 8000258:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800025c:	0c25      	lsrs	r5, r4, #16
 800025e:	fbbc f8fa 	udiv	r8, ip, sl
 8000262:	fa1f f987 	uxth.w	r9, r7
 8000266:	fb0a cc18 	mls	ip, sl, r8, ip
 800026a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026e:	fb08 f309 	mul.w	r3, r8, r9
 8000272:	42ab      	cmp	r3, r5
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x6c>
 8000276:	19ed      	adds	r5, r5, r7
 8000278:	f108 32ff 	add.w	r2, r8, #4294967295
 800027c:	f080 8123 	bcs.w	80004c6 <__udivmoddi4+0x2a6>
 8000280:	42ab      	cmp	r3, r5
 8000282:	f240 8120 	bls.w	80004c6 <__udivmoddi4+0x2a6>
 8000286:	f1a8 0802 	sub.w	r8, r8, #2
 800028a:	443d      	add	r5, r7
 800028c:	1aed      	subs	r5, r5, r3
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb5 f0fa 	udiv	r0, r5, sl
 8000294:	fb0a 5510 	mls	r5, sl, r0, r5
 8000298:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800029c:	fb00 f909 	mul.w	r9, r0, r9
 80002a0:	45a1      	cmp	r9, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x98>
 80002a4:	19e4      	adds	r4, r4, r7
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 810a 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80002ae:	45a1      	cmp	r9, r4
 80002b0:	f240 8107 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	eba4 0409 	sub.w	r4, r4, r9
 80002bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002c0:	2100      	movs	r1, #0
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d061      	beq.n	800038a <__udivmoddi4+0x16a>
 80002c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ca:	2300      	movs	r3, #0
 80002cc:	6034      	str	r4, [r6, #0]
 80002ce:	6073      	str	r3, [r6, #4]
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xc8>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d054      	beq.n	8000386 <__udivmoddi4+0x166>
 80002dc:	2100      	movs	r1, #0
 80002de:	e886 0021 	stmia.w	r6, {r0, r5}
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	f040 808e 	bne.w	800040e <__udivmoddi4+0x1ee>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xdc>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2d0>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	46ac      	mov	ip, r5
 8000306:	2e00      	cmp	r6, #0
 8000308:	d03f      	beq.n	800038a <__udivmoddi4+0x16a>
 800030a:	e886 1010 	stmia.w	r6, {r4, ip}
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	b912      	cbnz	r2, 800031a <__udivmoddi4+0xfa>
 8000314:	2701      	movs	r7, #1
 8000316:	fbb7 f7f2 	udiv	r7, r7, r2
 800031a:	fab7 fe87 	clz	lr, r7
 800031e:	f1be 0f00 	cmp.w	lr, #0
 8000322:	d134      	bne.n	800038e <__udivmoddi4+0x16e>
 8000324:	1beb      	subs	r3, r5, r7
 8000326:	0c3a      	lsrs	r2, r7, #16
 8000328:	fa1f fc87 	uxth.w	ip, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000332:	0c25      	lsrs	r5, r4, #16
 8000334:	fb02 3318 	mls	r3, r2, r8, r3
 8000338:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800033c:	fb0c f308 	mul.w	r3, ip, r8
 8000340:	42ab      	cmp	r3, r5
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x134>
 8000344:	19ed      	adds	r5, r5, r7
 8000346:	f108 30ff 	add.w	r0, r8, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x132>
 800034c:	42ab      	cmp	r3, r5
 800034e:	f200 80d1 	bhi.w	80004f4 <__udivmoddi4+0x2d4>
 8000352:	4680      	mov	r8, r0
 8000354:	1aed      	subs	r5, r5, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb5 f0f2 	udiv	r0, r5, r2
 800035c:	fb02 5510 	mls	r5, r2, r0, r5
 8000360:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000364:	fb0c fc00 	mul.w	ip, ip, r0
 8000368:	45a4      	cmp	ip, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x15c>
 800036c:	19e4      	adds	r4, r4, r7
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x15a>
 8000374:	45a4      	cmp	ip, r4
 8000376:	f200 80b8 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 040c 	sub.w	r4, r4, ip
 8000380:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000384:	e79d      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000386:	4631      	mov	r1, r6
 8000388:	4630      	mov	r0, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	f1ce 0420 	rsb	r4, lr, #32
 8000392:	fa05 f30e 	lsl.w	r3, r5, lr
 8000396:	fa07 f70e 	lsl.w	r7, r7, lr
 800039a:	fa20 f804 	lsr.w	r8, r0, r4
 800039e:	0c3a      	lsrs	r2, r7, #16
 80003a0:	fa25 f404 	lsr.w	r4, r5, r4
 80003a4:	ea48 0803 	orr.w	r8, r8, r3
 80003a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003b0:	fb02 4411 	mls	r4, r2, r1, r4
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003bc:	fb01 f30c 	mul.w	r3, r1, ip
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x1bc>
 80003c8:	19ed      	adds	r5, r5, r7
 80003ca:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ce:	f080 808a 	bcs.w	80004e6 <__udivmoddi4+0x2c6>
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	f240 8087 	bls.w	80004e6 <__udivmoddi4+0x2c6>
 80003d8:	3902      	subs	r1, #2
 80003da:	443d      	add	r5, r7
 80003dc:	1aeb      	subs	r3, r5, r3
 80003de:	fa1f f588 	uxth.w	r5, r8
 80003e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ee:	fb00 f30c 	mul.w	r3, r0, ip
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1e6>
 80003f6:	19ed      	adds	r5, r5, r7
 80003f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fc:	d26f      	bcs.n	80004de <__udivmoddi4+0x2be>
 80003fe:	42ab      	cmp	r3, r5
 8000400:	d96d      	bls.n	80004de <__udivmoddi4+0x2be>
 8000402:	3802      	subs	r0, #2
 8000404:	443d      	add	r5, r7
 8000406:	1aeb      	subs	r3, r5, r3
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	e78f      	b.n	800032e <__udivmoddi4+0x10e>
 800040e:	f1c1 0720 	rsb	r7, r1, #32
 8000412:	fa22 f807 	lsr.w	r8, r2, r7
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 f401 	lsl.w	r4, r5, r1
 800041c:	ea48 0303 	orr.w	r3, r8, r3
 8000420:	fa20 fe07 	lsr.w	lr, r0, r7
 8000424:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000428:	40fd      	lsrs	r5, r7
 800042a:	ea4e 0e04 	orr.w	lr, lr, r4
 800042e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000432:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000436:	fb0c 5519 	mls	r5, ip, r9, r5
 800043a:	fa1f f883 	uxth.w	r8, r3
 800043e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000442:	fb09 f408 	mul.w	r4, r9, r8
 8000446:	42ac      	cmp	r4, r5
 8000448:	fa02 f201 	lsl.w	r2, r2, r1
 800044c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x244>
 8000452:	18ed      	adds	r5, r5, r3
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295
 8000458:	d243      	bcs.n	80004e2 <__udivmoddi4+0x2c2>
 800045a:	42ac      	cmp	r4, r5
 800045c:	d941      	bls.n	80004e2 <__udivmoddi4+0x2c2>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	441d      	add	r5, r3
 8000464:	1b2d      	subs	r5, r5, r4
 8000466:	fa1f fe8e 	uxth.w	lr, lr
 800046a:	fbb5 f0fc 	udiv	r0, r5, ip
 800046e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000472:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45a0      	cmp	r8, r4
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x26e>
 800047e:	18e4      	adds	r4, r4, r3
 8000480:	f100 35ff 	add.w	r5, r0, #4294967295
 8000484:	d229      	bcs.n	80004da <__udivmoddi4+0x2ba>
 8000486:	45a0      	cmp	r8, r4
 8000488:	d927      	bls.n	80004da <__udivmoddi4+0x2ba>
 800048a:	3802      	subs	r0, #2
 800048c:	441c      	add	r4, r3
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba4 0408 	sub.w	r4, r4, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454c      	cmp	r4, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	464d      	mov	r5, r9
 80004a0:	d315      	bcc.n	80004ce <__udivmoddi4+0x2ae>
 80004a2:	d012      	beq.n	80004ca <__udivmoddi4+0x2aa>
 80004a4:	b156      	cbz	r6, 80004bc <__udivmoddi4+0x29c>
 80004a6:	ebba 030e 	subs.w	r3, sl, lr
 80004aa:	eb64 0405 	sbc.w	r4, r4, r5
 80004ae:	fa04 f707 	lsl.w	r7, r4, r7
 80004b2:	40cb      	lsrs	r3, r1
 80004b4:	431f      	orrs	r7, r3
 80004b6:	40cc      	lsrs	r4, r1
 80004b8:	6037      	str	r7, [r6, #0]
 80004ba:	6074      	str	r4, [r6, #4]
 80004bc:	2100      	movs	r1, #0
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	4618      	mov	r0, r3
 80004c4:	e6f8      	b.n	80002b8 <__udivmoddi4+0x98>
 80004c6:	4690      	mov	r8, r2
 80004c8:	e6e0      	b.n	800028c <__udivmoddi4+0x6c>
 80004ca:	45c2      	cmp	sl, r8
 80004cc:	d2ea      	bcs.n	80004a4 <__udivmoddi4+0x284>
 80004ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d2:	eb69 0503 	sbc.w	r5, r9, r3
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7e4      	b.n	80004a4 <__udivmoddi4+0x284>
 80004da:	4628      	mov	r0, r5
 80004dc:	e7d7      	b.n	800048e <__udivmoddi4+0x26e>
 80004de:	4640      	mov	r0, r8
 80004e0:	e791      	b.n	8000406 <__udivmoddi4+0x1e6>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e7be      	b.n	8000464 <__udivmoddi4+0x244>
 80004e6:	4601      	mov	r1, r0
 80004e8:	e778      	b.n	80003dc <__udivmoddi4+0x1bc>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	e745      	b.n	800037c <__udivmoddi4+0x15c>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xe6>
 80004f4:	f1a8 0802 	sub.w	r8, r8, #2
 80004f8:	443d      	add	r5, r7
 80004fa:	e72b      	b.n	8000354 <__udivmoddi4+0x134>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000500:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <HAL_Init+0x30>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800050a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000512:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800051a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051c:	2003      	movs	r0, #3
 800051e:	f000 f81b 	bl	8000558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000522:	2000      	movs	r0, #0
 8000524:	f002 f90c 	bl	8002740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000528:	f002 f8e8 	bl	80026fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800052c:	2000      	movs	r0, #0
 800052e:	bd08      	pop	{r3, pc}
 8000530:	40023c00 	.word	0x40023c00

08000534 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000534:	4a03      	ldr	r2, [pc, #12]	; (8000544 <HAL_IncTick+0x10>)
 8000536:	4b04      	ldr	r3, [pc, #16]	; (8000548 <HAL_IncTick+0x14>)
 8000538:	6811      	ldr	r1, [r2, #0]
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	440b      	add	r3, r1
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20003fc4 	.word	0x20003fc4
 8000548:	20000000 	.word	0x20000000

0800054c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800054c:	4b01      	ldr	r3, [pc, #4]	; (8000554 <HAL_GetTick+0x8>)
 800054e:	6818      	ldr	r0, [r3, #0]
}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20003fc4 	.word	0x20003fc4

08000558 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000558:	4a07      	ldr	r2, [pc, #28]	; (8000578 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800055a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800055c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000560:	041b      	lsls	r3, r3, #16
 8000562:	0c1b      	lsrs	r3, r3, #16
 8000564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000568:	0200      	lsls	r0, r0, #8
 800056a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000572:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000574:	60d3      	str	r3, [r2, #12]
 8000576:	4770      	bx	lr
 8000578:	e000ed00 	.word	0xe000ed00

0800057c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800057c:	4b17      	ldr	r3, [pc, #92]	; (80005dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	68dc      	ldr	r4, [r3, #12]
 8000582:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000586:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800058a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800058c:	2b04      	cmp	r3, #4
 800058e:	bf28      	it	cs
 8000590:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000592:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000594:	f04f 0501 	mov.w	r5, #1
 8000598:	fa05 f303 	lsl.w	r3, r5, r3
 800059c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a0:	bf8c      	ite	hi
 80005a2:	3c03      	subhi	r4, #3
 80005a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a6:	4019      	ands	r1, r3
 80005a8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005aa:	fa05 f404 	lsl.w	r4, r5, r4
 80005ae:	3c01      	subs	r4, #1
 80005b0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b4:	ea42 0201 	orr.w	r2, r2, r1
 80005b8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005bc:	bfad      	iteet	ge
 80005be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c2:	f000 000f 	andlt.w	r0, r0, #15
 80005c6:	4b06      	ldrlt	r3, [pc, #24]	; (80005e0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005cc:	bfb5      	itete	lt
 80005ce:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	bf00      	nop
 80005dc:	e000ed00 	.word	0xe000ed00
 80005e0:	e000ed14 	.word	0xe000ed14

080005e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80005e4:	2800      	cmp	r0, #0
 80005e6:	db08      	blt.n	80005fa <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005e8:	0942      	lsrs	r2, r0, #5
 80005ea:	2301      	movs	r3, #1
 80005ec:	f000 001f 	and.w	r0, r0, #31
 80005f0:	fa03 f000 	lsl.w	r0, r3, r0
 80005f4:	4b01      	ldr	r3, [pc, #4]	; (80005fc <HAL_NVIC_EnableIRQ+0x18>)
 80005f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005fa:	4770      	bx	lr
 80005fc:	e000e100 	.word	0xe000e100

08000600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000604:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000606:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000608:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 80007d0 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800060c:	4a6e      	ldr	r2, [pc, #440]	; (80007c8 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800060e:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80007d4 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000612:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000614:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000616:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800061a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 800061c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000620:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000624:	45b6      	cmp	lr, r6
 8000626:	f040 80b6 	bne.w	8000796 <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800062a:	684c      	ldr	r4, [r1, #4]
 800062c:	f024 0710 	bic.w	r7, r4, #16
 8000630:	2f02      	cmp	r7, #2
 8000632:	d116      	bne.n	8000662 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000634:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000638:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800063c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000640:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000644:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000648:	f04f 0c0f 	mov.w	ip, #15
 800064c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000650:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000654:	690d      	ldr	r5, [r1, #16]
 8000656:	fa05 f50b 	lsl.w	r5, r5, fp
 800065a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800065e:	f8ca 5020 	str.w	r5, [sl, #32]
 8000662:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000666:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000668:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800066c:	fa05 f50a 	lsl.w	r5, r5, sl
 8000670:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000672:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000676:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800067a:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800067e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000680:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000684:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000686:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800068a:	d811      	bhi.n	80006b0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800068c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800068e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000692:	68cf      	ldr	r7, [r1, #12]
 8000694:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000698:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800069c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800069e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006a0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006a4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80006a8:	409f      	lsls	r7, r3
 80006aa:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80006ae:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80006b0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006b2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006b4:	688f      	ldr	r7, [r1, #8]
 80006b6:	fa07 f70a 	lsl.w	r7, r7, sl
 80006ba:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80006bc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006be:	00e5      	lsls	r5, r4, #3
 80006c0:	d569      	bpl.n	8000796 <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c2:	f04f 0b00 	mov.w	fp, #0
 80006c6:	f8cd b00c 	str.w	fp, [sp, #12]
 80006ca:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006ce:	4d3f      	ldr	r5, [pc, #252]	; (80007cc <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d0:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80006d4:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80006d8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80006dc:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80006e0:	9703      	str	r7, [sp, #12]
 80006e2:	9f03      	ldr	r7, [sp, #12]
 80006e4:	f023 0703 	bic.w	r7, r3, #3
 80006e8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80006ec:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006f0:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80006f4:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006f8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80006fc:	f04f 0e0f 	mov.w	lr, #15
 8000700:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000704:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000706:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800070a:	d04b      	beq.n	80007a4 <HAL_GPIO_Init+0x1a4>
 800070c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000710:	42a8      	cmp	r0, r5
 8000712:	d049      	beq.n	80007a8 <HAL_GPIO_Init+0x1a8>
 8000714:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000718:	42a8      	cmp	r0, r5
 800071a:	d047      	beq.n	80007ac <HAL_GPIO_Init+0x1ac>
 800071c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000720:	42a8      	cmp	r0, r5
 8000722:	d045      	beq.n	80007b0 <HAL_GPIO_Init+0x1b0>
 8000724:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000728:	42a8      	cmp	r0, r5
 800072a:	d043      	beq.n	80007b4 <HAL_GPIO_Init+0x1b4>
 800072c:	4548      	cmp	r0, r9
 800072e:	d043      	beq.n	80007b8 <HAL_GPIO_Init+0x1b8>
 8000730:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000734:	42a8      	cmp	r0, r5
 8000736:	d041      	beq.n	80007bc <HAL_GPIO_Init+0x1bc>
 8000738:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800073c:	42a8      	cmp	r0, r5
 800073e:	d03f      	beq.n	80007c0 <HAL_GPIO_Init+0x1c0>
 8000740:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000744:	42a8      	cmp	r0, r5
 8000746:	d03d      	beq.n	80007c4 <HAL_GPIO_Init+0x1c4>
 8000748:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800074c:	42a8      	cmp	r0, r5
 800074e:	bf14      	ite	ne
 8000750:	250a      	movne	r5, #10
 8000752:	2509      	moveq	r5, #9
 8000754:	fa05 f50c 	lsl.w	r5, r5, ip
 8000758:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800075c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800075e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000760:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000762:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000766:	bf0c      	ite	eq
 8000768:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800076a:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800076c:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800076e:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000770:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000774:	bf0c      	ite	eq
 8000776:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000778:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800077a:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800077c:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800077e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000782:	bf0c      	ite	eq
 8000784:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000786:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000788:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800078a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800078c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800078e:	bf54      	ite	pl
 8000790:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000792:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000794:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000796:	3301      	adds	r3, #1
 8000798:	2b10      	cmp	r3, #16
 800079a:	f47f af3c 	bne.w	8000616 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800079e:	b005      	add	sp, #20
 80007a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007a4:	465d      	mov	r5, fp
 80007a6:	e7d5      	b.n	8000754 <HAL_GPIO_Init+0x154>
 80007a8:	2501      	movs	r5, #1
 80007aa:	e7d3      	b.n	8000754 <HAL_GPIO_Init+0x154>
 80007ac:	2502      	movs	r5, #2
 80007ae:	e7d1      	b.n	8000754 <HAL_GPIO_Init+0x154>
 80007b0:	2503      	movs	r5, #3
 80007b2:	e7cf      	b.n	8000754 <HAL_GPIO_Init+0x154>
 80007b4:	2504      	movs	r5, #4
 80007b6:	e7cd      	b.n	8000754 <HAL_GPIO_Init+0x154>
 80007b8:	2505      	movs	r5, #5
 80007ba:	e7cb      	b.n	8000754 <HAL_GPIO_Init+0x154>
 80007bc:	2506      	movs	r5, #6
 80007be:	e7c9      	b.n	8000754 <HAL_GPIO_Init+0x154>
 80007c0:	2507      	movs	r5, #7
 80007c2:	e7c7      	b.n	8000754 <HAL_GPIO_Init+0x154>
 80007c4:	2508      	movs	r5, #8
 80007c6:	e7c5      	b.n	8000754 <HAL_GPIO_Init+0x154>
 80007c8:	40013c00 	.word	0x40013c00
 80007cc:	40020000 	.word	0x40020000
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40021400 	.word	0x40021400

080007d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007d8:	b10a      	cbz	r2, 80007de <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007da:	6181      	str	r1, [r0, #24]
 80007dc:	4770      	bx	lr
 80007de:	0409      	lsls	r1, r1, #16
 80007e0:	e7fb      	b.n	80007da <HAL_GPIO_WritePin+0x2>
	...

080007e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007e8:	4604      	mov	r4, r0
 80007ea:	b918      	cbnz	r0, 80007f4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80007ec:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80007ee:	b002      	add	sp, #8
 80007f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007f4:	6803      	ldr	r3, [r0, #0]
 80007f6:	07dd      	lsls	r5, r3, #31
 80007f8:	d410      	bmi.n	800081c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007fa:	6823      	ldr	r3, [r4, #0]
 80007fc:	0798      	lsls	r0, r3, #30
 80007fe:	d458      	bmi.n	80008b2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000800:	6823      	ldr	r3, [r4, #0]
 8000802:	071a      	lsls	r2, r3, #28
 8000804:	f100 809a 	bmi.w	800093c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000808:	6823      	ldr	r3, [r4, #0]
 800080a:	075b      	lsls	r3, r3, #29
 800080c:	f100 80b8 	bmi.w	8000980 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000810:	69a2      	ldr	r2, [r4, #24]
 8000812:	2a00      	cmp	r2, #0
 8000814:	f040 8119 	bne.w	8000a4a <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000818:	2000      	movs	r0, #0
 800081a:	e7e8      	b.n	80007ee <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800081c:	4ba6      	ldr	r3, [pc, #664]	; (8000ab8 <HAL_RCC_OscConfig+0x2d4>)
 800081e:	689a      	ldr	r2, [r3, #8]
 8000820:	f002 020c 	and.w	r2, r2, #12
 8000824:	2a04      	cmp	r2, #4
 8000826:	d007      	beq.n	8000838 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000828:	689a      	ldr	r2, [r3, #8]
 800082a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800082e:	2a08      	cmp	r2, #8
 8000830:	d10a      	bne.n	8000848 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	0259      	lsls	r1, r3, #9
 8000836:	d507      	bpl.n	8000848 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000838:	4b9f      	ldr	r3, [pc, #636]	; (8000ab8 <HAL_RCC_OscConfig+0x2d4>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	039a      	lsls	r2, r3, #14
 800083e:	d5dc      	bpl.n	80007fa <HAL_RCC_OscConfig+0x16>
 8000840:	6863      	ldr	r3, [r4, #4]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1d9      	bne.n	80007fa <HAL_RCC_OscConfig+0x16>
 8000846:	e7d1      	b.n	80007ec <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000848:	6863      	ldr	r3, [r4, #4]
 800084a:	4d9b      	ldr	r5, [pc, #620]	; (8000ab8 <HAL_RCC_OscConfig+0x2d4>)
 800084c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000850:	d111      	bne.n	8000876 <HAL_RCC_OscConfig+0x92>
 8000852:	682b      	ldr	r3, [r5, #0]
 8000854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000858:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800085a:	f7ff fe77 	bl	800054c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800085e:	4d96      	ldr	r5, [pc, #600]	; (8000ab8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000860:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000862:	682b      	ldr	r3, [r5, #0]
 8000864:	039b      	lsls	r3, r3, #14
 8000866:	d4c8      	bmi.n	80007fa <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000868:	f7ff fe70 	bl	800054c <HAL_GetTick>
 800086c:	1b80      	subs	r0, r0, r6
 800086e:	2864      	cmp	r0, #100	; 0x64
 8000870:	d9f7      	bls.n	8000862 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000872:	2003      	movs	r0, #3
 8000874:	e7bb      	b.n	80007ee <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000876:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800087a:	d104      	bne.n	8000886 <HAL_RCC_OscConfig+0xa2>
 800087c:	682b      	ldr	r3, [r5, #0]
 800087e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000882:	602b      	str	r3, [r5, #0]
 8000884:	e7e5      	b.n	8000852 <HAL_RCC_OscConfig+0x6e>
 8000886:	682a      	ldr	r2, [r5, #0]
 8000888:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800088c:	602a      	str	r2, [r5, #0]
 800088e:	682a      	ldr	r2, [r5, #0]
 8000890:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000894:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000896:	2b00      	cmp	r3, #0
 8000898:	d1df      	bne.n	800085a <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800089a:	f7ff fe57 	bl	800054c <HAL_GetTick>
 800089e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008a0:	682b      	ldr	r3, [r5, #0]
 80008a2:	039f      	lsls	r7, r3, #14
 80008a4:	d5a9      	bpl.n	80007fa <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008a6:	f7ff fe51 	bl	800054c <HAL_GetTick>
 80008aa:	1b80      	subs	r0, r0, r6
 80008ac:	2864      	cmp	r0, #100	; 0x64
 80008ae:	d9f7      	bls.n	80008a0 <HAL_RCC_OscConfig+0xbc>
 80008b0:	e7df      	b.n	8000872 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008b2:	4b81      	ldr	r3, [pc, #516]	; (8000ab8 <HAL_RCC_OscConfig+0x2d4>)
 80008b4:	689a      	ldr	r2, [r3, #8]
 80008b6:	f012 0f0c 	tst.w	r2, #12
 80008ba:	d007      	beq.n	80008cc <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008bc:	689a      	ldr	r2, [r3, #8]
 80008be:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008c2:	2a08      	cmp	r2, #8
 80008c4:	d111      	bne.n	80008ea <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	025e      	lsls	r6, r3, #9
 80008ca:	d40e      	bmi.n	80008ea <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008cc:	4b7a      	ldr	r3, [pc, #488]	; (8000ab8 <HAL_RCC_OscConfig+0x2d4>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	0795      	lsls	r5, r2, #30
 80008d2:	d502      	bpl.n	80008da <HAL_RCC_OscConfig+0xf6>
 80008d4:	68e2      	ldr	r2, [r4, #12]
 80008d6:	2a01      	cmp	r2, #1
 80008d8:	d188      	bne.n	80007ec <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	6921      	ldr	r1, [r4, #16]
 80008de:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80008e2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80008e6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008e8:	e78a      	b.n	8000800 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80008ea:	68e2      	ldr	r2, [r4, #12]
 80008ec:	4b73      	ldr	r3, [pc, #460]	; (8000abc <HAL_RCC_OscConfig+0x2d8>)
 80008ee:	b1b2      	cbz	r2, 800091e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80008f0:	2201      	movs	r2, #1
 80008f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008f4:	f7ff fe2a 	bl	800054c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008f8:	4d6f      	ldr	r5, [pc, #444]	; (8000ab8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80008fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008fc:	682b      	ldr	r3, [r5, #0]
 80008fe:	0798      	lsls	r0, r3, #30
 8000900:	d507      	bpl.n	8000912 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000902:	682b      	ldr	r3, [r5, #0]
 8000904:	6922      	ldr	r2, [r4, #16]
 8000906:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800090a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800090e:	602b      	str	r3, [r5, #0]
 8000910:	e776      	b.n	8000800 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000912:	f7ff fe1b 	bl	800054c <HAL_GetTick>
 8000916:	1b80      	subs	r0, r0, r6
 8000918:	2802      	cmp	r0, #2
 800091a:	d9ef      	bls.n	80008fc <HAL_RCC_OscConfig+0x118>
 800091c:	e7a9      	b.n	8000872 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800091e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000920:	f7ff fe14 	bl	800054c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000924:	4d64      	ldr	r5, [pc, #400]	; (8000ab8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000926:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000928:	682b      	ldr	r3, [r5, #0]
 800092a:	0799      	lsls	r1, r3, #30
 800092c:	f57f af68 	bpl.w	8000800 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000930:	f7ff fe0c 	bl	800054c <HAL_GetTick>
 8000934:	1b80      	subs	r0, r0, r6
 8000936:	2802      	cmp	r0, #2
 8000938:	d9f6      	bls.n	8000928 <HAL_RCC_OscConfig+0x144>
 800093a:	e79a      	b.n	8000872 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800093c:	6962      	ldr	r2, [r4, #20]
 800093e:	4b60      	ldr	r3, [pc, #384]	; (8000ac0 <HAL_RCC_OscConfig+0x2dc>)
 8000940:	b17a      	cbz	r2, 8000962 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000942:	2201      	movs	r2, #1
 8000944:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000946:	f7ff fe01 	bl	800054c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800094a:	4d5b      	ldr	r5, [pc, #364]	; (8000ab8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800094c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800094e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000950:	079f      	lsls	r7, r3, #30
 8000952:	f53f af59 	bmi.w	8000808 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000956:	f7ff fdf9 	bl	800054c <HAL_GetTick>
 800095a:	1b80      	subs	r0, r0, r6
 800095c:	2802      	cmp	r0, #2
 800095e:	d9f6      	bls.n	800094e <HAL_RCC_OscConfig+0x16a>
 8000960:	e787      	b.n	8000872 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000962:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000964:	f7ff fdf2 	bl	800054c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000968:	4d53      	ldr	r5, [pc, #332]	; (8000ab8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800096a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800096c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800096e:	0798      	lsls	r0, r3, #30
 8000970:	f57f af4a 	bpl.w	8000808 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000974:	f7ff fdea 	bl	800054c <HAL_GetTick>
 8000978:	1b80      	subs	r0, r0, r6
 800097a:	2802      	cmp	r0, #2
 800097c:	d9f6      	bls.n	800096c <HAL_RCC_OscConfig+0x188>
 800097e:	e778      	b.n	8000872 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000980:	4b4d      	ldr	r3, [pc, #308]	; (8000ab8 <HAL_RCC_OscConfig+0x2d4>)
 8000982:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000984:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000988:	d128      	bne.n	80009dc <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800098a:	9201      	str	r2, [sp, #4]
 800098c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800098e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000992:	641a      	str	r2, [r3, #64]	; 0x40
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099a:	9301      	str	r3, [sp, #4]
 800099c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800099e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009a0:	4d48      	ldr	r5, [pc, #288]	; (8000ac4 <HAL_RCC_OscConfig+0x2e0>)
 80009a2:	682b      	ldr	r3, [r5, #0]
 80009a4:	05d9      	lsls	r1, r3, #23
 80009a6:	d51b      	bpl.n	80009e0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009a8:	68a3      	ldr	r3, [r4, #8]
 80009aa:	4d43      	ldr	r5, [pc, #268]	; (8000ab8 <HAL_RCC_OscConfig+0x2d4>)
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d127      	bne.n	8000a00 <HAL_RCC_OscConfig+0x21c>
 80009b0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80009b8:	f7ff fdc8 	bl	800054c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009bc:	4d3e      	ldr	r5, [pc, #248]	; (8000ab8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80009be:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009c0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009c4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009c6:	079b      	lsls	r3, r3, #30
 80009c8:	d539      	bpl.n	8000a3e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80009ca:	2e00      	cmp	r6, #0
 80009cc:	f43f af20 	beq.w	8000810 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80009d0:	4a39      	ldr	r2, [pc, #228]	; (8000ab8 <HAL_RCC_OscConfig+0x2d4>)
 80009d2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80009d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009d8:	6413      	str	r3, [r2, #64]	; 0x40
 80009da:	e719      	b.n	8000810 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80009dc:	2600      	movs	r6, #0
 80009de:	e7df      	b.n	80009a0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009e0:	682b      	ldr	r3, [r5, #0]
 80009e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009e6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80009e8:	f7ff fdb0 	bl	800054c <HAL_GetTick>
 80009ec:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009ee:	682b      	ldr	r3, [r5, #0]
 80009f0:	05da      	lsls	r2, r3, #23
 80009f2:	d4d9      	bmi.n	80009a8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009f4:	f7ff fdaa 	bl	800054c <HAL_GetTick>
 80009f8:	1bc0      	subs	r0, r0, r7
 80009fa:	2802      	cmp	r0, #2
 80009fc:	d9f7      	bls.n	80009ee <HAL_RCC_OscConfig+0x20a>
 80009fe:	e738      	b.n	8000872 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a00:	2b05      	cmp	r3, #5
 8000a02:	d104      	bne.n	8000a0e <HAL_RCC_OscConfig+0x22a>
 8000a04:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a06:	f043 0304 	orr.w	r3, r3, #4
 8000a0a:	672b      	str	r3, [r5, #112]	; 0x70
 8000a0c:	e7d0      	b.n	80009b0 <HAL_RCC_OscConfig+0x1cc>
 8000a0e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a10:	f022 0201 	bic.w	r2, r2, #1
 8000a14:	672a      	str	r2, [r5, #112]	; 0x70
 8000a16:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a18:	f022 0204 	bic.w	r2, r2, #4
 8000a1c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d1ca      	bne.n	80009b8 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000a22:	f7ff fd93 	bl	800054c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a26:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a2a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a2c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a2e:	0798      	lsls	r0, r3, #30
 8000a30:	d5cb      	bpl.n	80009ca <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a32:	f7ff fd8b 	bl	800054c <HAL_GetTick>
 8000a36:	1bc0      	subs	r0, r0, r7
 8000a38:	4540      	cmp	r0, r8
 8000a3a:	d9f7      	bls.n	8000a2c <HAL_RCC_OscConfig+0x248>
 8000a3c:	e719      	b.n	8000872 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a3e:	f7ff fd85 	bl	800054c <HAL_GetTick>
 8000a42:	1bc0      	subs	r0, r0, r7
 8000a44:	4540      	cmp	r0, r8
 8000a46:	d9bd      	bls.n	80009c4 <HAL_RCC_OscConfig+0x1e0>
 8000a48:	e713      	b.n	8000872 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a4a:	4d1b      	ldr	r5, [pc, #108]	; (8000ab8 <HAL_RCC_OscConfig+0x2d4>)
 8000a4c:	68ab      	ldr	r3, [r5, #8]
 8000a4e:	f003 030c 	and.w	r3, r3, #12
 8000a52:	2b08      	cmp	r3, #8
 8000a54:	f43f aeca 	beq.w	80007ec <HAL_RCC_OscConfig+0x8>
 8000a58:	4e1b      	ldr	r6, [pc, #108]	; (8000ac8 <HAL_RCC_OscConfig+0x2e4>)
 8000a5a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a5c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000a5e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a60:	d134      	bne.n	8000acc <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000a62:	f7ff fd73 	bl	800054c <HAL_GetTick>
 8000a66:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a68:	682b      	ldr	r3, [r5, #0]
 8000a6a:	0199      	lsls	r1, r3, #6
 8000a6c:	d41e      	bmi.n	8000aac <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a6e:	6a22      	ldr	r2, [r4, #32]
 8000a70:	69e3      	ldr	r3, [r4, #28]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a76:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000a7a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000a7c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000a80:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a82:	4c0d      	ldr	r4, [pc, #52]	; (8000ab8 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a84:	0852      	lsrs	r2, r2, #1
 8000a86:	3a01      	subs	r2, #1
 8000a88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a8c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000a8e:	2301      	movs	r3, #1
 8000a90:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000a92:	f7ff fd5b 	bl	800054c <HAL_GetTick>
 8000a96:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a98:	6823      	ldr	r3, [r4, #0]
 8000a9a:	019a      	lsls	r2, r3, #6
 8000a9c:	f53f aebc 	bmi.w	8000818 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000aa0:	f7ff fd54 	bl	800054c <HAL_GetTick>
 8000aa4:	1b40      	subs	r0, r0, r5
 8000aa6:	2802      	cmp	r0, #2
 8000aa8:	d9f6      	bls.n	8000a98 <HAL_RCC_OscConfig+0x2b4>
 8000aaa:	e6e2      	b.n	8000872 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000aac:	f7ff fd4e 	bl	800054c <HAL_GetTick>
 8000ab0:	1bc0      	subs	r0, r0, r7
 8000ab2:	2802      	cmp	r0, #2
 8000ab4:	d9d8      	bls.n	8000a68 <HAL_RCC_OscConfig+0x284>
 8000ab6:	e6dc      	b.n	8000872 <HAL_RCC_OscConfig+0x8e>
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	42470000 	.word	0x42470000
 8000ac0:	42470e80 	.word	0x42470e80
 8000ac4:	40007000 	.word	0x40007000
 8000ac8:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000acc:	f7ff fd3e 	bl	800054c <HAL_GetTick>
 8000ad0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ad2:	682b      	ldr	r3, [r5, #0]
 8000ad4:	019b      	lsls	r3, r3, #6
 8000ad6:	f57f ae9f 	bpl.w	8000818 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ada:	f7ff fd37 	bl	800054c <HAL_GetTick>
 8000ade:	1b00      	subs	r0, r0, r4
 8000ae0:	2802      	cmp	r0, #2
 8000ae2:	d9f6      	bls.n	8000ad2 <HAL_RCC_OscConfig+0x2ee>
 8000ae4:	e6c5      	b.n	8000872 <HAL_RCC_OscConfig+0x8e>
 8000ae6:	bf00      	nop

08000ae8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ae8:	4913      	ldr	r1, [pc, #76]	; (8000b38 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000aea:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000aec:	688b      	ldr	r3, [r1, #8]
 8000aee:	f003 030c 	and.w	r3, r3, #12
 8000af2:	2b04      	cmp	r3, #4
 8000af4:	d003      	beq.n	8000afe <HAL_RCC_GetSysClockFreq+0x16>
 8000af6:	2b08      	cmp	r3, #8
 8000af8:	d003      	beq.n	8000b02 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000afa:	4810      	ldr	r0, [pc, #64]	; (8000b3c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000afc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000afe:	4810      	ldr	r0, [pc, #64]	; (8000b40 <HAL_RCC_GetSysClockFreq+0x58>)
 8000b00:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b02:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b04:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b06:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b08:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b0c:	bf14      	ite	ne
 8000b0e:	480c      	ldrne	r0, [pc, #48]	; (8000b40 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b10:	480a      	ldreq	r0, [pc, #40]	; (8000b3c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b12:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000b16:	bf18      	it	ne
 8000b18:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b1a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b1e:	fba1 0100 	umull	r0, r1, r1, r0
 8000b22:	f7ff fb65 	bl	80001f0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000b26:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <HAL_RCC_GetSysClockFreq+0x50>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000b2e:	3301      	adds	r3, #1
 8000b30:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000b32:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b36:	bd08      	pop	{r3, pc}
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	00f42400 	.word	0x00f42400
 8000b40:	007a1200 	.word	0x007a1200

08000b44 <HAL_RCC_ClockConfig>:
{
 8000b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b48:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	b910      	cbnz	r0, 8000b54 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b4e:	2001      	movs	r0, #1
 8000b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b54:	4b44      	ldr	r3, [pc, #272]	; (8000c68 <HAL_RCC_ClockConfig+0x124>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	f002 020f 	and.w	r2, r2, #15
 8000b5c:	428a      	cmp	r2, r1
 8000b5e:	d328      	bcc.n	8000bb2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b60:	6821      	ldr	r1, [r4, #0]
 8000b62:	078f      	lsls	r7, r1, #30
 8000b64:	d42d      	bmi.n	8000bc2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b66:	07c8      	lsls	r0, r1, #31
 8000b68:	d440      	bmi.n	8000bec <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000b6a:	4b3f      	ldr	r3, [pc, #252]	; (8000c68 <HAL_RCC_ClockConfig+0x124>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	f002 020f 	and.w	r2, r2, #15
 8000b72:	4295      	cmp	r5, r2
 8000b74:	d366      	bcc.n	8000c44 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b76:	6822      	ldr	r2, [r4, #0]
 8000b78:	0751      	lsls	r1, r2, #29
 8000b7a:	d46c      	bmi.n	8000c56 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b7c:	0713      	lsls	r3, r2, #28
 8000b7e:	d507      	bpl.n	8000b90 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000b80:	4a3a      	ldr	r2, [pc, #232]	; (8000c6c <HAL_RCC_ClockConfig+0x128>)
 8000b82:	6921      	ldr	r1, [r4, #16]
 8000b84:	6893      	ldr	r3, [r2, #8]
 8000b86:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000b8a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000b8e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000b90:	f7ff ffaa 	bl	8000ae8 <HAL_RCC_GetSysClockFreq>
 8000b94:	4b35      	ldr	r3, [pc, #212]	; (8000c6c <HAL_RCC_ClockConfig+0x128>)
 8000b96:	4a36      	ldr	r2, [pc, #216]	; (8000c70 <HAL_RCC_ClockConfig+0x12c>)
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000b9e:	5cd3      	ldrb	r3, [r2, r3]
 8000ba0:	40d8      	lsrs	r0, r3
 8000ba2:	4b34      	ldr	r3, [pc, #208]	; (8000c74 <HAL_RCC_ClockConfig+0x130>)
 8000ba4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f001 fdca 	bl	8002740 <HAL_InitTick>
  return HAL_OK;
 8000bac:	2000      	movs	r0, #0
 8000bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bb2:	b2ca      	uxtb	r2, r1
 8000bb4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f003 030f 	and.w	r3, r3, #15
 8000bbc:	4299      	cmp	r1, r3
 8000bbe:	d1c6      	bne.n	8000b4e <HAL_RCC_ClockConfig+0xa>
 8000bc0:	e7ce      	b.n	8000b60 <HAL_RCC_ClockConfig+0x1c>
 8000bc2:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bc4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000bc8:	bf1e      	ittt	ne
 8000bca:	689a      	ldrne	r2, [r3, #8]
 8000bcc:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000bd0:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bd2:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000bd4:	bf42      	ittt	mi
 8000bd6:	689a      	ldrmi	r2, [r3, #8]
 8000bd8:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000bdc:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000bde:	689a      	ldr	r2, [r3, #8]
 8000be0:	68a0      	ldr	r0, [r4, #8]
 8000be2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000be6:	4302      	orrs	r2, r0
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	e7bc      	b.n	8000b66 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bec:	6862      	ldr	r2, [r4, #4]
 8000bee:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <HAL_RCC_ClockConfig+0x128>)
 8000bf0:	2a01      	cmp	r2, #1
 8000bf2:	d11d      	bne.n	8000c30 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bfa:	d0a8      	beq.n	8000b4e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bfc:	4e1b      	ldr	r6, [pc, #108]	; (8000c6c <HAL_RCC_ClockConfig+0x128>)
 8000bfe:	68b3      	ldr	r3, [r6, #8]
 8000c00:	f023 0303 	bic.w	r3, r3, #3
 8000c04:	4313      	orrs	r3, r2
 8000c06:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000c08:	f7ff fca0 	bl	800054c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c0c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c10:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c12:	68b3      	ldr	r3, [r6, #8]
 8000c14:	6862      	ldr	r2, [r4, #4]
 8000c16:	f003 030c 	and.w	r3, r3, #12
 8000c1a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c1e:	d0a4      	beq.n	8000b6a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c20:	f7ff fc94 	bl	800054c <HAL_GetTick>
 8000c24:	1bc0      	subs	r0, r0, r7
 8000c26:	4540      	cmp	r0, r8
 8000c28:	d9f3      	bls.n	8000c12 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000c2a:	2003      	movs	r0, #3
}
 8000c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c30:	1e91      	subs	r1, r2, #2
 8000c32:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c34:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c36:	d802      	bhi.n	8000c3e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c38:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c3c:	e7dd      	b.n	8000bfa <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c3e:	f013 0f02 	tst.w	r3, #2
 8000c42:	e7da      	b.n	8000bfa <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c44:	b2ea      	uxtb	r2, r5
 8000c46:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	429d      	cmp	r5, r3
 8000c50:	f47f af7d 	bne.w	8000b4e <HAL_RCC_ClockConfig+0xa>
 8000c54:	e78f      	b.n	8000b76 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c56:	4905      	ldr	r1, [pc, #20]	; (8000c6c <HAL_RCC_ClockConfig+0x128>)
 8000c58:	68e0      	ldr	r0, [r4, #12]
 8000c5a:	688b      	ldr	r3, [r1, #8]
 8000c5c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000c60:	4303      	orrs	r3, r0
 8000c62:	608b      	str	r3, [r1, #8]
 8000c64:	e78a      	b.n	8000b7c <HAL_RCC_ClockConfig+0x38>
 8000c66:	bf00      	nop
 8000c68:	40023c00 	.word	0x40023c00
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	0800297b 	.word	0x0800297b
 8000c74:	20000008 	.word	0x20000008

08000c78 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <HAL_RCC_GetPCLK1Freq+0x14>)
 8000c7a:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000c82:	5cd3      	ldrb	r3, [r2, r3]
 8000c84:	4a03      	ldr	r2, [pc, #12]	; (8000c94 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000c86:	6810      	ldr	r0, [r2, #0]
}
 8000c88:	40d8      	lsrs	r0, r3
 8000c8a:	4770      	bx	lr
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	0800298b 	.word	0x0800298b
 8000c94:	20000008 	.word	0x20000008

08000c98 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000c98:	230f      	movs	r3, #15
 8000c9a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <HAL_RCC_GetClockConfig+0x34>)
 8000c9e:	689a      	ldr	r2, [r3, #8]
 8000ca0:	f002 0203 	and.w	r2, r2, #3
 8000ca4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000ca6:	689a      	ldr	r2, [r3, #8]
 8000ca8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000cac:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000cae:	689a      	ldr	r2, [r3, #8]
 8000cb0:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000cb4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	08db      	lsrs	r3, r3, #3
 8000cba:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000cbe:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <HAL_RCC_GetClockConfig+0x38>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 030f 	and.w	r3, r3, #15
 8000cc8:	600b      	str	r3, [r1, #0]
 8000cca:	4770      	bx	lr
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40023c00 	.word	0x40023c00

08000cd4 <HAL_TIM_Base_MspInit>:
 8000cd4:	4770      	bx	lr

08000cd6 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000cd6:	6803      	ldr	r3, [r0, #0]
 8000cd8:	68da      	ldr	r2, [r3, #12]
 8000cda:	f042 0201 	orr.w	r2, r2, #1
 8000cde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000ce6:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8000ce8:	bf1e      	ittt	ne
 8000cea:	681a      	ldrne	r2, [r3, #0]
 8000cec:	f042 0201 	orrne.w	r2, r2, #1
 8000cf0:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	4770      	bx	lr

08000cf6 <HAL_TIM_OC_DelayElapsedCallback>:
 8000cf6:	4770      	bx	lr

08000cf8 <HAL_TIM_IC_CaptureCallback>:
 8000cf8:	4770      	bx	lr

08000cfa <HAL_TIM_PWM_PulseFinishedCallback>:
 8000cfa:	4770      	bx	lr

08000cfc <HAL_TIM_TriggerCallback>:
 8000cfc:	4770      	bx	lr

08000cfe <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000cfe:	6803      	ldr	r3, [r0, #0]
 8000d00:	691a      	ldr	r2, [r3, #16]
 8000d02:	0791      	lsls	r1, r2, #30
{
 8000d04:	b510      	push	{r4, lr}
 8000d06:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d08:	d50e      	bpl.n	8000d28 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000d0a:	68da      	ldr	r2, [r3, #12]
 8000d0c:	0792      	lsls	r2, r2, #30
 8000d0e:	d50b      	bpl.n	8000d28 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000d10:	f06f 0202 	mvn.w	r2, #2
 8000d14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d16:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d18:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d1a:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d1c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d1e:	d077      	beq.n	8000e10 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000d20:	f7ff ffea 	bl	8000cf8 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d24:	2300      	movs	r3, #0
 8000d26:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000d28:	6823      	ldr	r3, [r4, #0]
 8000d2a:	691a      	ldr	r2, [r3, #16]
 8000d2c:	0750      	lsls	r0, r2, #29
 8000d2e:	d510      	bpl.n	8000d52 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000d30:	68da      	ldr	r2, [r3, #12]
 8000d32:	0751      	lsls	r1, r2, #29
 8000d34:	d50d      	bpl.n	8000d52 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000d36:	f06f 0204 	mvn.w	r2, #4
 8000d3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d3c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d3e:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d40:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d44:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000d46:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d48:	d068      	beq.n	8000e1c <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d4a:	f7ff ffd5 	bl	8000cf8 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000d52:	6823      	ldr	r3, [r4, #0]
 8000d54:	691a      	ldr	r2, [r3, #16]
 8000d56:	0712      	lsls	r2, r2, #28
 8000d58:	d50f      	bpl.n	8000d7a <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000d5a:	68da      	ldr	r2, [r3, #12]
 8000d5c:	0710      	lsls	r0, r2, #28
 8000d5e:	d50c      	bpl.n	8000d7a <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000d60:	f06f 0208 	mvn.w	r2, #8
 8000d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d66:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d68:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d6a:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d6c:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000d6e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d70:	d05a      	beq.n	8000e28 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d72:	f7ff ffc1 	bl	8000cf8 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d76:	2300      	movs	r3, #0
 8000d78:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000d7a:	6823      	ldr	r3, [r4, #0]
 8000d7c:	691a      	ldr	r2, [r3, #16]
 8000d7e:	06d2      	lsls	r2, r2, #27
 8000d80:	d510      	bpl.n	8000da4 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000d82:	68da      	ldr	r2, [r3, #12]
 8000d84:	06d0      	lsls	r0, r2, #27
 8000d86:	d50d      	bpl.n	8000da4 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000d88:	f06f 0210 	mvn.w	r2, #16
 8000d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000d8e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000d90:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000d92:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000d96:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000d98:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000d9a:	d04b      	beq.n	8000e34 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d9c:	f7ff ffac 	bl	8000cf8 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000da0:	2300      	movs	r3, #0
 8000da2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000da4:	6823      	ldr	r3, [r4, #0]
 8000da6:	691a      	ldr	r2, [r3, #16]
 8000da8:	07d1      	lsls	r1, r2, #31
 8000daa:	d508      	bpl.n	8000dbe <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000dac:	68da      	ldr	r2, [r3, #12]
 8000dae:	07d2      	lsls	r2, r2, #31
 8000db0:	d505      	bpl.n	8000dbe <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000db2:	f06f 0201 	mvn.w	r2, #1
 8000db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000db8:	4620      	mov	r0, r4
 8000dba:	f001 fc95 	bl	80026e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000dbe:	6823      	ldr	r3, [r4, #0]
 8000dc0:	691a      	ldr	r2, [r3, #16]
 8000dc2:	0610      	lsls	r0, r2, #24
 8000dc4:	d508      	bpl.n	8000dd8 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000dc6:	68da      	ldr	r2, [r3, #12]
 8000dc8:	0611      	lsls	r1, r2, #24
 8000dca:	d505      	bpl.n	8000dd8 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000dcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000dd2:	4620      	mov	r0, r4
 8000dd4:	f000 f8b7 	bl	8000f46 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000dd8:	6823      	ldr	r3, [r4, #0]
 8000dda:	691a      	ldr	r2, [r3, #16]
 8000ddc:	0652      	lsls	r2, r2, #25
 8000dde:	d508      	bpl.n	8000df2 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000de0:	68da      	ldr	r2, [r3, #12]
 8000de2:	0650      	lsls	r0, r2, #25
 8000de4:	d505      	bpl.n	8000df2 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000de6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000dec:	4620      	mov	r0, r4
 8000dee:	f7ff ff85 	bl	8000cfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000df2:	6823      	ldr	r3, [r4, #0]
 8000df4:	691a      	ldr	r2, [r3, #16]
 8000df6:	0691      	lsls	r1, r2, #26
 8000df8:	d522      	bpl.n	8000e40 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000dfa:	68da      	ldr	r2, [r3, #12]
 8000dfc:	0692      	lsls	r2, r2, #26
 8000dfe:	d51f      	bpl.n	8000e40 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e00:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000e04:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e06:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8000e0c:	f000 b89a 	b.w	8000f44 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e10:	f7ff ff71 	bl	8000cf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e14:	4620      	mov	r0, r4
 8000e16:	f7ff ff70 	bl	8000cfa <HAL_TIM_PWM_PulseFinishedCallback>
 8000e1a:	e783      	b.n	8000d24 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e1c:	f7ff ff6b 	bl	8000cf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e20:	4620      	mov	r0, r4
 8000e22:	f7ff ff6a 	bl	8000cfa <HAL_TIM_PWM_PulseFinishedCallback>
 8000e26:	e792      	b.n	8000d4e <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e28:	f7ff ff65 	bl	8000cf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	f7ff ff64 	bl	8000cfa <HAL_TIM_PWM_PulseFinishedCallback>
 8000e32:	e7a0      	b.n	8000d76 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e34:	f7ff ff5f 	bl	8000cf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e38:	4620      	mov	r0, r4
 8000e3a:	f7ff ff5e 	bl	8000cfa <HAL_TIM_PWM_PulseFinishedCallback>
 8000e3e:	e7af      	b.n	8000da0 <HAL_TIM_IRQHandler+0xa2>
 8000e40:	bd10      	pop	{r4, pc}
	...

08000e44 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e44:	4a30      	ldr	r2, [pc, #192]	; (8000f08 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8000e46:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e48:	4290      	cmp	r0, r2
 8000e4a:	d012      	beq.n	8000e72 <TIM_Base_SetConfig+0x2e>
 8000e4c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e50:	d00f      	beq.n	8000e72 <TIM_Base_SetConfig+0x2e>
 8000e52:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000e56:	4290      	cmp	r0, r2
 8000e58:	d00b      	beq.n	8000e72 <TIM_Base_SetConfig+0x2e>
 8000e5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e5e:	4290      	cmp	r0, r2
 8000e60:	d007      	beq.n	8000e72 <TIM_Base_SetConfig+0x2e>
 8000e62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e66:	4290      	cmp	r0, r2
 8000e68:	d003      	beq.n	8000e72 <TIM_Base_SetConfig+0x2e>
 8000e6a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000e6e:	4290      	cmp	r0, r2
 8000e70:	d119      	bne.n	8000ea6 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000e72:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000e78:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000e7a:	4a23      	ldr	r2, [pc, #140]	; (8000f08 <TIM_Base_SetConfig+0xc4>)
 8000e7c:	4290      	cmp	r0, r2
 8000e7e:	d029      	beq.n	8000ed4 <TIM_Base_SetConfig+0x90>
 8000e80:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e84:	d026      	beq.n	8000ed4 <TIM_Base_SetConfig+0x90>
 8000e86:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000e8a:	4290      	cmp	r0, r2
 8000e8c:	d022      	beq.n	8000ed4 <TIM_Base_SetConfig+0x90>
 8000e8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e92:	4290      	cmp	r0, r2
 8000e94:	d01e      	beq.n	8000ed4 <TIM_Base_SetConfig+0x90>
 8000e96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e9a:	4290      	cmp	r0, r2
 8000e9c:	d01a      	beq.n	8000ed4 <TIM_Base_SetConfig+0x90>
 8000e9e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000ea2:	4290      	cmp	r0, r2
 8000ea4:	d016      	beq.n	8000ed4 <TIM_Base_SetConfig+0x90>
 8000ea6:	4a19      	ldr	r2, [pc, #100]	; (8000f0c <TIM_Base_SetConfig+0xc8>)
 8000ea8:	4290      	cmp	r0, r2
 8000eaa:	d013      	beq.n	8000ed4 <TIM_Base_SetConfig+0x90>
 8000eac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eb0:	4290      	cmp	r0, r2
 8000eb2:	d00f      	beq.n	8000ed4 <TIM_Base_SetConfig+0x90>
 8000eb4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eb8:	4290      	cmp	r0, r2
 8000eba:	d00b      	beq.n	8000ed4 <TIM_Base_SetConfig+0x90>
 8000ebc:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000ec0:	4290      	cmp	r0, r2
 8000ec2:	d007      	beq.n	8000ed4 <TIM_Base_SetConfig+0x90>
 8000ec4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ec8:	4290      	cmp	r0, r2
 8000eca:	d003      	beq.n	8000ed4 <TIM_Base_SetConfig+0x90>
 8000ecc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ed0:	4290      	cmp	r0, r2
 8000ed2:	d103      	bne.n	8000edc <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000ed4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000eda:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000edc:	694a      	ldr	r2, [r1, #20]
 8000ede:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ee2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000ee4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000ee6:	688b      	ldr	r3, [r1, #8]
 8000ee8:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000eea:	680b      	ldr	r3, [r1, #0]
 8000eec:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <TIM_Base_SetConfig+0xc4>)
 8000ef0:	4298      	cmp	r0, r3
 8000ef2:	d003      	beq.n	8000efc <TIM_Base_SetConfig+0xb8>
 8000ef4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ef8:	4298      	cmp	r0, r3
 8000efa:	d101      	bne.n	8000f00 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000efc:	690b      	ldr	r3, [r1, #16]
 8000efe:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000f00:	2301      	movs	r3, #1
 8000f02:	6143      	str	r3, [r0, #20]
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40010000 	.word	0x40010000
 8000f0c:	40014000 	.word	0x40014000

08000f10 <HAL_TIM_Base_Init>:
{
 8000f10:	b510      	push	{r4, lr}
  if (htim == NULL)
 8000f12:	4604      	mov	r4, r0
 8000f14:	b1a0      	cbz	r0, 8000f40 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000f16:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000f1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f1e:	b91b      	cbnz	r3, 8000f28 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000f20:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000f24:	f7ff fed6 	bl	8000cd4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f2e:	6820      	ldr	r0, [r4, #0]
 8000f30:	1d21      	adds	r1, r4, #4
 8000f32:	f7ff ff87 	bl	8000e44 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8000f36:	2301      	movs	r3, #1
 8000f38:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f40:	2001      	movs	r0, #1
}
 8000f42:	bd10      	pop	{r4, pc}

08000f44 <HAL_TIMEx_CommutCallback>:
 8000f44:	4770      	bx	lr

08000f46 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000f46:	4770      	bx	lr

08000f48 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000f48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000f4c:	680a      	ldr	r2, [r1, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f4e:	fa92 f4a2 	rbit	r4, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000f52:	f04f 0e01 	mov.w	lr, #1
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000f56:	fab4 f484 	clz	r4, r4
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000f5a:	2503      	movs	r5, #3
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000f5c:	270f      	movs	r7, #15
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000f5e:	fa32 f304 	lsrs.w	r3, r2, r4
 8000f62:	d10d      	bne.n	8000f80 <LL_GPIO_Init+0x38>
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000f64:	684b      	ldr	r3, [r1, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d806      	bhi.n	8000f7a <LL_GPIO_Init+0x32>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000f6c:	6843      	ldr	r3, [r0, #4]
 8000f6e:	68c9      	ldr	r1, [r1, #12]
 8000f70:	ea23 0302 	bic.w	r3, r3, r2
 8000f74:	434a      	muls	r2, r1
 8000f76:	431a      	orrs	r2, r3
 8000f78:	6042      	str	r2, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000f80:	fa0e f304 	lsl.w	r3, lr, r4
    if (currentpin)
 8000f84:	4013      	ands	r3, r2
 8000f86:	d069      	beq.n	800105c <LL_GPIO_Init+0x114>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000f88:	f8d1 8004 	ldr.w	r8, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000f8c:	f8d0 9000 	ldr.w	r9, [r0]
 8000f90:	fa93 fca3 	rbit	ip, r3
 8000f94:	fabc fc8c 	clz	ip, ip
 8000f98:	fa93 f6a3 	rbit	r6, r3
 8000f9c:	fab6 f686 	clz	r6, r6
 8000fa0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8000fa4:	fa05 fc0c 	lsl.w	ip, r5, ip
 8000fa8:	0076      	lsls	r6, r6, #1
 8000faa:	ea29 0c0c 	bic.w	ip, r9, ip
 8000fae:	fa08 f606 	lsl.w	r6, r8, r6
 8000fb2:	ea4c 0606 	orr.w	r6, ip, r6
 8000fb6:	6006      	str	r6, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000fb8:	f108 36ff 	add.w	r6, r8, #4294967295
 8000fbc:	2e01      	cmp	r6, #1
 8000fbe:	d816      	bhi.n	8000fee <LL_GPIO_Init+0xa6>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000fc0:	6886      	ldr	r6, [r0, #8]
 8000fc2:	fa93 fca3 	rbit	ip, r3
 8000fc6:	fabc fc8c 	clz	ip, ip
 8000fca:	fa93 f9a3 	rbit	r9, r3
 8000fce:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8000fd2:	fa05 fc0c 	lsl.w	ip, r5, ip
 8000fd6:	ea26 0c0c 	bic.w	ip, r6, ip
 8000fda:	fab9 f989 	clz	r9, r9
 8000fde:	688e      	ldr	r6, [r1, #8]
 8000fe0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8000fe4:	fa06 f609 	lsl.w	r6, r6, r9
 8000fe8:	ea4c 0606 	orr.w	r6, ip, r6
 8000fec:	6086      	str	r6, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000fee:	68c6      	ldr	r6, [r0, #12]
 8000ff0:	fa93 fca3 	rbit	ip, r3
 8000ff4:	fabc fc8c 	clz	ip, ip
 8000ff8:	fa93 f9a3 	rbit	r9, r3
 8000ffc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8001000:	fa05 fc0c 	lsl.w	ip, r5, ip
 8001004:	ea26 0c0c 	bic.w	ip, r6, ip
 8001008:	fab9 f989 	clz	r9, r9
 800100c:	690e      	ldr	r6, [r1, #16]
 800100e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8001012:	fa06 f609 	lsl.w	r6, r6, r9
 8001016:	ea4c 0606 	orr.w	r6, ip, r6
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800101a:	f1b8 0f02 	cmp.w	r8, #2
 800101e:	60c6      	str	r6, [r0, #12]
 8001020:	d11c      	bne.n	800105c <LL_GPIO_Init+0x114>
 8001022:	fa93 f6a3 	rbit	r6, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001026:	fab6 f686 	clz	r6, r6
 800102a:	2e07      	cmp	r6, #7
 800102c:	f8d1 c014 	ldr.w	ip, [r1, #20]
 8001030:	dc16      	bgt.n	8001060 <LL_GPIO_Init+0x118>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001032:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8001036:	fa93 f6a3 	rbit	r6, r3
 800103a:	fab6 f686 	clz	r6, r6
 800103e:	fa93 f3a3 	rbit	r3, r3
 8001042:	fab3 f383 	clz	r3, r3
 8001046:	00b6      	lsls	r6, r6, #2
 8001048:	fa07 f606 	lsl.w	r6, r7, r6
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	ea28 0606 	bic.w	r6, r8, r6
 8001052:	fa0c fc03 	lsl.w	ip, ip, r3
 8001056:	ea46 060c 	orr.w	r6, r6, ip
 800105a:	6206      	str	r6, [r0, #32]
    pinpos++;
 800105c:	3401      	adds	r4, #1
 800105e:	e77e      	b.n	8000f5e <LL_GPIO_Init+0x16>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001060:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
 8001064:	0a1b      	lsrs	r3, r3, #8
 8001066:	fa93 f6a3 	rbit	r6, r3
 800106a:	fab6 f686 	clz	r6, r6
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	fab3 f383 	clz	r3, r3
 8001076:	00b6      	lsls	r6, r6, #2
 8001078:	fa07 f606 	lsl.w	r6, r7, r6
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	ea28 0606 	bic.w	r6, r8, r6
 8001082:	fa0c f303 	lsl.w	r3, ip, r3
 8001086:	4333      	orrs	r3, r6
 8001088:	6243      	str	r3, [r0, #36]	; 0x24
 800108a:	e7e7      	b.n	800105c <LL_GPIO_Init+0x114>

0800108c <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800108e:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <RCC_GetHCLKClockFreq+0x14>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001096:	5cd3      	ldrb	r3, [r2, r3]
}
 8001098:	40d8      	lsrs	r0, r3
 800109a:	4770      	bx	lr
 800109c:	40023800 	.word	0x40023800
 80010a0:	0800297b 	.word	0x0800297b

080010a4 <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80010a4:	4b03      	ldr	r3, [pc, #12]	; (80010b4 <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80010a6:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <RCC_GetPCLK1ClockFreq+0x14>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80010ae:	5cd3      	ldrb	r3, [r2, r3]
}
 80010b0:	40d8      	lsrs	r0, r3
 80010b2:	4770      	bx	lr
 80010b4:	40023800 	.word	0x40023800
 80010b8:	0800298b 	.word	0x0800298b

080010bc <RCC_GetPCLK2ClockFreq>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80010be:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <RCC_GetPCLK2ClockFreq+0x14>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80010c6:	5cd3      	ldrb	r3, [r2, r3]
}
 80010c8:	40d8      	lsrs	r0, r3
 80010ca:	4770      	bx	lr
 80010cc:	40023800 	.word	0x40023800
 80010d0:	0800298b 	.word	0x0800298b

080010d4 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <RCC_PLL_GetFreqDomain_SYS+0x40>)
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80010d6:	4a10      	ldr	r2, [pc, #64]	; (8001118 <RCC_PLL_GetFreqDomain_SYS+0x44>)
 80010d8:	6859      	ldr	r1, [r3, #4]
{
 80010da:	b510      	push	{r4, lr}
      pllinputfreq = HSI_VALUE;
 80010dc:	4c0f      	ldr	r4, [pc, #60]	; (800111c <RCC_PLL_GetFreqDomain_SYS+0x48>)
 80010de:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80010e2:	2900      	cmp	r1, #0
 80010e4:	bf08      	it	eq
 80010e6:	4622      	moveq	r2, r4
    default:
      pllinputfreq = HSI_VALUE;
      break;
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80010e8:	2808      	cmp	r0, #8
 80010ea:	d110      	bne.n	800110e <RCC_PLL_GetFreqDomain_SYS+0x3a>
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80010ec:	6859      	ldr	r1, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80010ee:	6858      	ldr	r0, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80010f0:	685b      	ldr	r3, [r3, #4]
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80010f2:	f3c3 4301 	ubfx	r3, r3, #16, #2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80010f6:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80010fa:	3301      	adds	r3, #1
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80010fc:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	fbb2 f2f1 	udiv	r2, r2, r1
 8001106:	4350      	muls	r0, r2
 8001108:	fbb0 f0f3 	udiv	r0, r0, r3
 800110c:	bd10      	pop	{r4, pc}
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800110e:	2000      	movs	r0, #0
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
}
 8001110:	bd10      	pop	{r4, pc}
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800
 8001118:	007a1200 	.word	0x007a1200
 800111c:	00f42400 	.word	0x00f42400

08001120 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <RCC_GetSystemClockFreq+0x1c>)
 8001122:	6898      	ldr	r0, [r3, #8]
 8001124:	f000 000c 	and.w	r0, r0, #12
  switch (LL_RCC_GetSysClkSource())
 8001128:	2804      	cmp	r0, #4
 800112a:	d003      	beq.n	8001134 <RCC_GetSystemClockFreq+0x14>
 800112c:	2808      	cmp	r0, #8
 800112e:	d003      	beq.n	8001138 <RCC_GetSystemClockFreq+0x18>
      frequency = HSI_VALUE;
 8001130:	4803      	ldr	r0, [pc, #12]	; (8001140 <RCC_GetSystemClockFreq+0x20>)
}
 8001132:	4770      	bx	lr
      frequency = HSE_VALUE;
 8001134:	4803      	ldr	r0, [pc, #12]	; (8001144 <RCC_GetSystemClockFreq+0x24>)
 8001136:	4770      	bx	lr
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8001138:	f7ff bfcc 	b.w	80010d4 <RCC_PLL_GetFreqDomain_SYS>
 800113c:	40023800 	.word	0x40023800
 8001140:	00f42400 	.word	0x00f42400
 8001144:	007a1200 	.word	0x007a1200

08001148 <LL_RCC_GetSystemClocksFreq>:
{
 8001148:	b510      	push	{r4, lr}
 800114a:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800114c:	f7ff ffe8 	bl	8001120 <RCC_GetSystemClockFreq>
 8001150:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001152:	f7ff ff9b 	bl	800108c <RCC_GetHCLKClockFreq>
 8001156:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001158:	f7ff ffa4 	bl	80010a4 <RCC_GetPCLK1ClockFreq>
 800115c:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800115e:	6860      	ldr	r0, [r4, #4]
 8001160:	f7ff ffac 	bl	80010bc <RCC_GetPCLK2ClockFreq>
 8001164:	60e0      	str	r0, [r4, #12]
 8001166:	bd10      	pop	{r4, pc}

08001168 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001168:	b530      	push	{r4, r5, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800116a:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800116c:	049b      	lsls	r3, r3, #18
{
 800116e:	b085      	sub	sp, #20
 8001170:	4604      	mov	r4, r0
 8001172:	460d      	mov	r5, r1
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001174:	d502      	bpl.n	800117c <LL_USART_Init+0x14>
  ErrorStatus status = ERROR;
 8001176:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8001178:	b005      	add	sp, #20
 800117a:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(USARTx->CR1,
 800117c:	684b      	ldr	r3, [r1, #4]
 800117e:	68c9      	ldr	r1, [r1, #12]
 8001180:	68c2      	ldr	r2, [r0, #12]
 8001182:	430b      	orrs	r3, r1
 8001184:	6929      	ldr	r1, [r5, #16]
 8001186:	430b      	orrs	r3, r1
 8001188:	69a9      	ldr	r1, [r5, #24]
 800118a:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 800118e:	430b      	orrs	r3, r1
 8001190:	f022 020c 	bic.w	r2, r2, #12
 8001194:	4313      	orrs	r3, r2
 8001196:	60c3      	str	r3, [r0, #12]
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001198:	6903      	ldr	r3, [r0, #16]
 800119a:	68aa      	ldr	r2, [r5, #8]
 800119c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011a0:	4313      	orrs	r3, r2
 80011a2:	6103      	str	r3, [r0, #16]
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80011a4:	6943      	ldr	r3, [r0, #20]
 80011a6:	696a      	ldr	r2, [r5, #20]
 80011a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011ac:	4313      	orrs	r3, r2
 80011ae:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80011b0:	4668      	mov	r0, sp
 80011b2:	f7ff ffc9 	bl	8001148 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80011b6:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <LL_USART_Init+0xfc>)
 80011b8:	429c      	cmp	r4, r3
 80011ba:	d125      	bne.n	8001208 <LL_USART_Init+0xa0>
      periphclk = rcc_clocks.PCLK2_Frequency;
 80011bc:	9b03      	ldr	r3, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0d9      	beq.n	8001176 <LL_USART_Init+0xe>
        && (USART_InitStruct->BaudRate != 0U))
 80011c2:	6829      	ldr	r1, [r5, #0]
 80011c4:	2900      	cmp	r1, #0
 80011c6:	d0d6      	beq.n	8001176 <LL_USART_Init+0xe>
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80011c8:	69aa      	ldr	r2, [r5, #24]
 80011ca:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80011ce:	f04f 0219 	mov.w	r2, #25
 80011d2:	d136      	bne.n	8001242 <LL_USART_Init+0xda>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80011d4:	435a      	muls	r2, r3
 80011d6:	0049      	lsls	r1, r1, #1
 80011d8:	fbb2 f2f1 	udiv	r2, r2, r1
 80011dc:	2164      	movs	r1, #100	; 0x64
 80011de:	fbb2 f0f1 	udiv	r0, r2, r1
 80011e2:	fb01 2310 	mls	r3, r1, r0, r2
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	3332      	adds	r3, #50	; 0x32
 80011ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	f003 0207 	and.w	r2, r3, #7
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 80011fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80011fe:	4413      	add	r3, r2
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001200:	b29b      	uxth	r3, r3
 8001202:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 8001204:	2000      	movs	r0, #0
 8001206:	e7b7      	b.n	8001178 <LL_USART_Init+0x10>
    else if (USARTx == USART2)
 8001208:	4b17      	ldr	r3, [pc, #92]	; (8001268 <LL_USART_Init+0x100>)
 800120a:	429c      	cmp	r4, r3
 800120c:	d101      	bne.n	8001212 <LL_USART_Init+0xaa>
      periphclk = rcc_clocks.PCLK1_Frequency;
 800120e:	9b02      	ldr	r3, [sp, #8]
 8001210:	e7d5      	b.n	80011be <LL_USART_Init+0x56>
    else if (USARTx == USART3)
 8001212:	4b16      	ldr	r3, [pc, #88]	; (800126c <LL_USART_Init+0x104>)
 8001214:	429c      	cmp	r4, r3
 8001216:	d0fa      	beq.n	800120e <LL_USART_Init+0xa6>
    else if (USARTx == USART6)
 8001218:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
 800121c:	429c      	cmp	r4, r3
 800121e:	d0cd      	beq.n	80011bc <LL_USART_Init+0x54>
    else if (USARTx == UART4)
 8001220:	f5a3 4348 	sub.w	r3, r3, #51200	; 0xc800
 8001224:	429c      	cmp	r4, r3
 8001226:	d0f2      	beq.n	800120e <LL_USART_Init+0xa6>
    else if (USARTx == UART5)
 8001228:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800122c:	429c      	cmp	r4, r3
 800122e:	d0ee      	beq.n	800120e <LL_USART_Init+0xa6>
    else if (USARTx == UART7)
 8001230:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001234:	429c      	cmp	r4, r3
 8001236:	d0ea      	beq.n	800120e <LL_USART_Init+0xa6>
    else if (USARTx == UART8)
 8001238:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800123c:	429c      	cmp	r4, r3
 800123e:	d19a      	bne.n	8001176 <LL_USART_Init+0xe>
 8001240:	e7e5      	b.n	800120e <LL_USART_Init+0xa6>
 8001242:	4353      	muls	r3, r2
 8001244:	2264      	movs	r2, #100	; 0x64
 8001246:	0089      	lsls	r1, r1, #2
 8001248:	fbb3 f3f1 	udiv	r3, r3, r1
 800124c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001250:	fb02 3311 	mls	r3, r2, r1, r3
 8001254:	011b      	lsls	r3, r3, #4
 8001256:	3332      	adds	r3, #50	; 0x32
 8001258:	fbb3 f3f2 	udiv	r3, r3, r2
 800125c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001260:	e7ce      	b.n	8001200 <LL_USART_Init+0x98>
 8001262:	bf00      	nop
 8001264:	40011000 	.word	0x40011000
 8001268:	40004400 	.word	0x40004400
 800126c:	40004800 	.word	0x40004800

08001270 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001270:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001272:	f000 fe49 	bl	8001f08 <vTaskStartScheduler>
  
  return osOK;
}
 8001276:	2000      	movs	r0, #0
 8001278:	bd08      	pop	{r3, pc}

0800127a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800127a:	b570      	push	{r4, r5, r6, lr}
 800127c:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800127e:	6946      	ldr	r6, [r0, #20]
 8001280:	692a      	ldr	r2, [r5, #16]
 8001282:	6840      	ldr	r0, [r0, #4]
 8001284:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8001288:	460b      	mov	r3, r1
 800128a:	b086      	sub	sp, #24
 800128c:	6829      	ldr	r1, [r5, #0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800128e:	b176      	cbz	r6, 80012ae <osThreadCreate+0x34>
 8001290:	69ad      	ldr	r5, [r5, #24]
 8001292:	b165      	cbz	r5, 80012ae <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8001294:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001296:	bf14      	ite	ne
 8001298:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800129a:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800129c:	9502      	str	r5, [sp, #8]
 800129e:	e88d 0050 	stmia.w	sp, {r4, r6}
 80012a2:	f000 fdcd 	bl	8001e40 <xTaskCreateStatic>
 80012a6:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80012a8:	9805      	ldr	r0, [sp, #20]
}
 80012aa:	b006      	add	sp, #24
 80012ac:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 80012ae:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80012b0:	bf14      	ite	ne
 80012b2:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80012b4:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80012b6:	ad05      	add	r5, sp, #20
 80012b8:	b292      	uxth	r2, r2
 80012ba:	e88d 0030 	stmia.w	sp, {r4, r5}
 80012be:	f000 fdf6 	bl	8001eae <xTaskCreate>
 80012c2:	2801      	cmp	r0, #1
 80012c4:	d0f0      	beq.n	80012a8 <osThreadCreate+0x2e>
      return NULL;
 80012c6:	2000      	movs	r0, #0
 80012c8:	e7ef      	b.n	80012aa <osThreadCreate+0x30>

080012ca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80012ca:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80012cc:	2800      	cmp	r0, #0
 80012ce:	bf08      	it	eq
 80012d0:	2001      	moveq	r0, #1
 80012d2:	f000 ff61 	bl	8002198 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80012d6:	2000      	movs	r0, #0
 80012d8:	bd08      	pop	{r3, pc}

080012da <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80012da:	f100 0308 	add.w	r3, r0, #8
 80012de:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80012e0:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80012e4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80012e6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80012e8:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80012ea:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80012ec:	6003      	str	r3, [r0, #0]
 80012ee:	4770      	bx	lr

080012f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	6103      	str	r3, [r0, #16]
 80012f4:	4770      	bx	lr

080012f6 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80012f6:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80012f8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001302:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001304:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001306:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001308:	3301      	adds	r3, #1
 800130a:	6003      	str	r3, [r0, #0]
 800130c:	4770      	bx	lr

0800130e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800130e:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001310:	1c53      	adds	r3, r2, #1
{
 8001312:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001314:	d10a      	bne.n	800132c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001316:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800131c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800131e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001320:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001322:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001324:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001326:	3301      	adds	r3, #1
 8001328:	6003      	str	r3, [r0, #0]
 800132a:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800132c:	f100 0308 	add.w	r3, r0, #8
 8001330:	685c      	ldr	r4, [r3, #4]
 8001332:	6825      	ldr	r5, [r4, #0]
 8001334:	42aa      	cmp	r2, r5
 8001336:	d3ef      	bcc.n	8001318 <vListInsert+0xa>
 8001338:	4623      	mov	r3, r4
 800133a:	e7f9      	b.n	8001330 <vListInsert+0x22>

0800133c <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800133c:	6841      	ldr	r1, [r0, #4]
 800133e:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001340:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001342:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001344:	6882      	ldr	r2, [r0, #8]
 8001346:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001348:	6859      	ldr	r1, [r3, #4]
 800134a:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800134c:	bf08      	it	eq
 800134e:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001350:	2200      	movs	r2, #0
 8001352:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	3a01      	subs	r2, #1
 8001358:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800135a:	6818      	ldr	r0, [r3, #0]
}
 800135c:	4770      	bx	lr
	...

08001360 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001360:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <prvTaskExitError+0x3c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	3301      	adds	r3, #1
 800136c:	d008      	beq.n	8001380 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800136e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001372:	f383 8811 	msr	BASEPRI, r3
 8001376:	f3bf 8f6f 	isb	sy
 800137a:	f3bf 8f4f 	dsb	sy
 800137e:	e7fe      	b.n	800137e <prvTaskExitError+0x1e>
 8001380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001384:	f383 8811 	msr	BASEPRI, r3
 8001388:	f3bf 8f6f 	isb	sy
 800138c:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001390:	9b01      	ldr	r3, [sp, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0fc      	beq.n	8001390 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001396:	b002      	add	sp, #8
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000004 	.word	0x20000004

080013a0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80013a0:	4808      	ldr	r0, [pc, #32]	; (80013c4 <prvPortStartFirstTask+0x24>)
 80013a2:	6800      	ldr	r0, [r0, #0]
 80013a4:	6800      	ldr	r0, [r0, #0]
 80013a6:	f380 8808 	msr	MSP, r0
 80013aa:	f04f 0000 	mov.w	r0, #0
 80013ae:	f380 8814 	msr	CONTROL, r0
 80013b2:	b662      	cpsie	i
 80013b4:	b661      	cpsie	f
 80013b6:	f3bf 8f4f 	dsb	sy
 80013ba:	f3bf 8f6f 	isb	sy
 80013be:	df00      	svc	0
 80013c0:	bf00      	nop
 80013c2:	0000      	.short	0x0000
 80013c4:	e000ed08 	.word	0xe000ed08

080013c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80013c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80013d8 <vPortEnableVFP+0x10>
 80013cc:	6801      	ldr	r1, [r0, #0]
 80013ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80013d2:	6001      	str	r1, [r0, #0]
 80013d4:	4770      	bx	lr
 80013d6:	0000      	.short	0x0000
 80013d8:	e000ed88 	.word	0xe000ed88

080013dc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80013dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013e0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <pxPortInitialiseStack+0x28>)
 80013e6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80013ea:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80013ee:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80013f2:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80013f6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80013fa:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80013fe:	3844      	subs	r0, #68	; 0x44
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	08001361 	.word	0x08001361
	...

08001410 <SVC_Handler>:
	__asm volatile (
 8001410:	4b07      	ldr	r3, [pc, #28]	; (8001430 <pxCurrentTCBConst2>)
 8001412:	6819      	ldr	r1, [r3, #0]
 8001414:	6808      	ldr	r0, [r1, #0]
 8001416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800141a:	f380 8809 	msr	PSP, r0
 800141e:	f3bf 8f6f 	isb	sy
 8001422:	f04f 0000 	mov.w	r0, #0
 8001426:	f380 8811 	msr	BASEPRI, r0
 800142a:	4770      	bx	lr
 800142c:	f3af 8000 	nop.w

08001430 <pxCurrentTCBConst2>:
 8001430:	20003c48 	.word	0x20003c48

08001434 <vPortEnterCritical>:
 8001434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001438:	f383 8811 	msr	BASEPRI, r3
 800143c:	f3bf 8f6f 	isb	sy
 8001440:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001444:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <vPortEnterCritical+0x3c>)
 8001446:	6813      	ldr	r3, [r2, #0]
 8001448:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800144a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800144c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800144e:	d10d      	bne.n	800146c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <vPortEnterCritical+0x40>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001458:	d008      	beq.n	800146c <vPortEnterCritical+0x38>
 800145a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800145e:	f383 8811 	msr	BASEPRI, r3
 8001462:	f3bf 8f6f 	isb	sy
 8001466:	f3bf 8f4f 	dsb	sy
 800146a:	e7fe      	b.n	800146a <vPortEnterCritical+0x36>
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000004 	.word	0x20000004
 8001474:	e000ed04 	.word	0xe000ed04

08001478 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001478:	4a08      	ldr	r2, [pc, #32]	; (800149c <vPortExitCritical+0x24>)
 800147a:	6813      	ldr	r3, [r2, #0]
 800147c:	b943      	cbnz	r3, 8001490 <vPortExitCritical+0x18>
 800147e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001482:	f383 8811 	msr	BASEPRI, r3
 8001486:	f3bf 8f6f 	isb	sy
 800148a:	f3bf 8f4f 	dsb	sy
 800148e:	e7fe      	b.n	800148e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001490:	3b01      	subs	r3, #1
 8001492:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001494:	b90b      	cbnz	r3, 800149a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001496:	f383 8811 	msr	BASEPRI, r3
 800149a:	4770      	bx	lr
 800149c:	20000004 	.word	0x20000004

080014a0 <PendSV_Handler>:
	__asm volatile
 80014a0:	f3ef 8009 	mrs	r0, PSP
 80014a4:	f3bf 8f6f 	isb	sy
 80014a8:	4b15      	ldr	r3, [pc, #84]	; (8001500 <pxCurrentTCBConst>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	f01e 0f10 	tst.w	lr, #16
 80014b0:	bf08      	it	eq
 80014b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80014b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014ba:	6010      	str	r0, [r2, #0]
 80014bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80014c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80014c4:	f380 8811 	msr	BASEPRI, r0
 80014c8:	f3bf 8f4f 	dsb	sy
 80014cc:	f3bf 8f6f 	isb	sy
 80014d0:	f000 fe86 	bl	80021e0 <vTaskSwitchContext>
 80014d4:	f04f 0000 	mov.w	r0, #0
 80014d8:	f380 8811 	msr	BASEPRI, r0
 80014dc:	bc09      	pop	{r0, r3}
 80014de:	6819      	ldr	r1, [r3, #0]
 80014e0:	6808      	ldr	r0, [r1, #0]
 80014e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014e6:	f01e 0f10 	tst.w	lr, #16
 80014ea:	bf08      	it	eq
 80014ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80014f0:	f380 8809 	msr	PSP, r0
 80014f4:	f3bf 8f6f 	isb	sy
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	f3af 8000 	nop.w

08001500 <pxCurrentTCBConst>:
 8001500:	20003c48 	.word	0x20003c48

08001504 <SysTick_Handler>:
{
 8001504:	b508      	push	{r3, lr}
	__asm volatile
 8001506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800150a:	f383 8811 	msr	BASEPRI, r3
 800150e:	f3bf 8f6f 	isb	sy
 8001512:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001516:	f000 fd35 	bl	8001f84 <xTaskIncrementTick>
 800151a:	b118      	cbz	r0, 8001524 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <SysTick_Handler+0x28>)
 800151e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001522:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001524:	2300      	movs	r3, #0
 8001526:	f383 8811 	msr	BASEPRI, r3
 800152a:	bd08      	pop	{r3, pc}
 800152c:	e000ed04 	.word	0xe000ed04

08001530 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001530:	4a08      	ldr	r2, [pc, #32]	; (8001554 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001532:	4909      	ldr	r1, [pc, #36]	; (8001558 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001534:	2300      	movs	r3, #0
 8001536:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001538:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <vPortSetupTimerInterrupt+0x2c>)
 800153c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	fbb3 f3f1 	udiv	r3, r3, r1
 8001546:	4906      	ldr	r1, [pc, #24]	; (8001560 <vPortSetupTimerInterrupt+0x30>)
 8001548:	3b01      	subs	r3, #1
 800154a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800154c:	2307      	movs	r3, #7
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000e010 	.word	0xe000e010
 8001558:	e000e018 	.word	0xe000e018
 800155c:	20000008 	.word	0x20000008
 8001560:	e000e014 	.word	0xe000e014

08001564 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001564:	4b39      	ldr	r3, [pc, #228]	; (800164c <xPortStartScheduler+0xe8>)
 8001566:	4a3a      	ldr	r2, [pc, #232]	; (8001650 <xPortStartScheduler+0xec>)
{
 8001568:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800156a:	6819      	ldr	r1, [r3, #0]
 800156c:	4291      	cmp	r1, r2
 800156e:	d108      	bne.n	8001582 <xPortStartScheduler+0x1e>
	__asm volatile
 8001570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001574:	f383 8811 	msr	BASEPRI, r3
 8001578:	f3bf 8f6f 	isb	sy
 800157c:	f3bf 8f4f 	dsb	sy
 8001580:	e7fe      	b.n	8001580 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b33      	ldr	r3, [pc, #204]	; (8001654 <xPortStartScheduler+0xf0>)
 8001586:	429a      	cmp	r2, r3
 8001588:	d108      	bne.n	800159c <xPortStartScheduler+0x38>
 800158a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800158e:	f383 8811 	msr	BASEPRI, r3
 8001592:	f3bf 8f6f 	isb	sy
 8001596:	f3bf 8f4f 	dsb	sy
 800159a:	e7fe      	b.n	800159a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800159c:	4b2e      	ldr	r3, [pc, #184]	; (8001658 <xPortStartScheduler+0xf4>)
 800159e:	781a      	ldrb	r2, [r3, #0]
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80015a4:	22ff      	movs	r2, #255	; 0xff
 80015a6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80015a8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80015aa:	4a2c      	ldr	r2, [pc, #176]	; (800165c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80015b2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80015b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80015ba:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80015bc:	4b28      	ldr	r3, [pc, #160]	; (8001660 <xPortStartScheduler+0xfc>)
 80015be:	2207      	movs	r2, #7
 80015c0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80015c2:	2100      	movs	r1, #0
 80015c4:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80015c8:	0600      	lsls	r0, r0, #24
 80015ca:	f102 34ff 	add.w	r4, r2, #4294967295
 80015ce:	d40d      	bmi.n	80015ec <xPortStartScheduler+0x88>
 80015d0:	b101      	cbz	r1, 80015d4 <xPortStartScheduler+0x70>
 80015d2:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	2a03      	cmp	r2, #3
 80015d8:	d011      	beq.n	80015fe <xPortStartScheduler+0x9a>
 80015da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015de:	f383 8811 	msr	BASEPRI, r3
 80015e2:	f3bf 8f6f 	isb	sy
 80015e6:	f3bf 8f4f 	dsb	sy
 80015ea:	e7fe      	b.n	80015ea <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80015ec:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80015f0:	0052      	lsls	r2, r2, #1
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	f88d 2003 	strb.w	r2, [sp, #3]
 80015f8:	2101      	movs	r1, #1
 80015fa:	4622      	mov	r2, r4
 80015fc:	e7e2      	b.n	80015c4 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80015fe:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001600:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001604:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001606:	9b01      	ldr	r3, [sp, #4]
 8001608:	4a13      	ldr	r2, [pc, #76]	; (8001658 <xPortStartScheduler+0xf4>)
 800160a:	b2db      	uxtb	r3, r3
 800160c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <xPortStartScheduler+0x100>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001616:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800161e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001620:	f7ff ff86 	bl	8001530 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001624:	4b10      	ldr	r3, [pc, #64]	; (8001668 <xPortStartScheduler+0x104>)
 8001626:	2400      	movs	r4, #0
 8001628:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800162a:	f7ff fecd 	bl	80013c8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800162e:	4a0f      	ldr	r2, [pc, #60]	; (800166c <xPortStartScheduler+0x108>)
 8001630:	6813      	ldr	r3, [r2, #0]
 8001632:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001636:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8001638:	f7ff feb2 	bl	80013a0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800163c:	f000 fdd0 	bl	80021e0 <vTaskSwitchContext>
	prvTaskExitError();
 8001640:	f7ff fe8e 	bl	8001360 <prvTaskExitError>
}
 8001644:	4620      	mov	r0, r4
 8001646:	b002      	add	sp, #8
 8001648:	bd10      	pop	{r4, pc}
 800164a:	bf00      	nop
 800164c:	e000ed00 	.word	0xe000ed00
 8001650:	410fc271 	.word	0x410fc271
 8001654:	410fc270 	.word	0x410fc270
 8001658:	e000e400 	.word	0xe000e400
 800165c:	20000028 	.word	0x20000028
 8001660:	2000002c 	.word	0x2000002c
 8001664:	e000ed20 	.word	0xe000ed20
 8001668:	20000004 	.word	0x20000004
 800166c:	e000ef34 	.word	0xe000ef34

08001670 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001670:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <prvInsertBlockIntoFreeList+0x40>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	4282      	cmp	r2, r0
 8001678:	d318      	bcc.n	80016ac <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800167a:	685c      	ldr	r4, [r3, #4]
 800167c:	1919      	adds	r1, r3, r4
 800167e:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001680:	bf01      	itttt	eq
 8001682:	6841      	ldreq	r1, [r0, #4]
 8001684:	4618      	moveq	r0, r3
 8001686:	1909      	addeq	r1, r1, r4
 8001688:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800168a:	6844      	ldr	r4, [r0, #4]
 800168c:	1901      	adds	r1, r0, r4
 800168e:	428a      	cmp	r2, r1
 8001690:	d107      	bne.n	80016a2 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001692:	4908      	ldr	r1, [pc, #32]	; (80016b4 <prvInsertBlockIntoFreeList+0x44>)
 8001694:	6809      	ldr	r1, [r1, #0]
 8001696:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001698:	bf1f      	itttt	ne
 800169a:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800169c:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800169e:	1909      	addne	r1, r1, r4
 80016a0:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80016a2:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80016a4:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80016a6:	bf18      	it	ne
 80016a8:	6018      	strne	r0, [r3, #0]
 80016aa:	bd10      	pop	{r4, pc}
 80016ac:	4613      	mov	r3, r2
 80016ae:	e7e1      	b.n	8001674 <prvInsertBlockIntoFreeList+0x4>
 80016b0:	20003c40 	.word	0x20003c40
 80016b4:	20000030 	.word	0x20000030

080016b8 <pvPortMalloc>:
{
 80016b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016bc:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80016be:	f000 fc59 	bl	8001f74 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80016c2:	493e      	ldr	r1, [pc, #248]	; (80017bc <pvPortMalloc+0x104>)
 80016c4:	4d3e      	ldr	r5, [pc, #248]	; (80017c0 <pvPortMalloc+0x108>)
 80016c6:	680b      	ldr	r3, [r1, #0]
 80016c8:	bb0b      	cbnz	r3, 800170e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80016ca:	4a3e      	ldr	r2, [pc, #248]	; (80017c4 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80016cc:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80016ce:	bf1f      	itttt	ne
 80016d0:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80016d2:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80016d6:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 80016da:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80016dc:	bf14      	ite	ne
 80016de:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80016e0:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80016e4:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80016e6:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80016e8:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80016ec:	4e36      	ldr	r6, [pc, #216]	; (80017c8 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 80016ee:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80016f0:	2000      	movs	r0, #0
 80016f2:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80016f4:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 80016f6:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80016f8:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80016fa:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80016fc:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80016fe:	4b33      	ldr	r3, [pc, #204]	; (80017cc <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001700:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001702:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001704:	4b32      	ldr	r3, [pc, #200]	; (80017d0 <pvPortMalloc+0x118>)
 8001706:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001708:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800170c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800170e:	682f      	ldr	r7, [r5, #0]
 8001710:	4227      	tst	r7, r4
 8001712:	d116      	bne.n	8001742 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8001714:	2c00      	cmp	r4, #0
 8001716:	d041      	beq.n	800179c <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8001718:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800171c:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800171e:	bf1c      	itt	ne
 8001720:	f023 0307 	bicne.w	r3, r3, #7
 8001724:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001726:	b163      	cbz	r3, 8001742 <pvPortMalloc+0x8a>
 8001728:	4a29      	ldr	r2, [pc, #164]	; (80017d0 <pvPortMalloc+0x118>)
 800172a:	6816      	ldr	r6, [r2, #0]
 800172c:	42b3      	cmp	r3, r6
 800172e:	4690      	mov	r8, r2
 8001730:	d807      	bhi.n	8001742 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8001732:	4a25      	ldr	r2, [pc, #148]	; (80017c8 <pvPortMalloc+0x110>)
 8001734:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001736:	6868      	ldr	r0, [r5, #4]
 8001738:	4283      	cmp	r3, r0
 800173a:	d804      	bhi.n	8001746 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 800173c:	6809      	ldr	r1, [r1, #0]
 800173e:	428d      	cmp	r5, r1
 8001740:	d107      	bne.n	8001752 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8001742:	2400      	movs	r4, #0
 8001744:	e02a      	b.n	800179c <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001746:	682c      	ldr	r4, [r5, #0]
 8001748:	2c00      	cmp	r4, #0
 800174a:	d0f7      	beq.n	800173c <pvPortMalloc+0x84>
 800174c:	462a      	mov	r2, r5
 800174e:	4625      	mov	r5, r4
 8001750:	e7f1      	b.n	8001736 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001752:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001754:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001756:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001758:	1ac2      	subs	r2, r0, r3
 800175a:	2a10      	cmp	r2, #16
 800175c:	d90f      	bls.n	800177e <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800175e:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001760:	0741      	lsls	r1, r0, #29
 8001762:	d008      	beq.n	8001776 <pvPortMalloc+0xbe>
 8001764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001768:	f383 8811 	msr	BASEPRI, r3
 800176c:	f3bf 8f6f 	isb	sy
 8001770:	f3bf 8f4f 	dsb	sy
 8001774:	e7fe      	b.n	8001774 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001776:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001778:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800177a:	f7ff ff79 	bl	8001670 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800177e:	4913      	ldr	r1, [pc, #76]	; (80017cc <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001780:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001782:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001784:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001786:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001788:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800178a:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800178e:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001792:	bf38      	it	cc
 8001794:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001796:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001798:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800179a:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800179c:	f000 fc84 	bl	80020a8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80017a0:	0763      	lsls	r3, r4, #29
 80017a2:	d008      	beq.n	80017b6 <pvPortMalloc+0xfe>
 80017a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017a8:	f383 8811 	msr	BASEPRI, r3
 80017ac:	f3bf 8f6f 	isb	sy
 80017b0:	f3bf 8f4f 	dsb	sy
 80017b4:	e7fe      	b.n	80017b4 <pvPortMalloc+0xfc>
}
 80017b6:	4620      	mov	r0, r4
 80017b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017bc:	20000030 	.word	0x20000030
 80017c0:	20003c34 	.word	0x20003c34
 80017c4:	20000034 	.word	0x20000034
 80017c8:	20003c40 	.word	0x20003c40
 80017cc:	20003c3c 	.word	0x20003c3c
 80017d0:	20003c38 	.word	0x20003c38

080017d4 <vPortFree>:
{
 80017d4:	b510      	push	{r4, lr}
	if( pv != NULL )
 80017d6:	4604      	mov	r4, r0
 80017d8:	b370      	cbz	r0, 8001838 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80017da:	4a18      	ldr	r2, [pc, #96]	; (800183c <vPortFree+0x68>)
 80017dc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80017e0:	6812      	ldr	r2, [r2, #0]
 80017e2:	4213      	tst	r3, r2
 80017e4:	d108      	bne.n	80017f8 <vPortFree+0x24>
 80017e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ea:	f383 8811 	msr	BASEPRI, r3
 80017ee:	f3bf 8f6f 	isb	sy
 80017f2:	f3bf 8f4f 	dsb	sy
 80017f6:	e7fe      	b.n	80017f6 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80017f8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80017fc:	b141      	cbz	r1, 8001810 <vPortFree+0x3c>
 80017fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001802:	f383 8811 	msr	BASEPRI, r3
 8001806:	f3bf 8f6f 	isb	sy
 800180a:	f3bf 8f4f 	dsb	sy
 800180e:	e7fe      	b.n	800180e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001810:	ea23 0302 	bic.w	r3, r3, r2
 8001814:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001818:	f000 fbac 	bl	8001f74 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800181c:	4a08      	ldr	r2, [pc, #32]	; (8001840 <vPortFree+0x6c>)
 800181e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8001822:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001824:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001828:	440b      	add	r3, r1
 800182a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800182c:	f7ff ff20 	bl	8001670 <prvInsertBlockIntoFreeList>
}
 8001830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8001834:	f000 bc38 	b.w	80020a8 <xTaskResumeAll>
 8001838:	bd10      	pop	{r4, pc}
 800183a:	bf00      	nop
 800183c:	20003c34 	.word	0x20003c34
 8001840:	20003c38 	.word	0x20003c38

08001844 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001844:	b570      	push	{r4, r5, r6, lr}
 8001846:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001848:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800184a:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 800184c:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800184e:	b942      	cbnz	r2, 8001862 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001850:	6805      	ldr	r5, [r0, #0]
 8001852:	b99d      	cbnz	r5, 800187c <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001854:	6840      	ldr	r0, [r0, #4]
 8001856:	f000 fdb7 	bl	80023c8 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800185a:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800185c:	3601      	adds	r6, #1
 800185e:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8001860:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8001862:	b96d      	cbnz	r5, 8001880 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001864:	6880      	ldr	r0, [r0, #8]
 8001866:	f001 f829 	bl	80028bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800186a:	68a3      	ldr	r3, [r4, #8]
 800186c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800186e:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001870:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001872:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001874:	4293      	cmp	r3, r2
 8001876:	d301      	bcc.n	800187c <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800187c:	2000      	movs	r0, #0
 800187e:	e7ed      	b.n	800185c <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001880:	68c0      	ldr	r0, [r0, #12]
 8001882:	f001 f81b 	bl	80028bc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001886:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001888:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800188a:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800188c:	425b      	negs	r3, r3
 800188e:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001890:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001892:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001894:	bf3e      	ittt	cc
 8001896:	6862      	ldrcc	r2, [r4, #4]
 8001898:	189b      	addcc	r3, r3, r2
 800189a:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800189c:	2d02      	cmp	r5, #2
 800189e:	d1ed      	bne.n	800187c <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80018a0:	b10e      	cbz	r6, 80018a6 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80018a2:	3e01      	subs	r6, #1
 80018a4:	e7ea      	b.n	800187c <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80018a6:	4630      	mov	r0, r6
 80018a8:	e7d8      	b.n	800185c <prvCopyDataToQueue+0x18>

080018aa <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80018aa:	b570      	push	{r4, r5, r6, lr}
 80018ac:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80018ae:	f7ff fdc1 	bl	8001434 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80018b2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80018b6:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80018ba:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80018bc:	2d00      	cmp	r5, #0
 80018be:	dc14      	bgt.n	80018ea <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80018c0:	23ff      	movs	r3, #255	; 0xff
 80018c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80018c6:	f7ff fdd7 	bl	8001478 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80018ca:	f7ff fdb3 	bl	8001434 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80018ce:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80018d2:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80018d6:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80018d8:	2d00      	cmp	r5, #0
 80018da:	dc12      	bgt.n	8001902 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80018dc:	23ff      	movs	r3, #255	; 0xff
 80018de:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80018e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80018e6:	f7ff bdc7 	b.w	8001478 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80018ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0e7      	beq.n	80018c0 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80018f0:	4630      	mov	r0, r6
 80018f2:	f000 fcc9 	bl	8002288 <xTaskRemoveFromEventList>
 80018f6:	b108      	cbz	r0, 80018fc <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80018f8:	f000 fd50 	bl	800239c <vTaskMissedYield>
 80018fc:	3d01      	subs	r5, #1
 80018fe:	b26d      	sxtb	r5, r5
 8001900:	e7dc      	b.n	80018bc <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001902:	6923      	ldr	r3, [r4, #16]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0e9      	beq.n	80018dc <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001908:	4630      	mov	r0, r6
 800190a:	f000 fcbd 	bl	8002288 <xTaskRemoveFromEventList>
 800190e:	b108      	cbz	r0, 8001914 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8001910:	f000 fd44 	bl	800239c <vTaskMissedYield>
 8001914:	3d01      	subs	r5, #1
 8001916:	b26d      	sxtb	r5, r5
 8001918:	e7de      	b.n	80018d8 <prvUnlockQueue+0x2e>
	...

0800191c <xQueueGenericReset>:
{
 800191c:	b538      	push	{r3, r4, r5, lr}
 800191e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8001920:	4604      	mov	r4, r0
 8001922:	b940      	cbnz	r0, 8001936 <xQueueGenericReset+0x1a>
 8001924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001928:	f383 8811 	msr	BASEPRI, r3
 800192c:	f3bf 8f6f 	isb	sy
 8001930:	f3bf 8f4f 	dsb	sy
 8001934:	e7fe      	b.n	8001934 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8001936:	f7ff fd7d 	bl	8001434 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800193a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800193c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800193e:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001940:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001942:	4343      	muls	r3, r0
 8001944:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001946:	1a1b      	subs	r3, r3, r0
 8001948:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800194a:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800194c:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800194e:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8001950:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001952:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8001954:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001958:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800195c:	b995      	cbnz	r5, 8001984 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800195e:	6923      	ldr	r3, [r4, #16]
 8001960:	b163      	cbz	r3, 800197c <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001962:	f104 0010 	add.w	r0, r4, #16
 8001966:	f000 fc8f 	bl	8002288 <xTaskRemoveFromEventList>
 800196a:	b138      	cbz	r0, 800197c <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <xQueueGenericReset+0x7c>)
 800196e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	f3bf 8f4f 	dsb	sy
 8001978:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800197c:	f7ff fd7c 	bl	8001478 <vPortExitCritical>
}
 8001980:	2001      	movs	r0, #1
 8001982:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001984:	f104 0010 	add.w	r0, r4, #16
 8001988:	f7ff fca7 	bl	80012da <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800198c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001990:	f7ff fca3 	bl	80012da <vListInitialise>
 8001994:	e7f2      	b.n	800197c <xQueueGenericReset+0x60>
 8001996:	bf00      	nop
 8001998:	e000ed04 	.word	0xe000ed04

0800199c <xQueueGenericCreate>:
	{
 800199c:	b570      	push	{r4, r5, r6, lr}
 800199e:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80019a0:	4606      	mov	r6, r0
 80019a2:	b940      	cbnz	r0, 80019b6 <xQueueGenericCreate+0x1a>
 80019a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019a8:	f383 8811 	msr	BASEPRI, r3
 80019ac:	f3bf 8f6f 	isb	sy
 80019b0:	f3bf 8f4f 	dsb	sy
 80019b4:	e7fe      	b.n	80019b4 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019b6:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80019b8:	3048      	adds	r0, #72	; 0x48
 80019ba:	f7ff fe7d 	bl	80016b8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80019be:	4604      	mov	r4, r0
 80019c0:	b150      	cbz	r0, 80019d8 <xQueueGenericCreate+0x3c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80019c8:	b945      	cbnz	r5, 80019dc <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80019ca:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80019cc:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80019ce:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80019d0:	2101      	movs	r1, #1
 80019d2:	4620      	mov	r0, r4
 80019d4:	f7ff ffa2 	bl	800191c <xQueueGenericReset>
	}
 80019d8:	4620      	mov	r0, r4
 80019da:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80019dc:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80019e0:	6003      	str	r3, [r0, #0]
 80019e2:	e7f3      	b.n	80019cc <xQueueGenericCreate+0x30>

080019e4 <xQueueGenericSend>:
{
 80019e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80019e8:	4689      	mov	r9, r1
 80019ea:	9201      	str	r2, [sp, #4]
 80019ec:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80019ee:	4604      	mov	r4, r0
 80019f0:	b940      	cbnz	r0, 8001a04 <xQueueGenericSend+0x20>
 80019f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019f6:	f383 8811 	msr	BASEPRI, r3
 80019fa:	f3bf 8f6f 	isb	sy
 80019fe:	f3bf 8f4f 	dsb	sy
 8001a02:	e7fe      	b.n	8001a02 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a04:	2900      	cmp	r1, #0
 8001a06:	f040 8088 	bne.w	8001b1a <xQueueGenericSend+0x136>
 8001a0a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 8084 	beq.w	8001b1a <xQueueGenericSend+0x136>
 8001a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a16:	f383 8811 	msr	BASEPRI, r3
 8001a1a:	f3bf 8f6f 	isb	sy
 8001a1e:	f3bf 8f4f 	dsb	sy
 8001a22:	e7fe      	b.n	8001a22 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001a24:	9e01      	ldr	r6, [sp, #4]
 8001a26:	2e00      	cmp	r6, #0
 8001a28:	f000 8082 	beq.w	8001b30 <xQueueGenericSend+0x14c>
 8001a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a30:	f383 8811 	msr	BASEPRI, r3
 8001a34:	f3bf 8f6f 	isb	sy
 8001a38:	f3bf 8f4f 	dsb	sy
 8001a3c:	e7fe      	b.n	8001a3c <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001a3e:	9d01      	ldr	r5, [sp, #4]
 8001a40:	b91d      	cbnz	r5, 8001a4a <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 8001a42:	f7ff fd19 	bl	8001478 <vPortExitCritical>
			return errQUEUE_FULL;
 8001a46:	2000      	movs	r0, #0
 8001a48:	e058      	b.n	8001afc <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8001a4a:	b916      	cbnz	r6, 8001a52 <xQueueGenericSend+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001a4c:	a802      	add	r0, sp, #8
 8001a4e:	f000 fc5d 	bl	800230c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8001a52:	f7ff fd11 	bl	8001478 <vPortExitCritical>
		vTaskSuspendAll();
 8001a56:	f000 fa8d 	bl	8001f74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001a5a:	f7ff fceb 	bl	8001434 <vPortEnterCritical>
 8001a5e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001a62:	2bff      	cmp	r3, #255	; 0xff
 8001a64:	bf08      	it	eq
 8001a66:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8001a6a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001a6e:	2bff      	cmp	r3, #255	; 0xff
 8001a70:	bf08      	it	eq
 8001a72:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8001a76:	f7ff fcff 	bl	8001478 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001a7a:	a901      	add	r1, sp, #4
 8001a7c:	a802      	add	r0, sp, #8
 8001a7e:	f000 fc51 	bl	8002324 <xTaskCheckForTimeOut>
 8001a82:	2800      	cmp	r0, #0
 8001a84:	d143      	bne.n	8001b0e <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001a86:	f7ff fcd5 	bl	8001434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001a8a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8001a8c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8001a8e:	f7ff fcf3 	bl	8001478 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001a92:	42ae      	cmp	r6, r5
 8001a94:	d135      	bne.n	8001b02 <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001a96:	9901      	ldr	r1, [sp, #4]
 8001a98:	f104 0010 	add.w	r0, r4, #16
 8001a9c:	f000 fbda 	bl	8002254 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	f7ff ff02 	bl	80018aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001aa6:	f000 faff 	bl	80020a8 <xTaskResumeAll>
 8001aaa:	b938      	cbnz	r0, 8001abc <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8001aac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001ab0:	f8ca 3000 	str.w	r3, [sl]
 8001ab4:	f3bf 8f4f 	dsb	sy
 8001ab8:	f3bf 8f6f 	isb	sy
 8001abc:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8001abe:	f7ff fcb9 	bl	8001434 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001ac2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001ac4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d301      	bcc.n	8001ace <xQueueGenericSend+0xea>
 8001aca:	2f02      	cmp	r7, #2
 8001acc:	d1b7      	bne.n	8001a3e <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ace:	463a      	mov	r2, r7
 8001ad0:	4649      	mov	r1, r9
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	f7ff feb6 	bl	8001844 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ada:	b11b      	cbz	r3, 8001ae4 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001adc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001ae0:	f000 fbd2 	bl	8002288 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8001ae4:	b138      	cbz	r0, 8001af6 <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 8001ae6:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <xQueueGenericSend+0x168>)
 8001ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	f3bf 8f4f 	dsb	sy
 8001af2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001af6:	f7ff fcbf 	bl	8001478 <vPortExitCritical>
				return pdPASS;
 8001afa:	2001      	movs	r0, #1
}
 8001afc:	b004      	add	sp, #16
 8001afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8001b02:	4620      	mov	r0, r4
 8001b04:	f7ff fed1 	bl	80018aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001b08:	f000 face 	bl	80020a8 <xTaskResumeAll>
 8001b0c:	e7d6      	b.n	8001abc <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 8001b0e:	4620      	mov	r0, r4
 8001b10:	f7ff fecb 	bl	80018aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001b14:	f000 fac8 	bl	80020a8 <xTaskResumeAll>
 8001b18:	e795      	b.n	8001a46 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001b1a:	2f02      	cmp	r7, #2
 8001b1c:	d102      	bne.n	8001b24 <xQueueGenericSend+0x140>
 8001b1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d10a      	bne.n	8001b3a <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001b24:	f000 fc40 	bl	80023a8 <xTaskGetSchedulerState>
 8001b28:	2800      	cmp	r0, #0
 8001b2a:	f43f af7b 	beq.w	8001a24 <xQueueGenericSend+0x40>
 8001b2e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8001b30:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8001b34:	f8df a014 	ldr.w	sl, [pc, #20]	; 8001b4c <xQueueGenericSend+0x168>
 8001b38:	e7c1      	b.n	8001abe <xQueueGenericSend+0xda>
 8001b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b3e:	f383 8811 	msr	BASEPRI, r3
 8001b42:	f3bf 8f6f 	isb	sy
 8001b46:	f3bf 8f4f 	dsb	sy
 8001b4a:	e7fe      	b.n	8001b4a <xQueueGenericSend+0x166>
 8001b4c:	e000ed04 	.word	0xe000ed04

08001b50 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8001b50:	b138      	cbz	r0, 8001b62 <prvInitialiseMutex+0x12>
			pxNewQueue->pxMutexHolder = NULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001b56:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8001b58:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f7ff bf41 	b.w	80019e4 <xQueueGenericSend>
 8001b62:	4770      	bx	lr

08001b64 <xQueueCreateMutex>:
	{
 8001b64:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8001b66:	4602      	mov	r2, r0
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	f7ff ff16 	bl	800199c <xQueueGenericCreate>
 8001b70:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8001b72:	f7ff ffed 	bl	8001b50 <prvInitialiseMutex>
	}
 8001b76:	4620      	mov	r0, r4
 8001b78:	bd10      	pop	{r4, pc}
	...

08001b7c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b80:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001b82:	f7ff fc57 	bl	8001434 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001b86:	4b2d      	ldr	r3, [pc, #180]	; (8001c3c <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8001b88:	4c2d      	ldr	r4, [pc, #180]	; (8001c40 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4f2d      	ldr	r7, [pc, #180]	; (8001c44 <prvAddNewTaskToReadyList+0xc8>)
 8001b8e:	3201      	adds	r2, #1
 8001b90:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001b92:	6825      	ldr	r5, [r4, #0]
 8001b94:	2d00      	cmp	r5, #0
 8001b96:	d145      	bne.n	8001c24 <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001b98:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d11c      	bne.n	8001bda <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001ba0:	1978      	adds	r0, r7, r5
 8001ba2:	3514      	adds	r5, #20
 8001ba4:	f7ff fb99 	bl	80012da <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ba8:	2d8c      	cmp	r5, #140	; 0x8c
 8001baa:	d1f9      	bne.n	8001ba0 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001bac:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8001c70 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8001bb0:	4d25      	ldr	r5, [pc, #148]	; (8001c48 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 8001bb2:	4640      	mov	r0, r8
 8001bb4:	f7ff fb91 	bl	80012da <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001bb8:	4628      	mov	r0, r5
 8001bba:	f7ff fb8e 	bl	80012da <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001bbe:	4823      	ldr	r0, [pc, #140]	; (8001c4c <prvAddNewTaskToReadyList+0xd0>)
 8001bc0:	f7ff fb8b 	bl	80012da <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001bc4:	4822      	ldr	r0, [pc, #136]	; (8001c50 <prvAddNewTaskToReadyList+0xd4>)
 8001bc6:	f7ff fb88 	bl	80012da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001bca:	4822      	ldr	r0, [pc, #136]	; (8001c54 <prvAddNewTaskToReadyList+0xd8>)
 8001bcc:	f7ff fb85 	bl	80012da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001bd0:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <prvAddNewTaskToReadyList+0xdc>)
 8001bd2:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001bd6:	4b21      	ldr	r3, [pc, #132]	; (8001c5c <prvAddNewTaskToReadyList+0xe0>)
 8001bd8:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8001bda:	4a21      	ldr	r2, [pc, #132]	; (8001c60 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 8001bdc:	4921      	ldr	r1, [pc, #132]	; (8001c64 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8001bde:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001be0:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8001be2:	3301      	adds	r3, #1
 8001be4:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001be6:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001be8:	2301      	movs	r3, #1
 8001bea:	4093      	lsls	r3, r2
 8001bec:	4303      	orrs	r3, r0
 8001bee:	2014      	movs	r0, #20
 8001bf0:	600b      	str	r3, [r1, #0]
 8001bf2:	fb00 7002 	mla	r0, r0, r2, r7
 8001bf6:	1d31      	adds	r1, r6, #4
 8001bf8:	f7ff fb7d 	bl	80012f6 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001bfc:	f7ff fc3c 	bl	8001478 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001c00:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <prvAddNewTaskToReadyList+0xec>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	b163      	cbz	r3, 8001c20 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001c06:	6823      	ldr	r3, [r4, #0]
 8001c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c0a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d207      	bcs.n	8001c20 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8001c10:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <prvAddNewTaskToReadyList+0xf0>)
 8001c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	f3bf 8f4f 	dsb	sy
 8001c1c:	f3bf 8f6f 	isb	sy
 8001c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8001c24:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <prvAddNewTaskToReadyList+0xec>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1d6      	bne.n	8001bda <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001c2c:	6823      	ldr	r3, [r4, #0]
 8001c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c30:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8001c32:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001c34:	bf98      	it	ls
 8001c36:	6026      	strls	r6, [r4, #0]
 8001c38:	e7cf      	b.n	8001bda <prvAddNewTaskToReadyList+0x5e>
 8001c3a:	bf00      	nop
 8001c3c:	20003ce0 	.word	0x20003ce0
 8001c40:	20003c48 	.word	0x20003c48
 8001c44:	20003c54 	.word	0x20003c54
 8001c48:	20003d0c 	.word	0x20003d0c
 8001c4c:	20003d28 	.word	0x20003d28
 8001c50:	20003d54 	.word	0x20003d54
 8001c54:	20003d40 	.word	0x20003d40
 8001c58:	20003c4c 	.word	0x20003c4c
 8001c5c:	20003c50 	.word	0x20003c50
 8001c60:	20003cf0 	.word	0x20003cf0
 8001c64:	20003cf4 	.word	0x20003cf4
 8001c68:	20003d3c 	.word	0x20003d3c
 8001c6c:	e000ed04 	.word	0xe000ed04
 8001c70:	20003cf8 	.word	0x20003cf8

08001c74 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c74:	4a06      	ldr	r2, [pc, #24]	; (8001c90 <prvResetNextTaskUnblockTime+0x1c>)
 8001c76:	6813      	ldr	r3, [r2, #0]
 8001c78:	6819      	ldr	r1, [r3, #0]
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <prvResetNextTaskUnblockTime+0x20>)
 8001c7c:	b919      	cbnz	r1, 8001c86 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001c7e:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001c8a:	68d2      	ldr	r2, [r2, #12]
 8001c8c:	6852      	ldr	r2, [r2, #4]
 8001c8e:	e7f8      	b.n	8001c82 <prvResetNextTaskUnblockTime+0xe>
 8001c90:	20003c4c 	.word	0x20003c4c
 8001c94:	20003d20 	.word	0x20003d20

08001c98 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8001c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001c9e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001ca2:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8001ca4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001ca8:	3a01      	subs	r2, #1
 8001caa:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8001cae:	469a      	mov	sl, r3
 8001cb0:	4681      	mov	r9, r0
 8001cb2:	1e4b      	subs	r3, r1, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001cb4:	f026 0607 	bic.w	r6, r6, #7
 8001cb8:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8001cbc:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001cbe:	7858      	ldrb	r0, [r3, #1]
 8001cc0:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8001cc4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8001cc8:	b108      	cbz	r0, 8001cce <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001cca:	428b      	cmp	r3, r1
 8001ccc:	d1f7      	bne.n	8001cbe <prvInitialiseNewTask.isra.2+0x26>
 8001cce:	9d08      	ldr	r5, [sp, #32]
 8001cd0:	2d06      	cmp	r5, #6
 8001cd2:	bf28      	it	cs
 8001cd4:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001cd6:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 8001cd8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001cda:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001cdc:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001cde:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8001ce2:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001ce4:	f7ff fb04 	bl	80012f0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ce8:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001cec:	f104 0018 	add.w	r0, r4, #24
 8001cf0:	f7ff fafe 	bl	80012f0 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001cf4:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001cf6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cf8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001cfa:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001cfc:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001d00:	4652      	mov	r2, sl
 8001d02:	4649      	mov	r1, r9
 8001d04:	4630      	mov	r0, r6
 8001d06:	f7ff fb69 	bl	80013dc <pxPortInitialiseStack>
 8001d0a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8001d0c:	f1b8 0f00 	cmp.w	r8, #0
 8001d10:	d001      	beq.n	8001d16 <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001d12:	f8c8 4000 	str.w	r4, [r8]
 8001d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001d1a <prvDeleteTCB>:
	{
 8001d1a:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001d1c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8001d20:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001d22:	b93b      	cbnz	r3, 8001d34 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8001d24:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001d26:	f7ff fd55 	bl	80017d4 <vPortFree>
				vPortFree( pxTCB );
 8001d2a:	4620      	mov	r0, r4
	}
 8001d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8001d30:	f7ff bd50 	b.w	80017d4 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d0f9      	beq.n	8001d2c <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d008      	beq.n	8001d4e <prvDeleteTCB+0x34>
 8001d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d40:	f383 8811 	msr	BASEPRI, r3
 8001d44:	f3bf 8f6f 	isb	sy
 8001d48:	f3bf 8f4f 	dsb	sy
 8001d4c:	e7fe      	b.n	8001d4c <prvDeleteTCB+0x32>
 8001d4e:	bd10      	pop	{r4, pc}

08001d50 <prvIdleTask>:
{
 8001d50:	b580      	push	{r7, lr}
				taskYIELD();
 8001d52:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8001db0 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001d56:	4f12      	ldr	r7, [pc, #72]	; (8001da0 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001d58:	4c12      	ldr	r4, [pc, #72]	; (8001da4 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8001d5a:	4d13      	ldr	r5, [pc, #76]	; (8001da8 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001d5c:	6823      	ldr	r3, [r4, #0]
 8001d5e:	b963      	cbnz	r3, 8001d7a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <prvIdleTask+0x5c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d9f8      	bls.n	8001d5a <prvIdleTask+0xa>
				taskYIELD();
 8001d68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001d6c:	f8c8 3000 	str.w	r3, [r8]
 8001d70:	f3bf 8f4f 	dsb	sy
 8001d74:	f3bf 8f6f 	isb	sy
 8001d78:	e7ee      	b.n	8001d58 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8001d7a:	f7ff fb5b 	bl	8001434 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d82:	1d30      	adds	r0, r6, #4
 8001d84:	f7ff fada 	bl	800133c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001d88:	682b      	ldr	r3, [r5, #0]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001d8e:	6823      	ldr	r3, [r4, #0]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8001d94:	f7ff fb70 	bl	8001478 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8001d98:	4630      	mov	r0, r6
 8001d9a:	f7ff ffbe 	bl	8001d1a <prvDeleteTCB>
 8001d9e:	e7dd      	b.n	8001d5c <prvIdleTask+0xc>
 8001da0:	20003d54 	.word	0x20003d54
 8001da4:	20003ce4 	.word	0x20003ce4
 8001da8:	20003ce0 	.word	0x20003ce0
 8001dac:	20003c54 	.word	0x20003c54
 8001db0:	e000ed04 	.word	0xe000ed04

08001db4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001db6:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001db8:	4e1b      	ldr	r6, [pc, #108]	; (8001e28 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8001dba:	681d      	ldr	r5, [r3, #0]
{
 8001dbc:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001dbe:	6830      	ldr	r0, [r6, #0]
 8001dc0:	3004      	adds	r0, #4
{
 8001dc2:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001dc4:	f7ff faba 	bl	800133c <uxListRemove>
 8001dc8:	4633      	mov	r3, r6
 8001dca:	b940      	cbnz	r0, 8001dde <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001dcc:	6831      	ldr	r1, [r6, #0]
 8001dce:	4e17      	ldr	r6, [pc, #92]	; (8001e2c <prvAddCurrentTaskToDelayedList+0x78>)
 8001dd0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001dd2:	6832      	ldr	r2, [r6, #0]
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	4088      	lsls	r0, r1
 8001dd8:	ea22 0200 	bic.w	r2, r2, r0
 8001ddc:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001dde:	1c62      	adds	r2, r4, #1
 8001de0:	d107      	bne.n	8001df2 <prvAddCurrentTaskToDelayedList+0x3e>
 8001de2:	b137      	cbz	r7, 8001df2 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001de4:	6819      	ldr	r1, [r3, #0]
 8001de6:	4812      	ldr	r0, [pc, #72]	; (8001e30 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001de8:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001dea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001dee:	f7ff ba82 	b.w	80012f6 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001df2:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001df4:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8001df6:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001df8:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8001dfa:	d907      	bls.n	8001e0c <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001dfc:	4a0d      	ldr	r2, [pc, #52]	; (8001e34 <prvAddCurrentTaskToDelayedList+0x80>)
 8001dfe:	6810      	ldr	r0, [r2, #0]
 8001e00:	6819      	ldr	r1, [r3, #0]
}
 8001e02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e06:	3104      	adds	r1, #4
 8001e08:	f7ff ba81 	b.w	800130e <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e0c:	4a0a      	ldr	r2, [pc, #40]	; (8001e38 <prvAddCurrentTaskToDelayedList+0x84>)
 8001e0e:	6810      	ldr	r0, [r2, #0]
 8001e10:	6819      	ldr	r1, [r3, #0]
 8001e12:	3104      	adds	r1, #4
 8001e14:	f7ff fa7b 	bl	800130e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001e18:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <prvAddCurrentTaskToDelayedList+0x88>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8001e1e:	bf38      	it	cc
 8001e20:	601c      	strcc	r4, [r3, #0]
 8001e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e24:	20003d68 	.word	0x20003d68
 8001e28:	20003c48 	.word	0x20003c48
 8001e2c:	20003cf4 	.word	0x20003cf4
 8001e30:	20003d40 	.word	0x20003d40
 8001e34:	20003c50 	.word	0x20003c50
 8001e38:	20003c4c 	.word	0x20003c4c
 8001e3c:	20003d20 	.word	0x20003d20

08001e40 <xTaskCreateStatic>:
	{
 8001e40:	b570      	push	{r4, r5, r6, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8001e46:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8001e48:	b945      	cbnz	r5, 8001e5c <xTaskCreateStatic+0x1c>
 8001e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e4e:	f383 8811 	msr	BASEPRI, r3
 8001e52:	f3bf 8f6f 	isb	sy
 8001e56:	f3bf 8f4f 	dsb	sy
 8001e5a:	e7fe      	b.n	8001e5a <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8001e5c:	b944      	cbnz	r4, 8001e70 <xTaskCreateStatic+0x30>
 8001e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e62:	f383 8811 	msr	BASEPRI, r3
 8001e66:	f3bf 8f6f 	isb	sy
 8001e6a:	f3bf 8f4f 	dsb	sy
 8001e6e:	e7fe      	b.n	8001e6e <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8001e70:	2654      	movs	r6, #84	; 0x54
 8001e72:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001e74:	9e04      	ldr	r6, [sp, #16]
 8001e76:	2e54      	cmp	r6, #84	; 0x54
 8001e78:	d008      	beq.n	8001e8c <xTaskCreateStatic+0x4c>
 8001e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e7e:	f383 8811 	msr	BASEPRI, r3
 8001e82:	f3bf 8f6f 	isb	sy
 8001e86:	f3bf 8f4f 	dsb	sy
 8001e8a:	e7fe      	b.n	8001e8a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001e8c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001e8e:	2502      	movs	r5, #2
 8001e90:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001e94:	ad05      	add	r5, sp, #20
 8001e96:	9501      	str	r5, [sp, #4]
 8001e98:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001e9a:	9402      	str	r4, [sp, #8]
 8001e9c:	9500      	str	r5, [sp, #0]
 8001e9e:	f7ff fefb 	bl	8001c98 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	f7ff fe6a 	bl	8001b7c <prvAddNewTaskToReadyList>
	}
 8001ea8:	9805      	ldr	r0, [sp, #20]
 8001eaa:	b006      	add	sp, #24
 8001eac:	bd70      	pop	{r4, r5, r6, pc}

08001eae <xTaskCreate>:
	{
 8001eae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001eb2:	4607      	mov	r7, r0
 8001eb4:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001eb6:	0090      	lsls	r0, r2, #2
	{
 8001eb8:	4688      	mov	r8, r1
 8001eba:	4616      	mov	r6, r2
 8001ebc:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ebe:	f7ff fbfb 	bl	80016b8 <pvPortMalloc>
			if( pxStack != NULL )
 8001ec2:	4605      	mov	r5, r0
 8001ec4:	b1e8      	cbz	r0, 8001f02 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001ec6:	2054      	movs	r0, #84	; 0x54
 8001ec8:	f7ff fbf6 	bl	80016b8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001ecc:	4604      	mov	r4, r0
 8001ece:	b1a8      	cbz	r0, 8001efc <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001ed6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8001ed8:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001eda:	9301      	str	r3, [sp, #4]
 8001edc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001ede:	9002      	str	r0, [sp, #8]
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	4632      	mov	r2, r6
 8001ee4:	464b      	mov	r3, r9
 8001ee6:	4641      	mov	r1, r8
 8001ee8:	4638      	mov	r0, r7
 8001eea:	f7ff fed5 	bl	8001c98 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001eee:	4620      	mov	r0, r4
 8001ef0:	f7ff fe44 	bl	8001b7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001ef4:	2001      	movs	r0, #1
	}
 8001ef6:	b005      	add	sp, #20
 8001ef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8001efc:	4628      	mov	r0, r5
 8001efe:	f7ff fc69 	bl	80017d4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001f02:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8001f06:	e7f6      	b.n	8001ef6 <xTaskCreate+0x48>

08001f08 <vTaskStartScheduler>:
{
 8001f08:	b510      	push	{r4, lr}
 8001f0a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001f0c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001f0e:	aa07      	add	r2, sp, #28
 8001f10:	a906      	add	r1, sp, #24
 8001f12:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001f14:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001f16:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001f18:	f000 faa6 	bl	8002468 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001f1c:	9b05      	ldr	r3, [sp, #20]
 8001f1e:	9302      	str	r3, [sp, #8]
 8001f20:	9b06      	ldr	r3, [sp, #24]
 8001f22:	9301      	str	r3, [sp, #4]
 8001f24:	9400      	str	r4, [sp, #0]
 8001f26:	4623      	mov	r3, r4
 8001f28:	9a07      	ldr	r2, [sp, #28]
 8001f2a:	490d      	ldr	r1, [pc, #52]	; (8001f60 <vTaskStartScheduler+0x58>)
 8001f2c:	480d      	ldr	r0, [pc, #52]	; (8001f64 <vTaskStartScheduler+0x5c>)
 8001f2e:	f7ff ff87 	bl	8001e40 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8001f32:	b190      	cbz	r0, 8001f5a <vTaskStartScheduler+0x52>
 8001f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f38:	f383 8811 	msr	BASEPRI, r3
 8001f3c:	f3bf 8f6f 	isb	sy
 8001f40:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <vTaskStartScheduler+0x60>)
 8001f46:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001f4c:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <vTaskStartScheduler+0x64>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <vTaskStartScheduler+0x68>)
 8001f54:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8001f56:	f7ff fb05 	bl	8001564 <xPortStartScheduler>
}
 8001f5a:	b008      	add	sp, #32
 8001f5c:	bd10      	pop	{r4, pc}
 8001f5e:	bf00      	nop
 8001f60:	08002918 	.word	0x08002918
 8001f64:	08001d51 	.word	0x08001d51
 8001f68:	20003d20 	.word	0x20003d20
 8001f6c:	20003d3c 	.word	0x20003d3c
 8001f70:	20003d68 	.word	0x20003d68

08001f74 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001f74:	4a02      	ldr	r2, [pc, #8]	; (8001f80 <vTaskSuspendAll+0xc>)
 8001f76:	6813      	ldr	r3, [r2, #0]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	6013      	str	r3, [r2, #0]
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20003cec 	.word	0x20003cec

08001f84 <xTaskIncrementTick>:
{
 8001f84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f88:	4b3c      	ldr	r3, [pc, #240]	; (800207c <xTaskIncrementTick+0xf8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d153      	bne.n	8002038 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001f90:	4b3b      	ldr	r3, [pc, #236]	; (8002080 <xTaskIncrementTick+0xfc>)
 8001f92:	681c      	ldr	r4, [r3, #0]
 8001f94:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8001f96:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001f98:	b9bc      	cbnz	r4, 8001fca <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8001f9a:	4b3a      	ldr	r3, [pc, #232]	; (8002084 <xTaskIncrementTick+0x100>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	6812      	ldr	r2, [r2, #0]
 8001fa0:	b142      	cbz	r2, 8001fb4 <xTaskIncrementTick+0x30>
 8001fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa6:	f383 8811 	msr	BASEPRI, r3
 8001faa:	f3bf 8f6f 	isb	sy
 8001fae:	f3bf 8f4f 	dsb	sy
 8001fb2:	e7fe      	b.n	8001fb2 <xTaskIncrementTick+0x2e>
 8001fb4:	4a34      	ldr	r2, [pc, #208]	; (8002088 <xTaskIncrementTick+0x104>)
 8001fb6:	6819      	ldr	r1, [r3, #0]
 8001fb8:	6810      	ldr	r0, [r2, #0]
 8001fba:	6018      	str	r0, [r3, #0]
 8001fbc:	6011      	str	r1, [r2, #0]
 8001fbe:	4a33      	ldr	r2, [pc, #204]	; (800208c <xTaskIncrementTick+0x108>)
 8001fc0:	6813      	ldr	r3, [r2, #0]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	f7ff fe55 	bl	8001c74 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001fca:	4d31      	ldr	r5, [pc, #196]	; (8002090 <xTaskIncrementTick+0x10c>)
 8001fcc:	4f31      	ldr	r7, [pc, #196]	; (8002094 <xTaskIncrementTick+0x110>)
 8001fce:	682b      	ldr	r3, [r5, #0]
 8001fd0:	429c      	cmp	r4, r3
 8001fd2:	f04f 0b00 	mov.w	fp, #0
 8001fd6:	d33e      	bcc.n	8002056 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fd8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002084 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8001fdc:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80020a4 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fe0:	f8d8 2000 	ldr.w	r2, [r8]
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	bb72      	cbnz	r2, 8002046 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fec:	602a      	str	r2, [r5, #0]
					break;
 8001fee:	e032      	b.n	8002056 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ff0:	f106 0a04 	add.w	sl, r6, #4
 8001ff4:	4650      	mov	r0, sl
 8001ff6:	f7ff f9a1 	bl	800133c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001ffa:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8001ffc:	b119      	cbz	r1, 8002006 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001ffe:	f106 0018 	add.w	r0, r6, #24
 8002002:	f7ff f99b 	bl	800133c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002006:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002008:	f8d9 3000 	ldr.w	r3, [r9]
 800200c:	2201      	movs	r2, #1
 800200e:	fa02 f100 	lsl.w	r1, r2, r0
 8002012:	4319      	orrs	r1, r3
 8002014:	4b20      	ldr	r3, [pc, #128]	; (8002098 <xTaskIncrementTick+0x114>)
 8002016:	f8c9 1000 	str.w	r1, [r9]
 800201a:	f04f 0e14 	mov.w	lr, #20
 800201e:	4651      	mov	r1, sl
 8002020:	fb0e 3000 	mla	r0, lr, r0, r3
 8002024:	f7ff f967 	bl	80012f6 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002028:	6838      	ldr	r0, [r7, #0]
 800202a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800202c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800202e:	4291      	cmp	r1, r2
 8002030:	bf28      	it	cs
 8002032:	f04f 0b01 	movcs.w	fp, #1
 8002036:	e7d3      	b.n	8001fe0 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8002038:	4a18      	ldr	r2, [pc, #96]	; (800209c <xTaskIncrementTick+0x118>)
 800203a:	6813      	ldr	r3, [r2, #0]
 800203c:	3301      	adds	r3, #1
 800203e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8002040:	f04f 0b00 	mov.w	fp, #0
 8002044:	e011      	b.n	800206a <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002046:	f8d8 2000 	ldr.w	r2, [r8]
 800204a:	68d2      	ldr	r2, [r2, #12]
 800204c:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800204e:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002050:	428c      	cmp	r4, r1
 8002052:	d2cd      	bcs.n	8001ff0 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8002054:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <xTaskIncrementTick+0x114>)
 800205a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800205c:	2214      	movs	r2, #20
 800205e:	434a      	muls	r2, r1
 8002060:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8002062:	2a02      	cmp	r2, #2
 8002064:	bf28      	it	cs
 8002066:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800206a:	4a0d      	ldr	r2, [pc, #52]	; (80020a0 <xTaskIncrementTick+0x11c>)
 800206c:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800206e:	2a00      	cmp	r2, #0
 8002070:	bf18      	it	ne
 8002072:	f04f 0b01 	movne.w	fp, #1
}
 8002076:	4658      	mov	r0, fp
 8002078:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800207c:	20003cec 	.word	0x20003cec
 8002080:	20003d68 	.word	0x20003d68
 8002084:	20003c4c 	.word	0x20003c4c
 8002088:	20003c50 	.word	0x20003c50
 800208c:	20003d24 	.word	0x20003d24
 8002090:	20003d20 	.word	0x20003d20
 8002094:	20003c48 	.word	0x20003c48
 8002098:	20003c54 	.word	0x20003c54
 800209c:	20003ce8 	.word	0x20003ce8
 80020a0:	20003d6c 	.word	0x20003d6c
 80020a4:	20003cf4 	.word	0x20003cf4

080020a8 <xTaskResumeAll>:
{
 80020a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80020ac:	4c31      	ldr	r4, [pc, #196]	; (8002174 <xTaskResumeAll+0xcc>)
 80020ae:	6823      	ldr	r3, [r4, #0]
 80020b0:	b943      	cbnz	r3, 80020c4 <xTaskResumeAll+0x1c>
 80020b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b6:	f383 8811 	msr	BASEPRI, r3
 80020ba:	f3bf 8f6f 	isb	sy
 80020be:	f3bf 8f4f 	dsb	sy
 80020c2:	e7fe      	b.n	80020c2 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80020c4:	f7ff f9b6 	bl	8001434 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80020c8:	6823      	ldr	r3, [r4, #0]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020ce:	6824      	ldr	r4, [r4, #0]
 80020d0:	b12c      	cbz	r4, 80020de <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80020d2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80020d4:	f7ff f9d0 	bl	8001478 <vPortExitCritical>
}
 80020d8:	4620      	mov	r0, r4
 80020da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80020de:	4b26      	ldr	r3, [pc, #152]	; (8002178 <xTaskResumeAll+0xd0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f5      	beq.n	80020d2 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80020e6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8002190 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 80020ea:	4f24      	ldr	r7, [pc, #144]	; (800217c <xTaskResumeAll+0xd4>)
 80020ec:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002194 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80020f0:	f8d9 3000 	ldr.w	r3, [r9]
 80020f4:	b9e3      	cbnz	r3, 8002130 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 80020f6:	b10c      	cbz	r4, 80020fc <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 80020f8:	f7ff fdbc 	bl	8001c74 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80020fc:	4d20      	ldr	r5, [pc, #128]	; (8002180 <xTaskResumeAll+0xd8>)
 80020fe:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002100:	b144      	cbz	r4, 8002114 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8002102:	4e20      	ldr	r6, [pc, #128]	; (8002184 <xTaskResumeAll+0xdc>)
 8002104:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8002106:	f7ff ff3d 	bl	8001f84 <xTaskIncrementTick>
 800210a:	b100      	cbz	r0, 800210e <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 800210c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800210e:	3c01      	subs	r4, #1
 8002110:	d1f9      	bne.n	8002106 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8002112:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002114:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <xTaskResumeAll+0xdc>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0da      	beq.n	80020d2 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800211c:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <xTaskResumeAll+0xe0>)
 800211e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	f3bf 8f4f 	dsb	sy
 8002128:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800212c:	2401      	movs	r4, #1
 800212e:	e7d1      	b.n	80020d4 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002130:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002134:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002136:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002138:	f104 0018 	add.w	r0, r4, #24
 800213c:	f7ff f8fe 	bl	800133c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002140:	4630      	mov	r0, r6
 8002142:	f7ff f8fb 	bl	800133c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002146:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002148:	6839      	ldr	r1, [r7, #0]
 800214a:	2501      	movs	r5, #1
 800214c:	fa05 f302 	lsl.w	r3, r5, r2
 8002150:	2014      	movs	r0, #20
 8002152:	430b      	orrs	r3, r1
 8002154:	fb00 8002 	mla	r0, r0, r2, r8
 8002158:	4631      	mov	r1, r6
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	f7ff f8cb 	bl	80012f6 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002160:	4b0a      	ldr	r3, [pc, #40]	; (800218c <xTaskResumeAll+0xe4>)
 8002162:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 800216a:	bf24      	itt	cs
 800216c:	4b05      	ldrcs	r3, [pc, #20]	; (8002184 <xTaskResumeAll+0xdc>)
 800216e:	601d      	strcs	r5, [r3, #0]
 8002170:	e7be      	b.n	80020f0 <xTaskResumeAll+0x48>
 8002172:	bf00      	nop
 8002174:	20003cec 	.word	0x20003cec
 8002178:	20003ce0 	.word	0x20003ce0
 800217c:	20003cf4 	.word	0x20003cf4
 8002180:	20003ce8 	.word	0x20003ce8
 8002184:	20003d6c 	.word	0x20003d6c
 8002188:	e000ed04 	.word	0xe000ed04
 800218c:	20003c48 	.word	0x20003c48
 8002190:	20003d28 	.word	0x20003d28
 8002194:	20003c54 	.word	0x20003c54

08002198 <vTaskDelay>:
	{
 8002198:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800219a:	b940      	cbnz	r0, 80021ae <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800219c:	4b0e      	ldr	r3, [pc, #56]	; (80021d8 <vTaskDelay+0x40>)
 800219e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	f3bf 8f4f 	dsb	sy
 80021a8:	f3bf 8f6f 	isb	sy
 80021ac:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80021ae:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <vTaskDelay+0x44>)
 80021b0:	6819      	ldr	r1, [r3, #0]
 80021b2:	b141      	cbz	r1, 80021c6 <vTaskDelay+0x2e>
 80021b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b8:	f383 8811 	msr	BASEPRI, r3
 80021bc:	f3bf 8f6f 	isb	sy
 80021c0:	f3bf 8f4f 	dsb	sy
 80021c4:	e7fe      	b.n	80021c4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80021c6:	f7ff fed5 	bl	8001f74 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80021ca:	f7ff fdf3 	bl	8001db4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80021ce:	f7ff ff6b 	bl	80020a8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80021d2:	2800      	cmp	r0, #0
 80021d4:	d0e2      	beq.n	800219c <vTaskDelay+0x4>
 80021d6:	bd08      	pop	{r3, pc}
 80021d8:	e000ed04 	.word	0xe000ed04
 80021dc:	20003cec 	.word	0x20003cec

080021e0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80021e0:	4b17      	ldr	r3, [pc, #92]	; (8002240 <vTaskSwitchContext+0x60>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4b17      	ldr	r3, [pc, #92]	; (8002244 <vTaskSwitchContext+0x64>)
{
 80021e6:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80021e8:	b112      	cbz	r2, 80021f0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80021ea:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80021f0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <vTaskSwitchContext+0x68>)
 80021f4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80021f6:	fab3 f383 	clz	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	f1c3 031f 	rsb	r3, r3, #31
 8002200:	2214      	movs	r2, #20
 8002202:	4912      	ldr	r1, [pc, #72]	; (800224c <vTaskSwitchContext+0x6c>)
 8002204:	435a      	muls	r2, r3
 8002206:	1888      	adds	r0, r1, r2
 8002208:	588c      	ldr	r4, [r1, r2]
 800220a:	b944      	cbnz	r4, 800221e <vTaskSwitchContext+0x3e>
	__asm volatile
 800220c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002210:	f383 8811 	msr	BASEPRI, r3
 8002214:	f3bf 8f6f 	isb	sy
 8002218:	f3bf 8f4f 	dsb	sy
 800221c:	e7fe      	b.n	800221c <vTaskSwitchContext+0x3c>
 800221e:	6844      	ldr	r4, [r0, #4]
 8002220:	3208      	adds	r2, #8
 8002222:	6864      	ldr	r4, [r4, #4]
 8002224:	6044      	str	r4, [r0, #4]
 8002226:	440a      	add	r2, r1
 8002228:	4294      	cmp	r4, r2
 800222a:	bf04      	itt	eq
 800222c:	6862      	ldreq	r2, [r4, #4]
 800222e:	6042      	streq	r2, [r0, #4]
 8002230:	2214      	movs	r2, #20
 8002232:	fb02 1303 	mla	r3, r2, r3, r1
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	4b05      	ldr	r3, [pc, #20]	; (8002250 <vTaskSwitchContext+0x70>)
 800223c:	e7d6      	b.n	80021ec <vTaskSwitchContext+0xc>
 800223e:	bf00      	nop
 8002240:	20003cec 	.word	0x20003cec
 8002244:	20003d6c 	.word	0x20003d6c
 8002248:	20003cf4 	.word	0x20003cf4
 800224c:	20003c54 	.word	0x20003c54
 8002250:	20003c48 	.word	0x20003c48

08002254 <vTaskPlaceOnEventList>:
{
 8002254:	b510      	push	{r4, lr}
 8002256:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8002258:	b940      	cbnz	r0, 800226c <vTaskPlaceOnEventList+0x18>
 800225a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800225e:	f383 8811 	msr	BASEPRI, r3
 8002262:	f3bf 8f6f 	isb	sy
 8002266:	f3bf 8f4f 	dsb	sy
 800226a:	e7fe      	b.n	800226a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800226c:	4b05      	ldr	r3, [pc, #20]	; (8002284 <vTaskPlaceOnEventList+0x30>)
 800226e:	6819      	ldr	r1, [r3, #0]
 8002270:	3118      	adds	r1, #24
 8002272:	f7ff f84c 	bl	800130e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002276:	4620      	mov	r0, r4
 8002278:	2101      	movs	r1, #1
}
 800227a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800227e:	f7ff bd99 	b.w	8001db4 <prvAddCurrentTaskToDelayedList>
 8002282:	bf00      	nop
 8002284:	20003c48 	.word	0x20003c48

08002288 <xTaskRemoveFromEventList>:
{
 8002288:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800228a:	68c3      	ldr	r3, [r0, #12]
 800228c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800228e:	b944      	cbnz	r4, 80022a2 <xTaskRemoveFromEventList+0x1a>
 8002290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002294:	f383 8811 	msr	BASEPRI, r3
 8002298:	f3bf 8f6f 	isb	sy
 800229c:	f3bf 8f4f 	dsb	sy
 80022a0:	e7fe      	b.n	80022a0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80022a2:	f104 0518 	add.w	r5, r4, #24
 80022a6:	4628      	mov	r0, r5
 80022a8:	f7ff f848 	bl	800133c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022ac:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <xTaskRemoveFromEventList+0x6c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	b9e3      	cbnz	r3, 80022ec <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80022b2:	1d25      	adds	r5, r4, #4
 80022b4:	4628      	mov	r0, r5
 80022b6:	f7ff f841 	bl	800133c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80022ba:	490f      	ldr	r1, [pc, #60]	; (80022f8 <xTaskRemoveFromEventList+0x70>)
 80022bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80022be:	6808      	ldr	r0, [r1, #0]
 80022c0:	2301      	movs	r3, #1
 80022c2:	4093      	lsls	r3, r2
 80022c4:	4303      	orrs	r3, r0
 80022c6:	600b      	str	r3, [r1, #0]
 80022c8:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <xTaskRemoveFromEventList+0x74>)
 80022ca:	2014      	movs	r0, #20
 80022cc:	4629      	mov	r1, r5
 80022ce:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80022d2:	f7ff f810 	bl	80012f6 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80022d6:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <xTaskRemoveFromEventList+0x78>)
 80022d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022de:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80022e0:	bf83      	ittte	hi
 80022e2:	4b08      	ldrhi	r3, [pc, #32]	; (8002304 <xTaskRemoveFromEventList+0x7c>)
 80022e4:	2001      	movhi	r0, #1
 80022e6:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 80022e8:	2000      	movls	r0, #0
}
 80022ea:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80022ec:	4629      	mov	r1, r5
 80022ee:	4806      	ldr	r0, [pc, #24]	; (8002308 <xTaskRemoveFromEventList+0x80>)
 80022f0:	e7ef      	b.n	80022d2 <xTaskRemoveFromEventList+0x4a>
 80022f2:	bf00      	nop
 80022f4:	20003cec 	.word	0x20003cec
 80022f8:	20003cf4 	.word	0x20003cf4
 80022fc:	20003c54 	.word	0x20003c54
 8002300:	20003c48 	.word	0x20003c48
 8002304:	20003d6c 	.word	0x20003d6c
 8002308:	20003d28 	.word	0x20003d28

0800230c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800230c:	4b03      	ldr	r3, [pc, #12]	; (800231c <vTaskInternalSetTimeOutState+0x10>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002312:	4b03      	ldr	r3, [pc, #12]	; (8002320 <vTaskInternalSetTimeOutState+0x14>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6043      	str	r3, [r0, #4]
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	20003d24 	.word	0x20003d24
 8002320:	20003d68 	.word	0x20003d68

08002324 <xTaskCheckForTimeOut>:
{
 8002324:	b570      	push	{r4, r5, r6, lr}
 8002326:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8002328:	4605      	mov	r5, r0
 800232a:	b940      	cbnz	r0, 800233e <xTaskCheckForTimeOut+0x1a>
 800232c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002330:	f383 8811 	msr	BASEPRI, r3
 8002334:	f3bf 8f6f 	isb	sy
 8002338:	f3bf 8f4f 	dsb	sy
 800233c:	e7fe      	b.n	800233c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800233e:	b941      	cbnz	r1, 8002352 <xTaskCheckForTimeOut+0x2e>
 8002340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002344:	f383 8811 	msr	BASEPRI, r3
 8002348:	f3bf 8f6f 	isb	sy
 800234c:	f3bf 8f4f 	dsb	sy
 8002350:	e7fe      	b.n	8002350 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8002352:	f7ff f86f 	bl	8001434 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8002356:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002358:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 800235a:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800235c:	6823      	ldr	r3, [r4, #0]
 800235e:	1c58      	adds	r0, r3, #1
 8002360:	d00e      	beq.n	8002380 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002362:	480d      	ldr	r0, [pc, #52]	; (8002398 <xTaskCheckForTimeOut+0x74>)
 8002364:	682e      	ldr	r6, [r5, #0]
 8002366:	6800      	ldr	r0, [r0, #0]
 8002368:	4286      	cmp	r6, r0
 800236a:	d001      	beq.n	8002370 <xTaskCheckForTimeOut+0x4c>
 800236c:	428a      	cmp	r2, r1
 800236e:	d20e      	bcs.n	800238e <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002370:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002372:	429a      	cmp	r2, r3
 8002374:	d209      	bcs.n	800238a <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 8002376:	1a9b      	subs	r3, r3, r2
 8002378:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800237a:	4628      	mov	r0, r5
 800237c:	f7ff ffc6 	bl	800230c <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8002380:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002382:	f7ff f879 	bl	8001478 <vPortExitCritical>
}
 8002386:	4620      	mov	r0, r4
 8002388:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800238e:	2401      	movs	r4, #1
 8002390:	e7f7      	b.n	8002382 <xTaskCheckForTimeOut+0x5e>
 8002392:	bf00      	nop
 8002394:	20003d68 	.word	0x20003d68
 8002398:	20003d24 	.word	0x20003d24

0800239c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800239c:	4b01      	ldr	r3, [pc, #4]	; (80023a4 <vTaskMissedYield+0x8>)
 800239e:	2201      	movs	r2, #1
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	4770      	bx	lr
 80023a4:	20003d6c 	.word	0x20003d6c

080023a8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80023a8:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <xTaskGetSchedulerState+0x18>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	b133      	cbz	r3, 80023bc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80023ae:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <xTaskGetSchedulerState+0x1c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80023b4:	bf0c      	ite	eq
 80023b6:	2002      	moveq	r0, #2
 80023b8:	2000      	movne	r0, #0
 80023ba:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80023bc:	2001      	movs	r0, #1
	}
 80023be:	4770      	bx	lr
 80023c0:	20003d3c 	.word	0x20003d3c
 80023c4:	20003cec 	.word	0x20003cec

080023c8 <xTaskPriorityDisinherit>:
	{
 80023c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80023ca:	4604      	mov	r4, r0
 80023cc:	b908      	cbnz	r0, 80023d2 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80023ce:	2000      	movs	r0, #0
 80023d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80023d2:	4b22      	ldr	r3, [pc, #136]	; (800245c <xTaskPriorityDisinherit+0x94>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4298      	cmp	r0, r3
 80023d8:	d008      	beq.n	80023ec <xTaskPriorityDisinherit+0x24>
 80023da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023de:	f383 8811 	msr	BASEPRI, r3
 80023e2:	f3bf 8f6f 	isb	sy
 80023e6:	f3bf 8f4f 	dsb	sy
 80023ea:	e7fe      	b.n	80023ea <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80023ec:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80023ee:	b943      	cbnz	r3, 8002402 <xTaskPriorityDisinherit+0x3a>
 80023f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f4:	f383 8811 	msr	BASEPRI, r3
 80023f8:	f3bf 8f6f 	isb	sy
 80023fc:	f3bf 8f4f 	dsb	sy
 8002400:	e7fe      	b.n	8002400 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002402:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002404:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8002406:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002408:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800240a:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800240c:	d0df      	beq.n	80023ce <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1dd      	bne.n	80023ce <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002412:	1d05      	adds	r5, r0, #4
 8002414:	4628      	mov	r0, r5
 8002416:	f7fe ff91 	bl	800133c <uxListRemove>
 800241a:	4e11      	ldr	r6, [pc, #68]	; (8002460 <xTaskPriorityDisinherit+0x98>)
 800241c:	4a11      	ldr	r2, [pc, #68]	; (8002464 <xTaskPriorityDisinherit+0x9c>)
 800241e:	b950      	cbnz	r0, 8002436 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002420:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002422:	2114      	movs	r1, #20
 8002424:	4379      	muls	r1, r7
 8002426:	5873      	ldr	r3, [r6, r1]
 8002428:	b92b      	cbnz	r3, 8002436 <xTaskPriorityDisinherit+0x6e>
 800242a:	6813      	ldr	r3, [r2, #0]
 800242c:	2001      	movs	r0, #1
 800242e:	40b8      	lsls	r0, r7
 8002430:	ea23 0300 	bic.w	r3, r3, r0
 8002434:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002436:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002438:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800243a:	f1c3 0107 	rsb	r1, r3, #7
 800243e:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8002440:	6811      	ldr	r1, [r2, #0]
 8002442:	2401      	movs	r4, #1
 8002444:	fa04 f003 	lsl.w	r0, r4, r3
 8002448:	4308      	orrs	r0, r1
 800244a:	6010      	str	r0, [r2, #0]
 800244c:	2014      	movs	r0, #20
 800244e:	fb00 6003 	mla	r0, r0, r3, r6
 8002452:	4629      	mov	r1, r5
 8002454:	f7fe ff4f 	bl	80012f6 <vListInsertEnd>
					xReturn = pdTRUE;
 8002458:	4620      	mov	r0, r4
	}
 800245a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800245c:	20003c48 	.word	0x20003c48
 8002460:	20003c54 	.word	0x20003c54
 8002464:	20003cf4 	.word	0x20003cf4

08002468 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002468:	4b03      	ldr	r3, [pc, #12]	; (8002478 <vApplicationGetIdleTaskMemory+0x10>)
 800246a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800246c:	4b03      	ldr	r3, [pc, #12]	; (800247c <vApplicationGetIdleTaskMemory+0x14>)
 800246e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002470:	2380      	movs	r3, #128	; 0x80
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	20003f70 	.word	0x20003f70
 800247c:	20003d70 	.word	0x20003d70

08002480 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002480:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002482:	2001      	movs	r0, #1
 8002484:	f7fe ff21 	bl	80012ca <osDelay>
 8002488:	e7fb      	b.n	8002482 <StartDefaultTask+0x2>
	...

0800248c <SystemClock_Config>:
{
 800248c:	b530      	push	{r4, r5, lr}
 800248e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002490:	2230      	movs	r2, #48	; 0x30
 8002492:	2100      	movs	r1, #0
 8002494:	a808      	add	r0, sp, #32
 8002496:	f000 fa1c 	bl	80028d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800249a:	2100      	movs	r1, #0
 800249c:	2214      	movs	r2, #20
 800249e:	a803      	add	r0, sp, #12
 80024a0:	f000 fa17 	bl	80028d2 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80024a4:	2400      	movs	r4, #0
 80024a6:	4b1e      	ldr	r3, [pc, #120]	; (8002520 <SystemClock_Config+0x94>)
 80024a8:	9401      	str	r4, [sp, #4]
 80024aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024b0:	641a      	str	r2, [r3, #64]	; 0x40
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80024b4:	4a1b      	ldr	r2, [pc, #108]	; (8002524 <SystemClock_Config+0x98>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80024be:	9402      	str	r4, [sp, #8]
 80024c0:	6813      	ldr	r3, [r2, #0]
 80024c2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80024c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	6813      	ldr	r3, [r2, #0]
 80024ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024d2:	9302      	str	r3, [sp, #8]
 80024d4:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024d6:	2301      	movs	r3, #1
 80024d8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024de:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024e4:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 64;
 80024e6:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024e8:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024ea:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 80024ec:	2304      	movs	r3, #4
 80024ee:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80024f0:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80024f2:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024f4:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024f6:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024f8:	f7fe f974 	bl	80007e4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024fc:	230f      	movs	r3, #15
 80024fe:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8002500:	23a0      	movs	r3, #160	; 0xa0
 8002502:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002504:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002508:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800250a:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800250c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002510:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002512:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002514:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002516:	f7fe fb15 	bl	8000b44 <HAL_RCC_ClockConfig>
}
 800251a:	b015      	add	sp, #84	; 0x54
 800251c:	bd30      	pop	{r4, r5, pc}
 800251e:	bf00      	nop
 8002520:	40023800 	.word	0x40023800
 8002524:	40007000 	.word	0x40007000

08002528 <main>:
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b096      	sub	sp, #88	; 0x58
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800252c:	4c57      	ldr	r4, [pc, #348]	; (800268c <main+0x164>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800252e:	4e58      	ldr	r6, [pc, #352]	; (8002690 <main+0x168>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002530:	2500      	movs	r5, #0
  HAL_Init();
 8002532:	f7fd ffe5 	bl	8000500 <HAL_Init>
  SystemClock_Config();
 8002536:	f7ff ffa9 	bl	800248c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253a:	2214      	movs	r2, #20
 800253c:	2100      	movs	r1, #0
 800253e:	a80f      	add	r0, sp, #60	; 0x3c
 8002540:	f000 f9c7 	bl	80028d2 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002544:	9503      	str	r5, [sp, #12]
 8002546:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8002548:	4852      	ldr	r0, [pc, #328]	; (8002694 <main+0x16c>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800254a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800254e:	6323      	str	r3, [r4, #48]	; 0x30
 8002550:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002556:	9303      	str	r3, [sp, #12]
 8002558:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800255a:	9504      	str	r5, [sp, #16]
 800255c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6323      	str	r3, [r4, #48]	; 0x30
 8002564:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	9304      	str	r3, [sp, #16]
 800256c:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800256e:	9505      	str	r5, [sp, #20]
 8002570:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002576:	6323      	str	r3, [r4, #48]	; 0x30
 8002578:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800257a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257e:	9305      	str	r3, [sp, #20]
 8002580:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002582:	9506      	str	r5, [sp, #24]
 8002584:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002586:	f043 0302 	orr.w	r3, r3, #2
 800258a:	6323      	str	r3, [r4, #48]	; 0x30
 800258c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800258e:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8002592:	462a      	mov	r2, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002594:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8002596:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800259a:	2701      	movs	r7, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800259c:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 800259e:	f7fe f91b 	bl	80007d8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 80025a2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025a6:	a90f      	add	r1, sp, #60	; 0x3c
 80025a8:	483a      	ldr	r0, [pc, #232]	; (8002694 <main+0x16c>)
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 80025aa:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ac:	9710      	str	r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	9511      	str	r5, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b0:	9512      	str	r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025b2:	f7fe f825 	bl	8000600 <HAL_GPIO_Init>
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80025b6:	221c      	movs	r2, #28
 80025b8:	4629      	mov	r1, r5
 80025ba:	a80f      	add	r0, sp, #60	; 0x3c
 80025bc:	f000 f989 	bl	80028d2 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	2218      	movs	r2, #24
 80025c2:	4629      	mov	r1, r5
 80025c4:	a809      	add	r0, sp, #36	; 0x24
 80025c6:	f000 f984 	bl	80028d2 <memset>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80025ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025cc:	4832      	ldr	r0, [pc, #200]	; (8002698 <main+0x170>)
 80025ce:	f043 0310 	orr.w	r3, r3, #16
 80025d2:	6463      	str	r3, [r4, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80025d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80025d6:	f003 0310 	and.w	r3, r3, #16
 80025da:	9308      	str	r3, [sp, #32]
  (void)tmpreg;
 80025dc:	9b08      	ldr	r3, [sp, #32]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80025de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80025e0:	433b      	orrs	r3, r7
 80025e2:	6323      	str	r3, [r4, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80025e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80025e6:	970d      	str	r7, [sp, #52]	; 0x34
 80025e8:	403b      	ands	r3, r7
 80025ea:	9307      	str	r3, [sp, #28]
  (void)tmpreg;
 80025ec:	9b07      	ldr	r3, [sp, #28]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 80025ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025f2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80025f4:	2302      	movs	r3, #2
 80025f6:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80025f8:	2303      	movs	r3, #3
 80025fa:	930b      	str	r3, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fc:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80025fe:	2307      	movs	r3, #7
  LL_USART_Init(USART1, &USART_InitStruct);
 8002600:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002604:	930e      	str	r3, [sp, #56]	; 0x38
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002606:	f7fe fc9f 	bl	8000f48 <LL_GPIO_Init>
  USART_InitStruct.BaudRate = 115200;
 800260a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  LL_USART_Init(USART1, &USART_InitStruct);
 800260e:	a90f      	add	r1, sp, #60	; 0x3c
  USART_InitStruct.BaudRate = 115200;
 8002610:	930f      	str	r3, [sp, #60]	; 0x3c
  LL_USART_Init(USART1, &USART_InitStruct);
 8002612:	4620      	mov	r0, r4
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002614:	230c      	movs	r3, #12
 8002616:	9313      	str	r3, [sp, #76]	; 0x4c
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002618:	9510      	str	r5, [sp, #64]	; 0x40
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800261a:	9511      	str	r5, [sp, #68]	; 0x44
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800261c:	9512      	str	r5, [sp, #72]	; 0x48
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800261e:	9514      	str	r5, [sp, #80]	; 0x50
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002620:	9515      	str	r5, [sp, #84]	; 0x54
  LL_USART_Init(USART1, &USART_InitStruct);
 8002622:	f7fe fda1 	bl	8001168 <LL_USART_Init>
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002626:	6923      	ldr	r3, [r4, #16]
 8002628:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800262c:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800262e:	6963      	ldr	r3, [r4, #20]
 8002630:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002634:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002636:	68e3      	ldr	r3, [r4, #12]
 8002638:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800263c:	60e3      	str	r3, [r4, #12]
  xMutex = xSemaphoreCreateMutex();
 800263e:	4638      	mov	r0, r7
 8002640:	f7ff fa90 	bl	8001b64 <xQueueCreateMutex>
 8002644:	4b15      	ldr	r3, [pc, #84]	; (800269c <main+0x174>)
 8002646:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002648:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800264a:	ac0f      	add	r4, sp, #60	; 0x3c
 800264c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800264e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8002652:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002656:	4629      	mov	r1, r5
 8002658:	a80f      	add	r0, sp, #60	; 0x3c
 800265a:	f7fe fe0e 	bl	800127a <osThreadCreate>
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <main+0x178>)
  xTaskCreate(prvPrintTask, "PrinTask1", 1000, "Task 1 ******************** \r\n", 1, NULL);	// Priority "1"
 8002660:	4910      	ldr	r1, [pc, #64]	; (80026a4 <main+0x17c>)
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002662:	6018      	str	r0, [r3, #0]
  xTaskCreate(prvPrintTask, "PrinTask1", 1000, "Task 1 ******************** \r\n", 1, NULL);	// Priority "1"
 8002664:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002668:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <main+0x180>)
 800266a:	9501      	str	r5, [sp, #4]
 800266c:	9700      	str	r7, [sp, #0]
 800266e:	480f      	ldr	r0, [pc, #60]	; (80026ac <main+0x184>)
 8002670:	f7ff fc1d 	bl	8001eae <xTaskCreate>
  xTaskCreate(prvPrintTask, "PrinTask2", 1000, "Task 2 ==================== \r\n", 1, NULL);	// Priority "1"
 8002674:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <main+0x188>)
 8002676:	490f      	ldr	r1, [pc, #60]	; (80026b4 <main+0x18c>)
 8002678:	9501      	str	r5, [sp, #4]
 800267a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800267e:	9700      	str	r7, [sp, #0]
 8002680:	480a      	ldr	r0, [pc, #40]	; (80026ac <main+0x184>)
 8002682:	f7ff fc14 	bl	8001eae <xTaskCreate>
  osKernelStart();
 8002686:	f7fe fdf3 	bl	8001270 <osKernelStart>
 800268a:	e7fe      	b.n	800268a <main+0x162>
 800268c:	40023800 	.word	0x40023800
 8002690:	080028fc 	.word	0x080028fc
 8002694:	40021800 	.word	0x40021800
 8002698:	40020000 	.word	0x40020000
 800269c:	20003fcc 	.word	0x20003fcc
 80026a0:	20003fc8 	.word	0x20003fc8
 80026a4:	0800293c 	.word	0x0800293c
 80026a8:	0800291d 	.word	0x0800291d
 80026ac:	080026d5 	.word	0x080026d5
 80026b0:	08002946 	.word	0x08002946
 80026b4:	08002965 	.word	0x08002965

080026b8 <vPrintString>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80026b8:	4a05      	ldr	r2, [pc, #20]	; (80026d0 <vPrintString+0x18>)
 80026ba:	3801      	subs	r0, #1
    while(*pStr){
 80026bc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80026c0:	b903      	cbnz	r3, 80026c4 <vPrintString+0xc>
}
 80026c2:	4770      	bx	lr
 80026c4:	6811      	ldr	r1, [r2, #0]
        while(!LL_USART_IsActiveFlag_TXE(USART1));
 80026c6:	0609      	lsls	r1, r1, #24
 80026c8:	d5fc      	bpl.n	80026c4 <vPrintString+0xc>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 80026ca:	6053      	str	r3, [r2, #4]
 80026cc:	e7f6      	b.n	80026bc <vPrintString+0x4>
 80026ce:	bf00      	nop
 80026d0:	40011000 	.word	0x40011000

080026d4 <prvPrintTask>:
{
 80026d4:	b510      	push	{r4, lr}
 80026d6:	4604      	mov	r4, r0
		vPrintString(pcStringToPrint);
 80026d8:	4620      	mov	r0, r4
 80026da:	f7ff ffed 	bl	80026b8 <vPrintString>
		vTaskDelay(1);
 80026de:	2001      	movs	r0, #1
 80026e0:	f7ff fd5a 	bl	8002198 <vTaskDelay>
 80026e4:	e7f8      	b.n	80026d8 <prvPrintTask+0x4>
	...

080026e8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80026e8:	6802      	ldr	r2, [r0, #0]
 80026ea:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d101      	bne.n	80026f4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80026f0:	f7fd bf20 	b.w	8000534 <HAL_IncTick>
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40001000 	.word	0x40001000

080026fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026fc:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fe:	4b0f      	ldr	r3, [pc, #60]	; (800273c <HAL_MspInit+0x40>)
 8002700:	2200      	movs	r2, #0
 8002702:	9200      	str	r2, [sp, #0]
 8002704:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002706:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800270a:	6459      	str	r1, [r3, #68]	; 0x44
 800270c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800270e:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8002712:	9100      	str	r1, [sp, #0]
 8002714:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002716:	9201      	str	r2, [sp, #4]
 8002718:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800271a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800271e:	6419      	str	r1, [r3, #64]	; 0x40
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002726:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002728:	210f      	movs	r1, #15
 800272a:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800272e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002730:	f7fd ff24 	bl	800057c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002734:	b003      	add	sp, #12
 8002736:	f85d fb04 	ldr.w	pc, [sp], #4
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800

08002740 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002740:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002742:	4601      	mov	r1, r0
{
 8002744:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002746:	2200      	movs	r2, #0
 8002748:	2036      	movs	r0, #54	; 0x36
 800274a:	f7fd ff17 	bl	800057c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800274e:	2036      	movs	r0, #54	; 0x36
 8002750:	f7fd ff48 	bl	80005e4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002754:	2500      	movs	r5, #0
 8002756:	4b15      	ldr	r3, [pc, #84]	; (80027ac <HAL_InitTick+0x6c>)
 8002758:	9502      	str	r5, [sp, #8]
 800275a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800275c:	4c14      	ldr	r4, [pc, #80]	; (80027b0 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 800275e:	f042 0210 	orr.w	r2, r2, #16
 8002762:	641a      	str	r2, [r3, #64]	; 0x40
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f003 0310 	and.w	r3, r3, #16
 800276a:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800276c:	a901      	add	r1, sp, #4
 800276e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002770:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002772:	f7fe fa91 	bl	8000c98 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002776:	f7fe fa7f 	bl	8000c78 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 800277a:	4b0e      	ldr	r3, [pc, #56]	; (80027b4 <HAL_InitTick+0x74>)
 800277c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800277e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002782:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002784:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002786:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <HAL_InitTick+0x78>)
 8002788:	fbb0 f0f3 	udiv	r0, r0, r3
 800278c:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 800278e:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002790:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8002792:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002794:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002796:	f7fe fbbb 	bl	8000f10 <HAL_TIM_Base_Init>
 800279a:	b920      	cbnz	r0, 80027a6 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800279c:	4620      	mov	r0, r4
 800279e:	f7fe fa9a 	bl	8000cd6 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80027a2:	b009      	add	sp, #36	; 0x24
 80027a4:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 80027a6:	2001      	movs	r0, #1
 80027a8:	e7fb      	b.n	80027a2 <HAL_InitTick+0x62>
 80027aa:	bf00      	nop
 80027ac:	40023800 	.word	0x40023800
 80027b0:	20003fd0 	.word	0x20003fd0
 80027b4:	40001000 	.word	0x40001000
 80027b8:	000f4240 	.word	0x000f4240

080027bc <NMI_Handler>:
 80027bc:	4770      	bx	lr

080027be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027be:	e7fe      	b.n	80027be <HardFault_Handler>

080027c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027c0:	e7fe      	b.n	80027c0 <MemManage_Handler>

080027c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027c2:	e7fe      	b.n	80027c2 <BusFault_Handler>

080027c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027c4:	e7fe      	b.n	80027c4 <UsageFault_Handler>

080027c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027c6:	4770      	bx	lr

080027c8 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027c8:	4801      	ldr	r0, [pc, #4]	; (80027d0 <TIM6_DAC_IRQHandler+0x8>)
 80027ca:	f7fe ba98 	b.w	8000cfe <HAL_TIM_IRQHandler>
 80027ce:	bf00      	nop
 80027d0:	20003fd0 	.word	0x20003fd0

080027d4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027d4:	490f      	ldr	r1, [pc, #60]	; (8002814 <SystemInit+0x40>)
 80027d6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80027da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80027e2:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <SystemInit+0x44>)
 80027e4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80027e6:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80027e8:	f042 0201 	orr.w	r2, r2, #1
 80027ec:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80027ee:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80027f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027fa:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80027fc:	4a07      	ldr	r2, [pc, #28]	; (800281c <SystemInit+0x48>)
 80027fe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002806:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002808:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800280a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800280e:	608b      	str	r3, [r1, #8]
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	e000ed00 	.word	0xe000ed00
 8002818:	40023800 	.word	0x40023800
 800281c:	24003010 	.word	0x24003010

08002820 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002820:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002858 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002824:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002826:	e003      	b.n	8002830 <LoopCopyDataInit>

08002828 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800282a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800282c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800282e:	3104      	adds	r1, #4

08002830 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002830:	480b      	ldr	r0, [pc, #44]	; (8002860 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002832:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002834:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002836:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002838:	d3f6      	bcc.n	8002828 <CopyDataInit>
  ldr  r2, =_sbss
 800283a:	4a0b      	ldr	r2, [pc, #44]	; (8002868 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800283c:	e002      	b.n	8002844 <LoopFillZerobss>

0800283e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800283e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002840:	f842 3b04 	str.w	r3, [r2], #4

08002844 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002844:	4b09      	ldr	r3, [pc, #36]	; (800286c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002846:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002848:	d3f9      	bcc.n	800283e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800284a:	f7ff ffc3 	bl	80027d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800284e:	f000 f811 	bl	8002874 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002852:	f7ff fe69 	bl	8002528 <main>
  bx  lr    
 8002856:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002858:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800285c:	080029a4 	.word	0x080029a4
  ldr  r0, =_sdata
 8002860:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002864:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002868:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800286c:	20004010 	.word	0x20004010

08002870 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002870:	e7fe      	b.n	8002870 <ADC_IRQHandler>
	...

08002874 <__libc_init_array>:
 8002874:	b570      	push	{r4, r5, r6, lr}
 8002876:	4e0d      	ldr	r6, [pc, #52]	; (80028ac <__libc_init_array+0x38>)
 8002878:	4c0d      	ldr	r4, [pc, #52]	; (80028b0 <__libc_init_array+0x3c>)
 800287a:	1ba4      	subs	r4, r4, r6
 800287c:	10a4      	asrs	r4, r4, #2
 800287e:	2500      	movs	r5, #0
 8002880:	42a5      	cmp	r5, r4
 8002882:	d109      	bne.n	8002898 <__libc_init_array+0x24>
 8002884:	4e0b      	ldr	r6, [pc, #44]	; (80028b4 <__libc_init_array+0x40>)
 8002886:	4c0c      	ldr	r4, [pc, #48]	; (80028b8 <__libc_init_array+0x44>)
 8002888:	f000 f82c 	bl	80028e4 <_init>
 800288c:	1ba4      	subs	r4, r4, r6
 800288e:	10a4      	asrs	r4, r4, #2
 8002890:	2500      	movs	r5, #0
 8002892:	42a5      	cmp	r5, r4
 8002894:	d105      	bne.n	80028a2 <__libc_init_array+0x2e>
 8002896:	bd70      	pop	{r4, r5, r6, pc}
 8002898:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800289c:	4798      	blx	r3
 800289e:	3501      	adds	r5, #1
 80028a0:	e7ee      	b.n	8002880 <__libc_init_array+0xc>
 80028a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028a6:	4798      	blx	r3
 80028a8:	3501      	adds	r5, #1
 80028aa:	e7f2      	b.n	8002892 <__libc_init_array+0x1e>
 80028ac:	0800299c 	.word	0x0800299c
 80028b0:	0800299c 	.word	0x0800299c
 80028b4:	0800299c 	.word	0x0800299c
 80028b8:	080029a0 	.word	0x080029a0

080028bc <memcpy>:
 80028bc:	b510      	push	{r4, lr}
 80028be:	1e43      	subs	r3, r0, #1
 80028c0:	440a      	add	r2, r1
 80028c2:	4291      	cmp	r1, r2
 80028c4:	d100      	bne.n	80028c8 <memcpy+0xc>
 80028c6:	bd10      	pop	{r4, pc}
 80028c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80028d0:	e7f7      	b.n	80028c2 <memcpy+0x6>

080028d2 <memset>:
 80028d2:	4402      	add	r2, r0
 80028d4:	4603      	mov	r3, r0
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d100      	bne.n	80028dc <memset+0xa>
 80028da:	4770      	bx	lr
 80028dc:	f803 1b01 	strb.w	r1, [r3], #1
 80028e0:	e7f9      	b.n	80028d6 <memset+0x4>
	...

080028e4 <_init>:
 80028e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028e6:	bf00      	nop
 80028e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ea:	bc08      	pop	{r3}
 80028ec:	469e      	mov	lr, r3
 80028ee:	4770      	bx	lr

080028f0 <_fini>:
 80028f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f2:	bf00      	nop
 80028f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028f6:	bc08      	pop	{r3}
 80028f8:	469e      	mov	lr, r3
 80028fa:	4770      	bx	lr
