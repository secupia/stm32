
FreeRTOS_Example10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002aa0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08002c50  08002c50  00012c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002d0c  08002d0c  00012d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002d14  08002d14  00012d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002d18  08002d18  00012d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002d1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00003df0  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20003dfc  20003dfc  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001bbc8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003835  00000000  00000000  0003bc04  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00009355  00000000  00000000  0003f439  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d98  00000000  00000000  00048790  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001178  00000000  00000000  00049528  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00007433  00000000  00000000  0004a6a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005502  00000000  00000000  00051ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00056fd5  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000275c  00000000  00000000  00057054  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002c38 	.word	0x08002c38

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	08002c38 	.word	0x08002c38

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b97a 	b.w	80004fc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	468c      	mov	ip, r1
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	9e08      	ldr	r6, [sp, #32]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d151      	bne.n	80002d4 <__udivmoddi4+0xb4>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d96d      	bls.n	8000312 <__udivmoddi4+0xf2>
 8000236:	fab2 fe82 	clz	lr, r2
 800023a:	f1be 0f00 	cmp.w	lr, #0
 800023e:	d00b      	beq.n	8000258 <__udivmoddi4+0x38>
 8000240:	f1ce 0c20 	rsb	ip, lr, #32
 8000244:	fa01 f50e 	lsl.w	r5, r1, lr
 8000248:	fa20 fc0c 	lsr.w	ip, r0, ip
 800024c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000250:	ea4c 0c05 	orr.w	ip, ip, r5
 8000254:	fa00 f40e 	lsl.w	r4, r0, lr
 8000258:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800025c:	0c25      	lsrs	r5, r4, #16
 800025e:	fbbc f8fa 	udiv	r8, ip, sl
 8000262:	fa1f f987 	uxth.w	r9, r7
 8000266:	fb0a cc18 	mls	ip, sl, r8, ip
 800026a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026e:	fb08 f309 	mul.w	r3, r8, r9
 8000272:	42ab      	cmp	r3, r5
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x6c>
 8000276:	19ed      	adds	r5, r5, r7
 8000278:	f108 32ff 	add.w	r2, r8, #4294967295
 800027c:	f080 8123 	bcs.w	80004c6 <__udivmoddi4+0x2a6>
 8000280:	42ab      	cmp	r3, r5
 8000282:	f240 8120 	bls.w	80004c6 <__udivmoddi4+0x2a6>
 8000286:	f1a8 0802 	sub.w	r8, r8, #2
 800028a:	443d      	add	r5, r7
 800028c:	1aed      	subs	r5, r5, r3
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb5 f0fa 	udiv	r0, r5, sl
 8000294:	fb0a 5510 	mls	r5, sl, r0, r5
 8000298:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800029c:	fb00 f909 	mul.w	r9, r0, r9
 80002a0:	45a1      	cmp	r9, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x98>
 80002a4:	19e4      	adds	r4, r4, r7
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 810a 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80002ae:	45a1      	cmp	r9, r4
 80002b0:	f240 8107 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	eba4 0409 	sub.w	r4, r4, r9
 80002bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002c0:	2100      	movs	r1, #0
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d061      	beq.n	800038a <__udivmoddi4+0x16a>
 80002c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ca:	2300      	movs	r3, #0
 80002cc:	6034      	str	r4, [r6, #0]
 80002ce:	6073      	str	r3, [r6, #4]
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xc8>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d054      	beq.n	8000386 <__udivmoddi4+0x166>
 80002dc:	2100      	movs	r1, #0
 80002de:	e886 0021 	stmia.w	r6, {r0, r5}
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	f040 808e 	bne.w	800040e <__udivmoddi4+0x1ee>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xdc>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2d0>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	46ac      	mov	ip, r5
 8000306:	2e00      	cmp	r6, #0
 8000308:	d03f      	beq.n	800038a <__udivmoddi4+0x16a>
 800030a:	e886 1010 	stmia.w	r6, {r4, ip}
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	b912      	cbnz	r2, 800031a <__udivmoddi4+0xfa>
 8000314:	2701      	movs	r7, #1
 8000316:	fbb7 f7f2 	udiv	r7, r7, r2
 800031a:	fab7 fe87 	clz	lr, r7
 800031e:	f1be 0f00 	cmp.w	lr, #0
 8000322:	d134      	bne.n	800038e <__udivmoddi4+0x16e>
 8000324:	1beb      	subs	r3, r5, r7
 8000326:	0c3a      	lsrs	r2, r7, #16
 8000328:	fa1f fc87 	uxth.w	ip, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000332:	0c25      	lsrs	r5, r4, #16
 8000334:	fb02 3318 	mls	r3, r2, r8, r3
 8000338:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800033c:	fb0c f308 	mul.w	r3, ip, r8
 8000340:	42ab      	cmp	r3, r5
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x134>
 8000344:	19ed      	adds	r5, r5, r7
 8000346:	f108 30ff 	add.w	r0, r8, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x132>
 800034c:	42ab      	cmp	r3, r5
 800034e:	f200 80d1 	bhi.w	80004f4 <__udivmoddi4+0x2d4>
 8000352:	4680      	mov	r8, r0
 8000354:	1aed      	subs	r5, r5, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb5 f0f2 	udiv	r0, r5, r2
 800035c:	fb02 5510 	mls	r5, r2, r0, r5
 8000360:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000364:	fb0c fc00 	mul.w	ip, ip, r0
 8000368:	45a4      	cmp	ip, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x15c>
 800036c:	19e4      	adds	r4, r4, r7
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x15a>
 8000374:	45a4      	cmp	ip, r4
 8000376:	f200 80b8 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 040c 	sub.w	r4, r4, ip
 8000380:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000384:	e79d      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000386:	4631      	mov	r1, r6
 8000388:	4630      	mov	r0, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	f1ce 0420 	rsb	r4, lr, #32
 8000392:	fa05 f30e 	lsl.w	r3, r5, lr
 8000396:	fa07 f70e 	lsl.w	r7, r7, lr
 800039a:	fa20 f804 	lsr.w	r8, r0, r4
 800039e:	0c3a      	lsrs	r2, r7, #16
 80003a0:	fa25 f404 	lsr.w	r4, r5, r4
 80003a4:	ea48 0803 	orr.w	r8, r8, r3
 80003a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003b0:	fb02 4411 	mls	r4, r2, r1, r4
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003bc:	fb01 f30c 	mul.w	r3, r1, ip
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x1bc>
 80003c8:	19ed      	adds	r5, r5, r7
 80003ca:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ce:	f080 808a 	bcs.w	80004e6 <__udivmoddi4+0x2c6>
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	f240 8087 	bls.w	80004e6 <__udivmoddi4+0x2c6>
 80003d8:	3902      	subs	r1, #2
 80003da:	443d      	add	r5, r7
 80003dc:	1aeb      	subs	r3, r5, r3
 80003de:	fa1f f588 	uxth.w	r5, r8
 80003e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ee:	fb00 f30c 	mul.w	r3, r0, ip
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1e6>
 80003f6:	19ed      	adds	r5, r5, r7
 80003f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fc:	d26f      	bcs.n	80004de <__udivmoddi4+0x2be>
 80003fe:	42ab      	cmp	r3, r5
 8000400:	d96d      	bls.n	80004de <__udivmoddi4+0x2be>
 8000402:	3802      	subs	r0, #2
 8000404:	443d      	add	r5, r7
 8000406:	1aeb      	subs	r3, r5, r3
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	e78f      	b.n	800032e <__udivmoddi4+0x10e>
 800040e:	f1c1 0720 	rsb	r7, r1, #32
 8000412:	fa22 f807 	lsr.w	r8, r2, r7
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 f401 	lsl.w	r4, r5, r1
 800041c:	ea48 0303 	orr.w	r3, r8, r3
 8000420:	fa20 fe07 	lsr.w	lr, r0, r7
 8000424:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000428:	40fd      	lsrs	r5, r7
 800042a:	ea4e 0e04 	orr.w	lr, lr, r4
 800042e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000432:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000436:	fb0c 5519 	mls	r5, ip, r9, r5
 800043a:	fa1f f883 	uxth.w	r8, r3
 800043e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000442:	fb09 f408 	mul.w	r4, r9, r8
 8000446:	42ac      	cmp	r4, r5
 8000448:	fa02 f201 	lsl.w	r2, r2, r1
 800044c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x244>
 8000452:	18ed      	adds	r5, r5, r3
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295
 8000458:	d243      	bcs.n	80004e2 <__udivmoddi4+0x2c2>
 800045a:	42ac      	cmp	r4, r5
 800045c:	d941      	bls.n	80004e2 <__udivmoddi4+0x2c2>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	441d      	add	r5, r3
 8000464:	1b2d      	subs	r5, r5, r4
 8000466:	fa1f fe8e 	uxth.w	lr, lr
 800046a:	fbb5 f0fc 	udiv	r0, r5, ip
 800046e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000472:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45a0      	cmp	r8, r4
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x26e>
 800047e:	18e4      	adds	r4, r4, r3
 8000480:	f100 35ff 	add.w	r5, r0, #4294967295
 8000484:	d229      	bcs.n	80004da <__udivmoddi4+0x2ba>
 8000486:	45a0      	cmp	r8, r4
 8000488:	d927      	bls.n	80004da <__udivmoddi4+0x2ba>
 800048a:	3802      	subs	r0, #2
 800048c:	441c      	add	r4, r3
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba4 0408 	sub.w	r4, r4, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454c      	cmp	r4, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	464d      	mov	r5, r9
 80004a0:	d315      	bcc.n	80004ce <__udivmoddi4+0x2ae>
 80004a2:	d012      	beq.n	80004ca <__udivmoddi4+0x2aa>
 80004a4:	b156      	cbz	r6, 80004bc <__udivmoddi4+0x29c>
 80004a6:	ebba 030e 	subs.w	r3, sl, lr
 80004aa:	eb64 0405 	sbc.w	r4, r4, r5
 80004ae:	fa04 f707 	lsl.w	r7, r4, r7
 80004b2:	40cb      	lsrs	r3, r1
 80004b4:	431f      	orrs	r7, r3
 80004b6:	40cc      	lsrs	r4, r1
 80004b8:	6037      	str	r7, [r6, #0]
 80004ba:	6074      	str	r4, [r6, #4]
 80004bc:	2100      	movs	r1, #0
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	4618      	mov	r0, r3
 80004c4:	e6f8      	b.n	80002b8 <__udivmoddi4+0x98>
 80004c6:	4690      	mov	r8, r2
 80004c8:	e6e0      	b.n	800028c <__udivmoddi4+0x6c>
 80004ca:	45c2      	cmp	sl, r8
 80004cc:	d2ea      	bcs.n	80004a4 <__udivmoddi4+0x284>
 80004ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d2:	eb69 0503 	sbc.w	r5, r9, r3
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7e4      	b.n	80004a4 <__udivmoddi4+0x284>
 80004da:	4628      	mov	r0, r5
 80004dc:	e7d7      	b.n	800048e <__udivmoddi4+0x26e>
 80004de:	4640      	mov	r0, r8
 80004e0:	e791      	b.n	8000406 <__udivmoddi4+0x1e6>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e7be      	b.n	8000464 <__udivmoddi4+0x244>
 80004e6:	4601      	mov	r1, r0
 80004e8:	e778      	b.n	80003dc <__udivmoddi4+0x1bc>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	e745      	b.n	800037c <__udivmoddi4+0x15c>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xe6>
 80004f4:	f1a8 0802 	sub.w	r8, r8, #2
 80004f8:	443d      	add	r5, r7
 80004fa:	e72b      	b.n	8000354 <__udivmoddi4+0x134>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000500:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <HAL_Init+0x30>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800050a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000512:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800051a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051c:	2003      	movs	r0, #3
 800051e:	f000 f81b 	bl	8000558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000522:	2000      	movs	r0, #0
 8000524:	f002 fab6 	bl	8002a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000528:	f002 fa5a 	bl	80029e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800052c:	2000      	movs	r0, #0
 800052e:	bd08      	pop	{r3, pc}
 8000530:	40023c00 	.word	0x40023c00

08000534 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000534:	4a03      	ldr	r2, [pc, #12]	; (8000544 <HAL_IncTick+0x10>)
 8000536:	4b04      	ldr	r3, [pc, #16]	; (8000548 <HAL_IncTick+0x14>)
 8000538:	6811      	ldr	r1, [r2, #0]
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	440b      	add	r3, r1
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20003d74 	.word	0x20003d74
 8000548:	20000000 	.word	0x20000000

0800054c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800054c:	4b01      	ldr	r3, [pc, #4]	; (8000554 <HAL_GetTick+0x8>)
 800054e:	6818      	ldr	r0, [r3, #0]
}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20003d74 	.word	0x20003d74

08000558 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000558:	4a07      	ldr	r2, [pc, #28]	; (8000578 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800055a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800055c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000560:	041b      	lsls	r3, r3, #16
 8000562:	0c1b      	lsrs	r3, r3, #16
 8000564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000568:	0200      	lsls	r0, r0, #8
 800056a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000572:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000574:	60d3      	str	r3, [r2, #12]
 8000576:	4770      	bx	lr
 8000578:	e000ed00 	.word	0xe000ed00

0800057c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800057c:	4b17      	ldr	r3, [pc, #92]	; (80005dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	68dc      	ldr	r4, [r3, #12]
 8000582:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000586:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800058a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800058c:	2b04      	cmp	r3, #4
 800058e:	bf28      	it	cs
 8000590:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000592:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000594:	f04f 0501 	mov.w	r5, #1
 8000598:	fa05 f303 	lsl.w	r3, r5, r3
 800059c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a0:	bf8c      	ite	hi
 80005a2:	3c03      	subhi	r4, #3
 80005a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a6:	4019      	ands	r1, r3
 80005a8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005aa:	fa05 f404 	lsl.w	r4, r5, r4
 80005ae:	3c01      	subs	r4, #1
 80005b0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b4:	ea42 0201 	orr.w	r2, r2, r1
 80005b8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005bc:	bfaf      	iteee	ge
 80005be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c2:	f000 000f 	andlt.w	r0, r0, #15
 80005c6:	4b06      	ldrlt	r3, [pc, #24]	; (80005e0 <HAL_NVIC_SetPriority+0x64>)
 80005c8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ca:	bfa5      	ittet	ge
 80005cc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005d0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	bf00      	nop
 80005dc:	e000ed00 	.word	0xe000ed00
 80005e0:	e000ed14 	.word	0xe000ed14

080005e4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005e4:	0942      	lsrs	r2, r0, #5
 80005e6:	2301      	movs	r3, #1
 80005e8:	f000 001f 	and.w	r0, r0, #31
 80005ec:	fa03 f000 	lsl.w	r0, r3, r0
 80005f0:	4b01      	ldr	r3, [pc, #4]	; (80005f8 <HAL_NVIC_EnableIRQ+0x14>)
 80005f2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100

080005fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000600:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000602:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000604:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 80007cc <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000608:	4a6e      	ldr	r2, [pc, #440]	; (80007c4 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800060a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80007d0 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800060e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000610:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000612:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000616:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000618:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800061c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000620:	45b6      	cmp	lr, r6
 8000622:	f040 80b6 	bne.w	8000792 <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000626:	684c      	ldr	r4, [r1, #4]
 8000628:	f024 0710 	bic.w	r7, r4, #16
 800062c:	2f02      	cmp	r7, #2
 800062e:	d116      	bne.n	800065e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000630:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000634:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000638:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800063c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000640:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000644:	f04f 0c0f 	mov.w	ip, #15
 8000648:	fa0c fc0b 	lsl.w	ip, ip, fp
 800064c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000650:	690d      	ldr	r5, [r1, #16]
 8000652:	fa05 f50b 	lsl.w	r5, r5, fp
 8000656:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800065a:	f8ca 5020 	str.w	r5, [sl, #32]
 800065e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000662:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000664:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000668:	fa05 f50a 	lsl.w	r5, r5, sl
 800066c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800066e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000672:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000676:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800067a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800067c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000680:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000682:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000686:	d811      	bhi.n	80006ac <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000688:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800068a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800068e:	68cf      	ldr	r7, [r1, #12]
 8000690:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000694:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000698:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800069a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800069c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006a0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80006a4:	409f      	lsls	r7, r3
 80006a6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80006aa:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80006ac:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006ae:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006b0:	688f      	ldr	r7, [r1, #8]
 80006b2:	fa07 f70a 	lsl.w	r7, r7, sl
 80006b6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80006b8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006ba:	00e5      	lsls	r5, r4, #3
 80006bc:	d569      	bpl.n	8000792 <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006be:	f04f 0b00 	mov.w	fp, #0
 80006c2:	f8cd b00c 	str.w	fp, [sp, #12]
 80006c6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006ca:	4d3f      	ldr	r5, [pc, #252]	; (80007c8 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006cc:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80006d0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80006d4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80006d8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80006dc:	9703      	str	r7, [sp, #12]
 80006de:	9f03      	ldr	r7, [sp, #12]
 80006e0:	f023 0703 	bic.w	r7, r3, #3
 80006e4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80006e8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006ec:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80006f0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006f4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80006f8:	f04f 0e0f 	mov.w	lr, #15
 80006fc:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000700:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000702:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000706:	d04b      	beq.n	80007a0 <HAL_GPIO_Init+0x1a4>
 8000708:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800070c:	42a8      	cmp	r0, r5
 800070e:	d049      	beq.n	80007a4 <HAL_GPIO_Init+0x1a8>
 8000710:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000714:	42a8      	cmp	r0, r5
 8000716:	d047      	beq.n	80007a8 <HAL_GPIO_Init+0x1ac>
 8000718:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800071c:	42a8      	cmp	r0, r5
 800071e:	d045      	beq.n	80007ac <HAL_GPIO_Init+0x1b0>
 8000720:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000724:	42a8      	cmp	r0, r5
 8000726:	d043      	beq.n	80007b0 <HAL_GPIO_Init+0x1b4>
 8000728:	4548      	cmp	r0, r9
 800072a:	d043      	beq.n	80007b4 <HAL_GPIO_Init+0x1b8>
 800072c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000730:	42a8      	cmp	r0, r5
 8000732:	d041      	beq.n	80007b8 <HAL_GPIO_Init+0x1bc>
 8000734:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000738:	42a8      	cmp	r0, r5
 800073a:	d03f      	beq.n	80007bc <HAL_GPIO_Init+0x1c0>
 800073c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000740:	42a8      	cmp	r0, r5
 8000742:	d03d      	beq.n	80007c0 <HAL_GPIO_Init+0x1c4>
 8000744:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000748:	42a8      	cmp	r0, r5
 800074a:	bf14      	ite	ne
 800074c:	250a      	movne	r5, #10
 800074e:	2509      	moveq	r5, #9
 8000750:	fa05 f50c 	lsl.w	r5, r5, ip
 8000754:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000758:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800075a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800075c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800075e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000762:	bf0c      	ite	eq
 8000764:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000766:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000768:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800076a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800076c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000770:	bf0c      	ite	eq
 8000772:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000774:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000776:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000778:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800077a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800077e:	bf0c      	ite	eq
 8000780:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000782:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000784:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000786:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000788:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800078a:	bf54      	ite	pl
 800078c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800078e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000790:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000792:	3301      	adds	r3, #1
 8000794:	2b10      	cmp	r3, #16
 8000796:	f47f af3c 	bne.w	8000612 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800079a:	b005      	add	sp, #20
 800079c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007a0:	465d      	mov	r5, fp
 80007a2:	e7d5      	b.n	8000750 <HAL_GPIO_Init+0x154>
 80007a4:	2501      	movs	r5, #1
 80007a6:	e7d3      	b.n	8000750 <HAL_GPIO_Init+0x154>
 80007a8:	2502      	movs	r5, #2
 80007aa:	e7d1      	b.n	8000750 <HAL_GPIO_Init+0x154>
 80007ac:	2503      	movs	r5, #3
 80007ae:	e7cf      	b.n	8000750 <HAL_GPIO_Init+0x154>
 80007b0:	2504      	movs	r5, #4
 80007b2:	e7cd      	b.n	8000750 <HAL_GPIO_Init+0x154>
 80007b4:	2505      	movs	r5, #5
 80007b6:	e7cb      	b.n	8000750 <HAL_GPIO_Init+0x154>
 80007b8:	2506      	movs	r5, #6
 80007ba:	e7c9      	b.n	8000750 <HAL_GPIO_Init+0x154>
 80007bc:	2507      	movs	r5, #7
 80007be:	e7c7      	b.n	8000750 <HAL_GPIO_Init+0x154>
 80007c0:	2508      	movs	r5, #8
 80007c2:	e7c5      	b.n	8000750 <HAL_GPIO_Init+0x154>
 80007c4:	40013c00 	.word	0x40013c00
 80007c8:	40020000 	.word	0x40020000
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40021400 	.word	0x40021400

080007d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007d4:	b10a      	cbz	r2, 80007da <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007d6:	6181      	str	r1, [r0, #24]
 80007d8:	4770      	bx	lr
 80007da:	0409      	lsls	r1, r1, #16
 80007dc:	e7fb      	b.n	80007d6 <HAL_GPIO_WritePin+0x2>
	...

080007e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80007e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	9301      	str	r3, [sp, #4]
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80007e8:	4c18      	ldr	r4, [pc, #96]	; (800084c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80007f0:	641a      	str	r2, [r3, #64]	; 0x40
 80007f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <HAL_PWREx_EnableOverDrive+0x70>)
 80007fe:	2201      	movs	r2, #1
 8000800:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000802:	f7ff fea3 	bl	800054c <HAL_GetTick>
 8000806:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000808:	6863      	ldr	r3, [r4, #4]
 800080a:	03da      	lsls	r2, r3, #15
 800080c:	d50b      	bpl.n	8000826 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000810:	4c0e      	ldr	r4, [pc, #56]	; (800084c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000812:	2201      	movs	r2, #1
 8000814:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000816:	f7ff fe99 	bl	800054c <HAL_GetTick>
 800081a:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800081c:	6863      	ldr	r3, [r4, #4]
 800081e:	039b      	lsls	r3, r3, #14
 8000820:	d50a      	bpl.n	8000838 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000822:	2000      	movs	r0, #0
 8000824:	e006      	b.n	8000834 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000826:	f7ff fe91 	bl	800054c <HAL_GetTick>
 800082a:	1b40      	subs	r0, r0, r5
 800082c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000830:	d9ea      	bls.n	8000808 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8000832:	2003      	movs	r0, #3
}
 8000834:	b003      	add	sp, #12
 8000836:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000838:	f7ff fe88 	bl	800054c <HAL_GetTick>
 800083c:	1b40      	subs	r0, r0, r5
 800083e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000842:	d9eb      	bls.n	800081c <HAL_PWREx_EnableOverDrive+0x3c>
 8000844:	e7f5      	b.n	8000832 <HAL_PWREx_EnableOverDrive+0x52>
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800
 800084c:	40007000 	.word	0x40007000
 8000850:	420e0040 	.word	0x420e0040
 8000854:	420e0044 	.word	0x420e0044

08000858 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000858:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800085c:	4604      	mov	r4, r0
 800085e:	b918      	cbnz	r0, 8000868 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000860:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000862:	b002      	add	sp, #8
 8000864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000868:	6803      	ldr	r3, [r0, #0]
 800086a:	07dd      	lsls	r5, r3, #31
 800086c:	d410      	bmi.n	8000890 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800086e:	6823      	ldr	r3, [r4, #0]
 8000870:	0798      	lsls	r0, r3, #30
 8000872:	d458      	bmi.n	8000926 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000874:	6823      	ldr	r3, [r4, #0]
 8000876:	071a      	lsls	r2, r3, #28
 8000878:	f100 809a 	bmi.w	80009b0 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800087c:	6823      	ldr	r3, [r4, #0]
 800087e:	075b      	lsls	r3, r3, #29
 8000880:	f100 80b8 	bmi.w	80009f4 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000884:	69a2      	ldr	r2, [r4, #24]
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8119 	bne.w	8000abe <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 800088c:	2000      	movs	r0, #0
 800088e:	e7e8      	b.n	8000862 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000890:	4ba6      	ldr	r3, [pc, #664]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
 8000892:	689a      	ldr	r2, [r3, #8]
 8000894:	f002 020c 	and.w	r2, r2, #12
 8000898:	2a04      	cmp	r2, #4
 800089a:	d007      	beq.n	80008ac <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800089c:	689a      	ldr	r2, [r3, #8]
 800089e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008a2:	2a08      	cmp	r2, #8
 80008a4:	d10a      	bne.n	80008bc <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	0259      	lsls	r1, r3, #9
 80008aa:	d507      	bpl.n	80008bc <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008ac:	4b9f      	ldr	r3, [pc, #636]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	039a      	lsls	r2, r3, #14
 80008b2:	d5dc      	bpl.n	800086e <HAL_RCC_OscConfig+0x16>
 80008b4:	6863      	ldr	r3, [r4, #4]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1d9      	bne.n	800086e <HAL_RCC_OscConfig+0x16>
 80008ba:	e7d1      	b.n	8000860 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008bc:	6863      	ldr	r3, [r4, #4]
 80008be:	4d9b      	ldr	r5, [pc, #620]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
 80008c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008c4:	d111      	bne.n	80008ea <HAL_RCC_OscConfig+0x92>
 80008c6:	682b      	ldr	r3, [r5, #0]
 80008c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008cc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008ce:	f7ff fe3d 	bl	800054c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008d2:	4d96      	ldr	r5, [pc, #600]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80008d4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008d6:	682b      	ldr	r3, [r5, #0]
 80008d8:	039b      	lsls	r3, r3, #14
 80008da:	d4c8      	bmi.n	800086e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008dc:	f7ff fe36 	bl	800054c <HAL_GetTick>
 80008e0:	1b80      	subs	r0, r0, r6
 80008e2:	2864      	cmp	r0, #100	; 0x64
 80008e4:	d9f7      	bls.n	80008d6 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80008e6:	2003      	movs	r0, #3
 80008e8:	e7bb      	b.n	8000862 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008ee:	d104      	bne.n	80008fa <HAL_RCC_OscConfig+0xa2>
 80008f0:	682b      	ldr	r3, [r5, #0]
 80008f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008f6:	602b      	str	r3, [r5, #0]
 80008f8:	e7e5      	b.n	80008c6 <HAL_RCC_OscConfig+0x6e>
 80008fa:	682a      	ldr	r2, [r5, #0]
 80008fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000900:	602a      	str	r2, [r5, #0]
 8000902:	682a      	ldr	r2, [r5, #0]
 8000904:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000908:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800090a:	2b00      	cmp	r3, #0
 800090c:	d1df      	bne.n	80008ce <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800090e:	f7ff fe1d 	bl	800054c <HAL_GetTick>
 8000912:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000914:	682b      	ldr	r3, [r5, #0]
 8000916:	039f      	lsls	r7, r3, #14
 8000918:	d5a9      	bpl.n	800086e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800091a:	f7ff fe17 	bl	800054c <HAL_GetTick>
 800091e:	1b80      	subs	r0, r0, r6
 8000920:	2864      	cmp	r0, #100	; 0x64
 8000922:	d9f7      	bls.n	8000914 <HAL_RCC_OscConfig+0xbc>
 8000924:	e7df      	b.n	80008e6 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000926:	4b81      	ldr	r3, [pc, #516]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
 8000928:	689a      	ldr	r2, [r3, #8]
 800092a:	f012 0f0c 	tst.w	r2, #12
 800092e:	d007      	beq.n	8000940 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000930:	689a      	ldr	r2, [r3, #8]
 8000932:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000936:	2a08      	cmp	r2, #8
 8000938:	d111      	bne.n	800095e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	025e      	lsls	r6, r3, #9
 800093e:	d40e      	bmi.n	800095e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000940:	4b7a      	ldr	r3, [pc, #488]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	0795      	lsls	r5, r2, #30
 8000946:	d502      	bpl.n	800094e <HAL_RCC_OscConfig+0xf6>
 8000948:	68e2      	ldr	r2, [r4, #12]
 800094a:	2a01      	cmp	r2, #1
 800094c:	d188      	bne.n	8000860 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	6921      	ldr	r1, [r4, #16]
 8000952:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000956:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800095a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800095c:	e78a      	b.n	8000874 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800095e:	68e2      	ldr	r2, [r4, #12]
 8000960:	4b73      	ldr	r3, [pc, #460]	; (8000b30 <HAL_RCC_OscConfig+0x2d8>)
 8000962:	b1b2      	cbz	r2, 8000992 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000964:	2201      	movs	r2, #1
 8000966:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000968:	f7ff fdf0 	bl	800054c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800096c:	4d6f      	ldr	r5, [pc, #444]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800096e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000970:	682b      	ldr	r3, [r5, #0]
 8000972:	0798      	lsls	r0, r3, #30
 8000974:	d507      	bpl.n	8000986 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000976:	682b      	ldr	r3, [r5, #0]
 8000978:	6922      	ldr	r2, [r4, #16]
 800097a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800097e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000982:	602b      	str	r3, [r5, #0]
 8000984:	e776      	b.n	8000874 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000986:	f7ff fde1 	bl	800054c <HAL_GetTick>
 800098a:	1b80      	subs	r0, r0, r6
 800098c:	2802      	cmp	r0, #2
 800098e:	d9ef      	bls.n	8000970 <HAL_RCC_OscConfig+0x118>
 8000990:	e7a9      	b.n	80008e6 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000992:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000994:	f7ff fdda 	bl	800054c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000998:	4d64      	ldr	r5, [pc, #400]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800099a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800099c:	682b      	ldr	r3, [r5, #0]
 800099e:	0799      	lsls	r1, r3, #30
 80009a0:	f57f af68 	bpl.w	8000874 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009a4:	f7ff fdd2 	bl	800054c <HAL_GetTick>
 80009a8:	1b80      	subs	r0, r0, r6
 80009aa:	2802      	cmp	r0, #2
 80009ac:	d9f6      	bls.n	800099c <HAL_RCC_OscConfig+0x144>
 80009ae:	e79a      	b.n	80008e6 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009b0:	6962      	ldr	r2, [r4, #20]
 80009b2:	4b60      	ldr	r3, [pc, #384]	; (8000b34 <HAL_RCC_OscConfig+0x2dc>)
 80009b4:	b17a      	cbz	r2, 80009d6 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80009b6:	2201      	movs	r2, #1
 80009b8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009ba:	f7ff fdc7 	bl	800054c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009be:	4d5b      	ldr	r5, [pc, #364]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80009c0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009c2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009c4:	079f      	lsls	r7, r3, #30
 80009c6:	f53f af59 	bmi.w	800087c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009ca:	f7ff fdbf 	bl	800054c <HAL_GetTick>
 80009ce:	1b80      	subs	r0, r0, r6
 80009d0:	2802      	cmp	r0, #2
 80009d2:	d9f6      	bls.n	80009c2 <HAL_RCC_OscConfig+0x16a>
 80009d4:	e787      	b.n	80008e6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80009d6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009d8:	f7ff fdb8 	bl	800054c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009dc:	4d53      	ldr	r5, [pc, #332]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80009de:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009e0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009e2:	0798      	lsls	r0, r3, #30
 80009e4:	f57f af4a 	bpl.w	800087c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009e8:	f7ff fdb0 	bl	800054c <HAL_GetTick>
 80009ec:	1b80      	subs	r0, r0, r6
 80009ee:	2802      	cmp	r0, #2
 80009f0:	d9f6      	bls.n	80009e0 <HAL_RCC_OscConfig+0x188>
 80009f2:	e778      	b.n	80008e6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009f4:	4b4d      	ldr	r3, [pc, #308]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
 80009f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009f8:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80009fc:	d128      	bne.n	8000a50 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	9201      	str	r2, [sp, #4]
 8000a00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a02:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a06:	641a      	str	r2, [r3, #64]	; 0x40
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	9301      	str	r3, [sp, #4]
 8000a10:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a12:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a14:	4d48      	ldr	r5, [pc, #288]	; (8000b38 <HAL_RCC_OscConfig+0x2e0>)
 8000a16:	682b      	ldr	r3, [r5, #0]
 8000a18:	05d9      	lsls	r1, r3, #23
 8000a1a:	d51b      	bpl.n	8000a54 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a1c:	68a3      	ldr	r3, [r4, #8]
 8000a1e:	4d43      	ldr	r5, [pc, #268]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d127      	bne.n	8000a74 <HAL_RCC_OscConfig+0x21c>
 8000a24:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000a2c:	f7ff fd8e 	bl	800054c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a30:	4d3e      	ldr	r5, [pc, #248]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a32:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a34:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a38:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a3a:	079b      	lsls	r3, r3, #30
 8000a3c:	d539      	bpl.n	8000ab2 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000a3e:	2e00      	cmp	r6, #0
 8000a40:	f43f af20 	beq.w	8000884 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a44:	4a39      	ldr	r2, [pc, #228]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
 8000a46:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4e:	e719      	b.n	8000884 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000a50:	2600      	movs	r6, #0
 8000a52:	e7df      	b.n	8000a14 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a54:	682b      	ldr	r3, [r5, #0]
 8000a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000a5c:	f7ff fd76 	bl	800054c <HAL_GetTick>
 8000a60:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a62:	682b      	ldr	r3, [r5, #0]
 8000a64:	05da      	lsls	r2, r3, #23
 8000a66:	d4d9      	bmi.n	8000a1c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a68:	f7ff fd70 	bl	800054c <HAL_GetTick>
 8000a6c:	1bc0      	subs	r0, r0, r7
 8000a6e:	2802      	cmp	r0, #2
 8000a70:	d9f7      	bls.n	8000a62 <HAL_RCC_OscConfig+0x20a>
 8000a72:	e738      	b.n	80008e6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a74:	2b05      	cmp	r3, #5
 8000a76:	d104      	bne.n	8000a82 <HAL_RCC_OscConfig+0x22a>
 8000a78:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a7a:	f043 0304 	orr.w	r3, r3, #4
 8000a7e:	672b      	str	r3, [r5, #112]	; 0x70
 8000a80:	e7d0      	b.n	8000a24 <HAL_RCC_OscConfig+0x1cc>
 8000a82:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a84:	f022 0201 	bic.w	r2, r2, #1
 8000a88:	672a      	str	r2, [r5, #112]	; 0x70
 8000a8a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a8c:	f022 0204 	bic.w	r2, r2, #4
 8000a90:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d1ca      	bne.n	8000a2c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000a96:	f7ff fd59 	bl	800054c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a9a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a9e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000aa0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aa2:	0798      	lsls	r0, r3, #30
 8000aa4:	d5cb      	bpl.n	8000a3e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aa6:	f7ff fd51 	bl	800054c <HAL_GetTick>
 8000aaa:	1bc0      	subs	r0, r0, r7
 8000aac:	4540      	cmp	r0, r8
 8000aae:	d9f7      	bls.n	8000aa0 <HAL_RCC_OscConfig+0x248>
 8000ab0:	e719      	b.n	80008e6 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ab2:	f7ff fd4b 	bl	800054c <HAL_GetTick>
 8000ab6:	1bc0      	subs	r0, r0, r7
 8000ab8:	4540      	cmp	r0, r8
 8000aba:	d9bd      	bls.n	8000a38 <HAL_RCC_OscConfig+0x1e0>
 8000abc:	e713      	b.n	80008e6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000abe:	4d1b      	ldr	r5, [pc, #108]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
 8000ac0:	68ab      	ldr	r3, [r5, #8]
 8000ac2:	f003 030c 	and.w	r3, r3, #12
 8000ac6:	2b08      	cmp	r3, #8
 8000ac8:	f43f aeca 	beq.w	8000860 <HAL_RCC_OscConfig+0x8>
 8000acc:	4e1b      	ldr	r6, [pc, #108]	; (8000b3c <HAL_RCC_OscConfig+0x2e4>)
 8000ace:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ad0:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000ad2:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ad4:	d134      	bne.n	8000b40 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000ad6:	f7ff fd39 	bl	800054c <HAL_GetTick>
 8000ada:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000adc:	682b      	ldr	r3, [r5, #0]
 8000ade:	0199      	lsls	r1, r3, #6
 8000ae0:	d41e      	bmi.n	8000b20 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ae2:	6a22      	ldr	r2, [r4, #32]
 8000ae4:	69e3      	ldr	r3, [r4, #28]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000aea:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000aee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000af0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000af4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000af8:	0852      	lsrs	r2, r2, #1
 8000afa:	3a01      	subs	r2, #1
 8000afc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b00:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b02:	2301      	movs	r3, #1
 8000b04:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b06:	f7ff fd21 	bl	800054c <HAL_GetTick>
 8000b0a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b0c:	6823      	ldr	r3, [r4, #0]
 8000b0e:	019a      	lsls	r2, r3, #6
 8000b10:	f53f aebc 	bmi.w	800088c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b14:	f7ff fd1a 	bl	800054c <HAL_GetTick>
 8000b18:	1b40      	subs	r0, r0, r5
 8000b1a:	2802      	cmp	r0, #2
 8000b1c:	d9f6      	bls.n	8000b0c <HAL_RCC_OscConfig+0x2b4>
 8000b1e:	e6e2      	b.n	80008e6 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b20:	f7ff fd14 	bl	800054c <HAL_GetTick>
 8000b24:	1bc0      	subs	r0, r0, r7
 8000b26:	2802      	cmp	r0, #2
 8000b28:	d9d8      	bls.n	8000adc <HAL_RCC_OscConfig+0x284>
 8000b2a:	e6dc      	b.n	80008e6 <HAL_RCC_OscConfig+0x8e>
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	42470000 	.word	0x42470000
 8000b34:	42470e80 	.word	0x42470e80
 8000b38:	40007000 	.word	0x40007000
 8000b3c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000b40:	f7ff fd04 	bl	800054c <HAL_GetTick>
 8000b44:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b46:	682b      	ldr	r3, [r5, #0]
 8000b48:	019b      	lsls	r3, r3, #6
 8000b4a:	f57f ae9f 	bpl.w	800088c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b4e:	f7ff fcfd 	bl	800054c <HAL_GetTick>
 8000b52:	1b00      	subs	r0, r0, r4
 8000b54:	2802      	cmp	r0, #2
 8000b56:	d9f6      	bls.n	8000b46 <HAL_RCC_OscConfig+0x2ee>
 8000b58:	e6c5      	b.n	80008e6 <HAL_RCC_OscConfig+0x8e>
 8000b5a:	bf00      	nop

08000b5c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b5c:	4913      	ldr	r1, [pc, #76]	; (8000bac <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000b5e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b60:	688b      	ldr	r3, [r1, #8]
 8000b62:	f003 030c 	and.w	r3, r3, #12
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	d003      	beq.n	8000b72 <HAL_RCC_GetSysClockFreq+0x16>
 8000b6a:	2b08      	cmp	r3, #8
 8000b6c:	d003      	beq.n	8000b76 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b6e:	4810      	ldr	r0, [pc, #64]	; (8000bb0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b70:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000b72:	4810      	ldr	r0, [pc, #64]	; (8000bb4 <HAL_RCC_GetSysClockFreq+0x58>)
 8000b74:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b76:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b78:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b7a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b7c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b80:	bf14      	ite	ne
 8000b82:	480c      	ldrne	r0, [pc, #48]	; (8000bb4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b84:	480a      	ldreq	r0, [pc, #40]	; (8000bb0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b86:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000b8a:	bf18      	it	ne
 8000b8c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b8e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b92:	fba1 0100 	umull	r0, r1, r1, r0
 8000b96:	f7ff fb2b 	bl	80001f0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000b9a:	4b04      	ldr	r3, [pc, #16]	; (8000bac <HAL_RCC_GetSysClockFreq+0x50>)
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000ba6:	fbb0 f0f3 	udiv	r0, r0, r3
 8000baa:	bd08      	pop	{r3, pc}
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	00f42400 	.word	0x00f42400
 8000bb4:	007a1200 	.word	0x007a1200

08000bb8 <HAL_RCC_ClockConfig>:
{
 8000bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bbc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	b910      	cbnz	r0, 8000bc8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000bc8:	4b44      	ldr	r3, [pc, #272]	; (8000cdc <HAL_RCC_ClockConfig+0x124>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	f002 020f 	and.w	r2, r2, #15
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	d328      	bcc.n	8000c26 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bd4:	6821      	ldr	r1, [r4, #0]
 8000bd6:	078f      	lsls	r7, r1, #30
 8000bd8:	d42d      	bmi.n	8000c36 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bda:	07c8      	lsls	r0, r1, #31
 8000bdc:	d440      	bmi.n	8000c60 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000bde:	4b3f      	ldr	r3, [pc, #252]	; (8000cdc <HAL_RCC_ClockConfig+0x124>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	f002 020f 	and.w	r2, r2, #15
 8000be6:	4295      	cmp	r5, r2
 8000be8:	d366      	bcc.n	8000cb8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bea:	6822      	ldr	r2, [r4, #0]
 8000bec:	0751      	lsls	r1, r2, #29
 8000bee:	d46c      	bmi.n	8000cca <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bf0:	0713      	lsls	r3, r2, #28
 8000bf2:	d507      	bpl.n	8000c04 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000bf4:	4a3a      	ldr	r2, [pc, #232]	; (8000ce0 <HAL_RCC_ClockConfig+0x128>)
 8000bf6:	6921      	ldr	r1, [r4, #16]
 8000bf8:	6893      	ldr	r3, [r2, #8]
 8000bfa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000bfe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c02:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c04:	f7ff ffaa 	bl	8000b5c <HAL_RCC_GetSysClockFreq>
 8000c08:	4b35      	ldr	r3, [pc, #212]	; (8000ce0 <HAL_RCC_ClockConfig+0x128>)
 8000c0a:	4a36      	ldr	r2, [pc, #216]	; (8000ce4 <HAL_RCC_ClockConfig+0x12c>)
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c12:	5cd3      	ldrb	r3, [r2, r3]
 8000c14:	40d8      	lsrs	r0, r3
 8000c16:	4b34      	ldr	r3, [pc, #208]	; (8000ce8 <HAL_RCC_ClockConfig+0x130>)
 8000c18:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f001 ff3a 	bl	8002a94 <HAL_InitTick>
  return HAL_OK;
 8000c20:	2000      	movs	r0, #0
 8000c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c26:	b2ca      	uxtb	r2, r1
 8000c28:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f003 030f 	and.w	r3, r3, #15
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d1c6      	bne.n	8000bc2 <HAL_RCC_ClockConfig+0xa>
 8000c34:	e7ce      	b.n	8000bd4 <HAL_RCC_ClockConfig+0x1c>
 8000c36:	4b2a      	ldr	r3, [pc, #168]	; (8000ce0 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c38:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	689a      	ldrne	r2, [r3, #8]
 8000c40:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000c44:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c46:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c48:	bf42      	ittt	mi
 8000c4a:	689a      	ldrmi	r2, [r3, #8]
 8000c4c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000c50:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c52:	689a      	ldr	r2, [r3, #8]
 8000c54:	68a0      	ldr	r0, [r4, #8]
 8000c56:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c5a:	4302      	orrs	r2, r0
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	e7bc      	b.n	8000bda <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c60:	6862      	ldr	r2, [r4, #4]
 8000c62:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_RCC_ClockConfig+0x128>)
 8000c64:	2a01      	cmp	r2, #1
 8000c66:	d11d      	bne.n	8000ca4 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c6e:	d0a8      	beq.n	8000bc2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c70:	4e1b      	ldr	r6, [pc, #108]	; (8000ce0 <HAL_RCC_ClockConfig+0x128>)
 8000c72:	68b3      	ldr	r3, [r6, #8]
 8000c74:	f023 0303 	bic.w	r3, r3, #3
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000c7c:	f7ff fc66 	bl	800054c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c80:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c84:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c86:	68b3      	ldr	r3, [r6, #8]
 8000c88:	6862      	ldr	r2, [r4, #4]
 8000c8a:	f003 030c 	and.w	r3, r3, #12
 8000c8e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c92:	d0a4      	beq.n	8000bde <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c94:	f7ff fc5a 	bl	800054c <HAL_GetTick>
 8000c98:	1bc0      	subs	r0, r0, r7
 8000c9a:	4540      	cmp	r0, r8
 8000c9c:	d9f3      	bls.n	8000c86 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000c9e:	2003      	movs	r0, #3
}
 8000ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ca4:	1e91      	subs	r1, r2, #2
 8000ca6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ca8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000caa:	d802      	bhi.n	8000cb2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cac:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000cb0:	e7dd      	b.n	8000c6e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb2:	f013 0f02 	tst.w	r3, #2
 8000cb6:	e7da      	b.n	8000c6e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cb8:	b2ea      	uxtb	r2, r5
 8000cba:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	429d      	cmp	r5, r3
 8000cc4:	f47f af7d 	bne.w	8000bc2 <HAL_RCC_ClockConfig+0xa>
 8000cc8:	e78f      	b.n	8000bea <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000cca:	4905      	ldr	r1, [pc, #20]	; (8000ce0 <HAL_RCC_ClockConfig+0x128>)
 8000ccc:	68e0      	ldr	r0, [r4, #12]
 8000cce:	688b      	ldr	r3, [r1, #8]
 8000cd0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000cd4:	4303      	orrs	r3, r0
 8000cd6:	608b      	str	r3, [r1, #8]
 8000cd8:	e78a      	b.n	8000bf0 <HAL_RCC_ClockConfig+0x38>
 8000cda:	bf00      	nop
 8000cdc:	40023c00 	.word	0x40023c00
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	08002cf1 	.word	0x08002cf1
 8000ce8:	20000008 	.word	0x20000008

08000cec <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000cee:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000cf6:	5cd3      	ldrb	r3, [r2, r3]
 8000cf8:	4a03      	ldr	r2, [pc, #12]	; (8000d08 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000cfa:	6810      	ldr	r0, [r2, #0]
}
 8000cfc:	40d8      	lsrs	r0, r3
 8000cfe:	4770      	bx	lr
 8000d00:	40023800 	.word	0x40023800
 8000d04:	08002d01 	.word	0x08002d01
 8000d08:	20000008 	.word	0x20000008

08000d0c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000d0e:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000d16:	5cd3      	ldrb	r3, [r2, r3]
 8000d18:	4a03      	ldr	r2, [pc, #12]	; (8000d28 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000d1a:	6810      	ldr	r0, [r2, #0]
}
 8000d1c:	40d8      	lsrs	r0, r3
 8000d1e:	4770      	bx	lr
 8000d20:	40023800 	.word	0x40023800
 8000d24:	08002d01 	.word	0x08002d01
 8000d28:	20000008 	.word	0x20000008

08000d2c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000d2c:	230f      	movs	r3, #15
 8000d2e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000d30:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <HAL_RCC_GetClockConfig+0x34>)
 8000d32:	689a      	ldr	r2, [r3, #8]
 8000d34:	f002 0203 	and.w	r2, r2, #3
 8000d38:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000d40:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000d42:	689a      	ldr	r2, [r3, #8]
 8000d44:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000d48:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	08db      	lsrs	r3, r3, #3
 8000d4e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000d52:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <HAL_RCC_GetClockConfig+0x38>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f003 030f 	and.w	r3, r3, #15
 8000d5c:	600b      	str	r3, [r1, #0]
 8000d5e:	4770      	bx	lr
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40023c00 	.word	0x40023c00

08000d68 <HAL_TIM_Base_MspInit>:
 8000d68:	4770      	bx	lr

08000d6a <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000d6a:	6803      	ldr	r3, [r0, #0]
 8000d6c:	68da      	ldr	r2, [r3, #12]
 8000d6e:	f042 0201 	orr.w	r2, r2, #1
 8000d72:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	f042 0201 	orr.w	r2, r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	4770      	bx	lr

08000d80 <HAL_TIM_OC_DelayElapsedCallback>:
 8000d80:	4770      	bx	lr

08000d82 <HAL_TIM_IC_CaptureCallback>:
 8000d82:	4770      	bx	lr

08000d84 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000d84:	4770      	bx	lr

08000d86 <HAL_TIM_TriggerCallback>:
 8000d86:	4770      	bx	lr

08000d88 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d88:	6803      	ldr	r3, [r0, #0]
 8000d8a:	691a      	ldr	r2, [r3, #16]
 8000d8c:	0791      	lsls	r1, r2, #30
{
 8000d8e:	b510      	push	{r4, lr}
 8000d90:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d92:	d50e      	bpl.n	8000db2 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000d94:	68da      	ldr	r2, [r3, #12]
 8000d96:	0792      	lsls	r2, r2, #30
 8000d98:	d50b      	bpl.n	8000db2 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000d9a:	f06f 0202 	mvn.w	r2, #2
 8000d9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000da0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000da2:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000da4:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000da6:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000da8:	d077      	beq.n	8000e9a <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000daa:	f7ff ffea 	bl	8000d82 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000dae:	2300      	movs	r3, #0
 8000db0:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000db2:	6823      	ldr	r3, [r4, #0]
 8000db4:	691a      	ldr	r2, [r3, #16]
 8000db6:	0750      	lsls	r0, r2, #29
 8000db8:	d510      	bpl.n	8000ddc <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000dba:	68da      	ldr	r2, [r3, #12]
 8000dbc:	0751      	lsls	r1, r2, #29
 8000dbe:	d50d      	bpl.n	8000ddc <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000dc0:	f06f 0204 	mvn.w	r2, #4
 8000dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000dc6:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000dc8:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000dca:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000dce:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000dd0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000dd2:	d068      	beq.n	8000ea6 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000dd4:	f7ff ffd5 	bl	8000d82 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000ddc:	6823      	ldr	r3, [r4, #0]
 8000dde:	691a      	ldr	r2, [r3, #16]
 8000de0:	0712      	lsls	r2, r2, #28
 8000de2:	d50f      	bpl.n	8000e04 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000de4:	68da      	ldr	r2, [r3, #12]
 8000de6:	0710      	lsls	r0, r2, #28
 8000de8:	d50c      	bpl.n	8000e04 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000dea:	f06f 0208 	mvn.w	r2, #8
 8000dee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000df0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000df2:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000df4:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000df6:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000df8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000dfa:	d05a      	beq.n	8000eb2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000dfc:	f7ff ffc1 	bl	8000d82 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e00:	2300      	movs	r3, #0
 8000e02:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000e04:	6823      	ldr	r3, [r4, #0]
 8000e06:	691a      	ldr	r2, [r3, #16]
 8000e08:	06d2      	lsls	r2, r2, #27
 8000e0a:	d510      	bpl.n	8000e2e <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000e0c:	68da      	ldr	r2, [r3, #12]
 8000e0e:	06d0      	lsls	r0, r2, #27
 8000e10:	d50d      	bpl.n	8000e2e <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000e12:	f06f 0210 	mvn.w	r2, #16
 8000e16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e18:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000e1a:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e1c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000e20:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000e22:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e24:	d04b      	beq.n	8000ebe <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e26:	f7ff ffac 	bl	8000d82 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000e2e:	6823      	ldr	r3, [r4, #0]
 8000e30:	691a      	ldr	r2, [r3, #16]
 8000e32:	07d1      	lsls	r1, r2, #31
 8000e34:	d508      	bpl.n	8000e48 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000e36:	68da      	ldr	r2, [r3, #12]
 8000e38:	07d2      	lsls	r2, r2, #31
 8000e3a:	d505      	bpl.n	8000e48 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000e3c:	f06f 0201 	mvn.w	r2, #1
 8000e40:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000e42:	4620      	mov	r0, r4
 8000e44:	f001 fdc2 	bl	80029cc <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000e48:	6823      	ldr	r3, [r4, #0]
 8000e4a:	691a      	ldr	r2, [r3, #16]
 8000e4c:	0610      	lsls	r0, r2, #24
 8000e4e:	d508      	bpl.n	8000e62 <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000e50:	68da      	ldr	r2, [r3, #12]
 8000e52:	0611      	lsls	r1, r2, #24
 8000e54:	d505      	bpl.n	8000e62 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000e56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000e5a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	f000 f8b4 	bl	8000fca <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000e62:	6823      	ldr	r3, [r4, #0]
 8000e64:	691a      	ldr	r2, [r3, #16]
 8000e66:	0652      	lsls	r2, r2, #25
 8000e68:	d508      	bpl.n	8000e7c <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000e6a:	68da      	ldr	r2, [r3, #12]
 8000e6c:	0650      	lsls	r0, r2, #25
 8000e6e:	d505      	bpl.n	8000e7c <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000e70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000e74:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000e76:	4620      	mov	r0, r4
 8000e78:	f7ff ff85 	bl	8000d86 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000e7c:	6823      	ldr	r3, [r4, #0]
 8000e7e:	691a      	ldr	r2, [r3, #16]
 8000e80:	0691      	lsls	r1, r2, #26
 8000e82:	d522      	bpl.n	8000eca <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000e84:	68da      	ldr	r2, [r3, #12]
 8000e86:	0692      	lsls	r2, r2, #26
 8000e88:	d51f      	bpl.n	8000eca <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e8a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000e8e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e90:	611a      	str	r2, [r3, #16]
    }
  }
}
 8000e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8000e96:	f000 b897 	b.w	8000fc8 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e9a:	f7ff ff71 	bl	8000d80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	f7ff ff70 	bl	8000d84 <HAL_TIM_PWM_PulseFinishedCallback>
 8000ea4:	e783      	b.n	8000dae <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ea6:	f7ff ff6b 	bl	8000d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000eaa:	4620      	mov	r0, r4
 8000eac:	f7ff ff6a 	bl	8000d84 <HAL_TIM_PWM_PulseFinishedCallback>
 8000eb0:	e792      	b.n	8000dd8 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000eb2:	f7ff ff65 	bl	8000d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	f7ff ff64 	bl	8000d84 <HAL_TIM_PWM_PulseFinishedCallback>
 8000ebc:	e7a0      	b.n	8000e00 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ebe:	f7ff ff5f 	bl	8000d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	f7ff ff5e 	bl	8000d84 <HAL_TIM_PWM_PulseFinishedCallback>
 8000ec8:	e7af      	b.n	8000e2a <HAL_TIM_IRQHandler+0xa2>
 8000eca:	bd10      	pop	{r4, pc}

08000ecc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000ecc:	4a2e      	ldr	r2, [pc, #184]	; (8000f88 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8000ece:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000ed0:	4290      	cmp	r0, r2
 8000ed2:	d012      	beq.n	8000efa <TIM_Base_SetConfig+0x2e>
 8000ed4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000ed8:	d00f      	beq.n	8000efa <TIM_Base_SetConfig+0x2e>
 8000eda:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000ede:	4290      	cmp	r0, r2
 8000ee0:	d00b      	beq.n	8000efa <TIM_Base_SetConfig+0x2e>
 8000ee2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ee6:	4290      	cmp	r0, r2
 8000ee8:	d007      	beq.n	8000efa <TIM_Base_SetConfig+0x2e>
 8000eea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eee:	4290      	cmp	r0, r2
 8000ef0:	d003      	beq.n	8000efa <TIM_Base_SetConfig+0x2e>
 8000ef2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000ef6:	4290      	cmp	r0, r2
 8000ef8:	d11d      	bne.n	8000f36 <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000efa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000f00:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000f02:	4a21      	ldr	r2, [pc, #132]	; (8000f88 <TIM_Base_SetConfig+0xbc>)
 8000f04:	4290      	cmp	r0, r2
 8000f06:	d104      	bne.n	8000f12 <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f08:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	e028      	b.n	8000f64 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000f12:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f16:	d0f7      	beq.n	8000f08 <TIM_Base_SetConfig+0x3c>
 8000f18:	4a1c      	ldr	r2, [pc, #112]	; (8000f8c <TIM_Base_SetConfig+0xc0>)
 8000f1a:	4290      	cmp	r0, r2
 8000f1c:	d0f4      	beq.n	8000f08 <TIM_Base_SetConfig+0x3c>
 8000f1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f22:	4290      	cmp	r0, r2
 8000f24:	d0f0      	beq.n	8000f08 <TIM_Base_SetConfig+0x3c>
 8000f26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f2a:	4290      	cmp	r0, r2
 8000f2c:	d0ec      	beq.n	8000f08 <TIM_Base_SetConfig+0x3c>
 8000f2e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000f32:	4290      	cmp	r0, r2
 8000f34:	d0e8      	beq.n	8000f08 <TIM_Base_SetConfig+0x3c>
 8000f36:	4a16      	ldr	r2, [pc, #88]	; (8000f90 <TIM_Base_SetConfig+0xc4>)
 8000f38:	4290      	cmp	r0, r2
 8000f3a:	d0e5      	beq.n	8000f08 <TIM_Base_SetConfig+0x3c>
 8000f3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f40:	4290      	cmp	r0, r2
 8000f42:	d0e1      	beq.n	8000f08 <TIM_Base_SetConfig+0x3c>
 8000f44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f48:	4290      	cmp	r0, r2
 8000f4a:	d0dd      	beq.n	8000f08 <TIM_Base_SetConfig+0x3c>
 8000f4c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000f50:	4290      	cmp	r0, r2
 8000f52:	d0d9      	beq.n	8000f08 <TIM_Base_SetConfig+0x3c>
 8000f54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f58:	4290      	cmp	r0, r2
 8000f5a:	d0d5      	beq.n	8000f08 <TIM_Base_SetConfig+0x3c>
 8000f5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f60:	4290      	cmp	r0, r2
 8000f62:	d0d1      	beq.n	8000f08 <TIM_Base_SetConfig+0x3c>
  }

  TIMx->CR1 = tmpcr1;
 8000f64:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000f66:	688b      	ldr	r3, [r1, #8]
 8000f68:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000f6a:	680b      	ldr	r3, [r1, #0]
 8000f6c:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <TIM_Base_SetConfig+0xbc>)
 8000f70:	4298      	cmp	r0, r3
 8000f72:	d006      	beq.n	8000f82 <TIM_Base_SetConfig+0xb6>
 8000f74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f78:	4298      	cmp	r0, r3
 8000f7a:	d002      	beq.n	8000f82 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	6143      	str	r3, [r0, #20]
}
 8000f80:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8000f82:	690b      	ldr	r3, [r1, #16]
 8000f84:	6303      	str	r3, [r0, #48]	; 0x30
 8000f86:	e7f9      	b.n	8000f7c <TIM_Base_SetConfig+0xb0>
 8000f88:	40010000 	.word	0x40010000
 8000f8c:	40000400 	.word	0x40000400
 8000f90:	40014000 	.word	0x40014000

08000f94 <HAL_TIM_Base_Init>:
{ 
 8000f94:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000f96:	4604      	mov	r4, r0
 8000f98:	b1a0      	cbz	r0, 8000fc4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000f9a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000f9e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000fa2:	b91b      	cbnz	r3, 8000fac <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000fa4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8000fa8:	f7ff fede 	bl	8000d68 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000fac:	2302      	movs	r3, #2
 8000fae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000fb2:	6820      	ldr	r0, [r4, #0]
 8000fb4:	1d21      	adds	r1, r4, #4
 8000fb6:	f7ff ff89 	bl	8000ecc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000fc4:	2001      	movs	r0, #1
}
 8000fc6:	bd10      	pop	{r4, pc}

08000fc8 <HAL_TIMEx_CommutationCallback>:
 8000fc8:	4770      	bx	lr

08000fca <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000fca:	4770      	bx	lr

08000fcc <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8000fd0:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000fd2:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8000fd4:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000fd6:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000fd8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000fdc:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8000fde:	6133      	str	r3, [r6, #16]
{
 8000fe0:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000fe2:	6883      	ldr	r3, [r0, #8]
 8000fe4:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8000fe6:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000fe8:	4303      	orrs	r3, r0
 8000fea:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000fec:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000ff0:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000ff2:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000ff6:	430b      	orrs	r3, r1
 8000ff8:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8000ffa:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8000ffc:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8000ffe:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001004:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001006:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800100a:	6173      	str	r3, [r6, #20]
 800100c:	4b7a      	ldr	r3, [pc, #488]	; (80011f8 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800100e:	d17c      	bne.n	800110a <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001010:	429e      	cmp	r6, r3
 8001012:	d003      	beq.n	800101c <UART_SetConfig+0x50>
 8001014:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001018:	429e      	cmp	r6, r3
 800101a:	d144      	bne.n	80010a6 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800101c:	f7ff fe76 	bl	8000d0c <HAL_RCC_GetPCLK2Freq>
 8001020:	2519      	movs	r5, #25
 8001022:	fb05 f300 	mul.w	r3, r5, r0
 8001026:	6860      	ldr	r0, [r4, #4]
 8001028:	f04f 0964 	mov.w	r9, #100	; 0x64
 800102c:	0040      	lsls	r0, r0, #1
 800102e:	fbb3 f3f0 	udiv	r3, r3, r0
 8001032:	fbb3 f3f9 	udiv	r3, r3, r9
 8001036:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800103a:	f7ff fe67 	bl	8000d0c <HAL_RCC_GetPCLK2Freq>
 800103e:	6863      	ldr	r3, [r4, #4]
 8001040:	4368      	muls	r0, r5
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	fbb0 f7f3 	udiv	r7, r0, r3
 8001048:	f7ff fe60 	bl	8000d0c <HAL_RCC_GetPCLK2Freq>
 800104c:	6863      	ldr	r3, [r4, #4]
 800104e:	4368      	muls	r0, r5
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	fbb0 f3f3 	udiv	r3, r0, r3
 8001056:	fbb3 f3f9 	udiv	r3, r3, r9
 800105a:	fb09 7313 	mls	r3, r9, r3, r7
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	3332      	adds	r3, #50	; 0x32
 8001062:	fbb3 f3f9 	udiv	r3, r3, r9
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800106c:	f7ff fe4e 	bl	8000d0c <HAL_RCC_GetPCLK2Freq>
 8001070:	6862      	ldr	r2, [r4, #4]
 8001072:	4368      	muls	r0, r5
 8001074:	0052      	lsls	r2, r2, #1
 8001076:	fbb0 faf2 	udiv	sl, r0, r2
 800107a:	f7ff fe47 	bl	8000d0c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800107e:	6863      	ldr	r3, [r4, #4]
 8001080:	4368      	muls	r0, r5
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fbb0 f3f3 	udiv	r3, r0, r3
 8001088:	fbb3 f3f9 	udiv	r3, r3, r9
 800108c:	fb09 a313 	mls	r3, r9, r3, sl
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	3332      	adds	r3, #50	; 0x32
 8001094:	fbb3 f3f9 	udiv	r3, r3, r9
 8001098:	f003 0307 	and.w	r3, r3, #7
 800109c:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800109e:	443b      	add	r3, r7
 80010a0:	60b3      	str	r3, [r6, #8]
 80010a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80010a6:	f7ff fe21 	bl	8000cec <HAL_RCC_GetPCLK1Freq>
 80010aa:	2519      	movs	r5, #25
 80010ac:	fb05 f300 	mul.w	r3, r5, r0
 80010b0:	6860      	ldr	r0, [r4, #4]
 80010b2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80010b6:	0040      	lsls	r0, r0, #1
 80010b8:	fbb3 f3f0 	udiv	r3, r3, r0
 80010bc:	fbb3 f3f9 	udiv	r3, r3, r9
 80010c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80010c4:	f7ff fe12 	bl	8000cec <HAL_RCC_GetPCLK1Freq>
 80010c8:	6863      	ldr	r3, [r4, #4]
 80010ca:	4368      	muls	r0, r5
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	fbb0 f7f3 	udiv	r7, r0, r3
 80010d2:	f7ff fe0b 	bl	8000cec <HAL_RCC_GetPCLK1Freq>
 80010d6:	6863      	ldr	r3, [r4, #4]
 80010d8:	4368      	muls	r0, r5
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80010e0:	fbb3 f3f9 	udiv	r3, r3, r9
 80010e4:	fb09 7313 	mls	r3, r9, r3, r7
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	3332      	adds	r3, #50	; 0x32
 80010ec:	fbb3 f3f9 	udiv	r3, r3, r9
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80010f6:	f7ff fdf9 	bl	8000cec <HAL_RCC_GetPCLK1Freq>
 80010fa:	6862      	ldr	r2, [r4, #4]
 80010fc:	4368      	muls	r0, r5
 80010fe:	0052      	lsls	r2, r2, #1
 8001100:	fbb0 faf2 	udiv	sl, r0, r2
 8001104:	f7ff fdf2 	bl	8000cec <HAL_RCC_GetPCLK1Freq>
 8001108:	e7b9      	b.n	800107e <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800110a:	429e      	cmp	r6, r3
 800110c:	d002      	beq.n	8001114 <UART_SetConfig+0x148>
 800110e:	4b3b      	ldr	r3, [pc, #236]	; (80011fc <UART_SetConfig+0x230>)
 8001110:	429e      	cmp	r6, r3
 8001112:	d140      	bne.n	8001196 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001114:	f7ff fdfa 	bl	8000d0c <HAL_RCC_GetPCLK2Freq>
 8001118:	6867      	ldr	r7, [r4, #4]
 800111a:	2519      	movs	r5, #25
 800111c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001120:	fb05 f300 	mul.w	r3, r5, r0
 8001124:	00bf      	lsls	r7, r7, #2
 8001126:	fbb3 f3f7 	udiv	r3, r3, r7
 800112a:	fbb3 f3f9 	udiv	r3, r3, r9
 800112e:	011f      	lsls	r7, r3, #4
 8001130:	f7ff fdec 	bl	8000d0c <HAL_RCC_GetPCLK2Freq>
 8001134:	6863      	ldr	r3, [r4, #4]
 8001136:	4368      	muls	r0, r5
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	fbb0 f8f3 	udiv	r8, r0, r3
 800113e:	f7ff fde5 	bl	8000d0c <HAL_RCC_GetPCLK2Freq>
 8001142:	6863      	ldr	r3, [r4, #4]
 8001144:	4368      	muls	r0, r5
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	fbb0 f3f3 	udiv	r3, r0, r3
 800114c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001150:	fb09 8313 	mls	r3, r9, r3, r8
 8001154:	011b      	lsls	r3, r3, #4
 8001156:	3332      	adds	r3, #50	; 0x32
 8001158:	fbb3 f3f9 	udiv	r3, r3, r9
 800115c:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001160:	f7ff fdd4 	bl	8000d0c <HAL_RCC_GetPCLK2Freq>
 8001164:	6862      	ldr	r2, [r4, #4]
 8001166:	4368      	muls	r0, r5
 8001168:	0092      	lsls	r2, r2, #2
 800116a:	fbb0 faf2 	udiv	sl, r0, r2
 800116e:	f7ff fdcd 	bl	8000d0c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001172:	6863      	ldr	r3, [r4, #4]
 8001174:	4368      	muls	r0, r5
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	fbb0 f3f3 	udiv	r3, r0, r3
 800117c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001180:	fb09 a313 	mls	r3, r9, r3, sl
 8001184:	011b      	lsls	r3, r3, #4
 8001186:	3332      	adds	r3, #50	; 0x32
 8001188:	fbb3 f3f9 	udiv	r3, r3, r9
 800118c:	f003 030f 	and.w	r3, r3, #15
 8001190:	ea43 0308 	orr.w	r3, r3, r8
 8001194:	e783      	b.n	800109e <UART_SetConfig+0xd2>
 8001196:	f7ff fda9 	bl	8000cec <HAL_RCC_GetPCLK1Freq>
 800119a:	6867      	ldr	r7, [r4, #4]
 800119c:	2519      	movs	r5, #25
 800119e:	f04f 0964 	mov.w	r9, #100	; 0x64
 80011a2:	fb05 f300 	mul.w	r3, r5, r0
 80011a6:	00bf      	lsls	r7, r7, #2
 80011a8:	fbb3 f3f7 	udiv	r3, r3, r7
 80011ac:	fbb3 f3f9 	udiv	r3, r3, r9
 80011b0:	011f      	lsls	r7, r3, #4
 80011b2:	f7ff fd9b 	bl	8000cec <HAL_RCC_GetPCLK1Freq>
 80011b6:	6863      	ldr	r3, [r4, #4]
 80011b8:	4368      	muls	r0, r5
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	fbb0 f8f3 	udiv	r8, r0, r3
 80011c0:	f7ff fd94 	bl	8000cec <HAL_RCC_GetPCLK1Freq>
 80011c4:	6863      	ldr	r3, [r4, #4]
 80011c6:	4368      	muls	r0, r5
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80011ce:	fbb3 f3f9 	udiv	r3, r3, r9
 80011d2:	fb09 8313 	mls	r3, r9, r3, r8
 80011d6:	011b      	lsls	r3, r3, #4
 80011d8:	3332      	adds	r3, #50	; 0x32
 80011da:	fbb3 f3f9 	udiv	r3, r3, r9
 80011de:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80011e2:	f7ff fd83 	bl	8000cec <HAL_RCC_GetPCLK1Freq>
 80011e6:	6862      	ldr	r2, [r4, #4]
 80011e8:	4368      	muls	r0, r5
 80011ea:	0092      	lsls	r2, r2, #2
 80011ec:	fbb0 faf2 	udiv	sl, r0, r2
 80011f0:	f7ff fd7c 	bl	8000cec <HAL_RCC_GetPCLK1Freq>
 80011f4:	e7bd      	b.n	8001172 <UART_SetConfig+0x1a6>
 80011f6:	bf00      	nop
 80011f8:	40011000 	.word	0x40011000
 80011fc:	40011400 	.word	0x40011400

08001200 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001202:	4604      	mov	r4, r0
 8001204:	460e      	mov	r6, r1
 8001206:	4617      	mov	r7, r2
 8001208:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800120a:	6821      	ldr	r1, [r4, #0]
 800120c:	680b      	ldr	r3, [r1, #0]
 800120e:	ea36 0303 	bics.w	r3, r6, r3
 8001212:	d101      	bne.n	8001218 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001214:	2000      	movs	r0, #0
}
 8001216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001218:	1c6b      	adds	r3, r5, #1
 800121a:	d0f7      	beq.n	800120c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800121c:	b995      	cbnz	r5, 8001244 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800121e:	6823      	ldr	r3, [r4, #0]
 8001220:	68da      	ldr	r2, [r3, #12]
 8001222:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001226:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001228:	695a      	ldr	r2, [r3, #20]
 800122a:	f022 0201 	bic.w	r2, r2, #1
 800122e:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001230:	2320      	movs	r3, #32
 8001232:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001236:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800123a:	2300      	movs	r3, #0
 800123c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001240:	2003      	movs	r0, #3
 8001242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001244:	f7ff f982 	bl	800054c <HAL_GetTick>
 8001248:	1bc0      	subs	r0, r0, r7
 800124a:	4285      	cmp	r5, r0
 800124c:	d2dd      	bcs.n	800120a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800124e:	e7e6      	b.n	800121e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001250 <HAL_UART_Init>:
{
 8001250:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001252:	4604      	mov	r4, r0
 8001254:	b340      	cbz	r0, 80012a8 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001256:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800125a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800125e:	b91b      	cbnz	r3, 8001268 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001260:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001264:	f001 fbde 	bl	8002a24 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001268:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800126a:	2324      	movs	r3, #36	; 0x24
 800126c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001270:	68d3      	ldr	r3, [r2, #12]
 8001272:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001276:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001278:	4620      	mov	r0, r4
 800127a:	f7ff fea7 	bl	8000fcc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800127e:	6823      	ldr	r3, [r4, #0]
 8001280:	691a      	ldr	r2, [r3, #16]
 8001282:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001286:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001288:	695a      	ldr	r2, [r3, #20]
 800128a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800128e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001290:	68da      	ldr	r2, [r3, #12]
 8001292:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001296:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001298:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800129a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800129c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800129e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80012a2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80012a6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80012a8:	2001      	movs	r0, #1
}
 80012aa:	bd10      	pop	{r4, pc}

080012ac <HAL_UART_Transmit>:
{
 80012ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012b0:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 80012b2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80012b6:	2b20      	cmp	r3, #32
{
 80012b8:	4604      	mov	r4, r0
 80012ba:	460d      	mov	r5, r1
 80012bc:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 80012be:	d14f      	bne.n	8001360 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 80012c0:	2900      	cmp	r1, #0
 80012c2:	d04a      	beq.n	800135a <HAL_UART_Transmit+0xae>
 80012c4:	2a00      	cmp	r2, #0
 80012c6:	d048      	beq.n	800135a <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80012c8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d047      	beq.n	8001360 <HAL_UART_Transmit+0xb4>
 80012d0:	2301      	movs	r3, #1
 80012d2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80012da:	2321      	movs	r3, #33	; 0x21
 80012dc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80012e0:	f7ff f934 	bl	800054c <HAL_GetTick>
    huart->TxXferSize = Size;
 80012e4:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80012e8:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80012ea:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80012ee:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	b96b      	cbnz	r3, 8001310 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80012f4:	463b      	mov	r3, r7
 80012f6:	4632      	mov	r2, r6
 80012f8:	2140      	movs	r1, #64	; 0x40
 80012fa:	4620      	mov	r0, r4
 80012fc:	f7ff ff80 	bl	8001200 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001300:	b9b0      	cbnz	r0, 8001330 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8001302:	2320      	movs	r3, #32
 8001304:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001308:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 800130c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001310:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001312:	3b01      	subs	r3, #1
 8001314:	b29b      	uxth	r3, r3
 8001316:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001318:	68a3      	ldr	r3, [r4, #8]
 800131a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800131e:	4632      	mov	r2, r6
 8001320:	463b      	mov	r3, r7
 8001322:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001326:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001328:	d10e      	bne.n	8001348 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800132a:	f7ff ff69 	bl	8001200 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800132e:	b110      	cbz	r0, 8001336 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001330:	2003      	movs	r0, #3
 8001332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001336:	882b      	ldrh	r3, [r5, #0]
 8001338:	6822      	ldr	r2, [r4, #0]
 800133a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800133e:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001340:	6923      	ldr	r3, [r4, #16]
 8001342:	b943      	cbnz	r3, 8001356 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8001344:	3502      	adds	r5, #2
 8001346:	e7d2      	b.n	80012ee <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001348:	f7ff ff5a 	bl	8001200 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800134c:	2800      	cmp	r0, #0
 800134e:	d1ef      	bne.n	8001330 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001350:	6823      	ldr	r3, [r4, #0]
 8001352:	782a      	ldrb	r2, [r5, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	3501      	adds	r5, #1
 8001358:	e7c9      	b.n	80012ee <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800135a:	2001      	movs	r0, #1
 800135c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001360:	2002      	movs	r0, #2
}
 8001362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001366 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001366:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001368:	f000 fe58 	bl	800201c <vTaskStartScheduler>
  
  return osOK;
}
 800136c:	2000      	movs	r0, #0
 800136e:	bd08      	pop	{r3, pc}

08001370 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001370:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001372:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8001376:	8a02      	ldrh	r2, [r0, #16]
{
 8001378:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800137a:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 800137e:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8001380:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001382:	bf14      	ite	ne
 8001384:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001386:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001388:	a803      	add	r0, sp, #12
 800138a:	9001      	str	r0, [sp, #4]
 800138c:	9400      	str	r4, [sp, #0]
 800138e:	4628      	mov	r0, r5
 8001390:	f000 fd74 	bl	8001e7c <xTaskCreate>
 8001394:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001396:	bf0c      	ite	eq
 8001398:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 800139a:	2000      	movne	r0, #0
}
 800139c:	b005      	add	sp, #20
 800139e:	bd30      	pop	{r4, r5, pc}

080013a0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80013a0:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80013a2:	2800      	cmp	r0, #0
 80013a4:	bf08      	it	eq
 80013a6:	2001      	moveq	r0, #1
 80013a8:	f000 ff86 	bl	80022b8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80013ac:	2000      	movs	r0, #0
 80013ae:	bd08      	pop	{r3, pc}

080013b0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013b0:	f100 0308 	add.w	r3, r0, #8
 80013b4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80013b6:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013ba:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013bc:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80013be:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80013c0:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80013c2:	6003      	str	r3, [r0, #0]
 80013c4:	4770      	bx	lr

080013c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	6103      	str	r3, [r0, #16]
 80013ca:	4770      	bx	lr

080013cc <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80013cc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80013ce:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80013d8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80013da:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80013dc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80013de:	3301      	adds	r3, #1
 80013e0:	6003      	str	r3, [r0, #0]
 80013e2:	4770      	bx	lr

080013e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80013e4:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80013e6:	1c53      	adds	r3, r2, #1
{
 80013e8:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 80013ea:	d10a      	bne.n	8001402 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80013ec:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80013f2:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80013f4:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80013f6:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80013f8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80013fa:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80013fc:	3301      	adds	r3, #1
 80013fe:	6003      	str	r3, [r0, #0]
 8001400:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001402:	f100 0308 	add.w	r3, r0, #8
 8001406:	685c      	ldr	r4, [r3, #4]
 8001408:	6825      	ldr	r5, [r4, #0]
 800140a:	42aa      	cmp	r2, r5
 800140c:	d3ef      	bcc.n	80013ee <vListInsert+0xa>
 800140e:	4623      	mov	r3, r4
 8001410:	e7f9      	b.n	8001406 <vListInsert+0x22>

08001412 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001412:	6841      	ldr	r1, [r0, #4]
 8001414:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001416:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001418:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800141a:	6882      	ldr	r2, [r0, #8]
 800141c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800141e:	6859      	ldr	r1, [r3, #4]
 8001420:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001422:	bf08      	it	eq
 8001424:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001426:	2200      	movs	r2, #0
 8001428:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800142a:	6818      	ldr	r0, [r3, #0]
 800142c:	3801      	subs	r0, #1
 800142e:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001430:	4770      	bx	lr
	...

08001434 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001434:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <prvTaskExitError+0x2c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	3301      	adds	r3, #1
 800143a:	d008      	beq.n	800144e <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800143c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001440:	f383 8811 	msr	BASEPRI, r3
 8001444:	f3bf 8f6f 	isb	sy
 8001448:	f3bf 8f4f 	dsb	sy
 800144c:	e7fe      	b.n	800144c <prvTaskExitError+0x18>
 800144e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001452:	f383 8811 	msr	BASEPRI, r3
 8001456:	f3bf 8f6f 	isb	sy
 800145a:	f3bf 8f4f 	dsb	sy
 800145e:	e7fe      	b.n	800145e <prvTaskExitError+0x2a>
 8001460:	20000004 	.word	0x20000004

08001464 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001464:	4806      	ldr	r0, [pc, #24]	; (8001480 <prvPortStartFirstTask+0x1c>)
 8001466:	6800      	ldr	r0, [r0, #0]
 8001468:	6800      	ldr	r0, [r0, #0]
 800146a:	f380 8808 	msr	MSP, r0
 800146e:	b662      	cpsie	i
 8001470:	b661      	cpsie	f
 8001472:	f3bf 8f4f 	dsb	sy
 8001476:	f3bf 8f6f 	isb	sy
 800147a:	df00      	svc	0
 800147c:	bf00      	nop
 800147e:	0000      	.short	0x0000
 8001480:	e000ed08 	.word	0xe000ed08

08001484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001484:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001494 <vPortEnableVFP+0x10>
 8001488:	6801      	ldr	r1, [r0, #0]
 800148a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800148e:	6001      	str	r1, [r0, #0]
 8001490:	4770      	bx	lr
 8001492:	0000      	.short	0x0000
 8001494:	e000ed88 	.word	0xe000ed88

08001498 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001498:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800149c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80014a0:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <pxPortInitialiseStack+0x28>)
 80014a2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80014a6:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80014aa:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80014ae:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80014b2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80014b6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80014ba:	3844      	subs	r0, #68	; 0x44
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	08001435 	.word	0x08001435
	...

080014d0 <SVC_Handler>:
	__asm volatile (
 80014d0:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <pxCurrentTCBConst2>)
 80014d2:	6819      	ldr	r1, [r3, #0]
 80014d4:	6808      	ldr	r0, [r1, #0]
 80014d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014da:	f380 8809 	msr	PSP, r0
 80014de:	f3bf 8f6f 	isb	sy
 80014e2:	f04f 0000 	mov.w	r0, #0
 80014e6:	f380 8811 	msr	BASEPRI, r0
 80014ea:	4770      	bx	lr
 80014ec:	f3af 8000 	nop.w

080014f0 <pxCurrentTCBConst2>:
 80014f0:	20003c48 	.word	0x20003c48

080014f4 <vPortEnterCritical>:
 80014f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014f8:	f383 8811 	msr	BASEPRI, r3
 80014fc:	f3bf 8f6f 	isb	sy
 8001500:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001504:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <vPortEnterCritical+0x3c>)
 8001506:	6813      	ldr	r3, [r2, #0]
 8001508:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800150a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800150c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800150e:	d10d      	bne.n	800152c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <vPortEnterCritical+0x40>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001518:	d008      	beq.n	800152c <vPortEnterCritical+0x38>
 800151a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800151e:	f383 8811 	msr	BASEPRI, r3
 8001522:	f3bf 8f6f 	isb	sy
 8001526:	f3bf 8f4f 	dsb	sy
 800152a:	e7fe      	b.n	800152a <vPortEnterCritical+0x36>
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20000004 	.word	0x20000004
 8001534:	e000ed04 	.word	0xe000ed04

08001538 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001538:	4a08      	ldr	r2, [pc, #32]	; (800155c <vPortExitCritical+0x24>)
 800153a:	6813      	ldr	r3, [r2, #0]
 800153c:	b943      	cbnz	r3, 8001550 <vPortExitCritical+0x18>
 800153e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001542:	f383 8811 	msr	BASEPRI, r3
 8001546:	f3bf 8f6f 	isb	sy
 800154a:	f3bf 8f4f 	dsb	sy
 800154e:	e7fe      	b.n	800154e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001550:	3b01      	subs	r3, #1
 8001552:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001554:	b90b      	cbnz	r3, 800155a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001556:	f383 8811 	msr	BASEPRI, r3
 800155a:	4770      	bx	lr
 800155c:	20000004 	.word	0x20000004

08001560 <PendSV_Handler>:
	__asm volatile
 8001560:	f3ef 8009 	mrs	r0, PSP
 8001564:	f3bf 8f6f 	isb	sy
 8001568:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <pxCurrentTCBConst>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	f01e 0f10 	tst.w	lr, #16
 8001570:	bf08      	it	eq
 8001572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800157a:	6010      	str	r0, [r2, #0]
 800157c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001580:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001584:	f380 8811 	msr	BASEPRI, r0
 8001588:	f3bf 8f4f 	dsb	sy
 800158c:	f3bf 8f6f 	isb	sy
 8001590:	f000 fef0 	bl	8002374 <vTaskSwitchContext>
 8001594:	f04f 0000 	mov.w	r0, #0
 8001598:	f380 8811 	msr	BASEPRI, r0
 800159c:	bc08      	pop	{r3}
 800159e:	6819      	ldr	r1, [r3, #0]
 80015a0:	6808      	ldr	r0, [r1, #0]
 80015a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015a6:	f01e 0f10 	tst.w	lr, #16
 80015aa:	bf08      	it	eq
 80015ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80015b0:	f380 8809 	msr	PSP, r0
 80015b4:	f3bf 8f6f 	isb	sy
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	f3af 8000 	nop.w

080015c0 <pxCurrentTCBConst>:
 80015c0:	20003c48 	.word	0x20003c48

080015c4 <SysTick_Handler>:
{
 80015c4:	b508      	push	{r3, lr}
	__asm volatile
 80015c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015ca:	f383 8811 	msr	BASEPRI, r3
 80015ce:	f3bf 8f6f 	isb	sy
 80015d2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80015d6:	f000 fd65 	bl	80020a4 <xTaskIncrementTick>
 80015da:	b118      	cbz	r0, 80015e4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80015dc:	4b03      	ldr	r3, [pc, #12]	; (80015ec <SysTick_Handler+0x28>)
 80015de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015e2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80015e4:	2300      	movs	r3, #0
 80015e6:	f383 8811 	msr	BASEPRI, r3
 80015ea:	bd08      	pop	{r3, pc}
 80015ec:	e000ed04 	.word	0xe000ed04

080015f0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <vPortSetupTimerInterrupt+0x1c>)
 80015f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80015fc:	4a04      	ldr	r2, [pc, #16]	; (8001610 <vPortSetupTimerInterrupt+0x20>)
 80015fe:	3b01      	subs	r3, #1
 8001600:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001602:	4b04      	ldr	r3, [pc, #16]	; (8001614 <vPortSetupTimerInterrupt+0x24>)
 8001604:	2207      	movs	r2, #7
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	20000008 	.word	0x20000008
 8001610:	e000e014 	.word	0xe000e014
 8001614:	e000e010 	.word	0xe000e010

08001618 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001618:	4b31      	ldr	r3, [pc, #196]	; (80016e0 <xPortStartScheduler+0xc8>)
 800161a:	4a32      	ldr	r2, [pc, #200]	; (80016e4 <xPortStartScheduler+0xcc>)
{
 800161c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800161e:	6819      	ldr	r1, [r3, #0]
 8001620:	4291      	cmp	r1, r2
 8001622:	d108      	bne.n	8001636 <xPortStartScheduler+0x1e>
	__asm volatile
 8001624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001628:	f383 8811 	msr	BASEPRI, r3
 800162c:	f3bf 8f6f 	isb	sy
 8001630:	f3bf 8f4f 	dsb	sy
 8001634:	e7fe      	b.n	8001634 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <xPortStartScheduler+0xd0>)
 800163a:	429a      	cmp	r2, r3
 800163c:	d108      	bne.n	8001650 <xPortStartScheduler+0x38>
 800163e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001642:	f383 8811 	msr	BASEPRI, r3
 8001646:	f3bf 8f6f 	isb	sy
 800164a:	f3bf 8f4f 	dsb	sy
 800164e:	e7fe      	b.n	800164e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001650:	4b26      	ldr	r3, [pc, #152]	; (80016ec <xPortStartScheduler+0xd4>)
 8001652:	781a      	ldrb	r2, [r3, #0]
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001658:	22ff      	movs	r2, #255	; 0xff
 800165a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800165c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800165e:	4a24      	ldr	r2, [pc, #144]	; (80016f0 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001660:	b2db      	uxtb	r3, r3
 8001662:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001666:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800166a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800166e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001670:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <xPortStartScheduler+0xdc>)
 8001672:	2207      	movs	r2, #7
 8001674:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001676:	2100      	movs	r1, #0
 8001678:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800167c:	0600      	lsls	r0, r0, #24
 800167e:	f102 34ff 	add.w	r4, r2, #4294967295
 8001682:	d423      	bmi.n	80016cc <xPortStartScheduler+0xb4>
 8001684:	b101      	cbz	r1, 8001688 <xPortStartScheduler+0x70>
 8001686:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800168c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001690:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001692:	9b01      	ldr	r3, [sp, #4]
 8001694:	4a15      	ldr	r2, [pc, #84]	; (80016ec <xPortStartScheduler+0xd4>)
 8001696:	b2db      	uxtb	r3, r3
 8001698:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800169a:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <xPortStartScheduler+0xe0>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80016a2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80016aa:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80016ac:	f7ff ffa0 	bl	80015f0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <xPortStartScheduler+0xe4>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 80016b6:	f7ff fee5 	bl	8001484 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80016ba:	4a11      	ldr	r2, [pc, #68]	; (8001700 <xPortStartScheduler+0xe8>)
 80016bc:	6813      	ldr	r3, [r2, #0]
 80016be:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80016c2:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80016c4:	f7ff fece 	bl	8001464 <prvPortStartFirstTask>
	prvTaskExitError();
 80016c8:	f7ff feb4 	bl	8001434 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80016cc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80016d0:	0052      	lsls	r2, r2, #1
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	f88d 2003 	strb.w	r2, [sp, #3]
 80016d8:	2101      	movs	r1, #1
 80016da:	4622      	mov	r2, r4
 80016dc:	e7cc      	b.n	8001678 <xPortStartScheduler+0x60>
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00
 80016e4:	410fc271 	.word	0x410fc271
 80016e8:	410fc270 	.word	0x410fc270
 80016ec:	e000e400 	.word	0xe000e400
 80016f0:	20000028 	.word	0x20000028
 80016f4:	2000002c 	.word	0x2000002c
 80016f8:	e000ed20 	.word	0xe000ed20
 80016fc:	20000004 	.word	0x20000004
 8001700:	e000ef34 	.word	0xe000ef34

08001704 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001704:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <prvInsertBlockIntoFreeList+0x40>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	4282      	cmp	r2, r0
 800170c:	d318      	bcc.n	8001740 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800170e:	685c      	ldr	r4, [r3, #4]
 8001710:	1919      	adds	r1, r3, r4
 8001712:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001714:	bf01      	itttt	eq
 8001716:	6841      	ldreq	r1, [r0, #4]
 8001718:	4618      	moveq	r0, r3
 800171a:	1909      	addeq	r1, r1, r4
 800171c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800171e:	6844      	ldr	r4, [r0, #4]
 8001720:	1901      	adds	r1, r0, r4
 8001722:	428a      	cmp	r2, r1
 8001724:	d107      	bne.n	8001736 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001726:	4908      	ldr	r1, [pc, #32]	; (8001748 <prvInsertBlockIntoFreeList+0x44>)
 8001728:	6809      	ldr	r1, [r1, #0]
 800172a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800172c:	bf1f      	itttt	ne
 800172e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001730:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001732:	1909      	addne	r1, r1, r4
 8001734:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001736:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001738:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800173a:	bf18      	it	ne
 800173c:	6018      	strne	r0, [r3, #0]
 800173e:	bd10      	pop	{r4, pc}
 8001740:	4613      	mov	r3, r2
 8001742:	e7e1      	b.n	8001708 <prvInsertBlockIntoFreeList+0x4>
 8001744:	20003c40 	.word	0x20003c40
 8001748:	20000030 	.word	0x20000030

0800174c <pvPortMalloc>:
{
 800174c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001750:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8001752:	f000 fc9f 	bl	8002094 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001756:	493e      	ldr	r1, [pc, #248]	; (8001850 <pvPortMalloc+0x104>)
 8001758:	4d3e      	ldr	r5, [pc, #248]	; (8001854 <pvPortMalloc+0x108>)
 800175a:	680b      	ldr	r3, [r1, #0]
 800175c:	bb0b      	cbnz	r3, 80017a2 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800175e:	4a3e      	ldr	r2, [pc, #248]	; (8001858 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001760:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001762:	bf1f      	itttt	ne
 8001764:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001766:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800176a:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 800176e:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001770:	bf14      	ite	ne
 8001772:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001774:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001778:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800177a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800177c:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001780:	4e36      	ldr	r6, [pc, #216]	; (800185c <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8001782:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001784:	2000      	movs	r0, #0
 8001786:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001788:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 800178a:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800178c:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800178e:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001790:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001792:	4b33      	ldr	r3, [pc, #204]	; (8001860 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001794:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001796:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001798:	4b32      	ldr	r3, [pc, #200]	; (8001864 <pvPortMalloc+0x118>)
 800179a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800179c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80017a0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80017a2:	682f      	ldr	r7, [r5, #0]
 80017a4:	4227      	tst	r7, r4
 80017a6:	d116      	bne.n	80017d6 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80017a8:	2c00      	cmp	r4, #0
 80017aa:	d041      	beq.n	8001830 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 80017ac:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80017b0:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80017b2:	bf1c      	itt	ne
 80017b4:	f023 0307 	bicne.w	r3, r3, #7
 80017b8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80017ba:	b163      	cbz	r3, 80017d6 <pvPortMalloc+0x8a>
 80017bc:	4a29      	ldr	r2, [pc, #164]	; (8001864 <pvPortMalloc+0x118>)
 80017be:	6816      	ldr	r6, [r2, #0]
 80017c0:	42b3      	cmp	r3, r6
 80017c2:	4690      	mov	r8, r2
 80017c4:	d807      	bhi.n	80017d6 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80017c6:	4a25      	ldr	r2, [pc, #148]	; (800185c <pvPortMalloc+0x110>)
 80017c8:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80017ca:	6868      	ldr	r0, [r5, #4]
 80017cc:	4283      	cmp	r3, r0
 80017ce:	d804      	bhi.n	80017da <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80017d0:	6809      	ldr	r1, [r1, #0]
 80017d2:	428d      	cmp	r5, r1
 80017d4:	d107      	bne.n	80017e6 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80017d6:	2400      	movs	r4, #0
 80017d8:	e02a      	b.n	8001830 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80017da:	682c      	ldr	r4, [r5, #0]
 80017dc:	2c00      	cmp	r4, #0
 80017de:	d0f7      	beq.n	80017d0 <pvPortMalloc+0x84>
 80017e0:	462a      	mov	r2, r5
 80017e2:	4625      	mov	r5, r4
 80017e4:	e7f1      	b.n	80017ca <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80017e6:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80017e8:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80017ea:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80017ec:	1ac2      	subs	r2, r0, r3
 80017ee:	2a10      	cmp	r2, #16
 80017f0:	d90f      	bls.n	8001812 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80017f2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80017f4:	0741      	lsls	r1, r0, #29
 80017f6:	d008      	beq.n	800180a <pvPortMalloc+0xbe>
 80017f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017fc:	f383 8811 	msr	BASEPRI, r3
 8001800:	f3bf 8f6f 	isb	sy
 8001804:	f3bf 8f4f 	dsb	sy
 8001808:	e7fe      	b.n	8001808 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800180a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800180c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800180e:	f7ff ff79 	bl	8001704 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001812:	4913      	ldr	r1, [pc, #76]	; (8001860 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001814:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001816:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001818:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800181a:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800181c:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800181e:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001822:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001826:	bf38      	it	cc
 8001828:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800182a:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800182c:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800182e:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8001830:	f000 fcca 	bl	80021c8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001834:	0763      	lsls	r3, r4, #29
 8001836:	d008      	beq.n	800184a <pvPortMalloc+0xfe>
 8001838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800183c:	f383 8811 	msr	BASEPRI, r3
 8001840:	f3bf 8f6f 	isb	sy
 8001844:	f3bf 8f4f 	dsb	sy
 8001848:	e7fe      	b.n	8001848 <pvPortMalloc+0xfc>
}
 800184a:	4620      	mov	r0, r4
 800184c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001850:	20000030 	.word	0x20000030
 8001854:	20003c34 	.word	0x20003c34
 8001858:	20000034 	.word	0x20000034
 800185c:	20003c40 	.word	0x20003c40
 8001860:	20003c3c 	.word	0x20003c3c
 8001864:	20003c38 	.word	0x20003c38

08001868 <vPortFree>:
{
 8001868:	b510      	push	{r4, lr}
	if( pv != NULL )
 800186a:	4604      	mov	r4, r0
 800186c:	b370      	cbz	r0, 80018cc <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800186e:	4a18      	ldr	r2, [pc, #96]	; (80018d0 <vPortFree+0x68>)
 8001870:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001874:	6812      	ldr	r2, [r2, #0]
 8001876:	4213      	tst	r3, r2
 8001878:	d108      	bne.n	800188c <vPortFree+0x24>
 800187a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800187e:	f383 8811 	msr	BASEPRI, r3
 8001882:	f3bf 8f6f 	isb	sy
 8001886:	f3bf 8f4f 	dsb	sy
 800188a:	e7fe      	b.n	800188a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800188c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001890:	b141      	cbz	r1, 80018a4 <vPortFree+0x3c>
 8001892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001896:	f383 8811 	msr	BASEPRI, r3
 800189a:	f3bf 8f6f 	isb	sy
 800189e:	f3bf 8f4f 	dsb	sy
 80018a2:	e7fe      	b.n	80018a2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80018a4:	ea23 0302 	bic.w	r3, r3, r2
 80018a8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80018ac:	f000 fbf2 	bl	8002094 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80018b0:	4a08      	ldr	r2, [pc, #32]	; (80018d4 <vPortFree+0x6c>)
 80018b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80018b6:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80018b8:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80018bc:	440b      	add	r3, r1
 80018be:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80018c0:	f7ff ff20 	bl	8001704 <prvInsertBlockIntoFreeList>
}
 80018c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80018c8:	f000 bc7e 	b.w	80021c8 <xTaskResumeAll>
 80018cc:	bd10      	pop	{r4, pc}
 80018ce:	bf00      	nop
 80018d0:	20003c34 	.word	0x20003c34
 80018d4:	20003c38 	.word	0x20003c38

080018d8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80018d8:	b570      	push	{r4, r5, r6, lr}
 80018da:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80018dc:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80018de:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 80018e0:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80018e2:	b942      	cbnz	r2, 80018f6 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80018e4:	6805      	ldr	r5, [r0, #0]
 80018e6:	b99d      	cbnz	r5, 8001910 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80018e8:	6840      	ldr	r0, [r0, #4]
 80018ea:	f000 fe7f 	bl	80025ec <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80018ee:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80018f0:	3601      	adds	r6, #1
 80018f2:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80018f4:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80018f6:	b96d      	cbnz	r5, 8001914 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80018f8:	6880      	ldr	r0, [r0, #8]
 80018fa:	f001 f989 	bl	8002c10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80018fe:	68a3      	ldr	r3, [r4, #8]
 8001900:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001902:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001904:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001906:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001908:	4293      	cmp	r3, r2
 800190a:	d301      	bcc.n	8001910 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800190c:	6823      	ldr	r3, [r4, #0]
 800190e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8001910:	2000      	movs	r0, #0
 8001912:	e7ed      	b.n	80018f0 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001914:	68c0      	ldr	r0, [r0, #12]
 8001916:	f001 f97b 	bl	8002c10 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800191a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800191c:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800191e:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001920:	425b      	negs	r3, r3
 8001922:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001924:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001926:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001928:	bf3e      	ittt	cc
 800192a:	6862      	ldrcc	r2, [r4, #4]
 800192c:	189b      	addcc	r3, r3, r2
 800192e:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8001930:	2d02      	cmp	r5, #2
 8001932:	d1ed      	bne.n	8001910 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001934:	b10e      	cbz	r6, 800193a <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8001936:	3e01      	subs	r6, #1
 8001938:	e7ea      	b.n	8001910 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800193a:	4630      	mov	r0, r6
 800193c:	e7d8      	b.n	80018f0 <prvCopyDataToQueue+0x18>

0800193e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800193e:	4603      	mov	r3, r0
 8001940:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8001944:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001946:	b162      	cbz	r2, 8001962 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001948:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800194a:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800194c:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800194e:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001950:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001952:	bf24      	itt	cs
 8001954:	6819      	ldrcs	r1, [r3, #0]
 8001956:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001958:	68d9      	ldr	r1, [r3, #12]
	}
}
 800195a:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800195e:	f001 b957 	b.w	8002c10 <memcpy>
}
 8001962:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001966:	4770      	bx	lr

08001968 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001968:	b570      	push	{r4, r5, r6, lr}
 800196a:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800196c:	f7ff fdc2 	bl	80014f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001970:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001974:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8001978:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800197a:	2d00      	cmp	r5, #0
 800197c:	dc14      	bgt.n	80019a8 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800197e:	23ff      	movs	r3, #255	; 0xff
 8001980:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001984:	f7ff fdd8 	bl	8001538 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001988:	f7ff fdb4 	bl	80014f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800198c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001990:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8001994:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001996:	2d00      	cmp	r5, #0
 8001998:	dc12      	bgt.n	80019c0 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800199a:	23ff      	movs	r3, #255	; 0xff
 800199c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80019a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80019a4:	f7ff bdc8 	b.w	8001538 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80019a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0e7      	beq.n	800197e <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80019ae:	4630      	mov	r0, r6
 80019b0:	f000 fd34 	bl	800241c <xTaskRemoveFromEventList>
 80019b4:	b108      	cbz	r0, 80019ba <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80019b6:	f000 fdbd 	bl	8002534 <vTaskMissedYield>
 80019ba:	3d01      	subs	r5, #1
 80019bc:	b26d      	sxtb	r5, r5
 80019be:	e7dc      	b.n	800197a <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80019c0:	6923      	ldr	r3, [r4, #16]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d0e9      	beq.n	800199a <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80019c6:	4630      	mov	r0, r6
 80019c8:	f000 fd28 	bl	800241c <xTaskRemoveFromEventList>
 80019cc:	b108      	cbz	r0, 80019d2 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80019ce:	f000 fdb1 	bl	8002534 <vTaskMissedYield>
 80019d2:	3d01      	subs	r5, #1
 80019d4:	b26d      	sxtb	r5, r5
 80019d6:	e7de      	b.n	8001996 <prvUnlockQueue+0x2e>

080019d8 <xQueueGenericReset>:
{
 80019d8:	b538      	push	{r3, r4, r5, lr}
 80019da:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80019dc:	4604      	mov	r4, r0
 80019de:	b940      	cbnz	r0, 80019f2 <xQueueGenericReset+0x1a>
 80019e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019e4:	f383 8811 	msr	BASEPRI, r3
 80019e8:	f3bf 8f6f 	isb	sy
 80019ec:	f3bf 8f4f 	dsb	sy
 80019f0:	e7fe      	b.n	80019f0 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 80019f2:	f7ff fd7f 	bl	80014f4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80019f6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80019f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80019fa:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80019fc:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80019fe:	4343      	muls	r3, r0
 8001a00:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001a02:	1a1b      	subs	r3, r3, r0
 8001a04:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001a06:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001a08:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a0a:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8001a0c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a0e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8001a10:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001a14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8001a18:	b995      	cbnz	r5, 8001a40 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a1a:	6923      	ldr	r3, [r4, #16]
 8001a1c:	b163      	cbz	r3, 8001a38 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a1e:	f104 0010 	add.w	r0, r4, #16
 8001a22:	f000 fcfb 	bl	800241c <xTaskRemoveFromEventList>
 8001a26:	b138      	cbz	r0, 8001a38 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8001a28:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <xQueueGenericReset+0x7c>)
 8001a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	f3bf 8f4f 	dsb	sy
 8001a34:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8001a38:	f7ff fd7e 	bl	8001538 <vPortExitCritical>
}
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001a40:	f104 0010 	add.w	r0, r4, #16
 8001a44:	f7ff fcb4 	bl	80013b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001a48:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001a4c:	f7ff fcb0 	bl	80013b0 <vListInitialise>
 8001a50:	e7f2      	b.n	8001a38 <xQueueGenericReset+0x60>
 8001a52:	bf00      	nop
 8001a54:	e000ed04 	.word	0xe000ed04

08001a58 <xQueueGenericCreate>:
	{
 8001a58:	b570      	push	{r4, r5, r6, lr}
 8001a5a:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001a5c:	4606      	mov	r6, r0
 8001a5e:	b940      	cbnz	r0, 8001a72 <xQueueGenericCreate+0x1a>
 8001a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a64:	f383 8811 	msr	BASEPRI, r3
 8001a68:	f3bf 8f6f 	isb	sy
 8001a6c:	f3bf 8f4f 	dsb	sy
 8001a70:	e7fe      	b.n	8001a70 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a72:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001a74:	3048      	adds	r0, #72	; 0x48
 8001a76:	f7ff fe69 	bl	800174c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8001a7a:	4604      	mov	r4, r0
 8001a7c:	b138      	cbz	r0, 8001a8e <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8001a7e:	b945      	cbnz	r5, 8001a92 <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001a80:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8001a82:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001a84:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001a86:	2101      	movs	r1, #1
 8001a88:	4620      	mov	r0, r4
 8001a8a:	f7ff ffa5 	bl	80019d8 <xQueueGenericReset>
	}
 8001a8e:	4620      	mov	r0, r4
 8001a90:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001a92:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001a96:	6003      	str	r3, [r0, #0]
 8001a98:	e7f3      	b.n	8001a82 <xQueueGenericCreate+0x2a>
	...

08001a9c <xQueueGenericSend>:
{
 8001a9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001aa0:	4689      	mov	r9, r1
 8001aa2:	9201      	str	r2, [sp, #4]
 8001aa4:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8001aa6:	4604      	mov	r4, r0
 8001aa8:	b940      	cbnz	r0, 8001abc <xQueueGenericSend+0x20>
 8001aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aae:	f383 8811 	msr	BASEPRI, r3
 8001ab2:	f3bf 8f6f 	isb	sy
 8001ab6:	f3bf 8f4f 	dsb	sy
 8001aba:	e7fe      	b.n	8001aba <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001abc:	2900      	cmp	r1, #0
 8001abe:	f040 8088 	bne.w	8001bd2 <xQueueGenericSend+0x136>
 8001ac2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 8084 	beq.w	8001bd2 <xQueueGenericSend+0x136>
 8001aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ace:	f383 8811 	msr	BASEPRI, r3
 8001ad2:	f3bf 8f6f 	isb	sy
 8001ad6:	f3bf 8f4f 	dsb	sy
 8001ada:	e7fe      	b.n	8001ada <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001adc:	9e01      	ldr	r6, [sp, #4]
 8001ade:	2e00      	cmp	r6, #0
 8001ae0:	f000 8082 	beq.w	8001be8 <xQueueGenericSend+0x14c>
 8001ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ae8:	f383 8811 	msr	BASEPRI, r3
 8001aec:	f3bf 8f6f 	isb	sy
 8001af0:	f3bf 8f4f 	dsb	sy
 8001af4:	e7fe      	b.n	8001af4 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001af6:	9d01      	ldr	r5, [sp, #4]
 8001af8:	b91d      	cbnz	r5, 8001b02 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 8001afa:	f7ff fd1d 	bl	8001538 <vPortExitCritical>
			return errQUEUE_FULL;
 8001afe:	2000      	movs	r0, #0
 8001b00:	e058      	b.n	8001bb4 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8001b02:	b916      	cbnz	r6, 8001b0a <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 8001b04:	a802      	add	r0, sp, #8
 8001b06:	f000 fccb 	bl	80024a0 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8001b0a:	f7ff fd15 	bl	8001538 <vPortExitCritical>
		vTaskSuspendAll();
 8001b0e:	f000 fac1 	bl	8002094 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001b12:	f7ff fcef 	bl	80014f4 <vPortEnterCritical>
 8001b16:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001b1a:	2bff      	cmp	r3, #255	; 0xff
 8001b1c:	bf08      	it	eq
 8001b1e:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8001b22:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001b26:	2bff      	cmp	r3, #255	; 0xff
 8001b28:	bf08      	it	eq
 8001b2a:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8001b2e:	f7ff fd03 	bl	8001538 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001b32:	a901      	add	r1, sp, #4
 8001b34:	a802      	add	r0, sp, #8
 8001b36:	f000 fcc3 	bl	80024c0 <xTaskCheckForTimeOut>
 8001b3a:	2800      	cmp	r0, #0
 8001b3c:	d143      	bne.n	8001bc6 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001b3e:	f7ff fcd9 	bl	80014f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001b42:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8001b44:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8001b46:	f7ff fcf7 	bl	8001538 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001b4a:	42ae      	cmp	r6, r5
 8001b4c:	d135      	bne.n	8001bba <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001b4e:	9901      	ldr	r1, [sp, #4]
 8001b50:	f104 0010 	add.w	r0, r4, #16
 8001b54:	f000 fc48 	bl	80023e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001b58:	4620      	mov	r0, r4
 8001b5a:	f7ff ff05 	bl	8001968 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001b5e:	f000 fb33 	bl	80021c8 <xTaskResumeAll>
 8001b62:	b938      	cbnz	r0, 8001b74 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8001b64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b68:	f8ca 3000 	str.w	r3, [sl]
 8001b6c:	f3bf 8f4f 	dsb	sy
 8001b70:	f3bf 8f6f 	isb	sy
 8001b74:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8001b76:	f7ff fcbd 	bl	80014f4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001b7a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001b7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d301      	bcc.n	8001b86 <xQueueGenericSend+0xea>
 8001b82:	2f02      	cmp	r7, #2
 8001b84:	d1b7      	bne.n	8001af6 <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001b86:	463a      	mov	r2, r7
 8001b88:	4649      	mov	r1, r9
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	f7ff fea4 	bl	80018d8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b92:	b11b      	cbz	r3, 8001b9c <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b94:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001b98:	f000 fc40 	bl	800241c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8001b9c:	b138      	cbz	r0, 8001bae <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 8001b9e:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <xQueueGenericSend+0x168>)
 8001ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	f3bf 8f4f 	dsb	sy
 8001baa:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001bae:	f7ff fcc3 	bl	8001538 <vPortExitCritical>
				return pdPASS;
 8001bb2:	2001      	movs	r0, #1
}
 8001bb4:	b004      	add	sp, #16
 8001bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8001bba:	4620      	mov	r0, r4
 8001bbc:	f7ff fed4 	bl	8001968 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001bc0:	f000 fb02 	bl	80021c8 <xTaskResumeAll>
 8001bc4:	e7d6      	b.n	8001b74 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 8001bc6:	4620      	mov	r0, r4
 8001bc8:	f7ff fece 	bl	8001968 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001bcc:	f000 fafc 	bl	80021c8 <xTaskResumeAll>
 8001bd0:	e795      	b.n	8001afe <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001bd2:	2f02      	cmp	r7, #2
 8001bd4:	d102      	bne.n	8001bdc <xQueueGenericSend+0x140>
 8001bd6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d10a      	bne.n	8001bf2 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001bdc:	f000 fcb0 	bl	8002540 <xTaskGetSchedulerState>
 8001be0:	2800      	cmp	r0, #0
 8001be2:	f43f af7b 	beq.w	8001adc <xQueueGenericSend+0x40>
 8001be6:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8001be8:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8001bec:	f8df a014 	ldr.w	sl, [pc, #20]	; 8001c04 <xQueueGenericSend+0x168>
 8001bf0:	e7c1      	b.n	8001b76 <xQueueGenericSend+0xda>
 8001bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bf6:	f383 8811 	msr	BASEPRI, r3
 8001bfa:	f3bf 8f6f 	isb	sy
 8001bfe:	f3bf 8f4f 	dsb	sy
 8001c02:	e7fe      	b.n	8001c02 <xQueueGenericSend+0x166>
 8001c04:	e000ed04 	.word	0xe000ed04

08001c08 <xQueueGenericReceive>:
{
 8001c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c0c:	4688      	mov	r8, r1
 8001c0e:	9201      	str	r2, [sp, #4]
 8001c10:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 8001c12:	4604      	mov	r4, r0
 8001c14:	b940      	cbnz	r0, 8001c28 <xQueueGenericReceive+0x20>
 8001c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c1a:	f383 8811 	msr	BASEPRI, r3
 8001c1e:	f3bf 8f6f 	isb	sy
 8001c22:	f3bf 8f4f 	dsb	sy
 8001c26:	e7fe      	b.n	8001c26 <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c28:	2900      	cmp	r1, #0
 8001c2a:	f040 80a5 	bne.w	8001d78 <xQueueGenericReceive+0x170>
 8001c2e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 80a1 	beq.w	8001d78 <xQueueGenericReceive+0x170>
 8001c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c3a:	f383 8811 	msr	BASEPRI, r3
 8001c3e:	f3bf 8f6f 	isb	sy
 8001c42:	f3bf 8f4f 	dsb	sy
 8001c46:	e7fe      	b.n	8001c46 <xQueueGenericReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001c48:	9e01      	ldr	r6, [sp, #4]
 8001c4a:	2e00      	cmp	r6, #0
 8001c4c:	f000 809a 	beq.w	8001d84 <xQueueGenericReceive+0x17c>
 8001c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c54:	f383 8811 	msr	BASEPRI, r3
 8001c58:	f3bf 8f6f 	isb	sy
 8001c5c:	f3bf 8f4f 	dsb	sy
 8001c60:	e7fe      	b.n	8001c60 <xQueueGenericReceive+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001c62:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8001c64:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d06d      	beq.n	8001d46 <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001c6a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001c6e:	e05f      	b.n	8001d30 <xQueueGenericReceive+0x128>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001c70:	9d01      	ldr	r5, [sp, #4]
 8001c72:	b91d      	cbnz	r5, 8001c7c <xQueueGenericReceive+0x74>
					taskEXIT_CRITICAL();
 8001c74:	f7ff fc60 	bl	8001538 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8001c78:	4628      	mov	r0, r5
 8001c7a:	e067      	b.n	8001d4c <xQueueGenericReceive+0x144>
				else if( xEntryTimeSet == pdFALSE )
 8001c7c:	b916      	cbnz	r6, 8001c84 <xQueueGenericReceive+0x7c>
					vTaskSetTimeOutState( &xTimeOut );
 8001c7e:	a802      	add	r0, sp, #8
 8001c80:	f000 fc0e 	bl	80024a0 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8001c84:	f7ff fc58 	bl	8001538 <vPortExitCritical>
		vTaskSuspendAll();
 8001c88:	f000 fa04 	bl	8002094 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001c8c:	f7ff fc32 	bl	80014f4 <vPortEnterCritical>
 8001c90:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001c94:	2bff      	cmp	r3, #255	; 0xff
 8001c96:	bf08      	it	eq
 8001c98:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8001c9c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001ca0:	2bff      	cmp	r3, #255	; 0xff
 8001ca2:	bf08      	it	eq
 8001ca4:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8001ca8:	f7ff fc46 	bl	8001538 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001cac:	a901      	add	r1, sp, #4
 8001cae:	a802      	add	r0, sp, #8
 8001cb0:	f000 fc06 	bl	80024c0 <xTaskCheckForTimeOut>
 8001cb4:	2800      	cmp	r0, #0
 8001cb6:	d152      	bne.n	8001d5e <xQueueGenericReceive+0x156>
	taskENTER_CRITICAL();
 8001cb8:	f7ff fc1c 	bl	80014f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001cbc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8001cbe:	f7ff fc3b 	bl	8001538 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001cc2:	2d00      	cmp	r5, #0
 8001cc4:	d145      	bne.n	8001d52 <xQueueGenericReceive+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001cc6:	6823      	ldr	r3, [r4, #0]
 8001cc8:	b933      	cbnz	r3, 8001cd8 <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
 8001cca:	f7ff fc13 	bl	80014f4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8001cce:	6860      	ldr	r0, [r4, #4]
 8001cd0:	f000 fc46 	bl	8002560 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8001cd4:	f7ff fc30 	bl	8001538 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001cd8:	9901      	ldr	r1, [sp, #4]
 8001cda:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001cde:	f000 fb83 	bl	80023e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001ce2:	4620      	mov	r0, r4
 8001ce4:	f7ff fe40 	bl	8001968 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001ce8:	f000 fa6e 	bl	80021c8 <xTaskResumeAll>
 8001cec:	b938      	cbnz	r0, 8001cfe <xQueueGenericReceive+0xf6>
					portYIELD_WITHIN_API();
 8001cee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001cf2:	f8ca 3000 	str.w	r3, [sl]
 8001cf6:	f3bf 8f4f 	dsb	sy
 8001cfa:	f3bf 8f6f 	isb	sy
 8001cfe:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8001d00:	f7ff fbf8 	bl	80014f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001d04:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001d06:	2d00      	cmp	r5, #0
 8001d08:	d0b2      	beq.n	8001c70 <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001d0a:	4641      	mov	r1, r8
 8001d0c:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001d0e:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001d10:	f7ff fe15 	bl	800193e <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8001d14:	f1b9 0f00 	cmp.w	r9, #0
 8001d18:	d1a3      	bne.n	8001c62 <xQueueGenericReceive+0x5a>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001d1a:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8001d1c:	3d01      	subs	r5, #1
 8001d1e:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001d20:	b913      	cbnz	r3, 8001d28 <xQueueGenericReceive+0x120>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8001d22:	f000 fcb3 	bl	800268c <pvTaskIncrementMutexHeldCount>
 8001d26:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d28:	6923      	ldr	r3, [r4, #16]
 8001d2a:	b163      	cbz	r3, 8001d46 <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d2c:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d30:	f000 fb74 	bl	800241c <xTaskRemoveFromEventList>
 8001d34:	b138      	cbz	r0, 8001d46 <xQueueGenericReceive+0x13e>
							queueYIELD_IF_USING_PREEMPTION();
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <xQueueGenericReceive+0x184>)
 8001d38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	f3bf 8f4f 	dsb	sy
 8001d42:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001d46:	f7ff fbf7 	bl	8001538 <vPortExitCritical>
				return pdPASS;
 8001d4a:	2001      	movs	r0, #1
}
 8001d4c:	b004      	add	sp, #16
 8001d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8001d52:	4620      	mov	r0, r4
 8001d54:	f7ff fe08 	bl	8001968 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001d58:	f000 fa36 	bl	80021c8 <xTaskResumeAll>
 8001d5c:	e7cf      	b.n	8001cfe <xQueueGenericReceive+0xf6>
			prvUnlockQueue( pxQueue );
 8001d5e:	4620      	mov	r0, r4
 8001d60:	f7ff fe02 	bl	8001968 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001d64:	f000 fa30 	bl	80021c8 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8001d68:	f7ff fbc4 	bl	80014f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001d6c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8001d6e:	f7ff fbe3 	bl	8001538 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001d72:	2d00      	cmp	r5, #0
 8001d74:	d1c3      	bne.n	8001cfe <xQueueGenericReceive+0xf6>
 8001d76:	e77f      	b.n	8001c78 <xQueueGenericReceive+0x70>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001d78:	f000 fbe2 	bl	8002540 <xTaskGetSchedulerState>
 8001d7c:	2800      	cmp	r0, #0
 8001d7e:	f43f af63 	beq.w	8001c48 <xQueueGenericReceive+0x40>
 8001d82:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8001d84:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8001d86:	f8df a004 	ldr.w	sl, [pc, #4]	; 8001d8c <xQueueGenericReceive+0x184>
 8001d8a:	e7b9      	b.n	8001d00 <xQueueGenericReceive+0xf8>
 8001d8c:	e000ed04 	.word	0xe000ed04

08001d90 <uxQueueMessagesWaiting>:
{
 8001d90:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 8001d92:	4604      	mov	r4, r0
 8001d94:	b940      	cbnz	r0, 8001da8 <uxQueueMessagesWaiting+0x18>
 8001d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d9a:	f383 8811 	msr	BASEPRI, r3
 8001d9e:	f3bf 8f6f 	isb	sy
 8001da2:	f3bf 8f4f 	dsb	sy
 8001da6:	e7fe      	b.n	8001da6 <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 8001da8:	f7ff fba4 	bl	80014f4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8001dac:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8001dae:	f7ff fbc3 	bl	8001538 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8001db2:	4620      	mov	r0, r4
 8001db4:	bd10      	pop	{r4, pc}
	...

08001db8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001db8:	4a06      	ldr	r2, [pc, #24]	; (8001dd4 <prvResetNextTaskUnblockTime+0x1c>)
 8001dba:	6813      	ldr	r3, [r2, #0]
 8001dbc:	6819      	ldr	r1, [r3, #0]
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <prvResetNextTaskUnblockTime+0x20>)
 8001dc0:	b919      	cbnz	r1, 8001dca <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001dc2:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001dce:	68d2      	ldr	r2, [r2, #12]
 8001dd0:	6852      	ldr	r2, [r2, #4]
 8001dd2:	e7f8      	b.n	8001dc6 <prvResetNextTaskUnblockTime+0xe>
 8001dd4:	20003c4c 	.word	0x20003c4c
 8001dd8:	20003d24 	.word	0x20003d24

08001ddc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001dde:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001de0:	4e1b      	ldr	r6, [pc, #108]	; (8001e50 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8001de2:	681d      	ldr	r5, [r3, #0]
{
 8001de4:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001de6:	6830      	ldr	r0, [r6, #0]
 8001de8:	3004      	adds	r0, #4
{
 8001dea:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001dec:	f7ff fb11 	bl	8001412 <uxListRemove>
 8001df0:	4633      	mov	r3, r6
 8001df2:	b940      	cbnz	r0, 8001e06 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001df4:	6831      	ldr	r1, [r6, #0]
 8001df6:	4e17      	ldr	r6, [pc, #92]	; (8001e54 <prvAddCurrentTaskToDelayedList+0x78>)
 8001df8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001dfa:	6832      	ldr	r2, [r6, #0]
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	4088      	lsls	r0, r1
 8001e00:	ea22 0200 	bic.w	r2, r2, r0
 8001e04:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001e06:	1c62      	adds	r2, r4, #1
 8001e08:	d107      	bne.n	8001e1a <prvAddCurrentTaskToDelayedList+0x3e>
 8001e0a:	b137      	cbz	r7, 8001e1a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e0c:	6819      	ldr	r1, [r3, #0]
 8001e0e:	4812      	ldr	r0, [pc, #72]	; (8001e58 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001e10:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001e12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e16:	f7ff bad9 	b.w	80013cc <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001e1a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001e1c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8001e1e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001e20:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8001e22:	d907      	bls.n	8001e34 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e24:	4a0d      	ldr	r2, [pc, #52]	; (8001e5c <prvAddCurrentTaskToDelayedList+0x80>)
 8001e26:	6810      	ldr	r0, [r2, #0]
 8001e28:	6819      	ldr	r1, [r3, #0]
}
 8001e2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e2e:	3104      	adds	r1, #4
 8001e30:	f7ff bad8 	b.w	80013e4 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e34:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <prvAddCurrentTaskToDelayedList+0x84>)
 8001e36:	6810      	ldr	r0, [r2, #0]
 8001e38:	6819      	ldr	r1, [r3, #0]
 8001e3a:	3104      	adds	r1, #4
 8001e3c:	f7ff fad2 	bl	80013e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001e40:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <prvAddCurrentTaskToDelayedList+0x88>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8001e46:	bf38      	it	cc
 8001e48:	601c      	strcc	r4, [r3, #0]
 8001e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e4c:	20003d6c 	.word	0x20003d6c
 8001e50:	20003c48 	.word	0x20003c48
 8001e54:	20003cf4 	.word	0x20003cf4
 8001e58:	20003d44 	.word	0x20003d44
 8001e5c:	20003c50 	.word	0x20003c50
 8001e60:	20003c4c 	.word	0x20003c4c
 8001e64:	20003d24 	.word	0x20003d24

08001e68 <prvTaskIsTaskSuspended.part.0>:
 8001e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e6c:	f383 8811 	msr	BASEPRI, r3
 8001e70:	f3bf 8f6f 	isb	sy
 8001e74:	f3bf 8f4f 	dsb	sy
 8001e78:	e7fe      	b.n	8001e78 <prvTaskIsTaskSuspended.part.0+0x10>
	...

08001e7c <xTaskCreate>:
	{
 8001e7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e80:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8001e84:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e86:	4650      	mov	r0, sl
	{
 8001e88:	460f      	mov	r7, r1
 8001e8a:	4699      	mov	r9, r3
 8001e8c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e8e:	f7ff fc5d 	bl	800174c <pvPortMalloc>
			if( pxStack != NULL )
 8001e92:	4605      	mov	r5, r0
 8001e94:	2800      	cmp	r0, #0
 8001e96:	f000 8096 	beq.w	8001fc6 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001e9a:	2054      	movs	r0, #84	; 0x54
 8001e9c:	f7ff fc56 	bl	800174c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001ea0:	4604      	mov	r4, r0
 8001ea2:	2800      	cmp	r0, #0
 8001ea4:	f000 808c 	beq.w	8001fc0 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001ea8:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8001eac:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001eae:	4455      	add	r5, sl
 8001eb0:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001eb2:	f025 0a07 	bic.w	sl, r5, #7
 8001eb6:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8001eba:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001ebc:	7859      	ldrb	r1, [r3, #1]
 8001ebe:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8001ec2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001ec6:	b109      	cbz	r1, 8001ecc <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001ec8:	42bb      	cmp	r3, r7
 8001eca:	d1f7      	bne.n	8001ebc <xTaskCreate+0x40>
 8001ecc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001ece:	2d06      	cmp	r5, #6
 8001ed0:	bf28      	it	cs
 8001ed2:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001ed4:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001ed8:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8001eda:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001edc:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001ede:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001ee0:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8001ee4:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001ee8:	f7ff fa6d 	bl	80013c6 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001eec:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001ef0:	f104 0018 	add.w	r0, r4, #24
 8001ef4:	f7ff fa67 	bl	80013c6 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001ef8:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001efc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001efe:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001f00:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001f02:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001f06:	464a      	mov	r2, r9
 8001f08:	4641      	mov	r1, r8
 8001f0a:	4650      	mov	r0, sl
 8001f0c:	f7ff fac4 	bl	8001498 <pxPortInitialiseStack>
 8001f10:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8001f12:	b106      	cbz	r6, 8001f16 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001f14:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8001f16:	f7ff faed 	bl	80014f4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001f1a:	4b32      	ldr	r3, [pc, #200]	; (8001fe4 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8001f1c:	4e32      	ldr	r6, [pc, #200]	; (8001fe8 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8002014 <xTaskCreate+0x198>
 8001f24:	3201      	adds	r2, #1
 8001f26:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001f28:	6835      	ldr	r5, [r6, #0]
 8001f2a:	2d00      	cmp	r5, #0
 8001f2c:	d14e      	bne.n	8001fcc <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8001f2e:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d11d      	bne.n	8001f72 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001f36:	eb08 0005 	add.w	r0, r8, r5
 8001f3a:	3514      	adds	r5, #20
 8001f3c:	f7ff fa38 	bl	80013b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001f40:	2d8c      	cmp	r5, #140	; 0x8c
 8001f42:	d1f8      	bne.n	8001f36 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8001f44:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8002018 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8001f48:	4d28      	ldr	r5, [pc, #160]	; (8001fec <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8001f4a:	4648      	mov	r0, r9
 8001f4c:	f7ff fa30 	bl	80013b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001f50:	4628      	mov	r0, r5
 8001f52:	f7ff fa2d 	bl	80013b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001f56:	4826      	ldr	r0, [pc, #152]	; (8001ff0 <xTaskCreate+0x174>)
 8001f58:	f7ff fa2a 	bl	80013b0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001f5c:	4825      	ldr	r0, [pc, #148]	; (8001ff4 <xTaskCreate+0x178>)
 8001f5e:	f7ff fa27 	bl	80013b0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001f62:	4825      	ldr	r0, [pc, #148]	; (8001ff8 <xTaskCreate+0x17c>)
 8001f64:	f7ff fa24 	bl	80013b0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001f68:	4b24      	ldr	r3, [pc, #144]	; (8001ffc <xTaskCreate+0x180>)
 8001f6a:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001f6e:	4b24      	ldr	r3, [pc, #144]	; (8002000 <xTaskCreate+0x184>)
 8001f70:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8001f72:	4a24      	ldr	r2, [pc, #144]	; (8002004 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8001f74:	4924      	ldr	r1, [pc, #144]	; (8002008 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8001f76:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001f78:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001f7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001f80:	2501      	movs	r5, #1
 8001f82:	fa05 f302 	lsl.w	r3, r5, r2
 8001f86:	4303      	orrs	r3, r0
 8001f88:	2014      	movs	r0, #20
 8001f8a:	600b      	str	r3, [r1, #0]
 8001f8c:	fb00 8002 	mla	r0, r0, r2, r8
 8001f90:	4639      	mov	r1, r7
 8001f92:	f7ff fa1b 	bl	80013cc <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001f96:	f7ff facf 	bl	8001538 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001f9a:	4b1c      	ldr	r3, [pc, #112]	; (800200c <xTaskCreate+0x190>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	b163      	cbz	r3, 8001fba <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001fa0:	6833      	ldr	r3, [r6, #0]
 8001fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fa4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d207      	bcs.n	8001fba <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8001faa:	4b19      	ldr	r3, [pc, #100]	; (8002010 <xTaskCreate+0x194>)
 8001fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	f3bf 8f4f 	dsb	sy
 8001fb6:	f3bf 8f6f 	isb	sy
	}
 8001fba:	4628      	mov	r0, r5
 8001fbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8001fc0:	4628      	mov	r0, r5
 8001fc2:	f7ff fc51 	bl	8001868 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001fc6:	f04f 35ff 	mov.w	r5, #4294967295
 8001fca:	e7f6      	b.n	8001fba <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	; (800200c <xTaskCreate+0x190>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1ce      	bne.n	8001f72 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001fd4:	6833      	ldr	r3, [r6, #0]
 8001fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001fda:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001fdc:	bf98      	it	ls
 8001fde:	6034      	strls	r4, [r6, #0]
 8001fe0:	e7c7      	b.n	8001f72 <xTaskCreate+0xf6>
 8001fe2:	bf00      	nop
 8001fe4:	20003ce0 	.word	0x20003ce0
 8001fe8:	20003c48 	.word	0x20003c48
 8001fec:	20003d0c 	.word	0x20003d0c
 8001ff0:	20003d2c 	.word	0x20003d2c
 8001ff4:	20003d58 	.word	0x20003d58
 8001ff8:	20003d44 	.word	0x20003d44
 8001ffc:	20003c4c 	.word	0x20003c4c
 8002000:	20003c50 	.word	0x20003c50
 8002004:	20003cf0 	.word	0x20003cf0
 8002008:	20003cf4 	.word	0x20003cf4
 800200c:	20003d40 	.word	0x20003d40
 8002010:	e000ed04 	.word	0xe000ed04
 8002014:	20003c54 	.word	0x20003c54
 8002018:	20003cf8 	.word	0x20003cf8

0800201c <vTaskStartScheduler>:
{
 800201c:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800201e:	4b17      	ldr	r3, [pc, #92]	; (800207c <vTaskStartScheduler+0x60>)
 8002020:	9301      	str	r3, [sp, #4]
 8002022:	2400      	movs	r4, #0
 8002024:	9400      	str	r4, [sp, #0]
 8002026:	4623      	mov	r3, r4
 8002028:	2280      	movs	r2, #128	; 0x80
 800202a:	4915      	ldr	r1, [pc, #84]	; (8002080 <vTaskStartScheduler+0x64>)
 800202c:	4815      	ldr	r0, [pc, #84]	; (8002084 <vTaskStartScheduler+0x68>)
 800202e:	f7ff ff25 	bl	8001e7c <xTaskCreate>
	if( xReturn == pdPASS )
 8002032:	2801      	cmp	r0, #1
 8002034:	d114      	bne.n	8002060 <vTaskStartScheduler+0x44>
 8002036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800203a:	f383 8811 	msr	BASEPRI, r3
 800203e:	f3bf 8f6f 	isb	sy
 8002042:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002046:	4b10      	ldr	r3, [pc, #64]	; (8002088 <vTaskStartScheduler+0x6c>)
 8002048:	f04f 32ff 	mov.w	r2, #4294967295
 800204c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800204e:	4b0f      	ldr	r3, [pc, #60]	; (800208c <vTaskStartScheduler+0x70>)
 8002050:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002052:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <vTaskStartScheduler+0x74>)
 8002054:	601c      	str	r4, [r3, #0]
}
 8002056:	b002      	add	sp, #8
 8002058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800205c:	f7ff badc 	b.w	8001618 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002060:	3001      	adds	r0, #1
 8002062:	d108      	bne.n	8002076 <vTaskStartScheduler+0x5a>
 8002064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002068:	f383 8811 	msr	BASEPRI, r3
 800206c:	f3bf 8f6f 	isb	sy
 8002070:	f3bf 8f4f 	dsb	sy
 8002074:	e7fe      	b.n	8002074 <vTaskStartScheduler+0x58>
}
 8002076:	b002      	add	sp, #8
 8002078:	bd10      	pop	{r4, pc}
 800207a:	bf00      	nop
 800207c:	20003d20 	.word	0x20003d20
 8002080:	08002c64 	.word	0x08002c64
 8002084:	08002301 	.word	0x08002301
 8002088:	20003d24 	.word	0x20003d24
 800208c:	20003d40 	.word	0x20003d40
 8002090:	20003d6c 	.word	0x20003d6c

08002094 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002094:	4a02      	ldr	r2, [pc, #8]	; (80020a0 <vTaskSuspendAll+0xc>)
 8002096:	6813      	ldr	r3, [r2, #0]
 8002098:	3301      	adds	r3, #1
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	20003cec 	.word	0x20003cec

080020a4 <xTaskIncrementTick>:
{
 80020a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020a8:	4b3c      	ldr	r3, [pc, #240]	; (800219c <xTaskIncrementTick+0xf8>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d153      	bne.n	8002158 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 80020b0:	4b3b      	ldr	r3, [pc, #236]	; (80021a0 <xTaskIncrementTick+0xfc>)
 80020b2:	681c      	ldr	r4, [r3, #0]
 80020b4:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80020b6:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 80020b8:	b9bc      	cbnz	r4, 80020ea <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80020ba:	4b3a      	ldr	r3, [pc, #232]	; (80021a4 <xTaskIncrementTick+0x100>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	6812      	ldr	r2, [r2, #0]
 80020c0:	b142      	cbz	r2, 80020d4 <xTaskIncrementTick+0x30>
 80020c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c6:	f383 8811 	msr	BASEPRI, r3
 80020ca:	f3bf 8f6f 	isb	sy
 80020ce:	f3bf 8f4f 	dsb	sy
 80020d2:	e7fe      	b.n	80020d2 <xTaskIncrementTick+0x2e>
 80020d4:	4a34      	ldr	r2, [pc, #208]	; (80021a8 <xTaskIncrementTick+0x104>)
 80020d6:	6819      	ldr	r1, [r3, #0]
 80020d8:	6810      	ldr	r0, [r2, #0]
 80020da:	6018      	str	r0, [r3, #0]
 80020dc:	6011      	str	r1, [r2, #0]
 80020de:	4a33      	ldr	r2, [pc, #204]	; (80021ac <xTaskIncrementTick+0x108>)
 80020e0:	6813      	ldr	r3, [r2, #0]
 80020e2:	3301      	adds	r3, #1
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	f7ff fe67 	bl	8001db8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80020ea:	4d31      	ldr	r5, [pc, #196]	; (80021b0 <xTaskIncrementTick+0x10c>)
 80020ec:	4f31      	ldr	r7, [pc, #196]	; (80021b4 <xTaskIncrementTick+0x110>)
 80020ee:	682b      	ldr	r3, [r5, #0]
 80020f0:	429c      	cmp	r4, r3
 80020f2:	f04f 0b00 	mov.w	fp, #0
 80020f6:	d33e      	bcc.n	8002176 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020f8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80021a4 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80020fc:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80021c4 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002100:	f8d8 2000 	ldr.w	r2, [r8]
 8002104:	6812      	ldr	r2, [r2, #0]
 8002106:	bb72      	cbnz	r2, 8002166 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002108:	f04f 32ff 	mov.w	r2, #4294967295
 800210c:	602a      	str	r2, [r5, #0]
					break;
 800210e:	e032      	b.n	8002176 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002110:	f106 0a04 	add.w	sl, r6, #4
 8002114:	4650      	mov	r0, sl
 8002116:	f7ff f97c 	bl	8001412 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800211a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800211c:	b119      	cbz	r1, 8002126 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800211e:	f106 0018 	add.w	r0, r6, #24
 8002122:	f7ff f976 	bl	8001412 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002126:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002128:	f8d9 3000 	ldr.w	r3, [r9]
 800212c:	2201      	movs	r2, #1
 800212e:	fa02 f100 	lsl.w	r1, r2, r0
 8002132:	4319      	orrs	r1, r3
 8002134:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <xTaskIncrementTick+0x114>)
 8002136:	f8c9 1000 	str.w	r1, [r9]
 800213a:	f04f 0e14 	mov.w	lr, #20
 800213e:	4651      	mov	r1, sl
 8002140:	fb0e 3000 	mla	r0, lr, r0, r3
 8002144:	f7ff f942 	bl	80013cc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002148:	6838      	ldr	r0, [r7, #0]
 800214a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800214c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800214e:	4291      	cmp	r1, r2
 8002150:	bf28      	it	cs
 8002152:	f04f 0b01 	movcs.w	fp, #1
 8002156:	e7d3      	b.n	8002100 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8002158:	4a18      	ldr	r2, [pc, #96]	; (80021bc <xTaskIncrementTick+0x118>)
 800215a:	6813      	ldr	r3, [r2, #0]
 800215c:	3301      	adds	r3, #1
 800215e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8002160:	f04f 0b00 	mov.w	fp, #0
 8002164:	e011      	b.n	800218a <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002166:	f8d8 2000 	ldr.w	r2, [r8]
 800216a:	68d2      	ldr	r2, [r2, #12]
 800216c:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800216e:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002170:	428c      	cmp	r4, r1
 8002172:	d2cd      	bcs.n	8002110 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8002174:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <xTaskIncrementTick+0x114>)
 800217a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800217c:	2214      	movs	r2, #20
 800217e:	434a      	muls	r2, r1
 8002180:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8002182:	2a02      	cmp	r2, #2
 8002184:	bf28      	it	cs
 8002186:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800218a:	4a0d      	ldr	r2, [pc, #52]	; (80021c0 <xTaskIncrementTick+0x11c>)
 800218c:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800218e:	2a00      	cmp	r2, #0
 8002190:	bf18      	it	ne
 8002192:	f04f 0b01 	movne.w	fp, #1
}
 8002196:	4658      	mov	r0, fp
 8002198:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800219c:	20003cec 	.word	0x20003cec
 80021a0:	20003d6c 	.word	0x20003d6c
 80021a4:	20003c4c 	.word	0x20003c4c
 80021a8:	20003c50 	.word	0x20003c50
 80021ac:	20003d28 	.word	0x20003d28
 80021b0:	20003d24 	.word	0x20003d24
 80021b4:	20003c48 	.word	0x20003c48
 80021b8:	20003c54 	.word	0x20003c54
 80021bc:	20003ce8 	.word	0x20003ce8
 80021c0:	20003d70 	.word	0x20003d70
 80021c4:	20003cf4 	.word	0x20003cf4

080021c8 <xTaskResumeAll>:
{
 80021c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80021cc:	4c31      	ldr	r4, [pc, #196]	; (8002294 <xTaskResumeAll+0xcc>)
 80021ce:	6823      	ldr	r3, [r4, #0]
 80021d0:	b943      	cbnz	r3, 80021e4 <xTaskResumeAll+0x1c>
 80021d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d6:	f383 8811 	msr	BASEPRI, r3
 80021da:	f3bf 8f6f 	isb	sy
 80021de:	f3bf 8f4f 	dsb	sy
 80021e2:	e7fe      	b.n	80021e2 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80021e4:	f7ff f986 	bl	80014f4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80021e8:	6823      	ldr	r3, [r4, #0]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021ee:	6824      	ldr	r4, [r4, #0]
 80021f0:	b12c      	cbz	r4, 80021fe <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80021f2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80021f4:	f7ff f9a0 	bl	8001538 <vPortExitCritical>
}
 80021f8:	4620      	mov	r0, r4
 80021fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80021fe:	4b26      	ldr	r3, [pc, #152]	; (8002298 <xTaskResumeAll+0xd0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f5      	beq.n	80021f2 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002206:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80022b0 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 800220a:	4f24      	ldr	r7, [pc, #144]	; (800229c <xTaskResumeAll+0xd4>)
 800220c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80022b4 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002210:	f8d9 3000 	ldr.w	r3, [r9]
 8002214:	b9e3      	cbnz	r3, 8002250 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8002216:	b10c      	cbz	r4, 800221c <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8002218:	f7ff fdce 	bl	8001db8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800221c:	4d20      	ldr	r5, [pc, #128]	; (80022a0 <xTaskResumeAll+0xd8>)
 800221e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002220:	b144      	cbz	r4, 8002234 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8002222:	4e20      	ldr	r6, [pc, #128]	; (80022a4 <xTaskResumeAll+0xdc>)
 8002224:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8002226:	f7ff ff3d 	bl	80020a4 <xTaskIncrementTick>
 800222a:	b100      	cbz	r0, 800222e <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 800222c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800222e:	3c01      	subs	r4, #1
 8002230:	d1f9      	bne.n	8002226 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8002232:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002234:	4b1b      	ldr	r3, [pc, #108]	; (80022a4 <xTaskResumeAll+0xdc>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0da      	beq.n	80021f2 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800223c:	4b1a      	ldr	r3, [pc, #104]	; (80022a8 <xTaskResumeAll+0xe0>)
 800223e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	f3bf 8f4f 	dsb	sy
 8002248:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800224c:	2401      	movs	r4, #1
 800224e:	e7d1      	b.n	80021f4 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002250:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002254:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002256:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002258:	f104 0018 	add.w	r0, r4, #24
 800225c:	f7ff f8d9 	bl	8001412 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002260:	4630      	mov	r0, r6
 8002262:	f7ff f8d6 	bl	8001412 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002266:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002268:	6839      	ldr	r1, [r7, #0]
 800226a:	2501      	movs	r5, #1
 800226c:	fa05 f302 	lsl.w	r3, r5, r2
 8002270:	2014      	movs	r0, #20
 8002272:	430b      	orrs	r3, r1
 8002274:	fb00 8002 	mla	r0, r0, r2, r8
 8002278:	4631      	mov	r1, r6
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	f7ff f8a6 	bl	80013cc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002280:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <xTaskResumeAll+0xe4>)
 8002282:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 800228a:	bf24      	itt	cs
 800228c:	4b05      	ldrcs	r3, [pc, #20]	; (80022a4 <xTaskResumeAll+0xdc>)
 800228e:	601d      	strcs	r5, [r3, #0]
 8002290:	e7be      	b.n	8002210 <xTaskResumeAll+0x48>
 8002292:	bf00      	nop
 8002294:	20003cec 	.word	0x20003cec
 8002298:	20003ce0 	.word	0x20003ce0
 800229c:	20003cf4 	.word	0x20003cf4
 80022a0:	20003ce8 	.word	0x20003ce8
 80022a4:	20003d70 	.word	0x20003d70
 80022a8:	e000ed04 	.word	0xe000ed04
 80022ac:	20003c48 	.word	0x20003c48
 80022b0:	20003d2c 	.word	0x20003d2c
 80022b4:	20003c54 	.word	0x20003c54

080022b8 <vTaskDelay>:
	{
 80022b8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80022ba:	b940      	cbnz	r0, 80022ce <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80022bc:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <vTaskDelay+0x40>)
 80022be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	f3bf 8f4f 	dsb	sy
 80022c8:	f3bf 8f6f 	isb	sy
 80022cc:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80022ce:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <vTaskDelay+0x44>)
 80022d0:	6819      	ldr	r1, [r3, #0]
 80022d2:	b141      	cbz	r1, 80022e6 <vTaskDelay+0x2e>
 80022d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d8:	f383 8811 	msr	BASEPRI, r3
 80022dc:	f3bf 8f6f 	isb	sy
 80022e0:	f3bf 8f4f 	dsb	sy
 80022e4:	e7fe      	b.n	80022e4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80022e6:	f7ff fed5 	bl	8002094 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80022ea:	f7ff fd77 	bl	8001ddc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80022ee:	f7ff ff6b 	bl	80021c8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80022f2:	2800      	cmp	r0, #0
 80022f4:	d0e2      	beq.n	80022bc <vTaskDelay+0x4>
 80022f6:	bd08      	pop	{r3, pc}
 80022f8:	e000ed04 	.word	0xe000ed04
 80022fc:	20003cec 	.word	0x20003cec

08002300 <prvIdleTask>:
{
 8002300:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002302:	4e17      	ldr	r6, [pc, #92]	; (8002360 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002304:	4c17      	ldr	r4, [pc, #92]	; (8002364 <prvIdleTask+0x64>)
 8002306:	6823      	ldr	r3, [r4, #0]
 8002308:	b963      	cbnz	r3, 8002324 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800230a:	4b17      	ldr	r3, [pc, #92]	; (8002368 <prvIdleTask+0x68>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d9f8      	bls.n	8002304 <prvIdleTask+0x4>
				taskYIELD();
 8002312:	4b16      	ldr	r3, [pc, #88]	; (800236c <prvIdleTask+0x6c>)
 8002314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	f3bf 8f4f 	dsb	sy
 800231e:	f3bf 8f6f 	isb	sy
 8002322:	e7ef      	b.n	8002304 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8002324:	f7ff feb6 	bl	8002094 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002328:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 800232a:	f7ff ff4d 	bl	80021c8 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800232e:	2d00      	cmp	r5, #0
 8002330:	d0e9      	beq.n	8002306 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8002332:	f7ff f8df 	bl	80014f4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002336:	68f3      	ldr	r3, [r6, #12]
 8002338:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800233a:	1d28      	adds	r0, r5, #4
 800233c:	f7ff f869 	bl	8001412 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002340:	4a0b      	ldr	r2, [pc, #44]	; (8002370 <prvIdleTask+0x70>)
 8002342:	6813      	ldr	r3, [r2, #0]
 8002344:	3b01      	subs	r3, #1
 8002346:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8002348:	6823      	ldr	r3, [r4, #0]
 800234a:	3b01      	subs	r3, #1
 800234c:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 800234e:	f7ff f8f3 	bl	8001538 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8002352:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002354:	f7ff fa88 	bl	8001868 <vPortFree>
			vPortFree( pxTCB );
 8002358:	4628      	mov	r0, r5
 800235a:	f7ff fa85 	bl	8001868 <vPortFree>
 800235e:	e7d2      	b.n	8002306 <prvIdleTask+0x6>
 8002360:	20003d58 	.word	0x20003d58
 8002364:	20003ce4 	.word	0x20003ce4
 8002368:	20003c54 	.word	0x20003c54
 800236c:	e000ed04 	.word	0xe000ed04
 8002370:	20003ce0 	.word	0x20003ce0

08002374 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002374:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <vTaskSwitchContext+0x60>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4b17      	ldr	r3, [pc, #92]	; (80023d8 <vTaskSwitchContext+0x64>)
{
 800237a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800237c:	b112      	cbz	r2, 8002384 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800237e:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8002384:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002386:	4b15      	ldr	r3, [pc, #84]	; (80023dc <vTaskSwitchContext+0x68>)
 8002388:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	f1c3 031f 	rsb	r3, r3, #31
 8002394:	2214      	movs	r2, #20
 8002396:	4912      	ldr	r1, [pc, #72]	; (80023e0 <vTaskSwitchContext+0x6c>)
 8002398:	435a      	muls	r2, r3
 800239a:	1888      	adds	r0, r1, r2
 800239c:	588c      	ldr	r4, [r1, r2]
 800239e:	b944      	cbnz	r4, 80023b2 <vTaskSwitchContext+0x3e>
	__asm volatile
 80023a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a4:	f383 8811 	msr	BASEPRI, r3
 80023a8:	f3bf 8f6f 	isb	sy
 80023ac:	f3bf 8f4f 	dsb	sy
 80023b0:	e7fe      	b.n	80023b0 <vTaskSwitchContext+0x3c>
 80023b2:	6844      	ldr	r4, [r0, #4]
 80023b4:	3208      	adds	r2, #8
 80023b6:	6864      	ldr	r4, [r4, #4]
 80023b8:	6044      	str	r4, [r0, #4]
 80023ba:	440a      	add	r2, r1
 80023bc:	4294      	cmp	r4, r2
 80023be:	bf04      	itt	eq
 80023c0:	6862      	ldreq	r2, [r4, #4]
 80023c2:	6042      	streq	r2, [r0, #4]
 80023c4:	2214      	movs	r2, #20
 80023c6:	fb02 1303 	mla	r3, r2, r3, r1
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <vTaskSwitchContext+0x70>)
 80023d0:	e7d6      	b.n	8002380 <vTaskSwitchContext+0xc>
 80023d2:	bf00      	nop
 80023d4:	20003cec 	.word	0x20003cec
 80023d8:	20003d70 	.word	0x20003d70
 80023dc:	20003cf4 	.word	0x20003cf4
 80023e0:	20003c54 	.word	0x20003c54
 80023e4:	20003c48 	.word	0x20003c48

080023e8 <vTaskPlaceOnEventList>:
{
 80023e8:	b510      	push	{r4, lr}
 80023ea:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80023ec:	b940      	cbnz	r0, 8002400 <vTaskPlaceOnEventList+0x18>
 80023ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f2:	f383 8811 	msr	BASEPRI, r3
 80023f6:	f3bf 8f6f 	isb	sy
 80023fa:	f3bf 8f4f 	dsb	sy
 80023fe:	e7fe      	b.n	80023fe <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <vTaskPlaceOnEventList+0x30>)
 8002402:	6819      	ldr	r1, [r3, #0]
 8002404:	3118      	adds	r1, #24
 8002406:	f7fe ffed 	bl	80013e4 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800240a:	4620      	mov	r0, r4
 800240c:	2101      	movs	r1, #1
}
 800240e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002412:	f7ff bce3 	b.w	8001ddc <prvAddCurrentTaskToDelayedList>
 8002416:	bf00      	nop
 8002418:	20003c48 	.word	0x20003c48

0800241c <xTaskRemoveFromEventList>:
{
 800241c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800241e:	68c3      	ldr	r3, [r0, #12]
 8002420:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8002422:	b944      	cbnz	r4, 8002436 <xTaskRemoveFromEventList+0x1a>
 8002424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002428:	f383 8811 	msr	BASEPRI, r3
 800242c:	f3bf 8f6f 	isb	sy
 8002430:	f3bf 8f4f 	dsb	sy
 8002434:	e7fe      	b.n	8002434 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002436:	f104 0518 	add.w	r5, r4, #24
 800243a:	4628      	mov	r0, r5
 800243c:	f7fe ffe9 	bl	8001412 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002440:	4b11      	ldr	r3, [pc, #68]	; (8002488 <xTaskRemoveFromEventList+0x6c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	b9e3      	cbnz	r3, 8002480 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002446:	1d25      	adds	r5, r4, #4
 8002448:	4628      	mov	r0, r5
 800244a:	f7fe ffe2 	bl	8001412 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800244e:	490f      	ldr	r1, [pc, #60]	; (800248c <xTaskRemoveFromEventList+0x70>)
 8002450:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002452:	6808      	ldr	r0, [r1, #0]
 8002454:	2301      	movs	r3, #1
 8002456:	4093      	lsls	r3, r2
 8002458:	4303      	orrs	r3, r0
 800245a:	600b      	str	r3, [r1, #0]
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <xTaskRemoveFromEventList+0x74>)
 800245e:	2014      	movs	r0, #20
 8002460:	4629      	mov	r1, r5
 8002462:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002466:	f7fe ffb1 	bl	80013cc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800246a:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <xTaskRemoveFromEventList+0x78>)
 800246c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002472:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8002474:	bf83      	ittte	hi
 8002476:	4b08      	ldrhi	r3, [pc, #32]	; (8002498 <xTaskRemoveFromEventList+0x7c>)
 8002478:	2001      	movhi	r0, #1
 800247a:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 800247c:	2000      	movls	r0, #0
}
 800247e:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002480:	4629      	mov	r1, r5
 8002482:	4806      	ldr	r0, [pc, #24]	; (800249c <xTaskRemoveFromEventList+0x80>)
 8002484:	e7ef      	b.n	8002466 <xTaskRemoveFromEventList+0x4a>
 8002486:	bf00      	nop
 8002488:	20003cec 	.word	0x20003cec
 800248c:	20003cf4 	.word	0x20003cf4
 8002490:	20003c54 	.word	0x20003c54
 8002494:	20003c48 	.word	0x20003c48
 8002498:	20003d70 	.word	0x20003d70
 800249c:	20003d2c 	.word	0x20003d2c

080024a0 <vTaskSetTimeOutState>:
{
 80024a0:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 80024a2:	b908      	cbnz	r0, 80024a8 <vTaskSetTimeOutState+0x8>
 80024a4:	f7ff fce0 	bl	8001e68 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <vTaskSetTimeOutState+0x18>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80024ae:	4b03      	ldr	r3, [pc, #12]	; (80024bc <vTaskSetTimeOutState+0x1c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6043      	str	r3, [r0, #4]
 80024b4:	bd08      	pop	{r3, pc}
 80024b6:	bf00      	nop
 80024b8:	20003d28 	.word	0x20003d28
 80024bc:	20003d6c 	.word	0x20003d6c

080024c0 <xTaskCheckForTimeOut>:
{
 80024c0:	b538      	push	{r3, r4, r5, lr}
 80024c2:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 80024c4:	4604      	mov	r4, r0
 80024c6:	b940      	cbnz	r0, 80024da <xTaskCheckForTimeOut+0x1a>
 80024c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024cc:	f383 8811 	msr	BASEPRI, r3
 80024d0:	f3bf 8f6f 	isb	sy
 80024d4:	f3bf 8f4f 	dsb	sy
 80024d8:	e7fe      	b.n	80024d8 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80024da:	b941      	cbnz	r1, 80024ee <xTaskCheckForTimeOut+0x2e>
 80024dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e0:	f383 8811 	msr	BASEPRI, r3
 80024e4:	f3bf 8f6f 	isb	sy
 80024e8:	f3bf 8f4f 	dsb	sy
 80024ec:	e7fe      	b.n	80024ec <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80024ee:	f7ff f801 	bl	80014f4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80024f2:	4b0e      	ldr	r3, [pc, #56]	; (800252c <xTaskCheckForTimeOut+0x6c>)
 80024f4:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80024f6:	682b      	ldr	r3, [r5, #0]
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	d010      	beq.n	800251e <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80024fc:	4a0c      	ldr	r2, [pc, #48]	; (8002530 <xTaskCheckForTimeOut+0x70>)
 80024fe:	6820      	ldr	r0, [r4, #0]
 8002500:	6812      	ldr	r2, [r2, #0]
 8002502:	4290      	cmp	r0, r2
 8002504:	6862      	ldr	r2, [r4, #4]
 8002506:	d001      	beq.n	800250c <xTaskCheckForTimeOut+0x4c>
 8002508:	4291      	cmp	r1, r2
 800250a:	d20d      	bcs.n	8002528 <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800250c:	1a88      	subs	r0, r1, r2
 800250e:	4283      	cmp	r3, r0
 8002510:	d90a      	bls.n	8002528 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8002512:	1a5b      	subs	r3, r3, r1
 8002514:	4413      	add	r3, r2
 8002516:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002518:	4620      	mov	r0, r4
 800251a:	f7ff ffc1 	bl	80024a0 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 800251e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002520:	f7ff f80a 	bl	8001538 <vPortExitCritical>
}
 8002524:	4620      	mov	r0, r4
 8002526:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8002528:	2401      	movs	r4, #1
 800252a:	e7f9      	b.n	8002520 <xTaskCheckForTimeOut+0x60>
 800252c:	20003d6c 	.word	0x20003d6c
 8002530:	20003d28 	.word	0x20003d28

08002534 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8002534:	4b01      	ldr	r3, [pc, #4]	; (800253c <vTaskMissedYield+0x8>)
 8002536:	2201      	movs	r2, #1
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	4770      	bx	lr
 800253c:	20003d70 	.word	0x20003d70

08002540 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002540:	4b05      	ldr	r3, [pc, #20]	; (8002558 <xTaskGetSchedulerState+0x18>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	b133      	cbz	r3, 8002554 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002546:	4b05      	ldr	r3, [pc, #20]	; (800255c <xTaskGetSchedulerState+0x1c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800254c:	bf0c      	ite	eq
 800254e:	2002      	moveq	r0, #2
 8002550:	2000      	movne	r0, #0
 8002552:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002554:	2001      	movs	r0, #1
	}
 8002556:	4770      	bx	lr
 8002558:	20003d40 	.word	0x20003d40
 800255c:	20003cec 	.word	0x20003cec

08002560 <vTaskPriorityInherit>:
	{
 8002560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8002564:	4604      	mov	r4, r0
 8002566:	2800      	cmp	r0, #0
 8002568:	d038      	beq.n	80025dc <vTaskPriorityInherit+0x7c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800256a:	4d1d      	ldr	r5, [pc, #116]	; (80025e0 <vTaskPriorityInherit+0x80>)
 800256c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800256e:	682a      	ldr	r2, [r5, #0]
 8002570:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002572:	4293      	cmp	r3, r2
 8002574:	d232      	bcs.n	80025dc <vTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002576:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002578:	4e1a      	ldr	r6, [pc, #104]	; (80025e4 <vTaskPriorityInherit+0x84>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800257a:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800257c:	bfa1      	itttt	ge
 800257e:	682a      	ldrge	r2, [r5, #0]
 8002580:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8002582:	f1c2 0207 	rsbge	r2, r2, #7
 8002586:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002588:	2714      	movs	r7, #20
 800258a:	6942      	ldr	r2, [r0, #20]
 800258c:	fb07 6303 	mla	r3, r7, r3, r6
 8002590:	429a      	cmp	r2, r3
 8002592:	d120      	bne.n	80025d6 <vTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002594:	f100 0804 	add.w	r8, r0, #4
 8002598:	4640      	mov	r0, r8
 800259a:	f7fe ff3a 	bl	8001412 <uxListRemove>
 800259e:	4a12      	ldr	r2, [pc, #72]	; (80025e8 <vTaskPriorityInherit+0x88>)
 80025a0:	b948      	cbnz	r0, 80025b6 <vTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80025a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80025a4:	4347      	muls	r7, r0
 80025a6:	59f3      	ldr	r3, [r6, r7]
 80025a8:	b92b      	cbnz	r3, 80025b6 <vTaskPriorityInherit+0x56>
 80025aa:	6813      	ldr	r3, [r2, #0]
 80025ac:	2101      	movs	r1, #1
 80025ae:	4081      	lsls	r1, r0
 80025b0:	ea23 0301 	bic.w	r3, r3, r1
 80025b4:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80025b6:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 80025b8:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80025ba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80025bc:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80025be:	2301      	movs	r3, #1
 80025c0:	4083      	lsls	r3, r0
 80025c2:	430b      	orrs	r3, r1
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	2314      	movs	r3, #20
 80025c8:	4641      	mov	r1, r8
 80025ca:	fb03 6000 	mla	r0, r3, r0, r6
	}
 80025ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 80025d2:	f7fe befb 	b.w	80013cc <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80025d6:	682b      	ldr	r3, [r5, #0]
 80025d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025da:	62c3      	str	r3, [r0, #44]	; 0x2c
 80025dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025e0:	20003c48 	.word	0x20003c48
 80025e4:	20003c54 	.word	0x20003c54
 80025e8:	20003cf4 	.word	0x20003cf4

080025ec <xTaskPriorityDisinherit>:
	{
 80025ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80025ee:	4604      	mov	r4, r0
 80025f0:	b908      	cbnz	r0, 80025f6 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80025f2:	2000      	movs	r0, #0
 80025f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80025f6:	4b22      	ldr	r3, [pc, #136]	; (8002680 <xTaskPriorityDisinherit+0x94>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4298      	cmp	r0, r3
 80025fc:	d008      	beq.n	8002610 <xTaskPriorityDisinherit+0x24>
 80025fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002602:	f383 8811 	msr	BASEPRI, r3
 8002606:	f3bf 8f6f 	isb	sy
 800260a:	f3bf 8f4f 	dsb	sy
 800260e:	e7fe      	b.n	800260e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8002610:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002612:	b943      	cbnz	r3, 8002626 <xTaskPriorityDisinherit+0x3a>
 8002614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002618:	f383 8811 	msr	BASEPRI, r3
 800261c:	f3bf 8f6f 	isb	sy
 8002620:	f3bf 8f4f 	dsb	sy
 8002624:	e7fe      	b.n	8002624 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002626:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002628:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800262a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800262c:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800262e:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002630:	d0df      	beq.n	80025f2 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1dd      	bne.n	80025f2 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002636:	1d05      	adds	r5, r0, #4
 8002638:	4628      	mov	r0, r5
 800263a:	f7fe feea 	bl	8001412 <uxListRemove>
 800263e:	4e11      	ldr	r6, [pc, #68]	; (8002684 <xTaskPriorityDisinherit+0x98>)
 8002640:	4a11      	ldr	r2, [pc, #68]	; (8002688 <xTaskPriorityDisinherit+0x9c>)
 8002642:	b950      	cbnz	r0, 800265a <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002644:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002646:	2114      	movs	r1, #20
 8002648:	4379      	muls	r1, r7
 800264a:	5873      	ldr	r3, [r6, r1]
 800264c:	b92b      	cbnz	r3, 800265a <xTaskPriorityDisinherit+0x6e>
 800264e:	6813      	ldr	r3, [r2, #0]
 8002650:	2001      	movs	r0, #1
 8002652:	40b8      	lsls	r0, r7
 8002654:	ea23 0300 	bic.w	r3, r3, r0
 8002658:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800265a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800265c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800265e:	f1c3 0107 	rsb	r1, r3, #7
 8002662:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8002664:	6811      	ldr	r1, [r2, #0]
 8002666:	2401      	movs	r4, #1
 8002668:	fa04 f003 	lsl.w	r0, r4, r3
 800266c:	4308      	orrs	r0, r1
 800266e:	6010      	str	r0, [r2, #0]
 8002670:	2014      	movs	r0, #20
 8002672:	fb00 6003 	mla	r0, r0, r3, r6
 8002676:	4629      	mov	r1, r5
 8002678:	f7fe fea8 	bl	80013cc <vListInsertEnd>
					xReturn = pdTRUE;
 800267c:	4620      	mov	r0, r4
	}
 800267e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002680:	20003c48 	.word	0x20003c48
 8002684:	20003c54 	.word	0x20003c54
 8002688:	20003cf4 	.word	0x20003cf4

0800268c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <pvTaskIncrementMutexHeldCount+0x14>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	b11a      	cbz	r2, 800269a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8002692:	6819      	ldr	r1, [r3, #0]
 8002694:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8002696:	3201      	adds	r2, #1
 8002698:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 800269a:	6818      	ldr	r0, [r3, #0]
	}
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	20003c48 	.word	0x20003c48

080026a4 <vSenderTask1>:
        pStr++;
    }
}
*/
void vSenderTask1(void *pvParameters)
{
 80026a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	portBASE_TYPE xStatus;
	lValueToSend = (long)pvParameters;

    for(;;)
    {
    	HAL_GPIO_WritePin(Sender1_GPIO_Port, Sender1_Pin, GPIO_PIN_SET);
 80026a6:	4c13      	ldr	r4, [pc, #76]	; (80026f4 <vSenderTask1+0x50>)
    	xStatus = xQueueSendToBack(xQueue, &lValueToSend, 0);
    	if(xStatus != pdPASS)
    	{
    		HAL_UART_Transmit(&huart1, (uint8_t *)"could not send to the queue.\r\n", strlen("could not send to the queue.\r\n"), 0xFFFFFFFF);
    	}
      	taskYIELD();
 80026a8:	4d13      	ldr	r5, [pc, #76]	; (80026f8 <vSenderTask1+0x54>)
	lValueToSend = (long)pvParameters;
 80026aa:	9001      	str	r0, [sp, #4]
    	HAL_GPIO_WritePin(Sender1_GPIO_Port, Sender1_Pin, GPIO_PIN_SET);
 80026ac:	2201      	movs	r2, #1
 80026ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026b2:	4620      	mov	r0, r4
 80026b4:	f7fe f88e 	bl	80007d4 <HAL_GPIO_WritePin>
    	xStatus = xQueueSendToBack(xQueue, &lValueToSend, 0);
 80026b8:	4810      	ldr	r0, [pc, #64]	; (80026fc <vSenderTask1+0x58>)
 80026ba:	2300      	movs	r3, #0
 80026bc:	461a      	mov	r2, r3
 80026be:	a901      	add	r1, sp, #4
 80026c0:	6800      	ldr	r0, [r0, #0]
 80026c2:	f7ff f9eb 	bl	8001a9c <xQueueGenericSend>
    	if(xStatus != pdPASS)
 80026c6:	2801      	cmp	r0, #1
 80026c8:	d006      	beq.n	80026d8 <vSenderTask1+0x34>
    		HAL_UART_Transmit(&huart1, (uint8_t *)"could not send to the queue.\r\n", strlen("could not send to the queue.\r\n"), 0xFFFFFFFF);
 80026ca:	f04f 33ff 	mov.w	r3, #4294967295
 80026ce:	221e      	movs	r2, #30
 80026d0:	490b      	ldr	r1, [pc, #44]	; (8002700 <vSenderTask1+0x5c>)
 80026d2:	480c      	ldr	r0, [pc, #48]	; (8002704 <vSenderTask1+0x60>)
 80026d4:	f7fe fdea 	bl	80012ac <HAL_UART_Transmit>
      	taskYIELD();
 80026d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80026dc:	602b      	str	r3, [r5, #0]
 80026de:	f3bf 8f4f 	dsb	sy
 80026e2:	f3bf 8f6f 	isb	sy

      	//vTaskDelay(250 / portTICK_RATE_MS );
        HAL_GPIO_WritePin(Sender1_GPIO_Port, Sender1_Pin, GPIO_PIN_RESET);
 80026e6:	2200      	movs	r2, #0
 80026e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026ec:	4620      	mov	r0, r4
 80026ee:	f7fe f871 	bl	80007d4 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(Sender1_GPIO_Port, Sender1_Pin, GPIO_PIN_SET);
 80026f2:	e7db      	b.n	80026ac <vSenderTask1+0x8>
 80026f4:	40021800 	.word	0x40021800
 80026f8:	e000ed04 	.word	0xe000ed04
 80026fc:	20003dbc 	.word	0x20003dbc
 8002700:	08002cd2 	.word	0x08002cd2
 8002704:	20003d7c 	.word	0x20003d7c

08002708 <vSenderTask2>:
    }
}

void vSenderTask2(void *pvParameters)
{
 8002708:	b537      	push	{r0, r1, r2, r4, r5, lr}
	portBASE_TYPE xStatus;
	lValueToSend = (long)pvParameters;

    for(;;)
    {
    	HAL_GPIO_WritePin(Sender2_GPIO_Port, Sender2_Pin, GPIO_PIN_SET);
 800270a:	4c13      	ldr	r4, [pc, #76]	; (8002758 <vSenderTask2+0x50>)
    	xStatus = xQueueSendToBack(xQueue, &lValueToSend, 0);
    	if(xStatus != pdPASS)
    	{
    		HAL_UART_Transmit(&huart1, (uint8_t *)"could not send to the queue.\r\n", strlen("could not send to the queue.\r\n"), 0xFFFFFFFF);
    	}
      	taskYIELD();
 800270c:	4d13      	ldr	r5, [pc, #76]	; (800275c <vSenderTask2+0x54>)
	lValueToSend = (long)pvParameters;
 800270e:	9001      	str	r0, [sp, #4]
    	HAL_GPIO_WritePin(Sender2_GPIO_Port, Sender2_Pin, GPIO_PIN_SET);
 8002710:	2201      	movs	r2, #1
 8002712:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002716:	4620      	mov	r0, r4
 8002718:	f7fe f85c 	bl	80007d4 <HAL_GPIO_WritePin>
    	xStatus = xQueueSendToBack(xQueue, &lValueToSend, 0);
 800271c:	4810      	ldr	r0, [pc, #64]	; (8002760 <vSenderTask2+0x58>)
 800271e:	2300      	movs	r3, #0
 8002720:	461a      	mov	r2, r3
 8002722:	a901      	add	r1, sp, #4
 8002724:	6800      	ldr	r0, [r0, #0]
 8002726:	f7ff f9b9 	bl	8001a9c <xQueueGenericSend>
    	if(xStatus != pdPASS)
 800272a:	2801      	cmp	r0, #1
 800272c:	d006      	beq.n	800273c <vSenderTask2+0x34>
    		HAL_UART_Transmit(&huart1, (uint8_t *)"could not send to the queue.\r\n", strlen("could not send to the queue.\r\n"), 0xFFFFFFFF);
 800272e:	f04f 33ff 	mov.w	r3, #4294967295
 8002732:	221e      	movs	r2, #30
 8002734:	490b      	ldr	r1, [pc, #44]	; (8002764 <vSenderTask2+0x5c>)
 8002736:	480c      	ldr	r0, [pc, #48]	; (8002768 <vSenderTask2+0x60>)
 8002738:	f7fe fdb8 	bl	80012ac <HAL_UART_Transmit>
      	taskYIELD();
 800273c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002740:	602b      	str	r3, [r5, #0]
 8002742:	f3bf 8f4f 	dsb	sy
 8002746:	f3bf 8f6f 	isb	sy

      	//vTaskDelay(250 / portTICK_RATE_MS );
        HAL_GPIO_WritePin(Sender2_GPIO_Port, Sender2_Pin, GPIO_PIN_RESET);
 800274a:	2200      	movs	r2, #0
 800274c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002750:	4620      	mov	r0, r4
 8002752:	f7fe f83f 	bl	80007d4 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(Sender2_GPIO_Port, Sender2_Pin, GPIO_PIN_SET);
 8002756:	e7db      	b.n	8002710 <vSenderTask2+0x8>
 8002758:	40021800 	.word	0x40021800
 800275c:	e000ed04 	.word	0xe000ed04
 8002760:	20003dbc 	.word	0x20003dbc
 8002764:	08002cd2 	.word	0x08002cd2
 8002768:	20003d7c 	.word	0x20003d7c

0800276c <vReceiverTask>:
    }
}

void vReceiverTask(void *pvParameters)
{
 800276c:	b573      	push	{r0, r1, r4, r5, r6, lr}

    for(;;)
    {
      HAL_GPIO_WritePin(Receiver_GPIO_Port, Receiver_Pin, GPIO_PIN_SET);

      if(uxQueueMessagesWaiting(xQueue) !=  0)
 800276e:	4d1c      	ldr	r5, [pc, #112]	; (80027e0 <vReceiverTask+0x74>)
      HAL_GPIO_WritePin(Receiver_GPIO_Port, Receiver_Pin, GPIO_PIN_SET);
 8002770:	4c1c      	ldr	r4, [pc, #112]	; (80027e4 <vReceiverTask+0x78>)
 8002772:	462e      	mov	r6, r5
 8002774:	4620      	mov	r0, r4
 8002776:	2201      	movs	r2, #1
 8002778:	f44f 7100 	mov.w	r1, #512	; 0x200
 800277c:	f7fe f82a 	bl	80007d4 <HAL_GPIO_WritePin>
      if(uxQueueMessagesWaiting(xQueue) !=  0)
 8002780:	6828      	ldr	r0, [r5, #0]
 8002782:	f7ff fb05 	bl	8001d90 <uxQueueMessagesWaiting>
 8002786:	b130      	cbz	r0, 8002796 <vReceiverTask+0x2a>
      {
    	  HAL_UART_Transmit(&huart1, (uint8_t *)"Queue should have been empty.\r\n", strlen("Queue should have been empty.\r\n"), 0xFFFFFFFF);
 8002788:	f04f 33ff 	mov.w	r3, #4294967295
 800278c:	221f      	movs	r2, #31
 800278e:	4916      	ldr	r1, [pc, #88]	; (80027e8 <vReceiverTask+0x7c>)
 8002790:	4816      	ldr	r0, [pc, #88]	; (80027ec <vReceiverTask+0x80>)
 8002792:	f7fe fd8b 	bl	80012ac <HAL_UART_Transmit>
      }

      xStatus = xQueueReceive(xQueue, &lReceivedValue, xTicksToWait);
 8002796:	2264      	movs	r2, #100	; 0x64
 8002798:	2300      	movs	r3, #0
 800279a:	a901      	add	r1, sp, #4
 800279c:	6830      	ldr	r0, [r6, #0]
 800279e:	f7ff fa33 	bl	8001c08 <xQueueGenericReceive>

      if(xStatus == pdPASS)
 80027a2:	2801      	cmp	r0, #1
      xStatus = xQueueReceive(xQueue, &lReceivedValue, xTicksToWait);
 80027a4:	4602      	mov	r2, r0
      if(xStatus == pdPASS)
 80027a6:	d116      	bne.n	80027d6 <vReceiverTask+0x6a>
      {
    	  lReceivedValue += '0';
 80027a8:	9b01      	ldr	r3, [sp, #4]
    	  HAL_UART_Transmit(&huart1, (uint8_t *)&lReceivedValue, 1, 0xFFFFFFFF);
 80027aa:	4810      	ldr	r0, [pc, #64]	; (80027ec <vReceiverTask+0x80>)
    	  lReceivedValue += '0';
 80027ac:	3330      	adds	r3, #48	; 0x30
 80027ae:	9301      	str	r3, [sp, #4]
    	  HAL_UART_Transmit(&huart1, (uint8_t *)&lReceivedValue, 1, 0xFFFFFFFF);
 80027b0:	a901      	add	r1, sp, #4
 80027b2:	f04f 33ff 	mov.w	r3, #4294967295
 80027b6:	f7fe fd79 	bl	80012ac <HAL_UART_Transmit>
    	  HAL_UART_Transmit(&huart1, (uint8_t *)"\r\n", strlen("\r\n"), 0xFFFFFFFF);
 80027ba:	490d      	ldr	r1, [pc, #52]	; (80027f0 <vReceiverTask+0x84>)
 80027bc:	f04f 33ff 	mov.w	r3, #4294967295
 80027c0:	2202      	movs	r2, #2
      }
      else
      {
    	  HAL_UART_Transmit(&huart1, (uint8_t *)"could not receive from the queue.\r\n", strlen("could not receive from the queue.\r\n"), 0xFFFFFFFF);
 80027c2:	480a      	ldr	r0, [pc, #40]	; (80027ec <vReceiverTask+0x80>)
 80027c4:	f7fe fd72 	bl	80012ac <HAL_UART_Transmit>
      }

      //vTaskDelay(200 / portTICK_RATE_MS );
      HAL_GPIO_WritePin(Receiver_GPIO_Port, Receiver_Pin, GPIO_PIN_RESET);
 80027c8:	2200      	movs	r2, #0
 80027ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027ce:	4620      	mov	r0, r4
 80027d0:	f7fe f800 	bl	80007d4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Receiver_GPIO_Port, Receiver_Pin, GPIO_PIN_SET);
 80027d4:	e7ce      	b.n	8002774 <vReceiverTask+0x8>
    	  HAL_UART_Transmit(&huart1, (uint8_t *)"could not receive from the queue.\r\n", strlen("could not receive from the queue.\r\n"), 0xFFFFFFFF);
 80027d6:	f04f 33ff 	mov.w	r3, #4294967295
 80027da:	2223      	movs	r2, #35	; 0x23
 80027dc:	4905      	ldr	r1, [pc, #20]	; (80027f4 <vReceiverTask+0x88>)
 80027de:	e7f0      	b.n	80027c2 <vReceiverTask+0x56>
 80027e0:	20003dbc 	.word	0x20003dbc
 80027e4:	40021800 	.word	0x40021800
 80027e8:	08002c8e 	.word	0x08002c8e
 80027ec:	20003d7c 	.word	0x20003d7c
 80027f0:	08002ccf 	.word	0x08002ccf
 80027f4:	08002cae 	.word	0x08002cae

080027f8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80027f8:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80027fa:	2001      	movs	r0, #1
 80027fc:	f7fe fdd0 	bl	80013a0 <osDelay>
 8002800:	e7fb      	b.n	80027fa <StartDefaultTask+0x2>
	...

08002804 <SystemClock_Config>:
{
 8002804:	b530      	push	{r4, r5, lr}
 8002806:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002808:	2230      	movs	r2, #48	; 0x30
 800280a:	2100      	movs	r1, #0
 800280c:	a808      	add	r0, sp, #32
 800280e:	f000 fa0a 	bl	8002c26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002812:	2100      	movs	r1, #0
 8002814:	2214      	movs	r2, #20
 8002816:	a803      	add	r0, sp, #12
 8002818:	f000 fa05 	bl	8002c26 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 800281c:	2400      	movs	r4, #0
 800281e:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <SystemClock_Config+0x90>)
 8002820:	9401      	str	r4, [sp, #4]
 8002822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002824:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002828:	641a      	str	r2, [r3, #64]	; 0x40
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002830:	9301      	str	r3, [sp, #4]
 8002832:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002834:	4b18      	ldr	r3, [pc, #96]	; (8002898 <SystemClock_Config+0x94>)
 8002836:	9402      	str	r4, [sp, #8]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002846:	9302      	str	r3, [sp, #8]
 8002848:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800284a:	2301      	movs	r3, #1
 800284c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800284e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002852:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002854:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002858:	22b4      	movs	r2, #180	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800285a:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800285c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800285e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002860:	2304      	movs	r3, #4
 8002862:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002864:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002866:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002868:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800286a:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800286c:	f7fd fff4 	bl	8000858 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002870:	f7fd ffb6 	bl	80007e0 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002874:	230f      	movs	r3, #15
 8002876:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002878:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800287c:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800287e:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002884:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002886:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002888:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800288a:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800288c:	f7fe f994 	bl	8000bb8 <HAL_RCC_ClockConfig>
}
 8002890:	b015      	add	sp, #84	; 0x54
 8002892:	bd30      	pop	{r4, r5, pc}
 8002894:	40023800 	.word	0x40023800
 8002898:	40007000 	.word	0x40007000

0800289c <main>:
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 80028a0:	f7fd fe2e 	bl	8000500 <HAL_Init>
  SystemClock_Config();
 80028a4:	f7ff ffae 	bl	8002804 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a8:	2214      	movs	r2, #20
 80028aa:	2100      	movs	r1, #0
 80028ac:	eb0d 0002 	add.w	r0, sp, r2
 80028b0:	f000 f9b9 	bl	8002c26 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028b4:	2400      	movs	r4, #0
 80028b6:	4b38      	ldr	r3, [pc, #224]	; (8002998 <main+0xfc>)
 80028b8:	9402      	str	r4, [sp, #8]
 80028ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOG, Receiver_Pin|Sender2_Pin|Sender1_Pin, GPIO_PIN_RESET);
 80028bc:	4837      	ldr	r0, [pc, #220]	; (800299c <main+0x100>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80028be:	4e38      	ldr	r6, [pc, #224]	; (80029a0 <main+0x104>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028c4:	631a      	str	r2, [r3, #48]	; 0x30
 80028c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028c8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80028cc:	9202      	str	r2, [sp, #8]
 80028ce:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d0:	9403      	str	r4, [sp, #12]
 80028d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028d4:	f042 0201 	orr.w	r2, r2, #1
 80028d8:	631a      	str	r2, [r3, #48]	; 0x30
 80028da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028dc:	f002 0201 	and.w	r2, r2, #1
 80028e0:	9203      	str	r2, [sp, #12]
 80028e2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80028e4:	9404      	str	r4, [sp, #16]
 80028e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028ec:	631a      	str	r2, [r3, #48]	; 0x30
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  HAL_GPIO_WritePin(GPIOG, Receiver_Pin|Sender2_Pin|Sender1_Pin, GPIO_PIN_RESET);
 80028f4:	4622      	mov	r2, r4
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80028f6:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOG, Receiver_Pin|Sender2_Pin|Sender1_Pin, GPIO_PIN_RESET);
 80028f8:	f44f 41c4 	mov.w	r1, #25088	; 0x6200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028fc:	2701      	movs	r7, #1
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80028fe:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOG, Receiver_Pin|Sender2_Pin|Sender1_Pin, GPIO_PIN_RESET);
 8002900:	f7fd ff68 	bl	80007d4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Receiver_Pin|Sender2_Pin|Sender1_Pin;
 8002904:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002908:	a905      	add	r1, sp, #20
 800290a:	4824      	ldr	r0, [pc, #144]	; (800299c <main+0x100>)
  GPIO_InitStruct.Pin = Receiver_Pin|Sender2_Pin|Sender1_Pin;
 800290c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800290e:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002912:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002914:	f7fd fe72 	bl	80005fc <HAL_GPIO_Init>
  huart1.Instance = USART1;
 8002918:	4822      	ldr	r0, [pc, #136]	; (80029a4 <main+0x108>)
  huart1.Init.BaudRate = 115200;
 800291a:	4a23      	ldr	r2, [pc, #140]	; (80029a8 <main+0x10c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800291c:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 800291e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002922:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002926:	230c      	movs	r3, #12
 8002928:	6143      	str	r3, [r0, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800292a:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800292c:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800292e:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002930:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002932:	f7fe fc8d 	bl	8001250 <HAL_UART_Init>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002936:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002938:	ad05      	add	r5, sp, #20
 800293a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800293c:	6833      	ldr	r3, [r6, #0]
 800293e:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002940:	4621      	mov	r1, r4
 8002942:	a805      	add	r0, sp, #20
 8002944:	f7fe fd14 	bl	8001370 <osThreadCreate>
 8002948:	4b18      	ldr	r3, [pc, #96]	; (80029ac <main+0x110>)
  xTaskCreate(vSenderTask1, "Sender1", 1000, (void *)1, 1, NULL);
 800294a:	4919      	ldr	r1, [pc, #100]	; (80029b0 <main+0x114>)
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800294c:	6018      	str	r0, [r3, #0]
  xTaskCreate(vSenderTask1, "Sender1", 1000, (void *)1, 1, NULL);
 800294e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002952:	463b      	mov	r3, r7
 8002954:	9401      	str	r4, [sp, #4]
 8002956:	9700      	str	r7, [sp, #0]
 8002958:	4816      	ldr	r0, [pc, #88]	; (80029b4 <main+0x118>)
 800295a:	f7ff fa8f 	bl	8001e7c <xTaskCreate>
  xTaskCreate(vSenderTask2, "Sender2", 1000, (void *)2, 1, NULL);
 800295e:	2302      	movs	r3, #2
 8002960:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002964:	4914      	ldr	r1, [pc, #80]	; (80029b8 <main+0x11c>)
 8002966:	9401      	str	r4, [sp, #4]
 8002968:	9700      	str	r7, [sp, #0]
 800296a:	4814      	ldr	r0, [pc, #80]	; (80029bc <main+0x120>)
 800296c:	f7ff fa86 	bl	8001e7c <xTaskCreate>
  xTaskCreate(vReceiverTask, "Receiver", 1000, NULL, 2, NULL);
 8002970:	2302      	movs	r3, #2
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002978:	4623      	mov	r3, r4
 800297a:	4911      	ldr	r1, [pc, #68]	; (80029c0 <main+0x124>)
 800297c:	9401      	str	r4, [sp, #4]
 800297e:	4811      	ldr	r0, [pc, #68]	; (80029c4 <main+0x128>)
 8002980:	f7ff fa7c 	bl	8001e7c <xTaskCreate>
  xQueue = xQueueCreate(100, sizeof(long));
 8002984:	4622      	mov	r2, r4
 8002986:	2104      	movs	r1, #4
 8002988:	2064      	movs	r0, #100	; 0x64
 800298a:	f7ff f865 	bl	8001a58 <xQueueGenericCreate>
 800298e:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <main+0x12c>)
 8002990:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8002992:	f7fe fce8 	bl	8001366 <osKernelStart>
 8002996:	e7fe      	b.n	8002996 <main+0xfa>
 8002998:	40023800 	.word	0x40023800
 800299c:	40021800 	.word	0x40021800
 80029a0:	08002c50 	.word	0x08002c50
 80029a4:	20003d7c 	.word	0x20003d7c
 80029a8:	40011000 	.word	0x40011000
 80029ac:	20003d78 	.word	0x20003d78
 80029b0:	08002c69 	.word	0x08002c69
 80029b4:	080026a5 	.word	0x080026a5
 80029b8:	08002c71 	.word	0x08002c71
 80029bc:	08002709 	.word	0x08002709
 80029c0:	08002c79 	.word	0x08002c79
 80029c4:	0800276d 	.word	0x0800276d
 80029c8:	20003dbc 	.word	0x20003dbc

080029cc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80029cc:	6802      	ldr	r2, [r0, #0]
 80029ce:	4b03      	ldr	r3, [pc, #12]	; (80029dc <HAL_TIM_PeriodElapsedCallback+0x10>)
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d101      	bne.n	80029d8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80029d4:	f7fd bdae 	b.w	8000534 <HAL_IncTick>
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	40001000 	.word	0x40001000

080029e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029e0:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e2:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <HAL_MspInit+0x40>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	9200      	str	r2, [sp, #0]
 80029e8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80029ea:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80029ee:	6459      	str	r1, [r3, #68]	; 0x44
 80029f0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80029f2:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80029f6:	9100      	str	r1, [sp, #0]
 80029f8:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029fa:	9201      	str	r2, [sp, #4]
 80029fc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80029fe:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002a02:	6419      	str	r1, [r3, #64]	; 0x40
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a0c:	210f      	movs	r1, #15
 8002a0e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a12:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a14:	f7fd fdb2 	bl	800057c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a18:	b003      	add	sp, #12
 8002a1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a1e:	bf00      	nop
 8002a20:	40023800 	.word	0x40023800

08002a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a24:	b510      	push	{r4, lr}
 8002a26:	4604      	mov	r4, r0
 8002a28:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a2a:	2214      	movs	r2, #20
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	a803      	add	r0, sp, #12
 8002a30:	f000 f8f9 	bl	8002c26 <memset>
  if(huart->Instance==USART1)
 8002a34:	6822      	ldr	r2, [r4, #0]
 8002a36:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <HAL_UART_MspInit+0x68>)
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d125      	bne.n	8002a88 <HAL_UART_MspInit+0x64>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a3c:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8002a40:	2100      	movs	r1, #0
 8002a42:	9101      	str	r1, [sp, #4]
 8002a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a46:	4812      	ldr	r0, [pc, #72]	; (8002a90 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a48:	f042 0210 	orr.w	r2, r2, #16
 8002a4c:	645a      	str	r2, [r3, #68]	; 0x44
 8002a4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a50:	f002 0210 	and.w	r2, r2, #16
 8002a54:	9201      	str	r2, [sp, #4]
 8002a56:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a58:	9102      	str	r1, [sp, #8]
 8002a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a5c:	f042 0201 	orr.w	r2, r2, #1
 8002a60:	631a      	str	r2, [r3, #48]	; 0x30
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	9302      	str	r3, [sp, #8]
 8002a6a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a6c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a70:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a72:	2302      	movs	r3, #2
 8002a74:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a76:	2301      	movs	r3, #1
 8002a78:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a80:	2307      	movs	r3, #7
 8002a82:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a84:	f7fd fdba 	bl	80005fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a88:	b008      	add	sp, #32
 8002a8a:	bd10      	pop	{r4, pc}
 8002a8c:	40011000 	.word	0x40011000
 8002a90:	40020000 	.word	0x40020000

08002a94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a94:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002a96:	4601      	mov	r1, r0
{
 8002a98:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2036      	movs	r0, #54	; 0x36
 8002a9e:	f7fd fd6d 	bl	800057c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8002aa2:	2036      	movs	r0, #54	; 0x36
 8002aa4:	f7fd fd9e 	bl	80005e4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002aa8:	2500      	movs	r5, #0
 8002aaa:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <HAL_InitTick+0x6c>)
 8002aac:	9502      	str	r5, [sp, #8]
 8002aae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002ab0:	4c14      	ldr	r4, [pc, #80]	; (8002b04 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002ab2:	f042 0210 	orr.w	r2, r2, #16
 8002ab6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f003 0310 	and.w	r3, r3, #16
 8002abe:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ac0:	a901      	add	r1, sp, #4
 8002ac2:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002ac4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ac6:	f7fe f931 	bl	8000d2c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002aca:	f7fe f90f 	bl	8000cec <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8002ace:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <HAL_InitTick+0x74>)
 8002ad0:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002ad2:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002ad6:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002ad8:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002ada:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <HAL_InitTick+0x78>)
 8002adc:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ae0:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8002ae2:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002ae4:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8002ae6:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae8:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002aea:	f7fe fa53 	bl	8000f94 <HAL_TIM_Base_Init>
 8002aee:	b920      	cbnz	r0, 8002afa <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002af0:	4620      	mov	r0, r4
 8002af2:	f7fe f93a 	bl	8000d6a <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8002af6:	b009      	add	sp, #36	; 0x24
 8002af8:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8002afa:	2001      	movs	r0, #1
 8002afc:	e7fb      	b.n	8002af6 <HAL_InitTick+0x62>
 8002afe:	bf00      	nop
 8002b00:	40023800 	.word	0x40023800
 8002b04:	20003dc0 	.word	0x20003dc0
 8002b08:	40001000 	.word	0x40001000
 8002b0c:	000f4240 	.word	0x000f4240

08002b10 <NMI_Handler>:
 8002b10:	4770      	bx	lr

08002b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b12:	e7fe      	b.n	8002b12 <HardFault_Handler>

08002b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b14:	e7fe      	b.n	8002b14 <MemManage_Handler>

08002b16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b16:	e7fe      	b.n	8002b16 <BusFault_Handler>

08002b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b18:	e7fe      	b.n	8002b18 <UsageFault_Handler>

08002b1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b1a:	4770      	bx	lr

08002b1c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b1c:	4801      	ldr	r0, [pc, #4]	; (8002b24 <TIM6_DAC_IRQHandler+0x8>)
 8002b1e:	f7fe b933 	b.w	8000d88 <HAL_TIM_IRQHandler>
 8002b22:	bf00      	nop
 8002b24:	20003dc0 	.word	0x20003dc0

08002b28 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b28:	490f      	ldr	r1, [pc, #60]	; (8002b68 <SystemInit+0x40>)
 8002b2a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002b2e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002b36:	4b0d      	ldr	r3, [pc, #52]	; (8002b6c <SystemInit+0x44>)
 8002b38:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002b3a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002b3c:	f042 0201 	orr.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002b42:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002b4a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b4e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002b50:	4a07      	ldr	r2, [pc, #28]	; (8002b70 <SystemInit+0x48>)
 8002b52:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b5a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002b5c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002b62:	608b      	str	r3, [r1, #8]
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	e000ed00 	.word	0xe000ed00
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	24003010 	.word	0x24003010

08002b74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002b74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bac <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b7a:	e003      	b.n	8002b84 <LoopCopyDataInit>

08002b7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b82:	3104      	adds	r1, #4

08002b84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b84:	480b      	ldr	r0, [pc, #44]	; (8002bb4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b86:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b8c:	d3f6      	bcc.n	8002b7c <CopyDataInit>
  ldr  r2, =_sbss
 8002b8e:	4a0b      	ldr	r2, [pc, #44]	; (8002bbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b90:	e002      	b.n	8002b98 <LoopFillZerobss>

08002b92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b94:	f842 3b04 	str.w	r3, [r2], #4

08002b98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b98:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b9c:	d3f9      	bcc.n	8002b92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b9e:	f7ff ffc3 	bl	8002b28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ba2:	f000 f811 	bl	8002bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ba6:	f7ff fe79 	bl	800289c <main>
  bx  lr    
 8002baa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002bac:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002bb0:	08002d1c 	.word	0x08002d1c
  ldr  r0, =_sdata
 8002bb4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002bb8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002bbc:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002bc0:	20003dfc 	.word	0x20003dfc

08002bc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bc4:	e7fe      	b.n	8002bc4 <ADC_IRQHandler>
	...

08002bc8 <__libc_init_array>:
 8002bc8:	b570      	push	{r4, r5, r6, lr}
 8002bca:	4e0d      	ldr	r6, [pc, #52]	; (8002c00 <__libc_init_array+0x38>)
 8002bcc:	4c0d      	ldr	r4, [pc, #52]	; (8002c04 <__libc_init_array+0x3c>)
 8002bce:	1ba4      	subs	r4, r4, r6
 8002bd0:	10a4      	asrs	r4, r4, #2
 8002bd2:	2500      	movs	r5, #0
 8002bd4:	42a5      	cmp	r5, r4
 8002bd6:	d109      	bne.n	8002bec <__libc_init_array+0x24>
 8002bd8:	4e0b      	ldr	r6, [pc, #44]	; (8002c08 <__libc_init_array+0x40>)
 8002bda:	4c0c      	ldr	r4, [pc, #48]	; (8002c0c <__libc_init_array+0x44>)
 8002bdc:	f000 f82c 	bl	8002c38 <_init>
 8002be0:	1ba4      	subs	r4, r4, r6
 8002be2:	10a4      	asrs	r4, r4, #2
 8002be4:	2500      	movs	r5, #0
 8002be6:	42a5      	cmp	r5, r4
 8002be8:	d105      	bne.n	8002bf6 <__libc_init_array+0x2e>
 8002bea:	bd70      	pop	{r4, r5, r6, pc}
 8002bec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bf0:	4798      	blx	r3
 8002bf2:	3501      	adds	r5, #1
 8002bf4:	e7ee      	b.n	8002bd4 <__libc_init_array+0xc>
 8002bf6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bfa:	4798      	blx	r3
 8002bfc:	3501      	adds	r5, #1
 8002bfe:	e7f2      	b.n	8002be6 <__libc_init_array+0x1e>
 8002c00:	08002d14 	.word	0x08002d14
 8002c04:	08002d14 	.word	0x08002d14
 8002c08:	08002d14 	.word	0x08002d14
 8002c0c:	08002d18 	.word	0x08002d18

08002c10 <memcpy>:
 8002c10:	b510      	push	{r4, lr}
 8002c12:	1e43      	subs	r3, r0, #1
 8002c14:	440a      	add	r2, r1
 8002c16:	4291      	cmp	r1, r2
 8002c18:	d100      	bne.n	8002c1c <memcpy+0xc>
 8002c1a:	bd10      	pop	{r4, pc}
 8002c1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c24:	e7f7      	b.n	8002c16 <memcpy+0x6>

08002c26 <memset>:
 8002c26:	4402      	add	r2, r0
 8002c28:	4603      	mov	r3, r0
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d100      	bne.n	8002c30 <memset+0xa>
 8002c2e:	4770      	bx	lr
 8002c30:	f803 1b01 	strb.w	r1, [r3], #1
 8002c34:	e7f9      	b.n	8002c2a <memset+0x4>
	...

08002c38 <_init>:
 8002c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3a:	bf00      	nop
 8002c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c3e:	bc08      	pop	{r3}
 8002c40:	469e      	mov	lr, r3
 8002c42:	4770      	bx	lr

08002c44 <_fini>:
 8002c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c46:	bf00      	nop
 8002c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c4a:	bc08      	pop	{r3}
 8002c4c:	469e      	mov	lr, r3
 8002c4e:	4770      	bx	lr
