
FreeRTOS_Example10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002980  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08002b30  08002b30  00012b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002bf0  08002bf0  00012bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002bf8  08002bf8  00012bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002bfc  08002bfc  00012bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00003db0  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20003dbc  20003dbc  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001d0bd  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003e47  00000000  00000000  0003d0f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008e00  00000000  00000000  00040f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d38  00000000  00000000  00049d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013e8  00000000  00000000  0004aa78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000077a0  00000000  00000000  0004be60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005835  00000000  00000000  00053600  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00058e35  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000024d0  00000000  00000000  00058eb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002b18 	.word	0x08002b18

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	08002b18 	.word	0x08002b18

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b97a 	b.w	80004fc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	468c      	mov	ip, r1
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	9e08      	ldr	r6, [sp, #32]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d151      	bne.n	80002d4 <__udivmoddi4+0xb4>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d96d      	bls.n	8000312 <__udivmoddi4+0xf2>
 8000236:	fab2 fe82 	clz	lr, r2
 800023a:	f1be 0f00 	cmp.w	lr, #0
 800023e:	d00b      	beq.n	8000258 <__udivmoddi4+0x38>
 8000240:	f1ce 0c20 	rsb	ip, lr, #32
 8000244:	fa01 f50e 	lsl.w	r5, r1, lr
 8000248:	fa20 fc0c 	lsr.w	ip, r0, ip
 800024c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000250:	ea4c 0c05 	orr.w	ip, ip, r5
 8000254:	fa00 f40e 	lsl.w	r4, r0, lr
 8000258:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800025c:	0c25      	lsrs	r5, r4, #16
 800025e:	fbbc f8fa 	udiv	r8, ip, sl
 8000262:	fa1f f987 	uxth.w	r9, r7
 8000266:	fb0a cc18 	mls	ip, sl, r8, ip
 800026a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026e:	fb08 f309 	mul.w	r3, r8, r9
 8000272:	42ab      	cmp	r3, r5
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x6c>
 8000276:	19ed      	adds	r5, r5, r7
 8000278:	f108 32ff 	add.w	r2, r8, #4294967295
 800027c:	f080 8123 	bcs.w	80004c6 <__udivmoddi4+0x2a6>
 8000280:	42ab      	cmp	r3, r5
 8000282:	f240 8120 	bls.w	80004c6 <__udivmoddi4+0x2a6>
 8000286:	f1a8 0802 	sub.w	r8, r8, #2
 800028a:	443d      	add	r5, r7
 800028c:	1aed      	subs	r5, r5, r3
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb5 f0fa 	udiv	r0, r5, sl
 8000294:	fb0a 5510 	mls	r5, sl, r0, r5
 8000298:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800029c:	fb00 f909 	mul.w	r9, r0, r9
 80002a0:	45a1      	cmp	r9, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x98>
 80002a4:	19e4      	adds	r4, r4, r7
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 810a 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80002ae:	45a1      	cmp	r9, r4
 80002b0:	f240 8107 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	eba4 0409 	sub.w	r4, r4, r9
 80002bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002c0:	2100      	movs	r1, #0
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d061      	beq.n	800038a <__udivmoddi4+0x16a>
 80002c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ca:	2300      	movs	r3, #0
 80002cc:	6034      	str	r4, [r6, #0]
 80002ce:	6073      	str	r3, [r6, #4]
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xc8>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d054      	beq.n	8000386 <__udivmoddi4+0x166>
 80002dc:	2100      	movs	r1, #0
 80002de:	e886 0021 	stmia.w	r6, {r0, r5}
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	f040 808e 	bne.w	800040e <__udivmoddi4+0x1ee>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xdc>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2d0>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	46ac      	mov	ip, r5
 8000306:	2e00      	cmp	r6, #0
 8000308:	d03f      	beq.n	800038a <__udivmoddi4+0x16a>
 800030a:	e886 1010 	stmia.w	r6, {r4, ip}
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	b912      	cbnz	r2, 800031a <__udivmoddi4+0xfa>
 8000314:	2701      	movs	r7, #1
 8000316:	fbb7 f7f2 	udiv	r7, r7, r2
 800031a:	fab7 fe87 	clz	lr, r7
 800031e:	f1be 0f00 	cmp.w	lr, #0
 8000322:	d134      	bne.n	800038e <__udivmoddi4+0x16e>
 8000324:	1beb      	subs	r3, r5, r7
 8000326:	0c3a      	lsrs	r2, r7, #16
 8000328:	fa1f fc87 	uxth.w	ip, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000332:	0c25      	lsrs	r5, r4, #16
 8000334:	fb02 3318 	mls	r3, r2, r8, r3
 8000338:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800033c:	fb0c f308 	mul.w	r3, ip, r8
 8000340:	42ab      	cmp	r3, r5
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x134>
 8000344:	19ed      	adds	r5, r5, r7
 8000346:	f108 30ff 	add.w	r0, r8, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x132>
 800034c:	42ab      	cmp	r3, r5
 800034e:	f200 80d1 	bhi.w	80004f4 <__udivmoddi4+0x2d4>
 8000352:	4680      	mov	r8, r0
 8000354:	1aed      	subs	r5, r5, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb5 f0f2 	udiv	r0, r5, r2
 800035c:	fb02 5510 	mls	r5, r2, r0, r5
 8000360:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000364:	fb0c fc00 	mul.w	ip, ip, r0
 8000368:	45a4      	cmp	ip, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x15c>
 800036c:	19e4      	adds	r4, r4, r7
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x15a>
 8000374:	45a4      	cmp	ip, r4
 8000376:	f200 80b8 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 040c 	sub.w	r4, r4, ip
 8000380:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000384:	e79d      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000386:	4631      	mov	r1, r6
 8000388:	4630      	mov	r0, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	f1ce 0420 	rsb	r4, lr, #32
 8000392:	fa05 f30e 	lsl.w	r3, r5, lr
 8000396:	fa07 f70e 	lsl.w	r7, r7, lr
 800039a:	fa20 f804 	lsr.w	r8, r0, r4
 800039e:	0c3a      	lsrs	r2, r7, #16
 80003a0:	fa25 f404 	lsr.w	r4, r5, r4
 80003a4:	ea48 0803 	orr.w	r8, r8, r3
 80003a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003b0:	fb02 4411 	mls	r4, r2, r1, r4
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003bc:	fb01 f30c 	mul.w	r3, r1, ip
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x1bc>
 80003c8:	19ed      	adds	r5, r5, r7
 80003ca:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ce:	f080 808a 	bcs.w	80004e6 <__udivmoddi4+0x2c6>
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	f240 8087 	bls.w	80004e6 <__udivmoddi4+0x2c6>
 80003d8:	3902      	subs	r1, #2
 80003da:	443d      	add	r5, r7
 80003dc:	1aeb      	subs	r3, r5, r3
 80003de:	fa1f f588 	uxth.w	r5, r8
 80003e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ee:	fb00 f30c 	mul.w	r3, r0, ip
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1e6>
 80003f6:	19ed      	adds	r5, r5, r7
 80003f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fc:	d26f      	bcs.n	80004de <__udivmoddi4+0x2be>
 80003fe:	42ab      	cmp	r3, r5
 8000400:	d96d      	bls.n	80004de <__udivmoddi4+0x2be>
 8000402:	3802      	subs	r0, #2
 8000404:	443d      	add	r5, r7
 8000406:	1aeb      	subs	r3, r5, r3
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	e78f      	b.n	800032e <__udivmoddi4+0x10e>
 800040e:	f1c1 0720 	rsb	r7, r1, #32
 8000412:	fa22 f807 	lsr.w	r8, r2, r7
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 f401 	lsl.w	r4, r5, r1
 800041c:	ea48 0303 	orr.w	r3, r8, r3
 8000420:	fa20 fe07 	lsr.w	lr, r0, r7
 8000424:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000428:	40fd      	lsrs	r5, r7
 800042a:	ea4e 0e04 	orr.w	lr, lr, r4
 800042e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000432:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000436:	fb0c 5519 	mls	r5, ip, r9, r5
 800043a:	fa1f f883 	uxth.w	r8, r3
 800043e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000442:	fb09 f408 	mul.w	r4, r9, r8
 8000446:	42ac      	cmp	r4, r5
 8000448:	fa02 f201 	lsl.w	r2, r2, r1
 800044c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x244>
 8000452:	18ed      	adds	r5, r5, r3
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295
 8000458:	d243      	bcs.n	80004e2 <__udivmoddi4+0x2c2>
 800045a:	42ac      	cmp	r4, r5
 800045c:	d941      	bls.n	80004e2 <__udivmoddi4+0x2c2>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	441d      	add	r5, r3
 8000464:	1b2d      	subs	r5, r5, r4
 8000466:	fa1f fe8e 	uxth.w	lr, lr
 800046a:	fbb5 f0fc 	udiv	r0, r5, ip
 800046e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000472:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45a0      	cmp	r8, r4
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x26e>
 800047e:	18e4      	adds	r4, r4, r3
 8000480:	f100 35ff 	add.w	r5, r0, #4294967295
 8000484:	d229      	bcs.n	80004da <__udivmoddi4+0x2ba>
 8000486:	45a0      	cmp	r8, r4
 8000488:	d927      	bls.n	80004da <__udivmoddi4+0x2ba>
 800048a:	3802      	subs	r0, #2
 800048c:	441c      	add	r4, r3
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba4 0408 	sub.w	r4, r4, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454c      	cmp	r4, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	464d      	mov	r5, r9
 80004a0:	d315      	bcc.n	80004ce <__udivmoddi4+0x2ae>
 80004a2:	d012      	beq.n	80004ca <__udivmoddi4+0x2aa>
 80004a4:	b156      	cbz	r6, 80004bc <__udivmoddi4+0x29c>
 80004a6:	ebba 030e 	subs.w	r3, sl, lr
 80004aa:	eb64 0405 	sbc.w	r4, r4, r5
 80004ae:	fa04 f707 	lsl.w	r7, r4, r7
 80004b2:	40cb      	lsrs	r3, r1
 80004b4:	431f      	orrs	r7, r3
 80004b6:	40cc      	lsrs	r4, r1
 80004b8:	6037      	str	r7, [r6, #0]
 80004ba:	6074      	str	r4, [r6, #4]
 80004bc:	2100      	movs	r1, #0
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	4618      	mov	r0, r3
 80004c4:	e6f8      	b.n	80002b8 <__udivmoddi4+0x98>
 80004c6:	4690      	mov	r8, r2
 80004c8:	e6e0      	b.n	800028c <__udivmoddi4+0x6c>
 80004ca:	45c2      	cmp	sl, r8
 80004cc:	d2ea      	bcs.n	80004a4 <__udivmoddi4+0x284>
 80004ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d2:	eb69 0503 	sbc.w	r5, r9, r3
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7e4      	b.n	80004a4 <__udivmoddi4+0x284>
 80004da:	4628      	mov	r0, r5
 80004dc:	e7d7      	b.n	800048e <__udivmoddi4+0x26e>
 80004de:	4640      	mov	r0, r8
 80004e0:	e791      	b.n	8000406 <__udivmoddi4+0x1e6>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e7be      	b.n	8000464 <__udivmoddi4+0x244>
 80004e6:	4601      	mov	r1, r0
 80004e8:	e778      	b.n	80003dc <__udivmoddi4+0x1bc>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	e745      	b.n	800037c <__udivmoddi4+0x15c>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xe6>
 80004f4:	f1a8 0802 	sub.w	r8, r8, #2
 80004f8:	443d      	add	r5, r7
 80004fa:	e72b      	b.n	8000354 <__udivmoddi4+0x134>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000500:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <HAL_Init+0x30>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800050a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000512:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800051a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051c:	2003      	movs	r0, #3
 800051e:	f000 f81b 	bl	8000558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000522:	2000      	movs	r0, #0
 8000524:	f002 fa26 	bl	8002974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000528:	f002 fa02 	bl	8002930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800052c:	2000      	movs	r0, #0
 800052e:	bd08      	pop	{r3, pc}
 8000530:	40023c00 	.word	0x40023c00

08000534 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000534:	4a03      	ldr	r2, [pc, #12]	; (8000544 <HAL_IncTick+0x10>)
 8000536:	4b04      	ldr	r3, [pc, #16]	; (8000548 <HAL_IncTick+0x14>)
 8000538:	6811      	ldr	r1, [r2, #0]
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	440b      	add	r3, r1
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20003d74 	.word	0x20003d74
 8000548:	20000000 	.word	0x20000000

0800054c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800054c:	4b01      	ldr	r3, [pc, #4]	; (8000554 <HAL_GetTick+0x8>)
 800054e:	6818      	ldr	r0, [r3, #0]
}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20003d74 	.word	0x20003d74

08000558 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000558:	4a07      	ldr	r2, [pc, #28]	; (8000578 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800055a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800055c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000560:	041b      	lsls	r3, r3, #16
 8000562:	0c1b      	lsrs	r3, r3, #16
 8000564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000568:	0200      	lsls	r0, r0, #8
 800056a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000572:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000574:	60d3      	str	r3, [r2, #12]
 8000576:	4770      	bx	lr
 8000578:	e000ed00 	.word	0xe000ed00

0800057c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800057c:	4b17      	ldr	r3, [pc, #92]	; (80005dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	68dc      	ldr	r4, [r3, #12]
 8000582:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000586:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800058a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800058c:	2b04      	cmp	r3, #4
 800058e:	bf28      	it	cs
 8000590:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000592:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000594:	f04f 0501 	mov.w	r5, #1
 8000598:	fa05 f303 	lsl.w	r3, r5, r3
 800059c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a0:	bf8c      	ite	hi
 80005a2:	3c03      	subhi	r4, #3
 80005a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a6:	4019      	ands	r1, r3
 80005a8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005aa:	fa05 f404 	lsl.w	r4, r5, r4
 80005ae:	3c01      	subs	r4, #1
 80005b0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b4:	ea42 0201 	orr.w	r2, r2, r1
 80005b8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005bc:	bfaf      	iteee	ge
 80005be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c2:	f000 000f 	andlt.w	r0, r0, #15
 80005c6:	4b06      	ldrlt	r3, [pc, #24]	; (80005e0 <HAL_NVIC_SetPriority+0x64>)
 80005c8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ca:	bfa5      	ittet	ge
 80005cc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005d0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	bf00      	nop
 80005dc:	e000ed00 	.word	0xe000ed00
 80005e0:	e000ed14 	.word	0xe000ed14

080005e4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005e4:	0942      	lsrs	r2, r0, #5
 80005e6:	2301      	movs	r3, #1
 80005e8:	f000 001f 	and.w	r0, r0, #31
 80005ec:	fa03 f000 	lsl.w	r0, r3, r0
 80005f0:	4b01      	ldr	r3, [pc, #4]	; (80005f8 <HAL_NVIC_EnableIRQ+0x14>)
 80005f2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100

080005fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000600:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000602:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000604:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 80007cc <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000608:	4a6e      	ldr	r2, [pc, #440]	; (80007c4 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800060a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80007d0 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800060e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000610:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000612:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000616:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000618:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800061c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000620:	45b6      	cmp	lr, r6
 8000622:	f040 80b6 	bne.w	8000792 <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000626:	684c      	ldr	r4, [r1, #4]
 8000628:	f024 0710 	bic.w	r7, r4, #16
 800062c:	2f02      	cmp	r7, #2
 800062e:	d116      	bne.n	800065e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000630:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000634:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000638:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800063c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000640:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000644:	f04f 0c0f 	mov.w	ip, #15
 8000648:	fa0c fc0b 	lsl.w	ip, ip, fp
 800064c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000650:	690d      	ldr	r5, [r1, #16]
 8000652:	fa05 f50b 	lsl.w	r5, r5, fp
 8000656:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800065a:	f8ca 5020 	str.w	r5, [sl, #32]
 800065e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000662:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000664:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000668:	fa05 f50a 	lsl.w	r5, r5, sl
 800066c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800066e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000672:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000676:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800067a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800067c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000680:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000682:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000686:	d811      	bhi.n	80006ac <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000688:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800068a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800068e:	68cf      	ldr	r7, [r1, #12]
 8000690:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000694:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000698:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800069a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800069c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006a0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80006a4:	409f      	lsls	r7, r3
 80006a6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80006aa:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80006ac:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006ae:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006b0:	688f      	ldr	r7, [r1, #8]
 80006b2:	fa07 f70a 	lsl.w	r7, r7, sl
 80006b6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80006b8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006ba:	00e5      	lsls	r5, r4, #3
 80006bc:	d569      	bpl.n	8000792 <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006be:	f04f 0b00 	mov.w	fp, #0
 80006c2:	f8cd b00c 	str.w	fp, [sp, #12]
 80006c6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006ca:	4d3f      	ldr	r5, [pc, #252]	; (80007c8 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006cc:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80006d0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80006d4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80006d8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80006dc:	9703      	str	r7, [sp, #12]
 80006de:	9f03      	ldr	r7, [sp, #12]
 80006e0:	f023 0703 	bic.w	r7, r3, #3
 80006e4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80006e8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006ec:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80006f0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006f4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80006f8:	f04f 0e0f 	mov.w	lr, #15
 80006fc:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000700:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000702:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000706:	d04b      	beq.n	80007a0 <HAL_GPIO_Init+0x1a4>
 8000708:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800070c:	42a8      	cmp	r0, r5
 800070e:	d049      	beq.n	80007a4 <HAL_GPIO_Init+0x1a8>
 8000710:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000714:	42a8      	cmp	r0, r5
 8000716:	d047      	beq.n	80007a8 <HAL_GPIO_Init+0x1ac>
 8000718:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800071c:	42a8      	cmp	r0, r5
 800071e:	d045      	beq.n	80007ac <HAL_GPIO_Init+0x1b0>
 8000720:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000724:	42a8      	cmp	r0, r5
 8000726:	d043      	beq.n	80007b0 <HAL_GPIO_Init+0x1b4>
 8000728:	4548      	cmp	r0, r9
 800072a:	d043      	beq.n	80007b4 <HAL_GPIO_Init+0x1b8>
 800072c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000730:	42a8      	cmp	r0, r5
 8000732:	d041      	beq.n	80007b8 <HAL_GPIO_Init+0x1bc>
 8000734:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000738:	42a8      	cmp	r0, r5
 800073a:	d03f      	beq.n	80007bc <HAL_GPIO_Init+0x1c0>
 800073c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000740:	42a8      	cmp	r0, r5
 8000742:	d03d      	beq.n	80007c0 <HAL_GPIO_Init+0x1c4>
 8000744:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000748:	42a8      	cmp	r0, r5
 800074a:	bf14      	ite	ne
 800074c:	250a      	movne	r5, #10
 800074e:	2509      	moveq	r5, #9
 8000750:	fa05 f50c 	lsl.w	r5, r5, ip
 8000754:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000758:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800075a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800075c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800075e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000762:	bf0c      	ite	eq
 8000764:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000766:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000768:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800076a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800076c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000770:	bf0c      	ite	eq
 8000772:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000774:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000776:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000778:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800077a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800077e:	bf0c      	ite	eq
 8000780:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000782:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000784:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000786:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000788:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800078a:	bf54      	ite	pl
 800078c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800078e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000790:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000792:	3301      	adds	r3, #1
 8000794:	2b10      	cmp	r3, #16
 8000796:	f47f af3c 	bne.w	8000612 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800079a:	b005      	add	sp, #20
 800079c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007a0:	465d      	mov	r5, fp
 80007a2:	e7d5      	b.n	8000750 <HAL_GPIO_Init+0x154>
 80007a4:	2501      	movs	r5, #1
 80007a6:	e7d3      	b.n	8000750 <HAL_GPIO_Init+0x154>
 80007a8:	2502      	movs	r5, #2
 80007aa:	e7d1      	b.n	8000750 <HAL_GPIO_Init+0x154>
 80007ac:	2503      	movs	r5, #3
 80007ae:	e7cf      	b.n	8000750 <HAL_GPIO_Init+0x154>
 80007b0:	2504      	movs	r5, #4
 80007b2:	e7cd      	b.n	8000750 <HAL_GPIO_Init+0x154>
 80007b4:	2505      	movs	r5, #5
 80007b6:	e7cb      	b.n	8000750 <HAL_GPIO_Init+0x154>
 80007b8:	2506      	movs	r5, #6
 80007ba:	e7c9      	b.n	8000750 <HAL_GPIO_Init+0x154>
 80007bc:	2507      	movs	r5, #7
 80007be:	e7c7      	b.n	8000750 <HAL_GPIO_Init+0x154>
 80007c0:	2508      	movs	r5, #8
 80007c2:	e7c5      	b.n	8000750 <HAL_GPIO_Init+0x154>
 80007c4:	40013c00 	.word	0x40013c00
 80007c8:	40020000 	.word	0x40020000
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40021400 	.word	0x40021400

080007d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007d4:	b10a      	cbz	r2, 80007da <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007d6:	6181      	str	r1, [r0, #24]
 80007d8:	4770      	bx	lr
 80007da:	0409      	lsls	r1, r1, #16
 80007dc:	e7fb      	b.n	80007d6 <HAL_GPIO_WritePin+0x2>
	...

080007e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80007e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	9301      	str	r3, [sp, #4]
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80007e8:	4c18      	ldr	r4, [pc, #96]	; (800084c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80007f0:	641a      	str	r2, [r3, #64]	; 0x40
 80007f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <HAL_PWREx_EnableOverDrive+0x70>)
 80007fe:	2201      	movs	r2, #1
 8000800:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000802:	f7ff fea3 	bl	800054c <HAL_GetTick>
 8000806:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000808:	6863      	ldr	r3, [r4, #4]
 800080a:	03da      	lsls	r2, r3, #15
 800080c:	d50b      	bpl.n	8000826 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000810:	4c0e      	ldr	r4, [pc, #56]	; (800084c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000812:	2201      	movs	r2, #1
 8000814:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000816:	f7ff fe99 	bl	800054c <HAL_GetTick>
 800081a:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800081c:	6863      	ldr	r3, [r4, #4]
 800081e:	039b      	lsls	r3, r3, #14
 8000820:	d50a      	bpl.n	8000838 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000822:	2000      	movs	r0, #0
 8000824:	e006      	b.n	8000834 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000826:	f7ff fe91 	bl	800054c <HAL_GetTick>
 800082a:	1b40      	subs	r0, r0, r5
 800082c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000830:	d9ea      	bls.n	8000808 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8000832:	2003      	movs	r0, #3
}
 8000834:	b003      	add	sp, #12
 8000836:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000838:	f7ff fe88 	bl	800054c <HAL_GetTick>
 800083c:	1b40      	subs	r0, r0, r5
 800083e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000842:	d9eb      	bls.n	800081c <HAL_PWREx_EnableOverDrive+0x3c>
 8000844:	e7f5      	b.n	8000832 <HAL_PWREx_EnableOverDrive+0x52>
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800
 800084c:	40007000 	.word	0x40007000
 8000850:	420e0040 	.word	0x420e0040
 8000854:	420e0044 	.word	0x420e0044

08000858 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000858:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800085c:	4604      	mov	r4, r0
 800085e:	b918      	cbnz	r0, 8000868 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000860:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000862:	b002      	add	sp, #8
 8000864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000868:	6803      	ldr	r3, [r0, #0]
 800086a:	07dd      	lsls	r5, r3, #31
 800086c:	d410      	bmi.n	8000890 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800086e:	6823      	ldr	r3, [r4, #0]
 8000870:	0798      	lsls	r0, r3, #30
 8000872:	d458      	bmi.n	8000926 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000874:	6823      	ldr	r3, [r4, #0]
 8000876:	071a      	lsls	r2, r3, #28
 8000878:	f100 809a 	bmi.w	80009b0 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800087c:	6823      	ldr	r3, [r4, #0]
 800087e:	075b      	lsls	r3, r3, #29
 8000880:	f100 80b8 	bmi.w	80009f4 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000884:	69a2      	ldr	r2, [r4, #24]
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8119 	bne.w	8000abe <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 800088c:	2000      	movs	r0, #0
 800088e:	e7e8      	b.n	8000862 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000890:	4ba6      	ldr	r3, [pc, #664]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
 8000892:	689a      	ldr	r2, [r3, #8]
 8000894:	f002 020c 	and.w	r2, r2, #12
 8000898:	2a04      	cmp	r2, #4
 800089a:	d007      	beq.n	80008ac <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800089c:	689a      	ldr	r2, [r3, #8]
 800089e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008a2:	2a08      	cmp	r2, #8
 80008a4:	d10a      	bne.n	80008bc <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	0259      	lsls	r1, r3, #9
 80008aa:	d507      	bpl.n	80008bc <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008ac:	4b9f      	ldr	r3, [pc, #636]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	039a      	lsls	r2, r3, #14
 80008b2:	d5dc      	bpl.n	800086e <HAL_RCC_OscConfig+0x16>
 80008b4:	6863      	ldr	r3, [r4, #4]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1d9      	bne.n	800086e <HAL_RCC_OscConfig+0x16>
 80008ba:	e7d1      	b.n	8000860 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008bc:	6863      	ldr	r3, [r4, #4]
 80008be:	4d9b      	ldr	r5, [pc, #620]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
 80008c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008c4:	d111      	bne.n	80008ea <HAL_RCC_OscConfig+0x92>
 80008c6:	682b      	ldr	r3, [r5, #0]
 80008c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008cc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008ce:	f7ff fe3d 	bl	800054c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008d2:	4d96      	ldr	r5, [pc, #600]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80008d4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008d6:	682b      	ldr	r3, [r5, #0]
 80008d8:	039b      	lsls	r3, r3, #14
 80008da:	d4c8      	bmi.n	800086e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008dc:	f7ff fe36 	bl	800054c <HAL_GetTick>
 80008e0:	1b80      	subs	r0, r0, r6
 80008e2:	2864      	cmp	r0, #100	; 0x64
 80008e4:	d9f7      	bls.n	80008d6 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80008e6:	2003      	movs	r0, #3
 80008e8:	e7bb      	b.n	8000862 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008ee:	d104      	bne.n	80008fa <HAL_RCC_OscConfig+0xa2>
 80008f0:	682b      	ldr	r3, [r5, #0]
 80008f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008f6:	602b      	str	r3, [r5, #0]
 80008f8:	e7e5      	b.n	80008c6 <HAL_RCC_OscConfig+0x6e>
 80008fa:	682a      	ldr	r2, [r5, #0]
 80008fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000900:	602a      	str	r2, [r5, #0]
 8000902:	682a      	ldr	r2, [r5, #0]
 8000904:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000908:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800090a:	2b00      	cmp	r3, #0
 800090c:	d1df      	bne.n	80008ce <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800090e:	f7ff fe1d 	bl	800054c <HAL_GetTick>
 8000912:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000914:	682b      	ldr	r3, [r5, #0]
 8000916:	039f      	lsls	r7, r3, #14
 8000918:	d5a9      	bpl.n	800086e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800091a:	f7ff fe17 	bl	800054c <HAL_GetTick>
 800091e:	1b80      	subs	r0, r0, r6
 8000920:	2864      	cmp	r0, #100	; 0x64
 8000922:	d9f7      	bls.n	8000914 <HAL_RCC_OscConfig+0xbc>
 8000924:	e7df      	b.n	80008e6 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000926:	4b81      	ldr	r3, [pc, #516]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
 8000928:	689a      	ldr	r2, [r3, #8]
 800092a:	f012 0f0c 	tst.w	r2, #12
 800092e:	d007      	beq.n	8000940 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000930:	689a      	ldr	r2, [r3, #8]
 8000932:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000936:	2a08      	cmp	r2, #8
 8000938:	d111      	bne.n	800095e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	025e      	lsls	r6, r3, #9
 800093e:	d40e      	bmi.n	800095e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000940:	4b7a      	ldr	r3, [pc, #488]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	0795      	lsls	r5, r2, #30
 8000946:	d502      	bpl.n	800094e <HAL_RCC_OscConfig+0xf6>
 8000948:	68e2      	ldr	r2, [r4, #12]
 800094a:	2a01      	cmp	r2, #1
 800094c:	d188      	bne.n	8000860 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	6921      	ldr	r1, [r4, #16]
 8000952:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000956:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800095a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800095c:	e78a      	b.n	8000874 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800095e:	68e2      	ldr	r2, [r4, #12]
 8000960:	4b73      	ldr	r3, [pc, #460]	; (8000b30 <HAL_RCC_OscConfig+0x2d8>)
 8000962:	b1b2      	cbz	r2, 8000992 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000964:	2201      	movs	r2, #1
 8000966:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000968:	f7ff fdf0 	bl	800054c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800096c:	4d6f      	ldr	r5, [pc, #444]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800096e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000970:	682b      	ldr	r3, [r5, #0]
 8000972:	0798      	lsls	r0, r3, #30
 8000974:	d507      	bpl.n	8000986 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000976:	682b      	ldr	r3, [r5, #0]
 8000978:	6922      	ldr	r2, [r4, #16]
 800097a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800097e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000982:	602b      	str	r3, [r5, #0]
 8000984:	e776      	b.n	8000874 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000986:	f7ff fde1 	bl	800054c <HAL_GetTick>
 800098a:	1b80      	subs	r0, r0, r6
 800098c:	2802      	cmp	r0, #2
 800098e:	d9ef      	bls.n	8000970 <HAL_RCC_OscConfig+0x118>
 8000990:	e7a9      	b.n	80008e6 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000992:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000994:	f7ff fdda 	bl	800054c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000998:	4d64      	ldr	r5, [pc, #400]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800099a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800099c:	682b      	ldr	r3, [r5, #0]
 800099e:	0799      	lsls	r1, r3, #30
 80009a0:	f57f af68 	bpl.w	8000874 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009a4:	f7ff fdd2 	bl	800054c <HAL_GetTick>
 80009a8:	1b80      	subs	r0, r0, r6
 80009aa:	2802      	cmp	r0, #2
 80009ac:	d9f6      	bls.n	800099c <HAL_RCC_OscConfig+0x144>
 80009ae:	e79a      	b.n	80008e6 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009b0:	6962      	ldr	r2, [r4, #20]
 80009b2:	4b60      	ldr	r3, [pc, #384]	; (8000b34 <HAL_RCC_OscConfig+0x2dc>)
 80009b4:	b17a      	cbz	r2, 80009d6 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80009b6:	2201      	movs	r2, #1
 80009b8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009ba:	f7ff fdc7 	bl	800054c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009be:	4d5b      	ldr	r5, [pc, #364]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80009c0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009c2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009c4:	079f      	lsls	r7, r3, #30
 80009c6:	f53f af59 	bmi.w	800087c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009ca:	f7ff fdbf 	bl	800054c <HAL_GetTick>
 80009ce:	1b80      	subs	r0, r0, r6
 80009d0:	2802      	cmp	r0, #2
 80009d2:	d9f6      	bls.n	80009c2 <HAL_RCC_OscConfig+0x16a>
 80009d4:	e787      	b.n	80008e6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80009d6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009d8:	f7ff fdb8 	bl	800054c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009dc:	4d53      	ldr	r5, [pc, #332]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80009de:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009e0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009e2:	0798      	lsls	r0, r3, #30
 80009e4:	f57f af4a 	bpl.w	800087c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009e8:	f7ff fdb0 	bl	800054c <HAL_GetTick>
 80009ec:	1b80      	subs	r0, r0, r6
 80009ee:	2802      	cmp	r0, #2
 80009f0:	d9f6      	bls.n	80009e0 <HAL_RCC_OscConfig+0x188>
 80009f2:	e778      	b.n	80008e6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009f4:	4b4d      	ldr	r3, [pc, #308]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
 80009f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009f8:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80009fc:	d128      	bne.n	8000a50 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	9201      	str	r2, [sp, #4]
 8000a00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a02:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a06:	641a      	str	r2, [r3, #64]	; 0x40
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	9301      	str	r3, [sp, #4]
 8000a10:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a12:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a14:	4d48      	ldr	r5, [pc, #288]	; (8000b38 <HAL_RCC_OscConfig+0x2e0>)
 8000a16:	682b      	ldr	r3, [r5, #0]
 8000a18:	05d9      	lsls	r1, r3, #23
 8000a1a:	d51b      	bpl.n	8000a54 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a1c:	68a3      	ldr	r3, [r4, #8]
 8000a1e:	4d43      	ldr	r5, [pc, #268]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d127      	bne.n	8000a74 <HAL_RCC_OscConfig+0x21c>
 8000a24:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000a2c:	f7ff fd8e 	bl	800054c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a30:	4d3e      	ldr	r5, [pc, #248]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a32:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a34:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a38:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a3a:	079b      	lsls	r3, r3, #30
 8000a3c:	d539      	bpl.n	8000ab2 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000a3e:	2e00      	cmp	r6, #0
 8000a40:	f43f af20 	beq.w	8000884 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a44:	4a39      	ldr	r2, [pc, #228]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
 8000a46:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4e:	e719      	b.n	8000884 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000a50:	2600      	movs	r6, #0
 8000a52:	e7df      	b.n	8000a14 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a54:	682b      	ldr	r3, [r5, #0]
 8000a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000a5c:	f7ff fd76 	bl	800054c <HAL_GetTick>
 8000a60:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a62:	682b      	ldr	r3, [r5, #0]
 8000a64:	05da      	lsls	r2, r3, #23
 8000a66:	d4d9      	bmi.n	8000a1c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a68:	f7ff fd70 	bl	800054c <HAL_GetTick>
 8000a6c:	1bc0      	subs	r0, r0, r7
 8000a6e:	2802      	cmp	r0, #2
 8000a70:	d9f7      	bls.n	8000a62 <HAL_RCC_OscConfig+0x20a>
 8000a72:	e738      	b.n	80008e6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a74:	2b05      	cmp	r3, #5
 8000a76:	d104      	bne.n	8000a82 <HAL_RCC_OscConfig+0x22a>
 8000a78:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a7a:	f043 0304 	orr.w	r3, r3, #4
 8000a7e:	672b      	str	r3, [r5, #112]	; 0x70
 8000a80:	e7d0      	b.n	8000a24 <HAL_RCC_OscConfig+0x1cc>
 8000a82:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a84:	f022 0201 	bic.w	r2, r2, #1
 8000a88:	672a      	str	r2, [r5, #112]	; 0x70
 8000a8a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a8c:	f022 0204 	bic.w	r2, r2, #4
 8000a90:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d1ca      	bne.n	8000a2c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000a96:	f7ff fd59 	bl	800054c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a9a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a9e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000aa0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aa2:	0798      	lsls	r0, r3, #30
 8000aa4:	d5cb      	bpl.n	8000a3e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aa6:	f7ff fd51 	bl	800054c <HAL_GetTick>
 8000aaa:	1bc0      	subs	r0, r0, r7
 8000aac:	4540      	cmp	r0, r8
 8000aae:	d9f7      	bls.n	8000aa0 <HAL_RCC_OscConfig+0x248>
 8000ab0:	e719      	b.n	80008e6 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ab2:	f7ff fd4b 	bl	800054c <HAL_GetTick>
 8000ab6:	1bc0      	subs	r0, r0, r7
 8000ab8:	4540      	cmp	r0, r8
 8000aba:	d9bd      	bls.n	8000a38 <HAL_RCC_OscConfig+0x1e0>
 8000abc:	e713      	b.n	80008e6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000abe:	4d1b      	ldr	r5, [pc, #108]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
 8000ac0:	68ab      	ldr	r3, [r5, #8]
 8000ac2:	f003 030c 	and.w	r3, r3, #12
 8000ac6:	2b08      	cmp	r3, #8
 8000ac8:	f43f aeca 	beq.w	8000860 <HAL_RCC_OscConfig+0x8>
 8000acc:	4e1b      	ldr	r6, [pc, #108]	; (8000b3c <HAL_RCC_OscConfig+0x2e4>)
 8000ace:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ad0:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000ad2:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ad4:	d134      	bne.n	8000b40 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000ad6:	f7ff fd39 	bl	800054c <HAL_GetTick>
 8000ada:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000adc:	682b      	ldr	r3, [r5, #0]
 8000ade:	0199      	lsls	r1, r3, #6
 8000ae0:	d41e      	bmi.n	8000b20 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ae2:	6a22      	ldr	r2, [r4, #32]
 8000ae4:	69e3      	ldr	r3, [r4, #28]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000aea:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000aee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000af0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000af4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000af8:	0852      	lsrs	r2, r2, #1
 8000afa:	3a01      	subs	r2, #1
 8000afc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b00:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b02:	2301      	movs	r3, #1
 8000b04:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b06:	f7ff fd21 	bl	800054c <HAL_GetTick>
 8000b0a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b0c:	6823      	ldr	r3, [r4, #0]
 8000b0e:	019a      	lsls	r2, r3, #6
 8000b10:	f53f aebc 	bmi.w	800088c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b14:	f7ff fd1a 	bl	800054c <HAL_GetTick>
 8000b18:	1b40      	subs	r0, r0, r5
 8000b1a:	2802      	cmp	r0, #2
 8000b1c:	d9f6      	bls.n	8000b0c <HAL_RCC_OscConfig+0x2b4>
 8000b1e:	e6e2      	b.n	80008e6 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b20:	f7ff fd14 	bl	800054c <HAL_GetTick>
 8000b24:	1bc0      	subs	r0, r0, r7
 8000b26:	2802      	cmp	r0, #2
 8000b28:	d9d8      	bls.n	8000adc <HAL_RCC_OscConfig+0x284>
 8000b2a:	e6dc      	b.n	80008e6 <HAL_RCC_OscConfig+0x8e>
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	42470000 	.word	0x42470000
 8000b34:	42470e80 	.word	0x42470e80
 8000b38:	40007000 	.word	0x40007000
 8000b3c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000b40:	f7ff fd04 	bl	800054c <HAL_GetTick>
 8000b44:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b46:	682b      	ldr	r3, [r5, #0]
 8000b48:	019b      	lsls	r3, r3, #6
 8000b4a:	f57f ae9f 	bpl.w	800088c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b4e:	f7ff fcfd 	bl	800054c <HAL_GetTick>
 8000b52:	1b00      	subs	r0, r0, r4
 8000b54:	2802      	cmp	r0, #2
 8000b56:	d9f6      	bls.n	8000b46 <HAL_RCC_OscConfig+0x2ee>
 8000b58:	e6c5      	b.n	80008e6 <HAL_RCC_OscConfig+0x8e>
 8000b5a:	bf00      	nop

08000b5c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b5c:	4913      	ldr	r1, [pc, #76]	; (8000bac <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000b5e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b60:	688b      	ldr	r3, [r1, #8]
 8000b62:	f003 030c 	and.w	r3, r3, #12
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	d003      	beq.n	8000b72 <HAL_RCC_GetSysClockFreq+0x16>
 8000b6a:	2b08      	cmp	r3, #8
 8000b6c:	d003      	beq.n	8000b76 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b6e:	4810      	ldr	r0, [pc, #64]	; (8000bb0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b70:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000b72:	4810      	ldr	r0, [pc, #64]	; (8000bb4 <HAL_RCC_GetSysClockFreq+0x58>)
 8000b74:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b76:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b78:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b7a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b7c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b80:	bf14      	ite	ne
 8000b82:	480c      	ldrne	r0, [pc, #48]	; (8000bb4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b84:	480a      	ldreq	r0, [pc, #40]	; (8000bb0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b86:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000b8a:	bf18      	it	ne
 8000b8c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b8e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b92:	fba1 0100 	umull	r0, r1, r1, r0
 8000b96:	f7ff fb2b 	bl	80001f0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000b9a:	4b04      	ldr	r3, [pc, #16]	; (8000bac <HAL_RCC_GetSysClockFreq+0x50>)
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000ba6:	fbb0 f0f3 	udiv	r0, r0, r3
 8000baa:	bd08      	pop	{r3, pc}
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	00f42400 	.word	0x00f42400
 8000bb4:	007a1200 	.word	0x007a1200

08000bb8 <HAL_RCC_ClockConfig>:
{
 8000bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bbc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	b910      	cbnz	r0, 8000bc8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000bc8:	4b44      	ldr	r3, [pc, #272]	; (8000cdc <HAL_RCC_ClockConfig+0x124>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	f002 020f 	and.w	r2, r2, #15
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	d328      	bcc.n	8000c26 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bd4:	6821      	ldr	r1, [r4, #0]
 8000bd6:	078f      	lsls	r7, r1, #30
 8000bd8:	d42d      	bmi.n	8000c36 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bda:	07c8      	lsls	r0, r1, #31
 8000bdc:	d440      	bmi.n	8000c60 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000bde:	4b3f      	ldr	r3, [pc, #252]	; (8000cdc <HAL_RCC_ClockConfig+0x124>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	f002 020f 	and.w	r2, r2, #15
 8000be6:	4295      	cmp	r5, r2
 8000be8:	d366      	bcc.n	8000cb8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bea:	6822      	ldr	r2, [r4, #0]
 8000bec:	0751      	lsls	r1, r2, #29
 8000bee:	d46c      	bmi.n	8000cca <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bf0:	0713      	lsls	r3, r2, #28
 8000bf2:	d507      	bpl.n	8000c04 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000bf4:	4a3a      	ldr	r2, [pc, #232]	; (8000ce0 <HAL_RCC_ClockConfig+0x128>)
 8000bf6:	6921      	ldr	r1, [r4, #16]
 8000bf8:	6893      	ldr	r3, [r2, #8]
 8000bfa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000bfe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c02:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c04:	f7ff ffaa 	bl	8000b5c <HAL_RCC_GetSysClockFreq>
 8000c08:	4b35      	ldr	r3, [pc, #212]	; (8000ce0 <HAL_RCC_ClockConfig+0x128>)
 8000c0a:	4a36      	ldr	r2, [pc, #216]	; (8000ce4 <HAL_RCC_ClockConfig+0x12c>)
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c12:	5cd3      	ldrb	r3, [r2, r3]
 8000c14:	40d8      	lsrs	r0, r3
 8000c16:	4b34      	ldr	r3, [pc, #208]	; (8000ce8 <HAL_RCC_ClockConfig+0x130>)
 8000c18:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f001 feaa 	bl	8002974 <HAL_InitTick>
  return HAL_OK;
 8000c20:	2000      	movs	r0, #0
 8000c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c26:	b2ca      	uxtb	r2, r1
 8000c28:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f003 030f 	and.w	r3, r3, #15
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d1c6      	bne.n	8000bc2 <HAL_RCC_ClockConfig+0xa>
 8000c34:	e7ce      	b.n	8000bd4 <HAL_RCC_ClockConfig+0x1c>
 8000c36:	4b2a      	ldr	r3, [pc, #168]	; (8000ce0 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c38:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	689a      	ldrne	r2, [r3, #8]
 8000c40:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000c44:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c46:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c48:	bf42      	ittt	mi
 8000c4a:	689a      	ldrmi	r2, [r3, #8]
 8000c4c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000c50:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c52:	689a      	ldr	r2, [r3, #8]
 8000c54:	68a0      	ldr	r0, [r4, #8]
 8000c56:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c5a:	4302      	orrs	r2, r0
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	e7bc      	b.n	8000bda <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c60:	6862      	ldr	r2, [r4, #4]
 8000c62:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_RCC_ClockConfig+0x128>)
 8000c64:	2a01      	cmp	r2, #1
 8000c66:	d11d      	bne.n	8000ca4 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c6e:	d0a8      	beq.n	8000bc2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c70:	4e1b      	ldr	r6, [pc, #108]	; (8000ce0 <HAL_RCC_ClockConfig+0x128>)
 8000c72:	68b3      	ldr	r3, [r6, #8]
 8000c74:	f023 0303 	bic.w	r3, r3, #3
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000c7c:	f7ff fc66 	bl	800054c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c80:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c84:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c86:	68b3      	ldr	r3, [r6, #8]
 8000c88:	6862      	ldr	r2, [r4, #4]
 8000c8a:	f003 030c 	and.w	r3, r3, #12
 8000c8e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c92:	d0a4      	beq.n	8000bde <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c94:	f7ff fc5a 	bl	800054c <HAL_GetTick>
 8000c98:	1bc0      	subs	r0, r0, r7
 8000c9a:	4540      	cmp	r0, r8
 8000c9c:	d9f3      	bls.n	8000c86 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000c9e:	2003      	movs	r0, #3
}
 8000ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ca4:	1e91      	subs	r1, r2, #2
 8000ca6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ca8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000caa:	d802      	bhi.n	8000cb2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cac:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000cb0:	e7dd      	b.n	8000c6e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb2:	f013 0f02 	tst.w	r3, #2
 8000cb6:	e7da      	b.n	8000c6e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cb8:	b2ea      	uxtb	r2, r5
 8000cba:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	429d      	cmp	r5, r3
 8000cc4:	f47f af7d 	bne.w	8000bc2 <HAL_RCC_ClockConfig+0xa>
 8000cc8:	e78f      	b.n	8000bea <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000cca:	4905      	ldr	r1, [pc, #20]	; (8000ce0 <HAL_RCC_ClockConfig+0x128>)
 8000ccc:	68e0      	ldr	r0, [r4, #12]
 8000cce:	688b      	ldr	r3, [r1, #8]
 8000cd0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000cd4:	4303      	orrs	r3, r0
 8000cd6:	608b      	str	r3, [r1, #8]
 8000cd8:	e78a      	b.n	8000bf0 <HAL_RCC_ClockConfig+0x38>
 8000cda:	bf00      	nop
 8000cdc:	40023c00 	.word	0x40023c00
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	08002bd7 	.word	0x08002bd7
 8000ce8:	20000008 	.word	0x20000008

08000cec <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000cee:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000cf6:	5cd3      	ldrb	r3, [r2, r3]
 8000cf8:	4a03      	ldr	r2, [pc, #12]	; (8000d08 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000cfa:	6810      	ldr	r0, [r2, #0]
}
 8000cfc:	40d8      	lsrs	r0, r3
 8000cfe:	4770      	bx	lr
 8000d00:	40023800 	.word	0x40023800
 8000d04:	08002be7 	.word	0x08002be7
 8000d08:	20000008 	.word	0x20000008

08000d0c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <HAL_RCC_GetClockConfig+0x34>)
 8000d12:	689a      	ldr	r2, [r3, #8]
 8000d14:	f002 0203 	and.w	r2, r2, #3
 8000d18:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000d1a:	689a      	ldr	r2, [r3, #8]
 8000d1c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000d20:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000d22:	689a      	ldr	r2, [r3, #8]
 8000d24:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000d28:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000d32:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <HAL_RCC_GetClockConfig+0x38>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f003 030f 	and.w	r3, r3, #15
 8000d3c:	600b      	str	r3, [r1, #0]
 8000d3e:	4770      	bx	lr
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40023c00 	.word	0x40023c00

08000d48 <HAL_TIM_Base_MspInit>:
 8000d48:	4770      	bx	lr

08000d4a <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000d4a:	6803      	ldr	r3, [r0, #0]
 8000d4c:	68da      	ldr	r2, [r3, #12]
 8000d4e:	f042 0201 	orr.w	r2, r2, #1
 8000d52:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	f042 0201 	orr.w	r2, r2, #1
 8000d5a:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	4770      	bx	lr

08000d60 <HAL_TIM_OC_DelayElapsedCallback>:
 8000d60:	4770      	bx	lr

08000d62 <HAL_TIM_IC_CaptureCallback>:
 8000d62:	4770      	bx	lr

08000d64 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000d64:	4770      	bx	lr

08000d66 <HAL_TIM_TriggerCallback>:
 8000d66:	4770      	bx	lr

08000d68 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d68:	6803      	ldr	r3, [r0, #0]
 8000d6a:	691a      	ldr	r2, [r3, #16]
 8000d6c:	0791      	lsls	r1, r2, #30
{
 8000d6e:	b510      	push	{r4, lr}
 8000d70:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d72:	d50e      	bpl.n	8000d92 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000d74:	68da      	ldr	r2, [r3, #12]
 8000d76:	0792      	lsls	r2, r2, #30
 8000d78:	d50b      	bpl.n	8000d92 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000d7a:	f06f 0202 	mvn.w	r2, #2
 8000d7e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d80:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d82:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d84:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d86:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d88:	d077      	beq.n	8000e7a <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000d8a:	f7ff ffea 	bl	8000d62 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000d92:	6823      	ldr	r3, [r4, #0]
 8000d94:	691a      	ldr	r2, [r3, #16]
 8000d96:	0750      	lsls	r0, r2, #29
 8000d98:	d510      	bpl.n	8000dbc <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000d9a:	68da      	ldr	r2, [r3, #12]
 8000d9c:	0751      	lsls	r1, r2, #29
 8000d9e:	d50d      	bpl.n	8000dbc <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000da0:	f06f 0204 	mvn.w	r2, #4
 8000da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000da6:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000da8:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000daa:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000dae:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000db0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000db2:	d068      	beq.n	8000e86 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000db4:	f7ff ffd5 	bl	8000d62 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000db8:	2300      	movs	r3, #0
 8000dba:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000dbc:	6823      	ldr	r3, [r4, #0]
 8000dbe:	691a      	ldr	r2, [r3, #16]
 8000dc0:	0712      	lsls	r2, r2, #28
 8000dc2:	d50f      	bpl.n	8000de4 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000dc4:	68da      	ldr	r2, [r3, #12]
 8000dc6:	0710      	lsls	r0, r2, #28
 8000dc8:	d50c      	bpl.n	8000de4 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000dca:	f06f 0208 	mvn.w	r2, #8
 8000dce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000dd0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000dd2:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000dd4:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000dd6:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000dd8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000dda:	d05a      	beq.n	8000e92 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000ddc:	f7ff ffc1 	bl	8000d62 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000de0:	2300      	movs	r3, #0
 8000de2:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000de4:	6823      	ldr	r3, [r4, #0]
 8000de6:	691a      	ldr	r2, [r3, #16]
 8000de8:	06d2      	lsls	r2, r2, #27
 8000dea:	d510      	bpl.n	8000e0e <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000dec:	68da      	ldr	r2, [r3, #12]
 8000dee:	06d0      	lsls	r0, r2, #27
 8000df0:	d50d      	bpl.n	8000e0e <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000df2:	f06f 0210 	mvn.w	r2, #16
 8000df6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000df8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000dfa:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000dfc:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000e00:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000e02:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e04:	d04b      	beq.n	8000e9e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e06:	f7ff ffac 	bl	8000d62 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000e0e:	6823      	ldr	r3, [r4, #0]
 8000e10:	691a      	ldr	r2, [r3, #16]
 8000e12:	07d1      	lsls	r1, r2, #31
 8000e14:	d508      	bpl.n	8000e28 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000e16:	68da      	ldr	r2, [r3, #12]
 8000e18:	07d2      	lsls	r2, r2, #31
 8000e1a:	d505      	bpl.n	8000e28 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000e1c:	f06f 0201 	mvn.w	r2, #1
 8000e20:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000e22:	4620      	mov	r0, r4
 8000e24:	f001 fd7a 	bl	800291c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000e28:	6823      	ldr	r3, [r4, #0]
 8000e2a:	691a      	ldr	r2, [r3, #16]
 8000e2c:	0610      	lsls	r0, r2, #24
 8000e2e:	d508      	bpl.n	8000e42 <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000e30:	68da      	ldr	r2, [r3, #12]
 8000e32:	0611      	lsls	r1, r2, #24
 8000e34:	d505      	bpl.n	8000e42 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000e36:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000e3a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	f000 f8b4 	bl	8000faa <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000e42:	6823      	ldr	r3, [r4, #0]
 8000e44:	691a      	ldr	r2, [r3, #16]
 8000e46:	0652      	lsls	r2, r2, #25
 8000e48:	d508      	bpl.n	8000e5c <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000e4a:	68da      	ldr	r2, [r3, #12]
 8000e4c:	0650      	lsls	r0, r2, #25
 8000e4e:	d505      	bpl.n	8000e5c <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000e50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000e54:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000e56:	4620      	mov	r0, r4
 8000e58:	f7ff ff85 	bl	8000d66 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000e5c:	6823      	ldr	r3, [r4, #0]
 8000e5e:	691a      	ldr	r2, [r3, #16]
 8000e60:	0691      	lsls	r1, r2, #26
 8000e62:	d522      	bpl.n	8000eaa <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000e64:	68da      	ldr	r2, [r3, #12]
 8000e66:	0692      	lsls	r2, r2, #26
 8000e68:	d51f      	bpl.n	8000eaa <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e6a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000e6e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e70:	611a      	str	r2, [r3, #16]
    }
  }
}
 8000e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8000e76:	f000 b897 	b.w	8000fa8 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e7a:	f7ff ff71 	bl	8000d60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e7e:	4620      	mov	r0, r4
 8000e80:	f7ff ff70 	bl	8000d64 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e84:	e783      	b.n	8000d8e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e86:	f7ff ff6b 	bl	8000d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	f7ff ff6a 	bl	8000d64 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e90:	e792      	b.n	8000db8 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e92:	f7ff ff65 	bl	8000d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8000e96:	4620      	mov	r0, r4
 8000e98:	f7ff ff64 	bl	8000d64 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e9c:	e7a0      	b.n	8000de0 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e9e:	f7ff ff5f 	bl	8000d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ea2:	4620      	mov	r0, r4
 8000ea4:	f7ff ff5e 	bl	8000d64 <HAL_TIM_PWM_PulseFinishedCallback>
 8000ea8:	e7af      	b.n	8000e0a <HAL_TIM_IRQHandler+0xa2>
 8000eaa:	bd10      	pop	{r4, pc}

08000eac <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000eac:	4a2e      	ldr	r2, [pc, #184]	; (8000f68 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8000eae:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000eb0:	4290      	cmp	r0, r2
 8000eb2:	d012      	beq.n	8000eda <TIM_Base_SetConfig+0x2e>
 8000eb4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000eb8:	d00f      	beq.n	8000eda <TIM_Base_SetConfig+0x2e>
 8000eba:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000ebe:	4290      	cmp	r0, r2
 8000ec0:	d00b      	beq.n	8000eda <TIM_Base_SetConfig+0x2e>
 8000ec2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ec6:	4290      	cmp	r0, r2
 8000ec8:	d007      	beq.n	8000eda <TIM_Base_SetConfig+0x2e>
 8000eca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ece:	4290      	cmp	r0, r2
 8000ed0:	d003      	beq.n	8000eda <TIM_Base_SetConfig+0x2e>
 8000ed2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000ed6:	4290      	cmp	r0, r2
 8000ed8:	d11d      	bne.n	8000f16 <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000eda:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000ee0:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000ee2:	4a21      	ldr	r2, [pc, #132]	; (8000f68 <TIM_Base_SetConfig+0xbc>)
 8000ee4:	4290      	cmp	r0, r2
 8000ee6:	d104      	bne.n	8000ef2 <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000ee8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	e028      	b.n	8000f44 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000ef2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000ef6:	d0f7      	beq.n	8000ee8 <TIM_Base_SetConfig+0x3c>
 8000ef8:	4a1c      	ldr	r2, [pc, #112]	; (8000f6c <TIM_Base_SetConfig+0xc0>)
 8000efa:	4290      	cmp	r0, r2
 8000efc:	d0f4      	beq.n	8000ee8 <TIM_Base_SetConfig+0x3c>
 8000efe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f02:	4290      	cmp	r0, r2
 8000f04:	d0f0      	beq.n	8000ee8 <TIM_Base_SetConfig+0x3c>
 8000f06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f0a:	4290      	cmp	r0, r2
 8000f0c:	d0ec      	beq.n	8000ee8 <TIM_Base_SetConfig+0x3c>
 8000f0e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000f12:	4290      	cmp	r0, r2
 8000f14:	d0e8      	beq.n	8000ee8 <TIM_Base_SetConfig+0x3c>
 8000f16:	4a16      	ldr	r2, [pc, #88]	; (8000f70 <TIM_Base_SetConfig+0xc4>)
 8000f18:	4290      	cmp	r0, r2
 8000f1a:	d0e5      	beq.n	8000ee8 <TIM_Base_SetConfig+0x3c>
 8000f1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f20:	4290      	cmp	r0, r2
 8000f22:	d0e1      	beq.n	8000ee8 <TIM_Base_SetConfig+0x3c>
 8000f24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f28:	4290      	cmp	r0, r2
 8000f2a:	d0dd      	beq.n	8000ee8 <TIM_Base_SetConfig+0x3c>
 8000f2c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000f30:	4290      	cmp	r0, r2
 8000f32:	d0d9      	beq.n	8000ee8 <TIM_Base_SetConfig+0x3c>
 8000f34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f38:	4290      	cmp	r0, r2
 8000f3a:	d0d5      	beq.n	8000ee8 <TIM_Base_SetConfig+0x3c>
 8000f3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f40:	4290      	cmp	r0, r2
 8000f42:	d0d1      	beq.n	8000ee8 <TIM_Base_SetConfig+0x3c>
  }

  TIMx->CR1 = tmpcr1;
 8000f44:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000f46:	688b      	ldr	r3, [r1, #8]
 8000f48:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000f4a:	680b      	ldr	r3, [r1, #0]
 8000f4c:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <TIM_Base_SetConfig+0xbc>)
 8000f50:	4298      	cmp	r0, r3
 8000f52:	d006      	beq.n	8000f62 <TIM_Base_SetConfig+0xb6>
 8000f54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f58:	4298      	cmp	r0, r3
 8000f5a:	d002      	beq.n	8000f62 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	6143      	str	r3, [r0, #20]
}
 8000f60:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8000f62:	690b      	ldr	r3, [r1, #16]
 8000f64:	6303      	str	r3, [r0, #48]	; 0x30
 8000f66:	e7f9      	b.n	8000f5c <TIM_Base_SetConfig+0xb0>
 8000f68:	40010000 	.word	0x40010000
 8000f6c:	40000400 	.word	0x40000400
 8000f70:	40014000 	.word	0x40014000

08000f74 <HAL_TIM_Base_Init>:
{ 
 8000f74:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000f76:	4604      	mov	r4, r0
 8000f78:	b1a0      	cbz	r0, 8000fa4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000f7a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000f7e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f82:	b91b      	cbnz	r3, 8000f8c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000f84:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8000f88:	f7ff fede 	bl	8000d48 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000f92:	6820      	ldr	r0, [r4, #0]
 8000f94:	1d21      	adds	r1, r4, #4
 8000f96:	f7ff ff89 	bl	8000eac <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000fa4:	2001      	movs	r0, #1
}
 8000fa6:	bd10      	pop	{r4, pc}

08000fa8 <HAL_TIMEx_CommutationCallback>:
 8000fa8:	4770      	bx	lr

08000faa <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000faa:	4770      	bx	lr

08000fac <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000fac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000fb0:	680a      	ldr	r2, [r1, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb2:	fa92 f4a2 	rbit	r4, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000fb6:	f04f 0e01 	mov.w	lr, #1
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000fba:	fab4 f484 	clz	r4, r4
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000fbe:	2503      	movs	r5, #3
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000fc0:	270f      	movs	r7, #15
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000fc2:	fa32 f304 	lsrs.w	r3, r2, r4
 8000fc6:	d10d      	bne.n	8000fe4 <LL_GPIO_Init+0x38>
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000fc8:	684b      	ldr	r3, [r1, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d806      	bhi.n	8000fde <LL_GPIO_Init+0x32>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000fd0:	6843      	ldr	r3, [r0, #4]
 8000fd2:	68c9      	ldr	r1, [r1, #12]
 8000fd4:	ea23 0302 	bic.w	r3, r3, r2
 8000fd8:	434a      	muls	r2, r1
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	6042      	str	r2, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8000fde:	2001      	movs	r0, #1
 8000fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000fe4:	fa0e f304 	lsl.w	r3, lr, r4
    if (currentpin)
 8000fe8:	4013      	ands	r3, r2
 8000fea:	d069      	beq.n	80010c0 <LL_GPIO_Init+0x114>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000fec:	f8d1 8004 	ldr.w	r8, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000ff0:	f8d0 9000 	ldr.w	r9, [r0]
 8000ff4:	fa93 fca3 	rbit	ip, r3
 8000ff8:	fabc fc8c 	clz	ip, ip
 8000ffc:	fa93 f6a3 	rbit	r6, r3
 8001000:	fab6 f686 	clz	r6, r6
 8001004:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8001008:	fa05 fc0c 	lsl.w	ip, r5, ip
 800100c:	0076      	lsls	r6, r6, #1
 800100e:	ea29 0c0c 	bic.w	ip, r9, ip
 8001012:	fa08 f606 	lsl.w	r6, r8, r6
 8001016:	ea4c 0606 	orr.w	r6, ip, r6
 800101a:	6006      	str	r6, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800101c:	f108 36ff 	add.w	r6, r8, #4294967295
 8001020:	2e01      	cmp	r6, #1
 8001022:	d816      	bhi.n	8001052 <LL_GPIO_Init+0xa6>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001024:	6886      	ldr	r6, [r0, #8]
 8001026:	fa93 fca3 	rbit	ip, r3
 800102a:	fabc fc8c 	clz	ip, ip
 800102e:	fa93 f9a3 	rbit	r9, r3
 8001032:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8001036:	fa05 fc0c 	lsl.w	ip, r5, ip
 800103a:	ea26 0c0c 	bic.w	ip, r6, ip
 800103e:	fab9 f989 	clz	r9, r9
 8001042:	688e      	ldr	r6, [r1, #8]
 8001044:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8001048:	fa06 f609 	lsl.w	r6, r6, r9
 800104c:	ea4c 0606 	orr.w	r6, ip, r6
 8001050:	6086      	str	r6, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001052:	68c6      	ldr	r6, [r0, #12]
 8001054:	fa93 fca3 	rbit	ip, r3
 8001058:	fabc fc8c 	clz	ip, ip
 800105c:	fa93 f9a3 	rbit	r9, r3
 8001060:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8001064:	fa05 fc0c 	lsl.w	ip, r5, ip
 8001068:	ea26 0c0c 	bic.w	ip, r6, ip
 800106c:	fab9 f989 	clz	r9, r9
 8001070:	690e      	ldr	r6, [r1, #16]
 8001072:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8001076:	fa06 f609 	lsl.w	r6, r6, r9
 800107a:	ea4c 0606 	orr.w	r6, ip, r6
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800107e:	f1b8 0f02 	cmp.w	r8, #2
 8001082:	60c6      	str	r6, [r0, #12]
 8001084:	d11c      	bne.n	80010c0 <LL_GPIO_Init+0x114>
 8001086:	fa93 f6a3 	rbit	r6, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800108a:	fab6 f686 	clz	r6, r6
 800108e:	2e07      	cmp	r6, #7
 8001090:	f8d1 c014 	ldr.w	ip, [r1, #20]
 8001094:	dc16      	bgt.n	80010c4 <LL_GPIO_Init+0x118>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001096:	f8d0 8020 	ldr.w	r8, [r0, #32]
 800109a:	fa93 f6a3 	rbit	r6, r3
 800109e:	fab6 f686 	clz	r6, r6
 80010a2:	fa93 f3a3 	rbit	r3, r3
 80010a6:	fab3 f383 	clz	r3, r3
 80010aa:	00b6      	lsls	r6, r6, #2
 80010ac:	fa07 f606 	lsl.w	r6, r7, r6
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	ea28 0606 	bic.w	r6, r8, r6
 80010b6:	fa0c fc03 	lsl.w	ip, ip, r3
 80010ba:	ea46 060c 	orr.w	r6, r6, ip
 80010be:	6206      	str	r6, [r0, #32]
    pinpos++;
 80010c0:	3401      	adds	r4, #1
 80010c2:	e77e      	b.n	8000fc2 <LL_GPIO_Init+0x16>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80010c4:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	fa93 f6a3 	rbit	r6, r3
 80010ce:	fab6 f686 	clz	r6, r6
 80010d2:	fa93 f3a3 	rbit	r3, r3
 80010d6:	fab3 f383 	clz	r3, r3
 80010da:	00b6      	lsls	r6, r6, #2
 80010dc:	fa07 f606 	lsl.w	r6, r7, r6
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	ea28 0606 	bic.w	r6, r8, r6
 80010e6:	fa0c f303 	lsl.w	r3, ip, r3
 80010ea:	4333      	orrs	r3, r6
 80010ec:	6243      	str	r3, [r0, #36]	; 0x24
 80010ee:	e7e7      	b.n	80010c0 <LL_GPIO_Init+0x114>

080010f0 <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80010f0:	4b03      	ldr	r3, [pc, #12]	; (8001100 <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <RCC_GetHCLKClockFreq+0x14>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80010fa:	5cd3      	ldrb	r3, [r2, r3]
}
 80010fc:	40d8      	lsrs	r0, r3
 80010fe:	4770      	bx	lr
 8001100:	40023800 	.word	0x40023800
 8001104:	08002bd7 	.word	0x08002bd7

08001108 <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800110a:	4a04      	ldr	r2, [pc, #16]	; (800111c <RCC_GetPCLK1ClockFreq+0x14>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001112:	5cd3      	ldrb	r3, [r2, r3]
}
 8001114:	40d8      	lsrs	r0, r3
 8001116:	4770      	bx	lr
 8001118:	40023800 	.word	0x40023800
 800111c:	08002be7 	.word	0x08002be7

08001120 <RCC_GetPCLK2ClockFreq>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001122:	4a04      	ldr	r2, [pc, #16]	; (8001134 <RCC_GetPCLK2ClockFreq+0x14>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800112a:	5cd3      	ldrb	r3, [r2, r3]
}
 800112c:	40d8      	lsrs	r0, r3
 800112e:	4770      	bx	lr
 8001130:	40023800 	.word	0x40023800
 8001134:	08002be7 	.word	0x08002be7

08001138 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <RCC_PLL_GetFreqDomain_SYS+0x40>)
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800113a:	4a10      	ldr	r2, [pc, #64]	; (800117c <RCC_PLL_GetFreqDomain_SYS+0x44>)
 800113c:	6859      	ldr	r1, [r3, #4]
{
 800113e:	b510      	push	{r4, lr}
      pllinputfreq = HSI_VALUE;
 8001140:	4c0f      	ldr	r4, [pc, #60]	; (8001180 <RCC_PLL_GetFreqDomain_SYS+0x48>)
 8001142:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001146:	2900      	cmp	r1, #0
 8001148:	bf08      	it	eq
 800114a:	4622      	moveq	r2, r4
    default:
      pllinputfreq = HSI_VALUE;
      break;
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800114c:	2808      	cmp	r0, #8
 800114e:	d110      	bne.n	8001172 <RCC_PLL_GetFreqDomain_SYS+0x3a>
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001150:	6859      	ldr	r1, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001152:	6858      	ldr	r0, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8001154:	685b      	ldr	r3, [r3, #4]
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001156:	f3c3 4301 	ubfx	r3, r3, #16, #2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800115a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800115e:	3301      	adds	r3, #1
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001160:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	fbb2 f2f1 	udiv	r2, r2, r1
 800116a:	4350      	muls	r0, r2
 800116c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001170:	bd10      	pop	{r4, pc}
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8001172:	2000      	movs	r0, #0
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
}
 8001174:	bd10      	pop	{r4, pc}
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800
 800117c:	007a1200 	.word	0x007a1200
 8001180:	00f42400 	.word	0x00f42400

08001184 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <RCC_GetSystemClockFreq+0x1c>)
 8001186:	6898      	ldr	r0, [r3, #8]
 8001188:	f000 000c 	and.w	r0, r0, #12
  switch (LL_RCC_GetSysClkSource())
 800118c:	2804      	cmp	r0, #4
 800118e:	d003      	beq.n	8001198 <RCC_GetSystemClockFreq+0x14>
 8001190:	2808      	cmp	r0, #8
 8001192:	d003      	beq.n	800119c <RCC_GetSystemClockFreq+0x18>
      frequency = HSI_VALUE;
 8001194:	4803      	ldr	r0, [pc, #12]	; (80011a4 <RCC_GetSystemClockFreq+0x20>)
}
 8001196:	4770      	bx	lr
      frequency = HSE_VALUE;
 8001198:	4803      	ldr	r0, [pc, #12]	; (80011a8 <RCC_GetSystemClockFreq+0x24>)
 800119a:	4770      	bx	lr
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800119c:	f7ff bfcc 	b.w	8001138 <RCC_PLL_GetFreqDomain_SYS>
 80011a0:	40023800 	.word	0x40023800
 80011a4:	00f42400 	.word	0x00f42400
 80011a8:	007a1200 	.word	0x007a1200

080011ac <LL_RCC_GetSystemClocksFreq>:
{
 80011ac:	b510      	push	{r4, lr}
 80011ae:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80011b0:	f7ff ffe8 	bl	8001184 <RCC_GetSystemClockFreq>
 80011b4:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80011b6:	f7ff ff9b 	bl	80010f0 <RCC_GetHCLKClockFreq>
 80011ba:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80011bc:	f7ff ffa4 	bl	8001108 <RCC_GetPCLK1ClockFreq>
 80011c0:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80011c2:	6860      	ldr	r0, [r4, #4]
 80011c4:	f7ff ffac 	bl	8001120 <RCC_GetPCLK2ClockFreq>
 80011c8:	60e0      	str	r0, [r4, #12]
 80011ca:	bd10      	pop	{r4, pc}

080011cc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80011cc:	b530      	push	{r4, r5, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80011ce:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80011d0:	049b      	lsls	r3, r3, #18
{
 80011d2:	b085      	sub	sp, #20
 80011d4:	4604      	mov	r4, r0
 80011d6:	460d      	mov	r5, r1
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80011d8:	d502      	bpl.n	80011e0 <LL_USART_Init+0x14>
  ErrorStatus status = ERROR;
 80011da:	2000      	movs	r0, #0
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 80011dc:	b005      	add	sp, #20
 80011de:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(USARTx->CR1,
 80011e0:	684b      	ldr	r3, [r1, #4]
 80011e2:	68c9      	ldr	r1, [r1, #12]
 80011e4:	68c2      	ldr	r2, [r0, #12]
 80011e6:	430b      	orrs	r3, r1
 80011e8:	6929      	ldr	r1, [r5, #16]
 80011ea:	430b      	orrs	r3, r1
 80011ec:	69a9      	ldr	r1, [r5, #24]
 80011ee:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 80011f2:	430b      	orrs	r3, r1
 80011f4:	f022 020c 	bic.w	r2, r2, #12
 80011f8:	4313      	orrs	r3, r2
 80011fa:	60c3      	str	r3, [r0, #12]
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80011fc:	6903      	ldr	r3, [r0, #16]
 80011fe:	68aa      	ldr	r2, [r5, #8]
 8001200:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001204:	4313      	orrs	r3, r2
 8001206:	6103      	str	r3, [r0, #16]
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001208:	6943      	ldr	r3, [r0, #20]
 800120a:	696a      	ldr	r2, [r5, #20]
 800120c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001210:	4313      	orrs	r3, r2
 8001212:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8001214:	4668      	mov	r0, sp
 8001216:	f7ff ffc9 	bl	80011ac <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800121a:	4b2b      	ldr	r3, [pc, #172]	; (80012c8 <LL_USART_Init+0xfc>)
 800121c:	429c      	cmp	r4, r3
 800121e:	d125      	bne.n	800126c <LL_USART_Init+0xa0>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001220:	9b03      	ldr	r3, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0d9      	beq.n	80011da <LL_USART_Init+0xe>
        && (USART_InitStruct->BaudRate != 0U))
 8001226:	6829      	ldr	r1, [r5, #0]
 8001228:	2900      	cmp	r1, #0
 800122a:	d0d6      	beq.n	80011da <LL_USART_Init+0xe>
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800122c:	69aa      	ldr	r2, [r5, #24]
 800122e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001232:	f04f 0219 	mov.w	r2, #25
 8001236:	d136      	bne.n	80012a6 <LL_USART_Init+0xda>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001238:	435a      	muls	r2, r3
 800123a:	0049      	lsls	r1, r1, #1
 800123c:	fbb2 f2f1 	udiv	r2, r2, r1
 8001240:	2164      	movs	r1, #100	; 0x64
 8001242:	fbb2 f0f1 	udiv	r0, r2, r1
 8001246:	fb01 2310 	mls	r3, r1, r0, r2
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	3332      	adds	r3, #50	; 0x32
 800124e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001252:	b29b      	uxth	r3, r3
 8001254:	f003 0207 	and.w	r2, r3, #7
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800125e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001262:	4413      	add	r3, r2
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001264:	b29b      	uxth	r3, r3
 8001266:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 8001268:	2001      	movs	r0, #1
 800126a:	e7b7      	b.n	80011dc <LL_USART_Init+0x10>
    else if (USARTx == USART2)
 800126c:	4b17      	ldr	r3, [pc, #92]	; (80012cc <LL_USART_Init+0x100>)
 800126e:	429c      	cmp	r4, r3
 8001270:	d101      	bne.n	8001276 <LL_USART_Init+0xaa>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001272:	9b02      	ldr	r3, [sp, #8]
 8001274:	e7d5      	b.n	8001222 <LL_USART_Init+0x56>
    else if (USARTx == USART3)
 8001276:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <LL_USART_Init+0x104>)
 8001278:	429c      	cmp	r4, r3
 800127a:	d0fa      	beq.n	8001272 <LL_USART_Init+0xa6>
    else if (USARTx == USART6)
 800127c:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
 8001280:	429c      	cmp	r4, r3
 8001282:	d0cd      	beq.n	8001220 <LL_USART_Init+0x54>
    else if (USARTx == UART4)
 8001284:	f5a3 4348 	sub.w	r3, r3, #51200	; 0xc800
 8001288:	429c      	cmp	r4, r3
 800128a:	d0f2      	beq.n	8001272 <LL_USART_Init+0xa6>
    else if (USARTx == UART5)
 800128c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001290:	429c      	cmp	r4, r3
 8001292:	d0ee      	beq.n	8001272 <LL_USART_Init+0xa6>
    else if (USARTx == UART7)
 8001294:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001298:	429c      	cmp	r4, r3
 800129a:	d0ea      	beq.n	8001272 <LL_USART_Init+0xa6>
    else if (USARTx == UART8)
 800129c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012a0:	429c      	cmp	r4, r3
 80012a2:	d19a      	bne.n	80011da <LL_USART_Init+0xe>
 80012a4:	e7e5      	b.n	8001272 <LL_USART_Init+0xa6>
 80012a6:	4353      	muls	r3, r2
 80012a8:	2264      	movs	r2, #100	; 0x64
 80012aa:	0089      	lsls	r1, r1, #2
 80012ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80012b4:	fb02 3311 	mls	r3, r2, r1, r3
 80012b8:	011b      	lsls	r3, r3, #4
 80012ba:	3332      	adds	r3, #50	; 0x32
 80012bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80012c0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80012c4:	e7ce      	b.n	8001264 <LL_USART_Init+0x98>
 80012c6:	bf00      	nop
 80012c8:	40011000 	.word	0x40011000
 80012cc:	40004400 	.word	0x40004400
 80012d0:	40004800 	.word	0x40004800

080012d4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80012d4:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80012d6:	f000 fe51 	bl	8001f7c <vTaskStartScheduler>
  
  return osOK;
}
 80012da:	2000      	movs	r0, #0
 80012dc:	bd08      	pop	{r3, pc}

080012de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80012de:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80012e0:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80012e4:	8a02      	ldrh	r2, [r0, #16]
{
 80012e6:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80012e8:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 80012ec:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 80012ee:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80012f0:	bf14      	ite	ne
 80012f2:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80012f4:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80012f6:	a803      	add	r0, sp, #12
 80012f8:	9001      	str	r0, [sp, #4]
 80012fa:	9400      	str	r4, [sp, #0]
 80012fc:	4628      	mov	r0, r5
 80012fe:	f000 fd6d 	bl	8001ddc <xTaskCreate>
 8001302:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001304:	bf0c      	ite	eq
 8001306:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8001308:	2000      	movne	r0, #0
}
 800130a:	b005      	add	sp, #20
 800130c:	bd30      	pop	{r4, r5, pc}

0800130e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800130e:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001310:	2800      	cmp	r0, #0
 8001312:	bf08      	it	eq
 8001314:	2001      	moveq	r0, #1
 8001316:	f000 ff7f 	bl	8002218 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800131a:	2000      	movs	r0, #0
 800131c:	bd08      	pop	{r3, pc}

0800131e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800131e:	f100 0308 	add.w	r3, r0, #8
 8001322:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001324:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001328:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800132a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800132c:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800132e:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001330:	6003      	str	r3, [r0, #0]
 8001332:	4770      	bx	lr

08001334 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001334:	2300      	movs	r3, #0
 8001336:	6103      	str	r3, [r0, #16]
 8001338:	4770      	bx	lr

0800133a <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800133a:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800133c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001346:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001348:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800134a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800134c:	3301      	adds	r3, #1
 800134e:	6003      	str	r3, [r0, #0]
 8001350:	4770      	bx	lr

08001352 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001352:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001354:	1c53      	adds	r3, r2, #1
{
 8001356:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001358:	d10a      	bne.n	8001370 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800135a:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001360:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001362:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001364:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001366:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001368:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800136a:	3301      	adds	r3, #1
 800136c:	6003      	str	r3, [r0, #0]
 800136e:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001370:	f100 0308 	add.w	r3, r0, #8
 8001374:	685c      	ldr	r4, [r3, #4]
 8001376:	6825      	ldr	r5, [r4, #0]
 8001378:	42aa      	cmp	r2, r5
 800137a:	d3ef      	bcc.n	800135c <vListInsert+0xa>
 800137c:	4623      	mov	r3, r4
 800137e:	e7f9      	b.n	8001374 <vListInsert+0x22>

08001380 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001380:	6841      	ldr	r1, [r0, #4]
 8001382:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001384:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001386:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001388:	6882      	ldr	r2, [r0, #8]
 800138a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800138c:	6859      	ldr	r1, [r3, #4]
 800138e:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001390:	bf08      	it	eq
 8001392:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001394:	2200      	movs	r2, #0
 8001396:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001398:	6818      	ldr	r0, [r3, #0]
 800139a:	3801      	subs	r0, #1
 800139c:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800139e:	4770      	bx	lr

080013a0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <prvTaskExitError+0x2c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	3301      	adds	r3, #1
 80013a6:	d008      	beq.n	80013ba <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80013a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013ac:	f383 8811 	msr	BASEPRI, r3
 80013b0:	f3bf 8f6f 	isb	sy
 80013b4:	f3bf 8f4f 	dsb	sy
 80013b8:	e7fe      	b.n	80013b8 <prvTaskExitError+0x18>
 80013ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013be:	f383 8811 	msr	BASEPRI, r3
 80013c2:	f3bf 8f6f 	isb	sy
 80013c6:	f3bf 8f4f 	dsb	sy
 80013ca:	e7fe      	b.n	80013ca <prvTaskExitError+0x2a>
 80013cc:	20000004 	.word	0x20000004

080013d0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80013d0:	4806      	ldr	r0, [pc, #24]	; (80013ec <prvPortStartFirstTask+0x1c>)
 80013d2:	6800      	ldr	r0, [r0, #0]
 80013d4:	6800      	ldr	r0, [r0, #0]
 80013d6:	f380 8808 	msr	MSP, r0
 80013da:	b662      	cpsie	i
 80013dc:	b661      	cpsie	f
 80013de:	f3bf 8f4f 	dsb	sy
 80013e2:	f3bf 8f6f 	isb	sy
 80013e6:	df00      	svc	0
 80013e8:	bf00      	nop
 80013ea:	0000      	.short	0x0000
 80013ec:	e000ed08 	.word	0xe000ed08

080013f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80013f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001400 <vPortEnableVFP+0x10>
 80013f4:	6801      	ldr	r1, [r0, #0]
 80013f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80013fa:	6001      	str	r1, [r0, #0]
 80013fc:	4770      	bx	lr
 80013fe:	0000      	.short	0x0000
 8001400:	e000ed88 	.word	0xe000ed88

08001404 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001404:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001408:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <pxPortInitialiseStack+0x28>)
 800140e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001412:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001416:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800141a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800141e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001422:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001426:	3844      	subs	r0, #68	; 0x44
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	080013a1 	.word	0x080013a1

08001430 <SVC_Handler>:
	__asm volatile (
 8001430:	4b07      	ldr	r3, [pc, #28]	; (8001450 <pxCurrentTCBConst2>)
 8001432:	6819      	ldr	r1, [r3, #0]
 8001434:	6808      	ldr	r0, [r1, #0]
 8001436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800143a:	f380 8809 	msr	PSP, r0
 800143e:	f3bf 8f6f 	isb	sy
 8001442:	f04f 0000 	mov.w	r0, #0
 8001446:	f380 8811 	msr	BASEPRI, r0
 800144a:	4770      	bx	lr
 800144c:	f3af 8000 	nop.w

08001450 <pxCurrentTCBConst2>:
 8001450:	20003c48 	.word	0x20003c48

08001454 <vPortEnterCritical>:
 8001454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001458:	f383 8811 	msr	BASEPRI, r3
 800145c:	f3bf 8f6f 	isb	sy
 8001460:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001464:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <vPortEnterCritical+0x3c>)
 8001466:	6813      	ldr	r3, [r2, #0]
 8001468:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800146a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800146c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800146e:	d10d      	bne.n	800148c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <vPortEnterCritical+0x40>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001478:	d008      	beq.n	800148c <vPortEnterCritical+0x38>
 800147a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800147e:	f383 8811 	msr	BASEPRI, r3
 8001482:	f3bf 8f6f 	isb	sy
 8001486:	f3bf 8f4f 	dsb	sy
 800148a:	e7fe      	b.n	800148a <vPortEnterCritical+0x36>
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000004 	.word	0x20000004
 8001494:	e000ed04 	.word	0xe000ed04

08001498 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001498:	4a08      	ldr	r2, [pc, #32]	; (80014bc <vPortExitCritical+0x24>)
 800149a:	6813      	ldr	r3, [r2, #0]
 800149c:	b943      	cbnz	r3, 80014b0 <vPortExitCritical+0x18>
 800149e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014a2:	f383 8811 	msr	BASEPRI, r3
 80014a6:	f3bf 8f6f 	isb	sy
 80014aa:	f3bf 8f4f 	dsb	sy
 80014ae:	e7fe      	b.n	80014ae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80014b0:	3b01      	subs	r3, #1
 80014b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80014b4:	b90b      	cbnz	r3, 80014ba <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80014b6:	f383 8811 	msr	BASEPRI, r3
 80014ba:	4770      	bx	lr
 80014bc:	20000004 	.word	0x20000004

080014c0 <PendSV_Handler>:
	__asm volatile
 80014c0:	f3ef 8009 	mrs	r0, PSP
 80014c4:	f3bf 8f6f 	isb	sy
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <pxCurrentTCBConst>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	f01e 0f10 	tst.w	lr, #16
 80014d0:	bf08      	it	eq
 80014d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80014d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014da:	6010      	str	r0, [r2, #0]
 80014dc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80014e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80014e4:	f380 8811 	msr	BASEPRI, r0
 80014e8:	f3bf 8f4f 	dsb	sy
 80014ec:	f3bf 8f6f 	isb	sy
 80014f0:	f000 fef0 	bl	80022d4 <vTaskSwitchContext>
 80014f4:	f04f 0000 	mov.w	r0, #0
 80014f8:	f380 8811 	msr	BASEPRI, r0
 80014fc:	bc08      	pop	{r3}
 80014fe:	6819      	ldr	r1, [r3, #0]
 8001500:	6808      	ldr	r0, [r1, #0]
 8001502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001506:	f01e 0f10 	tst.w	lr, #16
 800150a:	bf08      	it	eq
 800150c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001510:	f380 8809 	msr	PSP, r0
 8001514:	f3bf 8f6f 	isb	sy
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	f3af 8000 	nop.w

08001520 <pxCurrentTCBConst>:
 8001520:	20003c48 	.word	0x20003c48

08001524 <SysTick_Handler>:
{
 8001524:	b508      	push	{r3, lr}
	__asm volatile
 8001526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800152a:	f383 8811 	msr	BASEPRI, r3
 800152e:	f3bf 8f6f 	isb	sy
 8001532:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001536:	f000 fd65 	bl	8002004 <xTaskIncrementTick>
 800153a:	b118      	cbz	r0, 8001544 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800153c:	4b03      	ldr	r3, [pc, #12]	; (800154c <SysTick_Handler+0x28>)
 800153e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001542:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001544:	2300      	movs	r3, #0
 8001546:	f383 8811 	msr	BASEPRI, r3
 800154a:	bd08      	pop	{r3, pc}
 800154c:	e000ed04 	.word	0xe000ed04

08001550 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <vPortSetupTimerInterrupt+0x1c>)
 8001552:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	fbb3 f3f2 	udiv	r3, r3, r2
 800155c:	4a04      	ldr	r2, [pc, #16]	; (8001570 <vPortSetupTimerInterrupt+0x20>)
 800155e:	3b01      	subs	r3, #1
 8001560:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001562:	4b04      	ldr	r3, [pc, #16]	; (8001574 <vPortSetupTimerInterrupt+0x24>)
 8001564:	2207      	movs	r2, #7
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20000008 	.word	0x20000008
 8001570:	e000e014 	.word	0xe000e014
 8001574:	e000e010 	.word	0xe000e010

08001578 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001578:	4b31      	ldr	r3, [pc, #196]	; (8001640 <xPortStartScheduler+0xc8>)
 800157a:	4a32      	ldr	r2, [pc, #200]	; (8001644 <xPortStartScheduler+0xcc>)
{
 800157c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800157e:	6819      	ldr	r1, [r3, #0]
 8001580:	4291      	cmp	r1, r2
 8001582:	d108      	bne.n	8001596 <xPortStartScheduler+0x1e>
	__asm volatile
 8001584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001588:	f383 8811 	msr	BASEPRI, r3
 800158c:	f3bf 8f6f 	isb	sy
 8001590:	f3bf 8f4f 	dsb	sy
 8001594:	e7fe      	b.n	8001594 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b2b      	ldr	r3, [pc, #172]	; (8001648 <xPortStartScheduler+0xd0>)
 800159a:	429a      	cmp	r2, r3
 800159c:	d108      	bne.n	80015b0 <xPortStartScheduler+0x38>
 800159e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015a2:	f383 8811 	msr	BASEPRI, r3
 80015a6:	f3bf 8f6f 	isb	sy
 80015aa:	f3bf 8f4f 	dsb	sy
 80015ae:	e7fe      	b.n	80015ae <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80015b0:	4b26      	ldr	r3, [pc, #152]	; (800164c <xPortStartScheduler+0xd4>)
 80015b2:	781a      	ldrb	r2, [r3, #0]
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80015b8:	22ff      	movs	r2, #255	; 0xff
 80015ba:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80015bc:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80015be:	4a24      	ldr	r2, [pc, #144]	; (8001650 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80015c6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80015ca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80015ce:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80015d0:	4b20      	ldr	r3, [pc, #128]	; (8001654 <xPortStartScheduler+0xdc>)
 80015d2:	2207      	movs	r2, #7
 80015d4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80015d6:	2100      	movs	r1, #0
 80015d8:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80015dc:	0600      	lsls	r0, r0, #24
 80015de:	f102 34ff 	add.w	r4, r2, #4294967295
 80015e2:	d423      	bmi.n	800162c <xPortStartScheduler+0xb4>
 80015e4:	b101      	cbz	r1, 80015e8 <xPortStartScheduler+0x70>
 80015e6:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80015ec:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80015f0:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80015f2:	9b01      	ldr	r3, [sp, #4]
 80015f4:	4a15      	ldr	r2, [pc, #84]	; (800164c <xPortStartScheduler+0xd4>)
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <xPortStartScheduler+0xe0>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001602:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800160a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800160c:	f7ff ffa0 	bl	8001550 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <xPortStartScheduler+0xe4>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8001616:	f7ff feeb 	bl	80013f0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800161a:	4a11      	ldr	r2, [pc, #68]	; (8001660 <xPortStartScheduler+0xe8>)
 800161c:	6813      	ldr	r3, [r2, #0]
 800161e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001622:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8001624:	f7ff fed4 	bl	80013d0 <prvPortStartFirstTask>
	prvTaskExitError();
 8001628:	f7ff feba 	bl	80013a0 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800162c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001630:	0052      	lsls	r2, r2, #1
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	f88d 2003 	strb.w	r2, [sp, #3]
 8001638:	2101      	movs	r1, #1
 800163a:	4622      	mov	r2, r4
 800163c:	e7cc      	b.n	80015d8 <xPortStartScheduler+0x60>
 800163e:	bf00      	nop
 8001640:	e000ed00 	.word	0xe000ed00
 8001644:	410fc271 	.word	0x410fc271
 8001648:	410fc270 	.word	0x410fc270
 800164c:	e000e400 	.word	0xe000e400
 8001650:	20000028 	.word	0x20000028
 8001654:	2000002c 	.word	0x2000002c
 8001658:	e000ed20 	.word	0xe000ed20
 800165c:	20000004 	.word	0x20000004
 8001660:	e000ef34 	.word	0xe000ef34

08001664 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001664:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001666:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <prvInsertBlockIntoFreeList+0x40>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4282      	cmp	r2, r0
 800166c:	d318      	bcc.n	80016a0 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800166e:	685c      	ldr	r4, [r3, #4]
 8001670:	1919      	adds	r1, r3, r4
 8001672:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001674:	bf01      	itttt	eq
 8001676:	6841      	ldreq	r1, [r0, #4]
 8001678:	4618      	moveq	r0, r3
 800167a:	1909      	addeq	r1, r1, r4
 800167c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800167e:	6844      	ldr	r4, [r0, #4]
 8001680:	1901      	adds	r1, r0, r4
 8001682:	428a      	cmp	r2, r1
 8001684:	d107      	bne.n	8001696 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001686:	4908      	ldr	r1, [pc, #32]	; (80016a8 <prvInsertBlockIntoFreeList+0x44>)
 8001688:	6809      	ldr	r1, [r1, #0]
 800168a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800168c:	bf1f      	itttt	ne
 800168e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001690:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001692:	1909      	addne	r1, r1, r4
 8001694:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001696:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001698:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800169a:	bf18      	it	ne
 800169c:	6018      	strne	r0, [r3, #0]
 800169e:	bd10      	pop	{r4, pc}
 80016a0:	4613      	mov	r3, r2
 80016a2:	e7e1      	b.n	8001668 <prvInsertBlockIntoFreeList+0x4>
 80016a4:	20003c40 	.word	0x20003c40
 80016a8:	20000030 	.word	0x20000030

080016ac <pvPortMalloc>:
{
 80016ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016b0:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80016b2:	f000 fc9f 	bl	8001ff4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80016b6:	493e      	ldr	r1, [pc, #248]	; (80017b0 <pvPortMalloc+0x104>)
 80016b8:	4d3e      	ldr	r5, [pc, #248]	; (80017b4 <pvPortMalloc+0x108>)
 80016ba:	680b      	ldr	r3, [r1, #0]
 80016bc:	bb0b      	cbnz	r3, 8001702 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80016be:	4a3e      	ldr	r2, [pc, #248]	; (80017b8 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80016c0:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80016c2:	bf1f      	itttt	ne
 80016c4:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80016c6:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80016ca:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 80016ce:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80016d0:	bf14      	ite	ne
 80016d2:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80016d4:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80016d8:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80016da:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80016dc:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80016e0:	4e36      	ldr	r6, [pc, #216]	; (80017bc <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 80016e2:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80016e4:	2000      	movs	r0, #0
 80016e6:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80016e8:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 80016ea:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80016ec:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80016ee:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80016f0:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80016f2:	4b33      	ldr	r3, [pc, #204]	; (80017c0 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80016f4:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80016f6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80016f8:	4b32      	ldr	r3, [pc, #200]	; (80017c4 <pvPortMalloc+0x118>)
 80016fa:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80016fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001700:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001702:	682f      	ldr	r7, [r5, #0]
 8001704:	4227      	tst	r7, r4
 8001706:	d116      	bne.n	8001736 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8001708:	2c00      	cmp	r4, #0
 800170a:	d041      	beq.n	8001790 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 800170c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001710:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001712:	bf1c      	itt	ne
 8001714:	f023 0307 	bicne.w	r3, r3, #7
 8001718:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800171a:	b163      	cbz	r3, 8001736 <pvPortMalloc+0x8a>
 800171c:	4a29      	ldr	r2, [pc, #164]	; (80017c4 <pvPortMalloc+0x118>)
 800171e:	6816      	ldr	r6, [r2, #0]
 8001720:	42b3      	cmp	r3, r6
 8001722:	4690      	mov	r8, r2
 8001724:	d807      	bhi.n	8001736 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8001726:	4a25      	ldr	r2, [pc, #148]	; (80017bc <pvPortMalloc+0x110>)
 8001728:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800172a:	6868      	ldr	r0, [r5, #4]
 800172c:	4283      	cmp	r3, r0
 800172e:	d804      	bhi.n	800173a <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8001730:	6809      	ldr	r1, [r1, #0]
 8001732:	428d      	cmp	r5, r1
 8001734:	d107      	bne.n	8001746 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8001736:	2400      	movs	r4, #0
 8001738:	e02a      	b.n	8001790 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800173a:	682c      	ldr	r4, [r5, #0]
 800173c:	2c00      	cmp	r4, #0
 800173e:	d0f7      	beq.n	8001730 <pvPortMalloc+0x84>
 8001740:	462a      	mov	r2, r5
 8001742:	4625      	mov	r5, r4
 8001744:	e7f1      	b.n	800172a <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001746:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001748:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800174a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800174c:	1ac2      	subs	r2, r0, r3
 800174e:	2a10      	cmp	r2, #16
 8001750:	d90f      	bls.n	8001772 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001752:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001754:	0741      	lsls	r1, r0, #29
 8001756:	d008      	beq.n	800176a <pvPortMalloc+0xbe>
 8001758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800175c:	f383 8811 	msr	BASEPRI, r3
 8001760:	f3bf 8f6f 	isb	sy
 8001764:	f3bf 8f4f 	dsb	sy
 8001768:	e7fe      	b.n	8001768 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800176a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800176c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800176e:	f7ff ff79 	bl	8001664 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001772:	4913      	ldr	r1, [pc, #76]	; (80017c0 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001774:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001776:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001778:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800177a:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800177c:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800177e:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001782:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001786:	bf38      	it	cc
 8001788:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800178a:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800178c:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800178e:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8001790:	f000 fcca 	bl	8002128 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001794:	0763      	lsls	r3, r4, #29
 8001796:	d008      	beq.n	80017aa <pvPortMalloc+0xfe>
 8001798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800179c:	f383 8811 	msr	BASEPRI, r3
 80017a0:	f3bf 8f6f 	isb	sy
 80017a4:	f3bf 8f4f 	dsb	sy
 80017a8:	e7fe      	b.n	80017a8 <pvPortMalloc+0xfc>
}
 80017aa:	4620      	mov	r0, r4
 80017ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017b0:	20000030 	.word	0x20000030
 80017b4:	20003c34 	.word	0x20003c34
 80017b8:	20000034 	.word	0x20000034
 80017bc:	20003c40 	.word	0x20003c40
 80017c0:	20003c3c 	.word	0x20003c3c
 80017c4:	20003c38 	.word	0x20003c38

080017c8 <vPortFree>:
{
 80017c8:	b510      	push	{r4, lr}
	if( pv != NULL )
 80017ca:	4604      	mov	r4, r0
 80017cc:	b370      	cbz	r0, 800182c <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80017ce:	4a18      	ldr	r2, [pc, #96]	; (8001830 <vPortFree+0x68>)
 80017d0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80017d4:	6812      	ldr	r2, [r2, #0]
 80017d6:	4213      	tst	r3, r2
 80017d8:	d108      	bne.n	80017ec <vPortFree+0x24>
 80017da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017de:	f383 8811 	msr	BASEPRI, r3
 80017e2:	f3bf 8f6f 	isb	sy
 80017e6:	f3bf 8f4f 	dsb	sy
 80017ea:	e7fe      	b.n	80017ea <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80017ec:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80017f0:	b141      	cbz	r1, 8001804 <vPortFree+0x3c>
 80017f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017f6:	f383 8811 	msr	BASEPRI, r3
 80017fa:	f3bf 8f6f 	isb	sy
 80017fe:	f3bf 8f4f 	dsb	sy
 8001802:	e7fe      	b.n	8001802 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001804:	ea23 0302 	bic.w	r3, r3, r2
 8001808:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800180c:	f000 fbf2 	bl	8001ff4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001810:	4a08      	ldr	r2, [pc, #32]	; (8001834 <vPortFree+0x6c>)
 8001812:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8001816:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001818:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800181c:	440b      	add	r3, r1
 800181e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001820:	f7ff ff20 	bl	8001664 <prvInsertBlockIntoFreeList>
}
 8001824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8001828:	f000 bc7e 	b.w	8002128 <xTaskResumeAll>
 800182c:	bd10      	pop	{r4, pc}
 800182e:	bf00      	nop
 8001830:	20003c34 	.word	0x20003c34
 8001834:	20003c38 	.word	0x20003c38

08001838 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001838:	b570      	push	{r4, r5, r6, lr}
 800183a:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800183c:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800183e:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 8001840:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001842:	b942      	cbnz	r2, 8001856 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001844:	6805      	ldr	r5, [r0, #0]
 8001846:	b99d      	cbnz	r5, 8001870 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001848:	6840      	ldr	r0, [r0, #4]
 800184a:	f000 fe7f 	bl	800254c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800184e:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8001850:	3601      	adds	r6, #1
 8001852:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8001854:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8001856:	b96d      	cbnz	r5, 8001874 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001858:	6880      	ldr	r0, [r0, #8]
 800185a:	f001 f949 	bl	8002af0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800185e:	68a3      	ldr	r3, [r4, #8]
 8001860:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001862:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001864:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001866:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001868:	4293      	cmp	r3, r2
 800186a:	d301      	bcc.n	8001870 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800186c:	6823      	ldr	r3, [r4, #0]
 800186e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8001870:	2000      	movs	r0, #0
 8001872:	e7ed      	b.n	8001850 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001874:	68c0      	ldr	r0, [r0, #12]
 8001876:	f001 f93b 	bl	8002af0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800187a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800187c:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800187e:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001880:	425b      	negs	r3, r3
 8001882:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001884:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001886:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001888:	bf3e      	ittt	cc
 800188a:	6862      	ldrcc	r2, [r4, #4]
 800188c:	189b      	addcc	r3, r3, r2
 800188e:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8001890:	2d02      	cmp	r5, #2
 8001892:	d1ed      	bne.n	8001870 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001894:	b10e      	cbz	r6, 800189a <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8001896:	3e01      	subs	r6, #1
 8001898:	e7ea      	b.n	8001870 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800189a:	4630      	mov	r0, r6
 800189c:	e7d8      	b.n	8001850 <prvCopyDataToQueue+0x18>

0800189e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800189e:	4603      	mov	r3, r0
 80018a0:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80018a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80018a4:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80018a6:	b162      	cbz	r2, 80018c2 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80018a8:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80018aa:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80018ac:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80018ae:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80018b0:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80018b2:	bf24      	itt	cs
 80018b4:	6819      	ldrcs	r1, [r3, #0]
 80018b6:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80018b8:	68d9      	ldr	r1, [r3, #12]
	}
}
 80018ba:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80018be:	f001 b917 	b.w	8002af0 <memcpy>
}
 80018c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80018c8:	b570      	push	{r4, r5, r6, lr}
 80018ca:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80018cc:	f7ff fdc2 	bl	8001454 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80018d0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80018d4:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80018d8:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80018da:	2d00      	cmp	r5, #0
 80018dc:	dc14      	bgt.n	8001908 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80018de:	23ff      	movs	r3, #255	; 0xff
 80018e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80018e4:	f7ff fdd8 	bl	8001498 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80018e8:	f7ff fdb4 	bl	8001454 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80018ec:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80018f0:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80018f4:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80018f6:	2d00      	cmp	r5, #0
 80018f8:	dc12      	bgt.n	8001920 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80018fa:	23ff      	movs	r3, #255	; 0xff
 80018fc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8001900:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8001904:	f7ff bdc8 	b.w	8001498 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001908:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0e7      	beq.n	80018de <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800190e:	4630      	mov	r0, r6
 8001910:	f000 fd34 	bl	800237c <xTaskRemoveFromEventList>
 8001914:	b108      	cbz	r0, 800191a <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8001916:	f000 fdbd 	bl	8002494 <vTaskMissedYield>
 800191a:	3d01      	subs	r5, #1
 800191c:	b26d      	sxtb	r5, r5
 800191e:	e7dc      	b.n	80018da <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001920:	6923      	ldr	r3, [r4, #16]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0e9      	beq.n	80018fa <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001926:	4630      	mov	r0, r6
 8001928:	f000 fd28 	bl	800237c <xTaskRemoveFromEventList>
 800192c:	b108      	cbz	r0, 8001932 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800192e:	f000 fdb1 	bl	8002494 <vTaskMissedYield>
 8001932:	3d01      	subs	r5, #1
 8001934:	b26d      	sxtb	r5, r5
 8001936:	e7de      	b.n	80018f6 <prvUnlockQueue+0x2e>

08001938 <xQueueGenericReset>:
{
 8001938:	b538      	push	{r3, r4, r5, lr}
 800193a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800193c:	4604      	mov	r4, r0
 800193e:	b940      	cbnz	r0, 8001952 <xQueueGenericReset+0x1a>
 8001940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001944:	f383 8811 	msr	BASEPRI, r3
 8001948:	f3bf 8f6f 	isb	sy
 800194c:	f3bf 8f4f 	dsb	sy
 8001950:	e7fe      	b.n	8001950 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8001952:	f7ff fd7f 	bl	8001454 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001956:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001958:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800195a:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800195c:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800195e:	4343      	muls	r3, r0
 8001960:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001962:	1a1b      	subs	r3, r3, r0
 8001964:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001966:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001968:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800196a:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800196c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800196e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8001970:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001974:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8001978:	b995      	cbnz	r5, 80019a0 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800197a:	6923      	ldr	r3, [r4, #16]
 800197c:	b163      	cbz	r3, 8001998 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800197e:	f104 0010 	add.w	r0, r4, #16
 8001982:	f000 fcfb 	bl	800237c <xTaskRemoveFromEventList>
 8001986:	b138      	cbz	r0, 8001998 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8001988:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <xQueueGenericReset+0x7c>)
 800198a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	f3bf 8f4f 	dsb	sy
 8001994:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8001998:	f7ff fd7e 	bl	8001498 <vPortExitCritical>
}
 800199c:	2001      	movs	r0, #1
 800199e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80019a0:	f104 0010 	add.w	r0, r4, #16
 80019a4:	f7ff fcbb 	bl	800131e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80019a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80019ac:	f7ff fcb7 	bl	800131e <vListInitialise>
 80019b0:	e7f2      	b.n	8001998 <xQueueGenericReset+0x60>
 80019b2:	bf00      	nop
 80019b4:	e000ed04 	.word	0xe000ed04

080019b8 <xQueueGenericCreate>:
	{
 80019b8:	b570      	push	{r4, r5, r6, lr}
 80019ba:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80019bc:	4606      	mov	r6, r0
 80019be:	b940      	cbnz	r0, 80019d2 <xQueueGenericCreate+0x1a>
 80019c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019c4:	f383 8811 	msr	BASEPRI, r3
 80019c8:	f3bf 8f6f 	isb	sy
 80019cc:	f3bf 8f4f 	dsb	sy
 80019d0:	e7fe      	b.n	80019d0 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019d2:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80019d4:	3048      	adds	r0, #72	; 0x48
 80019d6:	f7ff fe69 	bl	80016ac <pvPortMalloc>
		if( pxNewQueue != NULL )
 80019da:	4604      	mov	r4, r0
 80019dc:	b138      	cbz	r0, 80019ee <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80019de:	b945      	cbnz	r5, 80019f2 <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80019e0:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80019e2:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80019e4:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80019e6:	2101      	movs	r1, #1
 80019e8:	4620      	mov	r0, r4
 80019ea:	f7ff ffa5 	bl	8001938 <xQueueGenericReset>
	}
 80019ee:	4620      	mov	r0, r4
 80019f0:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80019f2:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80019f6:	6003      	str	r3, [r0, #0]
 80019f8:	e7f3      	b.n	80019e2 <xQueueGenericCreate+0x2a>
	...

080019fc <xQueueGenericSend>:
{
 80019fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a00:	4689      	mov	r9, r1
 8001a02:	9201      	str	r2, [sp, #4]
 8001a04:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8001a06:	4604      	mov	r4, r0
 8001a08:	b940      	cbnz	r0, 8001a1c <xQueueGenericSend+0x20>
 8001a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a0e:	f383 8811 	msr	BASEPRI, r3
 8001a12:	f3bf 8f6f 	isb	sy
 8001a16:	f3bf 8f4f 	dsb	sy
 8001a1a:	e7fe      	b.n	8001a1a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a1c:	2900      	cmp	r1, #0
 8001a1e:	f040 8088 	bne.w	8001b32 <xQueueGenericSend+0x136>
 8001a22:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 8084 	beq.w	8001b32 <xQueueGenericSend+0x136>
 8001a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a2e:	f383 8811 	msr	BASEPRI, r3
 8001a32:	f3bf 8f6f 	isb	sy
 8001a36:	f3bf 8f4f 	dsb	sy
 8001a3a:	e7fe      	b.n	8001a3a <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001a3c:	9e01      	ldr	r6, [sp, #4]
 8001a3e:	2e00      	cmp	r6, #0
 8001a40:	f000 8082 	beq.w	8001b48 <xQueueGenericSend+0x14c>
 8001a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a48:	f383 8811 	msr	BASEPRI, r3
 8001a4c:	f3bf 8f6f 	isb	sy
 8001a50:	f3bf 8f4f 	dsb	sy
 8001a54:	e7fe      	b.n	8001a54 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001a56:	9d01      	ldr	r5, [sp, #4]
 8001a58:	b91d      	cbnz	r5, 8001a62 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 8001a5a:	f7ff fd1d 	bl	8001498 <vPortExitCritical>
			return errQUEUE_FULL;
 8001a5e:	2000      	movs	r0, #0
 8001a60:	e058      	b.n	8001b14 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8001a62:	b916      	cbnz	r6, 8001a6a <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 8001a64:	a802      	add	r0, sp, #8
 8001a66:	f000 fccb 	bl	8002400 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8001a6a:	f7ff fd15 	bl	8001498 <vPortExitCritical>
		vTaskSuspendAll();
 8001a6e:	f000 fac1 	bl	8001ff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001a72:	f7ff fcef 	bl	8001454 <vPortEnterCritical>
 8001a76:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001a7a:	2bff      	cmp	r3, #255	; 0xff
 8001a7c:	bf08      	it	eq
 8001a7e:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8001a82:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001a86:	2bff      	cmp	r3, #255	; 0xff
 8001a88:	bf08      	it	eq
 8001a8a:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8001a8e:	f7ff fd03 	bl	8001498 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001a92:	a901      	add	r1, sp, #4
 8001a94:	a802      	add	r0, sp, #8
 8001a96:	f000 fcc3 	bl	8002420 <xTaskCheckForTimeOut>
 8001a9a:	2800      	cmp	r0, #0
 8001a9c:	d143      	bne.n	8001b26 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001a9e:	f7ff fcd9 	bl	8001454 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001aa2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8001aa4:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8001aa6:	f7ff fcf7 	bl	8001498 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001aaa:	42ae      	cmp	r6, r5
 8001aac:	d135      	bne.n	8001b1a <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001aae:	9901      	ldr	r1, [sp, #4]
 8001ab0:	f104 0010 	add.w	r0, r4, #16
 8001ab4:	f000 fc48 	bl	8002348 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001ab8:	4620      	mov	r0, r4
 8001aba:	f7ff ff05 	bl	80018c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001abe:	f000 fb33 	bl	8002128 <xTaskResumeAll>
 8001ac2:	b938      	cbnz	r0, 8001ad4 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8001ac4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001ac8:	f8ca 3000 	str.w	r3, [sl]
 8001acc:	f3bf 8f4f 	dsb	sy
 8001ad0:	f3bf 8f6f 	isb	sy
 8001ad4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8001ad6:	f7ff fcbd 	bl	8001454 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001ada:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001adc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d301      	bcc.n	8001ae6 <xQueueGenericSend+0xea>
 8001ae2:	2f02      	cmp	r7, #2
 8001ae4:	d1b7      	bne.n	8001a56 <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ae6:	463a      	mov	r2, r7
 8001ae8:	4649      	mov	r1, r9
 8001aea:	4620      	mov	r0, r4
 8001aec:	f7ff fea4 	bl	8001838 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001af0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001af2:	b11b      	cbz	r3, 8001afc <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001af4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001af8:	f000 fc40 	bl	800237c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8001afc:	b138      	cbz	r0, 8001b0e <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 8001afe:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <xQueueGenericSend+0x168>)
 8001b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	f3bf 8f4f 	dsb	sy
 8001b0a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001b0e:	f7ff fcc3 	bl	8001498 <vPortExitCritical>
				return pdPASS;
 8001b12:	2001      	movs	r0, #1
}
 8001b14:	b004      	add	sp, #16
 8001b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	f7ff fed4 	bl	80018c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001b20:	f000 fb02 	bl	8002128 <xTaskResumeAll>
 8001b24:	e7d6      	b.n	8001ad4 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 8001b26:	4620      	mov	r0, r4
 8001b28:	f7ff fece 	bl	80018c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001b2c:	f000 fafc 	bl	8002128 <xTaskResumeAll>
 8001b30:	e795      	b.n	8001a5e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001b32:	2f02      	cmp	r7, #2
 8001b34:	d102      	bne.n	8001b3c <xQueueGenericSend+0x140>
 8001b36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d10a      	bne.n	8001b52 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001b3c:	f000 fcb0 	bl	80024a0 <xTaskGetSchedulerState>
 8001b40:	2800      	cmp	r0, #0
 8001b42:	f43f af7b 	beq.w	8001a3c <xQueueGenericSend+0x40>
 8001b46:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8001b48:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8001b4c:	f8df a014 	ldr.w	sl, [pc, #20]	; 8001b64 <xQueueGenericSend+0x168>
 8001b50:	e7c1      	b.n	8001ad6 <xQueueGenericSend+0xda>
 8001b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b56:	f383 8811 	msr	BASEPRI, r3
 8001b5a:	f3bf 8f6f 	isb	sy
 8001b5e:	f3bf 8f4f 	dsb	sy
 8001b62:	e7fe      	b.n	8001b62 <xQueueGenericSend+0x166>
 8001b64:	e000ed04 	.word	0xe000ed04

08001b68 <xQueueGenericReceive>:
{
 8001b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b6c:	4688      	mov	r8, r1
 8001b6e:	9201      	str	r2, [sp, #4]
 8001b70:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 8001b72:	4604      	mov	r4, r0
 8001b74:	b940      	cbnz	r0, 8001b88 <xQueueGenericReceive+0x20>
 8001b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b7a:	f383 8811 	msr	BASEPRI, r3
 8001b7e:	f3bf 8f6f 	isb	sy
 8001b82:	f3bf 8f4f 	dsb	sy
 8001b86:	e7fe      	b.n	8001b86 <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b88:	2900      	cmp	r1, #0
 8001b8a:	f040 80a5 	bne.w	8001cd8 <xQueueGenericReceive+0x170>
 8001b8e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 80a1 	beq.w	8001cd8 <xQueueGenericReceive+0x170>
 8001b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b9a:	f383 8811 	msr	BASEPRI, r3
 8001b9e:	f3bf 8f6f 	isb	sy
 8001ba2:	f3bf 8f4f 	dsb	sy
 8001ba6:	e7fe      	b.n	8001ba6 <xQueueGenericReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ba8:	9e01      	ldr	r6, [sp, #4]
 8001baa:	2e00      	cmp	r6, #0
 8001bac:	f000 809a 	beq.w	8001ce4 <xQueueGenericReceive+0x17c>
 8001bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bb4:	f383 8811 	msr	BASEPRI, r3
 8001bb8:	f3bf 8f6f 	isb	sy
 8001bbc:	f3bf 8f4f 	dsb	sy
 8001bc0:	e7fe      	b.n	8001bc0 <xQueueGenericReceive+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001bc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8001bc4:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d06d      	beq.n	8001ca6 <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001bca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001bce:	e05f      	b.n	8001c90 <xQueueGenericReceive+0x128>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001bd0:	9d01      	ldr	r5, [sp, #4]
 8001bd2:	b91d      	cbnz	r5, 8001bdc <xQueueGenericReceive+0x74>
					taskEXIT_CRITICAL();
 8001bd4:	f7ff fc60 	bl	8001498 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8001bd8:	4628      	mov	r0, r5
 8001bda:	e067      	b.n	8001cac <xQueueGenericReceive+0x144>
				else if( xEntryTimeSet == pdFALSE )
 8001bdc:	b916      	cbnz	r6, 8001be4 <xQueueGenericReceive+0x7c>
					vTaskSetTimeOutState( &xTimeOut );
 8001bde:	a802      	add	r0, sp, #8
 8001be0:	f000 fc0e 	bl	8002400 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8001be4:	f7ff fc58 	bl	8001498 <vPortExitCritical>
		vTaskSuspendAll();
 8001be8:	f000 fa04 	bl	8001ff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001bec:	f7ff fc32 	bl	8001454 <vPortEnterCritical>
 8001bf0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001bf4:	2bff      	cmp	r3, #255	; 0xff
 8001bf6:	bf08      	it	eq
 8001bf8:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8001bfc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001c00:	2bff      	cmp	r3, #255	; 0xff
 8001c02:	bf08      	it	eq
 8001c04:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8001c08:	f7ff fc46 	bl	8001498 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001c0c:	a901      	add	r1, sp, #4
 8001c0e:	a802      	add	r0, sp, #8
 8001c10:	f000 fc06 	bl	8002420 <xTaskCheckForTimeOut>
 8001c14:	2800      	cmp	r0, #0
 8001c16:	d152      	bne.n	8001cbe <xQueueGenericReceive+0x156>
	taskENTER_CRITICAL();
 8001c18:	f7ff fc1c 	bl	8001454 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001c1c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8001c1e:	f7ff fc3b 	bl	8001498 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001c22:	2d00      	cmp	r5, #0
 8001c24:	d145      	bne.n	8001cb2 <xQueueGenericReceive+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001c26:	6823      	ldr	r3, [r4, #0]
 8001c28:	b933      	cbnz	r3, 8001c38 <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
 8001c2a:	f7ff fc13 	bl	8001454 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8001c2e:	6860      	ldr	r0, [r4, #4]
 8001c30:	f000 fc46 	bl	80024c0 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8001c34:	f7ff fc30 	bl	8001498 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001c38:	9901      	ldr	r1, [sp, #4]
 8001c3a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001c3e:	f000 fb83 	bl	8002348 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001c42:	4620      	mov	r0, r4
 8001c44:	f7ff fe40 	bl	80018c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001c48:	f000 fa6e 	bl	8002128 <xTaskResumeAll>
 8001c4c:	b938      	cbnz	r0, 8001c5e <xQueueGenericReceive+0xf6>
					portYIELD_WITHIN_API();
 8001c4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c52:	f8ca 3000 	str.w	r3, [sl]
 8001c56:	f3bf 8f4f 	dsb	sy
 8001c5a:	f3bf 8f6f 	isb	sy
 8001c5e:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8001c60:	f7ff fbf8 	bl	8001454 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001c64:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001c66:	2d00      	cmp	r5, #0
 8001c68:	d0b2      	beq.n	8001bd0 <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001c6a:	4641      	mov	r1, r8
 8001c6c:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001c6e:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001c70:	f7ff fe15 	bl	800189e <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8001c74:	f1b9 0f00 	cmp.w	r9, #0
 8001c78:	d1a3      	bne.n	8001bc2 <xQueueGenericReceive+0x5a>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001c7a:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8001c7c:	3d01      	subs	r5, #1
 8001c7e:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001c80:	b913      	cbnz	r3, 8001c88 <xQueueGenericReceive+0x120>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8001c82:	f000 fcb3 	bl	80025ec <pvTaskIncrementMutexHeldCount>
 8001c86:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c88:	6923      	ldr	r3, [r4, #16]
 8001c8a:	b163      	cbz	r3, 8001ca6 <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c8c:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001c90:	f000 fb74 	bl	800237c <xTaskRemoveFromEventList>
 8001c94:	b138      	cbz	r0, 8001ca6 <xQueueGenericReceive+0x13e>
							queueYIELD_IF_USING_PREEMPTION();
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <xQueueGenericReceive+0x184>)
 8001c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	f3bf 8f4f 	dsb	sy
 8001ca2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001ca6:	f7ff fbf7 	bl	8001498 <vPortExitCritical>
				return pdPASS;
 8001caa:	2001      	movs	r0, #1
}
 8001cac:	b004      	add	sp, #16
 8001cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	f7ff fe08 	bl	80018c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001cb8:	f000 fa36 	bl	8002128 <xTaskResumeAll>
 8001cbc:	e7cf      	b.n	8001c5e <xQueueGenericReceive+0xf6>
			prvUnlockQueue( pxQueue );
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	f7ff fe02 	bl	80018c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001cc4:	f000 fa30 	bl	8002128 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8001cc8:	f7ff fbc4 	bl	8001454 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001ccc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8001cce:	f7ff fbe3 	bl	8001498 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001cd2:	2d00      	cmp	r5, #0
 8001cd4:	d1c3      	bne.n	8001c5e <xQueueGenericReceive+0xf6>
 8001cd6:	e77f      	b.n	8001bd8 <xQueueGenericReceive+0x70>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001cd8:	f000 fbe2 	bl	80024a0 <xTaskGetSchedulerState>
 8001cdc:	2800      	cmp	r0, #0
 8001cde:	f43f af63 	beq.w	8001ba8 <xQueueGenericReceive+0x40>
 8001ce2:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8001ce4:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8001ce6:	f8df a004 	ldr.w	sl, [pc, #4]	; 8001cec <xQueueGenericReceive+0x184>
 8001cea:	e7b9      	b.n	8001c60 <xQueueGenericReceive+0xf8>
 8001cec:	e000ed04 	.word	0xe000ed04

08001cf0 <uxQueueMessagesWaiting>:
{
 8001cf0:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 8001cf2:	4604      	mov	r4, r0
 8001cf4:	b940      	cbnz	r0, 8001d08 <uxQueueMessagesWaiting+0x18>
 8001cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cfa:	f383 8811 	msr	BASEPRI, r3
 8001cfe:	f3bf 8f6f 	isb	sy
 8001d02:	f3bf 8f4f 	dsb	sy
 8001d06:	e7fe      	b.n	8001d06 <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 8001d08:	f7ff fba4 	bl	8001454 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8001d0c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8001d0e:	f7ff fbc3 	bl	8001498 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8001d12:	4620      	mov	r0, r4
 8001d14:	bd10      	pop	{r4, pc}
	...

08001d18 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d18:	4a06      	ldr	r2, [pc, #24]	; (8001d34 <prvResetNextTaskUnblockTime+0x1c>)
 8001d1a:	6813      	ldr	r3, [r2, #0]
 8001d1c:	6819      	ldr	r1, [r3, #0]
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <prvResetNextTaskUnblockTime+0x20>)
 8001d20:	b919      	cbnz	r1, 8001d2a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001d22:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001d2e:	68d2      	ldr	r2, [r2, #12]
 8001d30:	6852      	ldr	r2, [r2, #4]
 8001d32:	e7f8      	b.n	8001d26 <prvResetNextTaskUnblockTime+0xe>
 8001d34:	20003c4c 	.word	0x20003c4c
 8001d38:	20003d24 	.word	0x20003d24

08001d3c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d40:	4e1b      	ldr	r6, [pc, #108]	; (8001db0 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8001d42:	681d      	ldr	r5, [r3, #0]
{
 8001d44:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d46:	6830      	ldr	r0, [r6, #0]
 8001d48:	3004      	adds	r0, #4
{
 8001d4a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d4c:	f7ff fb18 	bl	8001380 <uxListRemove>
 8001d50:	4633      	mov	r3, r6
 8001d52:	b940      	cbnz	r0, 8001d66 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001d54:	6831      	ldr	r1, [r6, #0]
 8001d56:	4e17      	ldr	r6, [pc, #92]	; (8001db4 <prvAddCurrentTaskToDelayedList+0x78>)
 8001d58:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001d5a:	6832      	ldr	r2, [r6, #0]
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	4088      	lsls	r0, r1
 8001d60:	ea22 0200 	bic.w	r2, r2, r0
 8001d64:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001d66:	1c62      	adds	r2, r4, #1
 8001d68:	d107      	bne.n	8001d7a <prvAddCurrentTaskToDelayedList+0x3e>
 8001d6a:	b137      	cbz	r7, 8001d7a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001d6c:	6819      	ldr	r1, [r3, #0]
 8001d6e:	4812      	ldr	r0, [pc, #72]	; (8001db8 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001d70:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001d72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001d76:	f7ff bae0 	b.w	800133a <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001d7a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001d7c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8001d7e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001d80:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8001d82:	d907      	bls.n	8001d94 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001d84:	4a0d      	ldr	r2, [pc, #52]	; (8001dbc <prvAddCurrentTaskToDelayedList+0x80>)
 8001d86:	6810      	ldr	r0, [r2, #0]
 8001d88:	6819      	ldr	r1, [r3, #0]
}
 8001d8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001d8e:	3104      	adds	r1, #4
 8001d90:	f7ff badf 	b.w	8001352 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001d94:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <prvAddCurrentTaskToDelayedList+0x84>)
 8001d96:	6810      	ldr	r0, [r2, #0]
 8001d98:	6819      	ldr	r1, [r3, #0]
 8001d9a:	3104      	adds	r1, #4
 8001d9c:	f7ff fad9 	bl	8001352 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <prvAddCurrentTaskToDelayedList+0x88>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8001da6:	bf38      	it	cc
 8001da8:	601c      	strcc	r4, [r3, #0]
 8001daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dac:	20003d6c 	.word	0x20003d6c
 8001db0:	20003c48 	.word	0x20003c48
 8001db4:	20003cf4 	.word	0x20003cf4
 8001db8:	20003d44 	.word	0x20003d44
 8001dbc:	20003c50 	.word	0x20003c50
 8001dc0:	20003c4c 	.word	0x20003c4c
 8001dc4:	20003d24 	.word	0x20003d24

08001dc8 <prvTaskIsTaskSuspended.part.0>:
 8001dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dcc:	f383 8811 	msr	BASEPRI, r3
 8001dd0:	f3bf 8f6f 	isb	sy
 8001dd4:	f3bf 8f4f 	dsb	sy
 8001dd8:	e7fe      	b.n	8001dd8 <prvTaskIsTaskSuspended.part.0+0x10>
	...

08001ddc <xTaskCreate>:
	{
 8001ddc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001de0:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8001de4:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001de6:	4650      	mov	r0, sl
	{
 8001de8:	460f      	mov	r7, r1
 8001dea:	4699      	mov	r9, r3
 8001dec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001dee:	f7ff fc5d 	bl	80016ac <pvPortMalloc>
			if( pxStack != NULL )
 8001df2:	4605      	mov	r5, r0
 8001df4:	2800      	cmp	r0, #0
 8001df6:	f000 8096 	beq.w	8001f26 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001dfa:	2054      	movs	r0, #84	; 0x54
 8001dfc:	f7ff fc56 	bl	80016ac <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001e00:	4604      	mov	r4, r0
 8001e02:	2800      	cmp	r0, #0
 8001e04:	f000 808c 	beq.w	8001f20 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001e08:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8001e0c:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001e0e:	4455      	add	r5, sl
 8001e10:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001e12:	f025 0a07 	bic.w	sl, r5, #7
 8001e16:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8001e1a:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001e1c:	7859      	ldrb	r1, [r3, #1]
 8001e1e:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8001e22:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001e26:	b109      	cbz	r1, 8001e2c <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001e28:	42bb      	cmp	r3, r7
 8001e2a:	d1f7      	bne.n	8001e1c <xTaskCreate+0x40>
 8001e2c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001e2e:	2d06      	cmp	r5, #6
 8001e30:	bf28      	it	cs
 8001e32:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001e34:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001e38:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8001e3a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001e3c:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001e3e:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001e40:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8001e44:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001e48:	f7ff fa74 	bl	8001334 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e4c:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001e50:	f104 0018 	add.w	r0, r4, #24
 8001e54:	f7ff fa6e 	bl	8001334 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001e58:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001e5c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e5e:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001e60:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001e62:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001e66:	464a      	mov	r2, r9
 8001e68:	4641      	mov	r1, r8
 8001e6a:	4650      	mov	r0, sl
 8001e6c:	f7ff faca 	bl	8001404 <pxPortInitialiseStack>
 8001e70:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8001e72:	b106      	cbz	r6, 8001e76 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001e74:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8001e76:	f7ff faed 	bl	8001454 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001e7a:	4b32      	ldr	r3, [pc, #200]	; (8001f44 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8001e7c:	4e32      	ldr	r6, [pc, #200]	; (8001f48 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8001f74 <xTaskCreate+0x198>
 8001e84:	3201      	adds	r2, #1
 8001e86:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001e88:	6835      	ldr	r5, [r6, #0]
 8001e8a:	2d00      	cmp	r5, #0
 8001e8c:	d14e      	bne.n	8001f2c <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8001e8e:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d11d      	bne.n	8001ed2 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001e96:	eb08 0005 	add.w	r0, r8, r5
 8001e9a:	3514      	adds	r5, #20
 8001e9c:	f7ff fa3f 	bl	800131e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ea0:	2d8c      	cmp	r5, #140	; 0x8c
 8001ea2:	d1f8      	bne.n	8001e96 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8001ea4:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8001f78 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8001ea8:	4d28      	ldr	r5, [pc, #160]	; (8001f4c <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8001eaa:	4648      	mov	r0, r9
 8001eac:	f7ff fa37 	bl	800131e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001eb0:	4628      	mov	r0, r5
 8001eb2:	f7ff fa34 	bl	800131e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001eb6:	4826      	ldr	r0, [pc, #152]	; (8001f50 <xTaskCreate+0x174>)
 8001eb8:	f7ff fa31 	bl	800131e <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001ebc:	4825      	ldr	r0, [pc, #148]	; (8001f54 <xTaskCreate+0x178>)
 8001ebe:	f7ff fa2e 	bl	800131e <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001ec2:	4825      	ldr	r0, [pc, #148]	; (8001f58 <xTaskCreate+0x17c>)
 8001ec4:	f7ff fa2b 	bl	800131e <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001ec8:	4b24      	ldr	r3, [pc, #144]	; (8001f5c <xTaskCreate+0x180>)
 8001eca:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001ece:	4b24      	ldr	r3, [pc, #144]	; (8001f60 <xTaskCreate+0x184>)
 8001ed0:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8001ed2:	4a24      	ldr	r2, [pc, #144]	; (8001f64 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8001ed4:	4924      	ldr	r1, [pc, #144]	; (8001f68 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8001ed6:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001ed8:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8001eda:	3301      	adds	r3, #1
 8001edc:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001ede:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ee0:	2501      	movs	r5, #1
 8001ee2:	fa05 f302 	lsl.w	r3, r5, r2
 8001ee6:	4303      	orrs	r3, r0
 8001ee8:	2014      	movs	r0, #20
 8001eea:	600b      	str	r3, [r1, #0]
 8001eec:	fb00 8002 	mla	r0, r0, r2, r8
 8001ef0:	4639      	mov	r1, r7
 8001ef2:	f7ff fa22 	bl	800133a <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001ef6:	f7ff facf 	bl	8001498 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001efa:	4b1c      	ldr	r3, [pc, #112]	; (8001f6c <xTaskCreate+0x190>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	b163      	cbz	r3, 8001f1a <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001f00:	6833      	ldr	r3, [r6, #0]
 8001f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d207      	bcs.n	8001f1a <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8001f0a:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <xTaskCreate+0x194>)
 8001f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	f3bf 8f4f 	dsb	sy
 8001f16:	f3bf 8f6f 	isb	sy
	}
 8001f1a:	4628      	mov	r0, r5
 8001f1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8001f20:	4628      	mov	r0, r5
 8001f22:	f7ff fc51 	bl	80017c8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001f26:	f04f 35ff 	mov.w	r5, #4294967295
 8001f2a:	e7f6      	b.n	8001f1a <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <xTaskCreate+0x190>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1ce      	bne.n	8001ed2 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001f34:	6833      	ldr	r3, [r6, #0]
 8001f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f3a:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001f3c:	bf98      	it	ls
 8001f3e:	6034      	strls	r4, [r6, #0]
 8001f40:	e7c7      	b.n	8001ed2 <xTaskCreate+0xf6>
 8001f42:	bf00      	nop
 8001f44:	20003ce0 	.word	0x20003ce0
 8001f48:	20003c48 	.word	0x20003c48
 8001f4c:	20003d0c 	.word	0x20003d0c
 8001f50:	20003d2c 	.word	0x20003d2c
 8001f54:	20003d58 	.word	0x20003d58
 8001f58:	20003d44 	.word	0x20003d44
 8001f5c:	20003c4c 	.word	0x20003c4c
 8001f60:	20003c50 	.word	0x20003c50
 8001f64:	20003cf0 	.word	0x20003cf0
 8001f68:	20003cf4 	.word	0x20003cf4
 8001f6c:	20003d40 	.word	0x20003d40
 8001f70:	e000ed04 	.word	0xe000ed04
 8001f74:	20003c54 	.word	0x20003c54
 8001f78:	20003cf8 	.word	0x20003cf8

08001f7c <vTaskStartScheduler>:
{
 8001f7c:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8001f7e:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <vTaskStartScheduler+0x60>)
 8001f80:	9301      	str	r3, [sp, #4]
 8001f82:	2400      	movs	r4, #0
 8001f84:	9400      	str	r4, [sp, #0]
 8001f86:	4623      	mov	r3, r4
 8001f88:	2280      	movs	r2, #128	; 0x80
 8001f8a:	4915      	ldr	r1, [pc, #84]	; (8001fe0 <vTaskStartScheduler+0x64>)
 8001f8c:	4815      	ldr	r0, [pc, #84]	; (8001fe4 <vTaskStartScheduler+0x68>)
 8001f8e:	f7ff ff25 	bl	8001ddc <xTaskCreate>
	if( xReturn == pdPASS )
 8001f92:	2801      	cmp	r0, #1
 8001f94:	d114      	bne.n	8001fc0 <vTaskStartScheduler+0x44>
 8001f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f9a:	f383 8811 	msr	BASEPRI, r3
 8001f9e:	f3bf 8f6f 	isb	sy
 8001fa2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <vTaskStartScheduler+0x6c>)
 8001fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001fae:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <vTaskStartScheduler+0x70>)
 8001fb0:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001fb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <vTaskStartScheduler+0x74>)
 8001fb4:	601c      	str	r4, [r3, #0]
}
 8001fb6:	b002      	add	sp, #8
 8001fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8001fbc:	f7ff badc 	b.w	8001578 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001fc0:	3001      	adds	r0, #1
 8001fc2:	d108      	bne.n	8001fd6 <vTaskStartScheduler+0x5a>
 8001fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc8:	f383 8811 	msr	BASEPRI, r3
 8001fcc:	f3bf 8f6f 	isb	sy
 8001fd0:	f3bf 8f4f 	dsb	sy
 8001fd4:	e7fe      	b.n	8001fd4 <vTaskStartScheduler+0x58>
}
 8001fd6:	b002      	add	sp, #8
 8001fd8:	bd10      	pop	{r4, pc}
 8001fda:	bf00      	nop
 8001fdc:	20003d20 	.word	0x20003d20
 8001fe0:	08002b44 	.word	0x08002b44
 8001fe4:	08002261 	.word	0x08002261
 8001fe8:	20003d24 	.word	0x20003d24
 8001fec:	20003d40 	.word	0x20003d40
 8001ff0:	20003d6c 	.word	0x20003d6c

08001ff4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001ff4:	4a02      	ldr	r2, [pc, #8]	; (8002000 <vTaskSuspendAll+0xc>)
 8001ff6:	6813      	ldr	r3, [r2, #0]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20003cec 	.word	0x20003cec

08002004 <xTaskIncrementTick>:
{
 8002004:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002008:	4b3c      	ldr	r3, [pc, #240]	; (80020fc <xTaskIncrementTick+0xf8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d153      	bne.n	80020b8 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8002010:	4b3b      	ldr	r3, [pc, #236]	; (8002100 <xTaskIncrementTick+0xfc>)
 8002012:	681c      	ldr	r4, [r3, #0]
 8002014:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8002016:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8002018:	b9bc      	cbnz	r4, 800204a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800201a:	4b3a      	ldr	r3, [pc, #232]	; (8002104 <xTaskIncrementTick+0x100>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	b142      	cbz	r2, 8002034 <xTaskIncrementTick+0x30>
 8002022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002026:	f383 8811 	msr	BASEPRI, r3
 800202a:	f3bf 8f6f 	isb	sy
 800202e:	f3bf 8f4f 	dsb	sy
 8002032:	e7fe      	b.n	8002032 <xTaskIncrementTick+0x2e>
 8002034:	4a34      	ldr	r2, [pc, #208]	; (8002108 <xTaskIncrementTick+0x104>)
 8002036:	6819      	ldr	r1, [r3, #0]
 8002038:	6810      	ldr	r0, [r2, #0]
 800203a:	6018      	str	r0, [r3, #0]
 800203c:	6011      	str	r1, [r2, #0]
 800203e:	4a33      	ldr	r2, [pc, #204]	; (800210c <xTaskIncrementTick+0x108>)
 8002040:	6813      	ldr	r3, [r2, #0]
 8002042:	3301      	adds	r3, #1
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	f7ff fe67 	bl	8001d18 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800204a:	4d31      	ldr	r5, [pc, #196]	; (8002110 <xTaskIncrementTick+0x10c>)
 800204c:	4f31      	ldr	r7, [pc, #196]	; (8002114 <xTaskIncrementTick+0x110>)
 800204e:	682b      	ldr	r3, [r5, #0]
 8002050:	429c      	cmp	r4, r3
 8002052:	f04f 0b00 	mov.w	fp, #0
 8002056:	d33e      	bcc.n	80020d6 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002058:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002104 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 800205c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8002124 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002060:	f8d8 2000 	ldr.w	r2, [r8]
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	bb72      	cbnz	r2, 80020c6 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002068:	f04f 32ff 	mov.w	r2, #4294967295
 800206c:	602a      	str	r2, [r5, #0]
					break;
 800206e:	e032      	b.n	80020d6 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002070:	f106 0a04 	add.w	sl, r6, #4
 8002074:	4650      	mov	r0, sl
 8002076:	f7ff f983 	bl	8001380 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800207a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800207c:	b119      	cbz	r1, 8002086 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800207e:	f106 0018 	add.w	r0, r6, #24
 8002082:	f7ff f97d 	bl	8001380 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002086:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002088:	f8d9 3000 	ldr.w	r3, [r9]
 800208c:	2201      	movs	r2, #1
 800208e:	fa02 f100 	lsl.w	r1, r2, r0
 8002092:	4319      	orrs	r1, r3
 8002094:	4b20      	ldr	r3, [pc, #128]	; (8002118 <xTaskIncrementTick+0x114>)
 8002096:	f8c9 1000 	str.w	r1, [r9]
 800209a:	f04f 0e14 	mov.w	lr, #20
 800209e:	4651      	mov	r1, sl
 80020a0:	fb0e 3000 	mla	r0, lr, r0, r3
 80020a4:	f7ff f949 	bl	800133a <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80020a8:	6838      	ldr	r0, [r7, #0]
 80020aa:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80020ac:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80020ae:	4291      	cmp	r1, r2
 80020b0:	bf28      	it	cs
 80020b2:	f04f 0b01 	movcs.w	fp, #1
 80020b6:	e7d3      	b.n	8002060 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 80020b8:	4a18      	ldr	r2, [pc, #96]	; (800211c <xTaskIncrementTick+0x118>)
 80020ba:	6813      	ldr	r3, [r2, #0]
 80020bc:	3301      	adds	r3, #1
 80020be:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80020c0:	f04f 0b00 	mov.w	fp, #0
 80020c4:	e011      	b.n	80020ea <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80020c6:	f8d8 2000 	ldr.w	r2, [r8]
 80020ca:	68d2      	ldr	r2, [r2, #12]
 80020cc:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80020ce:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80020d0:	428c      	cmp	r4, r1
 80020d2:	d2cd      	bcs.n	8002070 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 80020d4:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	4b0f      	ldr	r3, [pc, #60]	; (8002118 <xTaskIncrementTick+0x114>)
 80020da:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80020dc:	2214      	movs	r2, #20
 80020de:	434a      	muls	r2, r1
 80020e0:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80020e2:	2a02      	cmp	r2, #2
 80020e4:	bf28      	it	cs
 80020e6:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80020ea:	4a0d      	ldr	r2, [pc, #52]	; (8002120 <xTaskIncrementTick+0x11c>)
 80020ec:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80020ee:	2a00      	cmp	r2, #0
 80020f0:	bf18      	it	ne
 80020f2:	f04f 0b01 	movne.w	fp, #1
}
 80020f6:	4658      	mov	r0, fp
 80020f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020fc:	20003cec 	.word	0x20003cec
 8002100:	20003d6c 	.word	0x20003d6c
 8002104:	20003c4c 	.word	0x20003c4c
 8002108:	20003c50 	.word	0x20003c50
 800210c:	20003d28 	.word	0x20003d28
 8002110:	20003d24 	.word	0x20003d24
 8002114:	20003c48 	.word	0x20003c48
 8002118:	20003c54 	.word	0x20003c54
 800211c:	20003ce8 	.word	0x20003ce8
 8002120:	20003d70 	.word	0x20003d70
 8002124:	20003cf4 	.word	0x20003cf4

08002128 <xTaskResumeAll>:
{
 8002128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 800212c:	4c31      	ldr	r4, [pc, #196]	; (80021f4 <xTaskResumeAll+0xcc>)
 800212e:	6823      	ldr	r3, [r4, #0]
 8002130:	b943      	cbnz	r3, 8002144 <xTaskResumeAll+0x1c>
 8002132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002136:	f383 8811 	msr	BASEPRI, r3
 800213a:	f3bf 8f6f 	isb	sy
 800213e:	f3bf 8f4f 	dsb	sy
 8002142:	e7fe      	b.n	8002142 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8002144:	f7ff f986 	bl	8001454 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002148:	6823      	ldr	r3, [r4, #0]
 800214a:	3b01      	subs	r3, #1
 800214c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800214e:	6824      	ldr	r4, [r4, #0]
 8002150:	b12c      	cbz	r4, 800215e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8002152:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002154:	f7ff f9a0 	bl	8001498 <vPortExitCritical>
}
 8002158:	4620      	mov	r0, r4
 800215a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800215e:	4b26      	ldr	r3, [pc, #152]	; (80021f8 <xTaskResumeAll+0xd0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f5      	beq.n	8002152 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002166:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8002210 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 800216a:	4f24      	ldr	r7, [pc, #144]	; (80021fc <xTaskResumeAll+0xd4>)
 800216c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002214 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002170:	f8d9 3000 	ldr.w	r3, [r9]
 8002174:	b9e3      	cbnz	r3, 80021b0 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8002176:	b10c      	cbz	r4, 800217c <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8002178:	f7ff fdce 	bl	8001d18 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800217c:	4d20      	ldr	r5, [pc, #128]	; (8002200 <xTaskResumeAll+0xd8>)
 800217e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002180:	b144      	cbz	r4, 8002194 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8002182:	4e20      	ldr	r6, [pc, #128]	; (8002204 <xTaskResumeAll+0xdc>)
 8002184:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8002186:	f7ff ff3d 	bl	8002004 <xTaskIncrementTick>
 800218a:	b100      	cbz	r0, 800218e <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 800218c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800218e:	3c01      	subs	r4, #1
 8002190:	d1f9      	bne.n	8002186 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8002192:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002194:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <xTaskResumeAll+0xdc>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0da      	beq.n	8002152 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800219c:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <xTaskResumeAll+0xe0>)
 800219e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	f3bf 8f4f 	dsb	sy
 80021a8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80021ac:	2401      	movs	r4, #1
 80021ae:	e7d1      	b.n	8002154 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80021b0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80021b4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80021b6:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80021b8:	f104 0018 	add.w	r0, r4, #24
 80021bc:	f7ff f8e0 	bl	8001380 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80021c0:	4630      	mov	r0, r6
 80021c2:	f7ff f8dd 	bl	8001380 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80021c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80021c8:	6839      	ldr	r1, [r7, #0]
 80021ca:	2501      	movs	r5, #1
 80021cc:	fa05 f302 	lsl.w	r3, r5, r2
 80021d0:	2014      	movs	r0, #20
 80021d2:	430b      	orrs	r3, r1
 80021d4:	fb00 8002 	mla	r0, r0, r2, r8
 80021d8:	4631      	mov	r1, r6
 80021da:	603b      	str	r3, [r7, #0]
 80021dc:	f7ff f8ad 	bl	800133a <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80021e0:	4b0a      	ldr	r3, [pc, #40]	; (800220c <xTaskResumeAll+0xe4>)
 80021e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e8:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 80021ea:	bf24      	itt	cs
 80021ec:	4b05      	ldrcs	r3, [pc, #20]	; (8002204 <xTaskResumeAll+0xdc>)
 80021ee:	601d      	strcs	r5, [r3, #0]
 80021f0:	e7be      	b.n	8002170 <xTaskResumeAll+0x48>
 80021f2:	bf00      	nop
 80021f4:	20003cec 	.word	0x20003cec
 80021f8:	20003ce0 	.word	0x20003ce0
 80021fc:	20003cf4 	.word	0x20003cf4
 8002200:	20003ce8 	.word	0x20003ce8
 8002204:	20003d70 	.word	0x20003d70
 8002208:	e000ed04 	.word	0xe000ed04
 800220c:	20003c48 	.word	0x20003c48
 8002210:	20003d2c 	.word	0x20003d2c
 8002214:	20003c54 	.word	0x20003c54

08002218 <vTaskDelay>:
	{
 8002218:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800221a:	b940      	cbnz	r0, 800222e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800221c:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <vTaskDelay+0x40>)
 800221e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	f3bf 8f4f 	dsb	sy
 8002228:	f3bf 8f6f 	isb	sy
 800222c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <vTaskDelay+0x44>)
 8002230:	6819      	ldr	r1, [r3, #0]
 8002232:	b141      	cbz	r1, 8002246 <vTaskDelay+0x2e>
 8002234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002238:	f383 8811 	msr	BASEPRI, r3
 800223c:	f3bf 8f6f 	isb	sy
 8002240:	f3bf 8f4f 	dsb	sy
 8002244:	e7fe      	b.n	8002244 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002246:	f7ff fed5 	bl	8001ff4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800224a:	f7ff fd77 	bl	8001d3c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800224e:	f7ff ff6b 	bl	8002128 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8002252:	2800      	cmp	r0, #0
 8002254:	d0e2      	beq.n	800221c <vTaskDelay+0x4>
 8002256:	bd08      	pop	{r3, pc}
 8002258:	e000ed04 	.word	0xe000ed04
 800225c:	20003cec 	.word	0x20003cec

08002260 <prvIdleTask>:
{
 8002260:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002262:	4e17      	ldr	r6, [pc, #92]	; (80022c0 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002264:	4c17      	ldr	r4, [pc, #92]	; (80022c4 <prvIdleTask+0x64>)
 8002266:	6823      	ldr	r3, [r4, #0]
 8002268:	b963      	cbnz	r3, 8002284 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800226a:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <prvIdleTask+0x68>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d9f8      	bls.n	8002264 <prvIdleTask+0x4>
				taskYIELD();
 8002272:	4b16      	ldr	r3, [pc, #88]	; (80022cc <prvIdleTask+0x6c>)
 8002274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	f3bf 8f4f 	dsb	sy
 800227e:	f3bf 8f6f 	isb	sy
 8002282:	e7ef      	b.n	8002264 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8002284:	f7ff feb6 	bl	8001ff4 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002288:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 800228a:	f7ff ff4d 	bl	8002128 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800228e:	2d00      	cmp	r5, #0
 8002290:	d0e9      	beq.n	8002266 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8002292:	f7ff f8df 	bl	8001454 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002296:	68f3      	ldr	r3, [r6, #12]
 8002298:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800229a:	1d28      	adds	r0, r5, #4
 800229c:	f7ff f870 	bl	8001380 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80022a0:	4a0b      	ldr	r2, [pc, #44]	; (80022d0 <prvIdleTask+0x70>)
 80022a2:	6813      	ldr	r3, [r2, #0]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80022a8:	6823      	ldr	r3, [r4, #0]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 80022ae:	f7ff f8f3 	bl	8001498 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80022b2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80022b4:	f7ff fa88 	bl	80017c8 <vPortFree>
			vPortFree( pxTCB );
 80022b8:	4628      	mov	r0, r5
 80022ba:	f7ff fa85 	bl	80017c8 <vPortFree>
 80022be:	e7d2      	b.n	8002266 <prvIdleTask+0x6>
 80022c0:	20003d58 	.word	0x20003d58
 80022c4:	20003ce4 	.word	0x20003ce4
 80022c8:	20003c54 	.word	0x20003c54
 80022cc:	e000ed04 	.word	0xe000ed04
 80022d0:	20003ce0 	.word	0x20003ce0

080022d4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80022d4:	4b17      	ldr	r3, [pc, #92]	; (8002334 <vTaskSwitchContext+0x60>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b17      	ldr	r3, [pc, #92]	; (8002338 <vTaskSwitchContext+0x64>)
{
 80022da:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80022dc:	b112      	cbz	r2, 80022e4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80022de:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80022e4:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80022e6:	4b15      	ldr	r3, [pc, #84]	; (800233c <vTaskSwitchContext+0x68>)
 80022e8:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80022ea:	fab3 f383 	clz	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	f1c3 031f 	rsb	r3, r3, #31
 80022f4:	2214      	movs	r2, #20
 80022f6:	4912      	ldr	r1, [pc, #72]	; (8002340 <vTaskSwitchContext+0x6c>)
 80022f8:	435a      	muls	r2, r3
 80022fa:	1888      	adds	r0, r1, r2
 80022fc:	588c      	ldr	r4, [r1, r2]
 80022fe:	b944      	cbnz	r4, 8002312 <vTaskSwitchContext+0x3e>
	__asm volatile
 8002300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002304:	f383 8811 	msr	BASEPRI, r3
 8002308:	f3bf 8f6f 	isb	sy
 800230c:	f3bf 8f4f 	dsb	sy
 8002310:	e7fe      	b.n	8002310 <vTaskSwitchContext+0x3c>
 8002312:	6844      	ldr	r4, [r0, #4]
 8002314:	3208      	adds	r2, #8
 8002316:	6864      	ldr	r4, [r4, #4]
 8002318:	6044      	str	r4, [r0, #4]
 800231a:	440a      	add	r2, r1
 800231c:	4294      	cmp	r4, r2
 800231e:	bf04      	itt	eq
 8002320:	6862      	ldreq	r2, [r4, #4]
 8002322:	6042      	streq	r2, [r0, #4]
 8002324:	2214      	movs	r2, #20
 8002326:	fb02 1303 	mla	r3, r2, r3, r1
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	4b05      	ldr	r3, [pc, #20]	; (8002344 <vTaskSwitchContext+0x70>)
 8002330:	e7d6      	b.n	80022e0 <vTaskSwitchContext+0xc>
 8002332:	bf00      	nop
 8002334:	20003cec 	.word	0x20003cec
 8002338:	20003d70 	.word	0x20003d70
 800233c:	20003cf4 	.word	0x20003cf4
 8002340:	20003c54 	.word	0x20003c54
 8002344:	20003c48 	.word	0x20003c48

08002348 <vTaskPlaceOnEventList>:
{
 8002348:	b510      	push	{r4, lr}
 800234a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800234c:	b940      	cbnz	r0, 8002360 <vTaskPlaceOnEventList+0x18>
 800234e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002352:	f383 8811 	msr	BASEPRI, r3
 8002356:	f3bf 8f6f 	isb	sy
 800235a:	f3bf 8f4f 	dsb	sy
 800235e:	e7fe      	b.n	800235e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <vTaskPlaceOnEventList+0x30>)
 8002362:	6819      	ldr	r1, [r3, #0]
 8002364:	3118      	adds	r1, #24
 8002366:	f7fe fff4 	bl	8001352 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800236a:	4620      	mov	r0, r4
 800236c:	2101      	movs	r1, #1
}
 800236e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002372:	f7ff bce3 	b.w	8001d3c <prvAddCurrentTaskToDelayedList>
 8002376:	bf00      	nop
 8002378:	20003c48 	.word	0x20003c48

0800237c <xTaskRemoveFromEventList>:
{
 800237c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800237e:	68c3      	ldr	r3, [r0, #12]
 8002380:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8002382:	b944      	cbnz	r4, 8002396 <xTaskRemoveFromEventList+0x1a>
 8002384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002388:	f383 8811 	msr	BASEPRI, r3
 800238c:	f3bf 8f6f 	isb	sy
 8002390:	f3bf 8f4f 	dsb	sy
 8002394:	e7fe      	b.n	8002394 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002396:	f104 0518 	add.w	r5, r4, #24
 800239a:	4628      	mov	r0, r5
 800239c:	f7fe fff0 	bl	8001380 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <xTaskRemoveFromEventList+0x6c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	b9e3      	cbnz	r3, 80023e0 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80023a6:	1d25      	adds	r5, r4, #4
 80023a8:	4628      	mov	r0, r5
 80023aa:	f7fe ffe9 	bl	8001380 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80023ae:	490f      	ldr	r1, [pc, #60]	; (80023ec <xTaskRemoveFromEventList+0x70>)
 80023b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80023b2:	6808      	ldr	r0, [r1, #0]
 80023b4:	2301      	movs	r3, #1
 80023b6:	4093      	lsls	r3, r2
 80023b8:	4303      	orrs	r3, r0
 80023ba:	600b      	str	r3, [r1, #0]
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <xTaskRemoveFromEventList+0x74>)
 80023be:	2014      	movs	r0, #20
 80023c0:	4629      	mov	r1, r5
 80023c2:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80023c6:	f7fe ffb8 	bl	800133a <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80023ca:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <xTaskRemoveFromEventList+0x78>)
 80023cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d2:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80023d4:	bf83      	ittte	hi
 80023d6:	4b08      	ldrhi	r3, [pc, #32]	; (80023f8 <xTaskRemoveFromEventList+0x7c>)
 80023d8:	2001      	movhi	r0, #1
 80023da:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 80023dc:	2000      	movls	r0, #0
}
 80023de:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80023e0:	4629      	mov	r1, r5
 80023e2:	4806      	ldr	r0, [pc, #24]	; (80023fc <xTaskRemoveFromEventList+0x80>)
 80023e4:	e7ef      	b.n	80023c6 <xTaskRemoveFromEventList+0x4a>
 80023e6:	bf00      	nop
 80023e8:	20003cec 	.word	0x20003cec
 80023ec:	20003cf4 	.word	0x20003cf4
 80023f0:	20003c54 	.word	0x20003c54
 80023f4:	20003c48 	.word	0x20003c48
 80023f8:	20003d70 	.word	0x20003d70
 80023fc:	20003d2c 	.word	0x20003d2c

08002400 <vTaskSetTimeOutState>:
{
 8002400:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8002402:	b908      	cbnz	r0, 8002408 <vTaskSetTimeOutState+0x8>
 8002404:	f7ff fce0 	bl	8001dc8 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002408:	4b03      	ldr	r3, [pc, #12]	; (8002418 <vTaskSetTimeOutState+0x18>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800240e:	4b03      	ldr	r3, [pc, #12]	; (800241c <vTaskSetTimeOutState+0x1c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6043      	str	r3, [r0, #4]
 8002414:	bd08      	pop	{r3, pc}
 8002416:	bf00      	nop
 8002418:	20003d28 	.word	0x20003d28
 800241c:	20003d6c 	.word	0x20003d6c

08002420 <xTaskCheckForTimeOut>:
{
 8002420:	b538      	push	{r3, r4, r5, lr}
 8002422:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 8002424:	4604      	mov	r4, r0
 8002426:	b940      	cbnz	r0, 800243a <xTaskCheckForTimeOut+0x1a>
 8002428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800242c:	f383 8811 	msr	BASEPRI, r3
 8002430:	f3bf 8f6f 	isb	sy
 8002434:	f3bf 8f4f 	dsb	sy
 8002438:	e7fe      	b.n	8002438 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800243a:	b941      	cbnz	r1, 800244e <xTaskCheckForTimeOut+0x2e>
 800243c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002440:	f383 8811 	msr	BASEPRI, r3
 8002444:	f3bf 8f6f 	isb	sy
 8002448:	f3bf 8f4f 	dsb	sy
 800244c:	e7fe      	b.n	800244c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800244e:	f7ff f801 	bl	8001454 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8002452:	4b0e      	ldr	r3, [pc, #56]	; (800248c <xTaskCheckForTimeOut+0x6c>)
 8002454:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8002456:	682b      	ldr	r3, [r5, #0]
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	d010      	beq.n	800247e <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800245c:	4a0c      	ldr	r2, [pc, #48]	; (8002490 <xTaskCheckForTimeOut+0x70>)
 800245e:	6820      	ldr	r0, [r4, #0]
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	4290      	cmp	r0, r2
 8002464:	6862      	ldr	r2, [r4, #4]
 8002466:	d001      	beq.n	800246c <xTaskCheckForTimeOut+0x4c>
 8002468:	4291      	cmp	r1, r2
 800246a:	d20d      	bcs.n	8002488 <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800246c:	1a88      	subs	r0, r1, r2
 800246e:	4283      	cmp	r3, r0
 8002470:	d90a      	bls.n	8002488 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8002472:	1a5b      	subs	r3, r3, r1
 8002474:	4413      	add	r3, r2
 8002476:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002478:	4620      	mov	r0, r4
 800247a:	f7ff ffc1 	bl	8002400 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 800247e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002480:	f7ff f80a 	bl	8001498 <vPortExitCritical>
}
 8002484:	4620      	mov	r0, r4
 8002486:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8002488:	2401      	movs	r4, #1
 800248a:	e7f9      	b.n	8002480 <xTaskCheckForTimeOut+0x60>
 800248c:	20003d6c 	.word	0x20003d6c
 8002490:	20003d28 	.word	0x20003d28

08002494 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8002494:	4b01      	ldr	r3, [pc, #4]	; (800249c <vTaskMissedYield+0x8>)
 8002496:	2201      	movs	r2, #1
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	4770      	bx	lr
 800249c:	20003d70 	.word	0x20003d70

080024a0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <xTaskGetSchedulerState+0x18>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	b133      	cbz	r3, 80024b4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024a6:	4b05      	ldr	r3, [pc, #20]	; (80024bc <xTaskGetSchedulerState+0x1c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80024ac:	bf0c      	ite	eq
 80024ae:	2002      	moveq	r0, #2
 80024b0:	2000      	movne	r0, #0
 80024b2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80024b4:	2001      	movs	r0, #1
	}
 80024b6:	4770      	bx	lr
 80024b8:	20003d40 	.word	0x20003d40
 80024bc:	20003cec 	.word	0x20003cec

080024c0 <vTaskPriorityInherit>:
	{
 80024c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 80024c4:	4604      	mov	r4, r0
 80024c6:	2800      	cmp	r0, #0
 80024c8:	d038      	beq.n	800253c <vTaskPriorityInherit+0x7c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80024ca:	4d1d      	ldr	r5, [pc, #116]	; (8002540 <vTaskPriorityInherit+0x80>)
 80024cc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80024ce:	682a      	ldr	r2, [r5, #0]
 80024d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d232      	bcs.n	800253c <vTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80024d6:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80024d8:	4e1a      	ldr	r6, [pc, #104]	; (8002544 <vTaskPriorityInherit+0x84>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80024da:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024dc:	bfa1      	itttt	ge
 80024de:	682a      	ldrge	r2, [r5, #0]
 80024e0:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 80024e2:	f1c2 0207 	rsbge	r2, r2, #7
 80024e6:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80024e8:	2714      	movs	r7, #20
 80024ea:	6942      	ldr	r2, [r0, #20]
 80024ec:	fb07 6303 	mla	r3, r7, r3, r6
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d120      	bne.n	8002536 <vTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80024f4:	f100 0804 	add.w	r8, r0, #4
 80024f8:	4640      	mov	r0, r8
 80024fa:	f7fe ff41 	bl	8001380 <uxListRemove>
 80024fe:	4a12      	ldr	r2, [pc, #72]	; (8002548 <vTaskPriorityInherit+0x88>)
 8002500:	b948      	cbnz	r0, 8002516 <vTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002502:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002504:	4347      	muls	r7, r0
 8002506:	59f3      	ldr	r3, [r6, r7]
 8002508:	b92b      	cbnz	r3, 8002516 <vTaskPriorityInherit+0x56>
 800250a:	6813      	ldr	r3, [r2, #0]
 800250c:	2101      	movs	r1, #1
 800250e:	4081      	lsls	r1, r0
 8002510:	ea23 0301 	bic.w	r3, r3, r1
 8002514:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002516:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8002518:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800251a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800251c:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800251e:	2301      	movs	r3, #1
 8002520:	4083      	lsls	r3, r0
 8002522:	430b      	orrs	r3, r1
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	2314      	movs	r3, #20
 8002528:	4641      	mov	r1, r8
 800252a:	fb03 6000 	mla	r0, r3, r0, r6
	}
 800252e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 8002532:	f7fe bf02 	b.w	800133a <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002536:	682b      	ldr	r3, [r5, #0]
 8002538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800253c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002540:	20003c48 	.word	0x20003c48
 8002544:	20003c54 	.word	0x20003c54
 8002548:	20003cf4 	.word	0x20003cf4

0800254c <xTaskPriorityDisinherit>:
	{
 800254c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800254e:	4604      	mov	r4, r0
 8002550:	b908      	cbnz	r0, 8002556 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8002552:	2000      	movs	r0, #0
 8002554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8002556:	4b22      	ldr	r3, [pc, #136]	; (80025e0 <xTaskPriorityDisinherit+0x94>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4298      	cmp	r0, r3
 800255c:	d008      	beq.n	8002570 <xTaskPriorityDisinherit+0x24>
 800255e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002562:	f383 8811 	msr	BASEPRI, r3
 8002566:	f3bf 8f6f 	isb	sy
 800256a:	f3bf 8f4f 	dsb	sy
 800256e:	e7fe      	b.n	800256e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8002570:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002572:	b943      	cbnz	r3, 8002586 <xTaskPriorityDisinherit+0x3a>
 8002574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002578:	f383 8811 	msr	BASEPRI, r3
 800257c:	f3bf 8f6f 	isb	sy
 8002580:	f3bf 8f4f 	dsb	sy
 8002584:	e7fe      	b.n	8002584 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002586:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002588:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800258a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800258c:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800258e:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002590:	d0df      	beq.n	8002552 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1dd      	bne.n	8002552 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002596:	1d05      	adds	r5, r0, #4
 8002598:	4628      	mov	r0, r5
 800259a:	f7fe fef1 	bl	8001380 <uxListRemove>
 800259e:	4e11      	ldr	r6, [pc, #68]	; (80025e4 <xTaskPriorityDisinherit+0x98>)
 80025a0:	4a11      	ldr	r2, [pc, #68]	; (80025e8 <xTaskPriorityDisinherit+0x9c>)
 80025a2:	b950      	cbnz	r0, 80025ba <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80025a4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80025a6:	2114      	movs	r1, #20
 80025a8:	4379      	muls	r1, r7
 80025aa:	5873      	ldr	r3, [r6, r1]
 80025ac:	b92b      	cbnz	r3, 80025ba <xTaskPriorityDisinherit+0x6e>
 80025ae:	6813      	ldr	r3, [r2, #0]
 80025b0:	2001      	movs	r0, #1
 80025b2:	40b8      	lsls	r0, r7
 80025b4:	ea23 0300 	bic.w	r3, r3, r0
 80025b8:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80025ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80025bc:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025be:	f1c3 0107 	rsb	r1, r3, #7
 80025c2:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80025c4:	6811      	ldr	r1, [r2, #0]
 80025c6:	2401      	movs	r4, #1
 80025c8:	fa04 f003 	lsl.w	r0, r4, r3
 80025cc:	4308      	orrs	r0, r1
 80025ce:	6010      	str	r0, [r2, #0]
 80025d0:	2014      	movs	r0, #20
 80025d2:	fb00 6003 	mla	r0, r0, r3, r6
 80025d6:	4629      	mov	r1, r5
 80025d8:	f7fe feaf 	bl	800133a <vListInsertEnd>
					xReturn = pdTRUE;
 80025dc:	4620      	mov	r0, r4
	}
 80025de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025e0:	20003c48 	.word	0x20003c48
 80025e4:	20003c54 	.word	0x20003c54
 80025e8:	20003cf4 	.word	0x20003cf4

080025ec <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80025ec:	4b04      	ldr	r3, [pc, #16]	; (8002600 <pvTaskIncrementMutexHeldCount+0x14>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	b11a      	cbz	r2, 80025fa <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80025f2:	6819      	ldr	r1, [r3, #0]
 80025f4:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80025f6:	3201      	adds	r2, #1
 80025f8:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 80025fa:	6818      	ldr	r0, [r3, #0]
	}
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	20003c48 	.word	0x20003c48

08002604 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002604:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002606:	2001      	movs	r0, #1
 8002608:	f7fe fe81 	bl	800130e <osDelay>
 800260c:	e7fb      	b.n	8002606 <StartDefaultTask+0x2>
	...

08002610 <SystemClock_Config>:
{
 8002610:	b530      	push	{r4, r5, lr}
 8002612:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002614:	2230      	movs	r2, #48	; 0x30
 8002616:	2100      	movs	r1, #0
 8002618:	a808      	add	r0, sp, #32
 800261a:	f000 fa74 	bl	8002b06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800261e:	2100      	movs	r1, #0
 8002620:	2214      	movs	r2, #20
 8002622:	a803      	add	r0, sp, #12
 8002624:	f000 fa6f 	bl	8002b06 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8002628:	2400      	movs	r4, #0
 800262a:	4b1d      	ldr	r3, [pc, #116]	; (80026a0 <SystemClock_Config+0x90>)
 800262c:	9401      	str	r4, [sp, #4]
 800262e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002630:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002634:	641a      	str	r2, [r3, #64]	; 0x40
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263c:	9301      	str	r3, [sp, #4]
 800263e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002640:	4b18      	ldr	r3, [pc, #96]	; (80026a4 <SystemClock_Config+0x94>)
 8002642:	9402      	str	r4, [sp, #8]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002652:	9302      	str	r3, [sp, #8]
 8002654:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002656:	2301      	movs	r3, #1
 8002658:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800265a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800265e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002660:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002664:	22b4      	movs	r2, #180	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002666:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002668:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800266a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 800266c:	2304      	movs	r3, #4
 800266e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002670:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002672:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002674:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002676:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002678:	f7fe f8ee 	bl	8000858 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800267c:	f7fe f8b0 	bl	80007e0 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002680:	230f      	movs	r3, #15
 8002682:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002684:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002688:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800268a:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800268c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002690:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002692:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002694:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002696:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002698:	f7fe fa8e 	bl	8000bb8 <HAL_RCC_ClockConfig>
}
 800269c:	b015      	add	sp, #84	; 0x54
 800269e:	bd30      	pop	{r4, r5, pc}
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40007000 	.word	0x40007000

080026a8 <main>:
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b094      	sub	sp, #80	; 0x50
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026ac:	2400      	movs	r4, #0
 80026ae:	4d58      	ldr	r5, [pc, #352]	; (8002810 <main+0x168>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80026b0:	4e58      	ldr	r6, [pc, #352]	; (8002814 <main+0x16c>)
  HAL_Init();
 80026b2:	f7fd ff25 	bl	8000500 <HAL_Init>
  SystemClock_Config();
 80026b6:	f7ff ffab 	bl	8002610 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ba:	2214      	movs	r2, #20
 80026bc:	2100      	movs	r1, #0
 80026be:	a80d      	add	r0, sp, #52	; 0x34
 80026c0:	f000 fa21 	bl	8002b06 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026c4:	9402      	str	r4, [sp, #8]
 80026c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80026c8:	4853      	ldr	r0, [pc, #332]	; (8002818 <main+0x170>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ce:	632b      	str	r3, [r5, #48]	; 0x30
 80026d0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80026d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d6:	9302      	str	r3, [sp, #8]
 80026d8:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026da:	9403      	str	r4, [sp, #12]
 80026dc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	632b      	str	r3, [r5, #48]	; 0x30
 80026e4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	9303      	str	r3, [sp, #12]
 80026ec:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026ee:	9404      	str	r4, [sp, #16]
 80026f0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80026f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026f6:	632b      	str	r3, [r5, #48]	; 0x30
 80026f8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80026fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80026fe:	4622      	mov	r2, r4
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002700:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8002702:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002706:	2701      	movs	r7, #1
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002708:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 800270a:	f7fe f863 	bl	80007d4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 800270e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002712:	a90d      	add	r1, sp, #52	; 0x34
 8002714:	4840      	ldr	r0, [pc, #256]	; (8002818 <main+0x170>)
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 8002716:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002718:	970e      	str	r7, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271c:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800271e:	f7fd ff6d 	bl	80005fc <HAL_GPIO_Init>
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002722:	221c      	movs	r2, #28
 8002724:	4621      	mov	r1, r4
 8002726:	a80d      	add	r0, sp, #52	; 0x34
 8002728:	f000 f9ed 	bl	8002b06 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272c:	2218      	movs	r2, #24
 800272e:	4621      	mov	r1, r4
 8002730:	a807      	add	r0, sp, #28
 8002732:	f000 f9e8 	bl	8002b06 <memset>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002736:	6c6b      	ldr	r3, [r5, #68]	; 0x44
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002738:	4838      	ldr	r0, [pc, #224]	; (800281c <main+0x174>)
 800273a:	f043 0310 	orr.w	r3, r3, #16
 800273e:	646b      	str	r3, [r5, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002740:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002742:	f003 0310 	and.w	r3, r3, #16
 8002746:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
 8002748:	9b06      	ldr	r3, [sp, #24]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800274a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800274c:	433b      	orrs	r3, r7
 800274e:	632b      	str	r3, [r5, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002750:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002752:	970b      	str	r7, [sp, #44]	; 0x2c
 8002754:	403b      	ands	r3, r7
 8002756:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8002758:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 800275a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800275e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002760:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002762:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002766:	9309      	str	r3, [sp, #36]	; 0x24
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002768:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800276a:	2307      	movs	r3, #7
  LL_USART_Init(USART1, &USART_InitStruct);
 800276c:	f5a5 3594 	sub.w	r5, r5, #75776	; 0x12800
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002770:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002772:	f8cd 8020 	str.w	r8, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002776:	f7fe fc19 	bl	8000fac <LL_GPIO_Init>
  USART_InitStruct.BaudRate = 115200;
 800277a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800277e:	930d      	str	r3, [sp, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8002780:	a90d      	add	r1, sp, #52	; 0x34
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002782:	230c      	movs	r3, #12
  LL_USART_Init(USART1, &USART_InitStruct);
 8002784:	4628      	mov	r0, r5
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002786:	9311      	str	r3, [sp, #68]	; 0x44
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002788:	940e      	str	r4, [sp, #56]	; 0x38
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800278a:	940f      	str	r4, [sp, #60]	; 0x3c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800278c:	9410      	str	r4, [sp, #64]	; 0x40
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800278e:	9412      	str	r4, [sp, #72]	; 0x48
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002790:	9413      	str	r4, [sp, #76]	; 0x4c
  LL_USART_Init(USART1, &USART_InitStruct);
 8002792:	f7fe fd1b 	bl	80011cc <LL_USART_Init>
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002796:	692b      	ldr	r3, [r5, #16]
 8002798:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800279c:	612b      	str	r3, [r5, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800279e:	696b      	ldr	r3, [r5, #20]
 80027a0:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80027a4:	616b      	str	r3, [r5, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80027a6:	68eb      	ldr	r3, [r5, #12]
 80027a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027ac:	60eb      	str	r3, [r5, #12]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80027ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80027b0:	ad0d      	add	r5, sp, #52	; 0x34
 80027b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027b4:	6833      	ldr	r3, [r6, #0]
 80027b6:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80027b8:	4621      	mov	r1, r4
 80027ba:	a80d      	add	r0, sp, #52	; 0x34
 80027bc:	f7fe fd8f 	bl	80012de <osThreadCreate>
 80027c0:	4b17      	ldr	r3, [pc, #92]	; (8002820 <main+0x178>)
  xTaskCreate(vSenderTask, "Sender1", 1000, (void *)1, 1, NULL);
 80027c2:	4918      	ldr	r1, [pc, #96]	; (8002824 <main+0x17c>)
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80027c4:	6018      	str	r0, [r3, #0]
  xTaskCreate(vSenderTask, "Sender1", 1000, (void *)1, 1, NULL);
 80027c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027ca:	463b      	mov	r3, r7
 80027cc:	9401      	str	r4, [sp, #4]
 80027ce:	9700      	str	r7, [sp, #0]
 80027d0:	4815      	ldr	r0, [pc, #84]	; (8002828 <main+0x180>)
 80027d2:	f7ff fb03 	bl	8001ddc <xTaskCreate>
  xTaskCreate(vSenderTask, "Sender2", 1000, (void *)2, 1, NULL);
 80027d6:	4643      	mov	r3, r8
 80027d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027dc:	4913      	ldr	r1, [pc, #76]	; (800282c <main+0x184>)
 80027de:	9401      	str	r4, [sp, #4]
 80027e0:	9700      	str	r7, [sp, #0]
 80027e2:	4811      	ldr	r0, [pc, #68]	; (8002828 <main+0x180>)
 80027e4:	f7ff fafa 	bl	8001ddc <xTaskCreate>
  xTaskCreate(vReceiverTask, "Receiver", 1000, NULL, 2, NULL);
 80027e8:	4623      	mov	r3, r4
 80027ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027ee:	4910      	ldr	r1, [pc, #64]	; (8002830 <main+0x188>)
 80027f0:	9401      	str	r4, [sp, #4]
 80027f2:	f8cd 8000 	str.w	r8, [sp]
 80027f6:	480f      	ldr	r0, [pc, #60]	; (8002834 <main+0x18c>)
 80027f8:	f7ff faf0 	bl	8001ddc <xTaskCreate>
  xQueue = xQueueCreate(100, sizeof(long));
 80027fc:	4622      	mov	r2, r4
 80027fe:	2104      	movs	r1, #4
 8002800:	2064      	movs	r0, #100	; 0x64
 8002802:	f7ff f8d9 	bl	80019b8 <xQueueGenericCreate>
 8002806:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <main+0x190>)
 8002808:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800280a:	f7fe fd63 	bl	80012d4 <osKernelStart>
 800280e:	e7fe      	b.n	800280e <main+0x166>
 8002810:	40023800 	.word	0x40023800
 8002814:	08002b30 	.word	0x08002b30
 8002818:	40021800 	.word	0x40021800
 800281c:	40020000 	.word	0x40020000
 8002820:	20003d78 	.word	0x20003d78
 8002824:	08002b49 	.word	0x08002b49
 8002828:	08002859 	.word	0x08002859
 800282c:	08002b51 	.word	0x08002b51
 8002830:	08002b59 	.word	0x08002b59
 8002834:	080028b1 	.word	0x080028b1
 8002838:	20003d7c 	.word	0x20003d7c

0800283c <vPrintString>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800283c:	4a05      	ldr	r2, [pc, #20]	; (8002854 <vPrintString+0x18>)
 800283e:	3801      	subs	r0, #1
    while(*pStr){
 8002840:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8002844:	b903      	cbnz	r3, 8002848 <vPrintString+0xc>
}
 8002846:	4770      	bx	lr
 8002848:	6811      	ldr	r1, [r2, #0]
        while(!LL_USART_IsActiveFlag_TXE(USART1));
 800284a:	0609      	lsls	r1, r1, #24
 800284c:	d5fc      	bpl.n	8002848 <vPrintString+0xc>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 800284e:	6053      	str	r3, [r2, #4]
 8002850:	e7f6      	b.n	8002840 <vPrintString+0x4>
 8002852:	bf00      	nop
 8002854:	40011000 	.word	0x40011000

08002858 <vSenderTask>:
{
 8002858:	b537      	push	{r0, r1, r2, r4, r5, lr}
    	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 800285a:	4c11      	ldr	r4, [pc, #68]	; (80028a0 <vSenderTask+0x48>)
      	taskYIELD();
 800285c:	4d11      	ldr	r5, [pc, #68]	; (80028a4 <vSenderTask+0x4c>)
	lValueToSend = (long)pvParameters;
 800285e:	9001      	str	r0, [sp, #4]
    	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8002860:	2201      	movs	r2, #1
 8002862:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002866:	4620      	mov	r0, r4
 8002868:	f7fd ffb4 	bl	80007d4 <HAL_GPIO_WritePin>
    	xStatus = xQueueSendToBack(xQueue, &lValueToSend, 0);
 800286c:	480e      	ldr	r0, [pc, #56]	; (80028a8 <vSenderTask+0x50>)
 800286e:	2300      	movs	r3, #0
 8002870:	461a      	mov	r2, r3
 8002872:	a901      	add	r1, sp, #4
 8002874:	6800      	ldr	r0, [r0, #0]
 8002876:	f7ff f8c1 	bl	80019fc <xQueueGenericSend>
    	if(xStatus != pdPASS)
 800287a:	2801      	cmp	r0, #1
 800287c:	d002      	beq.n	8002884 <vSenderTask+0x2c>
    		vPrintString("could not send to the queue. \r \n");
 800287e:	480b      	ldr	r0, [pc, #44]	; (80028ac <vSenderTask+0x54>)
 8002880:	f7ff ffdc 	bl	800283c <vPrintString>
      	taskYIELD();
 8002884:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002888:	602b      	str	r3, [r5, #0]
 800288a:	f3bf 8f4f 	dsb	sy
 800288e:	f3bf 8f6f 	isb	sy
        HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8002892:	2200      	movs	r2, #0
 8002894:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002898:	4620      	mov	r0, r4
 800289a:	f7fd ff9b 	bl	80007d4 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 800289e:	e7df      	b.n	8002860 <vSenderTask+0x8>
 80028a0:	40021800 	.word	0x40021800
 80028a4:	e000ed04 	.word	0xe000ed04
 80028a8:	20003d7c 	.word	0x20003d7c
 80028ac:	08002bb6 	.word	0x08002bb6

080028b0 <vReceiverTask>:
{
 80028b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
      if(uxQueueMessagesWaiting(xQueue) !=  0)
 80028b2:	4d15      	ldr	r5, [pc, #84]	; (8002908 <vReceiverTask+0x58>)
      HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);		// Start Task
 80028b4:	4c15      	ldr	r4, [pc, #84]	; (800290c <vReceiverTask+0x5c>)
 80028b6:	462e      	mov	r6, r5
 80028b8:	4620      	mov	r0, r4
 80028ba:	2201      	movs	r2, #1
 80028bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028c0:	f7fd ff88 	bl	80007d4 <HAL_GPIO_WritePin>
      if(uxQueueMessagesWaiting(xQueue) !=  0)
 80028c4:	6828      	ldr	r0, [r5, #0]
 80028c6:	f7ff fa13 	bl	8001cf0 <uxQueueMessagesWaiting>
 80028ca:	b110      	cbz	r0, 80028d2 <vReceiverTask+0x22>
        vPrintString("Queue should have been empty. \r \n");
 80028cc:	4810      	ldr	r0, [pc, #64]	; (8002910 <vReceiverTask+0x60>)
 80028ce:	f7ff ffb5 	bl	800283c <vPrintString>
      xStatus = xQueueReceive(xQueue, &lReceivedValue, xTicksToWait);
 80028d2:	2300      	movs	r3, #0
 80028d4:	2264      	movs	r2, #100	; 0x64
 80028d6:	a901      	add	r1, sp, #4
 80028d8:	6830      	ldr	r0, [r6, #0]
 80028da:	f7ff f945 	bl	8001b68 <xQueueGenericReceive>
      if(xStatus == pdPASS)
 80028de:	2801      	cmp	r0, #1
 80028e0:	d10f      	bne.n	8002902 <vReceiverTask+0x52>
    	  lReceivedValue += '0';
 80028e2:	9b01      	ldr	r3, [sp, #4]
    	  vPrintString((char *)&lReceivedValue);
 80028e4:	a801      	add	r0, sp, #4
    	  lReceivedValue += '0';
 80028e6:	3330      	adds	r3, #48	; 0x30
 80028e8:	9301      	str	r3, [sp, #4]
    	  vPrintString((char *)&lReceivedValue);
 80028ea:	f7ff ffa7 	bl	800283c <vPrintString>
    	  vPrintString((char *)"\r \n");
 80028ee:	4809      	ldr	r0, [pc, #36]	; (8002914 <vReceiverTask+0x64>)
    	  vPrintString("could not receive from the queue. \r \n");
 80028f0:	f7ff ffa4 	bl	800283c <vPrintString>
      HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);		// End of Task
 80028f4:	2200      	movs	r2, #0
 80028f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028fa:	4620      	mov	r0, r4
 80028fc:	f7fd ff6a 	bl	80007d4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);		// Start Task
 8002900:	e7da      	b.n	80028b8 <vReceiverTask+0x8>
    	  vPrintString("could not receive from the queue. \r \n");
 8002902:	4805      	ldr	r0, [pc, #20]	; (8002918 <vReceiverTask+0x68>)
 8002904:	e7f4      	b.n	80028f0 <vReceiverTask+0x40>
 8002906:	bf00      	nop
 8002908:	20003d7c 	.word	0x20003d7c
 800290c:	40021800 	.word	0x40021800
 8002910:	08002b6e 	.word	0x08002b6e
 8002914:	08002bb2 	.word	0x08002bb2
 8002918:	08002b90 	.word	0x08002b90

0800291c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800291c:	6802      	ldr	r2, [r0, #0]
 800291e:	4b03      	ldr	r3, [pc, #12]	; (800292c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002920:	429a      	cmp	r2, r3
 8002922:	d101      	bne.n	8002928 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8002924:	f7fd be06 	b.w	8000534 <HAL_IncTick>
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40001000 	.word	0x40001000

08002930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002930:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002932:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <HAL_MspInit+0x40>)
 8002934:	2200      	movs	r2, #0
 8002936:	9200      	str	r2, [sp, #0]
 8002938:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800293a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800293e:	6459      	str	r1, [r3, #68]	; 0x44
 8002940:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002942:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8002946:	9100      	str	r1, [sp, #0]
 8002948:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800294a:	9201      	str	r2, [sp, #4]
 800294c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800294e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002952:	6419      	str	r1, [r3, #64]	; 0x40
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295a:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800295c:	210f      	movs	r1, #15
 800295e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002962:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002964:	f7fd fe0a 	bl	800057c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002968:	b003      	add	sp, #12
 800296a:	f85d fb04 	ldr.w	pc, [sp], #4
 800296e:	bf00      	nop
 8002970:	40023800 	.word	0x40023800

08002974 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002974:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002976:	4601      	mov	r1, r0
{
 8002978:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800297a:	2200      	movs	r2, #0
 800297c:	2036      	movs	r0, #54	; 0x36
 800297e:	f7fd fdfd 	bl	800057c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8002982:	2036      	movs	r0, #54	; 0x36
 8002984:	f7fd fe2e 	bl	80005e4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002988:	2500      	movs	r5, #0
 800298a:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <HAL_InitTick+0x6c>)
 800298c:	9502      	str	r5, [sp, #8]
 800298e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002990:	4c14      	ldr	r4, [pc, #80]	; (80029e4 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002992:	f042 0210 	orr.w	r2, r2, #16
 8002996:	641a      	str	r2, [r3, #64]	; 0x40
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f003 0310 	and.w	r3, r3, #16
 800299e:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029a0:	a901      	add	r1, sp, #4
 80029a2:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 80029a4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029a6:	f7fe f9b1 	bl	8000d0c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80029aa:	f7fe f99f 	bl	8000cec <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80029ae:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <HAL_InitTick+0x74>)
 80029b0:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80029b2:	f240 33e7 	movw	r3, #999	; 0x3e7
 80029b6:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80029b8:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80029ba:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <HAL_InitTick+0x78>)
 80029bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80029c0:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 80029c2:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80029c4:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80029c6:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029c8:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80029ca:	f7fe fad3 	bl	8000f74 <HAL_TIM_Base_Init>
 80029ce:	b920      	cbnz	r0, 80029da <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80029d0:	4620      	mov	r0, r4
 80029d2:	f7fe f9ba 	bl	8000d4a <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80029d6:	b009      	add	sp, #36	; 0x24
 80029d8:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 80029da:	2001      	movs	r0, #1
 80029dc:	e7fb      	b.n	80029d6 <HAL_InitTick+0x62>
 80029de:	bf00      	nop
 80029e0:	40023800 	.word	0x40023800
 80029e4:	20003d80 	.word	0x20003d80
 80029e8:	40001000 	.word	0x40001000
 80029ec:	000f4240 	.word	0x000f4240

080029f0 <NMI_Handler>:
 80029f0:	4770      	bx	lr

080029f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029f2:	e7fe      	b.n	80029f2 <HardFault_Handler>

080029f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029f4:	e7fe      	b.n	80029f4 <MemManage_Handler>

080029f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029f6:	e7fe      	b.n	80029f6 <BusFault_Handler>

080029f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029f8:	e7fe      	b.n	80029f8 <UsageFault_Handler>

080029fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029fa:	4770      	bx	lr

080029fc <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80029fc:	4801      	ldr	r0, [pc, #4]	; (8002a04 <TIM6_DAC_IRQHandler+0x8>)
 80029fe:	f7fe b9b3 	b.w	8000d68 <HAL_TIM_IRQHandler>
 8002a02:	bf00      	nop
 8002a04:	20003d80 	.word	0x20003d80

08002a08 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a08:	490f      	ldr	r1, [pc, #60]	; (8002a48 <SystemInit+0x40>)
 8002a0a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002a0e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002a16:	4b0d      	ldr	r3, [pc, #52]	; (8002a4c <SystemInit+0x44>)
 8002a18:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a1a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002a1c:	f042 0201 	orr.w	r2, r2, #1
 8002a20:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002a22:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002a2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a2e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002a30:	4a07      	ldr	r2, [pc, #28]	; (8002a50 <SystemInit+0x48>)
 8002a32:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a3a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002a3c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002a42:	608b      	str	r3, [r1, #8]
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	e000ed00 	.word	0xe000ed00
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	24003010 	.word	0x24003010

08002a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a8c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002a58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a5a:	e003      	b.n	8002a64 <LoopCopyDataInit>

08002a5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002a5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a62:	3104      	adds	r1, #4

08002a64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a64:	480b      	ldr	r0, [pc, #44]	; (8002a94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002a66:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002a68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a6c:	d3f6      	bcc.n	8002a5c <CopyDataInit>
  ldr  r2, =_sbss
 8002a6e:	4a0b      	ldr	r2, [pc, #44]	; (8002a9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a70:	e002      	b.n	8002a78 <LoopFillZerobss>

08002a72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a74:	f842 3b04 	str.w	r3, [r2], #4

08002a78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a78:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a7c:	d3f9      	bcc.n	8002a72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a7e:	f7ff ffc3 	bl	8002a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a82:	f000 f811 	bl	8002aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a86:	f7ff fe0f 	bl	80026a8 <main>
  bx  lr    
 8002a8a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002a8c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002a90:	08002c00 	.word	0x08002c00
  ldr  r0, =_sdata
 8002a94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a98:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002a9c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002aa0:	20003dbc 	.word	0x20003dbc

08002aa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002aa4:	e7fe      	b.n	8002aa4 <ADC_IRQHandler>
	...

08002aa8 <__libc_init_array>:
 8002aa8:	b570      	push	{r4, r5, r6, lr}
 8002aaa:	4e0d      	ldr	r6, [pc, #52]	; (8002ae0 <__libc_init_array+0x38>)
 8002aac:	4c0d      	ldr	r4, [pc, #52]	; (8002ae4 <__libc_init_array+0x3c>)
 8002aae:	1ba4      	subs	r4, r4, r6
 8002ab0:	10a4      	asrs	r4, r4, #2
 8002ab2:	2500      	movs	r5, #0
 8002ab4:	42a5      	cmp	r5, r4
 8002ab6:	d109      	bne.n	8002acc <__libc_init_array+0x24>
 8002ab8:	4e0b      	ldr	r6, [pc, #44]	; (8002ae8 <__libc_init_array+0x40>)
 8002aba:	4c0c      	ldr	r4, [pc, #48]	; (8002aec <__libc_init_array+0x44>)
 8002abc:	f000 f82c 	bl	8002b18 <_init>
 8002ac0:	1ba4      	subs	r4, r4, r6
 8002ac2:	10a4      	asrs	r4, r4, #2
 8002ac4:	2500      	movs	r5, #0
 8002ac6:	42a5      	cmp	r5, r4
 8002ac8:	d105      	bne.n	8002ad6 <__libc_init_array+0x2e>
 8002aca:	bd70      	pop	{r4, r5, r6, pc}
 8002acc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ad0:	4798      	blx	r3
 8002ad2:	3501      	adds	r5, #1
 8002ad4:	e7ee      	b.n	8002ab4 <__libc_init_array+0xc>
 8002ad6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ada:	4798      	blx	r3
 8002adc:	3501      	adds	r5, #1
 8002ade:	e7f2      	b.n	8002ac6 <__libc_init_array+0x1e>
 8002ae0:	08002bf8 	.word	0x08002bf8
 8002ae4:	08002bf8 	.word	0x08002bf8
 8002ae8:	08002bf8 	.word	0x08002bf8
 8002aec:	08002bfc 	.word	0x08002bfc

08002af0 <memcpy>:
 8002af0:	b510      	push	{r4, lr}
 8002af2:	1e43      	subs	r3, r0, #1
 8002af4:	440a      	add	r2, r1
 8002af6:	4291      	cmp	r1, r2
 8002af8:	d100      	bne.n	8002afc <memcpy+0xc>
 8002afa:	bd10      	pop	{r4, pc}
 8002afc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b04:	e7f7      	b.n	8002af6 <memcpy+0x6>

08002b06 <memset>:
 8002b06:	4402      	add	r2, r0
 8002b08:	4603      	mov	r3, r0
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d100      	bne.n	8002b10 <memset+0xa>
 8002b0e:	4770      	bx	lr
 8002b10:	f803 1b01 	strb.w	r1, [r3], #1
 8002b14:	e7f9      	b.n	8002b0a <memset+0x4>
	...

08002b18 <_init>:
 8002b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1a:	bf00      	nop
 8002b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b1e:	bc08      	pop	{r3}
 8002b20:	469e      	mov	lr, r3
 8002b22:	4770      	bx	lr

08002b24 <_fini>:
 8002b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b26:	bf00      	nop
 8002b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b2a:	bc08      	pop	{r3}
 8002b2c:	469e      	mov	lr, r3
 8002b2e:	4770      	bx	lr
