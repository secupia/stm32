
FreeRTOS_Example12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b94  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002d44  08002d44  00012d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002dbc  08002dbc  00012dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002dc4  08002dc4  00012dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002dc8  08002dc8  00012dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00003df0  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20003dfc  20003dfc  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001be6a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003848  00000000  00000000  0003bea6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00009408  00000000  00000000  0003f6ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000da8  00000000  00000000  00048af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001188  00000000  00000000  000498a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000074cb  00000000  00000000  0004aa28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000552f  00000000  00000000  00051ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00057422  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000276c  00000000  00000000  000574a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002d2c 	.word	0x08002d2c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	08002d2c 	.word	0x08002d2c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b97a 	b.w	80004fc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	468c      	mov	ip, r1
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	9e08      	ldr	r6, [sp, #32]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d151      	bne.n	80002d4 <__udivmoddi4+0xb4>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d96d      	bls.n	8000312 <__udivmoddi4+0xf2>
 8000236:	fab2 fe82 	clz	lr, r2
 800023a:	f1be 0f00 	cmp.w	lr, #0
 800023e:	d00b      	beq.n	8000258 <__udivmoddi4+0x38>
 8000240:	f1ce 0c20 	rsb	ip, lr, #32
 8000244:	fa01 f50e 	lsl.w	r5, r1, lr
 8000248:	fa20 fc0c 	lsr.w	ip, r0, ip
 800024c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000250:	ea4c 0c05 	orr.w	ip, ip, r5
 8000254:	fa00 f40e 	lsl.w	r4, r0, lr
 8000258:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800025c:	0c25      	lsrs	r5, r4, #16
 800025e:	fbbc f8fa 	udiv	r8, ip, sl
 8000262:	fa1f f987 	uxth.w	r9, r7
 8000266:	fb0a cc18 	mls	ip, sl, r8, ip
 800026a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026e:	fb08 f309 	mul.w	r3, r8, r9
 8000272:	42ab      	cmp	r3, r5
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x6c>
 8000276:	19ed      	adds	r5, r5, r7
 8000278:	f108 32ff 	add.w	r2, r8, #4294967295
 800027c:	f080 8123 	bcs.w	80004c6 <__udivmoddi4+0x2a6>
 8000280:	42ab      	cmp	r3, r5
 8000282:	f240 8120 	bls.w	80004c6 <__udivmoddi4+0x2a6>
 8000286:	f1a8 0802 	sub.w	r8, r8, #2
 800028a:	443d      	add	r5, r7
 800028c:	1aed      	subs	r5, r5, r3
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb5 f0fa 	udiv	r0, r5, sl
 8000294:	fb0a 5510 	mls	r5, sl, r0, r5
 8000298:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800029c:	fb00 f909 	mul.w	r9, r0, r9
 80002a0:	45a1      	cmp	r9, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x98>
 80002a4:	19e4      	adds	r4, r4, r7
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 810a 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80002ae:	45a1      	cmp	r9, r4
 80002b0:	f240 8107 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	eba4 0409 	sub.w	r4, r4, r9
 80002bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002c0:	2100      	movs	r1, #0
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d061      	beq.n	800038a <__udivmoddi4+0x16a>
 80002c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ca:	2300      	movs	r3, #0
 80002cc:	6034      	str	r4, [r6, #0]
 80002ce:	6073      	str	r3, [r6, #4]
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xc8>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d054      	beq.n	8000386 <__udivmoddi4+0x166>
 80002dc:	2100      	movs	r1, #0
 80002de:	e886 0021 	stmia.w	r6, {r0, r5}
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	f040 808e 	bne.w	800040e <__udivmoddi4+0x1ee>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xdc>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2d0>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	46ac      	mov	ip, r5
 8000306:	2e00      	cmp	r6, #0
 8000308:	d03f      	beq.n	800038a <__udivmoddi4+0x16a>
 800030a:	e886 1010 	stmia.w	r6, {r4, ip}
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	b912      	cbnz	r2, 800031a <__udivmoddi4+0xfa>
 8000314:	2701      	movs	r7, #1
 8000316:	fbb7 f7f2 	udiv	r7, r7, r2
 800031a:	fab7 fe87 	clz	lr, r7
 800031e:	f1be 0f00 	cmp.w	lr, #0
 8000322:	d134      	bne.n	800038e <__udivmoddi4+0x16e>
 8000324:	1beb      	subs	r3, r5, r7
 8000326:	0c3a      	lsrs	r2, r7, #16
 8000328:	fa1f fc87 	uxth.w	ip, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000332:	0c25      	lsrs	r5, r4, #16
 8000334:	fb02 3318 	mls	r3, r2, r8, r3
 8000338:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800033c:	fb0c f308 	mul.w	r3, ip, r8
 8000340:	42ab      	cmp	r3, r5
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x134>
 8000344:	19ed      	adds	r5, r5, r7
 8000346:	f108 30ff 	add.w	r0, r8, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x132>
 800034c:	42ab      	cmp	r3, r5
 800034e:	f200 80d1 	bhi.w	80004f4 <__udivmoddi4+0x2d4>
 8000352:	4680      	mov	r8, r0
 8000354:	1aed      	subs	r5, r5, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb5 f0f2 	udiv	r0, r5, r2
 800035c:	fb02 5510 	mls	r5, r2, r0, r5
 8000360:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000364:	fb0c fc00 	mul.w	ip, ip, r0
 8000368:	45a4      	cmp	ip, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x15c>
 800036c:	19e4      	adds	r4, r4, r7
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x15a>
 8000374:	45a4      	cmp	ip, r4
 8000376:	f200 80b8 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 040c 	sub.w	r4, r4, ip
 8000380:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000384:	e79d      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000386:	4631      	mov	r1, r6
 8000388:	4630      	mov	r0, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	f1ce 0420 	rsb	r4, lr, #32
 8000392:	fa05 f30e 	lsl.w	r3, r5, lr
 8000396:	fa07 f70e 	lsl.w	r7, r7, lr
 800039a:	fa20 f804 	lsr.w	r8, r0, r4
 800039e:	0c3a      	lsrs	r2, r7, #16
 80003a0:	fa25 f404 	lsr.w	r4, r5, r4
 80003a4:	ea48 0803 	orr.w	r8, r8, r3
 80003a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003b0:	fb02 4411 	mls	r4, r2, r1, r4
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003bc:	fb01 f30c 	mul.w	r3, r1, ip
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x1bc>
 80003c8:	19ed      	adds	r5, r5, r7
 80003ca:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ce:	f080 808a 	bcs.w	80004e6 <__udivmoddi4+0x2c6>
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	f240 8087 	bls.w	80004e6 <__udivmoddi4+0x2c6>
 80003d8:	3902      	subs	r1, #2
 80003da:	443d      	add	r5, r7
 80003dc:	1aeb      	subs	r3, r5, r3
 80003de:	fa1f f588 	uxth.w	r5, r8
 80003e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ee:	fb00 f30c 	mul.w	r3, r0, ip
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1e6>
 80003f6:	19ed      	adds	r5, r5, r7
 80003f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fc:	d26f      	bcs.n	80004de <__udivmoddi4+0x2be>
 80003fe:	42ab      	cmp	r3, r5
 8000400:	d96d      	bls.n	80004de <__udivmoddi4+0x2be>
 8000402:	3802      	subs	r0, #2
 8000404:	443d      	add	r5, r7
 8000406:	1aeb      	subs	r3, r5, r3
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	e78f      	b.n	800032e <__udivmoddi4+0x10e>
 800040e:	f1c1 0720 	rsb	r7, r1, #32
 8000412:	fa22 f807 	lsr.w	r8, r2, r7
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 f401 	lsl.w	r4, r5, r1
 800041c:	ea48 0303 	orr.w	r3, r8, r3
 8000420:	fa20 fe07 	lsr.w	lr, r0, r7
 8000424:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000428:	40fd      	lsrs	r5, r7
 800042a:	ea4e 0e04 	orr.w	lr, lr, r4
 800042e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000432:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000436:	fb0c 5519 	mls	r5, ip, r9, r5
 800043a:	fa1f f883 	uxth.w	r8, r3
 800043e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000442:	fb09 f408 	mul.w	r4, r9, r8
 8000446:	42ac      	cmp	r4, r5
 8000448:	fa02 f201 	lsl.w	r2, r2, r1
 800044c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x244>
 8000452:	18ed      	adds	r5, r5, r3
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295
 8000458:	d243      	bcs.n	80004e2 <__udivmoddi4+0x2c2>
 800045a:	42ac      	cmp	r4, r5
 800045c:	d941      	bls.n	80004e2 <__udivmoddi4+0x2c2>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	441d      	add	r5, r3
 8000464:	1b2d      	subs	r5, r5, r4
 8000466:	fa1f fe8e 	uxth.w	lr, lr
 800046a:	fbb5 f0fc 	udiv	r0, r5, ip
 800046e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000472:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45a0      	cmp	r8, r4
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x26e>
 800047e:	18e4      	adds	r4, r4, r3
 8000480:	f100 35ff 	add.w	r5, r0, #4294967295
 8000484:	d229      	bcs.n	80004da <__udivmoddi4+0x2ba>
 8000486:	45a0      	cmp	r8, r4
 8000488:	d927      	bls.n	80004da <__udivmoddi4+0x2ba>
 800048a:	3802      	subs	r0, #2
 800048c:	441c      	add	r4, r3
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba4 0408 	sub.w	r4, r4, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454c      	cmp	r4, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	464d      	mov	r5, r9
 80004a0:	d315      	bcc.n	80004ce <__udivmoddi4+0x2ae>
 80004a2:	d012      	beq.n	80004ca <__udivmoddi4+0x2aa>
 80004a4:	b156      	cbz	r6, 80004bc <__udivmoddi4+0x29c>
 80004a6:	ebba 030e 	subs.w	r3, sl, lr
 80004aa:	eb64 0405 	sbc.w	r4, r4, r5
 80004ae:	fa04 f707 	lsl.w	r7, r4, r7
 80004b2:	40cb      	lsrs	r3, r1
 80004b4:	431f      	orrs	r7, r3
 80004b6:	40cc      	lsrs	r4, r1
 80004b8:	6037      	str	r7, [r6, #0]
 80004ba:	6074      	str	r4, [r6, #4]
 80004bc:	2100      	movs	r1, #0
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	4618      	mov	r0, r3
 80004c4:	e6f8      	b.n	80002b8 <__udivmoddi4+0x98>
 80004c6:	4690      	mov	r8, r2
 80004c8:	e6e0      	b.n	800028c <__udivmoddi4+0x6c>
 80004ca:	45c2      	cmp	sl, r8
 80004cc:	d2ea      	bcs.n	80004a4 <__udivmoddi4+0x284>
 80004ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d2:	eb69 0503 	sbc.w	r5, r9, r3
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7e4      	b.n	80004a4 <__udivmoddi4+0x284>
 80004da:	4628      	mov	r0, r5
 80004dc:	e7d7      	b.n	800048e <__udivmoddi4+0x26e>
 80004de:	4640      	mov	r0, r8
 80004e0:	e791      	b.n	8000406 <__udivmoddi4+0x1e6>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e7be      	b.n	8000464 <__udivmoddi4+0x244>
 80004e6:	4601      	mov	r1, r0
 80004e8:	e778      	b.n	80003dc <__udivmoddi4+0x1bc>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	e745      	b.n	800037c <__udivmoddi4+0x15c>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xe6>
 80004f4:	f1a8 0802 	sub.w	r8, r8, #2
 80004f8:	443d      	add	r5, r7
 80004fa:	e72b      	b.n	8000354 <__udivmoddi4+0x134>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000500:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <HAL_Init+0x30>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800050a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000512:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800051a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051c:	2003      	movs	r0, #3
 800051e:	f000 f81b 	bl	8000558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000522:	2000      	movs	r0, #0
 8000524:	f002 fb2c 	bl	8002b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000528:	f002 fad0 	bl	8002acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800052c:	2000      	movs	r0, #0
 800052e:	bd08      	pop	{r3, pc}
 8000530:	40023c00 	.word	0x40023c00

08000534 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000534:	4a03      	ldr	r2, [pc, #12]	; (8000544 <HAL_IncTick+0x10>)
 8000536:	4b04      	ldr	r3, [pc, #16]	; (8000548 <HAL_IncTick+0x14>)
 8000538:	6811      	ldr	r1, [r2, #0]
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	440b      	add	r3, r1
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20003d78 	.word	0x20003d78
 8000548:	20000000 	.word	0x20000000

0800054c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800054c:	4b01      	ldr	r3, [pc, #4]	; (8000554 <HAL_GetTick+0x8>)
 800054e:	6818      	ldr	r0, [r3, #0]
}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20003d78 	.word	0x20003d78

08000558 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000558:	4a07      	ldr	r2, [pc, #28]	; (8000578 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800055a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800055c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000560:	041b      	lsls	r3, r3, #16
 8000562:	0c1b      	lsrs	r3, r3, #16
 8000564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000568:	0200      	lsls	r0, r0, #8
 800056a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000572:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000574:	60d3      	str	r3, [r2, #12]
 8000576:	4770      	bx	lr
 8000578:	e000ed00 	.word	0xe000ed00

0800057c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800057c:	4b17      	ldr	r3, [pc, #92]	; (80005dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	68dc      	ldr	r4, [r3, #12]
 8000582:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000586:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800058a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800058c:	2b04      	cmp	r3, #4
 800058e:	bf28      	it	cs
 8000590:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000592:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000594:	f04f 0501 	mov.w	r5, #1
 8000598:	fa05 f303 	lsl.w	r3, r5, r3
 800059c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a0:	bf8c      	ite	hi
 80005a2:	3c03      	subhi	r4, #3
 80005a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a6:	4019      	ands	r1, r3
 80005a8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005aa:	fa05 f404 	lsl.w	r4, r5, r4
 80005ae:	3c01      	subs	r4, #1
 80005b0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b4:	ea42 0201 	orr.w	r2, r2, r1
 80005b8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005bc:	bfaf      	iteee	ge
 80005be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c2:	f000 000f 	andlt.w	r0, r0, #15
 80005c6:	4b06      	ldrlt	r3, [pc, #24]	; (80005e0 <HAL_NVIC_SetPriority+0x64>)
 80005c8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ca:	bfa5      	ittet	ge
 80005cc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005d0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	bf00      	nop
 80005dc:	e000ed00 	.word	0xe000ed00
 80005e0:	e000ed14 	.word	0xe000ed14

080005e4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005e4:	0942      	lsrs	r2, r0, #5
 80005e6:	2301      	movs	r3, #1
 80005e8:	f000 001f 	and.w	r0, r0, #31
 80005ec:	fa03 f000 	lsl.w	r0, r3, r0
 80005f0:	4b01      	ldr	r3, [pc, #4]	; (80005f8 <HAL_NVIC_EnableIRQ+0x14>)
 80005f2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100

080005fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000600:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000602:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000604:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 80007cc <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000608:	4a6e      	ldr	r2, [pc, #440]	; (80007c4 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800060a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80007d0 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800060e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000610:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000612:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000616:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000618:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800061c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000620:	45b6      	cmp	lr, r6
 8000622:	f040 80b6 	bne.w	8000792 <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000626:	684c      	ldr	r4, [r1, #4]
 8000628:	f024 0710 	bic.w	r7, r4, #16
 800062c:	2f02      	cmp	r7, #2
 800062e:	d116      	bne.n	800065e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000630:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000634:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000638:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800063c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000640:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000644:	f04f 0c0f 	mov.w	ip, #15
 8000648:	fa0c fc0b 	lsl.w	ip, ip, fp
 800064c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000650:	690d      	ldr	r5, [r1, #16]
 8000652:	fa05 f50b 	lsl.w	r5, r5, fp
 8000656:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800065a:	f8ca 5020 	str.w	r5, [sl, #32]
 800065e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000662:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000664:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000668:	fa05 f50a 	lsl.w	r5, r5, sl
 800066c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800066e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000672:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000676:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800067a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800067c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000680:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000682:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000686:	d811      	bhi.n	80006ac <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000688:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800068a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800068e:	68cf      	ldr	r7, [r1, #12]
 8000690:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000694:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000698:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800069a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800069c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006a0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80006a4:	409f      	lsls	r7, r3
 80006a6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80006aa:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80006ac:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006ae:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006b0:	688f      	ldr	r7, [r1, #8]
 80006b2:	fa07 f70a 	lsl.w	r7, r7, sl
 80006b6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80006b8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006ba:	00e5      	lsls	r5, r4, #3
 80006bc:	d569      	bpl.n	8000792 <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006be:	f04f 0b00 	mov.w	fp, #0
 80006c2:	f8cd b00c 	str.w	fp, [sp, #12]
 80006c6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006ca:	4d3f      	ldr	r5, [pc, #252]	; (80007c8 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006cc:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80006d0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80006d4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80006d8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80006dc:	9703      	str	r7, [sp, #12]
 80006de:	9f03      	ldr	r7, [sp, #12]
 80006e0:	f023 0703 	bic.w	r7, r3, #3
 80006e4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80006e8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006ec:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80006f0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006f4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80006f8:	f04f 0e0f 	mov.w	lr, #15
 80006fc:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000700:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000702:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000706:	d04b      	beq.n	80007a0 <HAL_GPIO_Init+0x1a4>
 8000708:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800070c:	42a8      	cmp	r0, r5
 800070e:	d049      	beq.n	80007a4 <HAL_GPIO_Init+0x1a8>
 8000710:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000714:	42a8      	cmp	r0, r5
 8000716:	d047      	beq.n	80007a8 <HAL_GPIO_Init+0x1ac>
 8000718:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800071c:	42a8      	cmp	r0, r5
 800071e:	d045      	beq.n	80007ac <HAL_GPIO_Init+0x1b0>
 8000720:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000724:	42a8      	cmp	r0, r5
 8000726:	d043      	beq.n	80007b0 <HAL_GPIO_Init+0x1b4>
 8000728:	4548      	cmp	r0, r9
 800072a:	d043      	beq.n	80007b4 <HAL_GPIO_Init+0x1b8>
 800072c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000730:	42a8      	cmp	r0, r5
 8000732:	d041      	beq.n	80007b8 <HAL_GPIO_Init+0x1bc>
 8000734:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000738:	42a8      	cmp	r0, r5
 800073a:	d03f      	beq.n	80007bc <HAL_GPIO_Init+0x1c0>
 800073c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000740:	42a8      	cmp	r0, r5
 8000742:	d03d      	beq.n	80007c0 <HAL_GPIO_Init+0x1c4>
 8000744:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000748:	42a8      	cmp	r0, r5
 800074a:	bf14      	ite	ne
 800074c:	250a      	movne	r5, #10
 800074e:	2509      	moveq	r5, #9
 8000750:	fa05 f50c 	lsl.w	r5, r5, ip
 8000754:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000758:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800075a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800075c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800075e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000762:	bf0c      	ite	eq
 8000764:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000766:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000768:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800076a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800076c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000770:	bf0c      	ite	eq
 8000772:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000774:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000776:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000778:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800077a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800077e:	bf0c      	ite	eq
 8000780:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000782:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000784:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000786:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000788:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800078a:	bf54      	ite	pl
 800078c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800078e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000790:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000792:	3301      	adds	r3, #1
 8000794:	2b10      	cmp	r3, #16
 8000796:	f47f af3c 	bne.w	8000612 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800079a:	b005      	add	sp, #20
 800079c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007a0:	465d      	mov	r5, fp
 80007a2:	e7d5      	b.n	8000750 <HAL_GPIO_Init+0x154>
 80007a4:	2501      	movs	r5, #1
 80007a6:	e7d3      	b.n	8000750 <HAL_GPIO_Init+0x154>
 80007a8:	2502      	movs	r5, #2
 80007aa:	e7d1      	b.n	8000750 <HAL_GPIO_Init+0x154>
 80007ac:	2503      	movs	r5, #3
 80007ae:	e7cf      	b.n	8000750 <HAL_GPIO_Init+0x154>
 80007b0:	2504      	movs	r5, #4
 80007b2:	e7cd      	b.n	8000750 <HAL_GPIO_Init+0x154>
 80007b4:	2505      	movs	r5, #5
 80007b6:	e7cb      	b.n	8000750 <HAL_GPIO_Init+0x154>
 80007b8:	2506      	movs	r5, #6
 80007ba:	e7c9      	b.n	8000750 <HAL_GPIO_Init+0x154>
 80007bc:	2507      	movs	r5, #7
 80007be:	e7c7      	b.n	8000750 <HAL_GPIO_Init+0x154>
 80007c0:	2508      	movs	r5, #8
 80007c2:	e7c5      	b.n	8000750 <HAL_GPIO_Init+0x154>
 80007c4:	40013c00 	.word	0x40013c00
 80007c8:	40020000 	.word	0x40020000
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40021400 	.word	0x40021400

080007d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007d4:	b10a      	cbz	r2, 80007da <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007d6:	6181      	str	r1, [r0, #24]
 80007d8:	4770      	bx	lr
 80007da:	0409      	lsls	r1, r1, #16
 80007dc:	e7fb      	b.n	80007d6 <HAL_GPIO_WritePin+0x2>

080007de <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80007de:	6943      	ldr	r3, [r0, #20]
 80007e0:	4059      	eors	r1, r3
 80007e2:	6141      	str	r1, [r0, #20]
 80007e4:	4770      	bx	lr
	...

080007e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80007e8:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80007ea:	4b04      	ldr	r3, [pc, #16]	; (80007fc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80007ec:	6959      	ldr	r1, [r3, #20]
 80007ee:	4201      	tst	r1, r0
 80007f0:	d002      	beq.n	80007f8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80007f2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80007f4:	f002 f856 	bl	80028a4 <HAL_GPIO_EXTI_Callback>
 80007f8:	bd08      	pop	{r3, pc}
 80007fa:	bf00      	nop
 80007fc:	40013c00 	.word	0x40013c00

08000800 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000800:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	9301      	str	r3, [sp, #4]
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000808:	4c18      	ldr	r4, [pc, #96]	; (800086c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800080c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000810:	641a      	str	r2, [r3, #64]	; 0x40
 8000812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000818:	9301      	str	r3, [sp, #4]
 800081a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <HAL_PWREx_EnableOverDrive+0x70>)
 800081e:	2201      	movs	r2, #1
 8000820:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000822:	f7ff fe93 	bl	800054c <HAL_GetTick>
 8000826:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000828:	6863      	ldr	r3, [r4, #4]
 800082a:	03da      	lsls	r2, r3, #15
 800082c:	d50b      	bpl.n	8000846 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000830:	4c0e      	ldr	r4, [pc, #56]	; (800086c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000832:	2201      	movs	r2, #1
 8000834:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000836:	f7ff fe89 	bl	800054c <HAL_GetTick>
 800083a:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800083c:	6863      	ldr	r3, [r4, #4]
 800083e:	039b      	lsls	r3, r3, #14
 8000840:	d50a      	bpl.n	8000858 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000842:	2000      	movs	r0, #0
 8000844:	e006      	b.n	8000854 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000846:	f7ff fe81 	bl	800054c <HAL_GetTick>
 800084a:	1b40      	subs	r0, r0, r5
 800084c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000850:	d9ea      	bls.n	8000828 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8000852:	2003      	movs	r0, #3
}
 8000854:	b003      	add	sp, #12
 8000856:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000858:	f7ff fe78 	bl	800054c <HAL_GetTick>
 800085c:	1b40      	subs	r0, r0, r5
 800085e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000862:	d9eb      	bls.n	800083c <HAL_PWREx_EnableOverDrive+0x3c>
 8000864:	e7f5      	b.n	8000852 <HAL_PWREx_EnableOverDrive+0x52>
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800
 800086c:	40007000 	.word	0x40007000
 8000870:	420e0040 	.word	0x420e0040
 8000874:	420e0044 	.word	0x420e0044

08000878 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000878:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800087c:	4604      	mov	r4, r0
 800087e:	b918      	cbnz	r0, 8000888 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000880:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000882:	b002      	add	sp, #8
 8000884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000888:	6803      	ldr	r3, [r0, #0]
 800088a:	07dd      	lsls	r5, r3, #31
 800088c:	d410      	bmi.n	80008b0 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800088e:	6823      	ldr	r3, [r4, #0]
 8000890:	0798      	lsls	r0, r3, #30
 8000892:	d458      	bmi.n	8000946 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000894:	6823      	ldr	r3, [r4, #0]
 8000896:	071a      	lsls	r2, r3, #28
 8000898:	f100 809a 	bmi.w	80009d0 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800089c:	6823      	ldr	r3, [r4, #0]
 800089e:	075b      	lsls	r3, r3, #29
 80008a0:	f100 80b8 	bmi.w	8000a14 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008a4:	69a2      	ldr	r2, [r4, #24]
 80008a6:	2a00      	cmp	r2, #0
 80008a8:	f040 8119 	bne.w	8000ade <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80008ac:	2000      	movs	r0, #0
 80008ae:	e7e8      	b.n	8000882 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008b0:	4ba6      	ldr	r3, [pc, #664]	; (8000b4c <HAL_RCC_OscConfig+0x2d4>)
 80008b2:	689a      	ldr	r2, [r3, #8]
 80008b4:	f002 020c 	and.w	r2, r2, #12
 80008b8:	2a04      	cmp	r2, #4
 80008ba:	d007      	beq.n	80008cc <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008bc:	689a      	ldr	r2, [r3, #8]
 80008be:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008c2:	2a08      	cmp	r2, #8
 80008c4:	d10a      	bne.n	80008dc <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	0259      	lsls	r1, r3, #9
 80008ca:	d507      	bpl.n	80008dc <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008cc:	4b9f      	ldr	r3, [pc, #636]	; (8000b4c <HAL_RCC_OscConfig+0x2d4>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	039a      	lsls	r2, r3, #14
 80008d2:	d5dc      	bpl.n	800088e <HAL_RCC_OscConfig+0x16>
 80008d4:	6863      	ldr	r3, [r4, #4]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d1d9      	bne.n	800088e <HAL_RCC_OscConfig+0x16>
 80008da:	e7d1      	b.n	8000880 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008dc:	6863      	ldr	r3, [r4, #4]
 80008de:	4d9b      	ldr	r5, [pc, #620]	; (8000b4c <HAL_RCC_OscConfig+0x2d4>)
 80008e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008e4:	d111      	bne.n	800090a <HAL_RCC_OscConfig+0x92>
 80008e6:	682b      	ldr	r3, [r5, #0]
 80008e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008ec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008ee:	f7ff fe2d 	bl	800054c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008f2:	4d96      	ldr	r5, [pc, #600]	; (8000b4c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80008f4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008f6:	682b      	ldr	r3, [r5, #0]
 80008f8:	039b      	lsls	r3, r3, #14
 80008fa:	d4c8      	bmi.n	800088e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008fc:	f7ff fe26 	bl	800054c <HAL_GetTick>
 8000900:	1b80      	subs	r0, r0, r6
 8000902:	2864      	cmp	r0, #100	; 0x64
 8000904:	d9f7      	bls.n	80008f6 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000906:	2003      	movs	r0, #3
 8000908:	e7bb      	b.n	8000882 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800090a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800090e:	d104      	bne.n	800091a <HAL_RCC_OscConfig+0xa2>
 8000910:	682b      	ldr	r3, [r5, #0]
 8000912:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000916:	602b      	str	r3, [r5, #0]
 8000918:	e7e5      	b.n	80008e6 <HAL_RCC_OscConfig+0x6e>
 800091a:	682a      	ldr	r2, [r5, #0]
 800091c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000920:	602a      	str	r2, [r5, #0]
 8000922:	682a      	ldr	r2, [r5, #0]
 8000924:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000928:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800092a:	2b00      	cmp	r3, #0
 800092c:	d1df      	bne.n	80008ee <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800092e:	f7ff fe0d 	bl	800054c <HAL_GetTick>
 8000932:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000934:	682b      	ldr	r3, [r5, #0]
 8000936:	039f      	lsls	r7, r3, #14
 8000938:	d5a9      	bpl.n	800088e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800093a:	f7ff fe07 	bl	800054c <HAL_GetTick>
 800093e:	1b80      	subs	r0, r0, r6
 8000940:	2864      	cmp	r0, #100	; 0x64
 8000942:	d9f7      	bls.n	8000934 <HAL_RCC_OscConfig+0xbc>
 8000944:	e7df      	b.n	8000906 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000946:	4b81      	ldr	r3, [pc, #516]	; (8000b4c <HAL_RCC_OscConfig+0x2d4>)
 8000948:	689a      	ldr	r2, [r3, #8]
 800094a:	f012 0f0c 	tst.w	r2, #12
 800094e:	d007      	beq.n	8000960 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000950:	689a      	ldr	r2, [r3, #8]
 8000952:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000956:	2a08      	cmp	r2, #8
 8000958:	d111      	bne.n	800097e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	025e      	lsls	r6, r3, #9
 800095e:	d40e      	bmi.n	800097e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000960:	4b7a      	ldr	r3, [pc, #488]	; (8000b4c <HAL_RCC_OscConfig+0x2d4>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	0795      	lsls	r5, r2, #30
 8000966:	d502      	bpl.n	800096e <HAL_RCC_OscConfig+0xf6>
 8000968:	68e2      	ldr	r2, [r4, #12]
 800096a:	2a01      	cmp	r2, #1
 800096c:	d188      	bne.n	8000880 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	6921      	ldr	r1, [r4, #16]
 8000972:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000976:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800097a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800097c:	e78a      	b.n	8000894 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800097e:	68e2      	ldr	r2, [r4, #12]
 8000980:	4b73      	ldr	r3, [pc, #460]	; (8000b50 <HAL_RCC_OscConfig+0x2d8>)
 8000982:	b1b2      	cbz	r2, 80009b2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000984:	2201      	movs	r2, #1
 8000986:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000988:	f7ff fde0 	bl	800054c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800098c:	4d6f      	ldr	r5, [pc, #444]	; (8000b4c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800098e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000990:	682b      	ldr	r3, [r5, #0]
 8000992:	0798      	lsls	r0, r3, #30
 8000994:	d507      	bpl.n	80009a6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000996:	682b      	ldr	r3, [r5, #0]
 8000998:	6922      	ldr	r2, [r4, #16]
 800099a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800099e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80009a2:	602b      	str	r3, [r5, #0]
 80009a4:	e776      	b.n	8000894 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009a6:	f7ff fdd1 	bl	800054c <HAL_GetTick>
 80009aa:	1b80      	subs	r0, r0, r6
 80009ac:	2802      	cmp	r0, #2
 80009ae:	d9ef      	bls.n	8000990 <HAL_RCC_OscConfig+0x118>
 80009b0:	e7a9      	b.n	8000906 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80009b2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009b4:	f7ff fdca 	bl	800054c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009b8:	4d64      	ldr	r5, [pc, #400]	; (8000b4c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80009ba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009bc:	682b      	ldr	r3, [r5, #0]
 80009be:	0799      	lsls	r1, r3, #30
 80009c0:	f57f af68 	bpl.w	8000894 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009c4:	f7ff fdc2 	bl	800054c <HAL_GetTick>
 80009c8:	1b80      	subs	r0, r0, r6
 80009ca:	2802      	cmp	r0, #2
 80009cc:	d9f6      	bls.n	80009bc <HAL_RCC_OscConfig+0x144>
 80009ce:	e79a      	b.n	8000906 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009d0:	6962      	ldr	r2, [r4, #20]
 80009d2:	4b60      	ldr	r3, [pc, #384]	; (8000b54 <HAL_RCC_OscConfig+0x2dc>)
 80009d4:	b17a      	cbz	r2, 80009f6 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80009d6:	2201      	movs	r2, #1
 80009d8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009da:	f7ff fdb7 	bl	800054c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009de:	4d5b      	ldr	r5, [pc, #364]	; (8000b4c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80009e0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009e2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009e4:	079f      	lsls	r7, r3, #30
 80009e6:	f53f af59 	bmi.w	800089c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009ea:	f7ff fdaf 	bl	800054c <HAL_GetTick>
 80009ee:	1b80      	subs	r0, r0, r6
 80009f0:	2802      	cmp	r0, #2
 80009f2:	d9f6      	bls.n	80009e2 <HAL_RCC_OscConfig+0x16a>
 80009f4:	e787      	b.n	8000906 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80009f6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009f8:	f7ff fda8 	bl	800054c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009fc:	4d53      	ldr	r5, [pc, #332]	; (8000b4c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80009fe:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a00:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a02:	0798      	lsls	r0, r3, #30
 8000a04:	f57f af4a 	bpl.w	800089c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a08:	f7ff fda0 	bl	800054c <HAL_GetTick>
 8000a0c:	1b80      	subs	r0, r0, r6
 8000a0e:	2802      	cmp	r0, #2
 8000a10:	d9f6      	bls.n	8000a00 <HAL_RCC_OscConfig+0x188>
 8000a12:	e778      	b.n	8000906 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a14:	4b4d      	ldr	r3, [pc, #308]	; (8000b4c <HAL_RCC_OscConfig+0x2d4>)
 8000a16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a18:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000a1c:	d128      	bne.n	8000a70 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	9201      	str	r2, [sp, #4]
 8000a20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a22:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a26:	641a      	str	r2, [r3, #64]	; 0x40
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2e:	9301      	str	r3, [sp, #4]
 8000a30:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a32:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a34:	4d48      	ldr	r5, [pc, #288]	; (8000b58 <HAL_RCC_OscConfig+0x2e0>)
 8000a36:	682b      	ldr	r3, [r5, #0]
 8000a38:	05d9      	lsls	r1, r3, #23
 8000a3a:	d51b      	bpl.n	8000a74 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a3c:	68a3      	ldr	r3, [r4, #8]
 8000a3e:	4d43      	ldr	r5, [pc, #268]	; (8000b4c <HAL_RCC_OscConfig+0x2d4>)
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d127      	bne.n	8000a94 <HAL_RCC_OscConfig+0x21c>
 8000a44:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000a4c:	f7ff fd7e 	bl	800054c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a50:	4d3e      	ldr	r5, [pc, #248]	; (8000b4c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a52:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a54:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a58:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a5a:	079b      	lsls	r3, r3, #30
 8000a5c:	d539      	bpl.n	8000ad2 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000a5e:	2e00      	cmp	r6, #0
 8000a60:	f43f af20 	beq.w	80008a4 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a64:	4a39      	ldr	r2, [pc, #228]	; (8000b4c <HAL_RCC_OscConfig+0x2d4>)
 8000a66:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6e:	e719      	b.n	80008a4 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000a70:	2600      	movs	r6, #0
 8000a72:	e7df      	b.n	8000a34 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a74:	682b      	ldr	r3, [r5, #0]
 8000a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a7a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000a7c:	f7ff fd66 	bl	800054c <HAL_GetTick>
 8000a80:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a82:	682b      	ldr	r3, [r5, #0]
 8000a84:	05da      	lsls	r2, r3, #23
 8000a86:	d4d9      	bmi.n	8000a3c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a88:	f7ff fd60 	bl	800054c <HAL_GetTick>
 8000a8c:	1bc0      	subs	r0, r0, r7
 8000a8e:	2802      	cmp	r0, #2
 8000a90:	d9f7      	bls.n	8000a82 <HAL_RCC_OscConfig+0x20a>
 8000a92:	e738      	b.n	8000906 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a94:	2b05      	cmp	r3, #5
 8000a96:	d104      	bne.n	8000aa2 <HAL_RCC_OscConfig+0x22a>
 8000a98:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a9a:	f043 0304 	orr.w	r3, r3, #4
 8000a9e:	672b      	str	r3, [r5, #112]	; 0x70
 8000aa0:	e7d0      	b.n	8000a44 <HAL_RCC_OscConfig+0x1cc>
 8000aa2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000aa4:	f022 0201 	bic.w	r2, r2, #1
 8000aa8:	672a      	str	r2, [r5, #112]	; 0x70
 8000aaa:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000aac:	f022 0204 	bic.w	r2, r2, #4
 8000ab0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d1ca      	bne.n	8000a4c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000ab6:	f7ff fd49 	bl	800054c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aba:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000abe:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ac0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ac2:	0798      	lsls	r0, r3, #30
 8000ac4:	d5cb      	bpl.n	8000a5e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ac6:	f7ff fd41 	bl	800054c <HAL_GetTick>
 8000aca:	1bc0      	subs	r0, r0, r7
 8000acc:	4540      	cmp	r0, r8
 8000ace:	d9f7      	bls.n	8000ac0 <HAL_RCC_OscConfig+0x248>
 8000ad0:	e719      	b.n	8000906 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ad2:	f7ff fd3b 	bl	800054c <HAL_GetTick>
 8000ad6:	1bc0      	subs	r0, r0, r7
 8000ad8:	4540      	cmp	r0, r8
 8000ada:	d9bd      	bls.n	8000a58 <HAL_RCC_OscConfig+0x1e0>
 8000adc:	e713      	b.n	8000906 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ade:	4d1b      	ldr	r5, [pc, #108]	; (8000b4c <HAL_RCC_OscConfig+0x2d4>)
 8000ae0:	68ab      	ldr	r3, [r5, #8]
 8000ae2:	f003 030c 	and.w	r3, r3, #12
 8000ae6:	2b08      	cmp	r3, #8
 8000ae8:	f43f aeca 	beq.w	8000880 <HAL_RCC_OscConfig+0x8>
 8000aec:	4e1b      	ldr	r6, [pc, #108]	; (8000b5c <HAL_RCC_OscConfig+0x2e4>)
 8000aee:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000af0:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000af2:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000af4:	d134      	bne.n	8000b60 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000af6:	f7ff fd29 	bl	800054c <HAL_GetTick>
 8000afa:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000afc:	682b      	ldr	r3, [r5, #0]
 8000afe:	0199      	lsls	r1, r3, #6
 8000b00:	d41e      	bmi.n	8000b40 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b02:	6a22      	ldr	r2, [r4, #32]
 8000b04:	69e3      	ldr	r3, [r4, #28]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b0a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b0e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b10:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b14:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b16:	4c0d      	ldr	r4, [pc, #52]	; (8000b4c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b18:	0852      	lsrs	r2, r2, #1
 8000b1a:	3a01      	subs	r2, #1
 8000b1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b20:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b22:	2301      	movs	r3, #1
 8000b24:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b26:	f7ff fd11 	bl	800054c <HAL_GetTick>
 8000b2a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b2c:	6823      	ldr	r3, [r4, #0]
 8000b2e:	019a      	lsls	r2, r3, #6
 8000b30:	f53f aebc 	bmi.w	80008ac <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b34:	f7ff fd0a 	bl	800054c <HAL_GetTick>
 8000b38:	1b40      	subs	r0, r0, r5
 8000b3a:	2802      	cmp	r0, #2
 8000b3c:	d9f6      	bls.n	8000b2c <HAL_RCC_OscConfig+0x2b4>
 8000b3e:	e6e2      	b.n	8000906 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b40:	f7ff fd04 	bl	800054c <HAL_GetTick>
 8000b44:	1bc0      	subs	r0, r0, r7
 8000b46:	2802      	cmp	r0, #2
 8000b48:	d9d8      	bls.n	8000afc <HAL_RCC_OscConfig+0x284>
 8000b4a:	e6dc      	b.n	8000906 <HAL_RCC_OscConfig+0x8e>
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	42470000 	.word	0x42470000
 8000b54:	42470e80 	.word	0x42470e80
 8000b58:	40007000 	.word	0x40007000
 8000b5c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000b60:	f7ff fcf4 	bl	800054c <HAL_GetTick>
 8000b64:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b66:	682b      	ldr	r3, [r5, #0]
 8000b68:	019b      	lsls	r3, r3, #6
 8000b6a:	f57f ae9f 	bpl.w	80008ac <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b6e:	f7ff fced 	bl	800054c <HAL_GetTick>
 8000b72:	1b00      	subs	r0, r0, r4
 8000b74:	2802      	cmp	r0, #2
 8000b76:	d9f6      	bls.n	8000b66 <HAL_RCC_OscConfig+0x2ee>
 8000b78:	e6c5      	b.n	8000906 <HAL_RCC_OscConfig+0x8e>
 8000b7a:	bf00      	nop

08000b7c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b7c:	4913      	ldr	r1, [pc, #76]	; (8000bcc <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000b7e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b80:	688b      	ldr	r3, [r1, #8]
 8000b82:	f003 030c 	and.w	r3, r3, #12
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	d003      	beq.n	8000b92 <HAL_RCC_GetSysClockFreq+0x16>
 8000b8a:	2b08      	cmp	r3, #8
 8000b8c:	d003      	beq.n	8000b96 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b8e:	4810      	ldr	r0, [pc, #64]	; (8000bd0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b90:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000b92:	4810      	ldr	r0, [pc, #64]	; (8000bd4 <HAL_RCC_GetSysClockFreq+0x58>)
 8000b94:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b96:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b98:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b9a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b9c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ba0:	bf14      	ite	ne
 8000ba2:	480c      	ldrne	r0, [pc, #48]	; (8000bd4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ba4:	480a      	ldreq	r0, [pc, #40]	; (8000bd0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ba6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000baa:	bf18      	it	ne
 8000bac:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bb2:	fba1 0100 	umull	r0, r1, r1, r0
 8000bb6:	f7ff fb1b 	bl	80001f0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000bba:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <HAL_RCC_GetSysClockFreq+0x50>)
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000bc6:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bca:	bd08      	pop	{r3, pc}
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	00f42400 	.word	0x00f42400
 8000bd4:	007a1200 	.word	0x007a1200

08000bd8 <HAL_RCC_ClockConfig>:
{
 8000bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bdc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000bde:	4604      	mov	r4, r0
 8000be0:	b910      	cbnz	r0, 8000be8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000be2:	2001      	movs	r0, #1
 8000be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000be8:	4b44      	ldr	r3, [pc, #272]	; (8000cfc <HAL_RCC_ClockConfig+0x124>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	f002 020f 	and.w	r2, r2, #15
 8000bf0:	428a      	cmp	r2, r1
 8000bf2:	d328      	bcc.n	8000c46 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bf4:	6821      	ldr	r1, [r4, #0]
 8000bf6:	078f      	lsls	r7, r1, #30
 8000bf8:	d42d      	bmi.n	8000c56 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bfa:	07c8      	lsls	r0, r1, #31
 8000bfc:	d440      	bmi.n	8000c80 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000bfe:	4b3f      	ldr	r3, [pc, #252]	; (8000cfc <HAL_RCC_ClockConfig+0x124>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	f002 020f 	and.w	r2, r2, #15
 8000c06:	4295      	cmp	r5, r2
 8000c08:	d366      	bcc.n	8000cd8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c0a:	6822      	ldr	r2, [r4, #0]
 8000c0c:	0751      	lsls	r1, r2, #29
 8000c0e:	d46c      	bmi.n	8000cea <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c10:	0713      	lsls	r3, r2, #28
 8000c12:	d507      	bpl.n	8000c24 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c14:	4a3a      	ldr	r2, [pc, #232]	; (8000d00 <HAL_RCC_ClockConfig+0x128>)
 8000c16:	6921      	ldr	r1, [r4, #16]
 8000c18:	6893      	ldr	r3, [r2, #8]
 8000c1a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c1e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c22:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c24:	f7ff ffaa 	bl	8000b7c <HAL_RCC_GetSysClockFreq>
 8000c28:	4b35      	ldr	r3, [pc, #212]	; (8000d00 <HAL_RCC_ClockConfig+0x128>)
 8000c2a:	4a36      	ldr	r2, [pc, #216]	; (8000d04 <HAL_RCC_ClockConfig+0x12c>)
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c32:	5cd3      	ldrb	r3, [r2, r3]
 8000c34:	40d8      	lsrs	r0, r3
 8000c36:	4b34      	ldr	r3, [pc, #208]	; (8000d08 <HAL_RCC_ClockConfig+0x130>)
 8000c38:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f001 ffa0 	bl	8002b80 <HAL_InitTick>
  return HAL_OK;
 8000c40:	2000      	movs	r0, #0
 8000c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c46:	b2ca      	uxtb	r2, r1
 8000c48:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f003 030f 	and.w	r3, r3, #15
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d1c6      	bne.n	8000be2 <HAL_RCC_ClockConfig+0xa>
 8000c54:	e7ce      	b.n	8000bf4 <HAL_RCC_ClockConfig+0x1c>
 8000c56:	4b2a      	ldr	r3, [pc, #168]	; (8000d00 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c58:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	689a      	ldrne	r2, [r3, #8]
 8000c60:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000c64:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c66:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c68:	bf42      	ittt	mi
 8000c6a:	689a      	ldrmi	r2, [r3, #8]
 8000c6c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000c70:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c72:	689a      	ldr	r2, [r3, #8]
 8000c74:	68a0      	ldr	r0, [r4, #8]
 8000c76:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c7a:	4302      	orrs	r2, r0
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	e7bc      	b.n	8000bfa <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c80:	6862      	ldr	r2, [r4, #4]
 8000c82:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <HAL_RCC_ClockConfig+0x128>)
 8000c84:	2a01      	cmp	r2, #1
 8000c86:	d11d      	bne.n	8000cc4 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c8e:	d0a8      	beq.n	8000be2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c90:	4e1b      	ldr	r6, [pc, #108]	; (8000d00 <HAL_RCC_ClockConfig+0x128>)
 8000c92:	68b3      	ldr	r3, [r6, #8]
 8000c94:	f023 0303 	bic.w	r3, r3, #3
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000c9c:	f7ff fc56 	bl	800054c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ca0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000ca4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ca6:	68b3      	ldr	r3, [r6, #8]
 8000ca8:	6862      	ldr	r2, [r4, #4]
 8000caa:	f003 030c 	and.w	r3, r3, #12
 8000cae:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000cb2:	d0a4      	beq.n	8000bfe <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cb4:	f7ff fc4a 	bl	800054c <HAL_GetTick>
 8000cb8:	1bc0      	subs	r0, r0, r7
 8000cba:	4540      	cmp	r0, r8
 8000cbc:	d9f3      	bls.n	8000ca6 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000cbe:	2003      	movs	r0, #3
}
 8000cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cc4:	1e91      	subs	r1, r2, #2
 8000cc6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cc8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cca:	d802      	bhi.n	8000cd2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ccc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000cd0:	e7dd      	b.n	8000c8e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cd2:	f013 0f02 	tst.w	r3, #2
 8000cd6:	e7da      	b.n	8000c8e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cd8:	b2ea      	uxtb	r2, r5
 8000cda:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 030f 	and.w	r3, r3, #15
 8000ce2:	429d      	cmp	r5, r3
 8000ce4:	f47f af7d 	bne.w	8000be2 <HAL_RCC_ClockConfig+0xa>
 8000ce8:	e78f      	b.n	8000c0a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000cea:	4905      	ldr	r1, [pc, #20]	; (8000d00 <HAL_RCC_ClockConfig+0x128>)
 8000cec:	68e0      	ldr	r0, [r4, #12]
 8000cee:	688b      	ldr	r3, [r1, #8]
 8000cf0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000cf4:	4303      	orrs	r3, r0
 8000cf6:	608b      	str	r3, [r1, #8]
 8000cf8:	e78a      	b.n	8000c10 <HAL_RCC_ClockConfig+0x38>
 8000cfa:	bf00      	nop
 8000cfc:	40023c00 	.word	0x40023c00
 8000d00:	40023800 	.word	0x40023800
 8000d04:	08002da3 	.word	0x08002da3
 8000d08:	20000008 	.word	0x20000008

08000d0c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000d0e:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000d16:	5cd3      	ldrb	r3, [r2, r3]
 8000d18:	4a03      	ldr	r2, [pc, #12]	; (8000d28 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000d1a:	6810      	ldr	r0, [r2, #0]
}
 8000d1c:	40d8      	lsrs	r0, r3
 8000d1e:	4770      	bx	lr
 8000d20:	40023800 	.word	0x40023800
 8000d24:	08002db3 	.word	0x08002db3
 8000d28:	20000008 	.word	0x20000008

08000d2c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000d2e:	4a05      	ldr	r2, [pc, #20]	; (8000d44 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000d36:	5cd3      	ldrb	r3, [r2, r3]
 8000d38:	4a03      	ldr	r2, [pc, #12]	; (8000d48 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000d3a:	6810      	ldr	r0, [r2, #0]
}
 8000d3c:	40d8      	lsrs	r0, r3
 8000d3e:	4770      	bx	lr
 8000d40:	40023800 	.word	0x40023800
 8000d44:	08002db3 	.word	0x08002db3
 8000d48:	20000008 	.word	0x20000008

08000d4c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000d4c:	230f      	movs	r3, #15
 8000d4e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000d50:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <HAL_RCC_GetClockConfig+0x34>)
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	f002 0203 	and.w	r2, r2, #3
 8000d58:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000d5a:	689a      	ldr	r2, [r3, #8]
 8000d5c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000d60:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000d62:	689a      	ldr	r2, [r3, #8]
 8000d64:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000d68:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	08db      	lsrs	r3, r3, #3
 8000d6e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000d72:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <HAL_RCC_GetClockConfig+0x38>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 030f 	and.w	r3, r3, #15
 8000d7c:	600b      	str	r3, [r1, #0]
 8000d7e:	4770      	bx	lr
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40023c00 	.word	0x40023c00

08000d88 <HAL_TIM_Base_MspInit>:
 8000d88:	4770      	bx	lr

08000d8a <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000d8a:	6803      	ldr	r3, [r0, #0]
 8000d8c:	68da      	ldr	r2, [r3, #12]
 8000d8e:	f042 0201 	orr.w	r2, r2, #1
 8000d92:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	f042 0201 	orr.w	r2, r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	4770      	bx	lr

08000da0 <HAL_TIM_OC_DelayElapsedCallback>:
 8000da0:	4770      	bx	lr

08000da2 <HAL_TIM_IC_CaptureCallback>:
 8000da2:	4770      	bx	lr

08000da4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000da4:	4770      	bx	lr

08000da6 <HAL_TIM_TriggerCallback>:
 8000da6:	4770      	bx	lr

08000da8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000da8:	6803      	ldr	r3, [r0, #0]
 8000daa:	691a      	ldr	r2, [r3, #16]
 8000dac:	0791      	lsls	r1, r2, #30
{
 8000dae:	b510      	push	{r4, lr}
 8000db0:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000db2:	d50e      	bpl.n	8000dd2 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000db4:	68da      	ldr	r2, [r3, #12]
 8000db6:	0792      	lsls	r2, r2, #30
 8000db8:	d50b      	bpl.n	8000dd2 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000dba:	f06f 0202 	mvn.w	r2, #2
 8000dbe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000dc0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000dc2:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000dc4:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000dc6:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000dc8:	d077      	beq.n	8000eba <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000dca:	f7ff ffea 	bl	8000da2 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000dd2:	6823      	ldr	r3, [r4, #0]
 8000dd4:	691a      	ldr	r2, [r3, #16]
 8000dd6:	0750      	lsls	r0, r2, #29
 8000dd8:	d510      	bpl.n	8000dfc <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000dda:	68da      	ldr	r2, [r3, #12]
 8000ddc:	0751      	lsls	r1, r2, #29
 8000dde:	d50d      	bpl.n	8000dfc <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000de0:	f06f 0204 	mvn.w	r2, #4
 8000de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000de6:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000de8:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000dea:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000dee:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000df0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000df2:	d068      	beq.n	8000ec6 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000df4:	f7ff ffd5 	bl	8000da2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000dfc:	6823      	ldr	r3, [r4, #0]
 8000dfe:	691a      	ldr	r2, [r3, #16]
 8000e00:	0712      	lsls	r2, r2, #28
 8000e02:	d50f      	bpl.n	8000e24 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000e04:	68da      	ldr	r2, [r3, #12]
 8000e06:	0710      	lsls	r0, r2, #28
 8000e08:	d50c      	bpl.n	8000e24 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000e0a:	f06f 0208 	mvn.w	r2, #8
 8000e0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e10:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000e12:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e14:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000e16:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000e18:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e1a:	d05a      	beq.n	8000ed2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e1c:	f7ff ffc1 	bl	8000da2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e20:	2300      	movs	r3, #0
 8000e22:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000e24:	6823      	ldr	r3, [r4, #0]
 8000e26:	691a      	ldr	r2, [r3, #16]
 8000e28:	06d2      	lsls	r2, r2, #27
 8000e2a:	d510      	bpl.n	8000e4e <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000e2c:	68da      	ldr	r2, [r3, #12]
 8000e2e:	06d0      	lsls	r0, r2, #27
 8000e30:	d50d      	bpl.n	8000e4e <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000e32:	f06f 0210 	mvn.w	r2, #16
 8000e36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e38:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000e3a:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e3c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000e40:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000e42:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e44:	d04b      	beq.n	8000ede <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e46:	f7ff ffac 	bl	8000da2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000e4e:	6823      	ldr	r3, [r4, #0]
 8000e50:	691a      	ldr	r2, [r3, #16]
 8000e52:	07d1      	lsls	r1, r2, #31
 8000e54:	d508      	bpl.n	8000e68 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000e56:	68da      	ldr	r2, [r3, #12]
 8000e58:	07d2      	lsls	r2, r2, #31
 8000e5a:	d505      	bpl.n	8000e68 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000e5c:	f06f 0201 	mvn.w	r2, #1
 8000e60:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000e62:	4620      	mov	r0, r4
 8000e64:	f001 fe28 	bl	8002ab8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000e68:	6823      	ldr	r3, [r4, #0]
 8000e6a:	691a      	ldr	r2, [r3, #16]
 8000e6c:	0610      	lsls	r0, r2, #24
 8000e6e:	d508      	bpl.n	8000e82 <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000e70:	68da      	ldr	r2, [r3, #12]
 8000e72:	0611      	lsls	r1, r2, #24
 8000e74:	d505      	bpl.n	8000e82 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000e76:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000e7a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	f000 f8b4 	bl	8000fea <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000e82:	6823      	ldr	r3, [r4, #0]
 8000e84:	691a      	ldr	r2, [r3, #16]
 8000e86:	0652      	lsls	r2, r2, #25
 8000e88:	d508      	bpl.n	8000e9c <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000e8a:	68da      	ldr	r2, [r3, #12]
 8000e8c:	0650      	lsls	r0, r2, #25
 8000e8e:	d505      	bpl.n	8000e9c <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000e90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000e94:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000e96:	4620      	mov	r0, r4
 8000e98:	f7ff ff85 	bl	8000da6 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000e9c:	6823      	ldr	r3, [r4, #0]
 8000e9e:	691a      	ldr	r2, [r3, #16]
 8000ea0:	0691      	lsls	r1, r2, #26
 8000ea2:	d522      	bpl.n	8000eea <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	0692      	lsls	r2, r2, #26
 8000ea8:	d51f      	bpl.n	8000eea <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000eaa:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000eae:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000eb0:	611a      	str	r2, [r3, #16]
    }
  }
}
 8000eb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8000eb6:	f000 b897 	b.w	8000fe8 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000eba:	f7ff ff71 	bl	8000da0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ebe:	4620      	mov	r0, r4
 8000ec0:	f7ff ff70 	bl	8000da4 <HAL_TIM_PWM_PulseFinishedCallback>
 8000ec4:	e783      	b.n	8000dce <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ec6:	f7ff ff6b 	bl	8000da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000eca:	4620      	mov	r0, r4
 8000ecc:	f7ff ff6a 	bl	8000da4 <HAL_TIM_PWM_PulseFinishedCallback>
 8000ed0:	e792      	b.n	8000df8 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ed2:	f7ff ff65 	bl	8000da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8000ed6:	4620      	mov	r0, r4
 8000ed8:	f7ff ff64 	bl	8000da4 <HAL_TIM_PWM_PulseFinishedCallback>
 8000edc:	e7a0      	b.n	8000e20 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ede:	f7ff ff5f 	bl	8000da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ee2:	4620      	mov	r0, r4
 8000ee4:	f7ff ff5e 	bl	8000da4 <HAL_TIM_PWM_PulseFinishedCallback>
 8000ee8:	e7af      	b.n	8000e4a <HAL_TIM_IRQHandler+0xa2>
 8000eea:	bd10      	pop	{r4, pc}

08000eec <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000eec:	4a2e      	ldr	r2, [pc, #184]	; (8000fa8 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8000eee:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000ef0:	4290      	cmp	r0, r2
 8000ef2:	d012      	beq.n	8000f1a <TIM_Base_SetConfig+0x2e>
 8000ef4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000ef8:	d00f      	beq.n	8000f1a <TIM_Base_SetConfig+0x2e>
 8000efa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000efe:	4290      	cmp	r0, r2
 8000f00:	d00b      	beq.n	8000f1a <TIM_Base_SetConfig+0x2e>
 8000f02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f06:	4290      	cmp	r0, r2
 8000f08:	d007      	beq.n	8000f1a <TIM_Base_SetConfig+0x2e>
 8000f0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f0e:	4290      	cmp	r0, r2
 8000f10:	d003      	beq.n	8000f1a <TIM_Base_SetConfig+0x2e>
 8000f12:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000f16:	4290      	cmp	r0, r2
 8000f18:	d11d      	bne.n	8000f56 <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000f1a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000f20:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000f22:	4a21      	ldr	r2, [pc, #132]	; (8000fa8 <TIM_Base_SetConfig+0xbc>)
 8000f24:	4290      	cmp	r0, r2
 8000f26:	d104      	bne.n	8000f32 <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f28:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	e028      	b.n	8000f84 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000f32:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f36:	d0f7      	beq.n	8000f28 <TIM_Base_SetConfig+0x3c>
 8000f38:	4a1c      	ldr	r2, [pc, #112]	; (8000fac <TIM_Base_SetConfig+0xc0>)
 8000f3a:	4290      	cmp	r0, r2
 8000f3c:	d0f4      	beq.n	8000f28 <TIM_Base_SetConfig+0x3c>
 8000f3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f42:	4290      	cmp	r0, r2
 8000f44:	d0f0      	beq.n	8000f28 <TIM_Base_SetConfig+0x3c>
 8000f46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f4a:	4290      	cmp	r0, r2
 8000f4c:	d0ec      	beq.n	8000f28 <TIM_Base_SetConfig+0x3c>
 8000f4e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000f52:	4290      	cmp	r0, r2
 8000f54:	d0e8      	beq.n	8000f28 <TIM_Base_SetConfig+0x3c>
 8000f56:	4a16      	ldr	r2, [pc, #88]	; (8000fb0 <TIM_Base_SetConfig+0xc4>)
 8000f58:	4290      	cmp	r0, r2
 8000f5a:	d0e5      	beq.n	8000f28 <TIM_Base_SetConfig+0x3c>
 8000f5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f60:	4290      	cmp	r0, r2
 8000f62:	d0e1      	beq.n	8000f28 <TIM_Base_SetConfig+0x3c>
 8000f64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f68:	4290      	cmp	r0, r2
 8000f6a:	d0dd      	beq.n	8000f28 <TIM_Base_SetConfig+0x3c>
 8000f6c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000f70:	4290      	cmp	r0, r2
 8000f72:	d0d9      	beq.n	8000f28 <TIM_Base_SetConfig+0x3c>
 8000f74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f78:	4290      	cmp	r0, r2
 8000f7a:	d0d5      	beq.n	8000f28 <TIM_Base_SetConfig+0x3c>
 8000f7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f80:	4290      	cmp	r0, r2
 8000f82:	d0d1      	beq.n	8000f28 <TIM_Base_SetConfig+0x3c>
  }

  TIMx->CR1 = tmpcr1;
 8000f84:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000f86:	688b      	ldr	r3, [r1, #8]
 8000f88:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000f8a:	680b      	ldr	r3, [r1, #0]
 8000f8c:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <TIM_Base_SetConfig+0xbc>)
 8000f90:	4298      	cmp	r0, r3
 8000f92:	d006      	beq.n	8000fa2 <TIM_Base_SetConfig+0xb6>
 8000f94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f98:	4298      	cmp	r0, r3
 8000f9a:	d002      	beq.n	8000fa2 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	6143      	str	r3, [r0, #20]
}
 8000fa0:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8000fa2:	690b      	ldr	r3, [r1, #16]
 8000fa4:	6303      	str	r3, [r0, #48]	; 0x30
 8000fa6:	e7f9      	b.n	8000f9c <TIM_Base_SetConfig+0xb0>
 8000fa8:	40010000 	.word	0x40010000
 8000fac:	40000400 	.word	0x40000400
 8000fb0:	40014000 	.word	0x40014000

08000fb4 <HAL_TIM_Base_Init>:
{ 
 8000fb4:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	b1a0      	cbz	r0, 8000fe4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000fba:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000fbe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000fc2:	b91b      	cbnz	r3, 8000fcc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000fc4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8000fc8:	f7ff fede 	bl	8000d88 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000fd2:	6820      	ldr	r0, [r4, #0]
 8000fd4:	1d21      	adds	r1, r4, #4
 8000fd6:	f7ff ff89 	bl	8000eec <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000fe4:	2001      	movs	r0, #1
}
 8000fe6:	bd10      	pop	{r4, pc}

08000fe8 <HAL_TIMEx_CommutationCallback>:
 8000fe8:	4770      	bx	lr

08000fea <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000fea:	4770      	bx	lr

08000fec <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8000ff0:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000ff2:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8000ff4:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000ff6:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000ff8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000ffc:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8000ffe:	6133      	str	r3, [r6, #16]
{
 8001000:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001002:	6883      	ldr	r3, [r0, #8]
 8001004:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001006:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001008:	4303      	orrs	r3, r0
 800100a:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800100c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001010:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001012:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001016:	430b      	orrs	r3, r1
 8001018:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800101a:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800101c:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800101e:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001024:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001026:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800102a:	6173      	str	r3, [r6, #20]
 800102c:	4b7a      	ldr	r3, [pc, #488]	; (8001218 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800102e:	d17c      	bne.n	800112a <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001030:	429e      	cmp	r6, r3
 8001032:	d003      	beq.n	800103c <UART_SetConfig+0x50>
 8001034:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001038:	429e      	cmp	r6, r3
 800103a:	d144      	bne.n	80010c6 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800103c:	f7ff fe76 	bl	8000d2c <HAL_RCC_GetPCLK2Freq>
 8001040:	2519      	movs	r5, #25
 8001042:	fb05 f300 	mul.w	r3, r5, r0
 8001046:	6860      	ldr	r0, [r4, #4]
 8001048:	f04f 0964 	mov.w	r9, #100	; 0x64
 800104c:	0040      	lsls	r0, r0, #1
 800104e:	fbb3 f3f0 	udiv	r3, r3, r0
 8001052:	fbb3 f3f9 	udiv	r3, r3, r9
 8001056:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800105a:	f7ff fe67 	bl	8000d2c <HAL_RCC_GetPCLK2Freq>
 800105e:	6863      	ldr	r3, [r4, #4]
 8001060:	4368      	muls	r0, r5
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	fbb0 f7f3 	udiv	r7, r0, r3
 8001068:	f7ff fe60 	bl	8000d2c <HAL_RCC_GetPCLK2Freq>
 800106c:	6863      	ldr	r3, [r4, #4]
 800106e:	4368      	muls	r0, r5
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	fbb0 f3f3 	udiv	r3, r0, r3
 8001076:	fbb3 f3f9 	udiv	r3, r3, r9
 800107a:	fb09 7313 	mls	r3, r9, r3, r7
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	3332      	adds	r3, #50	; 0x32
 8001082:	fbb3 f3f9 	udiv	r3, r3, r9
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800108c:	f7ff fe4e 	bl	8000d2c <HAL_RCC_GetPCLK2Freq>
 8001090:	6862      	ldr	r2, [r4, #4]
 8001092:	4368      	muls	r0, r5
 8001094:	0052      	lsls	r2, r2, #1
 8001096:	fbb0 faf2 	udiv	sl, r0, r2
 800109a:	f7ff fe47 	bl	8000d2c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800109e:	6863      	ldr	r3, [r4, #4]
 80010a0:	4368      	muls	r0, r5
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80010a8:	fbb3 f3f9 	udiv	r3, r3, r9
 80010ac:	fb09 a313 	mls	r3, r9, r3, sl
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	3332      	adds	r3, #50	; 0x32
 80010b4:	fbb3 f3f9 	udiv	r3, r3, r9
 80010b8:	f003 0307 	and.w	r3, r3, #7
 80010bc:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80010be:	443b      	add	r3, r7
 80010c0:	60b3      	str	r3, [r6, #8]
 80010c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80010c6:	f7ff fe21 	bl	8000d0c <HAL_RCC_GetPCLK1Freq>
 80010ca:	2519      	movs	r5, #25
 80010cc:	fb05 f300 	mul.w	r3, r5, r0
 80010d0:	6860      	ldr	r0, [r4, #4]
 80010d2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80010d6:	0040      	lsls	r0, r0, #1
 80010d8:	fbb3 f3f0 	udiv	r3, r3, r0
 80010dc:	fbb3 f3f9 	udiv	r3, r3, r9
 80010e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80010e4:	f7ff fe12 	bl	8000d0c <HAL_RCC_GetPCLK1Freq>
 80010e8:	6863      	ldr	r3, [r4, #4]
 80010ea:	4368      	muls	r0, r5
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	fbb0 f7f3 	udiv	r7, r0, r3
 80010f2:	f7ff fe0b 	bl	8000d0c <HAL_RCC_GetPCLK1Freq>
 80010f6:	6863      	ldr	r3, [r4, #4]
 80010f8:	4368      	muls	r0, r5
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001100:	fbb3 f3f9 	udiv	r3, r3, r9
 8001104:	fb09 7313 	mls	r3, r9, r3, r7
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	3332      	adds	r3, #50	; 0x32
 800110c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001116:	f7ff fdf9 	bl	8000d0c <HAL_RCC_GetPCLK1Freq>
 800111a:	6862      	ldr	r2, [r4, #4]
 800111c:	4368      	muls	r0, r5
 800111e:	0052      	lsls	r2, r2, #1
 8001120:	fbb0 faf2 	udiv	sl, r0, r2
 8001124:	f7ff fdf2 	bl	8000d0c <HAL_RCC_GetPCLK1Freq>
 8001128:	e7b9      	b.n	800109e <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800112a:	429e      	cmp	r6, r3
 800112c:	d002      	beq.n	8001134 <UART_SetConfig+0x148>
 800112e:	4b3b      	ldr	r3, [pc, #236]	; (800121c <UART_SetConfig+0x230>)
 8001130:	429e      	cmp	r6, r3
 8001132:	d140      	bne.n	80011b6 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001134:	f7ff fdfa 	bl	8000d2c <HAL_RCC_GetPCLK2Freq>
 8001138:	6867      	ldr	r7, [r4, #4]
 800113a:	2519      	movs	r5, #25
 800113c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001140:	fb05 f300 	mul.w	r3, r5, r0
 8001144:	00bf      	lsls	r7, r7, #2
 8001146:	fbb3 f3f7 	udiv	r3, r3, r7
 800114a:	fbb3 f3f9 	udiv	r3, r3, r9
 800114e:	011f      	lsls	r7, r3, #4
 8001150:	f7ff fdec 	bl	8000d2c <HAL_RCC_GetPCLK2Freq>
 8001154:	6863      	ldr	r3, [r4, #4]
 8001156:	4368      	muls	r0, r5
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	fbb0 f8f3 	udiv	r8, r0, r3
 800115e:	f7ff fde5 	bl	8000d2c <HAL_RCC_GetPCLK2Freq>
 8001162:	6863      	ldr	r3, [r4, #4]
 8001164:	4368      	muls	r0, r5
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	fbb0 f3f3 	udiv	r3, r0, r3
 800116c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001170:	fb09 8313 	mls	r3, r9, r3, r8
 8001174:	011b      	lsls	r3, r3, #4
 8001176:	3332      	adds	r3, #50	; 0x32
 8001178:	fbb3 f3f9 	udiv	r3, r3, r9
 800117c:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001180:	f7ff fdd4 	bl	8000d2c <HAL_RCC_GetPCLK2Freq>
 8001184:	6862      	ldr	r2, [r4, #4]
 8001186:	4368      	muls	r0, r5
 8001188:	0092      	lsls	r2, r2, #2
 800118a:	fbb0 faf2 	udiv	sl, r0, r2
 800118e:	f7ff fdcd 	bl	8000d2c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001192:	6863      	ldr	r3, [r4, #4]
 8001194:	4368      	muls	r0, r5
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	fbb0 f3f3 	udiv	r3, r0, r3
 800119c:	fbb3 f3f9 	udiv	r3, r3, r9
 80011a0:	fb09 a313 	mls	r3, r9, r3, sl
 80011a4:	011b      	lsls	r3, r3, #4
 80011a6:	3332      	adds	r3, #50	; 0x32
 80011a8:	fbb3 f3f9 	udiv	r3, r3, r9
 80011ac:	f003 030f 	and.w	r3, r3, #15
 80011b0:	ea43 0308 	orr.w	r3, r3, r8
 80011b4:	e783      	b.n	80010be <UART_SetConfig+0xd2>
 80011b6:	f7ff fda9 	bl	8000d0c <HAL_RCC_GetPCLK1Freq>
 80011ba:	6867      	ldr	r7, [r4, #4]
 80011bc:	2519      	movs	r5, #25
 80011be:	f04f 0964 	mov.w	r9, #100	; 0x64
 80011c2:	fb05 f300 	mul.w	r3, r5, r0
 80011c6:	00bf      	lsls	r7, r7, #2
 80011c8:	fbb3 f3f7 	udiv	r3, r3, r7
 80011cc:	fbb3 f3f9 	udiv	r3, r3, r9
 80011d0:	011f      	lsls	r7, r3, #4
 80011d2:	f7ff fd9b 	bl	8000d0c <HAL_RCC_GetPCLK1Freq>
 80011d6:	6863      	ldr	r3, [r4, #4]
 80011d8:	4368      	muls	r0, r5
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	fbb0 f8f3 	udiv	r8, r0, r3
 80011e0:	f7ff fd94 	bl	8000d0c <HAL_RCC_GetPCLK1Freq>
 80011e4:	6863      	ldr	r3, [r4, #4]
 80011e6:	4368      	muls	r0, r5
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80011ee:	fbb3 f3f9 	udiv	r3, r3, r9
 80011f2:	fb09 8313 	mls	r3, r9, r3, r8
 80011f6:	011b      	lsls	r3, r3, #4
 80011f8:	3332      	adds	r3, #50	; 0x32
 80011fa:	fbb3 f3f9 	udiv	r3, r3, r9
 80011fe:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001202:	f7ff fd83 	bl	8000d0c <HAL_RCC_GetPCLK1Freq>
 8001206:	6862      	ldr	r2, [r4, #4]
 8001208:	4368      	muls	r0, r5
 800120a:	0092      	lsls	r2, r2, #2
 800120c:	fbb0 faf2 	udiv	sl, r0, r2
 8001210:	f7ff fd7c 	bl	8000d0c <HAL_RCC_GetPCLK1Freq>
 8001214:	e7bd      	b.n	8001192 <UART_SetConfig+0x1a6>
 8001216:	bf00      	nop
 8001218:	40011000 	.word	0x40011000
 800121c:	40011400 	.word	0x40011400

08001220 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001222:	4604      	mov	r4, r0
 8001224:	460e      	mov	r6, r1
 8001226:	4617      	mov	r7, r2
 8001228:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800122a:	6821      	ldr	r1, [r4, #0]
 800122c:	680b      	ldr	r3, [r1, #0]
 800122e:	ea36 0303 	bics.w	r3, r6, r3
 8001232:	d101      	bne.n	8001238 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001234:	2000      	movs	r0, #0
}
 8001236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001238:	1c6b      	adds	r3, r5, #1
 800123a:	d0f7      	beq.n	800122c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800123c:	b995      	cbnz	r5, 8001264 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800123e:	6823      	ldr	r3, [r4, #0]
 8001240:	68da      	ldr	r2, [r3, #12]
 8001242:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001246:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001248:	695a      	ldr	r2, [r3, #20]
 800124a:	f022 0201 	bic.w	r2, r2, #1
 800124e:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001250:	2320      	movs	r3, #32
 8001252:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001256:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800125a:	2300      	movs	r3, #0
 800125c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001260:	2003      	movs	r0, #3
 8001262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001264:	f7ff f972 	bl	800054c <HAL_GetTick>
 8001268:	1bc0      	subs	r0, r0, r7
 800126a:	4285      	cmp	r5, r0
 800126c:	d2dd      	bcs.n	800122a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800126e:	e7e6      	b.n	800123e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001270 <HAL_UART_Init>:
{
 8001270:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001272:	4604      	mov	r4, r0
 8001274:	b340      	cbz	r0, 80012c8 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001276:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800127a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800127e:	b91b      	cbnz	r3, 8001288 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001280:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001284:	f001 fc44 	bl	8002b10 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001288:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800128a:	2324      	movs	r3, #36	; 0x24
 800128c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001290:	68d3      	ldr	r3, [r2, #12]
 8001292:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001296:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001298:	4620      	mov	r0, r4
 800129a:	f7ff fea7 	bl	8000fec <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800129e:	6823      	ldr	r3, [r4, #0]
 80012a0:	691a      	ldr	r2, [r3, #16]
 80012a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80012a6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80012a8:	695a      	ldr	r2, [r3, #20]
 80012aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80012ae:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80012b0:	68da      	ldr	r2, [r3, #12]
 80012b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012b6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012b8:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80012ba:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012bc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80012be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80012c2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80012c6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80012c8:	2001      	movs	r0, #1
}
 80012ca:	bd10      	pop	{r4, pc}

080012cc <HAL_UART_Transmit>:
{
 80012cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012d0:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 80012d2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80012d6:	2b20      	cmp	r3, #32
{
 80012d8:	4604      	mov	r4, r0
 80012da:	460d      	mov	r5, r1
 80012dc:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 80012de:	d14f      	bne.n	8001380 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 80012e0:	2900      	cmp	r1, #0
 80012e2:	d04a      	beq.n	800137a <HAL_UART_Transmit+0xae>
 80012e4:	2a00      	cmp	r2, #0
 80012e6:	d048      	beq.n	800137a <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80012e8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d047      	beq.n	8001380 <HAL_UART_Transmit+0xb4>
 80012f0:	2301      	movs	r3, #1
 80012f2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80012fa:	2321      	movs	r3, #33	; 0x21
 80012fc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001300:	f7ff f924 	bl	800054c <HAL_GetTick>
    huart->TxXferSize = Size;
 8001304:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001308:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800130a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800130e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001310:	b29b      	uxth	r3, r3
 8001312:	b96b      	cbnz	r3, 8001330 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001314:	463b      	mov	r3, r7
 8001316:	4632      	mov	r2, r6
 8001318:	2140      	movs	r1, #64	; 0x40
 800131a:	4620      	mov	r0, r4
 800131c:	f7ff ff80 	bl	8001220 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001320:	b9b0      	cbnz	r0, 8001350 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8001322:	2320      	movs	r3, #32
 8001324:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001328:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 800132c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001330:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001332:	3b01      	subs	r3, #1
 8001334:	b29b      	uxth	r3, r3
 8001336:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001338:	68a3      	ldr	r3, [r4, #8]
 800133a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800133e:	4632      	mov	r2, r6
 8001340:	463b      	mov	r3, r7
 8001342:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001346:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001348:	d10e      	bne.n	8001368 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800134a:	f7ff ff69 	bl	8001220 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800134e:	b110      	cbz	r0, 8001356 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001350:	2003      	movs	r0, #3
 8001352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001356:	882b      	ldrh	r3, [r5, #0]
 8001358:	6822      	ldr	r2, [r4, #0]
 800135a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800135e:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001360:	6923      	ldr	r3, [r4, #16]
 8001362:	b943      	cbnz	r3, 8001376 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8001364:	3502      	adds	r5, #2
 8001366:	e7d2      	b.n	800130e <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001368:	f7ff ff5a 	bl	8001220 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800136c:	2800      	cmp	r0, #0
 800136e:	d1ef      	bne.n	8001350 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001370:	6823      	ldr	r3, [r4, #0]
 8001372:	782a      	ldrb	r2, [r5, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	3501      	adds	r5, #1
 8001378:	e7c9      	b.n	800130e <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800137a:	2001      	movs	r0, #1
 800137c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001380:	2002      	movs	r0, #2
}
 8001382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001386 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001386:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001388:	f000 fec6 	bl	8002118 <vTaskStartScheduler>
  
  return osOK;
}
 800138c:	2000      	movs	r0, #0
 800138e:	bd08      	pop	{r3, pc}

08001390 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001390:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001392:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8001396:	8a02      	ldrh	r2, [r0, #16]
{
 8001398:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800139a:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 800139e:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 80013a0:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80013a2:	bf14      	ite	ne
 80013a4:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80013a6:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80013a8:	a803      	add	r0, sp, #12
 80013aa:	9001      	str	r0, [sp, #4]
 80013ac:	9400      	str	r4, [sp, #0]
 80013ae:	4628      	mov	r0, r5
 80013b0:	f000 fde2 	bl	8001f78 <xTaskCreate>
 80013b4:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80013b6:	bf0c      	ite	eq
 80013b8:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80013ba:	2000      	movne	r0, #0
}
 80013bc:	b005      	add	sp, #20
 80013be:	bd30      	pop	{r4, r5, pc}

080013c0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80013c0:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80013c2:	2800      	cmp	r0, #0
 80013c4:	bf08      	it	eq
 80013c6:	2001      	moveq	r0, #1
 80013c8:	f001 f846 	bl	8002458 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80013cc:	2000      	movs	r0, #0
 80013ce:	bd08      	pop	{r3, pc}

080013d0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013d0:	f100 0308 	add.w	r3, r0, #8
 80013d4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80013d6:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013da:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013dc:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80013de:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80013e0:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80013e2:	6003      	str	r3, [r0, #0]
 80013e4:	4770      	bx	lr

080013e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	6103      	str	r3, [r0, #16]
 80013ea:	4770      	bx	lr

080013ec <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80013ec:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80013ee:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80013f4:	689a      	ldr	r2, [r3, #8]
 80013f6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80013f8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80013fa:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80013fc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80013fe:	3301      	adds	r3, #1
 8001400:	6003      	str	r3, [r0, #0]
 8001402:	4770      	bx	lr

08001404 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001404:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001406:	1c53      	adds	r3, r2, #1
{
 8001408:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 800140a:	d10a      	bne.n	8001422 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800140c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001412:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001414:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001416:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001418:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800141a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800141c:	3301      	adds	r3, #1
 800141e:	6003      	str	r3, [r0, #0]
 8001420:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001422:	f100 0308 	add.w	r3, r0, #8
 8001426:	685c      	ldr	r4, [r3, #4]
 8001428:	6825      	ldr	r5, [r4, #0]
 800142a:	42aa      	cmp	r2, r5
 800142c:	d3ef      	bcc.n	800140e <vListInsert+0xa>
 800142e:	4623      	mov	r3, r4
 8001430:	e7f9      	b.n	8001426 <vListInsert+0x22>

08001432 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001432:	6841      	ldr	r1, [r0, #4]
 8001434:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001436:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001438:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800143a:	6882      	ldr	r2, [r0, #8]
 800143c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800143e:	6859      	ldr	r1, [r3, #4]
 8001440:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001442:	bf08      	it	eq
 8001444:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001446:	2200      	movs	r2, #0
 8001448:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800144a:	6818      	ldr	r0, [r3, #0]
 800144c:	3801      	subs	r0, #1
 800144e:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001450:	4770      	bx	lr
	...

08001454 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001454:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <prvTaskExitError+0x2c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	3301      	adds	r3, #1
 800145a:	d008      	beq.n	800146e <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800145c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001460:	f383 8811 	msr	BASEPRI, r3
 8001464:	f3bf 8f6f 	isb	sy
 8001468:	f3bf 8f4f 	dsb	sy
 800146c:	e7fe      	b.n	800146c <prvTaskExitError+0x18>
 800146e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001472:	f383 8811 	msr	BASEPRI, r3
 8001476:	f3bf 8f6f 	isb	sy
 800147a:	f3bf 8f4f 	dsb	sy
 800147e:	e7fe      	b.n	800147e <prvTaskExitError+0x2a>
 8001480:	20000004 	.word	0x20000004

08001484 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001484:	4806      	ldr	r0, [pc, #24]	; (80014a0 <prvPortStartFirstTask+0x1c>)
 8001486:	6800      	ldr	r0, [r0, #0]
 8001488:	6800      	ldr	r0, [r0, #0]
 800148a:	f380 8808 	msr	MSP, r0
 800148e:	b662      	cpsie	i
 8001490:	b661      	cpsie	f
 8001492:	f3bf 8f4f 	dsb	sy
 8001496:	f3bf 8f6f 	isb	sy
 800149a:	df00      	svc	0
 800149c:	bf00      	nop
 800149e:	0000      	.short	0x0000
 80014a0:	e000ed08 	.word	0xe000ed08

080014a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80014a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80014b4 <vPortEnableVFP+0x10>
 80014a8:	6801      	ldr	r1, [r0, #0]
 80014aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80014ae:	6001      	str	r1, [r0, #0]
 80014b0:	4770      	bx	lr
 80014b2:	0000      	.short	0x0000
 80014b4:	e000ed88 	.word	0xe000ed88

080014b8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80014b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014bc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80014c0:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <pxPortInitialiseStack+0x28>)
 80014c2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80014c6:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80014ca:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80014ce:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80014d2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80014d6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80014da:	3844      	subs	r0, #68	; 0x44
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	08001455 	.word	0x08001455
	...

080014f0 <SVC_Handler>:
	__asm volatile (
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <pxCurrentTCBConst2>)
 80014f2:	6819      	ldr	r1, [r3, #0]
 80014f4:	6808      	ldr	r0, [r1, #0]
 80014f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014fa:	f380 8809 	msr	PSP, r0
 80014fe:	f3bf 8f6f 	isb	sy
 8001502:	f04f 0000 	mov.w	r0, #0
 8001506:	f380 8811 	msr	BASEPRI, r0
 800150a:	4770      	bx	lr
 800150c:	f3af 8000 	nop.w

08001510 <pxCurrentTCBConst2>:
 8001510:	20003c48 	.word	0x20003c48

08001514 <vPortEnterCritical>:
 8001514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001518:	f383 8811 	msr	BASEPRI, r3
 800151c:	f3bf 8f6f 	isb	sy
 8001520:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001524:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <vPortEnterCritical+0x3c>)
 8001526:	6813      	ldr	r3, [r2, #0]
 8001528:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800152a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800152c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800152e:	d10d      	bne.n	800154c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <vPortEnterCritical+0x40>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001538:	d008      	beq.n	800154c <vPortEnterCritical+0x38>
 800153a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800153e:	f383 8811 	msr	BASEPRI, r3
 8001542:	f3bf 8f6f 	isb	sy
 8001546:	f3bf 8f4f 	dsb	sy
 800154a:	e7fe      	b.n	800154a <vPortEnterCritical+0x36>
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20000004 	.word	0x20000004
 8001554:	e000ed04 	.word	0xe000ed04

08001558 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001558:	4a08      	ldr	r2, [pc, #32]	; (800157c <vPortExitCritical+0x24>)
 800155a:	6813      	ldr	r3, [r2, #0]
 800155c:	b943      	cbnz	r3, 8001570 <vPortExitCritical+0x18>
 800155e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001562:	f383 8811 	msr	BASEPRI, r3
 8001566:	f3bf 8f6f 	isb	sy
 800156a:	f3bf 8f4f 	dsb	sy
 800156e:	e7fe      	b.n	800156e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001570:	3b01      	subs	r3, #1
 8001572:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001574:	b90b      	cbnz	r3, 800157a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001576:	f383 8811 	msr	BASEPRI, r3
 800157a:	4770      	bx	lr
 800157c:	20000004 	.word	0x20000004

08001580 <PendSV_Handler>:
	__asm volatile
 8001580:	f3ef 8009 	mrs	r0, PSP
 8001584:	f3bf 8f6f 	isb	sy
 8001588:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <pxCurrentTCBConst>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	f01e 0f10 	tst.w	lr, #16
 8001590:	bf08      	it	eq
 8001592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800159a:	6010      	str	r0, [r2, #0]
 800159c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80015a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80015a4:	f380 8811 	msr	BASEPRI, r0
 80015a8:	f3bf 8f4f 	dsb	sy
 80015ac:	f3bf 8f6f 	isb	sy
 80015b0:	f000 ffb0 	bl	8002514 <vTaskSwitchContext>
 80015b4:	f04f 0000 	mov.w	r0, #0
 80015b8:	f380 8811 	msr	BASEPRI, r0
 80015bc:	bc08      	pop	{r3}
 80015be:	6819      	ldr	r1, [r3, #0]
 80015c0:	6808      	ldr	r0, [r1, #0]
 80015c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015c6:	f01e 0f10 	tst.w	lr, #16
 80015ca:	bf08      	it	eq
 80015cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80015d0:	f380 8809 	msr	PSP, r0
 80015d4:	f3bf 8f6f 	isb	sy
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	f3af 8000 	nop.w

080015e0 <pxCurrentTCBConst>:
 80015e0:	20003c48 	.word	0x20003c48

080015e4 <SysTick_Handler>:
{
 80015e4:	b508      	push	{r3, lr}
	__asm volatile
 80015e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015ea:	f383 8811 	msr	BASEPRI, r3
 80015ee:	f3bf 8f6f 	isb	sy
 80015f2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80015f6:	f000 fdd9 	bl	80021ac <xTaskIncrementTick>
 80015fa:	b118      	cbz	r0, 8001604 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80015fc:	4b03      	ldr	r3, [pc, #12]	; (800160c <SysTick_Handler+0x28>)
 80015fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001602:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001604:	2300      	movs	r3, #0
 8001606:	f383 8811 	msr	BASEPRI, r3
 800160a:	bd08      	pop	{r3, pc}
 800160c:	e000ed04 	.word	0xe000ed04

08001610 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <vPortSetupTimerInterrupt+0x1c>)
 8001612:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	fbb3 f3f2 	udiv	r3, r3, r2
 800161c:	4a04      	ldr	r2, [pc, #16]	; (8001630 <vPortSetupTimerInterrupt+0x20>)
 800161e:	3b01      	subs	r3, #1
 8001620:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001622:	4b04      	ldr	r3, [pc, #16]	; (8001634 <vPortSetupTimerInterrupt+0x24>)
 8001624:	2207      	movs	r2, #7
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000008 	.word	0x20000008
 8001630:	e000e014 	.word	0xe000e014
 8001634:	e000e010 	.word	0xe000e010

08001638 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001638:	4b31      	ldr	r3, [pc, #196]	; (8001700 <xPortStartScheduler+0xc8>)
 800163a:	4a32      	ldr	r2, [pc, #200]	; (8001704 <xPortStartScheduler+0xcc>)
{
 800163c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800163e:	6819      	ldr	r1, [r3, #0]
 8001640:	4291      	cmp	r1, r2
 8001642:	d108      	bne.n	8001656 <xPortStartScheduler+0x1e>
	__asm volatile
 8001644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001648:	f383 8811 	msr	BASEPRI, r3
 800164c:	f3bf 8f6f 	isb	sy
 8001650:	f3bf 8f4f 	dsb	sy
 8001654:	e7fe      	b.n	8001654 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <xPortStartScheduler+0xd0>)
 800165a:	429a      	cmp	r2, r3
 800165c:	d108      	bne.n	8001670 <xPortStartScheduler+0x38>
 800165e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001662:	f383 8811 	msr	BASEPRI, r3
 8001666:	f3bf 8f6f 	isb	sy
 800166a:	f3bf 8f4f 	dsb	sy
 800166e:	e7fe      	b.n	800166e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001670:	4b26      	ldr	r3, [pc, #152]	; (800170c <xPortStartScheduler+0xd4>)
 8001672:	781a      	ldrb	r2, [r3, #0]
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001678:	22ff      	movs	r2, #255	; 0xff
 800167a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800167c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800167e:	4a24      	ldr	r2, [pc, #144]	; (8001710 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001680:	b2db      	uxtb	r3, r3
 8001682:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001686:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800168a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800168e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001690:	4b20      	ldr	r3, [pc, #128]	; (8001714 <xPortStartScheduler+0xdc>)
 8001692:	2207      	movs	r2, #7
 8001694:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001696:	2100      	movs	r1, #0
 8001698:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800169c:	0600      	lsls	r0, r0, #24
 800169e:	f102 34ff 	add.w	r4, r2, #4294967295
 80016a2:	d423      	bmi.n	80016ec <xPortStartScheduler+0xb4>
 80016a4:	b101      	cbz	r1, 80016a8 <xPortStartScheduler+0x70>
 80016a6:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80016ac:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80016b0:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80016b2:	9b01      	ldr	r3, [sp, #4]
 80016b4:	4a15      	ldr	r2, [pc, #84]	; (800170c <xPortStartScheduler+0xd4>)
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80016ba:	4b17      	ldr	r3, [pc, #92]	; (8001718 <xPortStartScheduler+0xe0>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80016c2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80016ca:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80016cc:	f7ff ffa0 	bl	8001610 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <xPortStartScheduler+0xe4>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 80016d6:	f7ff fee5 	bl	80014a4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80016da:	4a11      	ldr	r2, [pc, #68]	; (8001720 <xPortStartScheduler+0xe8>)
 80016dc:	6813      	ldr	r3, [r2, #0]
 80016de:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80016e2:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80016e4:	f7ff fece 	bl	8001484 <prvPortStartFirstTask>
	prvTaskExitError();
 80016e8:	f7ff feb4 	bl	8001454 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80016ec:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80016f0:	0052      	lsls	r2, r2, #1
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	f88d 2003 	strb.w	r2, [sp, #3]
 80016f8:	2101      	movs	r1, #1
 80016fa:	4622      	mov	r2, r4
 80016fc:	e7cc      	b.n	8001698 <xPortStartScheduler+0x60>
 80016fe:	bf00      	nop
 8001700:	e000ed00 	.word	0xe000ed00
 8001704:	410fc271 	.word	0x410fc271
 8001708:	410fc270 	.word	0x410fc270
 800170c:	e000e400 	.word	0xe000e400
 8001710:	20000028 	.word	0x20000028
 8001714:	2000002c 	.word	0x2000002c
 8001718:	e000ed20 	.word	0xe000ed20
 800171c:	20000004 	.word	0x20000004
 8001720:	e000ef34 	.word	0xe000ef34

08001724 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8001724:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001728:	2b0f      	cmp	r3, #15
 800172a:	d90e      	bls.n	800174a <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800172c:	4a10      	ldr	r2, [pc, #64]	; (8001770 <vPortValidateInterruptPriority+0x4c>)
 800172e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001730:	4a10      	ldr	r2, [pc, #64]	; (8001774 <vPortValidateInterruptPriority+0x50>)
 8001732:	7812      	ldrb	r2, [r2, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	d908      	bls.n	800174a <vPortValidateInterruptPriority+0x26>
 8001738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800173c:	f383 8811 	msr	BASEPRI, r3
 8001740:	f3bf 8f6f 	isb	sy
 8001744:	f3bf 8f4f 	dsb	sy
 8001748:	e7fe      	b.n	8001748 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <vPortValidateInterruptPriority+0x54>)
 800174c:	4a0b      	ldr	r2, [pc, #44]	; (800177c <vPortValidateInterruptPriority+0x58>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6812      	ldr	r2, [r2, #0]
 8001752:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001756:	4293      	cmp	r3, r2
 8001758:	d908      	bls.n	800176c <vPortValidateInterruptPriority+0x48>
 800175a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800175e:	f383 8811 	msr	BASEPRI, r3
 8001762:	f3bf 8f6f 	isb	sy
 8001766:	f3bf 8f4f 	dsb	sy
 800176a:	e7fe      	b.n	800176a <vPortValidateInterruptPriority+0x46>
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000e3f0 	.word	0xe000e3f0
 8001774:	20000028 	.word	0x20000028
 8001778:	e000ed0c 	.word	0xe000ed0c
 800177c:	2000002c 	.word	0x2000002c

08001780 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001780:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001782:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <prvInsertBlockIntoFreeList+0x40>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	4282      	cmp	r2, r0
 8001788:	d318      	bcc.n	80017bc <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800178a:	685c      	ldr	r4, [r3, #4]
 800178c:	1919      	adds	r1, r3, r4
 800178e:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001790:	bf01      	itttt	eq
 8001792:	6841      	ldreq	r1, [r0, #4]
 8001794:	4618      	moveq	r0, r3
 8001796:	1909      	addeq	r1, r1, r4
 8001798:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800179a:	6844      	ldr	r4, [r0, #4]
 800179c:	1901      	adds	r1, r0, r4
 800179e:	428a      	cmp	r2, r1
 80017a0:	d107      	bne.n	80017b2 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80017a2:	4908      	ldr	r1, [pc, #32]	; (80017c4 <prvInsertBlockIntoFreeList+0x44>)
 80017a4:	6809      	ldr	r1, [r1, #0]
 80017a6:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80017a8:	bf1f      	itttt	ne
 80017aa:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80017ac:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80017ae:	1909      	addne	r1, r1, r4
 80017b0:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80017b2:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80017b4:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80017b6:	bf18      	it	ne
 80017b8:	6018      	strne	r0, [r3, #0]
 80017ba:	bd10      	pop	{r4, pc}
 80017bc:	4613      	mov	r3, r2
 80017be:	e7e1      	b.n	8001784 <prvInsertBlockIntoFreeList+0x4>
 80017c0:	20003c40 	.word	0x20003c40
 80017c4:	20000030 	.word	0x20000030

080017c8 <pvPortMalloc>:
{
 80017c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017cc:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80017ce:	f000 fcdf 	bl	8002190 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80017d2:	493e      	ldr	r1, [pc, #248]	; (80018cc <pvPortMalloc+0x104>)
 80017d4:	4d3e      	ldr	r5, [pc, #248]	; (80018d0 <pvPortMalloc+0x108>)
 80017d6:	680b      	ldr	r3, [r1, #0]
 80017d8:	bb0b      	cbnz	r3, 800181e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80017da:	4a3e      	ldr	r2, [pc, #248]	; (80018d4 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80017dc:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80017de:	bf1f      	itttt	ne
 80017e0:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80017e2:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80017e6:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 80017ea:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80017ec:	bf14      	ite	ne
 80017ee:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80017f0:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80017f4:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80017f6:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80017f8:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80017fc:	4e36      	ldr	r6, [pc, #216]	; (80018d8 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 80017fe:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001800:	2000      	movs	r0, #0
 8001802:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001804:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8001806:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001808:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800180a:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800180c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800180e:	4b33      	ldr	r3, [pc, #204]	; (80018dc <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001810:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001812:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001814:	4b32      	ldr	r3, [pc, #200]	; (80018e0 <pvPortMalloc+0x118>)
 8001816:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001818:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800181c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800181e:	682f      	ldr	r7, [r5, #0]
 8001820:	4227      	tst	r7, r4
 8001822:	d116      	bne.n	8001852 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8001824:	2c00      	cmp	r4, #0
 8001826:	d041      	beq.n	80018ac <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8001828:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800182c:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800182e:	bf1c      	itt	ne
 8001830:	f023 0307 	bicne.w	r3, r3, #7
 8001834:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001836:	b163      	cbz	r3, 8001852 <pvPortMalloc+0x8a>
 8001838:	4a29      	ldr	r2, [pc, #164]	; (80018e0 <pvPortMalloc+0x118>)
 800183a:	6816      	ldr	r6, [r2, #0]
 800183c:	42b3      	cmp	r3, r6
 800183e:	4690      	mov	r8, r2
 8001840:	d807      	bhi.n	8001852 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8001842:	4a25      	ldr	r2, [pc, #148]	; (80018d8 <pvPortMalloc+0x110>)
 8001844:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001846:	6868      	ldr	r0, [r5, #4]
 8001848:	4283      	cmp	r3, r0
 800184a:	d804      	bhi.n	8001856 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 800184c:	6809      	ldr	r1, [r1, #0]
 800184e:	428d      	cmp	r5, r1
 8001850:	d107      	bne.n	8001862 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8001852:	2400      	movs	r4, #0
 8001854:	e02a      	b.n	80018ac <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001856:	682c      	ldr	r4, [r5, #0]
 8001858:	2c00      	cmp	r4, #0
 800185a:	d0f7      	beq.n	800184c <pvPortMalloc+0x84>
 800185c:	462a      	mov	r2, r5
 800185e:	4625      	mov	r5, r4
 8001860:	e7f1      	b.n	8001846 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001862:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001864:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001866:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001868:	1ac2      	subs	r2, r0, r3
 800186a:	2a10      	cmp	r2, #16
 800186c:	d90f      	bls.n	800188e <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800186e:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001870:	0741      	lsls	r1, r0, #29
 8001872:	d008      	beq.n	8001886 <pvPortMalloc+0xbe>
 8001874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001878:	f383 8811 	msr	BASEPRI, r3
 800187c:	f3bf 8f6f 	isb	sy
 8001880:	f3bf 8f4f 	dsb	sy
 8001884:	e7fe      	b.n	8001884 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001886:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001888:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800188a:	f7ff ff79 	bl	8001780 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800188e:	4913      	ldr	r1, [pc, #76]	; (80018dc <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001890:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001892:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001894:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001896:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001898:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800189a:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800189e:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80018a2:	bf38      	it	cc
 80018a4:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80018a6:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80018a8:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80018aa:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80018ac:	f000 fd10 	bl	80022d0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80018b0:	0763      	lsls	r3, r4, #29
 80018b2:	d008      	beq.n	80018c6 <pvPortMalloc+0xfe>
 80018b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018b8:	f383 8811 	msr	BASEPRI, r3
 80018bc:	f3bf 8f6f 	isb	sy
 80018c0:	f3bf 8f4f 	dsb	sy
 80018c4:	e7fe      	b.n	80018c4 <pvPortMalloc+0xfc>
}
 80018c6:	4620      	mov	r0, r4
 80018c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018cc:	20000030 	.word	0x20000030
 80018d0:	20003c34 	.word	0x20003c34
 80018d4:	20000034 	.word	0x20000034
 80018d8:	20003c40 	.word	0x20003c40
 80018dc:	20003c3c 	.word	0x20003c3c
 80018e0:	20003c38 	.word	0x20003c38

080018e4 <vPortFree>:
{
 80018e4:	b510      	push	{r4, lr}
	if( pv != NULL )
 80018e6:	4604      	mov	r4, r0
 80018e8:	b370      	cbz	r0, 8001948 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80018ea:	4a18      	ldr	r2, [pc, #96]	; (800194c <vPortFree+0x68>)
 80018ec:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80018f0:	6812      	ldr	r2, [r2, #0]
 80018f2:	4213      	tst	r3, r2
 80018f4:	d108      	bne.n	8001908 <vPortFree+0x24>
 80018f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018fa:	f383 8811 	msr	BASEPRI, r3
 80018fe:	f3bf 8f6f 	isb	sy
 8001902:	f3bf 8f4f 	dsb	sy
 8001906:	e7fe      	b.n	8001906 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001908:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800190c:	b141      	cbz	r1, 8001920 <vPortFree+0x3c>
 800190e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001912:	f383 8811 	msr	BASEPRI, r3
 8001916:	f3bf 8f6f 	isb	sy
 800191a:	f3bf 8f4f 	dsb	sy
 800191e:	e7fe      	b.n	800191e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001920:	ea23 0302 	bic.w	r3, r3, r2
 8001924:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001928:	f000 fc32 	bl	8002190 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800192c:	4a08      	ldr	r2, [pc, #32]	; (8001950 <vPortFree+0x6c>)
 800192e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8001932:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001934:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001938:	440b      	add	r3, r1
 800193a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800193c:	f7ff ff20 	bl	8001780 <prvInsertBlockIntoFreeList>
}
 8001940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8001944:	f000 bcc4 	b.w	80022d0 <xTaskResumeAll>
 8001948:	bd10      	pop	{r4, pc}
 800194a:	bf00      	nop
 800194c:	20003c34 	.word	0x20003c34
 8001950:	20003c38 	.word	0x20003c38

08001954 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001954:	b570      	push	{r4, r5, r6, lr}
 8001956:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001958:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800195a:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 800195c:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800195e:	b942      	cbnz	r2, 8001972 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001960:	6805      	ldr	r5, [r0, #0]
 8001962:	b99d      	cbnz	r5, 800198c <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001964:	6840      	ldr	r0, [r0, #4]
 8001966:	f000 ff11 	bl	800278c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800196a:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800196c:	3601      	adds	r6, #1
 800196e:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8001970:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8001972:	b96d      	cbnz	r5, 8001990 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001974:	6880      	ldr	r0, [r0, #8]
 8001976:	f001 f9c5 	bl	8002d04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800197a:	68a3      	ldr	r3, [r4, #8]
 800197c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800197e:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001980:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001982:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001984:	4293      	cmp	r3, r2
 8001986:	d301      	bcc.n	800198c <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800198c:	2000      	movs	r0, #0
 800198e:	e7ed      	b.n	800196c <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001990:	68c0      	ldr	r0, [r0, #12]
 8001992:	f001 f9b7 	bl	8002d04 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001996:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001998:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800199a:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800199c:	425b      	negs	r3, r3
 800199e:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80019a0:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80019a2:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80019a4:	bf3e      	ittt	cc
 80019a6:	6862      	ldrcc	r2, [r4, #4]
 80019a8:	189b      	addcc	r3, r3, r2
 80019aa:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80019ac:	2d02      	cmp	r5, #2
 80019ae:	d1ed      	bne.n	800198c <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80019b0:	b10e      	cbz	r6, 80019b6 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80019b2:	3e01      	subs	r6, #1
 80019b4:	e7ea      	b.n	800198c <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80019b6:	4630      	mov	r0, r6
 80019b8:	e7d8      	b.n	800196c <prvCopyDataToQueue+0x18>

080019ba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80019ba:	4603      	mov	r3, r0
 80019bc:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80019be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80019c0:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80019c2:	b162      	cbz	r2, 80019de <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80019c4:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80019c6:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80019c8:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80019ca:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80019cc:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80019ce:	bf24      	itt	cs
 80019d0:	6819      	ldrcs	r1, [r3, #0]
 80019d2:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80019d4:	68d9      	ldr	r1, [r3, #12]
	}
}
 80019d6:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80019da:	f001 b993 	b.w	8002d04 <memcpy>
}
 80019de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80019e4:	b570      	push	{r4, r5, r6, lr}
 80019e6:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80019e8:	f7ff fd94 	bl	8001514 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80019ec:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80019f0:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80019f4:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80019f6:	2d00      	cmp	r5, #0
 80019f8:	dc14      	bgt.n	8001a24 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80019fa:	23ff      	movs	r3, #255	; 0xff
 80019fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001a00:	f7ff fdaa 	bl	8001558 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001a04:	f7ff fd86 	bl	8001514 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001a08:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a0c:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8001a10:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001a12:	2d00      	cmp	r5, #0
 8001a14:	dc12      	bgt.n	8001a3c <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001a16:	23ff      	movs	r3, #255	; 0xff
 8001a18:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8001a1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8001a20:	f7ff bd9a 	b.w	8001558 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0e7      	beq.n	80019fa <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a2a:	4630      	mov	r0, r6
 8001a2c:	f000 fdc6 	bl	80025bc <xTaskRemoveFromEventList>
 8001a30:	b108      	cbz	r0, 8001a36 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8001a32:	f000 fe4f 	bl	80026d4 <vTaskMissedYield>
 8001a36:	3d01      	subs	r5, #1
 8001a38:	b26d      	sxtb	r5, r5
 8001a3a:	e7dc      	b.n	80019f6 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a3c:	6923      	ldr	r3, [r4, #16]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0e9      	beq.n	8001a16 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a42:	4630      	mov	r0, r6
 8001a44:	f000 fdba 	bl	80025bc <xTaskRemoveFromEventList>
 8001a48:	b108      	cbz	r0, 8001a4e <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8001a4a:	f000 fe43 	bl	80026d4 <vTaskMissedYield>
 8001a4e:	3d01      	subs	r5, #1
 8001a50:	b26d      	sxtb	r5, r5
 8001a52:	e7de      	b.n	8001a12 <prvUnlockQueue+0x2e>

08001a54 <xQueueGenericReset>:
{
 8001a54:	b538      	push	{r3, r4, r5, lr}
 8001a56:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8001a58:	4604      	mov	r4, r0
 8001a5a:	b940      	cbnz	r0, 8001a6e <xQueueGenericReset+0x1a>
 8001a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a60:	f383 8811 	msr	BASEPRI, r3
 8001a64:	f3bf 8f6f 	isb	sy
 8001a68:	f3bf 8f4f 	dsb	sy
 8001a6c:	e7fe      	b.n	8001a6c <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8001a6e:	f7ff fd51 	bl	8001514 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001a72:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001a74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a76:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001a78:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001a7a:	4343      	muls	r3, r0
 8001a7c:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001a7e:	1a1b      	subs	r3, r3, r0
 8001a80:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001a82:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001a84:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a86:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8001a88:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a8a:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8001a8c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001a90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8001a94:	b995      	cbnz	r5, 8001abc <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a96:	6923      	ldr	r3, [r4, #16]
 8001a98:	b163      	cbz	r3, 8001ab4 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a9a:	f104 0010 	add.w	r0, r4, #16
 8001a9e:	f000 fd8d 	bl	80025bc <xTaskRemoveFromEventList>
 8001aa2:	b138      	cbz	r0, 8001ab4 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8001aa4:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <xQueueGenericReset+0x7c>)
 8001aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	f3bf 8f4f 	dsb	sy
 8001ab0:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8001ab4:	f7ff fd50 	bl	8001558 <vPortExitCritical>
}
 8001ab8:	2001      	movs	r0, #1
 8001aba:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001abc:	f104 0010 	add.w	r0, r4, #16
 8001ac0:	f7ff fc86 	bl	80013d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001ac4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001ac8:	f7ff fc82 	bl	80013d0 <vListInitialise>
 8001acc:	e7f2      	b.n	8001ab4 <xQueueGenericReset+0x60>
 8001ace:	bf00      	nop
 8001ad0:	e000ed04 	.word	0xe000ed04

08001ad4 <xQueueGenericCreate>:
	{
 8001ad4:	b570      	push	{r4, r5, r6, lr}
 8001ad6:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001ad8:	4606      	mov	r6, r0
 8001ada:	b940      	cbnz	r0, 8001aee <xQueueGenericCreate+0x1a>
 8001adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ae0:	f383 8811 	msr	BASEPRI, r3
 8001ae4:	f3bf 8f6f 	isb	sy
 8001ae8:	f3bf 8f4f 	dsb	sy
 8001aec:	e7fe      	b.n	8001aec <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001aee:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001af0:	3048      	adds	r0, #72	; 0x48
 8001af2:	f7ff fe69 	bl	80017c8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8001af6:	4604      	mov	r4, r0
 8001af8:	b138      	cbz	r0, 8001b0a <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8001afa:	b945      	cbnz	r5, 8001b0e <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001afc:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8001afe:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001b00:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001b02:	2101      	movs	r1, #1
 8001b04:	4620      	mov	r0, r4
 8001b06:	f7ff ffa5 	bl	8001a54 <xQueueGenericReset>
	}
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001b0e:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001b12:	6003      	str	r3, [r0, #0]
 8001b14:	e7f3      	b.n	8001afe <xQueueGenericCreate+0x2a>
	...

08001b18 <xQueueGenericSend>:
{
 8001b18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b1c:	4689      	mov	r9, r1
 8001b1e:	9201      	str	r2, [sp, #4]
 8001b20:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8001b22:	4604      	mov	r4, r0
 8001b24:	b940      	cbnz	r0, 8001b38 <xQueueGenericSend+0x20>
 8001b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b2a:	f383 8811 	msr	BASEPRI, r3
 8001b2e:	f3bf 8f6f 	isb	sy
 8001b32:	f3bf 8f4f 	dsb	sy
 8001b36:	e7fe      	b.n	8001b36 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b38:	2900      	cmp	r1, #0
 8001b3a:	f040 8088 	bne.w	8001c4e <xQueueGenericSend+0x136>
 8001b3e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 8084 	beq.w	8001c4e <xQueueGenericSend+0x136>
 8001b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b4a:	f383 8811 	msr	BASEPRI, r3
 8001b4e:	f3bf 8f6f 	isb	sy
 8001b52:	f3bf 8f4f 	dsb	sy
 8001b56:	e7fe      	b.n	8001b56 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001b58:	9e01      	ldr	r6, [sp, #4]
 8001b5a:	2e00      	cmp	r6, #0
 8001b5c:	f000 8082 	beq.w	8001c64 <xQueueGenericSend+0x14c>
 8001b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b64:	f383 8811 	msr	BASEPRI, r3
 8001b68:	f3bf 8f6f 	isb	sy
 8001b6c:	f3bf 8f4f 	dsb	sy
 8001b70:	e7fe      	b.n	8001b70 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001b72:	9d01      	ldr	r5, [sp, #4]
 8001b74:	b91d      	cbnz	r5, 8001b7e <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 8001b76:	f7ff fcef 	bl	8001558 <vPortExitCritical>
			return errQUEUE_FULL;
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	e058      	b.n	8001c30 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8001b7e:	b916      	cbnz	r6, 8001b86 <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 8001b80:	a802      	add	r0, sp, #8
 8001b82:	f000 fd5d 	bl	8002640 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8001b86:	f7ff fce7 	bl	8001558 <vPortExitCritical>
		vTaskSuspendAll();
 8001b8a:	f000 fb01 	bl	8002190 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001b8e:	f7ff fcc1 	bl	8001514 <vPortEnterCritical>
 8001b92:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001b96:	2bff      	cmp	r3, #255	; 0xff
 8001b98:	bf08      	it	eq
 8001b9a:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8001b9e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001ba2:	2bff      	cmp	r3, #255	; 0xff
 8001ba4:	bf08      	it	eq
 8001ba6:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8001baa:	f7ff fcd5 	bl	8001558 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001bae:	a901      	add	r1, sp, #4
 8001bb0:	a802      	add	r0, sp, #8
 8001bb2:	f000 fd55 	bl	8002660 <xTaskCheckForTimeOut>
 8001bb6:	2800      	cmp	r0, #0
 8001bb8:	d143      	bne.n	8001c42 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001bba:	f7ff fcab 	bl	8001514 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001bbe:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8001bc0:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8001bc2:	f7ff fcc9 	bl	8001558 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001bc6:	42ae      	cmp	r6, r5
 8001bc8:	d135      	bne.n	8001c36 <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001bca:	9901      	ldr	r1, [sp, #4]
 8001bcc:	f104 0010 	add.w	r0, r4, #16
 8001bd0:	f000 fcda 	bl	8002588 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	f7ff ff05 	bl	80019e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001bda:	f000 fb79 	bl	80022d0 <xTaskResumeAll>
 8001bde:	b938      	cbnz	r0, 8001bf0 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8001be0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001be4:	f8ca 3000 	str.w	r3, [sl]
 8001be8:	f3bf 8f4f 	dsb	sy
 8001bec:	f3bf 8f6f 	isb	sy
 8001bf0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8001bf2:	f7ff fc8f 	bl	8001514 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001bf6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001bf8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d301      	bcc.n	8001c02 <xQueueGenericSend+0xea>
 8001bfe:	2f02      	cmp	r7, #2
 8001c00:	d1b7      	bne.n	8001b72 <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001c02:	463a      	mov	r2, r7
 8001c04:	4649      	mov	r1, r9
 8001c06:	4620      	mov	r0, r4
 8001c08:	f7ff fea4 	bl	8001954 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001c0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c0e:	b11b      	cbz	r3, 8001c18 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001c10:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001c14:	f000 fcd2 	bl	80025bc <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8001c18:	b138      	cbz	r0, 8001c2a <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 8001c1a:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <xQueueGenericSend+0x168>)
 8001c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	f3bf 8f4f 	dsb	sy
 8001c26:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001c2a:	f7ff fc95 	bl	8001558 <vPortExitCritical>
				return pdPASS;
 8001c2e:	2001      	movs	r0, #1
}
 8001c30:	b004      	add	sp, #16
 8001c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8001c36:	4620      	mov	r0, r4
 8001c38:	f7ff fed4 	bl	80019e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001c3c:	f000 fb48 	bl	80022d0 <xTaskResumeAll>
 8001c40:	e7d6      	b.n	8001bf0 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 8001c42:	4620      	mov	r0, r4
 8001c44:	f7ff fece 	bl	80019e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001c48:	f000 fb42 	bl	80022d0 <xTaskResumeAll>
 8001c4c:	e795      	b.n	8001b7a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001c4e:	2f02      	cmp	r7, #2
 8001c50:	d102      	bne.n	8001c58 <xQueueGenericSend+0x140>
 8001c52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d10a      	bne.n	8001c6e <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001c58:	f000 fd42 	bl	80026e0 <xTaskGetSchedulerState>
 8001c5c:	2800      	cmp	r0, #0
 8001c5e:	f43f af7b 	beq.w	8001b58 <xQueueGenericSend+0x40>
 8001c62:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8001c64:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8001c68:	f8df a014 	ldr.w	sl, [pc, #20]	; 8001c80 <xQueueGenericSend+0x168>
 8001c6c:	e7c1      	b.n	8001bf2 <xQueueGenericSend+0xda>
 8001c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c72:	f383 8811 	msr	BASEPRI, r3
 8001c76:	f3bf 8f6f 	isb	sy
 8001c7a:	f3bf 8f4f 	dsb	sy
 8001c7e:	e7fe      	b.n	8001c7e <xQueueGenericSend+0x166>
 8001c80:	e000ed04 	.word	0xe000ed04

08001c84 <xQueueGiveFromISR>:
{
 8001c84:	b570      	push	{r4, r5, r6, lr}
 8001c86:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8001c88:	4604      	mov	r4, r0
 8001c8a:	b940      	cbnz	r0, 8001c9e <xQueueGiveFromISR+0x1a>
 8001c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c90:	f383 8811 	msr	BASEPRI, r3
 8001c94:	f3bf 8f6f 	isb	sy
 8001c98:	f3bf 8f4f 	dsb	sy
 8001c9c:	e7fe      	b.n	8001c9c <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8001c9e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001ca0:	b143      	cbz	r3, 8001cb4 <xQueueGiveFromISR+0x30>
 8001ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ca6:	f383 8811 	msr	BASEPRI, r3
 8001caa:	f3bf 8f6f 	isb	sy
 8001cae:	f3bf 8f4f 	dsb	sy
 8001cb2:	e7fe      	b.n	8001cb2 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8001cb4:	6803      	ldr	r3, [r0, #0]
 8001cb6:	b90b      	cbnz	r3, 8001cbc <xQueueGiveFromISR+0x38>
 8001cb8:	6843      	ldr	r3, [r0, #4]
 8001cba:	bb73      	cbnz	r3, 8001d1a <xQueueGiveFromISR+0x96>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001cbc:	f7ff fd32 	bl	8001724 <vPortValidateInterruptPriority>
	__asm volatile
 8001cc0:	f3ef 8611 	mrs	r6, BASEPRI
 8001cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cc8:	f383 8811 	msr	BASEPRI, r3
 8001ccc:	f3bf 8f6f 	isb	sy
 8001cd0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001cd4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8001cd6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d301      	bcc.n	8001ce0 <xQueueGiveFromISR+0x5c>
			xReturn = errQUEUE_FULL;
 8001cdc:	2000      	movs	r0, #0
 8001cde:	e014      	b.n	8001d0a <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 8001ce0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8001ce4:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 8001ce6:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8001ce8:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	d110      	bne.n	8001d10 <xQueueGiveFromISR+0x8c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001cee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cf0:	b90b      	cbnz	r3, 8001cf6 <xQueueGiveFromISR+0x72>
			xReturn = pdPASS;
 8001cf2:	2001      	movs	r0, #1
 8001cf4:	e009      	b.n	8001d0a <xQueueGiveFromISR+0x86>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001cf6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001cfa:	f000 fc5f 	bl	80025bc <xTaskRemoveFromEventList>
 8001cfe:	2800      	cmp	r0, #0
 8001d00:	d0f7      	beq.n	8001cf2 <xQueueGiveFromISR+0x6e>
							if( pxHigherPriorityTaskWoken != NULL )
 8001d02:	2d00      	cmp	r5, #0
 8001d04:	d0f5      	beq.n	8001cf2 <xQueueGiveFromISR+0x6e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001d06:	2001      	movs	r0, #1
 8001d08:	6028      	str	r0, [r5, #0]
	__asm volatile
 8001d0a:	f386 8811 	msr	BASEPRI, r6
}
 8001d0e:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001d10:	3301      	adds	r3, #1
 8001d12:	b25b      	sxtb	r3, r3
 8001d14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001d18:	e7eb      	b.n	8001cf2 <xQueueGiveFromISR+0x6e>
	__asm volatile
 8001d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d1e:	f383 8811 	msr	BASEPRI, r3
 8001d22:	f3bf 8f6f 	isb	sy
 8001d26:	f3bf 8f4f 	dsb	sy
 8001d2a:	e7fe      	b.n	8001d2a <xQueueGiveFromISR+0xa6>

08001d2c <xQueueGenericReceive>:
{
 8001d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d30:	4688      	mov	r8, r1
 8001d32:	9201      	str	r2, [sp, #4]
 8001d34:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 8001d36:	4604      	mov	r4, r0
 8001d38:	b940      	cbnz	r0, 8001d4c <xQueueGenericReceive+0x20>
 8001d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d3e:	f383 8811 	msr	BASEPRI, r3
 8001d42:	f3bf 8f6f 	isb	sy
 8001d46:	f3bf 8f4f 	dsb	sy
 8001d4a:	e7fe      	b.n	8001d4a <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d4c:	2900      	cmp	r1, #0
 8001d4e:	f040 80a5 	bne.w	8001e9c <xQueueGenericReceive+0x170>
 8001d52:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80a1 	beq.w	8001e9c <xQueueGenericReceive+0x170>
 8001d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d5e:	f383 8811 	msr	BASEPRI, r3
 8001d62:	f3bf 8f6f 	isb	sy
 8001d66:	f3bf 8f4f 	dsb	sy
 8001d6a:	e7fe      	b.n	8001d6a <xQueueGenericReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001d6c:	9e01      	ldr	r6, [sp, #4]
 8001d6e:	2e00      	cmp	r6, #0
 8001d70:	f000 809a 	beq.w	8001ea8 <xQueueGenericReceive+0x17c>
 8001d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d78:	f383 8811 	msr	BASEPRI, r3
 8001d7c:	f3bf 8f6f 	isb	sy
 8001d80:	f3bf 8f4f 	dsb	sy
 8001d84:	e7fe      	b.n	8001d84 <xQueueGenericReceive+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d86:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8001d88:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d06d      	beq.n	8001e6a <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d8e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001d92:	e05f      	b.n	8001e54 <xQueueGenericReceive+0x128>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001d94:	9d01      	ldr	r5, [sp, #4]
 8001d96:	b91d      	cbnz	r5, 8001da0 <xQueueGenericReceive+0x74>
					taskEXIT_CRITICAL();
 8001d98:	f7ff fbde 	bl	8001558 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8001d9c:	4628      	mov	r0, r5
 8001d9e:	e067      	b.n	8001e70 <xQueueGenericReceive+0x144>
				else if( xEntryTimeSet == pdFALSE )
 8001da0:	b916      	cbnz	r6, 8001da8 <xQueueGenericReceive+0x7c>
					vTaskSetTimeOutState( &xTimeOut );
 8001da2:	a802      	add	r0, sp, #8
 8001da4:	f000 fc4c 	bl	8002640 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8001da8:	f7ff fbd6 	bl	8001558 <vPortExitCritical>
		vTaskSuspendAll();
 8001dac:	f000 f9f0 	bl	8002190 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001db0:	f7ff fbb0 	bl	8001514 <vPortEnterCritical>
 8001db4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001db8:	2bff      	cmp	r3, #255	; 0xff
 8001dba:	bf08      	it	eq
 8001dbc:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8001dc0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001dc4:	2bff      	cmp	r3, #255	; 0xff
 8001dc6:	bf08      	it	eq
 8001dc8:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8001dcc:	f7ff fbc4 	bl	8001558 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001dd0:	a901      	add	r1, sp, #4
 8001dd2:	a802      	add	r0, sp, #8
 8001dd4:	f000 fc44 	bl	8002660 <xTaskCheckForTimeOut>
 8001dd8:	2800      	cmp	r0, #0
 8001dda:	d152      	bne.n	8001e82 <xQueueGenericReceive+0x156>
	taskENTER_CRITICAL();
 8001ddc:	f7ff fb9a 	bl	8001514 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001de0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8001de2:	f7ff fbb9 	bl	8001558 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001de6:	2d00      	cmp	r5, #0
 8001de8:	d145      	bne.n	8001e76 <xQueueGenericReceive+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001dea:	6823      	ldr	r3, [r4, #0]
 8001dec:	b933      	cbnz	r3, 8001dfc <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
 8001dee:	f7ff fb91 	bl	8001514 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8001df2:	6860      	ldr	r0, [r4, #4]
 8001df4:	f000 fc84 	bl	8002700 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8001df8:	f7ff fbae 	bl	8001558 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001dfc:	9901      	ldr	r1, [sp, #4]
 8001dfe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001e02:	f000 fbc1 	bl	8002588 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001e06:	4620      	mov	r0, r4
 8001e08:	f7ff fdec 	bl	80019e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001e0c:	f000 fa60 	bl	80022d0 <xTaskResumeAll>
 8001e10:	b938      	cbnz	r0, 8001e22 <xQueueGenericReceive+0xf6>
					portYIELD_WITHIN_API();
 8001e12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001e16:	f8ca 3000 	str.w	r3, [sl]
 8001e1a:	f3bf 8f4f 	dsb	sy
 8001e1e:	f3bf 8f6f 	isb	sy
 8001e22:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8001e24:	f7ff fb76 	bl	8001514 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001e28:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001e2a:	2d00      	cmp	r5, #0
 8001e2c:	d0b2      	beq.n	8001d94 <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001e2e:	4641      	mov	r1, r8
 8001e30:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001e32:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001e34:	f7ff fdc1 	bl	80019ba <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8001e38:	f1b9 0f00 	cmp.w	r9, #0
 8001e3c:	d1a3      	bne.n	8001d86 <xQueueGenericReceive+0x5a>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001e3e:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8001e40:	3d01      	subs	r5, #1
 8001e42:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001e44:	b913      	cbnz	r3, 8001e4c <xQueueGenericReceive+0x120>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8001e46:	f000 fcf1 	bl	800282c <pvTaskIncrementMutexHeldCount>
 8001e4a:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e4c:	6923      	ldr	r3, [r4, #16]
 8001e4e:	b163      	cbz	r3, 8001e6a <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e50:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e54:	f000 fbb2 	bl	80025bc <xTaskRemoveFromEventList>
 8001e58:	b138      	cbz	r0, 8001e6a <xQueueGenericReceive+0x13e>
							queueYIELD_IF_USING_PREEMPTION();
 8001e5a:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <xQueueGenericReceive+0x184>)
 8001e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	f3bf 8f4f 	dsb	sy
 8001e66:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001e6a:	f7ff fb75 	bl	8001558 <vPortExitCritical>
				return pdPASS;
 8001e6e:	2001      	movs	r0, #1
}
 8001e70:	b004      	add	sp, #16
 8001e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8001e76:	4620      	mov	r0, r4
 8001e78:	f7ff fdb4 	bl	80019e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001e7c:	f000 fa28 	bl	80022d0 <xTaskResumeAll>
 8001e80:	e7cf      	b.n	8001e22 <xQueueGenericReceive+0xf6>
			prvUnlockQueue( pxQueue );
 8001e82:	4620      	mov	r0, r4
 8001e84:	f7ff fdae 	bl	80019e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001e88:	f000 fa22 	bl	80022d0 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8001e8c:	f7ff fb42 	bl	8001514 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001e90:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8001e92:	f7ff fb61 	bl	8001558 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001e96:	2d00      	cmp	r5, #0
 8001e98:	d1c3      	bne.n	8001e22 <xQueueGenericReceive+0xf6>
 8001e9a:	e77f      	b.n	8001d9c <xQueueGenericReceive+0x70>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e9c:	f000 fc20 	bl	80026e0 <xTaskGetSchedulerState>
 8001ea0:	2800      	cmp	r0, #0
 8001ea2:	f43f af63 	beq.w	8001d6c <xQueueGenericReceive+0x40>
 8001ea6:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8001ea8:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8001eaa:	f8df a004 	ldr.w	sl, [pc, #4]	; 8001eb0 <xQueueGenericReceive+0x184>
 8001eae:	e7b9      	b.n	8001e24 <xQueueGenericReceive+0xf8>
 8001eb0:	e000ed04 	.word	0xe000ed04

08001eb4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001eb4:	4a06      	ldr	r2, [pc, #24]	; (8001ed0 <prvResetNextTaskUnblockTime+0x1c>)
 8001eb6:	6813      	ldr	r3, [r2, #0]
 8001eb8:	6819      	ldr	r1, [r3, #0]
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <prvResetNextTaskUnblockTime+0x20>)
 8001ebc:	b919      	cbnz	r1, 8001ec6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001ebe:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001eca:	68d2      	ldr	r2, [r2, #12]
 8001ecc:	6852      	ldr	r2, [r2, #4]
 8001ece:	e7f8      	b.n	8001ec2 <prvResetNextTaskUnblockTime+0xe>
 8001ed0:	20003c4c 	.word	0x20003c4c
 8001ed4:	20003d24 	.word	0x20003d24

08001ed8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001eda:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001edc:	4e1b      	ldr	r6, [pc, #108]	; (8001f4c <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8001ede:	681d      	ldr	r5, [r3, #0]
{
 8001ee0:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ee2:	6830      	ldr	r0, [r6, #0]
 8001ee4:	3004      	adds	r0, #4
{
 8001ee6:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ee8:	f7ff faa3 	bl	8001432 <uxListRemove>
 8001eec:	4633      	mov	r3, r6
 8001eee:	b940      	cbnz	r0, 8001f02 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001ef0:	6831      	ldr	r1, [r6, #0]
 8001ef2:	4e17      	ldr	r6, [pc, #92]	; (8001f50 <prvAddCurrentTaskToDelayedList+0x78>)
 8001ef4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001ef6:	6832      	ldr	r2, [r6, #0]
 8001ef8:	2001      	movs	r0, #1
 8001efa:	4088      	lsls	r0, r1
 8001efc:	ea22 0200 	bic.w	r2, r2, r0
 8001f00:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001f02:	1c62      	adds	r2, r4, #1
 8001f04:	d107      	bne.n	8001f16 <prvAddCurrentTaskToDelayedList+0x3e>
 8001f06:	b137      	cbz	r7, 8001f16 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f08:	6819      	ldr	r1, [r3, #0]
 8001f0a:	4812      	ldr	r0, [pc, #72]	; (8001f54 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001f0c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001f0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f12:	f7ff ba6b 	b.w	80013ec <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001f16:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001f18:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8001f1a:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001f1c:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8001f1e:	d907      	bls.n	8001f30 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f20:	4a0d      	ldr	r2, [pc, #52]	; (8001f58 <prvAddCurrentTaskToDelayedList+0x80>)
 8001f22:	6810      	ldr	r0, [r2, #0]
 8001f24:	6819      	ldr	r1, [r3, #0]
}
 8001f26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f2a:	3104      	adds	r1, #4
 8001f2c:	f7ff ba6a 	b.w	8001404 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f30:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <prvAddCurrentTaskToDelayedList+0x84>)
 8001f32:	6810      	ldr	r0, [r2, #0]
 8001f34:	6819      	ldr	r1, [r3, #0]
 8001f36:	3104      	adds	r1, #4
 8001f38:	f7ff fa64 	bl	8001404 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <prvAddCurrentTaskToDelayedList+0x88>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8001f42:	bf38      	it	cc
 8001f44:	601c      	strcc	r4, [r3, #0]
 8001f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f48:	20003d6c 	.word	0x20003d6c
 8001f4c:	20003c48 	.word	0x20003c48
 8001f50:	20003cf4 	.word	0x20003cf4
 8001f54:	20003d44 	.word	0x20003d44
 8001f58:	20003c50 	.word	0x20003c50
 8001f5c:	20003c4c 	.word	0x20003c4c
 8001f60:	20003d24 	.word	0x20003d24

08001f64 <prvTaskIsTaskSuspended.part.0>:
 8001f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f68:	f383 8811 	msr	BASEPRI, r3
 8001f6c:	f3bf 8f6f 	isb	sy
 8001f70:	f3bf 8f4f 	dsb	sy
 8001f74:	e7fe      	b.n	8001f74 <prvTaskIsTaskSuspended.part.0+0x10>
	...

08001f78 <xTaskCreate>:
	{
 8001f78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f7c:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8001f80:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f82:	4650      	mov	r0, sl
	{
 8001f84:	460f      	mov	r7, r1
 8001f86:	4699      	mov	r9, r3
 8001f88:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f8a:	f7ff fc1d 	bl	80017c8 <pvPortMalloc>
			if( pxStack != NULL )
 8001f8e:	4605      	mov	r5, r0
 8001f90:	2800      	cmp	r0, #0
 8001f92:	f000 8096 	beq.w	80020c2 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001f96:	2054      	movs	r0, #84	; 0x54
 8001f98:	f7ff fc16 	bl	80017c8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001f9c:	4604      	mov	r4, r0
 8001f9e:	2800      	cmp	r0, #0
 8001fa0:	f000 808c 	beq.w	80020bc <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001fa4:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8001fa8:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001faa:	4455      	add	r5, sl
 8001fac:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001fae:	f025 0a07 	bic.w	sl, r5, #7
 8001fb2:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8001fb6:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001fb8:	7859      	ldrb	r1, [r3, #1]
 8001fba:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8001fbe:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001fc2:	b109      	cbz	r1, 8001fc8 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001fc4:	42bb      	cmp	r3, r7
 8001fc6:	d1f7      	bne.n	8001fb8 <xTaskCreate+0x40>
 8001fc8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001fca:	2d06      	cmp	r5, #6
 8001fcc:	bf28      	it	cs
 8001fce:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001fd0:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001fd4:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8001fd6:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001fd8:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001fda:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001fdc:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8001fe0:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001fe4:	f7ff f9ff 	bl	80013e6 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fe8:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001fec:	f104 0018 	add.w	r0, r4, #24
 8001ff0:	f7ff f9f9 	bl	80013e6 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001ff4:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001ff8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ffa:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001ffc:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001ffe:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002002:	464a      	mov	r2, r9
 8002004:	4641      	mov	r1, r8
 8002006:	4650      	mov	r0, sl
 8002008:	f7ff fa56 	bl	80014b8 <pxPortInitialiseStack>
 800200c:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800200e:	b106      	cbz	r6, 8002012 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002010:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8002012:	f7ff fa7f 	bl	8001514 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002016:	4b32      	ldr	r3, [pc, #200]	; (80020e0 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8002018:	4e32      	ldr	r6, [pc, #200]	; (80020e4 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8002110 <xTaskCreate+0x198>
 8002020:	3201      	adds	r2, #1
 8002022:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002024:	6835      	ldr	r5, [r6, #0]
 8002026:	2d00      	cmp	r5, #0
 8002028:	d14e      	bne.n	80020c8 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 800202a:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d11d      	bne.n	800206e <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002032:	eb08 0005 	add.w	r0, r8, r5
 8002036:	3514      	adds	r5, #20
 8002038:	f7ff f9ca 	bl	80013d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800203c:	2d8c      	cmp	r5, #140	; 0x8c
 800203e:	d1f8      	bne.n	8002032 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8002040:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8002114 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8002044:	4d28      	ldr	r5, [pc, #160]	; (80020e8 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8002046:	4648      	mov	r0, r9
 8002048:	f7ff f9c2 	bl	80013d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800204c:	4628      	mov	r0, r5
 800204e:	f7ff f9bf 	bl	80013d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002052:	4826      	ldr	r0, [pc, #152]	; (80020ec <xTaskCreate+0x174>)
 8002054:	f7ff f9bc 	bl	80013d0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8002058:	4825      	ldr	r0, [pc, #148]	; (80020f0 <xTaskCreate+0x178>)
 800205a:	f7ff f9b9 	bl	80013d0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800205e:	4825      	ldr	r0, [pc, #148]	; (80020f4 <xTaskCreate+0x17c>)
 8002060:	f7ff f9b6 	bl	80013d0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8002064:	4b24      	ldr	r3, [pc, #144]	; (80020f8 <xTaskCreate+0x180>)
 8002066:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800206a:	4b24      	ldr	r3, [pc, #144]	; (80020fc <xTaskCreate+0x184>)
 800206c:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800206e:	4a24      	ldr	r2, [pc, #144]	; (8002100 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8002070:	4924      	ldr	r1, [pc, #144]	; (8002104 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8002072:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002074:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002076:	3301      	adds	r3, #1
 8002078:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800207a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800207c:	2501      	movs	r5, #1
 800207e:	fa05 f302 	lsl.w	r3, r5, r2
 8002082:	4303      	orrs	r3, r0
 8002084:	2014      	movs	r0, #20
 8002086:	600b      	str	r3, [r1, #0]
 8002088:	fb00 8002 	mla	r0, r0, r2, r8
 800208c:	4639      	mov	r1, r7
 800208e:	f7ff f9ad 	bl	80013ec <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002092:	f7ff fa61 	bl	8001558 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002096:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <xTaskCreate+0x190>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	b163      	cbz	r3, 80020b6 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800209c:	6833      	ldr	r3, [r6, #0]
 800209e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d207      	bcs.n	80020b6 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 80020a6:	4b19      	ldr	r3, [pc, #100]	; (800210c <xTaskCreate+0x194>)
 80020a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	f3bf 8f4f 	dsb	sy
 80020b2:	f3bf 8f6f 	isb	sy
	}
 80020b6:	4628      	mov	r0, r5
 80020b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 80020bc:	4628      	mov	r0, r5
 80020be:	f7ff fc11 	bl	80018e4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80020c2:	f04f 35ff 	mov.w	r5, #4294967295
 80020c6:	e7f6      	b.n	80020b6 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 80020c8:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <xTaskCreate+0x190>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1ce      	bne.n	800206e <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80020d0:	6833      	ldr	r3, [r6, #0]
 80020d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80020d6:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80020d8:	bf98      	it	ls
 80020da:	6034      	strls	r4, [r6, #0]
 80020dc:	e7c7      	b.n	800206e <xTaskCreate+0xf6>
 80020de:	bf00      	nop
 80020e0:	20003ce0 	.word	0x20003ce0
 80020e4:	20003c48 	.word	0x20003c48
 80020e8:	20003d0c 	.word	0x20003d0c
 80020ec:	20003d2c 	.word	0x20003d2c
 80020f0:	20003d58 	.word	0x20003d58
 80020f4:	20003d44 	.word	0x20003d44
 80020f8:	20003c4c 	.word	0x20003c4c
 80020fc:	20003c50 	.word	0x20003c50
 8002100:	20003cf0 	.word	0x20003cf0
 8002104:	20003cf4 	.word	0x20003cf4
 8002108:	20003d40 	.word	0x20003d40
 800210c:	e000ed04 	.word	0xe000ed04
 8002110:	20003c54 	.word	0x20003c54
 8002114:	20003cf8 	.word	0x20003cf8

08002118 <vTaskStartScheduler>:
{
 8002118:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800211a:	4b17      	ldr	r3, [pc, #92]	; (8002178 <vTaskStartScheduler+0x60>)
 800211c:	9301      	str	r3, [sp, #4]
 800211e:	2400      	movs	r4, #0
 8002120:	9400      	str	r4, [sp, #0]
 8002122:	4623      	mov	r3, r4
 8002124:	2280      	movs	r2, #128	; 0x80
 8002126:	4915      	ldr	r1, [pc, #84]	; (800217c <vTaskStartScheduler+0x64>)
 8002128:	4815      	ldr	r0, [pc, #84]	; (8002180 <vTaskStartScheduler+0x68>)
 800212a:	f7ff ff25 	bl	8001f78 <xTaskCreate>
	if( xReturn == pdPASS )
 800212e:	2801      	cmp	r0, #1
 8002130:	d114      	bne.n	800215c <vTaskStartScheduler+0x44>
 8002132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002136:	f383 8811 	msr	BASEPRI, r3
 800213a:	f3bf 8f6f 	isb	sy
 800213e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002142:	4b10      	ldr	r3, [pc, #64]	; (8002184 <vTaskStartScheduler+0x6c>)
 8002144:	f04f 32ff 	mov.w	r2, #4294967295
 8002148:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800214a:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <vTaskStartScheduler+0x70>)
 800214c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800214e:	4b0f      	ldr	r3, [pc, #60]	; (800218c <vTaskStartScheduler+0x74>)
 8002150:	601c      	str	r4, [r3, #0]
}
 8002152:	b002      	add	sp, #8
 8002154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8002158:	f7ff ba6e 	b.w	8001638 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800215c:	3001      	adds	r0, #1
 800215e:	d108      	bne.n	8002172 <vTaskStartScheduler+0x5a>
 8002160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002164:	f383 8811 	msr	BASEPRI, r3
 8002168:	f3bf 8f6f 	isb	sy
 800216c:	f3bf 8f4f 	dsb	sy
 8002170:	e7fe      	b.n	8002170 <vTaskStartScheduler+0x58>
}
 8002172:	b002      	add	sp, #8
 8002174:	bd10      	pop	{r4, pc}
 8002176:	bf00      	nop
 8002178:	20003d20 	.word	0x20003d20
 800217c:	08002d58 	.word	0x08002d58
 8002180:	080024a1 	.word	0x080024a1
 8002184:	20003d24 	.word	0x20003d24
 8002188:	20003d40 	.word	0x20003d40
 800218c:	20003d6c 	.word	0x20003d6c

08002190 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002190:	4a02      	ldr	r2, [pc, #8]	; (800219c <vTaskSuspendAll+0xc>)
 8002192:	6813      	ldr	r3, [r2, #0]
 8002194:	3301      	adds	r3, #1
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	20003cec 	.word	0x20003cec

080021a0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80021a0:	4b01      	ldr	r3, [pc, #4]	; (80021a8 <xTaskGetTickCount+0x8>)
 80021a2:	6818      	ldr	r0, [r3, #0]
}
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	20003d6c 	.word	0x20003d6c

080021ac <xTaskIncrementTick>:
{
 80021ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021b0:	4b3c      	ldr	r3, [pc, #240]	; (80022a4 <xTaskIncrementTick+0xf8>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d153      	bne.n	8002260 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 80021b8:	4b3b      	ldr	r3, [pc, #236]	; (80022a8 <xTaskIncrementTick+0xfc>)
 80021ba:	681c      	ldr	r4, [r3, #0]
 80021bc:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80021be:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 80021c0:	b9bc      	cbnz	r4, 80021f2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80021c2:	4b3a      	ldr	r3, [pc, #232]	; (80022ac <xTaskIncrementTick+0x100>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	b142      	cbz	r2, 80021dc <xTaskIncrementTick+0x30>
 80021ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ce:	f383 8811 	msr	BASEPRI, r3
 80021d2:	f3bf 8f6f 	isb	sy
 80021d6:	f3bf 8f4f 	dsb	sy
 80021da:	e7fe      	b.n	80021da <xTaskIncrementTick+0x2e>
 80021dc:	4a34      	ldr	r2, [pc, #208]	; (80022b0 <xTaskIncrementTick+0x104>)
 80021de:	6819      	ldr	r1, [r3, #0]
 80021e0:	6810      	ldr	r0, [r2, #0]
 80021e2:	6018      	str	r0, [r3, #0]
 80021e4:	6011      	str	r1, [r2, #0]
 80021e6:	4a33      	ldr	r2, [pc, #204]	; (80022b4 <xTaskIncrementTick+0x108>)
 80021e8:	6813      	ldr	r3, [r2, #0]
 80021ea:	3301      	adds	r3, #1
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	f7ff fe61 	bl	8001eb4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80021f2:	4d31      	ldr	r5, [pc, #196]	; (80022b8 <xTaskIncrementTick+0x10c>)
 80021f4:	4f31      	ldr	r7, [pc, #196]	; (80022bc <xTaskIncrementTick+0x110>)
 80021f6:	682b      	ldr	r3, [r5, #0]
 80021f8:	429c      	cmp	r4, r3
 80021fa:	f04f 0b00 	mov.w	fp, #0
 80021fe:	d33e      	bcc.n	800227e <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002200:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80022ac <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8002204:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80022cc <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002208:	f8d8 2000 	ldr.w	r2, [r8]
 800220c:	6812      	ldr	r2, [r2, #0]
 800220e:	bb72      	cbnz	r2, 800226e <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002210:	f04f 32ff 	mov.w	r2, #4294967295
 8002214:	602a      	str	r2, [r5, #0]
					break;
 8002216:	e032      	b.n	800227e <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002218:	f106 0a04 	add.w	sl, r6, #4
 800221c:	4650      	mov	r0, sl
 800221e:	f7ff f908 	bl	8001432 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002222:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002224:	b119      	cbz	r1, 800222e <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002226:	f106 0018 	add.w	r0, r6, #24
 800222a:	f7ff f902 	bl	8001432 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800222e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002230:	f8d9 3000 	ldr.w	r3, [r9]
 8002234:	2201      	movs	r2, #1
 8002236:	fa02 f100 	lsl.w	r1, r2, r0
 800223a:	4319      	orrs	r1, r3
 800223c:	4b20      	ldr	r3, [pc, #128]	; (80022c0 <xTaskIncrementTick+0x114>)
 800223e:	f8c9 1000 	str.w	r1, [r9]
 8002242:	f04f 0e14 	mov.w	lr, #20
 8002246:	4651      	mov	r1, sl
 8002248:	fb0e 3000 	mla	r0, lr, r0, r3
 800224c:	f7ff f8ce 	bl	80013ec <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002250:	6838      	ldr	r0, [r7, #0]
 8002252:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002254:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8002256:	4291      	cmp	r1, r2
 8002258:	bf28      	it	cs
 800225a:	f04f 0b01 	movcs.w	fp, #1
 800225e:	e7d3      	b.n	8002208 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8002260:	4a18      	ldr	r2, [pc, #96]	; (80022c4 <xTaskIncrementTick+0x118>)
 8002262:	6813      	ldr	r3, [r2, #0]
 8002264:	3301      	adds	r3, #1
 8002266:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8002268:	f04f 0b00 	mov.w	fp, #0
 800226c:	e011      	b.n	8002292 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800226e:	f8d8 2000 	ldr.w	r2, [r8]
 8002272:	68d2      	ldr	r2, [r2, #12]
 8002274:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002276:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002278:	428c      	cmp	r4, r1
 800227a:	d2cd      	bcs.n	8002218 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 800227c:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <xTaskIncrementTick+0x114>)
 8002282:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002284:	2214      	movs	r2, #20
 8002286:	434a      	muls	r2, r1
 8002288:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800228a:	2a02      	cmp	r2, #2
 800228c:	bf28      	it	cs
 800228e:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8002292:	4a0d      	ldr	r2, [pc, #52]	; (80022c8 <xTaskIncrementTick+0x11c>)
 8002294:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8002296:	2a00      	cmp	r2, #0
 8002298:	bf18      	it	ne
 800229a:	f04f 0b01 	movne.w	fp, #1
}
 800229e:	4658      	mov	r0, fp
 80022a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022a4:	20003cec 	.word	0x20003cec
 80022a8:	20003d6c 	.word	0x20003d6c
 80022ac:	20003c4c 	.word	0x20003c4c
 80022b0:	20003c50 	.word	0x20003c50
 80022b4:	20003d28 	.word	0x20003d28
 80022b8:	20003d24 	.word	0x20003d24
 80022bc:	20003c48 	.word	0x20003c48
 80022c0:	20003c54 	.word	0x20003c54
 80022c4:	20003ce8 	.word	0x20003ce8
 80022c8:	20003d70 	.word	0x20003d70
 80022cc:	20003cf4 	.word	0x20003cf4

080022d0 <xTaskResumeAll>:
{
 80022d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80022d4:	4c31      	ldr	r4, [pc, #196]	; (800239c <xTaskResumeAll+0xcc>)
 80022d6:	6823      	ldr	r3, [r4, #0]
 80022d8:	b943      	cbnz	r3, 80022ec <xTaskResumeAll+0x1c>
 80022da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022de:	f383 8811 	msr	BASEPRI, r3
 80022e2:	f3bf 8f6f 	isb	sy
 80022e6:	f3bf 8f4f 	dsb	sy
 80022ea:	e7fe      	b.n	80022ea <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80022ec:	f7ff f912 	bl	8001514 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80022f0:	6823      	ldr	r3, [r4, #0]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022f6:	6824      	ldr	r4, [r4, #0]
 80022f8:	b12c      	cbz	r4, 8002306 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80022fa:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80022fc:	f7ff f92c 	bl	8001558 <vPortExitCritical>
}
 8002300:	4620      	mov	r0, r4
 8002302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002306:	4b26      	ldr	r3, [pc, #152]	; (80023a0 <xTaskResumeAll+0xd0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f5      	beq.n	80022fa <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800230e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80023b8 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8002312:	4f24      	ldr	r7, [pc, #144]	; (80023a4 <xTaskResumeAll+0xd4>)
 8002314:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80023bc <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002318:	f8d9 3000 	ldr.w	r3, [r9]
 800231c:	b9e3      	cbnz	r3, 8002358 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 800231e:	b10c      	cbz	r4, 8002324 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8002320:	f7ff fdc8 	bl	8001eb4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002324:	4d20      	ldr	r5, [pc, #128]	; (80023a8 <xTaskResumeAll+0xd8>)
 8002326:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002328:	b144      	cbz	r4, 800233c <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 800232a:	4e20      	ldr	r6, [pc, #128]	; (80023ac <xTaskResumeAll+0xdc>)
 800232c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800232e:	f7ff ff3d 	bl	80021ac <xTaskIncrementTick>
 8002332:	b100      	cbz	r0, 8002336 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8002334:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002336:	3c01      	subs	r4, #1
 8002338:	d1f9      	bne.n	800232e <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 800233a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800233c:	4b1b      	ldr	r3, [pc, #108]	; (80023ac <xTaskResumeAll+0xdc>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0da      	beq.n	80022fa <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8002344:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <xTaskResumeAll+0xe0>)
 8002346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	f3bf 8f4f 	dsb	sy
 8002350:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002354:	2401      	movs	r4, #1
 8002356:	e7d1      	b.n	80022fc <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002358:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800235c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800235e:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002360:	f104 0018 	add.w	r0, r4, #24
 8002364:	f7ff f865 	bl	8001432 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002368:	4630      	mov	r0, r6
 800236a:	f7ff f862 	bl	8001432 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800236e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002370:	6839      	ldr	r1, [r7, #0]
 8002372:	2501      	movs	r5, #1
 8002374:	fa05 f302 	lsl.w	r3, r5, r2
 8002378:	2014      	movs	r0, #20
 800237a:	430b      	orrs	r3, r1
 800237c:	fb00 8002 	mla	r0, r0, r2, r8
 8002380:	4631      	mov	r1, r6
 8002382:	603b      	str	r3, [r7, #0]
 8002384:	f7ff f832 	bl	80013ec <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002388:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <xTaskResumeAll+0xe4>)
 800238a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002390:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8002392:	bf24      	itt	cs
 8002394:	4b05      	ldrcs	r3, [pc, #20]	; (80023ac <xTaskResumeAll+0xdc>)
 8002396:	601d      	strcs	r5, [r3, #0]
 8002398:	e7be      	b.n	8002318 <xTaskResumeAll+0x48>
 800239a:	bf00      	nop
 800239c:	20003cec 	.word	0x20003cec
 80023a0:	20003ce0 	.word	0x20003ce0
 80023a4:	20003cf4 	.word	0x20003cf4
 80023a8:	20003ce8 	.word	0x20003ce8
 80023ac:	20003d70 	.word	0x20003d70
 80023b0:	e000ed04 	.word	0xe000ed04
 80023b4:	20003c48 	.word	0x20003c48
 80023b8:	20003d2c 	.word	0x20003d2c
 80023bc:	20003c54 	.word	0x20003c54

080023c0 <vTaskDelayUntil>:
	{
 80023c0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
 80023c2:	b940      	cbnz	r0, 80023d6 <vTaskDelayUntil+0x16>
 80023c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c8:	f383 8811 	msr	BASEPRI, r3
 80023cc:	f3bf 8f6f 	isb	sy
 80023d0:	f3bf 8f4f 	dsb	sy
 80023d4:	e7fe      	b.n	80023d4 <vTaskDelayUntil+0x14>
		configASSERT( ( xTimeIncrement > 0U ) );
 80023d6:	b941      	cbnz	r1, 80023ea <vTaskDelayUntil+0x2a>
 80023d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023dc:	f383 8811 	msr	BASEPRI, r3
 80023e0:	f3bf 8f6f 	isb	sy
 80023e4:	f3bf 8f4f 	dsb	sy
 80023e8:	e7fe      	b.n	80023e8 <vTaskDelayUntil+0x28>
		configASSERT( uxSchedulerSuspended == 0 );
 80023ea:	4b18      	ldr	r3, [pc, #96]	; (800244c <vTaskDelayUntil+0x8c>)
 80023ec:	681c      	ldr	r4, [r3, #0]
 80023ee:	b144      	cbz	r4, 8002402 <vTaskDelayUntil+0x42>
 80023f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f4:	f383 8811 	msr	BASEPRI, r3
 80023f8:	f3bf 8f6f 	isb	sy
 80023fc:	f3bf 8f4f 	dsb	sy
 8002400:	e7fe      	b.n	8002400 <vTaskDelayUntil+0x40>
		vTaskSuspendAll();
 8002402:	f7ff fec5 	bl	8002190 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 8002406:	4b12      	ldr	r3, [pc, #72]	; (8002450 <vTaskDelayUntil+0x90>)
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002408:	6802      	ldr	r2, [r0, #0]
			const TickType_t xConstTickCount = xTickCount;
 800240a:	681d      	ldr	r5, [r3, #0]
			if( xConstTickCount < *pxPreviousWakeTime )
 800240c:	4295      	cmp	r5, r2
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800240e:	eb01 0302 	add.w	r3, r1, r2
			if( xConstTickCount < *pxPreviousWakeTime )
 8002412:	d217      	bcs.n	8002444 <vTaskDelayUntil+0x84>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002414:	429a      	cmp	r2, r3
 8002416:	d903      	bls.n	8002420 <vTaskDelayUntil+0x60>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002418:	429d      	cmp	r5, r3
 800241a:	bf2c      	ite	cs
 800241c:	2400      	movcs	r4, #0
 800241e:	2401      	movcc	r4, #1
			*pxPreviousWakeTime = xTimeToWake;
 8002420:	6003      	str	r3, [r0, #0]
			if( xShouldDelay != pdFALSE )
 8002422:	b11c      	cbz	r4, 800242c <vTaskDelayUntil+0x6c>
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002424:	2100      	movs	r1, #0
 8002426:	1b58      	subs	r0, r3, r5
 8002428:	f7ff fd56 	bl	8001ed8 <prvAddCurrentTaskToDelayedList>
		xAlreadyYielded = xTaskResumeAll();
 800242c:	f7ff ff50 	bl	80022d0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8002430:	b938      	cbnz	r0, 8002442 <vTaskDelayUntil+0x82>
			portYIELD_WITHIN_API();
 8002432:	4b08      	ldr	r3, [pc, #32]	; (8002454 <vTaskDelayUntil+0x94>)
 8002434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	f3bf 8f4f 	dsb	sy
 800243e:	f3bf 8f6f 	isb	sy
 8002442:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002444:	429a      	cmp	r2, r3
 8002446:	d9e7      	bls.n	8002418 <vTaskDelayUntil+0x58>
					xShouldDelay = pdTRUE;
 8002448:	2401      	movs	r4, #1
 800244a:	e7e9      	b.n	8002420 <vTaskDelayUntil+0x60>
 800244c:	20003cec 	.word	0x20003cec
 8002450:	20003d6c 	.word	0x20003d6c
 8002454:	e000ed04 	.word	0xe000ed04

08002458 <vTaskDelay>:
	{
 8002458:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800245a:	b940      	cbnz	r0, 800246e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800245c:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <vTaskDelay+0x40>)
 800245e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	f3bf 8f4f 	dsb	sy
 8002468:	f3bf 8f6f 	isb	sy
 800246c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800246e:	4b0b      	ldr	r3, [pc, #44]	; (800249c <vTaskDelay+0x44>)
 8002470:	6819      	ldr	r1, [r3, #0]
 8002472:	b141      	cbz	r1, 8002486 <vTaskDelay+0x2e>
 8002474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002478:	f383 8811 	msr	BASEPRI, r3
 800247c:	f3bf 8f6f 	isb	sy
 8002480:	f3bf 8f4f 	dsb	sy
 8002484:	e7fe      	b.n	8002484 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002486:	f7ff fe83 	bl	8002190 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800248a:	f7ff fd25 	bl	8001ed8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800248e:	f7ff ff1f 	bl	80022d0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8002492:	2800      	cmp	r0, #0
 8002494:	d0e2      	beq.n	800245c <vTaskDelay+0x4>
 8002496:	bd08      	pop	{r3, pc}
 8002498:	e000ed04 	.word	0xe000ed04
 800249c:	20003cec 	.word	0x20003cec

080024a0 <prvIdleTask>:
{
 80024a0:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80024a2:	4e17      	ldr	r6, [pc, #92]	; (8002500 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80024a4:	4c17      	ldr	r4, [pc, #92]	; (8002504 <prvIdleTask+0x64>)
 80024a6:	6823      	ldr	r3, [r4, #0]
 80024a8:	b963      	cbnz	r3, 80024c4 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80024aa:	4b17      	ldr	r3, [pc, #92]	; (8002508 <prvIdleTask+0x68>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d9f8      	bls.n	80024a4 <prvIdleTask+0x4>
				taskYIELD();
 80024b2:	4b16      	ldr	r3, [pc, #88]	; (800250c <prvIdleTask+0x6c>)
 80024b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	f3bf 8f4f 	dsb	sy
 80024be:	f3bf 8f6f 	isb	sy
 80024c2:	e7ef      	b.n	80024a4 <prvIdleTask+0x4>
			vTaskSuspendAll();
 80024c4:	f7ff fe64 	bl	8002190 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80024c8:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 80024ca:	f7ff ff01 	bl	80022d0 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 80024ce:	2d00      	cmp	r5, #0
 80024d0:	d0e9      	beq.n	80024a6 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 80024d2:	f7ff f81f 	bl	8001514 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80024d6:	68f3      	ldr	r3, [r6, #12]
 80024d8:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80024da:	1d28      	adds	r0, r5, #4
 80024dc:	f7fe ffa9 	bl	8001432 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80024e0:	4a0b      	ldr	r2, [pc, #44]	; (8002510 <prvIdleTask+0x70>)
 80024e2:	6813      	ldr	r3, [r2, #0]
 80024e4:	3b01      	subs	r3, #1
 80024e6:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80024e8:	6823      	ldr	r3, [r4, #0]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 80024ee:	f7ff f833 	bl	8001558 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80024f2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80024f4:	f7ff f9f6 	bl	80018e4 <vPortFree>
			vPortFree( pxTCB );
 80024f8:	4628      	mov	r0, r5
 80024fa:	f7ff f9f3 	bl	80018e4 <vPortFree>
 80024fe:	e7d2      	b.n	80024a6 <prvIdleTask+0x6>
 8002500:	20003d58 	.word	0x20003d58
 8002504:	20003ce4 	.word	0x20003ce4
 8002508:	20003c54 	.word	0x20003c54
 800250c:	e000ed04 	.word	0xe000ed04
 8002510:	20003ce0 	.word	0x20003ce0

08002514 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002514:	4b17      	ldr	r3, [pc, #92]	; (8002574 <vTaskSwitchContext+0x60>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4b17      	ldr	r3, [pc, #92]	; (8002578 <vTaskSwitchContext+0x64>)
{
 800251a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800251c:	b112      	cbz	r2, 8002524 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800251e:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8002524:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002526:	4b15      	ldr	r3, [pc, #84]	; (800257c <vTaskSwitchContext+0x68>)
 8002528:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800252a:	fab3 f383 	clz	r3, r3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	f1c3 031f 	rsb	r3, r3, #31
 8002534:	2214      	movs	r2, #20
 8002536:	4912      	ldr	r1, [pc, #72]	; (8002580 <vTaskSwitchContext+0x6c>)
 8002538:	435a      	muls	r2, r3
 800253a:	1888      	adds	r0, r1, r2
 800253c:	588c      	ldr	r4, [r1, r2]
 800253e:	b944      	cbnz	r4, 8002552 <vTaskSwitchContext+0x3e>
	__asm volatile
 8002540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002544:	f383 8811 	msr	BASEPRI, r3
 8002548:	f3bf 8f6f 	isb	sy
 800254c:	f3bf 8f4f 	dsb	sy
 8002550:	e7fe      	b.n	8002550 <vTaskSwitchContext+0x3c>
 8002552:	6844      	ldr	r4, [r0, #4]
 8002554:	3208      	adds	r2, #8
 8002556:	6864      	ldr	r4, [r4, #4]
 8002558:	6044      	str	r4, [r0, #4]
 800255a:	440a      	add	r2, r1
 800255c:	4294      	cmp	r4, r2
 800255e:	bf04      	itt	eq
 8002560:	6862      	ldreq	r2, [r4, #4]
 8002562:	6042      	streq	r2, [r0, #4]
 8002564:	2214      	movs	r2, #20
 8002566:	fb02 1303 	mla	r3, r2, r3, r1
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	4b05      	ldr	r3, [pc, #20]	; (8002584 <vTaskSwitchContext+0x70>)
 8002570:	e7d6      	b.n	8002520 <vTaskSwitchContext+0xc>
 8002572:	bf00      	nop
 8002574:	20003cec 	.word	0x20003cec
 8002578:	20003d70 	.word	0x20003d70
 800257c:	20003cf4 	.word	0x20003cf4
 8002580:	20003c54 	.word	0x20003c54
 8002584:	20003c48 	.word	0x20003c48

08002588 <vTaskPlaceOnEventList>:
{
 8002588:	b510      	push	{r4, lr}
 800258a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800258c:	b940      	cbnz	r0, 80025a0 <vTaskPlaceOnEventList+0x18>
 800258e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002592:	f383 8811 	msr	BASEPRI, r3
 8002596:	f3bf 8f6f 	isb	sy
 800259a:	f3bf 8f4f 	dsb	sy
 800259e:	e7fe      	b.n	800259e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <vTaskPlaceOnEventList+0x30>)
 80025a2:	6819      	ldr	r1, [r3, #0]
 80025a4:	3118      	adds	r1, #24
 80025a6:	f7fe ff2d 	bl	8001404 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80025aa:	4620      	mov	r0, r4
 80025ac:	2101      	movs	r1, #1
}
 80025ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80025b2:	f7ff bc91 	b.w	8001ed8 <prvAddCurrentTaskToDelayedList>
 80025b6:	bf00      	nop
 80025b8:	20003c48 	.word	0x20003c48

080025bc <xTaskRemoveFromEventList>:
{
 80025bc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80025be:	68c3      	ldr	r3, [r0, #12]
 80025c0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80025c2:	b944      	cbnz	r4, 80025d6 <xTaskRemoveFromEventList+0x1a>
 80025c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c8:	f383 8811 	msr	BASEPRI, r3
 80025cc:	f3bf 8f6f 	isb	sy
 80025d0:	f3bf 8f4f 	dsb	sy
 80025d4:	e7fe      	b.n	80025d4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80025d6:	f104 0518 	add.w	r5, r4, #24
 80025da:	4628      	mov	r0, r5
 80025dc:	f7fe ff29 	bl	8001432 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025e0:	4b11      	ldr	r3, [pc, #68]	; (8002628 <xTaskRemoveFromEventList+0x6c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	b9e3      	cbnz	r3, 8002620 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80025e6:	1d25      	adds	r5, r4, #4
 80025e8:	4628      	mov	r0, r5
 80025ea:	f7fe ff22 	bl	8001432 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80025ee:	490f      	ldr	r1, [pc, #60]	; (800262c <xTaskRemoveFromEventList+0x70>)
 80025f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80025f2:	6808      	ldr	r0, [r1, #0]
 80025f4:	2301      	movs	r3, #1
 80025f6:	4093      	lsls	r3, r2
 80025f8:	4303      	orrs	r3, r0
 80025fa:	600b      	str	r3, [r1, #0]
 80025fc:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <xTaskRemoveFromEventList+0x74>)
 80025fe:	2014      	movs	r0, #20
 8002600:	4629      	mov	r1, r5
 8002602:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002606:	f7fe fef1 	bl	80013ec <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <xTaskRemoveFromEventList+0x78>)
 800260c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002612:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8002614:	bf83      	ittte	hi
 8002616:	4b08      	ldrhi	r3, [pc, #32]	; (8002638 <xTaskRemoveFromEventList+0x7c>)
 8002618:	2001      	movhi	r0, #1
 800261a:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 800261c:	2000      	movls	r0, #0
}
 800261e:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002620:	4629      	mov	r1, r5
 8002622:	4806      	ldr	r0, [pc, #24]	; (800263c <xTaskRemoveFromEventList+0x80>)
 8002624:	e7ef      	b.n	8002606 <xTaskRemoveFromEventList+0x4a>
 8002626:	bf00      	nop
 8002628:	20003cec 	.word	0x20003cec
 800262c:	20003cf4 	.word	0x20003cf4
 8002630:	20003c54 	.word	0x20003c54
 8002634:	20003c48 	.word	0x20003c48
 8002638:	20003d70 	.word	0x20003d70
 800263c:	20003d2c 	.word	0x20003d2c

08002640 <vTaskSetTimeOutState>:
{
 8002640:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8002642:	b908      	cbnz	r0, 8002648 <vTaskSetTimeOutState+0x8>
 8002644:	f7ff fc8e 	bl	8001f64 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <vTaskSetTimeOutState+0x18>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800264e:	4b03      	ldr	r3, [pc, #12]	; (800265c <vTaskSetTimeOutState+0x1c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6043      	str	r3, [r0, #4]
 8002654:	bd08      	pop	{r3, pc}
 8002656:	bf00      	nop
 8002658:	20003d28 	.word	0x20003d28
 800265c:	20003d6c 	.word	0x20003d6c

08002660 <xTaskCheckForTimeOut>:
{
 8002660:	b538      	push	{r3, r4, r5, lr}
 8002662:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 8002664:	4604      	mov	r4, r0
 8002666:	b940      	cbnz	r0, 800267a <xTaskCheckForTimeOut+0x1a>
 8002668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800266c:	f383 8811 	msr	BASEPRI, r3
 8002670:	f3bf 8f6f 	isb	sy
 8002674:	f3bf 8f4f 	dsb	sy
 8002678:	e7fe      	b.n	8002678 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800267a:	b941      	cbnz	r1, 800268e <xTaskCheckForTimeOut+0x2e>
 800267c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002680:	f383 8811 	msr	BASEPRI, r3
 8002684:	f3bf 8f6f 	isb	sy
 8002688:	f3bf 8f4f 	dsb	sy
 800268c:	e7fe      	b.n	800268c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800268e:	f7fe ff41 	bl	8001514 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8002692:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <xTaskCheckForTimeOut+0x6c>)
 8002694:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8002696:	682b      	ldr	r3, [r5, #0]
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	d010      	beq.n	80026be <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800269c:	4a0c      	ldr	r2, [pc, #48]	; (80026d0 <xTaskCheckForTimeOut+0x70>)
 800269e:	6820      	ldr	r0, [r4, #0]
 80026a0:	6812      	ldr	r2, [r2, #0]
 80026a2:	4290      	cmp	r0, r2
 80026a4:	6862      	ldr	r2, [r4, #4]
 80026a6:	d001      	beq.n	80026ac <xTaskCheckForTimeOut+0x4c>
 80026a8:	4291      	cmp	r1, r2
 80026aa:	d20d      	bcs.n	80026c8 <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80026ac:	1a88      	subs	r0, r1, r2
 80026ae:	4283      	cmp	r3, r0
 80026b0:	d90a      	bls.n	80026c8 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80026b2:	1a5b      	subs	r3, r3, r1
 80026b4:	4413      	add	r3, r2
 80026b6:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80026b8:	4620      	mov	r0, r4
 80026ba:	f7ff ffc1 	bl	8002640 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 80026be:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80026c0:	f7fe ff4a 	bl	8001558 <vPortExitCritical>
}
 80026c4:	4620      	mov	r0, r4
 80026c6:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 80026c8:	2401      	movs	r4, #1
 80026ca:	e7f9      	b.n	80026c0 <xTaskCheckForTimeOut+0x60>
 80026cc:	20003d6c 	.word	0x20003d6c
 80026d0:	20003d28 	.word	0x20003d28

080026d4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80026d4:	4b01      	ldr	r3, [pc, #4]	; (80026dc <vTaskMissedYield+0x8>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	4770      	bx	lr
 80026dc:	20003d70 	.word	0x20003d70

080026e0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <xTaskGetSchedulerState+0x18>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	b133      	cbz	r3, 80026f4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026e6:	4b05      	ldr	r3, [pc, #20]	; (80026fc <xTaskGetSchedulerState+0x1c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80026ec:	bf0c      	ite	eq
 80026ee:	2002      	moveq	r0, #2
 80026f0:	2000      	movne	r0, #0
 80026f2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80026f4:	2001      	movs	r0, #1
	}
 80026f6:	4770      	bx	lr
 80026f8:	20003d40 	.word	0x20003d40
 80026fc:	20003cec 	.word	0x20003cec

08002700 <vTaskPriorityInherit>:
	{
 8002700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8002704:	4604      	mov	r4, r0
 8002706:	2800      	cmp	r0, #0
 8002708:	d038      	beq.n	800277c <vTaskPriorityInherit+0x7c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800270a:	4d1d      	ldr	r5, [pc, #116]	; (8002780 <vTaskPriorityInherit+0x80>)
 800270c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800270e:	682a      	ldr	r2, [r5, #0]
 8002710:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002712:	4293      	cmp	r3, r2
 8002714:	d232      	bcs.n	800277c <vTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002716:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002718:	4e1a      	ldr	r6, [pc, #104]	; (8002784 <vTaskPriorityInherit+0x84>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800271a:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800271c:	bfa1      	itttt	ge
 800271e:	682a      	ldrge	r2, [r5, #0]
 8002720:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8002722:	f1c2 0207 	rsbge	r2, r2, #7
 8002726:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002728:	2714      	movs	r7, #20
 800272a:	6942      	ldr	r2, [r0, #20]
 800272c:	fb07 6303 	mla	r3, r7, r3, r6
 8002730:	429a      	cmp	r2, r3
 8002732:	d120      	bne.n	8002776 <vTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002734:	f100 0804 	add.w	r8, r0, #4
 8002738:	4640      	mov	r0, r8
 800273a:	f7fe fe7a 	bl	8001432 <uxListRemove>
 800273e:	4a12      	ldr	r2, [pc, #72]	; (8002788 <vTaskPriorityInherit+0x88>)
 8002740:	b948      	cbnz	r0, 8002756 <vTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002742:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002744:	4347      	muls	r7, r0
 8002746:	59f3      	ldr	r3, [r6, r7]
 8002748:	b92b      	cbnz	r3, 8002756 <vTaskPriorityInherit+0x56>
 800274a:	6813      	ldr	r3, [r2, #0]
 800274c:	2101      	movs	r1, #1
 800274e:	4081      	lsls	r1, r0
 8002750:	ea23 0301 	bic.w	r3, r3, r1
 8002754:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002756:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8002758:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800275a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800275c:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800275e:	2301      	movs	r3, #1
 8002760:	4083      	lsls	r3, r0
 8002762:	430b      	orrs	r3, r1
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	2314      	movs	r3, #20
 8002768:	4641      	mov	r1, r8
 800276a:	fb03 6000 	mla	r0, r3, r0, r6
	}
 800276e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 8002772:	f7fe be3b 	b.w	80013ec <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002776:	682b      	ldr	r3, [r5, #0]
 8002778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800277c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002780:	20003c48 	.word	0x20003c48
 8002784:	20003c54 	.word	0x20003c54
 8002788:	20003cf4 	.word	0x20003cf4

0800278c <xTaskPriorityDisinherit>:
	{
 800278c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800278e:	4604      	mov	r4, r0
 8002790:	b908      	cbnz	r0, 8002796 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8002792:	2000      	movs	r0, #0
 8002794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8002796:	4b22      	ldr	r3, [pc, #136]	; (8002820 <xTaskPriorityDisinherit+0x94>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4298      	cmp	r0, r3
 800279c:	d008      	beq.n	80027b0 <xTaskPriorityDisinherit+0x24>
 800279e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a2:	f383 8811 	msr	BASEPRI, r3
 80027a6:	f3bf 8f6f 	isb	sy
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	e7fe      	b.n	80027ae <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80027b0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80027b2:	b943      	cbnz	r3, 80027c6 <xTaskPriorityDisinherit+0x3a>
 80027b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b8:	f383 8811 	msr	BASEPRI, r3
 80027bc:	f3bf 8f6f 	isb	sy
 80027c0:	f3bf 8f4f 	dsb	sy
 80027c4:	e7fe      	b.n	80027c4 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80027c6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80027c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 80027ca:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80027cc:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80027ce:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80027d0:	d0df      	beq.n	8002792 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1dd      	bne.n	8002792 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80027d6:	1d05      	adds	r5, r0, #4
 80027d8:	4628      	mov	r0, r5
 80027da:	f7fe fe2a 	bl	8001432 <uxListRemove>
 80027de:	4e11      	ldr	r6, [pc, #68]	; (8002824 <xTaskPriorityDisinherit+0x98>)
 80027e0:	4a11      	ldr	r2, [pc, #68]	; (8002828 <xTaskPriorityDisinherit+0x9c>)
 80027e2:	b950      	cbnz	r0, 80027fa <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80027e4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80027e6:	2114      	movs	r1, #20
 80027e8:	4379      	muls	r1, r7
 80027ea:	5873      	ldr	r3, [r6, r1]
 80027ec:	b92b      	cbnz	r3, 80027fa <xTaskPriorityDisinherit+0x6e>
 80027ee:	6813      	ldr	r3, [r2, #0]
 80027f0:	2001      	movs	r0, #1
 80027f2:	40b8      	lsls	r0, r7
 80027f4:	ea23 0300 	bic.w	r3, r3, r0
 80027f8:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80027fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80027fc:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027fe:	f1c3 0107 	rsb	r1, r3, #7
 8002802:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8002804:	6811      	ldr	r1, [r2, #0]
 8002806:	2401      	movs	r4, #1
 8002808:	fa04 f003 	lsl.w	r0, r4, r3
 800280c:	4308      	orrs	r0, r1
 800280e:	6010      	str	r0, [r2, #0]
 8002810:	2014      	movs	r0, #20
 8002812:	fb00 6003 	mla	r0, r0, r3, r6
 8002816:	4629      	mov	r1, r5
 8002818:	f7fe fde8 	bl	80013ec <vListInsertEnd>
					xReturn = pdTRUE;
 800281c:	4620      	mov	r0, r4
	}
 800281e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002820:	20003c48 	.word	0x20003c48
 8002824:	20003c54 	.word	0x20003c54
 8002828:	20003cf4 	.word	0x20003cf4

0800282c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800282c:	4b04      	ldr	r3, [pc, #16]	; (8002840 <pvTaskIncrementMutexHeldCount+0x14>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	b11a      	cbz	r2, 800283a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8002832:	6819      	ldr	r1, [r3, #0]
 8002834:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8002836:	3201      	adds	r2, #1
 8002838:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 800283a:	6818      	ldr	r0, [r3, #0]
	}
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20003c48 	.word	0x20003c48

08002844 <vButtonTask>:

}

/* USER CODE BEGIN 4 */
void vButtonTask( void *pvParameters )
{
 8002844:	b573      	push	{r0, r1, r4, r5, r6, lr}
  portTickType xLastWakeTime;
  const portTickType xFrequency = 100;
  xLastWakeTime=xTaskGetTickCount();
 8002846:	f7ff fcab 	bl	80021a0 <xTaskGetTickCount>

  for( ;; )
  {
      if((xButtonUserSemaphore!=NULL))
 800284a:	4c0f      	ldr	r4, [pc, #60]	; (8002888 <vButtonTask+0x44>)
      {
         if (xSemaphoreTake(xButtonUserSemaphore, (portTickType)10)==pdTRUE)
         {
                HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800284c:	4d0f      	ldr	r5, [pc, #60]	; (800288c <vButtonTask+0x48>)
                HAL_UART_Transmit(&huart1, (uint8_t *)("Semaphore Take \r \n"), (uint16_t)strlen("Semaphore Take \r \n"), 0xFFFFFFFF);
 800284e:	4e10      	ldr	r6, [pc, #64]	; (8002890 <vButtonTask+0x4c>)
  xLastWakeTime=xTaskGetTickCount();
 8002850:	9001      	str	r0, [sp, #4]
      if((xButtonUserSemaphore!=NULL))
 8002852:	6820      	ldr	r0, [r4, #0]
 8002854:	b190      	cbz	r0, 800287c <vButtonTask+0x38>
         if (xSemaphoreTake(xButtonUserSemaphore, (portTickType)10)==pdTRUE)
 8002856:	2300      	movs	r3, #0
 8002858:	220a      	movs	r2, #10
 800285a:	4619      	mov	r1, r3
 800285c:	f7ff fa66 	bl	8001d2c <xQueueGenericReceive>
 8002860:	2801      	cmp	r0, #1
 8002862:	d10b      	bne.n	800287c <vButtonTask+0x38>
                HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8002864:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002868:	4628      	mov	r0, r5
 800286a:	f7fd ffb8 	bl	80007de <HAL_GPIO_TogglePin>
                HAL_UART_Transmit(&huart1, (uint8_t *)("Semaphore Take \r \n"), (uint16_t)strlen("Semaphore Take \r \n"), 0xFFFFFFFF);
 800286e:	f04f 33ff 	mov.w	r3, #4294967295
 8002872:	2212      	movs	r2, #18
 8002874:	4631      	mov	r1, r6
 8002876:	4807      	ldr	r0, [pc, #28]	; (8002894 <vButtonTask+0x50>)
 8002878:	f7fe fd28 	bl	80012cc <HAL_UART_Transmit>
         }
      }
      vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800287c:	2164      	movs	r1, #100	; 0x64
 800287e:	a801      	add	r0, sp, #4
 8002880:	f7ff fd9e 	bl	80023c0 <vTaskDelayUntil>
      if((xButtonUserSemaphore!=NULL))
 8002884:	e7e5      	b.n	8002852 <vButtonTask+0xe>
 8002886:	bf00      	nop
 8002888:	20003d74 	.word	0x20003d74
 800288c:	40021800 	.word	0x40021800
 8002890:	08002d90 	.word	0x08002d90
 8002894:	20003d80 	.word	0x20003d80

08002898 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002898:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800289a:	2001      	movs	r0, #1
 800289c:	f7fe fd90 	bl	80013c0 <osDelay>
 80028a0:	e7fb      	b.n	800289a <StartDefaultTask+0x2>
	...

080028a4 <HAL_GPIO_EXTI_Callback>:
{
 80028a4:	b507      	push	{r0, r1, r2, lr}
  BaseType_t xHigerPriorityTaskWoken = pdFALSE;
 80028a6:	a902      	add	r1, sp, #8
 80028a8:	2300      	movs	r3, #0
 80028aa:	f841 3d04 	str.w	r3, [r1, #-4]!
  xSemaphoreGiveFromISR(xButtonUserSemaphore, &xHigerPriorityTaskWoken);
 80028ae:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <HAL_GPIO_EXTI_Callback+0x3c>)
 80028b0:	6818      	ldr	r0, [r3, #0]
 80028b2:	f7ff f9e7 	bl	8001c84 <xQueueGiveFromISR>
  portYIELD_FROM_ISR(xHigerPriorityTaskWoken);
 80028b6:	9b01      	ldr	r3, [sp, #4]
 80028b8:	b13b      	cbz	r3, 80028ca <HAL_GPIO_EXTI_Callback+0x26>
 80028ba:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <HAL_GPIO_EXTI_Callback+0x40>)
 80028bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	f3bf 8f4f 	dsb	sy
 80028c6:	f3bf 8f6f 	isb	sy
  HAL_UART_Transmit(&huart1, (uint8_t *)("Semaphore Give From ISR \r \n"), (uint16_t)strlen("Semaphore Give From ISR \r \n"), 0xFFFFFFFF);
 80028ca:	f04f 33ff 	mov.w	r3, #4294967295
 80028ce:	221b      	movs	r2, #27
 80028d0:	4905      	ldr	r1, [pc, #20]	; (80028e8 <HAL_GPIO_EXTI_Callback+0x44>)
 80028d2:	4806      	ldr	r0, [pc, #24]	; (80028ec <HAL_GPIO_EXTI_Callback+0x48>)
 80028d4:	f7fe fcfa 	bl	80012cc <HAL_UART_Transmit>
}
 80028d8:	b003      	add	sp, #12
 80028da:	f85d fb04 	ldr.w	pc, [sp], #4
 80028de:	bf00      	nop
 80028e0:	20003d74 	.word	0x20003d74
 80028e4:	e000ed04 	.word	0xe000ed04
 80028e8:	08002d5d 	.word	0x08002d5d
 80028ec:	20003d80 	.word	0x20003d80

080028f0 <SystemClock_Config>:
{
 80028f0:	b530      	push	{r4, r5, lr}
 80028f2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028f4:	2230      	movs	r2, #48	; 0x30
 80028f6:	2100      	movs	r1, #0
 80028f8:	a808      	add	r0, sp, #32
 80028fa:	f000 fa0e 	bl	8002d1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028fe:	2100      	movs	r1, #0
 8002900:	2214      	movs	r2, #20
 8002902:	a803      	add	r0, sp, #12
 8002904:	f000 fa09 	bl	8002d1a <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8002908:	2400      	movs	r4, #0
 800290a:	4b1d      	ldr	r3, [pc, #116]	; (8002980 <SystemClock_Config+0x90>)
 800290c:	9401      	str	r4, [sp, #4]
 800290e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002910:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002914:	641a      	str	r2, [r3, #64]	; 0x40
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291c:	9301      	str	r3, [sp, #4]
 800291e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002920:	4b18      	ldr	r3, [pc, #96]	; (8002984 <SystemClock_Config+0x94>)
 8002922:	9402      	str	r4, [sp, #8]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002932:	9302      	str	r3, [sp, #8]
 8002934:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002936:	2301      	movs	r3, #1
 8002938:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800293a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800293e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002940:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002944:	22b4      	movs	r2, #180	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002946:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002948:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800294a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 800294c:	2304      	movs	r3, #4
 800294e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002950:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002952:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002954:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002956:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002958:	f7fd ff8e 	bl	8000878 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800295c:	f7fd ff50 	bl	8000800 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002960:	230f      	movs	r3, #15
 8002962:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002964:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002968:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800296a:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800296c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002970:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002972:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002974:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002976:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002978:	f7fe f92e 	bl	8000bd8 <HAL_RCC_ClockConfig>
}
 800297c:	b015      	add	sp, #84	; 0x54
 800297e:	bd30      	pop	{r4, r5, pc}
 8002980:	40023800 	.word	0x40023800
 8002984:	40007000 	.word	0x40007000

08002988 <main>:
{
 8002988:	b500      	push	{lr}
 800298a:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 800298c:	f7fd fdb8 	bl	8000500 <HAL_Init>
  SystemClock_Config();
 8002990:	f7ff ffae 	bl	80028f0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002994:	2214      	movs	r2, #20
 8002996:	2100      	movs	r1, #0
 8002998:	eb0d 0002 	add.w	r0, sp, r2
 800299c:	f000 f9bd 	bl	8002d1a <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029a0:	2400      	movs	r4, #0
 80029a2:	4b3a      	ldr	r3, [pc, #232]	; (8002a8c <main+0x104>)
 80029a4:	9402      	str	r4, [sp, #8]
 80029a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOG, Receiver_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80029a8:	4839      	ldr	r0, [pc, #228]	; (8002a90 <main+0x108>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029ae:	631a      	str	r2, [r3, #48]	; 0x30
 80029b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029b2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80029b6:	9202      	str	r2, [sp, #8]
 80029b8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ba:	9403      	str	r4, [sp, #12]
 80029bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029be:	f042 0201 	orr.w	r2, r2, #1
 80029c2:	631a      	str	r2, [r3, #48]	; 0x30
 80029c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029c6:	f002 0201 	and.w	r2, r2, #1
 80029ca:	9203      	str	r2, [sp, #12]
 80029cc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80029ce:	9404      	str	r4, [sp, #16]
 80029d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029d6:	631a      	str	r2, [r3, #48]	; 0x30
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	f003 0340 	and.w	r3, r3, #64	; 0x40
  HAL_GPIO_WritePin(GPIOG, Receiver_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80029de:	4622      	mov	r2, r4
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80029e0:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOG, Receiver_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80029e2:	f44f 41c4 	mov.w	r1, #25088	; 0x6200
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80029e6:	2501      	movs	r5, #1
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80029e8:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOG, Receiver_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80029ea:	f7fd fef3 	bl	80007d4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029ee:	4b29      	ldr	r3, [pc, #164]	; (8002a94 <main+0x10c>)
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80029f0:	4829      	ldr	r0, [pc, #164]	; (8002a98 <main+0x110>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029f2:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80029f4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80029f6:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80029fa:	f7fd fdff 	bl	80005fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Receiver_Pin|LED3_Pin|LED4_Pin;
 80029fe:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a02:	a905      	add	r1, sp, #20
 8002a04:	4822      	ldr	r0, [pc, #136]	; (8002a90 <main+0x108>)
  GPIO_InitStruct.Pin = Receiver_Pin|LED3_Pin|LED4_Pin;
 8002a06:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a08:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a0e:	f7fd fdf5 	bl	80005fc <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002a12:	2105      	movs	r1, #5
 8002a14:	4622      	mov	r2, r4
 8002a16:	2006      	movs	r0, #6
 8002a18:	f7fd fdb0 	bl	800057c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002a1c:	2006      	movs	r0, #6
 8002a1e:	f7fd fde1 	bl	80005e4 <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 8002a22:	481e      	ldr	r0, [pc, #120]	; (8002a9c <main+0x114>)
  huart1.Init.BaudRate = 115200;
 8002a24:	4a1e      	ldr	r2, [pc, #120]	; (8002aa0 <main+0x118>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a26:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 8002a28:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002a2c:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a30:	230c      	movs	r3, #12
 8002a32:	6143      	str	r3, [r0, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a34:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a36:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a38:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a3a:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a3c:	f7fe fc18 	bl	8001270 <HAL_UART_Init>
  vSemaphoreCreateBinary(xButtonUserSemaphore);
 8002a40:	2203      	movs	r2, #3
 8002a42:	4621      	mov	r1, r4
 8002a44:	4628      	mov	r0, r5
 8002a46:	f7ff f845 	bl	8001ad4 <xQueueGenericCreate>
 8002a4a:	4a16      	ldr	r2, [pc, #88]	; (8002aa4 <main+0x11c>)
 8002a4c:	6010      	str	r0, [r2, #0]
 8002a4e:	b120      	cbz	r0, 8002a5a <main+0xd2>
 8002a50:	4623      	mov	r3, r4
 8002a52:	4622      	mov	r2, r4
 8002a54:	4621      	mov	r1, r4
 8002a56:	f7ff f85f 	bl	8001b18 <xQueueGenericSend>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002a5a:	4d13      	ldr	r5, [pc, #76]	; (8002aa8 <main+0x120>)
 8002a5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a5e:	ac05      	add	r4, sp, #20
 8002a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a62:	682b      	ldr	r3, [r5, #0]
 8002a64:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002a66:	2100      	movs	r1, #0
 8002a68:	a805      	add	r0, sp, #20
 8002a6a:	f7fe fc91 	bl	8001390 <osThreadCreate>
 8002a6e:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <main+0x124>)
  xTaskCreate(vButtonTask, "ButtonTask", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8002a70:	490f      	ldr	r1, [pc, #60]	; (8002ab0 <main+0x128>)
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002a72:	6018      	str	r0, [r3, #0]
  xTaskCreate(vButtonTask, "ButtonTask", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8002a74:	2201      	movs	r2, #1
 8002a76:	2300      	movs	r3, #0
 8002a78:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002a7c:	480d      	ldr	r0, [pc, #52]	; (8002ab4 <main+0x12c>)
 8002a7e:	2280      	movs	r2, #128	; 0x80
 8002a80:	f7ff fa7a 	bl	8001f78 <xTaskCreate>
  osKernelStart();
 8002a84:	f7fe fc7f 	bl	8001386 <osKernelStart>
 8002a88:	e7fe      	b.n	8002a88 <main+0x100>
 8002a8a:	bf00      	nop
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	40021800 	.word	0x40021800
 8002a94:	10110000 	.word	0x10110000
 8002a98:	40020000 	.word	0x40020000
 8002a9c:	20003d80 	.word	0x20003d80
 8002aa0:	40011000 	.word	0x40011000
 8002aa4:	20003d74 	.word	0x20003d74
 8002aa8:	08002d44 	.word	0x08002d44
 8002aac:	20003d7c 	.word	0x20003d7c
 8002ab0:	08002d79 	.word	0x08002d79
 8002ab4:	08002845 	.word	0x08002845

08002ab8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002ab8:	6802      	ldr	r2, [r0, #0]
 8002aba:	4b03      	ldr	r3, [pc, #12]	; (8002ac8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d101      	bne.n	8002ac4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8002ac0:	f7fd bd38 	b.w	8000534 <HAL_IncTick>
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40001000 	.word	0x40001000

08002acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002acc:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ace:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <HAL_MspInit+0x40>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	9200      	str	r2, [sp, #0]
 8002ad4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002ad6:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002ada:	6459      	str	r1, [r3, #68]	; 0x44
 8002adc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002ade:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8002ae2:	9100      	str	r1, [sp, #0]
 8002ae4:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ae6:	9201      	str	r2, [sp, #4]
 8002ae8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002aea:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002aee:	6419      	str	r1, [r3, #64]	; 0x40
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af6:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002af8:	210f      	movs	r1, #15
 8002afa:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002afe:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b00:	f7fd fd3c 	bl	800057c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b04:	b003      	add	sp, #12
 8002b06:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b0a:	bf00      	nop
 8002b0c:	40023800 	.word	0x40023800

08002b10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b10:	b510      	push	{r4, lr}
 8002b12:	4604      	mov	r4, r0
 8002b14:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b16:	2214      	movs	r2, #20
 8002b18:	2100      	movs	r1, #0
 8002b1a:	a803      	add	r0, sp, #12
 8002b1c:	f000 f8fd 	bl	8002d1a <memset>
  if(huart->Instance==USART1)
 8002b20:	6822      	ldr	r2, [r4, #0]
 8002b22:	4b15      	ldr	r3, [pc, #84]	; (8002b78 <HAL_UART_MspInit+0x68>)
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d125      	bne.n	8002b74 <HAL_UART_MspInit+0x64>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b28:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	9101      	str	r1, [sp, #4]
 8002b30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b32:	4812      	ldr	r0, [pc, #72]	; (8002b7c <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b34:	f042 0210 	orr.w	r2, r2, #16
 8002b38:	645a      	str	r2, [r3, #68]	; 0x44
 8002b3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b3c:	f002 0210 	and.w	r2, r2, #16
 8002b40:	9201      	str	r2, [sp, #4]
 8002b42:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b44:	9102      	str	r1, [sp, #8]
 8002b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b48:	f042 0201 	orr.w	r2, r2, #1
 8002b4c:	631a      	str	r2, [r3, #48]	; 0x30
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	9302      	str	r3, [sp, #8]
 8002b56:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b58:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b5c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b62:	2301      	movs	r3, #1
 8002b64:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b66:	2303      	movs	r3, #3
 8002b68:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b6c:	2307      	movs	r3, #7
 8002b6e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b70:	f7fd fd44 	bl	80005fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b74:	b008      	add	sp, #32
 8002b76:	bd10      	pop	{r4, pc}
 8002b78:	40011000 	.word	0x40011000
 8002b7c:	40020000 	.word	0x40020000

08002b80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b80:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002b82:	4601      	mov	r1, r0
{
 8002b84:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002b86:	2200      	movs	r2, #0
 8002b88:	2036      	movs	r0, #54	; 0x36
 8002b8a:	f7fd fcf7 	bl	800057c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8002b8e:	2036      	movs	r0, #54	; 0x36
 8002b90:	f7fd fd28 	bl	80005e4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002b94:	2500      	movs	r5, #0
 8002b96:	4b15      	ldr	r3, [pc, #84]	; (8002bec <HAL_InitTick+0x6c>)
 8002b98:	9502      	str	r5, [sp, #8]
 8002b9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002b9c:	4c14      	ldr	r4, [pc, #80]	; (8002bf0 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002b9e:	f042 0210 	orr.w	r2, r2, #16
 8002ba2:	641a      	str	r2, [r3, #64]	; 0x40
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bac:	a901      	add	r1, sp, #4
 8002bae:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002bb0:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bb2:	f7fe f8cb 	bl	8000d4c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002bb6:	f7fe f8a9 	bl	8000d0c <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8002bba:	4b0e      	ldr	r3, [pc, #56]	; (8002bf4 <HAL_InitTick+0x74>)
 8002bbc:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002bbe:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002bc2:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002bc4:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002bc6:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <HAL_InitTick+0x78>)
 8002bc8:	fbb0 f0f3 	udiv	r0, r0, r3
 8002bcc:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8002bce:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002bd0:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8002bd2:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bd4:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002bd6:	f7fe f9ed 	bl	8000fb4 <HAL_TIM_Base_Init>
 8002bda:	b920      	cbnz	r0, 8002be6 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002bdc:	4620      	mov	r0, r4
 8002bde:	f7fe f8d4 	bl	8000d8a <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8002be2:	b009      	add	sp, #36	; 0x24
 8002be4:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8002be6:	2001      	movs	r0, #1
 8002be8:	e7fb      	b.n	8002be2 <HAL_InitTick+0x62>
 8002bea:	bf00      	nop
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	20003dc0 	.word	0x20003dc0
 8002bf4:	40001000 	.word	0x40001000
 8002bf8:	000f4240 	.word	0x000f4240

08002bfc <NMI_Handler>:
 8002bfc:	4770      	bx	lr

08002bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bfe:	e7fe      	b.n	8002bfe <HardFault_Handler>

08002c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c00:	e7fe      	b.n	8002c00 <MemManage_Handler>

08002c02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c02:	e7fe      	b.n	8002c02 <BusFault_Handler>

08002c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c04:	e7fe      	b.n	8002c04 <UsageFault_Handler>

08002c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c06:	4770      	bx	lr

08002c08 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002c08:	2001      	movs	r0, #1
 8002c0a:	f7fd bded 	b.w	80007e8 <HAL_GPIO_EXTI_IRQHandler>
	...

08002c10 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c10:	4801      	ldr	r0, [pc, #4]	; (8002c18 <TIM6_DAC_IRQHandler+0x8>)
 8002c12:	f7fe b8c9 	b.w	8000da8 <HAL_TIM_IRQHandler>
 8002c16:	bf00      	nop
 8002c18:	20003dc0 	.word	0x20003dc0

08002c1c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c1c:	490f      	ldr	r1, [pc, #60]	; (8002c5c <SystemInit+0x40>)
 8002c1e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002c22:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002c2a:	4b0d      	ldr	r3, [pc, #52]	; (8002c60 <SystemInit+0x44>)
 8002c2c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002c2e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002c30:	f042 0201 	orr.w	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002c36:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002c3e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c42:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002c44:	4a07      	ldr	r2, [pc, #28]	; (8002c64 <SystemInit+0x48>)
 8002c46:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c4e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002c50:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002c56:	608b      	str	r3, [r1, #8]
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	e000ed00 	.word	0xe000ed00
 8002c60:	40023800 	.word	0x40023800
 8002c64:	24003010 	.word	0x24003010

08002c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ca0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c6e:	e003      	b.n	8002c78 <LoopCopyDataInit>

08002c70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c76:	3104      	adds	r1, #4

08002c78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c78:	480b      	ldr	r0, [pc, #44]	; (8002ca8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c7a:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c80:	d3f6      	bcc.n	8002c70 <CopyDataInit>
  ldr  r2, =_sbss
 8002c82:	4a0b      	ldr	r2, [pc, #44]	; (8002cb0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c84:	e002      	b.n	8002c8c <LoopFillZerobss>

08002c86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c88:	f842 3b04 	str.w	r3, [r2], #4

08002c8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c8c:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c90:	d3f9      	bcc.n	8002c86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c92:	f7ff ffc3 	bl	8002c1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c96:	f000 f811 	bl	8002cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c9a:	f7ff fe75 	bl	8002988 <main>
  bx  lr    
 8002c9e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002ca0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002ca4:	08002dcc 	.word	0x08002dcc
  ldr  r0, =_sdata
 8002ca8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002cac:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002cb0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002cb4:	20003dfc 	.word	0x20003dfc

08002cb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cb8:	e7fe      	b.n	8002cb8 <ADC_IRQHandler>
	...

08002cbc <__libc_init_array>:
 8002cbc:	b570      	push	{r4, r5, r6, lr}
 8002cbe:	4e0d      	ldr	r6, [pc, #52]	; (8002cf4 <__libc_init_array+0x38>)
 8002cc0:	4c0d      	ldr	r4, [pc, #52]	; (8002cf8 <__libc_init_array+0x3c>)
 8002cc2:	1ba4      	subs	r4, r4, r6
 8002cc4:	10a4      	asrs	r4, r4, #2
 8002cc6:	2500      	movs	r5, #0
 8002cc8:	42a5      	cmp	r5, r4
 8002cca:	d109      	bne.n	8002ce0 <__libc_init_array+0x24>
 8002ccc:	4e0b      	ldr	r6, [pc, #44]	; (8002cfc <__libc_init_array+0x40>)
 8002cce:	4c0c      	ldr	r4, [pc, #48]	; (8002d00 <__libc_init_array+0x44>)
 8002cd0:	f000 f82c 	bl	8002d2c <_init>
 8002cd4:	1ba4      	subs	r4, r4, r6
 8002cd6:	10a4      	asrs	r4, r4, #2
 8002cd8:	2500      	movs	r5, #0
 8002cda:	42a5      	cmp	r5, r4
 8002cdc:	d105      	bne.n	8002cea <__libc_init_array+0x2e>
 8002cde:	bd70      	pop	{r4, r5, r6, pc}
 8002ce0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ce4:	4798      	blx	r3
 8002ce6:	3501      	adds	r5, #1
 8002ce8:	e7ee      	b.n	8002cc8 <__libc_init_array+0xc>
 8002cea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cee:	4798      	blx	r3
 8002cf0:	3501      	adds	r5, #1
 8002cf2:	e7f2      	b.n	8002cda <__libc_init_array+0x1e>
 8002cf4:	08002dc4 	.word	0x08002dc4
 8002cf8:	08002dc4 	.word	0x08002dc4
 8002cfc:	08002dc4 	.word	0x08002dc4
 8002d00:	08002dc8 	.word	0x08002dc8

08002d04 <memcpy>:
 8002d04:	b510      	push	{r4, lr}
 8002d06:	1e43      	subs	r3, r0, #1
 8002d08:	440a      	add	r2, r1
 8002d0a:	4291      	cmp	r1, r2
 8002d0c:	d100      	bne.n	8002d10 <memcpy+0xc>
 8002d0e:	bd10      	pop	{r4, pc}
 8002d10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d18:	e7f7      	b.n	8002d0a <memcpy+0x6>

08002d1a <memset>:
 8002d1a:	4402      	add	r2, r0
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d100      	bne.n	8002d24 <memset+0xa>
 8002d22:	4770      	bx	lr
 8002d24:	f803 1b01 	strb.w	r1, [r3], #1
 8002d28:	e7f9      	b.n	8002d1e <memset+0x4>
	...

08002d2c <_init>:
 8002d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d2e:	bf00      	nop
 8002d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d32:	bc08      	pop	{r3}
 8002d34:	469e      	mov	lr, r3
 8002d36:	4770      	bx	lr

08002d38 <_fini>:
 8002d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3a:	bf00      	nop
 8002d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d3e:	bc08      	pop	{r3}
 8002d40:	469e      	mov	lr, r3
 8002d42:	4770      	bx	lr
