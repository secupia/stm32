
2-3.UART_Interrupt_LL_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044d8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08004688  08004688  00014688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004970  08004970  00014970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004978  08004978  00014978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800497c  0800497c  0001497c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  08004980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
  8 .bss          00000034  200001dc  200001dc  000201dc  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000210  20000210  000201dc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 11 .debug_info   00008c49  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001ccc  00000000  00000000  00028e55  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000275c  00000000  00000000  0002ab21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005b8  00000000  00000000  0002d280  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000560  00000000  00000000  0002d838  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000322d  00000000  00000000  0002dd98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000027bb  00000000  00000000  00030fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00033780  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001a40  00000000  00000000  000337fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004670 	.word	0x08004670

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	08004670 	.word	0x08004670

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f092 0f00 	teq	r2, #0
 800058a:	bf14      	ite	ne
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e720      	b.n	80003e4 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aedc 	beq.w	8000392 <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6c1      	b.n	8000392 <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpun>:
 8000b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x10>
 8000b4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b52:	d10a      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x20>
 8000b5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0001 	mov.w	r0, #1
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2iz>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b78:	d215      	bcs.n	8000ba6 <__aeabi_d2iz+0x36>
 8000b7a:	d511      	bpl.n	8000ba0 <__aeabi_d2iz+0x30>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d912      	bls.n	8000bac <__aeabi_d2iz+0x3c>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d105      	bne.n	8000bb8 <__aeabi_d2iz+0x48>
 8000bac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_uldivmod>:
 8000bc0:	b953      	cbnz	r3, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc2:	b94a      	cbnz	r2, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	bf08      	it	eq
 8000bc8:	2800      	cmpeq	r0, #0
 8000bca:	bf1c      	itt	ne
 8000bcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd4:	f000 b97a 	b.w	8000ecc <__aeabi_idiv0>
 8000bd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bdc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be0:	f000 f806 	bl	8000bf0 <__udivmoddi4>
 8000be4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bec:	b004      	add	sp, #16
 8000bee:	4770      	bx	lr

08000bf0 <__udivmoddi4>:
 8000bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	460d      	mov	r5, r1
 8000bf8:	4604      	mov	r4, r0
 8000bfa:	9e08      	ldr	r6, [sp, #32]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d151      	bne.n	8000ca4 <__udivmoddi4+0xb4>
 8000c00:	428a      	cmp	r2, r1
 8000c02:	4617      	mov	r7, r2
 8000c04:	d96d      	bls.n	8000ce2 <__udivmoddi4+0xf2>
 8000c06:	fab2 fe82 	clz	lr, r2
 8000c0a:	f1be 0f00 	cmp.w	lr, #0
 8000c0e:	d00b      	beq.n	8000c28 <__udivmoddi4+0x38>
 8000c10:	f1ce 0c20 	rsb	ip, lr, #32
 8000c14:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c18:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c1c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c20:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c24:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c28:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c2c:	0c25      	lsrs	r5, r4, #16
 8000c2e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c32:	fa1f f987 	uxth.w	r9, r7
 8000c36:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c3a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c3e:	fb08 f309 	mul.w	r3, r8, r9
 8000c42:	42ab      	cmp	r3, r5
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x6c>
 8000c46:	19ed      	adds	r5, r5, r7
 8000c48:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c4c:	f080 8123 	bcs.w	8000e96 <__udivmoddi4+0x2a6>
 8000c50:	42ab      	cmp	r3, r5
 8000c52:	f240 8120 	bls.w	8000e96 <__udivmoddi4+0x2a6>
 8000c56:	f1a8 0802 	sub.w	r8, r8, #2
 8000c5a:	443d      	add	r5, r7
 8000c5c:	1aed      	subs	r5, r5, r3
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c64:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c68:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c6c:	fb00 f909 	mul.w	r9, r0, r9
 8000c70:	45a1      	cmp	r9, r4
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x98>
 8000c74:	19e4      	adds	r4, r4, r7
 8000c76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7a:	f080 810a 	bcs.w	8000e92 <__udivmoddi4+0x2a2>
 8000c7e:	45a1      	cmp	r9, r4
 8000c80:	f240 8107 	bls.w	8000e92 <__udivmoddi4+0x2a2>
 8000c84:	3802      	subs	r0, #2
 8000c86:	443c      	add	r4, r7
 8000c88:	eba4 0409 	sub.w	r4, r4, r9
 8000c8c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c90:	2100      	movs	r1, #0
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	d061      	beq.n	8000d5a <__udivmoddi4+0x16a>
 8000c96:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	6034      	str	r4, [r6, #0]
 8000c9e:	6073      	str	r3, [r6, #4]
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	428b      	cmp	r3, r1
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0xc8>
 8000ca8:	2e00      	cmp	r6, #0
 8000caa:	d054      	beq.n	8000d56 <__udivmoddi4+0x166>
 8000cac:	2100      	movs	r1, #0
 8000cae:	e886 0021 	stmia.w	r6, {r0, r5}
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb8:	fab3 f183 	clz	r1, r3
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	f040 808e 	bne.w	8000dde <__udivmoddi4+0x1ee>
 8000cc2:	42ab      	cmp	r3, r5
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xdc>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80fa 	bhi.w	8000ec0 <__udivmoddi4+0x2d0>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb65 0503 	sbc.w	r5, r5, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	46ac      	mov	ip, r5
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d03f      	beq.n	8000d5a <__udivmoddi4+0x16a>
 8000cda:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	b912      	cbnz	r2, 8000cea <__udivmoddi4+0xfa>
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cea:	fab7 fe87 	clz	lr, r7
 8000cee:	f1be 0f00 	cmp.w	lr, #0
 8000cf2:	d134      	bne.n	8000d5e <__udivmoddi4+0x16e>
 8000cf4:	1beb      	subs	r3, r5, r7
 8000cf6:	0c3a      	lsrs	r2, r7, #16
 8000cf8:	fa1f fc87 	uxth.w	ip, r7
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d02:	0c25      	lsrs	r5, r4, #16
 8000d04:	fb02 3318 	mls	r3, r2, r8, r3
 8000d08:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d0c:	fb0c f308 	mul.w	r3, ip, r8
 8000d10:	42ab      	cmp	r3, r5
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x134>
 8000d14:	19ed      	adds	r5, r5, r7
 8000d16:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x132>
 8000d1c:	42ab      	cmp	r3, r5
 8000d1e:	f200 80d1 	bhi.w	8000ec4 <__udivmoddi4+0x2d4>
 8000d22:	4680      	mov	r8, r0
 8000d24:	1aed      	subs	r5, r5, r3
 8000d26:	b2a3      	uxth	r3, r4
 8000d28:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d2c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d30:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d34:	fb0c fc00 	mul.w	ip, ip, r0
 8000d38:	45a4      	cmp	ip, r4
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x15c>
 8000d3c:	19e4      	adds	r4, r4, r7
 8000d3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x15a>
 8000d44:	45a4      	cmp	ip, r4
 8000d46:	f200 80b8 	bhi.w	8000eba <__udivmoddi4+0x2ca>
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	eba4 040c 	sub.w	r4, r4, ip
 8000d50:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d54:	e79d      	b.n	8000c92 <__udivmoddi4+0xa2>
 8000d56:	4631      	mov	r1, r6
 8000d58:	4630      	mov	r0, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	f1ce 0420 	rsb	r4, lr, #32
 8000d62:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d66:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d6a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d6e:	0c3a      	lsrs	r2, r7, #16
 8000d70:	fa25 f404 	lsr.w	r4, r5, r4
 8000d74:	ea48 0803 	orr.w	r8, r8, r3
 8000d78:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d7c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d80:	fb02 4411 	mls	r4, r2, r1, r4
 8000d84:	fa1f fc87 	uxth.w	ip, r7
 8000d88:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d8c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d96:	d909      	bls.n	8000dac <__udivmoddi4+0x1bc>
 8000d98:	19ed      	adds	r5, r5, r7
 8000d9a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d9e:	f080 808a 	bcs.w	8000eb6 <__udivmoddi4+0x2c6>
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	f240 8087 	bls.w	8000eb6 <__udivmoddi4+0x2c6>
 8000da8:	3902      	subs	r1, #2
 8000daa:	443d      	add	r5, r7
 8000dac:	1aeb      	subs	r3, r5, r3
 8000dae:	fa1f f588 	uxth.w	r5, r8
 8000db2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000db6:	fb02 3310 	mls	r3, r2, r0, r3
 8000dba:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dbe:	fb00 f30c 	mul.w	r3, r0, ip
 8000dc2:	42ab      	cmp	r3, r5
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x1e6>
 8000dc6:	19ed      	adds	r5, r5, r7
 8000dc8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dcc:	d26f      	bcs.n	8000eae <__udivmoddi4+0x2be>
 8000dce:	42ab      	cmp	r3, r5
 8000dd0:	d96d      	bls.n	8000eae <__udivmoddi4+0x2be>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	443d      	add	r5, r7
 8000dd6:	1aeb      	subs	r3, r5, r3
 8000dd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ddc:	e78f      	b.n	8000cfe <__udivmoddi4+0x10e>
 8000dde:	f1c1 0720 	rsb	r7, r1, #32
 8000de2:	fa22 f807 	lsr.w	r8, r2, r7
 8000de6:	408b      	lsls	r3, r1
 8000de8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dec:	ea48 0303 	orr.w	r3, r8, r3
 8000df0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000df4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000df8:	40fd      	lsrs	r5, r7
 8000dfa:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dfe:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e02:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e06:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e0a:	fa1f f883 	uxth.w	r8, r3
 8000e0e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e12:	fb09 f408 	mul.w	r4, r9, r8
 8000e16:	42ac      	cmp	r4, r5
 8000e18:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x244>
 8000e22:	18ed      	adds	r5, r5, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	d243      	bcs.n	8000eb2 <__udivmoddi4+0x2c2>
 8000e2a:	42ac      	cmp	r4, r5
 8000e2c:	d941      	bls.n	8000eb2 <__udivmoddi4+0x2c2>
 8000e2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e32:	441d      	add	r5, r3
 8000e34:	1b2d      	subs	r5, r5, r4
 8000e36:	fa1f fe8e 	uxth.w	lr, lr
 8000e3a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e3e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e42:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e46:	fb00 f808 	mul.w	r8, r0, r8
 8000e4a:	45a0      	cmp	r8, r4
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x26e>
 8000e4e:	18e4      	adds	r4, r4, r3
 8000e50:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e54:	d229      	bcs.n	8000eaa <__udivmoddi4+0x2ba>
 8000e56:	45a0      	cmp	r8, r4
 8000e58:	d927      	bls.n	8000eaa <__udivmoddi4+0x2ba>
 8000e5a:	3802      	subs	r0, #2
 8000e5c:	441c      	add	r4, r3
 8000e5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e62:	eba4 0408 	sub.w	r4, r4, r8
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	454c      	cmp	r4, r9
 8000e6c:	46c6      	mov	lr, r8
 8000e6e:	464d      	mov	r5, r9
 8000e70:	d315      	bcc.n	8000e9e <__udivmoddi4+0x2ae>
 8000e72:	d012      	beq.n	8000e9a <__udivmoddi4+0x2aa>
 8000e74:	b156      	cbz	r6, 8000e8c <__udivmoddi4+0x29c>
 8000e76:	ebba 030e 	subs.w	r3, sl, lr
 8000e7a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e82:	40cb      	lsrs	r3, r1
 8000e84:	431f      	orrs	r7, r3
 8000e86:	40cc      	lsrs	r4, r1
 8000e88:	6037      	str	r7, [r6, #0]
 8000e8a:	6074      	str	r4, [r6, #4]
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	4618      	mov	r0, r3
 8000e94:	e6f8      	b.n	8000c88 <__udivmoddi4+0x98>
 8000e96:	4690      	mov	r8, r2
 8000e98:	e6e0      	b.n	8000c5c <__udivmoddi4+0x6c>
 8000e9a:	45c2      	cmp	sl, r8
 8000e9c:	d2ea      	bcs.n	8000e74 <__udivmoddi4+0x284>
 8000e9e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea2:	eb69 0503 	sbc.w	r5, r9, r3
 8000ea6:	3801      	subs	r0, #1
 8000ea8:	e7e4      	b.n	8000e74 <__udivmoddi4+0x284>
 8000eaa:	4628      	mov	r0, r5
 8000eac:	e7d7      	b.n	8000e5e <__udivmoddi4+0x26e>
 8000eae:	4640      	mov	r0, r8
 8000eb0:	e791      	b.n	8000dd6 <__udivmoddi4+0x1e6>
 8000eb2:	4681      	mov	r9, r0
 8000eb4:	e7be      	b.n	8000e34 <__udivmoddi4+0x244>
 8000eb6:	4601      	mov	r1, r0
 8000eb8:	e778      	b.n	8000dac <__udivmoddi4+0x1bc>
 8000eba:	3802      	subs	r0, #2
 8000ebc:	443c      	add	r4, r7
 8000ebe:	e745      	b.n	8000d4c <__udivmoddi4+0x15c>
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	e708      	b.n	8000cd6 <__udivmoddi4+0xe6>
 8000ec4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ec8:	443d      	add	r5, r7
 8000eca:	e72b      	b.n	8000d24 <__udivmoddi4+0x134>

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed0:	b510      	push	{r4, lr}
 8000ed2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <HAL_InitTick+0x40>)
 8000ed6:	7818      	ldrb	r0, [r3, #0]
 8000ed8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000edc:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ee0:	4a0c      	ldr	r2, [pc, #48]	; (8000f14 <HAL_InitTick+0x44>)
 8000ee2:	6810      	ldr	r0, [r2, #0]
 8000ee4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ee8:	f000 f89c 	bl	8001024 <HAL_SYSTICK_Config>
 8000eec:	b968      	cbnz	r0, 8000f0a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eee:	2c0f      	cmp	r4, #15
 8000ef0:	d901      	bls.n	8000ef6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000ef2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000ef4:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	4621      	mov	r1, r4
 8000efa:	f04f 30ff 	mov.w	r0, #4294967295
 8000efe:	f000 f85f 	bl	8000fc0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <HAL_InitTick+0x48>)
 8000f04:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000f06:	2000      	movs	r0, #0
 8000f08:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	bd10      	pop	{r4, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000000 	.word	0x20000000
 8000f14:	20000008 	.word	0x20000008
 8000f18:	20000004 	.word	0x20000004

08000f1c <HAL_Init>:
{
 8000f1c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <HAL_Init+0x30>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f26:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f2e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f36:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f38:	2003      	movs	r0, #3
 8000f3a:	f000 f82f 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f7ff ffc6 	bl	8000ed0 <HAL_InitTick>
  HAL_MspInit();
 8000f44:	f000 ff08 	bl	8001d58 <HAL_MspInit>
}
 8000f48:	2000      	movs	r0, #0
 8000f4a:	bd08      	pop	{r3, pc}
 8000f4c:	40023c00 	.word	0x40023c00

08000f50 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f50:	4a03      	ldr	r2, [pc, #12]	; (8000f60 <HAL_IncTick+0x10>)
 8000f52:	6811      	ldr	r1, [r2, #0]
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <HAL_IncTick+0x14>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	440b      	add	r3, r1
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000204 	.word	0x20000204
 8000f64:	20000000 	.word	0x20000000

08000f68 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f68:	4b01      	ldr	r3, [pc, #4]	; (8000f70 <HAL_GetTick+0x8>)
 8000f6a:	6818      	ldr	r0, [r3, #0]
}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000204 	.word	0x20000204

08000f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f74:	b538      	push	{r3, r4, r5, lr}
 8000f76:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f78:	f7ff fff6 	bl	8000f68 <HAL_GetTick>
 8000f7c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000f82:	d002      	beq.n	8000f8a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <HAL_Delay+0x24>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f8a:	f7ff ffed 	bl	8000f68 <HAL_GetTick>
 8000f8e:	1b40      	subs	r0, r0, r5
 8000f90:	4284      	cmp	r4, r0
 8000f92:	d8fa      	bhi.n	8000f8a <HAL_Delay+0x16>
  {
  }
}
 8000f94:	bd38      	pop	{r3, r4, r5, pc}
 8000f96:	bf00      	nop
 8000f98:	20000000 	.word	0x20000000

08000f9c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f9c:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f9e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fa4:	041b      	lsls	r3, r3, #16
 8000fa6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa8:	0200      	lsls	r0, r0, #8
 8000faa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fae:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000fb0:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000fb4:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000fb8:	60d0      	str	r0, [r2, #12]
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fc0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc2:	4b16      	ldr	r3, [pc, #88]	; (800101c <HAL_NVIC_SetPriority+0x5c>)
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fca:	f1c3 0407 	rsb	r4, r3, #7
 8000fce:	2c04      	cmp	r4, #4
 8000fd0:	bf28      	it	cs
 8000fd2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd4:	1d1d      	adds	r5, r3, #4
 8000fd6:	2d06      	cmp	r5, #6
 8000fd8:	d917      	bls.n	800100a <HAL_NVIC_SetPriority+0x4a>
 8000fda:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	2501      	movs	r5, #1
 8000fde:	fa05 f404 	lsl.w	r4, r5, r4
 8000fe2:	3c01      	subs	r4, #1
 8000fe4:	4021      	ands	r1, r4
 8000fe6:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe8:	fa05 f303 	lsl.w	r3, r5, r3
 8000fec:	3b01      	subs	r3, #1
 8000fee:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	db0b      	blt.n	800100e <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff6:	0109      	lsls	r1, r1, #4
 8000ff8:	b2c9      	uxtb	r1, r1
 8000ffa:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000ffe:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001002:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001006:	bc30      	pop	{r4, r5}
 8001008:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100a:	2300      	movs	r3, #0
 800100c:	e7e6      	b.n	8000fdc <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100e:	f000 000f 	and.w	r0, r0, #15
 8001012:	0109      	lsls	r1, r1, #4
 8001014:	b2c9      	uxtb	r1, r1
 8001016:	4b02      	ldr	r3, [pc, #8]	; (8001020 <HAL_NVIC_SetPriority+0x60>)
 8001018:	5419      	strb	r1, [r3, r0]
 800101a:	e7f4      	b.n	8001006 <HAL_NVIC_SetPriority+0x46>
 800101c:	e000ed00 	.word	0xe000ed00
 8001020:	e000ed14 	.word	0xe000ed14

08001024 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001024:	3801      	subs	r0, #1
 8001026:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800102a:	d20a      	bcs.n	8001042 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_SYSTICK_Config+0x24>)
 800102e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001030:	21f0      	movs	r1, #240	; 0xf0
 8001032:	4a06      	ldr	r2, [pc, #24]	; (800104c <HAL_SYSTICK_Config+0x28>)
 8001034:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001038:	2000      	movs	r0, #0
 800103a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103c:	2207      	movs	r2, #7
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001042:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000e010 	.word	0xe000e010
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001052:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001054:	2400      	movs	r4, #0
 8001056:	e04b      	b.n	80010f0 <HAL_GPIO_Init+0xa0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001058:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 800105c:	f10e 0e08 	add.w	lr, lr, #8
 8001060:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001064:	f004 0607 	and.w	r6, r4, #7
 8001068:	00b6      	lsls	r6, r6, #2
 800106a:	270f      	movs	r7, #15
 800106c:	40b7      	lsls	r7, r6
 800106e:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001072:	690f      	ldr	r7, [r1, #16]
 8001074:	fa07 f606 	lsl.w	r6, r7, r6
 8001078:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 800107a:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 800107e:	e046      	b.n	800110e <HAL_GPIO_Init+0xbe>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001080:	2609      	movs	r6, #9
 8001082:	e000      	b.n	8001086 <HAL_GPIO_Init+0x36>
 8001084:	2600      	movs	r6, #0
 8001086:	fa06 f60e 	lsl.w	r6, r6, lr
 800108a:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 800108c:	3302      	adds	r3, #2
 800108e:	4e64      	ldr	r6, [pc, #400]	; (8001220 <HAL_GPIO_Init+0x1d0>)
 8001090:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001094:	4b63      	ldr	r3, [pc, #396]	; (8001224 <HAL_GPIO_Init+0x1d4>)
 8001096:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8001098:	43eb      	mvns	r3, r5
 800109a:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800109e:	684f      	ldr	r7, [r1, #4]
 80010a0:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80010a4:	d001      	beq.n	80010aa <HAL_GPIO_Init+0x5a>
        {
          temp |= iocurrent;
 80010a6:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 80010aa:	4a5e      	ldr	r2, [pc, #376]	; (8001224 <HAL_GPIO_Init+0x1d4>)
 80010ac:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80010ae:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80010b0:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010b4:	684f      	ldr	r7, [r1, #4]
 80010b6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80010ba:	d001      	beq.n	80010c0 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 80010bc:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 80010c0:	4a58      	ldr	r2, [pc, #352]	; (8001224 <HAL_GPIO_Init+0x1d4>)
 80010c2:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c4:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80010c6:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ca:	684f      	ldr	r7, [r1, #4]
 80010cc:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80010d0:	d001      	beq.n	80010d6 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 80010d2:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 80010d6:	4a53      	ldr	r2, [pc, #332]	; (8001224 <HAL_GPIO_Init+0x1d4>)
 80010d8:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80010da:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80010dc:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010de:	684e      	ldr	r6, [r1, #4]
 80010e0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80010e4:	d001      	beq.n	80010ea <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 80010e6:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 80010ea:	4a4e      	ldr	r2, [pc, #312]	; (8001224 <HAL_GPIO_Init+0x1d4>)
 80010ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ee:	3401      	adds	r4, #1
 80010f0:	2c0f      	cmp	r4, #15
 80010f2:	f200 8092 	bhi.w	800121a <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 80010f6:	2301      	movs	r3, #1
 80010f8:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010fa:	680a      	ldr	r2, [r1, #0]
 80010fc:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 8001100:	42ab      	cmp	r3, r5
 8001102:	d1f4      	bne.n	80010ee <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001104:	684a      	ldr	r2, [r1, #4]
 8001106:	2a02      	cmp	r2, #2
 8001108:	d0a6      	beq.n	8001058 <HAL_GPIO_Init+0x8>
 800110a:	2a12      	cmp	r2, #18
 800110c:	d0a4      	beq.n	8001058 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 800110e:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001110:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8001114:	2203      	movs	r2, #3
 8001116:	fa02 f20e 	lsl.w	r2, r2, lr
 800111a:	43d2      	mvns	r2, r2
 800111c:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800111e:	684f      	ldr	r7, [r1, #4]
 8001120:	f007 0703 	and.w	r7, r7, #3
 8001124:	fa07 f70e 	lsl.w	r7, r7, lr
 8001128:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 800112a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800112c:	684e      	ldr	r6, [r1, #4]
 800112e:	1e77      	subs	r7, r6, #1
 8001130:	2f01      	cmp	r7, #1
 8001132:	d903      	bls.n	800113c <HAL_GPIO_Init+0xec>
 8001134:	2e11      	cmp	r6, #17
 8001136:	d001      	beq.n	800113c <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001138:	2e12      	cmp	r6, #18
 800113a:	d10f      	bne.n	800115c <HAL_GPIO_Init+0x10c>
        temp = GPIOx->OSPEEDR; 
 800113c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800113e:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001140:	68cf      	ldr	r7, [r1, #12]
 8001142:	fa07 f70e 	lsl.w	r7, r7, lr
 8001146:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8001148:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800114a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800114c:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001150:	684e      	ldr	r6, [r1, #4]
 8001152:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8001156:	40a6      	lsls	r6, r4
 8001158:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 800115a:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 800115c:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800115e:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001160:	688b      	ldr	r3, [r1, #8]
 8001162:	fa03 f30e 	lsl.w	r3, r3, lr
 8001166:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 8001168:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800116a:	684b      	ldr	r3, [r1, #4]
 800116c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001170:	d0bd      	beq.n	80010ee <HAL_GPIO_Init+0x9e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	4b2c      	ldr	r3, [pc, #176]	; (8001228 <HAL_GPIO_Init+0x1d8>)
 8001178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800117a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800117e:	645a      	str	r2, [r3, #68]	; 0x44
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001186:	9301      	str	r3, [sp, #4]
 8001188:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800118a:	08a3      	lsrs	r3, r4, #2
 800118c:	1c9e      	adds	r6, r3, #2
 800118e:	4a24      	ldr	r2, [pc, #144]	; (8001220 <HAL_GPIO_Init+0x1d0>)
 8001190:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001194:	f004 0603 	and.w	r6, r4, #3
 8001198:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 800119c:	260f      	movs	r6, #15
 800119e:	fa06 f60e 	lsl.w	r6, r6, lr
 80011a2:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011a6:	4f21      	ldr	r7, [pc, #132]	; (800122c <HAL_GPIO_Init+0x1dc>)
 80011a8:	42b8      	cmp	r0, r7
 80011aa:	f43f af6b 	beq.w	8001084 <HAL_GPIO_Init+0x34>
 80011ae:	4e20      	ldr	r6, [pc, #128]	; (8001230 <HAL_GPIO_Init+0x1e0>)
 80011b0:	42b0      	cmp	r0, r6
 80011b2:	d022      	beq.n	80011fa <HAL_GPIO_Init+0x1aa>
 80011b4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80011b8:	42b0      	cmp	r0, r6
 80011ba:	d020      	beq.n	80011fe <HAL_GPIO_Init+0x1ae>
 80011bc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80011c0:	42b0      	cmp	r0, r6
 80011c2:	d01e      	beq.n	8001202 <HAL_GPIO_Init+0x1b2>
 80011c4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80011c8:	42b0      	cmp	r0, r6
 80011ca:	d01c      	beq.n	8001206 <HAL_GPIO_Init+0x1b6>
 80011cc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80011d0:	42b0      	cmp	r0, r6
 80011d2:	d01a      	beq.n	800120a <HAL_GPIO_Init+0x1ba>
 80011d4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80011d8:	42b0      	cmp	r0, r6
 80011da:	d018      	beq.n	800120e <HAL_GPIO_Init+0x1be>
 80011dc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80011e0:	42b0      	cmp	r0, r6
 80011e2:	d016      	beq.n	8001212 <HAL_GPIO_Init+0x1c2>
 80011e4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80011e8:	42b0      	cmp	r0, r6
 80011ea:	d014      	beq.n	8001216 <HAL_GPIO_Init+0x1c6>
 80011ec:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80011f0:	42b0      	cmp	r0, r6
 80011f2:	f43f af45 	beq.w	8001080 <HAL_GPIO_Init+0x30>
 80011f6:	260a      	movs	r6, #10
 80011f8:	e745      	b.n	8001086 <HAL_GPIO_Init+0x36>
 80011fa:	2601      	movs	r6, #1
 80011fc:	e743      	b.n	8001086 <HAL_GPIO_Init+0x36>
 80011fe:	2602      	movs	r6, #2
 8001200:	e741      	b.n	8001086 <HAL_GPIO_Init+0x36>
 8001202:	2603      	movs	r6, #3
 8001204:	e73f      	b.n	8001086 <HAL_GPIO_Init+0x36>
 8001206:	2604      	movs	r6, #4
 8001208:	e73d      	b.n	8001086 <HAL_GPIO_Init+0x36>
 800120a:	2605      	movs	r6, #5
 800120c:	e73b      	b.n	8001086 <HAL_GPIO_Init+0x36>
 800120e:	2606      	movs	r6, #6
 8001210:	e739      	b.n	8001086 <HAL_GPIO_Init+0x36>
 8001212:	2607      	movs	r6, #7
 8001214:	e737      	b.n	8001086 <HAL_GPIO_Init+0x36>
 8001216:	2608      	movs	r6, #8
 8001218:	e735      	b.n	8001086 <HAL_GPIO_Init+0x36>
      }
    }
  }
}
 800121a:	b003      	add	sp, #12
 800121c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800121e:	bf00      	nop
 8001220:	40013800 	.word	0x40013800
 8001224:	40013c00 	.word	0x40013c00
 8001228:	40023800 	.word	0x40023800
 800122c:	40020000 	.word	0x40020000
 8001230:	40020400 	.word	0x40020400

08001234 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001234:	b912      	cbnz	r2, 800123c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001236:	0409      	lsls	r1, r1, #16
 8001238:	6181      	str	r1, [r0, #24]
 800123a:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800123c:	6181      	str	r1, [r0, #24]
 800123e:	4770      	bx	lr

08001240 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001240:	2800      	cmp	r0, #0
 8001242:	f000 81bb 	beq.w	80015bc <HAL_RCC_OscConfig+0x37c>
{
 8001246:	b570      	push	{r4, r5, r6, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800124c:	6803      	ldr	r3, [r0, #0]
 800124e:	f013 0f01 	tst.w	r3, #1
 8001252:	d03b      	beq.n	80012cc <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001254:	4ba7      	ldr	r3, [pc, #668]	; (80014f4 <HAL_RCC_OscConfig+0x2b4>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 030c 	and.w	r3, r3, #12
 800125c:	2b04      	cmp	r3, #4
 800125e:	d02c      	beq.n	80012ba <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001260:	4ba4      	ldr	r3, [pc, #656]	; (80014f4 <HAL_RCC_OscConfig+0x2b4>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001268:	2b08      	cmp	r3, #8
 800126a:	d021      	beq.n	80012b0 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800126c:	6863      	ldr	r3, [r4, #4]
 800126e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001272:	d04f      	beq.n	8001314 <HAL_RCC_OscConfig+0xd4>
 8001274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001278:	d052      	beq.n	8001320 <HAL_RCC_OscConfig+0xe0>
 800127a:	4b9e      	ldr	r3, [pc, #632]	; (80014f4 <HAL_RCC_OscConfig+0x2b4>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800128a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800128c:	6863      	ldr	r3, [r4, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d050      	beq.n	8001334 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001292:	f7ff fe69 	bl	8000f68 <HAL_GetTick>
 8001296:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001298:	4b96      	ldr	r3, [pc, #600]	; (80014f4 <HAL_RCC_OscConfig+0x2b4>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80012a0:	d114      	bne.n	80012cc <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012a2:	f7ff fe61 	bl	8000f68 <HAL_GetTick>
 80012a6:	1b40      	subs	r0, r0, r5
 80012a8:	2864      	cmp	r0, #100	; 0x64
 80012aa:	d9f5      	bls.n	8001298 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80012ac:	2003      	movs	r0, #3
 80012ae:	e18a      	b.n	80015c6 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012b0:	4b90      	ldr	r3, [pc, #576]	; (80014f4 <HAL_RCC_OscConfig+0x2b4>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80012b8:	d0d8      	beq.n	800126c <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ba:	4b8e      	ldr	r3, [pc, #568]	; (80014f4 <HAL_RCC_OscConfig+0x2b4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80012c2:	d003      	beq.n	80012cc <HAL_RCC_OscConfig+0x8c>
 80012c4:	6863      	ldr	r3, [r4, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 817a 	beq.w	80015c0 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012cc:	6823      	ldr	r3, [r4, #0]
 80012ce:	f013 0f02 	tst.w	r3, #2
 80012d2:	d055      	beq.n	8001380 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012d4:	4b87      	ldr	r3, [pc, #540]	; (80014f4 <HAL_RCC_OscConfig+0x2b4>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f013 0f0c 	tst.w	r3, #12
 80012dc:	d03e      	beq.n	800135c <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012de:	4b85      	ldr	r3, [pc, #532]	; (80014f4 <HAL_RCC_OscConfig+0x2b4>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012e6:	2b08      	cmp	r3, #8
 80012e8:	d033      	beq.n	8001352 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012ea:	68e3      	ldr	r3, [r4, #12]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d068      	beq.n	80013c2 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f0:	2201      	movs	r2, #1
 80012f2:	4b81      	ldr	r3, [pc, #516]	; (80014f8 <HAL_RCC_OscConfig+0x2b8>)
 80012f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f6:	f7ff fe37 	bl	8000f68 <HAL_GetTick>
 80012fa:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fc:	4b7d      	ldr	r3, [pc, #500]	; (80014f4 <HAL_RCC_OscConfig+0x2b4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f013 0f02 	tst.w	r3, #2
 8001304:	d154      	bne.n	80013b0 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001306:	f7ff fe2f 	bl	8000f68 <HAL_GetTick>
 800130a:	1b40      	subs	r0, r0, r5
 800130c:	2802      	cmp	r0, #2
 800130e:	d9f5      	bls.n	80012fc <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001310:	2003      	movs	r0, #3
 8001312:	e158      	b.n	80015c6 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001314:	4a77      	ldr	r2, [pc, #476]	; (80014f4 <HAL_RCC_OscConfig+0x2b4>)
 8001316:	6813      	ldr	r3, [r2, #0]
 8001318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	e7b5      	b.n	800128c <HAL_RCC_OscConfig+0x4c>
 8001320:	4b74      	ldr	r3, [pc, #464]	; (80014f4 <HAL_RCC_OscConfig+0x2b4>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	e7ab      	b.n	800128c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001334:	f7ff fe18 	bl	8000f68 <HAL_GetTick>
 8001338:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133a:	4b6e      	ldr	r3, [pc, #440]	; (80014f4 <HAL_RCC_OscConfig+0x2b4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001342:	d0c3      	beq.n	80012cc <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001344:	f7ff fe10 	bl	8000f68 <HAL_GetTick>
 8001348:	1b40      	subs	r0, r0, r5
 800134a:	2864      	cmp	r0, #100	; 0x64
 800134c:	d9f5      	bls.n	800133a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800134e:	2003      	movs	r0, #3
 8001350:	e139      	b.n	80015c6 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001352:	4b68      	ldr	r3, [pc, #416]	; (80014f4 <HAL_RCC_OscConfig+0x2b4>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800135a:	d1c6      	bne.n	80012ea <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800135c:	4b65      	ldr	r3, [pc, #404]	; (80014f4 <HAL_RCC_OscConfig+0x2b4>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f013 0f02 	tst.w	r3, #2
 8001364:	d004      	beq.n	8001370 <HAL_RCC_OscConfig+0x130>
 8001366:	68e3      	ldr	r3, [r4, #12]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d001      	beq.n	8001370 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 800136c:	2001      	movs	r0, #1
 800136e:	e12a      	b.n	80015c6 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001370:	4a60      	ldr	r2, [pc, #384]	; (80014f4 <HAL_RCC_OscConfig+0x2b4>)
 8001372:	6813      	ldr	r3, [r2, #0]
 8001374:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001378:	6921      	ldr	r1, [r4, #16]
 800137a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800137e:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001380:	6823      	ldr	r3, [r4, #0]
 8001382:	f013 0f08 	tst.w	r3, #8
 8001386:	d040      	beq.n	800140a <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001388:	6963      	ldr	r3, [r4, #20]
 800138a:	b363      	cbz	r3, 80013e6 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800138c:	2201      	movs	r2, #1
 800138e:	4b5b      	ldr	r3, [pc, #364]	; (80014fc <HAL_RCC_OscConfig+0x2bc>)
 8001390:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001392:	f7ff fde9 	bl	8000f68 <HAL_GetTick>
 8001396:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001398:	4b56      	ldr	r3, [pc, #344]	; (80014f4 <HAL_RCC_OscConfig+0x2b4>)
 800139a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800139c:	f013 0f02 	tst.w	r3, #2
 80013a0:	d133      	bne.n	800140a <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a2:	f7ff fde1 	bl	8000f68 <HAL_GetTick>
 80013a6:	1b40      	subs	r0, r0, r5
 80013a8:	2802      	cmp	r0, #2
 80013aa:	d9f5      	bls.n	8001398 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80013ac:	2003      	movs	r0, #3
 80013ae:	e10a      	b.n	80015c6 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b0:	4a50      	ldr	r2, [pc, #320]	; (80014f4 <HAL_RCC_OscConfig+0x2b4>)
 80013b2:	6813      	ldr	r3, [r2, #0]
 80013b4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80013b8:	6921      	ldr	r1, [r4, #16]
 80013ba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	e7de      	b.n	8001380 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 80013c2:	2200      	movs	r2, #0
 80013c4:	4b4c      	ldr	r3, [pc, #304]	; (80014f8 <HAL_RCC_OscConfig+0x2b8>)
 80013c6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013c8:	f7ff fdce 	bl	8000f68 <HAL_GetTick>
 80013cc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ce:	4b49      	ldr	r3, [pc, #292]	; (80014f4 <HAL_RCC_OscConfig+0x2b4>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f013 0f02 	tst.w	r3, #2
 80013d6:	d0d3      	beq.n	8001380 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d8:	f7ff fdc6 	bl	8000f68 <HAL_GetTick>
 80013dc:	1b40      	subs	r0, r0, r5
 80013de:	2802      	cmp	r0, #2
 80013e0:	d9f5      	bls.n	80013ce <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80013e2:	2003      	movs	r0, #3
 80013e4:	e0ef      	b.n	80015c6 <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013e6:	2200      	movs	r2, #0
 80013e8:	4b44      	ldr	r3, [pc, #272]	; (80014fc <HAL_RCC_OscConfig+0x2bc>)
 80013ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ec:	f7ff fdbc 	bl	8000f68 <HAL_GetTick>
 80013f0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f2:	4b40      	ldr	r3, [pc, #256]	; (80014f4 <HAL_RCC_OscConfig+0x2b4>)
 80013f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013f6:	f013 0f02 	tst.w	r3, #2
 80013fa:	d006      	beq.n	800140a <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013fc:	f7ff fdb4 	bl	8000f68 <HAL_GetTick>
 8001400:	1b40      	subs	r0, r0, r5
 8001402:	2802      	cmp	r0, #2
 8001404:	d9f5      	bls.n	80013f2 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8001406:	2003      	movs	r0, #3
 8001408:	e0dd      	b.n	80015c6 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800140a:	6823      	ldr	r3, [r4, #0]
 800140c:	f013 0f04 	tst.w	r3, #4
 8001410:	d079      	beq.n	8001506 <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001412:	4b38      	ldr	r3, [pc, #224]	; (80014f4 <HAL_RCC_OscConfig+0x2b4>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800141a:	d133      	bne.n	8001484 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800141c:	2300      	movs	r3, #0
 800141e:	9301      	str	r3, [sp, #4]
 8001420:	4b34      	ldr	r3, [pc, #208]	; (80014f4 <HAL_RCC_OscConfig+0x2b4>)
 8001422:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001424:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001428:	641a      	str	r2, [r3, #64]	; 0x40
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001430:	9301      	str	r3, [sp, #4]
 8001432:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001434:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001436:	4b32      	ldr	r3, [pc, #200]	; (8001500 <HAL_RCC_OscConfig+0x2c0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800143e:	d023      	beq.n	8001488 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001440:	68a3      	ldr	r3, [r4, #8]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d034      	beq.n	80014b0 <HAL_RCC_OscConfig+0x270>
 8001446:	2b05      	cmp	r3, #5
 8001448:	d038      	beq.n	80014bc <HAL_RCC_OscConfig+0x27c>
 800144a:	4b2a      	ldr	r3, [pc, #168]	; (80014f4 <HAL_RCC_OscConfig+0x2b4>)
 800144c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800144e:	f022 0201 	bic.w	r2, r2, #1
 8001452:	671a      	str	r2, [r3, #112]	; 0x70
 8001454:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001456:	f022 0204 	bic.w	r2, r2, #4
 800145a:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800145c:	68a3      	ldr	r3, [r4, #8]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d036      	beq.n	80014d0 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001462:	f7ff fd81 	bl	8000f68 <HAL_GetTick>
 8001466:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001468:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <HAL_RCC_OscConfig+0x2b4>)
 800146a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146c:	f013 0f02 	tst.w	r3, #2
 8001470:	d148      	bne.n	8001504 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001472:	f7ff fd79 	bl	8000f68 <HAL_GetTick>
 8001476:	1b80      	subs	r0, r0, r6
 8001478:	f241 3388 	movw	r3, #5000	; 0x1388
 800147c:	4298      	cmp	r0, r3
 800147e:	d9f3      	bls.n	8001468 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8001480:	2003      	movs	r0, #3
 8001482:	e0a0      	b.n	80015c6 <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8001484:	2500      	movs	r5, #0
 8001486:	e7d6      	b.n	8001436 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001488:	4a1d      	ldr	r2, [pc, #116]	; (8001500 <HAL_RCC_OscConfig+0x2c0>)
 800148a:	6813      	ldr	r3, [r2, #0]
 800148c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001490:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001492:	f7ff fd69 	bl	8000f68 <HAL_GetTick>
 8001496:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001498:	4b19      	ldr	r3, [pc, #100]	; (8001500 <HAL_RCC_OscConfig+0x2c0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f413 7f80 	tst.w	r3, #256	; 0x100
 80014a0:	d1ce      	bne.n	8001440 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a2:	f7ff fd61 	bl	8000f68 <HAL_GetTick>
 80014a6:	1b80      	subs	r0, r0, r6
 80014a8:	2802      	cmp	r0, #2
 80014aa:	d9f5      	bls.n	8001498 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 80014ac:	2003      	movs	r0, #3
 80014ae:	e08a      	b.n	80015c6 <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b0:	4a10      	ldr	r2, [pc, #64]	; (80014f4 <HAL_RCC_OscConfig+0x2b4>)
 80014b2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6713      	str	r3, [r2, #112]	; 0x70
 80014ba:	e7cf      	b.n	800145c <HAL_RCC_OscConfig+0x21c>
 80014bc:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <HAL_RCC_OscConfig+0x2b4>)
 80014be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80014c0:	f042 0204 	orr.w	r2, r2, #4
 80014c4:	671a      	str	r2, [r3, #112]	; 0x70
 80014c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80014c8:	f042 0201 	orr.w	r2, r2, #1
 80014cc:	671a      	str	r2, [r3, #112]	; 0x70
 80014ce:	e7c5      	b.n	800145c <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d0:	f7ff fd4a 	bl	8000f68 <HAL_GetTick>
 80014d4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d6:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <HAL_RCC_OscConfig+0x2b4>)
 80014d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014da:	f013 0f02 	tst.w	r3, #2
 80014de:	d011      	beq.n	8001504 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e0:	f7ff fd42 	bl	8000f68 <HAL_GetTick>
 80014e4:	1b80      	subs	r0, r0, r6
 80014e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80014ea:	4298      	cmp	r0, r3
 80014ec:	d9f3      	bls.n	80014d6 <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 80014ee:	2003      	movs	r0, #3
 80014f0:	e069      	b.n	80015c6 <HAL_RCC_OscConfig+0x386>
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	42470000 	.word	0x42470000
 80014fc:	42470e80 	.word	0x42470e80
 8001500:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001504:	b9e5      	cbnz	r5, 8001540 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001506:	69a3      	ldr	r3, [r4, #24]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d05b      	beq.n	80015c4 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800150c:	4a30      	ldr	r2, [pc, #192]	; (80015d0 <HAL_RCC_OscConfig+0x390>)
 800150e:	6892      	ldr	r2, [r2, #8]
 8001510:	f002 020c 	and.w	r2, r2, #12
 8001514:	2a08      	cmp	r2, #8
 8001516:	d058      	beq.n	80015ca <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001518:	2b02      	cmp	r3, #2
 800151a:	d017      	beq.n	800154c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800151c:	2200      	movs	r2, #0
 800151e:	4b2d      	ldr	r3, [pc, #180]	; (80015d4 <HAL_RCC_OscConfig+0x394>)
 8001520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001522:	f7ff fd21 	bl	8000f68 <HAL_GetTick>
 8001526:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <HAL_RCC_OscConfig+0x390>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001530:	d042      	beq.n	80015b8 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001532:	f7ff fd19 	bl	8000f68 <HAL_GetTick>
 8001536:	1b00      	subs	r0, r0, r4
 8001538:	2802      	cmp	r0, #2
 800153a:	d9f5      	bls.n	8001528 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800153c:	2003      	movs	r0, #3
 800153e:	e042      	b.n	80015c6 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001540:	4a23      	ldr	r2, [pc, #140]	; (80015d0 <HAL_RCC_OscConfig+0x390>)
 8001542:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	e7dc      	b.n	8001506 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 800154c:	2200      	movs	r2, #0
 800154e:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <HAL_RCC_OscConfig+0x394>)
 8001550:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001552:	f7ff fd09 	bl	8000f68 <HAL_GetTick>
 8001556:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <HAL_RCC_OscConfig+0x390>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001560:	d006      	beq.n	8001570 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001562:	f7ff fd01 	bl	8000f68 <HAL_GetTick>
 8001566:	1b40      	subs	r0, r0, r5
 8001568:	2802      	cmp	r0, #2
 800156a:	d9f5      	bls.n	8001558 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 800156c:	2003      	movs	r0, #3
 800156e:	e02a      	b.n	80015c6 <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001570:	69e3      	ldr	r3, [r4, #28]
 8001572:	6a22      	ldr	r2, [r4, #32]
 8001574:	4313      	orrs	r3, r2
 8001576:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001578:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800157c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800157e:	0852      	lsrs	r2, r2, #1
 8001580:	3a01      	subs	r2, #1
 8001582:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001586:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001588:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800158c:	4a10      	ldr	r2, [pc, #64]	; (80015d0 <HAL_RCC_OscConfig+0x390>)
 800158e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001590:	2201      	movs	r2, #1
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_RCC_OscConfig+0x394>)
 8001594:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001596:	f7ff fce7 	bl	8000f68 <HAL_GetTick>
 800159a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <HAL_RCC_OscConfig+0x390>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80015a4:	d106      	bne.n	80015b4 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a6:	f7ff fcdf 	bl	8000f68 <HAL_GetTick>
 80015aa:	1b00      	subs	r0, r0, r4
 80015ac:	2802      	cmp	r0, #2
 80015ae:	d9f5      	bls.n	800159c <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80015b0:	2003      	movs	r0, #3
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80015b4:	2000      	movs	r0, #0
 80015b6:	e006      	b.n	80015c6 <HAL_RCC_OscConfig+0x386>
 80015b8:	2000      	movs	r0, #0
 80015ba:	e004      	b.n	80015c6 <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 80015bc:	2001      	movs	r0, #1
 80015be:	4770      	bx	lr
        return HAL_ERROR;
 80015c0:	2001      	movs	r0, #1
 80015c2:	e000      	b.n	80015c6 <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 80015c4:	2000      	movs	r0, #0
}
 80015c6:	b002      	add	sp, #8
 80015c8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80015ca:	2001      	movs	r0, #1
 80015cc:	e7fb      	b.n	80015c6 <HAL_RCC_OscConfig+0x386>
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800
 80015d4:	42470060 	.word	0x42470060

080015d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	d059      	beq.n	800169a <HAL_RCC_GetSysClockFreq+0xc2>
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d001      	beq.n	80015ee <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015ea:	482e      	ldr	r0, [pc, #184]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80015ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015ee:	4b2c      	ldr	r3, [pc, #176]	; (80016a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80015fc:	d02a      	beq.n	8001654 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015fe:	4b28      	ldr	r3, [pc, #160]	; (80016a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001606:	461e      	mov	r6, r3
 8001608:	2700      	movs	r7, #0
 800160a:	015c      	lsls	r4, r3, #5
 800160c:	2500      	movs	r5, #0
 800160e:	1ae4      	subs	r4, r4, r3
 8001610:	eb65 0507 	sbc.w	r5, r5, r7
 8001614:	01a9      	lsls	r1, r5, #6
 8001616:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 800161a:	01a0      	lsls	r0, r4, #6
 800161c:	1b00      	subs	r0, r0, r4
 800161e:	eb61 0105 	sbc.w	r1, r1, r5
 8001622:	00cb      	lsls	r3, r1, #3
 8001624:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001628:	00c4      	lsls	r4, r0, #3
 800162a:	19a0      	adds	r0, r4, r6
 800162c:	eb43 0107 	adc.w	r1, r3, r7
 8001630:	024b      	lsls	r3, r1, #9
 8001632:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8001636:	0244      	lsls	r4, r0, #9
 8001638:	4620      	mov	r0, r4
 800163a:	4619      	mov	r1, r3
 800163c:	2300      	movs	r3, #0
 800163e:	f7ff fabf 	bl	8000bc0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800164a:	3301      	adds	r3, #1
 800164c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800164e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800165c:	461e      	mov	r6, r3
 800165e:	2700      	movs	r7, #0
 8001660:	015c      	lsls	r4, r3, #5
 8001662:	2500      	movs	r5, #0
 8001664:	1ae4      	subs	r4, r4, r3
 8001666:	eb65 0507 	sbc.w	r5, r5, r7
 800166a:	01a9      	lsls	r1, r5, #6
 800166c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001670:	01a0      	lsls	r0, r4, #6
 8001672:	1b00      	subs	r0, r0, r4
 8001674:	eb61 0105 	sbc.w	r1, r1, r5
 8001678:	00cb      	lsls	r3, r1, #3
 800167a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800167e:	00c4      	lsls	r4, r0, #3
 8001680:	19a0      	adds	r0, r4, r6
 8001682:	eb43 0107 	adc.w	r1, r3, r7
 8001686:	028b      	lsls	r3, r1, #10
 8001688:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800168c:	0284      	lsls	r4, r0, #10
 800168e:	4620      	mov	r0, r4
 8001690:	4619      	mov	r1, r3
 8001692:	2300      	movs	r3, #0
 8001694:	f7ff fa94 	bl	8000bc0 <__aeabi_uldivmod>
 8001698:	e7d3      	b.n	8001642 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 800169a:	4803      	ldr	r0, [pc, #12]	; (80016a8 <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800169c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800
 80016a4:	00f42400 	.word	0x00f42400
 80016a8:	007a1200 	.word	0x007a1200

080016ac <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80016ac:	2800      	cmp	r0, #0
 80016ae:	f000 809d 	beq.w	80017ec <HAL_RCC_ClockConfig+0x140>
{
 80016b2:	b570      	push	{r4, r5, r6, lr}
 80016b4:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016b6:	4b4f      	ldr	r3, [pc, #316]	; (80017f4 <HAL_RCC_ClockConfig+0x148>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	428b      	cmp	r3, r1
 80016c0:	d209      	bcs.n	80016d6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c2:	b2cb      	uxtb	r3, r1
 80016c4:	4a4b      	ldr	r2, [pc, #300]	; (80017f4 <HAL_RCC_ClockConfig+0x148>)
 80016c6:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c8:	6813      	ldr	r3, [r2, #0]
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	4299      	cmp	r1, r3
 80016d0:	d001      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 80016d2:	2001      	movs	r0, #1
 80016d4:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d6:	6823      	ldr	r3, [r4, #0]
 80016d8:	f013 0f02 	tst.w	r3, #2
 80016dc:	d017      	beq.n	800170e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016de:	f013 0f04 	tst.w	r3, #4
 80016e2:	d004      	beq.n	80016ee <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016e4:	4a44      	ldr	r2, [pc, #272]	; (80017f8 <HAL_RCC_ClockConfig+0x14c>)
 80016e6:	6893      	ldr	r3, [r2, #8]
 80016e8:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016ec:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ee:	6823      	ldr	r3, [r4, #0]
 80016f0:	f013 0f08 	tst.w	r3, #8
 80016f4:	d004      	beq.n	8001700 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016f6:	4a40      	ldr	r2, [pc, #256]	; (80017f8 <HAL_RCC_ClockConfig+0x14c>)
 80016f8:	6893      	ldr	r3, [r2, #8]
 80016fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016fe:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001700:	4a3d      	ldr	r2, [pc, #244]	; (80017f8 <HAL_RCC_ClockConfig+0x14c>)
 8001702:	6893      	ldr	r3, [r2, #8]
 8001704:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001708:	68a0      	ldr	r0, [r4, #8]
 800170a:	4303      	orrs	r3, r0
 800170c:	6093      	str	r3, [r2, #8]
 800170e:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001710:	6823      	ldr	r3, [r4, #0]
 8001712:	f013 0f01 	tst.w	r3, #1
 8001716:	d032      	beq.n	800177e <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001718:	6863      	ldr	r3, [r4, #4]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d021      	beq.n	8001762 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800171e:	1e9a      	subs	r2, r3, #2
 8001720:	2a01      	cmp	r2, #1
 8001722:	d925      	bls.n	8001770 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001724:	4a34      	ldr	r2, [pc, #208]	; (80017f8 <HAL_RCC_ClockConfig+0x14c>)
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	f012 0f02 	tst.w	r2, #2
 800172c:	d060      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800172e:	4932      	ldr	r1, [pc, #200]	; (80017f8 <HAL_RCC_ClockConfig+0x14c>)
 8001730:	688a      	ldr	r2, [r1, #8]
 8001732:	f022 0203 	bic.w	r2, r2, #3
 8001736:	4313      	orrs	r3, r2
 8001738:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800173a:	f7ff fc15 	bl	8000f68 <HAL_GetTick>
 800173e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001740:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <HAL_RCC_ClockConfig+0x14c>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 030c 	and.w	r3, r3, #12
 8001748:	6862      	ldr	r2, [r4, #4]
 800174a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800174e:	d016      	beq.n	800177e <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001750:	f7ff fc0a 	bl	8000f68 <HAL_GetTick>
 8001754:	1b80      	subs	r0, r0, r6
 8001756:	f241 3388 	movw	r3, #5000	; 0x1388
 800175a:	4298      	cmp	r0, r3
 800175c:	d9f0      	bls.n	8001740 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 800175e:	2003      	movs	r0, #3
 8001760:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001762:	4a25      	ldr	r2, [pc, #148]	; (80017f8 <HAL_RCC_ClockConfig+0x14c>)
 8001764:	6812      	ldr	r2, [r2, #0]
 8001766:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800176a:	d1e0      	bne.n	800172e <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 800176c:	2001      	movs	r0, #1
 800176e:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001770:	4a21      	ldr	r2, [pc, #132]	; (80017f8 <HAL_RCC_ClockConfig+0x14c>)
 8001772:	6812      	ldr	r2, [r2, #0]
 8001774:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001778:	d1d9      	bne.n	800172e <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 800177a:	2001      	movs	r0, #1
 800177c:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800177e:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <HAL_RCC_ClockConfig+0x148>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	429d      	cmp	r5, r3
 8001788:	d209      	bcs.n	800179e <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178a:	b2ea      	uxtb	r2, r5
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <HAL_RCC_ClockConfig+0x148>)
 800178e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	429d      	cmp	r5, r3
 8001798:	d001      	beq.n	800179e <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 800179a:	2001      	movs	r0, #1
}
 800179c:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800179e:	6823      	ldr	r3, [r4, #0]
 80017a0:	f013 0f04 	tst.w	r3, #4
 80017a4:	d006      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017a6:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <HAL_RCC_ClockConfig+0x14c>)
 80017a8:	6893      	ldr	r3, [r2, #8]
 80017aa:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80017ae:	68e1      	ldr	r1, [r4, #12]
 80017b0:	430b      	orrs	r3, r1
 80017b2:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b4:	6823      	ldr	r3, [r4, #0]
 80017b6:	f013 0f08 	tst.w	r3, #8
 80017ba:	d007      	beq.n	80017cc <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017bc:	4a0e      	ldr	r2, [pc, #56]	; (80017f8 <HAL_RCC_ClockConfig+0x14c>)
 80017be:	6893      	ldr	r3, [r2, #8]
 80017c0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80017c4:	6921      	ldr	r1, [r4, #16]
 80017c6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80017ca:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017cc:	f7ff ff04 	bl	80015d8 <HAL_RCC_GetSysClockFreq>
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_RCC_ClockConfig+0x14c>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80017d8:	4a08      	ldr	r2, [pc, #32]	; (80017fc <HAL_RCC_ClockConfig+0x150>)
 80017da:	5cd3      	ldrb	r3, [r2, r3]
 80017dc:	40d8      	lsrs	r0, r3
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <HAL_RCC_ClockConfig+0x154>)
 80017e0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80017e2:	2000      	movs	r0, #0
 80017e4:	f7ff fb74 	bl	8000ed0 <HAL_InitTick>
  return HAL_OK;
 80017e8:	2000      	movs	r0, #0
 80017ea:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80017ec:	2001      	movs	r0, #1
 80017ee:	4770      	bx	lr
        return HAL_ERROR;
 80017f0:	2001      	movs	r0, #1
 80017f2:	bd70      	pop	{r4, r5, r6, pc}
 80017f4:	40023c00 	.word	0x40023c00
 80017f8:	40023800 	.word	0x40023800
 80017fc:	08004694 	.word	0x08004694
 8001800:	20000008 	.word	0x20000008

08001804 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001804:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001806:	680c      	ldr	r4, [r1, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001808:	fa94 f4a4 	rbit	r4, r4
 800180c:	fab4 f484 	clz	r4, r4

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001810:	e02b      	b.n	800186a <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001812:	688e      	ldr	r6, [r1, #8]
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001814:	6882      	ldr	r2, [r0, #8]
 8001816:	fa93 f5a3 	rbit	r5, r3
 800181a:	fab5 f585 	clz	r5, r5
 800181e:	006d      	lsls	r5, r5, #1
 8001820:	fa07 f505 	lsl.w	r5, r7, r5
 8001824:	ea22 0205 	bic.w	r2, r2, r5
 8001828:	fa93 f5a3 	rbit	r5, r3
 800182c:	fab5 f585 	clz	r5, r5
 8001830:	006d      	lsls	r5, r5, #1
 8001832:	fa06 f505 	lsl.w	r5, r6, r5
 8001836:	432a      	orrs	r2, r5
 8001838:	6082      	str	r2, [r0, #8]
 800183a:	e037      	b.n	80018ac <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800183c:	694a      	ldr	r2, [r1, #20]
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800183e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	fa93 f6a3 	rbit	r6, r3
 8001846:	fab6 f686 	clz	r6, r6
 800184a:	00b6      	lsls	r6, r6, #2
 800184c:	270f      	movs	r7, #15
 800184e:	fa07 f606 	lsl.w	r6, r7, r6
 8001852:	ea25 0506 	bic.w	r5, r5, r6
 8001856:	fa93 f3a3 	rbit	r3, r3
 800185a:	fab3 f383 	clz	r3, r3
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	432b      	orrs	r3, r5
 8001866:	6243      	str	r3, [r0, #36]	; 0x24
        }
      }
    }
    pinpos++;
 8001868:	3401      	adds	r4, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800186a:	680b      	ldr	r3, [r1, #0]
 800186c:	fa33 f204 	lsrs.w	r2, r3, r4
 8001870:	d050      	beq.n	8001914 <LL_GPIO_Init+0x110>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001872:	2201      	movs	r2, #1
 8001874:	40a2      	lsls	r2, r4
    if (currentpin)
 8001876:	4013      	ands	r3, r2
 8001878:	d0f6      	beq.n	8001868 <LL_GPIO_Init+0x64>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800187a:	684e      	ldr	r6, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800187c:	6802      	ldr	r2, [r0, #0]
 800187e:	fa93 f5a3 	rbit	r5, r3
 8001882:	fab5 f585 	clz	r5, r5
 8001886:	006d      	lsls	r5, r5, #1
 8001888:	2703      	movs	r7, #3
 800188a:	fa07 f505 	lsl.w	r5, r7, r5
 800188e:	ea22 0205 	bic.w	r2, r2, r5
 8001892:	fa93 f5a3 	rbit	r5, r3
 8001896:	fab5 f585 	clz	r5, r5
 800189a:	006d      	lsls	r5, r5, #1
 800189c:	fa06 f505 	lsl.w	r5, r6, r5
 80018a0:	432a      	orrs	r2, r5
 80018a2:	6002      	str	r2, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80018a4:	684a      	ldr	r2, [r1, #4]
 80018a6:	3a01      	subs	r2, #1
 80018a8:	2a01      	cmp	r2, #1
 80018aa:	d9b2      	bls.n	8001812 <LL_GPIO_Init+0xe>
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80018ac:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80018ae:	68c2      	ldr	r2, [r0, #12]
 80018b0:	fa93 f5a3 	rbit	r5, r3
 80018b4:	fab5 f585 	clz	r5, r5
 80018b8:	006d      	lsls	r5, r5, #1
 80018ba:	2703      	movs	r7, #3
 80018bc:	fa07 f505 	lsl.w	r5, r7, r5
 80018c0:	ea22 0205 	bic.w	r2, r2, r5
 80018c4:	fa93 f5a3 	rbit	r5, r3
 80018c8:	fab5 f585 	clz	r5, r5
 80018cc:	006d      	lsls	r5, r5, #1
 80018ce:	fa06 f505 	lsl.w	r5, r6, r5
 80018d2:	432a      	orrs	r2, r5
 80018d4:	60c2      	str	r2, [r0, #12]
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80018d6:	684a      	ldr	r2, [r1, #4]
 80018d8:	2a02      	cmp	r2, #2
 80018da:	d1c5      	bne.n	8001868 <LL_GPIO_Init+0x64>
 80018dc:	fa93 f2a3 	rbit	r2, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80018e0:	fab2 f282 	clz	r2, r2
 80018e4:	2a07      	cmp	r2, #7
 80018e6:	d8a9      	bhi.n	800183c <LL_GPIO_Init+0x38>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80018e8:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80018ea:	6a02      	ldr	r2, [r0, #32]
 80018ec:	fa93 f6a3 	rbit	r6, r3
 80018f0:	fab6 f686 	clz	r6, r6
 80018f4:	00b6      	lsls	r6, r6, #2
 80018f6:	270f      	movs	r7, #15
 80018f8:	fa07 f606 	lsl.w	r6, r7, r6
 80018fc:	ea22 0206 	bic.w	r2, r2, r6
 8001900:	fa93 f3a3 	rbit	r3, r3
 8001904:	fab3 f383 	clz	r3, r3
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	fa05 f303 	lsl.w	r3, r5, r3
 800190e:	4313      	orrs	r3, r2
 8001910:	6203      	str	r3, [r0, #32]
 8001912:	e7a9      	b.n	8001868 <LL_GPIO_Init+0x64>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001914:	684a      	ldr	r2, [r1, #4]
 8001916:	3a01      	subs	r2, #1
 8001918:	2a01      	cmp	r2, #1
 800191a:	d902      	bls.n	8001922 <LL_GPIO_Init+0x11e>
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 800191c:	2000      	movs	r0, #0
 800191e:	bcf0      	pop	{r4, r5, r6, r7}
 8001920:	4770      	bx	lr
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001922:	68c9      	ldr	r1, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001924:	6842      	ldr	r2, [r0, #4]
 8001926:	ea22 0203 	bic.w	r2, r2, r3
 800192a:	fb01 f303 	mul.w	r3, r1, r3
 800192e:	4313      	orrs	r3, r2
 8001930:	6043      	str	r3, [r0, #4]
 8001932:	e7f3      	b.n	800191c <LL_GPIO_Init+0x118>

08001934 <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <RCC_GetHCLKClockFreq+0x10>)
 8001936:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001938:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800193c:	4a02      	ldr	r2, [pc, #8]	; (8001948 <RCC_GetHCLKClockFreq+0x14>)
 800193e:	5cd3      	ldrb	r3, [r2, r3]
}
 8001940:	40d8      	lsrs	r0, r3
 8001942:	4770      	bx	lr
 8001944:	40023800 	.word	0x40023800
 8001948:	08004694 	.word	0x08004694

0800194c <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800194c:	4b03      	ldr	r3, [pc, #12]	; (800195c <RCC_GetPCLK1ClockFreq+0x10>)
 800194e:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001950:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001954:	4a02      	ldr	r2, [pc, #8]	; (8001960 <RCC_GetPCLK1ClockFreq+0x14>)
 8001956:	5cd3      	ldrb	r3, [r2, r3]
}
 8001958:	40d8      	lsrs	r0, r3
 800195a:	4770      	bx	lr
 800195c:	40023800 	.word	0x40023800
 8001960:	080046a4 	.word	0x080046a4

08001964 <RCC_GetPCLK2ClockFreq>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <RCC_GetPCLK2ClockFreq+0x10>)
 8001966:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001968:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800196c:	4a02      	ldr	r2, [pc, #8]	; (8001978 <RCC_GetPCLK2ClockFreq+0x14>)
 800196e:	5cd3      	ldrb	r3, [r2, r3]
}
 8001970:	40d8      	lsrs	r0, r3
 8001972:	4770      	bx	lr
 8001974:	40023800 	.word	0x40023800
 8001978:	080046a4 	.word	0x080046a4

0800197c <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800197c:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <RCC_PLL_GetFreqDomain_SYS+0x40>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8001984:	b923      	cbnz	r3, 8001990 <RCC_PLL_GetFreqDomain_SYS+0x14>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <RCC_PLL_GetFreqDomain_SYS+0x44>)
    default:
      pllinputfreq = HSI_VALUE;
      break;
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001988:	2808      	cmp	r0, #8
 800198a:	d003      	beq.n	8001994 <RCC_PLL_GetFreqDomain_SYS+0x18>
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800198c:	2000      	movs	r0, #0
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
}
 800198e:	4770      	bx	lr
      pllinputfreq = HSE_VALUE;
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <RCC_PLL_GetFreqDomain_SYS+0x48>)
 8001992:	e7f9      	b.n	8001988 <RCC_PLL_GetFreqDomain_SYS+0xc>
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001994:	4a09      	ldr	r2, [pc, #36]	; (80019bc <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8001996:	6850      	ldr	r0, [r2, #4]
 8001998:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800199c:	fbb3 f3f0 	udiv	r3, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80019a0:	6850      	ldr	r0, [r2, #4]
 80019a2:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80019a6:	fb00 f003 	mul.w	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80019aa:	6853      	ldr	r3, [r2, #4]
 80019ac:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80019b0:	3301      	adds	r3, #1
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800
 80019c0:	00f42400 	.word	0x00f42400
 80019c4:	007a1200 	.word	0x007a1200

080019c8 <RCC_GetSystemClockFreq>:
{
 80019c8:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <RCC_GetSystemClockFreq+0x24>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d007      	beq.n	80019e6 <RCC_GetSystemClockFreq+0x1e>
 80019d6:	2b08      	cmp	r3, #8
 80019d8:	d001      	beq.n	80019de <RCC_GetSystemClockFreq+0x16>
      frequency = HSI_VALUE;
 80019da:	4805      	ldr	r0, [pc, #20]	; (80019f0 <RCC_GetSystemClockFreq+0x28>)
 80019dc:	bd08      	pop	{r3, pc}
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80019de:	2008      	movs	r0, #8
 80019e0:	f7ff ffcc 	bl	800197c <RCC_PLL_GetFreqDomain_SYS>
      break;
 80019e4:	bd08      	pop	{r3, pc}
      frequency = HSE_VALUE;
 80019e6:	4803      	ldr	r0, [pc, #12]	; (80019f4 <RCC_GetSystemClockFreq+0x2c>)
}
 80019e8:	bd08      	pop	{r3, pc}
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800
 80019f0:	00f42400 	.word	0x00f42400
 80019f4:	007a1200 	.word	0x007a1200

080019f8 <LL_RCC_GetSystemClocksFreq>:
{
 80019f8:	b510      	push	{r4, lr}
 80019fa:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80019fc:	f7ff ffe4 	bl	80019c8 <RCC_GetSystemClockFreq>
 8001a00:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001a02:	f7ff ff97 	bl	8001934 <RCC_GetHCLKClockFreq>
 8001a06:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001a08:	f7ff ffa0 	bl	800194c <RCC_GetPCLK1ClockFreq>
 8001a0c:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001a0e:	6860      	ldr	r0, [r4, #4]
 8001a10:	f7ff ffa8 	bl	8001964 <RCC_GetPCLK2ClockFreq>
 8001a14:	60e0      	str	r0, [r4, #12]
 8001a16:	bd10      	pop	{r4, pc}

08001a18 <LL_USART_Init>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001a18:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001a1a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001a1e:	d001      	beq.n	8001a24 <LL_USART_Init+0xc>
  ErrorStatus status = ERROR;
 8001a20:	2001      	movs	r0, #1
 8001a22:	4770      	bx	lr
{
 8001a24:	b530      	push	{r4, r5, lr}
 8001a26:	b085      	sub	sp, #20
 8001a28:	460d      	mov	r5, r1
 8001a2a:	4604      	mov	r4, r0
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001a2c:	68c3      	ldr	r3, [r0, #12]
 8001a2e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001a32:	f023 030c 	bic.w	r3, r3, #12
 8001a36:	684a      	ldr	r2, [r1, #4]
 8001a38:	68c9      	ldr	r1, [r1, #12]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	6929      	ldr	r1, [r5, #16]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	69a9      	ldr	r1, [r5, #24]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	4313      	orrs	r3, r2
 8001a46:	60c3      	str	r3, [r0, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001a48:	68ab      	ldr	r3, [r5, #8]
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001a4a:	6902      	ldr	r2, [r0, #16]
 8001a4c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001a50:	4313      	orrs	r3, r2
 8001a52:	6103      	str	r3, [r0, #16]

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001a54:	696b      	ldr	r3, [r5, #20]
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001a56:	6942      	ldr	r2, [r0, #20]
 8001a58:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	6143      	str	r3, [r0, #20]

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8001a60:	4668      	mov	r0, sp
 8001a62:	f7ff ffc9 	bl	80019f8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8001a66:	4b3c      	ldr	r3, [pc, #240]	; (8001b58 <LL_USART_Init+0x140>)
 8001a68:	429c      	cmp	r4, r3
 8001a6a:	d01b      	beq.n	8001aa4 <LL_USART_Init+0x8c>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
    }
    else if (USARTx == USART2)
 8001a6c:	4b3b      	ldr	r3, [pc, #236]	; (8001b5c <LL_USART_Init+0x144>)
 8001a6e:	429c      	cmp	r4, r3
 8001a70:	d01a      	beq.n	8001aa8 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8001a72:	4b3b      	ldr	r3, [pc, #236]	; (8001b60 <LL_USART_Init+0x148>)
 8001a74:	429c      	cmp	r4, r3
 8001a76:	d019      	beq.n	8001aac <LL_USART_Init+0x94>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8001a78:	4b3a      	ldr	r3, [pc, #232]	; (8001b64 <LL_USART_Init+0x14c>)
 8001a7a:	429c      	cmp	r4, r3
 8001a7c:	d018      	beq.n	8001ab0 <LL_USART_Init+0x98>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8001a7e:	4b3a      	ldr	r3, [pc, #232]	; (8001b68 <LL_USART_Init+0x150>)
 8001a80:	429c      	cmp	r4, r3
 8001a82:	d017      	beq.n	8001ab4 <LL_USART_Init+0x9c>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8001a84:	4b39      	ldr	r3, [pc, #228]	; (8001b6c <LL_USART_Init+0x154>)
 8001a86:	429c      	cmp	r4, r3
 8001a88:	d016      	beq.n	8001ab8 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 8001a8a:	4b39      	ldr	r3, [pc, #228]	; (8001b70 <LL_USART_Init+0x158>)
 8001a8c:	429c      	cmp	r4, r3
 8001a8e:	d015      	beq.n	8001abc <LL_USART_Init+0xa4>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 8001a90:	4b38      	ldr	r3, [pc, #224]	; (8001b74 <LL_USART_Init+0x15c>)
 8001a92:	429c      	cmp	r4, r3
 8001a94:	d014      	beq.n	8001ac0 <LL_USART_Init+0xa8>
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001a96:	2300      	movs	r3, #0

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d05a      	beq.n	8001b52 <LL_USART_Init+0x13a>
        && (USART_InitStruct->BaudRate != 0U))
 8001a9c:	682a      	ldr	r2, [r5, #0]
 8001a9e:	b98a      	cbnz	r2, 8001ac4 <LL_USART_Init+0xac>
  ErrorStatus status = ERROR;
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	e057      	b.n	8001b54 <LL_USART_Init+0x13c>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001aa4:	9b03      	ldr	r3, [sp, #12]
 8001aa6:	e7f7      	b.n	8001a98 <LL_USART_Init+0x80>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001aa8:	9b02      	ldr	r3, [sp, #8]
 8001aaa:	e7f5      	b.n	8001a98 <LL_USART_Init+0x80>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001aac:	9b02      	ldr	r3, [sp, #8]
 8001aae:	e7f3      	b.n	8001a98 <LL_USART_Init+0x80>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001ab0:	9b03      	ldr	r3, [sp, #12]
 8001ab2:	e7f1      	b.n	8001a98 <LL_USART_Init+0x80>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001ab4:	9b02      	ldr	r3, [sp, #8]
 8001ab6:	e7ef      	b.n	8001a98 <LL_USART_Init+0x80>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001ab8:	9b02      	ldr	r3, [sp, #8]
 8001aba:	e7ed      	b.n	8001a98 <LL_USART_Init+0x80>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001abc:	9b02      	ldr	r3, [sp, #8]
 8001abe:	e7eb      	b.n	8001a98 <LL_USART_Init+0x80>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001ac0:	9b02      	ldr	r3, [sp, #8]
 8001ac2:	e7e9      	b.n	8001a98 <LL_USART_Init+0x80>
    {
      status = SUCCESS;
      LL_USART_SetBaudRate(USARTx,
 8001ac4:	69a9      	ldr	r1, [r5, #24]
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001ac6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001aca:	d020      	beq.n	8001b0e <LL_USART_Init+0xf6>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001acc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ad0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ad4:	0092      	lsls	r2, r2, #2
 8001ad6:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ada:	4d27      	ldr	r5, [pc, #156]	; (8001b78 <LL_USART_Init+0x160>)
 8001adc:	fba5 2003 	umull	r2, r0, r5, r3
 8001ae0:	0940      	lsrs	r0, r0, #5
 8001ae2:	0102      	lsls	r2, r0, #4
 8001ae4:	b291      	uxth	r1, r2
 8001ae6:	2264      	movs	r2, #100	; 0x64
 8001ae8:	fb02 3210 	mls	r2, r2, r0, r3
 8001aec:	0113      	lsls	r3, r2, #4
 8001aee:	3332      	adds	r3, #50	; 0x32
 8001af0:	fba5 2303 	umull	r2, r3, r5, r3
 8001af4:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8001af8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001afc:	440a      	add	r2, r1
 8001afe:	b292      	uxth	r2, r2
 8001b00:	f003 030f 	and.w	r3, r3, #15
 8001b04:	4413      	add	r3, r2
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	e022      	b.n	8001b54 <LL_USART_Init+0x13c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001b0e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b12:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b16:	0052      	lsls	r2, r2, #1
 8001b18:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b1c:	4d16      	ldr	r5, [pc, #88]	; (8001b78 <LL_USART_Init+0x160>)
 8001b1e:	fba5 2003 	umull	r2, r0, r5, r3
 8001b22:	0940      	lsrs	r0, r0, #5
 8001b24:	0102      	lsls	r2, r0, #4
 8001b26:	b291      	uxth	r1, r2
 8001b28:	2264      	movs	r2, #100	; 0x64
 8001b2a:	fb02 3210 	mls	r2, r2, r0, r3
 8001b2e:	00d3      	lsls	r3, r2, #3
 8001b30:	3332      	adds	r3, #50	; 0x32
 8001b32:	fba5 2303 	umull	r2, r3, r5, r3
 8001b36:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8001b3a:	005a      	lsls	r2, r3, #1
 8001b3c:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8001b40:	440a      	add	r2, r1
 8001b42:	b292      	uxth	r2, r2
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	4413      	add	r3, r2
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	60a3      	str	r3, [r4, #8]
 8001b4e:	2000      	movs	r0, #0
 8001b50:	e000      	b.n	8001b54 <LL_USART_Init+0x13c>
  ErrorStatus status = ERROR;
 8001b52:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8001b54:	b005      	add	sp, #20
 8001b56:	bd30      	pop	{r4, r5, pc}
 8001b58:	40011000 	.word	0x40011000
 8001b5c:	40004400 	.word	0x40004400
 8001b60:	40004800 	.word	0x40004800
 8001b64:	40011400 	.word	0x40011400
 8001b68:	40004c00 	.word	0x40004c00
 8001b6c:	40005000 	.word	0x40005000
 8001b70:	40007800 	.word	0x40007800
 8001b74:	40007c00 	.word	0x40007c00
 8001b78:	51eb851f 	.word	0x51eb851f

08001b7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b7c:	b530      	push	{r4, r5, lr}
 8001b7e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	2400      	movs	r4, #0
 8001b82:	9403      	str	r4, [sp, #12]
 8001b84:	9404      	str	r4, [sp, #16]
 8001b86:	9405      	str	r4, [sp, #20]
 8001b88:	9406      	str	r4, [sp, #24]
 8001b8a:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b8c:	9400      	str	r4, [sp, #0]
 8001b8e:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <MX_GPIO_Init+0x78>)
 8001b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b96:	631a      	str	r2, [r3, #48]	; 0x30
 8001b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b9a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001b9e:	9200      	str	r2, [sp, #0]
 8001ba0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba2:	9401      	str	r4, [sp, #4]
 8001ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ba6:	f042 0201 	orr.w	r2, r2, #1
 8001baa:	631a      	str	r2, [r3, #48]	; 0x30
 8001bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bae:	f002 0201 	and.w	r2, r2, #1
 8001bb2:	9201      	str	r2, [sp, #4]
 8001bb4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bb6:	9402      	str	r4, [sp, #8]
 8001bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bbe:	631a      	str	r2, [r3, #48]	; 0x30
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc6:	9302      	str	r3, [sp, #8]
 8001bc8:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001bca:	4d0b      	ldr	r5, [pc, #44]	; (8001bf8 <MX_GPIO_Init+0x7c>)
 8001bcc:	4622      	mov	r2, r4
 8001bce:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001bd2:	4628      	mov	r0, r5
 8001bd4:	f7ff fb2e 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001bd8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001bdc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bde:	2301      	movs	r3, #1
 8001be0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001be6:	a903      	add	r1, sp, #12
 8001be8:	4628      	mov	r0, r5
 8001bea:	f7ff fa31 	bl	8001050 <HAL_GPIO_Init>

}
 8001bee:	b009      	add	sp, #36	; 0x24
 8001bf0:	bd30      	pop	{r4, r5, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40021800 	.word	0x40021800

08001bfc <MX_NVIC_Init>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <MX_NVIC_Init+0x14>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c00:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <MX_NVIC_Init+0x18>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c08:	2220      	movs	r2, #32
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00
 8001c14:	e000e100 	.word	0xe000e100

08001c18 <_write>:
  HAL_UART_Transmit(&huart1, p, len, 10);
  return len;
}
*/
int _write(int file, char *ptr, int len)
{
 8001c18:	b430      	push	{r4, r5}
  //HAL_UART_Transmit(&huart1, (uint8_t*)ptr, (uint16_t)len, 0xFFFFFFFF);

  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1a:	2400      	movs	r4, #0
 8001c1c:	e009      	b.n	8001c32 <_write+0x1a>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001c1e:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <_write+0x24>)
 8001c20:	681b      	ldr	r3, [r3, #0]
  {
    while (!LL_USART_IsActiveFlag_TXE(USART1))
 8001c22:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c26:	d0fa      	beq.n	8001c1e <_write+0x6>
    {
    //we can put some timeout here
    }
    //LL_USART_TransmitData8(USART2,*ptr++);
    LL_USART_TransmitData8(USART1, *ptr++);
 8001c28:	780d      	ldrb	r5, [r1, #0]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8001c2a:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <_write+0x24>)
 8001c2c:	605d      	str	r5, [r3, #4]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2e:	3401      	adds	r4, #1
    LL_USART_TransmitData8(USART1, *ptr++);
 8001c30:	3101      	adds	r1, #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c32:	4294      	cmp	r4, r2
 8001c34:	dbf3      	blt.n	8001c1e <_write+0x6>
  }

  return len;
}
 8001c36:	4610      	mov	r0, r2
 8001c38:	bc30      	pop	{r4, r5}
 8001c3a:	4770      	bx	lr
 8001c3c:	40011000 	.word	0x40011000

08001c40 <USART_Rx_Callback>:

void USART_Rx_Callback(USART_TypeDef *USARTx)
{
 8001c40:	b508      	push	{r3, lr}
  if(USARTx == USART1)
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <USART_Rx_Callback+0x3c>)
 8001c44:	4298      	cmp	r0, r3
 8001c46:	d000      	beq.n	8001c4a <USART_Rx_Callback+0xa>
 8001c48:	bd08      	pop	{r3, pc}
  {
    //rx1_data = (USARTx->RDR & 0x1ff);
    //g_u8Rx1_data = LL_USART_ReceiveData8(USARTx);
    g_u8Rx1_data = (USARTx->DR & 0x1ff);
 8001c4a:	6843      	ldr	r3, [r0, #4]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	4a0c      	ldr	r2, [pc, #48]	; (8001c80 <USART_Rx_Callback+0x40>)
 8001c50:	7013      	strb	r3, [r2, #0]
 8001c52:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <USART_Rx_Callback+0x3c>)
 8001c54:	6053      	str	r3, [r2, #4]

    LL_USART_TransmitData8(USART1, g_u8Rx1_data);

    switch(g_u8Rx1_data)
 8001c56:	2b30      	cmp	r3, #48	; 0x30
 8001c58:	d008      	beq.n	8001c6c <USART_Rx_Callback+0x2c>
 8001c5a:	2b31      	cmp	r3, #49	; 0x31
 8001c5c:	d1f4      	bne.n	8001c48 <USART_Rx_Callback+0x8>
    {
      case '1':
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c64:	4807      	ldr	r0, [pc, #28]	; (8001c84 <USART_Rx_Callback+0x44>)
 8001c66:	f7ff fae5 	bl	8001234 <HAL_GPIO_WritePin>
        break;
 8001c6a:	bd08      	pop	{r3, pc}

      case '0':
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c72:	4804      	ldr	r0, [pc, #16]	; (8001c84 <USART_Rx_Callback+0x44>)
 8001c74:	f7ff fade 	bl	8001234 <HAL_GPIO_WritePin>
        break;
    }

  }
}
 8001c78:	e7e6      	b.n	8001c48 <USART_Rx_Callback+0x8>
 8001c7a:	bf00      	nop
 8001c7c:	40011000 	.word	0x40011000
 8001c80:	20000208 	.word	0x20000208
 8001c84:	40021800 	.word	0x40021800

08001c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c88:	b530      	push	{r4, r5, lr}
 8001c8a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c8c:	2230      	movs	r2, #48	; 0x30
 8001c8e:	2100      	movs	r1, #0
 8001c90:	a808      	add	r0, sp, #32
 8001c92:	f000 f99b 	bl	8001fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c96:	2400      	movs	r4, #0
 8001c98:	9403      	str	r4, [sp, #12]
 8001c9a:	9404      	str	r4, [sp, #16]
 8001c9c:	9405      	str	r4, [sp, #20]
 8001c9e:	9406      	str	r4, [sp, #24]
 8001ca0:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca2:	9401      	str	r4, [sp, #4]
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <SystemClock_Config+0x8c>)
 8001ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ca8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001cac:	641a      	str	r2, [r3, #64]	; 0x40
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	9301      	str	r3, [sp, #4]
 8001cb6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cb8:	9402      	str	r4, [sp, #8]
 8001cba:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <SystemClock_Config+0x90>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cca:	9302      	str	r3, [sp, #8]
 8001ccc:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cd6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cd8:	2502      	movs	r5, #2
 8001cda:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cdc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ce0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001ce6:	22a8      	movs	r2, #168	; 0xa8
 8001ce8:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cea:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cec:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cee:	a808      	add	r0, sp, #32
 8001cf0:	f7ff faa6 	bl	8001240 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf4:	230f      	movs	r3, #15
 8001cf6:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cf8:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cfa:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cfc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d00:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d06:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d08:	2105      	movs	r1, #5
 8001d0a:	a803      	add	r0, sp, #12
 8001d0c:	f7ff fcce 	bl	80016ac <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001d10:	b015      	add	sp, #84	; 0x54
 8001d12:	bd30      	pop	{r4, r5, pc}
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40007000 	.word	0x40007000

08001d1c <main>:
{
 8001d1c:	b508      	push	{r3, lr}
  HAL_Init();
 8001d1e:	f7ff f8fd 	bl	8000f1c <HAL_Init>
  SystemClock_Config();
 8001d22:	f7ff ffb1 	bl	8001c88 <SystemClock_Config>
  MX_GPIO_Init();
 8001d26:	f7ff ff29 	bl	8001b7c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001d2a:	f000 f8a5 	bl	8001e78 <MX_USART1_UART_Init>
  MX_NVIC_Init();
 8001d2e:	f7ff ff65 	bl	8001bfc <MX_NVIC_Init>
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001d32:	4a07      	ldr	r2, [pc, #28]	; (8001d50 <main+0x34>)
 8001d34:	68d3      	ldr	r3, [r2, #12]
 8001d36:	f043 0320 	orr.w	r3, r3, #32
 8001d3a:	60d3      	str	r3, [r2, #12]
    printf("TEST : %d\r\n", 77);
 8001d3c:	214d      	movs	r1, #77	; 0x4d
 8001d3e:	4805      	ldr	r0, [pc, #20]	; (8001d54 <main+0x38>)
 8001d40:	f000 fdb8 	bl	80028b4 <iprintf>
    HAL_Delay(1000);
 8001d44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d48:	f7ff f914 	bl	8000f74 <HAL_Delay>
 8001d4c:	e7f6      	b.n	8001d3c <main+0x20>
 8001d4e:	bf00      	nop
 8001d50:	40011000 	.word	0x40011000
 8001d54:	08004688 	.word	0x08004688

08001d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d58:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	9100      	str	r1, [sp, #0]
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_MspInit+0x34>)
 8001d60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d66:	645a      	str	r2, [r3, #68]	; 0x44
 8001d68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d6a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001d6e:	9200      	str	r2, [sp, #0]
 8001d70:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	9101      	str	r1, [sp, #4]
 8001d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d76:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d7a:	641a      	str	r2, [r3, #64]	; 0x40
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	9301      	str	r3, [sp, #4]
 8001d84:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d86:	b002      	add	sp, #8
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800

08001d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d90:	4770      	bx	lr

08001d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d92:	e7fe      	b.n	8001d92 <HardFault_Handler>

08001d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d94:	e7fe      	b.n	8001d94 <MemManage_Handler>

08001d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d96:	e7fe      	b.n	8001d96 <BusFault_Handler>

08001d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d98:	e7fe      	b.n	8001d98 <UsageFault_Handler>

08001d9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d9a:	4770      	bx	lr

08001d9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d9c:	4770      	bx	lr

08001d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d9e:	4770      	bx	lr

08001da0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001da0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001da2:	f7ff f8d5 	bl	8000f50 <HAL_IncTick>
 8001da6:	bd08      	pop	{r3, pc}

08001da8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001da8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
  USART_Rx_Callback(USART1);
 8001daa:	4802      	ldr	r0, [pc, #8]	; (8001db4 <USART1_IRQHandler+0xc>)
 8001dac:	f7ff ff48 	bl	8001c40 <USART_Rx_Callback>
 8001db0:	bd08      	pop	{r3, pc}
 8001db2:	bf00      	nop
 8001db4:	40011000 	.word	0x40011000

08001db8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dba:	460d      	mov	r5, r1
 8001dbc:	4617      	mov	r7, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbe:	2400      	movs	r4, #0
 8001dc0:	e005      	b.n	8001dce <_read+0x16>
	{
		*ptr++ = __io_getchar();
 8001dc2:	1c6e      	adds	r6, r5, #1
 8001dc4:	f3af 8000 	nop.w
 8001dc8:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dca:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 8001dcc:	4635      	mov	r5, r6
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dce:	42bc      	cmp	r4, r7
 8001dd0:	dbf7      	blt.n	8001dc2 <_read+0xa>
	}

return len;
}
 8001dd2:	4638      	mov	r0, r7
 8001dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001dd8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001dd8:	b508      	push	{r3, lr}
 8001dda:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001ddc:	4a0b      	ldr	r2, [pc, #44]	; (8001e0c <_sbrk+0x34>)
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	b142      	cbz	r2, 8001df4 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8001de2:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <_sbrk+0x34>)
 8001de4:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8001de6:	4403      	add	r3, r0
 8001de8:	466a      	mov	r2, sp
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d806      	bhi.n	8001dfc <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8001dee:	4a07      	ldr	r2, [pc, #28]	; (8001e0c <_sbrk+0x34>)
 8001df0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8001df2:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8001df4:	4906      	ldr	r1, [pc, #24]	; (8001e10 <_sbrk+0x38>)
 8001df6:	4a05      	ldr	r2, [pc, #20]	; (8001e0c <_sbrk+0x34>)
 8001df8:	6011      	str	r1, [r2, #0]
 8001dfa:	e7f2      	b.n	8001de2 <_sbrk+0xa>
		errno = ENOMEM;
 8001dfc:	f000 f8bc 	bl	8001f78 <__errno>
 8001e00:	230c      	movs	r3, #12
 8001e02:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001e04:	f04f 30ff 	mov.w	r0, #4294967295
 8001e08:	bd08      	pop	{r3, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200001f8 	.word	0x200001f8
 8001e10:	20000210 	.word	0x20000210

08001e14 <_close>:

int _close(int file)
{
	return -1;
}
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295
 8001e18:	4770      	bx	lr

08001e1a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001e1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e1e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001e20:	2000      	movs	r0, #0
 8001e22:	4770      	bx	lr

08001e24 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001e24:	2001      	movs	r0, #1
 8001e26:	4770      	bx	lr

08001e28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001e28:	2000      	movs	r0, #0
 8001e2a:	4770      	bx	lr

08001e2c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e2c:	490f      	ldr	r1, [pc, #60]	; (8001e6c <SystemInit+0x40>)
 8001e2e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001e32:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <SystemInit+0x44>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	f042 0201 	orr.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e44:	2000      	movs	r0, #0
 8001e46:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001e4e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e52:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001e54:	4a07      	ldr	r2, [pc, #28]	; (8001e74 <SystemInit+0x48>)
 8001e56:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e5e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001e60:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001e66:	608b      	str	r3, [r1, #8]
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000ed00 	.word	0xe000ed00
 8001e70:	40023800 	.word	0x40023800
 8001e74:	24003010 	.word	0x24003010

08001e78 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e78:	b510      	push	{r4, lr}
 8001e7a:	b090      	sub	sp, #64	; 0x40
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001e7c:	2400      	movs	r4, #0
 8001e7e:	9409      	str	r4, [sp, #36]	; 0x24
 8001e80:	940a      	str	r4, [sp, #40]	; 0x28
 8001e82:	940b      	str	r4, [sp, #44]	; 0x2c
 8001e84:	940c      	str	r4, [sp, #48]	; 0x30
 8001e86:	940d      	str	r4, [sp, #52]	; 0x34
 8001e88:	940e      	str	r4, [sp, #56]	; 0x38
 8001e8a:	940f      	str	r4, [sp, #60]	; 0x3c

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	9403      	str	r4, [sp, #12]
 8001e8e:	9404      	str	r4, [sp, #16]
 8001e90:	9405      	str	r4, [sp, #20]
 8001e92:	9406      	str	r4, [sp, #24]
 8001e94:	9407      	str	r4, [sp, #28]
 8001e96:	9408      	str	r4, [sp, #32]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e98:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <MX_USART1_UART_Init+0xa4>)
 8001e9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e9c:	f042 0210 	orr.w	r2, r2, #16
 8001ea0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ea2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ea4:	f002 0210 	and.w	r2, r2, #16
 8001ea8:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001eaa:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001eac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001ebc:	9b01      	ldr	r3, [sp, #4]
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
  /**USART1 GPIO Configuration  
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8001ebe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ec2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001ed0:	2307      	movs	r3, #7
 8001ed2:	9308      	str	r3, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed4:	a903      	add	r1, sp, #12
 8001ed6:	4812      	ldr	r0, [pc, #72]	; (8001f20 <MX_USART1_UART_Init+0xa8>)
 8001ed8:	f7ff fc94 	bl	8001804 <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 8001edc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001ee0:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001ee2:	940a      	str	r4, [sp, #40]	; 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001ee4:	940b      	str	r4, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001ee6:	940c      	str	r4, [sp, #48]	; 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001ee8:	230c      	movs	r3, #12
 8001eea:	930d      	str	r3, [sp, #52]	; 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001eec:	940e      	str	r4, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001eee:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_USART_Init(USART1, &USART_InitStruct);
 8001ef0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001ef4:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
 8001ef8:	a909      	add	r1, sp, #36	; 0x24
 8001efa:	4620      	mov	r0, r4
 8001efc:	f7ff fd8c 	bl	8001a18 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f00:	6923      	ldr	r3, [r4, #16]
 8001f02:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001f06:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001f08:	6963      	ldr	r3, [r4, #20]
 8001f0a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001f0e:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001f10:	68e3      	ldr	r3, [r4, #12]
 8001f12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f16:	60e3      	str	r3, [r4, #12]
  LL_USART_ConfigAsyncMode(USART1);
  LL_USART_Enable(USART1);

}
 8001f18:	b010      	add	sp, #64	; 0x40
 8001f1a:	bd10      	pop	{r4, pc}
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40020000 	.word	0x40020000

08001f24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001f24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f5c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f2a:	e003      	b.n	8001f34 <LoopCopyDataInit>

08001f2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f32:	3104      	adds	r1, #4

08001f34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f34:	480b      	ldr	r0, [pc, #44]	; (8001f64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f36:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f3c:	d3f6      	bcc.n	8001f2c <CopyDataInit>
  ldr  r2, =_sbss
 8001f3e:	4a0b      	ldr	r2, [pc, #44]	; (8001f6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f40:	e002      	b.n	8001f48 <LoopFillZerobss>

08001f42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f44:	f842 3b04 	str.w	r3, [r2], #4

08001f48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f48:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f4c:	d3f9      	bcc.n	8001f42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f4e:	f7ff ff6d 	bl	8001e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f52:	f000 f817 	bl	8001f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f56:	f7ff fee1 	bl	8001d1c <main>
  bx  lr    
 8001f5a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f5c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001f60:	08004980 	.word	0x08004980
  ldr  r0, =_sdata
 8001f64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f68:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001f6c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001f70:	20000210 	.word	0x20000210

08001f74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f74:	e7fe      	b.n	8001f74 <ADC_IRQHandler>
	...

08001f78 <__errno>:
 8001f78:	4b01      	ldr	r3, [pc, #4]	; (8001f80 <__errno+0x8>)
 8001f7a:	6818      	ldr	r0, [r3, #0]
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	2000000c 	.word	0x2000000c

08001f84 <__libc_init_array>:
 8001f84:	b570      	push	{r4, r5, r6, lr}
 8001f86:	4e0d      	ldr	r6, [pc, #52]	; (8001fbc <__libc_init_array+0x38>)
 8001f88:	4c0d      	ldr	r4, [pc, #52]	; (8001fc0 <__libc_init_array+0x3c>)
 8001f8a:	1ba4      	subs	r4, r4, r6
 8001f8c:	10a4      	asrs	r4, r4, #2
 8001f8e:	2500      	movs	r5, #0
 8001f90:	42a5      	cmp	r5, r4
 8001f92:	d109      	bne.n	8001fa8 <__libc_init_array+0x24>
 8001f94:	4e0b      	ldr	r6, [pc, #44]	; (8001fc4 <__libc_init_array+0x40>)
 8001f96:	4c0c      	ldr	r4, [pc, #48]	; (8001fc8 <__libc_init_array+0x44>)
 8001f98:	f002 fb6a 	bl	8004670 <_init>
 8001f9c:	1ba4      	subs	r4, r4, r6
 8001f9e:	10a4      	asrs	r4, r4, #2
 8001fa0:	2500      	movs	r5, #0
 8001fa2:	42a5      	cmp	r5, r4
 8001fa4:	d105      	bne.n	8001fb2 <__libc_init_array+0x2e>
 8001fa6:	bd70      	pop	{r4, r5, r6, pc}
 8001fa8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fac:	4798      	blx	r3
 8001fae:	3501      	adds	r5, #1
 8001fb0:	e7ee      	b.n	8001f90 <__libc_init_array+0xc>
 8001fb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fb6:	4798      	blx	r3
 8001fb8:	3501      	adds	r5, #1
 8001fba:	e7f2      	b.n	8001fa2 <__libc_init_array+0x1e>
 8001fbc:	08004978 	.word	0x08004978
 8001fc0:	08004978 	.word	0x08004978
 8001fc4:	08004978 	.word	0x08004978
 8001fc8:	0800497c 	.word	0x0800497c

08001fcc <memset>:
 8001fcc:	4402      	add	r2, r0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d100      	bne.n	8001fd6 <memset+0xa>
 8001fd4:	4770      	bx	lr
 8001fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8001fda:	e7f9      	b.n	8001fd0 <memset+0x4>

08001fdc <__cvt>:
 8001fdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001fe0:	ec55 4b10 	vmov	r4, r5, d0
 8001fe4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8001fe6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8001fea:	2d00      	cmp	r5, #0
 8001fec:	460e      	mov	r6, r1
 8001fee:	4691      	mov	r9, r2
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	bfb8      	it	lt
 8001ff4:	4622      	movlt	r2, r4
 8001ff6:	462b      	mov	r3, r5
 8001ff8:	f027 0720 	bic.w	r7, r7, #32
 8001ffc:	bfbb      	ittet	lt
 8001ffe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002002:	461d      	movlt	r5, r3
 8002004:	2300      	movge	r3, #0
 8002006:	232d      	movlt	r3, #45	; 0x2d
 8002008:	bfb8      	it	lt
 800200a:	4614      	movlt	r4, r2
 800200c:	2f46      	cmp	r7, #70	; 0x46
 800200e:	700b      	strb	r3, [r1, #0]
 8002010:	d004      	beq.n	800201c <__cvt+0x40>
 8002012:	2f45      	cmp	r7, #69	; 0x45
 8002014:	d100      	bne.n	8002018 <__cvt+0x3c>
 8002016:	3601      	adds	r6, #1
 8002018:	2102      	movs	r1, #2
 800201a:	e000      	b.n	800201e <__cvt+0x42>
 800201c:	2103      	movs	r1, #3
 800201e:	ab03      	add	r3, sp, #12
 8002020:	9301      	str	r3, [sp, #4]
 8002022:	ab02      	add	r3, sp, #8
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	4632      	mov	r2, r6
 8002028:	4653      	mov	r3, sl
 800202a:	ec45 4b10 	vmov	d0, r4, r5
 800202e:	f000 fce7 	bl	8002a00 <_dtoa_r>
 8002032:	2f47      	cmp	r7, #71	; 0x47
 8002034:	4680      	mov	r8, r0
 8002036:	d102      	bne.n	800203e <__cvt+0x62>
 8002038:	f019 0f01 	tst.w	r9, #1
 800203c:	d026      	beq.n	800208c <__cvt+0xb0>
 800203e:	2f46      	cmp	r7, #70	; 0x46
 8002040:	eb08 0906 	add.w	r9, r8, r6
 8002044:	d111      	bne.n	800206a <__cvt+0x8e>
 8002046:	f898 3000 	ldrb.w	r3, [r8]
 800204a:	2b30      	cmp	r3, #48	; 0x30
 800204c:	d10a      	bne.n	8002064 <__cvt+0x88>
 800204e:	2200      	movs	r2, #0
 8002050:	2300      	movs	r3, #0
 8002052:	4620      	mov	r0, r4
 8002054:	4629      	mov	r1, r5
 8002056:	f7fe fd43 	bl	8000ae0 <__aeabi_dcmpeq>
 800205a:	b918      	cbnz	r0, 8002064 <__cvt+0x88>
 800205c:	f1c6 0601 	rsb	r6, r6, #1
 8002060:	f8ca 6000 	str.w	r6, [sl]
 8002064:	f8da 3000 	ldr.w	r3, [sl]
 8002068:	4499      	add	r9, r3
 800206a:	2200      	movs	r2, #0
 800206c:	2300      	movs	r3, #0
 800206e:	4620      	mov	r0, r4
 8002070:	4629      	mov	r1, r5
 8002072:	f7fe fd35 	bl	8000ae0 <__aeabi_dcmpeq>
 8002076:	b938      	cbnz	r0, 8002088 <__cvt+0xac>
 8002078:	2230      	movs	r2, #48	; 0x30
 800207a:	9b03      	ldr	r3, [sp, #12]
 800207c:	4599      	cmp	r9, r3
 800207e:	d905      	bls.n	800208c <__cvt+0xb0>
 8002080:	1c59      	adds	r1, r3, #1
 8002082:	9103      	str	r1, [sp, #12]
 8002084:	701a      	strb	r2, [r3, #0]
 8002086:	e7f8      	b.n	800207a <__cvt+0x9e>
 8002088:	f8cd 900c 	str.w	r9, [sp, #12]
 800208c:	9b03      	ldr	r3, [sp, #12]
 800208e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002090:	eba3 0308 	sub.w	r3, r3, r8
 8002094:	4640      	mov	r0, r8
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	b004      	add	sp, #16
 800209a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800209e <__exponent>:
 800209e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020a0:	4603      	mov	r3, r0
 80020a2:	2900      	cmp	r1, #0
 80020a4:	bfb8      	it	lt
 80020a6:	4249      	neglt	r1, r1
 80020a8:	f803 2b02 	strb.w	r2, [r3], #2
 80020ac:	bfb4      	ite	lt
 80020ae:	222d      	movlt	r2, #45	; 0x2d
 80020b0:	222b      	movge	r2, #43	; 0x2b
 80020b2:	2909      	cmp	r1, #9
 80020b4:	7042      	strb	r2, [r0, #1]
 80020b6:	dd20      	ble.n	80020fa <__exponent+0x5c>
 80020b8:	f10d 0207 	add.w	r2, sp, #7
 80020bc:	4617      	mov	r7, r2
 80020be:	260a      	movs	r6, #10
 80020c0:	fb91 f5f6 	sdiv	r5, r1, r6
 80020c4:	fb06 1115 	mls	r1, r6, r5, r1
 80020c8:	3130      	adds	r1, #48	; 0x30
 80020ca:	2d09      	cmp	r5, #9
 80020cc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80020d0:	f102 34ff 	add.w	r4, r2, #4294967295
 80020d4:	4629      	mov	r1, r5
 80020d6:	dc09      	bgt.n	80020ec <__exponent+0x4e>
 80020d8:	3130      	adds	r1, #48	; 0x30
 80020da:	3a02      	subs	r2, #2
 80020dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80020e0:	42ba      	cmp	r2, r7
 80020e2:	461c      	mov	r4, r3
 80020e4:	d304      	bcc.n	80020f0 <__exponent+0x52>
 80020e6:	1a20      	subs	r0, r4, r0
 80020e8:	b003      	add	sp, #12
 80020ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ec:	4622      	mov	r2, r4
 80020ee:	e7e7      	b.n	80020c0 <__exponent+0x22>
 80020f0:	f812 1b01 	ldrb.w	r1, [r2], #1
 80020f4:	f803 1b01 	strb.w	r1, [r3], #1
 80020f8:	e7f2      	b.n	80020e0 <__exponent+0x42>
 80020fa:	2230      	movs	r2, #48	; 0x30
 80020fc:	461c      	mov	r4, r3
 80020fe:	4411      	add	r1, r2
 8002100:	f804 2b02 	strb.w	r2, [r4], #2
 8002104:	7059      	strb	r1, [r3, #1]
 8002106:	e7ee      	b.n	80020e6 <__exponent+0x48>

08002108 <_printf_float>:
 8002108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800210c:	b08d      	sub	sp, #52	; 0x34
 800210e:	460c      	mov	r4, r1
 8002110:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8002114:	4616      	mov	r6, r2
 8002116:	461f      	mov	r7, r3
 8002118:	4605      	mov	r5, r0
 800211a:	f001 fb09 	bl	8003730 <_localeconv_r>
 800211e:	6803      	ldr	r3, [r0, #0]
 8002120:	9304      	str	r3, [sp, #16]
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe f864 	bl	80001f0 <strlen>
 8002128:	2300      	movs	r3, #0
 800212a:	930a      	str	r3, [sp, #40]	; 0x28
 800212c:	f8d8 3000 	ldr.w	r3, [r8]
 8002130:	9005      	str	r0, [sp, #20]
 8002132:	3307      	adds	r3, #7
 8002134:	f023 0307 	bic.w	r3, r3, #7
 8002138:	f103 0208 	add.w	r2, r3, #8
 800213c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002140:	f8d4 b000 	ldr.w	fp, [r4]
 8002144:	f8c8 2000 	str.w	r2, [r8]
 8002148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002150:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002154:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002158:	9307      	str	r3, [sp, #28]
 800215a:	f8cd 8018 	str.w	r8, [sp, #24]
 800215e:	f04f 32ff 	mov.w	r2, #4294967295
 8002162:	4ba5      	ldr	r3, [pc, #660]	; (80023f8 <_printf_float+0x2f0>)
 8002164:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002168:	f7fe fcec 	bl	8000b44 <__aeabi_dcmpun>
 800216c:	2800      	cmp	r0, #0
 800216e:	f040 81fb 	bne.w	8002568 <_printf_float+0x460>
 8002172:	f04f 32ff 	mov.w	r2, #4294967295
 8002176:	4ba0      	ldr	r3, [pc, #640]	; (80023f8 <_printf_float+0x2f0>)
 8002178:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800217c:	f7fe fcc4 	bl	8000b08 <__aeabi_dcmple>
 8002180:	2800      	cmp	r0, #0
 8002182:	f040 81f1 	bne.w	8002568 <_printf_float+0x460>
 8002186:	2200      	movs	r2, #0
 8002188:	2300      	movs	r3, #0
 800218a:	4640      	mov	r0, r8
 800218c:	4649      	mov	r1, r9
 800218e:	f7fe fcb1 	bl	8000af4 <__aeabi_dcmplt>
 8002192:	b110      	cbz	r0, 800219a <_printf_float+0x92>
 8002194:	232d      	movs	r3, #45	; 0x2d
 8002196:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800219a:	4b98      	ldr	r3, [pc, #608]	; (80023fc <_printf_float+0x2f4>)
 800219c:	4a98      	ldr	r2, [pc, #608]	; (8002400 <_printf_float+0x2f8>)
 800219e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80021a2:	bf8c      	ite	hi
 80021a4:	4690      	movhi	r8, r2
 80021a6:	4698      	movls	r8, r3
 80021a8:	2303      	movs	r3, #3
 80021aa:	f02b 0204 	bic.w	r2, fp, #4
 80021ae:	6123      	str	r3, [r4, #16]
 80021b0:	6022      	str	r2, [r4, #0]
 80021b2:	f04f 0900 	mov.w	r9, #0
 80021b6:	9700      	str	r7, [sp, #0]
 80021b8:	4633      	mov	r3, r6
 80021ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80021bc:	4621      	mov	r1, r4
 80021be:	4628      	mov	r0, r5
 80021c0:	f000 f9e2 	bl	8002588 <_printf_common>
 80021c4:	3001      	adds	r0, #1
 80021c6:	f040 8093 	bne.w	80022f0 <_printf_float+0x1e8>
 80021ca:	f04f 30ff 	mov.w	r0, #4294967295
 80021ce:	b00d      	add	sp, #52	; 0x34
 80021d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021d4:	6861      	ldr	r1, [r4, #4]
 80021d6:	1c4b      	adds	r3, r1, #1
 80021d8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80021dc:	d13f      	bne.n	800225e <_printf_float+0x156>
 80021de:	2306      	movs	r3, #6
 80021e0:	6063      	str	r3, [r4, #4]
 80021e2:	2300      	movs	r3, #0
 80021e4:	9303      	str	r3, [sp, #12]
 80021e6:	ab0a      	add	r3, sp, #40	; 0x28
 80021e8:	9302      	str	r3, [sp, #8]
 80021ea:	ab09      	add	r3, sp, #36	; 0x24
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	ec49 8b10 	vmov	d0, r8, r9
 80021f2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80021f6:	6022      	str	r2, [r4, #0]
 80021f8:	f8cd a004 	str.w	sl, [sp, #4]
 80021fc:	6861      	ldr	r1, [r4, #4]
 80021fe:	4628      	mov	r0, r5
 8002200:	f7ff feec 	bl	8001fdc <__cvt>
 8002204:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8002208:	2b47      	cmp	r3, #71	; 0x47
 800220a:	4680      	mov	r8, r0
 800220c:	d109      	bne.n	8002222 <_printf_float+0x11a>
 800220e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002210:	1cd8      	adds	r0, r3, #3
 8002212:	db02      	blt.n	800221a <_printf_float+0x112>
 8002214:	6862      	ldr	r2, [r4, #4]
 8002216:	4293      	cmp	r3, r2
 8002218:	dd57      	ble.n	80022ca <_printf_float+0x1c2>
 800221a:	f1aa 0a02 	sub.w	sl, sl, #2
 800221e:	fa5f fa8a 	uxtb.w	sl, sl
 8002222:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002226:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002228:	d834      	bhi.n	8002294 <_printf_float+0x18c>
 800222a:	3901      	subs	r1, #1
 800222c:	4652      	mov	r2, sl
 800222e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002232:	9109      	str	r1, [sp, #36]	; 0x24
 8002234:	f7ff ff33 	bl	800209e <__exponent>
 8002238:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800223a:	1883      	adds	r3, r0, r2
 800223c:	2a01      	cmp	r2, #1
 800223e:	4681      	mov	r9, r0
 8002240:	6123      	str	r3, [r4, #16]
 8002242:	dc02      	bgt.n	800224a <_printf_float+0x142>
 8002244:	6822      	ldr	r2, [r4, #0]
 8002246:	07d1      	lsls	r1, r2, #31
 8002248:	d501      	bpl.n	800224e <_printf_float+0x146>
 800224a:	3301      	adds	r3, #1
 800224c:	6123      	str	r3, [r4, #16]
 800224e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0af      	beq.n	80021b6 <_printf_float+0xae>
 8002256:	232d      	movs	r3, #45	; 0x2d
 8002258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800225c:	e7ab      	b.n	80021b6 <_printf_float+0xae>
 800225e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8002262:	d002      	beq.n	800226a <_printf_float+0x162>
 8002264:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002268:	d1bb      	bne.n	80021e2 <_printf_float+0xda>
 800226a:	b189      	cbz	r1, 8002290 <_printf_float+0x188>
 800226c:	2300      	movs	r3, #0
 800226e:	9303      	str	r3, [sp, #12]
 8002270:	ab0a      	add	r3, sp, #40	; 0x28
 8002272:	9302      	str	r3, [sp, #8]
 8002274:	ab09      	add	r3, sp, #36	; 0x24
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	ec49 8b10 	vmov	d0, r8, r9
 800227c:	6022      	str	r2, [r4, #0]
 800227e:	f8cd a004 	str.w	sl, [sp, #4]
 8002282:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002286:	4628      	mov	r0, r5
 8002288:	f7ff fea8 	bl	8001fdc <__cvt>
 800228c:	4680      	mov	r8, r0
 800228e:	e7be      	b.n	800220e <_printf_float+0x106>
 8002290:	2301      	movs	r3, #1
 8002292:	e7a5      	b.n	80021e0 <_printf_float+0xd8>
 8002294:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8002298:	d119      	bne.n	80022ce <_printf_float+0x1c6>
 800229a:	2900      	cmp	r1, #0
 800229c:	6863      	ldr	r3, [r4, #4]
 800229e:	dd0c      	ble.n	80022ba <_printf_float+0x1b2>
 80022a0:	6121      	str	r1, [r4, #16]
 80022a2:	b913      	cbnz	r3, 80022aa <_printf_float+0x1a2>
 80022a4:	6822      	ldr	r2, [r4, #0]
 80022a6:	07d2      	lsls	r2, r2, #31
 80022a8:	d502      	bpl.n	80022b0 <_printf_float+0x1a8>
 80022aa:	3301      	adds	r3, #1
 80022ac:	440b      	add	r3, r1
 80022ae:	6123      	str	r3, [r4, #16]
 80022b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022b2:	65a3      	str	r3, [r4, #88]	; 0x58
 80022b4:	f04f 0900 	mov.w	r9, #0
 80022b8:	e7c9      	b.n	800224e <_printf_float+0x146>
 80022ba:	b913      	cbnz	r3, 80022c2 <_printf_float+0x1ba>
 80022bc:	6822      	ldr	r2, [r4, #0]
 80022be:	07d0      	lsls	r0, r2, #31
 80022c0:	d501      	bpl.n	80022c6 <_printf_float+0x1be>
 80022c2:	3302      	adds	r3, #2
 80022c4:	e7f3      	b.n	80022ae <_printf_float+0x1a6>
 80022c6:	2301      	movs	r3, #1
 80022c8:	e7f1      	b.n	80022ae <_printf_float+0x1a6>
 80022ca:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80022ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80022d2:	4293      	cmp	r3, r2
 80022d4:	db05      	blt.n	80022e2 <_printf_float+0x1da>
 80022d6:	6822      	ldr	r2, [r4, #0]
 80022d8:	6123      	str	r3, [r4, #16]
 80022da:	07d1      	lsls	r1, r2, #31
 80022dc:	d5e8      	bpl.n	80022b0 <_printf_float+0x1a8>
 80022de:	3301      	adds	r3, #1
 80022e0:	e7e5      	b.n	80022ae <_printf_float+0x1a6>
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	bfd4      	ite	le
 80022e6:	f1c3 0302 	rsble	r3, r3, #2
 80022ea:	2301      	movgt	r3, #1
 80022ec:	4413      	add	r3, r2
 80022ee:	e7de      	b.n	80022ae <_printf_float+0x1a6>
 80022f0:	6823      	ldr	r3, [r4, #0]
 80022f2:	055a      	lsls	r2, r3, #21
 80022f4:	d407      	bmi.n	8002306 <_printf_float+0x1fe>
 80022f6:	6923      	ldr	r3, [r4, #16]
 80022f8:	4642      	mov	r2, r8
 80022fa:	4631      	mov	r1, r6
 80022fc:	4628      	mov	r0, r5
 80022fe:	47b8      	blx	r7
 8002300:	3001      	adds	r0, #1
 8002302:	d12b      	bne.n	800235c <_printf_float+0x254>
 8002304:	e761      	b.n	80021ca <_printf_float+0xc2>
 8002306:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800230a:	f240 80e2 	bls.w	80024d2 <_printf_float+0x3ca>
 800230e:	2200      	movs	r2, #0
 8002310:	2300      	movs	r3, #0
 8002312:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002316:	f7fe fbe3 	bl	8000ae0 <__aeabi_dcmpeq>
 800231a:	2800      	cmp	r0, #0
 800231c:	d03c      	beq.n	8002398 <_printf_float+0x290>
 800231e:	2301      	movs	r3, #1
 8002320:	4a38      	ldr	r2, [pc, #224]	; (8002404 <_printf_float+0x2fc>)
 8002322:	4631      	mov	r1, r6
 8002324:	4628      	mov	r0, r5
 8002326:	47b8      	blx	r7
 8002328:	3001      	adds	r0, #1
 800232a:	f43f af4e 	beq.w	80021ca <_printf_float+0xc2>
 800232e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002330:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002332:	429a      	cmp	r2, r3
 8002334:	db02      	blt.n	800233c <_printf_float+0x234>
 8002336:	6823      	ldr	r3, [r4, #0]
 8002338:	07d8      	lsls	r0, r3, #31
 800233a:	d50f      	bpl.n	800235c <_printf_float+0x254>
 800233c:	9b05      	ldr	r3, [sp, #20]
 800233e:	9a04      	ldr	r2, [sp, #16]
 8002340:	4631      	mov	r1, r6
 8002342:	4628      	mov	r0, r5
 8002344:	47b8      	blx	r7
 8002346:	3001      	adds	r0, #1
 8002348:	f43f af3f 	beq.w	80021ca <_printf_float+0xc2>
 800234c:	f04f 0800 	mov.w	r8, #0
 8002350:	f104 091a 	add.w	r9, r4, #26
 8002354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002356:	3b01      	subs	r3, #1
 8002358:	4598      	cmp	r8, r3
 800235a:	db12      	blt.n	8002382 <_printf_float+0x27a>
 800235c:	6823      	ldr	r3, [r4, #0]
 800235e:	079b      	lsls	r3, r3, #30
 8002360:	d509      	bpl.n	8002376 <_printf_float+0x26e>
 8002362:	f04f 0800 	mov.w	r8, #0
 8002366:	f104 0919 	add.w	r9, r4, #25
 800236a:	68e3      	ldr	r3, [r4, #12]
 800236c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800236e:	1a9b      	subs	r3, r3, r2
 8002370:	4598      	cmp	r8, r3
 8002372:	f2c0 80ee 	blt.w	8002552 <_printf_float+0x44a>
 8002376:	68e0      	ldr	r0, [r4, #12]
 8002378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800237a:	4298      	cmp	r0, r3
 800237c:	bfb8      	it	lt
 800237e:	4618      	movlt	r0, r3
 8002380:	e725      	b.n	80021ce <_printf_float+0xc6>
 8002382:	2301      	movs	r3, #1
 8002384:	464a      	mov	r2, r9
 8002386:	4631      	mov	r1, r6
 8002388:	4628      	mov	r0, r5
 800238a:	47b8      	blx	r7
 800238c:	3001      	adds	r0, #1
 800238e:	f43f af1c 	beq.w	80021ca <_printf_float+0xc2>
 8002392:	f108 0801 	add.w	r8, r8, #1
 8002396:	e7dd      	b.n	8002354 <_printf_float+0x24c>
 8002398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800239a:	2b00      	cmp	r3, #0
 800239c:	dc34      	bgt.n	8002408 <_printf_float+0x300>
 800239e:	2301      	movs	r3, #1
 80023a0:	4a18      	ldr	r2, [pc, #96]	; (8002404 <_printf_float+0x2fc>)
 80023a2:	4631      	mov	r1, r6
 80023a4:	4628      	mov	r0, r5
 80023a6:	47b8      	blx	r7
 80023a8:	3001      	adds	r0, #1
 80023aa:	f43f af0e 	beq.w	80021ca <_printf_float+0xc2>
 80023ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023b0:	b923      	cbnz	r3, 80023bc <_printf_float+0x2b4>
 80023b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80023b4:	b913      	cbnz	r3, 80023bc <_printf_float+0x2b4>
 80023b6:	6823      	ldr	r3, [r4, #0]
 80023b8:	07d9      	lsls	r1, r3, #31
 80023ba:	d5cf      	bpl.n	800235c <_printf_float+0x254>
 80023bc:	9b05      	ldr	r3, [sp, #20]
 80023be:	9a04      	ldr	r2, [sp, #16]
 80023c0:	4631      	mov	r1, r6
 80023c2:	4628      	mov	r0, r5
 80023c4:	47b8      	blx	r7
 80023c6:	3001      	adds	r0, #1
 80023c8:	f43f aeff 	beq.w	80021ca <_printf_float+0xc2>
 80023cc:	f04f 0900 	mov.w	r9, #0
 80023d0:	f104 0a1a 	add.w	sl, r4, #26
 80023d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023d6:	425b      	negs	r3, r3
 80023d8:	4599      	cmp	r9, r3
 80023da:	db01      	blt.n	80023e0 <_printf_float+0x2d8>
 80023dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80023de:	e78b      	b.n	80022f8 <_printf_float+0x1f0>
 80023e0:	2301      	movs	r3, #1
 80023e2:	4652      	mov	r2, sl
 80023e4:	4631      	mov	r1, r6
 80023e6:	4628      	mov	r0, r5
 80023e8:	47b8      	blx	r7
 80023ea:	3001      	adds	r0, #1
 80023ec:	f43f aeed 	beq.w	80021ca <_printf_float+0xc2>
 80023f0:	f109 0901 	add.w	r9, r9, #1
 80023f4:	e7ee      	b.n	80023d4 <_printf_float+0x2cc>
 80023f6:	bf00      	nop
 80023f8:	7fefffff 	.word	0x7fefffff
 80023fc:	080046b0 	.word	0x080046b0
 8002400:	080046b4 	.word	0x080046b4
 8002404:	080046c0 	.word	0x080046c0
 8002408:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800240a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800240c:	429a      	cmp	r2, r3
 800240e:	bfa8      	it	ge
 8002410:	461a      	movge	r2, r3
 8002412:	2a00      	cmp	r2, #0
 8002414:	4691      	mov	r9, r2
 8002416:	dc38      	bgt.n	800248a <_printf_float+0x382>
 8002418:	f104 031a 	add.w	r3, r4, #26
 800241c:	f04f 0b00 	mov.w	fp, #0
 8002420:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002424:	9306      	str	r3, [sp, #24]
 8002426:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800242a:	ebaa 0309 	sub.w	r3, sl, r9
 800242e:	459b      	cmp	fp, r3
 8002430:	db33      	blt.n	800249a <_printf_float+0x392>
 8002432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002434:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002436:	429a      	cmp	r2, r3
 8002438:	db3a      	blt.n	80024b0 <_printf_float+0x3a8>
 800243a:	6823      	ldr	r3, [r4, #0]
 800243c:	07da      	lsls	r2, r3, #31
 800243e:	d437      	bmi.n	80024b0 <_printf_float+0x3a8>
 8002440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002442:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002444:	eba3 020a 	sub.w	r2, r3, sl
 8002448:	eba3 0901 	sub.w	r9, r3, r1
 800244c:	4591      	cmp	r9, r2
 800244e:	bfa8      	it	ge
 8002450:	4691      	movge	r9, r2
 8002452:	f1b9 0f00 	cmp.w	r9, #0
 8002456:	dc33      	bgt.n	80024c0 <_printf_float+0x3b8>
 8002458:	f04f 0800 	mov.w	r8, #0
 800245c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002460:	f104 0a1a 	add.w	sl, r4, #26
 8002464:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002468:	1a9b      	subs	r3, r3, r2
 800246a:	eba3 0309 	sub.w	r3, r3, r9
 800246e:	4598      	cmp	r8, r3
 8002470:	f6bf af74 	bge.w	800235c <_printf_float+0x254>
 8002474:	2301      	movs	r3, #1
 8002476:	4652      	mov	r2, sl
 8002478:	4631      	mov	r1, r6
 800247a:	4628      	mov	r0, r5
 800247c:	47b8      	blx	r7
 800247e:	3001      	adds	r0, #1
 8002480:	f43f aea3 	beq.w	80021ca <_printf_float+0xc2>
 8002484:	f108 0801 	add.w	r8, r8, #1
 8002488:	e7ec      	b.n	8002464 <_printf_float+0x35c>
 800248a:	4613      	mov	r3, r2
 800248c:	4631      	mov	r1, r6
 800248e:	4642      	mov	r2, r8
 8002490:	4628      	mov	r0, r5
 8002492:	47b8      	blx	r7
 8002494:	3001      	adds	r0, #1
 8002496:	d1bf      	bne.n	8002418 <_printf_float+0x310>
 8002498:	e697      	b.n	80021ca <_printf_float+0xc2>
 800249a:	2301      	movs	r3, #1
 800249c:	9a06      	ldr	r2, [sp, #24]
 800249e:	4631      	mov	r1, r6
 80024a0:	4628      	mov	r0, r5
 80024a2:	47b8      	blx	r7
 80024a4:	3001      	adds	r0, #1
 80024a6:	f43f ae90 	beq.w	80021ca <_printf_float+0xc2>
 80024aa:	f10b 0b01 	add.w	fp, fp, #1
 80024ae:	e7ba      	b.n	8002426 <_printf_float+0x31e>
 80024b0:	9b05      	ldr	r3, [sp, #20]
 80024b2:	9a04      	ldr	r2, [sp, #16]
 80024b4:	4631      	mov	r1, r6
 80024b6:	4628      	mov	r0, r5
 80024b8:	47b8      	blx	r7
 80024ba:	3001      	adds	r0, #1
 80024bc:	d1c0      	bne.n	8002440 <_printf_float+0x338>
 80024be:	e684      	b.n	80021ca <_printf_float+0xc2>
 80024c0:	464b      	mov	r3, r9
 80024c2:	eb08 020a 	add.w	r2, r8, sl
 80024c6:	4631      	mov	r1, r6
 80024c8:	4628      	mov	r0, r5
 80024ca:	47b8      	blx	r7
 80024cc:	3001      	adds	r0, #1
 80024ce:	d1c3      	bne.n	8002458 <_printf_float+0x350>
 80024d0:	e67b      	b.n	80021ca <_printf_float+0xc2>
 80024d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80024d4:	2a01      	cmp	r2, #1
 80024d6:	dc01      	bgt.n	80024dc <_printf_float+0x3d4>
 80024d8:	07db      	lsls	r3, r3, #31
 80024da:	d537      	bpl.n	800254c <_printf_float+0x444>
 80024dc:	2301      	movs	r3, #1
 80024de:	4642      	mov	r2, r8
 80024e0:	4631      	mov	r1, r6
 80024e2:	4628      	mov	r0, r5
 80024e4:	47b8      	blx	r7
 80024e6:	3001      	adds	r0, #1
 80024e8:	f43f ae6f 	beq.w	80021ca <_printf_float+0xc2>
 80024ec:	9b05      	ldr	r3, [sp, #20]
 80024ee:	9a04      	ldr	r2, [sp, #16]
 80024f0:	4631      	mov	r1, r6
 80024f2:	4628      	mov	r0, r5
 80024f4:	47b8      	blx	r7
 80024f6:	3001      	adds	r0, #1
 80024f8:	f43f ae67 	beq.w	80021ca <_printf_float+0xc2>
 80024fc:	2200      	movs	r2, #0
 80024fe:	2300      	movs	r3, #0
 8002500:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002504:	f7fe faec 	bl	8000ae0 <__aeabi_dcmpeq>
 8002508:	b158      	cbz	r0, 8002522 <_printf_float+0x41a>
 800250a:	f04f 0800 	mov.w	r8, #0
 800250e:	f104 0a1a 	add.w	sl, r4, #26
 8002512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002514:	3b01      	subs	r3, #1
 8002516:	4598      	cmp	r8, r3
 8002518:	db0d      	blt.n	8002536 <_printf_float+0x42e>
 800251a:	464b      	mov	r3, r9
 800251c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002520:	e6eb      	b.n	80022fa <_printf_float+0x1f2>
 8002522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002524:	f108 0201 	add.w	r2, r8, #1
 8002528:	3b01      	subs	r3, #1
 800252a:	4631      	mov	r1, r6
 800252c:	4628      	mov	r0, r5
 800252e:	47b8      	blx	r7
 8002530:	3001      	adds	r0, #1
 8002532:	d1f2      	bne.n	800251a <_printf_float+0x412>
 8002534:	e649      	b.n	80021ca <_printf_float+0xc2>
 8002536:	2301      	movs	r3, #1
 8002538:	4652      	mov	r2, sl
 800253a:	4631      	mov	r1, r6
 800253c:	4628      	mov	r0, r5
 800253e:	47b8      	blx	r7
 8002540:	3001      	adds	r0, #1
 8002542:	f43f ae42 	beq.w	80021ca <_printf_float+0xc2>
 8002546:	f108 0801 	add.w	r8, r8, #1
 800254a:	e7e2      	b.n	8002512 <_printf_float+0x40a>
 800254c:	2301      	movs	r3, #1
 800254e:	4642      	mov	r2, r8
 8002550:	e7eb      	b.n	800252a <_printf_float+0x422>
 8002552:	2301      	movs	r3, #1
 8002554:	464a      	mov	r2, r9
 8002556:	4631      	mov	r1, r6
 8002558:	4628      	mov	r0, r5
 800255a:	47b8      	blx	r7
 800255c:	3001      	adds	r0, #1
 800255e:	f43f ae34 	beq.w	80021ca <_printf_float+0xc2>
 8002562:	f108 0801 	add.w	r8, r8, #1
 8002566:	e700      	b.n	800236a <_printf_float+0x262>
 8002568:	4642      	mov	r2, r8
 800256a:	464b      	mov	r3, r9
 800256c:	4640      	mov	r0, r8
 800256e:	4649      	mov	r1, r9
 8002570:	f7fe fae8 	bl	8000b44 <__aeabi_dcmpun>
 8002574:	2800      	cmp	r0, #0
 8002576:	f43f ae2d 	beq.w	80021d4 <_printf_float+0xcc>
 800257a:	4b01      	ldr	r3, [pc, #4]	; (8002580 <_printf_float+0x478>)
 800257c:	4a01      	ldr	r2, [pc, #4]	; (8002584 <_printf_float+0x47c>)
 800257e:	e60e      	b.n	800219e <_printf_float+0x96>
 8002580:	080046b8 	.word	0x080046b8
 8002584:	080046bc 	.word	0x080046bc

08002588 <_printf_common>:
 8002588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800258c:	4691      	mov	r9, r2
 800258e:	461f      	mov	r7, r3
 8002590:	688a      	ldr	r2, [r1, #8]
 8002592:	690b      	ldr	r3, [r1, #16]
 8002594:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002598:	4293      	cmp	r3, r2
 800259a:	bfb8      	it	lt
 800259c:	4613      	movlt	r3, r2
 800259e:	f8c9 3000 	str.w	r3, [r9]
 80025a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80025a6:	4606      	mov	r6, r0
 80025a8:	460c      	mov	r4, r1
 80025aa:	b112      	cbz	r2, 80025b2 <_printf_common+0x2a>
 80025ac:	3301      	adds	r3, #1
 80025ae:	f8c9 3000 	str.w	r3, [r9]
 80025b2:	6823      	ldr	r3, [r4, #0]
 80025b4:	0699      	lsls	r1, r3, #26
 80025b6:	bf42      	ittt	mi
 80025b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80025bc:	3302      	addmi	r3, #2
 80025be:	f8c9 3000 	strmi.w	r3, [r9]
 80025c2:	6825      	ldr	r5, [r4, #0]
 80025c4:	f015 0506 	ands.w	r5, r5, #6
 80025c8:	d107      	bne.n	80025da <_printf_common+0x52>
 80025ca:	f104 0a19 	add.w	sl, r4, #25
 80025ce:	68e3      	ldr	r3, [r4, #12]
 80025d0:	f8d9 2000 	ldr.w	r2, [r9]
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	429d      	cmp	r5, r3
 80025d8:	db29      	blt.n	800262e <_printf_common+0xa6>
 80025da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80025de:	6822      	ldr	r2, [r4, #0]
 80025e0:	3300      	adds	r3, #0
 80025e2:	bf18      	it	ne
 80025e4:	2301      	movne	r3, #1
 80025e6:	0692      	lsls	r2, r2, #26
 80025e8:	d42e      	bmi.n	8002648 <_printf_common+0xc0>
 80025ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80025ee:	4639      	mov	r1, r7
 80025f0:	4630      	mov	r0, r6
 80025f2:	47c0      	blx	r8
 80025f4:	3001      	adds	r0, #1
 80025f6:	d021      	beq.n	800263c <_printf_common+0xb4>
 80025f8:	6823      	ldr	r3, [r4, #0]
 80025fa:	68e5      	ldr	r5, [r4, #12]
 80025fc:	f8d9 2000 	ldr.w	r2, [r9]
 8002600:	f003 0306 	and.w	r3, r3, #6
 8002604:	2b04      	cmp	r3, #4
 8002606:	bf08      	it	eq
 8002608:	1aad      	subeq	r5, r5, r2
 800260a:	68a3      	ldr	r3, [r4, #8]
 800260c:	6922      	ldr	r2, [r4, #16]
 800260e:	bf0c      	ite	eq
 8002610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002614:	2500      	movne	r5, #0
 8002616:	4293      	cmp	r3, r2
 8002618:	bfc4      	itt	gt
 800261a:	1a9b      	subgt	r3, r3, r2
 800261c:	18ed      	addgt	r5, r5, r3
 800261e:	f04f 0900 	mov.w	r9, #0
 8002622:	341a      	adds	r4, #26
 8002624:	454d      	cmp	r5, r9
 8002626:	d11b      	bne.n	8002660 <_printf_common+0xd8>
 8002628:	2000      	movs	r0, #0
 800262a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800262e:	2301      	movs	r3, #1
 8002630:	4652      	mov	r2, sl
 8002632:	4639      	mov	r1, r7
 8002634:	4630      	mov	r0, r6
 8002636:	47c0      	blx	r8
 8002638:	3001      	adds	r0, #1
 800263a:	d103      	bne.n	8002644 <_printf_common+0xbc>
 800263c:	f04f 30ff 	mov.w	r0, #4294967295
 8002640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002644:	3501      	adds	r5, #1
 8002646:	e7c2      	b.n	80025ce <_printf_common+0x46>
 8002648:	18e1      	adds	r1, r4, r3
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	2030      	movs	r0, #48	; 0x30
 800264e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002652:	4422      	add	r2, r4
 8002654:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002658:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800265c:	3302      	adds	r3, #2
 800265e:	e7c4      	b.n	80025ea <_printf_common+0x62>
 8002660:	2301      	movs	r3, #1
 8002662:	4622      	mov	r2, r4
 8002664:	4639      	mov	r1, r7
 8002666:	4630      	mov	r0, r6
 8002668:	47c0      	blx	r8
 800266a:	3001      	adds	r0, #1
 800266c:	d0e6      	beq.n	800263c <_printf_common+0xb4>
 800266e:	f109 0901 	add.w	r9, r9, #1
 8002672:	e7d7      	b.n	8002624 <_printf_common+0x9c>

08002674 <_printf_i>:
 8002674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002678:	4617      	mov	r7, r2
 800267a:	7e0a      	ldrb	r2, [r1, #24]
 800267c:	b085      	sub	sp, #20
 800267e:	2a6e      	cmp	r2, #110	; 0x6e
 8002680:	4698      	mov	r8, r3
 8002682:	4606      	mov	r6, r0
 8002684:	460c      	mov	r4, r1
 8002686:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002688:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800268c:	f000 80bc 	beq.w	8002808 <_printf_i+0x194>
 8002690:	d81a      	bhi.n	80026c8 <_printf_i+0x54>
 8002692:	2a63      	cmp	r2, #99	; 0x63
 8002694:	d02e      	beq.n	80026f4 <_printf_i+0x80>
 8002696:	d80a      	bhi.n	80026ae <_printf_i+0x3a>
 8002698:	2a00      	cmp	r2, #0
 800269a:	f000 80c8 	beq.w	800282e <_printf_i+0x1ba>
 800269e:	2a58      	cmp	r2, #88	; 0x58
 80026a0:	f000 808a 	beq.w	80027b8 <_printf_i+0x144>
 80026a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026a8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80026ac:	e02a      	b.n	8002704 <_printf_i+0x90>
 80026ae:	2a64      	cmp	r2, #100	; 0x64
 80026b0:	d001      	beq.n	80026b6 <_printf_i+0x42>
 80026b2:	2a69      	cmp	r2, #105	; 0x69
 80026b4:	d1f6      	bne.n	80026a4 <_printf_i+0x30>
 80026b6:	6821      	ldr	r1, [r4, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	f011 0f80 	tst.w	r1, #128	; 0x80
 80026be:	d023      	beq.n	8002708 <_printf_i+0x94>
 80026c0:	1d11      	adds	r1, r2, #4
 80026c2:	6019      	str	r1, [r3, #0]
 80026c4:	6813      	ldr	r3, [r2, #0]
 80026c6:	e027      	b.n	8002718 <_printf_i+0xa4>
 80026c8:	2a73      	cmp	r2, #115	; 0x73
 80026ca:	f000 80b4 	beq.w	8002836 <_printf_i+0x1c2>
 80026ce:	d808      	bhi.n	80026e2 <_printf_i+0x6e>
 80026d0:	2a6f      	cmp	r2, #111	; 0x6f
 80026d2:	d02a      	beq.n	800272a <_printf_i+0xb6>
 80026d4:	2a70      	cmp	r2, #112	; 0x70
 80026d6:	d1e5      	bne.n	80026a4 <_printf_i+0x30>
 80026d8:	680a      	ldr	r2, [r1, #0]
 80026da:	f042 0220 	orr.w	r2, r2, #32
 80026de:	600a      	str	r2, [r1, #0]
 80026e0:	e003      	b.n	80026ea <_printf_i+0x76>
 80026e2:	2a75      	cmp	r2, #117	; 0x75
 80026e4:	d021      	beq.n	800272a <_printf_i+0xb6>
 80026e6:	2a78      	cmp	r2, #120	; 0x78
 80026e8:	d1dc      	bne.n	80026a4 <_printf_i+0x30>
 80026ea:	2278      	movs	r2, #120	; 0x78
 80026ec:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80026f0:	496e      	ldr	r1, [pc, #440]	; (80028ac <_printf_i+0x238>)
 80026f2:	e064      	b.n	80027be <_printf_i+0x14a>
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80026fa:	1d11      	adds	r1, r2, #4
 80026fc:	6019      	str	r1, [r3, #0]
 80026fe:	6813      	ldr	r3, [r2, #0]
 8002700:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002704:	2301      	movs	r3, #1
 8002706:	e0a3      	b.n	8002850 <_printf_i+0x1dc>
 8002708:	f011 0f40 	tst.w	r1, #64	; 0x40
 800270c:	f102 0104 	add.w	r1, r2, #4
 8002710:	6019      	str	r1, [r3, #0]
 8002712:	d0d7      	beq.n	80026c4 <_printf_i+0x50>
 8002714:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002718:	2b00      	cmp	r3, #0
 800271a:	da03      	bge.n	8002724 <_printf_i+0xb0>
 800271c:	222d      	movs	r2, #45	; 0x2d
 800271e:	425b      	negs	r3, r3
 8002720:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002724:	4962      	ldr	r1, [pc, #392]	; (80028b0 <_printf_i+0x23c>)
 8002726:	220a      	movs	r2, #10
 8002728:	e017      	b.n	800275a <_printf_i+0xe6>
 800272a:	6820      	ldr	r0, [r4, #0]
 800272c:	6819      	ldr	r1, [r3, #0]
 800272e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002732:	d003      	beq.n	800273c <_printf_i+0xc8>
 8002734:	1d08      	adds	r0, r1, #4
 8002736:	6018      	str	r0, [r3, #0]
 8002738:	680b      	ldr	r3, [r1, #0]
 800273a:	e006      	b.n	800274a <_printf_i+0xd6>
 800273c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002740:	f101 0004 	add.w	r0, r1, #4
 8002744:	6018      	str	r0, [r3, #0]
 8002746:	d0f7      	beq.n	8002738 <_printf_i+0xc4>
 8002748:	880b      	ldrh	r3, [r1, #0]
 800274a:	4959      	ldr	r1, [pc, #356]	; (80028b0 <_printf_i+0x23c>)
 800274c:	2a6f      	cmp	r2, #111	; 0x6f
 800274e:	bf14      	ite	ne
 8002750:	220a      	movne	r2, #10
 8002752:	2208      	moveq	r2, #8
 8002754:	2000      	movs	r0, #0
 8002756:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800275a:	6865      	ldr	r5, [r4, #4]
 800275c:	60a5      	str	r5, [r4, #8]
 800275e:	2d00      	cmp	r5, #0
 8002760:	f2c0 809c 	blt.w	800289c <_printf_i+0x228>
 8002764:	6820      	ldr	r0, [r4, #0]
 8002766:	f020 0004 	bic.w	r0, r0, #4
 800276a:	6020      	str	r0, [r4, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d13f      	bne.n	80027f0 <_printf_i+0x17c>
 8002770:	2d00      	cmp	r5, #0
 8002772:	f040 8095 	bne.w	80028a0 <_printf_i+0x22c>
 8002776:	4675      	mov	r5, lr
 8002778:	2a08      	cmp	r2, #8
 800277a:	d10b      	bne.n	8002794 <_printf_i+0x120>
 800277c:	6823      	ldr	r3, [r4, #0]
 800277e:	07da      	lsls	r2, r3, #31
 8002780:	d508      	bpl.n	8002794 <_printf_i+0x120>
 8002782:	6923      	ldr	r3, [r4, #16]
 8002784:	6862      	ldr	r2, [r4, #4]
 8002786:	429a      	cmp	r2, r3
 8002788:	bfde      	ittt	le
 800278a:	2330      	movle	r3, #48	; 0x30
 800278c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002790:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002794:	ebae 0305 	sub.w	r3, lr, r5
 8002798:	6123      	str	r3, [r4, #16]
 800279a:	f8cd 8000 	str.w	r8, [sp]
 800279e:	463b      	mov	r3, r7
 80027a0:	aa03      	add	r2, sp, #12
 80027a2:	4621      	mov	r1, r4
 80027a4:	4630      	mov	r0, r6
 80027a6:	f7ff feef 	bl	8002588 <_printf_common>
 80027aa:	3001      	adds	r0, #1
 80027ac:	d155      	bne.n	800285a <_printf_i+0x1e6>
 80027ae:	f04f 30ff 	mov.w	r0, #4294967295
 80027b2:	b005      	add	sp, #20
 80027b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80027b8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80027bc:	493c      	ldr	r1, [pc, #240]	; (80028b0 <_printf_i+0x23c>)
 80027be:	6822      	ldr	r2, [r4, #0]
 80027c0:	6818      	ldr	r0, [r3, #0]
 80027c2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80027c6:	f100 0504 	add.w	r5, r0, #4
 80027ca:	601d      	str	r5, [r3, #0]
 80027cc:	d001      	beq.n	80027d2 <_printf_i+0x15e>
 80027ce:	6803      	ldr	r3, [r0, #0]
 80027d0:	e002      	b.n	80027d8 <_printf_i+0x164>
 80027d2:	0655      	lsls	r5, r2, #25
 80027d4:	d5fb      	bpl.n	80027ce <_printf_i+0x15a>
 80027d6:	8803      	ldrh	r3, [r0, #0]
 80027d8:	07d0      	lsls	r0, r2, #31
 80027da:	bf44      	itt	mi
 80027dc:	f042 0220 	orrmi.w	r2, r2, #32
 80027e0:	6022      	strmi	r2, [r4, #0]
 80027e2:	b91b      	cbnz	r3, 80027ec <_printf_i+0x178>
 80027e4:	6822      	ldr	r2, [r4, #0]
 80027e6:	f022 0220 	bic.w	r2, r2, #32
 80027ea:	6022      	str	r2, [r4, #0]
 80027ec:	2210      	movs	r2, #16
 80027ee:	e7b1      	b.n	8002754 <_printf_i+0xe0>
 80027f0:	4675      	mov	r5, lr
 80027f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80027f6:	fb02 3310 	mls	r3, r2, r0, r3
 80027fa:	5ccb      	ldrb	r3, [r1, r3]
 80027fc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002800:	4603      	mov	r3, r0
 8002802:	2800      	cmp	r0, #0
 8002804:	d1f5      	bne.n	80027f2 <_printf_i+0x17e>
 8002806:	e7b7      	b.n	8002778 <_printf_i+0x104>
 8002808:	6808      	ldr	r0, [r1, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	6949      	ldr	r1, [r1, #20]
 800280e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002812:	d004      	beq.n	800281e <_printf_i+0x1aa>
 8002814:	1d10      	adds	r0, r2, #4
 8002816:	6018      	str	r0, [r3, #0]
 8002818:	6813      	ldr	r3, [r2, #0]
 800281a:	6019      	str	r1, [r3, #0]
 800281c:	e007      	b.n	800282e <_printf_i+0x1ba>
 800281e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002822:	f102 0004 	add.w	r0, r2, #4
 8002826:	6018      	str	r0, [r3, #0]
 8002828:	6813      	ldr	r3, [r2, #0]
 800282a:	d0f6      	beq.n	800281a <_printf_i+0x1a6>
 800282c:	8019      	strh	r1, [r3, #0]
 800282e:	2300      	movs	r3, #0
 8002830:	6123      	str	r3, [r4, #16]
 8002832:	4675      	mov	r5, lr
 8002834:	e7b1      	b.n	800279a <_printf_i+0x126>
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	1d11      	adds	r1, r2, #4
 800283a:	6019      	str	r1, [r3, #0]
 800283c:	6815      	ldr	r5, [r2, #0]
 800283e:	6862      	ldr	r2, [r4, #4]
 8002840:	2100      	movs	r1, #0
 8002842:	4628      	mov	r0, r5
 8002844:	f7fd fcdc 	bl	8000200 <memchr>
 8002848:	b108      	cbz	r0, 800284e <_printf_i+0x1da>
 800284a:	1b40      	subs	r0, r0, r5
 800284c:	6060      	str	r0, [r4, #4]
 800284e:	6863      	ldr	r3, [r4, #4]
 8002850:	6123      	str	r3, [r4, #16]
 8002852:	2300      	movs	r3, #0
 8002854:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002858:	e79f      	b.n	800279a <_printf_i+0x126>
 800285a:	6923      	ldr	r3, [r4, #16]
 800285c:	462a      	mov	r2, r5
 800285e:	4639      	mov	r1, r7
 8002860:	4630      	mov	r0, r6
 8002862:	47c0      	blx	r8
 8002864:	3001      	adds	r0, #1
 8002866:	d0a2      	beq.n	80027ae <_printf_i+0x13a>
 8002868:	6823      	ldr	r3, [r4, #0]
 800286a:	079b      	lsls	r3, r3, #30
 800286c:	d507      	bpl.n	800287e <_printf_i+0x20a>
 800286e:	2500      	movs	r5, #0
 8002870:	f104 0919 	add.w	r9, r4, #25
 8002874:	68e3      	ldr	r3, [r4, #12]
 8002876:	9a03      	ldr	r2, [sp, #12]
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	429d      	cmp	r5, r3
 800287c:	db05      	blt.n	800288a <_printf_i+0x216>
 800287e:	68e0      	ldr	r0, [r4, #12]
 8002880:	9b03      	ldr	r3, [sp, #12]
 8002882:	4298      	cmp	r0, r3
 8002884:	bfb8      	it	lt
 8002886:	4618      	movlt	r0, r3
 8002888:	e793      	b.n	80027b2 <_printf_i+0x13e>
 800288a:	2301      	movs	r3, #1
 800288c:	464a      	mov	r2, r9
 800288e:	4639      	mov	r1, r7
 8002890:	4630      	mov	r0, r6
 8002892:	47c0      	blx	r8
 8002894:	3001      	adds	r0, #1
 8002896:	d08a      	beq.n	80027ae <_printf_i+0x13a>
 8002898:	3501      	adds	r5, #1
 800289a:	e7eb      	b.n	8002874 <_printf_i+0x200>
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1a7      	bne.n	80027f0 <_printf_i+0x17c>
 80028a0:	780b      	ldrb	r3, [r1, #0]
 80028a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028aa:	e765      	b.n	8002778 <_printf_i+0x104>
 80028ac:	080046d3 	.word	0x080046d3
 80028b0:	080046c2 	.word	0x080046c2

080028b4 <iprintf>:
 80028b4:	b40f      	push	{r0, r1, r2, r3}
 80028b6:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <iprintf+0x2c>)
 80028b8:	b513      	push	{r0, r1, r4, lr}
 80028ba:	681c      	ldr	r4, [r3, #0]
 80028bc:	b124      	cbz	r4, 80028c8 <iprintf+0x14>
 80028be:	69a3      	ldr	r3, [r4, #24]
 80028c0:	b913      	cbnz	r3, 80028c8 <iprintf+0x14>
 80028c2:	4620      	mov	r0, r4
 80028c4:	f000 feaa 	bl	800361c <__sinit>
 80028c8:	ab05      	add	r3, sp, #20
 80028ca:	9a04      	ldr	r2, [sp, #16]
 80028cc:	68a1      	ldr	r1, [r4, #8]
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	4620      	mov	r0, r4
 80028d2:	f001 fb03 	bl	8003edc <_vfiprintf_r>
 80028d6:	b002      	add	sp, #8
 80028d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028dc:	b004      	add	sp, #16
 80028de:	4770      	bx	lr
 80028e0:	2000000c 	.word	0x2000000c

080028e4 <quorem>:
 80028e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028e8:	6903      	ldr	r3, [r0, #16]
 80028ea:	690c      	ldr	r4, [r1, #16]
 80028ec:	429c      	cmp	r4, r3
 80028ee:	4680      	mov	r8, r0
 80028f0:	f300 8082 	bgt.w	80029f8 <quorem+0x114>
 80028f4:	3c01      	subs	r4, #1
 80028f6:	f101 0714 	add.w	r7, r1, #20
 80028fa:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80028fe:	f100 0614 	add.w	r6, r0, #20
 8002902:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8002906:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800290a:	eb06 030e 	add.w	r3, r6, lr
 800290e:	3501      	adds	r5, #1
 8002910:	eb07 090e 	add.w	r9, r7, lr
 8002914:	9301      	str	r3, [sp, #4]
 8002916:	fbb0 f5f5 	udiv	r5, r0, r5
 800291a:	b395      	cbz	r5, 8002982 <quorem+0x9e>
 800291c:	f04f 0a00 	mov.w	sl, #0
 8002920:	4638      	mov	r0, r7
 8002922:	46b4      	mov	ip, r6
 8002924:	46d3      	mov	fp, sl
 8002926:	f850 2b04 	ldr.w	r2, [r0], #4
 800292a:	b293      	uxth	r3, r2
 800292c:	fb05 a303 	mla	r3, r5, r3, sl
 8002930:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002934:	b29b      	uxth	r3, r3
 8002936:	ebab 0303 	sub.w	r3, fp, r3
 800293a:	0c12      	lsrs	r2, r2, #16
 800293c:	f8bc b000 	ldrh.w	fp, [ip]
 8002940:	fb05 a202 	mla	r2, r5, r2, sl
 8002944:	fa13 f38b 	uxtah	r3, r3, fp
 8002948:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800294c:	fa1f fb82 	uxth.w	fp, r2
 8002950:	f8dc 2000 	ldr.w	r2, [ip]
 8002954:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8002958:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800295c:	b29b      	uxth	r3, r3
 800295e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002962:	4581      	cmp	r9, r0
 8002964:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002968:	f84c 3b04 	str.w	r3, [ip], #4
 800296c:	d2db      	bcs.n	8002926 <quorem+0x42>
 800296e:	f856 300e 	ldr.w	r3, [r6, lr]
 8002972:	b933      	cbnz	r3, 8002982 <quorem+0x9e>
 8002974:	9b01      	ldr	r3, [sp, #4]
 8002976:	3b04      	subs	r3, #4
 8002978:	429e      	cmp	r6, r3
 800297a:	461a      	mov	r2, r3
 800297c:	d330      	bcc.n	80029e0 <quorem+0xfc>
 800297e:	f8c8 4010 	str.w	r4, [r8, #16]
 8002982:	4640      	mov	r0, r8
 8002984:	f001 f8ff 	bl	8003b86 <__mcmp>
 8002988:	2800      	cmp	r0, #0
 800298a:	db25      	blt.n	80029d8 <quorem+0xf4>
 800298c:	3501      	adds	r5, #1
 800298e:	4630      	mov	r0, r6
 8002990:	f04f 0e00 	mov.w	lr, #0
 8002994:	f857 2b04 	ldr.w	r2, [r7], #4
 8002998:	f8d0 c000 	ldr.w	ip, [r0]
 800299c:	b293      	uxth	r3, r2
 800299e:	ebae 0303 	sub.w	r3, lr, r3
 80029a2:	0c12      	lsrs	r2, r2, #16
 80029a4:	fa13 f38c 	uxtah	r3, r3, ip
 80029a8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80029ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80029b6:	45b9      	cmp	r9, r7
 80029b8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80029bc:	f840 3b04 	str.w	r3, [r0], #4
 80029c0:	d2e8      	bcs.n	8002994 <quorem+0xb0>
 80029c2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80029c6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80029ca:	b92a      	cbnz	r2, 80029d8 <quorem+0xf4>
 80029cc:	3b04      	subs	r3, #4
 80029ce:	429e      	cmp	r6, r3
 80029d0:	461a      	mov	r2, r3
 80029d2:	d30b      	bcc.n	80029ec <quorem+0x108>
 80029d4:	f8c8 4010 	str.w	r4, [r8, #16]
 80029d8:	4628      	mov	r0, r5
 80029da:	b003      	add	sp, #12
 80029dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029e0:	6812      	ldr	r2, [r2, #0]
 80029e2:	3b04      	subs	r3, #4
 80029e4:	2a00      	cmp	r2, #0
 80029e6:	d1ca      	bne.n	800297e <quorem+0x9a>
 80029e8:	3c01      	subs	r4, #1
 80029ea:	e7c5      	b.n	8002978 <quorem+0x94>
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	3b04      	subs	r3, #4
 80029f0:	2a00      	cmp	r2, #0
 80029f2:	d1ef      	bne.n	80029d4 <quorem+0xf0>
 80029f4:	3c01      	subs	r4, #1
 80029f6:	e7ea      	b.n	80029ce <quorem+0xea>
 80029f8:	2000      	movs	r0, #0
 80029fa:	e7ee      	b.n	80029da <quorem+0xf6>
 80029fc:	0000      	movs	r0, r0
	...

08002a00 <_dtoa_r>:
 8002a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a04:	ec57 6b10 	vmov	r6, r7, d0
 8002a08:	b097      	sub	sp, #92	; 0x5c
 8002a0a:	e9cd 6700 	strd	r6, r7, [sp]
 8002a0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002a10:	9107      	str	r1, [sp, #28]
 8002a12:	4604      	mov	r4, r0
 8002a14:	920a      	str	r2, [sp, #40]	; 0x28
 8002a16:	930f      	str	r3, [sp, #60]	; 0x3c
 8002a18:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8002a1a:	b93e      	cbnz	r6, 8002a2c <_dtoa_r+0x2c>
 8002a1c:	2010      	movs	r0, #16
 8002a1e:	f000 fe95 	bl	800374c <malloc>
 8002a22:	6260      	str	r0, [r4, #36]	; 0x24
 8002a24:	6046      	str	r6, [r0, #4]
 8002a26:	6086      	str	r6, [r0, #8]
 8002a28:	6006      	str	r6, [r0, #0]
 8002a2a:	60c6      	str	r6, [r0, #12]
 8002a2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a2e:	6819      	ldr	r1, [r3, #0]
 8002a30:	b151      	cbz	r1, 8002a48 <_dtoa_r+0x48>
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	604a      	str	r2, [r1, #4]
 8002a36:	2301      	movs	r3, #1
 8002a38:	4093      	lsls	r3, r2
 8002a3a:	608b      	str	r3, [r1, #8]
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	f000 fecc 	bl	80037da <_Bfree>
 8002a42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	9b01      	ldr	r3, [sp, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	bfbf      	itttt	lt
 8002a4e:	2301      	movlt	r3, #1
 8002a50:	602b      	strlt	r3, [r5, #0]
 8002a52:	9b01      	ldrlt	r3, [sp, #4]
 8002a54:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002a58:	bfb2      	itee	lt
 8002a5a:	9301      	strlt	r3, [sp, #4]
 8002a5c:	2300      	movge	r3, #0
 8002a5e:	602b      	strge	r3, [r5, #0]
 8002a60:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002a64:	4ba8      	ldr	r3, [pc, #672]	; (8002d08 <_dtoa_r+0x308>)
 8002a66:	ea33 0308 	bics.w	r3, r3, r8
 8002a6a:	d11b      	bne.n	8002aa4 <_dtoa_r+0xa4>
 8002a6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002a6e:	f242 730f 	movw	r3, #9999	; 0x270f
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	9b00      	ldr	r3, [sp, #0]
 8002a76:	b923      	cbnz	r3, 8002a82 <_dtoa_r+0x82>
 8002a78:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8002a7c:	2800      	cmp	r0, #0
 8002a7e:	f000 8578 	beq.w	8003572 <_dtoa_r+0xb72>
 8002a82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002a84:	b953      	cbnz	r3, 8002a9c <_dtoa_r+0x9c>
 8002a86:	4ba1      	ldr	r3, [pc, #644]	; (8002d0c <_dtoa_r+0x30c>)
 8002a88:	e021      	b.n	8002ace <_dtoa_r+0xce>
 8002a8a:	4ba1      	ldr	r3, [pc, #644]	; (8002d10 <_dtoa_r+0x310>)
 8002a8c:	9302      	str	r3, [sp, #8]
 8002a8e:	3308      	adds	r3, #8
 8002a90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	9802      	ldr	r0, [sp, #8]
 8002a96:	b017      	add	sp, #92	; 0x5c
 8002a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a9c:	4b9b      	ldr	r3, [pc, #620]	; (8002d0c <_dtoa_r+0x30c>)
 8002a9e:	9302      	str	r3, [sp, #8]
 8002aa0:	3303      	adds	r3, #3
 8002aa2:	e7f5      	b.n	8002a90 <_dtoa_r+0x90>
 8002aa4:	e9dd 6700 	ldrd	r6, r7, [sp]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2300      	movs	r3, #0
 8002aac:	4630      	mov	r0, r6
 8002aae:	4639      	mov	r1, r7
 8002ab0:	f7fe f816 	bl	8000ae0 <__aeabi_dcmpeq>
 8002ab4:	4681      	mov	r9, r0
 8002ab6:	b160      	cbz	r0, 8002ad2 <_dtoa_r+0xd2>
 8002ab8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002aba:	2301      	movs	r3, #1
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 8553 	beq.w	800356c <_dtoa_r+0xb6c>
 8002ac6:	4b93      	ldr	r3, [pc, #588]	; (8002d14 <_dtoa_r+0x314>)
 8002ac8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	3b01      	subs	r3, #1
 8002ace:	9302      	str	r3, [sp, #8]
 8002ad0:	e7e0      	b.n	8002a94 <_dtoa_r+0x94>
 8002ad2:	aa14      	add	r2, sp, #80	; 0x50
 8002ad4:	a915      	add	r1, sp, #84	; 0x54
 8002ad6:	ec47 6b10 	vmov	d0, r6, r7
 8002ada:	4620      	mov	r0, r4
 8002adc:	f001 f8cb 	bl	8003c76 <__d2b>
 8002ae0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8002ae4:	4682      	mov	sl, r0
 8002ae6:	2d00      	cmp	r5, #0
 8002ae8:	d07e      	beq.n	8002be8 <_dtoa_r+0x1e8>
 8002aea:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002aee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8002af2:	4630      	mov	r0, r6
 8002af4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8002af8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002afc:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8002b00:	2200      	movs	r2, #0
 8002b02:	4b85      	ldr	r3, [pc, #532]	; (8002d18 <_dtoa_r+0x318>)
 8002b04:	f7fd fbd0 	bl	80002a8 <__aeabi_dsub>
 8002b08:	a379      	add	r3, pc, #484	; (adr r3, 8002cf0 <_dtoa_r+0x2f0>)
 8002b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0e:	f7fd fd7f 	bl	8000610 <__aeabi_dmul>
 8002b12:	a379      	add	r3, pc, #484	; (adr r3, 8002cf8 <_dtoa_r+0x2f8>)
 8002b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b18:	f7fd fbc8 	bl	80002ac <__adddf3>
 8002b1c:	4606      	mov	r6, r0
 8002b1e:	4628      	mov	r0, r5
 8002b20:	460f      	mov	r7, r1
 8002b22:	f7fd fd0f 	bl	8000544 <__aeabi_i2d>
 8002b26:	a376      	add	r3, pc, #472	; (adr r3, 8002d00 <_dtoa_r+0x300>)
 8002b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2c:	f7fd fd70 	bl	8000610 <__aeabi_dmul>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4630      	mov	r0, r6
 8002b36:	4639      	mov	r1, r7
 8002b38:	f7fd fbb8 	bl	80002ac <__adddf3>
 8002b3c:	4606      	mov	r6, r0
 8002b3e:	460f      	mov	r7, r1
 8002b40:	f7fe f816 	bl	8000b70 <__aeabi_d2iz>
 8002b44:	2200      	movs	r2, #0
 8002b46:	4683      	mov	fp, r0
 8002b48:	2300      	movs	r3, #0
 8002b4a:	4630      	mov	r0, r6
 8002b4c:	4639      	mov	r1, r7
 8002b4e:	f7fd ffd1 	bl	8000af4 <__aeabi_dcmplt>
 8002b52:	b158      	cbz	r0, 8002b6c <_dtoa_r+0x16c>
 8002b54:	4658      	mov	r0, fp
 8002b56:	f7fd fcf5 	bl	8000544 <__aeabi_i2d>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4630      	mov	r0, r6
 8002b60:	4639      	mov	r1, r7
 8002b62:	f7fd ffbd 	bl	8000ae0 <__aeabi_dcmpeq>
 8002b66:	b908      	cbnz	r0, 8002b6c <_dtoa_r+0x16c>
 8002b68:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002b6c:	f1bb 0f16 	cmp.w	fp, #22
 8002b70:	d859      	bhi.n	8002c26 <_dtoa_r+0x226>
 8002b72:	496a      	ldr	r1, [pc, #424]	; (8002d1c <_dtoa_r+0x31c>)
 8002b74:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8002b78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002b7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b80:	f7fd ffd6 	bl	8000b30 <__aeabi_dcmpgt>
 8002b84:	2800      	cmp	r0, #0
 8002b86:	d050      	beq.n	8002c2a <_dtoa_r+0x22a>
 8002b88:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	930e      	str	r3, [sp, #56]	; 0x38
 8002b90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002b92:	1b5d      	subs	r5, r3, r5
 8002b94:	1e6b      	subs	r3, r5, #1
 8002b96:	9306      	str	r3, [sp, #24]
 8002b98:	bf45      	ittet	mi
 8002b9a:	f1c5 0301 	rsbmi	r3, r5, #1
 8002b9e:	9305      	strmi	r3, [sp, #20]
 8002ba0:	2300      	movpl	r3, #0
 8002ba2:	2300      	movmi	r3, #0
 8002ba4:	bf4c      	ite	mi
 8002ba6:	9306      	strmi	r3, [sp, #24]
 8002ba8:	9305      	strpl	r3, [sp, #20]
 8002baa:	f1bb 0f00 	cmp.w	fp, #0
 8002bae:	db3e      	blt.n	8002c2e <_dtoa_r+0x22e>
 8002bb0:	9b06      	ldr	r3, [sp, #24]
 8002bb2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8002bb6:	445b      	add	r3, fp
 8002bb8:	9306      	str	r3, [sp, #24]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	9308      	str	r3, [sp, #32]
 8002bbe:	9b07      	ldr	r3, [sp, #28]
 8002bc0:	2b09      	cmp	r3, #9
 8002bc2:	f200 80af 	bhi.w	8002d24 <_dtoa_r+0x324>
 8002bc6:	2b05      	cmp	r3, #5
 8002bc8:	bfc4      	itt	gt
 8002bca:	3b04      	subgt	r3, #4
 8002bcc:	9307      	strgt	r3, [sp, #28]
 8002bce:	9b07      	ldr	r3, [sp, #28]
 8002bd0:	f1a3 0302 	sub.w	r3, r3, #2
 8002bd4:	bfcc      	ite	gt
 8002bd6:	2600      	movgt	r6, #0
 8002bd8:	2601      	movle	r6, #1
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	f200 80ae 	bhi.w	8002d3c <_dtoa_r+0x33c>
 8002be0:	e8df f003 	tbb	[pc, r3]
 8002be4:	772f8482 	.word	0x772f8482
 8002be8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002bea:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8002bec:	441d      	add	r5, r3
 8002bee:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8002bf2:	2b20      	cmp	r3, #32
 8002bf4:	dd11      	ble.n	8002c1a <_dtoa_r+0x21a>
 8002bf6:	9a00      	ldr	r2, [sp, #0]
 8002bf8:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8002bfc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002c00:	fa22 f000 	lsr.w	r0, r2, r0
 8002c04:	fa08 f303 	lsl.w	r3, r8, r3
 8002c08:	4318      	orrs	r0, r3
 8002c0a:	f7fd fc8b 	bl	8000524 <__aeabi_ui2d>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8002c14:	3d01      	subs	r5, #1
 8002c16:	9312      	str	r3, [sp, #72]	; 0x48
 8002c18:	e772      	b.n	8002b00 <_dtoa_r+0x100>
 8002c1a:	f1c3 0020 	rsb	r0, r3, #32
 8002c1e:	9b00      	ldr	r3, [sp, #0]
 8002c20:	fa03 f000 	lsl.w	r0, r3, r0
 8002c24:	e7f1      	b.n	8002c0a <_dtoa_r+0x20a>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e7b1      	b.n	8002b8e <_dtoa_r+0x18e>
 8002c2a:	900e      	str	r0, [sp, #56]	; 0x38
 8002c2c:	e7b0      	b.n	8002b90 <_dtoa_r+0x190>
 8002c2e:	9b05      	ldr	r3, [sp, #20]
 8002c30:	eba3 030b 	sub.w	r3, r3, fp
 8002c34:	9305      	str	r3, [sp, #20]
 8002c36:	f1cb 0300 	rsb	r3, fp, #0
 8002c3a:	9308      	str	r3, [sp, #32]
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c40:	e7bd      	b.n	8002bbe <_dtoa_r+0x1be>
 8002c42:	2301      	movs	r3, #1
 8002c44:	9309      	str	r3, [sp, #36]	; 0x24
 8002c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	dd7a      	ble.n	8002d42 <_dtoa_r+0x342>
 8002c4c:	9304      	str	r3, [sp, #16]
 8002c4e:	9303      	str	r3, [sp, #12]
 8002c50:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002c52:	2200      	movs	r2, #0
 8002c54:	606a      	str	r2, [r5, #4]
 8002c56:	2104      	movs	r1, #4
 8002c58:	f101 0214 	add.w	r2, r1, #20
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d975      	bls.n	8002d4c <_dtoa_r+0x34c>
 8002c60:	6869      	ldr	r1, [r5, #4]
 8002c62:	4620      	mov	r0, r4
 8002c64:	f000 fd85 	bl	8003772 <_Balloc>
 8002c68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c6a:	6028      	str	r0, [r5, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	9302      	str	r3, [sp, #8]
 8002c70:	9b03      	ldr	r3, [sp, #12]
 8002c72:	2b0e      	cmp	r3, #14
 8002c74:	f200 80e5 	bhi.w	8002e42 <_dtoa_r+0x442>
 8002c78:	2e00      	cmp	r6, #0
 8002c7a:	f000 80e2 	beq.w	8002e42 <_dtoa_r+0x442>
 8002c7e:	ed9d 7b00 	vldr	d7, [sp]
 8002c82:	f1bb 0f00 	cmp.w	fp, #0
 8002c86:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002c8a:	dd74      	ble.n	8002d76 <_dtoa_r+0x376>
 8002c8c:	4a23      	ldr	r2, [pc, #140]	; (8002d1c <_dtoa_r+0x31c>)
 8002c8e:	f00b 030f 	and.w	r3, fp, #15
 8002c92:	ea4f 162b 	mov.w	r6, fp, asr #4
 8002c96:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002c9a:	06f0      	lsls	r0, r6, #27
 8002c9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002ca0:	d559      	bpl.n	8002d56 <_dtoa_r+0x356>
 8002ca2:	4b1f      	ldr	r3, [pc, #124]	; (8002d20 <_dtoa_r+0x320>)
 8002ca4:	ec51 0b17 	vmov	r0, r1, d7
 8002ca8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002cac:	f7fd fdda 	bl	8000864 <__aeabi_ddiv>
 8002cb0:	e9cd 0100 	strd	r0, r1, [sp]
 8002cb4:	f006 060f 	and.w	r6, r6, #15
 8002cb8:	2503      	movs	r5, #3
 8002cba:	4f19      	ldr	r7, [pc, #100]	; (8002d20 <_dtoa_r+0x320>)
 8002cbc:	2e00      	cmp	r6, #0
 8002cbe:	d14c      	bne.n	8002d5a <_dtoa_r+0x35a>
 8002cc0:	4642      	mov	r2, r8
 8002cc2:	464b      	mov	r3, r9
 8002cc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002cc8:	f7fd fdcc 	bl	8000864 <__aeabi_ddiv>
 8002ccc:	e9cd 0100 	strd	r0, r1, [sp]
 8002cd0:	e06a      	b.n	8002da8 <_dtoa_r+0x3a8>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8002cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002cd8:	445b      	add	r3, fp
 8002cda:	9304      	str	r3, [sp, #16]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	9303      	str	r3, [sp, #12]
 8002ce2:	bfb8      	it	lt
 8002ce4:	2301      	movlt	r3, #1
 8002ce6:	e7b3      	b.n	8002c50 <_dtoa_r+0x250>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	e7ab      	b.n	8002c44 <_dtoa_r+0x244>
 8002cec:	2300      	movs	r3, #0
 8002cee:	e7f1      	b.n	8002cd4 <_dtoa_r+0x2d4>
 8002cf0:	636f4361 	.word	0x636f4361
 8002cf4:	3fd287a7 	.word	0x3fd287a7
 8002cf8:	8b60c8b3 	.word	0x8b60c8b3
 8002cfc:	3fc68a28 	.word	0x3fc68a28
 8002d00:	509f79fb 	.word	0x509f79fb
 8002d04:	3fd34413 	.word	0x3fd34413
 8002d08:	7ff00000 	.word	0x7ff00000
 8002d0c:	080046ed 	.word	0x080046ed
 8002d10:	080046e4 	.word	0x080046e4
 8002d14:	080046c1 	.word	0x080046c1
 8002d18:	3ff80000 	.word	0x3ff80000
 8002d1c:	08004780 	.word	0x08004780
 8002d20:	08004758 	.word	0x08004758
 8002d24:	2601      	movs	r6, #1
 8002d26:	2300      	movs	r3, #0
 8002d28:	9307      	str	r3, [sp, #28]
 8002d2a:	9609      	str	r6, [sp, #36]	; 0x24
 8002d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d30:	9304      	str	r3, [sp, #16]
 8002d32:	9303      	str	r3, [sp, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	2312      	movs	r3, #18
 8002d38:	920a      	str	r2, [sp, #40]	; 0x28
 8002d3a:	e789      	b.n	8002c50 <_dtoa_r+0x250>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8002d40:	e7f4      	b.n	8002d2c <_dtoa_r+0x32c>
 8002d42:	2301      	movs	r3, #1
 8002d44:	9304      	str	r3, [sp, #16]
 8002d46:	9303      	str	r3, [sp, #12]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	e7f5      	b.n	8002d38 <_dtoa_r+0x338>
 8002d4c:	686a      	ldr	r2, [r5, #4]
 8002d4e:	3201      	adds	r2, #1
 8002d50:	606a      	str	r2, [r5, #4]
 8002d52:	0049      	lsls	r1, r1, #1
 8002d54:	e780      	b.n	8002c58 <_dtoa_r+0x258>
 8002d56:	2502      	movs	r5, #2
 8002d58:	e7af      	b.n	8002cba <_dtoa_r+0x2ba>
 8002d5a:	07f1      	lsls	r1, r6, #31
 8002d5c:	d508      	bpl.n	8002d70 <_dtoa_r+0x370>
 8002d5e:	4640      	mov	r0, r8
 8002d60:	4649      	mov	r1, r9
 8002d62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d66:	f7fd fc53 	bl	8000610 <__aeabi_dmul>
 8002d6a:	3501      	adds	r5, #1
 8002d6c:	4680      	mov	r8, r0
 8002d6e:	4689      	mov	r9, r1
 8002d70:	1076      	asrs	r6, r6, #1
 8002d72:	3708      	adds	r7, #8
 8002d74:	e7a2      	b.n	8002cbc <_dtoa_r+0x2bc>
 8002d76:	f000 809d 	beq.w	8002eb4 <_dtoa_r+0x4b4>
 8002d7a:	f1cb 0600 	rsb	r6, fp, #0
 8002d7e:	4b9f      	ldr	r3, [pc, #636]	; (8002ffc <_dtoa_r+0x5fc>)
 8002d80:	4f9f      	ldr	r7, [pc, #636]	; (8003000 <_dtoa_r+0x600>)
 8002d82:	f006 020f 	and.w	r2, r6, #15
 8002d86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002d92:	f7fd fc3d 	bl	8000610 <__aeabi_dmul>
 8002d96:	e9cd 0100 	strd	r0, r1, [sp]
 8002d9a:	1136      	asrs	r6, r6, #4
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	2502      	movs	r5, #2
 8002da0:	2e00      	cmp	r6, #0
 8002da2:	d17c      	bne.n	8002e9e <_dtoa_r+0x49e>
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d191      	bne.n	8002ccc <_dtoa_r+0x2cc>
 8002da8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 8084 	beq.w	8002eb8 <_dtoa_r+0x4b8>
 8002db0:	e9dd 8900 	ldrd	r8, r9, [sp]
 8002db4:	2200      	movs	r2, #0
 8002db6:	4b93      	ldr	r3, [pc, #588]	; (8003004 <_dtoa_r+0x604>)
 8002db8:	4640      	mov	r0, r8
 8002dba:	4649      	mov	r1, r9
 8002dbc:	f7fd fe9a 	bl	8000af4 <__aeabi_dcmplt>
 8002dc0:	2800      	cmp	r0, #0
 8002dc2:	d079      	beq.n	8002eb8 <_dtoa_r+0x4b8>
 8002dc4:	9b03      	ldr	r3, [sp, #12]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d076      	beq.n	8002eb8 <_dtoa_r+0x4b8>
 8002dca:	9b04      	ldr	r3, [sp, #16]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	dd34      	ble.n	8002e3a <_dtoa_r+0x43a>
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	4b8d      	ldr	r3, [pc, #564]	; (8003008 <_dtoa_r+0x608>)
 8002dd4:	4640      	mov	r0, r8
 8002dd6:	4649      	mov	r1, r9
 8002dd8:	f7fd fc1a 	bl	8000610 <__aeabi_dmul>
 8002ddc:	e9cd 0100 	strd	r0, r1, [sp]
 8002de0:	9e04      	ldr	r6, [sp, #16]
 8002de2:	f10b 37ff 	add.w	r7, fp, #4294967295
 8002de6:	3501      	adds	r5, #1
 8002de8:	4628      	mov	r0, r5
 8002dea:	f7fd fbab 	bl	8000544 <__aeabi_i2d>
 8002dee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002df2:	f7fd fc0d 	bl	8000610 <__aeabi_dmul>
 8002df6:	2200      	movs	r2, #0
 8002df8:	4b84      	ldr	r3, [pc, #528]	; (800300c <_dtoa_r+0x60c>)
 8002dfa:	f7fd fa57 	bl	80002ac <__adddf3>
 8002dfe:	4680      	mov	r8, r0
 8002e00:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8002e04:	2e00      	cmp	r6, #0
 8002e06:	d15a      	bne.n	8002ebe <_dtoa_r+0x4be>
 8002e08:	2200      	movs	r2, #0
 8002e0a:	4b81      	ldr	r3, [pc, #516]	; (8003010 <_dtoa_r+0x610>)
 8002e0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002e10:	f7fd fa4a 	bl	80002a8 <__aeabi_dsub>
 8002e14:	4642      	mov	r2, r8
 8002e16:	464b      	mov	r3, r9
 8002e18:	e9cd 0100 	strd	r0, r1, [sp]
 8002e1c:	f7fd fe88 	bl	8000b30 <__aeabi_dcmpgt>
 8002e20:	2800      	cmp	r0, #0
 8002e22:	f040 829b 	bne.w	800335c <_dtoa_r+0x95c>
 8002e26:	4642      	mov	r2, r8
 8002e28:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8002e2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002e30:	f7fd fe60 	bl	8000af4 <__aeabi_dcmplt>
 8002e34:	2800      	cmp	r0, #0
 8002e36:	f040 828f 	bne.w	8003358 <_dtoa_r+0x958>
 8002e3a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8002e3e:	e9cd 2300 	strd	r2, r3, [sp]
 8002e42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f2c0 8150 	blt.w	80030ea <_dtoa_r+0x6ea>
 8002e4a:	f1bb 0f0e 	cmp.w	fp, #14
 8002e4e:	f300 814c 	bgt.w	80030ea <_dtoa_r+0x6ea>
 8002e52:	4b6a      	ldr	r3, [pc, #424]	; (8002ffc <_dtoa_r+0x5fc>)
 8002e54:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002e58:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f280 80da 	bge.w	8003018 <_dtoa_r+0x618>
 8002e64:	9b03      	ldr	r3, [sp, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f300 80d6 	bgt.w	8003018 <_dtoa_r+0x618>
 8002e6c:	f040 8273 	bne.w	8003356 <_dtoa_r+0x956>
 8002e70:	2200      	movs	r2, #0
 8002e72:	4b67      	ldr	r3, [pc, #412]	; (8003010 <_dtoa_r+0x610>)
 8002e74:	4640      	mov	r0, r8
 8002e76:	4649      	mov	r1, r9
 8002e78:	f7fd fbca 	bl	8000610 <__aeabi_dmul>
 8002e7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002e80:	f7fd fe4c 	bl	8000b1c <__aeabi_dcmpge>
 8002e84:	9e03      	ldr	r6, [sp, #12]
 8002e86:	4637      	mov	r7, r6
 8002e88:	2800      	cmp	r0, #0
 8002e8a:	f040 824a 	bne.w	8003322 <_dtoa_r+0x922>
 8002e8e:	9b02      	ldr	r3, [sp, #8]
 8002e90:	9a02      	ldr	r2, [sp, #8]
 8002e92:	1c5d      	adds	r5, r3, #1
 8002e94:	2331      	movs	r3, #49	; 0x31
 8002e96:	7013      	strb	r3, [r2, #0]
 8002e98:	f10b 0b01 	add.w	fp, fp, #1
 8002e9c:	e245      	b.n	800332a <_dtoa_r+0x92a>
 8002e9e:	07f2      	lsls	r2, r6, #31
 8002ea0:	d505      	bpl.n	8002eae <_dtoa_r+0x4ae>
 8002ea2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ea6:	f7fd fbb3 	bl	8000610 <__aeabi_dmul>
 8002eaa:	3501      	adds	r5, #1
 8002eac:	2301      	movs	r3, #1
 8002eae:	1076      	asrs	r6, r6, #1
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	e775      	b.n	8002da0 <_dtoa_r+0x3a0>
 8002eb4:	2502      	movs	r5, #2
 8002eb6:	e777      	b.n	8002da8 <_dtoa_r+0x3a8>
 8002eb8:	465f      	mov	r7, fp
 8002eba:	9e03      	ldr	r6, [sp, #12]
 8002ebc:	e794      	b.n	8002de8 <_dtoa_r+0x3e8>
 8002ebe:	9a02      	ldr	r2, [sp, #8]
 8002ec0:	4b4e      	ldr	r3, [pc, #312]	; (8002ffc <_dtoa_r+0x5fc>)
 8002ec2:	4432      	add	r2, r6
 8002ec4:	9213      	str	r2, [sp, #76]	; 0x4c
 8002ec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ec8:	1e71      	subs	r1, r6, #1
 8002eca:	2a00      	cmp	r2, #0
 8002ecc:	d048      	beq.n	8002f60 <_dtoa_r+0x560>
 8002ece:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	494e      	ldr	r1, [pc, #312]	; (8003014 <_dtoa_r+0x614>)
 8002eda:	f7fd fcc3 	bl	8000864 <__aeabi_ddiv>
 8002ede:	4642      	mov	r2, r8
 8002ee0:	464b      	mov	r3, r9
 8002ee2:	f7fd f9e1 	bl	80002a8 <__aeabi_dsub>
 8002ee6:	9d02      	ldr	r5, [sp, #8]
 8002ee8:	4680      	mov	r8, r0
 8002eea:	4689      	mov	r9, r1
 8002eec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002ef0:	f7fd fe3e 	bl	8000b70 <__aeabi_d2iz>
 8002ef4:	4606      	mov	r6, r0
 8002ef6:	f7fd fb25 	bl	8000544 <__aeabi_i2d>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002f02:	f7fd f9d1 	bl	80002a8 <__aeabi_dsub>
 8002f06:	3630      	adds	r6, #48	; 0x30
 8002f08:	f805 6b01 	strb.w	r6, [r5], #1
 8002f0c:	4642      	mov	r2, r8
 8002f0e:	464b      	mov	r3, r9
 8002f10:	e9cd 0100 	strd	r0, r1, [sp]
 8002f14:	f7fd fdee 	bl	8000af4 <__aeabi_dcmplt>
 8002f18:	2800      	cmp	r0, #0
 8002f1a:	d165      	bne.n	8002fe8 <_dtoa_r+0x5e8>
 8002f1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002f20:	2000      	movs	r0, #0
 8002f22:	4938      	ldr	r1, [pc, #224]	; (8003004 <_dtoa_r+0x604>)
 8002f24:	f7fd f9c0 	bl	80002a8 <__aeabi_dsub>
 8002f28:	4642      	mov	r2, r8
 8002f2a:	464b      	mov	r3, r9
 8002f2c:	f7fd fde2 	bl	8000af4 <__aeabi_dcmplt>
 8002f30:	2800      	cmp	r0, #0
 8002f32:	f040 80ba 	bne.w	80030aa <_dtoa_r+0x6aa>
 8002f36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002f38:	429d      	cmp	r5, r3
 8002f3a:	f43f af7e 	beq.w	8002e3a <_dtoa_r+0x43a>
 8002f3e:	2200      	movs	r2, #0
 8002f40:	4b31      	ldr	r3, [pc, #196]	; (8003008 <_dtoa_r+0x608>)
 8002f42:	4640      	mov	r0, r8
 8002f44:	4649      	mov	r1, r9
 8002f46:	f7fd fb63 	bl	8000610 <__aeabi_dmul>
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	4680      	mov	r8, r0
 8002f4e:	4689      	mov	r9, r1
 8002f50:	4b2d      	ldr	r3, [pc, #180]	; (8003008 <_dtoa_r+0x608>)
 8002f52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002f56:	f7fd fb5b 	bl	8000610 <__aeabi_dmul>
 8002f5a:	e9cd 0100 	strd	r0, r1, [sp]
 8002f5e:	e7c5      	b.n	8002eec <_dtoa_r+0x4ec>
 8002f60:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8002f64:	4642      	mov	r2, r8
 8002f66:	464b      	mov	r3, r9
 8002f68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f6c:	f7fd fb50 	bl	8000610 <__aeabi_dmul>
 8002f70:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002f74:	9d02      	ldr	r5, [sp, #8]
 8002f76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002f7a:	f7fd fdf9 	bl	8000b70 <__aeabi_d2iz>
 8002f7e:	4606      	mov	r6, r0
 8002f80:	f7fd fae0 	bl	8000544 <__aeabi_i2d>
 8002f84:	3630      	adds	r6, #48	; 0x30
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002f8e:	f7fd f98b 	bl	80002a8 <__aeabi_dsub>
 8002f92:	f805 6b01 	strb.w	r6, [r5], #1
 8002f96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002f98:	42ab      	cmp	r3, r5
 8002f9a:	4680      	mov	r8, r0
 8002f9c:	4689      	mov	r9, r1
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	d125      	bne.n	8002ff0 <_dtoa_r+0x5f0>
 8002fa4:	4b1b      	ldr	r3, [pc, #108]	; (8003014 <_dtoa_r+0x614>)
 8002fa6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002faa:	f7fd f97f 	bl	80002ac <__adddf3>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	4640      	mov	r0, r8
 8002fb4:	4649      	mov	r1, r9
 8002fb6:	f7fd fdbb 	bl	8000b30 <__aeabi_dcmpgt>
 8002fba:	2800      	cmp	r0, #0
 8002fbc:	d175      	bne.n	80030aa <_dtoa_r+0x6aa>
 8002fbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	4913      	ldr	r1, [pc, #76]	; (8003014 <_dtoa_r+0x614>)
 8002fc6:	f7fd f96f 	bl	80002a8 <__aeabi_dsub>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4640      	mov	r0, r8
 8002fd0:	4649      	mov	r1, r9
 8002fd2:	f7fd fd8f 	bl	8000af4 <__aeabi_dcmplt>
 8002fd6:	2800      	cmp	r0, #0
 8002fd8:	f43f af2f 	beq.w	8002e3a <_dtoa_r+0x43a>
 8002fdc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002fe0:	2b30      	cmp	r3, #48	; 0x30
 8002fe2:	f105 32ff 	add.w	r2, r5, #4294967295
 8002fe6:	d001      	beq.n	8002fec <_dtoa_r+0x5ec>
 8002fe8:	46bb      	mov	fp, r7
 8002fea:	e04d      	b.n	8003088 <_dtoa_r+0x688>
 8002fec:	4615      	mov	r5, r2
 8002fee:	e7f5      	b.n	8002fdc <_dtoa_r+0x5dc>
 8002ff0:	4b05      	ldr	r3, [pc, #20]	; (8003008 <_dtoa_r+0x608>)
 8002ff2:	f7fd fb0d 	bl	8000610 <__aeabi_dmul>
 8002ff6:	e9cd 0100 	strd	r0, r1, [sp]
 8002ffa:	e7bc      	b.n	8002f76 <_dtoa_r+0x576>
 8002ffc:	08004780 	.word	0x08004780
 8003000:	08004758 	.word	0x08004758
 8003004:	3ff00000 	.word	0x3ff00000
 8003008:	40240000 	.word	0x40240000
 800300c:	401c0000 	.word	0x401c0000
 8003010:	40140000 	.word	0x40140000
 8003014:	3fe00000 	.word	0x3fe00000
 8003018:	e9dd 6700 	ldrd	r6, r7, [sp]
 800301c:	9d02      	ldr	r5, [sp, #8]
 800301e:	4642      	mov	r2, r8
 8003020:	464b      	mov	r3, r9
 8003022:	4630      	mov	r0, r6
 8003024:	4639      	mov	r1, r7
 8003026:	f7fd fc1d 	bl	8000864 <__aeabi_ddiv>
 800302a:	f7fd fda1 	bl	8000b70 <__aeabi_d2iz>
 800302e:	9000      	str	r0, [sp, #0]
 8003030:	f7fd fa88 	bl	8000544 <__aeabi_i2d>
 8003034:	4642      	mov	r2, r8
 8003036:	464b      	mov	r3, r9
 8003038:	f7fd faea 	bl	8000610 <__aeabi_dmul>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4630      	mov	r0, r6
 8003042:	4639      	mov	r1, r7
 8003044:	f7fd f930 	bl	80002a8 <__aeabi_dsub>
 8003048:	9e00      	ldr	r6, [sp, #0]
 800304a:	9f03      	ldr	r7, [sp, #12]
 800304c:	3630      	adds	r6, #48	; 0x30
 800304e:	f805 6b01 	strb.w	r6, [r5], #1
 8003052:	9e02      	ldr	r6, [sp, #8]
 8003054:	1bae      	subs	r6, r5, r6
 8003056:	42b7      	cmp	r7, r6
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	d138      	bne.n	80030d0 <_dtoa_r+0x6d0>
 800305e:	f7fd f925 	bl	80002ac <__adddf3>
 8003062:	4606      	mov	r6, r0
 8003064:	460f      	mov	r7, r1
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	4640      	mov	r0, r8
 800306c:	4649      	mov	r1, r9
 800306e:	f7fd fd41 	bl	8000af4 <__aeabi_dcmplt>
 8003072:	b9c8      	cbnz	r0, 80030a8 <_dtoa_r+0x6a8>
 8003074:	4632      	mov	r2, r6
 8003076:	463b      	mov	r3, r7
 8003078:	4640      	mov	r0, r8
 800307a:	4649      	mov	r1, r9
 800307c:	f7fd fd30 	bl	8000ae0 <__aeabi_dcmpeq>
 8003080:	b110      	cbz	r0, 8003088 <_dtoa_r+0x688>
 8003082:	9b00      	ldr	r3, [sp, #0]
 8003084:	07db      	lsls	r3, r3, #31
 8003086:	d40f      	bmi.n	80030a8 <_dtoa_r+0x6a8>
 8003088:	4651      	mov	r1, sl
 800308a:	4620      	mov	r0, r4
 800308c:	f000 fba5 	bl	80037da <_Bfree>
 8003090:	2300      	movs	r3, #0
 8003092:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003094:	702b      	strb	r3, [r5, #0]
 8003096:	f10b 0301 	add.w	r3, fp, #1
 800309a:	6013      	str	r3, [r2, #0]
 800309c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f43f acf8 	beq.w	8002a94 <_dtoa_r+0x94>
 80030a4:	601d      	str	r5, [r3, #0]
 80030a6:	e4f5      	b.n	8002a94 <_dtoa_r+0x94>
 80030a8:	465f      	mov	r7, fp
 80030aa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80030ae:	2a39      	cmp	r2, #57	; 0x39
 80030b0:	f105 33ff 	add.w	r3, r5, #4294967295
 80030b4:	d106      	bne.n	80030c4 <_dtoa_r+0x6c4>
 80030b6:	9a02      	ldr	r2, [sp, #8]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d107      	bne.n	80030cc <_dtoa_r+0x6cc>
 80030bc:	2330      	movs	r3, #48	; 0x30
 80030be:	7013      	strb	r3, [r2, #0]
 80030c0:	3701      	adds	r7, #1
 80030c2:	4613      	mov	r3, r2
 80030c4:	781a      	ldrb	r2, [r3, #0]
 80030c6:	3201      	adds	r2, #1
 80030c8:	701a      	strb	r2, [r3, #0]
 80030ca:	e78d      	b.n	8002fe8 <_dtoa_r+0x5e8>
 80030cc:	461d      	mov	r5, r3
 80030ce:	e7ec      	b.n	80030aa <_dtoa_r+0x6aa>
 80030d0:	2200      	movs	r2, #0
 80030d2:	4ba4      	ldr	r3, [pc, #656]	; (8003364 <_dtoa_r+0x964>)
 80030d4:	f7fd fa9c 	bl	8000610 <__aeabi_dmul>
 80030d8:	2200      	movs	r2, #0
 80030da:	2300      	movs	r3, #0
 80030dc:	4606      	mov	r6, r0
 80030de:	460f      	mov	r7, r1
 80030e0:	f7fd fcfe 	bl	8000ae0 <__aeabi_dcmpeq>
 80030e4:	2800      	cmp	r0, #0
 80030e6:	d09a      	beq.n	800301e <_dtoa_r+0x61e>
 80030e8:	e7ce      	b.n	8003088 <_dtoa_r+0x688>
 80030ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030ec:	2a00      	cmp	r2, #0
 80030ee:	f000 80cd 	beq.w	800328c <_dtoa_r+0x88c>
 80030f2:	9a07      	ldr	r2, [sp, #28]
 80030f4:	2a01      	cmp	r2, #1
 80030f6:	f300 80af 	bgt.w	8003258 <_dtoa_r+0x858>
 80030fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80030fc:	2a00      	cmp	r2, #0
 80030fe:	f000 80a7 	beq.w	8003250 <_dtoa_r+0x850>
 8003102:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003106:	9e08      	ldr	r6, [sp, #32]
 8003108:	9d05      	ldr	r5, [sp, #20]
 800310a:	9a05      	ldr	r2, [sp, #20]
 800310c:	441a      	add	r2, r3
 800310e:	9205      	str	r2, [sp, #20]
 8003110:	9a06      	ldr	r2, [sp, #24]
 8003112:	2101      	movs	r1, #1
 8003114:	441a      	add	r2, r3
 8003116:	4620      	mov	r0, r4
 8003118:	9206      	str	r2, [sp, #24]
 800311a:	f000 fbfe 	bl	800391a <__i2b>
 800311e:	4607      	mov	r7, r0
 8003120:	2d00      	cmp	r5, #0
 8003122:	dd0c      	ble.n	800313e <_dtoa_r+0x73e>
 8003124:	9b06      	ldr	r3, [sp, #24]
 8003126:	2b00      	cmp	r3, #0
 8003128:	dd09      	ble.n	800313e <_dtoa_r+0x73e>
 800312a:	42ab      	cmp	r3, r5
 800312c:	9a05      	ldr	r2, [sp, #20]
 800312e:	bfa8      	it	ge
 8003130:	462b      	movge	r3, r5
 8003132:	1ad2      	subs	r2, r2, r3
 8003134:	9205      	str	r2, [sp, #20]
 8003136:	9a06      	ldr	r2, [sp, #24]
 8003138:	1aed      	subs	r5, r5, r3
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	9306      	str	r3, [sp, #24]
 800313e:	9b08      	ldr	r3, [sp, #32]
 8003140:	b1f3      	cbz	r3, 8003180 <_dtoa_r+0x780>
 8003142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80a5 	beq.w	8003294 <_dtoa_r+0x894>
 800314a:	2e00      	cmp	r6, #0
 800314c:	dd10      	ble.n	8003170 <_dtoa_r+0x770>
 800314e:	4639      	mov	r1, r7
 8003150:	4632      	mov	r2, r6
 8003152:	4620      	mov	r0, r4
 8003154:	f000 fc78 	bl	8003a48 <__pow5mult>
 8003158:	4652      	mov	r2, sl
 800315a:	4601      	mov	r1, r0
 800315c:	4607      	mov	r7, r0
 800315e:	4620      	mov	r0, r4
 8003160:	f000 fbe4 	bl	800392c <__multiply>
 8003164:	4651      	mov	r1, sl
 8003166:	4680      	mov	r8, r0
 8003168:	4620      	mov	r0, r4
 800316a:	f000 fb36 	bl	80037da <_Bfree>
 800316e:	46c2      	mov	sl, r8
 8003170:	9b08      	ldr	r3, [sp, #32]
 8003172:	1b9a      	subs	r2, r3, r6
 8003174:	d004      	beq.n	8003180 <_dtoa_r+0x780>
 8003176:	4651      	mov	r1, sl
 8003178:	4620      	mov	r0, r4
 800317a:	f000 fc65 	bl	8003a48 <__pow5mult>
 800317e:	4682      	mov	sl, r0
 8003180:	2101      	movs	r1, #1
 8003182:	4620      	mov	r0, r4
 8003184:	f000 fbc9 	bl	800391a <__i2b>
 8003188:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800318a:	2b00      	cmp	r3, #0
 800318c:	4606      	mov	r6, r0
 800318e:	f340 8083 	ble.w	8003298 <_dtoa_r+0x898>
 8003192:	461a      	mov	r2, r3
 8003194:	4601      	mov	r1, r0
 8003196:	4620      	mov	r0, r4
 8003198:	f000 fc56 	bl	8003a48 <__pow5mult>
 800319c:	9b07      	ldr	r3, [sp, #28]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	4606      	mov	r6, r0
 80031a2:	dd7c      	ble.n	800329e <_dtoa_r+0x89e>
 80031a4:	f04f 0800 	mov.w	r8, #0
 80031a8:	6933      	ldr	r3, [r6, #16]
 80031aa:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80031ae:	6918      	ldr	r0, [r3, #16]
 80031b0:	f000 fb65 	bl	800387e <__hi0bits>
 80031b4:	f1c0 0020 	rsb	r0, r0, #32
 80031b8:	9b06      	ldr	r3, [sp, #24]
 80031ba:	4418      	add	r0, r3
 80031bc:	f010 001f 	ands.w	r0, r0, #31
 80031c0:	f000 8096 	beq.w	80032f0 <_dtoa_r+0x8f0>
 80031c4:	f1c0 0320 	rsb	r3, r0, #32
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	f340 8087 	ble.w	80032dc <_dtoa_r+0x8dc>
 80031ce:	9b05      	ldr	r3, [sp, #20]
 80031d0:	f1c0 001c 	rsb	r0, r0, #28
 80031d4:	4403      	add	r3, r0
 80031d6:	9305      	str	r3, [sp, #20]
 80031d8:	9b06      	ldr	r3, [sp, #24]
 80031da:	4405      	add	r5, r0
 80031dc:	4403      	add	r3, r0
 80031de:	9306      	str	r3, [sp, #24]
 80031e0:	9b05      	ldr	r3, [sp, #20]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	dd05      	ble.n	80031f2 <_dtoa_r+0x7f2>
 80031e6:	4651      	mov	r1, sl
 80031e8:	461a      	mov	r2, r3
 80031ea:	4620      	mov	r0, r4
 80031ec:	f000 fc7a 	bl	8003ae4 <__lshift>
 80031f0:	4682      	mov	sl, r0
 80031f2:	9b06      	ldr	r3, [sp, #24]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	dd05      	ble.n	8003204 <_dtoa_r+0x804>
 80031f8:	4631      	mov	r1, r6
 80031fa:	461a      	mov	r2, r3
 80031fc:	4620      	mov	r0, r4
 80031fe:	f000 fc71 	bl	8003ae4 <__lshift>
 8003202:	4606      	mov	r6, r0
 8003204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003206:	2b00      	cmp	r3, #0
 8003208:	d074      	beq.n	80032f4 <_dtoa_r+0x8f4>
 800320a:	4631      	mov	r1, r6
 800320c:	4650      	mov	r0, sl
 800320e:	f000 fcba 	bl	8003b86 <__mcmp>
 8003212:	2800      	cmp	r0, #0
 8003214:	da6e      	bge.n	80032f4 <_dtoa_r+0x8f4>
 8003216:	2300      	movs	r3, #0
 8003218:	4651      	mov	r1, sl
 800321a:	220a      	movs	r2, #10
 800321c:	4620      	mov	r0, r4
 800321e:	f000 faf3 	bl	8003808 <__multadd>
 8003222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003224:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003228:	4682      	mov	sl, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 81a8 	beq.w	8003580 <_dtoa_r+0xb80>
 8003230:	2300      	movs	r3, #0
 8003232:	4639      	mov	r1, r7
 8003234:	220a      	movs	r2, #10
 8003236:	4620      	mov	r0, r4
 8003238:	f000 fae6 	bl	8003808 <__multadd>
 800323c:	9b04      	ldr	r3, [sp, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	4607      	mov	r7, r0
 8003242:	f300 80c8 	bgt.w	80033d6 <_dtoa_r+0x9d6>
 8003246:	9b07      	ldr	r3, [sp, #28]
 8003248:	2b02      	cmp	r3, #2
 800324a:	f340 80c4 	ble.w	80033d6 <_dtoa_r+0x9d6>
 800324e:	e059      	b.n	8003304 <_dtoa_r+0x904>
 8003250:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003252:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003256:	e756      	b.n	8003106 <_dtoa_r+0x706>
 8003258:	9b03      	ldr	r3, [sp, #12]
 800325a:	1e5e      	subs	r6, r3, #1
 800325c:	9b08      	ldr	r3, [sp, #32]
 800325e:	42b3      	cmp	r3, r6
 8003260:	bfbf      	itttt	lt
 8003262:	9b08      	ldrlt	r3, [sp, #32]
 8003264:	9608      	strlt	r6, [sp, #32]
 8003266:	1af2      	sublt	r2, r6, r3
 8003268:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800326a:	bfb6      	itet	lt
 800326c:	189b      	addlt	r3, r3, r2
 800326e:	1b9e      	subge	r6, r3, r6
 8003270:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8003272:	9b03      	ldr	r3, [sp, #12]
 8003274:	bfb8      	it	lt
 8003276:	2600      	movlt	r6, #0
 8003278:	2b00      	cmp	r3, #0
 800327a:	bfb9      	ittee	lt
 800327c:	9b05      	ldrlt	r3, [sp, #20]
 800327e:	9a03      	ldrlt	r2, [sp, #12]
 8003280:	9d05      	ldrge	r5, [sp, #20]
 8003282:	9b03      	ldrge	r3, [sp, #12]
 8003284:	bfbc      	itt	lt
 8003286:	1a9d      	sublt	r5, r3, r2
 8003288:	2300      	movlt	r3, #0
 800328a:	e73e      	b.n	800310a <_dtoa_r+0x70a>
 800328c:	9e08      	ldr	r6, [sp, #32]
 800328e:	9d05      	ldr	r5, [sp, #20]
 8003290:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003292:	e745      	b.n	8003120 <_dtoa_r+0x720>
 8003294:	9a08      	ldr	r2, [sp, #32]
 8003296:	e76e      	b.n	8003176 <_dtoa_r+0x776>
 8003298:	9b07      	ldr	r3, [sp, #28]
 800329a:	2b01      	cmp	r3, #1
 800329c:	dc19      	bgt.n	80032d2 <_dtoa_r+0x8d2>
 800329e:	9b00      	ldr	r3, [sp, #0]
 80032a0:	b9bb      	cbnz	r3, 80032d2 <_dtoa_r+0x8d2>
 80032a2:	9b01      	ldr	r3, [sp, #4]
 80032a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032a8:	b99b      	cbnz	r3, 80032d2 <_dtoa_r+0x8d2>
 80032aa:	9b01      	ldr	r3, [sp, #4]
 80032ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032b0:	0d1b      	lsrs	r3, r3, #20
 80032b2:	051b      	lsls	r3, r3, #20
 80032b4:	b183      	cbz	r3, 80032d8 <_dtoa_r+0x8d8>
 80032b6:	9b05      	ldr	r3, [sp, #20]
 80032b8:	3301      	adds	r3, #1
 80032ba:	9305      	str	r3, [sp, #20]
 80032bc:	9b06      	ldr	r3, [sp, #24]
 80032be:	3301      	adds	r3, #1
 80032c0:	9306      	str	r3, [sp, #24]
 80032c2:	f04f 0801 	mov.w	r8, #1
 80032c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f47f af6d 	bne.w	80031a8 <_dtoa_r+0x7a8>
 80032ce:	2001      	movs	r0, #1
 80032d0:	e772      	b.n	80031b8 <_dtoa_r+0x7b8>
 80032d2:	f04f 0800 	mov.w	r8, #0
 80032d6:	e7f6      	b.n	80032c6 <_dtoa_r+0x8c6>
 80032d8:	4698      	mov	r8, r3
 80032da:	e7f4      	b.n	80032c6 <_dtoa_r+0x8c6>
 80032dc:	d080      	beq.n	80031e0 <_dtoa_r+0x7e0>
 80032de:	9a05      	ldr	r2, [sp, #20]
 80032e0:	331c      	adds	r3, #28
 80032e2:	441a      	add	r2, r3
 80032e4:	9205      	str	r2, [sp, #20]
 80032e6:	9a06      	ldr	r2, [sp, #24]
 80032e8:	441a      	add	r2, r3
 80032ea:	441d      	add	r5, r3
 80032ec:	4613      	mov	r3, r2
 80032ee:	e776      	b.n	80031de <_dtoa_r+0x7de>
 80032f0:	4603      	mov	r3, r0
 80032f2:	e7f4      	b.n	80032de <_dtoa_r+0x8de>
 80032f4:	9b03      	ldr	r3, [sp, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	dc36      	bgt.n	8003368 <_dtoa_r+0x968>
 80032fa:	9b07      	ldr	r3, [sp, #28]
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	dd33      	ble.n	8003368 <_dtoa_r+0x968>
 8003300:	9b03      	ldr	r3, [sp, #12]
 8003302:	9304      	str	r3, [sp, #16]
 8003304:	9b04      	ldr	r3, [sp, #16]
 8003306:	b963      	cbnz	r3, 8003322 <_dtoa_r+0x922>
 8003308:	4631      	mov	r1, r6
 800330a:	2205      	movs	r2, #5
 800330c:	4620      	mov	r0, r4
 800330e:	f000 fa7b 	bl	8003808 <__multadd>
 8003312:	4601      	mov	r1, r0
 8003314:	4606      	mov	r6, r0
 8003316:	4650      	mov	r0, sl
 8003318:	f000 fc35 	bl	8003b86 <__mcmp>
 800331c:	2800      	cmp	r0, #0
 800331e:	f73f adb6 	bgt.w	8002e8e <_dtoa_r+0x48e>
 8003322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003324:	9d02      	ldr	r5, [sp, #8]
 8003326:	ea6f 0b03 	mvn.w	fp, r3
 800332a:	2300      	movs	r3, #0
 800332c:	9303      	str	r3, [sp, #12]
 800332e:	4631      	mov	r1, r6
 8003330:	4620      	mov	r0, r4
 8003332:	f000 fa52 	bl	80037da <_Bfree>
 8003336:	2f00      	cmp	r7, #0
 8003338:	f43f aea6 	beq.w	8003088 <_dtoa_r+0x688>
 800333c:	9b03      	ldr	r3, [sp, #12]
 800333e:	b12b      	cbz	r3, 800334c <_dtoa_r+0x94c>
 8003340:	42bb      	cmp	r3, r7
 8003342:	d003      	beq.n	800334c <_dtoa_r+0x94c>
 8003344:	4619      	mov	r1, r3
 8003346:	4620      	mov	r0, r4
 8003348:	f000 fa47 	bl	80037da <_Bfree>
 800334c:	4639      	mov	r1, r7
 800334e:	4620      	mov	r0, r4
 8003350:	f000 fa43 	bl	80037da <_Bfree>
 8003354:	e698      	b.n	8003088 <_dtoa_r+0x688>
 8003356:	2600      	movs	r6, #0
 8003358:	4637      	mov	r7, r6
 800335a:	e7e2      	b.n	8003322 <_dtoa_r+0x922>
 800335c:	46bb      	mov	fp, r7
 800335e:	4637      	mov	r7, r6
 8003360:	e595      	b.n	8002e8e <_dtoa_r+0x48e>
 8003362:	bf00      	nop
 8003364:	40240000 	.word	0x40240000
 8003368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800336a:	bb93      	cbnz	r3, 80033d2 <_dtoa_r+0x9d2>
 800336c:	9b03      	ldr	r3, [sp, #12]
 800336e:	9304      	str	r3, [sp, #16]
 8003370:	9d02      	ldr	r5, [sp, #8]
 8003372:	4631      	mov	r1, r6
 8003374:	4650      	mov	r0, sl
 8003376:	f7ff fab5 	bl	80028e4 <quorem>
 800337a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800337e:	f805 9b01 	strb.w	r9, [r5], #1
 8003382:	9b02      	ldr	r3, [sp, #8]
 8003384:	9a04      	ldr	r2, [sp, #16]
 8003386:	1aeb      	subs	r3, r5, r3
 8003388:	429a      	cmp	r2, r3
 800338a:	f300 80dc 	bgt.w	8003546 <_dtoa_r+0xb46>
 800338e:	9b02      	ldr	r3, [sp, #8]
 8003390:	2a01      	cmp	r2, #1
 8003392:	bfac      	ite	ge
 8003394:	189b      	addge	r3, r3, r2
 8003396:	3301      	addlt	r3, #1
 8003398:	4698      	mov	r8, r3
 800339a:	2300      	movs	r3, #0
 800339c:	9303      	str	r3, [sp, #12]
 800339e:	4651      	mov	r1, sl
 80033a0:	2201      	movs	r2, #1
 80033a2:	4620      	mov	r0, r4
 80033a4:	f000 fb9e 	bl	8003ae4 <__lshift>
 80033a8:	4631      	mov	r1, r6
 80033aa:	4682      	mov	sl, r0
 80033ac:	f000 fbeb 	bl	8003b86 <__mcmp>
 80033b0:	2800      	cmp	r0, #0
 80033b2:	f300 808d 	bgt.w	80034d0 <_dtoa_r+0xad0>
 80033b6:	d103      	bne.n	80033c0 <_dtoa_r+0x9c0>
 80033b8:	f019 0f01 	tst.w	r9, #1
 80033bc:	f040 8088 	bne.w	80034d0 <_dtoa_r+0xad0>
 80033c0:	4645      	mov	r5, r8
 80033c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80033c6:	2b30      	cmp	r3, #48	; 0x30
 80033c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80033cc:	d1af      	bne.n	800332e <_dtoa_r+0x92e>
 80033ce:	4615      	mov	r5, r2
 80033d0:	e7f7      	b.n	80033c2 <_dtoa_r+0x9c2>
 80033d2:	9b03      	ldr	r3, [sp, #12]
 80033d4:	9304      	str	r3, [sp, #16]
 80033d6:	2d00      	cmp	r5, #0
 80033d8:	dd05      	ble.n	80033e6 <_dtoa_r+0x9e6>
 80033da:	4639      	mov	r1, r7
 80033dc:	462a      	mov	r2, r5
 80033de:	4620      	mov	r0, r4
 80033e0:	f000 fb80 	bl	8003ae4 <__lshift>
 80033e4:	4607      	mov	r7, r0
 80033e6:	f1b8 0f00 	cmp.w	r8, #0
 80033ea:	d04c      	beq.n	8003486 <_dtoa_r+0xa86>
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	4620      	mov	r0, r4
 80033f0:	f000 f9bf 	bl	8003772 <_Balloc>
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	3202      	adds	r2, #2
 80033f8:	4605      	mov	r5, r0
 80033fa:	0092      	lsls	r2, r2, #2
 80033fc:	f107 010c 	add.w	r1, r7, #12
 8003400:	300c      	adds	r0, #12
 8003402:	f000 f9ab 	bl	800375c <memcpy>
 8003406:	2201      	movs	r2, #1
 8003408:	4629      	mov	r1, r5
 800340a:	4620      	mov	r0, r4
 800340c:	f000 fb6a 	bl	8003ae4 <__lshift>
 8003410:	9b00      	ldr	r3, [sp, #0]
 8003412:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003416:	9703      	str	r7, [sp, #12]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	4607      	mov	r7, r0
 800341e:	9305      	str	r3, [sp, #20]
 8003420:	4631      	mov	r1, r6
 8003422:	4650      	mov	r0, sl
 8003424:	f7ff fa5e 	bl	80028e4 <quorem>
 8003428:	9903      	ldr	r1, [sp, #12]
 800342a:	4605      	mov	r5, r0
 800342c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003430:	4650      	mov	r0, sl
 8003432:	f000 fba8 	bl	8003b86 <__mcmp>
 8003436:	463a      	mov	r2, r7
 8003438:	9000      	str	r0, [sp, #0]
 800343a:	4631      	mov	r1, r6
 800343c:	4620      	mov	r0, r4
 800343e:	f000 fbbc 	bl	8003bba <__mdiff>
 8003442:	68c3      	ldr	r3, [r0, #12]
 8003444:	4602      	mov	r2, r0
 8003446:	bb03      	cbnz	r3, 800348a <_dtoa_r+0xa8a>
 8003448:	4601      	mov	r1, r0
 800344a:	9006      	str	r0, [sp, #24]
 800344c:	4650      	mov	r0, sl
 800344e:	f000 fb9a 	bl	8003b86 <__mcmp>
 8003452:	9a06      	ldr	r2, [sp, #24]
 8003454:	4603      	mov	r3, r0
 8003456:	4611      	mov	r1, r2
 8003458:	4620      	mov	r0, r4
 800345a:	9306      	str	r3, [sp, #24]
 800345c:	f000 f9bd 	bl	80037da <_Bfree>
 8003460:	9b06      	ldr	r3, [sp, #24]
 8003462:	b9a3      	cbnz	r3, 800348e <_dtoa_r+0xa8e>
 8003464:	9a07      	ldr	r2, [sp, #28]
 8003466:	b992      	cbnz	r2, 800348e <_dtoa_r+0xa8e>
 8003468:	9a05      	ldr	r2, [sp, #20]
 800346a:	b982      	cbnz	r2, 800348e <_dtoa_r+0xa8e>
 800346c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003470:	d029      	beq.n	80034c6 <_dtoa_r+0xac6>
 8003472:	9b00      	ldr	r3, [sp, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	dd01      	ble.n	800347c <_dtoa_r+0xa7c>
 8003478:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800347c:	f108 0501 	add.w	r5, r8, #1
 8003480:	f888 9000 	strb.w	r9, [r8]
 8003484:	e753      	b.n	800332e <_dtoa_r+0x92e>
 8003486:	4638      	mov	r0, r7
 8003488:	e7c2      	b.n	8003410 <_dtoa_r+0xa10>
 800348a:	2301      	movs	r3, #1
 800348c:	e7e3      	b.n	8003456 <_dtoa_r+0xa56>
 800348e:	9a00      	ldr	r2, [sp, #0]
 8003490:	2a00      	cmp	r2, #0
 8003492:	db04      	blt.n	800349e <_dtoa_r+0xa9e>
 8003494:	d125      	bne.n	80034e2 <_dtoa_r+0xae2>
 8003496:	9a07      	ldr	r2, [sp, #28]
 8003498:	bb1a      	cbnz	r2, 80034e2 <_dtoa_r+0xae2>
 800349a:	9a05      	ldr	r2, [sp, #20]
 800349c:	bb0a      	cbnz	r2, 80034e2 <_dtoa_r+0xae2>
 800349e:	2b00      	cmp	r3, #0
 80034a0:	ddec      	ble.n	800347c <_dtoa_r+0xa7c>
 80034a2:	4651      	mov	r1, sl
 80034a4:	2201      	movs	r2, #1
 80034a6:	4620      	mov	r0, r4
 80034a8:	f000 fb1c 	bl	8003ae4 <__lshift>
 80034ac:	4631      	mov	r1, r6
 80034ae:	4682      	mov	sl, r0
 80034b0:	f000 fb69 	bl	8003b86 <__mcmp>
 80034b4:	2800      	cmp	r0, #0
 80034b6:	dc03      	bgt.n	80034c0 <_dtoa_r+0xac0>
 80034b8:	d1e0      	bne.n	800347c <_dtoa_r+0xa7c>
 80034ba:	f019 0f01 	tst.w	r9, #1
 80034be:	d0dd      	beq.n	800347c <_dtoa_r+0xa7c>
 80034c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80034c4:	d1d8      	bne.n	8003478 <_dtoa_r+0xa78>
 80034c6:	2339      	movs	r3, #57	; 0x39
 80034c8:	f888 3000 	strb.w	r3, [r8]
 80034cc:	f108 0801 	add.w	r8, r8, #1
 80034d0:	4645      	mov	r5, r8
 80034d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80034d6:	2b39      	cmp	r3, #57	; 0x39
 80034d8:	f105 32ff 	add.w	r2, r5, #4294967295
 80034dc:	d03b      	beq.n	8003556 <_dtoa_r+0xb56>
 80034de:	3301      	adds	r3, #1
 80034e0:	e040      	b.n	8003564 <_dtoa_r+0xb64>
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f108 0501 	add.w	r5, r8, #1
 80034e8:	dd05      	ble.n	80034f6 <_dtoa_r+0xaf6>
 80034ea:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80034ee:	d0ea      	beq.n	80034c6 <_dtoa_r+0xac6>
 80034f0:	f109 0901 	add.w	r9, r9, #1
 80034f4:	e7c4      	b.n	8003480 <_dtoa_r+0xa80>
 80034f6:	9b02      	ldr	r3, [sp, #8]
 80034f8:	9a04      	ldr	r2, [sp, #16]
 80034fa:	f805 9c01 	strb.w	r9, [r5, #-1]
 80034fe:	1aeb      	subs	r3, r5, r3
 8003500:	4293      	cmp	r3, r2
 8003502:	46a8      	mov	r8, r5
 8003504:	f43f af4b 	beq.w	800339e <_dtoa_r+0x99e>
 8003508:	4651      	mov	r1, sl
 800350a:	2300      	movs	r3, #0
 800350c:	220a      	movs	r2, #10
 800350e:	4620      	mov	r0, r4
 8003510:	f000 f97a 	bl	8003808 <__multadd>
 8003514:	9b03      	ldr	r3, [sp, #12]
 8003516:	9903      	ldr	r1, [sp, #12]
 8003518:	42bb      	cmp	r3, r7
 800351a:	4682      	mov	sl, r0
 800351c:	f04f 0300 	mov.w	r3, #0
 8003520:	f04f 020a 	mov.w	r2, #10
 8003524:	4620      	mov	r0, r4
 8003526:	d104      	bne.n	8003532 <_dtoa_r+0xb32>
 8003528:	f000 f96e 	bl	8003808 <__multadd>
 800352c:	9003      	str	r0, [sp, #12]
 800352e:	4607      	mov	r7, r0
 8003530:	e776      	b.n	8003420 <_dtoa_r+0xa20>
 8003532:	f000 f969 	bl	8003808 <__multadd>
 8003536:	2300      	movs	r3, #0
 8003538:	9003      	str	r0, [sp, #12]
 800353a:	220a      	movs	r2, #10
 800353c:	4639      	mov	r1, r7
 800353e:	4620      	mov	r0, r4
 8003540:	f000 f962 	bl	8003808 <__multadd>
 8003544:	e7f3      	b.n	800352e <_dtoa_r+0xb2e>
 8003546:	4651      	mov	r1, sl
 8003548:	2300      	movs	r3, #0
 800354a:	220a      	movs	r2, #10
 800354c:	4620      	mov	r0, r4
 800354e:	f000 f95b 	bl	8003808 <__multadd>
 8003552:	4682      	mov	sl, r0
 8003554:	e70d      	b.n	8003372 <_dtoa_r+0x972>
 8003556:	9b02      	ldr	r3, [sp, #8]
 8003558:	4293      	cmp	r3, r2
 800355a:	d105      	bne.n	8003568 <_dtoa_r+0xb68>
 800355c:	9a02      	ldr	r2, [sp, #8]
 800355e:	f10b 0b01 	add.w	fp, fp, #1
 8003562:	2331      	movs	r3, #49	; 0x31
 8003564:	7013      	strb	r3, [r2, #0]
 8003566:	e6e2      	b.n	800332e <_dtoa_r+0x92e>
 8003568:	4615      	mov	r5, r2
 800356a:	e7b2      	b.n	80034d2 <_dtoa_r+0xad2>
 800356c:	4b09      	ldr	r3, [pc, #36]	; (8003594 <_dtoa_r+0xb94>)
 800356e:	f7ff baae 	b.w	8002ace <_dtoa_r+0xce>
 8003572:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003574:	2b00      	cmp	r3, #0
 8003576:	f47f aa88 	bne.w	8002a8a <_dtoa_r+0x8a>
 800357a:	4b07      	ldr	r3, [pc, #28]	; (8003598 <_dtoa_r+0xb98>)
 800357c:	f7ff baa7 	b.w	8002ace <_dtoa_r+0xce>
 8003580:	9b04      	ldr	r3, [sp, #16]
 8003582:	2b00      	cmp	r3, #0
 8003584:	f73f aef4 	bgt.w	8003370 <_dtoa_r+0x970>
 8003588:	9b07      	ldr	r3, [sp, #28]
 800358a:	2b02      	cmp	r3, #2
 800358c:	f77f aef0 	ble.w	8003370 <_dtoa_r+0x970>
 8003590:	e6b8      	b.n	8003304 <_dtoa_r+0x904>
 8003592:	bf00      	nop
 8003594:	080046c0 	.word	0x080046c0
 8003598:	080046e4 	.word	0x080046e4

0800359c <_cleanup_r>:
 800359c:	4901      	ldr	r1, [pc, #4]	; (80035a4 <_cleanup_r+0x8>)
 800359e:	f000 b8a9 	b.w	80036f4 <_fwalk_reent>
 80035a2:	bf00      	nop
 80035a4:	08004485 	.word	0x08004485

080035a8 <std.isra.0>:
 80035a8:	2300      	movs	r3, #0
 80035aa:	b510      	push	{r4, lr}
 80035ac:	4604      	mov	r4, r0
 80035ae:	6003      	str	r3, [r0, #0]
 80035b0:	6043      	str	r3, [r0, #4]
 80035b2:	6083      	str	r3, [r0, #8]
 80035b4:	8181      	strh	r1, [r0, #12]
 80035b6:	6643      	str	r3, [r0, #100]	; 0x64
 80035b8:	81c2      	strh	r2, [r0, #14]
 80035ba:	6103      	str	r3, [r0, #16]
 80035bc:	6143      	str	r3, [r0, #20]
 80035be:	6183      	str	r3, [r0, #24]
 80035c0:	4619      	mov	r1, r3
 80035c2:	2208      	movs	r2, #8
 80035c4:	305c      	adds	r0, #92	; 0x5c
 80035c6:	f7fe fd01 	bl	8001fcc <memset>
 80035ca:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <std.isra.0+0x38>)
 80035cc:	6263      	str	r3, [r4, #36]	; 0x24
 80035ce:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <std.isra.0+0x3c>)
 80035d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80035d2:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <std.isra.0+0x40>)
 80035d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80035d6:	4b05      	ldr	r3, [pc, #20]	; (80035ec <std.isra.0+0x44>)
 80035d8:	6224      	str	r4, [r4, #32]
 80035da:	6323      	str	r3, [r4, #48]	; 0x30
 80035dc:	bd10      	pop	{r4, pc}
 80035de:	bf00      	nop
 80035e0:	08004129 	.word	0x08004129
 80035e4:	0800414b 	.word	0x0800414b
 80035e8:	08004183 	.word	0x08004183
 80035ec:	080041a7 	.word	0x080041a7

080035f0 <__sfmoreglue>:
 80035f0:	b570      	push	{r4, r5, r6, lr}
 80035f2:	1e4a      	subs	r2, r1, #1
 80035f4:	2568      	movs	r5, #104	; 0x68
 80035f6:	4355      	muls	r5, r2
 80035f8:	460e      	mov	r6, r1
 80035fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80035fe:	f000 fbe5 	bl	8003dcc <_malloc_r>
 8003602:	4604      	mov	r4, r0
 8003604:	b140      	cbz	r0, 8003618 <__sfmoreglue+0x28>
 8003606:	2100      	movs	r1, #0
 8003608:	e880 0042 	stmia.w	r0, {r1, r6}
 800360c:	300c      	adds	r0, #12
 800360e:	60a0      	str	r0, [r4, #8]
 8003610:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003614:	f7fe fcda 	bl	8001fcc <memset>
 8003618:	4620      	mov	r0, r4
 800361a:	bd70      	pop	{r4, r5, r6, pc}

0800361c <__sinit>:
 800361c:	6983      	ldr	r3, [r0, #24]
 800361e:	b510      	push	{r4, lr}
 8003620:	4604      	mov	r4, r0
 8003622:	bb33      	cbnz	r3, 8003672 <__sinit+0x56>
 8003624:	6483      	str	r3, [r0, #72]	; 0x48
 8003626:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003628:	6503      	str	r3, [r0, #80]	; 0x50
 800362a:	4b12      	ldr	r3, [pc, #72]	; (8003674 <__sinit+0x58>)
 800362c:	4a12      	ldr	r2, [pc, #72]	; (8003678 <__sinit+0x5c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6282      	str	r2, [r0, #40]	; 0x28
 8003632:	4298      	cmp	r0, r3
 8003634:	bf04      	itt	eq
 8003636:	2301      	moveq	r3, #1
 8003638:	6183      	streq	r3, [r0, #24]
 800363a:	f000 f81f 	bl	800367c <__sfp>
 800363e:	6060      	str	r0, [r4, #4]
 8003640:	4620      	mov	r0, r4
 8003642:	f000 f81b 	bl	800367c <__sfp>
 8003646:	60a0      	str	r0, [r4, #8]
 8003648:	4620      	mov	r0, r4
 800364a:	f000 f817 	bl	800367c <__sfp>
 800364e:	2200      	movs	r2, #0
 8003650:	60e0      	str	r0, [r4, #12]
 8003652:	2104      	movs	r1, #4
 8003654:	6860      	ldr	r0, [r4, #4]
 8003656:	f7ff ffa7 	bl	80035a8 <std.isra.0>
 800365a:	2201      	movs	r2, #1
 800365c:	2109      	movs	r1, #9
 800365e:	68a0      	ldr	r0, [r4, #8]
 8003660:	f7ff ffa2 	bl	80035a8 <std.isra.0>
 8003664:	2202      	movs	r2, #2
 8003666:	2112      	movs	r1, #18
 8003668:	68e0      	ldr	r0, [r4, #12]
 800366a:	f7ff ff9d 	bl	80035a8 <std.isra.0>
 800366e:	2301      	movs	r3, #1
 8003670:	61a3      	str	r3, [r4, #24]
 8003672:	bd10      	pop	{r4, pc}
 8003674:	080046ac 	.word	0x080046ac
 8003678:	0800359d 	.word	0x0800359d

0800367c <__sfp>:
 800367c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800367e:	4b1c      	ldr	r3, [pc, #112]	; (80036f0 <__sfp+0x74>)
 8003680:	681e      	ldr	r6, [r3, #0]
 8003682:	69b3      	ldr	r3, [r6, #24]
 8003684:	4607      	mov	r7, r0
 8003686:	b913      	cbnz	r3, 800368e <__sfp+0x12>
 8003688:	4630      	mov	r0, r6
 800368a:	f7ff ffc7 	bl	800361c <__sinit>
 800368e:	3648      	adds	r6, #72	; 0x48
 8003690:	68b4      	ldr	r4, [r6, #8]
 8003692:	6873      	ldr	r3, [r6, #4]
 8003694:	3b01      	subs	r3, #1
 8003696:	d503      	bpl.n	80036a0 <__sfp+0x24>
 8003698:	6833      	ldr	r3, [r6, #0]
 800369a:	b133      	cbz	r3, 80036aa <__sfp+0x2e>
 800369c:	6836      	ldr	r6, [r6, #0]
 800369e:	e7f7      	b.n	8003690 <__sfp+0x14>
 80036a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80036a4:	b16d      	cbz	r5, 80036c2 <__sfp+0x46>
 80036a6:	3468      	adds	r4, #104	; 0x68
 80036a8:	e7f4      	b.n	8003694 <__sfp+0x18>
 80036aa:	2104      	movs	r1, #4
 80036ac:	4638      	mov	r0, r7
 80036ae:	f7ff ff9f 	bl	80035f0 <__sfmoreglue>
 80036b2:	6030      	str	r0, [r6, #0]
 80036b4:	2800      	cmp	r0, #0
 80036b6:	d1f1      	bne.n	800369c <__sfp+0x20>
 80036b8:	230c      	movs	r3, #12
 80036ba:	603b      	str	r3, [r7, #0]
 80036bc:	4604      	mov	r4, r0
 80036be:	4620      	mov	r0, r4
 80036c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036c6:	81e3      	strh	r3, [r4, #14]
 80036c8:	2301      	movs	r3, #1
 80036ca:	81a3      	strh	r3, [r4, #12]
 80036cc:	6665      	str	r5, [r4, #100]	; 0x64
 80036ce:	6025      	str	r5, [r4, #0]
 80036d0:	60a5      	str	r5, [r4, #8]
 80036d2:	6065      	str	r5, [r4, #4]
 80036d4:	6125      	str	r5, [r4, #16]
 80036d6:	6165      	str	r5, [r4, #20]
 80036d8:	61a5      	str	r5, [r4, #24]
 80036da:	2208      	movs	r2, #8
 80036dc:	4629      	mov	r1, r5
 80036de:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80036e2:	f7fe fc73 	bl	8001fcc <memset>
 80036e6:	6365      	str	r5, [r4, #52]	; 0x34
 80036e8:	63a5      	str	r5, [r4, #56]	; 0x38
 80036ea:	64a5      	str	r5, [r4, #72]	; 0x48
 80036ec:	64e5      	str	r5, [r4, #76]	; 0x4c
 80036ee:	e7e6      	b.n	80036be <__sfp+0x42>
 80036f0:	080046ac 	.word	0x080046ac

080036f4 <_fwalk_reent>:
 80036f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036f8:	4680      	mov	r8, r0
 80036fa:	4689      	mov	r9, r1
 80036fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003700:	2600      	movs	r6, #0
 8003702:	b914      	cbnz	r4, 800370a <_fwalk_reent+0x16>
 8003704:	4630      	mov	r0, r6
 8003706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800370a:	68a5      	ldr	r5, [r4, #8]
 800370c:	6867      	ldr	r7, [r4, #4]
 800370e:	3f01      	subs	r7, #1
 8003710:	d501      	bpl.n	8003716 <_fwalk_reent+0x22>
 8003712:	6824      	ldr	r4, [r4, #0]
 8003714:	e7f5      	b.n	8003702 <_fwalk_reent+0xe>
 8003716:	89ab      	ldrh	r3, [r5, #12]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d907      	bls.n	800372c <_fwalk_reent+0x38>
 800371c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003720:	3301      	adds	r3, #1
 8003722:	d003      	beq.n	800372c <_fwalk_reent+0x38>
 8003724:	4629      	mov	r1, r5
 8003726:	4640      	mov	r0, r8
 8003728:	47c8      	blx	r9
 800372a:	4306      	orrs	r6, r0
 800372c:	3568      	adds	r5, #104	; 0x68
 800372e:	e7ee      	b.n	800370e <_fwalk_reent+0x1a>

08003730 <_localeconv_r>:
 8003730:	4b04      	ldr	r3, [pc, #16]	; (8003744 <_localeconv_r+0x14>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6a18      	ldr	r0, [r3, #32]
 8003736:	4b04      	ldr	r3, [pc, #16]	; (8003748 <_localeconv_r+0x18>)
 8003738:	2800      	cmp	r0, #0
 800373a:	bf08      	it	eq
 800373c:	4618      	moveq	r0, r3
 800373e:	30f0      	adds	r0, #240	; 0xf0
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	2000000c 	.word	0x2000000c
 8003748:	20000070 	.word	0x20000070

0800374c <malloc>:
 800374c:	4b02      	ldr	r3, [pc, #8]	; (8003758 <malloc+0xc>)
 800374e:	4601      	mov	r1, r0
 8003750:	6818      	ldr	r0, [r3, #0]
 8003752:	f000 bb3b 	b.w	8003dcc <_malloc_r>
 8003756:	bf00      	nop
 8003758:	2000000c 	.word	0x2000000c

0800375c <memcpy>:
 800375c:	b510      	push	{r4, lr}
 800375e:	1e43      	subs	r3, r0, #1
 8003760:	440a      	add	r2, r1
 8003762:	4291      	cmp	r1, r2
 8003764:	d100      	bne.n	8003768 <memcpy+0xc>
 8003766:	bd10      	pop	{r4, pc}
 8003768:	f811 4b01 	ldrb.w	r4, [r1], #1
 800376c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003770:	e7f7      	b.n	8003762 <memcpy+0x6>

08003772 <_Balloc>:
 8003772:	b570      	push	{r4, r5, r6, lr}
 8003774:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003776:	4604      	mov	r4, r0
 8003778:	460e      	mov	r6, r1
 800377a:	b93d      	cbnz	r5, 800378c <_Balloc+0x1a>
 800377c:	2010      	movs	r0, #16
 800377e:	f7ff ffe5 	bl	800374c <malloc>
 8003782:	6260      	str	r0, [r4, #36]	; 0x24
 8003784:	6045      	str	r5, [r0, #4]
 8003786:	6085      	str	r5, [r0, #8]
 8003788:	6005      	str	r5, [r0, #0]
 800378a:	60c5      	str	r5, [r0, #12]
 800378c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800378e:	68eb      	ldr	r3, [r5, #12]
 8003790:	b183      	cbz	r3, 80037b4 <_Balloc+0x42>
 8003792:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800379a:	b9b8      	cbnz	r0, 80037cc <_Balloc+0x5a>
 800379c:	2101      	movs	r1, #1
 800379e:	fa01 f506 	lsl.w	r5, r1, r6
 80037a2:	1d6a      	adds	r2, r5, #5
 80037a4:	0092      	lsls	r2, r2, #2
 80037a6:	4620      	mov	r0, r4
 80037a8:	f000 fab4 	bl	8003d14 <_calloc_r>
 80037ac:	b160      	cbz	r0, 80037c8 <_Balloc+0x56>
 80037ae:	6046      	str	r6, [r0, #4]
 80037b0:	6085      	str	r5, [r0, #8]
 80037b2:	e00e      	b.n	80037d2 <_Balloc+0x60>
 80037b4:	2221      	movs	r2, #33	; 0x21
 80037b6:	2104      	movs	r1, #4
 80037b8:	4620      	mov	r0, r4
 80037ba:	f000 faab 	bl	8003d14 <_calloc_r>
 80037be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037c0:	60e8      	str	r0, [r5, #12]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1e4      	bne.n	8003792 <_Balloc+0x20>
 80037c8:	2000      	movs	r0, #0
 80037ca:	bd70      	pop	{r4, r5, r6, pc}
 80037cc:	6802      	ldr	r2, [r0, #0]
 80037ce:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80037d2:	2300      	movs	r3, #0
 80037d4:	6103      	str	r3, [r0, #16]
 80037d6:	60c3      	str	r3, [r0, #12]
 80037d8:	bd70      	pop	{r4, r5, r6, pc}

080037da <_Bfree>:
 80037da:	b570      	push	{r4, r5, r6, lr}
 80037dc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80037de:	4606      	mov	r6, r0
 80037e0:	460d      	mov	r5, r1
 80037e2:	b93c      	cbnz	r4, 80037f4 <_Bfree+0x1a>
 80037e4:	2010      	movs	r0, #16
 80037e6:	f7ff ffb1 	bl	800374c <malloc>
 80037ea:	6270      	str	r0, [r6, #36]	; 0x24
 80037ec:	6044      	str	r4, [r0, #4]
 80037ee:	6084      	str	r4, [r0, #8]
 80037f0:	6004      	str	r4, [r0, #0]
 80037f2:	60c4      	str	r4, [r0, #12]
 80037f4:	b13d      	cbz	r5, 8003806 <_Bfree+0x2c>
 80037f6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80037f8:	686a      	ldr	r2, [r5, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003800:	6029      	str	r1, [r5, #0]
 8003802:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003806:	bd70      	pop	{r4, r5, r6, pc}

08003808 <__multadd>:
 8003808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800380c:	690d      	ldr	r5, [r1, #16]
 800380e:	461f      	mov	r7, r3
 8003810:	4606      	mov	r6, r0
 8003812:	460c      	mov	r4, r1
 8003814:	f101 0e14 	add.w	lr, r1, #20
 8003818:	2300      	movs	r3, #0
 800381a:	f8de 0000 	ldr.w	r0, [lr]
 800381e:	b281      	uxth	r1, r0
 8003820:	fb02 7101 	mla	r1, r2, r1, r7
 8003824:	0c0f      	lsrs	r7, r1, #16
 8003826:	0c00      	lsrs	r0, r0, #16
 8003828:	fb02 7000 	mla	r0, r2, r0, r7
 800382c:	b289      	uxth	r1, r1
 800382e:	3301      	adds	r3, #1
 8003830:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003834:	429d      	cmp	r5, r3
 8003836:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800383a:	f84e 1b04 	str.w	r1, [lr], #4
 800383e:	dcec      	bgt.n	800381a <__multadd+0x12>
 8003840:	b1d7      	cbz	r7, 8003878 <__multadd+0x70>
 8003842:	68a3      	ldr	r3, [r4, #8]
 8003844:	429d      	cmp	r5, r3
 8003846:	db12      	blt.n	800386e <__multadd+0x66>
 8003848:	6861      	ldr	r1, [r4, #4]
 800384a:	4630      	mov	r0, r6
 800384c:	3101      	adds	r1, #1
 800384e:	f7ff ff90 	bl	8003772 <_Balloc>
 8003852:	6922      	ldr	r2, [r4, #16]
 8003854:	3202      	adds	r2, #2
 8003856:	f104 010c 	add.w	r1, r4, #12
 800385a:	4680      	mov	r8, r0
 800385c:	0092      	lsls	r2, r2, #2
 800385e:	300c      	adds	r0, #12
 8003860:	f7ff ff7c 	bl	800375c <memcpy>
 8003864:	4621      	mov	r1, r4
 8003866:	4630      	mov	r0, r6
 8003868:	f7ff ffb7 	bl	80037da <_Bfree>
 800386c:	4644      	mov	r4, r8
 800386e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003872:	3501      	adds	r5, #1
 8003874:	615f      	str	r7, [r3, #20]
 8003876:	6125      	str	r5, [r4, #16]
 8003878:	4620      	mov	r0, r4
 800387a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800387e <__hi0bits>:
 800387e:	0c02      	lsrs	r2, r0, #16
 8003880:	0412      	lsls	r2, r2, #16
 8003882:	4603      	mov	r3, r0
 8003884:	b9b2      	cbnz	r2, 80038b4 <__hi0bits+0x36>
 8003886:	0403      	lsls	r3, r0, #16
 8003888:	2010      	movs	r0, #16
 800388a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800388e:	bf04      	itt	eq
 8003890:	021b      	lsleq	r3, r3, #8
 8003892:	3008      	addeq	r0, #8
 8003894:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003898:	bf04      	itt	eq
 800389a:	011b      	lsleq	r3, r3, #4
 800389c:	3004      	addeq	r0, #4
 800389e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80038a2:	bf04      	itt	eq
 80038a4:	009b      	lsleq	r3, r3, #2
 80038a6:	3002      	addeq	r0, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	db06      	blt.n	80038ba <__hi0bits+0x3c>
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	d503      	bpl.n	80038b8 <__hi0bits+0x3a>
 80038b0:	3001      	adds	r0, #1
 80038b2:	4770      	bx	lr
 80038b4:	2000      	movs	r0, #0
 80038b6:	e7e8      	b.n	800388a <__hi0bits+0xc>
 80038b8:	2020      	movs	r0, #32
 80038ba:	4770      	bx	lr

080038bc <__lo0bits>:
 80038bc:	6803      	ldr	r3, [r0, #0]
 80038be:	f013 0207 	ands.w	r2, r3, #7
 80038c2:	4601      	mov	r1, r0
 80038c4:	d00b      	beq.n	80038de <__lo0bits+0x22>
 80038c6:	07da      	lsls	r2, r3, #31
 80038c8:	d423      	bmi.n	8003912 <__lo0bits+0x56>
 80038ca:	0798      	lsls	r0, r3, #30
 80038cc:	bf49      	itett	mi
 80038ce:	085b      	lsrmi	r3, r3, #1
 80038d0:	089b      	lsrpl	r3, r3, #2
 80038d2:	2001      	movmi	r0, #1
 80038d4:	600b      	strmi	r3, [r1, #0]
 80038d6:	bf5c      	itt	pl
 80038d8:	600b      	strpl	r3, [r1, #0]
 80038da:	2002      	movpl	r0, #2
 80038dc:	4770      	bx	lr
 80038de:	b298      	uxth	r0, r3
 80038e0:	b9a8      	cbnz	r0, 800390e <__lo0bits+0x52>
 80038e2:	0c1b      	lsrs	r3, r3, #16
 80038e4:	2010      	movs	r0, #16
 80038e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80038ea:	bf04      	itt	eq
 80038ec:	0a1b      	lsreq	r3, r3, #8
 80038ee:	3008      	addeq	r0, #8
 80038f0:	071a      	lsls	r2, r3, #28
 80038f2:	bf04      	itt	eq
 80038f4:	091b      	lsreq	r3, r3, #4
 80038f6:	3004      	addeq	r0, #4
 80038f8:	079a      	lsls	r2, r3, #30
 80038fa:	bf04      	itt	eq
 80038fc:	089b      	lsreq	r3, r3, #2
 80038fe:	3002      	addeq	r0, #2
 8003900:	07da      	lsls	r2, r3, #31
 8003902:	d402      	bmi.n	800390a <__lo0bits+0x4e>
 8003904:	085b      	lsrs	r3, r3, #1
 8003906:	d006      	beq.n	8003916 <__lo0bits+0x5a>
 8003908:	3001      	adds	r0, #1
 800390a:	600b      	str	r3, [r1, #0]
 800390c:	4770      	bx	lr
 800390e:	4610      	mov	r0, r2
 8003910:	e7e9      	b.n	80038e6 <__lo0bits+0x2a>
 8003912:	2000      	movs	r0, #0
 8003914:	4770      	bx	lr
 8003916:	2020      	movs	r0, #32
 8003918:	4770      	bx	lr

0800391a <__i2b>:
 800391a:	b510      	push	{r4, lr}
 800391c:	460c      	mov	r4, r1
 800391e:	2101      	movs	r1, #1
 8003920:	f7ff ff27 	bl	8003772 <_Balloc>
 8003924:	2201      	movs	r2, #1
 8003926:	6144      	str	r4, [r0, #20]
 8003928:	6102      	str	r2, [r0, #16]
 800392a:	bd10      	pop	{r4, pc}

0800392c <__multiply>:
 800392c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003930:	4614      	mov	r4, r2
 8003932:	690a      	ldr	r2, [r1, #16]
 8003934:	6923      	ldr	r3, [r4, #16]
 8003936:	429a      	cmp	r2, r3
 8003938:	bfb8      	it	lt
 800393a:	460b      	movlt	r3, r1
 800393c:	4689      	mov	r9, r1
 800393e:	bfbc      	itt	lt
 8003940:	46a1      	movlt	r9, r4
 8003942:	461c      	movlt	r4, r3
 8003944:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8003948:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800394c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003950:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003954:	eb07 060a 	add.w	r6, r7, sl
 8003958:	429e      	cmp	r6, r3
 800395a:	bfc8      	it	gt
 800395c:	3101      	addgt	r1, #1
 800395e:	f7ff ff08 	bl	8003772 <_Balloc>
 8003962:	f100 0514 	add.w	r5, r0, #20
 8003966:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800396a:	462b      	mov	r3, r5
 800396c:	2200      	movs	r2, #0
 800396e:	4543      	cmp	r3, r8
 8003970:	d316      	bcc.n	80039a0 <__multiply+0x74>
 8003972:	f104 0214 	add.w	r2, r4, #20
 8003976:	f109 0114 	add.w	r1, r9, #20
 800397a:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800397e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8003982:	9301      	str	r3, [sp, #4]
 8003984:	9c01      	ldr	r4, [sp, #4]
 8003986:	4294      	cmp	r4, r2
 8003988:	4613      	mov	r3, r2
 800398a:	d80c      	bhi.n	80039a6 <__multiply+0x7a>
 800398c:	2e00      	cmp	r6, #0
 800398e:	dd03      	ble.n	8003998 <__multiply+0x6c>
 8003990:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003994:	2b00      	cmp	r3, #0
 8003996:	d054      	beq.n	8003a42 <__multiply+0x116>
 8003998:	6106      	str	r6, [r0, #16]
 800399a:	b003      	add	sp, #12
 800399c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039a0:	f843 2b04 	str.w	r2, [r3], #4
 80039a4:	e7e3      	b.n	800396e <__multiply+0x42>
 80039a6:	f8b3 a000 	ldrh.w	sl, [r3]
 80039aa:	3204      	adds	r2, #4
 80039ac:	f1ba 0f00 	cmp.w	sl, #0
 80039b0:	d020      	beq.n	80039f4 <__multiply+0xc8>
 80039b2:	46ae      	mov	lr, r5
 80039b4:	4689      	mov	r9, r1
 80039b6:	f04f 0c00 	mov.w	ip, #0
 80039ba:	f859 4b04 	ldr.w	r4, [r9], #4
 80039be:	f8be b000 	ldrh.w	fp, [lr]
 80039c2:	b2a3      	uxth	r3, r4
 80039c4:	fb0a b303 	mla	r3, sl, r3, fp
 80039c8:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80039cc:	f8de 4000 	ldr.w	r4, [lr]
 80039d0:	4463      	add	r3, ip
 80039d2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80039d6:	fb0a c40b 	mla	r4, sl, fp, ip
 80039da:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80039de:	b29b      	uxth	r3, r3
 80039e0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80039e4:	454f      	cmp	r7, r9
 80039e6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80039ea:	f84e 3b04 	str.w	r3, [lr], #4
 80039ee:	d8e4      	bhi.n	80039ba <__multiply+0x8e>
 80039f0:	f8ce c000 	str.w	ip, [lr]
 80039f4:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 80039f8:	f1b9 0f00 	cmp.w	r9, #0
 80039fc:	d01f      	beq.n	8003a3e <__multiply+0x112>
 80039fe:	682b      	ldr	r3, [r5, #0]
 8003a00:	46ae      	mov	lr, r5
 8003a02:	468c      	mov	ip, r1
 8003a04:	f04f 0a00 	mov.w	sl, #0
 8003a08:	f8bc 4000 	ldrh.w	r4, [ip]
 8003a0c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8003a10:	fb09 b404 	mla	r4, r9, r4, fp
 8003a14:	44a2      	add	sl, r4
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8003a1c:	f84e 3b04 	str.w	r3, [lr], #4
 8003a20:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003a24:	f8be 4000 	ldrh.w	r4, [lr]
 8003a28:	0c1b      	lsrs	r3, r3, #16
 8003a2a:	fb09 4303 	mla	r3, r9, r3, r4
 8003a2e:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8003a32:	4567      	cmp	r7, ip
 8003a34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003a38:	d8e6      	bhi.n	8003a08 <__multiply+0xdc>
 8003a3a:	f8ce 3000 	str.w	r3, [lr]
 8003a3e:	3504      	adds	r5, #4
 8003a40:	e7a0      	b.n	8003984 <__multiply+0x58>
 8003a42:	3e01      	subs	r6, #1
 8003a44:	e7a2      	b.n	800398c <__multiply+0x60>
	...

08003a48 <__pow5mult>:
 8003a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a4c:	4615      	mov	r5, r2
 8003a4e:	f012 0203 	ands.w	r2, r2, #3
 8003a52:	4606      	mov	r6, r0
 8003a54:	460f      	mov	r7, r1
 8003a56:	d007      	beq.n	8003a68 <__pow5mult+0x20>
 8003a58:	3a01      	subs	r2, #1
 8003a5a:	4c21      	ldr	r4, [pc, #132]	; (8003ae0 <__pow5mult+0x98>)
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003a62:	f7ff fed1 	bl	8003808 <__multadd>
 8003a66:	4607      	mov	r7, r0
 8003a68:	10ad      	asrs	r5, r5, #2
 8003a6a:	d035      	beq.n	8003ad8 <__pow5mult+0x90>
 8003a6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003a6e:	b93c      	cbnz	r4, 8003a80 <__pow5mult+0x38>
 8003a70:	2010      	movs	r0, #16
 8003a72:	f7ff fe6b 	bl	800374c <malloc>
 8003a76:	6270      	str	r0, [r6, #36]	; 0x24
 8003a78:	6044      	str	r4, [r0, #4]
 8003a7a:	6084      	str	r4, [r0, #8]
 8003a7c:	6004      	str	r4, [r0, #0]
 8003a7e:	60c4      	str	r4, [r0, #12]
 8003a80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003a84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003a88:	b94c      	cbnz	r4, 8003a9e <__pow5mult+0x56>
 8003a8a:	f240 2171 	movw	r1, #625	; 0x271
 8003a8e:	4630      	mov	r0, r6
 8003a90:	f7ff ff43 	bl	800391a <__i2b>
 8003a94:	2300      	movs	r3, #0
 8003a96:	f8c8 0008 	str.w	r0, [r8, #8]
 8003a9a:	4604      	mov	r4, r0
 8003a9c:	6003      	str	r3, [r0, #0]
 8003a9e:	f04f 0800 	mov.w	r8, #0
 8003aa2:	07eb      	lsls	r3, r5, #31
 8003aa4:	d50a      	bpl.n	8003abc <__pow5mult+0x74>
 8003aa6:	4639      	mov	r1, r7
 8003aa8:	4622      	mov	r2, r4
 8003aaa:	4630      	mov	r0, r6
 8003aac:	f7ff ff3e 	bl	800392c <__multiply>
 8003ab0:	4639      	mov	r1, r7
 8003ab2:	4681      	mov	r9, r0
 8003ab4:	4630      	mov	r0, r6
 8003ab6:	f7ff fe90 	bl	80037da <_Bfree>
 8003aba:	464f      	mov	r7, r9
 8003abc:	106d      	asrs	r5, r5, #1
 8003abe:	d00b      	beq.n	8003ad8 <__pow5mult+0x90>
 8003ac0:	6820      	ldr	r0, [r4, #0]
 8003ac2:	b938      	cbnz	r0, 8003ad4 <__pow5mult+0x8c>
 8003ac4:	4622      	mov	r2, r4
 8003ac6:	4621      	mov	r1, r4
 8003ac8:	4630      	mov	r0, r6
 8003aca:	f7ff ff2f 	bl	800392c <__multiply>
 8003ace:	6020      	str	r0, [r4, #0]
 8003ad0:	f8c0 8000 	str.w	r8, [r0]
 8003ad4:	4604      	mov	r4, r0
 8003ad6:	e7e4      	b.n	8003aa2 <__pow5mult+0x5a>
 8003ad8:	4638      	mov	r0, r7
 8003ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ade:	bf00      	nop
 8003ae0:	08004848 	.word	0x08004848

08003ae4 <__lshift>:
 8003ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae8:	460c      	mov	r4, r1
 8003aea:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003aee:	6923      	ldr	r3, [r4, #16]
 8003af0:	6849      	ldr	r1, [r1, #4]
 8003af2:	eb0a 0903 	add.w	r9, sl, r3
 8003af6:	68a3      	ldr	r3, [r4, #8]
 8003af8:	4607      	mov	r7, r0
 8003afa:	4616      	mov	r6, r2
 8003afc:	f109 0501 	add.w	r5, r9, #1
 8003b00:	42ab      	cmp	r3, r5
 8003b02:	db31      	blt.n	8003b68 <__lshift+0x84>
 8003b04:	4638      	mov	r0, r7
 8003b06:	f7ff fe34 	bl	8003772 <_Balloc>
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	4680      	mov	r8, r0
 8003b0e:	f100 0314 	add.w	r3, r0, #20
 8003b12:	4611      	mov	r1, r2
 8003b14:	4552      	cmp	r2, sl
 8003b16:	db2a      	blt.n	8003b6e <__lshift+0x8a>
 8003b18:	6920      	ldr	r0, [r4, #16]
 8003b1a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003b1e:	f104 0114 	add.w	r1, r4, #20
 8003b22:	f016 021f 	ands.w	r2, r6, #31
 8003b26:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8003b2a:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8003b2e:	d022      	beq.n	8003b76 <__lshift+0x92>
 8003b30:	f1c2 0c20 	rsb	ip, r2, #32
 8003b34:	2000      	movs	r0, #0
 8003b36:	680e      	ldr	r6, [r1, #0]
 8003b38:	4096      	lsls	r6, r2
 8003b3a:	4330      	orrs	r0, r6
 8003b3c:	f843 0b04 	str.w	r0, [r3], #4
 8003b40:	f851 0b04 	ldr.w	r0, [r1], #4
 8003b44:	458e      	cmp	lr, r1
 8003b46:	fa20 f00c 	lsr.w	r0, r0, ip
 8003b4a:	d8f4      	bhi.n	8003b36 <__lshift+0x52>
 8003b4c:	6018      	str	r0, [r3, #0]
 8003b4e:	b108      	cbz	r0, 8003b54 <__lshift+0x70>
 8003b50:	f109 0502 	add.w	r5, r9, #2
 8003b54:	3d01      	subs	r5, #1
 8003b56:	4638      	mov	r0, r7
 8003b58:	f8c8 5010 	str.w	r5, [r8, #16]
 8003b5c:	4621      	mov	r1, r4
 8003b5e:	f7ff fe3c 	bl	80037da <_Bfree>
 8003b62:	4640      	mov	r0, r8
 8003b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b68:	3101      	adds	r1, #1
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	e7c8      	b.n	8003b00 <__lshift+0x1c>
 8003b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003b72:	3201      	adds	r2, #1
 8003b74:	e7ce      	b.n	8003b14 <__lshift+0x30>
 8003b76:	3b04      	subs	r3, #4
 8003b78:	f851 2b04 	ldr.w	r2, [r1], #4
 8003b7c:	f843 2f04 	str.w	r2, [r3, #4]!
 8003b80:	458e      	cmp	lr, r1
 8003b82:	d8f9      	bhi.n	8003b78 <__lshift+0x94>
 8003b84:	e7e6      	b.n	8003b54 <__lshift+0x70>

08003b86 <__mcmp>:
 8003b86:	6903      	ldr	r3, [r0, #16]
 8003b88:	690a      	ldr	r2, [r1, #16]
 8003b8a:	1a9b      	subs	r3, r3, r2
 8003b8c:	b530      	push	{r4, r5, lr}
 8003b8e:	d10c      	bne.n	8003baa <__mcmp+0x24>
 8003b90:	0092      	lsls	r2, r2, #2
 8003b92:	3014      	adds	r0, #20
 8003b94:	3114      	adds	r1, #20
 8003b96:	1884      	adds	r4, r0, r2
 8003b98:	4411      	add	r1, r2
 8003b9a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003b9e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003ba2:	4295      	cmp	r5, r2
 8003ba4:	d003      	beq.n	8003bae <__mcmp+0x28>
 8003ba6:	d305      	bcc.n	8003bb4 <__mcmp+0x2e>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	4618      	mov	r0, r3
 8003bac:	bd30      	pop	{r4, r5, pc}
 8003bae:	42a0      	cmp	r0, r4
 8003bb0:	d3f3      	bcc.n	8003b9a <__mcmp+0x14>
 8003bb2:	e7fa      	b.n	8003baa <__mcmp+0x24>
 8003bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb8:	e7f7      	b.n	8003baa <__mcmp+0x24>

08003bba <__mdiff>:
 8003bba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bbe:	460d      	mov	r5, r1
 8003bc0:	4607      	mov	r7, r0
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	4628      	mov	r0, r5
 8003bc6:	4614      	mov	r4, r2
 8003bc8:	f7ff ffdd 	bl	8003b86 <__mcmp>
 8003bcc:	1e06      	subs	r6, r0, #0
 8003bce:	d108      	bne.n	8003be2 <__mdiff+0x28>
 8003bd0:	4631      	mov	r1, r6
 8003bd2:	4638      	mov	r0, r7
 8003bd4:	f7ff fdcd 	bl	8003772 <_Balloc>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	6103      	str	r3, [r0, #16]
 8003bdc:	6146      	str	r6, [r0, #20]
 8003bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003be2:	bfa4      	itt	ge
 8003be4:	4623      	movge	r3, r4
 8003be6:	462c      	movge	r4, r5
 8003be8:	4638      	mov	r0, r7
 8003bea:	6861      	ldr	r1, [r4, #4]
 8003bec:	bfa6      	itte	ge
 8003bee:	461d      	movge	r5, r3
 8003bf0:	2600      	movge	r6, #0
 8003bf2:	2601      	movlt	r6, #1
 8003bf4:	f7ff fdbd 	bl	8003772 <_Balloc>
 8003bf8:	692b      	ldr	r3, [r5, #16]
 8003bfa:	60c6      	str	r6, [r0, #12]
 8003bfc:	6926      	ldr	r6, [r4, #16]
 8003bfe:	f105 0914 	add.w	r9, r5, #20
 8003c02:	f104 0214 	add.w	r2, r4, #20
 8003c06:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8003c0a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8003c0e:	f100 0514 	add.w	r5, r0, #20
 8003c12:	f04f 0c00 	mov.w	ip, #0
 8003c16:	f852 ab04 	ldr.w	sl, [r2], #4
 8003c1a:	f859 4b04 	ldr.w	r4, [r9], #4
 8003c1e:	fa1c f18a 	uxtah	r1, ip, sl
 8003c22:	b2a3      	uxth	r3, r4
 8003c24:	1ac9      	subs	r1, r1, r3
 8003c26:	0c23      	lsrs	r3, r4, #16
 8003c28:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8003c2c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8003c30:	b289      	uxth	r1, r1
 8003c32:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8003c36:	45c8      	cmp	r8, r9
 8003c38:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8003c3c:	4696      	mov	lr, r2
 8003c3e:	f845 3b04 	str.w	r3, [r5], #4
 8003c42:	d8e8      	bhi.n	8003c16 <__mdiff+0x5c>
 8003c44:	45be      	cmp	lr, r7
 8003c46:	d305      	bcc.n	8003c54 <__mdiff+0x9a>
 8003c48:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8003c4c:	b18b      	cbz	r3, 8003c72 <__mdiff+0xb8>
 8003c4e:	6106      	str	r6, [r0, #16]
 8003c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c54:	f85e 1b04 	ldr.w	r1, [lr], #4
 8003c58:	fa1c f381 	uxtah	r3, ip, r1
 8003c5c:	141a      	asrs	r2, r3, #16
 8003c5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003c6c:	f845 3b04 	str.w	r3, [r5], #4
 8003c70:	e7e8      	b.n	8003c44 <__mdiff+0x8a>
 8003c72:	3e01      	subs	r6, #1
 8003c74:	e7e8      	b.n	8003c48 <__mdiff+0x8e>

08003c76 <__d2b>:
 8003c76:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003c7a:	460e      	mov	r6, r1
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	ec59 8b10 	vmov	r8, r9, d0
 8003c82:	4615      	mov	r5, r2
 8003c84:	f7ff fd75 	bl	8003772 <_Balloc>
 8003c88:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003c8c:	4607      	mov	r7, r0
 8003c8e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003c92:	bb34      	cbnz	r4, 8003ce2 <__d2b+0x6c>
 8003c94:	9301      	str	r3, [sp, #4]
 8003c96:	f1b8 0f00 	cmp.w	r8, #0
 8003c9a:	d027      	beq.n	8003cec <__d2b+0x76>
 8003c9c:	a802      	add	r0, sp, #8
 8003c9e:	f840 8d08 	str.w	r8, [r0, #-8]!
 8003ca2:	f7ff fe0b 	bl	80038bc <__lo0bits>
 8003ca6:	9900      	ldr	r1, [sp, #0]
 8003ca8:	b1f0      	cbz	r0, 8003ce8 <__d2b+0x72>
 8003caa:	9a01      	ldr	r2, [sp, #4]
 8003cac:	f1c0 0320 	rsb	r3, r0, #32
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	430b      	orrs	r3, r1
 8003cb6:	40c2      	lsrs	r2, r0
 8003cb8:	617b      	str	r3, [r7, #20]
 8003cba:	9201      	str	r2, [sp, #4]
 8003cbc:	9b01      	ldr	r3, [sp, #4]
 8003cbe:	61bb      	str	r3, [r7, #24]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	bf14      	ite	ne
 8003cc4:	2102      	movne	r1, #2
 8003cc6:	2101      	moveq	r1, #1
 8003cc8:	6139      	str	r1, [r7, #16]
 8003cca:	b1c4      	cbz	r4, 8003cfe <__d2b+0x88>
 8003ccc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8003cd0:	4404      	add	r4, r0
 8003cd2:	6034      	str	r4, [r6, #0]
 8003cd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003cd8:	6028      	str	r0, [r5, #0]
 8003cda:	4638      	mov	r0, r7
 8003cdc:	b003      	add	sp, #12
 8003cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ce2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ce6:	e7d5      	b.n	8003c94 <__d2b+0x1e>
 8003ce8:	6179      	str	r1, [r7, #20]
 8003cea:	e7e7      	b.n	8003cbc <__d2b+0x46>
 8003cec:	a801      	add	r0, sp, #4
 8003cee:	f7ff fde5 	bl	80038bc <__lo0bits>
 8003cf2:	9b01      	ldr	r3, [sp, #4]
 8003cf4:	617b      	str	r3, [r7, #20]
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	6139      	str	r1, [r7, #16]
 8003cfa:	3020      	adds	r0, #32
 8003cfc:	e7e5      	b.n	8003cca <__d2b+0x54>
 8003cfe:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8003d02:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003d06:	6030      	str	r0, [r6, #0]
 8003d08:	6918      	ldr	r0, [r3, #16]
 8003d0a:	f7ff fdb8 	bl	800387e <__hi0bits>
 8003d0e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8003d12:	e7e1      	b.n	8003cd8 <__d2b+0x62>

08003d14 <_calloc_r>:
 8003d14:	b538      	push	{r3, r4, r5, lr}
 8003d16:	fb02 f401 	mul.w	r4, r2, r1
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	f000 f856 	bl	8003dcc <_malloc_r>
 8003d20:	4605      	mov	r5, r0
 8003d22:	b118      	cbz	r0, 8003d2c <_calloc_r+0x18>
 8003d24:	4622      	mov	r2, r4
 8003d26:	2100      	movs	r1, #0
 8003d28:	f7fe f950 	bl	8001fcc <memset>
 8003d2c:	4628      	mov	r0, r5
 8003d2e:	bd38      	pop	{r3, r4, r5, pc}

08003d30 <_free_r>:
 8003d30:	b538      	push	{r3, r4, r5, lr}
 8003d32:	4605      	mov	r5, r0
 8003d34:	2900      	cmp	r1, #0
 8003d36:	d045      	beq.n	8003dc4 <_free_r+0x94>
 8003d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d3c:	1f0c      	subs	r4, r1, #4
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	bfb8      	it	lt
 8003d42:	18e4      	addlt	r4, r4, r3
 8003d44:	f000 fc50 	bl	80045e8 <__malloc_lock>
 8003d48:	4a1f      	ldr	r2, [pc, #124]	; (8003dc8 <_free_r+0x98>)
 8003d4a:	6813      	ldr	r3, [r2, #0]
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	b933      	cbnz	r3, 8003d5e <_free_r+0x2e>
 8003d50:	6063      	str	r3, [r4, #4]
 8003d52:	6014      	str	r4, [r2, #0]
 8003d54:	4628      	mov	r0, r5
 8003d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d5a:	f000 bc46 	b.w	80045ea <__malloc_unlock>
 8003d5e:	42a3      	cmp	r3, r4
 8003d60:	d90c      	bls.n	8003d7c <_free_r+0x4c>
 8003d62:	6821      	ldr	r1, [r4, #0]
 8003d64:	1862      	adds	r2, r4, r1
 8003d66:	4293      	cmp	r3, r2
 8003d68:	bf04      	itt	eq
 8003d6a:	681a      	ldreq	r2, [r3, #0]
 8003d6c:	685b      	ldreq	r3, [r3, #4]
 8003d6e:	6063      	str	r3, [r4, #4]
 8003d70:	bf04      	itt	eq
 8003d72:	1852      	addeq	r2, r2, r1
 8003d74:	6022      	streq	r2, [r4, #0]
 8003d76:	6004      	str	r4, [r0, #0]
 8003d78:	e7ec      	b.n	8003d54 <_free_r+0x24>
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	b10a      	cbz	r2, 8003d84 <_free_r+0x54>
 8003d80:	42a2      	cmp	r2, r4
 8003d82:	d9fa      	bls.n	8003d7a <_free_r+0x4a>
 8003d84:	6819      	ldr	r1, [r3, #0]
 8003d86:	1858      	adds	r0, r3, r1
 8003d88:	42a0      	cmp	r0, r4
 8003d8a:	d10b      	bne.n	8003da4 <_free_r+0x74>
 8003d8c:	6820      	ldr	r0, [r4, #0]
 8003d8e:	4401      	add	r1, r0
 8003d90:	1858      	adds	r0, r3, r1
 8003d92:	4282      	cmp	r2, r0
 8003d94:	6019      	str	r1, [r3, #0]
 8003d96:	d1dd      	bne.n	8003d54 <_free_r+0x24>
 8003d98:	6810      	ldr	r0, [r2, #0]
 8003d9a:	6852      	ldr	r2, [r2, #4]
 8003d9c:	605a      	str	r2, [r3, #4]
 8003d9e:	4401      	add	r1, r0
 8003da0:	6019      	str	r1, [r3, #0]
 8003da2:	e7d7      	b.n	8003d54 <_free_r+0x24>
 8003da4:	d902      	bls.n	8003dac <_free_r+0x7c>
 8003da6:	230c      	movs	r3, #12
 8003da8:	602b      	str	r3, [r5, #0]
 8003daa:	e7d3      	b.n	8003d54 <_free_r+0x24>
 8003dac:	6820      	ldr	r0, [r4, #0]
 8003dae:	1821      	adds	r1, r4, r0
 8003db0:	428a      	cmp	r2, r1
 8003db2:	bf04      	itt	eq
 8003db4:	6811      	ldreq	r1, [r2, #0]
 8003db6:	6852      	ldreq	r2, [r2, #4]
 8003db8:	6062      	str	r2, [r4, #4]
 8003dba:	bf04      	itt	eq
 8003dbc:	1809      	addeq	r1, r1, r0
 8003dbe:	6021      	streq	r1, [r4, #0]
 8003dc0:	605c      	str	r4, [r3, #4]
 8003dc2:	e7c7      	b.n	8003d54 <_free_r+0x24>
 8003dc4:	bd38      	pop	{r3, r4, r5, pc}
 8003dc6:	bf00      	nop
 8003dc8:	200001fc 	.word	0x200001fc

08003dcc <_malloc_r>:
 8003dcc:	b570      	push	{r4, r5, r6, lr}
 8003dce:	1ccd      	adds	r5, r1, #3
 8003dd0:	f025 0503 	bic.w	r5, r5, #3
 8003dd4:	3508      	adds	r5, #8
 8003dd6:	2d0c      	cmp	r5, #12
 8003dd8:	bf38      	it	cc
 8003dda:	250c      	movcc	r5, #12
 8003ddc:	2d00      	cmp	r5, #0
 8003dde:	4606      	mov	r6, r0
 8003de0:	db01      	blt.n	8003de6 <_malloc_r+0x1a>
 8003de2:	42a9      	cmp	r1, r5
 8003de4:	d903      	bls.n	8003dee <_malloc_r+0x22>
 8003de6:	230c      	movs	r3, #12
 8003de8:	6033      	str	r3, [r6, #0]
 8003dea:	2000      	movs	r0, #0
 8003dec:	bd70      	pop	{r4, r5, r6, pc}
 8003dee:	f000 fbfb 	bl	80045e8 <__malloc_lock>
 8003df2:	4a23      	ldr	r2, [pc, #140]	; (8003e80 <_malloc_r+0xb4>)
 8003df4:	6814      	ldr	r4, [r2, #0]
 8003df6:	4621      	mov	r1, r4
 8003df8:	b991      	cbnz	r1, 8003e20 <_malloc_r+0x54>
 8003dfa:	4c22      	ldr	r4, [pc, #136]	; (8003e84 <_malloc_r+0xb8>)
 8003dfc:	6823      	ldr	r3, [r4, #0]
 8003dfe:	b91b      	cbnz	r3, 8003e08 <_malloc_r+0x3c>
 8003e00:	4630      	mov	r0, r6
 8003e02:	f000 f981 	bl	8004108 <_sbrk_r>
 8003e06:	6020      	str	r0, [r4, #0]
 8003e08:	4629      	mov	r1, r5
 8003e0a:	4630      	mov	r0, r6
 8003e0c:	f000 f97c 	bl	8004108 <_sbrk_r>
 8003e10:	1c43      	adds	r3, r0, #1
 8003e12:	d126      	bne.n	8003e62 <_malloc_r+0x96>
 8003e14:	230c      	movs	r3, #12
 8003e16:	6033      	str	r3, [r6, #0]
 8003e18:	4630      	mov	r0, r6
 8003e1a:	f000 fbe6 	bl	80045ea <__malloc_unlock>
 8003e1e:	e7e4      	b.n	8003dea <_malloc_r+0x1e>
 8003e20:	680b      	ldr	r3, [r1, #0]
 8003e22:	1b5b      	subs	r3, r3, r5
 8003e24:	d41a      	bmi.n	8003e5c <_malloc_r+0x90>
 8003e26:	2b0b      	cmp	r3, #11
 8003e28:	d90f      	bls.n	8003e4a <_malloc_r+0x7e>
 8003e2a:	600b      	str	r3, [r1, #0]
 8003e2c:	50cd      	str	r5, [r1, r3]
 8003e2e:	18cc      	adds	r4, r1, r3
 8003e30:	4630      	mov	r0, r6
 8003e32:	f000 fbda 	bl	80045ea <__malloc_unlock>
 8003e36:	f104 000b 	add.w	r0, r4, #11
 8003e3a:	1d23      	adds	r3, r4, #4
 8003e3c:	f020 0007 	bic.w	r0, r0, #7
 8003e40:	1ac3      	subs	r3, r0, r3
 8003e42:	d01b      	beq.n	8003e7c <_malloc_r+0xb0>
 8003e44:	425a      	negs	r2, r3
 8003e46:	50e2      	str	r2, [r4, r3]
 8003e48:	bd70      	pop	{r4, r5, r6, pc}
 8003e4a:	428c      	cmp	r4, r1
 8003e4c:	bf0d      	iteet	eq
 8003e4e:	6863      	ldreq	r3, [r4, #4]
 8003e50:	684b      	ldrne	r3, [r1, #4]
 8003e52:	6063      	strne	r3, [r4, #4]
 8003e54:	6013      	streq	r3, [r2, #0]
 8003e56:	bf18      	it	ne
 8003e58:	460c      	movne	r4, r1
 8003e5a:	e7e9      	b.n	8003e30 <_malloc_r+0x64>
 8003e5c:	460c      	mov	r4, r1
 8003e5e:	6849      	ldr	r1, [r1, #4]
 8003e60:	e7ca      	b.n	8003df8 <_malloc_r+0x2c>
 8003e62:	1cc4      	adds	r4, r0, #3
 8003e64:	f024 0403 	bic.w	r4, r4, #3
 8003e68:	42a0      	cmp	r0, r4
 8003e6a:	d005      	beq.n	8003e78 <_malloc_r+0xac>
 8003e6c:	1a21      	subs	r1, r4, r0
 8003e6e:	4630      	mov	r0, r6
 8003e70:	f000 f94a 	bl	8004108 <_sbrk_r>
 8003e74:	3001      	adds	r0, #1
 8003e76:	d0cd      	beq.n	8003e14 <_malloc_r+0x48>
 8003e78:	6025      	str	r5, [r4, #0]
 8003e7a:	e7d9      	b.n	8003e30 <_malloc_r+0x64>
 8003e7c:	bd70      	pop	{r4, r5, r6, pc}
 8003e7e:	bf00      	nop
 8003e80:	200001fc 	.word	0x200001fc
 8003e84:	20000200 	.word	0x20000200

08003e88 <__sfputc_r>:
 8003e88:	6893      	ldr	r3, [r2, #8]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	b410      	push	{r4}
 8003e90:	6093      	str	r3, [r2, #8]
 8003e92:	da09      	bge.n	8003ea8 <__sfputc_r+0x20>
 8003e94:	6994      	ldr	r4, [r2, #24]
 8003e96:	42a3      	cmp	r3, r4
 8003e98:	db02      	blt.n	8003ea0 <__sfputc_r+0x18>
 8003e9a:	b2cb      	uxtb	r3, r1
 8003e9c:	2b0a      	cmp	r3, #10
 8003e9e:	d103      	bne.n	8003ea8 <__sfputc_r+0x20>
 8003ea0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ea4:	f000 b984 	b.w	80041b0 <__swbuf_r>
 8003ea8:	6813      	ldr	r3, [r2, #0]
 8003eaa:	1c58      	adds	r0, r3, #1
 8003eac:	6010      	str	r0, [r2, #0]
 8003eae:	7019      	strb	r1, [r3, #0]
 8003eb0:	b2c8      	uxtb	r0, r1
 8003eb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <__sfputs_r>:
 8003eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eba:	4606      	mov	r6, r0
 8003ebc:	460f      	mov	r7, r1
 8003ebe:	4614      	mov	r4, r2
 8003ec0:	18d5      	adds	r5, r2, r3
 8003ec2:	42ac      	cmp	r4, r5
 8003ec4:	d101      	bne.n	8003eca <__sfputs_r+0x12>
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	e007      	b.n	8003eda <__sfputs_r+0x22>
 8003eca:	463a      	mov	r2, r7
 8003ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ed0:	4630      	mov	r0, r6
 8003ed2:	f7ff ffd9 	bl	8003e88 <__sfputc_r>
 8003ed6:	1c43      	adds	r3, r0, #1
 8003ed8:	d1f3      	bne.n	8003ec2 <__sfputs_r+0xa>
 8003eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003edc <_vfiprintf_r>:
 8003edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ee0:	b09d      	sub	sp, #116	; 0x74
 8003ee2:	460c      	mov	r4, r1
 8003ee4:	4617      	mov	r7, r2
 8003ee6:	9303      	str	r3, [sp, #12]
 8003ee8:	4606      	mov	r6, r0
 8003eea:	b118      	cbz	r0, 8003ef4 <_vfiprintf_r+0x18>
 8003eec:	6983      	ldr	r3, [r0, #24]
 8003eee:	b90b      	cbnz	r3, 8003ef4 <_vfiprintf_r+0x18>
 8003ef0:	f7ff fb94 	bl	800361c <__sinit>
 8003ef4:	4b7c      	ldr	r3, [pc, #496]	; (80040e8 <_vfiprintf_r+0x20c>)
 8003ef6:	429c      	cmp	r4, r3
 8003ef8:	d157      	bne.n	8003faa <_vfiprintf_r+0xce>
 8003efa:	6874      	ldr	r4, [r6, #4]
 8003efc:	89a3      	ldrh	r3, [r4, #12]
 8003efe:	0718      	lsls	r0, r3, #28
 8003f00:	d55d      	bpl.n	8003fbe <_vfiprintf_r+0xe2>
 8003f02:	6923      	ldr	r3, [r4, #16]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d05a      	beq.n	8003fbe <_vfiprintf_r+0xe2>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f0c:	2320      	movs	r3, #32
 8003f0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f12:	2330      	movs	r3, #48	; 0x30
 8003f14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f18:	f04f 0b01 	mov.w	fp, #1
 8003f1c:	46b8      	mov	r8, r7
 8003f1e:	4645      	mov	r5, r8
 8003f20:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d155      	bne.n	8003fd4 <_vfiprintf_r+0xf8>
 8003f28:	ebb8 0a07 	subs.w	sl, r8, r7
 8003f2c:	d00b      	beq.n	8003f46 <_vfiprintf_r+0x6a>
 8003f2e:	4653      	mov	r3, sl
 8003f30:	463a      	mov	r2, r7
 8003f32:	4621      	mov	r1, r4
 8003f34:	4630      	mov	r0, r6
 8003f36:	f7ff ffbf 	bl	8003eb8 <__sfputs_r>
 8003f3a:	3001      	adds	r0, #1
 8003f3c:	f000 80c4 	beq.w	80040c8 <_vfiprintf_r+0x1ec>
 8003f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f42:	4453      	add	r3, sl
 8003f44:	9309      	str	r3, [sp, #36]	; 0x24
 8003f46:	f898 3000 	ldrb.w	r3, [r8]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 80bc 	beq.w	80040c8 <_vfiprintf_r+0x1ec>
 8003f50:	2300      	movs	r3, #0
 8003f52:	f04f 32ff 	mov.w	r2, #4294967295
 8003f56:	9304      	str	r3, [sp, #16]
 8003f58:	9307      	str	r3, [sp, #28]
 8003f5a:	9205      	str	r2, [sp, #20]
 8003f5c:	9306      	str	r3, [sp, #24]
 8003f5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f62:	931a      	str	r3, [sp, #104]	; 0x68
 8003f64:	2205      	movs	r2, #5
 8003f66:	7829      	ldrb	r1, [r5, #0]
 8003f68:	4860      	ldr	r0, [pc, #384]	; (80040ec <_vfiprintf_r+0x210>)
 8003f6a:	f7fc f949 	bl	8000200 <memchr>
 8003f6e:	f105 0801 	add.w	r8, r5, #1
 8003f72:	9b04      	ldr	r3, [sp, #16]
 8003f74:	2800      	cmp	r0, #0
 8003f76:	d131      	bne.n	8003fdc <_vfiprintf_r+0x100>
 8003f78:	06d9      	lsls	r1, r3, #27
 8003f7a:	bf44      	itt	mi
 8003f7c:	2220      	movmi	r2, #32
 8003f7e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f82:	071a      	lsls	r2, r3, #28
 8003f84:	bf44      	itt	mi
 8003f86:	222b      	movmi	r2, #43	; 0x2b
 8003f88:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f8c:	782a      	ldrb	r2, [r5, #0]
 8003f8e:	2a2a      	cmp	r2, #42	; 0x2a
 8003f90:	d02c      	beq.n	8003fec <_vfiprintf_r+0x110>
 8003f92:	9a07      	ldr	r2, [sp, #28]
 8003f94:	2100      	movs	r1, #0
 8003f96:	200a      	movs	r0, #10
 8003f98:	46a8      	mov	r8, r5
 8003f9a:	3501      	adds	r5, #1
 8003f9c:	f898 3000 	ldrb.w	r3, [r8]
 8003fa0:	3b30      	subs	r3, #48	; 0x30
 8003fa2:	2b09      	cmp	r3, #9
 8003fa4:	d96d      	bls.n	8004082 <_vfiprintf_r+0x1a6>
 8003fa6:	b371      	cbz	r1, 8004006 <_vfiprintf_r+0x12a>
 8003fa8:	e026      	b.n	8003ff8 <_vfiprintf_r+0x11c>
 8003faa:	4b51      	ldr	r3, [pc, #324]	; (80040f0 <_vfiprintf_r+0x214>)
 8003fac:	429c      	cmp	r4, r3
 8003fae:	d101      	bne.n	8003fb4 <_vfiprintf_r+0xd8>
 8003fb0:	68b4      	ldr	r4, [r6, #8]
 8003fb2:	e7a3      	b.n	8003efc <_vfiprintf_r+0x20>
 8003fb4:	4b4f      	ldr	r3, [pc, #316]	; (80040f4 <_vfiprintf_r+0x218>)
 8003fb6:	429c      	cmp	r4, r3
 8003fb8:	bf08      	it	eq
 8003fba:	68f4      	ldreq	r4, [r6, #12]
 8003fbc:	e79e      	b.n	8003efc <_vfiprintf_r+0x20>
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	4630      	mov	r0, r6
 8003fc2:	f000 f959 	bl	8004278 <__swsetup_r>
 8003fc6:	2800      	cmp	r0, #0
 8003fc8:	d09e      	beq.n	8003f08 <_vfiprintf_r+0x2c>
 8003fca:	f04f 30ff 	mov.w	r0, #4294967295
 8003fce:	b01d      	add	sp, #116	; 0x74
 8003fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fd4:	2b25      	cmp	r3, #37	; 0x25
 8003fd6:	d0a7      	beq.n	8003f28 <_vfiprintf_r+0x4c>
 8003fd8:	46a8      	mov	r8, r5
 8003fda:	e7a0      	b.n	8003f1e <_vfiprintf_r+0x42>
 8003fdc:	4a43      	ldr	r2, [pc, #268]	; (80040ec <_vfiprintf_r+0x210>)
 8003fde:	1a80      	subs	r0, r0, r2
 8003fe0:	fa0b f000 	lsl.w	r0, fp, r0
 8003fe4:	4318      	orrs	r0, r3
 8003fe6:	9004      	str	r0, [sp, #16]
 8003fe8:	4645      	mov	r5, r8
 8003fea:	e7bb      	b.n	8003f64 <_vfiprintf_r+0x88>
 8003fec:	9a03      	ldr	r2, [sp, #12]
 8003fee:	1d11      	adds	r1, r2, #4
 8003ff0:	6812      	ldr	r2, [r2, #0]
 8003ff2:	9103      	str	r1, [sp, #12]
 8003ff4:	2a00      	cmp	r2, #0
 8003ff6:	db01      	blt.n	8003ffc <_vfiprintf_r+0x120>
 8003ff8:	9207      	str	r2, [sp, #28]
 8003ffa:	e004      	b.n	8004006 <_vfiprintf_r+0x12a>
 8003ffc:	4252      	negs	r2, r2
 8003ffe:	f043 0302 	orr.w	r3, r3, #2
 8004002:	9207      	str	r2, [sp, #28]
 8004004:	9304      	str	r3, [sp, #16]
 8004006:	f898 3000 	ldrb.w	r3, [r8]
 800400a:	2b2e      	cmp	r3, #46	; 0x2e
 800400c:	d110      	bne.n	8004030 <_vfiprintf_r+0x154>
 800400e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004012:	2b2a      	cmp	r3, #42	; 0x2a
 8004014:	f108 0101 	add.w	r1, r8, #1
 8004018:	d137      	bne.n	800408a <_vfiprintf_r+0x1ae>
 800401a:	9b03      	ldr	r3, [sp, #12]
 800401c:	1d1a      	adds	r2, r3, #4
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	9203      	str	r2, [sp, #12]
 8004022:	2b00      	cmp	r3, #0
 8004024:	bfb8      	it	lt
 8004026:	f04f 33ff 	movlt.w	r3, #4294967295
 800402a:	f108 0802 	add.w	r8, r8, #2
 800402e:	9305      	str	r3, [sp, #20]
 8004030:	4d31      	ldr	r5, [pc, #196]	; (80040f8 <_vfiprintf_r+0x21c>)
 8004032:	f898 1000 	ldrb.w	r1, [r8]
 8004036:	2203      	movs	r2, #3
 8004038:	4628      	mov	r0, r5
 800403a:	f7fc f8e1 	bl	8000200 <memchr>
 800403e:	b140      	cbz	r0, 8004052 <_vfiprintf_r+0x176>
 8004040:	2340      	movs	r3, #64	; 0x40
 8004042:	1b40      	subs	r0, r0, r5
 8004044:	fa03 f000 	lsl.w	r0, r3, r0
 8004048:	9b04      	ldr	r3, [sp, #16]
 800404a:	4303      	orrs	r3, r0
 800404c:	9304      	str	r3, [sp, #16]
 800404e:	f108 0801 	add.w	r8, r8, #1
 8004052:	f898 1000 	ldrb.w	r1, [r8]
 8004056:	4829      	ldr	r0, [pc, #164]	; (80040fc <_vfiprintf_r+0x220>)
 8004058:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800405c:	2206      	movs	r2, #6
 800405e:	f108 0701 	add.w	r7, r8, #1
 8004062:	f7fc f8cd 	bl	8000200 <memchr>
 8004066:	2800      	cmp	r0, #0
 8004068:	d034      	beq.n	80040d4 <_vfiprintf_r+0x1f8>
 800406a:	4b25      	ldr	r3, [pc, #148]	; (8004100 <_vfiprintf_r+0x224>)
 800406c:	bb03      	cbnz	r3, 80040b0 <_vfiprintf_r+0x1d4>
 800406e:	9b03      	ldr	r3, [sp, #12]
 8004070:	3307      	adds	r3, #7
 8004072:	f023 0307 	bic.w	r3, r3, #7
 8004076:	3308      	adds	r3, #8
 8004078:	9303      	str	r3, [sp, #12]
 800407a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800407c:	444b      	add	r3, r9
 800407e:	9309      	str	r3, [sp, #36]	; 0x24
 8004080:	e74c      	b.n	8003f1c <_vfiprintf_r+0x40>
 8004082:	fb00 3202 	mla	r2, r0, r2, r3
 8004086:	2101      	movs	r1, #1
 8004088:	e786      	b.n	8003f98 <_vfiprintf_r+0xbc>
 800408a:	2300      	movs	r3, #0
 800408c:	9305      	str	r3, [sp, #20]
 800408e:	4618      	mov	r0, r3
 8004090:	250a      	movs	r5, #10
 8004092:	4688      	mov	r8, r1
 8004094:	3101      	adds	r1, #1
 8004096:	f898 2000 	ldrb.w	r2, [r8]
 800409a:	3a30      	subs	r2, #48	; 0x30
 800409c:	2a09      	cmp	r2, #9
 800409e:	d903      	bls.n	80040a8 <_vfiprintf_r+0x1cc>
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0c5      	beq.n	8004030 <_vfiprintf_r+0x154>
 80040a4:	9005      	str	r0, [sp, #20]
 80040a6:	e7c3      	b.n	8004030 <_vfiprintf_r+0x154>
 80040a8:	fb05 2000 	mla	r0, r5, r0, r2
 80040ac:	2301      	movs	r3, #1
 80040ae:	e7f0      	b.n	8004092 <_vfiprintf_r+0x1b6>
 80040b0:	ab03      	add	r3, sp, #12
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	4622      	mov	r2, r4
 80040b6:	4b13      	ldr	r3, [pc, #76]	; (8004104 <_vfiprintf_r+0x228>)
 80040b8:	a904      	add	r1, sp, #16
 80040ba:	4630      	mov	r0, r6
 80040bc:	f7fe f824 	bl	8002108 <_printf_float>
 80040c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80040c4:	4681      	mov	r9, r0
 80040c6:	d1d8      	bne.n	800407a <_vfiprintf_r+0x19e>
 80040c8:	89a3      	ldrh	r3, [r4, #12]
 80040ca:	065b      	lsls	r3, r3, #25
 80040cc:	f53f af7d 	bmi.w	8003fca <_vfiprintf_r+0xee>
 80040d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040d2:	e77c      	b.n	8003fce <_vfiprintf_r+0xf2>
 80040d4:	ab03      	add	r3, sp, #12
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	4622      	mov	r2, r4
 80040da:	4b0a      	ldr	r3, [pc, #40]	; (8004104 <_vfiprintf_r+0x228>)
 80040dc:	a904      	add	r1, sp, #16
 80040de:	4630      	mov	r0, r6
 80040e0:	f7fe fac8 	bl	8002674 <_printf_i>
 80040e4:	e7ec      	b.n	80040c0 <_vfiprintf_r+0x1e4>
 80040e6:	bf00      	nop
 80040e8:	08004714 	.word	0x08004714
 80040ec:	08004854 	.word	0x08004854
 80040f0:	08004734 	.word	0x08004734
 80040f4:	080046f4 	.word	0x080046f4
 80040f8:	0800485a 	.word	0x0800485a
 80040fc:	0800485e 	.word	0x0800485e
 8004100:	08002109 	.word	0x08002109
 8004104:	08003eb9 	.word	0x08003eb9

08004108 <_sbrk_r>:
 8004108:	b538      	push	{r3, r4, r5, lr}
 800410a:	4c06      	ldr	r4, [pc, #24]	; (8004124 <_sbrk_r+0x1c>)
 800410c:	2300      	movs	r3, #0
 800410e:	4605      	mov	r5, r0
 8004110:	4608      	mov	r0, r1
 8004112:	6023      	str	r3, [r4, #0]
 8004114:	f7fd fe60 	bl	8001dd8 <_sbrk>
 8004118:	1c43      	adds	r3, r0, #1
 800411a:	d102      	bne.n	8004122 <_sbrk_r+0x1a>
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	b103      	cbz	r3, 8004122 <_sbrk_r+0x1a>
 8004120:	602b      	str	r3, [r5, #0]
 8004122:	bd38      	pop	{r3, r4, r5, pc}
 8004124:	2000020c 	.word	0x2000020c

08004128 <__sread>:
 8004128:	b510      	push	{r4, lr}
 800412a:	460c      	mov	r4, r1
 800412c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004130:	f000 fa5c 	bl	80045ec <_read_r>
 8004134:	2800      	cmp	r0, #0
 8004136:	bfab      	itete	ge
 8004138:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800413a:	89a3      	ldrhlt	r3, [r4, #12]
 800413c:	181b      	addge	r3, r3, r0
 800413e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004142:	bfac      	ite	ge
 8004144:	6563      	strge	r3, [r4, #84]	; 0x54
 8004146:	81a3      	strhlt	r3, [r4, #12]
 8004148:	bd10      	pop	{r4, pc}

0800414a <__swrite>:
 800414a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800414e:	461f      	mov	r7, r3
 8004150:	898b      	ldrh	r3, [r1, #12]
 8004152:	05db      	lsls	r3, r3, #23
 8004154:	4605      	mov	r5, r0
 8004156:	460c      	mov	r4, r1
 8004158:	4616      	mov	r6, r2
 800415a:	d505      	bpl.n	8004168 <__swrite+0x1e>
 800415c:	2302      	movs	r3, #2
 800415e:	2200      	movs	r2, #0
 8004160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004164:	f000 f9b8 	bl	80044d8 <_lseek_r>
 8004168:	89a3      	ldrh	r3, [r4, #12]
 800416a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800416e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004172:	81a3      	strh	r3, [r4, #12]
 8004174:	4632      	mov	r2, r6
 8004176:	463b      	mov	r3, r7
 8004178:	4628      	mov	r0, r5
 800417a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800417e:	f000 b869 	b.w	8004254 <_write_r>

08004182 <__sseek>:
 8004182:	b510      	push	{r4, lr}
 8004184:	460c      	mov	r4, r1
 8004186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800418a:	f000 f9a5 	bl	80044d8 <_lseek_r>
 800418e:	1c43      	adds	r3, r0, #1
 8004190:	89a3      	ldrh	r3, [r4, #12]
 8004192:	bf15      	itete	ne
 8004194:	6560      	strne	r0, [r4, #84]	; 0x54
 8004196:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800419a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800419e:	81a3      	strheq	r3, [r4, #12]
 80041a0:	bf18      	it	ne
 80041a2:	81a3      	strhne	r3, [r4, #12]
 80041a4:	bd10      	pop	{r4, pc}

080041a6 <__sclose>:
 80041a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041aa:	f000 b8d3 	b.w	8004354 <_close_r>
	...

080041b0 <__swbuf_r>:
 80041b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b2:	460e      	mov	r6, r1
 80041b4:	4614      	mov	r4, r2
 80041b6:	4605      	mov	r5, r0
 80041b8:	b118      	cbz	r0, 80041c2 <__swbuf_r+0x12>
 80041ba:	6983      	ldr	r3, [r0, #24]
 80041bc:	b90b      	cbnz	r3, 80041c2 <__swbuf_r+0x12>
 80041be:	f7ff fa2d 	bl	800361c <__sinit>
 80041c2:	4b21      	ldr	r3, [pc, #132]	; (8004248 <__swbuf_r+0x98>)
 80041c4:	429c      	cmp	r4, r3
 80041c6:	d12a      	bne.n	800421e <__swbuf_r+0x6e>
 80041c8:	686c      	ldr	r4, [r5, #4]
 80041ca:	69a3      	ldr	r3, [r4, #24]
 80041cc:	60a3      	str	r3, [r4, #8]
 80041ce:	89a3      	ldrh	r3, [r4, #12]
 80041d0:	071a      	lsls	r2, r3, #28
 80041d2:	d52e      	bpl.n	8004232 <__swbuf_r+0x82>
 80041d4:	6923      	ldr	r3, [r4, #16]
 80041d6:	b363      	cbz	r3, 8004232 <__swbuf_r+0x82>
 80041d8:	6923      	ldr	r3, [r4, #16]
 80041da:	6820      	ldr	r0, [r4, #0]
 80041dc:	1ac0      	subs	r0, r0, r3
 80041de:	6963      	ldr	r3, [r4, #20]
 80041e0:	b2f6      	uxtb	r6, r6
 80041e2:	4298      	cmp	r0, r3
 80041e4:	4637      	mov	r7, r6
 80041e6:	db04      	blt.n	80041f2 <__swbuf_r+0x42>
 80041e8:	4621      	mov	r1, r4
 80041ea:	4628      	mov	r0, r5
 80041ec:	f000 f94a 	bl	8004484 <_fflush_r>
 80041f0:	bb28      	cbnz	r0, 800423e <__swbuf_r+0x8e>
 80041f2:	68a3      	ldr	r3, [r4, #8]
 80041f4:	3b01      	subs	r3, #1
 80041f6:	60a3      	str	r3, [r4, #8]
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	6022      	str	r2, [r4, #0]
 80041fe:	701e      	strb	r6, [r3, #0]
 8004200:	6963      	ldr	r3, [r4, #20]
 8004202:	3001      	adds	r0, #1
 8004204:	4298      	cmp	r0, r3
 8004206:	d004      	beq.n	8004212 <__swbuf_r+0x62>
 8004208:	89a3      	ldrh	r3, [r4, #12]
 800420a:	07db      	lsls	r3, r3, #31
 800420c:	d519      	bpl.n	8004242 <__swbuf_r+0x92>
 800420e:	2e0a      	cmp	r6, #10
 8004210:	d117      	bne.n	8004242 <__swbuf_r+0x92>
 8004212:	4621      	mov	r1, r4
 8004214:	4628      	mov	r0, r5
 8004216:	f000 f935 	bl	8004484 <_fflush_r>
 800421a:	b190      	cbz	r0, 8004242 <__swbuf_r+0x92>
 800421c:	e00f      	b.n	800423e <__swbuf_r+0x8e>
 800421e:	4b0b      	ldr	r3, [pc, #44]	; (800424c <__swbuf_r+0x9c>)
 8004220:	429c      	cmp	r4, r3
 8004222:	d101      	bne.n	8004228 <__swbuf_r+0x78>
 8004224:	68ac      	ldr	r4, [r5, #8]
 8004226:	e7d0      	b.n	80041ca <__swbuf_r+0x1a>
 8004228:	4b09      	ldr	r3, [pc, #36]	; (8004250 <__swbuf_r+0xa0>)
 800422a:	429c      	cmp	r4, r3
 800422c:	bf08      	it	eq
 800422e:	68ec      	ldreq	r4, [r5, #12]
 8004230:	e7cb      	b.n	80041ca <__swbuf_r+0x1a>
 8004232:	4621      	mov	r1, r4
 8004234:	4628      	mov	r0, r5
 8004236:	f000 f81f 	bl	8004278 <__swsetup_r>
 800423a:	2800      	cmp	r0, #0
 800423c:	d0cc      	beq.n	80041d8 <__swbuf_r+0x28>
 800423e:	f04f 37ff 	mov.w	r7, #4294967295
 8004242:	4638      	mov	r0, r7
 8004244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004246:	bf00      	nop
 8004248:	08004714 	.word	0x08004714
 800424c:	08004734 	.word	0x08004734
 8004250:	080046f4 	.word	0x080046f4

08004254 <_write_r>:
 8004254:	b538      	push	{r3, r4, r5, lr}
 8004256:	4c07      	ldr	r4, [pc, #28]	; (8004274 <_write_r+0x20>)
 8004258:	4605      	mov	r5, r0
 800425a:	4608      	mov	r0, r1
 800425c:	4611      	mov	r1, r2
 800425e:	2200      	movs	r2, #0
 8004260:	6022      	str	r2, [r4, #0]
 8004262:	461a      	mov	r2, r3
 8004264:	f7fd fcd8 	bl	8001c18 <_write>
 8004268:	1c43      	adds	r3, r0, #1
 800426a:	d102      	bne.n	8004272 <_write_r+0x1e>
 800426c:	6823      	ldr	r3, [r4, #0]
 800426e:	b103      	cbz	r3, 8004272 <_write_r+0x1e>
 8004270:	602b      	str	r3, [r5, #0]
 8004272:	bd38      	pop	{r3, r4, r5, pc}
 8004274:	2000020c 	.word	0x2000020c

08004278 <__swsetup_r>:
 8004278:	4b32      	ldr	r3, [pc, #200]	; (8004344 <__swsetup_r+0xcc>)
 800427a:	b570      	push	{r4, r5, r6, lr}
 800427c:	681d      	ldr	r5, [r3, #0]
 800427e:	4606      	mov	r6, r0
 8004280:	460c      	mov	r4, r1
 8004282:	b125      	cbz	r5, 800428e <__swsetup_r+0x16>
 8004284:	69ab      	ldr	r3, [r5, #24]
 8004286:	b913      	cbnz	r3, 800428e <__swsetup_r+0x16>
 8004288:	4628      	mov	r0, r5
 800428a:	f7ff f9c7 	bl	800361c <__sinit>
 800428e:	4b2e      	ldr	r3, [pc, #184]	; (8004348 <__swsetup_r+0xd0>)
 8004290:	429c      	cmp	r4, r3
 8004292:	d10f      	bne.n	80042b4 <__swsetup_r+0x3c>
 8004294:	686c      	ldr	r4, [r5, #4]
 8004296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800429a:	b29a      	uxth	r2, r3
 800429c:	0715      	lsls	r5, r2, #28
 800429e:	d42c      	bmi.n	80042fa <__swsetup_r+0x82>
 80042a0:	06d0      	lsls	r0, r2, #27
 80042a2:	d411      	bmi.n	80042c8 <__swsetup_r+0x50>
 80042a4:	2209      	movs	r2, #9
 80042a6:	6032      	str	r2, [r6, #0]
 80042a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042ac:	81a3      	strh	r3, [r4, #12]
 80042ae:	f04f 30ff 	mov.w	r0, #4294967295
 80042b2:	bd70      	pop	{r4, r5, r6, pc}
 80042b4:	4b25      	ldr	r3, [pc, #148]	; (800434c <__swsetup_r+0xd4>)
 80042b6:	429c      	cmp	r4, r3
 80042b8:	d101      	bne.n	80042be <__swsetup_r+0x46>
 80042ba:	68ac      	ldr	r4, [r5, #8]
 80042bc:	e7eb      	b.n	8004296 <__swsetup_r+0x1e>
 80042be:	4b24      	ldr	r3, [pc, #144]	; (8004350 <__swsetup_r+0xd8>)
 80042c0:	429c      	cmp	r4, r3
 80042c2:	bf08      	it	eq
 80042c4:	68ec      	ldreq	r4, [r5, #12]
 80042c6:	e7e6      	b.n	8004296 <__swsetup_r+0x1e>
 80042c8:	0751      	lsls	r1, r2, #29
 80042ca:	d512      	bpl.n	80042f2 <__swsetup_r+0x7a>
 80042cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042ce:	b141      	cbz	r1, 80042e2 <__swsetup_r+0x6a>
 80042d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042d4:	4299      	cmp	r1, r3
 80042d6:	d002      	beq.n	80042de <__swsetup_r+0x66>
 80042d8:	4630      	mov	r0, r6
 80042da:	f7ff fd29 	bl	8003d30 <_free_r>
 80042de:	2300      	movs	r3, #0
 80042e0:	6363      	str	r3, [r4, #52]	; 0x34
 80042e2:	89a3      	ldrh	r3, [r4, #12]
 80042e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80042e8:	81a3      	strh	r3, [r4, #12]
 80042ea:	2300      	movs	r3, #0
 80042ec:	6063      	str	r3, [r4, #4]
 80042ee:	6923      	ldr	r3, [r4, #16]
 80042f0:	6023      	str	r3, [r4, #0]
 80042f2:	89a3      	ldrh	r3, [r4, #12]
 80042f4:	f043 0308 	orr.w	r3, r3, #8
 80042f8:	81a3      	strh	r3, [r4, #12]
 80042fa:	6923      	ldr	r3, [r4, #16]
 80042fc:	b94b      	cbnz	r3, 8004312 <__swsetup_r+0x9a>
 80042fe:	89a3      	ldrh	r3, [r4, #12]
 8004300:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004308:	d003      	beq.n	8004312 <__swsetup_r+0x9a>
 800430a:	4621      	mov	r1, r4
 800430c:	4630      	mov	r0, r6
 800430e:	f000 f919 	bl	8004544 <__smakebuf_r>
 8004312:	89a2      	ldrh	r2, [r4, #12]
 8004314:	f012 0301 	ands.w	r3, r2, #1
 8004318:	d00c      	beq.n	8004334 <__swsetup_r+0xbc>
 800431a:	2300      	movs	r3, #0
 800431c:	60a3      	str	r3, [r4, #8]
 800431e:	6963      	ldr	r3, [r4, #20]
 8004320:	425b      	negs	r3, r3
 8004322:	61a3      	str	r3, [r4, #24]
 8004324:	6923      	ldr	r3, [r4, #16]
 8004326:	b953      	cbnz	r3, 800433e <__swsetup_r+0xc6>
 8004328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800432c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004330:	d1ba      	bne.n	80042a8 <__swsetup_r+0x30>
 8004332:	bd70      	pop	{r4, r5, r6, pc}
 8004334:	0792      	lsls	r2, r2, #30
 8004336:	bf58      	it	pl
 8004338:	6963      	ldrpl	r3, [r4, #20]
 800433a:	60a3      	str	r3, [r4, #8]
 800433c:	e7f2      	b.n	8004324 <__swsetup_r+0xac>
 800433e:	2000      	movs	r0, #0
 8004340:	e7f7      	b.n	8004332 <__swsetup_r+0xba>
 8004342:	bf00      	nop
 8004344:	2000000c 	.word	0x2000000c
 8004348:	08004714 	.word	0x08004714
 800434c:	08004734 	.word	0x08004734
 8004350:	080046f4 	.word	0x080046f4

08004354 <_close_r>:
 8004354:	b538      	push	{r3, r4, r5, lr}
 8004356:	4c06      	ldr	r4, [pc, #24]	; (8004370 <_close_r+0x1c>)
 8004358:	2300      	movs	r3, #0
 800435a:	4605      	mov	r5, r0
 800435c:	4608      	mov	r0, r1
 800435e:	6023      	str	r3, [r4, #0]
 8004360:	f7fd fd58 	bl	8001e14 <_close>
 8004364:	1c43      	adds	r3, r0, #1
 8004366:	d102      	bne.n	800436e <_close_r+0x1a>
 8004368:	6823      	ldr	r3, [r4, #0]
 800436a:	b103      	cbz	r3, 800436e <_close_r+0x1a>
 800436c:	602b      	str	r3, [r5, #0]
 800436e:	bd38      	pop	{r3, r4, r5, pc}
 8004370:	2000020c 	.word	0x2000020c

08004374 <__sflush_r>:
 8004374:	898a      	ldrh	r2, [r1, #12]
 8004376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800437a:	4605      	mov	r5, r0
 800437c:	0710      	lsls	r0, r2, #28
 800437e:	460c      	mov	r4, r1
 8004380:	d45a      	bmi.n	8004438 <__sflush_r+0xc4>
 8004382:	684b      	ldr	r3, [r1, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	dc05      	bgt.n	8004394 <__sflush_r+0x20>
 8004388:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	dc02      	bgt.n	8004394 <__sflush_r+0x20>
 800438e:	2000      	movs	r0, #0
 8004390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004394:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004396:	2e00      	cmp	r6, #0
 8004398:	d0f9      	beq.n	800438e <__sflush_r+0x1a>
 800439a:	2300      	movs	r3, #0
 800439c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80043a0:	682f      	ldr	r7, [r5, #0]
 80043a2:	602b      	str	r3, [r5, #0]
 80043a4:	d033      	beq.n	800440e <__sflush_r+0x9a>
 80043a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80043a8:	89a3      	ldrh	r3, [r4, #12]
 80043aa:	075a      	lsls	r2, r3, #29
 80043ac:	d505      	bpl.n	80043ba <__sflush_r+0x46>
 80043ae:	6863      	ldr	r3, [r4, #4]
 80043b0:	1ac0      	subs	r0, r0, r3
 80043b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80043b4:	b10b      	cbz	r3, 80043ba <__sflush_r+0x46>
 80043b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043b8:	1ac0      	subs	r0, r0, r3
 80043ba:	2300      	movs	r3, #0
 80043bc:	4602      	mov	r2, r0
 80043be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043c0:	6a21      	ldr	r1, [r4, #32]
 80043c2:	4628      	mov	r0, r5
 80043c4:	47b0      	blx	r6
 80043c6:	1c43      	adds	r3, r0, #1
 80043c8:	89a3      	ldrh	r3, [r4, #12]
 80043ca:	d106      	bne.n	80043da <__sflush_r+0x66>
 80043cc:	6829      	ldr	r1, [r5, #0]
 80043ce:	291d      	cmp	r1, #29
 80043d0:	d84b      	bhi.n	800446a <__sflush_r+0xf6>
 80043d2:	4a2b      	ldr	r2, [pc, #172]	; (8004480 <__sflush_r+0x10c>)
 80043d4:	40ca      	lsrs	r2, r1
 80043d6:	07d6      	lsls	r6, r2, #31
 80043d8:	d547      	bpl.n	800446a <__sflush_r+0xf6>
 80043da:	2200      	movs	r2, #0
 80043dc:	6062      	str	r2, [r4, #4]
 80043de:	04d9      	lsls	r1, r3, #19
 80043e0:	6922      	ldr	r2, [r4, #16]
 80043e2:	6022      	str	r2, [r4, #0]
 80043e4:	d504      	bpl.n	80043f0 <__sflush_r+0x7c>
 80043e6:	1c42      	adds	r2, r0, #1
 80043e8:	d101      	bne.n	80043ee <__sflush_r+0x7a>
 80043ea:	682b      	ldr	r3, [r5, #0]
 80043ec:	b903      	cbnz	r3, 80043f0 <__sflush_r+0x7c>
 80043ee:	6560      	str	r0, [r4, #84]	; 0x54
 80043f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043f2:	602f      	str	r7, [r5, #0]
 80043f4:	2900      	cmp	r1, #0
 80043f6:	d0ca      	beq.n	800438e <__sflush_r+0x1a>
 80043f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043fc:	4299      	cmp	r1, r3
 80043fe:	d002      	beq.n	8004406 <__sflush_r+0x92>
 8004400:	4628      	mov	r0, r5
 8004402:	f7ff fc95 	bl	8003d30 <_free_r>
 8004406:	2000      	movs	r0, #0
 8004408:	6360      	str	r0, [r4, #52]	; 0x34
 800440a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800440e:	6a21      	ldr	r1, [r4, #32]
 8004410:	2301      	movs	r3, #1
 8004412:	4628      	mov	r0, r5
 8004414:	47b0      	blx	r6
 8004416:	1c41      	adds	r1, r0, #1
 8004418:	d1c6      	bne.n	80043a8 <__sflush_r+0x34>
 800441a:	682b      	ldr	r3, [r5, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0c3      	beq.n	80043a8 <__sflush_r+0x34>
 8004420:	2b1d      	cmp	r3, #29
 8004422:	d001      	beq.n	8004428 <__sflush_r+0xb4>
 8004424:	2b16      	cmp	r3, #22
 8004426:	d101      	bne.n	800442c <__sflush_r+0xb8>
 8004428:	602f      	str	r7, [r5, #0]
 800442a:	e7b0      	b.n	800438e <__sflush_r+0x1a>
 800442c:	89a3      	ldrh	r3, [r4, #12]
 800442e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004432:	81a3      	strh	r3, [r4, #12]
 8004434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004438:	690f      	ldr	r7, [r1, #16]
 800443a:	2f00      	cmp	r7, #0
 800443c:	d0a7      	beq.n	800438e <__sflush_r+0x1a>
 800443e:	0793      	lsls	r3, r2, #30
 8004440:	680e      	ldr	r6, [r1, #0]
 8004442:	bf08      	it	eq
 8004444:	694b      	ldreq	r3, [r1, #20]
 8004446:	600f      	str	r7, [r1, #0]
 8004448:	bf18      	it	ne
 800444a:	2300      	movne	r3, #0
 800444c:	eba6 0807 	sub.w	r8, r6, r7
 8004450:	608b      	str	r3, [r1, #8]
 8004452:	f1b8 0f00 	cmp.w	r8, #0
 8004456:	dd9a      	ble.n	800438e <__sflush_r+0x1a>
 8004458:	4643      	mov	r3, r8
 800445a:	463a      	mov	r2, r7
 800445c:	6a21      	ldr	r1, [r4, #32]
 800445e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004460:	4628      	mov	r0, r5
 8004462:	47b0      	blx	r6
 8004464:	2800      	cmp	r0, #0
 8004466:	dc07      	bgt.n	8004478 <__sflush_r+0x104>
 8004468:	89a3      	ldrh	r3, [r4, #12]
 800446a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800446e:	81a3      	strh	r3, [r4, #12]
 8004470:	f04f 30ff 	mov.w	r0, #4294967295
 8004474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004478:	4407      	add	r7, r0
 800447a:	eba8 0800 	sub.w	r8, r8, r0
 800447e:	e7e8      	b.n	8004452 <__sflush_r+0xde>
 8004480:	20400001 	.word	0x20400001

08004484 <_fflush_r>:
 8004484:	b538      	push	{r3, r4, r5, lr}
 8004486:	690b      	ldr	r3, [r1, #16]
 8004488:	4605      	mov	r5, r0
 800448a:	460c      	mov	r4, r1
 800448c:	b1db      	cbz	r3, 80044c6 <_fflush_r+0x42>
 800448e:	b118      	cbz	r0, 8004498 <_fflush_r+0x14>
 8004490:	6983      	ldr	r3, [r0, #24]
 8004492:	b90b      	cbnz	r3, 8004498 <_fflush_r+0x14>
 8004494:	f7ff f8c2 	bl	800361c <__sinit>
 8004498:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <_fflush_r+0x48>)
 800449a:	429c      	cmp	r4, r3
 800449c:	d109      	bne.n	80044b2 <_fflush_r+0x2e>
 800449e:	686c      	ldr	r4, [r5, #4]
 80044a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044a4:	b17b      	cbz	r3, 80044c6 <_fflush_r+0x42>
 80044a6:	4621      	mov	r1, r4
 80044a8:	4628      	mov	r0, r5
 80044aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044ae:	f7ff bf61 	b.w	8004374 <__sflush_r>
 80044b2:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <_fflush_r+0x4c>)
 80044b4:	429c      	cmp	r4, r3
 80044b6:	d101      	bne.n	80044bc <_fflush_r+0x38>
 80044b8:	68ac      	ldr	r4, [r5, #8]
 80044ba:	e7f1      	b.n	80044a0 <_fflush_r+0x1c>
 80044bc:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <_fflush_r+0x50>)
 80044be:	429c      	cmp	r4, r3
 80044c0:	bf08      	it	eq
 80044c2:	68ec      	ldreq	r4, [r5, #12]
 80044c4:	e7ec      	b.n	80044a0 <_fflush_r+0x1c>
 80044c6:	2000      	movs	r0, #0
 80044c8:	bd38      	pop	{r3, r4, r5, pc}
 80044ca:	bf00      	nop
 80044cc:	08004714 	.word	0x08004714
 80044d0:	08004734 	.word	0x08004734
 80044d4:	080046f4 	.word	0x080046f4

080044d8 <_lseek_r>:
 80044d8:	b538      	push	{r3, r4, r5, lr}
 80044da:	4c07      	ldr	r4, [pc, #28]	; (80044f8 <_lseek_r+0x20>)
 80044dc:	4605      	mov	r5, r0
 80044de:	4608      	mov	r0, r1
 80044e0:	4611      	mov	r1, r2
 80044e2:	2200      	movs	r2, #0
 80044e4:	6022      	str	r2, [r4, #0]
 80044e6:	461a      	mov	r2, r3
 80044e8:	f7fd fc9e 	bl	8001e28 <_lseek>
 80044ec:	1c43      	adds	r3, r0, #1
 80044ee:	d102      	bne.n	80044f6 <_lseek_r+0x1e>
 80044f0:	6823      	ldr	r3, [r4, #0]
 80044f2:	b103      	cbz	r3, 80044f6 <_lseek_r+0x1e>
 80044f4:	602b      	str	r3, [r5, #0]
 80044f6:	bd38      	pop	{r3, r4, r5, pc}
 80044f8:	2000020c 	.word	0x2000020c

080044fc <__swhatbuf_r>:
 80044fc:	b570      	push	{r4, r5, r6, lr}
 80044fe:	460e      	mov	r6, r1
 8004500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004504:	2900      	cmp	r1, #0
 8004506:	b090      	sub	sp, #64	; 0x40
 8004508:	4614      	mov	r4, r2
 800450a:	461d      	mov	r5, r3
 800450c:	da07      	bge.n	800451e <__swhatbuf_r+0x22>
 800450e:	2300      	movs	r3, #0
 8004510:	602b      	str	r3, [r5, #0]
 8004512:	89b3      	ldrh	r3, [r6, #12]
 8004514:	061a      	lsls	r2, r3, #24
 8004516:	d410      	bmi.n	800453a <__swhatbuf_r+0x3e>
 8004518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800451c:	e00e      	b.n	800453c <__swhatbuf_r+0x40>
 800451e:	aa01      	add	r2, sp, #4
 8004520:	f000 f884 	bl	800462c <_fstat_r>
 8004524:	2800      	cmp	r0, #0
 8004526:	dbf2      	blt.n	800450e <__swhatbuf_r+0x12>
 8004528:	9a02      	ldr	r2, [sp, #8]
 800452a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800452e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004532:	425a      	negs	r2, r3
 8004534:	415a      	adcs	r2, r3
 8004536:	602a      	str	r2, [r5, #0]
 8004538:	e7ee      	b.n	8004518 <__swhatbuf_r+0x1c>
 800453a:	2340      	movs	r3, #64	; 0x40
 800453c:	2000      	movs	r0, #0
 800453e:	6023      	str	r3, [r4, #0]
 8004540:	b010      	add	sp, #64	; 0x40
 8004542:	bd70      	pop	{r4, r5, r6, pc}

08004544 <__smakebuf_r>:
 8004544:	898b      	ldrh	r3, [r1, #12]
 8004546:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004548:	079d      	lsls	r5, r3, #30
 800454a:	4606      	mov	r6, r0
 800454c:	460c      	mov	r4, r1
 800454e:	d507      	bpl.n	8004560 <__smakebuf_r+0x1c>
 8004550:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004554:	6023      	str	r3, [r4, #0]
 8004556:	6123      	str	r3, [r4, #16]
 8004558:	2301      	movs	r3, #1
 800455a:	6163      	str	r3, [r4, #20]
 800455c:	b002      	add	sp, #8
 800455e:	bd70      	pop	{r4, r5, r6, pc}
 8004560:	ab01      	add	r3, sp, #4
 8004562:	466a      	mov	r2, sp
 8004564:	f7ff ffca 	bl	80044fc <__swhatbuf_r>
 8004568:	9900      	ldr	r1, [sp, #0]
 800456a:	4605      	mov	r5, r0
 800456c:	4630      	mov	r0, r6
 800456e:	f7ff fc2d 	bl	8003dcc <_malloc_r>
 8004572:	b948      	cbnz	r0, 8004588 <__smakebuf_r+0x44>
 8004574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004578:	059a      	lsls	r2, r3, #22
 800457a:	d4ef      	bmi.n	800455c <__smakebuf_r+0x18>
 800457c:	f023 0303 	bic.w	r3, r3, #3
 8004580:	f043 0302 	orr.w	r3, r3, #2
 8004584:	81a3      	strh	r3, [r4, #12]
 8004586:	e7e3      	b.n	8004550 <__smakebuf_r+0xc>
 8004588:	4b0d      	ldr	r3, [pc, #52]	; (80045c0 <__smakebuf_r+0x7c>)
 800458a:	62b3      	str	r3, [r6, #40]	; 0x28
 800458c:	89a3      	ldrh	r3, [r4, #12]
 800458e:	6020      	str	r0, [r4, #0]
 8004590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004594:	81a3      	strh	r3, [r4, #12]
 8004596:	9b00      	ldr	r3, [sp, #0]
 8004598:	6163      	str	r3, [r4, #20]
 800459a:	9b01      	ldr	r3, [sp, #4]
 800459c:	6120      	str	r0, [r4, #16]
 800459e:	b15b      	cbz	r3, 80045b8 <__smakebuf_r+0x74>
 80045a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045a4:	4630      	mov	r0, r6
 80045a6:	f000 f853 	bl	8004650 <_isatty_r>
 80045aa:	b128      	cbz	r0, 80045b8 <__smakebuf_r+0x74>
 80045ac:	89a3      	ldrh	r3, [r4, #12]
 80045ae:	f023 0303 	bic.w	r3, r3, #3
 80045b2:	f043 0301 	orr.w	r3, r3, #1
 80045b6:	81a3      	strh	r3, [r4, #12]
 80045b8:	89a3      	ldrh	r3, [r4, #12]
 80045ba:	431d      	orrs	r5, r3
 80045bc:	81a5      	strh	r5, [r4, #12]
 80045be:	e7cd      	b.n	800455c <__smakebuf_r+0x18>
 80045c0:	0800359d 	.word	0x0800359d

080045c4 <__ascii_mbtowc>:
 80045c4:	b082      	sub	sp, #8
 80045c6:	b901      	cbnz	r1, 80045ca <__ascii_mbtowc+0x6>
 80045c8:	a901      	add	r1, sp, #4
 80045ca:	b142      	cbz	r2, 80045de <__ascii_mbtowc+0x1a>
 80045cc:	b14b      	cbz	r3, 80045e2 <__ascii_mbtowc+0x1e>
 80045ce:	7813      	ldrb	r3, [r2, #0]
 80045d0:	600b      	str	r3, [r1, #0]
 80045d2:	7812      	ldrb	r2, [r2, #0]
 80045d4:	1c10      	adds	r0, r2, #0
 80045d6:	bf18      	it	ne
 80045d8:	2001      	movne	r0, #1
 80045da:	b002      	add	sp, #8
 80045dc:	4770      	bx	lr
 80045de:	4610      	mov	r0, r2
 80045e0:	e7fb      	b.n	80045da <__ascii_mbtowc+0x16>
 80045e2:	f06f 0001 	mvn.w	r0, #1
 80045e6:	e7f8      	b.n	80045da <__ascii_mbtowc+0x16>

080045e8 <__malloc_lock>:
 80045e8:	4770      	bx	lr

080045ea <__malloc_unlock>:
 80045ea:	4770      	bx	lr

080045ec <_read_r>:
 80045ec:	b538      	push	{r3, r4, r5, lr}
 80045ee:	4c07      	ldr	r4, [pc, #28]	; (800460c <_read_r+0x20>)
 80045f0:	4605      	mov	r5, r0
 80045f2:	4608      	mov	r0, r1
 80045f4:	4611      	mov	r1, r2
 80045f6:	2200      	movs	r2, #0
 80045f8:	6022      	str	r2, [r4, #0]
 80045fa:	461a      	mov	r2, r3
 80045fc:	f7fd fbdc 	bl	8001db8 <_read>
 8004600:	1c43      	adds	r3, r0, #1
 8004602:	d102      	bne.n	800460a <_read_r+0x1e>
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	b103      	cbz	r3, 800460a <_read_r+0x1e>
 8004608:	602b      	str	r3, [r5, #0]
 800460a:	bd38      	pop	{r3, r4, r5, pc}
 800460c:	2000020c 	.word	0x2000020c

08004610 <__ascii_wctomb>:
 8004610:	b149      	cbz	r1, 8004626 <__ascii_wctomb+0x16>
 8004612:	2aff      	cmp	r2, #255	; 0xff
 8004614:	bf85      	ittet	hi
 8004616:	238a      	movhi	r3, #138	; 0x8a
 8004618:	6003      	strhi	r3, [r0, #0]
 800461a:	700a      	strbls	r2, [r1, #0]
 800461c:	f04f 30ff 	movhi.w	r0, #4294967295
 8004620:	bf98      	it	ls
 8004622:	2001      	movls	r0, #1
 8004624:	4770      	bx	lr
 8004626:	4608      	mov	r0, r1
 8004628:	4770      	bx	lr
	...

0800462c <_fstat_r>:
 800462c:	b538      	push	{r3, r4, r5, lr}
 800462e:	4c07      	ldr	r4, [pc, #28]	; (800464c <_fstat_r+0x20>)
 8004630:	2300      	movs	r3, #0
 8004632:	4605      	mov	r5, r0
 8004634:	4608      	mov	r0, r1
 8004636:	4611      	mov	r1, r2
 8004638:	6023      	str	r3, [r4, #0]
 800463a:	f7fd fbee 	bl	8001e1a <_fstat>
 800463e:	1c43      	adds	r3, r0, #1
 8004640:	d102      	bne.n	8004648 <_fstat_r+0x1c>
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	b103      	cbz	r3, 8004648 <_fstat_r+0x1c>
 8004646:	602b      	str	r3, [r5, #0]
 8004648:	bd38      	pop	{r3, r4, r5, pc}
 800464a:	bf00      	nop
 800464c:	2000020c 	.word	0x2000020c

08004650 <_isatty_r>:
 8004650:	b538      	push	{r3, r4, r5, lr}
 8004652:	4c06      	ldr	r4, [pc, #24]	; (800466c <_isatty_r+0x1c>)
 8004654:	2300      	movs	r3, #0
 8004656:	4605      	mov	r5, r0
 8004658:	4608      	mov	r0, r1
 800465a:	6023      	str	r3, [r4, #0]
 800465c:	f7fd fbe2 	bl	8001e24 <_isatty>
 8004660:	1c43      	adds	r3, r0, #1
 8004662:	d102      	bne.n	800466a <_isatty_r+0x1a>
 8004664:	6823      	ldr	r3, [r4, #0]
 8004666:	b103      	cbz	r3, 800466a <_isatty_r+0x1a>
 8004668:	602b      	str	r3, [r5, #0]
 800466a:	bd38      	pop	{r3, r4, r5, pc}
 800466c:	2000020c 	.word	0x2000020c

08004670 <_init>:
 8004670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004672:	bf00      	nop
 8004674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004676:	bc08      	pop	{r3}
 8004678:	469e      	mov	lr, r3
 800467a:	4770      	bx	lr

0800467c <_fini>:
 800467c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467e:	bf00      	nop
 8004680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004682:	bc08      	pop	{r3}
 8004684:	469e      	mov	lr, r3
 8004686:	4770      	bx	lr
