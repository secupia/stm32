
2-3.UART_Interrupt_LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003774  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08003928  08003928  00013928  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003b68  08003b68  00013b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003b70  08003b70  00013b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003b74  08003b74  00013b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  08003b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
  8 .bss          00000034  200001dc  200001dc  000201dc  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000210  20000210  000201dc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 11 .debug_info   00008b64  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001c9f  00000000  00000000  00028d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000268f  00000000  00000000  0002aa0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005b0  00000000  00000000  0002d0a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000558  00000000  00000000  0002d650  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00003171  00000000  00000000  0002dba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000027aa  00000000  00000000  00030d19  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000334c3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000014a0  00000000  00000000  00033540  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800390c 	.word	0x0800390c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	0800390c 	.word	0x0800390c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033e:	f1a4 0401 	sub.w	r4, r4, #1
 8000342:	d1e9      	bne.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f092 0f00 	teq	r2, #0
 80004ea:	bf14      	ite	ne
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000500:	e720      	b.n	8000344 <__adddf3+0x138>
 8000502:	bf00      	nop

08000504 <__aeabi_ul2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	e00a      	b.n	800052a <__aeabi_l2d+0x16>

08000514 <__aeabi_l2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000522:	d502      	bpl.n	800052a <__aeabi_l2d+0x16>
 8000524:	4240      	negs	r0, r0
 8000526:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000532:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000536:	f43f aedc 	beq.w	80002f2 <__adddf3+0xe6>
 800053a:	f04f 0203 	mov.w	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000552:	f1c2 0320 	rsb	r3, r2, #32
 8000556:	fa00 fc03 	lsl.w	ip, r0, r3
 800055a:	fa20 f002 	lsr.w	r0, r0, r2
 800055e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000562:	ea40 000e 	orr.w	r0, r0, lr
 8000566:	fa21 f102 	lsr.w	r1, r1, r2
 800056a:	4414      	add	r4, r2
 800056c:	e6c1      	b.n	80002f2 <__adddf3+0xe6>
 800056e:	bf00      	nop

08000570 <__aeabi_dmul>:
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000576:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800057a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800057e:	bf1d      	ittte	ne
 8000580:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000584:	ea94 0f0c 	teqne	r4, ip
 8000588:	ea95 0f0c 	teqne	r5, ip
 800058c:	f000 f8de 	bleq	800074c <__aeabi_dmul+0x1dc>
 8000590:	442c      	add	r4, r5
 8000592:	ea81 0603 	eor.w	r6, r1, r3
 8000596:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800059e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a2:	bf18      	it	ne
 80005a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b0:	d038      	beq.n	8000624 <__aeabi_dmul+0xb4>
 80005b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005c6:	f04f 0600 	mov.w	r6, #0
 80005ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ce:	f09c 0f00 	teq	ip, #0
 80005d2:	bf18      	it	ne
 80005d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e4:	d204      	bcs.n	80005f0 <__aeabi_dmul+0x80>
 80005e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ea:	416d      	adcs	r5, r5
 80005ec:	eb46 0606 	adc.w	r6, r6, r6
 80005f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000600:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000604:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000608:	bf88      	it	hi
 800060a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800060e:	d81e      	bhi.n	800064e <__aeabi_dmul+0xde>
 8000610:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000614:	bf08      	it	eq
 8000616:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061a:	f150 0000 	adcs.w	r0, r0, #0
 800061e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000628:	ea46 0101 	orr.w	r1, r6, r1
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	ea81 0103 	eor.w	r1, r1, r3
 8000634:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000638:	bfc2      	ittt	gt
 800063a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800063e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000642:	bd70      	popgt	{r4, r5, r6, pc}
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f04f 0e00 	mov.w	lr, #0
 800064c:	3c01      	subs	r4, #1
 800064e:	f300 80ab 	bgt.w	80007a8 <__aeabi_dmul+0x238>
 8000652:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000656:	bfde      	ittt	le
 8000658:	2000      	movle	r0, #0
 800065a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800065e:	bd70      	pople	{r4, r5, r6, pc}
 8000660:	f1c4 0400 	rsb	r4, r4, #0
 8000664:	3c20      	subs	r4, #32
 8000666:	da35      	bge.n	80006d4 <__aeabi_dmul+0x164>
 8000668:	340c      	adds	r4, #12
 800066a:	dc1b      	bgt.n	80006a4 <__aeabi_dmul+0x134>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f305 	lsl.w	r3, r0, r5
 8000678:	fa20 f004 	lsr.w	r0, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000688:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800068c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000690:	fa21 f604 	lsr.w	r6, r1, r4
 8000694:	eb42 0106 	adc.w	r1, r2, r6
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 040c 	rsb	r4, r4, #12
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f304 	lsl.w	r3, r0, r4
 80006b0:	fa20 f005 	lsr.w	r0, r0, r5
 80006b4:	fa01 f204 	lsl.w	r2, r1, r4
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c4:	f141 0100 	adc.w	r1, r1, #0
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 0520 	rsb	r5, r4, #32
 80006d8:	fa00 f205 	lsl.w	r2, r0, r5
 80006dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e0:	fa20 f304 	lsr.w	r3, r0, r4
 80006e4:	fa01 f205 	lsl.w	r2, r1, r5
 80006e8:	ea43 0302 	orr.w	r3, r3, r2
 80006ec:	fa21 f004 	lsr.w	r0, r1, r4
 80006f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f4:	fa21 f204 	lsr.w	r2, r1, r4
 80006f8:	ea20 0002 	bic.w	r0, r0, r2
 80006fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f094 0f00 	teq	r4, #0
 8000710:	d10f      	bne.n	8000732 <__aeabi_dmul+0x1c2>
 8000712:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000716:	0040      	lsls	r0, r0, #1
 8000718:	eb41 0101 	adc.w	r1, r1, r1
 800071c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3c01      	subeq	r4, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1a6>
 8000726:	ea41 0106 	orr.w	r1, r1, r6
 800072a:	f095 0f00 	teq	r5, #0
 800072e:	bf18      	it	ne
 8000730:	4770      	bxne	lr
 8000732:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000736:	0052      	lsls	r2, r2, #1
 8000738:	eb43 0303 	adc.w	r3, r3, r3
 800073c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3d01      	subeq	r5, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1c6>
 8000746:	ea43 0306 	orr.w	r3, r3, r6
 800074a:	4770      	bx	lr
 800074c:	ea94 0f0c 	teq	r4, ip
 8000750:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000754:	bf18      	it	ne
 8000756:	ea95 0f0c 	teqne	r5, ip
 800075a:	d00c      	beq.n	8000776 <__aeabi_dmul+0x206>
 800075c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000760:	bf18      	it	ne
 8000762:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000766:	d1d1      	bne.n	800070c <__aeabi_dmul+0x19c>
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000770:	f04f 0000 	mov.w	r0, #0
 8000774:	bd70      	pop	{r4, r5, r6, pc}
 8000776:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077a:	bf06      	itte	eq
 800077c:	4610      	moveq	r0, r2
 800077e:	4619      	moveq	r1, r3
 8000780:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000784:	d019      	beq.n	80007ba <__aeabi_dmul+0x24a>
 8000786:	ea94 0f0c 	teq	r4, ip
 800078a:	d102      	bne.n	8000792 <__aeabi_dmul+0x222>
 800078c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000790:	d113      	bne.n	80007ba <__aeabi_dmul+0x24a>
 8000792:	ea95 0f0c 	teq	r5, ip
 8000796:	d105      	bne.n	80007a4 <__aeabi_dmul+0x234>
 8000798:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800079c:	bf1c      	itt	ne
 800079e:	4610      	movne	r0, r2
 80007a0:	4619      	movne	r1, r3
 80007a2:	d10a      	bne.n	80007ba <__aeabi_dmul+0x24a>
 80007a4:	ea81 0103 	eor.w	r1, r1, r3
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b4:	f04f 0000 	mov.w	r0, #0
 80007b8:	bd70      	pop	{r4, r5, r6, pc}
 80007ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007c2:	bd70      	pop	{r4, r5, r6, pc}

080007c4 <__aeabi_ddiv>:
 80007c4:	b570      	push	{r4, r5, r6, lr}
 80007c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d2:	bf1d      	ittte	ne
 80007d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d8:	ea94 0f0c 	teqne	r4, ip
 80007dc:	ea95 0f0c 	teqne	r5, ip
 80007e0:	f000 f8a7 	bleq	8000932 <__aeabi_ddiv+0x16e>
 80007e4:	eba4 0405 	sub.w	r4, r4, r5
 80007e8:	ea81 0e03 	eor.w	lr, r1, r3
 80007ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f4:	f000 8088 	beq.w	8000908 <__aeabi_ddiv+0x144>
 80007f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000800:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000804:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000808:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800080c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000810:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000814:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000818:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800081c:	429d      	cmp	r5, r3
 800081e:	bf08      	it	eq
 8000820:	4296      	cmpeq	r6, r2
 8000822:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000826:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800082a:	d202      	bcs.n	8000832 <__aeabi_ddiv+0x6e>
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	1ab6      	subs	r6, r6, r2
 8000834:	eb65 0503 	sbc.w	r5, r5, r3
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000842:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 000c 	orrcs.w	r0, r0, ip
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a4:	d018      	beq.n	80008d8 <__aeabi_ddiv+0x114>
 80008a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c2:	d1c0      	bne.n	8000846 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	d10b      	bne.n	80008e2 <__aeabi_ddiv+0x11e>
 80008ca:	ea41 0100 	orr.w	r1, r1, r0
 80008ce:	f04f 0000 	mov.w	r0, #0
 80008d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008d6:	e7b6      	b.n	8000846 <__aeabi_ddiv+0x82>
 80008d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008dc:	bf04      	itt	eq
 80008de:	4301      	orreq	r1, r0
 80008e0:	2000      	moveq	r0, #0
 80008e2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008e6:	bf88      	it	hi
 80008e8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008ec:	f63f aeaf 	bhi.w	800064e <__aeabi_dmul+0xde>
 80008f0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f4:	bf04      	itt	eq
 80008f6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008fe:	f150 0000 	adcs.w	r0, r0, #0
 8000902:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000906:	bd70      	pop	{r4, r5, r6, pc}
 8000908:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800090c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000910:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000914:	bfc2      	ittt	gt
 8000916:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800091e:	bd70      	popgt	{r4, r5, r6, pc}
 8000920:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000924:	f04f 0e00 	mov.w	lr, #0
 8000928:	3c01      	subs	r4, #1
 800092a:	e690      	b.n	800064e <__aeabi_dmul+0xde>
 800092c:	ea45 0e06 	orr.w	lr, r5, r6
 8000930:	e68d      	b.n	800064e <__aeabi_dmul+0xde>
 8000932:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000936:	ea94 0f0c 	teq	r4, ip
 800093a:	bf08      	it	eq
 800093c:	ea95 0f0c 	teqeq	r5, ip
 8000940:	f43f af3b 	beq.w	80007ba <__aeabi_dmul+0x24a>
 8000944:	ea94 0f0c 	teq	r4, ip
 8000948:	d10a      	bne.n	8000960 <__aeabi_ddiv+0x19c>
 800094a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800094e:	f47f af34 	bne.w	80007ba <__aeabi_dmul+0x24a>
 8000952:	ea95 0f0c 	teq	r5, ip
 8000956:	f47f af25 	bne.w	80007a4 <__aeabi_dmul+0x234>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e72c      	b.n	80007ba <__aeabi_dmul+0x24a>
 8000960:	ea95 0f0c 	teq	r5, ip
 8000964:	d106      	bne.n	8000974 <__aeabi_ddiv+0x1b0>
 8000966:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096a:	f43f aefd 	beq.w	8000768 <__aeabi_dmul+0x1f8>
 800096e:	4610      	mov	r0, r2
 8000970:	4619      	mov	r1, r3
 8000972:	e722      	b.n	80007ba <__aeabi_dmul+0x24a>
 8000974:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000978:	bf18      	it	ne
 800097a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800097e:	f47f aec5 	bne.w	800070c <__aeabi_dmul+0x19c>
 8000982:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000986:	f47f af0d 	bne.w	80007a4 <__aeabi_dmul+0x234>
 800098a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800098e:	f47f aeeb 	bne.w	8000768 <__aeabi_dmul+0x1f8>
 8000992:	e712      	b.n	80007ba <__aeabi_dmul+0x24a>

08000994 <__gedf2>:
 8000994:	f04f 3cff 	mov.w	ip, #4294967295
 8000998:	e006      	b.n	80009a8 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__ledf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	e002      	b.n	80009a8 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__cmpdf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009be:	d01b      	beq.n	80009f8 <__cmpdf2+0x54>
 80009c0:	b001      	add	sp, #4
 80009c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009c6:	bf0c      	ite	eq
 80009c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009cc:	ea91 0f03 	teqne	r1, r3
 80009d0:	bf02      	ittt	eq
 80009d2:	ea90 0f02 	teqeq	r0, r2
 80009d6:	2000      	moveq	r0, #0
 80009d8:	4770      	bxeq	lr
 80009da:	f110 0f00 	cmn.w	r0, #0
 80009de:	ea91 0f03 	teq	r1, r3
 80009e2:	bf58      	it	pl
 80009e4:	4299      	cmppl	r1, r3
 80009e6:	bf08      	it	eq
 80009e8:	4290      	cmpeq	r0, r2
 80009ea:	bf2c      	ite	cs
 80009ec:	17d8      	asrcs	r0, r3, #31
 80009ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009f2:	f040 0001 	orr.w	r0, r0, #1
 80009f6:	4770      	bx	lr
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d102      	bne.n	8000a08 <__cmpdf2+0x64>
 8000a02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a06:	d107      	bne.n	8000a18 <__cmpdf2+0x74>
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d1d6      	bne.n	80009c0 <__cmpdf2+0x1c>
 8000a12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a16:	d0d3      	beq.n	80009c0 <__cmpdf2+0x1c>
 8000a18:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdrcmple>:
 8000a20:	4684      	mov	ip, r0
 8000a22:	4610      	mov	r0, r2
 8000a24:	4662      	mov	r2, ip
 8000a26:	468c      	mov	ip, r1
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4663      	mov	r3, ip
 8000a2c:	e000      	b.n	8000a30 <__aeabi_cdcmpeq>
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdcmpeq>:
 8000a30:	b501      	push	{r0, lr}
 8000a32:	f7ff ffb7 	bl	80009a4 <__cmpdf2>
 8000a36:	2800      	cmp	r0, #0
 8000a38:	bf48      	it	mi
 8000a3a:	f110 0f00 	cmnmi.w	r0, #0
 8000a3e:	bd01      	pop	{r0, pc}

08000a40 <__aeabi_dcmpeq>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff fff4 	bl	8000a30 <__aeabi_cdcmpeq>
 8000a48:	bf0c      	ite	eq
 8000a4a:	2001      	moveq	r0, #1
 8000a4c:	2000      	movne	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmplt>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffea 	bl	8000a30 <__aeabi_cdcmpeq>
 8000a5c:	bf34      	ite	cc
 8000a5e:	2001      	movcc	r0, #1
 8000a60:	2000      	movcs	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmple>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffe0 	bl	8000a30 <__aeabi_cdcmpeq>
 8000a70:	bf94      	ite	ls
 8000a72:	2001      	movls	r0, #1
 8000a74:	2000      	movhi	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpge>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffce 	bl	8000a20 <__aeabi_cdrcmple>
 8000a84:	bf94      	ite	ls
 8000a86:	2001      	movls	r0, #1
 8000a88:	2000      	movhi	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmpgt>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffc4 	bl	8000a20 <__aeabi_cdrcmple>
 8000a98:	bf34      	ite	cc
 8000a9a:	2001      	movcc	r0, #1
 8000a9c:	2000      	movcs	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpun>:
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x10>
 8000aae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab2:	d10a      	bne.n	8000aca <__aeabi_dcmpun+0x26>
 8000ab4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x20>
 8000abe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac2:	d102      	bne.n	8000aca <__aeabi_dcmpun+0x26>
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	f04f 0001 	mov.w	r0, #1
 8000ace:	4770      	bx	lr

08000ad0 <__aeabi_d2iz>:
 8000ad0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad8:	d215      	bcs.n	8000b06 <__aeabi_d2iz+0x36>
 8000ada:	d511      	bpl.n	8000b00 <__aeabi_d2iz+0x30>
 8000adc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae4:	d912      	bls.n	8000b0c <__aeabi_d2iz+0x3c>
 8000ae6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	bf18      	it	ne
 8000afc:	4240      	negne	r0, r0
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0a:	d105      	bne.n	8000b18 <__aeabi_d2iz+0x48>
 8000b0c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b10:	bf08      	it	eq
 8000b12:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <__aeabi_uldivmod>:
 8000b20:	b953      	cbnz	r3, 8000b38 <__aeabi_uldivmod+0x18>
 8000b22:	b94a      	cbnz	r2, 8000b38 <__aeabi_uldivmod+0x18>
 8000b24:	2900      	cmp	r1, #0
 8000b26:	bf08      	it	eq
 8000b28:	2800      	cmpeq	r0, #0
 8000b2a:	bf1c      	itt	ne
 8000b2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b30:	f04f 30ff 	movne.w	r0, #4294967295
 8000b34:	f000 b97a 	b.w	8000e2c <__aeabi_idiv0>
 8000b38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b40:	f000 f806 	bl	8000b50 <__udivmoddi4>
 8000b44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b4c:	b004      	add	sp, #16
 8000b4e:	4770      	bx	lr

08000b50 <__udivmoddi4>:
 8000b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b54:	468c      	mov	ip, r1
 8000b56:	460d      	mov	r5, r1
 8000b58:	4604      	mov	r4, r0
 8000b5a:	9e08      	ldr	r6, [sp, #32]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d151      	bne.n	8000c04 <__udivmoddi4+0xb4>
 8000b60:	428a      	cmp	r2, r1
 8000b62:	4617      	mov	r7, r2
 8000b64:	d96d      	bls.n	8000c42 <__udivmoddi4+0xf2>
 8000b66:	fab2 fe82 	clz	lr, r2
 8000b6a:	f1be 0f00 	cmp.w	lr, #0
 8000b6e:	d00b      	beq.n	8000b88 <__udivmoddi4+0x38>
 8000b70:	f1ce 0c20 	rsb	ip, lr, #32
 8000b74:	fa01 f50e 	lsl.w	r5, r1, lr
 8000b78:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000b7c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000b80:	ea4c 0c05 	orr.w	ip, ip, r5
 8000b84:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b88:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000b8c:	0c25      	lsrs	r5, r4, #16
 8000b8e:	fbbc f8fa 	udiv	r8, ip, sl
 8000b92:	fa1f f987 	uxth.w	r9, r7
 8000b96:	fb0a cc18 	mls	ip, sl, r8, ip
 8000b9a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000b9e:	fb08 f309 	mul.w	r3, r8, r9
 8000ba2:	42ab      	cmp	r3, r5
 8000ba4:	d90a      	bls.n	8000bbc <__udivmoddi4+0x6c>
 8000ba6:	19ed      	adds	r5, r5, r7
 8000ba8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000bac:	f080 8123 	bcs.w	8000df6 <__udivmoddi4+0x2a6>
 8000bb0:	42ab      	cmp	r3, r5
 8000bb2:	f240 8120 	bls.w	8000df6 <__udivmoddi4+0x2a6>
 8000bb6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bba:	443d      	add	r5, r7
 8000bbc:	1aed      	subs	r5, r5, r3
 8000bbe:	b2a4      	uxth	r4, r4
 8000bc0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000bc4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000bc8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bcc:	fb00 f909 	mul.w	r9, r0, r9
 8000bd0:	45a1      	cmp	r9, r4
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x98>
 8000bd4:	19e4      	adds	r4, r4, r7
 8000bd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bda:	f080 810a 	bcs.w	8000df2 <__udivmoddi4+0x2a2>
 8000bde:	45a1      	cmp	r9, r4
 8000be0:	f240 8107 	bls.w	8000df2 <__udivmoddi4+0x2a2>
 8000be4:	3802      	subs	r0, #2
 8000be6:	443c      	add	r4, r7
 8000be8:	eba4 0409 	sub.w	r4, r4, r9
 8000bec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2e00      	cmp	r6, #0
 8000bf4:	d061      	beq.n	8000cba <__udivmoddi4+0x16a>
 8000bf6:	fa24 f40e 	lsr.w	r4, r4, lr
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	6034      	str	r4, [r6, #0]
 8000bfe:	6073      	str	r3, [r6, #4]
 8000c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c04:	428b      	cmp	r3, r1
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0xc8>
 8000c08:	2e00      	cmp	r6, #0
 8000c0a:	d054      	beq.n	8000cb6 <__udivmoddi4+0x166>
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c12:	4608      	mov	r0, r1
 8000c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c18:	fab3 f183 	clz	r1, r3
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	f040 808e 	bne.w	8000d3e <__udivmoddi4+0x1ee>
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0xdc>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80fa 	bhi.w	8000e20 <__udivmoddi4+0x2d0>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb65 0503 	sbc.w	r5, r5, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	46ac      	mov	ip, r5
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d03f      	beq.n	8000cba <__udivmoddi4+0x16a>
 8000c3a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	b912      	cbnz	r2, 8000c4a <__udivmoddi4+0xfa>
 8000c44:	2701      	movs	r7, #1
 8000c46:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c4a:	fab7 fe87 	clz	lr, r7
 8000c4e:	f1be 0f00 	cmp.w	lr, #0
 8000c52:	d134      	bne.n	8000cbe <__udivmoddi4+0x16e>
 8000c54:	1beb      	subs	r3, r5, r7
 8000c56:	0c3a      	lsrs	r2, r7, #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000c62:	0c25      	lsrs	r5, r4, #16
 8000c64:	fb02 3318 	mls	r3, r2, r8, r3
 8000c68:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c6c:	fb0c f308 	mul.w	r3, ip, r8
 8000c70:	42ab      	cmp	r3, r5
 8000c72:	d907      	bls.n	8000c84 <__udivmoddi4+0x134>
 8000c74:	19ed      	adds	r5, r5, r7
 8000c76:	f108 30ff 	add.w	r0, r8, #4294967295
 8000c7a:	d202      	bcs.n	8000c82 <__udivmoddi4+0x132>
 8000c7c:	42ab      	cmp	r3, r5
 8000c7e:	f200 80d1 	bhi.w	8000e24 <__udivmoddi4+0x2d4>
 8000c82:	4680      	mov	r8, r0
 8000c84:	1aed      	subs	r5, r5, r3
 8000c86:	b2a3      	uxth	r3, r4
 8000c88:	fbb5 f0f2 	udiv	r0, r5, r2
 8000c8c:	fb02 5510 	mls	r5, r2, r0, r5
 8000c90:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c94:	fb0c fc00 	mul.w	ip, ip, r0
 8000c98:	45a4      	cmp	ip, r4
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0x15c>
 8000c9c:	19e4      	adds	r4, r4, r7
 8000c9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x15a>
 8000ca4:	45a4      	cmp	ip, r4
 8000ca6:	f200 80b8 	bhi.w	8000e1a <__udivmoddi4+0x2ca>
 8000caa:	4618      	mov	r0, r3
 8000cac:	eba4 040c 	sub.w	r4, r4, ip
 8000cb0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cb4:	e79d      	b.n	8000bf2 <__udivmoddi4+0xa2>
 8000cb6:	4631      	mov	r1, r6
 8000cb8:	4630      	mov	r0, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	f1ce 0420 	rsb	r4, lr, #32
 8000cc2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000cc6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000cca:	fa20 f804 	lsr.w	r8, r0, r4
 8000cce:	0c3a      	lsrs	r2, r7, #16
 8000cd0:	fa25 f404 	lsr.w	r4, r5, r4
 8000cd4:	ea48 0803 	orr.w	r8, r8, r3
 8000cd8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000cdc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000ce0:	fb02 4411 	mls	r4, r2, r1, r4
 8000ce4:	fa1f fc87 	uxth.w	ip, r7
 8000ce8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000cec:	fb01 f30c 	mul.w	r3, r1, ip
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cf6:	d909      	bls.n	8000d0c <__udivmoddi4+0x1bc>
 8000cf8:	19ed      	adds	r5, r5, r7
 8000cfa:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cfe:	f080 808a 	bcs.w	8000e16 <__udivmoddi4+0x2c6>
 8000d02:	42ab      	cmp	r3, r5
 8000d04:	f240 8087 	bls.w	8000e16 <__udivmoddi4+0x2c6>
 8000d08:	3902      	subs	r1, #2
 8000d0a:	443d      	add	r5, r7
 8000d0c:	1aeb      	subs	r3, r5, r3
 8000d0e:	fa1f f588 	uxth.w	r5, r8
 8000d12:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d16:	fb02 3310 	mls	r3, r2, r0, r3
 8000d1a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d1e:	fb00 f30c 	mul.w	r3, r0, ip
 8000d22:	42ab      	cmp	r3, r5
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x1e6>
 8000d26:	19ed      	adds	r5, r5, r7
 8000d28:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d2c:	d26f      	bcs.n	8000e0e <__udivmoddi4+0x2be>
 8000d2e:	42ab      	cmp	r3, r5
 8000d30:	d96d      	bls.n	8000e0e <__udivmoddi4+0x2be>
 8000d32:	3802      	subs	r0, #2
 8000d34:	443d      	add	r5, r7
 8000d36:	1aeb      	subs	r3, r5, r3
 8000d38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3c:	e78f      	b.n	8000c5e <__udivmoddi4+0x10e>
 8000d3e:	f1c1 0720 	rsb	r7, r1, #32
 8000d42:	fa22 f807 	lsr.w	r8, r2, r7
 8000d46:	408b      	lsls	r3, r1
 8000d48:	fa05 f401 	lsl.w	r4, r5, r1
 8000d4c:	ea48 0303 	orr.w	r3, r8, r3
 8000d50:	fa20 fe07 	lsr.w	lr, r0, r7
 8000d54:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000d58:	40fd      	lsrs	r5, r7
 8000d5a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000d5e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000d62:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000d66:	fb0c 5519 	mls	r5, ip, r9, r5
 8000d6a:	fa1f f883 	uxth.w	r8, r3
 8000d6e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000d72:	fb09 f408 	mul.w	r4, r9, r8
 8000d76:	42ac      	cmp	r4, r5
 8000d78:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x244>
 8000d82:	18ed      	adds	r5, r5, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	d243      	bcs.n	8000e12 <__udivmoddi4+0x2c2>
 8000d8a:	42ac      	cmp	r4, r5
 8000d8c:	d941      	bls.n	8000e12 <__udivmoddi4+0x2c2>
 8000d8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d92:	441d      	add	r5, r3
 8000d94:	1b2d      	subs	r5, r5, r4
 8000d96:	fa1f fe8e 	uxth.w	lr, lr
 8000d9a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000d9e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000da2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000da6:	fb00 f808 	mul.w	r8, r0, r8
 8000daa:	45a0      	cmp	r8, r4
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x26e>
 8000dae:	18e4      	adds	r4, r4, r3
 8000db0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000db4:	d229      	bcs.n	8000e0a <__udivmoddi4+0x2ba>
 8000db6:	45a0      	cmp	r8, r4
 8000db8:	d927      	bls.n	8000e0a <__udivmoddi4+0x2ba>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	441c      	add	r4, r3
 8000dbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc2:	eba4 0408 	sub.w	r4, r4, r8
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	454c      	cmp	r4, r9
 8000dcc:	46c6      	mov	lr, r8
 8000dce:	464d      	mov	r5, r9
 8000dd0:	d315      	bcc.n	8000dfe <__udivmoddi4+0x2ae>
 8000dd2:	d012      	beq.n	8000dfa <__udivmoddi4+0x2aa>
 8000dd4:	b156      	cbz	r6, 8000dec <__udivmoddi4+0x29c>
 8000dd6:	ebba 030e 	subs.w	r3, sl, lr
 8000dda:	eb64 0405 	sbc.w	r4, r4, r5
 8000dde:	fa04 f707 	lsl.w	r7, r4, r7
 8000de2:	40cb      	lsrs	r3, r1
 8000de4:	431f      	orrs	r7, r3
 8000de6:	40cc      	lsrs	r4, r1
 8000de8:	6037      	str	r7, [r6, #0]
 8000dea:	6074      	str	r4, [r6, #4]
 8000dec:	2100      	movs	r1, #0
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	4618      	mov	r0, r3
 8000df4:	e6f8      	b.n	8000be8 <__udivmoddi4+0x98>
 8000df6:	4690      	mov	r8, r2
 8000df8:	e6e0      	b.n	8000bbc <__udivmoddi4+0x6c>
 8000dfa:	45c2      	cmp	sl, r8
 8000dfc:	d2ea      	bcs.n	8000dd4 <__udivmoddi4+0x284>
 8000dfe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e02:	eb69 0503 	sbc.w	r5, r9, r3
 8000e06:	3801      	subs	r0, #1
 8000e08:	e7e4      	b.n	8000dd4 <__udivmoddi4+0x284>
 8000e0a:	4628      	mov	r0, r5
 8000e0c:	e7d7      	b.n	8000dbe <__udivmoddi4+0x26e>
 8000e0e:	4640      	mov	r0, r8
 8000e10:	e791      	b.n	8000d36 <__udivmoddi4+0x1e6>
 8000e12:	4681      	mov	r9, r0
 8000e14:	e7be      	b.n	8000d94 <__udivmoddi4+0x244>
 8000e16:	4601      	mov	r1, r0
 8000e18:	e778      	b.n	8000d0c <__udivmoddi4+0x1bc>
 8000e1a:	3802      	subs	r0, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	e745      	b.n	8000cac <__udivmoddi4+0x15c>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e708      	b.n	8000c36 <__udivmoddi4+0xe6>
 8000e24:	f1a8 0802 	sub.w	r8, r8, #2
 8000e28:	443d      	add	r5, r7
 8000e2a:	e72b      	b.n	8000c84 <__udivmoddi4+0x134>

08000e2c <__aeabi_idiv0>:
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b510      	push	{r4, lr}
 8000e32:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e34:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <HAL_InitTick+0x40>)
 8000e36:	7818      	ldrb	r0, [r3, #0]
 8000e38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e40:	4a0c      	ldr	r2, [pc, #48]	; (8000e74 <HAL_InitTick+0x44>)
 8000e42:	6810      	ldr	r0, [r2, #0]
 8000e44:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e48:	f000 f888 	bl	8000f5c <HAL_SYSTICK_Config>
 8000e4c:	b968      	cbnz	r0, 8000e6a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4e:	2c0f      	cmp	r4, #15
 8000e50:	d901      	bls.n	8000e56 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000e52:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000e54:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e56:	2200      	movs	r2, #0
 8000e58:	4621      	mov	r1, r4
 8000e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5e:	f000 f84b 	bl	8000ef8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e62:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <HAL_InitTick+0x48>)
 8000e64:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000e66:	2000      	movs	r0, #0
 8000e68:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	bd10      	pop	{r4, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000000 	.word	0x20000000
 8000e74:	20000008 	.word	0x20000008
 8000e78:	20000004 	.word	0x20000004

08000e7c <HAL_Init>:
{
 8000e7c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <HAL_Init+0x30>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e86:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e8e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e96:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e98:	2003      	movs	r0, #3
 8000e9a:	f000 f81b 	bl	8000ed4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f7ff ffc6 	bl	8000e30 <HAL_InitTick>
  HAL_MspInit();
 8000ea4:	f000 fed6 	bl	8001c54 <HAL_MspInit>
}
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	bd08      	pop	{r3, pc}
 8000eac:	40023c00 	.word	0x40023c00

08000eb0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000eb0:	4a03      	ldr	r2, [pc, #12]	; (8000ec0 <HAL_IncTick+0x10>)
 8000eb2:	6811      	ldr	r1, [r2, #0]
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <HAL_IncTick+0x14>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	440b      	add	r3, r1
 8000eba:	6013      	str	r3, [r2, #0]
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000204 	.word	0x20000204
 8000ec4:	20000000 	.word	0x20000000

08000ec8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ec8:	4b01      	ldr	r3, [pc, #4]	; (8000ed0 <HAL_GetTick+0x8>)
 8000eca:	6818      	ldr	r0, [r3, #0]
}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000204 	.word	0x20000204

08000ed4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed4:	4a07      	ldr	r2, [pc, #28]	; (8000ef4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000ed6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000edc:	041b      	lsls	r3, r3, #16
 8000ede:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee0:	0200      	lsls	r0, r0, #8
 8000ee2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee6:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000ee8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000eec:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000ef0:	60d0      	str	r0, [r2, #12]
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000efa:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <HAL_NVIC_SetPriority+0x5c>)
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f02:	f1c3 0407 	rsb	r4, r3, #7
 8000f06:	2c04      	cmp	r4, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0c:	1d1d      	adds	r5, r3, #4
 8000f0e:	2d06      	cmp	r5, #6
 8000f10:	d917      	bls.n	8000f42 <HAL_NVIC_SetPriority+0x4a>
 8000f12:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	2501      	movs	r5, #1
 8000f16:	fa05 f404 	lsl.w	r4, r5, r4
 8000f1a:	3c01      	subs	r4, #1
 8000f1c:	4021      	ands	r1, r4
 8000f1e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f20:	fa05 f303 	lsl.w	r3, r5, r3
 8000f24:	3b01      	subs	r3, #1
 8000f26:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	db0b      	blt.n	8000f46 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2e:	0109      	lsls	r1, r1, #4
 8000f30:	b2c9      	uxtb	r1, r1
 8000f32:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000f36:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000f3a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f3e:	bc30      	pop	{r4, r5}
 8000f40:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f42:	2300      	movs	r3, #0
 8000f44:	e7e6      	b.n	8000f14 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f46:	f000 000f 	and.w	r0, r0, #15
 8000f4a:	0109      	lsls	r1, r1, #4
 8000f4c:	b2c9      	uxtb	r1, r1
 8000f4e:	4b02      	ldr	r3, [pc, #8]	; (8000f58 <HAL_NVIC_SetPriority+0x60>)
 8000f50:	5419      	strb	r1, [r3, r0]
 8000f52:	e7f4      	b.n	8000f3e <HAL_NVIC_SetPriority+0x46>
 8000f54:	e000ed00 	.word	0xe000ed00
 8000f58:	e000ed14 	.word	0xe000ed14

08000f5c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f5c:	3801      	subs	r0, #1
 8000f5e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000f62:	d20a      	bcs.n	8000f7a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_SYSTICK_Config+0x24>)
 8000f66:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	21f0      	movs	r1, #240	; 0xf0
 8000f6a:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <HAL_SYSTICK_Config+0x28>)
 8000f6c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f70:	2000      	movs	r0, #0
 8000f72:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f74:	2207      	movs	r2, #7
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f7a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000e010 	.word	0xe000e010
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8a:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f8c:	2400      	movs	r4, #0
 8000f8e:	e04b      	b.n	8001028 <HAL_GPIO_Init+0xa0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f90:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8000f94:	f10e 0e08 	add.w	lr, lr, #8
 8000f98:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f9c:	f004 0607 	and.w	r6, r4, #7
 8000fa0:	00b6      	lsls	r6, r6, #2
 8000fa2:	270f      	movs	r7, #15
 8000fa4:	40b7      	lsls	r7, r6
 8000fa6:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000faa:	690f      	ldr	r7, [r1, #16]
 8000fac:	fa07 f606 	lsl.w	r6, r7, r6
 8000fb0:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 8000fb2:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 8000fb6:	e046      	b.n	8001046 <HAL_GPIO_Init+0xbe>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fb8:	2609      	movs	r6, #9
 8000fba:	e000      	b.n	8000fbe <HAL_GPIO_Init+0x36>
 8000fbc:	2600      	movs	r6, #0
 8000fbe:	fa06 f60e 	lsl.w	r6, r6, lr
 8000fc2:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc4:	3302      	adds	r3, #2
 8000fc6:	4e64      	ldr	r6, [pc, #400]	; (8001158 <HAL_GPIO_Init+0x1d0>)
 8000fc8:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fcc:	4b63      	ldr	r3, [pc, #396]	; (800115c <HAL_GPIO_Init+0x1d4>)
 8000fce:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8000fd0:	43eb      	mvns	r3, r5
 8000fd2:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fd6:	684f      	ldr	r7, [r1, #4]
 8000fd8:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000fdc:	d001      	beq.n	8000fe2 <HAL_GPIO_Init+0x5a>
        {
          temp |= iocurrent;
 8000fde:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 8000fe2:	4a5e      	ldr	r2, [pc, #376]	; (800115c <HAL_GPIO_Init+0x1d4>)
 8000fe4:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000fe6:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000fe8:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fec:	684f      	ldr	r7, [r1, #4]
 8000fee:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000ff2:	d001      	beq.n	8000ff8 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8000ff4:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 8000ff8:	4a58      	ldr	r2, [pc, #352]	; (800115c <HAL_GPIO_Init+0x1d4>)
 8000ffa:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ffc:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000ffe:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001002:	684f      	ldr	r7, [r1, #4]
 8001004:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001008:	d001      	beq.n	800100e <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 800100a:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 800100e:	4a53      	ldr	r2, [pc, #332]	; (800115c <HAL_GPIO_Init+0x1d4>)
 8001010:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8001012:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001014:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001016:	684e      	ldr	r6, [r1, #4]
 8001018:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800101c:	d001      	beq.n	8001022 <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 800101e:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 8001022:	4a4e      	ldr	r2, [pc, #312]	; (800115c <HAL_GPIO_Init+0x1d4>)
 8001024:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001026:	3401      	adds	r4, #1
 8001028:	2c0f      	cmp	r4, #15
 800102a:	f200 8092 	bhi.w	8001152 <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 800102e:	2301      	movs	r3, #1
 8001030:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001032:	680a      	ldr	r2, [r1, #0]
 8001034:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 8001038:	42ab      	cmp	r3, r5
 800103a:	d1f4      	bne.n	8001026 <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800103c:	684a      	ldr	r2, [r1, #4]
 800103e:	2a02      	cmp	r2, #2
 8001040:	d0a6      	beq.n	8000f90 <HAL_GPIO_Init+0x8>
 8001042:	2a12      	cmp	r2, #18
 8001044:	d0a4      	beq.n	8000f90 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8001046:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001048:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 800104c:	2203      	movs	r2, #3
 800104e:	fa02 f20e 	lsl.w	r2, r2, lr
 8001052:	43d2      	mvns	r2, r2
 8001054:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001056:	684f      	ldr	r7, [r1, #4]
 8001058:	f007 0703 	and.w	r7, r7, #3
 800105c:	fa07 f70e 	lsl.w	r7, r7, lr
 8001060:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8001062:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001064:	684e      	ldr	r6, [r1, #4]
 8001066:	1e77      	subs	r7, r6, #1
 8001068:	2f01      	cmp	r7, #1
 800106a:	d903      	bls.n	8001074 <HAL_GPIO_Init+0xec>
 800106c:	2e11      	cmp	r6, #17
 800106e:	d001      	beq.n	8001074 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001070:	2e12      	cmp	r6, #18
 8001072:	d10f      	bne.n	8001094 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->OSPEEDR; 
 8001074:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001076:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001078:	68cf      	ldr	r7, [r1, #12]
 800107a:	fa07 f70e 	lsl.w	r7, r7, lr
 800107e:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8001080:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001082:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001084:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001088:	684e      	ldr	r6, [r1, #4]
 800108a:	f3c6 1600 	ubfx	r6, r6, #4, #1
 800108e:	40a6      	lsls	r6, r4
 8001090:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8001092:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8001094:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001096:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001098:	688b      	ldr	r3, [r1, #8]
 800109a:	fa03 f30e 	lsl.w	r3, r3, lr
 800109e:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 80010a0:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010a2:	684b      	ldr	r3, [r1, #4]
 80010a4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80010a8:	d0bd      	beq.n	8001026 <HAL_GPIO_Init+0x9e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	9301      	str	r3, [sp, #4]
 80010ae:	4b2c      	ldr	r3, [pc, #176]	; (8001160 <HAL_GPIO_Init+0x1d8>)
 80010b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010b6:	645a      	str	r2, [r3, #68]	; 0x44
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80010c2:	08a3      	lsrs	r3, r4, #2
 80010c4:	1c9e      	adds	r6, r3, #2
 80010c6:	4a24      	ldr	r2, [pc, #144]	; (8001158 <HAL_GPIO_Init+0x1d0>)
 80010c8:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010cc:	f004 0603 	and.w	r6, r4, #3
 80010d0:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 80010d4:	260f      	movs	r6, #15
 80010d6:	fa06 f60e 	lsl.w	r6, r6, lr
 80010da:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010de:	4f21      	ldr	r7, [pc, #132]	; (8001164 <HAL_GPIO_Init+0x1dc>)
 80010e0:	42b8      	cmp	r0, r7
 80010e2:	f43f af6b 	beq.w	8000fbc <HAL_GPIO_Init+0x34>
 80010e6:	4e20      	ldr	r6, [pc, #128]	; (8001168 <HAL_GPIO_Init+0x1e0>)
 80010e8:	42b0      	cmp	r0, r6
 80010ea:	d022      	beq.n	8001132 <HAL_GPIO_Init+0x1aa>
 80010ec:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80010f0:	42b0      	cmp	r0, r6
 80010f2:	d020      	beq.n	8001136 <HAL_GPIO_Init+0x1ae>
 80010f4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80010f8:	42b0      	cmp	r0, r6
 80010fa:	d01e      	beq.n	800113a <HAL_GPIO_Init+0x1b2>
 80010fc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001100:	42b0      	cmp	r0, r6
 8001102:	d01c      	beq.n	800113e <HAL_GPIO_Init+0x1b6>
 8001104:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001108:	42b0      	cmp	r0, r6
 800110a:	d01a      	beq.n	8001142 <HAL_GPIO_Init+0x1ba>
 800110c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001110:	42b0      	cmp	r0, r6
 8001112:	d018      	beq.n	8001146 <HAL_GPIO_Init+0x1be>
 8001114:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001118:	42b0      	cmp	r0, r6
 800111a:	d016      	beq.n	800114a <HAL_GPIO_Init+0x1c2>
 800111c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001120:	42b0      	cmp	r0, r6
 8001122:	d014      	beq.n	800114e <HAL_GPIO_Init+0x1c6>
 8001124:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001128:	42b0      	cmp	r0, r6
 800112a:	f43f af45 	beq.w	8000fb8 <HAL_GPIO_Init+0x30>
 800112e:	260a      	movs	r6, #10
 8001130:	e745      	b.n	8000fbe <HAL_GPIO_Init+0x36>
 8001132:	2601      	movs	r6, #1
 8001134:	e743      	b.n	8000fbe <HAL_GPIO_Init+0x36>
 8001136:	2602      	movs	r6, #2
 8001138:	e741      	b.n	8000fbe <HAL_GPIO_Init+0x36>
 800113a:	2603      	movs	r6, #3
 800113c:	e73f      	b.n	8000fbe <HAL_GPIO_Init+0x36>
 800113e:	2604      	movs	r6, #4
 8001140:	e73d      	b.n	8000fbe <HAL_GPIO_Init+0x36>
 8001142:	2605      	movs	r6, #5
 8001144:	e73b      	b.n	8000fbe <HAL_GPIO_Init+0x36>
 8001146:	2606      	movs	r6, #6
 8001148:	e739      	b.n	8000fbe <HAL_GPIO_Init+0x36>
 800114a:	2607      	movs	r6, #7
 800114c:	e737      	b.n	8000fbe <HAL_GPIO_Init+0x36>
 800114e:	2608      	movs	r6, #8
 8001150:	e735      	b.n	8000fbe <HAL_GPIO_Init+0x36>
      }
    }
  }
}
 8001152:	b003      	add	sp, #12
 8001154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001156:	bf00      	nop
 8001158:	40013800 	.word	0x40013800
 800115c:	40013c00 	.word	0x40013c00
 8001160:	40023800 	.word	0x40023800
 8001164:	40020000 	.word	0x40020000
 8001168:	40020400 	.word	0x40020400

0800116c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800116c:	b912      	cbnz	r2, 8001174 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800116e:	0409      	lsls	r1, r1, #16
 8001170:	6181      	str	r1, [r0, #24]
 8001172:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001174:	6181      	str	r1, [r0, #24]
 8001176:	4770      	bx	lr

08001178 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001178:	6943      	ldr	r3, [r0, #20]
 800117a:	ea31 0303 	bics.w	r3, r1, r3
 800117e:	d001      	beq.n	8001184 <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8001180:	6181      	str	r1, [r0, #24]
 8001182:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001184:	0409      	lsls	r1, r1, #16
 8001186:	6181      	str	r1, [r0, #24]
 8001188:	4770      	bx	lr
	...

0800118c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800118c:	2800      	cmp	r0, #0
 800118e:	f000 81bb 	beq.w	8001508 <HAL_RCC_OscConfig+0x37c>
{
 8001192:	b570      	push	{r4, r5, r6, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001198:	6803      	ldr	r3, [r0, #0]
 800119a:	f013 0f01 	tst.w	r3, #1
 800119e:	d03b      	beq.n	8001218 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011a0:	4ba7      	ldr	r3, [pc, #668]	; (8001440 <HAL_RCC_OscConfig+0x2b4>)
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f003 030c 	and.w	r3, r3, #12
 80011a8:	2b04      	cmp	r3, #4
 80011aa:	d02c      	beq.n	8001206 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ac:	4ba4      	ldr	r3, [pc, #656]	; (8001440 <HAL_RCC_OscConfig+0x2b4>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011b4:	2b08      	cmp	r3, #8
 80011b6:	d021      	beq.n	80011fc <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b8:	6863      	ldr	r3, [r4, #4]
 80011ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011be:	d04f      	beq.n	8001260 <HAL_RCC_OscConfig+0xd4>
 80011c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011c4:	d052      	beq.n	800126c <HAL_RCC_OscConfig+0xe0>
 80011c6:	4b9e      	ldr	r3, [pc, #632]	; (8001440 <HAL_RCC_OscConfig+0x2b4>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011d6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011d8:	6863      	ldr	r3, [r4, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d050      	beq.n	8001280 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011de:	f7ff fe73 	bl	8000ec8 <HAL_GetTick>
 80011e2:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e4:	4b96      	ldr	r3, [pc, #600]	; (8001440 <HAL_RCC_OscConfig+0x2b4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80011ec:	d114      	bne.n	8001218 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ee:	f7ff fe6b 	bl	8000ec8 <HAL_GetTick>
 80011f2:	1b40      	subs	r0, r0, r5
 80011f4:	2864      	cmp	r0, #100	; 0x64
 80011f6:	d9f5      	bls.n	80011e4 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80011f8:	2003      	movs	r0, #3
 80011fa:	e18a      	b.n	8001512 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011fc:	4b90      	ldr	r3, [pc, #576]	; (8001440 <HAL_RCC_OscConfig+0x2b4>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001204:	d0d8      	beq.n	80011b8 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001206:	4b8e      	ldr	r3, [pc, #568]	; (8001440 <HAL_RCC_OscConfig+0x2b4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800120e:	d003      	beq.n	8001218 <HAL_RCC_OscConfig+0x8c>
 8001210:	6863      	ldr	r3, [r4, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 817a 	beq.w	800150c <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001218:	6823      	ldr	r3, [r4, #0]
 800121a:	f013 0f02 	tst.w	r3, #2
 800121e:	d055      	beq.n	80012cc <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001220:	4b87      	ldr	r3, [pc, #540]	; (8001440 <HAL_RCC_OscConfig+0x2b4>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f013 0f0c 	tst.w	r3, #12
 8001228:	d03e      	beq.n	80012a8 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800122a:	4b85      	ldr	r3, [pc, #532]	; (8001440 <HAL_RCC_OscConfig+0x2b4>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001232:	2b08      	cmp	r3, #8
 8001234:	d033      	beq.n	800129e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001236:	68e3      	ldr	r3, [r4, #12]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d068      	beq.n	800130e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800123c:	2201      	movs	r2, #1
 800123e:	4b81      	ldr	r3, [pc, #516]	; (8001444 <HAL_RCC_OscConfig+0x2b8>)
 8001240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001242:	f7ff fe41 	bl	8000ec8 <HAL_GetTick>
 8001246:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001248:	4b7d      	ldr	r3, [pc, #500]	; (8001440 <HAL_RCC_OscConfig+0x2b4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f013 0f02 	tst.w	r3, #2
 8001250:	d154      	bne.n	80012fc <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001252:	f7ff fe39 	bl	8000ec8 <HAL_GetTick>
 8001256:	1b40      	subs	r0, r0, r5
 8001258:	2802      	cmp	r0, #2
 800125a:	d9f5      	bls.n	8001248 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800125c:	2003      	movs	r0, #3
 800125e:	e158      	b.n	8001512 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001260:	4a77      	ldr	r2, [pc, #476]	; (8001440 <HAL_RCC_OscConfig+0x2b4>)
 8001262:	6813      	ldr	r3, [r2, #0]
 8001264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	e7b5      	b.n	80011d8 <HAL_RCC_OscConfig+0x4c>
 800126c:	4b74      	ldr	r3, [pc, #464]	; (8001440 <HAL_RCC_OscConfig+0x2b4>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	e7ab      	b.n	80011d8 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001280:	f7ff fe22 	bl	8000ec8 <HAL_GetTick>
 8001284:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001286:	4b6e      	ldr	r3, [pc, #440]	; (8001440 <HAL_RCC_OscConfig+0x2b4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800128e:	d0c3      	beq.n	8001218 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001290:	f7ff fe1a 	bl	8000ec8 <HAL_GetTick>
 8001294:	1b40      	subs	r0, r0, r5
 8001296:	2864      	cmp	r0, #100	; 0x64
 8001298:	d9f5      	bls.n	8001286 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800129a:	2003      	movs	r0, #3
 800129c:	e139      	b.n	8001512 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800129e:	4b68      	ldr	r3, [pc, #416]	; (8001440 <HAL_RCC_OscConfig+0x2b4>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80012a6:	d1c6      	bne.n	8001236 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a8:	4b65      	ldr	r3, [pc, #404]	; (8001440 <HAL_RCC_OscConfig+0x2b4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f013 0f02 	tst.w	r3, #2
 80012b0:	d004      	beq.n	80012bc <HAL_RCC_OscConfig+0x130>
 80012b2:	68e3      	ldr	r3, [r4, #12]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d001      	beq.n	80012bc <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 80012b8:	2001      	movs	r0, #1
 80012ba:	e12a      	b.n	8001512 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012bc:	4a60      	ldr	r2, [pc, #384]	; (8001440 <HAL_RCC_OscConfig+0x2b4>)
 80012be:	6813      	ldr	r3, [r2, #0]
 80012c0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80012c4:	6921      	ldr	r1, [r4, #16]
 80012c6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80012ca:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012cc:	6823      	ldr	r3, [r4, #0]
 80012ce:	f013 0f08 	tst.w	r3, #8
 80012d2:	d040      	beq.n	8001356 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012d4:	6963      	ldr	r3, [r4, #20]
 80012d6:	b363      	cbz	r3, 8001332 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012d8:	2201      	movs	r2, #1
 80012da:	4b5b      	ldr	r3, [pc, #364]	; (8001448 <HAL_RCC_OscConfig+0x2bc>)
 80012dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012de:	f7ff fdf3 	bl	8000ec8 <HAL_GetTick>
 80012e2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e4:	4b56      	ldr	r3, [pc, #344]	; (8001440 <HAL_RCC_OscConfig+0x2b4>)
 80012e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012e8:	f013 0f02 	tst.w	r3, #2
 80012ec:	d133      	bne.n	8001356 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ee:	f7ff fdeb 	bl	8000ec8 <HAL_GetTick>
 80012f2:	1b40      	subs	r0, r0, r5
 80012f4:	2802      	cmp	r0, #2
 80012f6:	d9f5      	bls.n	80012e4 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80012f8:	2003      	movs	r0, #3
 80012fa:	e10a      	b.n	8001512 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fc:	4a50      	ldr	r2, [pc, #320]	; (8001440 <HAL_RCC_OscConfig+0x2b4>)
 80012fe:	6813      	ldr	r3, [r2, #0]
 8001300:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001304:	6921      	ldr	r1, [r4, #16]
 8001306:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	e7de      	b.n	80012cc <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 800130e:	2200      	movs	r2, #0
 8001310:	4b4c      	ldr	r3, [pc, #304]	; (8001444 <HAL_RCC_OscConfig+0x2b8>)
 8001312:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001314:	f7ff fdd8 	bl	8000ec8 <HAL_GetTick>
 8001318:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131a:	4b49      	ldr	r3, [pc, #292]	; (8001440 <HAL_RCC_OscConfig+0x2b4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f013 0f02 	tst.w	r3, #2
 8001322:	d0d3      	beq.n	80012cc <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001324:	f7ff fdd0 	bl	8000ec8 <HAL_GetTick>
 8001328:	1b40      	subs	r0, r0, r5
 800132a:	2802      	cmp	r0, #2
 800132c:	d9f5      	bls.n	800131a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800132e:	2003      	movs	r0, #3
 8001330:	e0ef      	b.n	8001512 <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001332:	2200      	movs	r2, #0
 8001334:	4b44      	ldr	r3, [pc, #272]	; (8001448 <HAL_RCC_OscConfig+0x2bc>)
 8001336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001338:	f7ff fdc6 	bl	8000ec8 <HAL_GetTick>
 800133c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800133e:	4b40      	ldr	r3, [pc, #256]	; (8001440 <HAL_RCC_OscConfig+0x2b4>)
 8001340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001342:	f013 0f02 	tst.w	r3, #2
 8001346:	d006      	beq.n	8001356 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001348:	f7ff fdbe 	bl	8000ec8 <HAL_GetTick>
 800134c:	1b40      	subs	r0, r0, r5
 800134e:	2802      	cmp	r0, #2
 8001350:	d9f5      	bls.n	800133e <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8001352:	2003      	movs	r0, #3
 8001354:	e0dd      	b.n	8001512 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001356:	6823      	ldr	r3, [r4, #0]
 8001358:	f013 0f04 	tst.w	r3, #4
 800135c:	d079      	beq.n	8001452 <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800135e:	4b38      	ldr	r3, [pc, #224]	; (8001440 <HAL_RCC_OscConfig+0x2b4>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001366:	d133      	bne.n	80013d0 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001368:	2300      	movs	r3, #0
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	4b34      	ldr	r3, [pc, #208]	; (8001440 <HAL_RCC_OscConfig+0x2b4>)
 800136e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001370:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001374:	641a      	str	r2, [r3, #64]	; 0x40
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001380:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001382:	4b32      	ldr	r3, [pc, #200]	; (800144c <HAL_RCC_OscConfig+0x2c0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f413 7f80 	tst.w	r3, #256	; 0x100
 800138a:	d023      	beq.n	80013d4 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800138c:	68a3      	ldr	r3, [r4, #8]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d034      	beq.n	80013fc <HAL_RCC_OscConfig+0x270>
 8001392:	2b05      	cmp	r3, #5
 8001394:	d038      	beq.n	8001408 <HAL_RCC_OscConfig+0x27c>
 8001396:	4b2a      	ldr	r3, [pc, #168]	; (8001440 <HAL_RCC_OscConfig+0x2b4>)
 8001398:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800139a:	f022 0201 	bic.w	r2, r2, #1
 800139e:	671a      	str	r2, [r3, #112]	; 0x70
 80013a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80013a2:	f022 0204 	bic.w	r2, r2, #4
 80013a6:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013a8:	68a3      	ldr	r3, [r4, #8]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d036      	beq.n	800141c <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ae:	f7ff fd8b 	bl	8000ec8 <HAL_GetTick>
 80013b2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b4:	4b22      	ldr	r3, [pc, #136]	; (8001440 <HAL_RCC_OscConfig+0x2b4>)
 80013b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b8:	f013 0f02 	tst.w	r3, #2
 80013bc:	d148      	bne.n	8001450 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013be:	f7ff fd83 	bl	8000ec8 <HAL_GetTick>
 80013c2:	1b80      	subs	r0, r0, r6
 80013c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80013c8:	4298      	cmp	r0, r3
 80013ca:	d9f3      	bls.n	80013b4 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 80013cc:	2003      	movs	r0, #3
 80013ce:	e0a0      	b.n	8001512 <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 80013d0:	2500      	movs	r5, #0
 80013d2:	e7d6      	b.n	8001382 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013d4:	4a1d      	ldr	r2, [pc, #116]	; (800144c <HAL_RCC_OscConfig+0x2c0>)
 80013d6:	6813      	ldr	r3, [r2, #0]
 80013d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013dc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80013de:	f7ff fd73 	bl	8000ec8 <HAL_GetTick>
 80013e2:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e4:	4b19      	ldr	r3, [pc, #100]	; (800144c <HAL_RCC_OscConfig+0x2c0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80013ec:	d1ce      	bne.n	800138c <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ee:	f7ff fd6b 	bl	8000ec8 <HAL_GetTick>
 80013f2:	1b80      	subs	r0, r0, r6
 80013f4:	2802      	cmp	r0, #2
 80013f6:	d9f5      	bls.n	80013e4 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 80013f8:	2003      	movs	r0, #3
 80013fa:	e08a      	b.n	8001512 <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013fc:	4a10      	ldr	r2, [pc, #64]	; (8001440 <HAL_RCC_OscConfig+0x2b4>)
 80013fe:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6713      	str	r3, [r2, #112]	; 0x70
 8001406:	e7cf      	b.n	80013a8 <HAL_RCC_OscConfig+0x21c>
 8001408:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <HAL_RCC_OscConfig+0x2b4>)
 800140a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800140c:	f042 0204 	orr.w	r2, r2, #4
 8001410:	671a      	str	r2, [r3, #112]	; 0x70
 8001412:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001414:	f042 0201 	orr.w	r2, r2, #1
 8001418:	671a      	str	r2, [r3, #112]	; 0x70
 800141a:	e7c5      	b.n	80013a8 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141c:	f7ff fd54 	bl	8000ec8 <HAL_GetTick>
 8001420:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <HAL_RCC_OscConfig+0x2b4>)
 8001424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001426:	f013 0f02 	tst.w	r3, #2
 800142a:	d011      	beq.n	8001450 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800142c:	f7ff fd4c 	bl	8000ec8 <HAL_GetTick>
 8001430:	1b80      	subs	r0, r0, r6
 8001432:	f241 3388 	movw	r3, #5000	; 0x1388
 8001436:	4298      	cmp	r0, r3
 8001438:	d9f3      	bls.n	8001422 <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 800143a:	2003      	movs	r0, #3
 800143c:	e069      	b.n	8001512 <HAL_RCC_OscConfig+0x386>
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800
 8001444:	42470000 	.word	0x42470000
 8001448:	42470e80 	.word	0x42470e80
 800144c:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001450:	b9e5      	cbnz	r5, 800148c <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001452:	69a3      	ldr	r3, [r4, #24]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d05b      	beq.n	8001510 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001458:	4a30      	ldr	r2, [pc, #192]	; (800151c <HAL_RCC_OscConfig+0x390>)
 800145a:	6892      	ldr	r2, [r2, #8]
 800145c:	f002 020c 	and.w	r2, r2, #12
 8001460:	2a08      	cmp	r2, #8
 8001462:	d058      	beq.n	8001516 <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001464:	2b02      	cmp	r3, #2
 8001466:	d017      	beq.n	8001498 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001468:	2200      	movs	r2, #0
 800146a:	4b2d      	ldr	r3, [pc, #180]	; (8001520 <HAL_RCC_OscConfig+0x394>)
 800146c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146e:	f7ff fd2b 	bl	8000ec8 <HAL_GetTick>
 8001472:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001474:	4b29      	ldr	r3, [pc, #164]	; (800151c <HAL_RCC_OscConfig+0x390>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800147c:	d042      	beq.n	8001504 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800147e:	f7ff fd23 	bl	8000ec8 <HAL_GetTick>
 8001482:	1b00      	subs	r0, r0, r4
 8001484:	2802      	cmp	r0, #2
 8001486:	d9f5      	bls.n	8001474 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001488:	2003      	movs	r0, #3
 800148a:	e042      	b.n	8001512 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 800148c:	4a23      	ldr	r2, [pc, #140]	; (800151c <HAL_RCC_OscConfig+0x390>)
 800148e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001494:	6413      	str	r3, [r2, #64]	; 0x40
 8001496:	e7dc      	b.n	8001452 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8001498:	2200      	movs	r2, #0
 800149a:	4b21      	ldr	r3, [pc, #132]	; (8001520 <HAL_RCC_OscConfig+0x394>)
 800149c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800149e:	f7ff fd13 	bl	8000ec8 <HAL_GetTick>
 80014a2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a4:	4b1d      	ldr	r3, [pc, #116]	; (800151c <HAL_RCC_OscConfig+0x390>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014ac:	d006      	beq.n	80014bc <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ae:	f7ff fd0b 	bl	8000ec8 <HAL_GetTick>
 80014b2:	1b40      	subs	r0, r0, r5
 80014b4:	2802      	cmp	r0, #2
 80014b6:	d9f5      	bls.n	80014a4 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80014b8:	2003      	movs	r0, #3
 80014ba:	e02a      	b.n	8001512 <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014bc:	69e3      	ldr	r3, [r4, #28]
 80014be:	6a22      	ldr	r2, [r4, #32]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80014c4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80014c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80014ca:	0852      	lsrs	r2, r2, #1
 80014cc:	3a01      	subs	r2, #1
 80014ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80014d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80014d4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80014d8:	4a10      	ldr	r2, [pc, #64]	; (800151c <HAL_RCC_OscConfig+0x390>)
 80014da:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80014dc:	2201      	movs	r2, #1
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <HAL_RCC_OscConfig+0x394>)
 80014e0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014e2:	f7ff fcf1 	bl	8000ec8 <HAL_GetTick>
 80014e6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <HAL_RCC_OscConfig+0x390>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014f0:	d106      	bne.n	8001500 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f2:	f7ff fce9 	bl	8000ec8 <HAL_GetTick>
 80014f6:	1b00      	subs	r0, r0, r4
 80014f8:	2802      	cmp	r0, #2
 80014fa:	d9f5      	bls.n	80014e8 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80014fc:	2003      	movs	r0, #3
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001500:	2000      	movs	r0, #0
 8001502:	e006      	b.n	8001512 <HAL_RCC_OscConfig+0x386>
 8001504:	2000      	movs	r0, #0
 8001506:	e004      	b.n	8001512 <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8001508:	2001      	movs	r0, #1
 800150a:	4770      	bx	lr
        return HAL_ERROR;
 800150c:	2001      	movs	r0, #1
 800150e:	e000      	b.n	8001512 <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8001510:	2000      	movs	r0, #0
}
 8001512:	b002      	add	sp, #8
 8001514:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001516:	2001      	movs	r0, #1
 8001518:	e7fb      	b.n	8001512 <HAL_RCC_OscConfig+0x386>
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800
 8001520:	42470060 	.word	0x42470060

08001524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001526:	4b31      	ldr	r3, [pc, #196]	; (80015ec <HAL_RCC_GetSysClockFreq+0xc8>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 030c 	and.w	r3, r3, #12
 800152e:	2b04      	cmp	r3, #4
 8001530:	d059      	beq.n	80015e6 <HAL_RCC_GetSysClockFreq+0xc2>
 8001532:	2b08      	cmp	r3, #8
 8001534:	d001      	beq.n	800153a <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001536:	482e      	ldr	r0, [pc, #184]	; (80015f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800153a:	4b2c      	ldr	r3, [pc, #176]	; (80015ec <HAL_RCC_GetSysClockFreq+0xc8>)
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001548:	d02a      	beq.n	80015a0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800154a:	4b28      	ldr	r3, [pc, #160]	; (80015ec <HAL_RCC_GetSysClockFreq+0xc8>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001552:	461e      	mov	r6, r3
 8001554:	2700      	movs	r7, #0
 8001556:	015c      	lsls	r4, r3, #5
 8001558:	2500      	movs	r5, #0
 800155a:	1ae4      	subs	r4, r4, r3
 800155c:	eb65 0507 	sbc.w	r5, r5, r7
 8001560:	01a9      	lsls	r1, r5, #6
 8001562:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001566:	01a0      	lsls	r0, r4, #6
 8001568:	1b00      	subs	r0, r0, r4
 800156a:	eb61 0105 	sbc.w	r1, r1, r5
 800156e:	00cb      	lsls	r3, r1, #3
 8001570:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001574:	00c4      	lsls	r4, r0, #3
 8001576:	19a0      	adds	r0, r4, r6
 8001578:	eb43 0107 	adc.w	r1, r3, r7
 800157c:	024b      	lsls	r3, r1, #9
 800157e:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8001582:	0244      	lsls	r4, r0, #9
 8001584:	4620      	mov	r0, r4
 8001586:	4619      	mov	r1, r3
 8001588:	2300      	movs	r3, #0
 800158a:	f7ff fac9 	bl	8000b20 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800158e:	4b17      	ldr	r3, [pc, #92]	; (80015ec <HAL_RCC_GetSysClockFreq+0xc8>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001596:	3301      	adds	r3, #1
 8001598:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800159a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800159e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_RCC_GetSysClockFreq+0xc8>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80015a8:	461e      	mov	r6, r3
 80015aa:	2700      	movs	r7, #0
 80015ac:	015c      	lsls	r4, r3, #5
 80015ae:	2500      	movs	r5, #0
 80015b0:	1ae4      	subs	r4, r4, r3
 80015b2:	eb65 0507 	sbc.w	r5, r5, r7
 80015b6:	01a9      	lsls	r1, r5, #6
 80015b8:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80015bc:	01a0      	lsls	r0, r4, #6
 80015be:	1b00      	subs	r0, r0, r4
 80015c0:	eb61 0105 	sbc.w	r1, r1, r5
 80015c4:	00cb      	lsls	r3, r1, #3
 80015c6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80015ca:	00c4      	lsls	r4, r0, #3
 80015cc:	19a0      	adds	r0, r4, r6
 80015ce:	eb43 0107 	adc.w	r1, r3, r7
 80015d2:	028b      	lsls	r3, r1, #10
 80015d4:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80015d8:	0284      	lsls	r4, r0, #10
 80015da:	4620      	mov	r0, r4
 80015dc:	4619      	mov	r1, r3
 80015de:	2300      	movs	r3, #0
 80015e0:	f7ff fa9e 	bl	8000b20 <__aeabi_uldivmod>
 80015e4:	e7d3      	b.n	800158e <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 80015e6:	4803      	ldr	r0, [pc, #12]	; (80015f4 <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80015e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800
 80015f0:	00f42400 	.word	0x00f42400
 80015f4:	007a1200 	.word	0x007a1200

080015f8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80015f8:	2800      	cmp	r0, #0
 80015fa:	f000 809d 	beq.w	8001738 <HAL_RCC_ClockConfig+0x140>
{
 80015fe:	b570      	push	{r4, r5, r6, lr}
 8001600:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001602:	4b4f      	ldr	r3, [pc, #316]	; (8001740 <HAL_RCC_ClockConfig+0x148>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	428b      	cmp	r3, r1
 800160c:	d209      	bcs.n	8001622 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160e:	b2cb      	uxtb	r3, r1
 8001610:	4a4b      	ldr	r2, [pc, #300]	; (8001740 <HAL_RCC_ClockConfig+0x148>)
 8001612:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001614:	6813      	ldr	r3, [r2, #0]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	4299      	cmp	r1, r3
 800161c:	d001      	beq.n	8001622 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 800161e:	2001      	movs	r0, #1
 8001620:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001622:	6823      	ldr	r3, [r4, #0]
 8001624:	f013 0f02 	tst.w	r3, #2
 8001628:	d017      	beq.n	800165a <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800162a:	f013 0f04 	tst.w	r3, #4
 800162e:	d004      	beq.n	800163a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001630:	4a44      	ldr	r2, [pc, #272]	; (8001744 <HAL_RCC_ClockConfig+0x14c>)
 8001632:	6893      	ldr	r3, [r2, #8]
 8001634:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001638:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800163a:	6823      	ldr	r3, [r4, #0]
 800163c:	f013 0f08 	tst.w	r3, #8
 8001640:	d004      	beq.n	800164c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001642:	4a40      	ldr	r2, [pc, #256]	; (8001744 <HAL_RCC_ClockConfig+0x14c>)
 8001644:	6893      	ldr	r3, [r2, #8]
 8001646:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800164a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800164c:	4a3d      	ldr	r2, [pc, #244]	; (8001744 <HAL_RCC_ClockConfig+0x14c>)
 800164e:	6893      	ldr	r3, [r2, #8]
 8001650:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001654:	68a0      	ldr	r0, [r4, #8]
 8001656:	4303      	orrs	r3, r0
 8001658:	6093      	str	r3, [r2, #8]
 800165a:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800165c:	6823      	ldr	r3, [r4, #0]
 800165e:	f013 0f01 	tst.w	r3, #1
 8001662:	d032      	beq.n	80016ca <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001664:	6863      	ldr	r3, [r4, #4]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d021      	beq.n	80016ae <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800166a:	1e9a      	subs	r2, r3, #2
 800166c:	2a01      	cmp	r2, #1
 800166e:	d925      	bls.n	80016bc <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001670:	4a34      	ldr	r2, [pc, #208]	; (8001744 <HAL_RCC_ClockConfig+0x14c>)
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	f012 0f02 	tst.w	r2, #2
 8001678:	d060      	beq.n	800173c <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800167a:	4932      	ldr	r1, [pc, #200]	; (8001744 <HAL_RCC_ClockConfig+0x14c>)
 800167c:	688a      	ldr	r2, [r1, #8]
 800167e:	f022 0203 	bic.w	r2, r2, #3
 8001682:	4313      	orrs	r3, r2
 8001684:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001686:	f7ff fc1f 	bl	8000ec8 <HAL_GetTick>
 800168a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168c:	4b2d      	ldr	r3, [pc, #180]	; (8001744 <HAL_RCC_ClockConfig+0x14c>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 030c 	and.w	r3, r3, #12
 8001694:	6862      	ldr	r2, [r4, #4]
 8001696:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800169a:	d016      	beq.n	80016ca <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800169c:	f7ff fc14 	bl	8000ec8 <HAL_GetTick>
 80016a0:	1b80      	subs	r0, r0, r6
 80016a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80016a6:	4298      	cmp	r0, r3
 80016a8:	d9f0      	bls.n	800168c <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 80016aa:	2003      	movs	r0, #3
 80016ac:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ae:	4a25      	ldr	r2, [pc, #148]	; (8001744 <HAL_RCC_ClockConfig+0x14c>)
 80016b0:	6812      	ldr	r2, [r2, #0]
 80016b2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80016b6:	d1e0      	bne.n	800167a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80016b8:	2001      	movs	r0, #1
 80016ba:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016bc:	4a21      	ldr	r2, [pc, #132]	; (8001744 <HAL_RCC_ClockConfig+0x14c>)
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80016c4:	d1d9      	bne.n	800167a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80016c6:	2001      	movs	r0, #1
 80016c8:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016ca:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <HAL_RCC_ClockConfig+0x148>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	429d      	cmp	r5, r3
 80016d4:	d209      	bcs.n	80016ea <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d6:	b2ea      	uxtb	r2, r5
 80016d8:	4b19      	ldr	r3, [pc, #100]	; (8001740 <HAL_RCC_ClockConfig+0x148>)
 80016da:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	429d      	cmp	r5, r3
 80016e4:	d001      	beq.n	80016ea <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 80016e6:	2001      	movs	r0, #1
}
 80016e8:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ea:	6823      	ldr	r3, [r4, #0]
 80016ec:	f013 0f04 	tst.w	r3, #4
 80016f0:	d006      	beq.n	8001700 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f2:	4a14      	ldr	r2, [pc, #80]	; (8001744 <HAL_RCC_ClockConfig+0x14c>)
 80016f4:	6893      	ldr	r3, [r2, #8]
 80016f6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80016fa:	68e1      	ldr	r1, [r4, #12]
 80016fc:	430b      	orrs	r3, r1
 80016fe:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001700:	6823      	ldr	r3, [r4, #0]
 8001702:	f013 0f08 	tst.w	r3, #8
 8001706:	d007      	beq.n	8001718 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001708:	4a0e      	ldr	r2, [pc, #56]	; (8001744 <HAL_RCC_ClockConfig+0x14c>)
 800170a:	6893      	ldr	r3, [r2, #8]
 800170c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001710:	6921      	ldr	r1, [r4, #16]
 8001712:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001716:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001718:	f7ff ff04 	bl	8001524 <HAL_RCC_GetSysClockFreq>
 800171c:	4b09      	ldr	r3, [pc, #36]	; (8001744 <HAL_RCC_ClockConfig+0x14c>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001724:	4a08      	ldr	r2, [pc, #32]	; (8001748 <HAL_RCC_ClockConfig+0x150>)
 8001726:	5cd3      	ldrb	r3, [r2, r3]
 8001728:	40d8      	lsrs	r0, r3
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <HAL_RCC_ClockConfig+0x154>)
 800172c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800172e:	2000      	movs	r0, #0
 8001730:	f7ff fb7e 	bl	8000e30 <HAL_InitTick>
  return HAL_OK;
 8001734:	2000      	movs	r0, #0
 8001736:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001738:	2001      	movs	r0, #1
 800173a:	4770      	bx	lr
        return HAL_ERROR;
 800173c:	2001      	movs	r0, #1
 800173e:	bd70      	pop	{r4, r5, r6, pc}
 8001740:	40023c00 	.word	0x40023c00
 8001744:	40023800 	.word	0x40023800
 8001748:	08003928 	.word	0x08003928
 800174c:	20000008 	.word	0x20000008

08001750 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001750:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001752:	680c      	ldr	r4, [r1, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001754:	fa94 f4a4 	rbit	r4, r4
 8001758:	fab4 f484 	clz	r4, r4

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800175c:	e02b      	b.n	80017b6 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800175e:	688e      	ldr	r6, [r1, #8]
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001760:	6882      	ldr	r2, [r0, #8]
 8001762:	fa93 f5a3 	rbit	r5, r3
 8001766:	fab5 f585 	clz	r5, r5
 800176a:	006d      	lsls	r5, r5, #1
 800176c:	fa07 f505 	lsl.w	r5, r7, r5
 8001770:	ea22 0205 	bic.w	r2, r2, r5
 8001774:	fa93 f5a3 	rbit	r5, r3
 8001778:	fab5 f585 	clz	r5, r5
 800177c:	006d      	lsls	r5, r5, #1
 800177e:	fa06 f505 	lsl.w	r5, r6, r5
 8001782:	432a      	orrs	r2, r5
 8001784:	6082      	str	r2, [r0, #8]
 8001786:	e037      	b.n	80017f8 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001788:	694a      	ldr	r2, [r1, #20]
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800178a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	fa93 f6a3 	rbit	r6, r3
 8001792:	fab6 f686 	clz	r6, r6
 8001796:	00b6      	lsls	r6, r6, #2
 8001798:	270f      	movs	r7, #15
 800179a:	fa07 f606 	lsl.w	r6, r7, r6
 800179e:	ea25 0506 	bic.w	r5, r5, r6
 80017a2:	fa93 f3a3 	rbit	r3, r3
 80017a6:	fab3 f383 	clz	r3, r3
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	432b      	orrs	r3, r5
 80017b2:	6243      	str	r3, [r0, #36]	; 0x24
        }
      }
    }
    pinpos++;
 80017b4:	3401      	adds	r4, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80017b6:	680b      	ldr	r3, [r1, #0]
 80017b8:	fa33 f204 	lsrs.w	r2, r3, r4
 80017bc:	d050      	beq.n	8001860 <LL_GPIO_Init+0x110>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80017be:	2201      	movs	r2, #1
 80017c0:	40a2      	lsls	r2, r4
    if (currentpin)
 80017c2:	4013      	ands	r3, r2
 80017c4:	d0f6      	beq.n	80017b4 <LL_GPIO_Init+0x64>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80017c6:	684e      	ldr	r6, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80017c8:	6802      	ldr	r2, [r0, #0]
 80017ca:	fa93 f5a3 	rbit	r5, r3
 80017ce:	fab5 f585 	clz	r5, r5
 80017d2:	006d      	lsls	r5, r5, #1
 80017d4:	2703      	movs	r7, #3
 80017d6:	fa07 f505 	lsl.w	r5, r7, r5
 80017da:	ea22 0205 	bic.w	r2, r2, r5
 80017de:	fa93 f5a3 	rbit	r5, r3
 80017e2:	fab5 f585 	clz	r5, r5
 80017e6:	006d      	lsls	r5, r5, #1
 80017e8:	fa06 f505 	lsl.w	r5, r6, r5
 80017ec:	432a      	orrs	r2, r5
 80017ee:	6002      	str	r2, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80017f0:	684a      	ldr	r2, [r1, #4]
 80017f2:	3a01      	subs	r2, #1
 80017f4:	2a01      	cmp	r2, #1
 80017f6:	d9b2      	bls.n	800175e <LL_GPIO_Init+0xe>
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80017f8:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80017fa:	68c2      	ldr	r2, [r0, #12]
 80017fc:	fa93 f5a3 	rbit	r5, r3
 8001800:	fab5 f585 	clz	r5, r5
 8001804:	006d      	lsls	r5, r5, #1
 8001806:	2703      	movs	r7, #3
 8001808:	fa07 f505 	lsl.w	r5, r7, r5
 800180c:	ea22 0205 	bic.w	r2, r2, r5
 8001810:	fa93 f5a3 	rbit	r5, r3
 8001814:	fab5 f585 	clz	r5, r5
 8001818:	006d      	lsls	r5, r5, #1
 800181a:	fa06 f505 	lsl.w	r5, r6, r5
 800181e:	432a      	orrs	r2, r5
 8001820:	60c2      	str	r2, [r0, #12]
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001822:	684a      	ldr	r2, [r1, #4]
 8001824:	2a02      	cmp	r2, #2
 8001826:	d1c5      	bne.n	80017b4 <LL_GPIO_Init+0x64>
 8001828:	fa93 f2a3 	rbit	r2, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800182c:	fab2 f282 	clz	r2, r2
 8001830:	2a07      	cmp	r2, #7
 8001832:	d8a9      	bhi.n	8001788 <LL_GPIO_Init+0x38>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001834:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001836:	6a02      	ldr	r2, [r0, #32]
 8001838:	fa93 f6a3 	rbit	r6, r3
 800183c:	fab6 f686 	clz	r6, r6
 8001840:	00b6      	lsls	r6, r6, #2
 8001842:	270f      	movs	r7, #15
 8001844:	fa07 f606 	lsl.w	r6, r7, r6
 8001848:	ea22 0206 	bic.w	r2, r2, r6
 800184c:	fa93 f3a3 	rbit	r3, r3
 8001850:	fab3 f383 	clz	r3, r3
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	fa05 f303 	lsl.w	r3, r5, r3
 800185a:	4313      	orrs	r3, r2
 800185c:	6203      	str	r3, [r0, #32]
 800185e:	e7a9      	b.n	80017b4 <LL_GPIO_Init+0x64>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001860:	684a      	ldr	r2, [r1, #4]
 8001862:	3a01      	subs	r2, #1
 8001864:	2a01      	cmp	r2, #1
 8001866:	d902      	bls.n	800186e <LL_GPIO_Init+0x11e>
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8001868:	2000      	movs	r0, #0
 800186a:	bcf0      	pop	{r4, r5, r6, r7}
 800186c:	4770      	bx	lr
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800186e:	68c9      	ldr	r1, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001870:	6842      	ldr	r2, [r0, #4]
 8001872:	ea22 0203 	bic.w	r2, r2, r3
 8001876:	fb01 f303 	mul.w	r3, r1, r3
 800187a:	4313      	orrs	r3, r2
 800187c:	6043      	str	r3, [r0, #4]
 800187e:	e7f3      	b.n	8001868 <LL_GPIO_Init+0x118>

08001880 <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001880:	4b03      	ldr	r3, [pc, #12]	; (8001890 <RCC_GetHCLKClockFreq+0x10>)
 8001882:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001884:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001888:	4a02      	ldr	r2, [pc, #8]	; (8001894 <RCC_GetHCLKClockFreq+0x14>)
 800188a:	5cd3      	ldrb	r3, [r2, r3]
}
 800188c:	40d8      	lsrs	r0, r3
 800188e:	4770      	bx	lr
 8001890:	40023800 	.word	0x40023800
 8001894:	08003928 	.word	0x08003928

08001898 <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <RCC_GetPCLK1ClockFreq+0x10>)
 800189a:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800189c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80018a0:	4a02      	ldr	r2, [pc, #8]	; (80018ac <RCC_GetPCLK1ClockFreq+0x14>)
 80018a2:	5cd3      	ldrb	r3, [r2, r3]
}
 80018a4:	40d8      	lsrs	r0, r3
 80018a6:	4770      	bx	lr
 80018a8:	40023800 	.word	0x40023800
 80018ac:	08003938 	.word	0x08003938

080018b0 <RCC_GetPCLK2ClockFreq>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <RCC_GetPCLK2ClockFreq+0x10>)
 80018b2:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80018b4:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80018b8:	4a02      	ldr	r2, [pc, #8]	; (80018c4 <RCC_GetPCLK2ClockFreq+0x14>)
 80018ba:	5cd3      	ldrb	r3, [r2, r3]
}
 80018bc:	40d8      	lsrs	r0, r3
 80018be:	4770      	bx	lr
 80018c0:	40023800 	.word	0x40023800
 80018c4:	08003938 	.word	0x08003938

080018c8 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80018c8:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 80018d0:	b923      	cbnz	r3, 80018dc <RCC_PLL_GetFreqDomain_SYS+0x14>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <RCC_PLL_GetFreqDomain_SYS+0x44>)
    default:
      pllinputfreq = HSI_VALUE;
      break;
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80018d4:	2808      	cmp	r0, #8
 80018d6:	d003      	beq.n	80018e0 <RCC_PLL_GetFreqDomain_SYS+0x18>
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80018d8:	2000      	movs	r0, #0
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
}
 80018da:	4770      	bx	lr
      pllinputfreq = HSE_VALUE;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <RCC_PLL_GetFreqDomain_SYS+0x48>)
 80018de:	e7f9      	b.n	80018d4 <RCC_PLL_GetFreqDomain_SYS+0xc>
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80018e0:	4a09      	ldr	r2, [pc, #36]	; (8001908 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 80018e2:	6850      	ldr	r0, [r2, #4]
 80018e4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80018e8:	fbb3 f3f0 	udiv	r3, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80018ec:	6850      	ldr	r0, [r2, #4]
 80018ee:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80018f2:	fb00 f003 	mul.w	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80018f6:	6853      	ldr	r3, [r2, #4]
 80018f8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80018fc:	3301      	adds	r3, #1
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	fbb0 f0f3 	udiv	r0, r0, r3
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800
 800190c:	00f42400 	.word	0x00f42400
 8001910:	007a1200 	.word	0x007a1200

08001914 <RCC_GetSystemClockFreq>:
{
 8001914:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <RCC_GetSystemClockFreq+0x24>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 800191e:	2b04      	cmp	r3, #4
 8001920:	d007      	beq.n	8001932 <RCC_GetSystemClockFreq+0x1e>
 8001922:	2b08      	cmp	r3, #8
 8001924:	d001      	beq.n	800192a <RCC_GetSystemClockFreq+0x16>
      frequency = HSI_VALUE;
 8001926:	4805      	ldr	r0, [pc, #20]	; (800193c <RCC_GetSystemClockFreq+0x28>)
 8001928:	bd08      	pop	{r3, pc}
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800192a:	2008      	movs	r0, #8
 800192c:	f7ff ffcc 	bl	80018c8 <RCC_PLL_GetFreqDomain_SYS>
      break;
 8001930:	bd08      	pop	{r3, pc}
      frequency = HSE_VALUE;
 8001932:	4803      	ldr	r0, [pc, #12]	; (8001940 <RCC_GetSystemClockFreq+0x2c>)
}
 8001934:	bd08      	pop	{r3, pc}
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800
 800193c:	00f42400 	.word	0x00f42400
 8001940:	007a1200 	.word	0x007a1200

08001944 <LL_RCC_GetSystemClocksFreq>:
{
 8001944:	b510      	push	{r4, lr}
 8001946:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001948:	f7ff ffe4 	bl	8001914 <RCC_GetSystemClockFreq>
 800194c:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800194e:	f7ff ff97 	bl	8001880 <RCC_GetHCLKClockFreq>
 8001952:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001954:	f7ff ffa0 	bl	8001898 <RCC_GetPCLK1ClockFreq>
 8001958:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800195a:	6860      	ldr	r0, [r4, #4]
 800195c:	f7ff ffa8 	bl	80018b0 <RCC_GetPCLK2ClockFreq>
 8001960:	60e0      	str	r0, [r4, #12]
 8001962:	bd10      	pop	{r4, pc}

08001964 <LL_USART_Init>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001964:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001966:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800196a:	d001      	beq.n	8001970 <LL_USART_Init+0xc>
  ErrorStatus status = ERROR;
 800196c:	2001      	movs	r0, #1
 800196e:	4770      	bx	lr
{
 8001970:	b530      	push	{r4, r5, lr}
 8001972:	b085      	sub	sp, #20
 8001974:	460d      	mov	r5, r1
 8001976:	4604      	mov	r4, r0
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001978:	68c3      	ldr	r3, [r0, #12]
 800197a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800197e:	f023 030c 	bic.w	r3, r3, #12
 8001982:	684a      	ldr	r2, [r1, #4]
 8001984:	68c9      	ldr	r1, [r1, #12]
 8001986:	430a      	orrs	r2, r1
 8001988:	6929      	ldr	r1, [r5, #16]
 800198a:	430a      	orrs	r2, r1
 800198c:	69a9      	ldr	r1, [r5, #24]
 800198e:	430a      	orrs	r2, r1
 8001990:	4313      	orrs	r3, r2
 8001992:	60c3      	str	r3, [r0, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001994:	68ab      	ldr	r3, [r5, #8]
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001996:	6902      	ldr	r2, [r0, #16]
 8001998:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800199c:	4313      	orrs	r3, r2
 800199e:	6103      	str	r3, [r0, #16]

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80019a0:	696b      	ldr	r3, [r5, #20]
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80019a2:	6942      	ldr	r2, [r0, #20]
 80019a4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80019a8:	4313      	orrs	r3, r2
 80019aa:	6143      	str	r3, [r0, #20]

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80019ac:	4668      	mov	r0, sp
 80019ae:	f7ff ffc9 	bl	8001944 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80019b2:	4b3c      	ldr	r3, [pc, #240]	; (8001aa4 <LL_USART_Init+0x140>)
 80019b4:	429c      	cmp	r4, r3
 80019b6:	d01b      	beq.n	80019f0 <LL_USART_Init+0x8c>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
    }
    else if (USARTx == USART2)
 80019b8:	4b3b      	ldr	r3, [pc, #236]	; (8001aa8 <LL_USART_Init+0x144>)
 80019ba:	429c      	cmp	r4, r3
 80019bc:	d01a      	beq.n	80019f4 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80019be:	4b3b      	ldr	r3, [pc, #236]	; (8001aac <LL_USART_Init+0x148>)
 80019c0:	429c      	cmp	r4, r3
 80019c2:	d019      	beq.n	80019f8 <LL_USART_Init+0x94>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80019c4:	4b3a      	ldr	r3, [pc, #232]	; (8001ab0 <LL_USART_Init+0x14c>)
 80019c6:	429c      	cmp	r4, r3
 80019c8:	d018      	beq.n	80019fc <LL_USART_Init+0x98>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80019ca:	4b3a      	ldr	r3, [pc, #232]	; (8001ab4 <LL_USART_Init+0x150>)
 80019cc:	429c      	cmp	r4, r3
 80019ce:	d017      	beq.n	8001a00 <LL_USART_Init+0x9c>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80019d0:	4b39      	ldr	r3, [pc, #228]	; (8001ab8 <LL_USART_Init+0x154>)
 80019d2:	429c      	cmp	r4, r3
 80019d4:	d016      	beq.n	8001a04 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 80019d6:	4b39      	ldr	r3, [pc, #228]	; (8001abc <LL_USART_Init+0x158>)
 80019d8:	429c      	cmp	r4, r3
 80019da:	d015      	beq.n	8001a08 <LL_USART_Init+0xa4>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 80019dc:	4b38      	ldr	r3, [pc, #224]	; (8001ac0 <LL_USART_Init+0x15c>)
 80019de:	429c      	cmp	r4, r3
 80019e0:	d014      	beq.n	8001a0c <LL_USART_Init+0xa8>
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80019e2:	2300      	movs	r3, #0

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d05a      	beq.n	8001a9e <LL_USART_Init+0x13a>
        && (USART_InitStruct->BaudRate != 0U))
 80019e8:	682a      	ldr	r2, [r5, #0]
 80019ea:	b98a      	cbnz	r2, 8001a10 <LL_USART_Init+0xac>
  ErrorStatus status = ERROR;
 80019ec:	2001      	movs	r0, #1
 80019ee:	e057      	b.n	8001aa0 <LL_USART_Init+0x13c>
      periphclk = rcc_clocks.PCLK2_Frequency;
 80019f0:	9b03      	ldr	r3, [sp, #12]
 80019f2:	e7f7      	b.n	80019e4 <LL_USART_Init+0x80>
      periphclk = rcc_clocks.PCLK1_Frequency;
 80019f4:	9b02      	ldr	r3, [sp, #8]
 80019f6:	e7f5      	b.n	80019e4 <LL_USART_Init+0x80>
      periphclk = rcc_clocks.PCLK1_Frequency;
 80019f8:	9b02      	ldr	r3, [sp, #8]
 80019fa:	e7f3      	b.n	80019e4 <LL_USART_Init+0x80>
      periphclk = rcc_clocks.PCLK2_Frequency;
 80019fc:	9b03      	ldr	r3, [sp, #12]
 80019fe:	e7f1      	b.n	80019e4 <LL_USART_Init+0x80>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001a00:	9b02      	ldr	r3, [sp, #8]
 8001a02:	e7ef      	b.n	80019e4 <LL_USART_Init+0x80>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001a04:	9b02      	ldr	r3, [sp, #8]
 8001a06:	e7ed      	b.n	80019e4 <LL_USART_Init+0x80>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001a08:	9b02      	ldr	r3, [sp, #8]
 8001a0a:	e7eb      	b.n	80019e4 <LL_USART_Init+0x80>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001a0c:	9b02      	ldr	r3, [sp, #8]
 8001a0e:	e7e9      	b.n	80019e4 <LL_USART_Init+0x80>
    {
      status = SUCCESS;
      LL_USART_SetBaudRate(USARTx,
 8001a10:	69a9      	ldr	r1, [r5, #24]
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001a12:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001a16:	d020      	beq.n	8001a5a <LL_USART_Init+0xf6>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001a18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a1c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a20:	0092      	lsls	r2, r2, #2
 8001a22:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a26:	4d27      	ldr	r5, [pc, #156]	; (8001ac4 <LL_USART_Init+0x160>)
 8001a28:	fba5 2003 	umull	r2, r0, r5, r3
 8001a2c:	0940      	lsrs	r0, r0, #5
 8001a2e:	0102      	lsls	r2, r0, #4
 8001a30:	b291      	uxth	r1, r2
 8001a32:	2264      	movs	r2, #100	; 0x64
 8001a34:	fb02 3210 	mls	r2, r2, r0, r3
 8001a38:	0113      	lsls	r3, r2, #4
 8001a3a:	3332      	adds	r3, #50	; 0x32
 8001a3c:	fba5 2303 	umull	r2, r3, r5, r3
 8001a40:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8001a44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a48:	440a      	add	r2, r1
 8001a4a:	b292      	uxth	r2, r2
 8001a4c:	f003 030f 	and.w	r3, r3, #15
 8001a50:	4413      	add	r3, r2
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 8001a56:	2000      	movs	r0, #0
 8001a58:	e022      	b.n	8001aa0 <LL_USART_Init+0x13c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001a5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a62:	0052      	lsls	r2, r2, #1
 8001a64:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a68:	4d16      	ldr	r5, [pc, #88]	; (8001ac4 <LL_USART_Init+0x160>)
 8001a6a:	fba5 2003 	umull	r2, r0, r5, r3
 8001a6e:	0940      	lsrs	r0, r0, #5
 8001a70:	0102      	lsls	r2, r0, #4
 8001a72:	b291      	uxth	r1, r2
 8001a74:	2264      	movs	r2, #100	; 0x64
 8001a76:	fb02 3210 	mls	r2, r2, r0, r3
 8001a7a:	00d3      	lsls	r3, r2, #3
 8001a7c:	3332      	adds	r3, #50	; 0x32
 8001a7e:	fba5 2303 	umull	r2, r3, r5, r3
 8001a82:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8001a86:	005a      	lsls	r2, r3, #1
 8001a88:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8001a8c:	440a      	add	r2, r1
 8001a8e:	b292      	uxth	r2, r2
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	4413      	add	r3, r2
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	60a3      	str	r3, [r4, #8]
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	e000      	b.n	8001aa0 <LL_USART_Init+0x13c>
  ErrorStatus status = ERROR;
 8001a9e:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8001aa0:	b005      	add	sp, #20
 8001aa2:	bd30      	pop	{r4, r5, pc}
 8001aa4:	40011000 	.word	0x40011000
 8001aa8:	40004400 	.word	0x40004400
 8001aac:	40004800 	.word	0x40004800
 8001ab0:	40011400 	.word	0x40011400
 8001ab4:	40004c00 	.word	0x40004c00
 8001ab8:	40005000 	.word	0x40005000
 8001abc:	40007800 	.word	0x40007800
 8001ac0:	40007c00 	.word	0x40007c00
 8001ac4:	51eb851f 	.word	0x51eb851f

08001ac8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ac8:	b530      	push	{r4, r5, lr}
 8001aca:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	2400      	movs	r4, #0
 8001ace:	9403      	str	r4, [sp, #12]
 8001ad0:	9404      	str	r4, [sp, #16]
 8001ad2:	9405      	str	r4, [sp, #20]
 8001ad4:	9406      	str	r4, [sp, #24]
 8001ad6:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ad8:	9400      	str	r4, [sp, #0]
 8001ada:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <MX_GPIO_Init+0x78>)
 8001adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ade:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ae2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ae4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ae6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001aea:	9200      	str	r2, [sp, #0]
 8001aec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aee:	9401      	str	r4, [sp, #4]
 8001af0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001af2:	f042 0201 	orr.w	r2, r2, #1
 8001af6:	631a      	str	r2, [r3, #48]	; 0x30
 8001af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001afa:	f002 0201 	and.w	r2, r2, #1
 8001afe:	9201      	str	r2, [sp, #4]
 8001b00:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b02:	9402      	str	r4, [sp, #8]
 8001b04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b0a:	631a      	str	r2, [r3, #48]	; 0x30
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b12:	9302      	str	r3, [sp, #8]
 8001b14:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001b16:	4d0b      	ldr	r5, [pc, #44]	; (8001b44 <MX_GPIO_Init+0x7c>)
 8001b18:	4622      	mov	r2, r4
 8001b1a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001b1e:	4628      	mov	r0, r5
 8001b20:	f7ff fb24 	bl	800116c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001b24:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001b28:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b30:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b32:	a903      	add	r1, sp, #12
 8001b34:	4628      	mov	r0, r5
 8001b36:	f7ff fa27 	bl	8000f88 <HAL_GPIO_Init>

}
 8001b3a:	b009      	add	sp, #36	; 0x24
 8001b3c:	bd30      	pop	{r4, r5, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40021800 	.word	0x40021800

08001b48 <MX_NVIC_Init>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b48:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <MX_NVIC_Init+0x14>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <MX_NVIC_Init+0x18>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b54:	2220      	movs	r2, #32
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000ed00 	.word	0xe000ed00
 8001b60:	e000e100 	.word	0xe000e100

08001b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b64:	b530      	push	{r4, r5, lr}
 8001b66:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b68:	2230      	movs	r2, #48	; 0x30
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	a808      	add	r0, sp, #32
 8001b6e:	f000 f98f 	bl	8001e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b72:	2400      	movs	r4, #0
 8001b74:	9403      	str	r4, [sp, #12]
 8001b76:	9404      	str	r4, [sp, #16]
 8001b78:	9405      	str	r4, [sp, #20]
 8001b7a:	9406      	str	r4, [sp, #24]
 8001b7c:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7e:	9401      	str	r4, [sp, #4]
 8001b80:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <SystemClock_Config+0x8c>)
 8001b82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b88:	641a      	str	r2, [r3, #64]	; 0x40
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b94:	9402      	str	r4, [sp, #8]
 8001b96:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <SystemClock_Config+0x90>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ba6:	9302      	str	r3, [sp, #8]
 8001ba8:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001baa:	2301      	movs	r3, #1
 8001bac:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bb2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bb4:	2502      	movs	r5, #2
 8001bb6:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bb8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bbc:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001bbe:	2304      	movs	r3, #4
 8001bc0:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001bc2:	22a8      	movs	r2, #168	; 0xa8
 8001bc4:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bc6:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001bc8:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bca:	a808      	add	r0, sp, #32
 8001bcc:	f7ff fade 	bl	800118c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bd0:	230f      	movs	r3, #15
 8001bd2:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bd4:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bd6:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bd8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bdc:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be2:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001be4:	2105      	movs	r1, #5
 8001be6:	a803      	add	r0, sp, #12
 8001be8:	f7ff fd06 	bl	80015f8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001bec:	b015      	add	sp, #84	; 0x54
 8001bee:	bd30      	pop	{r4, r5, pc}
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40007000 	.word	0x40007000

08001bf8 <main>:
{
 8001bf8:	b508      	push	{r3, lr}
  HAL_Init();
 8001bfa:	f7ff f93f 	bl	8000e7c <HAL_Init>
  SystemClock_Config();
 8001bfe:	f7ff ffb1 	bl	8001b64 <SystemClock_Config>
  MX_GPIO_Init();
 8001c02:	f7ff ff61 	bl	8001ac8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001c06:	f000 f899 	bl	8001d3c <MX_USART1_UART_Init>
  MX_NVIC_Init();
 8001c0a:	f7ff ff9d 	bl	8001b48 <MX_NVIC_Init>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001c0e:	4a03      	ldr	r2, [pc, #12]	; (8001c1c <main+0x24>)
 8001c10:	68d3      	ldr	r3, [r2, #12]
 8001c12:	f043 0320 	orr.w	r3, r3, #32
 8001c16:	60d3      	str	r3, [r2, #12]
 8001c18:	e7fe      	b.n	8001c18 <main+0x20>
 8001c1a:	bf00      	nop
 8001c1c:	40011000 	.word	0x40011000

08001c20 <USART_Rx_Callback>:
    HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
  }
}
*/
void USART_Rx_Callback(USART_TypeDef *USARTx)
{
 8001c20:	b510      	push	{r4, lr}
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001c22:	6843      	ldr	r3, [r0, #4]
 8001c24:	b2db      	uxtb	r3, r3
  //rx1_data = (USARTx->RDR & 0x1ff);
  rx1_data = LL_USART_ReceiveData8(USARTx);
 8001c26:	4a08      	ldr	r2, [pc, #32]	; (8001c48 <USART_Rx_Callback+0x28>)
 8001c28:	7013      	strb	r3, [r2, #0]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8001c2a:	4a08      	ldr	r2, [pc, #32]	; (8001c4c <USART_Rx_Callback+0x2c>)
 8001c2c:	6053      	str	r3, [r2, #4]

  LL_USART_TransmitData8(USART1, rx1_data);
  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8001c2e:	4c08      	ldr	r4, [pc, #32]	; (8001c50 <USART_Rx_Callback+0x30>)
 8001c30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c34:	4620      	mov	r0, r4
 8001c36:	f7ff fa9f 	bl	8001178 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 8001c3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c3e:	4620      	mov	r0, r4
 8001c40:	f7ff fa9a 	bl	8001178 <HAL_GPIO_TogglePin>
 8001c44:	bd10      	pop	{r4, pc}
 8001c46:	bf00      	nop
 8001c48:	20000208 	.word	0x20000208
 8001c4c:	40011000 	.word	0x40011000
 8001c50:	40021800 	.word	0x40021800

08001c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c54:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c56:	2100      	movs	r1, #0
 8001c58:	9100      	str	r1, [sp, #0]
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <HAL_MspInit+0x34>)
 8001c5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c62:	645a      	str	r2, [r3, #68]	; 0x44
 8001c64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c66:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001c6a:	9200      	str	r2, [sp, #0]
 8001c6c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6e:	9101      	str	r1, [sp, #4]
 8001c70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c72:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c76:	641a      	str	r2, [r3, #64]	; 0x40
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	9301      	str	r3, [sp, #4]
 8001c80:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c82:	b002      	add	sp, #8
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800

08001c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c8c:	4770      	bx	lr

08001c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c8e:	e7fe      	b.n	8001c8e <HardFault_Handler>

08001c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c90:	e7fe      	b.n	8001c90 <MemManage_Handler>

08001c92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c92:	e7fe      	b.n	8001c92 <BusFault_Handler>

08001c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c94:	e7fe      	b.n	8001c94 <UsageFault_Handler>

08001c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c96:	4770      	bx	lr

08001c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c98:	4770      	bx	lr

08001c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c9a:	4770      	bx	lr

08001c9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c9e:	f7ff f907 	bl	8000eb0 <HAL_IncTick>
 8001ca2:	bd08      	pop	{r3, pc}

08001ca4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ca4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
  USART_Rx_Callback(USART1);
 8001ca6:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <USART1_IRQHandler+0xc>)
 8001ca8:	f7ff ffba 	bl	8001c20 <USART_Rx_Callback>
 8001cac:	bd08      	pop	{r3, pc}
 8001cae:	bf00      	nop
 8001cb0:	40011000 	.word	0x40011000

08001cb4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001cb4:	b508      	push	{r3, lr}
 8001cb6:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001cb8:	4a0b      	ldr	r2, [pc, #44]	; (8001ce8 <_sbrk+0x34>)
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	b142      	cbz	r2, 8001cd0 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <_sbrk+0x34>)
 8001cc0:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8001cc2:	4403      	add	r3, r0
 8001cc4:	466a      	mov	r2, sp
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d806      	bhi.n	8001cd8 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8001cca:	4a07      	ldr	r2, [pc, #28]	; (8001ce8 <_sbrk+0x34>)
 8001ccc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8001cce:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8001cd0:	4906      	ldr	r1, [pc, #24]	; (8001cec <_sbrk+0x38>)
 8001cd2:	4a05      	ldr	r2, [pc, #20]	; (8001ce8 <_sbrk+0x34>)
 8001cd4:	6011      	str	r1, [r2, #0]
 8001cd6:	e7f2      	b.n	8001cbe <_sbrk+0xa>
		errno = ENOMEM;
 8001cd8:	f000 f8b0 	bl	8001e3c <__errno>
 8001cdc:	230c      	movs	r3, #12
 8001cde:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce4:	bd08      	pop	{r3, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200001f8 	.word	0x200001f8
 8001cec:	20000210 	.word	0x20000210

08001cf0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cf0:	490f      	ldr	r1, [pc, #60]	; (8001d30 <SystemInit+0x40>)
 8001cf2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001cf6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <SystemInit+0x44>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	f042 0201 	orr.w	r2, r2, #1
 8001d06:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d08:	2000      	movs	r0, #0
 8001d0a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001d12:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d16:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001d18:	4a07      	ldr	r2, [pc, #28]	; (8001d38 <SystemInit+0x48>)
 8001d1a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d22:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001d24:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001d2a:	608b      	str	r3, [r1, #8]
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000ed00 	.word	0xe000ed00
 8001d34:	40023800 	.word	0x40023800
 8001d38:	24003010 	.word	0x24003010

08001d3c <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d3c:	b510      	push	{r4, lr}
 8001d3e:	b090      	sub	sp, #64	; 0x40
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001d40:	2400      	movs	r4, #0
 8001d42:	9409      	str	r4, [sp, #36]	; 0x24
 8001d44:	940a      	str	r4, [sp, #40]	; 0x28
 8001d46:	940b      	str	r4, [sp, #44]	; 0x2c
 8001d48:	940c      	str	r4, [sp, #48]	; 0x30
 8001d4a:	940d      	str	r4, [sp, #52]	; 0x34
 8001d4c:	940e      	str	r4, [sp, #56]	; 0x38
 8001d4e:	940f      	str	r4, [sp, #60]	; 0x3c

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	9403      	str	r4, [sp, #12]
 8001d52:	9404      	str	r4, [sp, #16]
 8001d54:	9405      	str	r4, [sp, #20]
 8001d56:	9406      	str	r4, [sp, #24]
 8001d58:	9407      	str	r4, [sp, #28]
 8001d5a:	9408      	str	r4, [sp, #32]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001d5c:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <MX_USART1_UART_Init+0xa4>)
 8001d5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d60:	f042 0210 	orr.w	r2, r2, #16
 8001d64:	645a      	str	r2, [r3, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001d66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d68:	f002 0210 	and.w	r2, r2, #16
 8001d6c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001d6e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001d70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001d80:	9b01      	ldr	r3, [sp, #4]
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
  /**USART1 GPIO Configuration  
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8001d82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d86:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001d90:	2301      	movs	r3, #1
 8001d92:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001d94:	2307      	movs	r3, #7
 8001d96:	9308      	str	r3, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d98:	a903      	add	r1, sp, #12
 8001d9a:	4812      	ldr	r0, [pc, #72]	; (8001de4 <MX_USART1_UART_Init+0xa8>)
 8001d9c:	f7ff fcd8 	bl	8001750 <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 8001da0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001da4:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001da6:	940a      	str	r4, [sp, #40]	; 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001da8:	940b      	str	r4, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001daa:	940c      	str	r4, [sp, #48]	; 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001dac:	230c      	movs	r3, #12
 8001dae:	930d      	str	r3, [sp, #52]	; 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001db0:	940e      	str	r4, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001db2:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_USART_Init(USART1, &USART_InitStruct);
 8001db4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001db8:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
 8001dbc:	a909      	add	r1, sp, #36	; 0x24
 8001dbe:	4620      	mov	r0, r4
 8001dc0:	f7ff fdd0 	bl	8001964 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dc4:	6923      	ldr	r3, [r4, #16]
 8001dc6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001dca:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001dcc:	6963      	ldr	r3, [r4, #20]
 8001dce:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001dd2:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001dd4:	68e3      	ldr	r3, [r4, #12]
 8001dd6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001dda:	60e3      	str	r3, [r4, #12]
  LL_USART_ConfigAsyncMode(USART1);
  LL_USART_Enable(USART1);

}
 8001ddc:	b010      	add	sp, #64	; 0x40
 8001dde:	bd10      	pop	{r4, pc}
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40020000 	.word	0x40020000

08001de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e20 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001dec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001dee:	e003      	b.n	8001df8 <LoopCopyDataInit>

08001df0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001df2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001df4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001df6:	3104      	adds	r1, #4

08001df8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001df8:	480b      	ldr	r0, [pc, #44]	; (8001e28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001dfa:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001dfc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001dfe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e00:	d3f6      	bcc.n	8001df0 <CopyDataInit>
  ldr  r2, =_sbss
 8001e02:	4a0b      	ldr	r2, [pc, #44]	; (8001e30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e04:	e002      	b.n	8001e0c <LoopFillZerobss>

08001e06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e08:	f842 3b04 	str.w	r3, [r2], #4

08001e0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e10:	d3f9      	bcc.n	8001e06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e12:	f7ff ff6d 	bl	8001cf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e16:	f000 f817 	bl	8001e48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e1a:	f7ff feed 	bl	8001bf8 <main>
  bx  lr    
 8001e1e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e20:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001e24:	08003b78 	.word	0x08003b78
  ldr  r0, =_sdata
 8001e28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e2c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001e30:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001e34:	20000210 	.word	0x20000210

08001e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e38:	e7fe      	b.n	8001e38 <ADC_IRQHandler>
	...

08001e3c <__errno>:
 8001e3c:	4b01      	ldr	r3, [pc, #4]	; (8001e44 <__errno+0x8>)
 8001e3e:	6818      	ldr	r0, [r3, #0]
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	2000000c 	.word	0x2000000c

08001e48 <__libc_init_array>:
 8001e48:	b570      	push	{r4, r5, r6, lr}
 8001e4a:	4e0d      	ldr	r6, [pc, #52]	; (8001e80 <__libc_init_array+0x38>)
 8001e4c:	4c0d      	ldr	r4, [pc, #52]	; (8001e84 <__libc_init_array+0x3c>)
 8001e4e:	1ba4      	subs	r4, r4, r6
 8001e50:	10a4      	asrs	r4, r4, #2
 8001e52:	2500      	movs	r5, #0
 8001e54:	42a5      	cmp	r5, r4
 8001e56:	d109      	bne.n	8001e6c <__libc_init_array+0x24>
 8001e58:	4e0b      	ldr	r6, [pc, #44]	; (8001e88 <__libc_init_array+0x40>)
 8001e5a:	4c0c      	ldr	r4, [pc, #48]	; (8001e8c <__libc_init_array+0x44>)
 8001e5c:	f001 fd56 	bl	800390c <_init>
 8001e60:	1ba4      	subs	r4, r4, r6
 8001e62:	10a4      	asrs	r4, r4, #2
 8001e64:	2500      	movs	r5, #0
 8001e66:	42a5      	cmp	r5, r4
 8001e68:	d105      	bne.n	8001e76 <__libc_init_array+0x2e>
 8001e6a:	bd70      	pop	{r4, r5, r6, pc}
 8001e6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e70:	4798      	blx	r3
 8001e72:	3501      	adds	r5, #1
 8001e74:	e7ee      	b.n	8001e54 <__libc_init_array+0xc>
 8001e76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e7a:	4798      	blx	r3
 8001e7c:	3501      	adds	r5, #1
 8001e7e:	e7f2      	b.n	8001e66 <__libc_init_array+0x1e>
 8001e80:	08003b70 	.word	0x08003b70
 8001e84:	08003b70 	.word	0x08003b70
 8001e88:	08003b70 	.word	0x08003b70
 8001e8c:	08003b74 	.word	0x08003b74

08001e90 <memset>:
 8001e90:	4402      	add	r2, r0
 8001e92:	4603      	mov	r3, r0
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d100      	bne.n	8001e9a <memset+0xa>
 8001e98:	4770      	bx	lr
 8001e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8001e9e:	e7f9      	b.n	8001e94 <memset+0x4>

08001ea0 <__cvt>:
 8001ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ea4:	ec55 4b10 	vmov	r4, r5, d0
 8001ea8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8001eaa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8001eae:	2d00      	cmp	r5, #0
 8001eb0:	460e      	mov	r6, r1
 8001eb2:	4691      	mov	r9, r2
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	bfb8      	it	lt
 8001eb8:	4622      	movlt	r2, r4
 8001eba:	462b      	mov	r3, r5
 8001ebc:	f027 0720 	bic.w	r7, r7, #32
 8001ec0:	bfbb      	ittet	lt
 8001ec2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8001ec6:	461d      	movlt	r5, r3
 8001ec8:	2300      	movge	r3, #0
 8001eca:	232d      	movlt	r3, #45	; 0x2d
 8001ecc:	bfb8      	it	lt
 8001ece:	4614      	movlt	r4, r2
 8001ed0:	2f46      	cmp	r7, #70	; 0x46
 8001ed2:	700b      	strb	r3, [r1, #0]
 8001ed4:	d004      	beq.n	8001ee0 <__cvt+0x40>
 8001ed6:	2f45      	cmp	r7, #69	; 0x45
 8001ed8:	d100      	bne.n	8001edc <__cvt+0x3c>
 8001eda:	3601      	adds	r6, #1
 8001edc:	2102      	movs	r1, #2
 8001ede:	e000      	b.n	8001ee2 <__cvt+0x42>
 8001ee0:	2103      	movs	r1, #3
 8001ee2:	ab03      	add	r3, sp, #12
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	ab02      	add	r3, sp, #8
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	4632      	mov	r2, r6
 8001eec:	4653      	mov	r3, sl
 8001eee:	ec45 4b10 	vmov	d0, r4, r5
 8001ef2:	f000 fbad 	bl	8002650 <_dtoa_r>
 8001ef6:	2f47      	cmp	r7, #71	; 0x47
 8001ef8:	4680      	mov	r8, r0
 8001efa:	d102      	bne.n	8001f02 <__cvt+0x62>
 8001efc:	f019 0f01 	tst.w	r9, #1
 8001f00:	d026      	beq.n	8001f50 <__cvt+0xb0>
 8001f02:	2f46      	cmp	r7, #70	; 0x46
 8001f04:	eb08 0906 	add.w	r9, r8, r6
 8001f08:	d111      	bne.n	8001f2e <__cvt+0x8e>
 8001f0a:	f898 3000 	ldrb.w	r3, [r8]
 8001f0e:	2b30      	cmp	r3, #48	; 0x30
 8001f10:	d10a      	bne.n	8001f28 <__cvt+0x88>
 8001f12:	2200      	movs	r2, #0
 8001f14:	2300      	movs	r3, #0
 8001f16:	4620      	mov	r0, r4
 8001f18:	4629      	mov	r1, r5
 8001f1a:	f7fe fd91 	bl	8000a40 <__aeabi_dcmpeq>
 8001f1e:	b918      	cbnz	r0, 8001f28 <__cvt+0x88>
 8001f20:	f1c6 0601 	rsb	r6, r6, #1
 8001f24:	f8ca 6000 	str.w	r6, [sl]
 8001f28:	f8da 3000 	ldr.w	r3, [sl]
 8001f2c:	4499      	add	r9, r3
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2300      	movs	r3, #0
 8001f32:	4620      	mov	r0, r4
 8001f34:	4629      	mov	r1, r5
 8001f36:	f7fe fd83 	bl	8000a40 <__aeabi_dcmpeq>
 8001f3a:	b938      	cbnz	r0, 8001f4c <__cvt+0xac>
 8001f3c:	2230      	movs	r2, #48	; 0x30
 8001f3e:	9b03      	ldr	r3, [sp, #12]
 8001f40:	4599      	cmp	r9, r3
 8001f42:	d905      	bls.n	8001f50 <__cvt+0xb0>
 8001f44:	1c59      	adds	r1, r3, #1
 8001f46:	9103      	str	r1, [sp, #12]
 8001f48:	701a      	strb	r2, [r3, #0]
 8001f4a:	e7f8      	b.n	8001f3e <__cvt+0x9e>
 8001f4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8001f50:	9b03      	ldr	r3, [sp, #12]
 8001f52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001f54:	eba3 0308 	sub.w	r3, r3, r8
 8001f58:	4640      	mov	r0, r8
 8001f5a:	6013      	str	r3, [r2, #0]
 8001f5c:	b004      	add	sp, #16
 8001f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001f62 <__exponent>:
 8001f62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f64:	4603      	mov	r3, r0
 8001f66:	2900      	cmp	r1, #0
 8001f68:	bfb8      	it	lt
 8001f6a:	4249      	neglt	r1, r1
 8001f6c:	f803 2b02 	strb.w	r2, [r3], #2
 8001f70:	bfb4      	ite	lt
 8001f72:	222d      	movlt	r2, #45	; 0x2d
 8001f74:	222b      	movge	r2, #43	; 0x2b
 8001f76:	2909      	cmp	r1, #9
 8001f78:	7042      	strb	r2, [r0, #1]
 8001f7a:	dd20      	ble.n	8001fbe <__exponent+0x5c>
 8001f7c:	f10d 0207 	add.w	r2, sp, #7
 8001f80:	4617      	mov	r7, r2
 8001f82:	260a      	movs	r6, #10
 8001f84:	fb91 f5f6 	sdiv	r5, r1, r6
 8001f88:	fb06 1115 	mls	r1, r6, r5, r1
 8001f8c:	3130      	adds	r1, #48	; 0x30
 8001f8e:	2d09      	cmp	r5, #9
 8001f90:	f802 1c01 	strb.w	r1, [r2, #-1]
 8001f94:	f102 34ff 	add.w	r4, r2, #4294967295
 8001f98:	4629      	mov	r1, r5
 8001f9a:	dc09      	bgt.n	8001fb0 <__exponent+0x4e>
 8001f9c:	3130      	adds	r1, #48	; 0x30
 8001f9e:	3a02      	subs	r2, #2
 8001fa0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8001fa4:	42ba      	cmp	r2, r7
 8001fa6:	461c      	mov	r4, r3
 8001fa8:	d304      	bcc.n	8001fb4 <__exponent+0x52>
 8001faa:	1a20      	subs	r0, r4, r0
 8001fac:	b003      	add	sp, #12
 8001fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fb0:	4622      	mov	r2, r4
 8001fb2:	e7e7      	b.n	8001f84 <__exponent+0x22>
 8001fb4:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001fb8:	f803 1b01 	strb.w	r1, [r3], #1
 8001fbc:	e7f2      	b.n	8001fa4 <__exponent+0x42>
 8001fbe:	2230      	movs	r2, #48	; 0x30
 8001fc0:	461c      	mov	r4, r3
 8001fc2:	4411      	add	r1, r2
 8001fc4:	f804 2b02 	strb.w	r2, [r4], #2
 8001fc8:	7059      	strb	r1, [r3, #1]
 8001fca:	e7ee      	b.n	8001faa <__exponent+0x48>

08001fcc <_printf_float>:
 8001fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fd0:	b08d      	sub	sp, #52	; 0x34
 8001fd2:	460c      	mov	r4, r1
 8001fd4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8001fd8:	4616      	mov	r6, r2
 8001fda:	461f      	mov	r7, r3
 8001fdc:	4605      	mov	r5, r0
 8001fde:	f001 f905 	bl	80031ec <_localeconv_r>
 8001fe2:	6803      	ldr	r3, [r0, #0]
 8001fe4:	9304      	str	r3, [sp, #16]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe f902 	bl	80001f0 <strlen>
 8001fec:	2300      	movs	r3, #0
 8001fee:	930a      	str	r3, [sp, #40]	; 0x28
 8001ff0:	f8d8 3000 	ldr.w	r3, [r8]
 8001ff4:	9005      	str	r0, [sp, #20]
 8001ff6:	3307      	adds	r3, #7
 8001ff8:	f023 0307 	bic.w	r3, r3, #7
 8001ffc:	f103 0208 	add.w	r2, r3, #8
 8002000:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002004:	f8d4 b000 	ldr.w	fp, [r4]
 8002008:	f8c8 2000 	str.w	r2, [r8]
 800200c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002010:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002014:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002018:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800201c:	9307      	str	r3, [sp, #28]
 800201e:	f8cd 8018 	str.w	r8, [sp, #24]
 8002022:	f04f 32ff 	mov.w	r2, #4294967295
 8002026:	4ba5      	ldr	r3, [pc, #660]	; (80022bc <_printf_float+0x2f0>)
 8002028:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800202c:	f7fe fd3a 	bl	8000aa4 <__aeabi_dcmpun>
 8002030:	2800      	cmp	r0, #0
 8002032:	f040 81fb 	bne.w	800242c <_printf_float+0x460>
 8002036:	f04f 32ff 	mov.w	r2, #4294967295
 800203a:	4ba0      	ldr	r3, [pc, #640]	; (80022bc <_printf_float+0x2f0>)
 800203c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002040:	f7fe fd12 	bl	8000a68 <__aeabi_dcmple>
 8002044:	2800      	cmp	r0, #0
 8002046:	f040 81f1 	bne.w	800242c <_printf_float+0x460>
 800204a:	2200      	movs	r2, #0
 800204c:	2300      	movs	r3, #0
 800204e:	4640      	mov	r0, r8
 8002050:	4649      	mov	r1, r9
 8002052:	f7fe fcff 	bl	8000a54 <__aeabi_dcmplt>
 8002056:	b110      	cbz	r0, 800205e <_printf_float+0x92>
 8002058:	232d      	movs	r3, #45	; 0x2d
 800205a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800205e:	4b98      	ldr	r3, [pc, #608]	; (80022c0 <_printf_float+0x2f4>)
 8002060:	4a98      	ldr	r2, [pc, #608]	; (80022c4 <_printf_float+0x2f8>)
 8002062:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002066:	bf8c      	ite	hi
 8002068:	4690      	movhi	r8, r2
 800206a:	4698      	movls	r8, r3
 800206c:	2303      	movs	r3, #3
 800206e:	f02b 0204 	bic.w	r2, fp, #4
 8002072:	6123      	str	r3, [r4, #16]
 8002074:	6022      	str	r2, [r4, #0]
 8002076:	f04f 0900 	mov.w	r9, #0
 800207a:	9700      	str	r7, [sp, #0]
 800207c:	4633      	mov	r3, r6
 800207e:	aa0b      	add	r2, sp, #44	; 0x2c
 8002080:	4621      	mov	r1, r4
 8002082:	4628      	mov	r0, r5
 8002084:	f000 f9e2 	bl	800244c <_printf_common>
 8002088:	3001      	adds	r0, #1
 800208a:	f040 8093 	bne.w	80021b4 <_printf_float+0x1e8>
 800208e:	f04f 30ff 	mov.w	r0, #4294967295
 8002092:	b00d      	add	sp, #52	; 0x34
 8002094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002098:	6861      	ldr	r1, [r4, #4]
 800209a:	1c4b      	adds	r3, r1, #1
 800209c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80020a0:	d13f      	bne.n	8002122 <_printf_float+0x156>
 80020a2:	2306      	movs	r3, #6
 80020a4:	6063      	str	r3, [r4, #4]
 80020a6:	2300      	movs	r3, #0
 80020a8:	9303      	str	r3, [sp, #12]
 80020aa:	ab0a      	add	r3, sp, #40	; 0x28
 80020ac:	9302      	str	r3, [sp, #8]
 80020ae:	ab09      	add	r3, sp, #36	; 0x24
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	ec49 8b10 	vmov	d0, r8, r9
 80020b6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80020ba:	6022      	str	r2, [r4, #0]
 80020bc:	f8cd a004 	str.w	sl, [sp, #4]
 80020c0:	6861      	ldr	r1, [r4, #4]
 80020c2:	4628      	mov	r0, r5
 80020c4:	f7ff feec 	bl	8001ea0 <__cvt>
 80020c8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80020cc:	2b47      	cmp	r3, #71	; 0x47
 80020ce:	4680      	mov	r8, r0
 80020d0:	d109      	bne.n	80020e6 <_printf_float+0x11a>
 80020d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020d4:	1cd8      	adds	r0, r3, #3
 80020d6:	db02      	blt.n	80020de <_printf_float+0x112>
 80020d8:	6862      	ldr	r2, [r4, #4]
 80020da:	4293      	cmp	r3, r2
 80020dc:	dd57      	ble.n	800218e <_printf_float+0x1c2>
 80020de:	f1aa 0a02 	sub.w	sl, sl, #2
 80020e2:	fa5f fa8a 	uxtb.w	sl, sl
 80020e6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80020ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80020ec:	d834      	bhi.n	8002158 <_printf_float+0x18c>
 80020ee:	3901      	subs	r1, #1
 80020f0:	4652      	mov	r2, sl
 80020f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80020f6:	9109      	str	r1, [sp, #36]	; 0x24
 80020f8:	f7ff ff33 	bl	8001f62 <__exponent>
 80020fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80020fe:	1883      	adds	r3, r0, r2
 8002100:	2a01      	cmp	r2, #1
 8002102:	4681      	mov	r9, r0
 8002104:	6123      	str	r3, [r4, #16]
 8002106:	dc02      	bgt.n	800210e <_printf_float+0x142>
 8002108:	6822      	ldr	r2, [r4, #0]
 800210a:	07d1      	lsls	r1, r2, #31
 800210c:	d501      	bpl.n	8002112 <_printf_float+0x146>
 800210e:	3301      	adds	r3, #1
 8002110:	6123      	str	r3, [r4, #16]
 8002112:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0af      	beq.n	800207a <_printf_float+0xae>
 800211a:	232d      	movs	r3, #45	; 0x2d
 800211c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002120:	e7ab      	b.n	800207a <_printf_float+0xae>
 8002122:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8002126:	d002      	beq.n	800212e <_printf_float+0x162>
 8002128:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800212c:	d1bb      	bne.n	80020a6 <_printf_float+0xda>
 800212e:	b189      	cbz	r1, 8002154 <_printf_float+0x188>
 8002130:	2300      	movs	r3, #0
 8002132:	9303      	str	r3, [sp, #12]
 8002134:	ab0a      	add	r3, sp, #40	; 0x28
 8002136:	9302      	str	r3, [sp, #8]
 8002138:	ab09      	add	r3, sp, #36	; 0x24
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	ec49 8b10 	vmov	d0, r8, r9
 8002140:	6022      	str	r2, [r4, #0]
 8002142:	f8cd a004 	str.w	sl, [sp, #4]
 8002146:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800214a:	4628      	mov	r0, r5
 800214c:	f7ff fea8 	bl	8001ea0 <__cvt>
 8002150:	4680      	mov	r8, r0
 8002152:	e7be      	b.n	80020d2 <_printf_float+0x106>
 8002154:	2301      	movs	r3, #1
 8002156:	e7a5      	b.n	80020a4 <_printf_float+0xd8>
 8002158:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800215c:	d119      	bne.n	8002192 <_printf_float+0x1c6>
 800215e:	2900      	cmp	r1, #0
 8002160:	6863      	ldr	r3, [r4, #4]
 8002162:	dd0c      	ble.n	800217e <_printf_float+0x1b2>
 8002164:	6121      	str	r1, [r4, #16]
 8002166:	b913      	cbnz	r3, 800216e <_printf_float+0x1a2>
 8002168:	6822      	ldr	r2, [r4, #0]
 800216a:	07d2      	lsls	r2, r2, #31
 800216c:	d502      	bpl.n	8002174 <_printf_float+0x1a8>
 800216e:	3301      	adds	r3, #1
 8002170:	440b      	add	r3, r1
 8002172:	6123      	str	r3, [r4, #16]
 8002174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002176:	65a3      	str	r3, [r4, #88]	; 0x58
 8002178:	f04f 0900 	mov.w	r9, #0
 800217c:	e7c9      	b.n	8002112 <_printf_float+0x146>
 800217e:	b913      	cbnz	r3, 8002186 <_printf_float+0x1ba>
 8002180:	6822      	ldr	r2, [r4, #0]
 8002182:	07d0      	lsls	r0, r2, #31
 8002184:	d501      	bpl.n	800218a <_printf_float+0x1be>
 8002186:	3302      	adds	r3, #2
 8002188:	e7f3      	b.n	8002172 <_printf_float+0x1a6>
 800218a:	2301      	movs	r3, #1
 800218c:	e7f1      	b.n	8002172 <_printf_float+0x1a6>
 800218e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8002192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002194:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002196:	4293      	cmp	r3, r2
 8002198:	db05      	blt.n	80021a6 <_printf_float+0x1da>
 800219a:	6822      	ldr	r2, [r4, #0]
 800219c:	6123      	str	r3, [r4, #16]
 800219e:	07d1      	lsls	r1, r2, #31
 80021a0:	d5e8      	bpl.n	8002174 <_printf_float+0x1a8>
 80021a2:	3301      	adds	r3, #1
 80021a4:	e7e5      	b.n	8002172 <_printf_float+0x1a6>
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	bfd4      	ite	le
 80021aa:	f1c3 0302 	rsble	r3, r3, #2
 80021ae:	2301      	movgt	r3, #1
 80021b0:	4413      	add	r3, r2
 80021b2:	e7de      	b.n	8002172 <_printf_float+0x1a6>
 80021b4:	6823      	ldr	r3, [r4, #0]
 80021b6:	055a      	lsls	r2, r3, #21
 80021b8:	d407      	bmi.n	80021ca <_printf_float+0x1fe>
 80021ba:	6923      	ldr	r3, [r4, #16]
 80021bc:	4642      	mov	r2, r8
 80021be:	4631      	mov	r1, r6
 80021c0:	4628      	mov	r0, r5
 80021c2:	47b8      	blx	r7
 80021c4:	3001      	adds	r0, #1
 80021c6:	d12b      	bne.n	8002220 <_printf_float+0x254>
 80021c8:	e761      	b.n	800208e <_printf_float+0xc2>
 80021ca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80021ce:	f240 80e2 	bls.w	8002396 <_printf_float+0x3ca>
 80021d2:	2200      	movs	r2, #0
 80021d4:	2300      	movs	r3, #0
 80021d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80021da:	f7fe fc31 	bl	8000a40 <__aeabi_dcmpeq>
 80021de:	2800      	cmp	r0, #0
 80021e0:	d03c      	beq.n	800225c <_printf_float+0x290>
 80021e2:	2301      	movs	r3, #1
 80021e4:	4a38      	ldr	r2, [pc, #224]	; (80022c8 <_printf_float+0x2fc>)
 80021e6:	4631      	mov	r1, r6
 80021e8:	4628      	mov	r0, r5
 80021ea:	47b8      	blx	r7
 80021ec:	3001      	adds	r0, #1
 80021ee:	f43f af4e 	beq.w	800208e <_printf_float+0xc2>
 80021f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80021f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80021f6:	429a      	cmp	r2, r3
 80021f8:	db02      	blt.n	8002200 <_printf_float+0x234>
 80021fa:	6823      	ldr	r3, [r4, #0]
 80021fc:	07d8      	lsls	r0, r3, #31
 80021fe:	d50f      	bpl.n	8002220 <_printf_float+0x254>
 8002200:	9b05      	ldr	r3, [sp, #20]
 8002202:	9a04      	ldr	r2, [sp, #16]
 8002204:	4631      	mov	r1, r6
 8002206:	4628      	mov	r0, r5
 8002208:	47b8      	blx	r7
 800220a:	3001      	adds	r0, #1
 800220c:	f43f af3f 	beq.w	800208e <_printf_float+0xc2>
 8002210:	f04f 0800 	mov.w	r8, #0
 8002214:	f104 091a 	add.w	r9, r4, #26
 8002218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800221a:	3b01      	subs	r3, #1
 800221c:	4598      	cmp	r8, r3
 800221e:	db12      	blt.n	8002246 <_printf_float+0x27a>
 8002220:	6823      	ldr	r3, [r4, #0]
 8002222:	079b      	lsls	r3, r3, #30
 8002224:	d509      	bpl.n	800223a <_printf_float+0x26e>
 8002226:	f04f 0800 	mov.w	r8, #0
 800222a:	f104 0919 	add.w	r9, r4, #25
 800222e:	68e3      	ldr	r3, [r4, #12]
 8002230:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002232:	1a9b      	subs	r3, r3, r2
 8002234:	4598      	cmp	r8, r3
 8002236:	f2c0 80ee 	blt.w	8002416 <_printf_float+0x44a>
 800223a:	68e0      	ldr	r0, [r4, #12]
 800223c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800223e:	4298      	cmp	r0, r3
 8002240:	bfb8      	it	lt
 8002242:	4618      	movlt	r0, r3
 8002244:	e725      	b.n	8002092 <_printf_float+0xc6>
 8002246:	2301      	movs	r3, #1
 8002248:	464a      	mov	r2, r9
 800224a:	4631      	mov	r1, r6
 800224c:	4628      	mov	r0, r5
 800224e:	47b8      	blx	r7
 8002250:	3001      	adds	r0, #1
 8002252:	f43f af1c 	beq.w	800208e <_printf_float+0xc2>
 8002256:	f108 0801 	add.w	r8, r8, #1
 800225a:	e7dd      	b.n	8002218 <_printf_float+0x24c>
 800225c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800225e:	2b00      	cmp	r3, #0
 8002260:	dc34      	bgt.n	80022cc <_printf_float+0x300>
 8002262:	2301      	movs	r3, #1
 8002264:	4a18      	ldr	r2, [pc, #96]	; (80022c8 <_printf_float+0x2fc>)
 8002266:	4631      	mov	r1, r6
 8002268:	4628      	mov	r0, r5
 800226a:	47b8      	blx	r7
 800226c:	3001      	adds	r0, #1
 800226e:	f43f af0e 	beq.w	800208e <_printf_float+0xc2>
 8002272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002274:	b923      	cbnz	r3, 8002280 <_printf_float+0x2b4>
 8002276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002278:	b913      	cbnz	r3, 8002280 <_printf_float+0x2b4>
 800227a:	6823      	ldr	r3, [r4, #0]
 800227c:	07d9      	lsls	r1, r3, #31
 800227e:	d5cf      	bpl.n	8002220 <_printf_float+0x254>
 8002280:	9b05      	ldr	r3, [sp, #20]
 8002282:	9a04      	ldr	r2, [sp, #16]
 8002284:	4631      	mov	r1, r6
 8002286:	4628      	mov	r0, r5
 8002288:	47b8      	blx	r7
 800228a:	3001      	adds	r0, #1
 800228c:	f43f aeff 	beq.w	800208e <_printf_float+0xc2>
 8002290:	f04f 0900 	mov.w	r9, #0
 8002294:	f104 0a1a 	add.w	sl, r4, #26
 8002298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800229a:	425b      	negs	r3, r3
 800229c:	4599      	cmp	r9, r3
 800229e:	db01      	blt.n	80022a4 <_printf_float+0x2d8>
 80022a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80022a2:	e78b      	b.n	80021bc <_printf_float+0x1f0>
 80022a4:	2301      	movs	r3, #1
 80022a6:	4652      	mov	r2, sl
 80022a8:	4631      	mov	r1, r6
 80022aa:	4628      	mov	r0, r5
 80022ac:	47b8      	blx	r7
 80022ae:	3001      	adds	r0, #1
 80022b0:	f43f aeed 	beq.w	800208e <_printf_float+0xc2>
 80022b4:	f109 0901 	add.w	r9, r9, #1
 80022b8:	e7ee      	b.n	8002298 <_printf_float+0x2cc>
 80022ba:	bf00      	nop
 80022bc:	7fefffff 	.word	0x7fefffff
 80022c0:	08003940 	.word	0x08003940
 80022c4:	08003944 	.word	0x08003944
 80022c8:	08003950 	.word	0x08003950
 80022cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80022ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80022d0:	429a      	cmp	r2, r3
 80022d2:	bfa8      	it	ge
 80022d4:	461a      	movge	r2, r3
 80022d6:	2a00      	cmp	r2, #0
 80022d8:	4691      	mov	r9, r2
 80022da:	dc38      	bgt.n	800234e <_printf_float+0x382>
 80022dc:	f104 031a 	add.w	r3, r4, #26
 80022e0:	f04f 0b00 	mov.w	fp, #0
 80022e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80022e8:	9306      	str	r3, [sp, #24]
 80022ea:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80022ee:	ebaa 0309 	sub.w	r3, sl, r9
 80022f2:	459b      	cmp	fp, r3
 80022f4:	db33      	blt.n	800235e <_printf_float+0x392>
 80022f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80022f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80022fa:	429a      	cmp	r2, r3
 80022fc:	db3a      	blt.n	8002374 <_printf_float+0x3a8>
 80022fe:	6823      	ldr	r3, [r4, #0]
 8002300:	07da      	lsls	r2, r3, #31
 8002302:	d437      	bmi.n	8002374 <_printf_float+0x3a8>
 8002304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002306:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002308:	eba3 020a 	sub.w	r2, r3, sl
 800230c:	eba3 0901 	sub.w	r9, r3, r1
 8002310:	4591      	cmp	r9, r2
 8002312:	bfa8      	it	ge
 8002314:	4691      	movge	r9, r2
 8002316:	f1b9 0f00 	cmp.w	r9, #0
 800231a:	dc33      	bgt.n	8002384 <_printf_float+0x3b8>
 800231c:	f04f 0800 	mov.w	r8, #0
 8002320:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002324:	f104 0a1a 	add.w	sl, r4, #26
 8002328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800232a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800232c:	1a9b      	subs	r3, r3, r2
 800232e:	eba3 0309 	sub.w	r3, r3, r9
 8002332:	4598      	cmp	r8, r3
 8002334:	f6bf af74 	bge.w	8002220 <_printf_float+0x254>
 8002338:	2301      	movs	r3, #1
 800233a:	4652      	mov	r2, sl
 800233c:	4631      	mov	r1, r6
 800233e:	4628      	mov	r0, r5
 8002340:	47b8      	blx	r7
 8002342:	3001      	adds	r0, #1
 8002344:	f43f aea3 	beq.w	800208e <_printf_float+0xc2>
 8002348:	f108 0801 	add.w	r8, r8, #1
 800234c:	e7ec      	b.n	8002328 <_printf_float+0x35c>
 800234e:	4613      	mov	r3, r2
 8002350:	4631      	mov	r1, r6
 8002352:	4642      	mov	r2, r8
 8002354:	4628      	mov	r0, r5
 8002356:	47b8      	blx	r7
 8002358:	3001      	adds	r0, #1
 800235a:	d1bf      	bne.n	80022dc <_printf_float+0x310>
 800235c:	e697      	b.n	800208e <_printf_float+0xc2>
 800235e:	2301      	movs	r3, #1
 8002360:	9a06      	ldr	r2, [sp, #24]
 8002362:	4631      	mov	r1, r6
 8002364:	4628      	mov	r0, r5
 8002366:	47b8      	blx	r7
 8002368:	3001      	adds	r0, #1
 800236a:	f43f ae90 	beq.w	800208e <_printf_float+0xc2>
 800236e:	f10b 0b01 	add.w	fp, fp, #1
 8002372:	e7ba      	b.n	80022ea <_printf_float+0x31e>
 8002374:	9b05      	ldr	r3, [sp, #20]
 8002376:	9a04      	ldr	r2, [sp, #16]
 8002378:	4631      	mov	r1, r6
 800237a:	4628      	mov	r0, r5
 800237c:	47b8      	blx	r7
 800237e:	3001      	adds	r0, #1
 8002380:	d1c0      	bne.n	8002304 <_printf_float+0x338>
 8002382:	e684      	b.n	800208e <_printf_float+0xc2>
 8002384:	464b      	mov	r3, r9
 8002386:	eb08 020a 	add.w	r2, r8, sl
 800238a:	4631      	mov	r1, r6
 800238c:	4628      	mov	r0, r5
 800238e:	47b8      	blx	r7
 8002390:	3001      	adds	r0, #1
 8002392:	d1c3      	bne.n	800231c <_printf_float+0x350>
 8002394:	e67b      	b.n	800208e <_printf_float+0xc2>
 8002396:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002398:	2a01      	cmp	r2, #1
 800239a:	dc01      	bgt.n	80023a0 <_printf_float+0x3d4>
 800239c:	07db      	lsls	r3, r3, #31
 800239e:	d537      	bpl.n	8002410 <_printf_float+0x444>
 80023a0:	2301      	movs	r3, #1
 80023a2:	4642      	mov	r2, r8
 80023a4:	4631      	mov	r1, r6
 80023a6:	4628      	mov	r0, r5
 80023a8:	47b8      	blx	r7
 80023aa:	3001      	adds	r0, #1
 80023ac:	f43f ae6f 	beq.w	800208e <_printf_float+0xc2>
 80023b0:	9b05      	ldr	r3, [sp, #20]
 80023b2:	9a04      	ldr	r2, [sp, #16]
 80023b4:	4631      	mov	r1, r6
 80023b6:	4628      	mov	r0, r5
 80023b8:	47b8      	blx	r7
 80023ba:	3001      	adds	r0, #1
 80023bc:	f43f ae67 	beq.w	800208e <_printf_float+0xc2>
 80023c0:	2200      	movs	r2, #0
 80023c2:	2300      	movs	r3, #0
 80023c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80023c8:	f7fe fb3a 	bl	8000a40 <__aeabi_dcmpeq>
 80023cc:	b158      	cbz	r0, 80023e6 <_printf_float+0x41a>
 80023ce:	f04f 0800 	mov.w	r8, #0
 80023d2:	f104 0a1a 	add.w	sl, r4, #26
 80023d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80023d8:	3b01      	subs	r3, #1
 80023da:	4598      	cmp	r8, r3
 80023dc:	db0d      	blt.n	80023fa <_printf_float+0x42e>
 80023de:	464b      	mov	r3, r9
 80023e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80023e4:	e6eb      	b.n	80021be <_printf_float+0x1f2>
 80023e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80023e8:	f108 0201 	add.w	r2, r8, #1
 80023ec:	3b01      	subs	r3, #1
 80023ee:	4631      	mov	r1, r6
 80023f0:	4628      	mov	r0, r5
 80023f2:	47b8      	blx	r7
 80023f4:	3001      	adds	r0, #1
 80023f6:	d1f2      	bne.n	80023de <_printf_float+0x412>
 80023f8:	e649      	b.n	800208e <_printf_float+0xc2>
 80023fa:	2301      	movs	r3, #1
 80023fc:	4652      	mov	r2, sl
 80023fe:	4631      	mov	r1, r6
 8002400:	4628      	mov	r0, r5
 8002402:	47b8      	blx	r7
 8002404:	3001      	adds	r0, #1
 8002406:	f43f ae42 	beq.w	800208e <_printf_float+0xc2>
 800240a:	f108 0801 	add.w	r8, r8, #1
 800240e:	e7e2      	b.n	80023d6 <_printf_float+0x40a>
 8002410:	2301      	movs	r3, #1
 8002412:	4642      	mov	r2, r8
 8002414:	e7eb      	b.n	80023ee <_printf_float+0x422>
 8002416:	2301      	movs	r3, #1
 8002418:	464a      	mov	r2, r9
 800241a:	4631      	mov	r1, r6
 800241c:	4628      	mov	r0, r5
 800241e:	47b8      	blx	r7
 8002420:	3001      	adds	r0, #1
 8002422:	f43f ae34 	beq.w	800208e <_printf_float+0xc2>
 8002426:	f108 0801 	add.w	r8, r8, #1
 800242a:	e700      	b.n	800222e <_printf_float+0x262>
 800242c:	4642      	mov	r2, r8
 800242e:	464b      	mov	r3, r9
 8002430:	4640      	mov	r0, r8
 8002432:	4649      	mov	r1, r9
 8002434:	f7fe fb36 	bl	8000aa4 <__aeabi_dcmpun>
 8002438:	2800      	cmp	r0, #0
 800243a:	f43f ae2d 	beq.w	8002098 <_printf_float+0xcc>
 800243e:	4b01      	ldr	r3, [pc, #4]	; (8002444 <_printf_float+0x478>)
 8002440:	4a01      	ldr	r2, [pc, #4]	; (8002448 <_printf_float+0x47c>)
 8002442:	e60e      	b.n	8002062 <_printf_float+0x96>
 8002444:	08003948 	.word	0x08003948
 8002448:	0800394c 	.word	0x0800394c

0800244c <_printf_common>:
 800244c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002450:	4691      	mov	r9, r2
 8002452:	461f      	mov	r7, r3
 8002454:	688a      	ldr	r2, [r1, #8]
 8002456:	690b      	ldr	r3, [r1, #16]
 8002458:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800245c:	4293      	cmp	r3, r2
 800245e:	bfb8      	it	lt
 8002460:	4613      	movlt	r3, r2
 8002462:	f8c9 3000 	str.w	r3, [r9]
 8002466:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800246a:	4606      	mov	r6, r0
 800246c:	460c      	mov	r4, r1
 800246e:	b112      	cbz	r2, 8002476 <_printf_common+0x2a>
 8002470:	3301      	adds	r3, #1
 8002472:	f8c9 3000 	str.w	r3, [r9]
 8002476:	6823      	ldr	r3, [r4, #0]
 8002478:	0699      	lsls	r1, r3, #26
 800247a:	bf42      	ittt	mi
 800247c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002480:	3302      	addmi	r3, #2
 8002482:	f8c9 3000 	strmi.w	r3, [r9]
 8002486:	6825      	ldr	r5, [r4, #0]
 8002488:	f015 0506 	ands.w	r5, r5, #6
 800248c:	d107      	bne.n	800249e <_printf_common+0x52>
 800248e:	f104 0a19 	add.w	sl, r4, #25
 8002492:	68e3      	ldr	r3, [r4, #12]
 8002494:	f8d9 2000 	ldr.w	r2, [r9]
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	429d      	cmp	r5, r3
 800249c:	db29      	blt.n	80024f2 <_printf_common+0xa6>
 800249e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80024a2:	6822      	ldr	r2, [r4, #0]
 80024a4:	3300      	adds	r3, #0
 80024a6:	bf18      	it	ne
 80024a8:	2301      	movne	r3, #1
 80024aa:	0692      	lsls	r2, r2, #26
 80024ac:	d42e      	bmi.n	800250c <_printf_common+0xc0>
 80024ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80024b2:	4639      	mov	r1, r7
 80024b4:	4630      	mov	r0, r6
 80024b6:	47c0      	blx	r8
 80024b8:	3001      	adds	r0, #1
 80024ba:	d021      	beq.n	8002500 <_printf_common+0xb4>
 80024bc:	6823      	ldr	r3, [r4, #0]
 80024be:	68e5      	ldr	r5, [r4, #12]
 80024c0:	f8d9 2000 	ldr.w	r2, [r9]
 80024c4:	f003 0306 	and.w	r3, r3, #6
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	bf08      	it	eq
 80024cc:	1aad      	subeq	r5, r5, r2
 80024ce:	68a3      	ldr	r3, [r4, #8]
 80024d0:	6922      	ldr	r2, [r4, #16]
 80024d2:	bf0c      	ite	eq
 80024d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80024d8:	2500      	movne	r5, #0
 80024da:	4293      	cmp	r3, r2
 80024dc:	bfc4      	itt	gt
 80024de:	1a9b      	subgt	r3, r3, r2
 80024e0:	18ed      	addgt	r5, r5, r3
 80024e2:	f04f 0900 	mov.w	r9, #0
 80024e6:	341a      	adds	r4, #26
 80024e8:	454d      	cmp	r5, r9
 80024ea:	d11b      	bne.n	8002524 <_printf_common+0xd8>
 80024ec:	2000      	movs	r0, #0
 80024ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024f2:	2301      	movs	r3, #1
 80024f4:	4652      	mov	r2, sl
 80024f6:	4639      	mov	r1, r7
 80024f8:	4630      	mov	r0, r6
 80024fa:	47c0      	blx	r8
 80024fc:	3001      	adds	r0, #1
 80024fe:	d103      	bne.n	8002508 <_printf_common+0xbc>
 8002500:	f04f 30ff 	mov.w	r0, #4294967295
 8002504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002508:	3501      	adds	r5, #1
 800250a:	e7c2      	b.n	8002492 <_printf_common+0x46>
 800250c:	18e1      	adds	r1, r4, r3
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	2030      	movs	r0, #48	; 0x30
 8002512:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002516:	4422      	add	r2, r4
 8002518:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800251c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002520:	3302      	adds	r3, #2
 8002522:	e7c4      	b.n	80024ae <_printf_common+0x62>
 8002524:	2301      	movs	r3, #1
 8002526:	4622      	mov	r2, r4
 8002528:	4639      	mov	r1, r7
 800252a:	4630      	mov	r0, r6
 800252c:	47c0      	blx	r8
 800252e:	3001      	adds	r0, #1
 8002530:	d0e6      	beq.n	8002500 <_printf_common+0xb4>
 8002532:	f109 0901 	add.w	r9, r9, #1
 8002536:	e7d7      	b.n	80024e8 <_printf_common+0x9c>

08002538 <quorem>:
 8002538:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800253c:	6903      	ldr	r3, [r0, #16]
 800253e:	690c      	ldr	r4, [r1, #16]
 8002540:	429c      	cmp	r4, r3
 8002542:	4680      	mov	r8, r0
 8002544:	f300 8082 	bgt.w	800264c <quorem+0x114>
 8002548:	3c01      	subs	r4, #1
 800254a:	f101 0714 	add.w	r7, r1, #20
 800254e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8002552:	f100 0614 	add.w	r6, r0, #20
 8002556:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800255a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800255e:	eb06 030e 	add.w	r3, r6, lr
 8002562:	3501      	adds	r5, #1
 8002564:	eb07 090e 	add.w	r9, r7, lr
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	fbb0 f5f5 	udiv	r5, r0, r5
 800256e:	b395      	cbz	r5, 80025d6 <quorem+0x9e>
 8002570:	f04f 0a00 	mov.w	sl, #0
 8002574:	4638      	mov	r0, r7
 8002576:	46b4      	mov	ip, r6
 8002578:	46d3      	mov	fp, sl
 800257a:	f850 2b04 	ldr.w	r2, [r0], #4
 800257e:	b293      	uxth	r3, r2
 8002580:	fb05 a303 	mla	r3, r5, r3, sl
 8002584:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002588:	b29b      	uxth	r3, r3
 800258a:	ebab 0303 	sub.w	r3, fp, r3
 800258e:	0c12      	lsrs	r2, r2, #16
 8002590:	f8bc b000 	ldrh.w	fp, [ip]
 8002594:	fb05 a202 	mla	r2, r5, r2, sl
 8002598:	fa13 f38b 	uxtah	r3, r3, fp
 800259c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80025a0:	fa1f fb82 	uxth.w	fp, r2
 80025a4:	f8dc 2000 	ldr.w	r2, [ip]
 80025a8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80025ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80025b6:	4581      	cmp	r9, r0
 80025b8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80025bc:	f84c 3b04 	str.w	r3, [ip], #4
 80025c0:	d2db      	bcs.n	800257a <quorem+0x42>
 80025c2:	f856 300e 	ldr.w	r3, [r6, lr]
 80025c6:	b933      	cbnz	r3, 80025d6 <quorem+0x9e>
 80025c8:	9b01      	ldr	r3, [sp, #4]
 80025ca:	3b04      	subs	r3, #4
 80025cc:	429e      	cmp	r6, r3
 80025ce:	461a      	mov	r2, r3
 80025d0:	d330      	bcc.n	8002634 <quorem+0xfc>
 80025d2:	f8c8 4010 	str.w	r4, [r8, #16]
 80025d6:	4640      	mov	r0, r8
 80025d8:	f001 f833 	bl	8003642 <__mcmp>
 80025dc:	2800      	cmp	r0, #0
 80025de:	db25      	blt.n	800262c <quorem+0xf4>
 80025e0:	3501      	adds	r5, #1
 80025e2:	4630      	mov	r0, r6
 80025e4:	f04f 0e00 	mov.w	lr, #0
 80025e8:	f857 2b04 	ldr.w	r2, [r7], #4
 80025ec:	f8d0 c000 	ldr.w	ip, [r0]
 80025f0:	b293      	uxth	r3, r2
 80025f2:	ebae 0303 	sub.w	r3, lr, r3
 80025f6:	0c12      	lsrs	r2, r2, #16
 80025f8:	fa13 f38c 	uxtah	r3, r3, ip
 80025fc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8002600:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002604:	b29b      	uxth	r3, r3
 8002606:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800260a:	45b9      	cmp	r9, r7
 800260c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8002610:	f840 3b04 	str.w	r3, [r0], #4
 8002614:	d2e8      	bcs.n	80025e8 <quorem+0xb0>
 8002616:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800261a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800261e:	b92a      	cbnz	r2, 800262c <quorem+0xf4>
 8002620:	3b04      	subs	r3, #4
 8002622:	429e      	cmp	r6, r3
 8002624:	461a      	mov	r2, r3
 8002626:	d30b      	bcc.n	8002640 <quorem+0x108>
 8002628:	f8c8 4010 	str.w	r4, [r8, #16]
 800262c:	4628      	mov	r0, r5
 800262e:	b003      	add	sp, #12
 8002630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	3b04      	subs	r3, #4
 8002638:	2a00      	cmp	r2, #0
 800263a:	d1ca      	bne.n	80025d2 <quorem+0x9a>
 800263c:	3c01      	subs	r4, #1
 800263e:	e7c5      	b.n	80025cc <quorem+0x94>
 8002640:	6812      	ldr	r2, [r2, #0]
 8002642:	3b04      	subs	r3, #4
 8002644:	2a00      	cmp	r2, #0
 8002646:	d1ef      	bne.n	8002628 <quorem+0xf0>
 8002648:	3c01      	subs	r4, #1
 800264a:	e7ea      	b.n	8002622 <quorem+0xea>
 800264c:	2000      	movs	r0, #0
 800264e:	e7ee      	b.n	800262e <quorem+0xf6>

08002650 <_dtoa_r>:
 8002650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002654:	ec57 6b10 	vmov	r6, r7, d0
 8002658:	b097      	sub	sp, #92	; 0x5c
 800265a:	e9cd 6700 	strd	r6, r7, [sp]
 800265e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002660:	9107      	str	r1, [sp, #28]
 8002662:	4604      	mov	r4, r0
 8002664:	920a      	str	r2, [sp, #40]	; 0x28
 8002666:	930f      	str	r3, [sp, #60]	; 0x3c
 8002668:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800266a:	b93e      	cbnz	r6, 800267c <_dtoa_r+0x2c>
 800266c:	2010      	movs	r0, #16
 800266e:	f000 fdcb 	bl	8003208 <malloc>
 8002672:	6260      	str	r0, [r4, #36]	; 0x24
 8002674:	6046      	str	r6, [r0, #4]
 8002676:	6086      	str	r6, [r0, #8]
 8002678:	6006      	str	r6, [r0, #0]
 800267a:	60c6      	str	r6, [r0, #12]
 800267c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800267e:	6819      	ldr	r1, [r3, #0]
 8002680:	b151      	cbz	r1, 8002698 <_dtoa_r+0x48>
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	604a      	str	r2, [r1, #4]
 8002686:	2301      	movs	r3, #1
 8002688:	4093      	lsls	r3, r2
 800268a:	608b      	str	r3, [r1, #8]
 800268c:	4620      	mov	r0, r4
 800268e:	f000 fe02 	bl	8003296 <_Bfree>
 8002692:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	9b01      	ldr	r3, [sp, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	bfbf      	itttt	lt
 800269e:	2301      	movlt	r3, #1
 80026a0:	602b      	strlt	r3, [r5, #0]
 80026a2:	9b01      	ldrlt	r3, [sp, #4]
 80026a4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80026a8:	bfb2      	itee	lt
 80026aa:	9301      	strlt	r3, [sp, #4]
 80026ac:	2300      	movge	r3, #0
 80026ae:	602b      	strge	r3, [r5, #0]
 80026b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80026b4:	4ba8      	ldr	r3, [pc, #672]	; (8002958 <_dtoa_r+0x308>)
 80026b6:	ea33 0308 	bics.w	r3, r3, r8
 80026ba:	d11b      	bne.n	80026f4 <_dtoa_r+0xa4>
 80026bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80026be:	f242 730f 	movw	r3, #9999	; 0x270f
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	9b00      	ldr	r3, [sp, #0]
 80026c6:	b923      	cbnz	r3, 80026d2 <_dtoa_r+0x82>
 80026c8:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80026cc:	2800      	cmp	r0, #0
 80026ce:	f000 8578 	beq.w	80031c2 <_dtoa_r+0xb72>
 80026d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80026d4:	b953      	cbnz	r3, 80026ec <_dtoa_r+0x9c>
 80026d6:	4ba1      	ldr	r3, [pc, #644]	; (800295c <_dtoa_r+0x30c>)
 80026d8:	e021      	b.n	800271e <_dtoa_r+0xce>
 80026da:	4ba1      	ldr	r3, [pc, #644]	; (8002960 <_dtoa_r+0x310>)
 80026dc:	9302      	str	r3, [sp, #8]
 80026de:	3308      	adds	r3, #8
 80026e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	9802      	ldr	r0, [sp, #8]
 80026e6:	b017      	add	sp, #92	; 0x5c
 80026e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026ec:	4b9b      	ldr	r3, [pc, #620]	; (800295c <_dtoa_r+0x30c>)
 80026ee:	9302      	str	r3, [sp, #8]
 80026f0:	3303      	adds	r3, #3
 80026f2:	e7f5      	b.n	80026e0 <_dtoa_r+0x90>
 80026f4:	e9dd 6700 	ldrd	r6, r7, [sp]
 80026f8:	2200      	movs	r2, #0
 80026fa:	2300      	movs	r3, #0
 80026fc:	4630      	mov	r0, r6
 80026fe:	4639      	mov	r1, r7
 8002700:	f7fe f99e 	bl	8000a40 <__aeabi_dcmpeq>
 8002704:	4681      	mov	r9, r0
 8002706:	b160      	cbz	r0, 8002722 <_dtoa_r+0xd2>
 8002708:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800270a:	2301      	movs	r3, #1
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 8553 	beq.w	80031bc <_dtoa_r+0xb6c>
 8002716:	4b93      	ldr	r3, [pc, #588]	; (8002964 <_dtoa_r+0x314>)
 8002718:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	3b01      	subs	r3, #1
 800271e:	9302      	str	r3, [sp, #8]
 8002720:	e7e0      	b.n	80026e4 <_dtoa_r+0x94>
 8002722:	aa14      	add	r2, sp, #80	; 0x50
 8002724:	a915      	add	r1, sp, #84	; 0x54
 8002726:	ec47 6b10 	vmov	d0, r6, r7
 800272a:	4620      	mov	r0, r4
 800272c:	f001 f801 	bl	8003732 <__d2b>
 8002730:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8002734:	4682      	mov	sl, r0
 8002736:	2d00      	cmp	r5, #0
 8002738:	d07e      	beq.n	8002838 <_dtoa_r+0x1e8>
 800273a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800273e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8002742:	4630      	mov	r0, r6
 8002744:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8002748:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800274c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8002750:	2200      	movs	r2, #0
 8002752:	4b85      	ldr	r3, [pc, #532]	; (8002968 <_dtoa_r+0x318>)
 8002754:	f7fd fd58 	bl	8000208 <__aeabi_dsub>
 8002758:	a379      	add	r3, pc, #484	; (adr r3, 8002940 <_dtoa_r+0x2f0>)
 800275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275e:	f7fd ff07 	bl	8000570 <__aeabi_dmul>
 8002762:	a379      	add	r3, pc, #484	; (adr r3, 8002948 <_dtoa_r+0x2f8>)
 8002764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002768:	f7fd fd50 	bl	800020c <__adddf3>
 800276c:	4606      	mov	r6, r0
 800276e:	4628      	mov	r0, r5
 8002770:	460f      	mov	r7, r1
 8002772:	f7fd fe97 	bl	80004a4 <__aeabi_i2d>
 8002776:	a376      	add	r3, pc, #472	; (adr r3, 8002950 <_dtoa_r+0x300>)
 8002778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277c:	f7fd fef8 	bl	8000570 <__aeabi_dmul>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4630      	mov	r0, r6
 8002786:	4639      	mov	r1, r7
 8002788:	f7fd fd40 	bl	800020c <__adddf3>
 800278c:	4606      	mov	r6, r0
 800278e:	460f      	mov	r7, r1
 8002790:	f7fe f99e 	bl	8000ad0 <__aeabi_d2iz>
 8002794:	2200      	movs	r2, #0
 8002796:	4683      	mov	fp, r0
 8002798:	2300      	movs	r3, #0
 800279a:	4630      	mov	r0, r6
 800279c:	4639      	mov	r1, r7
 800279e:	f7fe f959 	bl	8000a54 <__aeabi_dcmplt>
 80027a2:	b158      	cbz	r0, 80027bc <_dtoa_r+0x16c>
 80027a4:	4658      	mov	r0, fp
 80027a6:	f7fd fe7d 	bl	80004a4 <__aeabi_i2d>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4630      	mov	r0, r6
 80027b0:	4639      	mov	r1, r7
 80027b2:	f7fe f945 	bl	8000a40 <__aeabi_dcmpeq>
 80027b6:	b908      	cbnz	r0, 80027bc <_dtoa_r+0x16c>
 80027b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80027bc:	f1bb 0f16 	cmp.w	fp, #22
 80027c0:	d859      	bhi.n	8002876 <_dtoa_r+0x226>
 80027c2:	496a      	ldr	r1, [pc, #424]	; (800296c <_dtoa_r+0x31c>)
 80027c4:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80027c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80027cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027d0:	f7fe f95e 	bl	8000a90 <__aeabi_dcmpgt>
 80027d4:	2800      	cmp	r0, #0
 80027d6:	d050      	beq.n	800287a <_dtoa_r+0x22a>
 80027d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80027dc:	2300      	movs	r3, #0
 80027de:	930e      	str	r3, [sp, #56]	; 0x38
 80027e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80027e2:	1b5d      	subs	r5, r3, r5
 80027e4:	1e6b      	subs	r3, r5, #1
 80027e6:	9306      	str	r3, [sp, #24]
 80027e8:	bf45      	ittet	mi
 80027ea:	f1c5 0301 	rsbmi	r3, r5, #1
 80027ee:	9305      	strmi	r3, [sp, #20]
 80027f0:	2300      	movpl	r3, #0
 80027f2:	2300      	movmi	r3, #0
 80027f4:	bf4c      	ite	mi
 80027f6:	9306      	strmi	r3, [sp, #24]
 80027f8:	9305      	strpl	r3, [sp, #20]
 80027fa:	f1bb 0f00 	cmp.w	fp, #0
 80027fe:	db3e      	blt.n	800287e <_dtoa_r+0x22e>
 8002800:	9b06      	ldr	r3, [sp, #24]
 8002802:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8002806:	445b      	add	r3, fp
 8002808:	9306      	str	r3, [sp, #24]
 800280a:	2300      	movs	r3, #0
 800280c:	9308      	str	r3, [sp, #32]
 800280e:	9b07      	ldr	r3, [sp, #28]
 8002810:	2b09      	cmp	r3, #9
 8002812:	f200 80af 	bhi.w	8002974 <_dtoa_r+0x324>
 8002816:	2b05      	cmp	r3, #5
 8002818:	bfc4      	itt	gt
 800281a:	3b04      	subgt	r3, #4
 800281c:	9307      	strgt	r3, [sp, #28]
 800281e:	9b07      	ldr	r3, [sp, #28]
 8002820:	f1a3 0302 	sub.w	r3, r3, #2
 8002824:	bfcc      	ite	gt
 8002826:	2600      	movgt	r6, #0
 8002828:	2601      	movle	r6, #1
 800282a:	2b03      	cmp	r3, #3
 800282c:	f200 80ae 	bhi.w	800298c <_dtoa_r+0x33c>
 8002830:	e8df f003 	tbb	[pc, r3]
 8002834:	772f8482 	.word	0x772f8482
 8002838:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800283a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800283c:	441d      	add	r5, r3
 800283e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8002842:	2b20      	cmp	r3, #32
 8002844:	dd11      	ble.n	800286a <_dtoa_r+0x21a>
 8002846:	9a00      	ldr	r2, [sp, #0]
 8002848:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800284c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002850:	fa22 f000 	lsr.w	r0, r2, r0
 8002854:	fa08 f303 	lsl.w	r3, r8, r3
 8002858:	4318      	orrs	r0, r3
 800285a:	f7fd fe13 	bl	8000484 <__aeabi_ui2d>
 800285e:	2301      	movs	r3, #1
 8002860:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8002864:	3d01      	subs	r5, #1
 8002866:	9312      	str	r3, [sp, #72]	; 0x48
 8002868:	e772      	b.n	8002750 <_dtoa_r+0x100>
 800286a:	f1c3 0020 	rsb	r0, r3, #32
 800286e:	9b00      	ldr	r3, [sp, #0]
 8002870:	fa03 f000 	lsl.w	r0, r3, r0
 8002874:	e7f1      	b.n	800285a <_dtoa_r+0x20a>
 8002876:	2301      	movs	r3, #1
 8002878:	e7b1      	b.n	80027de <_dtoa_r+0x18e>
 800287a:	900e      	str	r0, [sp, #56]	; 0x38
 800287c:	e7b0      	b.n	80027e0 <_dtoa_r+0x190>
 800287e:	9b05      	ldr	r3, [sp, #20]
 8002880:	eba3 030b 	sub.w	r3, r3, fp
 8002884:	9305      	str	r3, [sp, #20]
 8002886:	f1cb 0300 	rsb	r3, fp, #0
 800288a:	9308      	str	r3, [sp, #32]
 800288c:	2300      	movs	r3, #0
 800288e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002890:	e7bd      	b.n	800280e <_dtoa_r+0x1be>
 8002892:	2301      	movs	r3, #1
 8002894:	9309      	str	r3, [sp, #36]	; 0x24
 8002896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002898:	2b00      	cmp	r3, #0
 800289a:	dd7a      	ble.n	8002992 <_dtoa_r+0x342>
 800289c:	9304      	str	r3, [sp, #16]
 800289e:	9303      	str	r3, [sp, #12]
 80028a0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80028a2:	2200      	movs	r2, #0
 80028a4:	606a      	str	r2, [r5, #4]
 80028a6:	2104      	movs	r1, #4
 80028a8:	f101 0214 	add.w	r2, r1, #20
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d975      	bls.n	800299c <_dtoa_r+0x34c>
 80028b0:	6869      	ldr	r1, [r5, #4]
 80028b2:	4620      	mov	r0, r4
 80028b4:	f000 fcbb 	bl	800322e <_Balloc>
 80028b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028ba:	6028      	str	r0, [r5, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	9302      	str	r3, [sp, #8]
 80028c0:	9b03      	ldr	r3, [sp, #12]
 80028c2:	2b0e      	cmp	r3, #14
 80028c4:	f200 80e5 	bhi.w	8002a92 <_dtoa_r+0x442>
 80028c8:	2e00      	cmp	r6, #0
 80028ca:	f000 80e2 	beq.w	8002a92 <_dtoa_r+0x442>
 80028ce:	ed9d 7b00 	vldr	d7, [sp]
 80028d2:	f1bb 0f00 	cmp.w	fp, #0
 80028d6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80028da:	dd74      	ble.n	80029c6 <_dtoa_r+0x376>
 80028dc:	4a23      	ldr	r2, [pc, #140]	; (800296c <_dtoa_r+0x31c>)
 80028de:	f00b 030f 	and.w	r3, fp, #15
 80028e2:	ea4f 162b 	mov.w	r6, fp, asr #4
 80028e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80028ea:	06f0      	lsls	r0, r6, #27
 80028ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80028f0:	d559      	bpl.n	80029a6 <_dtoa_r+0x356>
 80028f2:	4b1f      	ldr	r3, [pc, #124]	; (8002970 <_dtoa_r+0x320>)
 80028f4:	ec51 0b17 	vmov	r0, r1, d7
 80028f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80028fc:	f7fd ff62 	bl	80007c4 <__aeabi_ddiv>
 8002900:	e9cd 0100 	strd	r0, r1, [sp]
 8002904:	f006 060f 	and.w	r6, r6, #15
 8002908:	2503      	movs	r5, #3
 800290a:	4f19      	ldr	r7, [pc, #100]	; (8002970 <_dtoa_r+0x320>)
 800290c:	2e00      	cmp	r6, #0
 800290e:	d14c      	bne.n	80029aa <_dtoa_r+0x35a>
 8002910:	4642      	mov	r2, r8
 8002912:	464b      	mov	r3, r9
 8002914:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002918:	f7fd ff54 	bl	80007c4 <__aeabi_ddiv>
 800291c:	e9cd 0100 	strd	r0, r1, [sp]
 8002920:	e06a      	b.n	80029f8 <_dtoa_r+0x3a8>
 8002922:	2301      	movs	r3, #1
 8002924:	9309      	str	r3, [sp, #36]	; 0x24
 8002926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002928:	445b      	add	r3, fp
 800292a:	9304      	str	r3, [sp, #16]
 800292c:	3301      	adds	r3, #1
 800292e:	2b01      	cmp	r3, #1
 8002930:	9303      	str	r3, [sp, #12]
 8002932:	bfb8      	it	lt
 8002934:	2301      	movlt	r3, #1
 8002936:	e7b3      	b.n	80028a0 <_dtoa_r+0x250>
 8002938:	2300      	movs	r3, #0
 800293a:	e7ab      	b.n	8002894 <_dtoa_r+0x244>
 800293c:	2300      	movs	r3, #0
 800293e:	e7f1      	b.n	8002924 <_dtoa_r+0x2d4>
 8002940:	636f4361 	.word	0x636f4361
 8002944:	3fd287a7 	.word	0x3fd287a7
 8002948:	8b60c8b3 	.word	0x8b60c8b3
 800294c:	3fc68a28 	.word	0x3fc68a28
 8002950:	509f79fb 	.word	0x509f79fb
 8002954:	3fd34413 	.word	0x3fd34413
 8002958:	7ff00000 	.word	0x7ff00000
 800295c:	0800395b 	.word	0x0800395b
 8002960:	08003952 	.word	0x08003952
 8002964:	08003951 	.word	0x08003951
 8002968:	3ff80000 	.word	0x3ff80000
 800296c:	08003988 	.word	0x08003988
 8002970:	08003960 	.word	0x08003960
 8002974:	2601      	movs	r6, #1
 8002976:	2300      	movs	r3, #0
 8002978:	9307      	str	r3, [sp, #28]
 800297a:	9609      	str	r6, [sp, #36]	; 0x24
 800297c:	f04f 33ff 	mov.w	r3, #4294967295
 8002980:	9304      	str	r3, [sp, #16]
 8002982:	9303      	str	r3, [sp, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	2312      	movs	r3, #18
 8002988:	920a      	str	r2, [sp, #40]	; 0x28
 800298a:	e789      	b.n	80028a0 <_dtoa_r+0x250>
 800298c:	2301      	movs	r3, #1
 800298e:	9309      	str	r3, [sp, #36]	; 0x24
 8002990:	e7f4      	b.n	800297c <_dtoa_r+0x32c>
 8002992:	2301      	movs	r3, #1
 8002994:	9304      	str	r3, [sp, #16]
 8002996:	9303      	str	r3, [sp, #12]
 8002998:	461a      	mov	r2, r3
 800299a:	e7f5      	b.n	8002988 <_dtoa_r+0x338>
 800299c:	686a      	ldr	r2, [r5, #4]
 800299e:	3201      	adds	r2, #1
 80029a0:	606a      	str	r2, [r5, #4]
 80029a2:	0049      	lsls	r1, r1, #1
 80029a4:	e780      	b.n	80028a8 <_dtoa_r+0x258>
 80029a6:	2502      	movs	r5, #2
 80029a8:	e7af      	b.n	800290a <_dtoa_r+0x2ba>
 80029aa:	07f1      	lsls	r1, r6, #31
 80029ac:	d508      	bpl.n	80029c0 <_dtoa_r+0x370>
 80029ae:	4640      	mov	r0, r8
 80029b0:	4649      	mov	r1, r9
 80029b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029b6:	f7fd fddb 	bl	8000570 <__aeabi_dmul>
 80029ba:	3501      	adds	r5, #1
 80029bc:	4680      	mov	r8, r0
 80029be:	4689      	mov	r9, r1
 80029c0:	1076      	asrs	r6, r6, #1
 80029c2:	3708      	adds	r7, #8
 80029c4:	e7a2      	b.n	800290c <_dtoa_r+0x2bc>
 80029c6:	f000 809d 	beq.w	8002b04 <_dtoa_r+0x4b4>
 80029ca:	f1cb 0600 	rsb	r6, fp, #0
 80029ce:	4b9f      	ldr	r3, [pc, #636]	; (8002c4c <_dtoa_r+0x5fc>)
 80029d0:	4f9f      	ldr	r7, [pc, #636]	; (8002c50 <_dtoa_r+0x600>)
 80029d2:	f006 020f 	and.w	r2, r6, #15
 80029d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80029da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80029e2:	f7fd fdc5 	bl	8000570 <__aeabi_dmul>
 80029e6:	e9cd 0100 	strd	r0, r1, [sp]
 80029ea:	1136      	asrs	r6, r6, #4
 80029ec:	2300      	movs	r3, #0
 80029ee:	2502      	movs	r5, #2
 80029f0:	2e00      	cmp	r6, #0
 80029f2:	d17c      	bne.n	8002aee <_dtoa_r+0x49e>
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d191      	bne.n	800291c <_dtoa_r+0x2cc>
 80029f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 8084 	beq.w	8002b08 <_dtoa_r+0x4b8>
 8002a00:	e9dd 8900 	ldrd	r8, r9, [sp]
 8002a04:	2200      	movs	r2, #0
 8002a06:	4b93      	ldr	r3, [pc, #588]	; (8002c54 <_dtoa_r+0x604>)
 8002a08:	4640      	mov	r0, r8
 8002a0a:	4649      	mov	r1, r9
 8002a0c:	f7fe f822 	bl	8000a54 <__aeabi_dcmplt>
 8002a10:	2800      	cmp	r0, #0
 8002a12:	d079      	beq.n	8002b08 <_dtoa_r+0x4b8>
 8002a14:	9b03      	ldr	r3, [sp, #12]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d076      	beq.n	8002b08 <_dtoa_r+0x4b8>
 8002a1a:	9b04      	ldr	r3, [sp, #16]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	dd34      	ble.n	8002a8a <_dtoa_r+0x43a>
 8002a20:	2200      	movs	r2, #0
 8002a22:	4b8d      	ldr	r3, [pc, #564]	; (8002c58 <_dtoa_r+0x608>)
 8002a24:	4640      	mov	r0, r8
 8002a26:	4649      	mov	r1, r9
 8002a28:	f7fd fda2 	bl	8000570 <__aeabi_dmul>
 8002a2c:	e9cd 0100 	strd	r0, r1, [sp]
 8002a30:	9e04      	ldr	r6, [sp, #16]
 8002a32:	f10b 37ff 	add.w	r7, fp, #4294967295
 8002a36:	3501      	adds	r5, #1
 8002a38:	4628      	mov	r0, r5
 8002a3a:	f7fd fd33 	bl	80004a4 <__aeabi_i2d>
 8002a3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002a42:	f7fd fd95 	bl	8000570 <__aeabi_dmul>
 8002a46:	2200      	movs	r2, #0
 8002a48:	4b84      	ldr	r3, [pc, #528]	; (8002c5c <_dtoa_r+0x60c>)
 8002a4a:	f7fd fbdf 	bl	800020c <__adddf3>
 8002a4e:	4680      	mov	r8, r0
 8002a50:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8002a54:	2e00      	cmp	r6, #0
 8002a56:	d15a      	bne.n	8002b0e <_dtoa_r+0x4be>
 8002a58:	2200      	movs	r2, #0
 8002a5a:	4b81      	ldr	r3, [pc, #516]	; (8002c60 <_dtoa_r+0x610>)
 8002a5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002a60:	f7fd fbd2 	bl	8000208 <__aeabi_dsub>
 8002a64:	4642      	mov	r2, r8
 8002a66:	464b      	mov	r3, r9
 8002a68:	e9cd 0100 	strd	r0, r1, [sp]
 8002a6c:	f7fe f810 	bl	8000a90 <__aeabi_dcmpgt>
 8002a70:	2800      	cmp	r0, #0
 8002a72:	f040 829b 	bne.w	8002fac <_dtoa_r+0x95c>
 8002a76:	4642      	mov	r2, r8
 8002a78:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8002a7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002a80:	f7fd ffe8 	bl	8000a54 <__aeabi_dcmplt>
 8002a84:	2800      	cmp	r0, #0
 8002a86:	f040 828f 	bne.w	8002fa8 <_dtoa_r+0x958>
 8002a8a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8002a8e:	e9cd 2300 	strd	r2, r3, [sp]
 8002a92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f2c0 8150 	blt.w	8002d3a <_dtoa_r+0x6ea>
 8002a9a:	f1bb 0f0e 	cmp.w	fp, #14
 8002a9e:	f300 814c 	bgt.w	8002d3a <_dtoa_r+0x6ea>
 8002aa2:	4b6a      	ldr	r3, [pc, #424]	; (8002c4c <_dtoa_r+0x5fc>)
 8002aa4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002aa8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f280 80da 	bge.w	8002c68 <_dtoa_r+0x618>
 8002ab4:	9b03      	ldr	r3, [sp, #12]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f300 80d6 	bgt.w	8002c68 <_dtoa_r+0x618>
 8002abc:	f040 8273 	bne.w	8002fa6 <_dtoa_r+0x956>
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	4b67      	ldr	r3, [pc, #412]	; (8002c60 <_dtoa_r+0x610>)
 8002ac4:	4640      	mov	r0, r8
 8002ac6:	4649      	mov	r1, r9
 8002ac8:	f7fd fd52 	bl	8000570 <__aeabi_dmul>
 8002acc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002ad0:	f7fd ffd4 	bl	8000a7c <__aeabi_dcmpge>
 8002ad4:	9e03      	ldr	r6, [sp, #12]
 8002ad6:	4637      	mov	r7, r6
 8002ad8:	2800      	cmp	r0, #0
 8002ada:	f040 824a 	bne.w	8002f72 <_dtoa_r+0x922>
 8002ade:	9b02      	ldr	r3, [sp, #8]
 8002ae0:	9a02      	ldr	r2, [sp, #8]
 8002ae2:	1c5d      	adds	r5, r3, #1
 8002ae4:	2331      	movs	r3, #49	; 0x31
 8002ae6:	7013      	strb	r3, [r2, #0]
 8002ae8:	f10b 0b01 	add.w	fp, fp, #1
 8002aec:	e245      	b.n	8002f7a <_dtoa_r+0x92a>
 8002aee:	07f2      	lsls	r2, r6, #31
 8002af0:	d505      	bpl.n	8002afe <_dtoa_r+0x4ae>
 8002af2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002af6:	f7fd fd3b 	bl	8000570 <__aeabi_dmul>
 8002afa:	3501      	adds	r5, #1
 8002afc:	2301      	movs	r3, #1
 8002afe:	1076      	asrs	r6, r6, #1
 8002b00:	3708      	adds	r7, #8
 8002b02:	e775      	b.n	80029f0 <_dtoa_r+0x3a0>
 8002b04:	2502      	movs	r5, #2
 8002b06:	e777      	b.n	80029f8 <_dtoa_r+0x3a8>
 8002b08:	465f      	mov	r7, fp
 8002b0a:	9e03      	ldr	r6, [sp, #12]
 8002b0c:	e794      	b.n	8002a38 <_dtoa_r+0x3e8>
 8002b0e:	9a02      	ldr	r2, [sp, #8]
 8002b10:	4b4e      	ldr	r3, [pc, #312]	; (8002c4c <_dtoa_r+0x5fc>)
 8002b12:	4432      	add	r2, r6
 8002b14:	9213      	str	r2, [sp, #76]	; 0x4c
 8002b16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b18:	1e71      	subs	r1, r6, #1
 8002b1a:	2a00      	cmp	r2, #0
 8002b1c:	d048      	beq.n	8002bb0 <_dtoa_r+0x560>
 8002b1e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b26:	2000      	movs	r0, #0
 8002b28:	494e      	ldr	r1, [pc, #312]	; (8002c64 <_dtoa_r+0x614>)
 8002b2a:	f7fd fe4b 	bl	80007c4 <__aeabi_ddiv>
 8002b2e:	4642      	mov	r2, r8
 8002b30:	464b      	mov	r3, r9
 8002b32:	f7fd fb69 	bl	8000208 <__aeabi_dsub>
 8002b36:	9d02      	ldr	r5, [sp, #8]
 8002b38:	4680      	mov	r8, r0
 8002b3a:	4689      	mov	r9, r1
 8002b3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002b40:	f7fd ffc6 	bl	8000ad0 <__aeabi_d2iz>
 8002b44:	4606      	mov	r6, r0
 8002b46:	f7fd fcad 	bl	80004a4 <__aeabi_i2d>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002b52:	f7fd fb59 	bl	8000208 <__aeabi_dsub>
 8002b56:	3630      	adds	r6, #48	; 0x30
 8002b58:	f805 6b01 	strb.w	r6, [r5], #1
 8002b5c:	4642      	mov	r2, r8
 8002b5e:	464b      	mov	r3, r9
 8002b60:	e9cd 0100 	strd	r0, r1, [sp]
 8002b64:	f7fd ff76 	bl	8000a54 <__aeabi_dcmplt>
 8002b68:	2800      	cmp	r0, #0
 8002b6a:	d165      	bne.n	8002c38 <_dtoa_r+0x5e8>
 8002b6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002b70:	2000      	movs	r0, #0
 8002b72:	4938      	ldr	r1, [pc, #224]	; (8002c54 <_dtoa_r+0x604>)
 8002b74:	f7fd fb48 	bl	8000208 <__aeabi_dsub>
 8002b78:	4642      	mov	r2, r8
 8002b7a:	464b      	mov	r3, r9
 8002b7c:	f7fd ff6a 	bl	8000a54 <__aeabi_dcmplt>
 8002b80:	2800      	cmp	r0, #0
 8002b82:	f040 80ba 	bne.w	8002cfa <_dtoa_r+0x6aa>
 8002b86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002b88:	429d      	cmp	r5, r3
 8002b8a:	f43f af7e 	beq.w	8002a8a <_dtoa_r+0x43a>
 8002b8e:	2200      	movs	r2, #0
 8002b90:	4b31      	ldr	r3, [pc, #196]	; (8002c58 <_dtoa_r+0x608>)
 8002b92:	4640      	mov	r0, r8
 8002b94:	4649      	mov	r1, r9
 8002b96:	f7fd fceb 	bl	8000570 <__aeabi_dmul>
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	4680      	mov	r8, r0
 8002b9e:	4689      	mov	r9, r1
 8002ba0:	4b2d      	ldr	r3, [pc, #180]	; (8002c58 <_dtoa_r+0x608>)
 8002ba2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002ba6:	f7fd fce3 	bl	8000570 <__aeabi_dmul>
 8002baa:	e9cd 0100 	strd	r0, r1, [sp]
 8002bae:	e7c5      	b.n	8002b3c <_dtoa_r+0x4ec>
 8002bb0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8002bb4:	4642      	mov	r2, r8
 8002bb6:	464b      	mov	r3, r9
 8002bb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002bbc:	f7fd fcd8 	bl	8000570 <__aeabi_dmul>
 8002bc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002bc4:	9d02      	ldr	r5, [sp, #8]
 8002bc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002bca:	f7fd ff81 	bl	8000ad0 <__aeabi_d2iz>
 8002bce:	4606      	mov	r6, r0
 8002bd0:	f7fd fc68 	bl	80004a4 <__aeabi_i2d>
 8002bd4:	3630      	adds	r6, #48	; 0x30
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002bde:	f7fd fb13 	bl	8000208 <__aeabi_dsub>
 8002be2:	f805 6b01 	strb.w	r6, [r5], #1
 8002be6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002be8:	42ab      	cmp	r3, r5
 8002bea:	4680      	mov	r8, r0
 8002bec:	4689      	mov	r9, r1
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	d125      	bne.n	8002c40 <_dtoa_r+0x5f0>
 8002bf4:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <_dtoa_r+0x614>)
 8002bf6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002bfa:	f7fd fb07 	bl	800020c <__adddf3>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	4640      	mov	r0, r8
 8002c04:	4649      	mov	r1, r9
 8002c06:	f7fd ff43 	bl	8000a90 <__aeabi_dcmpgt>
 8002c0a:	2800      	cmp	r0, #0
 8002c0c:	d175      	bne.n	8002cfa <_dtoa_r+0x6aa>
 8002c0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8002c12:	2000      	movs	r0, #0
 8002c14:	4913      	ldr	r1, [pc, #76]	; (8002c64 <_dtoa_r+0x614>)
 8002c16:	f7fd faf7 	bl	8000208 <__aeabi_dsub>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4640      	mov	r0, r8
 8002c20:	4649      	mov	r1, r9
 8002c22:	f7fd ff17 	bl	8000a54 <__aeabi_dcmplt>
 8002c26:	2800      	cmp	r0, #0
 8002c28:	f43f af2f 	beq.w	8002a8a <_dtoa_r+0x43a>
 8002c2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002c30:	2b30      	cmp	r3, #48	; 0x30
 8002c32:	f105 32ff 	add.w	r2, r5, #4294967295
 8002c36:	d001      	beq.n	8002c3c <_dtoa_r+0x5ec>
 8002c38:	46bb      	mov	fp, r7
 8002c3a:	e04d      	b.n	8002cd8 <_dtoa_r+0x688>
 8002c3c:	4615      	mov	r5, r2
 8002c3e:	e7f5      	b.n	8002c2c <_dtoa_r+0x5dc>
 8002c40:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <_dtoa_r+0x608>)
 8002c42:	f7fd fc95 	bl	8000570 <__aeabi_dmul>
 8002c46:	e9cd 0100 	strd	r0, r1, [sp]
 8002c4a:	e7bc      	b.n	8002bc6 <_dtoa_r+0x576>
 8002c4c:	08003988 	.word	0x08003988
 8002c50:	08003960 	.word	0x08003960
 8002c54:	3ff00000 	.word	0x3ff00000
 8002c58:	40240000 	.word	0x40240000
 8002c5c:	401c0000 	.word	0x401c0000
 8002c60:	40140000 	.word	0x40140000
 8002c64:	3fe00000 	.word	0x3fe00000
 8002c68:	e9dd 6700 	ldrd	r6, r7, [sp]
 8002c6c:	9d02      	ldr	r5, [sp, #8]
 8002c6e:	4642      	mov	r2, r8
 8002c70:	464b      	mov	r3, r9
 8002c72:	4630      	mov	r0, r6
 8002c74:	4639      	mov	r1, r7
 8002c76:	f7fd fda5 	bl	80007c4 <__aeabi_ddiv>
 8002c7a:	f7fd ff29 	bl	8000ad0 <__aeabi_d2iz>
 8002c7e:	9000      	str	r0, [sp, #0]
 8002c80:	f7fd fc10 	bl	80004a4 <__aeabi_i2d>
 8002c84:	4642      	mov	r2, r8
 8002c86:	464b      	mov	r3, r9
 8002c88:	f7fd fc72 	bl	8000570 <__aeabi_dmul>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4630      	mov	r0, r6
 8002c92:	4639      	mov	r1, r7
 8002c94:	f7fd fab8 	bl	8000208 <__aeabi_dsub>
 8002c98:	9e00      	ldr	r6, [sp, #0]
 8002c9a:	9f03      	ldr	r7, [sp, #12]
 8002c9c:	3630      	adds	r6, #48	; 0x30
 8002c9e:	f805 6b01 	strb.w	r6, [r5], #1
 8002ca2:	9e02      	ldr	r6, [sp, #8]
 8002ca4:	1bae      	subs	r6, r5, r6
 8002ca6:	42b7      	cmp	r7, r6
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	d138      	bne.n	8002d20 <_dtoa_r+0x6d0>
 8002cae:	f7fd faad 	bl	800020c <__adddf3>
 8002cb2:	4606      	mov	r6, r0
 8002cb4:	460f      	mov	r7, r1
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4640      	mov	r0, r8
 8002cbc:	4649      	mov	r1, r9
 8002cbe:	f7fd fec9 	bl	8000a54 <__aeabi_dcmplt>
 8002cc2:	b9c8      	cbnz	r0, 8002cf8 <_dtoa_r+0x6a8>
 8002cc4:	4632      	mov	r2, r6
 8002cc6:	463b      	mov	r3, r7
 8002cc8:	4640      	mov	r0, r8
 8002cca:	4649      	mov	r1, r9
 8002ccc:	f7fd feb8 	bl	8000a40 <__aeabi_dcmpeq>
 8002cd0:	b110      	cbz	r0, 8002cd8 <_dtoa_r+0x688>
 8002cd2:	9b00      	ldr	r3, [sp, #0]
 8002cd4:	07db      	lsls	r3, r3, #31
 8002cd6:	d40f      	bmi.n	8002cf8 <_dtoa_r+0x6a8>
 8002cd8:	4651      	mov	r1, sl
 8002cda:	4620      	mov	r0, r4
 8002cdc:	f000 fadb 	bl	8003296 <_Bfree>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002ce4:	702b      	strb	r3, [r5, #0]
 8002ce6:	f10b 0301 	add.w	r3, fp, #1
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f43f acf8 	beq.w	80026e4 <_dtoa_r+0x94>
 8002cf4:	601d      	str	r5, [r3, #0]
 8002cf6:	e4f5      	b.n	80026e4 <_dtoa_r+0x94>
 8002cf8:	465f      	mov	r7, fp
 8002cfa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8002cfe:	2a39      	cmp	r2, #57	; 0x39
 8002d00:	f105 33ff 	add.w	r3, r5, #4294967295
 8002d04:	d106      	bne.n	8002d14 <_dtoa_r+0x6c4>
 8002d06:	9a02      	ldr	r2, [sp, #8]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d107      	bne.n	8002d1c <_dtoa_r+0x6cc>
 8002d0c:	2330      	movs	r3, #48	; 0x30
 8002d0e:	7013      	strb	r3, [r2, #0]
 8002d10:	3701      	adds	r7, #1
 8002d12:	4613      	mov	r3, r2
 8002d14:	781a      	ldrb	r2, [r3, #0]
 8002d16:	3201      	adds	r2, #1
 8002d18:	701a      	strb	r2, [r3, #0]
 8002d1a:	e78d      	b.n	8002c38 <_dtoa_r+0x5e8>
 8002d1c:	461d      	mov	r5, r3
 8002d1e:	e7ec      	b.n	8002cfa <_dtoa_r+0x6aa>
 8002d20:	2200      	movs	r2, #0
 8002d22:	4ba4      	ldr	r3, [pc, #656]	; (8002fb4 <_dtoa_r+0x964>)
 8002d24:	f7fd fc24 	bl	8000570 <__aeabi_dmul>
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	4606      	mov	r6, r0
 8002d2e:	460f      	mov	r7, r1
 8002d30:	f7fd fe86 	bl	8000a40 <__aeabi_dcmpeq>
 8002d34:	2800      	cmp	r0, #0
 8002d36:	d09a      	beq.n	8002c6e <_dtoa_r+0x61e>
 8002d38:	e7ce      	b.n	8002cd8 <_dtoa_r+0x688>
 8002d3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d3c:	2a00      	cmp	r2, #0
 8002d3e:	f000 80cd 	beq.w	8002edc <_dtoa_r+0x88c>
 8002d42:	9a07      	ldr	r2, [sp, #28]
 8002d44:	2a01      	cmp	r2, #1
 8002d46:	f300 80af 	bgt.w	8002ea8 <_dtoa_r+0x858>
 8002d4a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002d4c:	2a00      	cmp	r2, #0
 8002d4e:	f000 80a7 	beq.w	8002ea0 <_dtoa_r+0x850>
 8002d52:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8002d56:	9e08      	ldr	r6, [sp, #32]
 8002d58:	9d05      	ldr	r5, [sp, #20]
 8002d5a:	9a05      	ldr	r2, [sp, #20]
 8002d5c:	441a      	add	r2, r3
 8002d5e:	9205      	str	r2, [sp, #20]
 8002d60:	9a06      	ldr	r2, [sp, #24]
 8002d62:	2101      	movs	r1, #1
 8002d64:	441a      	add	r2, r3
 8002d66:	4620      	mov	r0, r4
 8002d68:	9206      	str	r2, [sp, #24]
 8002d6a:	f000 fb34 	bl	80033d6 <__i2b>
 8002d6e:	4607      	mov	r7, r0
 8002d70:	2d00      	cmp	r5, #0
 8002d72:	dd0c      	ble.n	8002d8e <_dtoa_r+0x73e>
 8002d74:	9b06      	ldr	r3, [sp, #24]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	dd09      	ble.n	8002d8e <_dtoa_r+0x73e>
 8002d7a:	42ab      	cmp	r3, r5
 8002d7c:	9a05      	ldr	r2, [sp, #20]
 8002d7e:	bfa8      	it	ge
 8002d80:	462b      	movge	r3, r5
 8002d82:	1ad2      	subs	r2, r2, r3
 8002d84:	9205      	str	r2, [sp, #20]
 8002d86:	9a06      	ldr	r2, [sp, #24]
 8002d88:	1aed      	subs	r5, r5, r3
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	9306      	str	r3, [sp, #24]
 8002d8e:	9b08      	ldr	r3, [sp, #32]
 8002d90:	b1f3      	cbz	r3, 8002dd0 <_dtoa_r+0x780>
 8002d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 80a5 	beq.w	8002ee4 <_dtoa_r+0x894>
 8002d9a:	2e00      	cmp	r6, #0
 8002d9c:	dd10      	ble.n	8002dc0 <_dtoa_r+0x770>
 8002d9e:	4639      	mov	r1, r7
 8002da0:	4632      	mov	r2, r6
 8002da2:	4620      	mov	r0, r4
 8002da4:	f000 fbae 	bl	8003504 <__pow5mult>
 8002da8:	4652      	mov	r2, sl
 8002daa:	4601      	mov	r1, r0
 8002dac:	4607      	mov	r7, r0
 8002dae:	4620      	mov	r0, r4
 8002db0:	f000 fb1a 	bl	80033e8 <__multiply>
 8002db4:	4651      	mov	r1, sl
 8002db6:	4680      	mov	r8, r0
 8002db8:	4620      	mov	r0, r4
 8002dba:	f000 fa6c 	bl	8003296 <_Bfree>
 8002dbe:	46c2      	mov	sl, r8
 8002dc0:	9b08      	ldr	r3, [sp, #32]
 8002dc2:	1b9a      	subs	r2, r3, r6
 8002dc4:	d004      	beq.n	8002dd0 <_dtoa_r+0x780>
 8002dc6:	4651      	mov	r1, sl
 8002dc8:	4620      	mov	r0, r4
 8002dca:	f000 fb9b 	bl	8003504 <__pow5mult>
 8002dce:	4682      	mov	sl, r0
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	f000 faff 	bl	80033d6 <__i2b>
 8002dd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	4606      	mov	r6, r0
 8002dde:	f340 8083 	ble.w	8002ee8 <_dtoa_r+0x898>
 8002de2:	461a      	mov	r2, r3
 8002de4:	4601      	mov	r1, r0
 8002de6:	4620      	mov	r0, r4
 8002de8:	f000 fb8c 	bl	8003504 <__pow5mult>
 8002dec:	9b07      	ldr	r3, [sp, #28]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	4606      	mov	r6, r0
 8002df2:	dd7c      	ble.n	8002eee <_dtoa_r+0x89e>
 8002df4:	f04f 0800 	mov.w	r8, #0
 8002df8:	6933      	ldr	r3, [r6, #16]
 8002dfa:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002dfe:	6918      	ldr	r0, [r3, #16]
 8002e00:	f000 fa9b 	bl	800333a <__hi0bits>
 8002e04:	f1c0 0020 	rsb	r0, r0, #32
 8002e08:	9b06      	ldr	r3, [sp, #24]
 8002e0a:	4418      	add	r0, r3
 8002e0c:	f010 001f 	ands.w	r0, r0, #31
 8002e10:	f000 8096 	beq.w	8002f40 <_dtoa_r+0x8f0>
 8002e14:	f1c0 0320 	rsb	r3, r0, #32
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	f340 8087 	ble.w	8002f2c <_dtoa_r+0x8dc>
 8002e1e:	9b05      	ldr	r3, [sp, #20]
 8002e20:	f1c0 001c 	rsb	r0, r0, #28
 8002e24:	4403      	add	r3, r0
 8002e26:	9305      	str	r3, [sp, #20]
 8002e28:	9b06      	ldr	r3, [sp, #24]
 8002e2a:	4405      	add	r5, r0
 8002e2c:	4403      	add	r3, r0
 8002e2e:	9306      	str	r3, [sp, #24]
 8002e30:	9b05      	ldr	r3, [sp, #20]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	dd05      	ble.n	8002e42 <_dtoa_r+0x7f2>
 8002e36:	4651      	mov	r1, sl
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f000 fbb0 	bl	80035a0 <__lshift>
 8002e40:	4682      	mov	sl, r0
 8002e42:	9b06      	ldr	r3, [sp, #24]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	dd05      	ble.n	8002e54 <_dtoa_r+0x804>
 8002e48:	4631      	mov	r1, r6
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	f000 fba7 	bl	80035a0 <__lshift>
 8002e52:	4606      	mov	r6, r0
 8002e54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d074      	beq.n	8002f44 <_dtoa_r+0x8f4>
 8002e5a:	4631      	mov	r1, r6
 8002e5c:	4650      	mov	r0, sl
 8002e5e:	f000 fbf0 	bl	8003642 <__mcmp>
 8002e62:	2800      	cmp	r0, #0
 8002e64:	da6e      	bge.n	8002f44 <_dtoa_r+0x8f4>
 8002e66:	2300      	movs	r3, #0
 8002e68:	4651      	mov	r1, sl
 8002e6a:	220a      	movs	r2, #10
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	f000 fa29 	bl	80032c4 <__multadd>
 8002e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002e78:	4682      	mov	sl, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 81a8 	beq.w	80031d0 <_dtoa_r+0xb80>
 8002e80:	2300      	movs	r3, #0
 8002e82:	4639      	mov	r1, r7
 8002e84:	220a      	movs	r2, #10
 8002e86:	4620      	mov	r0, r4
 8002e88:	f000 fa1c 	bl	80032c4 <__multadd>
 8002e8c:	9b04      	ldr	r3, [sp, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	4607      	mov	r7, r0
 8002e92:	f300 80c8 	bgt.w	8003026 <_dtoa_r+0x9d6>
 8002e96:	9b07      	ldr	r3, [sp, #28]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	f340 80c4 	ble.w	8003026 <_dtoa_r+0x9d6>
 8002e9e:	e059      	b.n	8002f54 <_dtoa_r+0x904>
 8002ea0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002ea2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8002ea6:	e756      	b.n	8002d56 <_dtoa_r+0x706>
 8002ea8:	9b03      	ldr	r3, [sp, #12]
 8002eaa:	1e5e      	subs	r6, r3, #1
 8002eac:	9b08      	ldr	r3, [sp, #32]
 8002eae:	42b3      	cmp	r3, r6
 8002eb0:	bfbf      	itttt	lt
 8002eb2:	9b08      	ldrlt	r3, [sp, #32]
 8002eb4:	9608      	strlt	r6, [sp, #32]
 8002eb6:	1af2      	sublt	r2, r6, r3
 8002eb8:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8002eba:	bfb6      	itet	lt
 8002ebc:	189b      	addlt	r3, r3, r2
 8002ebe:	1b9e      	subge	r6, r3, r6
 8002ec0:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8002ec2:	9b03      	ldr	r3, [sp, #12]
 8002ec4:	bfb8      	it	lt
 8002ec6:	2600      	movlt	r6, #0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bfb9      	ittee	lt
 8002ecc:	9b05      	ldrlt	r3, [sp, #20]
 8002ece:	9a03      	ldrlt	r2, [sp, #12]
 8002ed0:	9d05      	ldrge	r5, [sp, #20]
 8002ed2:	9b03      	ldrge	r3, [sp, #12]
 8002ed4:	bfbc      	itt	lt
 8002ed6:	1a9d      	sublt	r5, r3, r2
 8002ed8:	2300      	movlt	r3, #0
 8002eda:	e73e      	b.n	8002d5a <_dtoa_r+0x70a>
 8002edc:	9e08      	ldr	r6, [sp, #32]
 8002ede:	9d05      	ldr	r5, [sp, #20]
 8002ee0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002ee2:	e745      	b.n	8002d70 <_dtoa_r+0x720>
 8002ee4:	9a08      	ldr	r2, [sp, #32]
 8002ee6:	e76e      	b.n	8002dc6 <_dtoa_r+0x776>
 8002ee8:	9b07      	ldr	r3, [sp, #28]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	dc19      	bgt.n	8002f22 <_dtoa_r+0x8d2>
 8002eee:	9b00      	ldr	r3, [sp, #0]
 8002ef0:	b9bb      	cbnz	r3, 8002f22 <_dtoa_r+0x8d2>
 8002ef2:	9b01      	ldr	r3, [sp, #4]
 8002ef4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ef8:	b99b      	cbnz	r3, 8002f22 <_dtoa_r+0x8d2>
 8002efa:	9b01      	ldr	r3, [sp, #4]
 8002efc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f00:	0d1b      	lsrs	r3, r3, #20
 8002f02:	051b      	lsls	r3, r3, #20
 8002f04:	b183      	cbz	r3, 8002f28 <_dtoa_r+0x8d8>
 8002f06:	9b05      	ldr	r3, [sp, #20]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	9305      	str	r3, [sp, #20]
 8002f0c:	9b06      	ldr	r3, [sp, #24]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	9306      	str	r3, [sp, #24]
 8002f12:	f04f 0801 	mov.w	r8, #1
 8002f16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f47f af6d 	bne.w	8002df8 <_dtoa_r+0x7a8>
 8002f1e:	2001      	movs	r0, #1
 8002f20:	e772      	b.n	8002e08 <_dtoa_r+0x7b8>
 8002f22:	f04f 0800 	mov.w	r8, #0
 8002f26:	e7f6      	b.n	8002f16 <_dtoa_r+0x8c6>
 8002f28:	4698      	mov	r8, r3
 8002f2a:	e7f4      	b.n	8002f16 <_dtoa_r+0x8c6>
 8002f2c:	d080      	beq.n	8002e30 <_dtoa_r+0x7e0>
 8002f2e:	9a05      	ldr	r2, [sp, #20]
 8002f30:	331c      	adds	r3, #28
 8002f32:	441a      	add	r2, r3
 8002f34:	9205      	str	r2, [sp, #20]
 8002f36:	9a06      	ldr	r2, [sp, #24]
 8002f38:	441a      	add	r2, r3
 8002f3a:	441d      	add	r5, r3
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	e776      	b.n	8002e2e <_dtoa_r+0x7de>
 8002f40:	4603      	mov	r3, r0
 8002f42:	e7f4      	b.n	8002f2e <_dtoa_r+0x8de>
 8002f44:	9b03      	ldr	r3, [sp, #12]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	dc36      	bgt.n	8002fb8 <_dtoa_r+0x968>
 8002f4a:	9b07      	ldr	r3, [sp, #28]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	dd33      	ble.n	8002fb8 <_dtoa_r+0x968>
 8002f50:	9b03      	ldr	r3, [sp, #12]
 8002f52:	9304      	str	r3, [sp, #16]
 8002f54:	9b04      	ldr	r3, [sp, #16]
 8002f56:	b963      	cbnz	r3, 8002f72 <_dtoa_r+0x922>
 8002f58:	4631      	mov	r1, r6
 8002f5a:	2205      	movs	r2, #5
 8002f5c:	4620      	mov	r0, r4
 8002f5e:	f000 f9b1 	bl	80032c4 <__multadd>
 8002f62:	4601      	mov	r1, r0
 8002f64:	4606      	mov	r6, r0
 8002f66:	4650      	mov	r0, sl
 8002f68:	f000 fb6b 	bl	8003642 <__mcmp>
 8002f6c:	2800      	cmp	r0, #0
 8002f6e:	f73f adb6 	bgt.w	8002ade <_dtoa_r+0x48e>
 8002f72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f74:	9d02      	ldr	r5, [sp, #8]
 8002f76:	ea6f 0b03 	mvn.w	fp, r3
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	9303      	str	r3, [sp, #12]
 8002f7e:	4631      	mov	r1, r6
 8002f80:	4620      	mov	r0, r4
 8002f82:	f000 f988 	bl	8003296 <_Bfree>
 8002f86:	2f00      	cmp	r7, #0
 8002f88:	f43f aea6 	beq.w	8002cd8 <_dtoa_r+0x688>
 8002f8c:	9b03      	ldr	r3, [sp, #12]
 8002f8e:	b12b      	cbz	r3, 8002f9c <_dtoa_r+0x94c>
 8002f90:	42bb      	cmp	r3, r7
 8002f92:	d003      	beq.n	8002f9c <_dtoa_r+0x94c>
 8002f94:	4619      	mov	r1, r3
 8002f96:	4620      	mov	r0, r4
 8002f98:	f000 f97d 	bl	8003296 <_Bfree>
 8002f9c:	4639      	mov	r1, r7
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	f000 f979 	bl	8003296 <_Bfree>
 8002fa4:	e698      	b.n	8002cd8 <_dtoa_r+0x688>
 8002fa6:	2600      	movs	r6, #0
 8002fa8:	4637      	mov	r7, r6
 8002faa:	e7e2      	b.n	8002f72 <_dtoa_r+0x922>
 8002fac:	46bb      	mov	fp, r7
 8002fae:	4637      	mov	r7, r6
 8002fb0:	e595      	b.n	8002ade <_dtoa_r+0x48e>
 8002fb2:	bf00      	nop
 8002fb4:	40240000 	.word	0x40240000
 8002fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fba:	bb93      	cbnz	r3, 8003022 <_dtoa_r+0x9d2>
 8002fbc:	9b03      	ldr	r3, [sp, #12]
 8002fbe:	9304      	str	r3, [sp, #16]
 8002fc0:	9d02      	ldr	r5, [sp, #8]
 8002fc2:	4631      	mov	r1, r6
 8002fc4:	4650      	mov	r0, sl
 8002fc6:	f7ff fab7 	bl	8002538 <quorem>
 8002fca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8002fce:	f805 9b01 	strb.w	r9, [r5], #1
 8002fd2:	9b02      	ldr	r3, [sp, #8]
 8002fd4:	9a04      	ldr	r2, [sp, #16]
 8002fd6:	1aeb      	subs	r3, r5, r3
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	f300 80dc 	bgt.w	8003196 <_dtoa_r+0xb46>
 8002fde:	9b02      	ldr	r3, [sp, #8]
 8002fe0:	2a01      	cmp	r2, #1
 8002fe2:	bfac      	ite	ge
 8002fe4:	189b      	addge	r3, r3, r2
 8002fe6:	3301      	addlt	r3, #1
 8002fe8:	4698      	mov	r8, r3
 8002fea:	2300      	movs	r3, #0
 8002fec:	9303      	str	r3, [sp, #12]
 8002fee:	4651      	mov	r1, sl
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	f000 fad4 	bl	80035a0 <__lshift>
 8002ff8:	4631      	mov	r1, r6
 8002ffa:	4682      	mov	sl, r0
 8002ffc:	f000 fb21 	bl	8003642 <__mcmp>
 8003000:	2800      	cmp	r0, #0
 8003002:	f300 808d 	bgt.w	8003120 <_dtoa_r+0xad0>
 8003006:	d103      	bne.n	8003010 <_dtoa_r+0x9c0>
 8003008:	f019 0f01 	tst.w	r9, #1
 800300c:	f040 8088 	bne.w	8003120 <_dtoa_r+0xad0>
 8003010:	4645      	mov	r5, r8
 8003012:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003016:	2b30      	cmp	r3, #48	; 0x30
 8003018:	f105 32ff 	add.w	r2, r5, #4294967295
 800301c:	d1af      	bne.n	8002f7e <_dtoa_r+0x92e>
 800301e:	4615      	mov	r5, r2
 8003020:	e7f7      	b.n	8003012 <_dtoa_r+0x9c2>
 8003022:	9b03      	ldr	r3, [sp, #12]
 8003024:	9304      	str	r3, [sp, #16]
 8003026:	2d00      	cmp	r5, #0
 8003028:	dd05      	ble.n	8003036 <_dtoa_r+0x9e6>
 800302a:	4639      	mov	r1, r7
 800302c:	462a      	mov	r2, r5
 800302e:	4620      	mov	r0, r4
 8003030:	f000 fab6 	bl	80035a0 <__lshift>
 8003034:	4607      	mov	r7, r0
 8003036:	f1b8 0f00 	cmp.w	r8, #0
 800303a:	d04c      	beq.n	80030d6 <_dtoa_r+0xa86>
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4620      	mov	r0, r4
 8003040:	f000 f8f5 	bl	800322e <_Balloc>
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	3202      	adds	r2, #2
 8003048:	4605      	mov	r5, r0
 800304a:	0092      	lsls	r2, r2, #2
 800304c:	f107 010c 	add.w	r1, r7, #12
 8003050:	300c      	adds	r0, #12
 8003052:	f000 f8e1 	bl	8003218 <memcpy>
 8003056:	2201      	movs	r2, #1
 8003058:	4629      	mov	r1, r5
 800305a:	4620      	mov	r0, r4
 800305c:	f000 faa0 	bl	80035a0 <__lshift>
 8003060:	9b00      	ldr	r3, [sp, #0]
 8003062:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003066:	9703      	str	r7, [sp, #12]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	4607      	mov	r7, r0
 800306e:	9305      	str	r3, [sp, #20]
 8003070:	4631      	mov	r1, r6
 8003072:	4650      	mov	r0, sl
 8003074:	f7ff fa60 	bl	8002538 <quorem>
 8003078:	9903      	ldr	r1, [sp, #12]
 800307a:	4605      	mov	r5, r0
 800307c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003080:	4650      	mov	r0, sl
 8003082:	f000 fade 	bl	8003642 <__mcmp>
 8003086:	463a      	mov	r2, r7
 8003088:	9000      	str	r0, [sp, #0]
 800308a:	4631      	mov	r1, r6
 800308c:	4620      	mov	r0, r4
 800308e:	f000 faf2 	bl	8003676 <__mdiff>
 8003092:	68c3      	ldr	r3, [r0, #12]
 8003094:	4602      	mov	r2, r0
 8003096:	bb03      	cbnz	r3, 80030da <_dtoa_r+0xa8a>
 8003098:	4601      	mov	r1, r0
 800309a:	9006      	str	r0, [sp, #24]
 800309c:	4650      	mov	r0, sl
 800309e:	f000 fad0 	bl	8003642 <__mcmp>
 80030a2:	9a06      	ldr	r2, [sp, #24]
 80030a4:	4603      	mov	r3, r0
 80030a6:	4611      	mov	r1, r2
 80030a8:	4620      	mov	r0, r4
 80030aa:	9306      	str	r3, [sp, #24]
 80030ac:	f000 f8f3 	bl	8003296 <_Bfree>
 80030b0:	9b06      	ldr	r3, [sp, #24]
 80030b2:	b9a3      	cbnz	r3, 80030de <_dtoa_r+0xa8e>
 80030b4:	9a07      	ldr	r2, [sp, #28]
 80030b6:	b992      	cbnz	r2, 80030de <_dtoa_r+0xa8e>
 80030b8:	9a05      	ldr	r2, [sp, #20]
 80030ba:	b982      	cbnz	r2, 80030de <_dtoa_r+0xa8e>
 80030bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80030c0:	d029      	beq.n	8003116 <_dtoa_r+0xac6>
 80030c2:	9b00      	ldr	r3, [sp, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	dd01      	ble.n	80030cc <_dtoa_r+0xa7c>
 80030c8:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80030cc:	f108 0501 	add.w	r5, r8, #1
 80030d0:	f888 9000 	strb.w	r9, [r8]
 80030d4:	e753      	b.n	8002f7e <_dtoa_r+0x92e>
 80030d6:	4638      	mov	r0, r7
 80030d8:	e7c2      	b.n	8003060 <_dtoa_r+0xa10>
 80030da:	2301      	movs	r3, #1
 80030dc:	e7e3      	b.n	80030a6 <_dtoa_r+0xa56>
 80030de:	9a00      	ldr	r2, [sp, #0]
 80030e0:	2a00      	cmp	r2, #0
 80030e2:	db04      	blt.n	80030ee <_dtoa_r+0xa9e>
 80030e4:	d125      	bne.n	8003132 <_dtoa_r+0xae2>
 80030e6:	9a07      	ldr	r2, [sp, #28]
 80030e8:	bb1a      	cbnz	r2, 8003132 <_dtoa_r+0xae2>
 80030ea:	9a05      	ldr	r2, [sp, #20]
 80030ec:	bb0a      	cbnz	r2, 8003132 <_dtoa_r+0xae2>
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	ddec      	ble.n	80030cc <_dtoa_r+0xa7c>
 80030f2:	4651      	mov	r1, sl
 80030f4:	2201      	movs	r2, #1
 80030f6:	4620      	mov	r0, r4
 80030f8:	f000 fa52 	bl	80035a0 <__lshift>
 80030fc:	4631      	mov	r1, r6
 80030fe:	4682      	mov	sl, r0
 8003100:	f000 fa9f 	bl	8003642 <__mcmp>
 8003104:	2800      	cmp	r0, #0
 8003106:	dc03      	bgt.n	8003110 <_dtoa_r+0xac0>
 8003108:	d1e0      	bne.n	80030cc <_dtoa_r+0xa7c>
 800310a:	f019 0f01 	tst.w	r9, #1
 800310e:	d0dd      	beq.n	80030cc <_dtoa_r+0xa7c>
 8003110:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003114:	d1d8      	bne.n	80030c8 <_dtoa_r+0xa78>
 8003116:	2339      	movs	r3, #57	; 0x39
 8003118:	f888 3000 	strb.w	r3, [r8]
 800311c:	f108 0801 	add.w	r8, r8, #1
 8003120:	4645      	mov	r5, r8
 8003122:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003126:	2b39      	cmp	r3, #57	; 0x39
 8003128:	f105 32ff 	add.w	r2, r5, #4294967295
 800312c:	d03b      	beq.n	80031a6 <_dtoa_r+0xb56>
 800312e:	3301      	adds	r3, #1
 8003130:	e040      	b.n	80031b4 <_dtoa_r+0xb64>
 8003132:	2b00      	cmp	r3, #0
 8003134:	f108 0501 	add.w	r5, r8, #1
 8003138:	dd05      	ble.n	8003146 <_dtoa_r+0xaf6>
 800313a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800313e:	d0ea      	beq.n	8003116 <_dtoa_r+0xac6>
 8003140:	f109 0901 	add.w	r9, r9, #1
 8003144:	e7c4      	b.n	80030d0 <_dtoa_r+0xa80>
 8003146:	9b02      	ldr	r3, [sp, #8]
 8003148:	9a04      	ldr	r2, [sp, #16]
 800314a:	f805 9c01 	strb.w	r9, [r5, #-1]
 800314e:	1aeb      	subs	r3, r5, r3
 8003150:	4293      	cmp	r3, r2
 8003152:	46a8      	mov	r8, r5
 8003154:	f43f af4b 	beq.w	8002fee <_dtoa_r+0x99e>
 8003158:	4651      	mov	r1, sl
 800315a:	2300      	movs	r3, #0
 800315c:	220a      	movs	r2, #10
 800315e:	4620      	mov	r0, r4
 8003160:	f000 f8b0 	bl	80032c4 <__multadd>
 8003164:	9b03      	ldr	r3, [sp, #12]
 8003166:	9903      	ldr	r1, [sp, #12]
 8003168:	42bb      	cmp	r3, r7
 800316a:	4682      	mov	sl, r0
 800316c:	f04f 0300 	mov.w	r3, #0
 8003170:	f04f 020a 	mov.w	r2, #10
 8003174:	4620      	mov	r0, r4
 8003176:	d104      	bne.n	8003182 <_dtoa_r+0xb32>
 8003178:	f000 f8a4 	bl	80032c4 <__multadd>
 800317c:	9003      	str	r0, [sp, #12]
 800317e:	4607      	mov	r7, r0
 8003180:	e776      	b.n	8003070 <_dtoa_r+0xa20>
 8003182:	f000 f89f 	bl	80032c4 <__multadd>
 8003186:	2300      	movs	r3, #0
 8003188:	9003      	str	r0, [sp, #12]
 800318a:	220a      	movs	r2, #10
 800318c:	4639      	mov	r1, r7
 800318e:	4620      	mov	r0, r4
 8003190:	f000 f898 	bl	80032c4 <__multadd>
 8003194:	e7f3      	b.n	800317e <_dtoa_r+0xb2e>
 8003196:	4651      	mov	r1, sl
 8003198:	2300      	movs	r3, #0
 800319a:	220a      	movs	r2, #10
 800319c:	4620      	mov	r0, r4
 800319e:	f000 f891 	bl	80032c4 <__multadd>
 80031a2:	4682      	mov	sl, r0
 80031a4:	e70d      	b.n	8002fc2 <_dtoa_r+0x972>
 80031a6:	9b02      	ldr	r3, [sp, #8]
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d105      	bne.n	80031b8 <_dtoa_r+0xb68>
 80031ac:	9a02      	ldr	r2, [sp, #8]
 80031ae:	f10b 0b01 	add.w	fp, fp, #1
 80031b2:	2331      	movs	r3, #49	; 0x31
 80031b4:	7013      	strb	r3, [r2, #0]
 80031b6:	e6e2      	b.n	8002f7e <_dtoa_r+0x92e>
 80031b8:	4615      	mov	r5, r2
 80031ba:	e7b2      	b.n	8003122 <_dtoa_r+0xad2>
 80031bc:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <_dtoa_r+0xb94>)
 80031be:	f7ff baae 	b.w	800271e <_dtoa_r+0xce>
 80031c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f47f aa88 	bne.w	80026da <_dtoa_r+0x8a>
 80031ca:	4b07      	ldr	r3, [pc, #28]	; (80031e8 <_dtoa_r+0xb98>)
 80031cc:	f7ff baa7 	b.w	800271e <_dtoa_r+0xce>
 80031d0:	9b04      	ldr	r3, [sp, #16]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f73f aef4 	bgt.w	8002fc0 <_dtoa_r+0x970>
 80031d8:	9b07      	ldr	r3, [sp, #28]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	f77f aef0 	ble.w	8002fc0 <_dtoa_r+0x970>
 80031e0:	e6b8      	b.n	8002f54 <_dtoa_r+0x904>
 80031e2:	bf00      	nop
 80031e4:	08003950 	.word	0x08003950
 80031e8:	08003952 	.word	0x08003952

080031ec <_localeconv_r>:
 80031ec:	4b04      	ldr	r3, [pc, #16]	; (8003200 <_localeconv_r+0x14>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6a18      	ldr	r0, [r3, #32]
 80031f2:	4b04      	ldr	r3, [pc, #16]	; (8003204 <_localeconv_r+0x18>)
 80031f4:	2800      	cmp	r0, #0
 80031f6:	bf08      	it	eq
 80031f8:	4618      	moveq	r0, r3
 80031fa:	30f0      	adds	r0, #240	; 0xf0
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	2000000c 	.word	0x2000000c
 8003204:	20000070 	.word	0x20000070

08003208 <malloc>:
 8003208:	4b02      	ldr	r3, [pc, #8]	; (8003214 <malloc+0xc>)
 800320a:	4601      	mov	r1, r0
 800320c:	6818      	ldr	r0, [r3, #0]
 800320e:	f000 baed 	b.w	80037ec <_malloc_r>
 8003212:	bf00      	nop
 8003214:	2000000c 	.word	0x2000000c

08003218 <memcpy>:
 8003218:	b510      	push	{r4, lr}
 800321a:	1e43      	subs	r3, r0, #1
 800321c:	440a      	add	r2, r1
 800321e:	4291      	cmp	r1, r2
 8003220:	d100      	bne.n	8003224 <memcpy+0xc>
 8003222:	bd10      	pop	{r4, pc}
 8003224:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003228:	f803 4f01 	strb.w	r4, [r3, #1]!
 800322c:	e7f7      	b.n	800321e <memcpy+0x6>

0800322e <_Balloc>:
 800322e:	b570      	push	{r4, r5, r6, lr}
 8003230:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003232:	4604      	mov	r4, r0
 8003234:	460e      	mov	r6, r1
 8003236:	b93d      	cbnz	r5, 8003248 <_Balloc+0x1a>
 8003238:	2010      	movs	r0, #16
 800323a:	f7ff ffe5 	bl	8003208 <malloc>
 800323e:	6260      	str	r0, [r4, #36]	; 0x24
 8003240:	6045      	str	r5, [r0, #4]
 8003242:	6085      	str	r5, [r0, #8]
 8003244:	6005      	str	r5, [r0, #0]
 8003246:	60c5      	str	r5, [r0, #12]
 8003248:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800324a:	68eb      	ldr	r3, [r5, #12]
 800324c:	b183      	cbz	r3, 8003270 <_Balloc+0x42>
 800324e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003256:	b9b8      	cbnz	r0, 8003288 <_Balloc+0x5a>
 8003258:	2101      	movs	r1, #1
 800325a:	fa01 f506 	lsl.w	r5, r1, r6
 800325e:	1d6a      	adds	r2, r5, #5
 8003260:	0092      	lsls	r2, r2, #2
 8003262:	4620      	mov	r0, r4
 8003264:	f000 fab4 	bl	80037d0 <_calloc_r>
 8003268:	b160      	cbz	r0, 8003284 <_Balloc+0x56>
 800326a:	6046      	str	r6, [r0, #4]
 800326c:	6085      	str	r5, [r0, #8]
 800326e:	e00e      	b.n	800328e <_Balloc+0x60>
 8003270:	2221      	movs	r2, #33	; 0x21
 8003272:	2104      	movs	r1, #4
 8003274:	4620      	mov	r0, r4
 8003276:	f000 faab 	bl	80037d0 <_calloc_r>
 800327a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800327c:	60e8      	str	r0, [r5, #12]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1e4      	bne.n	800324e <_Balloc+0x20>
 8003284:	2000      	movs	r0, #0
 8003286:	bd70      	pop	{r4, r5, r6, pc}
 8003288:	6802      	ldr	r2, [r0, #0]
 800328a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800328e:	2300      	movs	r3, #0
 8003290:	6103      	str	r3, [r0, #16]
 8003292:	60c3      	str	r3, [r0, #12]
 8003294:	bd70      	pop	{r4, r5, r6, pc}

08003296 <_Bfree>:
 8003296:	b570      	push	{r4, r5, r6, lr}
 8003298:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800329a:	4606      	mov	r6, r0
 800329c:	460d      	mov	r5, r1
 800329e:	b93c      	cbnz	r4, 80032b0 <_Bfree+0x1a>
 80032a0:	2010      	movs	r0, #16
 80032a2:	f7ff ffb1 	bl	8003208 <malloc>
 80032a6:	6270      	str	r0, [r6, #36]	; 0x24
 80032a8:	6044      	str	r4, [r0, #4]
 80032aa:	6084      	str	r4, [r0, #8]
 80032ac:	6004      	str	r4, [r0, #0]
 80032ae:	60c4      	str	r4, [r0, #12]
 80032b0:	b13d      	cbz	r5, 80032c2 <_Bfree+0x2c>
 80032b2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80032b4:	686a      	ldr	r2, [r5, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80032bc:	6029      	str	r1, [r5, #0]
 80032be:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80032c2:	bd70      	pop	{r4, r5, r6, pc}

080032c4 <__multadd>:
 80032c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032c8:	690d      	ldr	r5, [r1, #16]
 80032ca:	461f      	mov	r7, r3
 80032cc:	4606      	mov	r6, r0
 80032ce:	460c      	mov	r4, r1
 80032d0:	f101 0e14 	add.w	lr, r1, #20
 80032d4:	2300      	movs	r3, #0
 80032d6:	f8de 0000 	ldr.w	r0, [lr]
 80032da:	b281      	uxth	r1, r0
 80032dc:	fb02 7101 	mla	r1, r2, r1, r7
 80032e0:	0c0f      	lsrs	r7, r1, #16
 80032e2:	0c00      	lsrs	r0, r0, #16
 80032e4:	fb02 7000 	mla	r0, r2, r0, r7
 80032e8:	b289      	uxth	r1, r1
 80032ea:	3301      	adds	r3, #1
 80032ec:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80032f0:	429d      	cmp	r5, r3
 80032f2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80032f6:	f84e 1b04 	str.w	r1, [lr], #4
 80032fa:	dcec      	bgt.n	80032d6 <__multadd+0x12>
 80032fc:	b1d7      	cbz	r7, 8003334 <__multadd+0x70>
 80032fe:	68a3      	ldr	r3, [r4, #8]
 8003300:	429d      	cmp	r5, r3
 8003302:	db12      	blt.n	800332a <__multadd+0x66>
 8003304:	6861      	ldr	r1, [r4, #4]
 8003306:	4630      	mov	r0, r6
 8003308:	3101      	adds	r1, #1
 800330a:	f7ff ff90 	bl	800322e <_Balloc>
 800330e:	6922      	ldr	r2, [r4, #16]
 8003310:	3202      	adds	r2, #2
 8003312:	f104 010c 	add.w	r1, r4, #12
 8003316:	4680      	mov	r8, r0
 8003318:	0092      	lsls	r2, r2, #2
 800331a:	300c      	adds	r0, #12
 800331c:	f7ff ff7c 	bl	8003218 <memcpy>
 8003320:	4621      	mov	r1, r4
 8003322:	4630      	mov	r0, r6
 8003324:	f7ff ffb7 	bl	8003296 <_Bfree>
 8003328:	4644      	mov	r4, r8
 800332a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800332e:	3501      	adds	r5, #1
 8003330:	615f      	str	r7, [r3, #20]
 8003332:	6125      	str	r5, [r4, #16]
 8003334:	4620      	mov	r0, r4
 8003336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800333a <__hi0bits>:
 800333a:	0c02      	lsrs	r2, r0, #16
 800333c:	0412      	lsls	r2, r2, #16
 800333e:	4603      	mov	r3, r0
 8003340:	b9b2      	cbnz	r2, 8003370 <__hi0bits+0x36>
 8003342:	0403      	lsls	r3, r0, #16
 8003344:	2010      	movs	r0, #16
 8003346:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800334a:	bf04      	itt	eq
 800334c:	021b      	lsleq	r3, r3, #8
 800334e:	3008      	addeq	r0, #8
 8003350:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003354:	bf04      	itt	eq
 8003356:	011b      	lsleq	r3, r3, #4
 8003358:	3004      	addeq	r0, #4
 800335a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800335e:	bf04      	itt	eq
 8003360:	009b      	lsleq	r3, r3, #2
 8003362:	3002      	addeq	r0, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	db06      	blt.n	8003376 <__hi0bits+0x3c>
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	d503      	bpl.n	8003374 <__hi0bits+0x3a>
 800336c:	3001      	adds	r0, #1
 800336e:	4770      	bx	lr
 8003370:	2000      	movs	r0, #0
 8003372:	e7e8      	b.n	8003346 <__hi0bits+0xc>
 8003374:	2020      	movs	r0, #32
 8003376:	4770      	bx	lr

08003378 <__lo0bits>:
 8003378:	6803      	ldr	r3, [r0, #0]
 800337a:	f013 0207 	ands.w	r2, r3, #7
 800337e:	4601      	mov	r1, r0
 8003380:	d00b      	beq.n	800339a <__lo0bits+0x22>
 8003382:	07da      	lsls	r2, r3, #31
 8003384:	d423      	bmi.n	80033ce <__lo0bits+0x56>
 8003386:	0798      	lsls	r0, r3, #30
 8003388:	bf49      	itett	mi
 800338a:	085b      	lsrmi	r3, r3, #1
 800338c:	089b      	lsrpl	r3, r3, #2
 800338e:	2001      	movmi	r0, #1
 8003390:	600b      	strmi	r3, [r1, #0]
 8003392:	bf5c      	itt	pl
 8003394:	600b      	strpl	r3, [r1, #0]
 8003396:	2002      	movpl	r0, #2
 8003398:	4770      	bx	lr
 800339a:	b298      	uxth	r0, r3
 800339c:	b9a8      	cbnz	r0, 80033ca <__lo0bits+0x52>
 800339e:	0c1b      	lsrs	r3, r3, #16
 80033a0:	2010      	movs	r0, #16
 80033a2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80033a6:	bf04      	itt	eq
 80033a8:	0a1b      	lsreq	r3, r3, #8
 80033aa:	3008      	addeq	r0, #8
 80033ac:	071a      	lsls	r2, r3, #28
 80033ae:	bf04      	itt	eq
 80033b0:	091b      	lsreq	r3, r3, #4
 80033b2:	3004      	addeq	r0, #4
 80033b4:	079a      	lsls	r2, r3, #30
 80033b6:	bf04      	itt	eq
 80033b8:	089b      	lsreq	r3, r3, #2
 80033ba:	3002      	addeq	r0, #2
 80033bc:	07da      	lsls	r2, r3, #31
 80033be:	d402      	bmi.n	80033c6 <__lo0bits+0x4e>
 80033c0:	085b      	lsrs	r3, r3, #1
 80033c2:	d006      	beq.n	80033d2 <__lo0bits+0x5a>
 80033c4:	3001      	adds	r0, #1
 80033c6:	600b      	str	r3, [r1, #0]
 80033c8:	4770      	bx	lr
 80033ca:	4610      	mov	r0, r2
 80033cc:	e7e9      	b.n	80033a2 <__lo0bits+0x2a>
 80033ce:	2000      	movs	r0, #0
 80033d0:	4770      	bx	lr
 80033d2:	2020      	movs	r0, #32
 80033d4:	4770      	bx	lr

080033d6 <__i2b>:
 80033d6:	b510      	push	{r4, lr}
 80033d8:	460c      	mov	r4, r1
 80033da:	2101      	movs	r1, #1
 80033dc:	f7ff ff27 	bl	800322e <_Balloc>
 80033e0:	2201      	movs	r2, #1
 80033e2:	6144      	str	r4, [r0, #20]
 80033e4:	6102      	str	r2, [r0, #16]
 80033e6:	bd10      	pop	{r4, pc}

080033e8 <__multiply>:
 80033e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033ec:	4614      	mov	r4, r2
 80033ee:	690a      	ldr	r2, [r1, #16]
 80033f0:	6923      	ldr	r3, [r4, #16]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	bfb8      	it	lt
 80033f6:	460b      	movlt	r3, r1
 80033f8:	4689      	mov	r9, r1
 80033fa:	bfbc      	itt	lt
 80033fc:	46a1      	movlt	r9, r4
 80033fe:	461c      	movlt	r4, r3
 8003400:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8003404:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8003408:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800340c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003410:	eb07 060a 	add.w	r6, r7, sl
 8003414:	429e      	cmp	r6, r3
 8003416:	bfc8      	it	gt
 8003418:	3101      	addgt	r1, #1
 800341a:	f7ff ff08 	bl	800322e <_Balloc>
 800341e:	f100 0514 	add.w	r5, r0, #20
 8003422:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003426:	462b      	mov	r3, r5
 8003428:	2200      	movs	r2, #0
 800342a:	4543      	cmp	r3, r8
 800342c:	d316      	bcc.n	800345c <__multiply+0x74>
 800342e:	f104 0214 	add.w	r2, r4, #20
 8003432:	f109 0114 	add.w	r1, r9, #20
 8003436:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800343a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800343e:	9301      	str	r3, [sp, #4]
 8003440:	9c01      	ldr	r4, [sp, #4]
 8003442:	4294      	cmp	r4, r2
 8003444:	4613      	mov	r3, r2
 8003446:	d80c      	bhi.n	8003462 <__multiply+0x7a>
 8003448:	2e00      	cmp	r6, #0
 800344a:	dd03      	ble.n	8003454 <__multiply+0x6c>
 800344c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003450:	2b00      	cmp	r3, #0
 8003452:	d054      	beq.n	80034fe <__multiply+0x116>
 8003454:	6106      	str	r6, [r0, #16]
 8003456:	b003      	add	sp, #12
 8003458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800345c:	f843 2b04 	str.w	r2, [r3], #4
 8003460:	e7e3      	b.n	800342a <__multiply+0x42>
 8003462:	f8b3 a000 	ldrh.w	sl, [r3]
 8003466:	3204      	adds	r2, #4
 8003468:	f1ba 0f00 	cmp.w	sl, #0
 800346c:	d020      	beq.n	80034b0 <__multiply+0xc8>
 800346e:	46ae      	mov	lr, r5
 8003470:	4689      	mov	r9, r1
 8003472:	f04f 0c00 	mov.w	ip, #0
 8003476:	f859 4b04 	ldr.w	r4, [r9], #4
 800347a:	f8be b000 	ldrh.w	fp, [lr]
 800347e:	b2a3      	uxth	r3, r4
 8003480:	fb0a b303 	mla	r3, sl, r3, fp
 8003484:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8003488:	f8de 4000 	ldr.w	r4, [lr]
 800348c:	4463      	add	r3, ip
 800348e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8003492:	fb0a c40b 	mla	r4, sl, fp, ip
 8003496:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800349a:	b29b      	uxth	r3, r3
 800349c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80034a0:	454f      	cmp	r7, r9
 80034a2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80034a6:	f84e 3b04 	str.w	r3, [lr], #4
 80034aa:	d8e4      	bhi.n	8003476 <__multiply+0x8e>
 80034ac:	f8ce c000 	str.w	ip, [lr]
 80034b0:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 80034b4:	f1b9 0f00 	cmp.w	r9, #0
 80034b8:	d01f      	beq.n	80034fa <__multiply+0x112>
 80034ba:	682b      	ldr	r3, [r5, #0]
 80034bc:	46ae      	mov	lr, r5
 80034be:	468c      	mov	ip, r1
 80034c0:	f04f 0a00 	mov.w	sl, #0
 80034c4:	f8bc 4000 	ldrh.w	r4, [ip]
 80034c8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80034cc:	fb09 b404 	mla	r4, r9, r4, fp
 80034d0:	44a2      	add	sl, r4
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80034d8:	f84e 3b04 	str.w	r3, [lr], #4
 80034dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80034e0:	f8be 4000 	ldrh.w	r4, [lr]
 80034e4:	0c1b      	lsrs	r3, r3, #16
 80034e6:	fb09 4303 	mla	r3, r9, r3, r4
 80034ea:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80034ee:	4567      	cmp	r7, ip
 80034f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80034f4:	d8e6      	bhi.n	80034c4 <__multiply+0xdc>
 80034f6:	f8ce 3000 	str.w	r3, [lr]
 80034fa:	3504      	adds	r5, #4
 80034fc:	e7a0      	b.n	8003440 <__multiply+0x58>
 80034fe:	3e01      	subs	r6, #1
 8003500:	e7a2      	b.n	8003448 <__multiply+0x60>
	...

08003504 <__pow5mult>:
 8003504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003508:	4615      	mov	r5, r2
 800350a:	f012 0203 	ands.w	r2, r2, #3
 800350e:	4606      	mov	r6, r0
 8003510:	460f      	mov	r7, r1
 8003512:	d007      	beq.n	8003524 <__pow5mult+0x20>
 8003514:	3a01      	subs	r2, #1
 8003516:	4c21      	ldr	r4, [pc, #132]	; (800359c <__pow5mult+0x98>)
 8003518:	2300      	movs	r3, #0
 800351a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800351e:	f7ff fed1 	bl	80032c4 <__multadd>
 8003522:	4607      	mov	r7, r0
 8003524:	10ad      	asrs	r5, r5, #2
 8003526:	d035      	beq.n	8003594 <__pow5mult+0x90>
 8003528:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800352a:	b93c      	cbnz	r4, 800353c <__pow5mult+0x38>
 800352c:	2010      	movs	r0, #16
 800352e:	f7ff fe6b 	bl	8003208 <malloc>
 8003532:	6270      	str	r0, [r6, #36]	; 0x24
 8003534:	6044      	str	r4, [r0, #4]
 8003536:	6084      	str	r4, [r0, #8]
 8003538:	6004      	str	r4, [r0, #0]
 800353a:	60c4      	str	r4, [r0, #12]
 800353c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003540:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003544:	b94c      	cbnz	r4, 800355a <__pow5mult+0x56>
 8003546:	f240 2171 	movw	r1, #625	; 0x271
 800354a:	4630      	mov	r0, r6
 800354c:	f7ff ff43 	bl	80033d6 <__i2b>
 8003550:	2300      	movs	r3, #0
 8003552:	f8c8 0008 	str.w	r0, [r8, #8]
 8003556:	4604      	mov	r4, r0
 8003558:	6003      	str	r3, [r0, #0]
 800355a:	f04f 0800 	mov.w	r8, #0
 800355e:	07eb      	lsls	r3, r5, #31
 8003560:	d50a      	bpl.n	8003578 <__pow5mult+0x74>
 8003562:	4639      	mov	r1, r7
 8003564:	4622      	mov	r2, r4
 8003566:	4630      	mov	r0, r6
 8003568:	f7ff ff3e 	bl	80033e8 <__multiply>
 800356c:	4639      	mov	r1, r7
 800356e:	4681      	mov	r9, r0
 8003570:	4630      	mov	r0, r6
 8003572:	f7ff fe90 	bl	8003296 <_Bfree>
 8003576:	464f      	mov	r7, r9
 8003578:	106d      	asrs	r5, r5, #1
 800357a:	d00b      	beq.n	8003594 <__pow5mult+0x90>
 800357c:	6820      	ldr	r0, [r4, #0]
 800357e:	b938      	cbnz	r0, 8003590 <__pow5mult+0x8c>
 8003580:	4622      	mov	r2, r4
 8003582:	4621      	mov	r1, r4
 8003584:	4630      	mov	r0, r6
 8003586:	f7ff ff2f 	bl	80033e8 <__multiply>
 800358a:	6020      	str	r0, [r4, #0]
 800358c:	f8c0 8000 	str.w	r8, [r0]
 8003590:	4604      	mov	r4, r0
 8003592:	e7e4      	b.n	800355e <__pow5mult+0x5a>
 8003594:	4638      	mov	r0, r7
 8003596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800359a:	bf00      	nop
 800359c:	08003a50 	.word	0x08003a50

080035a0 <__lshift>:
 80035a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035a4:	460c      	mov	r4, r1
 80035a6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80035aa:	6923      	ldr	r3, [r4, #16]
 80035ac:	6849      	ldr	r1, [r1, #4]
 80035ae:	eb0a 0903 	add.w	r9, sl, r3
 80035b2:	68a3      	ldr	r3, [r4, #8]
 80035b4:	4607      	mov	r7, r0
 80035b6:	4616      	mov	r6, r2
 80035b8:	f109 0501 	add.w	r5, r9, #1
 80035bc:	42ab      	cmp	r3, r5
 80035be:	db31      	blt.n	8003624 <__lshift+0x84>
 80035c0:	4638      	mov	r0, r7
 80035c2:	f7ff fe34 	bl	800322e <_Balloc>
 80035c6:	2200      	movs	r2, #0
 80035c8:	4680      	mov	r8, r0
 80035ca:	f100 0314 	add.w	r3, r0, #20
 80035ce:	4611      	mov	r1, r2
 80035d0:	4552      	cmp	r2, sl
 80035d2:	db2a      	blt.n	800362a <__lshift+0x8a>
 80035d4:	6920      	ldr	r0, [r4, #16]
 80035d6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80035da:	f104 0114 	add.w	r1, r4, #20
 80035de:	f016 021f 	ands.w	r2, r6, #31
 80035e2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80035e6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80035ea:	d022      	beq.n	8003632 <__lshift+0x92>
 80035ec:	f1c2 0c20 	rsb	ip, r2, #32
 80035f0:	2000      	movs	r0, #0
 80035f2:	680e      	ldr	r6, [r1, #0]
 80035f4:	4096      	lsls	r6, r2
 80035f6:	4330      	orrs	r0, r6
 80035f8:	f843 0b04 	str.w	r0, [r3], #4
 80035fc:	f851 0b04 	ldr.w	r0, [r1], #4
 8003600:	458e      	cmp	lr, r1
 8003602:	fa20 f00c 	lsr.w	r0, r0, ip
 8003606:	d8f4      	bhi.n	80035f2 <__lshift+0x52>
 8003608:	6018      	str	r0, [r3, #0]
 800360a:	b108      	cbz	r0, 8003610 <__lshift+0x70>
 800360c:	f109 0502 	add.w	r5, r9, #2
 8003610:	3d01      	subs	r5, #1
 8003612:	4638      	mov	r0, r7
 8003614:	f8c8 5010 	str.w	r5, [r8, #16]
 8003618:	4621      	mov	r1, r4
 800361a:	f7ff fe3c 	bl	8003296 <_Bfree>
 800361e:	4640      	mov	r0, r8
 8003620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003624:	3101      	adds	r1, #1
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	e7c8      	b.n	80035bc <__lshift+0x1c>
 800362a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800362e:	3201      	adds	r2, #1
 8003630:	e7ce      	b.n	80035d0 <__lshift+0x30>
 8003632:	3b04      	subs	r3, #4
 8003634:	f851 2b04 	ldr.w	r2, [r1], #4
 8003638:	f843 2f04 	str.w	r2, [r3, #4]!
 800363c:	458e      	cmp	lr, r1
 800363e:	d8f9      	bhi.n	8003634 <__lshift+0x94>
 8003640:	e7e6      	b.n	8003610 <__lshift+0x70>

08003642 <__mcmp>:
 8003642:	6903      	ldr	r3, [r0, #16]
 8003644:	690a      	ldr	r2, [r1, #16]
 8003646:	1a9b      	subs	r3, r3, r2
 8003648:	b530      	push	{r4, r5, lr}
 800364a:	d10c      	bne.n	8003666 <__mcmp+0x24>
 800364c:	0092      	lsls	r2, r2, #2
 800364e:	3014      	adds	r0, #20
 8003650:	3114      	adds	r1, #20
 8003652:	1884      	adds	r4, r0, r2
 8003654:	4411      	add	r1, r2
 8003656:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800365a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800365e:	4295      	cmp	r5, r2
 8003660:	d003      	beq.n	800366a <__mcmp+0x28>
 8003662:	d305      	bcc.n	8003670 <__mcmp+0x2e>
 8003664:	2301      	movs	r3, #1
 8003666:	4618      	mov	r0, r3
 8003668:	bd30      	pop	{r4, r5, pc}
 800366a:	42a0      	cmp	r0, r4
 800366c:	d3f3      	bcc.n	8003656 <__mcmp+0x14>
 800366e:	e7fa      	b.n	8003666 <__mcmp+0x24>
 8003670:	f04f 33ff 	mov.w	r3, #4294967295
 8003674:	e7f7      	b.n	8003666 <__mcmp+0x24>

08003676 <__mdiff>:
 8003676:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800367a:	460d      	mov	r5, r1
 800367c:	4607      	mov	r7, r0
 800367e:	4611      	mov	r1, r2
 8003680:	4628      	mov	r0, r5
 8003682:	4614      	mov	r4, r2
 8003684:	f7ff ffdd 	bl	8003642 <__mcmp>
 8003688:	1e06      	subs	r6, r0, #0
 800368a:	d108      	bne.n	800369e <__mdiff+0x28>
 800368c:	4631      	mov	r1, r6
 800368e:	4638      	mov	r0, r7
 8003690:	f7ff fdcd 	bl	800322e <_Balloc>
 8003694:	2301      	movs	r3, #1
 8003696:	6103      	str	r3, [r0, #16]
 8003698:	6146      	str	r6, [r0, #20]
 800369a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800369e:	bfa4      	itt	ge
 80036a0:	4623      	movge	r3, r4
 80036a2:	462c      	movge	r4, r5
 80036a4:	4638      	mov	r0, r7
 80036a6:	6861      	ldr	r1, [r4, #4]
 80036a8:	bfa6      	itte	ge
 80036aa:	461d      	movge	r5, r3
 80036ac:	2600      	movge	r6, #0
 80036ae:	2601      	movlt	r6, #1
 80036b0:	f7ff fdbd 	bl	800322e <_Balloc>
 80036b4:	692b      	ldr	r3, [r5, #16]
 80036b6:	60c6      	str	r6, [r0, #12]
 80036b8:	6926      	ldr	r6, [r4, #16]
 80036ba:	f105 0914 	add.w	r9, r5, #20
 80036be:	f104 0214 	add.w	r2, r4, #20
 80036c2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80036c6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80036ca:	f100 0514 	add.w	r5, r0, #20
 80036ce:	f04f 0c00 	mov.w	ip, #0
 80036d2:	f852 ab04 	ldr.w	sl, [r2], #4
 80036d6:	f859 4b04 	ldr.w	r4, [r9], #4
 80036da:	fa1c f18a 	uxtah	r1, ip, sl
 80036de:	b2a3      	uxth	r3, r4
 80036e0:	1ac9      	subs	r1, r1, r3
 80036e2:	0c23      	lsrs	r3, r4, #16
 80036e4:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80036e8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80036ec:	b289      	uxth	r1, r1
 80036ee:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80036f2:	45c8      	cmp	r8, r9
 80036f4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80036f8:	4696      	mov	lr, r2
 80036fa:	f845 3b04 	str.w	r3, [r5], #4
 80036fe:	d8e8      	bhi.n	80036d2 <__mdiff+0x5c>
 8003700:	45be      	cmp	lr, r7
 8003702:	d305      	bcc.n	8003710 <__mdiff+0x9a>
 8003704:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8003708:	b18b      	cbz	r3, 800372e <__mdiff+0xb8>
 800370a:	6106      	str	r6, [r0, #16]
 800370c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003710:	f85e 1b04 	ldr.w	r1, [lr], #4
 8003714:	fa1c f381 	uxtah	r3, ip, r1
 8003718:	141a      	asrs	r2, r3, #16
 800371a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800371e:	b29b      	uxth	r3, r3
 8003720:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003724:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003728:	f845 3b04 	str.w	r3, [r5], #4
 800372c:	e7e8      	b.n	8003700 <__mdiff+0x8a>
 800372e:	3e01      	subs	r6, #1
 8003730:	e7e8      	b.n	8003704 <__mdiff+0x8e>

08003732 <__d2b>:
 8003732:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003736:	460e      	mov	r6, r1
 8003738:	2101      	movs	r1, #1
 800373a:	ec59 8b10 	vmov	r8, r9, d0
 800373e:	4615      	mov	r5, r2
 8003740:	f7ff fd75 	bl	800322e <_Balloc>
 8003744:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003748:	4607      	mov	r7, r0
 800374a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800374e:	bb34      	cbnz	r4, 800379e <__d2b+0x6c>
 8003750:	9301      	str	r3, [sp, #4]
 8003752:	f1b8 0f00 	cmp.w	r8, #0
 8003756:	d027      	beq.n	80037a8 <__d2b+0x76>
 8003758:	a802      	add	r0, sp, #8
 800375a:	f840 8d08 	str.w	r8, [r0, #-8]!
 800375e:	f7ff fe0b 	bl	8003378 <__lo0bits>
 8003762:	9900      	ldr	r1, [sp, #0]
 8003764:	b1f0      	cbz	r0, 80037a4 <__d2b+0x72>
 8003766:	9a01      	ldr	r2, [sp, #4]
 8003768:	f1c0 0320 	rsb	r3, r0, #32
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	430b      	orrs	r3, r1
 8003772:	40c2      	lsrs	r2, r0
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	9201      	str	r2, [sp, #4]
 8003778:	9b01      	ldr	r3, [sp, #4]
 800377a:	61bb      	str	r3, [r7, #24]
 800377c:	2b00      	cmp	r3, #0
 800377e:	bf14      	ite	ne
 8003780:	2102      	movne	r1, #2
 8003782:	2101      	moveq	r1, #1
 8003784:	6139      	str	r1, [r7, #16]
 8003786:	b1c4      	cbz	r4, 80037ba <__d2b+0x88>
 8003788:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800378c:	4404      	add	r4, r0
 800378e:	6034      	str	r4, [r6, #0]
 8003790:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003794:	6028      	str	r0, [r5, #0]
 8003796:	4638      	mov	r0, r7
 8003798:	b003      	add	sp, #12
 800379a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800379e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037a2:	e7d5      	b.n	8003750 <__d2b+0x1e>
 80037a4:	6179      	str	r1, [r7, #20]
 80037a6:	e7e7      	b.n	8003778 <__d2b+0x46>
 80037a8:	a801      	add	r0, sp, #4
 80037aa:	f7ff fde5 	bl	8003378 <__lo0bits>
 80037ae:	9b01      	ldr	r3, [sp, #4]
 80037b0:	617b      	str	r3, [r7, #20]
 80037b2:	2101      	movs	r1, #1
 80037b4:	6139      	str	r1, [r7, #16]
 80037b6:	3020      	adds	r0, #32
 80037b8:	e7e5      	b.n	8003786 <__d2b+0x54>
 80037ba:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80037be:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80037c2:	6030      	str	r0, [r6, #0]
 80037c4:	6918      	ldr	r0, [r3, #16]
 80037c6:	f7ff fdb8 	bl	800333a <__hi0bits>
 80037ca:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80037ce:	e7e1      	b.n	8003794 <__d2b+0x62>

080037d0 <_calloc_r>:
 80037d0:	b538      	push	{r3, r4, r5, lr}
 80037d2:	fb02 f401 	mul.w	r4, r2, r1
 80037d6:	4621      	mov	r1, r4
 80037d8:	f000 f808 	bl	80037ec <_malloc_r>
 80037dc:	4605      	mov	r5, r0
 80037de:	b118      	cbz	r0, 80037e8 <_calloc_r+0x18>
 80037e0:	4622      	mov	r2, r4
 80037e2:	2100      	movs	r1, #0
 80037e4:	f7fe fb54 	bl	8001e90 <memset>
 80037e8:	4628      	mov	r0, r5
 80037ea:	bd38      	pop	{r3, r4, r5, pc}

080037ec <_malloc_r>:
 80037ec:	b570      	push	{r4, r5, r6, lr}
 80037ee:	1ccd      	adds	r5, r1, #3
 80037f0:	f025 0503 	bic.w	r5, r5, #3
 80037f4:	3508      	adds	r5, #8
 80037f6:	2d0c      	cmp	r5, #12
 80037f8:	bf38      	it	cc
 80037fa:	250c      	movcc	r5, #12
 80037fc:	2d00      	cmp	r5, #0
 80037fe:	4606      	mov	r6, r0
 8003800:	db01      	blt.n	8003806 <_malloc_r+0x1a>
 8003802:	42a9      	cmp	r1, r5
 8003804:	d903      	bls.n	800380e <_malloc_r+0x22>
 8003806:	230c      	movs	r3, #12
 8003808:	6033      	str	r3, [r6, #0]
 800380a:	2000      	movs	r0, #0
 800380c:	bd70      	pop	{r4, r5, r6, pc}
 800380e:	f000 f86d 	bl	80038ec <__malloc_lock>
 8003812:	4a23      	ldr	r2, [pc, #140]	; (80038a0 <_malloc_r+0xb4>)
 8003814:	6814      	ldr	r4, [r2, #0]
 8003816:	4621      	mov	r1, r4
 8003818:	b991      	cbnz	r1, 8003840 <_malloc_r+0x54>
 800381a:	4c22      	ldr	r4, [pc, #136]	; (80038a4 <_malloc_r+0xb8>)
 800381c:	6823      	ldr	r3, [r4, #0]
 800381e:	b91b      	cbnz	r3, 8003828 <_malloc_r+0x3c>
 8003820:	4630      	mov	r0, r6
 8003822:	f000 f841 	bl	80038a8 <_sbrk_r>
 8003826:	6020      	str	r0, [r4, #0]
 8003828:	4629      	mov	r1, r5
 800382a:	4630      	mov	r0, r6
 800382c:	f000 f83c 	bl	80038a8 <_sbrk_r>
 8003830:	1c43      	adds	r3, r0, #1
 8003832:	d126      	bne.n	8003882 <_malloc_r+0x96>
 8003834:	230c      	movs	r3, #12
 8003836:	6033      	str	r3, [r6, #0]
 8003838:	4630      	mov	r0, r6
 800383a:	f000 f858 	bl	80038ee <__malloc_unlock>
 800383e:	e7e4      	b.n	800380a <_malloc_r+0x1e>
 8003840:	680b      	ldr	r3, [r1, #0]
 8003842:	1b5b      	subs	r3, r3, r5
 8003844:	d41a      	bmi.n	800387c <_malloc_r+0x90>
 8003846:	2b0b      	cmp	r3, #11
 8003848:	d90f      	bls.n	800386a <_malloc_r+0x7e>
 800384a:	600b      	str	r3, [r1, #0]
 800384c:	50cd      	str	r5, [r1, r3]
 800384e:	18cc      	adds	r4, r1, r3
 8003850:	4630      	mov	r0, r6
 8003852:	f000 f84c 	bl	80038ee <__malloc_unlock>
 8003856:	f104 000b 	add.w	r0, r4, #11
 800385a:	1d23      	adds	r3, r4, #4
 800385c:	f020 0007 	bic.w	r0, r0, #7
 8003860:	1ac3      	subs	r3, r0, r3
 8003862:	d01b      	beq.n	800389c <_malloc_r+0xb0>
 8003864:	425a      	negs	r2, r3
 8003866:	50e2      	str	r2, [r4, r3]
 8003868:	bd70      	pop	{r4, r5, r6, pc}
 800386a:	428c      	cmp	r4, r1
 800386c:	bf0d      	iteet	eq
 800386e:	6863      	ldreq	r3, [r4, #4]
 8003870:	684b      	ldrne	r3, [r1, #4]
 8003872:	6063      	strne	r3, [r4, #4]
 8003874:	6013      	streq	r3, [r2, #0]
 8003876:	bf18      	it	ne
 8003878:	460c      	movne	r4, r1
 800387a:	e7e9      	b.n	8003850 <_malloc_r+0x64>
 800387c:	460c      	mov	r4, r1
 800387e:	6849      	ldr	r1, [r1, #4]
 8003880:	e7ca      	b.n	8003818 <_malloc_r+0x2c>
 8003882:	1cc4      	adds	r4, r0, #3
 8003884:	f024 0403 	bic.w	r4, r4, #3
 8003888:	42a0      	cmp	r0, r4
 800388a:	d005      	beq.n	8003898 <_malloc_r+0xac>
 800388c:	1a21      	subs	r1, r4, r0
 800388e:	4630      	mov	r0, r6
 8003890:	f000 f80a 	bl	80038a8 <_sbrk_r>
 8003894:	3001      	adds	r0, #1
 8003896:	d0cd      	beq.n	8003834 <_malloc_r+0x48>
 8003898:	6025      	str	r5, [r4, #0]
 800389a:	e7d9      	b.n	8003850 <_malloc_r+0x64>
 800389c:	bd70      	pop	{r4, r5, r6, pc}
 800389e:	bf00      	nop
 80038a0:	200001fc 	.word	0x200001fc
 80038a4:	20000200 	.word	0x20000200

080038a8 <_sbrk_r>:
 80038a8:	b538      	push	{r3, r4, r5, lr}
 80038aa:	4c06      	ldr	r4, [pc, #24]	; (80038c4 <_sbrk_r+0x1c>)
 80038ac:	2300      	movs	r3, #0
 80038ae:	4605      	mov	r5, r0
 80038b0:	4608      	mov	r0, r1
 80038b2:	6023      	str	r3, [r4, #0]
 80038b4:	f7fe f9fe 	bl	8001cb4 <_sbrk>
 80038b8:	1c43      	adds	r3, r0, #1
 80038ba:	d102      	bne.n	80038c2 <_sbrk_r+0x1a>
 80038bc:	6823      	ldr	r3, [r4, #0]
 80038be:	b103      	cbz	r3, 80038c2 <_sbrk_r+0x1a>
 80038c0:	602b      	str	r3, [r5, #0]
 80038c2:	bd38      	pop	{r3, r4, r5, pc}
 80038c4:	2000020c 	.word	0x2000020c

080038c8 <__ascii_mbtowc>:
 80038c8:	b082      	sub	sp, #8
 80038ca:	b901      	cbnz	r1, 80038ce <__ascii_mbtowc+0x6>
 80038cc:	a901      	add	r1, sp, #4
 80038ce:	b142      	cbz	r2, 80038e2 <__ascii_mbtowc+0x1a>
 80038d0:	b14b      	cbz	r3, 80038e6 <__ascii_mbtowc+0x1e>
 80038d2:	7813      	ldrb	r3, [r2, #0]
 80038d4:	600b      	str	r3, [r1, #0]
 80038d6:	7812      	ldrb	r2, [r2, #0]
 80038d8:	1c10      	adds	r0, r2, #0
 80038da:	bf18      	it	ne
 80038dc:	2001      	movne	r0, #1
 80038de:	b002      	add	sp, #8
 80038e0:	4770      	bx	lr
 80038e2:	4610      	mov	r0, r2
 80038e4:	e7fb      	b.n	80038de <__ascii_mbtowc+0x16>
 80038e6:	f06f 0001 	mvn.w	r0, #1
 80038ea:	e7f8      	b.n	80038de <__ascii_mbtowc+0x16>

080038ec <__malloc_lock>:
 80038ec:	4770      	bx	lr

080038ee <__malloc_unlock>:
 80038ee:	4770      	bx	lr

080038f0 <__ascii_wctomb>:
 80038f0:	b149      	cbz	r1, 8003906 <__ascii_wctomb+0x16>
 80038f2:	2aff      	cmp	r2, #255	; 0xff
 80038f4:	bf85      	ittet	hi
 80038f6:	238a      	movhi	r3, #138	; 0x8a
 80038f8:	6003      	strhi	r3, [r0, #0]
 80038fa:	700a      	strbls	r2, [r1, #0]
 80038fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8003900:	bf98      	it	ls
 8003902:	2001      	movls	r0, #1
 8003904:	4770      	bx	lr
 8003906:	4608      	mov	r0, r1
 8003908:	4770      	bx	lr
	...

0800390c <_init>:
 800390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390e:	bf00      	nop
 8003910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003912:	bc08      	pop	{r3}
 8003914:	469e      	mov	lr, r3
 8003916:	4770      	bx	lr

08003918 <_fini>:
 8003918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391a:	bf00      	nop
 800391c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391e:	bc08      	pop	{r3}
 8003920:	469e      	mov	lr, r3
 8003922:	4770      	bx	lr
