
2-3.UART_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c64  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08003e18  08003e18  00013e18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004058  08004058  00014058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004060  08004060  00014060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004064  08004064  00014064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  08004068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
  8 .bss          00000074  200001dc  200001dc  000201dc  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000250  20000250  000201dc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000935b  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001a43  00000000  00000000  00029567  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000349a  00000000  00000000  0002afaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000700  00000000  00000000  0002e448  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006a0  00000000  00000000  0002eb48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00003471  00000000  00000000  0002f1e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00002964  00000000  00000000  00032659  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00034fbd  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000018ec  00000000  00000000  0003503c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003dfc 	.word	0x08003dfc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	08003dfc 	.word	0x08003dfc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033e:	f1a4 0401 	sub.w	r4, r4, #1
 8000342:	d1e9      	bne.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f092 0f00 	teq	r2, #0
 80004ea:	bf14      	ite	ne
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000500:	e720      	b.n	8000344 <__adddf3+0x138>
 8000502:	bf00      	nop

08000504 <__aeabi_ul2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	e00a      	b.n	800052a <__aeabi_l2d+0x16>

08000514 <__aeabi_l2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000522:	d502      	bpl.n	800052a <__aeabi_l2d+0x16>
 8000524:	4240      	negs	r0, r0
 8000526:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000532:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000536:	f43f aedc 	beq.w	80002f2 <__adddf3+0xe6>
 800053a:	f04f 0203 	mov.w	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000552:	f1c2 0320 	rsb	r3, r2, #32
 8000556:	fa00 fc03 	lsl.w	ip, r0, r3
 800055a:	fa20 f002 	lsr.w	r0, r0, r2
 800055e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000562:	ea40 000e 	orr.w	r0, r0, lr
 8000566:	fa21 f102 	lsr.w	r1, r1, r2
 800056a:	4414      	add	r4, r2
 800056c:	e6c1      	b.n	80002f2 <__adddf3+0xe6>
 800056e:	bf00      	nop

08000570 <__aeabi_dmul>:
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000576:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800057a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800057e:	bf1d      	ittte	ne
 8000580:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000584:	ea94 0f0c 	teqne	r4, ip
 8000588:	ea95 0f0c 	teqne	r5, ip
 800058c:	f000 f8de 	bleq	800074c <__aeabi_dmul+0x1dc>
 8000590:	442c      	add	r4, r5
 8000592:	ea81 0603 	eor.w	r6, r1, r3
 8000596:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800059e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a2:	bf18      	it	ne
 80005a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b0:	d038      	beq.n	8000624 <__aeabi_dmul+0xb4>
 80005b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005c6:	f04f 0600 	mov.w	r6, #0
 80005ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ce:	f09c 0f00 	teq	ip, #0
 80005d2:	bf18      	it	ne
 80005d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e4:	d204      	bcs.n	80005f0 <__aeabi_dmul+0x80>
 80005e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ea:	416d      	adcs	r5, r5
 80005ec:	eb46 0606 	adc.w	r6, r6, r6
 80005f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000600:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000604:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000608:	bf88      	it	hi
 800060a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800060e:	d81e      	bhi.n	800064e <__aeabi_dmul+0xde>
 8000610:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000614:	bf08      	it	eq
 8000616:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061a:	f150 0000 	adcs.w	r0, r0, #0
 800061e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000628:	ea46 0101 	orr.w	r1, r6, r1
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	ea81 0103 	eor.w	r1, r1, r3
 8000634:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000638:	bfc2      	ittt	gt
 800063a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800063e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000642:	bd70      	popgt	{r4, r5, r6, pc}
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f04f 0e00 	mov.w	lr, #0
 800064c:	3c01      	subs	r4, #1
 800064e:	f300 80ab 	bgt.w	80007a8 <__aeabi_dmul+0x238>
 8000652:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000656:	bfde      	ittt	le
 8000658:	2000      	movle	r0, #0
 800065a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800065e:	bd70      	pople	{r4, r5, r6, pc}
 8000660:	f1c4 0400 	rsb	r4, r4, #0
 8000664:	3c20      	subs	r4, #32
 8000666:	da35      	bge.n	80006d4 <__aeabi_dmul+0x164>
 8000668:	340c      	adds	r4, #12
 800066a:	dc1b      	bgt.n	80006a4 <__aeabi_dmul+0x134>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f305 	lsl.w	r3, r0, r5
 8000678:	fa20 f004 	lsr.w	r0, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000688:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800068c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000690:	fa21 f604 	lsr.w	r6, r1, r4
 8000694:	eb42 0106 	adc.w	r1, r2, r6
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 040c 	rsb	r4, r4, #12
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f304 	lsl.w	r3, r0, r4
 80006b0:	fa20 f005 	lsr.w	r0, r0, r5
 80006b4:	fa01 f204 	lsl.w	r2, r1, r4
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c4:	f141 0100 	adc.w	r1, r1, #0
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 0520 	rsb	r5, r4, #32
 80006d8:	fa00 f205 	lsl.w	r2, r0, r5
 80006dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e0:	fa20 f304 	lsr.w	r3, r0, r4
 80006e4:	fa01 f205 	lsl.w	r2, r1, r5
 80006e8:	ea43 0302 	orr.w	r3, r3, r2
 80006ec:	fa21 f004 	lsr.w	r0, r1, r4
 80006f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f4:	fa21 f204 	lsr.w	r2, r1, r4
 80006f8:	ea20 0002 	bic.w	r0, r0, r2
 80006fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f094 0f00 	teq	r4, #0
 8000710:	d10f      	bne.n	8000732 <__aeabi_dmul+0x1c2>
 8000712:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000716:	0040      	lsls	r0, r0, #1
 8000718:	eb41 0101 	adc.w	r1, r1, r1
 800071c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3c01      	subeq	r4, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1a6>
 8000726:	ea41 0106 	orr.w	r1, r1, r6
 800072a:	f095 0f00 	teq	r5, #0
 800072e:	bf18      	it	ne
 8000730:	4770      	bxne	lr
 8000732:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000736:	0052      	lsls	r2, r2, #1
 8000738:	eb43 0303 	adc.w	r3, r3, r3
 800073c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3d01      	subeq	r5, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1c6>
 8000746:	ea43 0306 	orr.w	r3, r3, r6
 800074a:	4770      	bx	lr
 800074c:	ea94 0f0c 	teq	r4, ip
 8000750:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000754:	bf18      	it	ne
 8000756:	ea95 0f0c 	teqne	r5, ip
 800075a:	d00c      	beq.n	8000776 <__aeabi_dmul+0x206>
 800075c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000760:	bf18      	it	ne
 8000762:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000766:	d1d1      	bne.n	800070c <__aeabi_dmul+0x19c>
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000770:	f04f 0000 	mov.w	r0, #0
 8000774:	bd70      	pop	{r4, r5, r6, pc}
 8000776:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077a:	bf06      	itte	eq
 800077c:	4610      	moveq	r0, r2
 800077e:	4619      	moveq	r1, r3
 8000780:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000784:	d019      	beq.n	80007ba <__aeabi_dmul+0x24a>
 8000786:	ea94 0f0c 	teq	r4, ip
 800078a:	d102      	bne.n	8000792 <__aeabi_dmul+0x222>
 800078c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000790:	d113      	bne.n	80007ba <__aeabi_dmul+0x24a>
 8000792:	ea95 0f0c 	teq	r5, ip
 8000796:	d105      	bne.n	80007a4 <__aeabi_dmul+0x234>
 8000798:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800079c:	bf1c      	itt	ne
 800079e:	4610      	movne	r0, r2
 80007a0:	4619      	movne	r1, r3
 80007a2:	d10a      	bne.n	80007ba <__aeabi_dmul+0x24a>
 80007a4:	ea81 0103 	eor.w	r1, r1, r3
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b4:	f04f 0000 	mov.w	r0, #0
 80007b8:	bd70      	pop	{r4, r5, r6, pc}
 80007ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007c2:	bd70      	pop	{r4, r5, r6, pc}

080007c4 <__aeabi_ddiv>:
 80007c4:	b570      	push	{r4, r5, r6, lr}
 80007c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d2:	bf1d      	ittte	ne
 80007d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d8:	ea94 0f0c 	teqne	r4, ip
 80007dc:	ea95 0f0c 	teqne	r5, ip
 80007e0:	f000 f8a7 	bleq	8000932 <__aeabi_ddiv+0x16e>
 80007e4:	eba4 0405 	sub.w	r4, r4, r5
 80007e8:	ea81 0e03 	eor.w	lr, r1, r3
 80007ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f4:	f000 8088 	beq.w	8000908 <__aeabi_ddiv+0x144>
 80007f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000800:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000804:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000808:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800080c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000810:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000814:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000818:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800081c:	429d      	cmp	r5, r3
 800081e:	bf08      	it	eq
 8000820:	4296      	cmpeq	r6, r2
 8000822:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000826:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800082a:	d202      	bcs.n	8000832 <__aeabi_ddiv+0x6e>
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	1ab6      	subs	r6, r6, r2
 8000834:	eb65 0503 	sbc.w	r5, r5, r3
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000842:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 000c 	orrcs.w	r0, r0, ip
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a4:	d018      	beq.n	80008d8 <__aeabi_ddiv+0x114>
 80008a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c2:	d1c0      	bne.n	8000846 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	d10b      	bne.n	80008e2 <__aeabi_ddiv+0x11e>
 80008ca:	ea41 0100 	orr.w	r1, r1, r0
 80008ce:	f04f 0000 	mov.w	r0, #0
 80008d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008d6:	e7b6      	b.n	8000846 <__aeabi_ddiv+0x82>
 80008d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008dc:	bf04      	itt	eq
 80008de:	4301      	orreq	r1, r0
 80008e0:	2000      	moveq	r0, #0
 80008e2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008e6:	bf88      	it	hi
 80008e8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008ec:	f63f aeaf 	bhi.w	800064e <__aeabi_dmul+0xde>
 80008f0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f4:	bf04      	itt	eq
 80008f6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008fe:	f150 0000 	adcs.w	r0, r0, #0
 8000902:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000906:	bd70      	pop	{r4, r5, r6, pc}
 8000908:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800090c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000910:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000914:	bfc2      	ittt	gt
 8000916:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800091e:	bd70      	popgt	{r4, r5, r6, pc}
 8000920:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000924:	f04f 0e00 	mov.w	lr, #0
 8000928:	3c01      	subs	r4, #1
 800092a:	e690      	b.n	800064e <__aeabi_dmul+0xde>
 800092c:	ea45 0e06 	orr.w	lr, r5, r6
 8000930:	e68d      	b.n	800064e <__aeabi_dmul+0xde>
 8000932:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000936:	ea94 0f0c 	teq	r4, ip
 800093a:	bf08      	it	eq
 800093c:	ea95 0f0c 	teqeq	r5, ip
 8000940:	f43f af3b 	beq.w	80007ba <__aeabi_dmul+0x24a>
 8000944:	ea94 0f0c 	teq	r4, ip
 8000948:	d10a      	bne.n	8000960 <__aeabi_ddiv+0x19c>
 800094a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800094e:	f47f af34 	bne.w	80007ba <__aeabi_dmul+0x24a>
 8000952:	ea95 0f0c 	teq	r5, ip
 8000956:	f47f af25 	bne.w	80007a4 <__aeabi_dmul+0x234>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e72c      	b.n	80007ba <__aeabi_dmul+0x24a>
 8000960:	ea95 0f0c 	teq	r5, ip
 8000964:	d106      	bne.n	8000974 <__aeabi_ddiv+0x1b0>
 8000966:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096a:	f43f aefd 	beq.w	8000768 <__aeabi_dmul+0x1f8>
 800096e:	4610      	mov	r0, r2
 8000970:	4619      	mov	r1, r3
 8000972:	e722      	b.n	80007ba <__aeabi_dmul+0x24a>
 8000974:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000978:	bf18      	it	ne
 800097a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800097e:	f47f aec5 	bne.w	800070c <__aeabi_dmul+0x19c>
 8000982:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000986:	f47f af0d 	bne.w	80007a4 <__aeabi_dmul+0x234>
 800098a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800098e:	f47f aeeb 	bne.w	8000768 <__aeabi_dmul+0x1f8>
 8000992:	e712      	b.n	80007ba <__aeabi_dmul+0x24a>

08000994 <__gedf2>:
 8000994:	f04f 3cff 	mov.w	ip, #4294967295
 8000998:	e006      	b.n	80009a8 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__ledf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	e002      	b.n	80009a8 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__cmpdf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009be:	d01b      	beq.n	80009f8 <__cmpdf2+0x54>
 80009c0:	b001      	add	sp, #4
 80009c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009c6:	bf0c      	ite	eq
 80009c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009cc:	ea91 0f03 	teqne	r1, r3
 80009d0:	bf02      	ittt	eq
 80009d2:	ea90 0f02 	teqeq	r0, r2
 80009d6:	2000      	moveq	r0, #0
 80009d8:	4770      	bxeq	lr
 80009da:	f110 0f00 	cmn.w	r0, #0
 80009de:	ea91 0f03 	teq	r1, r3
 80009e2:	bf58      	it	pl
 80009e4:	4299      	cmppl	r1, r3
 80009e6:	bf08      	it	eq
 80009e8:	4290      	cmpeq	r0, r2
 80009ea:	bf2c      	ite	cs
 80009ec:	17d8      	asrcs	r0, r3, #31
 80009ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009f2:	f040 0001 	orr.w	r0, r0, #1
 80009f6:	4770      	bx	lr
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d102      	bne.n	8000a08 <__cmpdf2+0x64>
 8000a02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a06:	d107      	bne.n	8000a18 <__cmpdf2+0x74>
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d1d6      	bne.n	80009c0 <__cmpdf2+0x1c>
 8000a12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a16:	d0d3      	beq.n	80009c0 <__cmpdf2+0x1c>
 8000a18:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdrcmple>:
 8000a20:	4684      	mov	ip, r0
 8000a22:	4610      	mov	r0, r2
 8000a24:	4662      	mov	r2, ip
 8000a26:	468c      	mov	ip, r1
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4663      	mov	r3, ip
 8000a2c:	e000      	b.n	8000a30 <__aeabi_cdcmpeq>
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdcmpeq>:
 8000a30:	b501      	push	{r0, lr}
 8000a32:	f7ff ffb7 	bl	80009a4 <__cmpdf2>
 8000a36:	2800      	cmp	r0, #0
 8000a38:	bf48      	it	mi
 8000a3a:	f110 0f00 	cmnmi.w	r0, #0
 8000a3e:	bd01      	pop	{r0, pc}

08000a40 <__aeabi_dcmpeq>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff fff4 	bl	8000a30 <__aeabi_cdcmpeq>
 8000a48:	bf0c      	ite	eq
 8000a4a:	2001      	moveq	r0, #1
 8000a4c:	2000      	movne	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmplt>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffea 	bl	8000a30 <__aeabi_cdcmpeq>
 8000a5c:	bf34      	ite	cc
 8000a5e:	2001      	movcc	r0, #1
 8000a60:	2000      	movcs	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmple>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffe0 	bl	8000a30 <__aeabi_cdcmpeq>
 8000a70:	bf94      	ite	ls
 8000a72:	2001      	movls	r0, #1
 8000a74:	2000      	movhi	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpge>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffce 	bl	8000a20 <__aeabi_cdrcmple>
 8000a84:	bf94      	ite	ls
 8000a86:	2001      	movls	r0, #1
 8000a88:	2000      	movhi	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmpgt>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffc4 	bl	8000a20 <__aeabi_cdrcmple>
 8000a98:	bf34      	ite	cc
 8000a9a:	2001      	movcc	r0, #1
 8000a9c:	2000      	movcs	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpun>:
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x10>
 8000aae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab2:	d10a      	bne.n	8000aca <__aeabi_dcmpun+0x26>
 8000ab4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x20>
 8000abe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac2:	d102      	bne.n	8000aca <__aeabi_dcmpun+0x26>
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	f04f 0001 	mov.w	r0, #1
 8000ace:	4770      	bx	lr

08000ad0 <__aeabi_d2iz>:
 8000ad0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad8:	d215      	bcs.n	8000b06 <__aeabi_d2iz+0x36>
 8000ada:	d511      	bpl.n	8000b00 <__aeabi_d2iz+0x30>
 8000adc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae4:	d912      	bls.n	8000b0c <__aeabi_d2iz+0x3c>
 8000ae6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	bf18      	it	ne
 8000afc:	4240      	negne	r0, r0
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0a:	d105      	bne.n	8000b18 <__aeabi_d2iz+0x48>
 8000b0c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b10:	bf08      	it	eq
 8000b12:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <__aeabi_uldivmod>:
 8000b20:	b953      	cbnz	r3, 8000b38 <__aeabi_uldivmod+0x18>
 8000b22:	b94a      	cbnz	r2, 8000b38 <__aeabi_uldivmod+0x18>
 8000b24:	2900      	cmp	r1, #0
 8000b26:	bf08      	it	eq
 8000b28:	2800      	cmpeq	r0, #0
 8000b2a:	bf1c      	itt	ne
 8000b2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b30:	f04f 30ff 	movne.w	r0, #4294967295
 8000b34:	f000 b97a 	b.w	8000e2c <__aeabi_idiv0>
 8000b38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b40:	f000 f806 	bl	8000b50 <__udivmoddi4>
 8000b44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b4c:	b004      	add	sp, #16
 8000b4e:	4770      	bx	lr

08000b50 <__udivmoddi4>:
 8000b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b54:	468c      	mov	ip, r1
 8000b56:	460d      	mov	r5, r1
 8000b58:	4604      	mov	r4, r0
 8000b5a:	9e08      	ldr	r6, [sp, #32]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d151      	bne.n	8000c04 <__udivmoddi4+0xb4>
 8000b60:	428a      	cmp	r2, r1
 8000b62:	4617      	mov	r7, r2
 8000b64:	d96d      	bls.n	8000c42 <__udivmoddi4+0xf2>
 8000b66:	fab2 fe82 	clz	lr, r2
 8000b6a:	f1be 0f00 	cmp.w	lr, #0
 8000b6e:	d00b      	beq.n	8000b88 <__udivmoddi4+0x38>
 8000b70:	f1ce 0c20 	rsb	ip, lr, #32
 8000b74:	fa01 f50e 	lsl.w	r5, r1, lr
 8000b78:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000b7c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000b80:	ea4c 0c05 	orr.w	ip, ip, r5
 8000b84:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b88:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000b8c:	0c25      	lsrs	r5, r4, #16
 8000b8e:	fbbc f8fa 	udiv	r8, ip, sl
 8000b92:	fa1f f987 	uxth.w	r9, r7
 8000b96:	fb0a cc18 	mls	ip, sl, r8, ip
 8000b9a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000b9e:	fb08 f309 	mul.w	r3, r8, r9
 8000ba2:	42ab      	cmp	r3, r5
 8000ba4:	d90a      	bls.n	8000bbc <__udivmoddi4+0x6c>
 8000ba6:	19ed      	adds	r5, r5, r7
 8000ba8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000bac:	f080 8123 	bcs.w	8000df6 <__udivmoddi4+0x2a6>
 8000bb0:	42ab      	cmp	r3, r5
 8000bb2:	f240 8120 	bls.w	8000df6 <__udivmoddi4+0x2a6>
 8000bb6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bba:	443d      	add	r5, r7
 8000bbc:	1aed      	subs	r5, r5, r3
 8000bbe:	b2a4      	uxth	r4, r4
 8000bc0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000bc4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000bc8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bcc:	fb00 f909 	mul.w	r9, r0, r9
 8000bd0:	45a1      	cmp	r9, r4
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x98>
 8000bd4:	19e4      	adds	r4, r4, r7
 8000bd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bda:	f080 810a 	bcs.w	8000df2 <__udivmoddi4+0x2a2>
 8000bde:	45a1      	cmp	r9, r4
 8000be0:	f240 8107 	bls.w	8000df2 <__udivmoddi4+0x2a2>
 8000be4:	3802      	subs	r0, #2
 8000be6:	443c      	add	r4, r7
 8000be8:	eba4 0409 	sub.w	r4, r4, r9
 8000bec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2e00      	cmp	r6, #0
 8000bf4:	d061      	beq.n	8000cba <__udivmoddi4+0x16a>
 8000bf6:	fa24 f40e 	lsr.w	r4, r4, lr
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	6034      	str	r4, [r6, #0]
 8000bfe:	6073      	str	r3, [r6, #4]
 8000c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c04:	428b      	cmp	r3, r1
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0xc8>
 8000c08:	2e00      	cmp	r6, #0
 8000c0a:	d054      	beq.n	8000cb6 <__udivmoddi4+0x166>
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c12:	4608      	mov	r0, r1
 8000c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c18:	fab3 f183 	clz	r1, r3
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	f040 808e 	bne.w	8000d3e <__udivmoddi4+0x1ee>
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0xdc>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80fa 	bhi.w	8000e20 <__udivmoddi4+0x2d0>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb65 0503 	sbc.w	r5, r5, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	46ac      	mov	ip, r5
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d03f      	beq.n	8000cba <__udivmoddi4+0x16a>
 8000c3a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	b912      	cbnz	r2, 8000c4a <__udivmoddi4+0xfa>
 8000c44:	2701      	movs	r7, #1
 8000c46:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c4a:	fab7 fe87 	clz	lr, r7
 8000c4e:	f1be 0f00 	cmp.w	lr, #0
 8000c52:	d134      	bne.n	8000cbe <__udivmoddi4+0x16e>
 8000c54:	1beb      	subs	r3, r5, r7
 8000c56:	0c3a      	lsrs	r2, r7, #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000c62:	0c25      	lsrs	r5, r4, #16
 8000c64:	fb02 3318 	mls	r3, r2, r8, r3
 8000c68:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c6c:	fb0c f308 	mul.w	r3, ip, r8
 8000c70:	42ab      	cmp	r3, r5
 8000c72:	d907      	bls.n	8000c84 <__udivmoddi4+0x134>
 8000c74:	19ed      	adds	r5, r5, r7
 8000c76:	f108 30ff 	add.w	r0, r8, #4294967295
 8000c7a:	d202      	bcs.n	8000c82 <__udivmoddi4+0x132>
 8000c7c:	42ab      	cmp	r3, r5
 8000c7e:	f200 80d1 	bhi.w	8000e24 <__udivmoddi4+0x2d4>
 8000c82:	4680      	mov	r8, r0
 8000c84:	1aed      	subs	r5, r5, r3
 8000c86:	b2a3      	uxth	r3, r4
 8000c88:	fbb5 f0f2 	udiv	r0, r5, r2
 8000c8c:	fb02 5510 	mls	r5, r2, r0, r5
 8000c90:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c94:	fb0c fc00 	mul.w	ip, ip, r0
 8000c98:	45a4      	cmp	ip, r4
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0x15c>
 8000c9c:	19e4      	adds	r4, r4, r7
 8000c9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x15a>
 8000ca4:	45a4      	cmp	ip, r4
 8000ca6:	f200 80b8 	bhi.w	8000e1a <__udivmoddi4+0x2ca>
 8000caa:	4618      	mov	r0, r3
 8000cac:	eba4 040c 	sub.w	r4, r4, ip
 8000cb0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cb4:	e79d      	b.n	8000bf2 <__udivmoddi4+0xa2>
 8000cb6:	4631      	mov	r1, r6
 8000cb8:	4630      	mov	r0, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	f1ce 0420 	rsb	r4, lr, #32
 8000cc2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000cc6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000cca:	fa20 f804 	lsr.w	r8, r0, r4
 8000cce:	0c3a      	lsrs	r2, r7, #16
 8000cd0:	fa25 f404 	lsr.w	r4, r5, r4
 8000cd4:	ea48 0803 	orr.w	r8, r8, r3
 8000cd8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000cdc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000ce0:	fb02 4411 	mls	r4, r2, r1, r4
 8000ce4:	fa1f fc87 	uxth.w	ip, r7
 8000ce8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000cec:	fb01 f30c 	mul.w	r3, r1, ip
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cf6:	d909      	bls.n	8000d0c <__udivmoddi4+0x1bc>
 8000cf8:	19ed      	adds	r5, r5, r7
 8000cfa:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cfe:	f080 808a 	bcs.w	8000e16 <__udivmoddi4+0x2c6>
 8000d02:	42ab      	cmp	r3, r5
 8000d04:	f240 8087 	bls.w	8000e16 <__udivmoddi4+0x2c6>
 8000d08:	3902      	subs	r1, #2
 8000d0a:	443d      	add	r5, r7
 8000d0c:	1aeb      	subs	r3, r5, r3
 8000d0e:	fa1f f588 	uxth.w	r5, r8
 8000d12:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d16:	fb02 3310 	mls	r3, r2, r0, r3
 8000d1a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d1e:	fb00 f30c 	mul.w	r3, r0, ip
 8000d22:	42ab      	cmp	r3, r5
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x1e6>
 8000d26:	19ed      	adds	r5, r5, r7
 8000d28:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d2c:	d26f      	bcs.n	8000e0e <__udivmoddi4+0x2be>
 8000d2e:	42ab      	cmp	r3, r5
 8000d30:	d96d      	bls.n	8000e0e <__udivmoddi4+0x2be>
 8000d32:	3802      	subs	r0, #2
 8000d34:	443d      	add	r5, r7
 8000d36:	1aeb      	subs	r3, r5, r3
 8000d38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3c:	e78f      	b.n	8000c5e <__udivmoddi4+0x10e>
 8000d3e:	f1c1 0720 	rsb	r7, r1, #32
 8000d42:	fa22 f807 	lsr.w	r8, r2, r7
 8000d46:	408b      	lsls	r3, r1
 8000d48:	fa05 f401 	lsl.w	r4, r5, r1
 8000d4c:	ea48 0303 	orr.w	r3, r8, r3
 8000d50:	fa20 fe07 	lsr.w	lr, r0, r7
 8000d54:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000d58:	40fd      	lsrs	r5, r7
 8000d5a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000d5e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000d62:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000d66:	fb0c 5519 	mls	r5, ip, r9, r5
 8000d6a:	fa1f f883 	uxth.w	r8, r3
 8000d6e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000d72:	fb09 f408 	mul.w	r4, r9, r8
 8000d76:	42ac      	cmp	r4, r5
 8000d78:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x244>
 8000d82:	18ed      	adds	r5, r5, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	d243      	bcs.n	8000e12 <__udivmoddi4+0x2c2>
 8000d8a:	42ac      	cmp	r4, r5
 8000d8c:	d941      	bls.n	8000e12 <__udivmoddi4+0x2c2>
 8000d8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d92:	441d      	add	r5, r3
 8000d94:	1b2d      	subs	r5, r5, r4
 8000d96:	fa1f fe8e 	uxth.w	lr, lr
 8000d9a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000d9e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000da2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000da6:	fb00 f808 	mul.w	r8, r0, r8
 8000daa:	45a0      	cmp	r8, r4
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x26e>
 8000dae:	18e4      	adds	r4, r4, r3
 8000db0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000db4:	d229      	bcs.n	8000e0a <__udivmoddi4+0x2ba>
 8000db6:	45a0      	cmp	r8, r4
 8000db8:	d927      	bls.n	8000e0a <__udivmoddi4+0x2ba>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	441c      	add	r4, r3
 8000dbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc2:	eba4 0408 	sub.w	r4, r4, r8
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	454c      	cmp	r4, r9
 8000dcc:	46c6      	mov	lr, r8
 8000dce:	464d      	mov	r5, r9
 8000dd0:	d315      	bcc.n	8000dfe <__udivmoddi4+0x2ae>
 8000dd2:	d012      	beq.n	8000dfa <__udivmoddi4+0x2aa>
 8000dd4:	b156      	cbz	r6, 8000dec <__udivmoddi4+0x29c>
 8000dd6:	ebba 030e 	subs.w	r3, sl, lr
 8000dda:	eb64 0405 	sbc.w	r4, r4, r5
 8000dde:	fa04 f707 	lsl.w	r7, r4, r7
 8000de2:	40cb      	lsrs	r3, r1
 8000de4:	431f      	orrs	r7, r3
 8000de6:	40cc      	lsrs	r4, r1
 8000de8:	6037      	str	r7, [r6, #0]
 8000dea:	6074      	str	r4, [r6, #4]
 8000dec:	2100      	movs	r1, #0
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	4618      	mov	r0, r3
 8000df4:	e6f8      	b.n	8000be8 <__udivmoddi4+0x98>
 8000df6:	4690      	mov	r8, r2
 8000df8:	e6e0      	b.n	8000bbc <__udivmoddi4+0x6c>
 8000dfa:	45c2      	cmp	sl, r8
 8000dfc:	d2ea      	bcs.n	8000dd4 <__udivmoddi4+0x284>
 8000dfe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e02:	eb69 0503 	sbc.w	r5, r9, r3
 8000e06:	3801      	subs	r0, #1
 8000e08:	e7e4      	b.n	8000dd4 <__udivmoddi4+0x284>
 8000e0a:	4628      	mov	r0, r5
 8000e0c:	e7d7      	b.n	8000dbe <__udivmoddi4+0x26e>
 8000e0e:	4640      	mov	r0, r8
 8000e10:	e791      	b.n	8000d36 <__udivmoddi4+0x1e6>
 8000e12:	4681      	mov	r9, r0
 8000e14:	e7be      	b.n	8000d94 <__udivmoddi4+0x244>
 8000e16:	4601      	mov	r1, r0
 8000e18:	e778      	b.n	8000d0c <__udivmoddi4+0x1bc>
 8000e1a:	3802      	subs	r0, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	e745      	b.n	8000cac <__udivmoddi4+0x15c>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e708      	b.n	8000c36 <__udivmoddi4+0xe6>
 8000e24:	f1a8 0802 	sub.w	r8, r8, #2
 8000e28:	443d      	add	r5, r7
 8000e2a:	e72b      	b.n	8000c84 <__udivmoddi4+0x134>

08000e2c <__aeabi_idiv0>:
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b510      	push	{r4, lr}
 8000e32:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e34:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <HAL_InitTick+0x40>)
 8000e36:	7818      	ldrb	r0, [r3, #0]
 8000e38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e40:	4a0c      	ldr	r2, [pc, #48]	; (8000e74 <HAL_InitTick+0x44>)
 8000e42:	6810      	ldr	r0, [r2, #0]
 8000e44:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e48:	f000 f896 	bl	8000f78 <HAL_SYSTICK_Config>
 8000e4c:	b968      	cbnz	r0, 8000e6a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4e:	2c0f      	cmp	r4, #15
 8000e50:	d901      	bls.n	8000e56 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000e52:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000e54:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e56:	2200      	movs	r2, #0
 8000e58:	4621      	mov	r1, r4
 8000e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5e:	f000 f84b 	bl	8000ef8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e62:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <HAL_InitTick+0x48>)
 8000e64:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000e66:	2000      	movs	r0, #0
 8000e68:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	bd10      	pop	{r4, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000000 	.word	0x20000000
 8000e74:	20000008 	.word	0x20000008
 8000e78:	20000004 	.word	0x20000004

08000e7c <HAL_Init>:
{
 8000e7c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <HAL_Init+0x30>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e86:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e8e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e96:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e98:	2003      	movs	r0, #3
 8000e9a:	f000 f81b 	bl	8000ed4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f7ff ffc6 	bl	8000e30 <HAL_InitTick>
  HAL_MspInit();
 8000ea4:	f001 f94c 	bl	8002140 <HAL_MspInit>
}
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	bd08      	pop	{r3, pc}
 8000eac:	40023c00 	.word	0x40023c00

08000eb0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000eb0:	4a03      	ldr	r2, [pc, #12]	; (8000ec0 <HAL_IncTick+0x10>)
 8000eb2:	6811      	ldr	r1, [r2, #0]
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <HAL_IncTick+0x14>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	440b      	add	r3, r1
 8000eba:	6013      	str	r3, [r2, #0]
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000204 	.word	0x20000204
 8000ec4:	20000000 	.word	0x20000000

08000ec8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ec8:	4b01      	ldr	r3, [pc, #4]	; (8000ed0 <HAL_GetTick+0x8>)
 8000eca:	6818      	ldr	r0, [r3, #0]
}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000204 	.word	0x20000204

08000ed4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed4:	4a07      	ldr	r2, [pc, #28]	; (8000ef4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000ed6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000edc:	041b      	lsls	r3, r3, #16
 8000ede:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee0:	0200      	lsls	r0, r0, #8
 8000ee2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee6:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000ee8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000eec:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000ef0:	60d0      	str	r0, [r2, #12]
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000efa:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <HAL_NVIC_SetPriority+0x5c>)
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f02:	f1c3 0407 	rsb	r4, r3, #7
 8000f06:	2c04      	cmp	r4, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0c:	1d1d      	adds	r5, r3, #4
 8000f0e:	2d06      	cmp	r5, #6
 8000f10:	d917      	bls.n	8000f42 <HAL_NVIC_SetPriority+0x4a>
 8000f12:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	2501      	movs	r5, #1
 8000f16:	fa05 f404 	lsl.w	r4, r5, r4
 8000f1a:	3c01      	subs	r4, #1
 8000f1c:	4021      	ands	r1, r4
 8000f1e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f20:	fa05 f303 	lsl.w	r3, r5, r3
 8000f24:	3b01      	subs	r3, #1
 8000f26:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	db0b      	blt.n	8000f46 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2e:	0109      	lsls	r1, r1, #4
 8000f30:	b2c9      	uxtb	r1, r1
 8000f32:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000f36:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000f3a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f3e:	bc30      	pop	{r4, r5}
 8000f40:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f42:	2300      	movs	r3, #0
 8000f44:	e7e6      	b.n	8000f14 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f46:	f000 000f 	and.w	r0, r0, #15
 8000f4a:	0109      	lsls	r1, r1, #4
 8000f4c:	b2c9      	uxtb	r1, r1
 8000f4e:	4b02      	ldr	r3, [pc, #8]	; (8000f58 <HAL_NVIC_SetPriority+0x60>)
 8000f50:	5419      	strb	r1, [r3, r0]
 8000f52:	e7f4      	b.n	8000f3e <HAL_NVIC_SetPriority+0x46>
 8000f54:	e000ed00 	.word	0xe000ed00
 8000f58:	e000ed14 	.word	0xe000ed14

08000f5c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000f5c:	2800      	cmp	r0, #0
 8000f5e:	db08      	blt.n	8000f72 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f60:	0942      	lsrs	r2, r0, #5
 8000f62:	f000 001f 	and.w	r0, r0, #31
 8000f66:	2301      	movs	r3, #1
 8000f68:	fa03 f000 	lsl.w	r0, r3, r0
 8000f6c:	4b01      	ldr	r3, [pc, #4]	; (8000f74 <HAL_NVIC_EnableIRQ+0x18>)
 8000f6e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000f72:	4770      	bx	lr
 8000f74:	e000e100 	.word	0xe000e100

08000f78 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f78:	3801      	subs	r0, #1
 8000f7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000f7e:	d20a      	bcs.n	8000f96 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_SYSTICK_Config+0x24>)
 8000f82:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f84:	21f0      	movs	r1, #240	; 0xf0
 8000f86:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <HAL_SYSTICK_Config+0x28>)
 8000f88:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f90:	2207      	movs	r2, #7
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f96:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000e010 	.word	0xe000e010
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fa4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d003      	beq.n	8000fb6 <HAL_DMA_Abort_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fae:	2380      	movs	r3, #128	; 0x80
 8000fb0:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fb6:	2305      	movs	r3, #5
 8000fb8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fbc:	6802      	ldr	r2, [r0, #0]
 8000fbe:	6813      	ldr	r3, [r2, #0]
 8000fc0:	f023 0301 	bic.w	r3, r3, #1
 8000fc4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000fc6:	2000      	movs	r0, #0
}
 8000fc8:	4770      	bx	lr
	...

08000fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fce:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fd0:	2400      	movs	r4, #0
 8000fd2:	e04b      	b.n	800106c <HAL_GPIO_Init+0xa0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd4:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8000fd8:	f10e 0e08 	add.w	lr, lr, #8
 8000fdc:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fe0:	f004 0607 	and.w	r6, r4, #7
 8000fe4:	00b6      	lsls	r6, r6, #2
 8000fe6:	270f      	movs	r7, #15
 8000fe8:	40b7      	lsls	r7, r6
 8000fea:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fee:	690f      	ldr	r7, [r1, #16]
 8000ff0:	fa07 f606 	lsl.w	r6, r7, r6
 8000ff4:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 8000ff6:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 8000ffa:	e046      	b.n	800108a <HAL_GPIO_Init+0xbe>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ffc:	2609      	movs	r6, #9
 8000ffe:	e000      	b.n	8001002 <HAL_GPIO_Init+0x36>
 8001000:	2600      	movs	r6, #0
 8001002:	fa06 f60e 	lsl.w	r6, r6, lr
 8001006:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001008:	3302      	adds	r3, #2
 800100a:	4e64      	ldr	r6, [pc, #400]	; (800119c <HAL_GPIO_Init+0x1d0>)
 800100c:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001010:	4b63      	ldr	r3, [pc, #396]	; (80011a0 <HAL_GPIO_Init+0x1d4>)
 8001012:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8001014:	43eb      	mvns	r3, r5
 8001016:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800101a:	684f      	ldr	r7, [r1, #4]
 800101c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001020:	d001      	beq.n	8001026 <HAL_GPIO_Init+0x5a>
        {
          temp |= iocurrent;
 8001022:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 8001026:	4a5e      	ldr	r2, [pc, #376]	; (80011a0 <HAL_GPIO_Init+0x1d4>)
 8001028:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 800102a:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800102c:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001030:	684f      	ldr	r7, [r1, #4]
 8001032:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001036:	d001      	beq.n	800103c <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8001038:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 800103c:	4a58      	ldr	r2, [pc, #352]	; (80011a0 <HAL_GPIO_Init+0x1d4>)
 800103e:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001040:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001042:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001046:	684f      	ldr	r7, [r1, #4]
 8001048:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800104c:	d001      	beq.n	8001052 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 800104e:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 8001052:	4a53      	ldr	r2, [pc, #332]	; (80011a0 <HAL_GPIO_Init+0x1d4>)
 8001054:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8001056:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001058:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800105a:	684e      	ldr	r6, [r1, #4]
 800105c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001060:	d001      	beq.n	8001066 <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 8001062:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 8001066:	4a4e      	ldr	r2, [pc, #312]	; (80011a0 <HAL_GPIO_Init+0x1d4>)
 8001068:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106a:	3401      	adds	r4, #1
 800106c:	2c0f      	cmp	r4, #15
 800106e:	f200 8092 	bhi.w	8001196 <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 8001072:	2301      	movs	r3, #1
 8001074:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001076:	680a      	ldr	r2, [r1, #0]
 8001078:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 800107c:	42ab      	cmp	r3, r5
 800107e:	d1f4      	bne.n	800106a <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001080:	684a      	ldr	r2, [r1, #4]
 8001082:	2a02      	cmp	r2, #2
 8001084:	d0a6      	beq.n	8000fd4 <HAL_GPIO_Init+0x8>
 8001086:	2a12      	cmp	r2, #18
 8001088:	d0a4      	beq.n	8000fd4 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 800108a:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800108c:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8001090:	2203      	movs	r2, #3
 8001092:	fa02 f20e 	lsl.w	r2, r2, lr
 8001096:	43d2      	mvns	r2, r2
 8001098:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800109a:	684f      	ldr	r7, [r1, #4]
 800109c:	f007 0703 	and.w	r7, r7, #3
 80010a0:	fa07 f70e 	lsl.w	r7, r7, lr
 80010a4:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 80010a6:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010a8:	684e      	ldr	r6, [r1, #4]
 80010aa:	1e77      	subs	r7, r6, #1
 80010ac:	2f01      	cmp	r7, #1
 80010ae:	d903      	bls.n	80010b8 <HAL_GPIO_Init+0xec>
 80010b0:	2e11      	cmp	r6, #17
 80010b2:	d001      	beq.n	80010b8 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010b4:	2e12      	cmp	r6, #18
 80010b6:	d10f      	bne.n	80010d8 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->OSPEEDR; 
 80010b8:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010ba:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010bc:	68cf      	ldr	r7, [r1, #12]
 80010be:	fa07 f70e 	lsl.w	r7, r7, lr
 80010c2:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80010c4:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80010c6:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c8:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010cc:	684e      	ldr	r6, [r1, #4]
 80010ce:	f3c6 1600 	ubfx	r6, r6, #4, #1
 80010d2:	40a6      	lsls	r6, r4
 80010d4:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 80010d6:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 80010d8:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010da:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010dc:	688b      	ldr	r3, [r1, #8]
 80010de:	fa03 f30e 	lsl.w	r3, r3, lr
 80010e2:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 80010e4:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010e6:	684b      	ldr	r3, [r1, #4]
 80010e8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80010ec:	d0bd      	beq.n	800106a <HAL_GPIO_Init+0x9e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	4b2c      	ldr	r3, [pc, #176]	; (80011a4 <HAL_GPIO_Init+0x1d8>)
 80010f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010fa:	645a      	str	r2, [r3, #68]	; 0x44
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001106:	08a3      	lsrs	r3, r4, #2
 8001108:	1c9e      	adds	r6, r3, #2
 800110a:	4a24      	ldr	r2, [pc, #144]	; (800119c <HAL_GPIO_Init+0x1d0>)
 800110c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001110:	f004 0603 	and.w	r6, r4, #3
 8001114:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8001118:	260f      	movs	r6, #15
 800111a:	fa06 f60e 	lsl.w	r6, r6, lr
 800111e:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001122:	4f21      	ldr	r7, [pc, #132]	; (80011a8 <HAL_GPIO_Init+0x1dc>)
 8001124:	42b8      	cmp	r0, r7
 8001126:	f43f af6b 	beq.w	8001000 <HAL_GPIO_Init+0x34>
 800112a:	4e20      	ldr	r6, [pc, #128]	; (80011ac <HAL_GPIO_Init+0x1e0>)
 800112c:	42b0      	cmp	r0, r6
 800112e:	d022      	beq.n	8001176 <HAL_GPIO_Init+0x1aa>
 8001130:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001134:	42b0      	cmp	r0, r6
 8001136:	d020      	beq.n	800117a <HAL_GPIO_Init+0x1ae>
 8001138:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800113c:	42b0      	cmp	r0, r6
 800113e:	d01e      	beq.n	800117e <HAL_GPIO_Init+0x1b2>
 8001140:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001144:	42b0      	cmp	r0, r6
 8001146:	d01c      	beq.n	8001182 <HAL_GPIO_Init+0x1b6>
 8001148:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800114c:	42b0      	cmp	r0, r6
 800114e:	d01a      	beq.n	8001186 <HAL_GPIO_Init+0x1ba>
 8001150:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001154:	42b0      	cmp	r0, r6
 8001156:	d018      	beq.n	800118a <HAL_GPIO_Init+0x1be>
 8001158:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800115c:	42b0      	cmp	r0, r6
 800115e:	d016      	beq.n	800118e <HAL_GPIO_Init+0x1c2>
 8001160:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001164:	42b0      	cmp	r0, r6
 8001166:	d014      	beq.n	8001192 <HAL_GPIO_Init+0x1c6>
 8001168:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800116c:	42b0      	cmp	r0, r6
 800116e:	f43f af45 	beq.w	8000ffc <HAL_GPIO_Init+0x30>
 8001172:	260a      	movs	r6, #10
 8001174:	e745      	b.n	8001002 <HAL_GPIO_Init+0x36>
 8001176:	2601      	movs	r6, #1
 8001178:	e743      	b.n	8001002 <HAL_GPIO_Init+0x36>
 800117a:	2602      	movs	r6, #2
 800117c:	e741      	b.n	8001002 <HAL_GPIO_Init+0x36>
 800117e:	2603      	movs	r6, #3
 8001180:	e73f      	b.n	8001002 <HAL_GPIO_Init+0x36>
 8001182:	2604      	movs	r6, #4
 8001184:	e73d      	b.n	8001002 <HAL_GPIO_Init+0x36>
 8001186:	2605      	movs	r6, #5
 8001188:	e73b      	b.n	8001002 <HAL_GPIO_Init+0x36>
 800118a:	2606      	movs	r6, #6
 800118c:	e739      	b.n	8001002 <HAL_GPIO_Init+0x36>
 800118e:	2607      	movs	r6, #7
 8001190:	e737      	b.n	8001002 <HAL_GPIO_Init+0x36>
 8001192:	2608      	movs	r6, #8
 8001194:	e735      	b.n	8001002 <HAL_GPIO_Init+0x36>
      }
    }
  }
}
 8001196:	b003      	add	sp, #12
 8001198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800119a:	bf00      	nop
 800119c:	40013800 	.word	0x40013800
 80011a0:	40013c00 	.word	0x40013c00
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020000 	.word	0x40020000
 80011ac:	40020400 	.word	0x40020400

080011b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b0:	b912      	cbnz	r2, 80011b8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011b2:	0409      	lsls	r1, r1, #16
 80011b4:	6181      	str	r1, [r0, #24]
 80011b6:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80011b8:	6181      	str	r1, [r0, #24]
 80011ba:	4770      	bx	lr

080011bc <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80011bc:	6943      	ldr	r3, [r0, #20]
 80011be:	ea31 0303 	bics.w	r3, r1, r3
 80011c2:	d001      	beq.n	80011c8 <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80011c4:	6181      	str	r1, [r0, #24]
 80011c6:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80011c8:	0409      	lsls	r1, r1, #16
 80011ca:	6181      	str	r1, [r0, #24]
 80011cc:	4770      	bx	lr
	...

080011d0 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011d0:	2800      	cmp	r0, #0
 80011d2:	f000 81bb 	beq.w	800154c <HAL_RCC_OscConfig+0x37c>
{
 80011d6:	b570      	push	{r4, r5, r6, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011dc:	6803      	ldr	r3, [r0, #0]
 80011de:	f013 0f01 	tst.w	r3, #1
 80011e2:	d03b      	beq.n	800125c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011e4:	4ba7      	ldr	r3, [pc, #668]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f003 030c 	and.w	r3, r3, #12
 80011ec:	2b04      	cmp	r3, #4
 80011ee:	d02c      	beq.n	800124a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011f0:	4ba4      	ldr	r3, [pc, #656]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011f8:	2b08      	cmp	r3, #8
 80011fa:	d021      	beq.n	8001240 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011fc:	6863      	ldr	r3, [r4, #4]
 80011fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001202:	d04f      	beq.n	80012a4 <HAL_RCC_OscConfig+0xd4>
 8001204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001208:	d052      	beq.n	80012b0 <HAL_RCC_OscConfig+0xe0>
 800120a:	4b9e      	ldr	r3, [pc, #632]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800121a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800121c:	6863      	ldr	r3, [r4, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d050      	beq.n	80012c4 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001222:	f7ff fe51 	bl	8000ec8 <HAL_GetTick>
 8001226:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001228:	4b96      	ldr	r3, [pc, #600]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001230:	d114      	bne.n	800125c <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001232:	f7ff fe49 	bl	8000ec8 <HAL_GetTick>
 8001236:	1b40      	subs	r0, r0, r5
 8001238:	2864      	cmp	r0, #100	; 0x64
 800123a:	d9f5      	bls.n	8001228 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 800123c:	2003      	movs	r0, #3
 800123e:	e18a      	b.n	8001556 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001240:	4b90      	ldr	r3, [pc, #576]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001248:	d0d8      	beq.n	80011fc <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124a:	4b8e      	ldr	r3, [pc, #568]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001252:	d003      	beq.n	800125c <HAL_RCC_OscConfig+0x8c>
 8001254:	6863      	ldr	r3, [r4, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 817a 	beq.w	8001550 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800125c:	6823      	ldr	r3, [r4, #0]
 800125e:	f013 0f02 	tst.w	r3, #2
 8001262:	d055      	beq.n	8001310 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001264:	4b87      	ldr	r3, [pc, #540]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f013 0f0c 	tst.w	r3, #12
 800126c:	d03e      	beq.n	80012ec <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800126e:	4b85      	ldr	r3, [pc, #532]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001276:	2b08      	cmp	r3, #8
 8001278:	d033      	beq.n	80012e2 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800127a:	68e3      	ldr	r3, [r4, #12]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d068      	beq.n	8001352 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001280:	2201      	movs	r2, #1
 8001282:	4b81      	ldr	r3, [pc, #516]	; (8001488 <HAL_RCC_OscConfig+0x2b8>)
 8001284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001286:	f7ff fe1f 	bl	8000ec8 <HAL_GetTick>
 800128a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128c:	4b7d      	ldr	r3, [pc, #500]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f013 0f02 	tst.w	r3, #2
 8001294:	d154      	bne.n	8001340 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001296:	f7ff fe17 	bl	8000ec8 <HAL_GetTick>
 800129a:	1b40      	subs	r0, r0, r5
 800129c:	2802      	cmp	r0, #2
 800129e:	d9f5      	bls.n	800128c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80012a0:	2003      	movs	r0, #3
 80012a2:	e158      	b.n	8001556 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a4:	4a77      	ldr	r2, [pc, #476]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 80012a6:	6813      	ldr	r3, [r2, #0]
 80012a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	e7b5      	b.n	800121c <HAL_RCC_OscConfig+0x4c>
 80012b0:	4b74      	ldr	r3, [pc, #464]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	e7ab      	b.n	800121c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80012c4:	f7ff fe00 	bl	8000ec8 <HAL_GetTick>
 80012c8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ca:	4b6e      	ldr	r3, [pc, #440]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80012d2:	d0c3      	beq.n	800125c <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d4:	f7ff fdf8 	bl	8000ec8 <HAL_GetTick>
 80012d8:	1b40      	subs	r0, r0, r5
 80012da:	2864      	cmp	r0, #100	; 0x64
 80012dc:	d9f5      	bls.n	80012ca <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80012de:	2003      	movs	r0, #3
 80012e0:	e139      	b.n	8001556 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012e2:	4b68      	ldr	r3, [pc, #416]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80012ea:	d1c6      	bne.n	800127a <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ec:	4b65      	ldr	r3, [pc, #404]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f013 0f02 	tst.w	r3, #2
 80012f4:	d004      	beq.n	8001300 <HAL_RCC_OscConfig+0x130>
 80012f6:	68e3      	ldr	r3, [r4, #12]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d001      	beq.n	8001300 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 80012fc:	2001      	movs	r0, #1
 80012fe:	e12a      	b.n	8001556 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001300:	4a60      	ldr	r2, [pc, #384]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 8001302:	6813      	ldr	r3, [r2, #0]
 8001304:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001308:	6921      	ldr	r1, [r4, #16]
 800130a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800130e:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001310:	6823      	ldr	r3, [r4, #0]
 8001312:	f013 0f08 	tst.w	r3, #8
 8001316:	d040      	beq.n	800139a <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001318:	6963      	ldr	r3, [r4, #20]
 800131a:	b363      	cbz	r3, 8001376 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800131c:	2201      	movs	r2, #1
 800131e:	4b5b      	ldr	r3, [pc, #364]	; (800148c <HAL_RCC_OscConfig+0x2bc>)
 8001320:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001322:	f7ff fdd1 	bl	8000ec8 <HAL_GetTick>
 8001326:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001328:	4b56      	ldr	r3, [pc, #344]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 800132a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800132c:	f013 0f02 	tst.w	r3, #2
 8001330:	d133      	bne.n	800139a <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001332:	f7ff fdc9 	bl	8000ec8 <HAL_GetTick>
 8001336:	1b40      	subs	r0, r0, r5
 8001338:	2802      	cmp	r0, #2
 800133a:	d9f5      	bls.n	8001328 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 800133c:	2003      	movs	r0, #3
 800133e:	e10a      	b.n	8001556 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001340:	4a50      	ldr	r2, [pc, #320]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 8001342:	6813      	ldr	r3, [r2, #0]
 8001344:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001348:	6921      	ldr	r1, [r4, #16]
 800134a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800134e:	6013      	str	r3, [r2, #0]
 8001350:	e7de      	b.n	8001310 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8001352:	2200      	movs	r2, #0
 8001354:	4b4c      	ldr	r3, [pc, #304]	; (8001488 <HAL_RCC_OscConfig+0x2b8>)
 8001356:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001358:	f7ff fdb6 	bl	8000ec8 <HAL_GetTick>
 800135c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135e:	4b49      	ldr	r3, [pc, #292]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f013 0f02 	tst.w	r3, #2
 8001366:	d0d3      	beq.n	8001310 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001368:	f7ff fdae 	bl	8000ec8 <HAL_GetTick>
 800136c:	1b40      	subs	r0, r0, r5
 800136e:	2802      	cmp	r0, #2
 8001370:	d9f5      	bls.n	800135e <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001372:	2003      	movs	r0, #3
 8001374:	e0ef      	b.n	8001556 <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001376:	2200      	movs	r2, #0
 8001378:	4b44      	ldr	r3, [pc, #272]	; (800148c <HAL_RCC_OscConfig+0x2bc>)
 800137a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137c:	f7ff fda4 	bl	8000ec8 <HAL_GetTick>
 8001380:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001382:	4b40      	ldr	r3, [pc, #256]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 8001384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001386:	f013 0f02 	tst.w	r3, #2
 800138a:	d006      	beq.n	800139a <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800138c:	f7ff fd9c 	bl	8000ec8 <HAL_GetTick>
 8001390:	1b40      	subs	r0, r0, r5
 8001392:	2802      	cmp	r0, #2
 8001394:	d9f5      	bls.n	8001382 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8001396:	2003      	movs	r0, #3
 8001398:	e0dd      	b.n	8001556 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800139a:	6823      	ldr	r3, [r4, #0]
 800139c:	f013 0f04 	tst.w	r3, #4
 80013a0:	d079      	beq.n	8001496 <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013a2:	4b38      	ldr	r3, [pc, #224]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80013aa:	d133      	bne.n	8001414 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ac:	2300      	movs	r3, #0
 80013ae:	9301      	str	r3, [sp, #4]
 80013b0:	4b34      	ldr	r3, [pc, #208]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 80013b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013b8:	641a      	str	r2, [r3, #64]	; 0x40
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c0:	9301      	str	r3, [sp, #4]
 80013c2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80013c4:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c6:	4b32      	ldr	r3, [pc, #200]	; (8001490 <HAL_RCC_OscConfig+0x2c0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f413 7f80 	tst.w	r3, #256	; 0x100
 80013ce:	d023      	beq.n	8001418 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d0:	68a3      	ldr	r3, [r4, #8]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d034      	beq.n	8001440 <HAL_RCC_OscConfig+0x270>
 80013d6:	2b05      	cmp	r3, #5
 80013d8:	d038      	beq.n	800144c <HAL_RCC_OscConfig+0x27c>
 80013da:	4b2a      	ldr	r3, [pc, #168]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 80013dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80013de:	f022 0201 	bic.w	r2, r2, #1
 80013e2:	671a      	str	r2, [r3, #112]	; 0x70
 80013e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80013e6:	f022 0204 	bic.w	r2, r2, #4
 80013ea:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013ec:	68a3      	ldr	r3, [r4, #8]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d036      	beq.n	8001460 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f2:	f7ff fd69 	bl	8000ec8 <HAL_GetTick>
 80013f6:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f8:	4b22      	ldr	r3, [pc, #136]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 80013fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fc:	f013 0f02 	tst.w	r3, #2
 8001400:	d148      	bne.n	8001494 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001402:	f7ff fd61 	bl	8000ec8 <HAL_GetTick>
 8001406:	1b80      	subs	r0, r0, r6
 8001408:	f241 3388 	movw	r3, #5000	; 0x1388
 800140c:	4298      	cmp	r0, r3
 800140e:	d9f3      	bls.n	80013f8 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8001410:	2003      	movs	r0, #3
 8001412:	e0a0      	b.n	8001556 <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8001414:	2500      	movs	r5, #0
 8001416:	e7d6      	b.n	80013c6 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001418:	4a1d      	ldr	r2, [pc, #116]	; (8001490 <HAL_RCC_OscConfig+0x2c0>)
 800141a:	6813      	ldr	r3, [r2, #0]
 800141c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001420:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001422:	f7ff fd51 	bl	8000ec8 <HAL_GetTick>
 8001426:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001428:	4b19      	ldr	r3, [pc, #100]	; (8001490 <HAL_RCC_OscConfig+0x2c0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001430:	d1ce      	bne.n	80013d0 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001432:	f7ff fd49 	bl	8000ec8 <HAL_GetTick>
 8001436:	1b80      	subs	r0, r0, r6
 8001438:	2802      	cmp	r0, #2
 800143a:	d9f5      	bls.n	8001428 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 800143c:	2003      	movs	r0, #3
 800143e:	e08a      	b.n	8001556 <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001440:	4a10      	ldr	r2, [pc, #64]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 8001442:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6713      	str	r3, [r2, #112]	; 0x70
 800144a:	e7cf      	b.n	80013ec <HAL_RCC_OscConfig+0x21c>
 800144c:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 800144e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001450:	f042 0204 	orr.w	r2, r2, #4
 8001454:	671a      	str	r2, [r3, #112]	; 0x70
 8001456:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001458:	f042 0201 	orr.w	r2, r2, #1
 800145c:	671a      	str	r2, [r3, #112]	; 0x70
 800145e:	e7c5      	b.n	80013ec <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001460:	f7ff fd32 	bl	8000ec8 <HAL_GetTick>
 8001464:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001466:	4b07      	ldr	r3, [pc, #28]	; (8001484 <HAL_RCC_OscConfig+0x2b4>)
 8001468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146a:	f013 0f02 	tst.w	r3, #2
 800146e:	d011      	beq.n	8001494 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001470:	f7ff fd2a 	bl	8000ec8 <HAL_GetTick>
 8001474:	1b80      	subs	r0, r0, r6
 8001476:	f241 3388 	movw	r3, #5000	; 0x1388
 800147a:	4298      	cmp	r0, r3
 800147c:	d9f3      	bls.n	8001466 <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 800147e:	2003      	movs	r0, #3
 8001480:	e069      	b.n	8001556 <HAL_RCC_OscConfig+0x386>
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800
 8001488:	42470000 	.word	0x42470000
 800148c:	42470e80 	.word	0x42470e80
 8001490:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001494:	b9e5      	cbnz	r5, 80014d0 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001496:	69a3      	ldr	r3, [r4, #24]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d05b      	beq.n	8001554 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800149c:	4a30      	ldr	r2, [pc, #192]	; (8001560 <HAL_RCC_OscConfig+0x390>)
 800149e:	6892      	ldr	r2, [r2, #8]
 80014a0:	f002 020c 	and.w	r2, r2, #12
 80014a4:	2a08      	cmp	r2, #8
 80014a6:	d058      	beq.n	800155a <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d017      	beq.n	80014dc <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ac:	2200      	movs	r2, #0
 80014ae:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <HAL_RCC_OscConfig+0x394>)
 80014b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b2:	f7ff fd09 	bl	8000ec8 <HAL_GetTick>
 80014b6:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b8:	4b29      	ldr	r3, [pc, #164]	; (8001560 <HAL_RCC_OscConfig+0x390>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014c0:	d042      	beq.n	8001548 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c2:	f7ff fd01 	bl	8000ec8 <HAL_GetTick>
 80014c6:	1b00      	subs	r0, r0, r4
 80014c8:	2802      	cmp	r0, #2
 80014ca:	d9f5      	bls.n	80014b8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80014cc:	2003      	movs	r0, #3
 80014ce:	e042      	b.n	8001556 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014d0:	4a23      	ldr	r2, [pc, #140]	; (8001560 <HAL_RCC_OscConfig+0x390>)
 80014d2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80014d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
 80014da:	e7dc      	b.n	8001496 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 80014dc:	2200      	movs	r2, #0
 80014de:	4b21      	ldr	r3, [pc, #132]	; (8001564 <HAL_RCC_OscConfig+0x394>)
 80014e0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014e2:	f7ff fcf1 	bl	8000ec8 <HAL_GetTick>
 80014e6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e8:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <HAL_RCC_OscConfig+0x390>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014f0:	d006      	beq.n	8001500 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f2:	f7ff fce9 	bl	8000ec8 <HAL_GetTick>
 80014f6:	1b40      	subs	r0, r0, r5
 80014f8:	2802      	cmp	r0, #2
 80014fa:	d9f5      	bls.n	80014e8 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80014fc:	2003      	movs	r0, #3
 80014fe:	e02a      	b.n	8001556 <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001500:	69e3      	ldr	r3, [r4, #28]
 8001502:	6a22      	ldr	r2, [r4, #32]
 8001504:	4313      	orrs	r3, r2
 8001506:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001508:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800150c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800150e:	0852      	lsrs	r2, r2, #1
 8001510:	3a01      	subs	r2, #1
 8001512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001516:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001518:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800151c:	4a10      	ldr	r2, [pc, #64]	; (8001560 <HAL_RCC_OscConfig+0x390>)
 800151e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001520:	2201      	movs	r2, #1
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <HAL_RCC_OscConfig+0x394>)
 8001524:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001526:	f7ff fccf 	bl	8000ec8 <HAL_GetTick>
 800152a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <HAL_RCC_OscConfig+0x390>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001534:	d106      	bne.n	8001544 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001536:	f7ff fcc7 	bl	8000ec8 <HAL_GetTick>
 800153a:	1b00      	subs	r0, r0, r4
 800153c:	2802      	cmp	r0, #2
 800153e:	d9f5      	bls.n	800152c <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001540:	2003      	movs	r0, #3
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001544:	2000      	movs	r0, #0
 8001546:	e006      	b.n	8001556 <HAL_RCC_OscConfig+0x386>
 8001548:	2000      	movs	r0, #0
 800154a:	e004      	b.n	8001556 <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 800154c:	2001      	movs	r0, #1
 800154e:	4770      	bx	lr
        return HAL_ERROR;
 8001550:	2001      	movs	r0, #1
 8001552:	e000      	b.n	8001556 <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8001554:	2000      	movs	r0, #0
}
 8001556:	b002      	add	sp, #8
 8001558:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800155a:	2001      	movs	r0, #1
 800155c:	e7fb      	b.n	8001556 <HAL_RCC_OscConfig+0x386>
 800155e:	bf00      	nop
 8001560:	40023800 	.word	0x40023800
 8001564:	42470060 	.word	0x42470060

08001568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800156a:	4b31      	ldr	r3, [pc, #196]	; (8001630 <HAL_RCC_GetSysClockFreq+0xc8>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 030c 	and.w	r3, r3, #12
 8001572:	2b04      	cmp	r3, #4
 8001574:	d059      	beq.n	800162a <HAL_RCC_GetSysClockFreq+0xc2>
 8001576:	2b08      	cmp	r3, #8
 8001578:	d001      	beq.n	800157e <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800157a:	482e      	ldr	r0, [pc, #184]	; (8001634 <HAL_RCC_GetSysClockFreq+0xcc>)
 800157c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800157e:	4b2c      	ldr	r3, [pc, #176]	; (8001630 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800158c:	d02a      	beq.n	80015e4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800158e:	4b28      	ldr	r3, [pc, #160]	; (8001630 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001596:	461e      	mov	r6, r3
 8001598:	2700      	movs	r7, #0
 800159a:	015c      	lsls	r4, r3, #5
 800159c:	2500      	movs	r5, #0
 800159e:	1ae4      	subs	r4, r4, r3
 80015a0:	eb65 0507 	sbc.w	r5, r5, r7
 80015a4:	01a9      	lsls	r1, r5, #6
 80015a6:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80015aa:	01a0      	lsls	r0, r4, #6
 80015ac:	1b00      	subs	r0, r0, r4
 80015ae:	eb61 0105 	sbc.w	r1, r1, r5
 80015b2:	00cb      	lsls	r3, r1, #3
 80015b4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80015b8:	00c4      	lsls	r4, r0, #3
 80015ba:	19a0      	adds	r0, r4, r6
 80015bc:	eb43 0107 	adc.w	r1, r3, r7
 80015c0:	024b      	lsls	r3, r1, #9
 80015c2:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80015c6:	0244      	lsls	r4, r0, #9
 80015c8:	4620      	mov	r0, r4
 80015ca:	4619      	mov	r1, r3
 80015cc:	2300      	movs	r3, #0
 80015ce:	f7ff faa7 	bl	8000b20 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015d2:	4b17      	ldr	r3, [pc, #92]	; (8001630 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80015da:	3301      	adds	r3, #1
 80015dc:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80015de:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80015e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80015ec:	461e      	mov	r6, r3
 80015ee:	2700      	movs	r7, #0
 80015f0:	015c      	lsls	r4, r3, #5
 80015f2:	2500      	movs	r5, #0
 80015f4:	1ae4      	subs	r4, r4, r3
 80015f6:	eb65 0507 	sbc.w	r5, r5, r7
 80015fa:	01a9      	lsls	r1, r5, #6
 80015fc:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001600:	01a0      	lsls	r0, r4, #6
 8001602:	1b00      	subs	r0, r0, r4
 8001604:	eb61 0105 	sbc.w	r1, r1, r5
 8001608:	00cb      	lsls	r3, r1, #3
 800160a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800160e:	00c4      	lsls	r4, r0, #3
 8001610:	19a0      	adds	r0, r4, r6
 8001612:	eb43 0107 	adc.w	r1, r3, r7
 8001616:	028b      	lsls	r3, r1, #10
 8001618:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800161c:	0284      	lsls	r4, r0, #10
 800161e:	4620      	mov	r0, r4
 8001620:	4619      	mov	r1, r3
 8001622:	2300      	movs	r3, #0
 8001624:	f7ff fa7c 	bl	8000b20 <__aeabi_uldivmod>
 8001628:	e7d3      	b.n	80015d2 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 800162a:	4803      	ldr	r0, [pc, #12]	; (8001638 <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800162c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800
 8001634:	00f42400 	.word	0x00f42400
 8001638:	007a1200 	.word	0x007a1200

0800163c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800163c:	2800      	cmp	r0, #0
 800163e:	f000 809d 	beq.w	800177c <HAL_RCC_ClockConfig+0x140>
{
 8001642:	b570      	push	{r4, r5, r6, lr}
 8001644:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001646:	4b4f      	ldr	r3, [pc, #316]	; (8001784 <HAL_RCC_ClockConfig+0x148>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	428b      	cmp	r3, r1
 8001650:	d209      	bcs.n	8001666 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001652:	b2cb      	uxtb	r3, r1
 8001654:	4a4b      	ldr	r2, [pc, #300]	; (8001784 <HAL_RCC_ClockConfig+0x148>)
 8001656:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001658:	6813      	ldr	r3, [r2, #0]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	4299      	cmp	r1, r3
 8001660:	d001      	beq.n	8001666 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8001662:	2001      	movs	r0, #1
 8001664:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001666:	6823      	ldr	r3, [r4, #0]
 8001668:	f013 0f02 	tst.w	r3, #2
 800166c:	d017      	beq.n	800169e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800166e:	f013 0f04 	tst.w	r3, #4
 8001672:	d004      	beq.n	800167e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001674:	4a44      	ldr	r2, [pc, #272]	; (8001788 <HAL_RCC_ClockConfig+0x14c>)
 8001676:	6893      	ldr	r3, [r2, #8]
 8001678:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800167c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800167e:	6823      	ldr	r3, [r4, #0]
 8001680:	f013 0f08 	tst.w	r3, #8
 8001684:	d004      	beq.n	8001690 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001686:	4a40      	ldr	r2, [pc, #256]	; (8001788 <HAL_RCC_ClockConfig+0x14c>)
 8001688:	6893      	ldr	r3, [r2, #8]
 800168a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800168e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001690:	4a3d      	ldr	r2, [pc, #244]	; (8001788 <HAL_RCC_ClockConfig+0x14c>)
 8001692:	6893      	ldr	r3, [r2, #8]
 8001694:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001698:	68a0      	ldr	r0, [r4, #8]
 800169a:	4303      	orrs	r3, r0
 800169c:	6093      	str	r3, [r2, #8]
 800169e:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016a0:	6823      	ldr	r3, [r4, #0]
 80016a2:	f013 0f01 	tst.w	r3, #1
 80016a6:	d032      	beq.n	800170e <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a8:	6863      	ldr	r3, [r4, #4]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d021      	beq.n	80016f2 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ae:	1e9a      	subs	r2, r3, #2
 80016b0:	2a01      	cmp	r2, #1
 80016b2:	d925      	bls.n	8001700 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b4:	4a34      	ldr	r2, [pc, #208]	; (8001788 <HAL_RCC_ClockConfig+0x14c>)
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	f012 0f02 	tst.w	r2, #2
 80016bc:	d060      	beq.n	8001780 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016be:	4932      	ldr	r1, [pc, #200]	; (8001788 <HAL_RCC_ClockConfig+0x14c>)
 80016c0:	688a      	ldr	r2, [r1, #8]
 80016c2:	f022 0203 	bic.w	r2, r2, #3
 80016c6:	4313      	orrs	r3, r2
 80016c8:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80016ca:	f7ff fbfd 	bl	8000ec8 <HAL_GetTick>
 80016ce:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d0:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <HAL_RCC_ClockConfig+0x14c>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f003 030c 	and.w	r3, r3, #12
 80016d8:	6862      	ldr	r2, [r4, #4]
 80016da:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80016de:	d016      	beq.n	800170e <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e0:	f7ff fbf2 	bl	8000ec8 <HAL_GetTick>
 80016e4:	1b80      	subs	r0, r0, r6
 80016e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80016ea:	4298      	cmp	r0, r3
 80016ec:	d9f0      	bls.n	80016d0 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 80016ee:	2003      	movs	r0, #3
 80016f0:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f2:	4a25      	ldr	r2, [pc, #148]	; (8001788 <HAL_RCC_ClockConfig+0x14c>)
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80016fa:	d1e0      	bne.n	80016be <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80016fc:	2001      	movs	r0, #1
 80016fe:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001700:	4a21      	ldr	r2, [pc, #132]	; (8001788 <HAL_RCC_ClockConfig+0x14c>)
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001708:	d1d9      	bne.n	80016be <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 800170a:	2001      	movs	r0, #1
 800170c:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <HAL_RCC_ClockConfig+0x148>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	429d      	cmp	r5, r3
 8001718:	d209      	bcs.n	800172e <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171a:	b2ea      	uxtb	r2, r5
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <HAL_RCC_ClockConfig+0x148>)
 800171e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	429d      	cmp	r5, r3
 8001728:	d001      	beq.n	800172e <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 800172a:	2001      	movs	r0, #1
}
 800172c:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800172e:	6823      	ldr	r3, [r4, #0]
 8001730:	f013 0f04 	tst.w	r3, #4
 8001734:	d006      	beq.n	8001744 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001736:	4a14      	ldr	r2, [pc, #80]	; (8001788 <HAL_RCC_ClockConfig+0x14c>)
 8001738:	6893      	ldr	r3, [r2, #8]
 800173a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800173e:	68e1      	ldr	r1, [r4, #12]
 8001740:	430b      	orrs	r3, r1
 8001742:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001744:	6823      	ldr	r3, [r4, #0]
 8001746:	f013 0f08 	tst.w	r3, #8
 800174a:	d007      	beq.n	800175c <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800174c:	4a0e      	ldr	r2, [pc, #56]	; (8001788 <HAL_RCC_ClockConfig+0x14c>)
 800174e:	6893      	ldr	r3, [r2, #8]
 8001750:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001754:	6921      	ldr	r1, [r4, #16]
 8001756:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800175a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800175c:	f7ff ff04 	bl	8001568 <HAL_RCC_GetSysClockFreq>
 8001760:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_RCC_ClockConfig+0x14c>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001768:	4a08      	ldr	r2, [pc, #32]	; (800178c <HAL_RCC_ClockConfig+0x150>)
 800176a:	5cd3      	ldrb	r3, [r2, r3]
 800176c:	40d8      	lsrs	r0, r3
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <HAL_RCC_ClockConfig+0x154>)
 8001770:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001772:	2000      	movs	r0, #0
 8001774:	f7ff fb5c 	bl	8000e30 <HAL_InitTick>
  return HAL_OK;
 8001778:	2000      	movs	r0, #0
 800177a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800177c:	2001      	movs	r0, #1
 800177e:	4770      	bx	lr
        return HAL_ERROR;
 8001780:	2001      	movs	r0, #1
 8001782:	bd70      	pop	{r4, r5, r6, pc}
 8001784:	40023c00 	.word	0x40023c00
 8001788:	40023800 	.word	0x40023800
 800178c:	08003e18 	.word	0x08003e18
 8001790:	20000008 	.word	0x20000008

08001794 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001794:	4b01      	ldr	r3, [pc, #4]	; (800179c <HAL_RCC_GetHCLKFreq+0x8>)
 8001796:	6818      	ldr	r0, [r3, #0]
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	20000008 	.word	0x20000008

080017a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017a0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017a2:	f7ff fff7 	bl	8001794 <HAL_RCC_GetHCLKFreq>
 80017a6:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80017ae:	4a03      	ldr	r2, [pc, #12]	; (80017bc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80017b0:	5cd3      	ldrb	r3, [r2, r3]
}
 80017b2:	40d8      	lsrs	r0, r3
 80017b4:	bd08      	pop	{r3, pc}
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	08003e28 	.word	0x08003e28

080017c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017c0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80017c2:	f7ff ffe7 	bl	8001794 <HAL_RCC_GetHCLKFreq>
 80017c6:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80017ce:	4a03      	ldr	r2, [pc, #12]	; (80017dc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80017d0:	5cd3      	ldrb	r3, [r2, r3]
}
 80017d2:	40d8      	lsrs	r0, r3
 80017d4:	bd08      	pop	{r3, pc}
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800
 80017dc:	08003e28 	.word	0x08003e28

080017e0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80017e0:	6802      	ldr	r2, [r0, #0]
 80017e2:	68d3      	ldr	r3, [r2, #12]
 80017e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80017e8:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017ea:	6802      	ldr	r2, [r0, #0]
 80017ec:	6953      	ldr	r3, [r2, #20]
 80017ee:	f023 0301 	bic.w	r3, r3, #1
 80017f2:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80017f4:	2320      	movs	r3, #32
 80017f6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80017fa:	4770      	bx	lr

080017fc <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80017fc:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b21      	cmp	r3, #33	; 0x21
 8001804:	d001      	beq.n	800180a <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001806:	2002      	movs	r0, #2
 8001808:	4770      	bx	lr
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800180a:	6883      	ldr	r3, [r0, #8]
 800180c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001810:	d017      	beq.n	8001842 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001812:	6802      	ldr	r2, [r0, #0]
 8001814:	6a03      	ldr	r3, [r0, #32]
 8001816:	1c59      	adds	r1, r3, #1
 8001818:	6201      	str	r1, [r0, #32]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 800181e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8001820:	b29b      	uxth	r3, r3
 8001822:	3b01      	subs	r3, #1
 8001824:	b29b      	uxth	r3, r3
 8001826:	84c3      	strh	r3, [r0, #38]	; 0x26
 8001828:	b9db      	cbnz	r3, 8001862 <UART_Transmit_IT+0x66>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800182a:	6802      	ldr	r2, [r0, #0]
 800182c:	68d3      	ldr	r3, [r2, #12]
 800182e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001832:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001834:	6802      	ldr	r2, [r0, #0]
 8001836:	68d3      	ldr	r3, [r2, #12]
 8001838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800183c:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 800183e:	2000      	movs	r0, #0
 8001840:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001842:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001844:	6802      	ldr	r2, [r0, #0]
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800184c:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800184e:	6903      	ldr	r3, [r0, #16]
 8001850:	b91b      	cbnz	r3, 800185a <UART_Transmit_IT+0x5e>
        huart->pTxBuffPtr += 2U;
 8001852:	6a03      	ldr	r3, [r0, #32]
 8001854:	3302      	adds	r3, #2
 8001856:	6203      	str	r3, [r0, #32]
 8001858:	e7e1      	b.n	800181e <UART_Transmit_IT+0x22>
        huart->pTxBuffPtr += 1U;
 800185a:	6a03      	ldr	r3, [r0, #32]
 800185c:	3301      	adds	r3, #1
 800185e:	6203      	str	r3, [r0, #32]
 8001860:	e7dd      	b.n	800181e <UART_Transmit_IT+0x22>
    return HAL_OK;
 8001862:	2000      	movs	r0, #0
  }
}
 8001864:	4770      	bx	lr
	...

08001868 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800186c:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800186e:	6802      	ldr	r2, [r0, #0]
 8001870:	6913      	ldr	r3, [r2, #16]
 8001872:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001876:	68c1      	ldr	r1, [r0, #12]
 8001878:	430b      	orrs	r3, r1
 800187a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800187c:	6883      	ldr	r3, [r0, #8]
 800187e:	6902      	ldr	r2, [r0, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	6942      	ldr	r2, [r0, #20]
 8001884:	4313      	orrs	r3, r2
 8001886:	69c2      	ldr	r2, [r0, #28]
 8001888:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1,
 800188a:	6801      	ldr	r1, [r0, #0]
 800188c:	68ca      	ldr	r2, [r1, #12]
 800188e:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8001892:	f022 020c 	bic.w	r2, r2, #12
 8001896:	4313      	orrs	r3, r2
 8001898:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800189a:	6802      	ldr	r2, [r0, #0]
 800189c:	6953      	ldr	r3, [r2, #20]
 800189e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018a2:	6981      	ldr	r1, [r0, #24]
 80018a4:	430b      	orrs	r3, r1
 80018a6:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018a8:	69c3      	ldr	r3, [r0, #28]
 80018aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018ae:	d062      	beq.n	8001976 <UART_SetConfig+0x10e>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80018b0:	f8d0 8000 	ldr.w	r8, [r0]
 80018b4:	4bbb      	ldr	r3, [pc, #748]	; (8001ba4 <UART_SetConfig+0x33c>)
 80018b6:	4598      	cmp	r8, r3
 80018b8:	f000 811b 	beq.w	8001af2 <UART_SetConfig+0x28a>
 80018bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018c0:	4598      	cmp	r8, r3
 80018c2:	f000 8116 	beq.w	8001af2 <UART_SetConfig+0x28a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80018c6:	f7ff ff6b 	bl	80017a0 <HAL_RCC_GetPCLK1Freq>
 80018ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80018ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80018d2:	6865      	ldr	r5, [r4, #4]
 80018d4:	00ad      	lsls	r5, r5, #2
 80018d6:	fbb0 f5f5 	udiv	r5, r0, r5
 80018da:	4fb3      	ldr	r7, [pc, #716]	; (8001ba8 <UART_SetConfig+0x340>)
 80018dc:	fba7 3505 	umull	r3, r5, r7, r5
 80018e0:	096d      	lsrs	r5, r5, #5
 80018e2:	012e      	lsls	r6, r5, #4
 80018e4:	f7ff ff5c 	bl	80017a0 <HAL_RCC_GetPCLK1Freq>
 80018e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80018ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80018f0:	6865      	ldr	r5, [r4, #4]
 80018f2:	00ad      	lsls	r5, r5, #2
 80018f4:	fbb0 faf5 	udiv	sl, r0, r5
 80018f8:	f7ff ff52 	bl	80017a0 <HAL_RCC_GetPCLK1Freq>
 80018fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001900:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001904:	6865      	ldr	r5, [r4, #4]
 8001906:	00ad      	lsls	r5, r5, #2
 8001908:	fbb0 f5f5 	udiv	r5, r0, r5
 800190c:	fba7 3505 	umull	r3, r5, r7, r5
 8001910:	096d      	lsrs	r5, r5, #5
 8001912:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001916:	fb09 a515 	mls	r5, r9, r5, sl
 800191a:	012d      	lsls	r5, r5, #4
 800191c:	3532      	adds	r5, #50	; 0x32
 800191e:	fba7 3505 	umull	r3, r5, r7, r5
 8001922:	096d      	lsrs	r5, r5, #5
 8001924:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8001928:	4435      	add	r5, r6
 800192a:	f7ff ff39 	bl	80017a0 <HAL_RCC_GetPCLK1Freq>
 800192e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001932:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001936:	6866      	ldr	r6, [r4, #4]
 8001938:	00b6      	lsls	r6, r6, #2
 800193a:	fbb0 f6f6 	udiv	r6, r0, r6
 800193e:	f7ff ff2f 	bl	80017a0 <HAL_RCC_GetPCLK1Freq>
 8001942:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001946:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800194a:	6863      	ldr	r3, [r4, #4]
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001952:	fba7 3000 	umull	r3, r0, r7, r0
 8001956:	0940      	lsrs	r0, r0, #5
 8001958:	fb09 6910 	mls	r9, r9, r0, r6
 800195c:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001960:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001964:	fba7 3709 	umull	r3, r7, r7, r9
 8001968:	f3c7 1743 	ubfx	r7, r7, #5, #4
 800196c:	442f      	add	r7, r5
 800196e:	f8c8 7008 	str.w	r7, [r8, #8]
 8001972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001976:	f8d0 8000 	ldr.w	r8, [r0]
 800197a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800197e:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8001982:	4598      	cmp	r8, r3
 8001984:	d05c      	beq.n	8001a40 <UART_SetConfig+0x1d8>
 8001986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800198a:	4598      	cmp	r8, r3
 800198c:	d058      	beq.n	8001a40 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800198e:	f7ff ff07 	bl	80017a0 <HAL_RCC_GetPCLK1Freq>
 8001992:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001996:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800199a:	6865      	ldr	r5, [r4, #4]
 800199c:	006d      	lsls	r5, r5, #1
 800199e:	fbb0 f5f5 	udiv	r5, r0, r5
 80019a2:	4f81      	ldr	r7, [pc, #516]	; (8001ba8 <UART_SetConfig+0x340>)
 80019a4:	fba7 3505 	umull	r3, r5, r7, r5
 80019a8:	096d      	lsrs	r5, r5, #5
 80019aa:	012e      	lsls	r6, r5, #4
 80019ac:	f7ff fef8 	bl	80017a0 <HAL_RCC_GetPCLK1Freq>
 80019b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80019b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80019b8:	6865      	ldr	r5, [r4, #4]
 80019ba:	006d      	lsls	r5, r5, #1
 80019bc:	fbb0 faf5 	udiv	sl, r0, r5
 80019c0:	f7ff feee 	bl	80017a0 <HAL_RCC_GetPCLK1Freq>
 80019c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80019c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80019cc:	6865      	ldr	r5, [r4, #4]
 80019ce:	006d      	lsls	r5, r5, #1
 80019d0:	fbb0 f5f5 	udiv	r5, r0, r5
 80019d4:	fba7 3505 	umull	r3, r5, r7, r5
 80019d8:	096d      	lsrs	r5, r5, #5
 80019da:	f04f 0964 	mov.w	r9, #100	; 0x64
 80019de:	fb09 a515 	mls	r5, r9, r5, sl
 80019e2:	00ed      	lsls	r5, r5, #3
 80019e4:	3532      	adds	r5, #50	; 0x32
 80019e6:	fba7 3505 	umull	r3, r5, r7, r5
 80019ea:	096d      	lsrs	r5, r5, #5
 80019ec:	006d      	lsls	r5, r5, #1
 80019ee:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 80019f2:	4435      	add	r5, r6
 80019f4:	f7ff fed4 	bl	80017a0 <HAL_RCC_GetPCLK1Freq>
 80019f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80019fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a00:	6866      	ldr	r6, [r4, #4]
 8001a02:	0076      	lsls	r6, r6, #1
 8001a04:	fbb0 f6f6 	udiv	r6, r0, r6
 8001a08:	f7ff feca 	bl	80017a0 <HAL_RCC_GetPCLK1Freq>
 8001a0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a14:	6863      	ldr	r3, [r4, #4]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a1c:	fba7 2303 	umull	r2, r3, r7, r3
 8001a20:	095b      	lsrs	r3, r3, #5
 8001a22:	fb09 6913 	mls	r9, r9, r3, r6
 8001a26:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8001a2a:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001a2e:	fba7 3709 	umull	r3, r7, r7, r9
 8001a32:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8001a36:	442f      	add	r7, r5
 8001a38:	f8c8 7008 	str.w	r7, [r8, #8]
 8001a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001a40:	f7ff febe 	bl	80017c0 <HAL_RCC_GetPCLK2Freq>
 8001a44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a48:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a4c:	6865      	ldr	r5, [r4, #4]
 8001a4e:	006d      	lsls	r5, r5, #1
 8001a50:	fbb0 f5f5 	udiv	r5, r0, r5
 8001a54:	4f54      	ldr	r7, [pc, #336]	; (8001ba8 <UART_SetConfig+0x340>)
 8001a56:	fba7 3505 	umull	r3, r5, r7, r5
 8001a5a:	096d      	lsrs	r5, r5, #5
 8001a5c:	012e      	lsls	r6, r5, #4
 8001a5e:	f7ff feaf 	bl	80017c0 <HAL_RCC_GetPCLK2Freq>
 8001a62:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a6a:	6865      	ldr	r5, [r4, #4]
 8001a6c:	006d      	lsls	r5, r5, #1
 8001a6e:	fbb0 faf5 	udiv	sl, r0, r5
 8001a72:	f7ff fea5 	bl	80017c0 <HAL_RCC_GetPCLK2Freq>
 8001a76:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a7a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a7e:	6865      	ldr	r5, [r4, #4]
 8001a80:	006d      	lsls	r5, r5, #1
 8001a82:	fbb0 f5f5 	udiv	r5, r0, r5
 8001a86:	fba7 3505 	umull	r3, r5, r7, r5
 8001a8a:	096d      	lsrs	r5, r5, #5
 8001a8c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001a90:	fb09 a515 	mls	r5, r9, r5, sl
 8001a94:	00ed      	lsls	r5, r5, #3
 8001a96:	3532      	adds	r5, #50	; 0x32
 8001a98:	fba7 3505 	umull	r3, r5, r7, r5
 8001a9c:	096d      	lsrs	r5, r5, #5
 8001a9e:	006d      	lsls	r5, r5, #1
 8001aa0:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8001aa4:	4435      	add	r5, r6
 8001aa6:	f7ff fe8b 	bl	80017c0 <HAL_RCC_GetPCLK2Freq>
 8001aaa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001aae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ab2:	6866      	ldr	r6, [r4, #4]
 8001ab4:	0076      	lsls	r6, r6, #1
 8001ab6:	fbb0 f6f6 	udiv	r6, r0, r6
 8001aba:	f7ff fe81 	bl	80017c0 <HAL_RCC_GetPCLK2Freq>
 8001abe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ac2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ac6:	6863      	ldr	r3, [r4, #4]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ace:	fba7 2303 	umull	r2, r3, r7, r3
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	fb09 6913 	mls	r9, r9, r3, r6
 8001ad8:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8001adc:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001ae0:	fba7 3709 	umull	r3, r7, r7, r9
 8001ae4:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8001ae8:	442f      	add	r7, r5
 8001aea:	f8c8 7008 	str.w	r7, [r8, #8]
 8001aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001af2:	f7ff fe65 	bl	80017c0 <HAL_RCC_GetPCLK2Freq>
 8001af6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001afa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001afe:	6865      	ldr	r5, [r4, #4]
 8001b00:	00ad      	lsls	r5, r5, #2
 8001b02:	fbb0 f5f5 	udiv	r5, r0, r5
 8001b06:	4f28      	ldr	r7, [pc, #160]	; (8001ba8 <UART_SetConfig+0x340>)
 8001b08:	fba7 3505 	umull	r3, r5, r7, r5
 8001b0c:	096d      	lsrs	r5, r5, #5
 8001b0e:	012e      	lsls	r6, r5, #4
 8001b10:	f7ff fe56 	bl	80017c0 <HAL_RCC_GetPCLK2Freq>
 8001b14:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b1c:	6865      	ldr	r5, [r4, #4]
 8001b1e:	00ad      	lsls	r5, r5, #2
 8001b20:	fbb0 faf5 	udiv	sl, r0, r5
 8001b24:	f7ff fe4c 	bl	80017c0 <HAL_RCC_GetPCLK2Freq>
 8001b28:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b30:	6865      	ldr	r5, [r4, #4]
 8001b32:	00ad      	lsls	r5, r5, #2
 8001b34:	fbb0 f5f5 	udiv	r5, r0, r5
 8001b38:	fba7 3505 	umull	r3, r5, r7, r5
 8001b3c:	096d      	lsrs	r5, r5, #5
 8001b3e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001b42:	fb09 a515 	mls	r5, r9, r5, sl
 8001b46:	012d      	lsls	r5, r5, #4
 8001b48:	3532      	adds	r5, #50	; 0x32
 8001b4a:	fba7 3505 	umull	r3, r5, r7, r5
 8001b4e:	096d      	lsrs	r5, r5, #5
 8001b50:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8001b54:	4435      	add	r5, r6
 8001b56:	f7ff fe33 	bl	80017c0 <HAL_RCC_GetPCLK2Freq>
 8001b5a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b62:	6866      	ldr	r6, [r4, #4]
 8001b64:	00b6      	lsls	r6, r6, #2
 8001b66:	fbb0 f6f6 	udiv	r6, r0, r6
 8001b6a:	f7ff fe29 	bl	80017c0 <HAL_RCC_GetPCLK2Freq>
 8001b6e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b72:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b76:	6863      	ldr	r3, [r4, #4]
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b7e:	fba7 2303 	umull	r2, r3, r7, r3
 8001b82:	095b      	lsrs	r3, r3, #5
 8001b84:	fb09 6913 	mls	r9, r9, r3, r6
 8001b88:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001b8c:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001b90:	fba7 3709 	umull	r3, r7, r7, r9
 8001b94:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8001b98:	442f      	add	r7, r5
 8001b9a:	f8c8 7008 	str.w	r7, [r8, #8]
 8001b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40011000 	.word	0x40011000
 8001ba8:	51eb851f 	.word	0x51eb851f

08001bac <UART_WaitOnFlagUntilTimeout>:
{
 8001bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bb0:	4605      	mov	r5, r0
 8001bb2:	460f      	mov	r7, r1
 8001bb4:	4616      	mov	r6, r2
 8001bb6:	4698      	mov	r8, r3
 8001bb8:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bba:	682b      	ldr	r3, [r5, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	ea37 0303 	bics.w	r3, r7, r3
 8001bc2:	bf0c      	ite	eq
 8001bc4:	2301      	moveq	r3, #1
 8001bc6:	2300      	movne	r3, #0
 8001bc8:	42b3      	cmp	r3, r6
 8001bca:	d11e      	bne.n	8001c0a <UART_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8001bcc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001bd0:	d0f3      	beq.n	8001bba <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001bd2:	b12c      	cbz	r4, 8001be0 <UART_WaitOnFlagUntilTimeout+0x34>
 8001bd4:	f7ff f978 	bl	8000ec8 <HAL_GetTick>
 8001bd8:	eba0 0008 	sub.w	r0, r0, r8
 8001bdc:	4284      	cmp	r4, r0
 8001bde:	d2ec      	bcs.n	8001bba <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001be0:	682a      	ldr	r2, [r5, #0]
 8001be2:	68d3      	ldr	r3, [r2, #12]
 8001be4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001be8:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bea:	682a      	ldr	r2, [r5, #0]
 8001bec:	6953      	ldr	r3, [r2, #20]
 8001bee:	f023 0301 	bic.w	r3, r3, #1
 8001bf2:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001bf4:	2320      	movs	r3, #32
 8001bf6:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001bfa:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8001c04:	2003      	movs	r0, #3
 8001c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8001c0a:	2000      	movs	r0, #0
}
 8001c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001c10 <HAL_UART_Init>:
  if (huart == NULL)
 8001c10:	b358      	cbz	r0, 8001c6a <HAL_UART_Init+0x5a>
{
 8001c12:	b510      	push	{r4, lr}
 8001c14:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001c16:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001c1a:	b30b      	cbz	r3, 8001c60 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001c1c:	2324      	movs	r3, #36	; 0x24
 8001c1e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001c22:	6822      	ldr	r2, [r4, #0]
 8001c24:	68d3      	ldr	r3, [r2, #12]
 8001c26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c2a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	f7ff fe1b 	bl	8001868 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c32:	6822      	ldr	r2, [r4, #0]
 8001c34:	6913      	ldr	r3, [r2, #16]
 8001c36:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001c3a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c3c:	6822      	ldr	r2, [r4, #0]
 8001c3e:	6953      	ldr	r3, [r2, #20]
 8001c40:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001c44:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001c46:	6822      	ldr	r2, [r4, #0]
 8001c48:	68d3      	ldr	r3, [r2, #12]
 8001c4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c4e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c50:	2000      	movs	r0, #0
 8001c52:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001c54:	2320      	movs	r3, #32
 8001c56:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001c5a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001c5e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001c60:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001c64:	f000 fafa 	bl	800225c <HAL_UART_MspInit>
 8001c68:	e7d8      	b.n	8001c1c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	4770      	bx	lr

08001c6e <HAL_UART_Transmit>:
{
 8001c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001c76:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b20      	cmp	r3, #32
 8001c7e:	d004      	beq.n	8001c8a <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 8001c80:	2302      	movs	r3, #2
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	b002      	add	sp, #8
 8001c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c8a:	4604      	mov	r4, r0
 8001c8c:	460d      	mov	r5, r1
 8001c8e:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001c90:	2900      	cmp	r1, #0
 8001c92:	d055      	beq.n	8001d40 <HAL_UART_Transmit+0xd2>
 8001c94:	2a00      	cmp	r2, #0
 8001c96:	d055      	beq.n	8001d44 <HAL_UART_Transmit+0xd6>
    __HAL_LOCK(huart);
 8001c98:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <HAL_UART_Transmit+0x36>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e7ee      	b.n	8001c82 <HAL_UART_Transmit+0x14>
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001caa:	2300      	movs	r3, #0
 8001cac:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cae:	2321      	movs	r3, #33	; 0x21
 8001cb0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001cb4:	f7ff f908 	bl	8000ec8 <HAL_GetTick>
 8001cb8:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001cba:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001cbe:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001cc2:	e010      	b.n	8001ce6 <HAL_UART_Transmit+0x78>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cc4:	9600      	str	r6, [sp, #0]
 8001cc6:	463b      	mov	r3, r7
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2180      	movs	r1, #128	; 0x80
 8001ccc:	4620      	mov	r0, r4
 8001cce:	f7ff ff6d 	bl	8001bac <UART_WaitOnFlagUntilTimeout>
 8001cd2:	2800      	cmp	r0, #0
 8001cd4:	d138      	bne.n	8001d48 <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001cd6:	6822      	ldr	r2, [r4, #0]
 8001cd8:	882b      	ldrh	r3, [r5, #0]
 8001cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cde:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001ce0:	6923      	ldr	r3, [r4, #16]
 8001ce2:	b9cb      	cbnz	r3, 8001d18 <HAL_UART_Transmit+0xaa>
          pData += 2U;
 8001ce4:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 8001ce6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	b1bb      	cbz	r3, 8001d1c <HAL_UART_Transmit+0xae>
      huart->TxXferCount--;
 8001cec:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001cf6:	68a3      	ldr	r3, [r4, #8]
 8001cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cfc:	d0e2      	beq.n	8001cc4 <HAL_UART_Transmit+0x56>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cfe:	9600      	str	r6, [sp, #0]
 8001d00:	463b      	mov	r3, r7
 8001d02:	2200      	movs	r2, #0
 8001d04:	2180      	movs	r1, #128	; 0x80
 8001d06:	4620      	mov	r0, r4
 8001d08:	f7ff ff50 	bl	8001bac <UART_WaitOnFlagUntilTimeout>
 8001d0c:	b9f0      	cbnz	r0, 8001d4c <HAL_UART_Transmit+0xde>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001d0e:	6823      	ldr	r3, [r4, #0]
 8001d10:	782a      	ldrb	r2, [r5, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	3501      	adds	r5, #1
 8001d16:	e7e6      	b.n	8001ce6 <HAL_UART_Transmit+0x78>
          pData += 1U;
 8001d18:	3501      	adds	r5, #1
 8001d1a:	e7e4      	b.n	8001ce6 <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d1c:	9600      	str	r6, [sp, #0]
 8001d1e:	463b      	mov	r3, r7
 8001d20:	2200      	movs	r2, #0
 8001d22:	2140      	movs	r1, #64	; 0x40
 8001d24:	4620      	mov	r0, r4
 8001d26:	f7ff ff41 	bl	8001bac <UART_WaitOnFlagUntilTimeout>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	b108      	cbz	r0, 8001d32 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e7a7      	b.n	8001c82 <HAL_UART_Transmit+0x14>
    huart->gState = HAL_UART_STATE_READY;
 8001d32:	2220      	movs	r2, #32
 8001d34:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8001d3e:	e7a0      	b.n	8001c82 <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e79e      	b.n	8001c82 <HAL_UART_Transmit+0x14>
 8001d44:	2301      	movs	r3, #1
 8001d46:	e79c      	b.n	8001c82 <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e79a      	b.n	8001c82 <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e798      	b.n	8001c82 <HAL_UART_Transmit+0x14>

08001d50 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d50:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b20      	cmp	r3, #32
 8001d58:	d001      	beq.n	8001d5e <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 8001d5a:	2002      	movs	r0, #2
 8001d5c:	4770      	bx	lr
    if ((pData == NULL) || (Size == 0U))
 8001d5e:	b1f9      	cbz	r1, 8001da0 <HAL_UART_Receive_IT+0x50>
 8001d60:	b302      	cbz	r2, 8001da4 <HAL_UART_Receive_IT+0x54>
    __HAL_LOCK(huart);
 8001d62:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d01e      	beq.n	8001da8 <HAL_UART_Receive_IT+0x58>
    huart->pRxBuffPtr = pData;
 8001d6a:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8001d6c:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001d6e:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d70:	2300      	movs	r3, #0
 8001d72:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d74:	2222      	movs	r2, #34	; 0x22
 8001d76:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 8001d7a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001d7e:	6801      	ldr	r1, [r0, #0]
 8001d80:	68ca      	ldr	r2, [r1, #12]
 8001d82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d86:	60ca      	str	r2, [r1, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001d88:	6801      	ldr	r1, [r0, #0]
 8001d8a:	694a      	ldr	r2, [r1, #20]
 8001d8c:	f042 0201 	orr.w	r2, r2, #1
 8001d90:	614a      	str	r2, [r1, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001d92:	6801      	ldr	r1, [r0, #0]
 8001d94:	68ca      	ldr	r2, [r1, #12]
 8001d96:	f042 0220 	orr.w	r2, r2, #32
 8001d9a:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	4770      	bx	lr
      return HAL_ERROR;
 8001da0:	2001      	movs	r0, #1
 8001da2:	4770      	bx	lr
 8001da4:	2001      	movs	r0, #1
 8001da6:	4770      	bx	lr
    __HAL_LOCK(huart);
 8001da8:	2002      	movs	r0, #2
}
 8001daa:	4770      	bx	lr

08001dac <HAL_UART_TxCpltCallback>:
{
 8001dac:	4770      	bx	lr

08001dae <UART_EndTransmit_IT>:
{
 8001dae:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001db0:	6801      	ldr	r1, [r0, #0]
 8001db2:	68cb      	ldr	r3, [r1, #12]
 8001db4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001db8:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001dba:	2320      	movs	r3, #32
 8001dbc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001dc0:	f7ff fff4 	bl	8001dac <HAL_UART_TxCpltCallback>
}
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	bd08      	pop	{r3, pc}

08001dc8 <UART_Receive_IT>:
{
 8001dc8:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001dca:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b22      	cmp	r3, #34	; 0x22
 8001dd2:	d001      	beq.n	8001dd8 <UART_Receive_IT+0x10>
    return HAL_BUSY;
 8001dd4:	2002      	movs	r0, #2
 8001dd6:	bd08      	pop	{r3, pc}
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001dd8:	6883      	ldr	r3, [r0, #8]
 8001dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dde:	d00f      	beq.n	8001e00 <UART_Receive_IT+0x38>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001de0:	6903      	ldr	r3, [r0, #16]
 8001de2:	bb0b      	cbnz	r3, 8001e28 <UART_Receive_IT+0x60>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001de4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001de6:	1c5a      	adds	r2, r3, #1
 8001de8:	6282      	str	r2, [r0, #40]	; 0x28
 8001dea:	6802      	ldr	r2, [r0, #0]
 8001dec:	6852      	ldr	r2, [r2, #4]
 8001dee:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8001df0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8001dfa:	b1f3      	cbz	r3, 8001e3a <UART_Receive_IT+0x72>
    return HAL_OK;
 8001dfc:	2000      	movs	r0, #0
}
 8001dfe:	bd08      	pop	{r3, pc}
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001e00:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001e02:	6903      	ldr	r3, [r0, #16]
 8001e04:	b943      	cbnz	r3, 8001e18 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e06:	6803      	ldr	r3, [r0, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e0e:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8001e10:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001e12:	3302      	adds	r3, #2
 8001e14:	6283      	str	r3, [r0, #40]	; 0x28
 8001e16:	e7eb      	b.n	8001df0 <UART_Receive_IT+0x28>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001e18:	6803      	ldr	r3, [r0, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8001e20:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001e22:	3301      	adds	r3, #1
 8001e24:	6283      	str	r3, [r0, #40]	; 0x28
 8001e26:	e7e3      	b.n	8001df0 <UART_Receive_IT+0x28>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e28:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001e2a:	1c53      	adds	r3, r2, #1
 8001e2c:	6283      	str	r3, [r0, #40]	; 0x28
 8001e2e:	6803      	ldr	r3, [r0, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e36:	7013      	strb	r3, [r2, #0]
 8001e38:	e7da      	b.n	8001df0 <UART_Receive_IT+0x28>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001e3a:	6802      	ldr	r2, [r0, #0]
 8001e3c:	68d3      	ldr	r3, [r2, #12]
 8001e3e:	f023 0320 	bic.w	r3, r3, #32
 8001e42:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001e44:	6802      	ldr	r2, [r0, #0]
 8001e46:	68d3      	ldr	r3, [r2, #12]
 8001e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e4c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001e4e:	6802      	ldr	r2, [r0, #0]
 8001e50:	6953      	ldr	r3, [r2, #20]
 8001e52:	f023 0301 	bic.w	r3, r3, #1
 8001e56:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001e58:	2320      	movs	r3, #32
 8001e5a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001e5e:	f000 f945 	bl	80020ec <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8001e62:	2000      	movs	r0, #0
 8001e64:	bd08      	pop	{r3, pc}

08001e66 <HAL_UART_ErrorCallback>:
{
 8001e66:	4770      	bx	lr

08001e68 <HAL_UART_IRQHandler>:
{
 8001e68:	b510      	push	{r4, lr}
 8001e6a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e6c:	6802      	ldr	r2, [r0, #0]
 8001e6e:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e70:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e72:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8001e74:	f013 000f 	ands.w	r0, r3, #15
 8001e78:	d105      	bne.n	8001e86 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e7a:	f013 0f20 	tst.w	r3, #32
 8001e7e:	d002      	beq.n	8001e86 <HAL_UART_IRQHandler+0x1e>
 8001e80:	f011 0f20 	tst.w	r1, #32
 8001e84:	d153      	bne.n	8001f2e <HAL_UART_IRQHandler+0xc6>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e86:	2800      	cmp	r0, #0
 8001e88:	d067      	beq.n	8001f5a <HAL_UART_IRQHandler+0xf2>
 8001e8a:	f012 0201 	ands.w	r2, r2, #1
 8001e8e:	d102      	bne.n	8001e96 <HAL_UART_IRQHandler+0x2e>
 8001e90:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001e94:	d061      	beq.n	8001f5a <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e96:	f013 0f01 	tst.w	r3, #1
 8001e9a:	d006      	beq.n	8001eaa <HAL_UART_IRQHandler+0x42>
 8001e9c:	f411 7f80 	tst.w	r1, #256	; 0x100
 8001ea0:	d003      	beq.n	8001eaa <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ea2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001ea4:	f040 0001 	orr.w	r0, r0, #1
 8001ea8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001eaa:	f013 0f04 	tst.w	r3, #4
 8001eae:	d004      	beq.n	8001eba <HAL_UART_IRQHandler+0x52>
 8001eb0:	b11a      	cbz	r2, 8001eba <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001eb2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001eb4:	f040 0002 	orr.w	r0, r0, #2
 8001eb8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001eba:	f013 0f02 	tst.w	r3, #2
 8001ebe:	d004      	beq.n	8001eca <HAL_UART_IRQHandler+0x62>
 8001ec0:	b11a      	cbz	r2, 8001eca <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ec2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001ec4:	f040 0004 	orr.w	r0, r0, #4
 8001ec8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001eca:	f013 0f08 	tst.w	r3, #8
 8001ece:	d004      	beq.n	8001eda <HAL_UART_IRQHandler+0x72>
 8001ed0:	b11a      	cbz	r2, 8001eda <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ed2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001ed4:	f042 0208 	orr.w	r2, r2, #8
 8001ed8:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001eda:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001edc:	2a00      	cmp	r2, #0
 8001ede:	d048      	beq.n	8001f72 <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ee0:	f013 0f20 	tst.w	r3, #32
 8001ee4:	d002      	beq.n	8001eec <HAL_UART_IRQHandler+0x84>
 8001ee6:	f011 0f20 	tst.w	r1, #32
 8001eea:	d124      	bne.n	8001f36 <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001eec:	6823      	ldr	r3, [r4, #0]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001ef4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001ef6:	f012 0f08 	tst.w	r2, #8
 8001efa:	d100      	bne.n	8001efe <HAL_UART_IRQHandler+0x96>
 8001efc:	b33b      	cbz	r3, 8001f4e <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8001efe:	4620      	mov	r0, r4
 8001f00:	f7ff fc6e 	bl	80017e0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f04:	6823      	ldr	r3, [r4, #0]
 8001f06:	695a      	ldr	r2, [r3, #20]
 8001f08:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001f0c:	d01b      	beq.n	8001f46 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f0e:	695a      	ldr	r2, [r3, #20]
 8001f10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f14:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001f16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f18:	b18b      	cbz	r3, 8001f3e <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f1a:	4a1a      	ldr	r2, [pc, #104]	; (8001f84 <HAL_UART_IRQHandler+0x11c>)
 8001f1c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f1e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001f20:	f7ff f840 	bl	8000fa4 <HAL_DMA_Abort_IT>
 8001f24:	b328      	cbz	r0, 8001f72 <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f26:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001f28:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001f2a:	4798      	blx	r3
 8001f2c:	bd10      	pop	{r4, pc}
      UART_Receive_IT(huart);
 8001f2e:	4620      	mov	r0, r4
 8001f30:	f7ff ff4a 	bl	8001dc8 <UART_Receive_IT>
      return;
 8001f34:	bd10      	pop	{r4, pc}
        UART_Receive_IT(huart);
 8001f36:	4620      	mov	r0, r4
 8001f38:	f7ff ff46 	bl	8001dc8 <UART_Receive_IT>
 8001f3c:	e7d6      	b.n	8001eec <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8001f3e:	4620      	mov	r0, r4
 8001f40:	f7ff ff91 	bl	8001e66 <HAL_UART_ErrorCallback>
 8001f44:	bd10      	pop	{r4, pc}
          HAL_UART_ErrorCallback(huart);
 8001f46:	4620      	mov	r0, r4
 8001f48:	f7ff ff8d 	bl	8001e66 <HAL_UART_ErrorCallback>
 8001f4c:	bd10      	pop	{r4, pc}
        HAL_UART_ErrorCallback(huart);
 8001f4e:	4620      	mov	r0, r4
 8001f50:	f7ff ff89 	bl	8001e66 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001f58:	bd10      	pop	{r4, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001f5a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f5e:	d002      	beq.n	8001f66 <HAL_UART_IRQHandler+0xfe>
 8001f60:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001f64:	d106      	bne.n	8001f74 <HAL_UART_IRQHandler+0x10c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001f66:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001f6a:	d002      	beq.n	8001f72 <HAL_UART_IRQHandler+0x10a>
 8001f6c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001f70:	d104      	bne.n	8001f7c <HAL_UART_IRQHandler+0x114>
 8001f72:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8001f74:	4620      	mov	r0, r4
 8001f76:	f7ff fc41 	bl	80017fc <UART_Transmit_IT>
    return;
 8001f7a:	bd10      	pop	{r4, pc}
    UART_EndTransmit_IT(huart);
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	f7ff ff16 	bl	8001dae <UART_EndTransmit_IT>
    return;
 8001f82:	e7f6      	b.n	8001f72 <HAL_UART_IRQHandler+0x10a>
 8001f84:	08001f89 	.word	0x08001f89

08001f88 <UART_DMAAbortOnError>:
{
 8001f88:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f8a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001f90:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001f92:	f7ff ff68 	bl	8001e66 <HAL_UART_ErrorCallback>
 8001f96:	bd08      	pop	{r3, pc}

08001f98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f98:	b530      	push	{r4, r5, lr}
 8001f9a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	2400      	movs	r4, #0
 8001f9e:	9403      	str	r4, [sp, #12]
 8001fa0:	9404      	str	r4, [sp, #16]
 8001fa2:	9405      	str	r4, [sp, #20]
 8001fa4:	9406      	str	r4, [sp, #24]
 8001fa6:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fa8:	9400      	str	r4, [sp, #0]
 8001faa:	4b19      	ldr	r3, [pc, #100]	; (8002010 <MX_GPIO_Init+0x78>)
 8001fac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fb2:	631a      	str	r2, [r3, #48]	; 0x30
 8001fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fb6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001fba:	9200      	str	r2, [sp, #0]
 8001fbc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbe:	9401      	str	r4, [sp, #4]
 8001fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fc2:	f042 0201 	orr.w	r2, r2, #1
 8001fc6:	631a      	str	r2, [r3, #48]	; 0x30
 8001fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fca:	f002 0201 	and.w	r2, r2, #1
 8001fce:	9201      	str	r2, [sp, #4]
 8001fd0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fd2:	9402      	str	r4, [sp, #8]
 8001fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fda:	631a      	str	r2, [r3, #48]	; 0x30
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe2:	9302      	str	r3, [sp, #8]
 8001fe4:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001fe6:	4d0b      	ldr	r5, [pc, #44]	; (8002014 <MX_GPIO_Init+0x7c>)
 8001fe8:	4622      	mov	r2, r4
 8001fea:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001fee:	4628      	mov	r0, r5
 8001ff0:	f7ff f8de 	bl	80011b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001ff4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001ff8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002000:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002002:	a903      	add	r1, sp, #12
 8002004:	4628      	mov	r0, r5
 8002006:	f7fe ffe1 	bl	8000fcc <HAL_GPIO_Init>

}
 800200a:	b009      	add	sp, #36	; 0x24
 800200c:	bd30      	pop	{r4, r5, pc}
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800
 8002014:	40021800 	.word	0x40021800

08002018 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002018:	b508      	push	{r3, lr}
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800201a:	2200      	movs	r2, #0
 800201c:	4611      	mov	r1, r2
 800201e:	2025      	movs	r0, #37	; 0x25
 8002020:	f7fe ff6a 	bl	8000ef8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002024:	2025      	movs	r0, #37	; 0x25
 8002026:	f7fe ff99 	bl	8000f5c <HAL_NVIC_EnableIRQ>
 800202a:	bd08      	pop	{r3, pc}

0800202c <SystemClock_Config>:
{
 800202c:	b530      	push	{r4, r5, lr}
 800202e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002030:	2230      	movs	r2, #48	; 0x30
 8002032:	2100      	movs	r1, #0
 8002034:	a808      	add	r0, sp, #32
 8002036:	f000 f9a1 	bl	800237c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800203a:	2400      	movs	r4, #0
 800203c:	9403      	str	r4, [sp, #12]
 800203e:	9404      	str	r4, [sp, #16]
 8002040:	9405      	str	r4, [sp, #20]
 8002042:	9406      	str	r4, [sp, #24]
 8002044:	9407      	str	r4, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002046:	9401      	str	r4, [sp, #4]
 8002048:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <SystemClock_Config+0x8c>)
 800204a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800204c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002050:	641a      	str	r2, [r3, #64]	; 0x40
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002058:	9301      	str	r3, [sp, #4]
 800205a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800205c:	9402      	str	r4, [sp, #8]
 800205e:	4b17      	ldr	r3, [pc, #92]	; (80020bc <SystemClock_Config+0x90>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800206e:	9302      	str	r3, [sp, #8]
 8002070:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002072:	2301      	movs	r3, #1
 8002074:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002076:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800207a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800207c:	2502      	movs	r5, #2
 800207e:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002080:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002084:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002086:	2304      	movs	r3, #4
 8002088:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800208a:	22a8      	movs	r2, #168	; 0xa8
 800208c:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800208e:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002090:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002092:	a808      	add	r0, sp, #32
 8002094:	f7ff f89c 	bl	80011d0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002098:	230f      	movs	r3, #15
 800209a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800209c:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800209e:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80020a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80020a4:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020aa:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80020ac:	2105      	movs	r1, #5
 80020ae:	a803      	add	r0, sp, #12
 80020b0:	f7ff fac4 	bl	800163c <HAL_RCC_ClockConfig>
}
 80020b4:	b015      	add	sp, #84	; 0x54
 80020b6:	bd30      	pop	{r4, r5, pc}
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40007000 	.word	0x40007000

080020c0 <main>:
{
 80020c0:	b508      	push	{r3, lr}
  HAL_Init();
 80020c2:	f7fe fedb 	bl	8000e7c <HAL_Init>
  SystemClock_Config();
 80020c6:	f7ff ffb1 	bl	800202c <SystemClock_Config>
  MX_GPIO_Init();
 80020ca:	f7ff ff65 	bl	8001f98 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80020ce:	f000 f8ab 	bl	8002228 <MX_USART1_UART_Init>
  MX_NVIC_Init();
 80020d2:	f7ff ffa1 	bl	8002018 <MX_NVIC_Init>
  HAL_UART_Receive_IT(&huart1, &rx1_data, 1);
 80020d6:	2201      	movs	r2, #1
 80020d8:	4902      	ldr	r1, [pc, #8]	; (80020e4 <main+0x24>)
 80020da:	4803      	ldr	r0, [pc, #12]	; (80020e8 <main+0x28>)
 80020dc:	f7ff fe38 	bl	8001d50 <HAL_UART_Receive_IT>
 80020e0:	e7fe      	b.n	80020e0 <main+0x20>
 80020e2:	bf00      	nop
 80020e4:	20000208 	.word	0x20000208
 80020e8:	2000020c 	.word	0x2000020c

080020ec <HAL_UART_RxCpltCallback>:
}

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020ec:	b538      	push	{r3, r4, r5, lr}
  if(huart->Instance == USART1)
 80020ee:	6802      	ldr	r2, [r0, #0]
 80020f0:	4b0e      	ldr	r3, [pc, #56]	; (800212c <HAL_UART_RxCpltCallback+0x40>)
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d000      	beq.n	80020f8 <HAL_UART_RxCpltCallback+0xc>
 80020f6:	bd38      	pop	{r3, r4, r5, pc}
  {
    HAL_UART_Receive_IT(&huart1, &rx1_data, 1);
 80020f8:	4d0d      	ldr	r5, [pc, #52]	; (8002130 <HAL_UART_RxCpltCallback+0x44>)
 80020fa:	4c0e      	ldr	r4, [pc, #56]	; (8002134 <HAL_UART_RxCpltCallback+0x48>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	4629      	mov	r1, r5
 8002100:	4620      	mov	r0, r4
 8002102:	f7ff fe25 	bl	8001d50 <HAL_UART_Receive_IT>

    HAL_UART_Transmit(&huart1, &rx1_data, 1, 10);
 8002106:	230a      	movs	r3, #10
 8002108:	2201      	movs	r2, #1
 800210a:	4629      	mov	r1, r5
 800210c:	4620      	mov	r0, r4
 800210e:	f7ff fdae 	bl	8001c6e <HAL_UART_Transmit>
    HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8002112:	4c09      	ldr	r4, [pc, #36]	; (8002138 <HAL_UART_RxCpltCallback+0x4c>)
 8002114:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002118:	4620      	mov	r0, r4
 800211a:	f7ff f84f 	bl	80011bc <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 800211e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002122:	4620      	mov	r0, r4
 8002124:	f7ff f84a 	bl	80011bc <HAL_GPIO_TogglePin>
  }
}
 8002128:	e7e5      	b.n	80020f6 <HAL_UART_RxCpltCallback+0xa>
 800212a:	bf00      	nop
 800212c:	40011000 	.word	0x40011000
 8002130:	20000208 	.word	0x20000208
 8002134:	2000020c 	.word	0x2000020c
 8002138:	40021800 	.word	0x40021800

0800213c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800213c:	4770      	bx	lr
	...

08002140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002140:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002142:	2100      	movs	r1, #0
 8002144:	9100      	str	r1, [sp, #0]
 8002146:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <HAL_MspInit+0x34>)
 8002148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800214a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800214e:	645a      	str	r2, [r3, #68]	; 0x44
 8002150:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002152:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002156:	9200      	str	r2, [sp, #0]
 8002158:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800215a:	9101      	str	r1, [sp, #4]
 800215c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800215e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002162:	641a      	str	r2, [r3, #64]	; 0x40
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216a:	9301      	str	r3, [sp, #4]
 800216c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800216e:	b002      	add	sp, #8
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800

08002178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002178:	4770      	bx	lr

0800217a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800217a:	e7fe      	b.n	800217a <HardFault_Handler>

0800217c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800217c:	e7fe      	b.n	800217c <MemManage_Handler>

0800217e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800217e:	e7fe      	b.n	800217e <BusFault_Handler>

08002180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002180:	e7fe      	b.n	8002180 <UsageFault_Handler>

08002182 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002182:	4770      	bx	lr

08002184 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002184:	4770      	bx	lr

08002186 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002186:	4770      	bx	lr

08002188 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002188:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800218a:	f7fe fe91 	bl	8000eb0 <HAL_IncTick>
 800218e:	bd08      	pop	{r3, pc}

08002190 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002190:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002192:	4802      	ldr	r0, [pc, #8]	; (800219c <USART1_IRQHandler+0xc>)
 8002194:	f7ff fe68 	bl	8001e68 <HAL_UART_IRQHandler>
 8002198:	bd08      	pop	{r3, pc}
 800219a:	bf00      	nop
 800219c:	2000020c 	.word	0x2000020c

080021a0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80021a0:	b508      	push	{r3, lr}
 80021a2:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80021a4:	4a0b      	ldr	r2, [pc, #44]	; (80021d4 <_sbrk+0x34>)
 80021a6:	6812      	ldr	r2, [r2, #0]
 80021a8:	b142      	cbz	r2, 80021bc <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 80021aa:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <_sbrk+0x34>)
 80021ac:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80021ae:	4403      	add	r3, r0
 80021b0:	466a      	mov	r2, sp
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d806      	bhi.n	80021c4 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80021b6:	4a07      	ldr	r2, [pc, #28]	; (80021d4 <_sbrk+0x34>)
 80021b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80021ba:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80021bc:	4906      	ldr	r1, [pc, #24]	; (80021d8 <_sbrk+0x38>)
 80021be:	4a05      	ldr	r2, [pc, #20]	; (80021d4 <_sbrk+0x34>)
 80021c0:	6011      	str	r1, [r2, #0]
 80021c2:	e7f2      	b.n	80021aa <_sbrk+0xa>
		errno = ENOMEM;
 80021c4:	f000 f8b0 	bl	8002328 <__errno>
 80021c8:	230c      	movs	r3, #12
 80021ca:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295
 80021d0:	bd08      	pop	{r3, pc}
 80021d2:	bf00      	nop
 80021d4:	200001f8 	.word	0x200001f8
 80021d8:	20000250 	.word	0x20000250

080021dc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021dc:	490f      	ldr	r1, [pc, #60]	; (800221c <SystemInit+0x40>)
 80021de:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80021e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80021ea:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <SystemInit+0x44>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	f042 0201 	orr.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80021f4:	2000      	movs	r0, #0
 80021f6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80021fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002202:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002204:	4a07      	ldr	r2, [pc, #28]	; (8002224 <SystemInit+0x48>)
 8002206:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800220e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002210:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002212:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002216:	608b      	str	r3, [r1, #8]
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	e000ed00 	.word	0xe000ed00
 8002220:	40023800 	.word	0x40023800
 8002224:	24003010 	.word	0x24003010

08002228 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002228:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 800222a:	480a      	ldr	r0, [pc, #40]	; (8002254 <MX_USART1_UART_Init+0x2c>)
 800222c:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <MX_USART1_UART_Init+0x30>)
 800222e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8002230:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002234:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002236:	2300      	movs	r3, #0
 8002238:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800223a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800223c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800223e:	220c      	movs	r2, #12
 8002240:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002242:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002244:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002246:	f7ff fce3 	bl	8001c10 <HAL_UART_Init>
 800224a:	b900      	cbnz	r0, 800224e <MX_USART1_UART_Init+0x26>
 800224c:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 800224e:	f7ff ff75 	bl	800213c <Error_Handler>
  }

}
 8002252:	e7fb      	b.n	800224c <MX_USART1_UART_Init+0x24>
 8002254:	2000020c 	.word	0x2000020c
 8002258:	40011000 	.word	0x40011000

0800225c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800225c:	b500      	push	{lr}
 800225e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	2300      	movs	r3, #0
 8002262:	9303      	str	r3, [sp, #12]
 8002264:	9304      	str	r3, [sp, #16]
 8002266:	9305      	str	r3, [sp, #20]
 8002268:	9306      	str	r3, [sp, #24]
 800226a:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 800226c:	6802      	ldr	r2, [r0, #0]
 800226e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002272:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8002276:	429a      	cmp	r2, r3
 8002278:	d002      	beq.n	8002280 <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800227a:	b009      	add	sp, #36	; 0x24
 800227c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8002280:	2100      	movs	r1, #0
 8002282:	9101      	str	r1, [sp, #4]
 8002284:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8002288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800228a:	f042 0210 	orr.w	r2, r2, #16
 800228e:	645a      	str	r2, [r3, #68]	; 0x44
 8002290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002292:	f002 0210 	and.w	r2, r2, #16
 8002296:	9201      	str	r2, [sp, #4]
 8002298:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229a:	9102      	str	r1, [sp, #8]
 800229c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800229e:	f042 0201 	orr.w	r2, r2, #1
 80022a2:	631a      	str	r2, [r3, #48]	; 0x30
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	9302      	str	r3, [sp, #8]
 80022ac:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022b2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b4:	2302      	movs	r3, #2
 80022b6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022b8:	2301      	movs	r3, #1
 80022ba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022bc:	2303      	movs	r3, #3
 80022be:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022c0:	2307      	movs	r3, #7
 80022c2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c4:	a903      	add	r1, sp, #12
 80022c6:	4802      	ldr	r0, [pc, #8]	; (80022d0 <HAL_UART_MspInit+0x74>)
 80022c8:	f7fe fe80 	bl	8000fcc <HAL_GPIO_Init>
}
 80022cc:	e7d5      	b.n	800227a <HAL_UART_MspInit+0x1e>
 80022ce:	bf00      	nop
 80022d0:	40020000 	.word	0x40020000

080022d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80022d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800230c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80022d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80022da:	e003      	b.n	80022e4 <LoopCopyDataInit>

080022dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80022de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80022e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80022e2:	3104      	adds	r1, #4

080022e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80022e4:	480b      	ldr	r0, [pc, #44]	; (8002314 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80022e6:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80022e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80022ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80022ec:	d3f6      	bcc.n	80022dc <CopyDataInit>
  ldr  r2, =_sbss
 80022ee:	4a0b      	ldr	r2, [pc, #44]	; (800231c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80022f0:	e002      	b.n	80022f8 <LoopFillZerobss>

080022f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80022f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80022f4:	f842 3b04 	str.w	r3, [r2], #4

080022f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80022f8:	4b09      	ldr	r3, [pc, #36]	; (8002320 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80022fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80022fc:	d3f9      	bcc.n	80022f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022fe:	f7ff ff6d 	bl	80021dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002302:	f000 f817 	bl	8002334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002306:	f7ff fedb 	bl	80020c0 <main>
  bx  lr    
 800230a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800230c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002310:	08004068 	.word	0x08004068
  ldr  r0, =_sdata
 8002314:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002318:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800231c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8002320:	20000250 	.word	0x20000250

08002324 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002324:	e7fe      	b.n	8002324 <ADC_IRQHandler>
	...

08002328 <__errno>:
 8002328:	4b01      	ldr	r3, [pc, #4]	; (8002330 <__errno+0x8>)
 800232a:	6818      	ldr	r0, [r3, #0]
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	2000000c 	.word	0x2000000c

08002334 <__libc_init_array>:
 8002334:	b570      	push	{r4, r5, r6, lr}
 8002336:	4e0d      	ldr	r6, [pc, #52]	; (800236c <__libc_init_array+0x38>)
 8002338:	4c0d      	ldr	r4, [pc, #52]	; (8002370 <__libc_init_array+0x3c>)
 800233a:	1ba4      	subs	r4, r4, r6
 800233c:	10a4      	asrs	r4, r4, #2
 800233e:	2500      	movs	r5, #0
 8002340:	42a5      	cmp	r5, r4
 8002342:	d109      	bne.n	8002358 <__libc_init_array+0x24>
 8002344:	4e0b      	ldr	r6, [pc, #44]	; (8002374 <__libc_init_array+0x40>)
 8002346:	4c0c      	ldr	r4, [pc, #48]	; (8002378 <__libc_init_array+0x44>)
 8002348:	f001 fd58 	bl	8003dfc <_init>
 800234c:	1ba4      	subs	r4, r4, r6
 800234e:	10a4      	asrs	r4, r4, #2
 8002350:	2500      	movs	r5, #0
 8002352:	42a5      	cmp	r5, r4
 8002354:	d105      	bne.n	8002362 <__libc_init_array+0x2e>
 8002356:	bd70      	pop	{r4, r5, r6, pc}
 8002358:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800235c:	4798      	blx	r3
 800235e:	3501      	adds	r5, #1
 8002360:	e7ee      	b.n	8002340 <__libc_init_array+0xc>
 8002362:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002366:	4798      	blx	r3
 8002368:	3501      	adds	r5, #1
 800236a:	e7f2      	b.n	8002352 <__libc_init_array+0x1e>
 800236c:	08004060 	.word	0x08004060
 8002370:	08004060 	.word	0x08004060
 8002374:	08004060 	.word	0x08004060
 8002378:	08004064 	.word	0x08004064

0800237c <memset>:
 800237c:	4402      	add	r2, r0
 800237e:	4603      	mov	r3, r0
 8002380:	4293      	cmp	r3, r2
 8002382:	d100      	bne.n	8002386 <memset+0xa>
 8002384:	4770      	bx	lr
 8002386:	f803 1b01 	strb.w	r1, [r3], #1
 800238a:	e7f9      	b.n	8002380 <memset+0x4>

0800238c <__cvt>:
 800238c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002390:	ec55 4b10 	vmov	r4, r5, d0
 8002394:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8002396:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800239a:	2d00      	cmp	r5, #0
 800239c:	460e      	mov	r6, r1
 800239e:	4691      	mov	r9, r2
 80023a0:	4619      	mov	r1, r3
 80023a2:	bfb8      	it	lt
 80023a4:	4622      	movlt	r2, r4
 80023a6:	462b      	mov	r3, r5
 80023a8:	f027 0720 	bic.w	r7, r7, #32
 80023ac:	bfbb      	ittet	lt
 80023ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80023b2:	461d      	movlt	r5, r3
 80023b4:	2300      	movge	r3, #0
 80023b6:	232d      	movlt	r3, #45	; 0x2d
 80023b8:	bfb8      	it	lt
 80023ba:	4614      	movlt	r4, r2
 80023bc:	2f46      	cmp	r7, #70	; 0x46
 80023be:	700b      	strb	r3, [r1, #0]
 80023c0:	d004      	beq.n	80023cc <__cvt+0x40>
 80023c2:	2f45      	cmp	r7, #69	; 0x45
 80023c4:	d100      	bne.n	80023c8 <__cvt+0x3c>
 80023c6:	3601      	adds	r6, #1
 80023c8:	2102      	movs	r1, #2
 80023ca:	e000      	b.n	80023ce <__cvt+0x42>
 80023cc:	2103      	movs	r1, #3
 80023ce:	ab03      	add	r3, sp, #12
 80023d0:	9301      	str	r3, [sp, #4]
 80023d2:	ab02      	add	r3, sp, #8
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	4632      	mov	r2, r6
 80023d8:	4653      	mov	r3, sl
 80023da:	ec45 4b10 	vmov	d0, r4, r5
 80023de:	f000 fbaf 	bl	8002b40 <_dtoa_r>
 80023e2:	2f47      	cmp	r7, #71	; 0x47
 80023e4:	4680      	mov	r8, r0
 80023e6:	d102      	bne.n	80023ee <__cvt+0x62>
 80023e8:	f019 0f01 	tst.w	r9, #1
 80023ec:	d026      	beq.n	800243c <__cvt+0xb0>
 80023ee:	2f46      	cmp	r7, #70	; 0x46
 80023f0:	eb08 0906 	add.w	r9, r8, r6
 80023f4:	d111      	bne.n	800241a <__cvt+0x8e>
 80023f6:	f898 3000 	ldrb.w	r3, [r8]
 80023fa:	2b30      	cmp	r3, #48	; 0x30
 80023fc:	d10a      	bne.n	8002414 <__cvt+0x88>
 80023fe:	2200      	movs	r2, #0
 8002400:	2300      	movs	r3, #0
 8002402:	4620      	mov	r0, r4
 8002404:	4629      	mov	r1, r5
 8002406:	f7fe fb1b 	bl	8000a40 <__aeabi_dcmpeq>
 800240a:	b918      	cbnz	r0, 8002414 <__cvt+0x88>
 800240c:	f1c6 0601 	rsb	r6, r6, #1
 8002410:	f8ca 6000 	str.w	r6, [sl]
 8002414:	f8da 3000 	ldr.w	r3, [sl]
 8002418:	4499      	add	r9, r3
 800241a:	2200      	movs	r2, #0
 800241c:	2300      	movs	r3, #0
 800241e:	4620      	mov	r0, r4
 8002420:	4629      	mov	r1, r5
 8002422:	f7fe fb0d 	bl	8000a40 <__aeabi_dcmpeq>
 8002426:	b938      	cbnz	r0, 8002438 <__cvt+0xac>
 8002428:	2230      	movs	r2, #48	; 0x30
 800242a:	9b03      	ldr	r3, [sp, #12]
 800242c:	4599      	cmp	r9, r3
 800242e:	d905      	bls.n	800243c <__cvt+0xb0>
 8002430:	1c59      	adds	r1, r3, #1
 8002432:	9103      	str	r1, [sp, #12]
 8002434:	701a      	strb	r2, [r3, #0]
 8002436:	e7f8      	b.n	800242a <__cvt+0x9e>
 8002438:	f8cd 900c 	str.w	r9, [sp, #12]
 800243c:	9b03      	ldr	r3, [sp, #12]
 800243e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002440:	eba3 0308 	sub.w	r3, r3, r8
 8002444:	4640      	mov	r0, r8
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	b004      	add	sp, #16
 800244a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800244e <__exponent>:
 800244e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002450:	4603      	mov	r3, r0
 8002452:	2900      	cmp	r1, #0
 8002454:	bfb8      	it	lt
 8002456:	4249      	neglt	r1, r1
 8002458:	f803 2b02 	strb.w	r2, [r3], #2
 800245c:	bfb4      	ite	lt
 800245e:	222d      	movlt	r2, #45	; 0x2d
 8002460:	222b      	movge	r2, #43	; 0x2b
 8002462:	2909      	cmp	r1, #9
 8002464:	7042      	strb	r2, [r0, #1]
 8002466:	dd20      	ble.n	80024aa <__exponent+0x5c>
 8002468:	f10d 0207 	add.w	r2, sp, #7
 800246c:	4617      	mov	r7, r2
 800246e:	260a      	movs	r6, #10
 8002470:	fb91 f5f6 	sdiv	r5, r1, r6
 8002474:	fb06 1115 	mls	r1, r6, r5, r1
 8002478:	3130      	adds	r1, #48	; 0x30
 800247a:	2d09      	cmp	r5, #9
 800247c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002480:	f102 34ff 	add.w	r4, r2, #4294967295
 8002484:	4629      	mov	r1, r5
 8002486:	dc09      	bgt.n	800249c <__exponent+0x4e>
 8002488:	3130      	adds	r1, #48	; 0x30
 800248a:	3a02      	subs	r2, #2
 800248c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002490:	42ba      	cmp	r2, r7
 8002492:	461c      	mov	r4, r3
 8002494:	d304      	bcc.n	80024a0 <__exponent+0x52>
 8002496:	1a20      	subs	r0, r4, r0
 8002498:	b003      	add	sp, #12
 800249a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800249c:	4622      	mov	r2, r4
 800249e:	e7e7      	b.n	8002470 <__exponent+0x22>
 80024a0:	f812 1b01 	ldrb.w	r1, [r2], #1
 80024a4:	f803 1b01 	strb.w	r1, [r3], #1
 80024a8:	e7f2      	b.n	8002490 <__exponent+0x42>
 80024aa:	2230      	movs	r2, #48	; 0x30
 80024ac:	461c      	mov	r4, r3
 80024ae:	4411      	add	r1, r2
 80024b0:	f804 2b02 	strb.w	r2, [r4], #2
 80024b4:	7059      	strb	r1, [r3, #1]
 80024b6:	e7ee      	b.n	8002496 <__exponent+0x48>

080024b8 <_printf_float>:
 80024b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024bc:	b08d      	sub	sp, #52	; 0x34
 80024be:	460c      	mov	r4, r1
 80024c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80024c4:	4616      	mov	r6, r2
 80024c6:	461f      	mov	r7, r3
 80024c8:	4605      	mov	r5, r0
 80024ca:	f001 f907 	bl	80036dc <_localeconv_r>
 80024ce:	6803      	ldr	r3, [r0, #0]
 80024d0:	9304      	str	r3, [sp, #16]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fd fe8c 	bl	80001f0 <strlen>
 80024d8:	2300      	movs	r3, #0
 80024da:	930a      	str	r3, [sp, #40]	; 0x28
 80024dc:	f8d8 3000 	ldr.w	r3, [r8]
 80024e0:	9005      	str	r0, [sp, #20]
 80024e2:	3307      	adds	r3, #7
 80024e4:	f023 0307 	bic.w	r3, r3, #7
 80024e8:	f103 0208 	add.w	r2, r3, #8
 80024ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 80024f0:	f8d4 b000 	ldr.w	fp, [r4]
 80024f4:	f8c8 2000 	str.w	r2, [r8]
 80024f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002500:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002504:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002508:	9307      	str	r3, [sp, #28]
 800250a:	f8cd 8018 	str.w	r8, [sp, #24]
 800250e:	f04f 32ff 	mov.w	r2, #4294967295
 8002512:	4ba5      	ldr	r3, [pc, #660]	; (80027a8 <_printf_float+0x2f0>)
 8002514:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002518:	f7fe fac4 	bl	8000aa4 <__aeabi_dcmpun>
 800251c:	2800      	cmp	r0, #0
 800251e:	f040 81fb 	bne.w	8002918 <_printf_float+0x460>
 8002522:	f04f 32ff 	mov.w	r2, #4294967295
 8002526:	4ba0      	ldr	r3, [pc, #640]	; (80027a8 <_printf_float+0x2f0>)
 8002528:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800252c:	f7fe fa9c 	bl	8000a68 <__aeabi_dcmple>
 8002530:	2800      	cmp	r0, #0
 8002532:	f040 81f1 	bne.w	8002918 <_printf_float+0x460>
 8002536:	2200      	movs	r2, #0
 8002538:	2300      	movs	r3, #0
 800253a:	4640      	mov	r0, r8
 800253c:	4649      	mov	r1, r9
 800253e:	f7fe fa89 	bl	8000a54 <__aeabi_dcmplt>
 8002542:	b110      	cbz	r0, 800254a <_printf_float+0x92>
 8002544:	232d      	movs	r3, #45	; 0x2d
 8002546:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800254a:	4b98      	ldr	r3, [pc, #608]	; (80027ac <_printf_float+0x2f4>)
 800254c:	4a98      	ldr	r2, [pc, #608]	; (80027b0 <_printf_float+0x2f8>)
 800254e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002552:	bf8c      	ite	hi
 8002554:	4690      	movhi	r8, r2
 8002556:	4698      	movls	r8, r3
 8002558:	2303      	movs	r3, #3
 800255a:	f02b 0204 	bic.w	r2, fp, #4
 800255e:	6123      	str	r3, [r4, #16]
 8002560:	6022      	str	r2, [r4, #0]
 8002562:	f04f 0900 	mov.w	r9, #0
 8002566:	9700      	str	r7, [sp, #0]
 8002568:	4633      	mov	r3, r6
 800256a:	aa0b      	add	r2, sp, #44	; 0x2c
 800256c:	4621      	mov	r1, r4
 800256e:	4628      	mov	r0, r5
 8002570:	f000 f9e2 	bl	8002938 <_printf_common>
 8002574:	3001      	adds	r0, #1
 8002576:	f040 8093 	bne.w	80026a0 <_printf_float+0x1e8>
 800257a:	f04f 30ff 	mov.w	r0, #4294967295
 800257e:	b00d      	add	sp, #52	; 0x34
 8002580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002584:	6861      	ldr	r1, [r4, #4]
 8002586:	1c4b      	adds	r3, r1, #1
 8002588:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800258c:	d13f      	bne.n	800260e <_printf_float+0x156>
 800258e:	2306      	movs	r3, #6
 8002590:	6063      	str	r3, [r4, #4]
 8002592:	2300      	movs	r3, #0
 8002594:	9303      	str	r3, [sp, #12]
 8002596:	ab0a      	add	r3, sp, #40	; 0x28
 8002598:	9302      	str	r3, [sp, #8]
 800259a:	ab09      	add	r3, sp, #36	; 0x24
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	ec49 8b10 	vmov	d0, r8, r9
 80025a2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80025a6:	6022      	str	r2, [r4, #0]
 80025a8:	f8cd a004 	str.w	sl, [sp, #4]
 80025ac:	6861      	ldr	r1, [r4, #4]
 80025ae:	4628      	mov	r0, r5
 80025b0:	f7ff feec 	bl	800238c <__cvt>
 80025b4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80025b8:	2b47      	cmp	r3, #71	; 0x47
 80025ba:	4680      	mov	r8, r0
 80025bc:	d109      	bne.n	80025d2 <_printf_float+0x11a>
 80025be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025c0:	1cd8      	adds	r0, r3, #3
 80025c2:	db02      	blt.n	80025ca <_printf_float+0x112>
 80025c4:	6862      	ldr	r2, [r4, #4]
 80025c6:	4293      	cmp	r3, r2
 80025c8:	dd57      	ble.n	800267a <_printf_float+0x1c2>
 80025ca:	f1aa 0a02 	sub.w	sl, sl, #2
 80025ce:	fa5f fa8a 	uxtb.w	sl, sl
 80025d2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80025d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80025d8:	d834      	bhi.n	8002644 <_printf_float+0x18c>
 80025da:	3901      	subs	r1, #1
 80025dc:	4652      	mov	r2, sl
 80025de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80025e2:	9109      	str	r1, [sp, #36]	; 0x24
 80025e4:	f7ff ff33 	bl	800244e <__exponent>
 80025e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80025ea:	1883      	adds	r3, r0, r2
 80025ec:	2a01      	cmp	r2, #1
 80025ee:	4681      	mov	r9, r0
 80025f0:	6123      	str	r3, [r4, #16]
 80025f2:	dc02      	bgt.n	80025fa <_printf_float+0x142>
 80025f4:	6822      	ldr	r2, [r4, #0]
 80025f6:	07d1      	lsls	r1, r2, #31
 80025f8:	d501      	bpl.n	80025fe <_printf_float+0x146>
 80025fa:	3301      	adds	r3, #1
 80025fc:	6123      	str	r3, [r4, #16]
 80025fe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0af      	beq.n	8002566 <_printf_float+0xae>
 8002606:	232d      	movs	r3, #45	; 0x2d
 8002608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800260c:	e7ab      	b.n	8002566 <_printf_float+0xae>
 800260e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8002612:	d002      	beq.n	800261a <_printf_float+0x162>
 8002614:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002618:	d1bb      	bne.n	8002592 <_printf_float+0xda>
 800261a:	b189      	cbz	r1, 8002640 <_printf_float+0x188>
 800261c:	2300      	movs	r3, #0
 800261e:	9303      	str	r3, [sp, #12]
 8002620:	ab0a      	add	r3, sp, #40	; 0x28
 8002622:	9302      	str	r3, [sp, #8]
 8002624:	ab09      	add	r3, sp, #36	; 0x24
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	ec49 8b10 	vmov	d0, r8, r9
 800262c:	6022      	str	r2, [r4, #0]
 800262e:	f8cd a004 	str.w	sl, [sp, #4]
 8002632:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002636:	4628      	mov	r0, r5
 8002638:	f7ff fea8 	bl	800238c <__cvt>
 800263c:	4680      	mov	r8, r0
 800263e:	e7be      	b.n	80025be <_printf_float+0x106>
 8002640:	2301      	movs	r3, #1
 8002642:	e7a5      	b.n	8002590 <_printf_float+0xd8>
 8002644:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8002648:	d119      	bne.n	800267e <_printf_float+0x1c6>
 800264a:	2900      	cmp	r1, #0
 800264c:	6863      	ldr	r3, [r4, #4]
 800264e:	dd0c      	ble.n	800266a <_printf_float+0x1b2>
 8002650:	6121      	str	r1, [r4, #16]
 8002652:	b913      	cbnz	r3, 800265a <_printf_float+0x1a2>
 8002654:	6822      	ldr	r2, [r4, #0]
 8002656:	07d2      	lsls	r2, r2, #31
 8002658:	d502      	bpl.n	8002660 <_printf_float+0x1a8>
 800265a:	3301      	adds	r3, #1
 800265c:	440b      	add	r3, r1
 800265e:	6123      	str	r3, [r4, #16]
 8002660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002662:	65a3      	str	r3, [r4, #88]	; 0x58
 8002664:	f04f 0900 	mov.w	r9, #0
 8002668:	e7c9      	b.n	80025fe <_printf_float+0x146>
 800266a:	b913      	cbnz	r3, 8002672 <_printf_float+0x1ba>
 800266c:	6822      	ldr	r2, [r4, #0]
 800266e:	07d0      	lsls	r0, r2, #31
 8002670:	d501      	bpl.n	8002676 <_printf_float+0x1be>
 8002672:	3302      	adds	r3, #2
 8002674:	e7f3      	b.n	800265e <_printf_float+0x1a6>
 8002676:	2301      	movs	r3, #1
 8002678:	e7f1      	b.n	800265e <_printf_float+0x1a6>
 800267a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800267e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002680:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002682:	4293      	cmp	r3, r2
 8002684:	db05      	blt.n	8002692 <_printf_float+0x1da>
 8002686:	6822      	ldr	r2, [r4, #0]
 8002688:	6123      	str	r3, [r4, #16]
 800268a:	07d1      	lsls	r1, r2, #31
 800268c:	d5e8      	bpl.n	8002660 <_printf_float+0x1a8>
 800268e:	3301      	adds	r3, #1
 8002690:	e7e5      	b.n	800265e <_printf_float+0x1a6>
 8002692:	2b00      	cmp	r3, #0
 8002694:	bfd4      	ite	le
 8002696:	f1c3 0302 	rsble	r3, r3, #2
 800269a:	2301      	movgt	r3, #1
 800269c:	4413      	add	r3, r2
 800269e:	e7de      	b.n	800265e <_printf_float+0x1a6>
 80026a0:	6823      	ldr	r3, [r4, #0]
 80026a2:	055a      	lsls	r2, r3, #21
 80026a4:	d407      	bmi.n	80026b6 <_printf_float+0x1fe>
 80026a6:	6923      	ldr	r3, [r4, #16]
 80026a8:	4642      	mov	r2, r8
 80026aa:	4631      	mov	r1, r6
 80026ac:	4628      	mov	r0, r5
 80026ae:	47b8      	blx	r7
 80026b0:	3001      	adds	r0, #1
 80026b2:	d12b      	bne.n	800270c <_printf_float+0x254>
 80026b4:	e761      	b.n	800257a <_printf_float+0xc2>
 80026b6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80026ba:	f240 80e2 	bls.w	8002882 <_printf_float+0x3ca>
 80026be:	2200      	movs	r2, #0
 80026c0:	2300      	movs	r3, #0
 80026c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80026c6:	f7fe f9bb 	bl	8000a40 <__aeabi_dcmpeq>
 80026ca:	2800      	cmp	r0, #0
 80026cc:	d03c      	beq.n	8002748 <_printf_float+0x290>
 80026ce:	2301      	movs	r3, #1
 80026d0:	4a38      	ldr	r2, [pc, #224]	; (80027b4 <_printf_float+0x2fc>)
 80026d2:	4631      	mov	r1, r6
 80026d4:	4628      	mov	r0, r5
 80026d6:	47b8      	blx	r7
 80026d8:	3001      	adds	r0, #1
 80026da:	f43f af4e 	beq.w	800257a <_printf_float+0xc2>
 80026de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80026e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80026e2:	429a      	cmp	r2, r3
 80026e4:	db02      	blt.n	80026ec <_printf_float+0x234>
 80026e6:	6823      	ldr	r3, [r4, #0]
 80026e8:	07d8      	lsls	r0, r3, #31
 80026ea:	d50f      	bpl.n	800270c <_printf_float+0x254>
 80026ec:	9b05      	ldr	r3, [sp, #20]
 80026ee:	9a04      	ldr	r2, [sp, #16]
 80026f0:	4631      	mov	r1, r6
 80026f2:	4628      	mov	r0, r5
 80026f4:	47b8      	blx	r7
 80026f6:	3001      	adds	r0, #1
 80026f8:	f43f af3f 	beq.w	800257a <_printf_float+0xc2>
 80026fc:	f04f 0800 	mov.w	r8, #0
 8002700:	f104 091a 	add.w	r9, r4, #26
 8002704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002706:	3b01      	subs	r3, #1
 8002708:	4598      	cmp	r8, r3
 800270a:	db12      	blt.n	8002732 <_printf_float+0x27a>
 800270c:	6823      	ldr	r3, [r4, #0]
 800270e:	079b      	lsls	r3, r3, #30
 8002710:	d509      	bpl.n	8002726 <_printf_float+0x26e>
 8002712:	f04f 0800 	mov.w	r8, #0
 8002716:	f104 0919 	add.w	r9, r4, #25
 800271a:	68e3      	ldr	r3, [r4, #12]
 800271c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800271e:	1a9b      	subs	r3, r3, r2
 8002720:	4598      	cmp	r8, r3
 8002722:	f2c0 80ee 	blt.w	8002902 <_printf_float+0x44a>
 8002726:	68e0      	ldr	r0, [r4, #12]
 8002728:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800272a:	4298      	cmp	r0, r3
 800272c:	bfb8      	it	lt
 800272e:	4618      	movlt	r0, r3
 8002730:	e725      	b.n	800257e <_printf_float+0xc6>
 8002732:	2301      	movs	r3, #1
 8002734:	464a      	mov	r2, r9
 8002736:	4631      	mov	r1, r6
 8002738:	4628      	mov	r0, r5
 800273a:	47b8      	blx	r7
 800273c:	3001      	adds	r0, #1
 800273e:	f43f af1c 	beq.w	800257a <_printf_float+0xc2>
 8002742:	f108 0801 	add.w	r8, r8, #1
 8002746:	e7dd      	b.n	8002704 <_printf_float+0x24c>
 8002748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800274a:	2b00      	cmp	r3, #0
 800274c:	dc34      	bgt.n	80027b8 <_printf_float+0x300>
 800274e:	2301      	movs	r3, #1
 8002750:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <_printf_float+0x2fc>)
 8002752:	4631      	mov	r1, r6
 8002754:	4628      	mov	r0, r5
 8002756:	47b8      	blx	r7
 8002758:	3001      	adds	r0, #1
 800275a:	f43f af0e 	beq.w	800257a <_printf_float+0xc2>
 800275e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002760:	b923      	cbnz	r3, 800276c <_printf_float+0x2b4>
 8002762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002764:	b913      	cbnz	r3, 800276c <_printf_float+0x2b4>
 8002766:	6823      	ldr	r3, [r4, #0]
 8002768:	07d9      	lsls	r1, r3, #31
 800276a:	d5cf      	bpl.n	800270c <_printf_float+0x254>
 800276c:	9b05      	ldr	r3, [sp, #20]
 800276e:	9a04      	ldr	r2, [sp, #16]
 8002770:	4631      	mov	r1, r6
 8002772:	4628      	mov	r0, r5
 8002774:	47b8      	blx	r7
 8002776:	3001      	adds	r0, #1
 8002778:	f43f aeff 	beq.w	800257a <_printf_float+0xc2>
 800277c:	f04f 0900 	mov.w	r9, #0
 8002780:	f104 0a1a 	add.w	sl, r4, #26
 8002784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002786:	425b      	negs	r3, r3
 8002788:	4599      	cmp	r9, r3
 800278a:	db01      	blt.n	8002790 <_printf_float+0x2d8>
 800278c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800278e:	e78b      	b.n	80026a8 <_printf_float+0x1f0>
 8002790:	2301      	movs	r3, #1
 8002792:	4652      	mov	r2, sl
 8002794:	4631      	mov	r1, r6
 8002796:	4628      	mov	r0, r5
 8002798:	47b8      	blx	r7
 800279a:	3001      	adds	r0, #1
 800279c:	f43f aeed 	beq.w	800257a <_printf_float+0xc2>
 80027a0:	f109 0901 	add.w	r9, r9, #1
 80027a4:	e7ee      	b.n	8002784 <_printf_float+0x2cc>
 80027a6:	bf00      	nop
 80027a8:	7fefffff 	.word	0x7fefffff
 80027ac:	08003e30 	.word	0x08003e30
 80027b0:	08003e34 	.word	0x08003e34
 80027b4:	08003e40 	.word	0x08003e40
 80027b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80027ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80027bc:	429a      	cmp	r2, r3
 80027be:	bfa8      	it	ge
 80027c0:	461a      	movge	r2, r3
 80027c2:	2a00      	cmp	r2, #0
 80027c4:	4691      	mov	r9, r2
 80027c6:	dc38      	bgt.n	800283a <_printf_float+0x382>
 80027c8:	f104 031a 	add.w	r3, r4, #26
 80027cc:	f04f 0b00 	mov.w	fp, #0
 80027d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80027d4:	9306      	str	r3, [sp, #24]
 80027d6:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80027da:	ebaa 0309 	sub.w	r3, sl, r9
 80027de:	459b      	cmp	fp, r3
 80027e0:	db33      	blt.n	800284a <_printf_float+0x392>
 80027e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80027e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80027e6:	429a      	cmp	r2, r3
 80027e8:	db3a      	blt.n	8002860 <_printf_float+0x3a8>
 80027ea:	6823      	ldr	r3, [r4, #0]
 80027ec:	07da      	lsls	r2, r3, #31
 80027ee:	d437      	bmi.n	8002860 <_printf_float+0x3a8>
 80027f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80027f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80027f4:	eba3 020a 	sub.w	r2, r3, sl
 80027f8:	eba3 0901 	sub.w	r9, r3, r1
 80027fc:	4591      	cmp	r9, r2
 80027fe:	bfa8      	it	ge
 8002800:	4691      	movge	r9, r2
 8002802:	f1b9 0f00 	cmp.w	r9, #0
 8002806:	dc33      	bgt.n	8002870 <_printf_float+0x3b8>
 8002808:	f04f 0800 	mov.w	r8, #0
 800280c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002810:	f104 0a1a 	add.w	sl, r4, #26
 8002814:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	eba3 0309 	sub.w	r3, r3, r9
 800281e:	4598      	cmp	r8, r3
 8002820:	f6bf af74 	bge.w	800270c <_printf_float+0x254>
 8002824:	2301      	movs	r3, #1
 8002826:	4652      	mov	r2, sl
 8002828:	4631      	mov	r1, r6
 800282a:	4628      	mov	r0, r5
 800282c:	47b8      	blx	r7
 800282e:	3001      	adds	r0, #1
 8002830:	f43f aea3 	beq.w	800257a <_printf_float+0xc2>
 8002834:	f108 0801 	add.w	r8, r8, #1
 8002838:	e7ec      	b.n	8002814 <_printf_float+0x35c>
 800283a:	4613      	mov	r3, r2
 800283c:	4631      	mov	r1, r6
 800283e:	4642      	mov	r2, r8
 8002840:	4628      	mov	r0, r5
 8002842:	47b8      	blx	r7
 8002844:	3001      	adds	r0, #1
 8002846:	d1bf      	bne.n	80027c8 <_printf_float+0x310>
 8002848:	e697      	b.n	800257a <_printf_float+0xc2>
 800284a:	2301      	movs	r3, #1
 800284c:	9a06      	ldr	r2, [sp, #24]
 800284e:	4631      	mov	r1, r6
 8002850:	4628      	mov	r0, r5
 8002852:	47b8      	blx	r7
 8002854:	3001      	adds	r0, #1
 8002856:	f43f ae90 	beq.w	800257a <_printf_float+0xc2>
 800285a:	f10b 0b01 	add.w	fp, fp, #1
 800285e:	e7ba      	b.n	80027d6 <_printf_float+0x31e>
 8002860:	9b05      	ldr	r3, [sp, #20]
 8002862:	9a04      	ldr	r2, [sp, #16]
 8002864:	4631      	mov	r1, r6
 8002866:	4628      	mov	r0, r5
 8002868:	47b8      	blx	r7
 800286a:	3001      	adds	r0, #1
 800286c:	d1c0      	bne.n	80027f0 <_printf_float+0x338>
 800286e:	e684      	b.n	800257a <_printf_float+0xc2>
 8002870:	464b      	mov	r3, r9
 8002872:	eb08 020a 	add.w	r2, r8, sl
 8002876:	4631      	mov	r1, r6
 8002878:	4628      	mov	r0, r5
 800287a:	47b8      	blx	r7
 800287c:	3001      	adds	r0, #1
 800287e:	d1c3      	bne.n	8002808 <_printf_float+0x350>
 8002880:	e67b      	b.n	800257a <_printf_float+0xc2>
 8002882:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002884:	2a01      	cmp	r2, #1
 8002886:	dc01      	bgt.n	800288c <_printf_float+0x3d4>
 8002888:	07db      	lsls	r3, r3, #31
 800288a:	d537      	bpl.n	80028fc <_printf_float+0x444>
 800288c:	2301      	movs	r3, #1
 800288e:	4642      	mov	r2, r8
 8002890:	4631      	mov	r1, r6
 8002892:	4628      	mov	r0, r5
 8002894:	47b8      	blx	r7
 8002896:	3001      	adds	r0, #1
 8002898:	f43f ae6f 	beq.w	800257a <_printf_float+0xc2>
 800289c:	9b05      	ldr	r3, [sp, #20]
 800289e:	9a04      	ldr	r2, [sp, #16]
 80028a0:	4631      	mov	r1, r6
 80028a2:	4628      	mov	r0, r5
 80028a4:	47b8      	blx	r7
 80028a6:	3001      	adds	r0, #1
 80028a8:	f43f ae67 	beq.w	800257a <_printf_float+0xc2>
 80028ac:	2200      	movs	r2, #0
 80028ae:	2300      	movs	r3, #0
 80028b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80028b4:	f7fe f8c4 	bl	8000a40 <__aeabi_dcmpeq>
 80028b8:	b158      	cbz	r0, 80028d2 <_printf_float+0x41a>
 80028ba:	f04f 0800 	mov.w	r8, #0
 80028be:	f104 0a1a 	add.w	sl, r4, #26
 80028c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80028c4:	3b01      	subs	r3, #1
 80028c6:	4598      	cmp	r8, r3
 80028c8:	db0d      	blt.n	80028e6 <_printf_float+0x42e>
 80028ca:	464b      	mov	r3, r9
 80028cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80028d0:	e6eb      	b.n	80026aa <_printf_float+0x1f2>
 80028d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80028d4:	f108 0201 	add.w	r2, r8, #1
 80028d8:	3b01      	subs	r3, #1
 80028da:	4631      	mov	r1, r6
 80028dc:	4628      	mov	r0, r5
 80028de:	47b8      	blx	r7
 80028e0:	3001      	adds	r0, #1
 80028e2:	d1f2      	bne.n	80028ca <_printf_float+0x412>
 80028e4:	e649      	b.n	800257a <_printf_float+0xc2>
 80028e6:	2301      	movs	r3, #1
 80028e8:	4652      	mov	r2, sl
 80028ea:	4631      	mov	r1, r6
 80028ec:	4628      	mov	r0, r5
 80028ee:	47b8      	blx	r7
 80028f0:	3001      	adds	r0, #1
 80028f2:	f43f ae42 	beq.w	800257a <_printf_float+0xc2>
 80028f6:	f108 0801 	add.w	r8, r8, #1
 80028fa:	e7e2      	b.n	80028c2 <_printf_float+0x40a>
 80028fc:	2301      	movs	r3, #1
 80028fe:	4642      	mov	r2, r8
 8002900:	e7eb      	b.n	80028da <_printf_float+0x422>
 8002902:	2301      	movs	r3, #1
 8002904:	464a      	mov	r2, r9
 8002906:	4631      	mov	r1, r6
 8002908:	4628      	mov	r0, r5
 800290a:	47b8      	blx	r7
 800290c:	3001      	adds	r0, #1
 800290e:	f43f ae34 	beq.w	800257a <_printf_float+0xc2>
 8002912:	f108 0801 	add.w	r8, r8, #1
 8002916:	e700      	b.n	800271a <_printf_float+0x262>
 8002918:	4642      	mov	r2, r8
 800291a:	464b      	mov	r3, r9
 800291c:	4640      	mov	r0, r8
 800291e:	4649      	mov	r1, r9
 8002920:	f7fe f8c0 	bl	8000aa4 <__aeabi_dcmpun>
 8002924:	2800      	cmp	r0, #0
 8002926:	f43f ae2d 	beq.w	8002584 <_printf_float+0xcc>
 800292a:	4b01      	ldr	r3, [pc, #4]	; (8002930 <_printf_float+0x478>)
 800292c:	4a01      	ldr	r2, [pc, #4]	; (8002934 <_printf_float+0x47c>)
 800292e:	e60e      	b.n	800254e <_printf_float+0x96>
 8002930:	08003e38 	.word	0x08003e38
 8002934:	08003e3c 	.word	0x08003e3c

08002938 <_printf_common>:
 8002938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800293c:	4691      	mov	r9, r2
 800293e:	461f      	mov	r7, r3
 8002940:	688a      	ldr	r2, [r1, #8]
 8002942:	690b      	ldr	r3, [r1, #16]
 8002944:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002948:	4293      	cmp	r3, r2
 800294a:	bfb8      	it	lt
 800294c:	4613      	movlt	r3, r2
 800294e:	f8c9 3000 	str.w	r3, [r9]
 8002952:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002956:	4606      	mov	r6, r0
 8002958:	460c      	mov	r4, r1
 800295a:	b112      	cbz	r2, 8002962 <_printf_common+0x2a>
 800295c:	3301      	adds	r3, #1
 800295e:	f8c9 3000 	str.w	r3, [r9]
 8002962:	6823      	ldr	r3, [r4, #0]
 8002964:	0699      	lsls	r1, r3, #26
 8002966:	bf42      	ittt	mi
 8002968:	f8d9 3000 	ldrmi.w	r3, [r9]
 800296c:	3302      	addmi	r3, #2
 800296e:	f8c9 3000 	strmi.w	r3, [r9]
 8002972:	6825      	ldr	r5, [r4, #0]
 8002974:	f015 0506 	ands.w	r5, r5, #6
 8002978:	d107      	bne.n	800298a <_printf_common+0x52>
 800297a:	f104 0a19 	add.w	sl, r4, #25
 800297e:	68e3      	ldr	r3, [r4, #12]
 8002980:	f8d9 2000 	ldr.w	r2, [r9]
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	429d      	cmp	r5, r3
 8002988:	db29      	blt.n	80029de <_printf_common+0xa6>
 800298a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800298e:	6822      	ldr	r2, [r4, #0]
 8002990:	3300      	adds	r3, #0
 8002992:	bf18      	it	ne
 8002994:	2301      	movne	r3, #1
 8002996:	0692      	lsls	r2, r2, #26
 8002998:	d42e      	bmi.n	80029f8 <_printf_common+0xc0>
 800299a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800299e:	4639      	mov	r1, r7
 80029a0:	4630      	mov	r0, r6
 80029a2:	47c0      	blx	r8
 80029a4:	3001      	adds	r0, #1
 80029a6:	d021      	beq.n	80029ec <_printf_common+0xb4>
 80029a8:	6823      	ldr	r3, [r4, #0]
 80029aa:	68e5      	ldr	r5, [r4, #12]
 80029ac:	f8d9 2000 	ldr.w	r2, [r9]
 80029b0:	f003 0306 	and.w	r3, r3, #6
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	bf08      	it	eq
 80029b8:	1aad      	subeq	r5, r5, r2
 80029ba:	68a3      	ldr	r3, [r4, #8]
 80029bc:	6922      	ldr	r2, [r4, #16]
 80029be:	bf0c      	ite	eq
 80029c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029c4:	2500      	movne	r5, #0
 80029c6:	4293      	cmp	r3, r2
 80029c8:	bfc4      	itt	gt
 80029ca:	1a9b      	subgt	r3, r3, r2
 80029cc:	18ed      	addgt	r5, r5, r3
 80029ce:	f04f 0900 	mov.w	r9, #0
 80029d2:	341a      	adds	r4, #26
 80029d4:	454d      	cmp	r5, r9
 80029d6:	d11b      	bne.n	8002a10 <_printf_common+0xd8>
 80029d8:	2000      	movs	r0, #0
 80029da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029de:	2301      	movs	r3, #1
 80029e0:	4652      	mov	r2, sl
 80029e2:	4639      	mov	r1, r7
 80029e4:	4630      	mov	r0, r6
 80029e6:	47c0      	blx	r8
 80029e8:	3001      	adds	r0, #1
 80029ea:	d103      	bne.n	80029f4 <_printf_common+0xbc>
 80029ec:	f04f 30ff 	mov.w	r0, #4294967295
 80029f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029f4:	3501      	adds	r5, #1
 80029f6:	e7c2      	b.n	800297e <_printf_common+0x46>
 80029f8:	18e1      	adds	r1, r4, r3
 80029fa:	1c5a      	adds	r2, r3, #1
 80029fc:	2030      	movs	r0, #48	; 0x30
 80029fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a02:	4422      	add	r2, r4
 8002a04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a0c:	3302      	adds	r3, #2
 8002a0e:	e7c4      	b.n	800299a <_printf_common+0x62>
 8002a10:	2301      	movs	r3, #1
 8002a12:	4622      	mov	r2, r4
 8002a14:	4639      	mov	r1, r7
 8002a16:	4630      	mov	r0, r6
 8002a18:	47c0      	blx	r8
 8002a1a:	3001      	adds	r0, #1
 8002a1c:	d0e6      	beq.n	80029ec <_printf_common+0xb4>
 8002a1e:	f109 0901 	add.w	r9, r9, #1
 8002a22:	e7d7      	b.n	80029d4 <_printf_common+0x9c>

08002a24 <quorem>:
 8002a24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a28:	6903      	ldr	r3, [r0, #16]
 8002a2a:	690c      	ldr	r4, [r1, #16]
 8002a2c:	429c      	cmp	r4, r3
 8002a2e:	4680      	mov	r8, r0
 8002a30:	f300 8082 	bgt.w	8002b38 <quorem+0x114>
 8002a34:	3c01      	subs	r4, #1
 8002a36:	f101 0714 	add.w	r7, r1, #20
 8002a3a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8002a3e:	f100 0614 	add.w	r6, r0, #20
 8002a42:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8002a46:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002a4a:	eb06 030e 	add.w	r3, r6, lr
 8002a4e:	3501      	adds	r5, #1
 8002a50:	eb07 090e 	add.w	r9, r7, lr
 8002a54:	9301      	str	r3, [sp, #4]
 8002a56:	fbb0 f5f5 	udiv	r5, r0, r5
 8002a5a:	b395      	cbz	r5, 8002ac2 <quorem+0x9e>
 8002a5c:	f04f 0a00 	mov.w	sl, #0
 8002a60:	4638      	mov	r0, r7
 8002a62:	46b4      	mov	ip, r6
 8002a64:	46d3      	mov	fp, sl
 8002a66:	f850 2b04 	ldr.w	r2, [r0], #4
 8002a6a:	b293      	uxth	r3, r2
 8002a6c:	fb05 a303 	mla	r3, r5, r3, sl
 8002a70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	ebab 0303 	sub.w	r3, fp, r3
 8002a7a:	0c12      	lsrs	r2, r2, #16
 8002a7c:	f8bc b000 	ldrh.w	fp, [ip]
 8002a80:	fb05 a202 	mla	r2, r5, r2, sl
 8002a84:	fa13 f38b 	uxtah	r3, r3, fp
 8002a88:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8002a8c:	fa1f fb82 	uxth.w	fp, r2
 8002a90:	f8dc 2000 	ldr.w	r2, [ip]
 8002a94:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8002a98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002aa2:	4581      	cmp	r9, r0
 8002aa4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002aa8:	f84c 3b04 	str.w	r3, [ip], #4
 8002aac:	d2db      	bcs.n	8002a66 <quorem+0x42>
 8002aae:	f856 300e 	ldr.w	r3, [r6, lr]
 8002ab2:	b933      	cbnz	r3, 8002ac2 <quorem+0x9e>
 8002ab4:	9b01      	ldr	r3, [sp, #4]
 8002ab6:	3b04      	subs	r3, #4
 8002ab8:	429e      	cmp	r6, r3
 8002aba:	461a      	mov	r2, r3
 8002abc:	d330      	bcc.n	8002b20 <quorem+0xfc>
 8002abe:	f8c8 4010 	str.w	r4, [r8, #16]
 8002ac2:	4640      	mov	r0, r8
 8002ac4:	f001 f835 	bl	8003b32 <__mcmp>
 8002ac8:	2800      	cmp	r0, #0
 8002aca:	db25      	blt.n	8002b18 <quorem+0xf4>
 8002acc:	3501      	adds	r5, #1
 8002ace:	4630      	mov	r0, r6
 8002ad0:	f04f 0e00 	mov.w	lr, #0
 8002ad4:	f857 2b04 	ldr.w	r2, [r7], #4
 8002ad8:	f8d0 c000 	ldr.w	ip, [r0]
 8002adc:	b293      	uxth	r3, r2
 8002ade:	ebae 0303 	sub.w	r3, lr, r3
 8002ae2:	0c12      	lsrs	r2, r2, #16
 8002ae4:	fa13 f38c 	uxtah	r3, r3, ip
 8002ae8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8002aec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002af6:	45b9      	cmp	r9, r7
 8002af8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8002afc:	f840 3b04 	str.w	r3, [r0], #4
 8002b00:	d2e8      	bcs.n	8002ad4 <quorem+0xb0>
 8002b02:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002b06:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8002b0a:	b92a      	cbnz	r2, 8002b18 <quorem+0xf4>
 8002b0c:	3b04      	subs	r3, #4
 8002b0e:	429e      	cmp	r6, r3
 8002b10:	461a      	mov	r2, r3
 8002b12:	d30b      	bcc.n	8002b2c <quorem+0x108>
 8002b14:	f8c8 4010 	str.w	r4, [r8, #16]
 8002b18:	4628      	mov	r0, r5
 8002b1a:	b003      	add	sp, #12
 8002b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b20:	6812      	ldr	r2, [r2, #0]
 8002b22:	3b04      	subs	r3, #4
 8002b24:	2a00      	cmp	r2, #0
 8002b26:	d1ca      	bne.n	8002abe <quorem+0x9a>
 8002b28:	3c01      	subs	r4, #1
 8002b2a:	e7c5      	b.n	8002ab8 <quorem+0x94>
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	3b04      	subs	r3, #4
 8002b30:	2a00      	cmp	r2, #0
 8002b32:	d1ef      	bne.n	8002b14 <quorem+0xf0>
 8002b34:	3c01      	subs	r4, #1
 8002b36:	e7ea      	b.n	8002b0e <quorem+0xea>
 8002b38:	2000      	movs	r0, #0
 8002b3a:	e7ee      	b.n	8002b1a <quorem+0xf6>
 8002b3c:	0000      	movs	r0, r0
	...

08002b40 <_dtoa_r>:
 8002b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b44:	ec57 6b10 	vmov	r6, r7, d0
 8002b48:	b097      	sub	sp, #92	; 0x5c
 8002b4a:	e9cd 6700 	strd	r6, r7, [sp]
 8002b4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002b50:	9107      	str	r1, [sp, #28]
 8002b52:	4604      	mov	r4, r0
 8002b54:	920a      	str	r2, [sp, #40]	; 0x28
 8002b56:	930f      	str	r3, [sp, #60]	; 0x3c
 8002b58:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8002b5a:	b93e      	cbnz	r6, 8002b6c <_dtoa_r+0x2c>
 8002b5c:	2010      	movs	r0, #16
 8002b5e:	f000 fdcb 	bl	80036f8 <malloc>
 8002b62:	6260      	str	r0, [r4, #36]	; 0x24
 8002b64:	6046      	str	r6, [r0, #4]
 8002b66:	6086      	str	r6, [r0, #8]
 8002b68:	6006      	str	r6, [r0, #0]
 8002b6a:	60c6      	str	r6, [r0, #12]
 8002b6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b6e:	6819      	ldr	r1, [r3, #0]
 8002b70:	b151      	cbz	r1, 8002b88 <_dtoa_r+0x48>
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	604a      	str	r2, [r1, #4]
 8002b76:	2301      	movs	r3, #1
 8002b78:	4093      	lsls	r3, r2
 8002b7a:	608b      	str	r3, [r1, #8]
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	f000 fe02 	bl	8003786 <_Bfree>
 8002b82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	9b01      	ldr	r3, [sp, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	bfbf      	itttt	lt
 8002b8e:	2301      	movlt	r3, #1
 8002b90:	602b      	strlt	r3, [r5, #0]
 8002b92:	9b01      	ldrlt	r3, [sp, #4]
 8002b94:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002b98:	bfb2      	itee	lt
 8002b9a:	9301      	strlt	r3, [sp, #4]
 8002b9c:	2300      	movge	r3, #0
 8002b9e:	602b      	strge	r3, [r5, #0]
 8002ba0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002ba4:	4ba8      	ldr	r3, [pc, #672]	; (8002e48 <_dtoa_r+0x308>)
 8002ba6:	ea33 0308 	bics.w	r3, r3, r8
 8002baa:	d11b      	bne.n	8002be4 <_dtoa_r+0xa4>
 8002bac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002bae:	f242 730f 	movw	r3, #9999	; 0x270f
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	9b00      	ldr	r3, [sp, #0]
 8002bb6:	b923      	cbnz	r3, 8002bc2 <_dtoa_r+0x82>
 8002bb8:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8002bbc:	2800      	cmp	r0, #0
 8002bbe:	f000 8578 	beq.w	80036b2 <_dtoa_r+0xb72>
 8002bc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002bc4:	b953      	cbnz	r3, 8002bdc <_dtoa_r+0x9c>
 8002bc6:	4ba1      	ldr	r3, [pc, #644]	; (8002e4c <_dtoa_r+0x30c>)
 8002bc8:	e021      	b.n	8002c0e <_dtoa_r+0xce>
 8002bca:	4ba1      	ldr	r3, [pc, #644]	; (8002e50 <_dtoa_r+0x310>)
 8002bcc:	9302      	str	r3, [sp, #8]
 8002bce:	3308      	adds	r3, #8
 8002bd0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	9802      	ldr	r0, [sp, #8]
 8002bd6:	b017      	add	sp, #92	; 0x5c
 8002bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bdc:	4b9b      	ldr	r3, [pc, #620]	; (8002e4c <_dtoa_r+0x30c>)
 8002bde:	9302      	str	r3, [sp, #8]
 8002be0:	3303      	adds	r3, #3
 8002be2:	e7f5      	b.n	8002bd0 <_dtoa_r+0x90>
 8002be4:	e9dd 6700 	ldrd	r6, r7, [sp]
 8002be8:	2200      	movs	r2, #0
 8002bea:	2300      	movs	r3, #0
 8002bec:	4630      	mov	r0, r6
 8002bee:	4639      	mov	r1, r7
 8002bf0:	f7fd ff26 	bl	8000a40 <__aeabi_dcmpeq>
 8002bf4:	4681      	mov	r9, r0
 8002bf6:	b160      	cbz	r0, 8002c12 <_dtoa_r+0xd2>
 8002bf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 8553 	beq.w	80036ac <_dtoa_r+0xb6c>
 8002c06:	4b93      	ldr	r3, [pc, #588]	; (8002e54 <_dtoa_r+0x314>)
 8002c08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	9302      	str	r3, [sp, #8]
 8002c10:	e7e0      	b.n	8002bd4 <_dtoa_r+0x94>
 8002c12:	aa14      	add	r2, sp, #80	; 0x50
 8002c14:	a915      	add	r1, sp, #84	; 0x54
 8002c16:	ec47 6b10 	vmov	d0, r6, r7
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	f001 f801 	bl	8003c22 <__d2b>
 8002c20:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8002c24:	4682      	mov	sl, r0
 8002c26:	2d00      	cmp	r5, #0
 8002c28:	d07e      	beq.n	8002d28 <_dtoa_r+0x1e8>
 8002c2a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002c2e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8002c32:	4630      	mov	r0, r6
 8002c34:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8002c38:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002c3c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8002c40:	2200      	movs	r2, #0
 8002c42:	4b85      	ldr	r3, [pc, #532]	; (8002e58 <_dtoa_r+0x318>)
 8002c44:	f7fd fae0 	bl	8000208 <__aeabi_dsub>
 8002c48:	a379      	add	r3, pc, #484	; (adr r3, 8002e30 <_dtoa_r+0x2f0>)
 8002c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4e:	f7fd fc8f 	bl	8000570 <__aeabi_dmul>
 8002c52:	a379      	add	r3, pc, #484	; (adr r3, 8002e38 <_dtoa_r+0x2f8>)
 8002c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c58:	f7fd fad8 	bl	800020c <__adddf3>
 8002c5c:	4606      	mov	r6, r0
 8002c5e:	4628      	mov	r0, r5
 8002c60:	460f      	mov	r7, r1
 8002c62:	f7fd fc1f 	bl	80004a4 <__aeabi_i2d>
 8002c66:	a376      	add	r3, pc, #472	; (adr r3, 8002e40 <_dtoa_r+0x300>)
 8002c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6c:	f7fd fc80 	bl	8000570 <__aeabi_dmul>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4630      	mov	r0, r6
 8002c76:	4639      	mov	r1, r7
 8002c78:	f7fd fac8 	bl	800020c <__adddf3>
 8002c7c:	4606      	mov	r6, r0
 8002c7e:	460f      	mov	r7, r1
 8002c80:	f7fd ff26 	bl	8000ad0 <__aeabi_d2iz>
 8002c84:	2200      	movs	r2, #0
 8002c86:	4683      	mov	fp, r0
 8002c88:	2300      	movs	r3, #0
 8002c8a:	4630      	mov	r0, r6
 8002c8c:	4639      	mov	r1, r7
 8002c8e:	f7fd fee1 	bl	8000a54 <__aeabi_dcmplt>
 8002c92:	b158      	cbz	r0, 8002cac <_dtoa_r+0x16c>
 8002c94:	4658      	mov	r0, fp
 8002c96:	f7fd fc05 	bl	80004a4 <__aeabi_i2d>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4630      	mov	r0, r6
 8002ca0:	4639      	mov	r1, r7
 8002ca2:	f7fd fecd 	bl	8000a40 <__aeabi_dcmpeq>
 8002ca6:	b908      	cbnz	r0, 8002cac <_dtoa_r+0x16c>
 8002ca8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002cac:	f1bb 0f16 	cmp.w	fp, #22
 8002cb0:	d859      	bhi.n	8002d66 <_dtoa_r+0x226>
 8002cb2:	496a      	ldr	r1, [pc, #424]	; (8002e5c <_dtoa_r+0x31c>)
 8002cb4:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8002cb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002cbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cc0:	f7fd fee6 	bl	8000a90 <__aeabi_dcmpgt>
 8002cc4:	2800      	cmp	r0, #0
 8002cc6:	d050      	beq.n	8002d6a <_dtoa_r+0x22a>
 8002cc8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002ccc:	2300      	movs	r3, #0
 8002cce:	930e      	str	r3, [sp, #56]	; 0x38
 8002cd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002cd2:	1b5d      	subs	r5, r3, r5
 8002cd4:	1e6b      	subs	r3, r5, #1
 8002cd6:	9306      	str	r3, [sp, #24]
 8002cd8:	bf45      	ittet	mi
 8002cda:	f1c5 0301 	rsbmi	r3, r5, #1
 8002cde:	9305      	strmi	r3, [sp, #20]
 8002ce0:	2300      	movpl	r3, #0
 8002ce2:	2300      	movmi	r3, #0
 8002ce4:	bf4c      	ite	mi
 8002ce6:	9306      	strmi	r3, [sp, #24]
 8002ce8:	9305      	strpl	r3, [sp, #20]
 8002cea:	f1bb 0f00 	cmp.w	fp, #0
 8002cee:	db3e      	blt.n	8002d6e <_dtoa_r+0x22e>
 8002cf0:	9b06      	ldr	r3, [sp, #24]
 8002cf2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8002cf6:	445b      	add	r3, fp
 8002cf8:	9306      	str	r3, [sp, #24]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	9308      	str	r3, [sp, #32]
 8002cfe:	9b07      	ldr	r3, [sp, #28]
 8002d00:	2b09      	cmp	r3, #9
 8002d02:	f200 80af 	bhi.w	8002e64 <_dtoa_r+0x324>
 8002d06:	2b05      	cmp	r3, #5
 8002d08:	bfc4      	itt	gt
 8002d0a:	3b04      	subgt	r3, #4
 8002d0c:	9307      	strgt	r3, [sp, #28]
 8002d0e:	9b07      	ldr	r3, [sp, #28]
 8002d10:	f1a3 0302 	sub.w	r3, r3, #2
 8002d14:	bfcc      	ite	gt
 8002d16:	2600      	movgt	r6, #0
 8002d18:	2601      	movle	r6, #1
 8002d1a:	2b03      	cmp	r3, #3
 8002d1c:	f200 80ae 	bhi.w	8002e7c <_dtoa_r+0x33c>
 8002d20:	e8df f003 	tbb	[pc, r3]
 8002d24:	772f8482 	.word	0x772f8482
 8002d28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002d2a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8002d2c:	441d      	add	r5, r3
 8002d2e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8002d32:	2b20      	cmp	r3, #32
 8002d34:	dd11      	ble.n	8002d5a <_dtoa_r+0x21a>
 8002d36:	9a00      	ldr	r2, [sp, #0]
 8002d38:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8002d3c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002d40:	fa22 f000 	lsr.w	r0, r2, r0
 8002d44:	fa08 f303 	lsl.w	r3, r8, r3
 8002d48:	4318      	orrs	r0, r3
 8002d4a:	f7fd fb9b 	bl	8000484 <__aeabi_ui2d>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8002d54:	3d01      	subs	r5, #1
 8002d56:	9312      	str	r3, [sp, #72]	; 0x48
 8002d58:	e772      	b.n	8002c40 <_dtoa_r+0x100>
 8002d5a:	f1c3 0020 	rsb	r0, r3, #32
 8002d5e:	9b00      	ldr	r3, [sp, #0]
 8002d60:	fa03 f000 	lsl.w	r0, r3, r0
 8002d64:	e7f1      	b.n	8002d4a <_dtoa_r+0x20a>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e7b1      	b.n	8002cce <_dtoa_r+0x18e>
 8002d6a:	900e      	str	r0, [sp, #56]	; 0x38
 8002d6c:	e7b0      	b.n	8002cd0 <_dtoa_r+0x190>
 8002d6e:	9b05      	ldr	r3, [sp, #20]
 8002d70:	eba3 030b 	sub.w	r3, r3, fp
 8002d74:	9305      	str	r3, [sp, #20]
 8002d76:	f1cb 0300 	rsb	r3, fp, #0
 8002d7a:	9308      	str	r3, [sp, #32]
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d80:	e7bd      	b.n	8002cfe <_dtoa_r+0x1be>
 8002d82:	2301      	movs	r3, #1
 8002d84:	9309      	str	r3, [sp, #36]	; 0x24
 8002d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	dd7a      	ble.n	8002e82 <_dtoa_r+0x342>
 8002d8c:	9304      	str	r3, [sp, #16]
 8002d8e:	9303      	str	r3, [sp, #12]
 8002d90:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002d92:	2200      	movs	r2, #0
 8002d94:	606a      	str	r2, [r5, #4]
 8002d96:	2104      	movs	r1, #4
 8002d98:	f101 0214 	add.w	r2, r1, #20
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d975      	bls.n	8002e8c <_dtoa_r+0x34c>
 8002da0:	6869      	ldr	r1, [r5, #4]
 8002da2:	4620      	mov	r0, r4
 8002da4:	f000 fcbb 	bl	800371e <_Balloc>
 8002da8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002daa:	6028      	str	r0, [r5, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	9302      	str	r3, [sp, #8]
 8002db0:	9b03      	ldr	r3, [sp, #12]
 8002db2:	2b0e      	cmp	r3, #14
 8002db4:	f200 80e5 	bhi.w	8002f82 <_dtoa_r+0x442>
 8002db8:	2e00      	cmp	r6, #0
 8002dba:	f000 80e2 	beq.w	8002f82 <_dtoa_r+0x442>
 8002dbe:	ed9d 7b00 	vldr	d7, [sp]
 8002dc2:	f1bb 0f00 	cmp.w	fp, #0
 8002dc6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002dca:	dd74      	ble.n	8002eb6 <_dtoa_r+0x376>
 8002dcc:	4a23      	ldr	r2, [pc, #140]	; (8002e5c <_dtoa_r+0x31c>)
 8002dce:	f00b 030f 	and.w	r3, fp, #15
 8002dd2:	ea4f 162b 	mov.w	r6, fp, asr #4
 8002dd6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002dda:	06f0      	lsls	r0, r6, #27
 8002ddc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002de0:	d559      	bpl.n	8002e96 <_dtoa_r+0x356>
 8002de2:	4b1f      	ldr	r3, [pc, #124]	; (8002e60 <_dtoa_r+0x320>)
 8002de4:	ec51 0b17 	vmov	r0, r1, d7
 8002de8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002dec:	f7fd fcea 	bl	80007c4 <__aeabi_ddiv>
 8002df0:	e9cd 0100 	strd	r0, r1, [sp]
 8002df4:	f006 060f 	and.w	r6, r6, #15
 8002df8:	2503      	movs	r5, #3
 8002dfa:	4f19      	ldr	r7, [pc, #100]	; (8002e60 <_dtoa_r+0x320>)
 8002dfc:	2e00      	cmp	r6, #0
 8002dfe:	d14c      	bne.n	8002e9a <_dtoa_r+0x35a>
 8002e00:	4642      	mov	r2, r8
 8002e02:	464b      	mov	r3, r9
 8002e04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002e08:	f7fd fcdc 	bl	80007c4 <__aeabi_ddiv>
 8002e0c:	e9cd 0100 	strd	r0, r1, [sp]
 8002e10:	e06a      	b.n	8002ee8 <_dtoa_r+0x3a8>
 8002e12:	2301      	movs	r3, #1
 8002e14:	9309      	str	r3, [sp, #36]	; 0x24
 8002e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e18:	445b      	add	r3, fp
 8002e1a:	9304      	str	r3, [sp, #16]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	9303      	str	r3, [sp, #12]
 8002e22:	bfb8      	it	lt
 8002e24:	2301      	movlt	r3, #1
 8002e26:	e7b3      	b.n	8002d90 <_dtoa_r+0x250>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e7ab      	b.n	8002d84 <_dtoa_r+0x244>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	e7f1      	b.n	8002e14 <_dtoa_r+0x2d4>
 8002e30:	636f4361 	.word	0x636f4361
 8002e34:	3fd287a7 	.word	0x3fd287a7
 8002e38:	8b60c8b3 	.word	0x8b60c8b3
 8002e3c:	3fc68a28 	.word	0x3fc68a28
 8002e40:	509f79fb 	.word	0x509f79fb
 8002e44:	3fd34413 	.word	0x3fd34413
 8002e48:	7ff00000 	.word	0x7ff00000
 8002e4c:	08003e4b 	.word	0x08003e4b
 8002e50:	08003e42 	.word	0x08003e42
 8002e54:	08003e41 	.word	0x08003e41
 8002e58:	3ff80000 	.word	0x3ff80000
 8002e5c:	08003e78 	.word	0x08003e78
 8002e60:	08003e50 	.word	0x08003e50
 8002e64:	2601      	movs	r6, #1
 8002e66:	2300      	movs	r3, #0
 8002e68:	9307      	str	r3, [sp, #28]
 8002e6a:	9609      	str	r6, [sp, #36]	; 0x24
 8002e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e70:	9304      	str	r3, [sp, #16]
 8002e72:	9303      	str	r3, [sp, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	2312      	movs	r3, #18
 8002e78:	920a      	str	r2, [sp, #40]	; 0x28
 8002e7a:	e789      	b.n	8002d90 <_dtoa_r+0x250>
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8002e80:	e7f4      	b.n	8002e6c <_dtoa_r+0x32c>
 8002e82:	2301      	movs	r3, #1
 8002e84:	9304      	str	r3, [sp, #16]
 8002e86:	9303      	str	r3, [sp, #12]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	e7f5      	b.n	8002e78 <_dtoa_r+0x338>
 8002e8c:	686a      	ldr	r2, [r5, #4]
 8002e8e:	3201      	adds	r2, #1
 8002e90:	606a      	str	r2, [r5, #4]
 8002e92:	0049      	lsls	r1, r1, #1
 8002e94:	e780      	b.n	8002d98 <_dtoa_r+0x258>
 8002e96:	2502      	movs	r5, #2
 8002e98:	e7af      	b.n	8002dfa <_dtoa_r+0x2ba>
 8002e9a:	07f1      	lsls	r1, r6, #31
 8002e9c:	d508      	bpl.n	8002eb0 <_dtoa_r+0x370>
 8002e9e:	4640      	mov	r0, r8
 8002ea0:	4649      	mov	r1, r9
 8002ea2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ea6:	f7fd fb63 	bl	8000570 <__aeabi_dmul>
 8002eaa:	3501      	adds	r5, #1
 8002eac:	4680      	mov	r8, r0
 8002eae:	4689      	mov	r9, r1
 8002eb0:	1076      	asrs	r6, r6, #1
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	e7a2      	b.n	8002dfc <_dtoa_r+0x2bc>
 8002eb6:	f000 809d 	beq.w	8002ff4 <_dtoa_r+0x4b4>
 8002eba:	f1cb 0600 	rsb	r6, fp, #0
 8002ebe:	4b9f      	ldr	r3, [pc, #636]	; (800313c <_dtoa_r+0x5fc>)
 8002ec0:	4f9f      	ldr	r7, [pc, #636]	; (8003140 <_dtoa_r+0x600>)
 8002ec2:	f006 020f 	and.w	r2, r6, #15
 8002ec6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ece:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002ed2:	f7fd fb4d 	bl	8000570 <__aeabi_dmul>
 8002ed6:	e9cd 0100 	strd	r0, r1, [sp]
 8002eda:	1136      	asrs	r6, r6, #4
 8002edc:	2300      	movs	r3, #0
 8002ede:	2502      	movs	r5, #2
 8002ee0:	2e00      	cmp	r6, #0
 8002ee2:	d17c      	bne.n	8002fde <_dtoa_r+0x49e>
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d191      	bne.n	8002e0c <_dtoa_r+0x2cc>
 8002ee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 8084 	beq.w	8002ff8 <_dtoa_r+0x4b8>
 8002ef0:	e9dd 8900 	ldrd	r8, r9, [sp]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	4b93      	ldr	r3, [pc, #588]	; (8003144 <_dtoa_r+0x604>)
 8002ef8:	4640      	mov	r0, r8
 8002efa:	4649      	mov	r1, r9
 8002efc:	f7fd fdaa 	bl	8000a54 <__aeabi_dcmplt>
 8002f00:	2800      	cmp	r0, #0
 8002f02:	d079      	beq.n	8002ff8 <_dtoa_r+0x4b8>
 8002f04:	9b03      	ldr	r3, [sp, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d076      	beq.n	8002ff8 <_dtoa_r+0x4b8>
 8002f0a:	9b04      	ldr	r3, [sp, #16]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	dd34      	ble.n	8002f7a <_dtoa_r+0x43a>
 8002f10:	2200      	movs	r2, #0
 8002f12:	4b8d      	ldr	r3, [pc, #564]	; (8003148 <_dtoa_r+0x608>)
 8002f14:	4640      	mov	r0, r8
 8002f16:	4649      	mov	r1, r9
 8002f18:	f7fd fb2a 	bl	8000570 <__aeabi_dmul>
 8002f1c:	e9cd 0100 	strd	r0, r1, [sp]
 8002f20:	9e04      	ldr	r6, [sp, #16]
 8002f22:	f10b 37ff 	add.w	r7, fp, #4294967295
 8002f26:	3501      	adds	r5, #1
 8002f28:	4628      	mov	r0, r5
 8002f2a:	f7fd fabb 	bl	80004a4 <__aeabi_i2d>
 8002f2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002f32:	f7fd fb1d 	bl	8000570 <__aeabi_dmul>
 8002f36:	2200      	movs	r2, #0
 8002f38:	4b84      	ldr	r3, [pc, #528]	; (800314c <_dtoa_r+0x60c>)
 8002f3a:	f7fd f967 	bl	800020c <__adddf3>
 8002f3e:	4680      	mov	r8, r0
 8002f40:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8002f44:	2e00      	cmp	r6, #0
 8002f46:	d15a      	bne.n	8002ffe <_dtoa_r+0x4be>
 8002f48:	2200      	movs	r2, #0
 8002f4a:	4b81      	ldr	r3, [pc, #516]	; (8003150 <_dtoa_r+0x610>)
 8002f4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002f50:	f7fd f95a 	bl	8000208 <__aeabi_dsub>
 8002f54:	4642      	mov	r2, r8
 8002f56:	464b      	mov	r3, r9
 8002f58:	e9cd 0100 	strd	r0, r1, [sp]
 8002f5c:	f7fd fd98 	bl	8000a90 <__aeabi_dcmpgt>
 8002f60:	2800      	cmp	r0, #0
 8002f62:	f040 829b 	bne.w	800349c <_dtoa_r+0x95c>
 8002f66:	4642      	mov	r2, r8
 8002f68:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8002f6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002f70:	f7fd fd70 	bl	8000a54 <__aeabi_dcmplt>
 8002f74:	2800      	cmp	r0, #0
 8002f76:	f040 828f 	bne.w	8003498 <_dtoa_r+0x958>
 8002f7a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8002f7e:	e9cd 2300 	strd	r2, r3, [sp]
 8002f82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f2c0 8150 	blt.w	800322a <_dtoa_r+0x6ea>
 8002f8a:	f1bb 0f0e 	cmp.w	fp, #14
 8002f8e:	f300 814c 	bgt.w	800322a <_dtoa_r+0x6ea>
 8002f92:	4b6a      	ldr	r3, [pc, #424]	; (800313c <_dtoa_r+0x5fc>)
 8002f94:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002f98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f280 80da 	bge.w	8003158 <_dtoa_r+0x618>
 8002fa4:	9b03      	ldr	r3, [sp, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f300 80d6 	bgt.w	8003158 <_dtoa_r+0x618>
 8002fac:	f040 8273 	bne.w	8003496 <_dtoa_r+0x956>
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	4b67      	ldr	r3, [pc, #412]	; (8003150 <_dtoa_r+0x610>)
 8002fb4:	4640      	mov	r0, r8
 8002fb6:	4649      	mov	r1, r9
 8002fb8:	f7fd fada 	bl	8000570 <__aeabi_dmul>
 8002fbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002fc0:	f7fd fd5c 	bl	8000a7c <__aeabi_dcmpge>
 8002fc4:	9e03      	ldr	r6, [sp, #12]
 8002fc6:	4637      	mov	r7, r6
 8002fc8:	2800      	cmp	r0, #0
 8002fca:	f040 824a 	bne.w	8003462 <_dtoa_r+0x922>
 8002fce:	9b02      	ldr	r3, [sp, #8]
 8002fd0:	9a02      	ldr	r2, [sp, #8]
 8002fd2:	1c5d      	adds	r5, r3, #1
 8002fd4:	2331      	movs	r3, #49	; 0x31
 8002fd6:	7013      	strb	r3, [r2, #0]
 8002fd8:	f10b 0b01 	add.w	fp, fp, #1
 8002fdc:	e245      	b.n	800346a <_dtoa_r+0x92a>
 8002fde:	07f2      	lsls	r2, r6, #31
 8002fe0:	d505      	bpl.n	8002fee <_dtoa_r+0x4ae>
 8002fe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fe6:	f7fd fac3 	bl	8000570 <__aeabi_dmul>
 8002fea:	3501      	adds	r5, #1
 8002fec:	2301      	movs	r3, #1
 8002fee:	1076      	asrs	r6, r6, #1
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	e775      	b.n	8002ee0 <_dtoa_r+0x3a0>
 8002ff4:	2502      	movs	r5, #2
 8002ff6:	e777      	b.n	8002ee8 <_dtoa_r+0x3a8>
 8002ff8:	465f      	mov	r7, fp
 8002ffa:	9e03      	ldr	r6, [sp, #12]
 8002ffc:	e794      	b.n	8002f28 <_dtoa_r+0x3e8>
 8002ffe:	9a02      	ldr	r2, [sp, #8]
 8003000:	4b4e      	ldr	r3, [pc, #312]	; (800313c <_dtoa_r+0x5fc>)
 8003002:	4432      	add	r2, r6
 8003004:	9213      	str	r2, [sp, #76]	; 0x4c
 8003006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003008:	1e71      	subs	r1, r6, #1
 800300a:	2a00      	cmp	r2, #0
 800300c:	d048      	beq.n	80030a0 <_dtoa_r+0x560>
 800300e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003016:	2000      	movs	r0, #0
 8003018:	494e      	ldr	r1, [pc, #312]	; (8003154 <_dtoa_r+0x614>)
 800301a:	f7fd fbd3 	bl	80007c4 <__aeabi_ddiv>
 800301e:	4642      	mov	r2, r8
 8003020:	464b      	mov	r3, r9
 8003022:	f7fd f8f1 	bl	8000208 <__aeabi_dsub>
 8003026:	9d02      	ldr	r5, [sp, #8]
 8003028:	4680      	mov	r8, r0
 800302a:	4689      	mov	r9, r1
 800302c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003030:	f7fd fd4e 	bl	8000ad0 <__aeabi_d2iz>
 8003034:	4606      	mov	r6, r0
 8003036:	f7fd fa35 	bl	80004a4 <__aeabi_i2d>
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003042:	f7fd f8e1 	bl	8000208 <__aeabi_dsub>
 8003046:	3630      	adds	r6, #48	; 0x30
 8003048:	f805 6b01 	strb.w	r6, [r5], #1
 800304c:	4642      	mov	r2, r8
 800304e:	464b      	mov	r3, r9
 8003050:	e9cd 0100 	strd	r0, r1, [sp]
 8003054:	f7fd fcfe 	bl	8000a54 <__aeabi_dcmplt>
 8003058:	2800      	cmp	r0, #0
 800305a:	d165      	bne.n	8003128 <_dtoa_r+0x5e8>
 800305c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003060:	2000      	movs	r0, #0
 8003062:	4938      	ldr	r1, [pc, #224]	; (8003144 <_dtoa_r+0x604>)
 8003064:	f7fd f8d0 	bl	8000208 <__aeabi_dsub>
 8003068:	4642      	mov	r2, r8
 800306a:	464b      	mov	r3, r9
 800306c:	f7fd fcf2 	bl	8000a54 <__aeabi_dcmplt>
 8003070:	2800      	cmp	r0, #0
 8003072:	f040 80ba 	bne.w	80031ea <_dtoa_r+0x6aa>
 8003076:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003078:	429d      	cmp	r5, r3
 800307a:	f43f af7e 	beq.w	8002f7a <_dtoa_r+0x43a>
 800307e:	2200      	movs	r2, #0
 8003080:	4b31      	ldr	r3, [pc, #196]	; (8003148 <_dtoa_r+0x608>)
 8003082:	4640      	mov	r0, r8
 8003084:	4649      	mov	r1, r9
 8003086:	f7fd fa73 	bl	8000570 <__aeabi_dmul>
 800308a:	2200      	movs	r2, #0
 800308c:	4680      	mov	r8, r0
 800308e:	4689      	mov	r9, r1
 8003090:	4b2d      	ldr	r3, [pc, #180]	; (8003148 <_dtoa_r+0x608>)
 8003092:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003096:	f7fd fa6b 	bl	8000570 <__aeabi_dmul>
 800309a:	e9cd 0100 	strd	r0, r1, [sp]
 800309e:	e7c5      	b.n	800302c <_dtoa_r+0x4ec>
 80030a0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80030a4:	4642      	mov	r2, r8
 80030a6:	464b      	mov	r3, r9
 80030a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030ac:	f7fd fa60 	bl	8000570 <__aeabi_dmul>
 80030b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80030b4:	9d02      	ldr	r5, [sp, #8]
 80030b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80030ba:	f7fd fd09 	bl	8000ad0 <__aeabi_d2iz>
 80030be:	4606      	mov	r6, r0
 80030c0:	f7fd f9f0 	bl	80004a4 <__aeabi_i2d>
 80030c4:	3630      	adds	r6, #48	; 0x30
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80030ce:	f7fd f89b 	bl	8000208 <__aeabi_dsub>
 80030d2:	f805 6b01 	strb.w	r6, [r5], #1
 80030d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80030d8:	42ab      	cmp	r3, r5
 80030da:	4680      	mov	r8, r0
 80030dc:	4689      	mov	r9, r1
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	d125      	bne.n	8003130 <_dtoa_r+0x5f0>
 80030e4:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <_dtoa_r+0x614>)
 80030e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80030ea:	f7fd f88f 	bl	800020c <__adddf3>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4640      	mov	r0, r8
 80030f4:	4649      	mov	r1, r9
 80030f6:	f7fd fccb 	bl	8000a90 <__aeabi_dcmpgt>
 80030fa:	2800      	cmp	r0, #0
 80030fc:	d175      	bne.n	80031ea <_dtoa_r+0x6aa>
 80030fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003102:	2000      	movs	r0, #0
 8003104:	4913      	ldr	r1, [pc, #76]	; (8003154 <_dtoa_r+0x614>)
 8003106:	f7fd f87f 	bl	8000208 <__aeabi_dsub>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4640      	mov	r0, r8
 8003110:	4649      	mov	r1, r9
 8003112:	f7fd fc9f 	bl	8000a54 <__aeabi_dcmplt>
 8003116:	2800      	cmp	r0, #0
 8003118:	f43f af2f 	beq.w	8002f7a <_dtoa_r+0x43a>
 800311c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003120:	2b30      	cmp	r3, #48	; 0x30
 8003122:	f105 32ff 	add.w	r2, r5, #4294967295
 8003126:	d001      	beq.n	800312c <_dtoa_r+0x5ec>
 8003128:	46bb      	mov	fp, r7
 800312a:	e04d      	b.n	80031c8 <_dtoa_r+0x688>
 800312c:	4615      	mov	r5, r2
 800312e:	e7f5      	b.n	800311c <_dtoa_r+0x5dc>
 8003130:	4b05      	ldr	r3, [pc, #20]	; (8003148 <_dtoa_r+0x608>)
 8003132:	f7fd fa1d 	bl	8000570 <__aeabi_dmul>
 8003136:	e9cd 0100 	strd	r0, r1, [sp]
 800313a:	e7bc      	b.n	80030b6 <_dtoa_r+0x576>
 800313c:	08003e78 	.word	0x08003e78
 8003140:	08003e50 	.word	0x08003e50
 8003144:	3ff00000 	.word	0x3ff00000
 8003148:	40240000 	.word	0x40240000
 800314c:	401c0000 	.word	0x401c0000
 8003150:	40140000 	.word	0x40140000
 8003154:	3fe00000 	.word	0x3fe00000
 8003158:	e9dd 6700 	ldrd	r6, r7, [sp]
 800315c:	9d02      	ldr	r5, [sp, #8]
 800315e:	4642      	mov	r2, r8
 8003160:	464b      	mov	r3, r9
 8003162:	4630      	mov	r0, r6
 8003164:	4639      	mov	r1, r7
 8003166:	f7fd fb2d 	bl	80007c4 <__aeabi_ddiv>
 800316a:	f7fd fcb1 	bl	8000ad0 <__aeabi_d2iz>
 800316e:	9000      	str	r0, [sp, #0]
 8003170:	f7fd f998 	bl	80004a4 <__aeabi_i2d>
 8003174:	4642      	mov	r2, r8
 8003176:	464b      	mov	r3, r9
 8003178:	f7fd f9fa 	bl	8000570 <__aeabi_dmul>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4630      	mov	r0, r6
 8003182:	4639      	mov	r1, r7
 8003184:	f7fd f840 	bl	8000208 <__aeabi_dsub>
 8003188:	9e00      	ldr	r6, [sp, #0]
 800318a:	9f03      	ldr	r7, [sp, #12]
 800318c:	3630      	adds	r6, #48	; 0x30
 800318e:	f805 6b01 	strb.w	r6, [r5], #1
 8003192:	9e02      	ldr	r6, [sp, #8]
 8003194:	1bae      	subs	r6, r5, r6
 8003196:	42b7      	cmp	r7, r6
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	d138      	bne.n	8003210 <_dtoa_r+0x6d0>
 800319e:	f7fd f835 	bl	800020c <__adddf3>
 80031a2:	4606      	mov	r6, r0
 80031a4:	460f      	mov	r7, r1
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4640      	mov	r0, r8
 80031ac:	4649      	mov	r1, r9
 80031ae:	f7fd fc51 	bl	8000a54 <__aeabi_dcmplt>
 80031b2:	b9c8      	cbnz	r0, 80031e8 <_dtoa_r+0x6a8>
 80031b4:	4632      	mov	r2, r6
 80031b6:	463b      	mov	r3, r7
 80031b8:	4640      	mov	r0, r8
 80031ba:	4649      	mov	r1, r9
 80031bc:	f7fd fc40 	bl	8000a40 <__aeabi_dcmpeq>
 80031c0:	b110      	cbz	r0, 80031c8 <_dtoa_r+0x688>
 80031c2:	9b00      	ldr	r3, [sp, #0]
 80031c4:	07db      	lsls	r3, r3, #31
 80031c6:	d40f      	bmi.n	80031e8 <_dtoa_r+0x6a8>
 80031c8:	4651      	mov	r1, sl
 80031ca:	4620      	mov	r0, r4
 80031cc:	f000 fadb 	bl	8003786 <_Bfree>
 80031d0:	2300      	movs	r3, #0
 80031d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80031d4:	702b      	strb	r3, [r5, #0]
 80031d6:	f10b 0301 	add.w	r3, fp, #1
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f43f acf8 	beq.w	8002bd4 <_dtoa_r+0x94>
 80031e4:	601d      	str	r5, [r3, #0]
 80031e6:	e4f5      	b.n	8002bd4 <_dtoa_r+0x94>
 80031e8:	465f      	mov	r7, fp
 80031ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80031ee:	2a39      	cmp	r2, #57	; 0x39
 80031f0:	f105 33ff 	add.w	r3, r5, #4294967295
 80031f4:	d106      	bne.n	8003204 <_dtoa_r+0x6c4>
 80031f6:	9a02      	ldr	r2, [sp, #8]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d107      	bne.n	800320c <_dtoa_r+0x6cc>
 80031fc:	2330      	movs	r3, #48	; 0x30
 80031fe:	7013      	strb	r3, [r2, #0]
 8003200:	3701      	adds	r7, #1
 8003202:	4613      	mov	r3, r2
 8003204:	781a      	ldrb	r2, [r3, #0]
 8003206:	3201      	adds	r2, #1
 8003208:	701a      	strb	r2, [r3, #0]
 800320a:	e78d      	b.n	8003128 <_dtoa_r+0x5e8>
 800320c:	461d      	mov	r5, r3
 800320e:	e7ec      	b.n	80031ea <_dtoa_r+0x6aa>
 8003210:	2200      	movs	r2, #0
 8003212:	4ba4      	ldr	r3, [pc, #656]	; (80034a4 <_dtoa_r+0x964>)
 8003214:	f7fd f9ac 	bl	8000570 <__aeabi_dmul>
 8003218:	2200      	movs	r2, #0
 800321a:	2300      	movs	r3, #0
 800321c:	4606      	mov	r6, r0
 800321e:	460f      	mov	r7, r1
 8003220:	f7fd fc0e 	bl	8000a40 <__aeabi_dcmpeq>
 8003224:	2800      	cmp	r0, #0
 8003226:	d09a      	beq.n	800315e <_dtoa_r+0x61e>
 8003228:	e7ce      	b.n	80031c8 <_dtoa_r+0x688>
 800322a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800322c:	2a00      	cmp	r2, #0
 800322e:	f000 80cd 	beq.w	80033cc <_dtoa_r+0x88c>
 8003232:	9a07      	ldr	r2, [sp, #28]
 8003234:	2a01      	cmp	r2, #1
 8003236:	f300 80af 	bgt.w	8003398 <_dtoa_r+0x858>
 800323a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800323c:	2a00      	cmp	r2, #0
 800323e:	f000 80a7 	beq.w	8003390 <_dtoa_r+0x850>
 8003242:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003246:	9e08      	ldr	r6, [sp, #32]
 8003248:	9d05      	ldr	r5, [sp, #20]
 800324a:	9a05      	ldr	r2, [sp, #20]
 800324c:	441a      	add	r2, r3
 800324e:	9205      	str	r2, [sp, #20]
 8003250:	9a06      	ldr	r2, [sp, #24]
 8003252:	2101      	movs	r1, #1
 8003254:	441a      	add	r2, r3
 8003256:	4620      	mov	r0, r4
 8003258:	9206      	str	r2, [sp, #24]
 800325a:	f000 fb34 	bl	80038c6 <__i2b>
 800325e:	4607      	mov	r7, r0
 8003260:	2d00      	cmp	r5, #0
 8003262:	dd0c      	ble.n	800327e <_dtoa_r+0x73e>
 8003264:	9b06      	ldr	r3, [sp, #24]
 8003266:	2b00      	cmp	r3, #0
 8003268:	dd09      	ble.n	800327e <_dtoa_r+0x73e>
 800326a:	42ab      	cmp	r3, r5
 800326c:	9a05      	ldr	r2, [sp, #20]
 800326e:	bfa8      	it	ge
 8003270:	462b      	movge	r3, r5
 8003272:	1ad2      	subs	r2, r2, r3
 8003274:	9205      	str	r2, [sp, #20]
 8003276:	9a06      	ldr	r2, [sp, #24]
 8003278:	1aed      	subs	r5, r5, r3
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	9306      	str	r3, [sp, #24]
 800327e:	9b08      	ldr	r3, [sp, #32]
 8003280:	b1f3      	cbz	r3, 80032c0 <_dtoa_r+0x780>
 8003282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 80a5 	beq.w	80033d4 <_dtoa_r+0x894>
 800328a:	2e00      	cmp	r6, #0
 800328c:	dd10      	ble.n	80032b0 <_dtoa_r+0x770>
 800328e:	4639      	mov	r1, r7
 8003290:	4632      	mov	r2, r6
 8003292:	4620      	mov	r0, r4
 8003294:	f000 fbae 	bl	80039f4 <__pow5mult>
 8003298:	4652      	mov	r2, sl
 800329a:	4601      	mov	r1, r0
 800329c:	4607      	mov	r7, r0
 800329e:	4620      	mov	r0, r4
 80032a0:	f000 fb1a 	bl	80038d8 <__multiply>
 80032a4:	4651      	mov	r1, sl
 80032a6:	4680      	mov	r8, r0
 80032a8:	4620      	mov	r0, r4
 80032aa:	f000 fa6c 	bl	8003786 <_Bfree>
 80032ae:	46c2      	mov	sl, r8
 80032b0:	9b08      	ldr	r3, [sp, #32]
 80032b2:	1b9a      	subs	r2, r3, r6
 80032b4:	d004      	beq.n	80032c0 <_dtoa_r+0x780>
 80032b6:	4651      	mov	r1, sl
 80032b8:	4620      	mov	r0, r4
 80032ba:	f000 fb9b 	bl	80039f4 <__pow5mult>
 80032be:	4682      	mov	sl, r0
 80032c0:	2101      	movs	r1, #1
 80032c2:	4620      	mov	r0, r4
 80032c4:	f000 faff 	bl	80038c6 <__i2b>
 80032c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	4606      	mov	r6, r0
 80032ce:	f340 8083 	ble.w	80033d8 <_dtoa_r+0x898>
 80032d2:	461a      	mov	r2, r3
 80032d4:	4601      	mov	r1, r0
 80032d6:	4620      	mov	r0, r4
 80032d8:	f000 fb8c 	bl	80039f4 <__pow5mult>
 80032dc:	9b07      	ldr	r3, [sp, #28]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	4606      	mov	r6, r0
 80032e2:	dd7c      	ble.n	80033de <_dtoa_r+0x89e>
 80032e4:	f04f 0800 	mov.w	r8, #0
 80032e8:	6933      	ldr	r3, [r6, #16]
 80032ea:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80032ee:	6918      	ldr	r0, [r3, #16]
 80032f0:	f000 fa9b 	bl	800382a <__hi0bits>
 80032f4:	f1c0 0020 	rsb	r0, r0, #32
 80032f8:	9b06      	ldr	r3, [sp, #24]
 80032fa:	4418      	add	r0, r3
 80032fc:	f010 001f 	ands.w	r0, r0, #31
 8003300:	f000 8096 	beq.w	8003430 <_dtoa_r+0x8f0>
 8003304:	f1c0 0320 	rsb	r3, r0, #32
 8003308:	2b04      	cmp	r3, #4
 800330a:	f340 8087 	ble.w	800341c <_dtoa_r+0x8dc>
 800330e:	9b05      	ldr	r3, [sp, #20]
 8003310:	f1c0 001c 	rsb	r0, r0, #28
 8003314:	4403      	add	r3, r0
 8003316:	9305      	str	r3, [sp, #20]
 8003318:	9b06      	ldr	r3, [sp, #24]
 800331a:	4405      	add	r5, r0
 800331c:	4403      	add	r3, r0
 800331e:	9306      	str	r3, [sp, #24]
 8003320:	9b05      	ldr	r3, [sp, #20]
 8003322:	2b00      	cmp	r3, #0
 8003324:	dd05      	ble.n	8003332 <_dtoa_r+0x7f2>
 8003326:	4651      	mov	r1, sl
 8003328:	461a      	mov	r2, r3
 800332a:	4620      	mov	r0, r4
 800332c:	f000 fbb0 	bl	8003a90 <__lshift>
 8003330:	4682      	mov	sl, r0
 8003332:	9b06      	ldr	r3, [sp, #24]
 8003334:	2b00      	cmp	r3, #0
 8003336:	dd05      	ble.n	8003344 <_dtoa_r+0x804>
 8003338:	4631      	mov	r1, r6
 800333a:	461a      	mov	r2, r3
 800333c:	4620      	mov	r0, r4
 800333e:	f000 fba7 	bl	8003a90 <__lshift>
 8003342:	4606      	mov	r6, r0
 8003344:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003346:	2b00      	cmp	r3, #0
 8003348:	d074      	beq.n	8003434 <_dtoa_r+0x8f4>
 800334a:	4631      	mov	r1, r6
 800334c:	4650      	mov	r0, sl
 800334e:	f000 fbf0 	bl	8003b32 <__mcmp>
 8003352:	2800      	cmp	r0, #0
 8003354:	da6e      	bge.n	8003434 <_dtoa_r+0x8f4>
 8003356:	2300      	movs	r3, #0
 8003358:	4651      	mov	r1, sl
 800335a:	220a      	movs	r2, #10
 800335c:	4620      	mov	r0, r4
 800335e:	f000 fa29 	bl	80037b4 <__multadd>
 8003362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003364:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003368:	4682      	mov	sl, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	f000 81a8 	beq.w	80036c0 <_dtoa_r+0xb80>
 8003370:	2300      	movs	r3, #0
 8003372:	4639      	mov	r1, r7
 8003374:	220a      	movs	r2, #10
 8003376:	4620      	mov	r0, r4
 8003378:	f000 fa1c 	bl	80037b4 <__multadd>
 800337c:	9b04      	ldr	r3, [sp, #16]
 800337e:	2b00      	cmp	r3, #0
 8003380:	4607      	mov	r7, r0
 8003382:	f300 80c8 	bgt.w	8003516 <_dtoa_r+0x9d6>
 8003386:	9b07      	ldr	r3, [sp, #28]
 8003388:	2b02      	cmp	r3, #2
 800338a:	f340 80c4 	ble.w	8003516 <_dtoa_r+0x9d6>
 800338e:	e059      	b.n	8003444 <_dtoa_r+0x904>
 8003390:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003392:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003396:	e756      	b.n	8003246 <_dtoa_r+0x706>
 8003398:	9b03      	ldr	r3, [sp, #12]
 800339a:	1e5e      	subs	r6, r3, #1
 800339c:	9b08      	ldr	r3, [sp, #32]
 800339e:	42b3      	cmp	r3, r6
 80033a0:	bfbf      	itttt	lt
 80033a2:	9b08      	ldrlt	r3, [sp, #32]
 80033a4:	9608      	strlt	r6, [sp, #32]
 80033a6:	1af2      	sublt	r2, r6, r3
 80033a8:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80033aa:	bfb6      	itet	lt
 80033ac:	189b      	addlt	r3, r3, r2
 80033ae:	1b9e      	subge	r6, r3, r6
 80033b0:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80033b2:	9b03      	ldr	r3, [sp, #12]
 80033b4:	bfb8      	it	lt
 80033b6:	2600      	movlt	r6, #0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	bfb9      	ittee	lt
 80033bc:	9b05      	ldrlt	r3, [sp, #20]
 80033be:	9a03      	ldrlt	r2, [sp, #12]
 80033c0:	9d05      	ldrge	r5, [sp, #20]
 80033c2:	9b03      	ldrge	r3, [sp, #12]
 80033c4:	bfbc      	itt	lt
 80033c6:	1a9d      	sublt	r5, r3, r2
 80033c8:	2300      	movlt	r3, #0
 80033ca:	e73e      	b.n	800324a <_dtoa_r+0x70a>
 80033cc:	9e08      	ldr	r6, [sp, #32]
 80033ce:	9d05      	ldr	r5, [sp, #20]
 80033d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80033d2:	e745      	b.n	8003260 <_dtoa_r+0x720>
 80033d4:	9a08      	ldr	r2, [sp, #32]
 80033d6:	e76e      	b.n	80032b6 <_dtoa_r+0x776>
 80033d8:	9b07      	ldr	r3, [sp, #28]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	dc19      	bgt.n	8003412 <_dtoa_r+0x8d2>
 80033de:	9b00      	ldr	r3, [sp, #0]
 80033e0:	b9bb      	cbnz	r3, 8003412 <_dtoa_r+0x8d2>
 80033e2:	9b01      	ldr	r3, [sp, #4]
 80033e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033e8:	b99b      	cbnz	r3, 8003412 <_dtoa_r+0x8d2>
 80033ea:	9b01      	ldr	r3, [sp, #4]
 80033ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033f0:	0d1b      	lsrs	r3, r3, #20
 80033f2:	051b      	lsls	r3, r3, #20
 80033f4:	b183      	cbz	r3, 8003418 <_dtoa_r+0x8d8>
 80033f6:	9b05      	ldr	r3, [sp, #20]
 80033f8:	3301      	adds	r3, #1
 80033fa:	9305      	str	r3, [sp, #20]
 80033fc:	9b06      	ldr	r3, [sp, #24]
 80033fe:	3301      	adds	r3, #1
 8003400:	9306      	str	r3, [sp, #24]
 8003402:	f04f 0801 	mov.w	r8, #1
 8003406:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003408:	2b00      	cmp	r3, #0
 800340a:	f47f af6d 	bne.w	80032e8 <_dtoa_r+0x7a8>
 800340e:	2001      	movs	r0, #1
 8003410:	e772      	b.n	80032f8 <_dtoa_r+0x7b8>
 8003412:	f04f 0800 	mov.w	r8, #0
 8003416:	e7f6      	b.n	8003406 <_dtoa_r+0x8c6>
 8003418:	4698      	mov	r8, r3
 800341a:	e7f4      	b.n	8003406 <_dtoa_r+0x8c6>
 800341c:	d080      	beq.n	8003320 <_dtoa_r+0x7e0>
 800341e:	9a05      	ldr	r2, [sp, #20]
 8003420:	331c      	adds	r3, #28
 8003422:	441a      	add	r2, r3
 8003424:	9205      	str	r2, [sp, #20]
 8003426:	9a06      	ldr	r2, [sp, #24]
 8003428:	441a      	add	r2, r3
 800342a:	441d      	add	r5, r3
 800342c:	4613      	mov	r3, r2
 800342e:	e776      	b.n	800331e <_dtoa_r+0x7de>
 8003430:	4603      	mov	r3, r0
 8003432:	e7f4      	b.n	800341e <_dtoa_r+0x8de>
 8003434:	9b03      	ldr	r3, [sp, #12]
 8003436:	2b00      	cmp	r3, #0
 8003438:	dc36      	bgt.n	80034a8 <_dtoa_r+0x968>
 800343a:	9b07      	ldr	r3, [sp, #28]
 800343c:	2b02      	cmp	r3, #2
 800343e:	dd33      	ble.n	80034a8 <_dtoa_r+0x968>
 8003440:	9b03      	ldr	r3, [sp, #12]
 8003442:	9304      	str	r3, [sp, #16]
 8003444:	9b04      	ldr	r3, [sp, #16]
 8003446:	b963      	cbnz	r3, 8003462 <_dtoa_r+0x922>
 8003448:	4631      	mov	r1, r6
 800344a:	2205      	movs	r2, #5
 800344c:	4620      	mov	r0, r4
 800344e:	f000 f9b1 	bl	80037b4 <__multadd>
 8003452:	4601      	mov	r1, r0
 8003454:	4606      	mov	r6, r0
 8003456:	4650      	mov	r0, sl
 8003458:	f000 fb6b 	bl	8003b32 <__mcmp>
 800345c:	2800      	cmp	r0, #0
 800345e:	f73f adb6 	bgt.w	8002fce <_dtoa_r+0x48e>
 8003462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003464:	9d02      	ldr	r5, [sp, #8]
 8003466:	ea6f 0b03 	mvn.w	fp, r3
 800346a:	2300      	movs	r3, #0
 800346c:	9303      	str	r3, [sp, #12]
 800346e:	4631      	mov	r1, r6
 8003470:	4620      	mov	r0, r4
 8003472:	f000 f988 	bl	8003786 <_Bfree>
 8003476:	2f00      	cmp	r7, #0
 8003478:	f43f aea6 	beq.w	80031c8 <_dtoa_r+0x688>
 800347c:	9b03      	ldr	r3, [sp, #12]
 800347e:	b12b      	cbz	r3, 800348c <_dtoa_r+0x94c>
 8003480:	42bb      	cmp	r3, r7
 8003482:	d003      	beq.n	800348c <_dtoa_r+0x94c>
 8003484:	4619      	mov	r1, r3
 8003486:	4620      	mov	r0, r4
 8003488:	f000 f97d 	bl	8003786 <_Bfree>
 800348c:	4639      	mov	r1, r7
 800348e:	4620      	mov	r0, r4
 8003490:	f000 f979 	bl	8003786 <_Bfree>
 8003494:	e698      	b.n	80031c8 <_dtoa_r+0x688>
 8003496:	2600      	movs	r6, #0
 8003498:	4637      	mov	r7, r6
 800349a:	e7e2      	b.n	8003462 <_dtoa_r+0x922>
 800349c:	46bb      	mov	fp, r7
 800349e:	4637      	mov	r7, r6
 80034a0:	e595      	b.n	8002fce <_dtoa_r+0x48e>
 80034a2:	bf00      	nop
 80034a4:	40240000 	.word	0x40240000
 80034a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034aa:	bb93      	cbnz	r3, 8003512 <_dtoa_r+0x9d2>
 80034ac:	9b03      	ldr	r3, [sp, #12]
 80034ae:	9304      	str	r3, [sp, #16]
 80034b0:	9d02      	ldr	r5, [sp, #8]
 80034b2:	4631      	mov	r1, r6
 80034b4:	4650      	mov	r0, sl
 80034b6:	f7ff fab5 	bl	8002a24 <quorem>
 80034ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80034be:	f805 9b01 	strb.w	r9, [r5], #1
 80034c2:	9b02      	ldr	r3, [sp, #8]
 80034c4:	9a04      	ldr	r2, [sp, #16]
 80034c6:	1aeb      	subs	r3, r5, r3
 80034c8:	429a      	cmp	r2, r3
 80034ca:	f300 80dc 	bgt.w	8003686 <_dtoa_r+0xb46>
 80034ce:	9b02      	ldr	r3, [sp, #8]
 80034d0:	2a01      	cmp	r2, #1
 80034d2:	bfac      	ite	ge
 80034d4:	189b      	addge	r3, r3, r2
 80034d6:	3301      	addlt	r3, #1
 80034d8:	4698      	mov	r8, r3
 80034da:	2300      	movs	r3, #0
 80034dc:	9303      	str	r3, [sp, #12]
 80034de:	4651      	mov	r1, sl
 80034e0:	2201      	movs	r2, #1
 80034e2:	4620      	mov	r0, r4
 80034e4:	f000 fad4 	bl	8003a90 <__lshift>
 80034e8:	4631      	mov	r1, r6
 80034ea:	4682      	mov	sl, r0
 80034ec:	f000 fb21 	bl	8003b32 <__mcmp>
 80034f0:	2800      	cmp	r0, #0
 80034f2:	f300 808d 	bgt.w	8003610 <_dtoa_r+0xad0>
 80034f6:	d103      	bne.n	8003500 <_dtoa_r+0x9c0>
 80034f8:	f019 0f01 	tst.w	r9, #1
 80034fc:	f040 8088 	bne.w	8003610 <_dtoa_r+0xad0>
 8003500:	4645      	mov	r5, r8
 8003502:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003506:	2b30      	cmp	r3, #48	; 0x30
 8003508:	f105 32ff 	add.w	r2, r5, #4294967295
 800350c:	d1af      	bne.n	800346e <_dtoa_r+0x92e>
 800350e:	4615      	mov	r5, r2
 8003510:	e7f7      	b.n	8003502 <_dtoa_r+0x9c2>
 8003512:	9b03      	ldr	r3, [sp, #12]
 8003514:	9304      	str	r3, [sp, #16]
 8003516:	2d00      	cmp	r5, #0
 8003518:	dd05      	ble.n	8003526 <_dtoa_r+0x9e6>
 800351a:	4639      	mov	r1, r7
 800351c:	462a      	mov	r2, r5
 800351e:	4620      	mov	r0, r4
 8003520:	f000 fab6 	bl	8003a90 <__lshift>
 8003524:	4607      	mov	r7, r0
 8003526:	f1b8 0f00 	cmp.w	r8, #0
 800352a:	d04c      	beq.n	80035c6 <_dtoa_r+0xa86>
 800352c:	6879      	ldr	r1, [r7, #4]
 800352e:	4620      	mov	r0, r4
 8003530:	f000 f8f5 	bl	800371e <_Balloc>
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	3202      	adds	r2, #2
 8003538:	4605      	mov	r5, r0
 800353a:	0092      	lsls	r2, r2, #2
 800353c:	f107 010c 	add.w	r1, r7, #12
 8003540:	300c      	adds	r0, #12
 8003542:	f000 f8e1 	bl	8003708 <memcpy>
 8003546:	2201      	movs	r2, #1
 8003548:	4629      	mov	r1, r5
 800354a:	4620      	mov	r0, r4
 800354c:	f000 faa0 	bl	8003a90 <__lshift>
 8003550:	9b00      	ldr	r3, [sp, #0]
 8003552:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003556:	9703      	str	r7, [sp, #12]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	4607      	mov	r7, r0
 800355e:	9305      	str	r3, [sp, #20]
 8003560:	4631      	mov	r1, r6
 8003562:	4650      	mov	r0, sl
 8003564:	f7ff fa5e 	bl	8002a24 <quorem>
 8003568:	9903      	ldr	r1, [sp, #12]
 800356a:	4605      	mov	r5, r0
 800356c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003570:	4650      	mov	r0, sl
 8003572:	f000 fade 	bl	8003b32 <__mcmp>
 8003576:	463a      	mov	r2, r7
 8003578:	9000      	str	r0, [sp, #0]
 800357a:	4631      	mov	r1, r6
 800357c:	4620      	mov	r0, r4
 800357e:	f000 faf2 	bl	8003b66 <__mdiff>
 8003582:	68c3      	ldr	r3, [r0, #12]
 8003584:	4602      	mov	r2, r0
 8003586:	bb03      	cbnz	r3, 80035ca <_dtoa_r+0xa8a>
 8003588:	4601      	mov	r1, r0
 800358a:	9006      	str	r0, [sp, #24]
 800358c:	4650      	mov	r0, sl
 800358e:	f000 fad0 	bl	8003b32 <__mcmp>
 8003592:	9a06      	ldr	r2, [sp, #24]
 8003594:	4603      	mov	r3, r0
 8003596:	4611      	mov	r1, r2
 8003598:	4620      	mov	r0, r4
 800359a:	9306      	str	r3, [sp, #24]
 800359c:	f000 f8f3 	bl	8003786 <_Bfree>
 80035a0:	9b06      	ldr	r3, [sp, #24]
 80035a2:	b9a3      	cbnz	r3, 80035ce <_dtoa_r+0xa8e>
 80035a4:	9a07      	ldr	r2, [sp, #28]
 80035a6:	b992      	cbnz	r2, 80035ce <_dtoa_r+0xa8e>
 80035a8:	9a05      	ldr	r2, [sp, #20]
 80035aa:	b982      	cbnz	r2, 80035ce <_dtoa_r+0xa8e>
 80035ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80035b0:	d029      	beq.n	8003606 <_dtoa_r+0xac6>
 80035b2:	9b00      	ldr	r3, [sp, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	dd01      	ble.n	80035bc <_dtoa_r+0xa7c>
 80035b8:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80035bc:	f108 0501 	add.w	r5, r8, #1
 80035c0:	f888 9000 	strb.w	r9, [r8]
 80035c4:	e753      	b.n	800346e <_dtoa_r+0x92e>
 80035c6:	4638      	mov	r0, r7
 80035c8:	e7c2      	b.n	8003550 <_dtoa_r+0xa10>
 80035ca:	2301      	movs	r3, #1
 80035cc:	e7e3      	b.n	8003596 <_dtoa_r+0xa56>
 80035ce:	9a00      	ldr	r2, [sp, #0]
 80035d0:	2a00      	cmp	r2, #0
 80035d2:	db04      	blt.n	80035de <_dtoa_r+0xa9e>
 80035d4:	d125      	bne.n	8003622 <_dtoa_r+0xae2>
 80035d6:	9a07      	ldr	r2, [sp, #28]
 80035d8:	bb1a      	cbnz	r2, 8003622 <_dtoa_r+0xae2>
 80035da:	9a05      	ldr	r2, [sp, #20]
 80035dc:	bb0a      	cbnz	r2, 8003622 <_dtoa_r+0xae2>
 80035de:	2b00      	cmp	r3, #0
 80035e0:	ddec      	ble.n	80035bc <_dtoa_r+0xa7c>
 80035e2:	4651      	mov	r1, sl
 80035e4:	2201      	movs	r2, #1
 80035e6:	4620      	mov	r0, r4
 80035e8:	f000 fa52 	bl	8003a90 <__lshift>
 80035ec:	4631      	mov	r1, r6
 80035ee:	4682      	mov	sl, r0
 80035f0:	f000 fa9f 	bl	8003b32 <__mcmp>
 80035f4:	2800      	cmp	r0, #0
 80035f6:	dc03      	bgt.n	8003600 <_dtoa_r+0xac0>
 80035f8:	d1e0      	bne.n	80035bc <_dtoa_r+0xa7c>
 80035fa:	f019 0f01 	tst.w	r9, #1
 80035fe:	d0dd      	beq.n	80035bc <_dtoa_r+0xa7c>
 8003600:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003604:	d1d8      	bne.n	80035b8 <_dtoa_r+0xa78>
 8003606:	2339      	movs	r3, #57	; 0x39
 8003608:	f888 3000 	strb.w	r3, [r8]
 800360c:	f108 0801 	add.w	r8, r8, #1
 8003610:	4645      	mov	r5, r8
 8003612:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003616:	2b39      	cmp	r3, #57	; 0x39
 8003618:	f105 32ff 	add.w	r2, r5, #4294967295
 800361c:	d03b      	beq.n	8003696 <_dtoa_r+0xb56>
 800361e:	3301      	adds	r3, #1
 8003620:	e040      	b.n	80036a4 <_dtoa_r+0xb64>
 8003622:	2b00      	cmp	r3, #0
 8003624:	f108 0501 	add.w	r5, r8, #1
 8003628:	dd05      	ble.n	8003636 <_dtoa_r+0xaf6>
 800362a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800362e:	d0ea      	beq.n	8003606 <_dtoa_r+0xac6>
 8003630:	f109 0901 	add.w	r9, r9, #1
 8003634:	e7c4      	b.n	80035c0 <_dtoa_r+0xa80>
 8003636:	9b02      	ldr	r3, [sp, #8]
 8003638:	9a04      	ldr	r2, [sp, #16]
 800363a:	f805 9c01 	strb.w	r9, [r5, #-1]
 800363e:	1aeb      	subs	r3, r5, r3
 8003640:	4293      	cmp	r3, r2
 8003642:	46a8      	mov	r8, r5
 8003644:	f43f af4b 	beq.w	80034de <_dtoa_r+0x99e>
 8003648:	4651      	mov	r1, sl
 800364a:	2300      	movs	r3, #0
 800364c:	220a      	movs	r2, #10
 800364e:	4620      	mov	r0, r4
 8003650:	f000 f8b0 	bl	80037b4 <__multadd>
 8003654:	9b03      	ldr	r3, [sp, #12]
 8003656:	9903      	ldr	r1, [sp, #12]
 8003658:	42bb      	cmp	r3, r7
 800365a:	4682      	mov	sl, r0
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	f04f 020a 	mov.w	r2, #10
 8003664:	4620      	mov	r0, r4
 8003666:	d104      	bne.n	8003672 <_dtoa_r+0xb32>
 8003668:	f000 f8a4 	bl	80037b4 <__multadd>
 800366c:	9003      	str	r0, [sp, #12]
 800366e:	4607      	mov	r7, r0
 8003670:	e776      	b.n	8003560 <_dtoa_r+0xa20>
 8003672:	f000 f89f 	bl	80037b4 <__multadd>
 8003676:	2300      	movs	r3, #0
 8003678:	9003      	str	r0, [sp, #12]
 800367a:	220a      	movs	r2, #10
 800367c:	4639      	mov	r1, r7
 800367e:	4620      	mov	r0, r4
 8003680:	f000 f898 	bl	80037b4 <__multadd>
 8003684:	e7f3      	b.n	800366e <_dtoa_r+0xb2e>
 8003686:	4651      	mov	r1, sl
 8003688:	2300      	movs	r3, #0
 800368a:	220a      	movs	r2, #10
 800368c:	4620      	mov	r0, r4
 800368e:	f000 f891 	bl	80037b4 <__multadd>
 8003692:	4682      	mov	sl, r0
 8003694:	e70d      	b.n	80034b2 <_dtoa_r+0x972>
 8003696:	9b02      	ldr	r3, [sp, #8]
 8003698:	4293      	cmp	r3, r2
 800369a:	d105      	bne.n	80036a8 <_dtoa_r+0xb68>
 800369c:	9a02      	ldr	r2, [sp, #8]
 800369e:	f10b 0b01 	add.w	fp, fp, #1
 80036a2:	2331      	movs	r3, #49	; 0x31
 80036a4:	7013      	strb	r3, [r2, #0]
 80036a6:	e6e2      	b.n	800346e <_dtoa_r+0x92e>
 80036a8:	4615      	mov	r5, r2
 80036aa:	e7b2      	b.n	8003612 <_dtoa_r+0xad2>
 80036ac:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <_dtoa_r+0xb94>)
 80036ae:	f7ff baae 	b.w	8002c0e <_dtoa_r+0xce>
 80036b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f47f aa88 	bne.w	8002bca <_dtoa_r+0x8a>
 80036ba:	4b07      	ldr	r3, [pc, #28]	; (80036d8 <_dtoa_r+0xb98>)
 80036bc:	f7ff baa7 	b.w	8002c0e <_dtoa_r+0xce>
 80036c0:	9b04      	ldr	r3, [sp, #16]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f73f aef4 	bgt.w	80034b0 <_dtoa_r+0x970>
 80036c8:	9b07      	ldr	r3, [sp, #28]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	f77f aef0 	ble.w	80034b0 <_dtoa_r+0x970>
 80036d0:	e6b8      	b.n	8003444 <_dtoa_r+0x904>
 80036d2:	bf00      	nop
 80036d4:	08003e40 	.word	0x08003e40
 80036d8:	08003e42 	.word	0x08003e42

080036dc <_localeconv_r>:
 80036dc:	4b04      	ldr	r3, [pc, #16]	; (80036f0 <_localeconv_r+0x14>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6a18      	ldr	r0, [r3, #32]
 80036e2:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <_localeconv_r+0x18>)
 80036e4:	2800      	cmp	r0, #0
 80036e6:	bf08      	it	eq
 80036e8:	4618      	moveq	r0, r3
 80036ea:	30f0      	adds	r0, #240	; 0xf0
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	2000000c 	.word	0x2000000c
 80036f4:	20000070 	.word	0x20000070

080036f8 <malloc>:
 80036f8:	4b02      	ldr	r3, [pc, #8]	; (8003704 <malloc+0xc>)
 80036fa:	4601      	mov	r1, r0
 80036fc:	6818      	ldr	r0, [r3, #0]
 80036fe:	f000 baed 	b.w	8003cdc <_malloc_r>
 8003702:	bf00      	nop
 8003704:	2000000c 	.word	0x2000000c

08003708 <memcpy>:
 8003708:	b510      	push	{r4, lr}
 800370a:	1e43      	subs	r3, r0, #1
 800370c:	440a      	add	r2, r1
 800370e:	4291      	cmp	r1, r2
 8003710:	d100      	bne.n	8003714 <memcpy+0xc>
 8003712:	bd10      	pop	{r4, pc}
 8003714:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003718:	f803 4f01 	strb.w	r4, [r3, #1]!
 800371c:	e7f7      	b.n	800370e <memcpy+0x6>

0800371e <_Balloc>:
 800371e:	b570      	push	{r4, r5, r6, lr}
 8003720:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003722:	4604      	mov	r4, r0
 8003724:	460e      	mov	r6, r1
 8003726:	b93d      	cbnz	r5, 8003738 <_Balloc+0x1a>
 8003728:	2010      	movs	r0, #16
 800372a:	f7ff ffe5 	bl	80036f8 <malloc>
 800372e:	6260      	str	r0, [r4, #36]	; 0x24
 8003730:	6045      	str	r5, [r0, #4]
 8003732:	6085      	str	r5, [r0, #8]
 8003734:	6005      	str	r5, [r0, #0]
 8003736:	60c5      	str	r5, [r0, #12]
 8003738:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800373a:	68eb      	ldr	r3, [r5, #12]
 800373c:	b183      	cbz	r3, 8003760 <_Balloc+0x42>
 800373e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003746:	b9b8      	cbnz	r0, 8003778 <_Balloc+0x5a>
 8003748:	2101      	movs	r1, #1
 800374a:	fa01 f506 	lsl.w	r5, r1, r6
 800374e:	1d6a      	adds	r2, r5, #5
 8003750:	0092      	lsls	r2, r2, #2
 8003752:	4620      	mov	r0, r4
 8003754:	f000 fab4 	bl	8003cc0 <_calloc_r>
 8003758:	b160      	cbz	r0, 8003774 <_Balloc+0x56>
 800375a:	6046      	str	r6, [r0, #4]
 800375c:	6085      	str	r5, [r0, #8]
 800375e:	e00e      	b.n	800377e <_Balloc+0x60>
 8003760:	2221      	movs	r2, #33	; 0x21
 8003762:	2104      	movs	r1, #4
 8003764:	4620      	mov	r0, r4
 8003766:	f000 faab 	bl	8003cc0 <_calloc_r>
 800376a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800376c:	60e8      	str	r0, [r5, #12]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1e4      	bne.n	800373e <_Balloc+0x20>
 8003774:	2000      	movs	r0, #0
 8003776:	bd70      	pop	{r4, r5, r6, pc}
 8003778:	6802      	ldr	r2, [r0, #0]
 800377a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800377e:	2300      	movs	r3, #0
 8003780:	6103      	str	r3, [r0, #16]
 8003782:	60c3      	str	r3, [r0, #12]
 8003784:	bd70      	pop	{r4, r5, r6, pc}

08003786 <_Bfree>:
 8003786:	b570      	push	{r4, r5, r6, lr}
 8003788:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800378a:	4606      	mov	r6, r0
 800378c:	460d      	mov	r5, r1
 800378e:	b93c      	cbnz	r4, 80037a0 <_Bfree+0x1a>
 8003790:	2010      	movs	r0, #16
 8003792:	f7ff ffb1 	bl	80036f8 <malloc>
 8003796:	6270      	str	r0, [r6, #36]	; 0x24
 8003798:	6044      	str	r4, [r0, #4]
 800379a:	6084      	str	r4, [r0, #8]
 800379c:	6004      	str	r4, [r0, #0]
 800379e:	60c4      	str	r4, [r0, #12]
 80037a0:	b13d      	cbz	r5, 80037b2 <_Bfree+0x2c>
 80037a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80037a4:	686a      	ldr	r2, [r5, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80037ac:	6029      	str	r1, [r5, #0]
 80037ae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80037b2:	bd70      	pop	{r4, r5, r6, pc}

080037b4 <__multadd>:
 80037b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037b8:	690d      	ldr	r5, [r1, #16]
 80037ba:	461f      	mov	r7, r3
 80037bc:	4606      	mov	r6, r0
 80037be:	460c      	mov	r4, r1
 80037c0:	f101 0e14 	add.w	lr, r1, #20
 80037c4:	2300      	movs	r3, #0
 80037c6:	f8de 0000 	ldr.w	r0, [lr]
 80037ca:	b281      	uxth	r1, r0
 80037cc:	fb02 7101 	mla	r1, r2, r1, r7
 80037d0:	0c0f      	lsrs	r7, r1, #16
 80037d2:	0c00      	lsrs	r0, r0, #16
 80037d4:	fb02 7000 	mla	r0, r2, r0, r7
 80037d8:	b289      	uxth	r1, r1
 80037da:	3301      	adds	r3, #1
 80037dc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80037e0:	429d      	cmp	r5, r3
 80037e2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80037e6:	f84e 1b04 	str.w	r1, [lr], #4
 80037ea:	dcec      	bgt.n	80037c6 <__multadd+0x12>
 80037ec:	b1d7      	cbz	r7, 8003824 <__multadd+0x70>
 80037ee:	68a3      	ldr	r3, [r4, #8]
 80037f0:	429d      	cmp	r5, r3
 80037f2:	db12      	blt.n	800381a <__multadd+0x66>
 80037f4:	6861      	ldr	r1, [r4, #4]
 80037f6:	4630      	mov	r0, r6
 80037f8:	3101      	adds	r1, #1
 80037fa:	f7ff ff90 	bl	800371e <_Balloc>
 80037fe:	6922      	ldr	r2, [r4, #16]
 8003800:	3202      	adds	r2, #2
 8003802:	f104 010c 	add.w	r1, r4, #12
 8003806:	4680      	mov	r8, r0
 8003808:	0092      	lsls	r2, r2, #2
 800380a:	300c      	adds	r0, #12
 800380c:	f7ff ff7c 	bl	8003708 <memcpy>
 8003810:	4621      	mov	r1, r4
 8003812:	4630      	mov	r0, r6
 8003814:	f7ff ffb7 	bl	8003786 <_Bfree>
 8003818:	4644      	mov	r4, r8
 800381a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800381e:	3501      	adds	r5, #1
 8003820:	615f      	str	r7, [r3, #20]
 8003822:	6125      	str	r5, [r4, #16]
 8003824:	4620      	mov	r0, r4
 8003826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800382a <__hi0bits>:
 800382a:	0c02      	lsrs	r2, r0, #16
 800382c:	0412      	lsls	r2, r2, #16
 800382e:	4603      	mov	r3, r0
 8003830:	b9b2      	cbnz	r2, 8003860 <__hi0bits+0x36>
 8003832:	0403      	lsls	r3, r0, #16
 8003834:	2010      	movs	r0, #16
 8003836:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800383a:	bf04      	itt	eq
 800383c:	021b      	lsleq	r3, r3, #8
 800383e:	3008      	addeq	r0, #8
 8003840:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003844:	bf04      	itt	eq
 8003846:	011b      	lsleq	r3, r3, #4
 8003848:	3004      	addeq	r0, #4
 800384a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800384e:	bf04      	itt	eq
 8003850:	009b      	lsleq	r3, r3, #2
 8003852:	3002      	addeq	r0, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	db06      	blt.n	8003866 <__hi0bits+0x3c>
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	d503      	bpl.n	8003864 <__hi0bits+0x3a>
 800385c:	3001      	adds	r0, #1
 800385e:	4770      	bx	lr
 8003860:	2000      	movs	r0, #0
 8003862:	e7e8      	b.n	8003836 <__hi0bits+0xc>
 8003864:	2020      	movs	r0, #32
 8003866:	4770      	bx	lr

08003868 <__lo0bits>:
 8003868:	6803      	ldr	r3, [r0, #0]
 800386a:	f013 0207 	ands.w	r2, r3, #7
 800386e:	4601      	mov	r1, r0
 8003870:	d00b      	beq.n	800388a <__lo0bits+0x22>
 8003872:	07da      	lsls	r2, r3, #31
 8003874:	d423      	bmi.n	80038be <__lo0bits+0x56>
 8003876:	0798      	lsls	r0, r3, #30
 8003878:	bf49      	itett	mi
 800387a:	085b      	lsrmi	r3, r3, #1
 800387c:	089b      	lsrpl	r3, r3, #2
 800387e:	2001      	movmi	r0, #1
 8003880:	600b      	strmi	r3, [r1, #0]
 8003882:	bf5c      	itt	pl
 8003884:	600b      	strpl	r3, [r1, #0]
 8003886:	2002      	movpl	r0, #2
 8003888:	4770      	bx	lr
 800388a:	b298      	uxth	r0, r3
 800388c:	b9a8      	cbnz	r0, 80038ba <__lo0bits+0x52>
 800388e:	0c1b      	lsrs	r3, r3, #16
 8003890:	2010      	movs	r0, #16
 8003892:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003896:	bf04      	itt	eq
 8003898:	0a1b      	lsreq	r3, r3, #8
 800389a:	3008      	addeq	r0, #8
 800389c:	071a      	lsls	r2, r3, #28
 800389e:	bf04      	itt	eq
 80038a0:	091b      	lsreq	r3, r3, #4
 80038a2:	3004      	addeq	r0, #4
 80038a4:	079a      	lsls	r2, r3, #30
 80038a6:	bf04      	itt	eq
 80038a8:	089b      	lsreq	r3, r3, #2
 80038aa:	3002      	addeq	r0, #2
 80038ac:	07da      	lsls	r2, r3, #31
 80038ae:	d402      	bmi.n	80038b6 <__lo0bits+0x4e>
 80038b0:	085b      	lsrs	r3, r3, #1
 80038b2:	d006      	beq.n	80038c2 <__lo0bits+0x5a>
 80038b4:	3001      	adds	r0, #1
 80038b6:	600b      	str	r3, [r1, #0]
 80038b8:	4770      	bx	lr
 80038ba:	4610      	mov	r0, r2
 80038bc:	e7e9      	b.n	8003892 <__lo0bits+0x2a>
 80038be:	2000      	movs	r0, #0
 80038c0:	4770      	bx	lr
 80038c2:	2020      	movs	r0, #32
 80038c4:	4770      	bx	lr

080038c6 <__i2b>:
 80038c6:	b510      	push	{r4, lr}
 80038c8:	460c      	mov	r4, r1
 80038ca:	2101      	movs	r1, #1
 80038cc:	f7ff ff27 	bl	800371e <_Balloc>
 80038d0:	2201      	movs	r2, #1
 80038d2:	6144      	str	r4, [r0, #20]
 80038d4:	6102      	str	r2, [r0, #16]
 80038d6:	bd10      	pop	{r4, pc}

080038d8 <__multiply>:
 80038d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038dc:	4614      	mov	r4, r2
 80038de:	690a      	ldr	r2, [r1, #16]
 80038e0:	6923      	ldr	r3, [r4, #16]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	bfb8      	it	lt
 80038e6:	460b      	movlt	r3, r1
 80038e8:	4689      	mov	r9, r1
 80038ea:	bfbc      	itt	lt
 80038ec:	46a1      	movlt	r9, r4
 80038ee:	461c      	movlt	r4, r3
 80038f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80038f4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80038f8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80038fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003900:	eb07 060a 	add.w	r6, r7, sl
 8003904:	429e      	cmp	r6, r3
 8003906:	bfc8      	it	gt
 8003908:	3101      	addgt	r1, #1
 800390a:	f7ff ff08 	bl	800371e <_Balloc>
 800390e:	f100 0514 	add.w	r5, r0, #20
 8003912:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003916:	462b      	mov	r3, r5
 8003918:	2200      	movs	r2, #0
 800391a:	4543      	cmp	r3, r8
 800391c:	d316      	bcc.n	800394c <__multiply+0x74>
 800391e:	f104 0214 	add.w	r2, r4, #20
 8003922:	f109 0114 	add.w	r1, r9, #20
 8003926:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800392a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800392e:	9301      	str	r3, [sp, #4]
 8003930:	9c01      	ldr	r4, [sp, #4]
 8003932:	4294      	cmp	r4, r2
 8003934:	4613      	mov	r3, r2
 8003936:	d80c      	bhi.n	8003952 <__multiply+0x7a>
 8003938:	2e00      	cmp	r6, #0
 800393a:	dd03      	ble.n	8003944 <__multiply+0x6c>
 800393c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003940:	2b00      	cmp	r3, #0
 8003942:	d054      	beq.n	80039ee <__multiply+0x116>
 8003944:	6106      	str	r6, [r0, #16]
 8003946:	b003      	add	sp, #12
 8003948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800394c:	f843 2b04 	str.w	r2, [r3], #4
 8003950:	e7e3      	b.n	800391a <__multiply+0x42>
 8003952:	f8b3 a000 	ldrh.w	sl, [r3]
 8003956:	3204      	adds	r2, #4
 8003958:	f1ba 0f00 	cmp.w	sl, #0
 800395c:	d020      	beq.n	80039a0 <__multiply+0xc8>
 800395e:	46ae      	mov	lr, r5
 8003960:	4689      	mov	r9, r1
 8003962:	f04f 0c00 	mov.w	ip, #0
 8003966:	f859 4b04 	ldr.w	r4, [r9], #4
 800396a:	f8be b000 	ldrh.w	fp, [lr]
 800396e:	b2a3      	uxth	r3, r4
 8003970:	fb0a b303 	mla	r3, sl, r3, fp
 8003974:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8003978:	f8de 4000 	ldr.w	r4, [lr]
 800397c:	4463      	add	r3, ip
 800397e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8003982:	fb0a c40b 	mla	r4, sl, fp, ip
 8003986:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800398a:	b29b      	uxth	r3, r3
 800398c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003990:	454f      	cmp	r7, r9
 8003992:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8003996:	f84e 3b04 	str.w	r3, [lr], #4
 800399a:	d8e4      	bhi.n	8003966 <__multiply+0x8e>
 800399c:	f8ce c000 	str.w	ip, [lr]
 80039a0:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 80039a4:	f1b9 0f00 	cmp.w	r9, #0
 80039a8:	d01f      	beq.n	80039ea <__multiply+0x112>
 80039aa:	682b      	ldr	r3, [r5, #0]
 80039ac:	46ae      	mov	lr, r5
 80039ae:	468c      	mov	ip, r1
 80039b0:	f04f 0a00 	mov.w	sl, #0
 80039b4:	f8bc 4000 	ldrh.w	r4, [ip]
 80039b8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80039bc:	fb09 b404 	mla	r4, r9, r4, fp
 80039c0:	44a2      	add	sl, r4
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80039c8:	f84e 3b04 	str.w	r3, [lr], #4
 80039cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80039d0:	f8be 4000 	ldrh.w	r4, [lr]
 80039d4:	0c1b      	lsrs	r3, r3, #16
 80039d6:	fb09 4303 	mla	r3, r9, r3, r4
 80039da:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80039de:	4567      	cmp	r7, ip
 80039e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80039e4:	d8e6      	bhi.n	80039b4 <__multiply+0xdc>
 80039e6:	f8ce 3000 	str.w	r3, [lr]
 80039ea:	3504      	adds	r5, #4
 80039ec:	e7a0      	b.n	8003930 <__multiply+0x58>
 80039ee:	3e01      	subs	r6, #1
 80039f0:	e7a2      	b.n	8003938 <__multiply+0x60>
	...

080039f4 <__pow5mult>:
 80039f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039f8:	4615      	mov	r5, r2
 80039fa:	f012 0203 	ands.w	r2, r2, #3
 80039fe:	4606      	mov	r6, r0
 8003a00:	460f      	mov	r7, r1
 8003a02:	d007      	beq.n	8003a14 <__pow5mult+0x20>
 8003a04:	3a01      	subs	r2, #1
 8003a06:	4c21      	ldr	r4, [pc, #132]	; (8003a8c <__pow5mult+0x98>)
 8003a08:	2300      	movs	r3, #0
 8003a0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003a0e:	f7ff fed1 	bl	80037b4 <__multadd>
 8003a12:	4607      	mov	r7, r0
 8003a14:	10ad      	asrs	r5, r5, #2
 8003a16:	d035      	beq.n	8003a84 <__pow5mult+0x90>
 8003a18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003a1a:	b93c      	cbnz	r4, 8003a2c <__pow5mult+0x38>
 8003a1c:	2010      	movs	r0, #16
 8003a1e:	f7ff fe6b 	bl	80036f8 <malloc>
 8003a22:	6270      	str	r0, [r6, #36]	; 0x24
 8003a24:	6044      	str	r4, [r0, #4]
 8003a26:	6084      	str	r4, [r0, #8]
 8003a28:	6004      	str	r4, [r0, #0]
 8003a2a:	60c4      	str	r4, [r0, #12]
 8003a2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003a30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003a34:	b94c      	cbnz	r4, 8003a4a <__pow5mult+0x56>
 8003a36:	f240 2171 	movw	r1, #625	; 0x271
 8003a3a:	4630      	mov	r0, r6
 8003a3c:	f7ff ff43 	bl	80038c6 <__i2b>
 8003a40:	2300      	movs	r3, #0
 8003a42:	f8c8 0008 	str.w	r0, [r8, #8]
 8003a46:	4604      	mov	r4, r0
 8003a48:	6003      	str	r3, [r0, #0]
 8003a4a:	f04f 0800 	mov.w	r8, #0
 8003a4e:	07eb      	lsls	r3, r5, #31
 8003a50:	d50a      	bpl.n	8003a68 <__pow5mult+0x74>
 8003a52:	4639      	mov	r1, r7
 8003a54:	4622      	mov	r2, r4
 8003a56:	4630      	mov	r0, r6
 8003a58:	f7ff ff3e 	bl	80038d8 <__multiply>
 8003a5c:	4639      	mov	r1, r7
 8003a5e:	4681      	mov	r9, r0
 8003a60:	4630      	mov	r0, r6
 8003a62:	f7ff fe90 	bl	8003786 <_Bfree>
 8003a66:	464f      	mov	r7, r9
 8003a68:	106d      	asrs	r5, r5, #1
 8003a6a:	d00b      	beq.n	8003a84 <__pow5mult+0x90>
 8003a6c:	6820      	ldr	r0, [r4, #0]
 8003a6e:	b938      	cbnz	r0, 8003a80 <__pow5mult+0x8c>
 8003a70:	4622      	mov	r2, r4
 8003a72:	4621      	mov	r1, r4
 8003a74:	4630      	mov	r0, r6
 8003a76:	f7ff ff2f 	bl	80038d8 <__multiply>
 8003a7a:	6020      	str	r0, [r4, #0]
 8003a7c:	f8c0 8000 	str.w	r8, [r0]
 8003a80:	4604      	mov	r4, r0
 8003a82:	e7e4      	b.n	8003a4e <__pow5mult+0x5a>
 8003a84:	4638      	mov	r0, r7
 8003a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a8a:	bf00      	nop
 8003a8c:	08003f40 	.word	0x08003f40

08003a90 <__lshift>:
 8003a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a94:	460c      	mov	r4, r1
 8003a96:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003a9a:	6923      	ldr	r3, [r4, #16]
 8003a9c:	6849      	ldr	r1, [r1, #4]
 8003a9e:	eb0a 0903 	add.w	r9, sl, r3
 8003aa2:	68a3      	ldr	r3, [r4, #8]
 8003aa4:	4607      	mov	r7, r0
 8003aa6:	4616      	mov	r6, r2
 8003aa8:	f109 0501 	add.w	r5, r9, #1
 8003aac:	42ab      	cmp	r3, r5
 8003aae:	db31      	blt.n	8003b14 <__lshift+0x84>
 8003ab0:	4638      	mov	r0, r7
 8003ab2:	f7ff fe34 	bl	800371e <_Balloc>
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	4680      	mov	r8, r0
 8003aba:	f100 0314 	add.w	r3, r0, #20
 8003abe:	4611      	mov	r1, r2
 8003ac0:	4552      	cmp	r2, sl
 8003ac2:	db2a      	blt.n	8003b1a <__lshift+0x8a>
 8003ac4:	6920      	ldr	r0, [r4, #16]
 8003ac6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003aca:	f104 0114 	add.w	r1, r4, #20
 8003ace:	f016 021f 	ands.w	r2, r6, #31
 8003ad2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8003ad6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8003ada:	d022      	beq.n	8003b22 <__lshift+0x92>
 8003adc:	f1c2 0c20 	rsb	ip, r2, #32
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	680e      	ldr	r6, [r1, #0]
 8003ae4:	4096      	lsls	r6, r2
 8003ae6:	4330      	orrs	r0, r6
 8003ae8:	f843 0b04 	str.w	r0, [r3], #4
 8003aec:	f851 0b04 	ldr.w	r0, [r1], #4
 8003af0:	458e      	cmp	lr, r1
 8003af2:	fa20 f00c 	lsr.w	r0, r0, ip
 8003af6:	d8f4      	bhi.n	8003ae2 <__lshift+0x52>
 8003af8:	6018      	str	r0, [r3, #0]
 8003afa:	b108      	cbz	r0, 8003b00 <__lshift+0x70>
 8003afc:	f109 0502 	add.w	r5, r9, #2
 8003b00:	3d01      	subs	r5, #1
 8003b02:	4638      	mov	r0, r7
 8003b04:	f8c8 5010 	str.w	r5, [r8, #16]
 8003b08:	4621      	mov	r1, r4
 8003b0a:	f7ff fe3c 	bl	8003786 <_Bfree>
 8003b0e:	4640      	mov	r0, r8
 8003b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b14:	3101      	adds	r1, #1
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	e7c8      	b.n	8003aac <__lshift+0x1c>
 8003b1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003b1e:	3201      	adds	r2, #1
 8003b20:	e7ce      	b.n	8003ac0 <__lshift+0x30>
 8003b22:	3b04      	subs	r3, #4
 8003b24:	f851 2b04 	ldr.w	r2, [r1], #4
 8003b28:	f843 2f04 	str.w	r2, [r3, #4]!
 8003b2c:	458e      	cmp	lr, r1
 8003b2e:	d8f9      	bhi.n	8003b24 <__lshift+0x94>
 8003b30:	e7e6      	b.n	8003b00 <__lshift+0x70>

08003b32 <__mcmp>:
 8003b32:	6903      	ldr	r3, [r0, #16]
 8003b34:	690a      	ldr	r2, [r1, #16]
 8003b36:	1a9b      	subs	r3, r3, r2
 8003b38:	b530      	push	{r4, r5, lr}
 8003b3a:	d10c      	bne.n	8003b56 <__mcmp+0x24>
 8003b3c:	0092      	lsls	r2, r2, #2
 8003b3e:	3014      	adds	r0, #20
 8003b40:	3114      	adds	r1, #20
 8003b42:	1884      	adds	r4, r0, r2
 8003b44:	4411      	add	r1, r2
 8003b46:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003b4a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003b4e:	4295      	cmp	r5, r2
 8003b50:	d003      	beq.n	8003b5a <__mcmp+0x28>
 8003b52:	d305      	bcc.n	8003b60 <__mcmp+0x2e>
 8003b54:	2301      	movs	r3, #1
 8003b56:	4618      	mov	r0, r3
 8003b58:	bd30      	pop	{r4, r5, pc}
 8003b5a:	42a0      	cmp	r0, r4
 8003b5c:	d3f3      	bcc.n	8003b46 <__mcmp+0x14>
 8003b5e:	e7fa      	b.n	8003b56 <__mcmp+0x24>
 8003b60:	f04f 33ff 	mov.w	r3, #4294967295
 8003b64:	e7f7      	b.n	8003b56 <__mcmp+0x24>

08003b66 <__mdiff>:
 8003b66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b6a:	460d      	mov	r5, r1
 8003b6c:	4607      	mov	r7, r0
 8003b6e:	4611      	mov	r1, r2
 8003b70:	4628      	mov	r0, r5
 8003b72:	4614      	mov	r4, r2
 8003b74:	f7ff ffdd 	bl	8003b32 <__mcmp>
 8003b78:	1e06      	subs	r6, r0, #0
 8003b7a:	d108      	bne.n	8003b8e <__mdiff+0x28>
 8003b7c:	4631      	mov	r1, r6
 8003b7e:	4638      	mov	r0, r7
 8003b80:	f7ff fdcd 	bl	800371e <_Balloc>
 8003b84:	2301      	movs	r3, #1
 8003b86:	6103      	str	r3, [r0, #16]
 8003b88:	6146      	str	r6, [r0, #20]
 8003b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b8e:	bfa4      	itt	ge
 8003b90:	4623      	movge	r3, r4
 8003b92:	462c      	movge	r4, r5
 8003b94:	4638      	mov	r0, r7
 8003b96:	6861      	ldr	r1, [r4, #4]
 8003b98:	bfa6      	itte	ge
 8003b9a:	461d      	movge	r5, r3
 8003b9c:	2600      	movge	r6, #0
 8003b9e:	2601      	movlt	r6, #1
 8003ba0:	f7ff fdbd 	bl	800371e <_Balloc>
 8003ba4:	692b      	ldr	r3, [r5, #16]
 8003ba6:	60c6      	str	r6, [r0, #12]
 8003ba8:	6926      	ldr	r6, [r4, #16]
 8003baa:	f105 0914 	add.w	r9, r5, #20
 8003bae:	f104 0214 	add.w	r2, r4, #20
 8003bb2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8003bb6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8003bba:	f100 0514 	add.w	r5, r0, #20
 8003bbe:	f04f 0c00 	mov.w	ip, #0
 8003bc2:	f852 ab04 	ldr.w	sl, [r2], #4
 8003bc6:	f859 4b04 	ldr.w	r4, [r9], #4
 8003bca:	fa1c f18a 	uxtah	r1, ip, sl
 8003bce:	b2a3      	uxth	r3, r4
 8003bd0:	1ac9      	subs	r1, r1, r3
 8003bd2:	0c23      	lsrs	r3, r4, #16
 8003bd4:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8003bd8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8003bdc:	b289      	uxth	r1, r1
 8003bde:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8003be2:	45c8      	cmp	r8, r9
 8003be4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8003be8:	4696      	mov	lr, r2
 8003bea:	f845 3b04 	str.w	r3, [r5], #4
 8003bee:	d8e8      	bhi.n	8003bc2 <__mdiff+0x5c>
 8003bf0:	45be      	cmp	lr, r7
 8003bf2:	d305      	bcc.n	8003c00 <__mdiff+0x9a>
 8003bf4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8003bf8:	b18b      	cbz	r3, 8003c1e <__mdiff+0xb8>
 8003bfa:	6106      	str	r6, [r0, #16]
 8003bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c00:	f85e 1b04 	ldr.w	r1, [lr], #4
 8003c04:	fa1c f381 	uxtah	r3, ip, r1
 8003c08:	141a      	asrs	r2, r3, #16
 8003c0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003c18:	f845 3b04 	str.w	r3, [r5], #4
 8003c1c:	e7e8      	b.n	8003bf0 <__mdiff+0x8a>
 8003c1e:	3e01      	subs	r6, #1
 8003c20:	e7e8      	b.n	8003bf4 <__mdiff+0x8e>

08003c22 <__d2b>:
 8003c22:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003c26:	460e      	mov	r6, r1
 8003c28:	2101      	movs	r1, #1
 8003c2a:	ec59 8b10 	vmov	r8, r9, d0
 8003c2e:	4615      	mov	r5, r2
 8003c30:	f7ff fd75 	bl	800371e <_Balloc>
 8003c34:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003c38:	4607      	mov	r7, r0
 8003c3a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003c3e:	bb34      	cbnz	r4, 8003c8e <__d2b+0x6c>
 8003c40:	9301      	str	r3, [sp, #4]
 8003c42:	f1b8 0f00 	cmp.w	r8, #0
 8003c46:	d027      	beq.n	8003c98 <__d2b+0x76>
 8003c48:	a802      	add	r0, sp, #8
 8003c4a:	f840 8d08 	str.w	r8, [r0, #-8]!
 8003c4e:	f7ff fe0b 	bl	8003868 <__lo0bits>
 8003c52:	9900      	ldr	r1, [sp, #0]
 8003c54:	b1f0      	cbz	r0, 8003c94 <__d2b+0x72>
 8003c56:	9a01      	ldr	r2, [sp, #4]
 8003c58:	f1c0 0320 	rsb	r3, r0, #32
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	430b      	orrs	r3, r1
 8003c62:	40c2      	lsrs	r2, r0
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	9201      	str	r2, [sp, #4]
 8003c68:	9b01      	ldr	r3, [sp, #4]
 8003c6a:	61bb      	str	r3, [r7, #24]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	bf14      	ite	ne
 8003c70:	2102      	movne	r1, #2
 8003c72:	2101      	moveq	r1, #1
 8003c74:	6139      	str	r1, [r7, #16]
 8003c76:	b1c4      	cbz	r4, 8003caa <__d2b+0x88>
 8003c78:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8003c7c:	4404      	add	r4, r0
 8003c7e:	6034      	str	r4, [r6, #0]
 8003c80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003c84:	6028      	str	r0, [r5, #0]
 8003c86:	4638      	mov	r0, r7
 8003c88:	b003      	add	sp, #12
 8003c8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c92:	e7d5      	b.n	8003c40 <__d2b+0x1e>
 8003c94:	6179      	str	r1, [r7, #20]
 8003c96:	e7e7      	b.n	8003c68 <__d2b+0x46>
 8003c98:	a801      	add	r0, sp, #4
 8003c9a:	f7ff fde5 	bl	8003868 <__lo0bits>
 8003c9e:	9b01      	ldr	r3, [sp, #4]
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	6139      	str	r1, [r7, #16]
 8003ca6:	3020      	adds	r0, #32
 8003ca8:	e7e5      	b.n	8003c76 <__d2b+0x54>
 8003caa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8003cae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003cb2:	6030      	str	r0, [r6, #0]
 8003cb4:	6918      	ldr	r0, [r3, #16]
 8003cb6:	f7ff fdb8 	bl	800382a <__hi0bits>
 8003cba:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8003cbe:	e7e1      	b.n	8003c84 <__d2b+0x62>

08003cc0 <_calloc_r>:
 8003cc0:	b538      	push	{r3, r4, r5, lr}
 8003cc2:	fb02 f401 	mul.w	r4, r2, r1
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	f000 f808 	bl	8003cdc <_malloc_r>
 8003ccc:	4605      	mov	r5, r0
 8003cce:	b118      	cbz	r0, 8003cd8 <_calloc_r+0x18>
 8003cd0:	4622      	mov	r2, r4
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	f7fe fb52 	bl	800237c <memset>
 8003cd8:	4628      	mov	r0, r5
 8003cda:	bd38      	pop	{r3, r4, r5, pc}

08003cdc <_malloc_r>:
 8003cdc:	b570      	push	{r4, r5, r6, lr}
 8003cde:	1ccd      	adds	r5, r1, #3
 8003ce0:	f025 0503 	bic.w	r5, r5, #3
 8003ce4:	3508      	adds	r5, #8
 8003ce6:	2d0c      	cmp	r5, #12
 8003ce8:	bf38      	it	cc
 8003cea:	250c      	movcc	r5, #12
 8003cec:	2d00      	cmp	r5, #0
 8003cee:	4606      	mov	r6, r0
 8003cf0:	db01      	blt.n	8003cf6 <_malloc_r+0x1a>
 8003cf2:	42a9      	cmp	r1, r5
 8003cf4:	d903      	bls.n	8003cfe <_malloc_r+0x22>
 8003cf6:	230c      	movs	r3, #12
 8003cf8:	6033      	str	r3, [r6, #0]
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	bd70      	pop	{r4, r5, r6, pc}
 8003cfe:	f000 f86d 	bl	8003ddc <__malloc_lock>
 8003d02:	4a23      	ldr	r2, [pc, #140]	; (8003d90 <_malloc_r+0xb4>)
 8003d04:	6814      	ldr	r4, [r2, #0]
 8003d06:	4621      	mov	r1, r4
 8003d08:	b991      	cbnz	r1, 8003d30 <_malloc_r+0x54>
 8003d0a:	4c22      	ldr	r4, [pc, #136]	; (8003d94 <_malloc_r+0xb8>)
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	b91b      	cbnz	r3, 8003d18 <_malloc_r+0x3c>
 8003d10:	4630      	mov	r0, r6
 8003d12:	f000 f841 	bl	8003d98 <_sbrk_r>
 8003d16:	6020      	str	r0, [r4, #0]
 8003d18:	4629      	mov	r1, r5
 8003d1a:	4630      	mov	r0, r6
 8003d1c:	f000 f83c 	bl	8003d98 <_sbrk_r>
 8003d20:	1c43      	adds	r3, r0, #1
 8003d22:	d126      	bne.n	8003d72 <_malloc_r+0x96>
 8003d24:	230c      	movs	r3, #12
 8003d26:	6033      	str	r3, [r6, #0]
 8003d28:	4630      	mov	r0, r6
 8003d2a:	f000 f858 	bl	8003dde <__malloc_unlock>
 8003d2e:	e7e4      	b.n	8003cfa <_malloc_r+0x1e>
 8003d30:	680b      	ldr	r3, [r1, #0]
 8003d32:	1b5b      	subs	r3, r3, r5
 8003d34:	d41a      	bmi.n	8003d6c <_malloc_r+0x90>
 8003d36:	2b0b      	cmp	r3, #11
 8003d38:	d90f      	bls.n	8003d5a <_malloc_r+0x7e>
 8003d3a:	600b      	str	r3, [r1, #0]
 8003d3c:	50cd      	str	r5, [r1, r3]
 8003d3e:	18cc      	adds	r4, r1, r3
 8003d40:	4630      	mov	r0, r6
 8003d42:	f000 f84c 	bl	8003dde <__malloc_unlock>
 8003d46:	f104 000b 	add.w	r0, r4, #11
 8003d4a:	1d23      	adds	r3, r4, #4
 8003d4c:	f020 0007 	bic.w	r0, r0, #7
 8003d50:	1ac3      	subs	r3, r0, r3
 8003d52:	d01b      	beq.n	8003d8c <_malloc_r+0xb0>
 8003d54:	425a      	negs	r2, r3
 8003d56:	50e2      	str	r2, [r4, r3]
 8003d58:	bd70      	pop	{r4, r5, r6, pc}
 8003d5a:	428c      	cmp	r4, r1
 8003d5c:	bf0d      	iteet	eq
 8003d5e:	6863      	ldreq	r3, [r4, #4]
 8003d60:	684b      	ldrne	r3, [r1, #4]
 8003d62:	6063      	strne	r3, [r4, #4]
 8003d64:	6013      	streq	r3, [r2, #0]
 8003d66:	bf18      	it	ne
 8003d68:	460c      	movne	r4, r1
 8003d6a:	e7e9      	b.n	8003d40 <_malloc_r+0x64>
 8003d6c:	460c      	mov	r4, r1
 8003d6e:	6849      	ldr	r1, [r1, #4]
 8003d70:	e7ca      	b.n	8003d08 <_malloc_r+0x2c>
 8003d72:	1cc4      	adds	r4, r0, #3
 8003d74:	f024 0403 	bic.w	r4, r4, #3
 8003d78:	42a0      	cmp	r0, r4
 8003d7a:	d005      	beq.n	8003d88 <_malloc_r+0xac>
 8003d7c:	1a21      	subs	r1, r4, r0
 8003d7e:	4630      	mov	r0, r6
 8003d80:	f000 f80a 	bl	8003d98 <_sbrk_r>
 8003d84:	3001      	adds	r0, #1
 8003d86:	d0cd      	beq.n	8003d24 <_malloc_r+0x48>
 8003d88:	6025      	str	r5, [r4, #0]
 8003d8a:	e7d9      	b.n	8003d40 <_malloc_r+0x64>
 8003d8c:	bd70      	pop	{r4, r5, r6, pc}
 8003d8e:	bf00      	nop
 8003d90:	200001fc 	.word	0x200001fc
 8003d94:	20000200 	.word	0x20000200

08003d98 <_sbrk_r>:
 8003d98:	b538      	push	{r3, r4, r5, lr}
 8003d9a:	4c06      	ldr	r4, [pc, #24]	; (8003db4 <_sbrk_r+0x1c>)
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	4605      	mov	r5, r0
 8003da0:	4608      	mov	r0, r1
 8003da2:	6023      	str	r3, [r4, #0]
 8003da4:	f7fe f9fc 	bl	80021a0 <_sbrk>
 8003da8:	1c43      	adds	r3, r0, #1
 8003daa:	d102      	bne.n	8003db2 <_sbrk_r+0x1a>
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	b103      	cbz	r3, 8003db2 <_sbrk_r+0x1a>
 8003db0:	602b      	str	r3, [r5, #0]
 8003db2:	bd38      	pop	{r3, r4, r5, pc}
 8003db4:	2000024c 	.word	0x2000024c

08003db8 <__ascii_mbtowc>:
 8003db8:	b082      	sub	sp, #8
 8003dba:	b901      	cbnz	r1, 8003dbe <__ascii_mbtowc+0x6>
 8003dbc:	a901      	add	r1, sp, #4
 8003dbe:	b142      	cbz	r2, 8003dd2 <__ascii_mbtowc+0x1a>
 8003dc0:	b14b      	cbz	r3, 8003dd6 <__ascii_mbtowc+0x1e>
 8003dc2:	7813      	ldrb	r3, [r2, #0]
 8003dc4:	600b      	str	r3, [r1, #0]
 8003dc6:	7812      	ldrb	r2, [r2, #0]
 8003dc8:	1c10      	adds	r0, r2, #0
 8003dca:	bf18      	it	ne
 8003dcc:	2001      	movne	r0, #1
 8003dce:	b002      	add	sp, #8
 8003dd0:	4770      	bx	lr
 8003dd2:	4610      	mov	r0, r2
 8003dd4:	e7fb      	b.n	8003dce <__ascii_mbtowc+0x16>
 8003dd6:	f06f 0001 	mvn.w	r0, #1
 8003dda:	e7f8      	b.n	8003dce <__ascii_mbtowc+0x16>

08003ddc <__malloc_lock>:
 8003ddc:	4770      	bx	lr

08003dde <__malloc_unlock>:
 8003dde:	4770      	bx	lr

08003de0 <__ascii_wctomb>:
 8003de0:	b149      	cbz	r1, 8003df6 <__ascii_wctomb+0x16>
 8003de2:	2aff      	cmp	r2, #255	; 0xff
 8003de4:	bf85      	ittet	hi
 8003de6:	238a      	movhi	r3, #138	; 0x8a
 8003de8:	6003      	strhi	r3, [r0, #0]
 8003dea:	700a      	strbls	r2, [r1, #0]
 8003dec:	f04f 30ff 	movhi.w	r0, #4294967295
 8003df0:	bf98      	it	ls
 8003df2:	2001      	movls	r0, #1
 8003df4:	4770      	bx	lr
 8003df6:	4608      	mov	r0, r1
 8003df8:	4770      	bx	lr
	...

08003dfc <_init>:
 8003dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfe:	bf00      	nop
 8003e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e02:	bc08      	pop	{r3}
 8003e04:	469e      	mov	lr, r3
 8003e06:	4770      	bx	lr

08003e08 <_fini>:
 8003e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e0a:	bf00      	nop
 8003e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e0e:	bc08      	pop	{r3}
 8003e10:	469e      	mov	lr, r3
 8003e12:	4770      	bx	lr
