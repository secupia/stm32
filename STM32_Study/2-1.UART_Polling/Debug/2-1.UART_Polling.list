
2-1.UART_Polling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001600  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080017ac  080017ac  000117ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080017c4  080017c4  000117c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080017cc  080017cc  000117cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080017d0  080017d0  000117d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080017d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00000060  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000006c  2000006c  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   000066f8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000013a7  00000000  00000000  00026734  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000025d2  00000000  00000000  00027adb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005a8  00000000  00000000  0002a0b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000568  00000000  00000000  0002a658  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00002a04  00000000  00000000  0002abc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00002057  00000000  00000000  0002d5c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0002f61b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000d28  00000000  00000000  0002f698  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001794 	.word	0x08001794

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08001794 	.word	0x08001794

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b97a 	b.w	80004f8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	468c      	mov	ip, r1
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	9e08      	ldr	r6, [sp, #32]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d151      	bne.n	80002d0 <__udivmoddi4+0xb4>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d96d      	bls.n	800030e <__udivmoddi4+0xf2>
 8000232:	fab2 fe82 	clz	lr, r2
 8000236:	f1be 0f00 	cmp.w	lr, #0
 800023a:	d00b      	beq.n	8000254 <__udivmoddi4+0x38>
 800023c:	f1ce 0c20 	rsb	ip, lr, #32
 8000240:	fa01 f50e 	lsl.w	r5, r1, lr
 8000244:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000248:	fa02 f70e 	lsl.w	r7, r2, lr
 800024c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000250:	fa00 f40e 	lsl.w	r4, r0, lr
 8000254:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000258:	0c25      	lsrs	r5, r4, #16
 800025a:	fbbc f8fa 	udiv	r8, ip, sl
 800025e:	fa1f f987 	uxth.w	r9, r7
 8000262:	fb0a cc18 	mls	ip, sl, r8, ip
 8000266:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026a:	fb08 f309 	mul.w	r3, r8, r9
 800026e:	42ab      	cmp	r3, r5
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x6c>
 8000272:	19ed      	adds	r5, r5, r7
 8000274:	f108 32ff 	add.w	r2, r8, #4294967295
 8000278:	f080 8123 	bcs.w	80004c2 <__udivmoddi4+0x2a6>
 800027c:	42ab      	cmp	r3, r5
 800027e:	f240 8120 	bls.w	80004c2 <__udivmoddi4+0x2a6>
 8000282:	f1a8 0802 	sub.w	r8, r8, #2
 8000286:	443d      	add	r5, r7
 8000288:	1aed      	subs	r5, r5, r3
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000290:	fb0a 5510 	mls	r5, sl, r0, r5
 8000294:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000298:	fb00 f909 	mul.w	r9, r0, r9
 800029c:	45a1      	cmp	r9, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x98>
 80002a0:	19e4      	adds	r4, r4, r7
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a6:	f080 810a 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80002aa:	45a1      	cmp	r9, r4
 80002ac:	f240 8107 	bls.w	80004be <__udivmoddi4+0x2a2>
 80002b0:	3802      	subs	r0, #2
 80002b2:	443c      	add	r4, r7
 80002b4:	eba4 0409 	sub.w	r4, r4, r9
 80002b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002bc:	2100      	movs	r1, #0
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d061      	beq.n	8000386 <__udivmoddi4+0x16a>
 80002c2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002c6:	2300      	movs	r3, #0
 80002c8:	6034      	str	r4, [r6, #0]
 80002ca:	6073      	str	r3, [r6, #4]
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xc8>
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d054      	beq.n	8000382 <__udivmoddi4+0x166>
 80002d8:	2100      	movs	r1, #0
 80002da:	e886 0021 	stmia.w	r6, {r0, r5}
 80002de:	4608      	mov	r0, r1
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	fab3 f183 	clz	r1, r3
 80002e8:	2900      	cmp	r1, #0
 80002ea:	f040 808e 	bne.w	800040a <__udivmoddi4+0x1ee>
 80002ee:	42ab      	cmp	r3, r5
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xdc>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2d0>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb65 0503 	sbc.w	r5, r5, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	46ac      	mov	ip, r5
 8000302:	2e00      	cmp	r6, #0
 8000304:	d03f      	beq.n	8000386 <__udivmoddi4+0x16a>
 8000306:	e886 1010 	stmia.w	r6, {r4, ip}
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b912      	cbnz	r2, 8000316 <__udivmoddi4+0xfa>
 8000310:	2701      	movs	r7, #1
 8000312:	fbb7 f7f2 	udiv	r7, r7, r2
 8000316:	fab7 fe87 	clz	lr, r7
 800031a:	f1be 0f00 	cmp.w	lr, #0
 800031e:	d134      	bne.n	800038a <__udivmoddi4+0x16e>
 8000320:	1beb      	subs	r3, r5, r7
 8000322:	0c3a      	lsrs	r2, r7, #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb3 f8f2 	udiv	r8, r3, r2
 800032e:	0c25      	lsrs	r5, r4, #16
 8000330:	fb02 3318 	mls	r3, r2, r8, r3
 8000334:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000338:	fb0c f308 	mul.w	r3, ip, r8
 800033c:	42ab      	cmp	r3, r5
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x134>
 8000340:	19ed      	adds	r5, r5, r7
 8000342:	f108 30ff 	add.w	r0, r8, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x132>
 8000348:	42ab      	cmp	r3, r5
 800034a:	f200 80d1 	bhi.w	80004f0 <__udivmoddi4+0x2d4>
 800034e:	4680      	mov	r8, r0
 8000350:	1aed      	subs	r5, r5, r3
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb5 f0f2 	udiv	r0, r5, r2
 8000358:	fb02 5510 	mls	r5, r2, r0, r5
 800035c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000360:	fb0c fc00 	mul.w	ip, ip, r0
 8000364:	45a4      	cmp	ip, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x15c>
 8000368:	19e4      	adds	r4, r4, r7
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x15a>
 8000370:	45a4      	cmp	ip, r4
 8000372:	f200 80b8 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 040c 	sub.w	r4, r4, ip
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	e79d      	b.n	80002be <__udivmoddi4+0xa2>
 8000382:	4631      	mov	r1, r6
 8000384:	4630      	mov	r0, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	f1ce 0420 	rsb	r4, lr, #32
 800038e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000392:	fa07 f70e 	lsl.w	r7, r7, lr
 8000396:	fa20 f804 	lsr.w	r8, r0, r4
 800039a:	0c3a      	lsrs	r2, r7, #16
 800039c:	fa25 f404 	lsr.w	r4, r5, r4
 80003a0:	ea48 0803 	orr.w	r8, r8, r3
 80003a4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ac:	fb02 4411 	mls	r4, r2, r1, r4
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b8:	fb01 f30c 	mul.w	r3, r1, ip
 80003bc:	42ab      	cmp	r3, r5
 80003be:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1bc>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ca:	f080 808a 	bcs.w	80004e2 <__udivmoddi4+0x2c6>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	f240 8087 	bls.w	80004e2 <__udivmoddi4+0x2c6>
 80003d4:	3902      	subs	r1, #2
 80003d6:	443d      	add	r5, r7
 80003d8:	1aeb      	subs	r3, r5, r3
 80003da:	fa1f f588 	uxth.w	r5, r8
 80003de:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e2:	fb02 3310 	mls	r3, r2, r0, r3
 80003e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ea:	fb00 f30c 	mul.w	r3, r0, ip
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1e6>
 80003f2:	19ed      	adds	r5, r5, r7
 80003f4:	f100 38ff 	add.w	r8, r0, #4294967295
 80003f8:	d26f      	bcs.n	80004da <__udivmoddi4+0x2be>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d96d      	bls.n	80004da <__udivmoddi4+0x2be>
 80003fe:	3802      	subs	r0, #2
 8000400:	443d      	add	r5, r7
 8000402:	1aeb      	subs	r3, r5, r3
 8000404:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000408:	e78f      	b.n	800032a <__udivmoddi4+0x10e>
 800040a:	f1c1 0720 	rsb	r7, r1, #32
 800040e:	fa22 f807 	lsr.w	r8, r2, r7
 8000412:	408b      	lsls	r3, r1
 8000414:	fa05 f401 	lsl.w	r4, r5, r1
 8000418:	ea48 0303 	orr.w	r3, r8, r3
 800041c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000420:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000424:	40fd      	lsrs	r5, r7
 8000426:	ea4e 0e04 	orr.w	lr, lr, r4
 800042a:	fbb5 f9fc 	udiv	r9, r5, ip
 800042e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000432:	fb0c 5519 	mls	r5, ip, r9, r5
 8000436:	fa1f f883 	uxth.w	r8, r3
 800043a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800043e:	fb09 f408 	mul.w	r4, r9, r8
 8000442:	42ac      	cmp	r4, r5
 8000444:	fa02 f201 	lsl.w	r2, r2, r1
 8000448:	fa00 fa01 	lsl.w	sl, r0, r1
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x244>
 800044e:	18ed      	adds	r5, r5, r3
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d243      	bcs.n	80004de <__udivmoddi4+0x2c2>
 8000456:	42ac      	cmp	r4, r5
 8000458:	d941      	bls.n	80004de <__udivmoddi4+0x2c2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	441d      	add	r5, r3
 8000460:	1b2d      	subs	r5, r5, r4
 8000462:	fa1f fe8e 	uxth.w	lr, lr
 8000466:	fbb5 f0fc 	udiv	r0, r5, ip
 800046a:	fb0c 5510 	mls	r5, ip, r0, r5
 800046e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45a0      	cmp	r8, r4
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x26e>
 800047a:	18e4      	adds	r4, r4, r3
 800047c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000480:	d229      	bcs.n	80004d6 <__udivmoddi4+0x2ba>
 8000482:	45a0      	cmp	r8, r4
 8000484:	d927      	bls.n	80004d6 <__udivmoddi4+0x2ba>
 8000486:	3802      	subs	r0, #2
 8000488:	441c      	add	r4, r3
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba4 0408 	sub.w	r4, r4, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454c      	cmp	r4, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	464d      	mov	r5, r9
 800049c:	d315      	bcc.n	80004ca <__udivmoddi4+0x2ae>
 800049e:	d012      	beq.n	80004c6 <__udivmoddi4+0x2aa>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x29c>
 80004a2:	ebba 030e 	subs.w	r3, sl, lr
 80004a6:	eb64 0405 	sbc.w	r4, r4, r5
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40cb      	lsrs	r3, r1
 80004b0:	431f      	orrs	r7, r3
 80004b2:	40cc      	lsrs	r4, r1
 80004b4:	6037      	str	r7, [r6, #0]
 80004b6:	6074      	str	r4, [r6, #4]
 80004b8:	2100      	movs	r1, #0
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	4618      	mov	r0, r3
 80004c0:	e6f8      	b.n	80002b4 <__udivmoddi4+0x98>
 80004c2:	4690      	mov	r8, r2
 80004c4:	e6e0      	b.n	8000288 <__udivmoddi4+0x6c>
 80004c6:	45c2      	cmp	sl, r8
 80004c8:	d2ea      	bcs.n	80004a0 <__udivmoddi4+0x284>
 80004ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ce:	eb69 0503 	sbc.w	r5, r9, r3
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7e4      	b.n	80004a0 <__udivmoddi4+0x284>
 80004d6:	4628      	mov	r0, r5
 80004d8:	e7d7      	b.n	800048a <__udivmoddi4+0x26e>
 80004da:	4640      	mov	r0, r8
 80004dc:	e791      	b.n	8000402 <__udivmoddi4+0x1e6>
 80004de:	4681      	mov	r9, r0
 80004e0:	e7be      	b.n	8000460 <__udivmoddi4+0x244>
 80004e2:	4601      	mov	r1, r0
 80004e4:	e778      	b.n	80003d8 <__udivmoddi4+0x1bc>
 80004e6:	3802      	subs	r0, #2
 80004e8:	443c      	add	r4, r7
 80004ea:	e745      	b.n	8000378 <__udivmoddi4+0x15c>
 80004ec:	4608      	mov	r0, r1
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xe6>
 80004f0:	f1a8 0802 	sub.w	r8, r8, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	e72b      	b.n	8000350 <__udivmoddi4+0x134>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004fc:	b510      	push	{r4, lr}
 80004fe:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_InitTick+0x40>)
 8000502:	7818      	ldrb	r0, [r3, #0]
 8000504:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000508:	fbb3 f3f0 	udiv	r3, r3, r0
 800050c:	4a0c      	ldr	r2, [pc, #48]	; (8000540 <HAL_InitTick+0x44>)
 800050e:	6810      	ldr	r0, [r2, #0]
 8000510:	fbb0 f0f3 	udiv	r0, r0, r3
 8000514:	f000 f888 	bl	8000628 <HAL_SYSTICK_Config>
 8000518:	b968      	cbnz	r0, 8000536 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800051a:	2c0f      	cmp	r4, #15
 800051c:	d901      	bls.n	8000522 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800051e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000520:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000522:	2200      	movs	r2, #0
 8000524:	4621      	mov	r1, r4
 8000526:	f04f 30ff 	mov.w	r0, #4294967295
 800052a:	f000 f84b 	bl	80005c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800052e:	4b05      	ldr	r3, [pc, #20]	; (8000544 <HAL_InitTick+0x48>)
 8000530:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000532:	2000      	movs	r0, #0
 8000534:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000536:	2001      	movs	r0, #1
 8000538:	bd10      	pop	{r4, pc}
 800053a:	bf00      	nop
 800053c:	20000000 	.word	0x20000000
 8000540:	20000008 	.word	0x20000008
 8000544:	20000004 	.word	0x20000004

08000548 <HAL_Init>:
{
 8000548:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800054a:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <HAL_Init+0x30>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000552:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800055a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000562:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000564:	2003      	movs	r0, #3
 8000566:	f000 f81b 	bl	80005a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800056a:	2000      	movs	r0, #0
 800056c:	f7ff ffc6 	bl	80004fc <HAL_InitTick>
  HAL_MspInit();
 8000570:	f001 f816 	bl	80015a0 <HAL_MspInit>
}
 8000574:	2000      	movs	r0, #0
 8000576:	bd08      	pop	{r3, pc}
 8000578:	40023c00 	.word	0x40023c00

0800057c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800057c:	4a03      	ldr	r2, [pc, #12]	; (800058c <HAL_IncTick+0x10>)
 800057e:	6811      	ldr	r1, [r2, #0]
 8000580:	4b03      	ldr	r3, [pc, #12]	; (8000590 <HAL_IncTick+0x14>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	440b      	add	r3, r1
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000028 	.word	0x20000028
 8000590:	20000000 	.word	0x20000000

08000594 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000594:	4b01      	ldr	r3, [pc, #4]	; (800059c <HAL_GetTick+0x8>)
 8000596:	6818      	ldr	r0, [r3, #0]
}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000028 	.word	0x20000028

080005a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005a2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005a8:	041b      	lsls	r3, r3, #16
 80005aa:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005ac:	0200      	lsls	r0, r0, #8
 80005ae:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005b2:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80005b4:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80005b8:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80005bc:	60d0      	str	r0, [r2, #12]
 80005be:	4770      	bx	lr
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005c4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005c6:	4b16      	ldr	r3, [pc, #88]	; (8000620 <HAL_NVIC_SetPriority+0x5c>)
 80005c8:	68db      	ldr	r3, [r3, #12]
 80005ca:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ce:	f1c3 0407 	rsb	r4, r3, #7
 80005d2:	2c04      	cmp	r4, #4
 80005d4:	bf28      	it	cs
 80005d6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d8:	1d1d      	adds	r5, r3, #4
 80005da:	2d06      	cmp	r5, #6
 80005dc:	d917      	bls.n	800060e <HAL_NVIC_SetPriority+0x4a>
 80005de:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e0:	2501      	movs	r5, #1
 80005e2:	fa05 f404 	lsl.w	r4, r5, r4
 80005e6:	3c01      	subs	r4, #1
 80005e8:	4021      	ands	r1, r4
 80005ea:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005ec:	fa05 f303 	lsl.w	r3, r5, r3
 80005f0:	3b01      	subs	r3, #1
 80005f2:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f4:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80005f6:	2800      	cmp	r0, #0
 80005f8:	db0b      	blt.n	8000612 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fa:	0109      	lsls	r1, r1, #4
 80005fc:	b2c9      	uxtb	r1, r1
 80005fe:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000602:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000606:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800060a:	bc30      	pop	{r4, r5}
 800060c:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800060e:	2300      	movs	r3, #0
 8000610:	e7e6      	b.n	80005e0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000612:	f000 000f 	and.w	r0, r0, #15
 8000616:	0109      	lsls	r1, r1, #4
 8000618:	b2c9      	uxtb	r1, r1
 800061a:	4b02      	ldr	r3, [pc, #8]	; (8000624 <HAL_NVIC_SetPriority+0x60>)
 800061c:	5419      	strb	r1, [r3, r0]
 800061e:	e7f4      	b.n	800060a <HAL_NVIC_SetPriority+0x46>
 8000620:	e000ed00 	.word	0xe000ed00
 8000624:	e000ed14 	.word	0xe000ed14

08000628 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000628:	3801      	subs	r0, #1
 800062a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800062e:	d20a      	bcs.n	8000646 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <HAL_SYSTICK_Config+0x24>)
 8000632:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000634:	21f0      	movs	r1, #240	; 0xf0
 8000636:	4a06      	ldr	r2, [pc, #24]	; (8000650 <HAL_SYSTICK_Config+0x28>)
 8000638:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800063c:	2000      	movs	r0, #0
 800063e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000640:	2207      	movs	r2, #7
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000646:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	e000e010 	.word	0xe000e010
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000656:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000658:	2400      	movs	r4, #0
 800065a:	e04b      	b.n	80006f4 <HAL_GPIO_Init+0xa0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800065c:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8000660:	f10e 0e08 	add.w	lr, lr, #8
 8000664:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000668:	f004 0607 	and.w	r6, r4, #7
 800066c:	00b6      	lsls	r6, r6, #2
 800066e:	270f      	movs	r7, #15
 8000670:	40b7      	lsls	r7, r6
 8000672:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000676:	690f      	ldr	r7, [r1, #16]
 8000678:	fa07 f606 	lsl.w	r6, r7, r6
 800067c:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 800067e:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 8000682:	e046      	b.n	8000712 <HAL_GPIO_Init+0xbe>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000684:	2609      	movs	r6, #9
 8000686:	e000      	b.n	800068a <HAL_GPIO_Init+0x36>
 8000688:	2600      	movs	r6, #0
 800068a:	fa06 f60e 	lsl.w	r6, r6, lr
 800068e:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000690:	3302      	adds	r3, #2
 8000692:	4e64      	ldr	r6, [pc, #400]	; (8000824 <HAL_GPIO_Init+0x1d0>)
 8000694:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000698:	4b63      	ldr	r3, [pc, #396]	; (8000828 <HAL_GPIO_Init+0x1d4>)
 800069a:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 800069c:	43eb      	mvns	r3, r5
 800069e:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006a2:	684f      	ldr	r7, [r1, #4]
 80006a4:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80006a8:	d001      	beq.n	80006ae <HAL_GPIO_Init+0x5a>
        {
          temp |= iocurrent;
 80006aa:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 80006ae:	4a5e      	ldr	r2, [pc, #376]	; (8000828 <HAL_GPIO_Init+0x1d4>)
 80006b0:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80006b2:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80006b4:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006b8:	684f      	ldr	r7, [r1, #4]
 80006ba:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80006be:	d001      	beq.n	80006c4 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 80006c0:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 80006c4:	4a58      	ldr	r2, [pc, #352]	; (8000828 <HAL_GPIO_Init+0x1d4>)
 80006c6:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006c8:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80006ca:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006ce:	684f      	ldr	r7, [r1, #4]
 80006d0:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80006d4:	d001      	beq.n	80006da <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 80006d6:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 80006da:	4a53      	ldr	r2, [pc, #332]	; (8000828 <HAL_GPIO_Init+0x1d4>)
 80006dc:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80006de:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80006e0:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006e2:	684e      	ldr	r6, [r1, #4]
 80006e4:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80006e8:	d001      	beq.n	80006ee <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 80006ea:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 80006ee:	4a4e      	ldr	r2, [pc, #312]	; (8000828 <HAL_GPIO_Init+0x1d4>)
 80006f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006f2:	3401      	adds	r4, #1
 80006f4:	2c0f      	cmp	r4, #15
 80006f6:	f200 8092 	bhi.w	800081e <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 80006fa:	2301      	movs	r3, #1
 80006fc:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006fe:	680a      	ldr	r2, [r1, #0]
 8000700:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 8000704:	42ab      	cmp	r3, r5
 8000706:	d1f4      	bne.n	80006f2 <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000708:	684a      	ldr	r2, [r1, #4]
 800070a:	2a02      	cmp	r2, #2
 800070c:	d0a6      	beq.n	800065c <HAL_GPIO_Init+0x8>
 800070e:	2a12      	cmp	r2, #18
 8000710:	d0a4      	beq.n	800065c <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8000712:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000714:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8000718:	2203      	movs	r2, #3
 800071a:	fa02 f20e 	lsl.w	r2, r2, lr
 800071e:	43d2      	mvns	r2, r2
 8000720:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000722:	684f      	ldr	r7, [r1, #4]
 8000724:	f007 0703 	and.w	r7, r7, #3
 8000728:	fa07 f70e 	lsl.w	r7, r7, lr
 800072c:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 800072e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000730:	684e      	ldr	r6, [r1, #4]
 8000732:	1e77      	subs	r7, r6, #1
 8000734:	2f01      	cmp	r7, #1
 8000736:	d903      	bls.n	8000740 <HAL_GPIO_Init+0xec>
 8000738:	2e11      	cmp	r6, #17
 800073a:	d001      	beq.n	8000740 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800073c:	2e12      	cmp	r6, #18
 800073e:	d10f      	bne.n	8000760 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->OSPEEDR; 
 8000740:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000742:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000744:	68cf      	ldr	r7, [r1, #12]
 8000746:	fa07 f70e 	lsl.w	r7, r7, lr
 800074a:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800074c:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800074e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000750:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000754:	684e      	ldr	r6, [r1, #4]
 8000756:	f3c6 1600 	ubfx	r6, r6, #4, #1
 800075a:	40a6      	lsls	r6, r4
 800075c:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 800075e:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8000760:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000762:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000764:	688b      	ldr	r3, [r1, #8]
 8000766:	fa03 f30e 	lsl.w	r3, r3, lr
 800076a:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 800076c:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800076e:	684b      	ldr	r3, [r1, #4]
 8000770:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000774:	d0bd      	beq.n	80006f2 <HAL_GPIO_Init+0x9e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	9301      	str	r3, [sp, #4]
 800077a:	4b2c      	ldr	r3, [pc, #176]	; (800082c <HAL_GPIO_Init+0x1d8>)
 800077c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800077e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000782:	645a      	str	r2, [r3, #68]	; 0x44
 8000784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800078a:	9301      	str	r3, [sp, #4]
 800078c:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800078e:	08a3      	lsrs	r3, r4, #2
 8000790:	1c9e      	adds	r6, r3, #2
 8000792:	4a24      	ldr	r2, [pc, #144]	; (8000824 <HAL_GPIO_Init+0x1d0>)
 8000794:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000798:	f004 0603 	and.w	r6, r4, #3
 800079c:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 80007a0:	260f      	movs	r6, #15
 80007a2:	fa06 f60e 	lsl.w	r6, r6, lr
 80007a6:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007aa:	4f21      	ldr	r7, [pc, #132]	; (8000830 <HAL_GPIO_Init+0x1dc>)
 80007ac:	42b8      	cmp	r0, r7
 80007ae:	f43f af6b 	beq.w	8000688 <HAL_GPIO_Init+0x34>
 80007b2:	4e20      	ldr	r6, [pc, #128]	; (8000834 <HAL_GPIO_Init+0x1e0>)
 80007b4:	42b0      	cmp	r0, r6
 80007b6:	d022      	beq.n	80007fe <HAL_GPIO_Init+0x1aa>
 80007b8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007bc:	42b0      	cmp	r0, r6
 80007be:	d020      	beq.n	8000802 <HAL_GPIO_Init+0x1ae>
 80007c0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007c4:	42b0      	cmp	r0, r6
 80007c6:	d01e      	beq.n	8000806 <HAL_GPIO_Init+0x1b2>
 80007c8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007cc:	42b0      	cmp	r0, r6
 80007ce:	d01c      	beq.n	800080a <HAL_GPIO_Init+0x1b6>
 80007d0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007d4:	42b0      	cmp	r0, r6
 80007d6:	d01a      	beq.n	800080e <HAL_GPIO_Init+0x1ba>
 80007d8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007dc:	42b0      	cmp	r0, r6
 80007de:	d018      	beq.n	8000812 <HAL_GPIO_Init+0x1be>
 80007e0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007e4:	42b0      	cmp	r0, r6
 80007e6:	d016      	beq.n	8000816 <HAL_GPIO_Init+0x1c2>
 80007e8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007ec:	42b0      	cmp	r0, r6
 80007ee:	d014      	beq.n	800081a <HAL_GPIO_Init+0x1c6>
 80007f0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007f4:	42b0      	cmp	r0, r6
 80007f6:	f43f af45 	beq.w	8000684 <HAL_GPIO_Init+0x30>
 80007fa:	260a      	movs	r6, #10
 80007fc:	e745      	b.n	800068a <HAL_GPIO_Init+0x36>
 80007fe:	2601      	movs	r6, #1
 8000800:	e743      	b.n	800068a <HAL_GPIO_Init+0x36>
 8000802:	2602      	movs	r6, #2
 8000804:	e741      	b.n	800068a <HAL_GPIO_Init+0x36>
 8000806:	2603      	movs	r6, #3
 8000808:	e73f      	b.n	800068a <HAL_GPIO_Init+0x36>
 800080a:	2604      	movs	r6, #4
 800080c:	e73d      	b.n	800068a <HAL_GPIO_Init+0x36>
 800080e:	2605      	movs	r6, #5
 8000810:	e73b      	b.n	800068a <HAL_GPIO_Init+0x36>
 8000812:	2606      	movs	r6, #6
 8000814:	e739      	b.n	800068a <HAL_GPIO_Init+0x36>
 8000816:	2607      	movs	r6, #7
 8000818:	e737      	b.n	800068a <HAL_GPIO_Init+0x36>
 800081a:	2608      	movs	r6, #8
 800081c:	e735      	b.n	800068a <HAL_GPIO_Init+0x36>
      }
    }
  }
}
 800081e:	b003      	add	sp, #12
 8000820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000822:	bf00      	nop
 8000824:	40013800 	.word	0x40013800
 8000828:	40013c00 	.word	0x40013c00
 800082c:	40023800 	.word	0x40023800
 8000830:	40020000 	.word	0x40020000
 8000834:	40020400 	.word	0x40020400

08000838 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000838:	b912      	cbnz	r2, 8000840 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800083a:	0409      	lsls	r1, r1, #16
 800083c:	6181      	str	r1, [r0, #24]
 800083e:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000840:	6181      	str	r1, [r0, #24]
 8000842:	4770      	bx	lr

08000844 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000844:	6943      	ldr	r3, [r0, #20]
 8000846:	ea31 0303 	bics.w	r3, r1, r3
 800084a:	d001      	beq.n	8000850 <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 800084c:	6181      	str	r1, [r0, #24]
 800084e:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000850:	0409      	lsls	r1, r1, #16
 8000852:	6181      	str	r1, [r0, #24]
 8000854:	4770      	bx	lr
	...

08000858 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000858:	2800      	cmp	r0, #0
 800085a:	f000 81bb 	beq.w	8000bd4 <HAL_RCC_OscConfig+0x37c>
{
 800085e:	b570      	push	{r4, r5, r6, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000864:	6803      	ldr	r3, [r0, #0]
 8000866:	f013 0f01 	tst.w	r3, #1
 800086a:	d03b      	beq.n	80008e4 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800086c:	4ba7      	ldr	r3, [pc, #668]	; (8000b0c <HAL_RCC_OscConfig+0x2b4>)
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	f003 030c 	and.w	r3, r3, #12
 8000874:	2b04      	cmp	r3, #4
 8000876:	d02c      	beq.n	80008d2 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000878:	4ba4      	ldr	r3, [pc, #656]	; (8000b0c <HAL_RCC_OscConfig+0x2b4>)
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000880:	2b08      	cmp	r3, #8
 8000882:	d021      	beq.n	80008c8 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000884:	6863      	ldr	r3, [r4, #4]
 8000886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800088a:	d04f      	beq.n	800092c <HAL_RCC_OscConfig+0xd4>
 800088c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000890:	d052      	beq.n	8000938 <HAL_RCC_OscConfig+0xe0>
 8000892:	4b9e      	ldr	r3, [pc, #632]	; (8000b0c <HAL_RCC_OscConfig+0x2b4>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80008a2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80008a4:	6863      	ldr	r3, [r4, #4]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d050      	beq.n	800094c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008aa:	f7ff fe73 	bl	8000594 <HAL_GetTick>
 80008ae:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008b0:	4b96      	ldr	r3, [pc, #600]	; (8000b0c <HAL_RCC_OscConfig+0x2b4>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80008b8:	d114      	bne.n	80008e4 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008ba:	f7ff fe6b 	bl	8000594 <HAL_GetTick>
 80008be:	1b40      	subs	r0, r0, r5
 80008c0:	2864      	cmp	r0, #100	; 0x64
 80008c2:	d9f5      	bls.n	80008b0 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80008c4:	2003      	movs	r0, #3
 80008c6:	e18a      	b.n	8000bde <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008c8:	4b90      	ldr	r3, [pc, #576]	; (8000b0c <HAL_RCC_OscConfig+0x2b4>)
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80008d0:	d0d8      	beq.n	8000884 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008d2:	4b8e      	ldr	r3, [pc, #568]	; (8000b0c <HAL_RCC_OscConfig+0x2b4>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80008da:	d003      	beq.n	80008e4 <HAL_RCC_OscConfig+0x8c>
 80008dc:	6863      	ldr	r3, [r4, #4]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	f000 817a 	beq.w	8000bd8 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008e4:	6823      	ldr	r3, [r4, #0]
 80008e6:	f013 0f02 	tst.w	r3, #2
 80008ea:	d055      	beq.n	8000998 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008ec:	4b87      	ldr	r3, [pc, #540]	; (8000b0c <HAL_RCC_OscConfig+0x2b4>)
 80008ee:	689b      	ldr	r3, [r3, #8]
 80008f0:	f013 0f0c 	tst.w	r3, #12
 80008f4:	d03e      	beq.n	8000974 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008f6:	4b85      	ldr	r3, [pc, #532]	; (8000b0c <HAL_RCC_OscConfig+0x2b4>)
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008fe:	2b08      	cmp	r3, #8
 8000900:	d033      	beq.n	800096a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000902:	68e3      	ldr	r3, [r4, #12]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d068      	beq.n	80009da <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000908:	2201      	movs	r2, #1
 800090a:	4b81      	ldr	r3, [pc, #516]	; (8000b10 <HAL_RCC_OscConfig+0x2b8>)
 800090c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800090e:	f7ff fe41 	bl	8000594 <HAL_GetTick>
 8000912:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000914:	4b7d      	ldr	r3, [pc, #500]	; (8000b0c <HAL_RCC_OscConfig+0x2b4>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f013 0f02 	tst.w	r3, #2
 800091c:	d154      	bne.n	80009c8 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800091e:	f7ff fe39 	bl	8000594 <HAL_GetTick>
 8000922:	1b40      	subs	r0, r0, r5
 8000924:	2802      	cmp	r0, #2
 8000926:	d9f5      	bls.n	8000914 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000928:	2003      	movs	r0, #3
 800092a:	e158      	b.n	8000bde <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800092c:	4a77      	ldr	r2, [pc, #476]	; (8000b0c <HAL_RCC_OscConfig+0x2b4>)
 800092e:	6813      	ldr	r3, [r2, #0]
 8000930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000934:	6013      	str	r3, [r2, #0]
 8000936:	e7b5      	b.n	80008a4 <HAL_RCC_OscConfig+0x4c>
 8000938:	4b74      	ldr	r3, [pc, #464]	; (8000b0c <HAL_RCC_OscConfig+0x2b4>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	e7ab      	b.n	80008a4 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 800094c:	f7ff fe22 	bl	8000594 <HAL_GetTick>
 8000950:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000952:	4b6e      	ldr	r3, [pc, #440]	; (8000b0c <HAL_RCC_OscConfig+0x2b4>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800095a:	d0c3      	beq.n	80008e4 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800095c:	f7ff fe1a 	bl	8000594 <HAL_GetTick>
 8000960:	1b40      	subs	r0, r0, r5
 8000962:	2864      	cmp	r0, #100	; 0x64
 8000964:	d9f5      	bls.n	8000952 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8000966:	2003      	movs	r0, #3
 8000968:	e139      	b.n	8000bde <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800096a:	4b68      	ldr	r3, [pc, #416]	; (8000b0c <HAL_RCC_OscConfig+0x2b4>)
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000972:	d1c6      	bne.n	8000902 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000974:	4b65      	ldr	r3, [pc, #404]	; (8000b0c <HAL_RCC_OscConfig+0x2b4>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f013 0f02 	tst.w	r3, #2
 800097c:	d004      	beq.n	8000988 <HAL_RCC_OscConfig+0x130>
 800097e:	68e3      	ldr	r3, [r4, #12]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d001      	beq.n	8000988 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8000984:	2001      	movs	r0, #1
 8000986:	e12a      	b.n	8000bde <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000988:	4a60      	ldr	r2, [pc, #384]	; (8000b0c <HAL_RCC_OscConfig+0x2b4>)
 800098a:	6813      	ldr	r3, [r2, #0]
 800098c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000990:	6921      	ldr	r1, [r4, #16]
 8000992:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000996:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000998:	6823      	ldr	r3, [r4, #0]
 800099a:	f013 0f08 	tst.w	r3, #8
 800099e:	d040      	beq.n	8000a22 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009a0:	6963      	ldr	r3, [r4, #20]
 80009a2:	b363      	cbz	r3, 80009fe <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009a4:	2201      	movs	r2, #1
 80009a6:	4b5b      	ldr	r3, [pc, #364]	; (8000b14 <HAL_RCC_OscConfig+0x2bc>)
 80009a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80009aa:	f7ff fdf3 	bl	8000594 <HAL_GetTick>
 80009ae:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009b0:	4b56      	ldr	r3, [pc, #344]	; (8000b0c <HAL_RCC_OscConfig+0x2b4>)
 80009b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009b4:	f013 0f02 	tst.w	r3, #2
 80009b8:	d133      	bne.n	8000a22 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009ba:	f7ff fdeb 	bl	8000594 <HAL_GetTick>
 80009be:	1b40      	subs	r0, r0, r5
 80009c0:	2802      	cmp	r0, #2
 80009c2:	d9f5      	bls.n	80009b0 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80009c4:	2003      	movs	r0, #3
 80009c6:	e10a      	b.n	8000bde <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009c8:	4a50      	ldr	r2, [pc, #320]	; (8000b0c <HAL_RCC_OscConfig+0x2b4>)
 80009ca:	6813      	ldr	r3, [r2, #0]
 80009cc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009d0:	6921      	ldr	r1, [r4, #16]
 80009d2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80009d6:	6013      	str	r3, [r2, #0]
 80009d8:	e7de      	b.n	8000998 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 80009da:	2200      	movs	r2, #0
 80009dc:	4b4c      	ldr	r3, [pc, #304]	; (8000b10 <HAL_RCC_OscConfig+0x2b8>)
 80009de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009e0:	f7ff fdd8 	bl	8000594 <HAL_GetTick>
 80009e4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009e6:	4b49      	ldr	r3, [pc, #292]	; (8000b0c <HAL_RCC_OscConfig+0x2b4>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f013 0f02 	tst.w	r3, #2
 80009ee:	d0d3      	beq.n	8000998 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009f0:	f7ff fdd0 	bl	8000594 <HAL_GetTick>
 80009f4:	1b40      	subs	r0, r0, r5
 80009f6:	2802      	cmp	r0, #2
 80009f8:	d9f5      	bls.n	80009e6 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80009fa:	2003      	movs	r0, #3
 80009fc:	e0ef      	b.n	8000bde <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009fe:	2200      	movs	r2, #0
 8000a00:	4b44      	ldr	r3, [pc, #272]	; (8000b14 <HAL_RCC_OscConfig+0x2bc>)
 8000a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a04:	f7ff fdc6 	bl	8000594 <HAL_GetTick>
 8000a08:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a0a:	4b40      	ldr	r3, [pc, #256]	; (8000b0c <HAL_RCC_OscConfig+0x2b4>)
 8000a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a0e:	f013 0f02 	tst.w	r3, #2
 8000a12:	d006      	beq.n	8000a22 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a14:	f7ff fdbe 	bl	8000594 <HAL_GetTick>
 8000a18:	1b40      	subs	r0, r0, r5
 8000a1a:	2802      	cmp	r0, #2
 8000a1c:	d9f5      	bls.n	8000a0a <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8000a1e:	2003      	movs	r0, #3
 8000a20:	e0dd      	b.n	8000bde <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a22:	6823      	ldr	r3, [r4, #0]
 8000a24:	f013 0f04 	tst.w	r3, #4
 8000a28:	d079      	beq.n	8000b1e <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a2a:	4b38      	ldr	r3, [pc, #224]	; (8000b0c <HAL_RCC_OscConfig+0x2b4>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000a32:	d133      	bne.n	8000a9c <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a34:	2300      	movs	r3, #0
 8000a36:	9301      	str	r3, [sp, #4]
 8000a38:	4b34      	ldr	r3, [pc, #208]	; (8000b0c <HAL_RCC_OscConfig+0x2b4>)
 8000a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a3c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a40:	641a      	str	r2, [r3, #64]	; 0x40
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a48:	9301      	str	r3, [sp, #4]
 8000a4a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a4c:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a4e:	4b32      	ldr	r3, [pc, #200]	; (8000b18 <HAL_RCC_OscConfig+0x2c0>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000a56:	d023      	beq.n	8000aa0 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a58:	68a3      	ldr	r3, [r4, #8]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d034      	beq.n	8000ac8 <HAL_RCC_OscConfig+0x270>
 8000a5e:	2b05      	cmp	r3, #5
 8000a60:	d038      	beq.n	8000ad4 <HAL_RCC_OscConfig+0x27c>
 8000a62:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <HAL_RCC_OscConfig+0x2b4>)
 8000a64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000a66:	f022 0201 	bic.w	r2, r2, #1
 8000a6a:	671a      	str	r2, [r3, #112]	; 0x70
 8000a6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000a6e:	f022 0204 	bic.w	r2, r2, #4
 8000a72:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a74:	68a3      	ldr	r3, [r4, #8]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d036      	beq.n	8000ae8 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a7a:	f7ff fd8b 	bl	8000594 <HAL_GetTick>
 8000a7e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a80:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <HAL_RCC_OscConfig+0x2b4>)
 8000a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a84:	f013 0f02 	tst.w	r3, #2
 8000a88:	d148      	bne.n	8000b1c <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a8a:	f7ff fd83 	bl	8000594 <HAL_GetTick>
 8000a8e:	1b80      	subs	r0, r0, r6
 8000a90:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a94:	4298      	cmp	r0, r3
 8000a96:	d9f3      	bls.n	8000a80 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8000a98:	2003      	movs	r0, #3
 8000a9a:	e0a0      	b.n	8000bde <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8000a9c:	2500      	movs	r5, #0
 8000a9e:	e7d6      	b.n	8000a4e <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000aa0:	4a1d      	ldr	r2, [pc, #116]	; (8000b18 <HAL_RCC_OscConfig+0x2c0>)
 8000aa2:	6813      	ldr	r3, [r2, #0]
 8000aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000aaa:	f7ff fd73 	bl	8000594 <HAL_GetTick>
 8000aae:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ab0:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <HAL_RCC_OscConfig+0x2c0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000ab8:	d1ce      	bne.n	8000a58 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000aba:	f7ff fd6b 	bl	8000594 <HAL_GetTick>
 8000abe:	1b80      	subs	r0, r0, r6
 8000ac0:	2802      	cmp	r0, #2
 8000ac2:	d9f5      	bls.n	8000ab0 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	e08a      	b.n	8000bde <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ac8:	4a10      	ldr	r2, [pc, #64]	; (8000b0c <HAL_RCC_OscConfig+0x2b4>)
 8000aca:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8000ad2:	e7cf      	b.n	8000a74 <HAL_RCC_OscConfig+0x21c>
 8000ad4:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <HAL_RCC_OscConfig+0x2b4>)
 8000ad6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000ad8:	f042 0204 	orr.w	r2, r2, #4
 8000adc:	671a      	str	r2, [r3, #112]	; 0x70
 8000ade:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000ae0:	f042 0201 	orr.w	r2, r2, #1
 8000ae4:	671a      	str	r2, [r3, #112]	; 0x70
 8000ae6:	e7c5      	b.n	8000a74 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ae8:	f7ff fd54 	bl	8000594 <HAL_GetTick>
 8000aec:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <HAL_RCC_OscConfig+0x2b4>)
 8000af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000af2:	f013 0f02 	tst.w	r3, #2
 8000af6:	d011      	beq.n	8000b1c <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000af8:	f7ff fd4c 	bl	8000594 <HAL_GetTick>
 8000afc:	1b80      	subs	r0, r0, r6
 8000afe:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b02:	4298      	cmp	r0, r3
 8000b04:	d9f3      	bls.n	8000aee <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8000b06:	2003      	movs	r0, #3
 8000b08:	e069      	b.n	8000bde <HAL_RCC_OscConfig+0x386>
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	42470000 	.word	0x42470000
 8000b14:	42470e80 	.word	0x42470e80
 8000b18:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000b1c:	b9e5      	cbnz	r5, 8000b58 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b1e:	69a3      	ldr	r3, [r4, #24]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d05b      	beq.n	8000bdc <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b24:	4a30      	ldr	r2, [pc, #192]	; (8000be8 <HAL_RCC_OscConfig+0x390>)
 8000b26:	6892      	ldr	r2, [r2, #8]
 8000b28:	f002 020c 	and.w	r2, r2, #12
 8000b2c:	2a08      	cmp	r2, #8
 8000b2e:	d058      	beq.n	8000be2 <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d017      	beq.n	8000b64 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b34:	2200      	movs	r2, #0
 8000b36:	4b2d      	ldr	r3, [pc, #180]	; (8000bec <HAL_RCC_OscConfig+0x394>)
 8000b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b3a:	f7ff fd2b 	bl	8000594 <HAL_GetTick>
 8000b3e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b40:	4b29      	ldr	r3, [pc, #164]	; (8000be8 <HAL_RCC_OscConfig+0x390>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000b48:	d042      	beq.n	8000bd0 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b4a:	f7ff fd23 	bl	8000594 <HAL_GetTick>
 8000b4e:	1b00      	subs	r0, r0, r4
 8000b50:	2802      	cmp	r0, #2
 8000b52:	d9f5      	bls.n	8000b40 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000b54:	2003      	movs	r0, #3
 8000b56:	e042      	b.n	8000bde <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b58:	4a23      	ldr	r2, [pc, #140]	; (8000be8 <HAL_RCC_OscConfig+0x390>)
 8000b5a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b60:	6413      	str	r3, [r2, #64]	; 0x40
 8000b62:	e7dc      	b.n	8000b1e <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8000b64:	2200      	movs	r2, #0
 8000b66:	4b21      	ldr	r3, [pc, #132]	; (8000bec <HAL_RCC_OscConfig+0x394>)
 8000b68:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b6a:	f7ff fd13 	bl	8000594 <HAL_GetTick>
 8000b6e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b70:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <HAL_RCC_OscConfig+0x390>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000b78:	d006      	beq.n	8000b88 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b7a:	f7ff fd0b 	bl	8000594 <HAL_GetTick>
 8000b7e:	1b40      	subs	r0, r0, r5
 8000b80:	2802      	cmp	r0, #2
 8000b82:	d9f5      	bls.n	8000b70 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8000b84:	2003      	movs	r0, #3
 8000b86:	e02a      	b.n	8000bde <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b88:	69e3      	ldr	r3, [r4, #28]
 8000b8a:	6a22      	ldr	r2, [r4, #32]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b90:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b94:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000b96:	0852      	lsrs	r2, r2, #1
 8000b98:	3a01      	subs	r2, #1
 8000b9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ba0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000ba4:	4a10      	ldr	r2, [pc, #64]	; (8000be8 <HAL_RCC_OscConfig+0x390>)
 8000ba6:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <HAL_RCC_OscConfig+0x394>)
 8000bac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bae:	f7ff fcf1 	bl	8000594 <HAL_GetTick>
 8000bb2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <HAL_RCC_OscConfig+0x390>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000bbc:	d106      	bne.n	8000bcc <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bbe:	f7ff fce9 	bl	8000594 <HAL_GetTick>
 8000bc2:	1b00      	subs	r0, r0, r4
 8000bc4:	2802      	cmp	r0, #2
 8000bc6:	d9f5      	bls.n	8000bb4 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8000bc8:	2003      	movs	r0, #3
 8000bca:	e008      	b.n	8000bde <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000bcc:	2000      	movs	r0, #0
 8000bce:	e006      	b.n	8000bde <HAL_RCC_OscConfig+0x386>
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	e004      	b.n	8000bde <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	4770      	bx	lr
        return HAL_ERROR;
 8000bd8:	2001      	movs	r0, #1
 8000bda:	e000      	b.n	8000bde <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8000bdc:	2000      	movs	r0, #0
}
 8000bde:	b002      	add	sp, #8
 8000be0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000be2:	2001      	movs	r0, #1
 8000be4:	e7fb      	b.n	8000bde <HAL_RCC_OscConfig+0x386>
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800
 8000bec:	42470060 	.word	0x42470060

08000bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bf2:	4b31      	ldr	r3, [pc, #196]	; (8000cb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	f003 030c 	and.w	r3, r3, #12
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	d059      	beq.n	8000cb2 <HAL_RCC_GetSysClockFreq+0xc2>
 8000bfe:	2b08      	cmp	r3, #8
 8000c00:	d001      	beq.n	8000c06 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000c02:	482e      	ldr	r0, [pc, #184]	; (8000cbc <HAL_RCC_GetSysClockFreq+0xcc>)
 8000c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c06:	4b2c      	ldr	r3, [pc, #176]	; (8000cb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000c08:	685a      	ldr	r2, [r3, #4]
 8000c0a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000c14:	d02a      	beq.n	8000c6c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c16:	4b28      	ldr	r3, [pc, #160]	; (8000cb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000c1e:	461e      	mov	r6, r3
 8000c20:	2700      	movs	r7, #0
 8000c22:	015c      	lsls	r4, r3, #5
 8000c24:	2500      	movs	r5, #0
 8000c26:	1ae4      	subs	r4, r4, r3
 8000c28:	eb65 0507 	sbc.w	r5, r5, r7
 8000c2c:	01a9      	lsls	r1, r5, #6
 8000c2e:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8000c32:	01a0      	lsls	r0, r4, #6
 8000c34:	1b00      	subs	r0, r0, r4
 8000c36:	eb61 0105 	sbc.w	r1, r1, r5
 8000c3a:	00cb      	lsls	r3, r1, #3
 8000c3c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000c40:	00c4      	lsls	r4, r0, #3
 8000c42:	19a0      	adds	r0, r4, r6
 8000c44:	eb43 0107 	adc.w	r1, r3, r7
 8000c48:	024b      	lsls	r3, r1, #9
 8000c4a:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8000c4e:	0244      	lsls	r4, r0, #9
 8000c50:	4620      	mov	r0, r4
 8000c52:	4619      	mov	r1, r3
 8000c54:	2300      	movs	r3, #0
 8000c56:	f7ff fac9 	bl	80001ec <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c5a:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c62:	3301      	adds	r3, #1
 8000c64:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8000c66:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8000c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000c74:	461e      	mov	r6, r3
 8000c76:	2700      	movs	r7, #0
 8000c78:	015c      	lsls	r4, r3, #5
 8000c7a:	2500      	movs	r5, #0
 8000c7c:	1ae4      	subs	r4, r4, r3
 8000c7e:	eb65 0507 	sbc.w	r5, r5, r7
 8000c82:	01a9      	lsls	r1, r5, #6
 8000c84:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8000c88:	01a0      	lsls	r0, r4, #6
 8000c8a:	1b00      	subs	r0, r0, r4
 8000c8c:	eb61 0105 	sbc.w	r1, r1, r5
 8000c90:	00cb      	lsls	r3, r1, #3
 8000c92:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000c96:	00c4      	lsls	r4, r0, #3
 8000c98:	19a0      	adds	r0, r4, r6
 8000c9a:	eb43 0107 	adc.w	r1, r3, r7
 8000c9e:	028b      	lsls	r3, r1, #10
 8000ca0:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8000ca4:	0284      	lsls	r4, r0, #10
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	4619      	mov	r1, r3
 8000caa:	2300      	movs	r3, #0
 8000cac:	f7ff fa9e 	bl	80001ec <__aeabi_uldivmod>
 8000cb0:	e7d3      	b.n	8000c5a <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8000cb2:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	00f42400 	.word	0x00f42400
 8000cc0:	007a1200 	.word	0x007a1200

08000cc4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	f000 809d 	beq.w	8000e04 <HAL_RCC_ClockConfig+0x140>
{
 8000cca:	b570      	push	{r4, r5, r6, lr}
 8000ccc:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000cce:	4b4f      	ldr	r3, [pc, #316]	; (8000e0c <HAL_RCC_ClockConfig+0x148>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 030f 	and.w	r3, r3, #15
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d209      	bcs.n	8000cee <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cda:	b2cb      	uxtb	r3, r1
 8000cdc:	4a4b      	ldr	r2, [pc, #300]	; (8000e0c <HAL_RCC_ClockConfig+0x148>)
 8000cde:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ce0:	6813      	ldr	r3, [r2, #0]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	4299      	cmp	r1, r3
 8000ce8:	d001      	beq.n	8000cee <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8000cea:	2001      	movs	r0, #1
 8000cec:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cee:	6823      	ldr	r3, [r4, #0]
 8000cf0:	f013 0f02 	tst.w	r3, #2
 8000cf4:	d017      	beq.n	8000d26 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cf6:	f013 0f04 	tst.w	r3, #4
 8000cfa:	d004      	beq.n	8000d06 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cfc:	4a44      	ldr	r2, [pc, #272]	; (8000e10 <HAL_RCC_ClockConfig+0x14c>)
 8000cfe:	6893      	ldr	r3, [r2, #8]
 8000d00:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000d04:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d06:	6823      	ldr	r3, [r4, #0]
 8000d08:	f013 0f08 	tst.w	r3, #8
 8000d0c:	d004      	beq.n	8000d18 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d0e:	4a40      	ldr	r2, [pc, #256]	; (8000e10 <HAL_RCC_ClockConfig+0x14c>)
 8000d10:	6893      	ldr	r3, [r2, #8]
 8000d12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000d16:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d18:	4a3d      	ldr	r2, [pc, #244]	; (8000e10 <HAL_RCC_ClockConfig+0x14c>)
 8000d1a:	6893      	ldr	r3, [r2, #8]
 8000d1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d20:	68a0      	ldr	r0, [r4, #8]
 8000d22:	4303      	orrs	r3, r0
 8000d24:	6093      	str	r3, [r2, #8]
 8000d26:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d28:	6823      	ldr	r3, [r4, #0]
 8000d2a:	f013 0f01 	tst.w	r3, #1
 8000d2e:	d032      	beq.n	8000d96 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d30:	6863      	ldr	r3, [r4, #4]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d021      	beq.n	8000d7a <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d36:	1e9a      	subs	r2, r3, #2
 8000d38:	2a01      	cmp	r2, #1
 8000d3a:	d925      	bls.n	8000d88 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d3c:	4a34      	ldr	r2, [pc, #208]	; (8000e10 <HAL_RCC_ClockConfig+0x14c>)
 8000d3e:	6812      	ldr	r2, [r2, #0]
 8000d40:	f012 0f02 	tst.w	r2, #2
 8000d44:	d060      	beq.n	8000e08 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d46:	4932      	ldr	r1, [pc, #200]	; (8000e10 <HAL_RCC_ClockConfig+0x14c>)
 8000d48:	688a      	ldr	r2, [r1, #8]
 8000d4a:	f022 0203 	bic.w	r2, r2, #3
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8000d52:	f7ff fc1f 	bl	8000594 <HAL_GetTick>
 8000d56:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d58:	4b2d      	ldr	r3, [pc, #180]	; (8000e10 <HAL_RCC_ClockConfig+0x14c>)
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	f003 030c 	and.w	r3, r3, #12
 8000d60:	6862      	ldr	r2, [r4, #4]
 8000d62:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d66:	d016      	beq.n	8000d96 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d68:	f7ff fc14 	bl	8000594 <HAL_GetTick>
 8000d6c:	1b80      	subs	r0, r0, r6
 8000d6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d72:	4298      	cmp	r0, r3
 8000d74:	d9f0      	bls.n	8000d58 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8000d76:	2003      	movs	r0, #3
 8000d78:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d7a:	4a25      	ldr	r2, [pc, #148]	; (8000e10 <HAL_RCC_ClockConfig+0x14c>)
 8000d7c:	6812      	ldr	r2, [r2, #0]
 8000d7e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000d82:	d1e0      	bne.n	8000d46 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8000d84:	2001      	movs	r0, #1
 8000d86:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d88:	4a21      	ldr	r2, [pc, #132]	; (8000e10 <HAL_RCC_ClockConfig+0x14c>)
 8000d8a:	6812      	ldr	r2, [r2, #0]
 8000d8c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000d90:	d1d9      	bne.n	8000d46 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8000d92:	2001      	movs	r0, #1
 8000d94:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d96:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <HAL_RCC_ClockConfig+0x148>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	429d      	cmp	r5, r3
 8000da0:	d209      	bcs.n	8000db6 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000da2:	b2ea      	uxtb	r2, r5
 8000da4:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <HAL_RCC_ClockConfig+0x148>)
 8000da6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 030f 	and.w	r3, r3, #15
 8000dae:	429d      	cmp	r5, r3
 8000db0:	d001      	beq.n	8000db6 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8000db2:	2001      	movs	r0, #1
}
 8000db4:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000db6:	6823      	ldr	r3, [r4, #0]
 8000db8:	f013 0f04 	tst.w	r3, #4
 8000dbc:	d006      	beq.n	8000dcc <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dbe:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <HAL_RCC_ClockConfig+0x14c>)
 8000dc0:	6893      	ldr	r3, [r2, #8]
 8000dc2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000dc6:	68e1      	ldr	r1, [r4, #12]
 8000dc8:	430b      	orrs	r3, r1
 8000dca:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dcc:	6823      	ldr	r3, [r4, #0]
 8000dce:	f013 0f08 	tst.w	r3, #8
 8000dd2:	d007      	beq.n	8000de4 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000dd4:	4a0e      	ldr	r2, [pc, #56]	; (8000e10 <HAL_RCC_ClockConfig+0x14c>)
 8000dd6:	6893      	ldr	r3, [r2, #8]
 8000dd8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000ddc:	6921      	ldr	r1, [r4, #16]
 8000dde:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000de2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000de4:	f7ff ff04 	bl	8000bf0 <HAL_RCC_GetSysClockFreq>
 8000de8:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_RCC_ClockConfig+0x14c>)
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000df0:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <HAL_RCC_ClockConfig+0x150>)
 8000df2:	5cd3      	ldrb	r3, [r2, r3]
 8000df4:	40d8      	lsrs	r0, r3
 8000df6:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <HAL_RCC_ClockConfig+0x154>)
 8000df8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f7ff fb7e 	bl	80004fc <HAL_InitTick>
  return HAL_OK;
 8000e00:	2000      	movs	r0, #0
 8000e02:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000e04:	2001      	movs	r0, #1
 8000e06:	4770      	bx	lr
        return HAL_ERROR;
 8000e08:	2001      	movs	r0, #1
 8000e0a:	bd70      	pop	{r4, r5, r6, pc}
 8000e0c:	40023c00 	.word	0x40023c00
 8000e10:	40023800 	.word	0x40023800
 8000e14:	080017ac 	.word	0x080017ac
 8000e18:	20000008 	.word	0x20000008

08000e1c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000e1c:	4b01      	ldr	r3, [pc, #4]	; (8000e24 <HAL_RCC_GetHCLKFreq+0x8>)
 8000e1e:	6818      	ldr	r0, [r3, #0]
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008

08000e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000e28:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000e2a:	f7ff fff7 	bl	8000e1c <HAL_RCC_GetHCLKFreq>
 8000e2e:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000e36:	4a03      	ldr	r2, [pc, #12]	; (8000e44 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000e38:	5cd3      	ldrb	r3, [r2, r3]
}
 8000e3a:	40d8      	lsrs	r0, r3
 8000e3c:	bd08      	pop	{r3, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800
 8000e44:	080017bc 	.word	0x080017bc

08000e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000e48:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000e4a:	f7ff ffe7 	bl	8000e1c <HAL_RCC_GetHCLKFreq>
 8000e4e:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000e56:	4a03      	ldr	r2, [pc, #12]	; (8000e64 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000e58:	5cd3      	ldrb	r3, [r2, r3]
}
 8000e5a:	40d8      	lsrs	r0, r3
 8000e5c:	bd08      	pop	{r3, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800
 8000e64:	080017bc 	.word	0x080017bc

08000e68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e6c:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e6e:	6802      	ldr	r2, [r0, #0]
 8000e70:	6913      	ldr	r3, [r2, #16]
 8000e72:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e76:	68c1      	ldr	r1, [r0, #12]
 8000e78:	430b      	orrs	r3, r1
 8000e7a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e7c:	6883      	ldr	r3, [r0, #8]
 8000e7e:	6902      	ldr	r2, [r0, #16]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	6942      	ldr	r2, [r0, #20]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	69c2      	ldr	r2, [r0, #28]
 8000e88:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1,
 8000e8a:	6801      	ldr	r1, [r0, #0]
 8000e8c:	68ca      	ldr	r2, [r1, #12]
 8000e8e:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8000e92:	f022 020c 	bic.w	r2, r2, #12
 8000e96:	4313      	orrs	r3, r2
 8000e98:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000e9a:	6802      	ldr	r2, [r0, #0]
 8000e9c:	6953      	ldr	r3, [r2, #20]
 8000e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ea2:	6981      	ldr	r1, [r0, #24]
 8000ea4:	430b      	orrs	r3, r1
 8000ea6:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000ea8:	69c3      	ldr	r3, [r0, #28]
 8000eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000eae:	d062      	beq.n	8000f76 <UART_SetConfig+0x10e>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000eb0:	f8d0 8000 	ldr.w	r8, [r0]
 8000eb4:	4bbb      	ldr	r3, [pc, #748]	; (80011a4 <UART_SetConfig+0x33c>)
 8000eb6:	4598      	cmp	r8, r3
 8000eb8:	f000 811b 	beq.w	80010f2 <UART_SetConfig+0x28a>
 8000ebc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ec0:	4598      	cmp	r8, r3
 8000ec2:	f000 8116 	beq.w	80010f2 <UART_SetConfig+0x28a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000ec6:	f7ff ffaf 	bl	8000e28 <HAL_RCC_GetPCLK1Freq>
 8000eca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000ece:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000ed2:	6865      	ldr	r5, [r4, #4]
 8000ed4:	00ad      	lsls	r5, r5, #2
 8000ed6:	fbb0 f5f5 	udiv	r5, r0, r5
 8000eda:	4fb3      	ldr	r7, [pc, #716]	; (80011a8 <UART_SetConfig+0x340>)
 8000edc:	fba7 3505 	umull	r3, r5, r7, r5
 8000ee0:	096d      	lsrs	r5, r5, #5
 8000ee2:	012e      	lsls	r6, r5, #4
 8000ee4:	f7ff ffa0 	bl	8000e28 <HAL_RCC_GetPCLK1Freq>
 8000ee8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000eec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000ef0:	6865      	ldr	r5, [r4, #4]
 8000ef2:	00ad      	lsls	r5, r5, #2
 8000ef4:	fbb0 faf5 	udiv	sl, r0, r5
 8000ef8:	f7ff ff96 	bl	8000e28 <HAL_RCC_GetPCLK1Freq>
 8000efc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000f00:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000f04:	6865      	ldr	r5, [r4, #4]
 8000f06:	00ad      	lsls	r5, r5, #2
 8000f08:	fbb0 f5f5 	udiv	r5, r0, r5
 8000f0c:	fba7 3505 	umull	r3, r5, r7, r5
 8000f10:	096d      	lsrs	r5, r5, #5
 8000f12:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000f16:	fb09 a515 	mls	r5, r9, r5, sl
 8000f1a:	012d      	lsls	r5, r5, #4
 8000f1c:	3532      	adds	r5, #50	; 0x32
 8000f1e:	fba7 3505 	umull	r3, r5, r7, r5
 8000f22:	096d      	lsrs	r5, r5, #5
 8000f24:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8000f28:	4435      	add	r5, r6
 8000f2a:	f7ff ff7d 	bl	8000e28 <HAL_RCC_GetPCLK1Freq>
 8000f2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000f32:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000f36:	6866      	ldr	r6, [r4, #4]
 8000f38:	00b6      	lsls	r6, r6, #2
 8000f3a:	fbb0 f6f6 	udiv	r6, r0, r6
 8000f3e:	f7ff ff73 	bl	8000e28 <HAL_RCC_GetPCLK1Freq>
 8000f42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000f46:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000f4a:	6863      	ldr	r3, [r4, #4]
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f52:	fba7 3000 	umull	r3, r0, r7, r0
 8000f56:	0940      	lsrs	r0, r0, #5
 8000f58:	fb09 6910 	mls	r9, r9, r0, r6
 8000f5c:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8000f60:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8000f64:	fba7 3709 	umull	r3, r7, r7, r9
 8000f68:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8000f6c:	442f      	add	r7, r5
 8000f6e:	f8c8 7008 	str.w	r7, [r8, #8]
 8000f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000f76:	f8d0 8000 	ldr.w	r8, [r0]
 8000f7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f7e:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8000f82:	4598      	cmp	r8, r3
 8000f84:	d05c      	beq.n	8001040 <UART_SetConfig+0x1d8>
 8000f86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f8a:	4598      	cmp	r8, r3
 8000f8c:	d058      	beq.n	8001040 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000f8e:	f7ff ff4b 	bl	8000e28 <HAL_RCC_GetPCLK1Freq>
 8000f92:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000f96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000f9a:	6865      	ldr	r5, [r4, #4]
 8000f9c:	006d      	lsls	r5, r5, #1
 8000f9e:	fbb0 f5f5 	udiv	r5, r0, r5
 8000fa2:	4f81      	ldr	r7, [pc, #516]	; (80011a8 <UART_SetConfig+0x340>)
 8000fa4:	fba7 3505 	umull	r3, r5, r7, r5
 8000fa8:	096d      	lsrs	r5, r5, #5
 8000faa:	012e      	lsls	r6, r5, #4
 8000fac:	f7ff ff3c 	bl	8000e28 <HAL_RCC_GetPCLK1Freq>
 8000fb0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000fb4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000fb8:	6865      	ldr	r5, [r4, #4]
 8000fba:	006d      	lsls	r5, r5, #1
 8000fbc:	fbb0 faf5 	udiv	sl, r0, r5
 8000fc0:	f7ff ff32 	bl	8000e28 <HAL_RCC_GetPCLK1Freq>
 8000fc4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000fc8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000fcc:	6865      	ldr	r5, [r4, #4]
 8000fce:	006d      	lsls	r5, r5, #1
 8000fd0:	fbb0 f5f5 	udiv	r5, r0, r5
 8000fd4:	fba7 3505 	umull	r3, r5, r7, r5
 8000fd8:	096d      	lsrs	r5, r5, #5
 8000fda:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000fde:	fb09 a515 	mls	r5, r9, r5, sl
 8000fe2:	00ed      	lsls	r5, r5, #3
 8000fe4:	3532      	adds	r5, #50	; 0x32
 8000fe6:	fba7 3505 	umull	r3, r5, r7, r5
 8000fea:	096d      	lsrs	r5, r5, #5
 8000fec:	006d      	lsls	r5, r5, #1
 8000fee:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8000ff2:	4435      	add	r5, r6
 8000ff4:	f7ff ff18 	bl	8000e28 <HAL_RCC_GetPCLK1Freq>
 8000ff8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000ffc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001000:	6866      	ldr	r6, [r4, #4]
 8001002:	0076      	lsls	r6, r6, #1
 8001004:	fbb0 f6f6 	udiv	r6, r0, r6
 8001008:	f7ff ff0e 	bl	8000e28 <HAL_RCC_GetPCLK1Freq>
 800100c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001010:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001014:	6863      	ldr	r3, [r4, #4]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	fbb0 f3f3 	udiv	r3, r0, r3
 800101c:	fba7 2303 	umull	r2, r3, r7, r3
 8001020:	095b      	lsrs	r3, r3, #5
 8001022:	fb09 6913 	mls	r9, r9, r3, r6
 8001026:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800102a:	f109 0932 	add.w	r9, r9, #50	; 0x32
 800102e:	fba7 3709 	umull	r3, r7, r7, r9
 8001032:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8001036:	442f      	add	r7, r5
 8001038:	f8c8 7008 	str.w	r7, [r8, #8]
 800103c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001040:	f7ff ff02 	bl	8000e48 <HAL_RCC_GetPCLK2Freq>
 8001044:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001048:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800104c:	6865      	ldr	r5, [r4, #4]
 800104e:	006d      	lsls	r5, r5, #1
 8001050:	fbb0 f5f5 	udiv	r5, r0, r5
 8001054:	4f54      	ldr	r7, [pc, #336]	; (80011a8 <UART_SetConfig+0x340>)
 8001056:	fba7 3505 	umull	r3, r5, r7, r5
 800105a:	096d      	lsrs	r5, r5, #5
 800105c:	012e      	lsls	r6, r5, #4
 800105e:	f7ff fef3 	bl	8000e48 <HAL_RCC_GetPCLK2Freq>
 8001062:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001066:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800106a:	6865      	ldr	r5, [r4, #4]
 800106c:	006d      	lsls	r5, r5, #1
 800106e:	fbb0 faf5 	udiv	sl, r0, r5
 8001072:	f7ff fee9 	bl	8000e48 <HAL_RCC_GetPCLK2Freq>
 8001076:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800107a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800107e:	6865      	ldr	r5, [r4, #4]
 8001080:	006d      	lsls	r5, r5, #1
 8001082:	fbb0 f5f5 	udiv	r5, r0, r5
 8001086:	fba7 3505 	umull	r3, r5, r7, r5
 800108a:	096d      	lsrs	r5, r5, #5
 800108c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001090:	fb09 a515 	mls	r5, r9, r5, sl
 8001094:	00ed      	lsls	r5, r5, #3
 8001096:	3532      	adds	r5, #50	; 0x32
 8001098:	fba7 3505 	umull	r3, r5, r7, r5
 800109c:	096d      	lsrs	r5, r5, #5
 800109e:	006d      	lsls	r5, r5, #1
 80010a0:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 80010a4:	4435      	add	r5, r6
 80010a6:	f7ff fecf 	bl	8000e48 <HAL_RCC_GetPCLK2Freq>
 80010aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80010ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80010b2:	6866      	ldr	r6, [r4, #4]
 80010b4:	0076      	lsls	r6, r6, #1
 80010b6:	fbb0 f6f6 	udiv	r6, r0, r6
 80010ba:	f7ff fec5 	bl	8000e48 <HAL_RCC_GetPCLK2Freq>
 80010be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80010c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80010c6:	6863      	ldr	r3, [r4, #4]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80010ce:	fba7 2303 	umull	r2, r3, r7, r3
 80010d2:	095b      	lsrs	r3, r3, #5
 80010d4:	fb09 6913 	mls	r9, r9, r3, r6
 80010d8:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80010dc:	f109 0932 	add.w	r9, r9, #50	; 0x32
 80010e0:	fba7 3709 	umull	r3, r7, r7, r9
 80010e4:	f3c7 1742 	ubfx	r7, r7, #5, #3
 80010e8:	442f      	add	r7, r5
 80010ea:	f8c8 7008 	str.w	r7, [r8, #8]
 80010ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80010f2:	f7ff fea9 	bl	8000e48 <HAL_RCC_GetPCLK2Freq>
 80010f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80010fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80010fe:	6865      	ldr	r5, [r4, #4]
 8001100:	00ad      	lsls	r5, r5, #2
 8001102:	fbb0 f5f5 	udiv	r5, r0, r5
 8001106:	4f28      	ldr	r7, [pc, #160]	; (80011a8 <UART_SetConfig+0x340>)
 8001108:	fba7 3505 	umull	r3, r5, r7, r5
 800110c:	096d      	lsrs	r5, r5, #5
 800110e:	012e      	lsls	r6, r5, #4
 8001110:	f7ff fe9a 	bl	8000e48 <HAL_RCC_GetPCLK2Freq>
 8001114:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001118:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800111c:	6865      	ldr	r5, [r4, #4]
 800111e:	00ad      	lsls	r5, r5, #2
 8001120:	fbb0 faf5 	udiv	sl, r0, r5
 8001124:	f7ff fe90 	bl	8000e48 <HAL_RCC_GetPCLK2Freq>
 8001128:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800112c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001130:	6865      	ldr	r5, [r4, #4]
 8001132:	00ad      	lsls	r5, r5, #2
 8001134:	fbb0 f5f5 	udiv	r5, r0, r5
 8001138:	fba7 3505 	umull	r3, r5, r7, r5
 800113c:	096d      	lsrs	r5, r5, #5
 800113e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001142:	fb09 a515 	mls	r5, r9, r5, sl
 8001146:	012d      	lsls	r5, r5, #4
 8001148:	3532      	adds	r5, #50	; 0x32
 800114a:	fba7 3505 	umull	r3, r5, r7, r5
 800114e:	096d      	lsrs	r5, r5, #5
 8001150:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8001154:	4435      	add	r5, r6
 8001156:	f7ff fe77 	bl	8000e48 <HAL_RCC_GetPCLK2Freq>
 800115a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800115e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001162:	6866      	ldr	r6, [r4, #4]
 8001164:	00b6      	lsls	r6, r6, #2
 8001166:	fbb0 f6f6 	udiv	r6, r0, r6
 800116a:	f7ff fe6d 	bl	8000e48 <HAL_RCC_GetPCLK2Freq>
 800116e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001172:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001176:	6863      	ldr	r3, [r4, #4]
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	fbb0 f3f3 	udiv	r3, r0, r3
 800117e:	fba7 2303 	umull	r2, r3, r7, r3
 8001182:	095b      	lsrs	r3, r3, #5
 8001184:	fb09 6913 	mls	r9, r9, r3, r6
 8001188:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800118c:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001190:	fba7 3709 	umull	r3, r7, r7, r9
 8001194:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8001198:	442f      	add	r7, r5
 800119a:	f8c8 7008 	str.w	r7, [r8, #8]
 800119e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011a2:	bf00      	nop
 80011a4:	40011000 	.word	0x40011000
 80011a8:	51eb851f 	.word	0x51eb851f

080011ac <UART_WaitOnFlagUntilTimeout>:
{
 80011ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011b0:	4605      	mov	r5, r0
 80011b2:	460f      	mov	r7, r1
 80011b4:	4616      	mov	r6, r2
 80011b6:	4698      	mov	r8, r3
 80011b8:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80011ba:	682b      	ldr	r3, [r5, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	ea37 0303 	bics.w	r3, r7, r3
 80011c2:	bf0c      	ite	eq
 80011c4:	2301      	moveq	r3, #1
 80011c6:	2300      	movne	r3, #0
 80011c8:	42b3      	cmp	r3, r6
 80011ca:	d11e      	bne.n	800120a <UART_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 80011cc:	f1b4 3fff 	cmp.w	r4, #4294967295
 80011d0:	d0f3      	beq.n	80011ba <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80011d2:	b12c      	cbz	r4, 80011e0 <UART_WaitOnFlagUntilTimeout+0x34>
 80011d4:	f7ff f9de 	bl	8000594 <HAL_GetTick>
 80011d8:	eba0 0008 	sub.w	r0, r0, r8
 80011dc:	4284      	cmp	r4, r0
 80011de:	d2ec      	bcs.n	80011ba <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80011e0:	682a      	ldr	r2, [r5, #0]
 80011e2:	68d3      	ldr	r3, [r2, #12]
 80011e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80011e8:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80011ea:	682a      	ldr	r2, [r5, #0]
 80011ec:	6953      	ldr	r3, [r2, #20]
 80011ee:	f023 0301 	bic.w	r3, r3, #1
 80011f2:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80011f4:	2320      	movs	r3, #32
 80011f6:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80011fa:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80011fe:	2300      	movs	r3, #0
 8001200:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8001204:	2003      	movs	r0, #3
 8001206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 800120a:	2000      	movs	r0, #0
}
 800120c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001210 <HAL_UART_Init>:
  if (huart == NULL)
 8001210:	b358      	cbz	r0, 800126a <HAL_UART_Init+0x5a>
{
 8001212:	b510      	push	{r4, lr}
 8001214:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001216:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800121a:	b30b      	cbz	r3, 8001260 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800121c:	2324      	movs	r3, #36	; 0x24
 800121e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001222:	6822      	ldr	r2, [r4, #0]
 8001224:	68d3      	ldr	r3, [r2, #12]
 8001226:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800122a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800122c:	4620      	mov	r0, r4
 800122e:	f7ff fe1b 	bl	8000e68 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001232:	6822      	ldr	r2, [r4, #0]
 8001234:	6913      	ldr	r3, [r2, #16]
 8001236:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800123a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800123c:	6822      	ldr	r2, [r4, #0]
 800123e:	6953      	ldr	r3, [r2, #20]
 8001240:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001244:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001246:	6822      	ldr	r2, [r4, #0]
 8001248:	68d3      	ldr	r3, [r2, #12]
 800124a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800124e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001250:	2000      	movs	r0, #0
 8001252:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001254:	2320      	movs	r3, #32
 8001256:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800125a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800125e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001260:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001264:	f000 fa04 	bl	8001670 <HAL_UART_MspInit>
 8001268:	e7d8      	b.n	800121c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800126a:	2001      	movs	r0, #1
 800126c:	4770      	bx	lr

0800126e <HAL_UART_Transmit>:
{
 800126e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001276:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b20      	cmp	r3, #32
 800127e:	d004      	beq.n	800128a <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 8001280:	2302      	movs	r3, #2
}
 8001282:	4618      	mov	r0, r3
 8001284:	b002      	add	sp, #8
 8001286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800128a:	4604      	mov	r4, r0
 800128c:	460d      	mov	r5, r1
 800128e:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001290:	2900      	cmp	r1, #0
 8001292:	d055      	beq.n	8001340 <HAL_UART_Transmit+0xd2>
 8001294:	2a00      	cmp	r2, #0
 8001296:	d055      	beq.n	8001344 <HAL_UART_Transmit+0xd6>
    __HAL_LOCK(huart);
 8001298:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800129c:	2b01      	cmp	r3, #1
 800129e:	d101      	bne.n	80012a4 <HAL_UART_Transmit+0x36>
 80012a0:	2302      	movs	r3, #2
 80012a2:	e7ee      	b.n	8001282 <HAL_UART_Transmit+0x14>
 80012a4:	2301      	movs	r3, #1
 80012a6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80012ae:	2321      	movs	r3, #33	; 0x21
 80012b0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80012b4:	f7ff f96e 	bl	8000594 <HAL_GetTick>
 80012b8:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80012ba:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80012be:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80012c2:	e010      	b.n	80012e6 <HAL_UART_Transmit+0x78>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80012c4:	9600      	str	r6, [sp, #0]
 80012c6:	463b      	mov	r3, r7
 80012c8:	2200      	movs	r2, #0
 80012ca:	2180      	movs	r1, #128	; 0x80
 80012cc:	4620      	mov	r0, r4
 80012ce:	f7ff ff6d 	bl	80011ac <UART_WaitOnFlagUntilTimeout>
 80012d2:	2800      	cmp	r0, #0
 80012d4:	d138      	bne.n	8001348 <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80012d6:	6822      	ldr	r2, [r4, #0]
 80012d8:	882b      	ldrh	r3, [r5, #0]
 80012da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012de:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80012e0:	6923      	ldr	r3, [r4, #16]
 80012e2:	b9cb      	cbnz	r3, 8001318 <HAL_UART_Transmit+0xaa>
          pData += 2U;
 80012e4:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 80012e6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	b1bb      	cbz	r3, 800131c <HAL_UART_Transmit+0xae>
      huart->TxXferCount--;
 80012ec:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	3b01      	subs	r3, #1
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80012f6:	68a3      	ldr	r3, [r4, #8]
 80012f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012fc:	d0e2      	beq.n	80012c4 <HAL_UART_Transmit+0x56>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80012fe:	9600      	str	r6, [sp, #0]
 8001300:	463b      	mov	r3, r7
 8001302:	2200      	movs	r2, #0
 8001304:	2180      	movs	r1, #128	; 0x80
 8001306:	4620      	mov	r0, r4
 8001308:	f7ff ff50 	bl	80011ac <UART_WaitOnFlagUntilTimeout>
 800130c:	b9f0      	cbnz	r0, 800134c <HAL_UART_Transmit+0xde>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800130e:	6823      	ldr	r3, [r4, #0]
 8001310:	782a      	ldrb	r2, [r5, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	3501      	adds	r5, #1
 8001316:	e7e6      	b.n	80012e6 <HAL_UART_Transmit+0x78>
          pData += 1U;
 8001318:	3501      	adds	r5, #1
 800131a:	e7e4      	b.n	80012e6 <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800131c:	9600      	str	r6, [sp, #0]
 800131e:	463b      	mov	r3, r7
 8001320:	2200      	movs	r2, #0
 8001322:	2140      	movs	r1, #64	; 0x40
 8001324:	4620      	mov	r0, r4
 8001326:	f7ff ff41 	bl	80011ac <UART_WaitOnFlagUntilTimeout>
 800132a:	4603      	mov	r3, r0
 800132c:	b108      	cbz	r0, 8001332 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e7a7      	b.n	8001282 <HAL_UART_Transmit+0x14>
    huart->gState = HAL_UART_STATE_READY;
 8001332:	2220      	movs	r2, #32
 8001334:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001338:	2200      	movs	r2, #0
 800133a:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 800133e:	e7a0      	b.n	8001282 <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e79e      	b.n	8001282 <HAL_UART_Transmit+0x14>
 8001344:	2301      	movs	r3, #1
 8001346:	e79c      	b.n	8001282 <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e79a      	b.n	8001282 <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e798      	b.n	8001282 <HAL_UART_Transmit+0x14>

08001350 <HAL_UART_Receive>:
{
 8001350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001358:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b20      	cmp	r3, #32
 8001360:	d003      	beq.n	800136a <HAL_UART_Receive+0x1a>
    return HAL_BUSY;
 8001362:	2002      	movs	r0, #2
}
 8001364:	b002      	add	sp, #8
 8001366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800136a:	4604      	mov	r4, r0
 800136c:	460d      	mov	r5, r1
 800136e:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001370:	2900      	cmp	r1, #0
 8001372:	d058      	beq.n	8001426 <HAL_UART_Receive+0xd6>
 8001374:	2a00      	cmp	r2, #0
 8001376:	d058      	beq.n	800142a <HAL_UART_Receive+0xda>
    __HAL_LOCK(huart);
 8001378:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800137c:	2b01      	cmp	r3, #1
 800137e:	d101      	bne.n	8001384 <HAL_UART_Receive+0x34>
 8001380:	2002      	movs	r0, #2
 8001382:	e7ef      	b.n	8001364 <HAL_UART_Receive+0x14>
 8001384:	2301      	movs	r3, #1
 8001386:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800138a:	2300      	movs	r3, #0
 800138c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800138e:	2322      	movs	r3, #34	; 0x22
 8001390:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8001394:	f7ff f8fe 	bl	8000594 <HAL_GetTick>
 8001398:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 800139a:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 800139e:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80013a2:	e01d      	b.n	80013e0 <HAL_UART_Receive+0x90>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80013a4:	9600      	str	r6, [sp, #0]
 80013a6:	463b      	mov	r3, r7
 80013a8:	2200      	movs	r2, #0
 80013aa:	2120      	movs	r1, #32
 80013ac:	4620      	mov	r0, r4
 80013ae:	f7ff fefd 	bl	80011ac <UART_WaitOnFlagUntilTimeout>
 80013b2:	2800      	cmp	r0, #0
 80013b4:	d13b      	bne.n	800142e <HAL_UART_Receive+0xde>
        if (huart->Init.Parity == UART_PARITY_NONE)
 80013b6:	6923      	ldr	r3, [r4, #16]
 80013b8:	b933      	cbnz	r3, 80013c8 <HAL_UART_Receive+0x78>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80013ba:	6823      	ldr	r3, [r4, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013c2:	f825 3b02 	strh.w	r3, [r5], #2
 80013c6:	e00b      	b.n	80013e0 <HAL_UART_Receive+0x90>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80013c8:	6823      	ldr	r3, [r4, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f825 3b01 	strh.w	r3, [r5], #1
 80013d2:	e005      	b.n	80013e0 <HAL_UART_Receive+0x90>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80013d4:	6823      	ldr	r3, [r4, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013dc:	702b      	strb	r3, [r5, #0]
 80013de:	3501      	adds	r5, #1
    while (huart->RxXferCount > 0U)
 80013e0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	b1c3      	cbz	r3, 8001418 <HAL_UART_Receive+0xc8>
      huart->RxXferCount--;
 80013e6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	3b01      	subs	r3, #1
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013f0:	68a3      	ldr	r3, [r4, #8]
 80013f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013f6:	d0d5      	beq.n	80013a4 <HAL_UART_Receive+0x54>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80013f8:	9600      	str	r6, [sp, #0]
 80013fa:	463b      	mov	r3, r7
 80013fc:	2200      	movs	r2, #0
 80013fe:	2120      	movs	r1, #32
 8001400:	4620      	mov	r0, r4
 8001402:	f7ff fed3 	bl	80011ac <UART_WaitOnFlagUntilTimeout>
 8001406:	b9a0      	cbnz	r0, 8001432 <HAL_UART_Receive+0xe2>
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001408:	6923      	ldr	r3, [r4, #16]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1e2      	bne.n	80013d4 <HAL_UART_Receive+0x84>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800140e:	6823      	ldr	r3, [r4, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	702b      	strb	r3, [r5, #0]
 8001414:	3501      	adds	r5, #1
 8001416:	e7e3      	b.n	80013e0 <HAL_UART_Receive+0x90>
    huart->RxState = HAL_UART_STATE_READY;
 8001418:	2320      	movs	r3, #32
 800141a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 800141e:	2000      	movs	r0, #0
 8001420:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001424:	e79e      	b.n	8001364 <HAL_UART_Receive+0x14>
      return  HAL_ERROR;
 8001426:	2001      	movs	r0, #1
 8001428:	e79c      	b.n	8001364 <HAL_UART_Receive+0x14>
 800142a:	2001      	movs	r0, #1
 800142c:	e79a      	b.n	8001364 <HAL_UART_Receive+0x14>
          return HAL_TIMEOUT;
 800142e:	2003      	movs	r0, #3
 8001430:	e798      	b.n	8001364 <HAL_UART_Receive+0x14>
          return HAL_TIMEOUT;
 8001432:	2003      	movs	r0, #3
 8001434:	e796      	b.n	8001364 <HAL_UART_Receive+0x14>
	...

08001438 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001438:	b530      	push	{r4, r5, lr}
 800143a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	2400      	movs	r4, #0
 800143e:	9403      	str	r4, [sp, #12]
 8001440:	9404      	str	r4, [sp, #16]
 8001442:	9405      	str	r4, [sp, #20]
 8001444:	9406      	str	r4, [sp, #24]
 8001446:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001448:	9400      	str	r4, [sp, #0]
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <MX_GPIO_Init+0x78>)
 800144c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800144e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001452:	631a      	str	r2, [r3, #48]	; 0x30
 8001454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001456:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800145a:	9200      	str	r2, [sp, #0]
 800145c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	9401      	str	r4, [sp, #4]
 8001460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001462:	f042 0201 	orr.w	r2, r2, #1
 8001466:	631a      	str	r2, [r3, #48]	; 0x30
 8001468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800146a:	f002 0201 	and.w	r2, r2, #1
 800146e:	9201      	str	r2, [sp, #4]
 8001470:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001472:	9402      	str	r4, [sp, #8]
 8001474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001476:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800147a:	631a      	str	r2, [r3, #48]	; 0x30
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001482:	9302      	str	r3, [sp, #8]
 8001484:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001486:	4d0b      	ldr	r5, [pc, #44]	; (80014b4 <MX_GPIO_Init+0x7c>)
 8001488:	4622      	mov	r2, r4
 800148a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800148e:	4628      	mov	r0, r5
 8001490:	f7ff f9d2 	bl	8000838 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001494:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001498:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149a:	2301      	movs	r3, #1
 800149c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014a2:	a903      	add	r1, sp, #12
 80014a4:	4628      	mov	r0, r5
 80014a6:	f7ff f8d5 	bl	8000654 <HAL_GPIO_Init>

}
 80014aa:	b009      	add	sp, #36	; 0x24
 80014ac:	bd30      	pop	{r4, r5, pc}
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40021800 	.word	0x40021800

080014b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b8:	b530      	push	{r4, r5, lr}
 80014ba:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014bc:	2230      	movs	r2, #48	; 0x30
 80014be:	2100      	movs	r1, #0
 80014c0:	a808      	add	r0, sp, #32
 80014c2:	f000 f95f 	bl	8001784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c6:	2400      	movs	r4, #0
 80014c8:	9403      	str	r4, [sp, #12]
 80014ca:	9404      	str	r4, [sp, #16]
 80014cc:	9405      	str	r4, [sp, #20]
 80014ce:	9406      	str	r4, [sp, #24]
 80014d0:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d2:	9401      	str	r4, [sp, #4]
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <SystemClock_Config+0x8c>)
 80014d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014dc:	641a      	str	r2, [r3, #64]	; 0x40
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e4:	9301      	str	r3, [sp, #4]
 80014e6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e8:	9402      	str	r4, [sp, #8]
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <SystemClock_Config+0x90>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014fa:	9302      	str	r3, [sp, #8]
 80014fc:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014fe:	2301      	movs	r3, #1
 8001500:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001502:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001506:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001508:	2502      	movs	r5, #2
 800150a:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800150c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001510:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001512:	2304      	movs	r3, #4
 8001514:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001516:	22a8      	movs	r2, #168	; 0xa8
 8001518:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800151a:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800151c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800151e:	a808      	add	r0, sp, #32
 8001520:	f7ff f99a 	bl	8000858 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001524:	230f      	movs	r3, #15
 8001526:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001528:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800152a:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800152c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001530:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001536:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001538:	2105      	movs	r1, #5
 800153a:	a803      	add	r0, sp, #12
 800153c:	f7ff fbc2 	bl	8000cc4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001540:	b015      	add	sp, #84	; 0x54
 8001542:	bd30      	pop	{r4, r5, pc}
 8001544:	40023800 	.word	0x40023800
 8001548:	40007000 	.word	0x40007000

0800154c <main>:
{
 800154c:	b500      	push	{lr}
 800154e:	b083      	sub	sp, #12
  HAL_Init();
 8001550:	f7fe fffa 	bl	8000548 <HAL_Init>
  SystemClock_Config();
 8001554:	f7ff ffb0 	bl	80014b8 <SystemClock_Config>
  MX_GPIO_Init();
 8001558:	f7ff ff6e 	bl	8001438 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800155c:	f000 f86e 	bl	800163c <MX_USART1_UART_Init>
    if(HAL_UART_Receive(&huart1, &receive_data, 1, 10) == HAL_OK)
 8001560:	230a      	movs	r3, #10
 8001562:	2201      	movs	r2, #1
 8001564:	a901      	add	r1, sp, #4
 8001566:	480b      	ldr	r0, [pc, #44]	; (8001594 <main+0x48>)
 8001568:	f7ff fef2 	bl	8001350 <HAL_UART_Receive>
 800156c:	2800      	cmp	r0, #0
 800156e:	d1f7      	bne.n	8001560 <main+0x14>
      HAL_UART_Transmit(&huart1, &receive_data, 1, 10);
 8001570:	230a      	movs	r3, #10
 8001572:	2201      	movs	r2, #1
 8001574:	a901      	add	r1, sp, #4
 8001576:	4807      	ldr	r0, [pc, #28]	; (8001594 <main+0x48>)
 8001578:	f7ff fe79 	bl	800126e <HAL_UART_Transmit>
      HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 800157c:	4c06      	ldr	r4, [pc, #24]	; (8001598 <main+0x4c>)
 800157e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001582:	4620      	mov	r0, r4
 8001584:	f7ff f95e 	bl	8000844 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 8001588:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800158c:	4620      	mov	r0, r4
 800158e:	f7ff f959 	bl	8000844 <HAL_GPIO_TogglePin>
 8001592:	e7e5      	b.n	8001560 <main+0x14>
 8001594:	2000002c 	.word	0x2000002c
 8001598:	40021800 	.word	0x40021800

0800159c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800159c:	4770      	bx	lr
	...

080015a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a2:	2100      	movs	r1, #0
 80015a4:	9100      	str	r1, [sp, #0]
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <HAL_MspInit+0x34>)
 80015a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015ae:	645a      	str	r2, [r3, #68]	; 0x44
 80015b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015b2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80015b6:	9200      	str	r2, [sp, #0]
 80015b8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	9101      	str	r1, [sp, #4]
 80015bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015c2:	641a      	str	r2, [r3, #64]	; 0x40
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ca:	9301      	str	r3, [sp, #4]
 80015cc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ce:	b002      	add	sp, #8
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800

080015d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d8:	4770      	bx	lr

080015da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015da:	e7fe      	b.n	80015da <HardFault_Handler>

080015dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015dc:	e7fe      	b.n	80015dc <MemManage_Handler>

080015de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015de:	e7fe      	b.n	80015de <BusFault_Handler>

080015e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e0:	e7fe      	b.n	80015e0 <UsageFault_Handler>

080015e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e2:	4770      	bx	lr

080015e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e4:	4770      	bx	lr

080015e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e6:	4770      	bx	lr

080015e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ea:	f7fe ffc7 	bl	800057c <HAL_IncTick>
 80015ee:	bd08      	pop	{r3, pc}

080015f0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f0:	490f      	ldr	r1, [pc, #60]	; (8001630 <SystemInit+0x40>)
 80015f2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80015f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80015fe:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <SystemInit+0x44>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	f042 0201 	orr.w	r2, r2, #1
 8001606:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001608:	2000      	movs	r0, #0
 800160a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001612:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001616:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001618:	4a07      	ldr	r2, [pc, #28]	; (8001638 <SystemInit+0x48>)
 800161a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001622:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001624:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001626:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800162a:	608b      	str	r3, [r1, #8]
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000ed00 	.word	0xe000ed00
 8001634:	40023800 	.word	0x40023800
 8001638:	24003010 	.word	0x24003010

0800163c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800163c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 800163e:	480a      	ldr	r0, [pc, #40]	; (8001668 <MX_USART1_UART_Init+0x2c>)
 8001640:	4b0a      	ldr	r3, [pc, #40]	; (800166c <MX_USART1_UART_Init+0x30>)
 8001642:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001644:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001648:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800164a:	2300      	movs	r3, #0
 800164c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800164e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001650:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001652:	220c      	movs	r2, #12
 8001654:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001656:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001658:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800165a:	f7ff fdd9 	bl	8001210 <HAL_UART_Init>
 800165e:	b900      	cbnz	r0, 8001662 <MX_USART1_UART_Init+0x26>
 8001660:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 8001662:	f7ff ff9b 	bl	800159c <Error_Handler>
  }

}
 8001666:	e7fb      	b.n	8001660 <MX_USART1_UART_Init+0x24>
 8001668:	2000002c 	.word	0x2000002c
 800166c:	40011000 	.word	0x40011000

08001670 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001670:	b500      	push	{lr}
 8001672:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	2300      	movs	r3, #0
 8001676:	9303      	str	r3, [sp, #12]
 8001678:	9304      	str	r3, [sp, #16]
 800167a:	9305      	str	r3, [sp, #20]
 800167c:	9306      	str	r3, [sp, #24]
 800167e:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8001680:	6802      	ldr	r2, [r0, #0]
 8001682:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001686:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 800168a:	429a      	cmp	r2, r3
 800168c:	d002      	beq.n	8001694 <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800168e:	b009      	add	sp, #36	; 0x24
 8001690:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8001694:	2100      	movs	r1, #0
 8001696:	9101      	str	r1, [sp, #4]
 8001698:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800169c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800169e:	f042 0210 	orr.w	r2, r2, #16
 80016a2:	645a      	str	r2, [r3, #68]	; 0x44
 80016a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016a6:	f002 0210 	and.w	r2, r2, #16
 80016aa:	9201      	str	r2, [sp, #4]
 80016ac:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	9102      	str	r1, [sp, #8]
 80016b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016b2:	f042 0201 	orr.w	r2, r2, #1
 80016b6:	631a      	str	r2, [r3, #48]	; 0x30
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	9302      	str	r3, [sp, #8]
 80016c0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016c6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016cc:	2301      	movs	r3, #1
 80016ce:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d0:	2303      	movs	r3, #3
 80016d2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016d4:	2307      	movs	r3, #7
 80016d6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d8:	a903      	add	r1, sp, #12
 80016da:	4802      	ldr	r0, [pc, #8]	; (80016e4 <HAL_UART_MspInit+0x74>)
 80016dc:	f7fe ffba 	bl	8000654 <HAL_GPIO_Init>
}
 80016e0:	e7d5      	b.n	800168e <HAL_UART_MspInit+0x1e>
 80016e2:	bf00      	nop
 80016e4:	40020000 	.word	0x40020000

080016e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80016e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001720 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016ee:	e003      	b.n	80016f8 <LoopCopyDataInit>

080016f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016f6:	3104      	adds	r1, #4

080016f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016f8:	480b      	ldr	r0, [pc, #44]	; (8001728 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016fa:	4b0c      	ldr	r3, [pc, #48]	; (800172c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001700:	d3f6      	bcc.n	80016f0 <CopyDataInit>
  ldr  r2, =_sbss
 8001702:	4a0b      	ldr	r2, [pc, #44]	; (8001730 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001704:	e002      	b.n	800170c <LoopFillZerobss>

08001706 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001706:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001708:	f842 3b04 	str.w	r3, [r2], #4

0800170c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800170c:	4b09      	ldr	r3, [pc, #36]	; (8001734 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800170e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001710:	d3f9      	bcc.n	8001706 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001712:	f7ff ff6d 	bl	80015f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001716:	f000 f811 	bl	800173c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800171a:	f7ff ff17 	bl	800154c <main>
  bx  lr    
 800171e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001720:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001724:	080017d4 	.word	0x080017d4
  ldr  r0, =_sdata
 8001728:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800172c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001730:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001734:	2000006c 	.word	0x2000006c

08001738 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001738:	e7fe      	b.n	8001738 <ADC_IRQHandler>
	...

0800173c <__libc_init_array>:
 800173c:	b570      	push	{r4, r5, r6, lr}
 800173e:	4e0d      	ldr	r6, [pc, #52]	; (8001774 <__libc_init_array+0x38>)
 8001740:	4c0d      	ldr	r4, [pc, #52]	; (8001778 <__libc_init_array+0x3c>)
 8001742:	1ba4      	subs	r4, r4, r6
 8001744:	10a4      	asrs	r4, r4, #2
 8001746:	2500      	movs	r5, #0
 8001748:	42a5      	cmp	r5, r4
 800174a:	d109      	bne.n	8001760 <__libc_init_array+0x24>
 800174c:	4e0b      	ldr	r6, [pc, #44]	; (800177c <__libc_init_array+0x40>)
 800174e:	4c0c      	ldr	r4, [pc, #48]	; (8001780 <__libc_init_array+0x44>)
 8001750:	f000 f820 	bl	8001794 <_init>
 8001754:	1ba4      	subs	r4, r4, r6
 8001756:	10a4      	asrs	r4, r4, #2
 8001758:	2500      	movs	r5, #0
 800175a:	42a5      	cmp	r5, r4
 800175c:	d105      	bne.n	800176a <__libc_init_array+0x2e>
 800175e:	bd70      	pop	{r4, r5, r6, pc}
 8001760:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001764:	4798      	blx	r3
 8001766:	3501      	adds	r5, #1
 8001768:	e7ee      	b.n	8001748 <__libc_init_array+0xc>
 800176a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800176e:	4798      	blx	r3
 8001770:	3501      	adds	r5, #1
 8001772:	e7f2      	b.n	800175a <__libc_init_array+0x1e>
 8001774:	080017cc 	.word	0x080017cc
 8001778:	080017cc 	.word	0x080017cc
 800177c:	080017cc 	.word	0x080017cc
 8001780:	080017d0 	.word	0x080017d0

08001784 <memset>:
 8001784:	4402      	add	r2, r0
 8001786:	4603      	mov	r3, r0
 8001788:	4293      	cmp	r3, r2
 800178a:	d100      	bne.n	800178e <memset+0xa>
 800178c:	4770      	bx	lr
 800178e:	f803 1b01 	strb.w	r1, [r3], #1
 8001792:	e7f9      	b.n	8001788 <memset+0x4>

08001794 <_init>:
 8001794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001796:	bf00      	nop
 8001798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800179a:	bc08      	pop	{r3}
 800179c:	469e      	mov	lr, r3
 800179e:	4770      	bx	lr

080017a0 <_fini>:
 80017a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017a2:	bf00      	nop
 80017a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017a6:	bc08      	pop	{r3}
 80017a8:	469e      	mov	lr, r3
 80017aa:	4770      	bx	lr
