
GPIO_Reg2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006c8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000874  08000874  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000874  08000874  00010874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000878  08000878  00010878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  0800087c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  7 .bss          00000038  20000010  20000010  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000048  20000048  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000258e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000007a4  00000000  00000000  000225ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000338  00000000  00000000  00022d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002e0  00000000  00000000  000230b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001128  00000000  00000000  00023390  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000145d  00000000  00000000  000244b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00025915  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000cc8  00000000  00000000  00025994  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002665c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800085c 	.word	0x0800085c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	0800085c 	.word	0x0800085c

080001ec <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b087      	sub	sp, #28
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
 80001f4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80001f6:	2300      	movs	r3, #0
 80001f8:	617b      	str	r3, [r7, #20]
 80001fa:	2300      	movs	r3, #0
 80001fc:	613b      	str	r3, [r7, #16]
 80001fe:	2300      	movs	r3, #0
 8000200:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000202:	2300      	movs	r3, #0
 8000204:	617b      	str	r3, [r7, #20]
 8000206:	e076      	b.n	80002f6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000208:	2201      	movs	r2, #1
 800020a:	697b      	ldr	r3, [r7, #20]
 800020c:	fa02 f303 	lsl.w	r3, r2, r3
 8000210:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	681a      	ldr	r2, [r3, #0]
 8000216:	693b      	ldr	r3, [r7, #16]
 8000218:	4013      	ands	r3, r2
 800021a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800021c:	68fa      	ldr	r2, [r7, #12]
 800021e:	693b      	ldr	r3, [r7, #16]
 8000220:	429a      	cmp	r2, r3
 8000222:	d165      	bne.n	80002f0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	697b      	ldr	r3, [r7, #20]
 800022a:	005b      	lsls	r3, r3, #1
 800022c:	2103      	movs	r1, #3
 800022e:	fa01 f303 	lsl.w	r3, r1, r3
 8000232:	43db      	mvns	r3, r3
 8000234:	401a      	ands	r2, r3
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	791b      	ldrb	r3, [r3, #4]
 8000242:	4619      	mov	r1, r3
 8000244:	697b      	ldr	r3, [r7, #20]
 8000246:	005b      	lsls	r3, r3, #1
 8000248:	fa01 f303 	lsl.w	r3, r1, r3
 800024c:	431a      	orrs	r2, r3
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	791b      	ldrb	r3, [r3, #4]
 8000256:	2b01      	cmp	r3, #1
 8000258:	d003      	beq.n	8000262 <GPIO_Init+0x76>
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	791b      	ldrb	r3, [r3, #4]
 800025e:	2b02      	cmp	r3, #2
 8000260:	d12e      	bne.n	80002c0 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	689a      	ldr	r2, [r3, #8]
 8000266:	697b      	ldr	r3, [r7, #20]
 8000268:	005b      	lsls	r3, r3, #1
 800026a:	2103      	movs	r1, #3
 800026c:	fa01 f303 	lsl.w	r3, r1, r3
 8000270:	43db      	mvns	r3, r3
 8000272:	401a      	ands	r2, r3
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	689a      	ldr	r2, [r3, #8]
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	795b      	ldrb	r3, [r3, #5]
 8000280:	4619      	mov	r1, r3
 8000282:	697b      	ldr	r3, [r7, #20]
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	fa01 f303 	lsl.w	r3, r1, r3
 800028a:	431a      	orrs	r2, r3
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	685a      	ldr	r2, [r3, #4]
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	b29b      	uxth	r3, r3
 8000298:	4619      	mov	r1, r3
 800029a:	2301      	movs	r3, #1
 800029c:	408b      	lsls	r3, r1
 800029e:	43db      	mvns	r3, r3
 80002a0:	401a      	ands	r2, r3
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	683a      	ldr	r2, [r7, #0]
 80002ac:	7992      	ldrb	r2, [r2, #6]
 80002ae:	4611      	mov	r1, r2
 80002b0:	697a      	ldr	r2, [r7, #20]
 80002b2:	b292      	uxth	r2, r2
 80002b4:	fa01 f202 	lsl.w	r2, r1, r2
 80002b8:	b292      	uxth	r2, r2
 80002ba:	431a      	orrs	r2, r3
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	68da      	ldr	r2, [r3, #12]
 80002c4:	697b      	ldr	r3, [r7, #20]
 80002c6:	b29b      	uxth	r3, r3
 80002c8:	005b      	lsls	r3, r3, #1
 80002ca:	2103      	movs	r1, #3
 80002cc:	fa01 f303 	lsl.w	r3, r1, r3
 80002d0:	43db      	mvns	r3, r3
 80002d2:	401a      	ands	r2, r3
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	68da      	ldr	r2, [r3, #12]
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	79db      	ldrb	r3, [r3, #7]
 80002e0:	4619      	mov	r1, r3
 80002e2:	697b      	ldr	r3, [r7, #20]
 80002e4:	005b      	lsls	r3, r3, #1
 80002e6:	fa01 f303 	lsl.w	r3, r1, r3
 80002ea:	431a      	orrs	r2, r3
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	3301      	adds	r3, #1
 80002f4:	617b      	str	r3, [r7, #20]
 80002f6:	697b      	ldr	r3, [r7, #20]
 80002f8:	2b0f      	cmp	r3, #15
 80002fa:	d985      	bls.n	8000208 <GPIO_Init+0x1c>
    }
  }
}
 80002fc:	bf00      	nop
 80002fe:	371c      	adds	r7, #28
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr

08000308 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000308:	b480      	push	{r7}
 800030a:	b089      	sub	sp, #36	; 0x24
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000310:	2300      	movs	r3, #0
 8000312:	61bb      	str	r3, [r7, #24]
 8000314:	2300      	movs	r3, #0
 8000316:	617b      	str	r3, [r7, #20]
 8000318:	2300      	movs	r3, #0
 800031a:	61fb      	str	r3, [r7, #28]
 800031c:	2302      	movs	r3, #2
 800031e:	613b      	str	r3, [r7, #16]
 8000320:	2300      	movs	r3, #0
 8000322:	60fb      	str	r3, [r7, #12]
 8000324:	2302      	movs	r3, #2
 8000326:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000328:	4b47      	ldr	r3, [pc, #284]	; (8000448 <RCC_GetClocksFreq+0x140>)
 800032a:	689b      	ldr	r3, [r3, #8]
 800032c:	f003 030c 	and.w	r3, r3, #12
 8000330:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000332:	69bb      	ldr	r3, [r7, #24]
 8000334:	2b04      	cmp	r3, #4
 8000336:	d007      	beq.n	8000348 <RCC_GetClocksFreq+0x40>
 8000338:	2b08      	cmp	r3, #8
 800033a:	d009      	beq.n	8000350 <RCC_GetClocksFreq+0x48>
 800033c:	2b00      	cmp	r3, #0
 800033e:	d13d      	bne.n	80003bc <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	4a42      	ldr	r2, [pc, #264]	; (800044c <RCC_GetClocksFreq+0x144>)
 8000344:	601a      	str	r2, [r3, #0]
      break;
 8000346:	e03d      	b.n	80003c4 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4a41      	ldr	r2, [pc, #260]	; (8000450 <RCC_GetClocksFreq+0x148>)
 800034c:	601a      	str	r2, [r3, #0]
      break;
 800034e:	e039      	b.n	80003c4 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000350:	4b3d      	ldr	r3, [pc, #244]	; (8000448 <RCC_GetClocksFreq+0x140>)
 8000352:	685b      	ldr	r3, [r3, #4]
 8000354:	0d9b      	lsrs	r3, r3, #22
 8000356:	f003 0301 	and.w	r3, r3, #1
 800035a:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800035c:	4b3a      	ldr	r3, [pc, #232]	; (8000448 <RCC_GetClocksFreq+0x140>)
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000364:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d00c      	beq.n	8000386 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800036c:	4a38      	ldr	r2, [pc, #224]	; (8000450 <RCC_GetClocksFreq+0x148>)
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	fbb2 f3f3 	udiv	r3, r2, r3
 8000374:	4a34      	ldr	r2, [pc, #208]	; (8000448 <RCC_GetClocksFreq+0x140>)
 8000376:	6852      	ldr	r2, [r2, #4]
 8000378:	0992      	lsrs	r2, r2, #6
 800037a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800037e:	fb02 f303 	mul.w	r3, r2, r3
 8000382:	61fb      	str	r3, [r7, #28]
 8000384:	e00b      	b.n	800039e <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000386:	4a31      	ldr	r2, [pc, #196]	; (800044c <RCC_GetClocksFreq+0x144>)
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	fbb2 f3f3 	udiv	r3, r2, r3
 800038e:	4a2e      	ldr	r2, [pc, #184]	; (8000448 <RCC_GetClocksFreq+0x140>)
 8000390:	6852      	ldr	r2, [r2, #4]
 8000392:	0992      	lsrs	r2, r2, #6
 8000394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000398:	fb02 f303 	mul.w	r3, r2, r3
 800039c:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800039e:	4b2a      	ldr	r3, [pc, #168]	; (8000448 <RCC_GetClocksFreq+0x140>)
 80003a0:	685b      	ldr	r3, [r3, #4]
 80003a2:	0c1b      	lsrs	r3, r3, #16
 80003a4:	f003 0303 	and.w	r3, r3, #3
 80003a8:	3301      	adds	r3, #1
 80003aa:	005b      	lsls	r3, r3, #1
 80003ac:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80003ae:	69fa      	ldr	r2, [r7, #28]
 80003b0:	693b      	ldr	r3, [r7, #16]
 80003b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	601a      	str	r2, [r3, #0]
      break;
 80003ba:	e003      	b.n	80003c4 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a23      	ldr	r2, [pc, #140]	; (800044c <RCC_GetClocksFreq+0x144>)
 80003c0:	601a      	str	r2, [r3, #0]
      break;
 80003c2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80003c4:	4b20      	ldr	r3, [pc, #128]	; (8000448 <RCC_GetClocksFreq+0x140>)
 80003c6:	689b      	ldr	r3, [r3, #8]
 80003c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80003cc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80003ce:	69bb      	ldr	r3, [r7, #24]
 80003d0:	091b      	lsrs	r3, r3, #4
 80003d2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80003d4:	4a1f      	ldr	r2, [pc, #124]	; (8000454 <RCC_GetClocksFreq+0x14c>)
 80003d6:	69bb      	ldr	r3, [r7, #24]
 80003d8:	4413      	add	r3, r2
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	b2db      	uxtb	r3, r3
 80003de:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681a      	ldr	r2, [r3, #0]
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	40da      	lsrs	r2, r3
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80003ec:	4b16      	ldr	r3, [pc, #88]	; (8000448 <RCC_GetClocksFreq+0x140>)
 80003ee:	689b      	ldr	r3, [r3, #8]
 80003f0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80003f4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80003f6:	69bb      	ldr	r3, [r7, #24]
 80003f8:	0a9b      	lsrs	r3, r3, #10
 80003fa:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80003fc:	4a15      	ldr	r2, [pc, #84]	; (8000454 <RCC_GetClocksFreq+0x14c>)
 80003fe:	69bb      	ldr	r3, [r7, #24]
 8000400:	4413      	add	r3, r2
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	b2db      	uxtb	r3, r3
 8000406:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	685a      	ldr	r2, [r3, #4]
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	40da      	lsrs	r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000414:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <RCC_GetClocksFreq+0x140>)
 8000416:	689b      	ldr	r3, [r3, #8]
 8000418:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800041c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800041e:	69bb      	ldr	r3, [r7, #24]
 8000420:	0b5b      	lsrs	r3, r3, #13
 8000422:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000424:	4a0b      	ldr	r2, [pc, #44]	; (8000454 <RCC_GetClocksFreq+0x14c>)
 8000426:	69bb      	ldr	r3, [r7, #24]
 8000428:	4413      	add	r3, r2
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	b2db      	uxtb	r3, r3
 800042e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	685a      	ldr	r2, [r3, #4]
 8000434:	697b      	ldr	r3, [r7, #20]
 8000436:	40da      	lsrs	r2, r3
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	60da      	str	r2, [r3, #12]
}
 800043c:	bf00      	nop
 800043e:	3724      	adds	r7, #36	; 0x24
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	40023800 	.word	0x40023800
 800044c:	00f42400 	.word	0x00f42400
 8000450:	007a1200 	.word	0x007a1200
 8000454:	20000000 	.word	0x20000000

08000458 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	460b      	mov	r3, r1
 8000462:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000464:	78fb      	ldrb	r3, [r7, #3]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d006      	beq.n	8000478 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800046a:	490a      	ldr	r1, [pc, #40]	; (8000494 <RCC_AHB1PeriphClockCmd+0x3c>)
 800046c:	4b09      	ldr	r3, [pc, #36]	; (8000494 <RCC_AHB1PeriphClockCmd+0x3c>)
 800046e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4313      	orrs	r3, r2
 8000474:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000476:	e006      	b.n	8000486 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000478:	4906      	ldr	r1, [pc, #24]	; (8000494 <RCC_AHB1PeriphClockCmd+0x3c>)
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <RCC_AHB1PeriphClockCmd+0x3c>)
 800047c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	43db      	mvns	r3, r3
 8000482:	4013      	ands	r3, r2
 8000484:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000486:	bf00      	nop
 8000488:	370c      	adds	r7, #12
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	40023800 	.word	0x40023800

08000498 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	6039      	str	r1, [r7, #0]
 80004a2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80004a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	da0b      	bge.n	80004c4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80004ac:	490d      	ldr	r1, [pc, #52]	; (80004e4 <NVIC_SetPriority+0x4c>)
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	f003 030f 	and.w	r3, r3, #15
 80004b4:	3b04      	subs	r3, #4
 80004b6:	683a      	ldr	r2, [r7, #0]
 80004b8:	b2d2      	uxtb	r2, r2
 80004ba:	0112      	lsls	r2, r2, #4
 80004bc:	b2d2      	uxtb	r2, r2
 80004be:	440b      	add	r3, r1
 80004c0:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80004c2:	e009      	b.n	80004d8 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80004c4:	4908      	ldr	r1, [pc, #32]	; (80004e8 <NVIC_SetPriority+0x50>)
 80004c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ca:	683a      	ldr	r2, [r7, #0]
 80004cc:	b2d2      	uxtb	r2, r2
 80004ce:	0112      	lsls	r2, r2, #4
 80004d0:	b2d2      	uxtb	r2, r2
 80004d2:	440b      	add	r3, r1
 80004d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80004d8:	bf00      	nop
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	e000ed00 	.word	0xe000ed00
 80004e8:	e000e100 	.word	0xe000e100

080004ec <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	3b01      	subs	r3, #1
 80004f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004fc:	d301      	bcc.n	8000502 <SysTick_Config+0x16>
 80004fe:	2301      	movs	r3, #1
 8000500:	e00f      	b.n	8000522 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000502:	4a0a      	ldr	r2, [pc, #40]	; (800052c <SysTick_Config+0x40>)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	3b01      	subs	r3, #1
 8000508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 800050a:	210f      	movs	r1, #15
 800050c:	f04f 30ff 	mov.w	r0, #4294967295
 8000510:	f7ff ffc2 	bl	8000498 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <SysTick_Config+0x40>)
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800051a:	4b04      	ldr	r3, [pc, #16]	; (800052c <SysTick_Config+0x40>)
 800051c:	2207      	movs	r2, #7
 800051e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000520:	2300      	movs	r3, #0
}
 8000522:	4618      	mov	r0, r3
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	e000e010 	.word	0xe000e010

08000530 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
  int i = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
  *  E.g.  SCB->VTOR = 0x20000000;  
  */

  /* TODO - Add your application code here */
  /* GPIOG Peripheral clock enable */
   RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 800053a:	2101      	movs	r1, #1
 800053c:	2040      	movs	r0, #64	; 0x40
 800053e:	f7ff ff8b 	bl	8000458 <RCC_AHB1PeriphClockCmd>
   RCC_GetClocksFreq(&RCC_Clocks);
 8000542:	4818      	ldr	r0, [pc, #96]	; (80005a4 <main+0x74>)
 8000544:	f7ff fee0 	bl	8000308 <RCC_GetClocksFreq>
   //SysTick_Config(SystemCoreClock / 1000);
   SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 8000548:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <main+0x74>)
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	4a16      	ldr	r2, [pc, #88]	; (80005a8 <main+0x78>)
 800054e:	fba2 2303 	umull	r2, r3, r2, r3
 8000552:	099b      	lsrs	r3, r3, #6
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff ffc9 	bl	80004ec <SysTick_Config>

   /* Configure PG6 and PG8 in output pushpull mode */
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
 800055a:	4b14      	ldr	r3, [pc, #80]	; (80005ac <main+0x7c>)
 800055c:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8000560:	601a      	str	r2, [r3, #0]
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <main+0x7c>)
 8000564:	2201      	movs	r2, #1
 8000566:	711a      	strb	r2, [r3, #4]
   GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000568:	4b10      	ldr	r3, [pc, #64]	; (80005ac <main+0x7c>)
 800056a:	2200      	movs	r2, #0
 800056c:	719a      	strb	r2, [r3, #6]
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <main+0x7c>)
 8000570:	2203      	movs	r2, #3
 8000572:	715a      	strb	r2, [r3, #5]
   GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000574:	4b0d      	ldr	r3, [pc, #52]	; (80005ac <main+0x7c>)
 8000576:	2200      	movs	r2, #0
 8000578:	71da      	strb	r2, [r3, #7]
   GPIO_Init(GPIOG, &GPIO_InitStructure);
 800057a:	490c      	ldr	r1, [pc, #48]	; (80005ac <main+0x7c>)
 800057c:	480c      	ldr	r0, [pc, #48]	; (80005b0 <main+0x80>)
 800057e:	f7ff fe35 	bl	80001ec <GPIO_Init>
  /* Infinite loop */
  while (1)
  {
    /* Set PG6 and PG8 */
      GPIOG->BSRRL = GPIO_Pin_13 | GPIO_Pin_14;
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <main+0x80>)
 8000584:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8000588:	831a      	strh	r2, [r3, #24]
      Delay(500);
 800058a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800058e:	f000 f811 	bl	80005b4 <Delay>
      /* Reset PG6 and PG8 */
      GPIOG->BSRRH = GPIO_Pin_13 | GPIO_Pin_14;
 8000592:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <main+0x80>)
 8000594:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8000598:	835a      	strh	r2, [r3, #26]
      Delay(500);
 800059a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800059e:	f000 f809 	bl	80005b4 <Delay>
      GPIOG->BSRRL = GPIO_Pin_13 | GPIO_Pin_14;
 80005a2:	e7ee      	b.n	8000582 <main+0x52>
 80005a4:	20000038 	.word	0x20000038
 80005a8:	10624dd3 	.word	0x10624dd3
 80005ac:	20000030 	.word	0x20000030
 80005b0:	40021800 	.word	0x40021800

080005b4 <Delay>:
  * @brief  Inserts a delay time.
  * @param  nTime: specifies the delay time length, in milliseconds.
  * @retval None
  */
void Delay(__IO uint32_t nTime)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  TimingDelay = nTime;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4a06      	ldr	r2, [pc, #24]	; (80005d8 <Delay+0x24>)
 80005c0:	6013      	str	r3, [r2, #0]

  while(TimingDelay != 0);
 80005c2:	bf00      	nop
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <Delay+0x24>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d1fb      	bne.n	80005c4 <Delay+0x10>
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	2000002c 	.word	0x2000002c

080005dc <TimingDelay_Decrement>:
  * @brief  Decrements the TimingDelay variable.
  * @param  None
  * @retval None
  */
void TimingDelay_Decrement(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  if (TimingDelay != 0)
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <TimingDelay_Decrement+0x20>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d004      	beq.n	80005f2 <TimingDelay_Decrement+0x16>
  {
    TimingDelay--;
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <TimingDelay_Decrement+0x20>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3b01      	subs	r3, #1
 80005ee:	4a03      	ldr	r2, [pc, #12]	; (80005fc <TimingDelay_Decrement+0x20>)
 80005f0:	6013      	str	r3, [r2, #0]
  }
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	2000002c 	.word	0x2000002c

08000600 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000600:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000638 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000604:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000606:	e003      	b.n	8000610 <LoopCopyDataInit>

08000608 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800060a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800060c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800060e:	3104      	adds	r1, #4

08000610 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000610:	480b      	ldr	r0, [pc, #44]	; (8000640 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000614:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000616:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000618:	d3f6      	bcc.n	8000608 <CopyDataInit>
  ldr  r2, =_sbss
 800061a:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800061c:	e002      	b.n	8000624 <LoopFillZerobss>

0800061e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800061e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000620:	f842 3b04 	str.w	r3, [r2], #4

08000624 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000624:	4b09      	ldr	r3, [pc, #36]	; (800064c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000626:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000628:	d3f9      	bcc.n	800061e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800062a:	f000 f841 	bl	80006b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800062e:	f000 f8f1 	bl	8000814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000632:	f7ff ff7d 	bl	8000530 <main>
  bx  lr    
 8000636:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000638:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800063c:	0800087c 	.word	0x0800087c
  ldr  r0, =_sdata
 8000640:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000644:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000648:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 800064c:	20000048 	.word	0x20000048

08000650 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000650:	e7fe      	b.n	8000650 <ADC_IRQHandler>

08000652 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000664:	e7fe      	b.n	8000664 <HardFault_Handler+0x4>

08000666 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800066a:	e7fe      	b.n	800066a <MemManage_Handler+0x4>

0800066c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000670:	e7fe      	b.n	8000670 <BusFault_Handler+0x4>

08000672 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000676:	e7fe      	b.n	8000676 <UsageFault_Handler+0x4>

08000678 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	af00      	add	r7, sp, #0
  TimingDelay_Decrement();
 80006a6:	f7ff ff99 	bl	80005dc <TimingDelay_Decrement>
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006b4:	4a16      	ldr	r2, [pc, #88]	; (8000710 <SystemInit+0x60>)
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <SystemInit+0x60>)
 80006b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80006c4:	4a13      	ldr	r2, [pc, #76]	; (8000714 <SystemInit+0x64>)
 80006c6:	4b13      	ldr	r3, [pc, #76]	; (8000714 <SystemInit+0x64>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <SystemInit+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80006d6:	4a0f      	ldr	r2, [pc, #60]	; (8000714 <SystemInit+0x64>)
 80006d8:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <SystemInit+0x64>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006e4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <SystemInit+0x64>)
 80006e8:	4a0b      	ldr	r2, [pc, #44]	; (8000718 <SystemInit+0x68>)
 80006ea:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80006ec:	4a09      	ldr	r2, [pc, #36]	; (8000714 <SystemInit+0x64>)
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <SystemInit+0x64>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <SystemInit+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80006fe:	f000 f80d 	bl	800071c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000702:	4b03      	ldr	r3, [pc, #12]	; (8000710 <SystemInit+0x60>)
 8000704:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000708:	609a      	str	r2, [r3, #8]
#endif
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	e000ed00 	.word	0xe000ed00
 8000714:	40023800 	.word	0x40023800
 8000718:	24003010 	.word	0x24003010

0800071c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800072a:	4a36      	ldr	r2, [pc, #216]	; (8000804 <SetSysClock+0xe8>)
 800072c:	4b35      	ldr	r3, [pc, #212]	; (8000804 <SetSysClock+0xe8>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000734:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000736:	4b33      	ldr	r3, [pc, #204]	; (8000804 <SetSysClock+0xe8>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800073e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3301      	adds	r3, #1
 8000744:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d103      	bne.n	8000754 <SetSysClock+0x38>
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000752:	d1f0      	bne.n	8000736 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000754:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <SetSysClock+0xe8>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800075c:	2b00      	cmp	r3, #0
 800075e:	d002      	beq.n	8000766 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000760:	2301      	movs	r3, #1
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	e001      	b.n	800076a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000766:	2300      	movs	r3, #0
 8000768:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d142      	bne.n	80007f6 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000770:	4a24      	ldr	r2, [pc, #144]	; (8000804 <SetSysClock+0xe8>)
 8000772:	4b24      	ldr	r3, [pc, #144]	; (8000804 <SetSysClock+0xe8>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800077c:	4a22      	ldr	r2, [pc, #136]	; (8000808 <SetSysClock+0xec>)
 800077e:	4b22      	ldr	r3, [pc, #136]	; (8000808 <SetSysClock+0xec>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000786:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000788:	4a1e      	ldr	r2, [pc, #120]	; (8000804 <SetSysClock+0xe8>)
 800078a:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <SetSysClock+0xe8>)
 800078c:	689b      	ldr	r3, [r3, #8]
 800078e:	6093      	str	r3, [r2, #8]

#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000790:	4a1c      	ldr	r2, [pc, #112]	; (8000804 <SetSysClock+0xe8>)
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <SetSysClock+0xe8>)
 8000794:	689b      	ldr	r3, [r3, #8]
 8000796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800079a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800079c:	4a19      	ldr	r2, [pc, #100]	; (8000804 <SetSysClock+0xe8>)
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <SetSysClock+0xe8>)
 80007a0:	689b      	ldr	r3, [r3, #8]
 80007a2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80007a6:	6093      	str	r3, [r2, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <SetSysClock+0xe8>)
 80007aa:	4a18      	ldr	r2, [pc, #96]	; (800080c <SetSysClock+0xf0>)
 80007ac:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80007ae:	4a15      	ldr	r2, [pc, #84]	; (8000804 <SetSysClock+0xe8>)
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <SetSysClock+0xe8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007b8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80007ba:	bf00      	nop
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <SetSysClock+0xe8>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d0f9      	beq.n	80007bc <SetSysClock+0xa0>
    {
    }
   
#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <SetSysClock+0xf4>)
 80007ca:	f240 7205 	movw	r2, #1797	; 0x705
 80007ce:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80007d0:	4a0c      	ldr	r2, [pc, #48]	; (8000804 <SetSysClock+0xe8>)
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <SetSysClock+0xe8>)
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	f023 0303 	bic.w	r3, r3, #3
 80007da:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80007dc:	4a09      	ldr	r2, [pc, #36]	; (8000804 <SetSysClock+0xe8>)
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <SetSysClock+0xe8>)
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	f043 0302 	orr.w	r3, r3, #2
 80007e6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80007e8:	bf00      	nop
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <SetSysClock+0xe8>)
 80007ec:	689b      	ldr	r3, [r3, #8]
 80007ee:	f003 030c 	and.w	r3, r3, #12
 80007f2:	2b08      	cmp	r3, #8
 80007f4:	d1f9      	bne.n	80007ea <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40007000 	.word	0x40007000
 800080c:	07405a19 	.word	0x07405a19
 8000810:	40023c00 	.word	0x40023c00

08000814 <__libc_init_array>:
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	4e0d      	ldr	r6, [pc, #52]	; (800084c <__libc_init_array+0x38>)
 8000818:	4c0d      	ldr	r4, [pc, #52]	; (8000850 <__libc_init_array+0x3c>)
 800081a:	1ba4      	subs	r4, r4, r6
 800081c:	10a4      	asrs	r4, r4, #2
 800081e:	2500      	movs	r5, #0
 8000820:	42a5      	cmp	r5, r4
 8000822:	d109      	bne.n	8000838 <__libc_init_array+0x24>
 8000824:	4e0b      	ldr	r6, [pc, #44]	; (8000854 <__libc_init_array+0x40>)
 8000826:	4c0c      	ldr	r4, [pc, #48]	; (8000858 <__libc_init_array+0x44>)
 8000828:	f000 f818 	bl	800085c <_init>
 800082c:	1ba4      	subs	r4, r4, r6
 800082e:	10a4      	asrs	r4, r4, #2
 8000830:	2500      	movs	r5, #0
 8000832:	42a5      	cmp	r5, r4
 8000834:	d105      	bne.n	8000842 <__libc_init_array+0x2e>
 8000836:	bd70      	pop	{r4, r5, r6, pc}
 8000838:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800083c:	4798      	blx	r3
 800083e:	3501      	adds	r5, #1
 8000840:	e7ee      	b.n	8000820 <__libc_init_array+0xc>
 8000842:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000846:	4798      	blx	r3
 8000848:	3501      	adds	r5, #1
 800084a:	e7f2      	b.n	8000832 <__libc_init_array+0x1e>
 800084c:	08000874 	.word	0x08000874
 8000850:	08000874 	.word	0x08000874
 8000854:	08000874 	.word	0x08000874
 8000858:	08000878 	.word	0x08000878

0800085c <_init>:
 800085c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800085e:	bf00      	nop
 8000860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000862:	bc08      	pop	{r3}
 8000864:	469e      	mov	lr, r3
 8000866:	4770      	bx	lr

08000868 <_fini>:
 8000868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800086a:	bf00      	nop
 800086c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800086e:	bc08      	pop	{r3}
 8000870:	469e      	mov	lr, r3
 8000872:	4770      	bx	lr
