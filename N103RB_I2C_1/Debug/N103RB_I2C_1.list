
N103RB_I2C_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002610  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800271c  0800271c  0001271c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002808  08002808  00012808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800280c  0800280c  0001280c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08002810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000c4  20000070  08002880  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000134  08002880  00020134  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b55f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001eca  00000000  00000000  0002b5f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005697  00000000  00000000  0002d4c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000790  00000000  00000000  00032b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000bb8  00000000  00000000  000332f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005139  00000000  00000000  00033ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002c79  00000000  00000000  00038fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003bc5a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001c2c  00000000  00000000  0003bcd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002704 	.word	0x08002704

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002704 	.word	0x08002704

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f8a0 	bl	80002a8 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f854 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f82d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 fa78 	bl	80016a0 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000098 	.word	0x20000098
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000098 	.word	0x20000098

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000202:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000206:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800020e:	041b      	lsls	r3, r3, #16
 8000210:	0c1b      	lsrs	r3, r3, #16
 8000212:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800021a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800021c:	60d3      	str	r3, [r2, #12]
 800021e:	4770      	bx	lr
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	68dc      	ldr	r4, [r3, #12]
 800022a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000232:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000234:	2b04      	cmp	r3, #4
 8000236:	bf28      	it	cs
 8000238:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf98      	it	ls
 8000242:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	fa05 f303 	lsl.w	r3, r5, r3
 8000248:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	bf88      	it	hi
 800024e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000250:	4019      	ands	r1, r3
 8000252:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000254:	fa05 f404 	lsl.w	r4, r5, r4
 8000258:	3c01      	subs	r4, #1
 800025a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800025c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	ea42 0201 	orr.w	r2, r2, r1
 8000262:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	bfa9      	itett	ge
 8000268:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	4b06      	ldrlt	r3, [pc, #24]	; (8000288 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026e:	b2d2      	uxtbge	r2, r2
 8000270:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	bfbb      	ittet	lt
 8000276:	f000 000f 	andlt.w	r0, r0, #15
 800027a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000280:	541a      	strblt	r2, [r3, r0]
 8000282:	bd30      	pop	{r4, r5, pc}
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000ed14 	.word	0xe000ed14

0800028c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800028c:	2800      	cmp	r0, #0
 800028e:	db08      	blt.n	80002a2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000290:	2301      	movs	r3, #1
 8000292:	0942      	lsrs	r2, r0, #5
 8000294:	f000 001f 	and.w	r0, r0, #31
 8000298:	fa03 f000 	lsl.w	r0, r3, r0
 800029c:	4b01      	ldr	r3, [pc, #4]	; (80002a4 <HAL_NVIC_EnableIRQ+0x18>)
 800029e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002a2:	4770      	bx	lr
 80002a4:	e000e100 	.word	0xe000e100

080002a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002a8:	3801      	subs	r0, #1
 80002aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ae:	d20a      	bcs.n	80002c6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002b2:	4b06      	ldr	r3, [pc, #24]	; (80002cc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b4:	4a06      	ldr	r2, [pc, #24]	; (80002d0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002b6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002bc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002be:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002c0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002c6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	e000e010 	.word	0xe000e010
 80002d0:	e000ed00 	.word	0xe000ed00

080002d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80002d8:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80002da:	4626      	mov	r6, r4
 80002dc:	4b66      	ldr	r3, [pc, #408]	; (8000478 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002de:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000488 <HAL_GPIO_Init+0x1b4>
 80002e2:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 800048c <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80002e6:	680a      	ldr	r2, [r1, #0]
 80002e8:	fa32 f506 	lsrs.w	r5, r2, r6
 80002ec:	d102      	bne.n	80002f4 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80002ee:	b003      	add	sp, #12
 80002f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80002f4:	f04f 0801 	mov.w	r8, #1
 80002f8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002fc:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000300:	4590      	cmp	r8, r2
 8000302:	d17f      	bne.n	8000404 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8000304:	684d      	ldr	r5, [r1, #4]
 8000306:	2d12      	cmp	r5, #18
 8000308:	f000 80aa 	beq.w	8000460 <HAL_GPIO_Init+0x18c>
 800030c:	f200 8083 	bhi.w	8000416 <HAL_GPIO_Init+0x142>
 8000310:	2d02      	cmp	r5, #2
 8000312:	f000 80a2 	beq.w	800045a <HAL_GPIO_Init+0x186>
 8000316:	d877      	bhi.n	8000408 <HAL_GPIO_Init+0x134>
 8000318:	2d00      	cmp	r5, #0
 800031a:	f000 8089 	beq.w	8000430 <HAL_GPIO_Init+0x15c>
 800031e:	2d01      	cmp	r5, #1
 8000320:	f000 8099 	beq.w	8000456 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000324:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000328:	2aff      	cmp	r2, #255	; 0xff
 800032a:	bf93      	iteet	ls
 800032c:	4682      	movls	sl, r0
 800032e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000332:	3d08      	subhi	r5, #8
 8000334:	f8d0 b000 	ldrls.w	fp, [r0]
 8000338:	bf92      	itee	ls
 800033a:	00b5      	lslls	r5, r6, #2
 800033c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000340:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000342:	fa09 f805 	lsl.w	r8, r9, r5
 8000346:	ea2b 0808 	bic.w	r8, fp, r8
 800034a:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800034e:	bf88      	it	hi
 8000350:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000354:	ea48 0505 	orr.w	r5, r8, r5
 8000358:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800035c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000360:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000364:	d04e      	beq.n	8000404 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000366:	4d45      	ldr	r5, [pc, #276]	; (800047c <HAL_GPIO_Init+0x1a8>)
 8000368:	4f44      	ldr	r7, [pc, #272]	; (800047c <HAL_GPIO_Init+0x1a8>)
 800036a:	69ad      	ldr	r5, [r5, #24]
 800036c:	f026 0803 	bic.w	r8, r6, #3
 8000370:	f045 0501 	orr.w	r5, r5, #1
 8000374:	61bd      	str	r5, [r7, #24]
 8000376:	69bd      	ldr	r5, [r7, #24]
 8000378:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800037c:	f005 0501 	and.w	r5, r5, #1
 8000380:	9501      	str	r5, [sp, #4]
 8000382:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000386:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800038a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800038c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000390:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000394:	fa09 f90b 	lsl.w	r9, r9, fp
 8000398:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800039c:	4d38      	ldr	r5, [pc, #224]	; (8000480 <HAL_GPIO_Init+0x1ac>)
 800039e:	42a8      	cmp	r0, r5
 80003a0:	d063      	beq.n	800046a <HAL_GPIO_Init+0x196>
 80003a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003a6:	42a8      	cmp	r0, r5
 80003a8:	d061      	beq.n	800046e <HAL_GPIO_Init+0x19a>
 80003aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003ae:	42a8      	cmp	r0, r5
 80003b0:	d05f      	beq.n	8000472 <HAL_GPIO_Init+0x19e>
 80003b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003b6:	42a8      	cmp	r0, r5
 80003b8:	bf0c      	ite	eq
 80003ba:	2503      	moveq	r5, #3
 80003bc:	2504      	movne	r5, #4
 80003be:	fa05 f50b 	lsl.w	r5, r5, fp
 80003c2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80003c6:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80003ca:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003cc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003d0:	bf14      	ite	ne
 80003d2:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003d4:	4395      	biceq	r5, r2
 80003d6:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80003d8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003da:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003de:	bf14      	ite	ne
 80003e0:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003e2:	4395      	biceq	r5, r2
 80003e4:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80003e6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003e8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003ec:	bf14      	ite	ne
 80003ee:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003f0:	4395      	biceq	r5, r2
 80003f2:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80003f4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003f6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003fa:	bf14      	ite	ne
 80003fc:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003fe:	ea25 0202 	biceq.w	r2, r5, r2
 8000402:	60da      	str	r2, [r3, #12]
	position++;
 8000404:	3601      	adds	r6, #1
 8000406:	e76e      	b.n	80002e6 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8000408:	2d03      	cmp	r5, #3
 800040a:	d022      	beq.n	8000452 <HAL_GPIO_Init+0x17e>
 800040c:	2d11      	cmp	r5, #17
 800040e:	d189      	bne.n	8000324 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000410:	68cc      	ldr	r4, [r1, #12]
 8000412:	3404      	adds	r4, #4
          break;
 8000414:	e786      	b.n	8000324 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000416:	4f1b      	ldr	r7, [pc, #108]	; (8000484 <HAL_GPIO_Init+0x1b0>)
 8000418:	42bd      	cmp	r5, r7
 800041a:	d009      	beq.n	8000430 <HAL_GPIO_Init+0x15c>
 800041c:	d812      	bhi.n	8000444 <HAL_GPIO_Init+0x170>
 800041e:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000490 <HAL_GPIO_Init+0x1bc>
 8000422:	454d      	cmp	r5, r9
 8000424:	d004      	beq.n	8000430 <HAL_GPIO_Init+0x15c>
 8000426:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800042a:	454d      	cmp	r5, r9
 800042c:	f47f af7a 	bne.w	8000324 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000430:	688c      	ldr	r4, [r1, #8]
 8000432:	b1c4      	cbz	r4, 8000466 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000434:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8000436:	bf0c      	ite	eq
 8000438:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800043c:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000440:	2408      	movs	r4, #8
 8000442:	e76f      	b.n	8000324 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000444:	4575      	cmp	r5, lr
 8000446:	d0f3      	beq.n	8000430 <HAL_GPIO_Init+0x15c>
 8000448:	4565      	cmp	r5, ip
 800044a:	d0f1      	beq.n	8000430 <HAL_GPIO_Init+0x15c>
 800044c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000494 <HAL_GPIO_Init+0x1c0>
 8000450:	e7eb      	b.n	800042a <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000452:	2400      	movs	r4, #0
 8000454:	e766      	b.n	8000324 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000456:	68cc      	ldr	r4, [r1, #12]
          break;
 8000458:	e764      	b.n	8000324 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800045a:	68cc      	ldr	r4, [r1, #12]
 800045c:	3408      	adds	r4, #8
          break;
 800045e:	e761      	b.n	8000324 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000460:	68cc      	ldr	r4, [r1, #12]
 8000462:	340c      	adds	r4, #12
          break;
 8000464:	e75e      	b.n	8000324 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000466:	2404      	movs	r4, #4
 8000468:	e75c      	b.n	8000324 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800046a:	2500      	movs	r5, #0
 800046c:	e7a7      	b.n	80003be <HAL_GPIO_Init+0xea>
 800046e:	2501      	movs	r5, #1
 8000470:	e7a5      	b.n	80003be <HAL_GPIO_Init+0xea>
 8000472:	2502      	movs	r5, #2
 8000474:	e7a3      	b.n	80003be <HAL_GPIO_Init+0xea>
 8000476:	bf00      	nop
 8000478:	40010400 	.word	0x40010400
 800047c:	40021000 	.word	0x40021000
 8000480:	40010800 	.word	0x40010800
 8000484:	10210000 	.word	0x10210000
 8000488:	10310000 	.word	0x10310000
 800048c:	10320000 	.word	0x10320000
 8000490:	10110000 	.word	0x10110000
 8000494:	10220000 	.word	0x10220000

08000498 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000498:	b10a      	cbz	r2, 800049e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800049a:	6101      	str	r1, [r0, #16]
 800049c:	4770      	bx	lr
 800049e:	0409      	lsls	r1, r1, #16
 80004a0:	e7fb      	b.n	800049a <HAL_GPIO_WritePin+0x2>

080004a2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80004a2:	68c3      	ldr	r3, [r0, #12]
 80004a4:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004a6:	bf14      	ite	ne
 80004a8:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004aa:	6101      	streq	r1, [r0, #16]
 80004ac:	4770      	bx	lr

080004ae <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004ae:	4770      	bx	lr

080004b0 <HAL_GPIO_EXTI_IRQHandler>:
{
 80004b0:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80004b2:	4b04      	ldr	r3, [pc, #16]	; (80004c4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80004b4:	6959      	ldr	r1, [r3, #20]
 80004b6:	4201      	tst	r1, r0
 80004b8:	d002      	beq.n	80004c0 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80004ba:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80004bc:	f7ff fff7 	bl	80004ae <HAL_GPIO_EXTI_Callback>
 80004c0:	bd08      	pop	{r3, pc}
 80004c2:	bf00      	nop
 80004c4:	40010400 	.word	0x40010400

080004c8 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80004c8:	6801      	ldr	r1, [r0, #0]
 80004ca:	2200      	movs	r2, #0
 80004cc:	694b      	ldr	r3, [r1, #20]
 80004ce:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80004d2:	d010      	beq.n	80004f6 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80004d4:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80004d8:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80004da:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80004dc:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80004de:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80004e2:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80004e6:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80004e8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80004ec:	f043 0304 	orr.w	r3, r3, #4
 80004f0:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80004f2:	2001      	movs	r0, #1
 80004f4:	4770      	bx	lr
  }
  return HAL_OK;
 80004f6:	4618      	mov	r0, r3
}
 80004f8:	4770      	bx	lr

080004fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80004fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80004fe:	4604      	mov	r4, r0
 8000500:	4617      	mov	r7, r2
 8000502:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000504:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8000508:	b28e      	uxth	r6, r1
 800050a:	6825      	ldr	r5, [r4, #0]
 800050c:	f1b8 0f01 	cmp.w	r8, #1
 8000510:	bf0c      	ite	eq
 8000512:	696b      	ldreq	r3, [r5, #20]
 8000514:	69ab      	ldrne	r3, [r5, #24]
 8000516:	ea36 0303 	bics.w	r3, r6, r3
 800051a:	bf14      	ite	ne
 800051c:	2001      	movne	r0, #1
 800051e:	2000      	moveq	r0, #0
 8000520:	b908      	cbnz	r0, 8000526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8000522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000526:	696b      	ldr	r3, [r5, #20]
 8000528:	055a      	lsls	r2, r3, #21
 800052a:	d516      	bpl.n	800055a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800052c:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 800052e:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000530:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000534:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000536:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800053a:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800053c:	2300      	movs	r3, #0
 800053e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000540:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000544:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000548:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800054a:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800054e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000550:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000554:	2001      	movs	r0, #1
 8000556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 800055a:	1c7b      	adds	r3, r7, #1
 800055c:	d0d5      	beq.n	800050a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800055e:	f7ff fe37 	bl	80001d0 <HAL_GetTick>
 8000562:	eba0 0009 	sub.w	r0, r0, r9
 8000566:	4287      	cmp	r7, r0
 8000568:	d301      	bcc.n	800056e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 800056a:	2f00      	cmp	r7, #0
 800056c:	d1cd      	bne.n	800050a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800056e:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8000570:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000572:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000574:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000578:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800057c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800057e:	f042 0220 	orr.w	r2, r2, #32
 8000582:	e7e4      	b.n	800054e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

08000584 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8000584:	b570      	push	{r4, r5, r6, lr}
 8000586:	4604      	mov	r4, r0
 8000588:	460d      	mov	r5, r1
 800058a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800058c:	6823      	ldr	r3, [r4, #0]
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	075b      	lsls	r3, r3, #29
 8000592:	d501      	bpl.n	8000598 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8000594:	2000      	movs	r0, #0
 8000596:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000598:	4620      	mov	r0, r4
 800059a:	f7ff ff95 	bl	80004c8 <I2C_IsAcknowledgeFailed>
 800059e:	b9a8      	cbnz	r0, 80005cc <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80005a0:	1c6a      	adds	r2, r5, #1
 80005a2:	d0f3      	beq.n	800058c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80005a4:	f7ff fe14 	bl	80001d0 <HAL_GetTick>
 80005a8:	1b80      	subs	r0, r0, r6
 80005aa:	4285      	cmp	r5, r0
 80005ac:	d301      	bcc.n	80005b2 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80005ae:	2d00      	cmp	r5, #0
 80005b0:	d1ec      	bne.n	800058c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80005b2:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80005b4:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80005b6:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80005b8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80005bc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80005c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80005c2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80005c6:	f042 0220 	orr.w	r2, r2, #32
 80005ca:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80005cc:	2001      	movs	r0, #1
}
 80005ce:	bd70      	pop	{r4, r5, r6, pc}

080005d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	4604      	mov	r4, r0
 80005d4:	460d      	mov	r5, r1
 80005d6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80005d8:	6820      	ldr	r0, [r4, #0]
 80005da:	6943      	ldr	r3, [r0, #20]
 80005dc:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80005e0:	d001      	beq.n	80005e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80005e2:	2000      	movs	r0, #0
}
 80005e4:	bd70      	pop	{r4, r5, r6, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80005e6:	6942      	ldr	r2, [r0, #20]
 80005e8:	06d2      	lsls	r2, r2, #27
 80005ea:	d50e      	bpl.n	800060a <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80005ec:	f06f 0210 	mvn.w	r2, #16
 80005f0:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80005f2:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80005f4:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80005f6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80005fa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80005fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000600:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000602:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8000606:	2001      	movs	r0, #1
 8000608:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800060a:	f7ff fde1 	bl	80001d0 <HAL_GetTick>
 800060e:	1b80      	subs	r0, r0, r6
 8000610:	42a8      	cmp	r0, r5
 8000612:	d801      	bhi.n	8000618 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8000614:	2d00      	cmp	r5, #0
 8000616:	d1df      	bne.n	80005d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000618:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800061a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800061c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800061e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000622:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000626:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000628:	f042 0220 	orr.w	r2, r2, #32
 800062c:	e7e8      	b.n	8000600 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

0800062e <I2C_WaitOnFlagUntilTimeout>:
{
 800062e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000632:	4604      	mov	r4, r0
 8000634:	4690      	mov	r8, r2
 8000636:	461f      	mov	r7, r3
 8000638:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800063a:	f3c1 4907 	ubfx	r9, r1, #16, #8
 800063e:	b28d      	uxth	r5, r1
 8000640:	6823      	ldr	r3, [r4, #0]
 8000642:	f1b9 0f01 	cmp.w	r9, #1
 8000646:	bf0c      	ite	eq
 8000648:	695b      	ldreq	r3, [r3, #20]
 800064a:	699b      	ldrne	r3, [r3, #24]
 800064c:	ea35 0303 	bics.w	r3, r5, r3
 8000650:	bf0c      	ite	eq
 8000652:	2301      	moveq	r3, #1
 8000654:	2300      	movne	r3, #0
 8000656:	4543      	cmp	r3, r8
 8000658:	d002      	beq.n	8000660 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 800065a:	2000      	movs	r0, #0
}
 800065c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000660:	1c7b      	adds	r3, r7, #1
 8000662:	d0ed      	beq.n	8000640 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000664:	f7ff fdb4 	bl	80001d0 <HAL_GetTick>
 8000668:	1b80      	subs	r0, r0, r6
 800066a:	4287      	cmp	r7, r0
 800066c:	d301      	bcc.n	8000672 <I2C_WaitOnFlagUntilTimeout+0x44>
 800066e:	2f00      	cmp	r7, #0
 8000670:	d1e6      	bne.n	8000640 <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000672:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000674:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000676:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000678:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800067c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000680:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000682:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000686:	f042 0220 	orr.w	r2, r2, #32
 800068a:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800068c:	2001      	movs	r0, #1
 800068e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000692 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8000692:	b570      	push	{r4, r5, r6, lr}
 8000694:	4604      	mov	r4, r0
 8000696:	460d      	mov	r5, r1
 8000698:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800069a:	6823      	ldr	r3, [r4, #0]
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	061b      	lsls	r3, r3, #24
 80006a0:	d501      	bpl.n	80006a6 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80006a2:	2000      	movs	r0, #0
 80006a4:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80006a6:	4620      	mov	r0, r4
 80006a8:	f7ff ff0e 	bl	80004c8 <I2C_IsAcknowledgeFailed>
 80006ac:	b9a8      	cbnz	r0, 80006da <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80006ae:	1c6a      	adds	r2, r5, #1
 80006b0:	d0f3      	beq.n	800069a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80006b2:	f7ff fd8d 	bl	80001d0 <HAL_GetTick>
 80006b6:	1b80      	subs	r0, r0, r6
 80006b8:	4285      	cmp	r5, r0
 80006ba:	d301      	bcc.n	80006c0 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80006bc:	2d00      	cmp	r5, #0
 80006be:	d1ec      	bne.n	800069a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80006c0:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80006c2:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80006c4:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80006c6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80006ca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80006ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80006d0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80006d4:	f042 0220 	orr.w	r2, r2, #32
 80006d8:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80006da:	2001      	movs	r0, #1
}
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080006e0 <I2C_RequestMemoryWrite>:
{
 80006e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80006e4:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80006e6:	6802      	ldr	r2, [r0, #0]
{
 80006e8:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80006ea:	6813      	ldr	r3, [r2, #0]
{
 80006ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80006ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f2:	6013      	str	r3, [r2, #0]
{
 80006f4:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80006f6:	9600      	str	r6, [sp, #0]
 80006f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006fa:	2200      	movs	r2, #0
 80006fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8000700:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000702:	f7ff ff94 	bl	800062e <I2C_WaitOnFlagUntilTimeout>
 8000706:	b118      	cbz	r0, 8000710 <I2C_RequestMemoryWrite+0x30>
      return HAL_ERROR;
 8000708:	2001      	movs	r0, #1
}
 800070a:	b004      	add	sp, #16
 800070c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000710:	6823      	ldr	r3, [r4, #0]
 8000712:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8000716:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000718:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800071a:	4633      	mov	r3, r6
 800071c:	4916      	ldr	r1, [pc, #88]	; (8000778 <I2C_RequestMemoryWrite+0x98>)
 800071e:	4620      	mov	r0, r4
 8000720:	f7ff feeb 	bl	80004fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000724:	2800      	cmp	r0, #0
 8000726:	d1ef      	bne.n	8000708 <I2C_RequestMemoryWrite+0x28>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000728:	6823      	ldr	r3, [r4, #0]
 800072a:	9003      	str	r0, [sp, #12]
 800072c:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800072e:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000730:	9203      	str	r2, [sp, #12]
 8000732:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000734:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000736:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000738:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800073a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800073c:	f7ff ffa9 	bl	8000692 <I2C_WaitOnTXEFlagUntilTimeout>
 8000740:	b140      	cbz	r0, 8000754 <I2C_RequestMemoryWrite+0x74>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000742:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000744:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000746:	bf01      	itttt	eq
 8000748:	6822      	ldreq	r2, [r4, #0]
 800074a:	6813      	ldreq	r3, [r2, #0]
 800074c:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8000750:	6013      	streq	r3, [r2, #0]
 8000752:	e7d9      	b.n	8000708 <I2C_RequestMemoryWrite+0x28>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000754:	f1b8 0f01 	cmp.w	r8, #1
 8000758:	6823      	ldr	r3, [r4, #0]
 800075a:	d102      	bne.n	8000762 <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800075c:	b2ed      	uxtb	r5, r5
 800075e:	611d      	str	r5, [r3, #16]
 8000760:	e7d3      	b.n	800070a <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000762:	0a2a      	lsrs	r2, r5, #8
 8000764:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000766:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000768:	4632      	mov	r2, r6
 800076a:	4620      	mov	r0, r4
 800076c:	f7ff ff91 	bl	8000692 <I2C_WaitOnTXEFlagUntilTimeout>
 8000770:	2800      	cmp	r0, #0
 8000772:	d1e6      	bne.n	8000742 <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000774:	6823      	ldr	r3, [r4, #0]
 8000776:	e7f1      	b.n	800075c <I2C_RequestMemoryWrite+0x7c>
 8000778:	00010002 	.word	0x00010002

0800077c <I2C_RequestMemoryRead>:
{
 800077c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000780:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000782:	6803      	ldr	r3, [r0, #0]
{
 8000784:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000786:	681a      	ldr	r2, [r3, #0]
{
 8000788:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800078a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800078e:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000790:	681a      	ldr	r2, [r3, #0]
{
 8000792:	460f      	mov	r7, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000798:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800079a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800079e:	9500      	str	r5, [sp, #0]
 80007a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80007a2:	2200      	movs	r2, #0
{
 80007a4:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80007a6:	f7ff ff42 	bl	800062e <I2C_WaitOnFlagUntilTimeout>
 80007aa:	b118      	cbz	r0, 80007b4 <I2C_RequestMemoryRead+0x38>
    return HAL_ERROR;
 80007ac:	2001      	movs	r0, #1
}
 80007ae:	b004      	add	sp, #16
 80007b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80007b4:	6823      	ldr	r3, [r4, #0]
 80007b6:	b2ff      	uxtb	r7, r7
 80007b8:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 80007bc:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80007be:	4929      	ldr	r1, [pc, #164]	; (8000864 <I2C_RequestMemoryRead+0xe8>)
 80007c0:	462b      	mov	r3, r5
 80007c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80007c4:	4620      	mov	r0, r4
 80007c6:	f7ff fe98 	bl	80004fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80007ca:	2800      	cmp	r0, #0
 80007cc:	d1ee      	bne.n	80007ac <I2C_RequestMemoryRead+0x30>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80007ce:	6823      	ldr	r3, [r4, #0]
 80007d0:	9003      	str	r0, [sp, #12]
 80007d2:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80007d4:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80007d6:	9203      	str	r2, [sp, #12]
 80007d8:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80007da:	462a      	mov	r2, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80007dc:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80007de:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80007e0:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80007e2:	f7ff ff56 	bl	8000692 <I2C_WaitOnTXEFlagUntilTimeout>
 80007e6:	b140      	cbz	r0, 80007fa <I2C_RequestMemoryRead+0x7e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80007e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007ea:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80007ec:	bf01      	itttt	eq
 80007ee:	6822      	ldreq	r2, [r4, #0]
 80007f0:	6813      	ldreq	r3, [r2, #0]
 80007f2:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80007f6:	6013      	streq	r3, [r2, #0]
 80007f8:	e7d8      	b.n	80007ac <I2C_RequestMemoryRead+0x30>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80007fa:	f1b8 0f01 	cmp.w	r8, #1
 80007fe:	6823      	ldr	r3, [r4, #0]
 8000800:	d125      	bne.n	800084e <I2C_RequestMemoryRead+0xd2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000802:	b2f6      	uxtb	r6, r6
 8000804:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000806:	462a      	mov	r2, r5
 8000808:	990a      	ldr	r1, [sp, #40]	; 0x28
 800080a:	4620      	mov	r0, r4
 800080c:	f7ff ff41 	bl	8000692 <I2C_WaitOnTXEFlagUntilTimeout>
 8000810:	4602      	mov	r2, r0
 8000812:	2800      	cmp	r0, #0
 8000814:	d1e8      	bne.n	80007e8 <I2C_RequestMemoryRead+0x6c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000816:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000818:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800081a:	680b      	ldr	r3, [r1, #0]
 800081c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000820:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000822:	9500      	str	r5, [sp, #0]
 8000824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000826:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800082a:	f7ff ff00 	bl	800062e <I2C_WaitOnFlagUntilTimeout>
 800082e:	2800      	cmp	r0, #0
 8000830:	d1bc      	bne.n	80007ac <I2C_RequestMemoryRead+0x30>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000832:	6823      	ldr	r3, [r4, #0]
 8000834:	f047 0701 	orr.w	r7, r7, #1
 8000838:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800083a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800083c:	462b      	mov	r3, r5
 800083e:	4909      	ldr	r1, [pc, #36]	; (8000864 <I2C_RequestMemoryRead+0xe8>)
 8000840:	4620      	mov	r0, r4
 8000842:	f7ff fe5a 	bl	80004fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_ERROR;
 8000846:	3000      	adds	r0, #0
 8000848:	bf18      	it	ne
 800084a:	2001      	movne	r0, #1
 800084c:	e7af      	b.n	80007ae <I2C_RequestMemoryRead+0x32>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800084e:	0a32      	lsrs	r2, r6, #8
 8000850:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000852:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000854:	462a      	mov	r2, r5
 8000856:	4620      	mov	r0, r4
 8000858:	f7ff ff1b 	bl	8000692 <I2C_WaitOnTXEFlagUntilTimeout>
 800085c:	2800      	cmp	r0, #0
 800085e:	d1c3      	bne.n	80007e8 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000860:	6823      	ldr	r3, [r4, #0]
 8000862:	e7ce      	b.n	8000802 <I2C_RequestMemoryRead+0x86>
 8000864:	00010002 	.word	0x00010002

08000868 <HAL_I2C_Init>:
{
 8000868:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800086a:	4604      	mov	r4, r0
 800086c:	b908      	cbnz	r0, 8000872 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800086e:	2001      	movs	r0, #1
 8000870:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000872:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000876:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800087a:	b91b      	cbnz	r3, 8000884 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800087c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000880:	f000 fe40 	bl	8001504 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000884:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8000886:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000888:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800088c:	6813      	ldr	r3, [r2, #0]
 800088e:	f023 0301 	bic.w	r3, r3, #1
 8000892:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000894:	f000 fcae 	bl	80011f4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000898:	6865      	ldr	r5, [r4, #4]
 800089a:	4b41      	ldr	r3, [pc, #260]	; (80009a0 <HAL_I2C_Init+0x138>)
 800089c:	429d      	cmp	r5, r3
 800089e:	d84d      	bhi.n	800093c <HAL_I2C_Init+0xd4>
 80008a0:	4b40      	ldr	r3, [pc, #256]	; (80009a4 <HAL_I2C_Init+0x13c>)
 80008a2:	4298      	cmp	r0, r3
 80008a4:	d9e3      	bls.n	800086e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80008a6:	4940      	ldr	r1, [pc, #256]	; (80009a8 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80008a8:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80008aa:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80008ae:	6853      	ldr	r3, [r2, #4]
 80008b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008b4:	430b      	orrs	r3, r1
 80008b6:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80008b8:	6a13      	ldr	r3, [r2, #32]
 80008ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008be:	3101      	adds	r1, #1
 80008c0:	4319      	orrs	r1, r3
 80008c2:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80008c4:	69d1      	ldr	r1, [r2, #28]
 80008c6:	4b36      	ldr	r3, [pc, #216]	; (80009a0 <HAL_I2C_Init+0x138>)
 80008c8:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80008cc:	429d      	cmp	r5, r3
 80008ce:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80008d2:	f100 30ff 	add.w	r0, r0, #4294967295
 80008d6:	d848      	bhi.n	800096a <HAL_I2C_Init+0x102>
 80008d8:	006d      	lsls	r5, r5, #1
 80008da:	fbb0 f0f5 	udiv	r0, r0, r5
 80008de:	3001      	adds	r0, #1
 80008e0:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80008e4:	2b04      	cmp	r3, #4
 80008e6:	bf38      	it	cc
 80008e8:	2304      	movcc	r3, #4
 80008ea:	430b      	orrs	r3, r1
 80008ec:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80008ee:	6811      	ldr	r1, [r2, #0]
 80008f0:	6a20      	ldr	r0, [r4, #32]
 80008f2:	69e3      	ldr	r3, [r4, #28]
 80008f4:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80008f8:	4303      	orrs	r3, r0
 80008fa:	430b      	orrs	r3, r1
 80008fc:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80008fe:	6891      	ldr	r1, [r2, #8]
 8000900:	68e0      	ldr	r0, [r4, #12]
 8000902:	6923      	ldr	r3, [r4, #16]
 8000904:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8000908:	4303      	orrs	r3, r0
 800090a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800090e:	430b      	orrs	r3, r1
 8000910:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000912:	68d1      	ldr	r1, [r2, #12]
 8000914:	69a0      	ldr	r0, [r4, #24]
 8000916:	6963      	ldr	r3, [r4, #20]
 8000918:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800091c:	4303      	orrs	r3, r0
 800091e:	430b      	orrs	r3, r1
 8000920:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000922:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000924:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8000926:	f043 0301 	orr.w	r3, r3, #1
 800092a:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800092c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800092e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000930:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000934:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000936:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800093a:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800093c:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <HAL_I2C_Init+0x144>)
 800093e:	4298      	cmp	r0, r3
 8000940:	d995      	bls.n	800086e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000942:	4e19      	ldr	r6, [pc, #100]	; (80009a8 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000944:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8000948:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800094c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800094e:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000950:	6853      	ldr	r3, [r2, #4]
 8000952:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000956:	4333      	orrs	r3, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000958:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800095c:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800095e:	6a13      	ldr	r3, [r2, #32]
 8000960:	fbb1 f1f6 	udiv	r1, r1, r6
 8000964:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000968:	e7a9      	b.n	80008be <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800096a:	68a3      	ldr	r3, [r4, #8]
 800096c:	b953      	cbnz	r3, 8000984 <HAL_I2C_Init+0x11c>
 800096e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000972:	fbb0 f0f3 	udiv	r0, r0, r3
 8000976:	1c43      	adds	r3, r0, #1
 8000978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800097c:	b16b      	cbz	r3, 800099a <HAL_I2C_Init+0x132>
 800097e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000982:	e7b2      	b.n	80008ea <HAL_I2C_Init+0x82>
 8000984:	2319      	movs	r3, #25
 8000986:	436b      	muls	r3, r5
 8000988:	fbb0 f0f3 	udiv	r0, r0, r3
 800098c:	1c43      	adds	r3, r0, #1
 800098e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000992:	b113      	cbz	r3, 800099a <HAL_I2C_Init+0x132>
 8000994:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000998:	e7a7      	b.n	80008ea <HAL_I2C_Init+0x82>
 800099a:	2301      	movs	r3, #1
 800099c:	e7a5      	b.n	80008ea <HAL_I2C_Init+0x82>
 800099e:	bf00      	nop
 80009a0:	000186a0 	.word	0x000186a0
 80009a4:	001e847f 	.word	0x001e847f
 80009a8:	000f4240 	.word	0x000f4240
 80009ac:	003d08ff 	.word	0x003d08ff

080009b0 <HAL_I2C_Mem_Write>:
{
 80009b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80009b4:	4604      	mov	r4, r0
 80009b6:	4699      	mov	r9, r3
 80009b8:	460f      	mov	r7, r1
 80009ba:	4690      	mov	r8, r2
 80009bc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80009be:	f7ff fc07 	bl	80001d0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80009c2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80009c6:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80009c8:	2b20      	cmp	r3, #32
 80009ca:	d003      	beq.n	80009d4 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 80009cc:	2002      	movs	r0, #2
}
 80009ce:	b003      	add	sp, #12
 80009d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80009d4:	9000      	str	r0, [sp, #0]
 80009d6:	2319      	movs	r3, #25
 80009d8:	2201      	movs	r2, #1
 80009da:	493b      	ldr	r1, [pc, #236]	; (8000ac8 <HAL_I2C_Mem_Write+0x118>)
 80009dc:	4620      	mov	r0, r4
 80009de:	f7ff fe26 	bl	800062e <I2C_WaitOnFlagUntilTimeout>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	d1f2      	bne.n	80009cc <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80009e6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d0ee      	beq.n	80009cc <HAL_I2C_Mem_Write+0x1c>
 80009ee:	2301      	movs	r3, #1
 80009f0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80009f4:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80009f6:	4620      	mov	r0, r4
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80009fc:	bf58      	it	pl
 80009fe:	681a      	ldrpl	r2, [r3, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000a00:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8000a02:	bf5c      	itt	pl
 8000a04:	f042 0201 	orrpl.w	r2, r2, #1
 8000a08:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a10:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000a12:	2321      	movs	r3, #33	; 0x21
 8000a14:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000a18:	2340      	movs	r3, #64	; 0x40
 8000a1a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8000a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000a24:	9501      	str	r5, [sp, #4]
    hi2c->pBuffPtr    = pData;
 8000a26:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000a28:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000a2c:	9600      	str	r6, [sp, #0]
    hi2c->XferCount   = Size;
 8000a2e:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000a30:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000a32:	4642      	mov	r2, r8
    hi2c->XferSize    = hi2c->XferCount;
 8000a34:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000a36:	4b25      	ldr	r3, [pc, #148]	; (8000acc <HAL_I2C_Mem_Write+0x11c>)
 8000a38:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000a3a:	464b      	mov	r3, r9
 8000a3c:	f7ff fe50 	bl	80006e0 <I2C_RequestMemoryWrite>
 8000a40:	2800      	cmp	r0, #0
 8000a42:	d02a      	beq.n	8000a9a <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8000a44:	2001      	movs	r0, #1
 8000a46:	e7c2      	b.n	80009ce <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000a48:	f7ff fe23 	bl	8000692 <I2C_WaitOnTXEFlagUntilTimeout>
 8000a4c:	b140      	cbz	r0, 8000a60 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000a4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a50:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000a52:	bf01      	itttt	eq
 8000a54:	6822      	ldreq	r2, [r4, #0]
 8000a56:	6813      	ldreq	r3, [r2, #0]
 8000a58:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8000a5c:	6013      	streq	r3, [r2, #0]
 8000a5e:	e7f1      	b.n	8000a44 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000a60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a62:	6827      	ldr	r7, [r4, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	f812 1b01 	ldrb.w	r1, [r2], #1
 8000a6a:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8000a6c:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000a6e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000a70:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000a72:	3a01      	subs	r2, #1
 8000a74:	b292      	uxth	r2, r2
 8000a76:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000a78:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8000a7a:	1e48      	subs	r0, r1, #1
 8000a7c:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000a7e:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8000a80:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000a82:	d50a      	bpl.n	8000a9a <HAL_I2C_Mem_Write+0xea>
 8000a84:	b148      	cbz	r0, 8000a9a <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000a86:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8000a88:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000a8a:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8000a8c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8000a8e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8000a90:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8000a92:	3b01      	subs	r3, #1
 8000a94:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8000a96:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8000a98:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8000a9a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000a9c:	462a      	mov	r2, r5
 8000a9e:	4631      	mov	r1, r6
 8000aa0:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d1d0      	bne.n	8000a48 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000aa6:	f7ff fd6d 	bl	8000584 <I2C_WaitOnBTFFlagUntilTimeout>
 8000aaa:	2800      	cmp	r0, #0
 8000aac:	d1cf      	bne.n	8000a4e <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000aae:	6822      	ldr	r2, [r4, #0]
 8000ab0:	6813      	ldr	r3, [r2, #0]
 8000ab2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ab6:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000ab8:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8000aba:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8000abe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ac2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8000ac6:	e782      	b.n	80009ce <HAL_I2C_Mem_Write+0x1e>
 8000ac8:	00100002 	.word	0x00100002
 8000acc:	ffff0000 	.word	0xffff0000

08000ad0 <HAL_I2C_Mem_Read>:
{
 8000ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ad4:	4604      	mov	r4, r0
 8000ad6:	b087      	sub	sp, #28
 8000ad8:	4699      	mov	r9, r3
 8000ada:	460d      	mov	r5, r1
 8000adc:	4690      	mov	r8, r2
 8000ade:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8000ae0:	f7ff fb76 	bl	80001d0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ae4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8000ae8:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000aea:	2b20      	cmp	r3, #32
 8000aec:	d004      	beq.n	8000af8 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8000aee:	2502      	movs	r5, #2
}
 8000af0:	4628      	mov	r0, r5
 8000af2:	b007      	add	sp, #28
 8000af4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000af8:	9000      	str	r0, [sp, #0]
 8000afa:	2319      	movs	r3, #25
 8000afc:	2201      	movs	r2, #1
 8000afe:	497e      	ldr	r1, [pc, #504]	; (8000cf8 <HAL_I2C_Mem_Read+0x228>)
 8000b00:	4620      	mov	r0, r4
 8000b02:	f7ff fd94 	bl	800062e <I2C_WaitOnFlagUntilTimeout>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	d1f1      	bne.n	8000aee <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8000b0a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d0ed      	beq.n	8000aee <HAL_I2C_Mem_Read+0x1e>
 8000b12:	2301      	movs	r3, #1
 8000b14:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000b18:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000b1a:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000b20:	bf58      	it	pl
 8000b22:	681a      	ldrpl	r2, [r3, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000b24:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 8000b26:	bf5c      	itt	pl
 8000b28:	f042 0201 	orrpl.w	r2, r2, #1
 8000b2c:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b34:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000b36:	2322      	movs	r3, #34	; 0x22
 8000b38:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000b3c:	2340      	movs	r3, #64	; 0x40
 8000b3e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8000b46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000b48:	9601      	str	r6, [sp, #4]
    hi2c->pBuffPtr    = pData;
 8000b4a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000b4c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000b50:	9700      	str	r7, [sp, #0]
    hi2c->XferCount   = Size;
 8000b52:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000b54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000b56:	4642      	mov	r2, r8
    hi2c->XferSize    = hi2c->XferCount;
 8000b58:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000b5a:	4b68      	ldr	r3, [pc, #416]	; (8000cfc <HAL_I2C_Mem_Read+0x22c>)
 8000b5c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000b5e:	464b      	mov	r3, r9
 8000b60:	f7ff fe0c 	bl	800077c <I2C_RequestMemoryRead>
 8000b64:	4605      	mov	r5, r0
 8000b66:	b108      	cbz	r0, 8000b6c <HAL_I2C_Mem_Read+0x9c>
      return HAL_ERROR;
 8000b68:	2501      	movs	r5, #1
 8000b6a:	e7c1      	b.n	8000af0 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 8000b6c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000b6e:	6823      	ldr	r3, [r4, #0]
 8000b70:	b992      	cbnz	r2, 8000b98 <HAL_I2C_Mem_Read+0xc8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b72:	9002      	str	r0, [sp, #8]
 8000b74:	695a      	ldr	r2, [r3, #20]
 8000b76:	9202      	str	r2, [sp, #8]
 8000b78:	699a      	ldr	r2, [r3, #24]
 8000b7a:	9202      	str	r2, [sp, #8]
 8000b7c:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b84:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000b86:	2320      	movs	r3, #32
 8000b88:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8000b92:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8000b96:	e7ab      	b.n	8000af0 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8000b98:	2a01      	cmp	r2, #1
 8000b9a:	d12f      	bne.n	8000bfc <HAL_I2C_Mem_Read+0x12c>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ba2:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba4:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000ba6:	6823      	ldr	r3, [r4, #0]
 8000ba8:	9003      	str	r0, [sp, #12]
 8000baa:	695a      	ldr	r2, [r3, #20]
 8000bac:	9203      	str	r2, [sp, #12]
 8000bae:	699a      	ldr	r2, [r3, #24]
 8000bb0:	9203      	str	r2, [sp, #12]
 8000bb2:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000bba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000bbc:	b662      	cpsie	i
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000bbe:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8000d00 <HAL_I2C_Mem_Read+0x230>
    while (hi2c->XferSize > 0U)
 8000bc2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d0de      	beq.n	8000b86 <HAL_I2C_Mem_Read+0xb6>
      if (hi2c->XferSize <= 3U)
 8000bc8:	2b03      	cmp	r3, #3
 8000bca:	d877      	bhi.n	8000cbc <HAL_I2C_Mem_Read+0x1ec>
        if (hi2c->XferSize == 1U)
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d131      	bne.n	8000c34 <HAL_I2C_Mem_Read+0x164>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000bd0:	4632      	mov	r2, r6
 8000bd2:	4639      	mov	r1, r7
 8000bd4:	4620      	mov	r0, r4
 8000bd6:	f7ff fcfb 	bl	80005d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000bda:	2800      	cmp	r0, #0
 8000bdc:	d1c4      	bne.n	8000b68 <HAL_I2C_Mem_Read+0x98>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000bde:	6822      	ldr	r2, [r4, #0]
 8000be0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000be2:	6912      	ldr	r2, [r2, #16]
 8000be4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8000be6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000be8:	3301      	adds	r3, #1
 8000bea:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8000bec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8000bf2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	8563      	strh	r3, [r4, #42]	; 0x2a
 8000bfa:	e7e2      	b.n	8000bc2 <HAL_I2C_Mem_Read+0xf2>
    else if (hi2c->XferSize == 2U)
 8000bfc:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000bfe:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8000c00:	d10e      	bne.n	8000c20 <HAL_I2C_Mem_Read+0x150>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000c02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000c0a:	6823      	ldr	r3, [r4, #0]
 8000c0c:	9004      	str	r0, [sp, #16]
 8000c0e:	695a      	ldr	r2, [r3, #20]
 8000c10:	9204      	str	r2, [sp, #16]
 8000c12:	699a      	ldr	r2, [r3, #24]
 8000c14:	9204      	str	r2, [sp, #16]
 8000c16:	9a04      	ldr	r2, [sp, #16]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c1e:	e7cc      	b.n	8000bba <HAL_I2C_Mem_Read+0xea>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000c20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c24:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000c26:	9005      	str	r0, [sp, #20]
 8000c28:	695a      	ldr	r2, [r3, #20]
 8000c2a:	9205      	str	r2, [sp, #20]
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	9305      	str	r3, [sp, #20]
 8000c30:	9b05      	ldr	r3, [sp, #20]
 8000c32:	e7c4      	b.n	8000bbe <HAL_I2C_Mem_Read+0xee>
        else if (hi2c->XferSize == 2U)
 8000c34:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000c36:	9600      	str	r6, [sp, #0]
 8000c38:	463b      	mov	r3, r7
 8000c3a:	f04f 0200 	mov.w	r2, #0
 8000c3e:	4641      	mov	r1, r8
 8000c40:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8000c42:	d118      	bne.n	8000c76 <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000c44:	f7ff fcf3 	bl	800062e <I2C_WaitOnFlagUntilTimeout>
 8000c48:	2800      	cmp	r0, #0
 8000c4a:	d18d      	bne.n	8000b68 <HAL_I2C_Mem_Read+0x98>
 8000c4c:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000c4e:	6823      	ldr	r3, [r4, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c56:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000c58:	691b      	ldr	r3, [r3, #16]
 8000c5a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000c5c:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8000c5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c60:	3301      	adds	r3, #1
 8000c62:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8000c64:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000c66:	3b01      	subs	r3, #1
 8000c68:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8000c6a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8000c72:	b662      	cpsie	i
 8000c74:	e7b3      	b.n	8000bde <HAL_I2C_Mem_Read+0x10e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000c76:	f7ff fcda 	bl	800062e <I2C_WaitOnFlagUntilTimeout>
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	2800      	cmp	r0, #0
 8000c7e:	f47f af73 	bne.w	8000b68 <HAL_I2C_Mem_Read+0x98>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000c82:	6821      	ldr	r1, [r4, #0]
 8000c84:	680b      	ldr	r3, [r1, #0]
 8000c86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c8a:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000c8e:	6821      	ldr	r1, [r4, #0]
 8000c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c92:	6909      	ldr	r1, [r1, #16]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000c94:	4620      	mov	r0, r4
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000c96:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 8000c98:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000c9a:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8000ca0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000ca2:	4641      	mov	r1, r8
          hi2c->XferSize--;
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8000ca8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000caa:	3b01      	subs	r3, #1
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	f7ff fcbc 	bl	800062e <I2C_WaitOnFlagUntilTimeout>
 8000cb6:	2800      	cmp	r0, #0
 8000cb8:	d0c9      	beq.n	8000c4e <HAL_I2C_Mem_Read+0x17e>
 8000cba:	e755      	b.n	8000b68 <HAL_I2C_Mem_Read+0x98>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000cbc:	4632      	mov	r2, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	f7ff fc85 	bl	80005d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000cc6:	2800      	cmp	r0, #0
 8000cc8:	f47f af4e 	bne.w	8000b68 <HAL_I2C_Mem_Read+0x98>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000ccc:	6822      	ldr	r2, [r4, #0]
 8000cce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000cd0:	6912      	ldr	r2, [r2, #16]
 8000cd2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8000cd4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000cd6:	1c53      	adds	r3, r2, #1
 8000cd8:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8000cda:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000cdc:	3b01      	subs	r3, #1
 8000cde:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8000ce0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8000ce8:	6823      	ldr	r3, [r4, #0]
 8000cea:	6959      	ldr	r1, [r3, #20]
 8000cec:	0749      	lsls	r1, r1, #29
 8000cee:	f57f af68 	bpl.w	8000bc2 <HAL_I2C_Mem_Read+0xf2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000cf2:	691b      	ldr	r3, [r3, #16]
 8000cf4:	7053      	strb	r3, [r2, #1]
 8000cf6:	e776      	b.n	8000be6 <HAL_I2C_Mem_Read+0x116>
 8000cf8:	00100002 	.word	0x00100002
 8000cfc:	ffff0000 	.word	0xffff0000
 8000d00:	00010004 	.word	0x00010004

08000d04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d08:	4605      	mov	r5, r0
 8000d0a:	b908      	cbnz	r0, 8000d10 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	e03c      	b.n	8000d8a <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d10:	6803      	ldr	r3, [r0, #0]
 8000d12:	07db      	lsls	r3, r3, #31
 8000d14:	d410      	bmi.n	8000d38 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d16:	682b      	ldr	r3, [r5, #0]
 8000d18:	079f      	lsls	r7, r3, #30
 8000d1a:	d45d      	bmi.n	8000dd8 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d1c:	682b      	ldr	r3, [r5, #0]
 8000d1e:	0719      	lsls	r1, r3, #28
 8000d20:	f100 8094 	bmi.w	8000e4c <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d24:	682b      	ldr	r3, [r5, #0]
 8000d26:	075a      	lsls	r2, r3, #29
 8000d28:	f100 80be 	bmi.w	8000ea8 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d2c:	69e8      	ldr	r0, [r5, #28]
 8000d2e:	2800      	cmp	r0, #0
 8000d30:	f040 812c 	bne.w	8000f8c <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8000d34:	2000      	movs	r0, #0
 8000d36:	e028      	b.n	8000d8a <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d38:	4c8f      	ldr	r4, [pc, #572]	; (8000f78 <HAL_RCC_OscConfig+0x274>)
 8000d3a:	6863      	ldr	r3, [r4, #4]
 8000d3c:	f003 030c 	and.w	r3, r3, #12
 8000d40:	2b04      	cmp	r3, #4
 8000d42:	d007      	beq.n	8000d54 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d44:	6863      	ldr	r3, [r4, #4]
 8000d46:	f003 030c 	and.w	r3, r3, #12
 8000d4a:	2b08      	cmp	r3, #8
 8000d4c:	d109      	bne.n	8000d62 <HAL_RCC_OscConfig+0x5e>
 8000d4e:	6863      	ldr	r3, [r4, #4]
 8000d50:	03de      	lsls	r6, r3, #15
 8000d52:	d506      	bpl.n	8000d62 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d54:	6823      	ldr	r3, [r4, #0]
 8000d56:	039c      	lsls	r4, r3, #14
 8000d58:	d5dd      	bpl.n	8000d16 <HAL_RCC_OscConfig+0x12>
 8000d5a:	686b      	ldr	r3, [r5, #4]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d1da      	bne.n	8000d16 <HAL_RCC_OscConfig+0x12>
 8000d60:	e7d4      	b.n	8000d0c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d62:	686b      	ldr	r3, [r5, #4]
 8000d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d68:	d112      	bne.n	8000d90 <HAL_RCC_OscConfig+0x8c>
 8000d6a:	6823      	ldr	r3, [r4, #0]
 8000d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d70:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d72:	f7ff fa2d 	bl	80001d0 <HAL_GetTick>
 8000d76:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d78:	6823      	ldr	r3, [r4, #0]
 8000d7a:	0398      	lsls	r0, r3, #14
 8000d7c:	d4cb      	bmi.n	8000d16 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d7e:	f7ff fa27 	bl	80001d0 <HAL_GetTick>
 8000d82:	1b80      	subs	r0, r0, r6
 8000d84:	2864      	cmp	r0, #100	; 0x64
 8000d86:	d9f7      	bls.n	8000d78 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000d88:	2003      	movs	r0, #3
}
 8000d8a:	b002      	add	sp, #8
 8000d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d90:	b99b      	cbnz	r3, 8000dba <HAL_RCC_OscConfig+0xb6>
 8000d92:	6823      	ldr	r3, [r4, #0]
 8000d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d98:	6023      	str	r3, [r4, #0]
 8000d9a:	6823      	ldr	r3, [r4, #0]
 8000d9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000da2:	f7ff fa15 	bl	80001d0 <HAL_GetTick>
 8000da6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000da8:	6823      	ldr	r3, [r4, #0]
 8000daa:	0399      	lsls	r1, r3, #14
 8000dac:	d5b3      	bpl.n	8000d16 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dae:	f7ff fa0f 	bl	80001d0 <HAL_GetTick>
 8000db2:	1b80      	subs	r0, r0, r6
 8000db4:	2864      	cmp	r0, #100	; 0x64
 8000db6:	d9f7      	bls.n	8000da8 <HAL_RCC_OscConfig+0xa4>
 8000db8:	e7e6      	b.n	8000d88 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dbe:	6823      	ldr	r3, [r4, #0]
 8000dc0:	d103      	bne.n	8000dca <HAL_RCC_OscConfig+0xc6>
 8000dc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dc6:	6023      	str	r3, [r4, #0]
 8000dc8:	e7cf      	b.n	8000d6a <HAL_RCC_OscConfig+0x66>
 8000dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dce:	6023      	str	r3, [r4, #0]
 8000dd0:	6823      	ldr	r3, [r4, #0]
 8000dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dd6:	e7cb      	b.n	8000d70 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dd8:	4c67      	ldr	r4, [pc, #412]	; (8000f78 <HAL_RCC_OscConfig+0x274>)
 8000dda:	6863      	ldr	r3, [r4, #4]
 8000ddc:	f013 0f0c 	tst.w	r3, #12
 8000de0:	d007      	beq.n	8000df2 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000de2:	6863      	ldr	r3, [r4, #4]
 8000de4:	f003 030c 	and.w	r3, r3, #12
 8000de8:	2b08      	cmp	r3, #8
 8000dea:	d110      	bne.n	8000e0e <HAL_RCC_OscConfig+0x10a>
 8000dec:	6863      	ldr	r3, [r4, #4]
 8000dee:	03da      	lsls	r2, r3, #15
 8000df0:	d40d      	bmi.n	8000e0e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000df2:	6823      	ldr	r3, [r4, #0]
 8000df4:	079b      	lsls	r3, r3, #30
 8000df6:	d502      	bpl.n	8000dfe <HAL_RCC_OscConfig+0xfa>
 8000df8:	692b      	ldr	r3, [r5, #16]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d186      	bne.n	8000d0c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dfe:	6823      	ldr	r3, [r4, #0]
 8000e00:	696a      	ldr	r2, [r5, #20]
 8000e02:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e06:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e0a:	6023      	str	r3, [r4, #0]
 8000e0c:	e786      	b.n	8000d1c <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e0e:	692a      	ldr	r2, [r5, #16]
 8000e10:	4b5a      	ldr	r3, [pc, #360]	; (8000f7c <HAL_RCC_OscConfig+0x278>)
 8000e12:	b16a      	cbz	r2, 8000e30 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8000e14:	2201      	movs	r2, #1
 8000e16:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e18:	f7ff f9da 	bl	80001d0 <HAL_GetTick>
 8000e1c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e1e:	6823      	ldr	r3, [r4, #0]
 8000e20:	079f      	lsls	r7, r3, #30
 8000e22:	d4ec      	bmi.n	8000dfe <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e24:	f7ff f9d4 	bl	80001d0 <HAL_GetTick>
 8000e28:	1b80      	subs	r0, r0, r6
 8000e2a:	2802      	cmp	r0, #2
 8000e2c:	d9f7      	bls.n	8000e1e <HAL_RCC_OscConfig+0x11a>
 8000e2e:	e7ab      	b.n	8000d88 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000e30:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e32:	f7ff f9cd 	bl	80001d0 <HAL_GetTick>
 8000e36:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e38:	6823      	ldr	r3, [r4, #0]
 8000e3a:	0798      	lsls	r0, r3, #30
 8000e3c:	f57f af6e 	bpl.w	8000d1c <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e40:	f7ff f9c6 	bl	80001d0 <HAL_GetTick>
 8000e44:	1b80      	subs	r0, r0, r6
 8000e46:	2802      	cmp	r0, #2
 8000e48:	d9f6      	bls.n	8000e38 <HAL_RCC_OscConfig+0x134>
 8000e4a:	e79d      	b.n	8000d88 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e4c:	69aa      	ldr	r2, [r5, #24]
 8000e4e:	4c4a      	ldr	r4, [pc, #296]	; (8000f78 <HAL_RCC_OscConfig+0x274>)
 8000e50:	4b4b      	ldr	r3, [pc, #300]	; (8000f80 <HAL_RCC_OscConfig+0x27c>)
 8000e52:	b1da      	cbz	r2, 8000e8c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000e54:	2201      	movs	r2, #1
 8000e56:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e58:	f7ff f9ba 	bl	80001d0 <HAL_GetTick>
 8000e5c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e60:	079b      	lsls	r3, r3, #30
 8000e62:	d50d      	bpl.n	8000e80 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000e64:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000e68:	4b46      	ldr	r3, [pc, #280]	; (8000f84 <HAL_RCC_OscConfig+0x280>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e70:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000e72:	bf00      	nop
  }
  while (Delay --);
 8000e74:	9b01      	ldr	r3, [sp, #4]
 8000e76:	1e5a      	subs	r2, r3, #1
 8000e78:	9201      	str	r2, [sp, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d1f9      	bne.n	8000e72 <HAL_RCC_OscConfig+0x16e>
 8000e7e:	e751      	b.n	8000d24 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e80:	f7ff f9a6 	bl	80001d0 <HAL_GetTick>
 8000e84:	1b80      	subs	r0, r0, r6
 8000e86:	2802      	cmp	r0, #2
 8000e88:	d9e9      	bls.n	8000e5e <HAL_RCC_OscConfig+0x15a>
 8000e8a:	e77d      	b.n	8000d88 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000e8c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e8e:	f7ff f99f 	bl	80001d0 <HAL_GetTick>
 8000e92:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e96:	079f      	lsls	r7, r3, #30
 8000e98:	f57f af44 	bpl.w	8000d24 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e9c:	f7ff f998 	bl	80001d0 <HAL_GetTick>
 8000ea0:	1b80      	subs	r0, r0, r6
 8000ea2:	2802      	cmp	r0, #2
 8000ea4:	d9f6      	bls.n	8000e94 <HAL_RCC_OscConfig+0x190>
 8000ea6:	e76f      	b.n	8000d88 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ea8:	4c33      	ldr	r4, [pc, #204]	; (8000f78 <HAL_RCC_OscConfig+0x274>)
 8000eaa:	69e3      	ldr	r3, [r4, #28]
 8000eac:	00d8      	lsls	r0, r3, #3
 8000eae:	d424      	bmi.n	8000efa <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000eb0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eb2:	69e3      	ldr	r3, [r4, #28]
 8000eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb8:	61e3      	str	r3, [r4, #28]
 8000eba:	69e3      	ldr	r3, [r4, #28]
 8000ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec4:	4e30      	ldr	r6, [pc, #192]	; (8000f88 <HAL_RCC_OscConfig+0x284>)
 8000ec6:	6833      	ldr	r3, [r6, #0]
 8000ec8:	05d9      	lsls	r1, r3, #23
 8000eca:	d518      	bpl.n	8000efe <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ecc:	68eb      	ldr	r3, [r5, #12]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d126      	bne.n	8000f20 <HAL_RCC_OscConfig+0x21c>
 8000ed2:	6a23      	ldr	r3, [r4, #32]
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000eda:	f7ff f979 	bl	80001d0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ede:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000ee2:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ee4:	6a23      	ldr	r3, [r4, #32]
 8000ee6:	079b      	lsls	r3, r3, #30
 8000ee8:	d53f      	bpl.n	8000f6a <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000eea:	2f00      	cmp	r7, #0
 8000eec:	f43f af1e 	beq.w	8000d2c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ef0:	69e3      	ldr	r3, [r4, #28]
 8000ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	61e3      	str	r3, [r4, #28]
 8000ef8:	e718      	b.n	8000d2c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000efa:	2700      	movs	r7, #0
 8000efc:	e7e2      	b.n	8000ec4 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000efe:	6833      	ldr	r3, [r6, #0]
 8000f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f04:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000f06:	f7ff f963 	bl	80001d0 <HAL_GetTick>
 8000f0a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f0c:	6833      	ldr	r3, [r6, #0]
 8000f0e:	05da      	lsls	r2, r3, #23
 8000f10:	d4dc      	bmi.n	8000ecc <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f12:	f7ff f95d 	bl	80001d0 <HAL_GetTick>
 8000f16:	eba0 0008 	sub.w	r0, r0, r8
 8000f1a:	2864      	cmp	r0, #100	; 0x64
 8000f1c:	d9f6      	bls.n	8000f0c <HAL_RCC_OscConfig+0x208>
 8000f1e:	e733      	b.n	8000d88 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f20:	b9ab      	cbnz	r3, 8000f4e <HAL_RCC_OscConfig+0x24a>
 8000f22:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f24:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f28:	f023 0301 	bic.w	r3, r3, #1
 8000f2c:	6223      	str	r3, [r4, #32]
 8000f2e:	6a23      	ldr	r3, [r4, #32]
 8000f30:	f023 0304 	bic.w	r3, r3, #4
 8000f34:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000f36:	f7ff f94b 	bl	80001d0 <HAL_GetTick>
 8000f3a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f3c:	6a23      	ldr	r3, [r4, #32]
 8000f3e:	0798      	lsls	r0, r3, #30
 8000f40:	d5d3      	bpl.n	8000eea <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f42:	f7ff f945 	bl	80001d0 <HAL_GetTick>
 8000f46:	1b80      	subs	r0, r0, r6
 8000f48:	4540      	cmp	r0, r8
 8000f4a:	d9f7      	bls.n	8000f3c <HAL_RCC_OscConfig+0x238>
 8000f4c:	e71c      	b.n	8000d88 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f4e:	2b05      	cmp	r3, #5
 8000f50:	6a23      	ldr	r3, [r4, #32]
 8000f52:	d103      	bne.n	8000f5c <HAL_RCC_OscConfig+0x258>
 8000f54:	f043 0304 	orr.w	r3, r3, #4
 8000f58:	6223      	str	r3, [r4, #32]
 8000f5a:	e7ba      	b.n	8000ed2 <HAL_RCC_OscConfig+0x1ce>
 8000f5c:	f023 0301 	bic.w	r3, r3, #1
 8000f60:	6223      	str	r3, [r4, #32]
 8000f62:	6a23      	ldr	r3, [r4, #32]
 8000f64:	f023 0304 	bic.w	r3, r3, #4
 8000f68:	e7b6      	b.n	8000ed8 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f6a:	f7ff f931 	bl	80001d0 <HAL_GetTick>
 8000f6e:	eba0 0008 	sub.w	r0, r0, r8
 8000f72:	42b0      	cmp	r0, r6
 8000f74:	d9b6      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x1e0>
 8000f76:	e707      	b.n	8000d88 <HAL_RCC_OscConfig+0x84>
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	42420000 	.word	0x42420000
 8000f80:	42420480 	.word	0x42420480
 8000f84:	20000008 	.word	0x20000008
 8000f88:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f8c:	4b2a      	ldr	r3, [pc, #168]	; (8001038 <HAL_RCC_OscConfig+0x334>)
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	461c      	mov	r4, r3
 8000f92:	f002 020c 	and.w	r2, r2, #12
 8000f96:	2a08      	cmp	r2, #8
 8000f98:	d03d      	beq.n	8001016 <HAL_RCC_OscConfig+0x312>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	4e27      	ldr	r6, [pc, #156]	; (800103c <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f9e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000fa0:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fa2:	d12b      	bne.n	8000ffc <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000fa4:	f7ff f914 	bl	80001d0 <HAL_GetTick>
 8000fa8:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000faa:	6823      	ldr	r3, [r4, #0]
 8000fac:	0199      	lsls	r1, r3, #6
 8000fae:	d41f      	bmi.n	8000ff0 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fb0:	6a2b      	ldr	r3, [r5, #32]
 8000fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fb6:	d105      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fb8:	6862      	ldr	r2, [r4, #4]
 8000fba:	68a9      	ldr	r1, [r5, #8]
 8000fbc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fc4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000fc6:	6862      	ldr	r2, [r4, #4]
 8000fc8:	430b      	orrs	r3, r1
 8000fca:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000fd6:	f7ff f8fb 	bl	80001d0 <HAL_GetTick>
 8000fda:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fdc:	6823      	ldr	r3, [r4, #0]
 8000fde:	019a      	lsls	r2, r3, #6
 8000fe0:	f53f aea8 	bmi.w	8000d34 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fe4:	f7ff f8f4 	bl	80001d0 <HAL_GetTick>
 8000fe8:	1b40      	subs	r0, r0, r5
 8000fea:	2802      	cmp	r0, #2
 8000fec:	d9f6      	bls.n	8000fdc <HAL_RCC_OscConfig+0x2d8>
 8000fee:	e6cb      	b.n	8000d88 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ff0:	f7ff f8ee 	bl	80001d0 <HAL_GetTick>
 8000ff4:	1bc0      	subs	r0, r0, r7
 8000ff6:	2802      	cmp	r0, #2
 8000ff8:	d9d7      	bls.n	8000faa <HAL_RCC_OscConfig+0x2a6>
 8000ffa:	e6c5      	b.n	8000d88 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000ffc:	f7ff f8e8 	bl	80001d0 <HAL_GetTick>
 8001000:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001002:	6823      	ldr	r3, [r4, #0]
 8001004:	019b      	lsls	r3, r3, #6
 8001006:	f57f ae95 	bpl.w	8000d34 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800100a:	f7ff f8e1 	bl	80001d0 <HAL_GetTick>
 800100e:	1b40      	subs	r0, r0, r5
 8001010:	2802      	cmp	r0, #2
 8001012:	d9f6      	bls.n	8001002 <HAL_RCC_OscConfig+0x2fe>
 8001014:	e6b8      	b.n	8000d88 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001016:	2801      	cmp	r0, #1
 8001018:	f43f aeb7 	beq.w	8000d8a <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 800101c:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800101e:	6a2b      	ldr	r3, [r5, #32]
 8001020:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8001024:	429a      	cmp	r2, r3
 8001026:	f47f ae71 	bne.w	8000d0c <HAL_RCC_OscConfig+0x8>
 800102a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800102c:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001030:	1ac0      	subs	r0, r0, r3
 8001032:	bf18      	it	ne
 8001034:	2001      	movne	r0, #1
 8001036:	e6a8      	b.n	8000d8a <HAL_RCC_OscConfig+0x86>
 8001038:	40021000 	.word	0x40021000
 800103c:	42420060 	.word	0x42420060

08001040 <HAL_RCC_GetSysClockFreq>:
{
 8001040:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001042:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001044:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001046:	ac02      	add	r4, sp, #8
 8001048:	f103 0510 	add.w	r5, r3, #16
 800104c:	4622      	mov	r2, r4
 800104e:	6818      	ldr	r0, [r3, #0]
 8001050:	6859      	ldr	r1, [r3, #4]
 8001052:	3308      	adds	r3, #8
 8001054:	c203      	stmia	r2!, {r0, r1}
 8001056:	42ab      	cmp	r3, r5
 8001058:	4614      	mov	r4, r2
 800105a:	d1f7      	bne.n	800104c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800105c:	2301      	movs	r3, #1
 800105e:	f88d 3004 	strb.w	r3, [sp, #4]
 8001062:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001064:	4911      	ldr	r1, [pc, #68]	; (80010ac <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001066:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800106a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800106c:	f003 020c 	and.w	r2, r3, #12
 8001070:	2a08      	cmp	r2, #8
 8001072:	d117      	bne.n	80010a4 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001074:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001078:	a806      	add	r0, sp, #24
 800107a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800107c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800107e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001082:	d50c      	bpl.n	800109e <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001084:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001086:	480a      	ldr	r0, [pc, #40]	; (80010b0 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001088:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800108c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800108e:	aa06      	add	r2, sp, #24
 8001090:	4413      	add	r3, r2
 8001092:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001096:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800109a:	b007      	add	sp, #28
 800109c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800109e:	4805      	ldr	r0, [pc, #20]	; (80010b4 <HAL_RCC_GetSysClockFreq+0x74>)
 80010a0:	4350      	muls	r0, r2
 80010a2:	e7fa      	b.n	800109a <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80010a6:	e7f8      	b.n	800109a <HAL_RCC_GetSysClockFreq+0x5a>
 80010a8:	0800271c 	.word	0x0800271c
 80010ac:	40021000 	.word	0x40021000
 80010b0:	007a1200 	.word	0x007a1200
 80010b4:	003d0900 	.word	0x003d0900

080010b8 <HAL_RCC_ClockConfig>:
{
 80010b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010bc:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80010be:	4604      	mov	r4, r0
 80010c0:	b910      	cbnz	r0, 80010c8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80010c2:	2001      	movs	r0, #1
 80010c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010c8:	4a45      	ldr	r2, [pc, #276]	; (80011e0 <HAL_RCC_ClockConfig+0x128>)
 80010ca:	6813      	ldr	r3, [r2, #0]
 80010cc:	f003 0307 	and.w	r3, r3, #7
 80010d0:	428b      	cmp	r3, r1
 80010d2:	d329      	bcc.n	8001128 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010d4:	6821      	ldr	r1, [r4, #0]
 80010d6:	078e      	lsls	r6, r1, #30
 80010d8:	d431      	bmi.n	800113e <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010da:	07ca      	lsls	r2, r1, #31
 80010dc:	d444      	bmi.n	8001168 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80010de:	4a40      	ldr	r2, [pc, #256]	; (80011e0 <HAL_RCC_ClockConfig+0x128>)
 80010e0:	6813      	ldr	r3, [r2, #0]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	429d      	cmp	r5, r3
 80010e8:	d367      	bcc.n	80011ba <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010ea:	6822      	ldr	r2, [r4, #0]
 80010ec:	4d3d      	ldr	r5, [pc, #244]	; (80011e4 <HAL_RCC_ClockConfig+0x12c>)
 80010ee:	f012 0f04 	tst.w	r2, #4
 80010f2:	d16e      	bne.n	80011d2 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010f4:	0713      	lsls	r3, r2, #28
 80010f6:	d506      	bpl.n	8001106 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010f8:	686b      	ldr	r3, [r5, #4]
 80010fa:	6922      	ldr	r2, [r4, #16]
 80010fc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001100:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001104:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001106:	f7ff ff9b 	bl	8001040 <HAL_RCC_GetSysClockFreq>
 800110a:	686b      	ldr	r3, [r5, #4]
 800110c:	4a36      	ldr	r2, [pc, #216]	; (80011e8 <HAL_RCC_ClockConfig+0x130>)
 800110e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001112:	5cd3      	ldrb	r3, [r2, r3]
 8001114:	40d8      	lsrs	r0, r3
 8001116:	4b35      	ldr	r3, [pc, #212]	; (80011ec <HAL_RCC_ClockConfig+0x134>)
 8001118:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800111a:	4b35      	ldr	r3, [pc, #212]	; (80011f0 <HAL_RCC_ClockConfig+0x138>)
 800111c:	6818      	ldr	r0, [r3, #0]
 800111e:	f7ff f815 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8001122:	2000      	movs	r0, #0
 8001124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001128:	6813      	ldr	r3, [r2, #0]
 800112a:	f023 0307 	bic.w	r3, r3, #7
 800112e:	430b      	orrs	r3, r1
 8001130:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001132:	6813      	ldr	r3, [r2, #0]
 8001134:	f003 0307 	and.w	r3, r3, #7
 8001138:	4299      	cmp	r1, r3
 800113a:	d1c2      	bne.n	80010c2 <HAL_RCC_ClockConfig+0xa>
 800113c:	e7ca      	b.n	80010d4 <HAL_RCC_ClockConfig+0x1c>
 800113e:	4b29      	ldr	r3, [pc, #164]	; (80011e4 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001140:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001144:	bf1e      	ittt	ne
 8001146:	685a      	ldrne	r2, [r3, #4]
 8001148:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800114c:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800114e:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001150:	bf42      	ittt	mi
 8001152:	685a      	ldrmi	r2, [r3, #4]
 8001154:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001158:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	68a0      	ldr	r0, [r4, #8]
 800115e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001162:	4302      	orrs	r2, r0
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	e7b8      	b.n	80010da <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001168:	6862      	ldr	r2, [r4, #4]
 800116a:	4e1e      	ldr	r6, [pc, #120]	; (80011e4 <HAL_RCC_ClockConfig+0x12c>)
 800116c:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116e:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001170:	d11b      	bne.n	80011aa <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001172:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001176:	d0a4      	beq.n	80010c2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001178:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800117a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800117e:	f023 0303 	bic.w	r3, r3, #3
 8001182:	4313      	orrs	r3, r2
 8001184:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001186:	f7ff f823 	bl	80001d0 <HAL_GetTick>
 800118a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800118c:	6873      	ldr	r3, [r6, #4]
 800118e:	6862      	ldr	r2, [r4, #4]
 8001190:	f003 030c 	and.w	r3, r3, #12
 8001194:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001198:	d0a1      	beq.n	80010de <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800119a:	f7ff f819 	bl	80001d0 <HAL_GetTick>
 800119e:	1bc0      	subs	r0, r0, r7
 80011a0:	4540      	cmp	r0, r8
 80011a2:	d9f3      	bls.n	800118c <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80011a4:	2003      	movs	r0, #3
}
 80011a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011aa:	2a02      	cmp	r2, #2
 80011ac:	d102      	bne.n	80011b4 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ae:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80011b2:	e7e0      	b.n	8001176 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b4:	f013 0f02 	tst.w	r3, #2
 80011b8:	e7dd      	b.n	8001176 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ba:	6813      	ldr	r3, [r2, #0]
 80011bc:	f023 0307 	bic.w	r3, r3, #7
 80011c0:	432b      	orrs	r3, r5
 80011c2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011c4:	6813      	ldr	r3, [r2, #0]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	429d      	cmp	r5, r3
 80011cc:	f47f af79 	bne.w	80010c2 <HAL_RCC_ClockConfig+0xa>
 80011d0:	e78b      	b.n	80010ea <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011d2:	686b      	ldr	r3, [r5, #4]
 80011d4:	68e1      	ldr	r1, [r4, #12]
 80011d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011da:	430b      	orrs	r3, r1
 80011dc:	606b      	str	r3, [r5, #4]
 80011de:	e789      	b.n	80010f4 <HAL_RCC_ClockConfig+0x3c>
 80011e0:	40022000 	.word	0x40022000
 80011e4:	40021000 	.word	0x40021000
 80011e8:	08002756 	.word	0x08002756
 80011ec:	20000008 	.word	0x20000008
 80011f0:	20000004 	.word	0x20000004

080011f4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <HAL_RCC_GetPCLK1Freq+0x14>)
 80011f6:	4a05      	ldr	r2, [pc, #20]	; (800120c <HAL_RCC_GetPCLK1Freq+0x18>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80011fe:	5cd3      	ldrb	r3, [r2, r3]
 8001200:	4a03      	ldr	r2, [pc, #12]	; (8001210 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001202:	6810      	ldr	r0, [r2, #0]
}
 8001204:	40d8      	lsrs	r0, r3
 8001206:	4770      	bx	lr
 8001208:	40021000 	.word	0x40021000
 800120c:	08002766 	.word	0x08002766
 8001210:	20000008 	.word	0x20000008

08001214 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001216:	4a05      	ldr	r2, [pc, #20]	; (800122c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800121e:	5cd3      	ldrb	r3, [r2, r3]
 8001220:	4a03      	ldr	r2, [pc, #12]	; (8001230 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001222:	6810      	ldr	r0, [r2, #0]
}
 8001224:	40d8      	lsrs	r0, r3
 8001226:	4770      	bx	lr
 8001228:	40021000 	.word	0x40021000
 800122c:	08002766 	.word	0x08002766
 8001230:	20000008 	.word	0x20000008

08001234 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001234:	b538      	push	{r3, r4, r5, lr}
 8001236:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001238:	6803      	ldr	r3, [r0, #0]
 800123a:	68c1      	ldr	r1, [r0, #12]
 800123c:	691a      	ldr	r2, [r3, #16]
 800123e:	2419      	movs	r4, #25
 8001240:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001244:	430a      	orrs	r2, r1
 8001246:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001248:	6882      	ldr	r2, [r0, #8]
 800124a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800124c:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800124e:	4302      	orrs	r2, r0
 8001250:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001252:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8001256:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800125a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800125c:	430a      	orrs	r2, r1
 800125e:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001260:	695a      	ldr	r2, [r3, #20]
 8001262:	69a9      	ldr	r1, [r5, #24]
 8001264:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001268:	430a      	orrs	r2, r1
 800126a:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800126c:	4a0d      	ldr	r2, [pc, #52]	; (80012a4 <UART_SetConfig+0x70>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d114      	bne.n	800129c <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001272:	f7ff ffcf 	bl	8001214 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001276:	4360      	muls	r0, r4
 8001278:	686c      	ldr	r4, [r5, #4]
 800127a:	2264      	movs	r2, #100	; 0x64
 800127c:	00a4      	lsls	r4, r4, #2
 800127e:	fbb0 f0f4 	udiv	r0, r0, r4
 8001282:	fbb0 f4f2 	udiv	r4, r0, r2
 8001286:	fb02 0314 	mls	r3, r2, r4, r0
 800128a:	011b      	lsls	r3, r3, #4
 800128c:	3332      	adds	r3, #50	; 0x32
 800128e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001292:	6829      	ldr	r1, [r5, #0]
 8001294:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8001298:	608b      	str	r3, [r1, #8]
 800129a:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 800129c:	f7ff ffaa 	bl	80011f4 <HAL_RCC_GetPCLK1Freq>
 80012a0:	e7e9      	b.n	8001276 <UART_SetConfig+0x42>
 80012a2:	bf00      	nop
 80012a4:	40013800 	.word	0x40013800

080012a8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80012a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012aa:	4604      	mov	r4, r0
 80012ac:	460e      	mov	r6, r1
 80012ae:	4617      	mov	r7, r2
 80012b0:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80012b2:	6821      	ldr	r1, [r4, #0]
 80012b4:	680b      	ldr	r3, [r1, #0]
 80012b6:	ea36 0303 	bics.w	r3, r6, r3
 80012ba:	d101      	bne.n	80012c0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80012bc:	2000      	movs	r0, #0
}
 80012be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80012c0:	1c6b      	adds	r3, r5, #1
 80012c2:	d0f7      	beq.n	80012b4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80012c4:	b995      	cbnz	r5, 80012ec <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80012c6:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80012c8:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80012d0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012d2:	695a      	ldr	r2, [r3, #20]
 80012d4:	f022 0201 	bic.w	r2, r2, #1
 80012d8:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80012da:	2320      	movs	r3, #32
 80012dc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80012e0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80012e4:	2300      	movs	r3, #0
 80012e6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80012ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80012ec:	f7fe ff70 	bl	80001d0 <HAL_GetTick>
 80012f0:	1bc0      	subs	r0, r0, r7
 80012f2:	4285      	cmp	r5, r0
 80012f4:	d2dd      	bcs.n	80012b2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80012f6:	e7e6      	b.n	80012c6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080012f8 <HAL_UART_Init>:
{
 80012f8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80012fa:	4604      	mov	r4, r0
 80012fc:	b340      	cbz	r0, 8001350 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80012fe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001302:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001306:	b91b      	cbnz	r3, 8001310 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001308:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800130c:	f000 fa6e 	bl	80017ec <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001310:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001312:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001314:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001318:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800131a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800131c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001320:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001322:	f7ff ff87 	bl	8001234 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001326:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001328:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800132a:	691a      	ldr	r2, [r3, #16]
 800132c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001330:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001332:	695a      	ldr	r2, [r3, #20]
 8001334:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001338:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800133a:	68da      	ldr	r2, [r3, #12]
 800133c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001340:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001342:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001344:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001346:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800134a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800134e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001350:	2001      	movs	r0, #1
}
 8001352:	bd10      	pop	{r4, pc}

08001354 <HAL_UART_Transmit>:
{
 8001354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001358:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800135a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 800135e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8001360:	2b20      	cmp	r3, #32
{
 8001362:	460d      	mov	r5, r1
 8001364:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001366:	d14e      	bne.n	8001406 <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 8001368:	2900      	cmp	r1, #0
 800136a:	d049      	beq.n	8001400 <HAL_UART_Transmit+0xac>
 800136c:	2a00      	cmp	r2, #0
 800136e:	d047      	beq.n	8001400 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8001370:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001374:	2b01      	cmp	r3, #1
 8001376:	d046      	beq.n	8001406 <HAL_UART_Transmit+0xb2>
 8001378:	2301      	movs	r3, #1
 800137a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800137e:	2300      	movs	r3, #0
 8001380:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001382:	2321      	movs	r3, #33	; 0x21
 8001384:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001388:	f7fe ff22 	bl	80001d0 <HAL_GetTick>
 800138c:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 800138e:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001392:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001396:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001398:	b29b      	uxth	r3, r3
 800139a:	b96b      	cbnz	r3, 80013b8 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800139c:	463b      	mov	r3, r7
 800139e:	4632      	mov	r2, r6
 80013a0:	2140      	movs	r1, #64	; 0x40
 80013a2:	4620      	mov	r0, r4
 80013a4:	f7ff ff80 	bl	80012a8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80013a8:	b9a8      	cbnz	r0, 80013d6 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80013aa:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80013ac:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 80013b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80013b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80013b8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013ba:	4632      	mov	r2, r6
      huart->TxXferCount--;
 80013bc:	3b01      	subs	r3, #1
 80013be:	b29b      	uxth	r3, r3
 80013c0:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013c2:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013c4:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013ca:	4620      	mov	r0, r4
 80013cc:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013ce:	d10e      	bne.n	80013ee <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013d0:	f7ff ff6a 	bl	80012a8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80013d4:	b110      	cbz	r0, 80013dc <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 80013d6:	2003      	movs	r0, #3
 80013d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80013dc:	882b      	ldrh	r3, [r5, #0]
 80013de:	6822      	ldr	r2, [r4, #0]
 80013e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013e4:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80013e6:	6923      	ldr	r3, [r4, #16]
 80013e8:	b943      	cbnz	r3, 80013fc <HAL_UART_Transmit+0xa8>
          pData += 2U;
 80013ea:	3502      	adds	r5, #2
 80013ec:	e7d3      	b.n	8001396 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013ee:	f7ff ff5b 	bl	80012a8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80013f2:	2800      	cmp	r0, #0
 80013f4:	d1ef      	bne.n	80013d6 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80013f6:	6823      	ldr	r3, [r4, #0]
 80013f8:	782a      	ldrb	r2, [r5, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	3501      	adds	r5, #1
 80013fe:	e7ca      	b.n	8001396 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001400:	2001      	movs	r0, #1
 8001402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001406:	2002      	movs	r0, #2
}
 8001408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800140c <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	2210      	movs	r2, #16
{
 800140e:	b530      	push	{r4, r5, lr}
 8001410:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001412:	eb0d 0002 	add.w	r0, sp, r2
 8001416:	2100      	movs	r1, #0
 8001418:	f000 fa68 	bl	80018ec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141c:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <MX_GPIO_Init+0xa8>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800141e:	4d26      	ldr	r5, [pc, #152]	; (80014b8 <MX_GPIO_Init+0xac>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001420:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001422:	4628      	mov	r0, r5
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001424:	f042 0210 	orr.w	r2, r2, #16
 8001428:	619a      	str	r2, [r3, #24]
 800142a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800142c:	2120      	movs	r1, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800142e:	f002 0210 	and.w	r2, r2, #16
 8001432:	9200      	str	r2, [sp, #0]
 8001434:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001436:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800143a:	f042 0220 	orr.w	r2, r2, #32
 800143e:	619a      	str	r2, [r3, #24]
 8001440:	699a      	ldr	r2, [r3, #24]
 8001442:	f002 0220 	and.w	r2, r2, #32
 8001446:	9201      	str	r2, [sp, #4]
 8001448:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	699a      	ldr	r2, [r3, #24]
 800144c:	f042 0204 	orr.w	r2, r2, #4
 8001450:	619a      	str	r2, [r3, #24]
 8001452:	699a      	ldr	r2, [r3, #24]
 8001454:	f002 0204 	and.w	r2, r2, #4
 8001458:	9202      	str	r2, [sp, #8]
 800145a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145c:	699a      	ldr	r2, [r3, #24]
 800145e:	f042 0208 	orr.w	r2, r2, #8
 8001462:	619a      	str	r2, [r3, #24]
 8001464:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001468:	f003 0308 	and.w	r3, r3, #8
 800146c:	9303      	str	r3, [sp, #12]
 800146e:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001470:	f7ff f812 	bl	8000498 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8001474:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001478:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <MX_GPIO_Init+0xb0>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800147c:	a904      	add	r1, sp, #16
 800147e:	4810      	ldr	r0, [pc, #64]	; (80014c0 <MX_GPIO_Init+0xb4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001480:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001484:	f7fe ff26 	bl	80002d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001488:	2320      	movs	r3, #32
 800148a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148c:	2301      	movs	r3, #1
 800148e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2302      	movs	r3, #2
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001492:	a904      	add	r1, sp, #16
 8001494:	4628      	mov	r0, r5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800149a:	f7fe ff1b 	bl	80002d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800149e:	4622      	mov	r2, r4
 80014a0:	4621      	mov	r1, r4
 80014a2:	2028      	movs	r0, #40	; 0x28
 80014a4:	f7fe febe 	bl	8000224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014a8:	2028      	movs	r0, #40	; 0x28
 80014aa:	f7fe feef 	bl	800028c <HAL_NVIC_EnableIRQ>

}
 80014ae:	b009      	add	sp, #36	; 0x24
 80014b0:	bd30      	pop	{r4, r5, pc}
 80014b2:	bf00      	nop
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40010800 	.word	0x40010800
 80014bc:	10110000 	.word	0x10110000
 80014c0:	40011000 	.word	0x40011000

080014c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014c4:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80014c6:	480c      	ldr	r0, [pc, #48]	; (80014f8 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 100000;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <MX_I2C1_Init+0x38>)
 80014ca:	f8df e034 	ldr.w	lr, [pc, #52]	; 8001500 <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 80014d2:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d6:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014d8:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014da:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014dc:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014de:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014e0:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014e2:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014e6:	f7ff f9bf 	bl	8000868 <HAL_I2C_Init>
 80014ea:	b118      	cbz	r0, 80014f4 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 80014ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80014f0:	f000 b8d4 	b.w	800169c <Error_Handler>
 80014f4:	bd08      	pop	{r3, pc}
 80014f6:	bf00      	nop
 80014f8:	2000009c 	.word	0x2000009c
 80014fc:	40005400 	.word	0x40005400
 8001500:	000186a0 	.word	0x000186a0

08001504 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001504:	b510      	push	{r4, lr}
 8001506:	4604      	mov	r4, r0
 8001508:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150a:	2210      	movs	r2, #16
 800150c:	2100      	movs	r1, #0
 800150e:	a802      	add	r0, sp, #8
 8001510:	f000 f9ec 	bl	80018ec <memset>
  if(i2cHandle->Instance==I2C1)
 8001514:	6822      	ldr	r2, [r4, #0]
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <HAL_I2C_MspInit+0x68>)
 8001518:	429a      	cmp	r2, r3
 800151a:	d124      	bne.n	8001566 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151c:	4c14      	ldr	r4, [pc, #80]	; (8001570 <HAL_I2C_MspInit+0x6c>)
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001520:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001522:	4814      	ldr	r0, [pc, #80]	; (8001574 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001524:	f043 0308 	orr.w	r3, r3, #8
 8001528:	61a3      	str	r3, [r4, #24]
 800152a:	69a3      	ldr	r3, [r4, #24]
 800152c:	f003 0308 	and.w	r3, r3, #8
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001534:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001538:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800153a:	2312      	movs	r3, #18
 800153c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800153e:	2303      	movs	r3, #3
 8001540:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001542:	f7fe fec7 	bl	80002d4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001546:	4a0c      	ldr	r2, [pc, #48]	; (8001578 <HAL_I2C_MspInit+0x74>)
 8001548:	6853      	ldr	r3, [r2, #4]
 800154a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800154e:	f043 0302 	orr.w	r3, r3, #2
 8001552:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001554:	69e3      	ldr	r3, [r4, #28]
 8001556:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800155a:	61e3      	str	r3, [r4, #28]
 800155c:	69e3      	ldr	r3, [r4, #28]
 800155e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001562:	9301      	str	r3, [sp, #4]
 8001564:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001566:	b006      	add	sp, #24
 8001568:	bd10      	pop	{r4, pc}
 800156a:	bf00      	nop
 800156c:	40005400 	.word	0x40005400
 8001570:	40021000 	.word	0x40021000
 8001574:	40010c00 	.word	0x40010c00
 8001578:	40010000 	.word	0x40010000

0800157c <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
{
 800157c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800157e:	460e      	mov	r6, r1
 8001580:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001582:	2400      	movs	r4, #0
	{
		//__io_putchar(*ptr++);
		HAL_UART_Transmit(&huart2, (uint8_t *)(&ptr[DataIdx]), 1, 0xFF);
 8001584:	4f06      	ldr	r7, [pc, #24]	; (80015a0 <_write+0x24>)
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001586:	42ac      	cmp	r4, r5
 8001588:	db01      	blt.n	800158e <_write+0x12>
	}
	return len;
}
 800158a:	4628      	mov	r0, r5
 800158c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_UART_Transmit(&huart2, (uint8_t *)(&ptr[DataIdx]), 1, 0xFF);
 800158e:	1931      	adds	r1, r6, r4
 8001590:	23ff      	movs	r3, #255	; 0xff
 8001592:	2201      	movs	r2, #1
 8001594:	4638      	mov	r0, r7
 8001596:	f7ff fedd 	bl	8001354 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159a:	3401      	adds	r4, #1
 800159c:	e7f3      	b.n	8001586 <_write+0xa>
 800159e:	bf00      	nop
 80015a0:	200000f0 	.word	0x200000f0

080015a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a4:	b510      	push	{r4, lr}
 80015a6:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a8:	2228      	movs	r2, #40	; 0x28
 80015aa:	2100      	movs	r1, #0
 80015ac:	a806      	add	r0, sp, #24
 80015ae:	f000 f99d 	bl	80018ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b2:	2214      	movs	r2, #20
 80015b4:	2100      	movs	r1, #0
 80015b6:	a801      	add	r0, sp, #4
 80015b8:	f000 f998 	bl	80018ec <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015bc:	2301      	movs	r3, #1
 80015be:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015c0:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015c2:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015c4:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80015c6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ca:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80015cc:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015ce:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d0:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d2:	f7ff fb97 	bl	8000d04 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d6:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015dc:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015de:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015e0:	4621      	mov	r1, r4
 80015e2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e4:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e6:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015e8:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ea:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015ec:	f7ff fd64 	bl	80010b8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80015f0:	b010      	add	sp, #64	; 0x40
 80015f2:	bd10      	pop	{r4, pc}

080015f4 <main>:
{
 80015f4:	b570      	push	{r4, r5, r6, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 80015f8:	f7fe fdcc 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 80015fc:	f7ff ffd2 	bl	80015a4 <SystemClock_Config>
  MX_GPIO_Init();
 8001600:	f7ff ff04 	bl	800140c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001604:	f000 f8d6 	bl	80017b4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001608:	f7ff ff5c 	bl	80014c4 <MX_I2C1_Init>
  uint8_t eeprom[20] = {0x11, 0x21, 0x31, 0x41, 0x51, 0x61, 0x71, 0x81, 0x91, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA };
 800160c:	aa05      	add	r2, sp, #20
 800160e:	4615      	mov	r5, r2
 8001610:	4b1e      	ldr	r3, [pc, #120]	; (800168c <main+0x98>)
 8001612:	f103 0610 	add.w	r6, r3, #16
 8001616:	4614      	mov	r4, r2
 8001618:	6818      	ldr	r0, [r3, #0]
 800161a:	6859      	ldr	r1, [r3, #4]
 800161c:	3308      	adds	r3, #8
 800161e:	c403      	stmia	r4!, {r0, r1}
 8001620:	42b3      	cmp	r3, r6
 8001622:	4622      	mov	r2, r4
 8001624:	d1f7      	bne.n	8001616 <main+0x22>
 8001626:	6818      	ldr	r0, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, I2C_MEMADD_SIZE_8BIT, &eeprom[0], 20, 0xFF);
 8001628:	23ff      	movs	r3, #255	; 0xff
  uint8_t eeprom[20] = {0x11, 0x21, 0x31, 0x41, 0x51, 0x61, 0x71, 0x81, 0x91, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA };
 800162a:	6020      	str	r0, [r4, #0]
  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, I2C_MEMADD_SIZE_8BIT, &eeprom[0], 20, 0xFF);
 800162c:	9302      	str	r3, [sp, #8]
 800162e:	2314      	movs	r3, #20
 8001630:	2200      	movs	r2, #0
 8001632:	9301      	str	r3, [sp, #4]
 8001634:	9500      	str	r5, [sp, #0]
 8001636:	2301      	movs	r3, #1
 8001638:	21a0      	movs	r1, #160	; 0xa0
 800163a:	4815      	ldr	r0, [pc, #84]	; (8001690 <main+0x9c>)
 800163c:	f7ff f9b8 	bl	80009b0 <HAL_I2C_Mem_Write>
  for(int i=0; i<10; i++) eeprom[i] = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	461a      	mov	r2, r3
 8001644:	54ea      	strb	r2, [r5, r3]
 8001646:	3301      	adds	r3, #1
 8001648:	2b0a      	cmp	r3, #10
 800164a:	d1fb      	bne.n	8001644 <main+0x50>
  HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, I2C_MEMADD_SIZE_8BIT, &eeprom[0], 20, 0xFF);
 800164c:	23ff      	movs	r3, #255	; 0xff
 800164e:	9302      	str	r3, [sp, #8]
 8001650:	2314      	movs	r3, #20
 8001652:	9500      	str	r5, [sp, #0]
 8001654:	9301      	str	r3, [sp, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	2301      	movs	r3, #1
 800165a:	21a0      	movs	r1, #160	; 0xa0
 800165c:	480c      	ldr	r0, [pc, #48]	; (8001690 <main+0x9c>)
 800165e:	f7ff fa37 	bl	8000ad0 <HAL_I2C_Mem_Read>
  for(int i = 0; i<20; i++)
 8001662:	2400      	movs	r4, #0
    	  printf("EEPROM %02d : %02X \r\n", i, eeprom[i]);
 8001664:	4e0b      	ldr	r6, [pc, #44]	; (8001694 <main+0xa0>)
 8001666:	5d2a      	ldrb	r2, [r5, r4]
 8001668:	4621      	mov	r1, r4
 800166a:	4630      	mov	r0, r6
  for(int i = 0; i<20; i++)
 800166c:	3401      	adds	r4, #1
    	  printf("EEPROM %02d : %02X \r\n", i, eeprom[i]);
 800166e:	f000 f945 	bl	80018fc <iprintf>
  for(int i = 0; i<20; i++)
 8001672:	2c14      	cmp	r4, #20
 8001674:	d1f7      	bne.n	8001666 <main+0x72>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001676:	4c08      	ldr	r4, [pc, #32]	; (8001698 <main+0xa4>)
 8001678:	4620      	mov	r0, r4
 800167a:	2120      	movs	r1, #32
 800167c:	f7fe ff11 	bl	80004a2 <HAL_GPIO_TogglePin>
  	HAL_Delay(1000);
 8001680:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001684:	f7fe fdaa 	bl	80001dc <HAL_Delay>
 8001688:	e7f6      	b.n	8001678 <main+0x84>
 800168a:	bf00      	nop
 800168c:	0800272c 	.word	0x0800272c
 8001690:	2000009c 	.word	0x2000009c
 8001694:	08002740 	.word	0x08002740
 8001698:	40010800 	.word	0x40010800

0800169c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800169c:	4770      	bx	lr
	...

080016a0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016a0:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <HAL_MspInit+0x3c>)
{
 80016a2:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80016a4:	699a      	ldr	r2, [r3, #24]
 80016a6:	f042 0201 	orr.w	r2, r2, #1
 80016aa:	619a      	str	r2, [r3, #24]
 80016ac:	699a      	ldr	r2, [r3, #24]
 80016ae:	f002 0201 	and.w	r2, r2, #1
 80016b2:	9200      	str	r2, [sp, #0]
 80016b4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	69da      	ldr	r2, [r3, #28]
 80016b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016bc:	61da      	str	r2, [r3, #28]
 80016be:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016c0:	4a07      	ldr	r2, [pc, #28]	; (80016e0 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	9301      	str	r3, [sp, #4]
 80016c8:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016ca:	6853      	ldr	r3, [r2, #4]
 80016cc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d6:	b002      	add	sp, #8
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40010000 	.word	0x40010000

080016e4 <NMI_Handler>:
 80016e4:	4770      	bx	lr

080016e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e6:	e7fe      	b.n	80016e6 <HardFault_Handler>

080016e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e8:	e7fe      	b.n	80016e8 <MemManage_Handler>

080016ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ea:	e7fe      	b.n	80016ea <BusFault_Handler>

080016ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ec:	e7fe      	b.n	80016ec <UsageFault_Handler>

080016ee <SVC_Handler>:
 80016ee:	4770      	bx	lr

080016f0 <DebugMon_Handler>:
 80016f0:	4770      	bx	lr

080016f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f2:	4770      	bx	lr

080016f4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f4:	f7fe bd60 	b.w	80001b8 <HAL_IncTick>

080016f8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80016f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016fc:	f7fe bed8 	b.w	80004b0 <HAL_GPIO_EXTI_IRQHandler>

08001700 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001700:	b570      	push	{r4, r5, r6, lr}
 8001702:	460e      	mov	r6, r1
 8001704:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001706:	460c      	mov	r4, r1
 8001708:	1ba3      	subs	r3, r4, r6
 800170a:	429d      	cmp	r5, r3
 800170c:	dc01      	bgt.n	8001712 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800170e:	4628      	mov	r0, r5
 8001710:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001712:	f3af 8000 	nop.w
 8001716:	f804 0b01 	strb.w	r0, [r4], #1
 800171a:	e7f5      	b.n	8001708 <_read+0x8>

0800171c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800171c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <_sbrk+0x2c>)
{
 8001720:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001722:	6819      	ldr	r1, [r3, #0]
 8001724:	b909      	cbnz	r1, 800172a <_sbrk+0xe>
		heap_end = &end;
 8001726:	4909      	ldr	r1, [pc, #36]	; (800174c <_sbrk+0x30>)
 8001728:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800172a:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 800172c:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800172e:	4402      	add	r2, r0
 8001730:	428a      	cmp	r2, r1
 8001732:	d906      	bls.n	8001742 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001734:	f000 f8b0 	bl	8001898 <__errno>
 8001738:	230c      	movs	r3, #12
 800173a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800173c:	f04f 30ff 	mov.w	r0, #4294967295
 8001740:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001742:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001744:	bd08      	pop	{r3, pc}
 8001746:	bf00      	nop
 8001748:	2000008c 	.word	0x2000008c
 800174c:	20000134 	.word	0x20000134

08001750 <_close>:

int _close(int file)
{
	return -1;
}
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	4770      	bx	lr

08001756 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001756:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800175a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800175c:	604b      	str	r3, [r1, #4]
}
 800175e:	4770      	bx	lr

08001760 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001760:	2001      	movs	r0, #1
 8001762:	4770      	bx	lr

08001764 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001764:	2000      	movs	r0, #0
 8001766:	4770      	bx	lr

08001768 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <SystemInit+0x40>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	f042 0201 	orr.w	r2, r2, #1
 8001770:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001772:	6859      	ldr	r1, [r3, #4]
 8001774:	4a0d      	ldr	r2, [pc, #52]	; (80017ac <SystemInit+0x44>)
 8001776:	400a      	ands	r2, r1
 8001778:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001780:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001784:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800178c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001794:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001796:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800179a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800179c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017a0:	4b03      	ldr	r3, [pc, #12]	; (80017b0 <SystemInit+0x48>)
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000
 80017ac:	f8ff0000 	.word	0xf8ff0000
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017b4:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 80017b6:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart2.Instance = USART2;
 80017ba:	480a      	ldr	r0, [pc, #40]	; (80017e4 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 80017bc:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <MX_USART2_UART_Init+0x34>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017be:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 80017c0:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017c4:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017c6:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017c8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017ca:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017cc:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ce:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017d2:	f7ff fd91 	bl	80012f8 <HAL_UART_Init>
 80017d6:	b118      	cbz	r0, 80017e0 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 80017d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80017dc:	f7ff bf5e 	b.w	800169c <Error_Handler>
 80017e0:	bd08      	pop	{r3, pc}
 80017e2:	bf00      	nop
 80017e4:	200000f0 	.word	0x200000f0
 80017e8:	40004400 	.word	0x40004400

080017ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017ec:	b510      	push	{r4, lr}
 80017ee:	4604      	mov	r4, r0
 80017f0:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f2:	2210      	movs	r2, #16
 80017f4:	2100      	movs	r1, #0
 80017f6:	a802      	add	r0, sp, #8
 80017f8:	f000 f878 	bl	80018ec <memset>
  if(uartHandle->Instance==USART2)
 80017fc:	6822      	ldr	r2, [r4, #0]
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <HAL_UART_MspInit+0x58>)
 8001800:	429a      	cmp	r2, r3
 8001802:	d11c      	bne.n	800183e <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001804:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001808:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180a:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 800180c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001810:	61da      	str	r2, [r3, #28]
 8001812:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001814:	480c      	ldr	r0, [pc, #48]	; (8001848 <HAL_UART_MspInit+0x5c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001816:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800181a:	9200      	str	r2, [sp, #0]
 800181c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	699a      	ldr	r2, [r3, #24]
 8001820:	f042 0204 	orr.w	r2, r2, #4
 8001824:	619a      	str	r2, [r3, #24]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001830:	230c      	movs	r3, #12
 8001832:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	f7fe fd4b 	bl	80002d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800183e:	b006      	add	sp, #24
 8001840:	bd10      	pop	{r4, pc}
 8001842:	bf00      	nop
 8001844:	40004400 	.word	0x40004400
 8001848:	40010800 	.word	0x40010800

0800184c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800184c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800184e:	e003      	b.n	8001858 <LoopCopyDataInit>

08001850 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001852:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001854:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001856:	3104      	adds	r1, #4

08001858 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001858:	480a      	ldr	r0, [pc, #40]	; (8001884 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800185c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800185e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001860:	d3f6      	bcc.n	8001850 <CopyDataInit>
  ldr r2, =_sbss
 8001862:	4a0a      	ldr	r2, [pc, #40]	; (800188c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001864:	e002      	b.n	800186c <LoopFillZerobss>

08001866 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001868:	f842 3b04 	str.w	r3, [r2], #4

0800186c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800186e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001870:	d3f9      	bcc.n	8001866 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001872:	f7ff ff79 	bl	8001768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001876:	f000 f815 	bl	80018a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800187a:	f7ff febb 	bl	80015f4 <main>
  bx lr
 800187e:	4770      	bx	lr
  ldr r3, =_sidata
 8001880:	08002810 	.word	0x08002810
  ldr r0, =_sdata
 8001884:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001888:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800188c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001890:	20000134 	.word	0x20000134

08001894 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001894:	e7fe      	b.n	8001894 <ADC1_2_IRQHandler>
	...

08001898 <__errno>:
 8001898:	4b01      	ldr	r3, [pc, #4]	; (80018a0 <__errno+0x8>)
 800189a:	6818      	ldr	r0, [r3, #0]
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	2000000c 	.word	0x2000000c

080018a4 <__libc_init_array>:
 80018a4:	b570      	push	{r4, r5, r6, lr}
 80018a6:	2500      	movs	r5, #0
 80018a8:	4e0c      	ldr	r6, [pc, #48]	; (80018dc <__libc_init_array+0x38>)
 80018aa:	4c0d      	ldr	r4, [pc, #52]	; (80018e0 <__libc_init_array+0x3c>)
 80018ac:	1ba4      	subs	r4, r4, r6
 80018ae:	10a4      	asrs	r4, r4, #2
 80018b0:	42a5      	cmp	r5, r4
 80018b2:	d109      	bne.n	80018c8 <__libc_init_array+0x24>
 80018b4:	f000 ff26 	bl	8002704 <_init>
 80018b8:	2500      	movs	r5, #0
 80018ba:	4e0a      	ldr	r6, [pc, #40]	; (80018e4 <__libc_init_array+0x40>)
 80018bc:	4c0a      	ldr	r4, [pc, #40]	; (80018e8 <__libc_init_array+0x44>)
 80018be:	1ba4      	subs	r4, r4, r6
 80018c0:	10a4      	asrs	r4, r4, #2
 80018c2:	42a5      	cmp	r5, r4
 80018c4:	d105      	bne.n	80018d2 <__libc_init_array+0x2e>
 80018c6:	bd70      	pop	{r4, r5, r6, pc}
 80018c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018cc:	4798      	blx	r3
 80018ce:	3501      	adds	r5, #1
 80018d0:	e7ee      	b.n	80018b0 <__libc_init_array+0xc>
 80018d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018d6:	4798      	blx	r3
 80018d8:	3501      	adds	r5, #1
 80018da:	e7f2      	b.n	80018c2 <__libc_init_array+0x1e>
 80018dc:	08002808 	.word	0x08002808
 80018e0:	08002808 	.word	0x08002808
 80018e4:	08002808 	.word	0x08002808
 80018e8:	0800280c 	.word	0x0800280c

080018ec <memset>:
 80018ec:	4603      	mov	r3, r0
 80018ee:	4402      	add	r2, r0
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d100      	bne.n	80018f6 <memset+0xa>
 80018f4:	4770      	bx	lr
 80018f6:	f803 1b01 	strb.w	r1, [r3], #1
 80018fa:	e7f9      	b.n	80018f0 <memset+0x4>

080018fc <iprintf>:
 80018fc:	b40f      	push	{r0, r1, r2, r3}
 80018fe:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <iprintf+0x2c>)
 8001900:	b513      	push	{r0, r1, r4, lr}
 8001902:	681c      	ldr	r4, [r3, #0]
 8001904:	b124      	cbz	r4, 8001910 <iprintf+0x14>
 8001906:	69a3      	ldr	r3, [r4, #24]
 8001908:	b913      	cbnz	r3, 8001910 <iprintf+0x14>
 800190a:	4620      	mov	r0, r4
 800190c:	f000 f84e 	bl	80019ac <__sinit>
 8001910:	ab05      	add	r3, sp, #20
 8001912:	9a04      	ldr	r2, [sp, #16]
 8001914:	68a1      	ldr	r1, [r4, #8]
 8001916:	4620      	mov	r0, r4
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	f000 f957 	bl	8001bcc <_vfiprintf_r>
 800191e:	b002      	add	sp, #8
 8001920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001924:	b004      	add	sp, #16
 8001926:	4770      	bx	lr
 8001928:	2000000c 	.word	0x2000000c

0800192c <_cleanup_r>:
 800192c:	4901      	ldr	r1, [pc, #4]	; (8001934 <_cleanup_r+0x8>)
 800192e:	f000 b8a9 	b.w	8001a84 <_fwalk_reent>
 8001932:	bf00      	nop
 8001934:	080024a5 	.word	0x080024a5

08001938 <std.isra.0>:
 8001938:	2300      	movs	r3, #0
 800193a:	b510      	push	{r4, lr}
 800193c:	4604      	mov	r4, r0
 800193e:	6003      	str	r3, [r0, #0]
 8001940:	6043      	str	r3, [r0, #4]
 8001942:	6083      	str	r3, [r0, #8]
 8001944:	8181      	strh	r1, [r0, #12]
 8001946:	6643      	str	r3, [r0, #100]	; 0x64
 8001948:	81c2      	strh	r2, [r0, #14]
 800194a:	6103      	str	r3, [r0, #16]
 800194c:	6143      	str	r3, [r0, #20]
 800194e:	6183      	str	r3, [r0, #24]
 8001950:	4619      	mov	r1, r3
 8001952:	2208      	movs	r2, #8
 8001954:	305c      	adds	r0, #92	; 0x5c
 8001956:	f7ff ffc9 	bl	80018ec <memset>
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <std.isra.0+0x38>)
 800195c:	6224      	str	r4, [r4, #32]
 800195e:	6263      	str	r3, [r4, #36]	; 0x24
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <std.isra.0+0x3c>)
 8001962:	62a3      	str	r3, [r4, #40]	; 0x28
 8001964:	4b04      	ldr	r3, [pc, #16]	; (8001978 <std.isra.0+0x40>)
 8001966:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <std.isra.0+0x44>)
 800196a:	6323      	str	r3, [r4, #48]	; 0x30
 800196c:	bd10      	pop	{r4, pc}
 800196e:	bf00      	nop
 8001970:	08002149 	.word	0x08002149
 8001974:	0800216b 	.word	0x0800216b
 8001978:	080021a3 	.word	0x080021a3
 800197c:	080021c7 	.word	0x080021c7

08001980 <__sfmoreglue>:
 8001980:	b570      	push	{r4, r5, r6, lr}
 8001982:	2568      	movs	r5, #104	; 0x68
 8001984:	1e4a      	subs	r2, r1, #1
 8001986:	4355      	muls	r5, r2
 8001988:	460e      	mov	r6, r1
 800198a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800198e:	f000 f897 	bl	8001ac0 <_malloc_r>
 8001992:	4604      	mov	r4, r0
 8001994:	b140      	cbz	r0, 80019a8 <__sfmoreglue+0x28>
 8001996:	2100      	movs	r1, #0
 8001998:	e880 0042 	stmia.w	r0, {r1, r6}
 800199c:	300c      	adds	r0, #12
 800199e:	60a0      	str	r0, [r4, #8]
 80019a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80019a4:	f7ff ffa2 	bl	80018ec <memset>
 80019a8:	4620      	mov	r0, r4
 80019aa:	bd70      	pop	{r4, r5, r6, pc}

080019ac <__sinit>:
 80019ac:	6983      	ldr	r3, [r0, #24]
 80019ae:	b510      	push	{r4, lr}
 80019b0:	4604      	mov	r4, r0
 80019b2:	bb33      	cbnz	r3, 8001a02 <__sinit+0x56>
 80019b4:	6483      	str	r3, [r0, #72]	; 0x48
 80019b6:	64c3      	str	r3, [r0, #76]	; 0x4c
 80019b8:	6503      	str	r3, [r0, #80]	; 0x50
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <__sinit+0x58>)
 80019bc:	4a12      	ldr	r2, [pc, #72]	; (8001a08 <__sinit+0x5c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6282      	str	r2, [r0, #40]	; 0x28
 80019c2:	4298      	cmp	r0, r3
 80019c4:	bf04      	itt	eq
 80019c6:	2301      	moveq	r3, #1
 80019c8:	6183      	streq	r3, [r0, #24]
 80019ca:	f000 f81f 	bl	8001a0c <__sfp>
 80019ce:	6060      	str	r0, [r4, #4]
 80019d0:	4620      	mov	r0, r4
 80019d2:	f000 f81b 	bl	8001a0c <__sfp>
 80019d6:	60a0      	str	r0, [r4, #8]
 80019d8:	4620      	mov	r0, r4
 80019da:	f000 f817 	bl	8001a0c <__sfp>
 80019de:	2200      	movs	r2, #0
 80019e0:	60e0      	str	r0, [r4, #12]
 80019e2:	2104      	movs	r1, #4
 80019e4:	6860      	ldr	r0, [r4, #4]
 80019e6:	f7ff ffa7 	bl	8001938 <std.isra.0>
 80019ea:	2201      	movs	r2, #1
 80019ec:	2109      	movs	r1, #9
 80019ee:	68a0      	ldr	r0, [r4, #8]
 80019f0:	f7ff ffa2 	bl	8001938 <std.isra.0>
 80019f4:	2202      	movs	r2, #2
 80019f6:	2112      	movs	r1, #18
 80019f8:	68e0      	ldr	r0, [r4, #12]
 80019fa:	f7ff ff9d 	bl	8001938 <std.isra.0>
 80019fe:	2301      	movs	r3, #1
 8001a00:	61a3      	str	r3, [r4, #24]
 8001a02:	bd10      	pop	{r4, pc}
 8001a04:	08002770 	.word	0x08002770
 8001a08:	0800192d 	.word	0x0800192d

08001a0c <__sfp>:
 8001a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a0e:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <__sfp+0x74>)
 8001a10:	4607      	mov	r7, r0
 8001a12:	681e      	ldr	r6, [r3, #0]
 8001a14:	69b3      	ldr	r3, [r6, #24]
 8001a16:	b913      	cbnz	r3, 8001a1e <__sfp+0x12>
 8001a18:	4630      	mov	r0, r6
 8001a1a:	f7ff ffc7 	bl	80019ac <__sinit>
 8001a1e:	3648      	adds	r6, #72	; 0x48
 8001a20:	68b4      	ldr	r4, [r6, #8]
 8001a22:	6873      	ldr	r3, [r6, #4]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	d503      	bpl.n	8001a30 <__sfp+0x24>
 8001a28:	6833      	ldr	r3, [r6, #0]
 8001a2a:	b133      	cbz	r3, 8001a3a <__sfp+0x2e>
 8001a2c:	6836      	ldr	r6, [r6, #0]
 8001a2e:	e7f7      	b.n	8001a20 <__sfp+0x14>
 8001a30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001a34:	b16d      	cbz	r5, 8001a52 <__sfp+0x46>
 8001a36:	3468      	adds	r4, #104	; 0x68
 8001a38:	e7f4      	b.n	8001a24 <__sfp+0x18>
 8001a3a:	2104      	movs	r1, #4
 8001a3c:	4638      	mov	r0, r7
 8001a3e:	f7ff ff9f 	bl	8001980 <__sfmoreglue>
 8001a42:	6030      	str	r0, [r6, #0]
 8001a44:	2800      	cmp	r0, #0
 8001a46:	d1f1      	bne.n	8001a2c <__sfp+0x20>
 8001a48:	230c      	movs	r3, #12
 8001a4a:	4604      	mov	r4, r0
 8001a4c:	603b      	str	r3, [r7, #0]
 8001a4e:	4620      	mov	r0, r4
 8001a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a56:	81e3      	strh	r3, [r4, #14]
 8001a58:	2301      	movs	r3, #1
 8001a5a:	6665      	str	r5, [r4, #100]	; 0x64
 8001a5c:	81a3      	strh	r3, [r4, #12]
 8001a5e:	6025      	str	r5, [r4, #0]
 8001a60:	60a5      	str	r5, [r4, #8]
 8001a62:	6065      	str	r5, [r4, #4]
 8001a64:	6125      	str	r5, [r4, #16]
 8001a66:	6165      	str	r5, [r4, #20]
 8001a68:	61a5      	str	r5, [r4, #24]
 8001a6a:	2208      	movs	r2, #8
 8001a6c:	4629      	mov	r1, r5
 8001a6e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001a72:	f7ff ff3b 	bl	80018ec <memset>
 8001a76:	6365      	str	r5, [r4, #52]	; 0x34
 8001a78:	63a5      	str	r5, [r4, #56]	; 0x38
 8001a7a:	64a5      	str	r5, [r4, #72]	; 0x48
 8001a7c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001a7e:	e7e6      	b.n	8001a4e <__sfp+0x42>
 8001a80:	08002770 	.word	0x08002770

08001a84 <_fwalk_reent>:
 8001a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a88:	4680      	mov	r8, r0
 8001a8a:	4689      	mov	r9, r1
 8001a8c:	2600      	movs	r6, #0
 8001a8e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001a92:	b914      	cbnz	r4, 8001a9a <_fwalk_reent+0x16>
 8001a94:	4630      	mov	r0, r6
 8001a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a9a:	68a5      	ldr	r5, [r4, #8]
 8001a9c:	6867      	ldr	r7, [r4, #4]
 8001a9e:	3f01      	subs	r7, #1
 8001aa0:	d501      	bpl.n	8001aa6 <_fwalk_reent+0x22>
 8001aa2:	6824      	ldr	r4, [r4, #0]
 8001aa4:	e7f5      	b.n	8001a92 <_fwalk_reent+0xe>
 8001aa6:	89ab      	ldrh	r3, [r5, #12]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d907      	bls.n	8001abc <_fwalk_reent+0x38>
 8001aac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	d003      	beq.n	8001abc <_fwalk_reent+0x38>
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	4640      	mov	r0, r8
 8001ab8:	47c8      	blx	r9
 8001aba:	4306      	orrs	r6, r0
 8001abc:	3568      	adds	r5, #104	; 0x68
 8001abe:	e7ee      	b.n	8001a9e <_fwalk_reent+0x1a>

08001ac0 <_malloc_r>:
 8001ac0:	b570      	push	{r4, r5, r6, lr}
 8001ac2:	1ccd      	adds	r5, r1, #3
 8001ac4:	f025 0503 	bic.w	r5, r5, #3
 8001ac8:	3508      	adds	r5, #8
 8001aca:	2d0c      	cmp	r5, #12
 8001acc:	bf38      	it	cc
 8001ace:	250c      	movcc	r5, #12
 8001ad0:	2d00      	cmp	r5, #0
 8001ad2:	4606      	mov	r6, r0
 8001ad4:	db01      	blt.n	8001ada <_malloc_r+0x1a>
 8001ad6:	42a9      	cmp	r1, r5
 8001ad8:	d903      	bls.n	8001ae2 <_malloc_r+0x22>
 8001ada:	230c      	movs	r3, #12
 8001adc:	6033      	str	r3, [r6, #0]
 8001ade:	2000      	movs	r0, #0
 8001ae0:	bd70      	pop	{r4, r5, r6, pc}
 8001ae2:	f000 fd8d 	bl	8002600 <__malloc_lock>
 8001ae6:	4a23      	ldr	r2, [pc, #140]	; (8001b74 <_malloc_r+0xb4>)
 8001ae8:	6814      	ldr	r4, [r2, #0]
 8001aea:	4621      	mov	r1, r4
 8001aec:	b991      	cbnz	r1, 8001b14 <_malloc_r+0x54>
 8001aee:	4c22      	ldr	r4, [pc, #136]	; (8001b78 <_malloc_r+0xb8>)
 8001af0:	6823      	ldr	r3, [r4, #0]
 8001af2:	b91b      	cbnz	r3, 8001afc <_malloc_r+0x3c>
 8001af4:	4630      	mov	r0, r6
 8001af6:	f000 fb17 	bl	8002128 <_sbrk_r>
 8001afa:	6020      	str	r0, [r4, #0]
 8001afc:	4629      	mov	r1, r5
 8001afe:	4630      	mov	r0, r6
 8001b00:	f000 fb12 	bl	8002128 <_sbrk_r>
 8001b04:	1c43      	adds	r3, r0, #1
 8001b06:	d126      	bne.n	8001b56 <_malloc_r+0x96>
 8001b08:	230c      	movs	r3, #12
 8001b0a:	4630      	mov	r0, r6
 8001b0c:	6033      	str	r3, [r6, #0]
 8001b0e:	f000 fd78 	bl	8002602 <__malloc_unlock>
 8001b12:	e7e4      	b.n	8001ade <_malloc_r+0x1e>
 8001b14:	680b      	ldr	r3, [r1, #0]
 8001b16:	1b5b      	subs	r3, r3, r5
 8001b18:	d41a      	bmi.n	8001b50 <_malloc_r+0x90>
 8001b1a:	2b0b      	cmp	r3, #11
 8001b1c:	d90f      	bls.n	8001b3e <_malloc_r+0x7e>
 8001b1e:	600b      	str	r3, [r1, #0]
 8001b20:	18cc      	adds	r4, r1, r3
 8001b22:	50cd      	str	r5, [r1, r3]
 8001b24:	4630      	mov	r0, r6
 8001b26:	f000 fd6c 	bl	8002602 <__malloc_unlock>
 8001b2a:	f104 000b 	add.w	r0, r4, #11
 8001b2e:	1d23      	adds	r3, r4, #4
 8001b30:	f020 0007 	bic.w	r0, r0, #7
 8001b34:	1ac3      	subs	r3, r0, r3
 8001b36:	d01b      	beq.n	8001b70 <_malloc_r+0xb0>
 8001b38:	425a      	negs	r2, r3
 8001b3a:	50e2      	str	r2, [r4, r3]
 8001b3c:	bd70      	pop	{r4, r5, r6, pc}
 8001b3e:	428c      	cmp	r4, r1
 8001b40:	bf0b      	itete	eq
 8001b42:	6863      	ldreq	r3, [r4, #4]
 8001b44:	684b      	ldrne	r3, [r1, #4]
 8001b46:	6013      	streq	r3, [r2, #0]
 8001b48:	6063      	strne	r3, [r4, #4]
 8001b4a:	bf18      	it	ne
 8001b4c:	460c      	movne	r4, r1
 8001b4e:	e7e9      	b.n	8001b24 <_malloc_r+0x64>
 8001b50:	460c      	mov	r4, r1
 8001b52:	6849      	ldr	r1, [r1, #4]
 8001b54:	e7ca      	b.n	8001aec <_malloc_r+0x2c>
 8001b56:	1cc4      	adds	r4, r0, #3
 8001b58:	f024 0403 	bic.w	r4, r4, #3
 8001b5c:	42a0      	cmp	r0, r4
 8001b5e:	d005      	beq.n	8001b6c <_malloc_r+0xac>
 8001b60:	1a21      	subs	r1, r4, r0
 8001b62:	4630      	mov	r0, r6
 8001b64:	f000 fae0 	bl	8002128 <_sbrk_r>
 8001b68:	3001      	adds	r0, #1
 8001b6a:	d0cd      	beq.n	8001b08 <_malloc_r+0x48>
 8001b6c:	6025      	str	r5, [r4, #0]
 8001b6e:	e7d9      	b.n	8001b24 <_malloc_r+0x64>
 8001b70:	bd70      	pop	{r4, r5, r6, pc}
 8001b72:	bf00      	nop
 8001b74:	20000090 	.word	0x20000090
 8001b78:	20000094 	.word	0x20000094

08001b7c <__sfputc_r>:
 8001b7c:	6893      	ldr	r3, [r2, #8]
 8001b7e:	b410      	push	{r4}
 8001b80:	3b01      	subs	r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	6093      	str	r3, [r2, #8]
 8001b86:	da08      	bge.n	8001b9a <__sfputc_r+0x1e>
 8001b88:	6994      	ldr	r4, [r2, #24]
 8001b8a:	42a3      	cmp	r3, r4
 8001b8c:	db02      	blt.n	8001b94 <__sfputc_r+0x18>
 8001b8e:	b2cb      	uxtb	r3, r1
 8001b90:	2b0a      	cmp	r3, #10
 8001b92:	d102      	bne.n	8001b9a <__sfputc_r+0x1e>
 8001b94:	bc10      	pop	{r4}
 8001b96:	f000 bb1b 	b.w	80021d0 <__swbuf_r>
 8001b9a:	6813      	ldr	r3, [r2, #0]
 8001b9c:	1c58      	adds	r0, r3, #1
 8001b9e:	6010      	str	r0, [r2, #0]
 8001ba0:	7019      	strb	r1, [r3, #0]
 8001ba2:	b2c8      	uxtb	r0, r1
 8001ba4:	bc10      	pop	{r4}
 8001ba6:	4770      	bx	lr

08001ba8 <__sfputs_r>:
 8001ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001baa:	4606      	mov	r6, r0
 8001bac:	460f      	mov	r7, r1
 8001bae:	4614      	mov	r4, r2
 8001bb0:	18d5      	adds	r5, r2, r3
 8001bb2:	42ac      	cmp	r4, r5
 8001bb4:	d101      	bne.n	8001bba <__sfputs_r+0x12>
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	e007      	b.n	8001bca <__sfputs_r+0x22>
 8001bba:	463a      	mov	r2, r7
 8001bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bc0:	4630      	mov	r0, r6
 8001bc2:	f7ff ffdb 	bl	8001b7c <__sfputc_r>
 8001bc6:	1c43      	adds	r3, r0, #1
 8001bc8:	d1f3      	bne.n	8001bb2 <__sfputs_r+0xa>
 8001bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001bcc <_vfiprintf_r>:
 8001bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bd0:	b09d      	sub	sp, #116	; 0x74
 8001bd2:	460c      	mov	r4, r1
 8001bd4:	4617      	mov	r7, r2
 8001bd6:	9303      	str	r3, [sp, #12]
 8001bd8:	4606      	mov	r6, r0
 8001bda:	b118      	cbz	r0, 8001be4 <_vfiprintf_r+0x18>
 8001bdc:	6983      	ldr	r3, [r0, #24]
 8001bde:	b90b      	cbnz	r3, 8001be4 <_vfiprintf_r+0x18>
 8001be0:	f7ff fee4 	bl	80019ac <__sinit>
 8001be4:	4b7c      	ldr	r3, [pc, #496]	; (8001dd8 <_vfiprintf_r+0x20c>)
 8001be6:	429c      	cmp	r4, r3
 8001be8:	d157      	bne.n	8001c9a <_vfiprintf_r+0xce>
 8001bea:	6874      	ldr	r4, [r6, #4]
 8001bec:	89a3      	ldrh	r3, [r4, #12]
 8001bee:	0718      	lsls	r0, r3, #28
 8001bf0:	d55d      	bpl.n	8001cae <_vfiprintf_r+0xe2>
 8001bf2:	6923      	ldr	r3, [r4, #16]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d05a      	beq.n	8001cae <_vfiprintf_r+0xe2>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8001bfc:	2320      	movs	r3, #32
 8001bfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001c02:	2330      	movs	r3, #48	; 0x30
 8001c04:	f04f 0b01 	mov.w	fp, #1
 8001c08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001c0c:	46b8      	mov	r8, r7
 8001c0e:	4645      	mov	r5, r8
 8001c10:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d155      	bne.n	8001cc4 <_vfiprintf_r+0xf8>
 8001c18:	ebb8 0a07 	subs.w	sl, r8, r7
 8001c1c:	d00b      	beq.n	8001c36 <_vfiprintf_r+0x6a>
 8001c1e:	4653      	mov	r3, sl
 8001c20:	463a      	mov	r2, r7
 8001c22:	4621      	mov	r1, r4
 8001c24:	4630      	mov	r0, r6
 8001c26:	f7ff ffbf 	bl	8001ba8 <__sfputs_r>
 8001c2a:	3001      	adds	r0, #1
 8001c2c:	f000 80c4 	beq.w	8001db8 <_vfiprintf_r+0x1ec>
 8001c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c32:	4453      	add	r3, sl
 8001c34:	9309      	str	r3, [sp, #36]	; 0x24
 8001c36:	f898 3000 	ldrb.w	r3, [r8]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 80bc 	beq.w	8001db8 <_vfiprintf_r+0x1ec>
 8001c40:	2300      	movs	r3, #0
 8001c42:	f04f 32ff 	mov.w	r2, #4294967295
 8001c46:	9304      	str	r3, [sp, #16]
 8001c48:	9307      	str	r3, [sp, #28]
 8001c4a:	9205      	str	r2, [sp, #20]
 8001c4c:	9306      	str	r3, [sp, #24]
 8001c4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001c52:	931a      	str	r3, [sp, #104]	; 0x68
 8001c54:	2205      	movs	r2, #5
 8001c56:	7829      	ldrb	r1, [r5, #0]
 8001c58:	4860      	ldr	r0, [pc, #384]	; (8001ddc <_vfiprintf_r+0x210>)
 8001c5a:	f000 fcc3 	bl	80025e4 <memchr>
 8001c5e:	f105 0801 	add.w	r8, r5, #1
 8001c62:	9b04      	ldr	r3, [sp, #16]
 8001c64:	2800      	cmp	r0, #0
 8001c66:	d131      	bne.n	8001ccc <_vfiprintf_r+0x100>
 8001c68:	06d9      	lsls	r1, r3, #27
 8001c6a:	bf44      	itt	mi
 8001c6c:	2220      	movmi	r2, #32
 8001c6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001c72:	071a      	lsls	r2, r3, #28
 8001c74:	bf44      	itt	mi
 8001c76:	222b      	movmi	r2, #43	; 0x2b
 8001c78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001c7c:	782a      	ldrb	r2, [r5, #0]
 8001c7e:	2a2a      	cmp	r2, #42	; 0x2a
 8001c80:	d02c      	beq.n	8001cdc <_vfiprintf_r+0x110>
 8001c82:	2100      	movs	r1, #0
 8001c84:	200a      	movs	r0, #10
 8001c86:	9a07      	ldr	r2, [sp, #28]
 8001c88:	46a8      	mov	r8, r5
 8001c8a:	f898 3000 	ldrb.w	r3, [r8]
 8001c8e:	3501      	adds	r5, #1
 8001c90:	3b30      	subs	r3, #48	; 0x30
 8001c92:	2b09      	cmp	r3, #9
 8001c94:	d96d      	bls.n	8001d72 <_vfiprintf_r+0x1a6>
 8001c96:	b371      	cbz	r1, 8001cf6 <_vfiprintf_r+0x12a>
 8001c98:	e026      	b.n	8001ce8 <_vfiprintf_r+0x11c>
 8001c9a:	4b51      	ldr	r3, [pc, #324]	; (8001de0 <_vfiprintf_r+0x214>)
 8001c9c:	429c      	cmp	r4, r3
 8001c9e:	d101      	bne.n	8001ca4 <_vfiprintf_r+0xd8>
 8001ca0:	68b4      	ldr	r4, [r6, #8]
 8001ca2:	e7a3      	b.n	8001bec <_vfiprintf_r+0x20>
 8001ca4:	4b4f      	ldr	r3, [pc, #316]	; (8001de4 <_vfiprintf_r+0x218>)
 8001ca6:	429c      	cmp	r4, r3
 8001ca8:	bf08      	it	eq
 8001caa:	68f4      	ldreq	r4, [r6, #12]
 8001cac:	e79e      	b.n	8001bec <_vfiprintf_r+0x20>
 8001cae:	4621      	mov	r1, r4
 8001cb0:	4630      	mov	r0, r6
 8001cb2:	f000 faf1 	bl	8002298 <__swsetup_r>
 8001cb6:	2800      	cmp	r0, #0
 8001cb8:	d09e      	beq.n	8001bf8 <_vfiprintf_r+0x2c>
 8001cba:	f04f 30ff 	mov.w	r0, #4294967295
 8001cbe:	b01d      	add	sp, #116	; 0x74
 8001cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cc4:	2b25      	cmp	r3, #37	; 0x25
 8001cc6:	d0a7      	beq.n	8001c18 <_vfiprintf_r+0x4c>
 8001cc8:	46a8      	mov	r8, r5
 8001cca:	e7a0      	b.n	8001c0e <_vfiprintf_r+0x42>
 8001ccc:	4a43      	ldr	r2, [pc, #268]	; (8001ddc <_vfiprintf_r+0x210>)
 8001cce:	4645      	mov	r5, r8
 8001cd0:	1a80      	subs	r0, r0, r2
 8001cd2:	fa0b f000 	lsl.w	r0, fp, r0
 8001cd6:	4318      	orrs	r0, r3
 8001cd8:	9004      	str	r0, [sp, #16]
 8001cda:	e7bb      	b.n	8001c54 <_vfiprintf_r+0x88>
 8001cdc:	9a03      	ldr	r2, [sp, #12]
 8001cde:	1d11      	adds	r1, r2, #4
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	9103      	str	r1, [sp, #12]
 8001ce4:	2a00      	cmp	r2, #0
 8001ce6:	db01      	blt.n	8001cec <_vfiprintf_r+0x120>
 8001ce8:	9207      	str	r2, [sp, #28]
 8001cea:	e004      	b.n	8001cf6 <_vfiprintf_r+0x12a>
 8001cec:	4252      	negs	r2, r2
 8001cee:	f043 0302 	orr.w	r3, r3, #2
 8001cf2:	9207      	str	r2, [sp, #28]
 8001cf4:	9304      	str	r3, [sp, #16]
 8001cf6:	f898 3000 	ldrb.w	r3, [r8]
 8001cfa:	2b2e      	cmp	r3, #46	; 0x2e
 8001cfc:	d110      	bne.n	8001d20 <_vfiprintf_r+0x154>
 8001cfe:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001d02:	f108 0101 	add.w	r1, r8, #1
 8001d06:	2b2a      	cmp	r3, #42	; 0x2a
 8001d08:	d137      	bne.n	8001d7a <_vfiprintf_r+0x1ae>
 8001d0a:	9b03      	ldr	r3, [sp, #12]
 8001d0c:	f108 0802 	add.w	r8, r8, #2
 8001d10:	1d1a      	adds	r2, r3, #4
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	9203      	str	r2, [sp, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	bfb8      	it	lt
 8001d1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8001d1e:	9305      	str	r3, [sp, #20]
 8001d20:	4d31      	ldr	r5, [pc, #196]	; (8001de8 <_vfiprintf_r+0x21c>)
 8001d22:	2203      	movs	r2, #3
 8001d24:	f898 1000 	ldrb.w	r1, [r8]
 8001d28:	4628      	mov	r0, r5
 8001d2a:	f000 fc5b 	bl	80025e4 <memchr>
 8001d2e:	b140      	cbz	r0, 8001d42 <_vfiprintf_r+0x176>
 8001d30:	2340      	movs	r3, #64	; 0x40
 8001d32:	1b40      	subs	r0, r0, r5
 8001d34:	fa03 f000 	lsl.w	r0, r3, r0
 8001d38:	9b04      	ldr	r3, [sp, #16]
 8001d3a:	f108 0801 	add.w	r8, r8, #1
 8001d3e:	4303      	orrs	r3, r0
 8001d40:	9304      	str	r3, [sp, #16]
 8001d42:	f898 1000 	ldrb.w	r1, [r8]
 8001d46:	2206      	movs	r2, #6
 8001d48:	4828      	ldr	r0, [pc, #160]	; (8001dec <_vfiprintf_r+0x220>)
 8001d4a:	f108 0701 	add.w	r7, r8, #1
 8001d4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001d52:	f000 fc47 	bl	80025e4 <memchr>
 8001d56:	2800      	cmp	r0, #0
 8001d58:	d034      	beq.n	8001dc4 <_vfiprintf_r+0x1f8>
 8001d5a:	4b25      	ldr	r3, [pc, #148]	; (8001df0 <_vfiprintf_r+0x224>)
 8001d5c:	bb03      	cbnz	r3, 8001da0 <_vfiprintf_r+0x1d4>
 8001d5e:	9b03      	ldr	r3, [sp, #12]
 8001d60:	3307      	adds	r3, #7
 8001d62:	f023 0307 	bic.w	r3, r3, #7
 8001d66:	3308      	adds	r3, #8
 8001d68:	9303      	str	r3, [sp, #12]
 8001d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d6c:	444b      	add	r3, r9
 8001d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8001d70:	e74c      	b.n	8001c0c <_vfiprintf_r+0x40>
 8001d72:	fb00 3202 	mla	r2, r0, r2, r3
 8001d76:	2101      	movs	r1, #1
 8001d78:	e786      	b.n	8001c88 <_vfiprintf_r+0xbc>
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	250a      	movs	r5, #10
 8001d7e:	4618      	mov	r0, r3
 8001d80:	9305      	str	r3, [sp, #20]
 8001d82:	4688      	mov	r8, r1
 8001d84:	f898 2000 	ldrb.w	r2, [r8]
 8001d88:	3101      	adds	r1, #1
 8001d8a:	3a30      	subs	r2, #48	; 0x30
 8001d8c:	2a09      	cmp	r2, #9
 8001d8e:	d903      	bls.n	8001d98 <_vfiprintf_r+0x1cc>
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0c5      	beq.n	8001d20 <_vfiprintf_r+0x154>
 8001d94:	9005      	str	r0, [sp, #20]
 8001d96:	e7c3      	b.n	8001d20 <_vfiprintf_r+0x154>
 8001d98:	fb05 2000 	mla	r0, r5, r0, r2
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e7f0      	b.n	8001d82 <_vfiprintf_r+0x1b6>
 8001da0:	ab03      	add	r3, sp, #12
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	4622      	mov	r2, r4
 8001da6:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <_vfiprintf_r+0x228>)
 8001da8:	a904      	add	r1, sp, #16
 8001daa:	4630      	mov	r0, r6
 8001dac:	f3af 8000 	nop.w
 8001db0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001db4:	4681      	mov	r9, r0
 8001db6:	d1d8      	bne.n	8001d6a <_vfiprintf_r+0x19e>
 8001db8:	89a3      	ldrh	r3, [r4, #12]
 8001dba:	065b      	lsls	r3, r3, #25
 8001dbc:	f53f af7d 	bmi.w	8001cba <_vfiprintf_r+0xee>
 8001dc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001dc2:	e77c      	b.n	8001cbe <_vfiprintf_r+0xf2>
 8001dc4:	ab03      	add	r3, sp, #12
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	4622      	mov	r2, r4
 8001dca:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <_vfiprintf_r+0x228>)
 8001dcc:	a904      	add	r1, sp, #16
 8001dce:	4630      	mov	r0, r6
 8001dd0:	f000 f88a 	bl	8001ee8 <_printf_i>
 8001dd4:	e7ec      	b.n	8001db0 <_vfiprintf_r+0x1e4>
 8001dd6:	bf00      	nop
 8001dd8:	08002794 	.word	0x08002794
 8001ddc:	080027d4 	.word	0x080027d4
 8001de0:	080027b4 	.word	0x080027b4
 8001de4:	08002774 	.word	0x08002774
 8001de8:	080027da 	.word	0x080027da
 8001dec:	080027de 	.word	0x080027de
 8001df0:	00000000 	.word	0x00000000
 8001df4:	08001ba9 	.word	0x08001ba9

08001df8 <_printf_common>:
 8001df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001dfc:	4691      	mov	r9, r2
 8001dfe:	461f      	mov	r7, r3
 8001e00:	688a      	ldr	r2, [r1, #8]
 8001e02:	690b      	ldr	r3, [r1, #16]
 8001e04:	4606      	mov	r6, r0
 8001e06:	4293      	cmp	r3, r2
 8001e08:	bfb8      	it	lt
 8001e0a:	4613      	movlt	r3, r2
 8001e0c:	f8c9 3000 	str.w	r3, [r9]
 8001e10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001e14:	460c      	mov	r4, r1
 8001e16:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001e1a:	b112      	cbz	r2, 8001e22 <_printf_common+0x2a>
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	f8c9 3000 	str.w	r3, [r9]
 8001e22:	6823      	ldr	r3, [r4, #0]
 8001e24:	0699      	lsls	r1, r3, #26
 8001e26:	bf42      	ittt	mi
 8001e28:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001e2c:	3302      	addmi	r3, #2
 8001e2e:	f8c9 3000 	strmi.w	r3, [r9]
 8001e32:	6825      	ldr	r5, [r4, #0]
 8001e34:	f015 0506 	ands.w	r5, r5, #6
 8001e38:	d107      	bne.n	8001e4a <_printf_common+0x52>
 8001e3a:	f104 0a19 	add.w	sl, r4, #25
 8001e3e:	68e3      	ldr	r3, [r4, #12]
 8001e40:	f8d9 2000 	ldr.w	r2, [r9]
 8001e44:	1a9b      	subs	r3, r3, r2
 8001e46:	429d      	cmp	r5, r3
 8001e48:	db2a      	blt.n	8001ea0 <_printf_common+0xa8>
 8001e4a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001e4e:	6822      	ldr	r2, [r4, #0]
 8001e50:	3300      	adds	r3, #0
 8001e52:	bf18      	it	ne
 8001e54:	2301      	movne	r3, #1
 8001e56:	0692      	lsls	r2, r2, #26
 8001e58:	d42f      	bmi.n	8001eba <_printf_common+0xc2>
 8001e5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e5e:	4639      	mov	r1, r7
 8001e60:	4630      	mov	r0, r6
 8001e62:	47c0      	blx	r8
 8001e64:	3001      	adds	r0, #1
 8001e66:	d022      	beq.n	8001eae <_printf_common+0xb6>
 8001e68:	6823      	ldr	r3, [r4, #0]
 8001e6a:	68e5      	ldr	r5, [r4, #12]
 8001e6c:	f003 0306 	and.w	r3, r3, #6
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	bf18      	it	ne
 8001e74:	2500      	movne	r5, #0
 8001e76:	f8d9 2000 	ldr.w	r2, [r9]
 8001e7a:	f04f 0900 	mov.w	r9, #0
 8001e7e:	bf08      	it	eq
 8001e80:	1aad      	subeq	r5, r5, r2
 8001e82:	68a3      	ldr	r3, [r4, #8]
 8001e84:	6922      	ldr	r2, [r4, #16]
 8001e86:	bf08      	it	eq
 8001e88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	bfc4      	itt	gt
 8001e90:	1a9b      	subgt	r3, r3, r2
 8001e92:	18ed      	addgt	r5, r5, r3
 8001e94:	341a      	adds	r4, #26
 8001e96:	454d      	cmp	r5, r9
 8001e98:	d11b      	bne.n	8001ed2 <_printf_common+0xda>
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	4652      	mov	r2, sl
 8001ea4:	4639      	mov	r1, r7
 8001ea6:	4630      	mov	r0, r6
 8001ea8:	47c0      	blx	r8
 8001eaa:	3001      	adds	r0, #1
 8001eac:	d103      	bne.n	8001eb6 <_printf_common+0xbe>
 8001eae:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001eb6:	3501      	adds	r5, #1
 8001eb8:	e7c1      	b.n	8001e3e <_printf_common+0x46>
 8001eba:	2030      	movs	r0, #48	; 0x30
 8001ebc:	18e1      	adds	r1, r4, r3
 8001ebe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001ec8:	4422      	add	r2, r4
 8001eca:	3302      	adds	r3, #2
 8001ecc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001ed0:	e7c3      	b.n	8001e5a <_printf_common+0x62>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	4622      	mov	r2, r4
 8001ed6:	4639      	mov	r1, r7
 8001ed8:	4630      	mov	r0, r6
 8001eda:	47c0      	blx	r8
 8001edc:	3001      	adds	r0, #1
 8001ede:	d0e6      	beq.n	8001eae <_printf_common+0xb6>
 8001ee0:	f109 0901 	add.w	r9, r9, #1
 8001ee4:	e7d7      	b.n	8001e96 <_printf_common+0x9e>
	...

08001ee8 <_printf_i>:
 8001ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001eec:	4617      	mov	r7, r2
 8001eee:	7e0a      	ldrb	r2, [r1, #24]
 8001ef0:	b085      	sub	sp, #20
 8001ef2:	2a6e      	cmp	r2, #110	; 0x6e
 8001ef4:	4698      	mov	r8, r3
 8001ef6:	4606      	mov	r6, r0
 8001ef8:	460c      	mov	r4, r1
 8001efa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001efc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001f00:	f000 80bc 	beq.w	800207c <_printf_i+0x194>
 8001f04:	d81a      	bhi.n	8001f3c <_printf_i+0x54>
 8001f06:	2a63      	cmp	r2, #99	; 0x63
 8001f08:	d02e      	beq.n	8001f68 <_printf_i+0x80>
 8001f0a:	d80a      	bhi.n	8001f22 <_printf_i+0x3a>
 8001f0c:	2a00      	cmp	r2, #0
 8001f0e:	f000 80c8 	beq.w	80020a2 <_printf_i+0x1ba>
 8001f12:	2a58      	cmp	r2, #88	; 0x58
 8001f14:	f000 808a 	beq.w	800202c <_printf_i+0x144>
 8001f18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f1c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001f20:	e02a      	b.n	8001f78 <_printf_i+0x90>
 8001f22:	2a64      	cmp	r2, #100	; 0x64
 8001f24:	d001      	beq.n	8001f2a <_printf_i+0x42>
 8001f26:	2a69      	cmp	r2, #105	; 0x69
 8001f28:	d1f6      	bne.n	8001f18 <_printf_i+0x30>
 8001f2a:	6821      	ldr	r1, [r4, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001f32:	d023      	beq.n	8001f7c <_printf_i+0x94>
 8001f34:	1d11      	adds	r1, r2, #4
 8001f36:	6019      	str	r1, [r3, #0]
 8001f38:	6813      	ldr	r3, [r2, #0]
 8001f3a:	e027      	b.n	8001f8c <_printf_i+0xa4>
 8001f3c:	2a73      	cmp	r2, #115	; 0x73
 8001f3e:	f000 80b4 	beq.w	80020aa <_printf_i+0x1c2>
 8001f42:	d808      	bhi.n	8001f56 <_printf_i+0x6e>
 8001f44:	2a6f      	cmp	r2, #111	; 0x6f
 8001f46:	d02a      	beq.n	8001f9e <_printf_i+0xb6>
 8001f48:	2a70      	cmp	r2, #112	; 0x70
 8001f4a:	d1e5      	bne.n	8001f18 <_printf_i+0x30>
 8001f4c:	680a      	ldr	r2, [r1, #0]
 8001f4e:	f042 0220 	orr.w	r2, r2, #32
 8001f52:	600a      	str	r2, [r1, #0]
 8001f54:	e003      	b.n	8001f5e <_printf_i+0x76>
 8001f56:	2a75      	cmp	r2, #117	; 0x75
 8001f58:	d021      	beq.n	8001f9e <_printf_i+0xb6>
 8001f5a:	2a78      	cmp	r2, #120	; 0x78
 8001f5c:	d1dc      	bne.n	8001f18 <_printf_i+0x30>
 8001f5e:	2278      	movs	r2, #120	; 0x78
 8001f60:	496f      	ldr	r1, [pc, #444]	; (8002120 <_printf_i+0x238>)
 8001f62:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001f66:	e064      	b.n	8002032 <_printf_i+0x14a>
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001f6e:	1d11      	adds	r1, r2, #4
 8001f70:	6019      	str	r1, [r3, #0]
 8001f72:	6813      	ldr	r3, [r2, #0]
 8001f74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e0a3      	b.n	80020c4 <_printf_i+0x1dc>
 8001f7c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001f80:	f102 0104 	add.w	r1, r2, #4
 8001f84:	6019      	str	r1, [r3, #0]
 8001f86:	d0d7      	beq.n	8001f38 <_printf_i+0x50>
 8001f88:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	da03      	bge.n	8001f98 <_printf_i+0xb0>
 8001f90:	222d      	movs	r2, #45	; 0x2d
 8001f92:	425b      	negs	r3, r3
 8001f94:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001f98:	4962      	ldr	r1, [pc, #392]	; (8002124 <_printf_i+0x23c>)
 8001f9a:	220a      	movs	r2, #10
 8001f9c:	e017      	b.n	8001fce <_printf_i+0xe6>
 8001f9e:	6820      	ldr	r0, [r4, #0]
 8001fa0:	6819      	ldr	r1, [r3, #0]
 8001fa2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001fa6:	d003      	beq.n	8001fb0 <_printf_i+0xc8>
 8001fa8:	1d08      	adds	r0, r1, #4
 8001faa:	6018      	str	r0, [r3, #0]
 8001fac:	680b      	ldr	r3, [r1, #0]
 8001fae:	e006      	b.n	8001fbe <_printf_i+0xd6>
 8001fb0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001fb4:	f101 0004 	add.w	r0, r1, #4
 8001fb8:	6018      	str	r0, [r3, #0]
 8001fba:	d0f7      	beq.n	8001fac <_printf_i+0xc4>
 8001fbc:	880b      	ldrh	r3, [r1, #0]
 8001fbe:	2a6f      	cmp	r2, #111	; 0x6f
 8001fc0:	bf14      	ite	ne
 8001fc2:	220a      	movne	r2, #10
 8001fc4:	2208      	moveq	r2, #8
 8001fc6:	4957      	ldr	r1, [pc, #348]	; (8002124 <_printf_i+0x23c>)
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001fce:	6865      	ldr	r5, [r4, #4]
 8001fd0:	2d00      	cmp	r5, #0
 8001fd2:	60a5      	str	r5, [r4, #8]
 8001fd4:	f2c0 809c 	blt.w	8002110 <_printf_i+0x228>
 8001fd8:	6820      	ldr	r0, [r4, #0]
 8001fda:	f020 0004 	bic.w	r0, r0, #4
 8001fde:	6020      	str	r0, [r4, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d13f      	bne.n	8002064 <_printf_i+0x17c>
 8001fe4:	2d00      	cmp	r5, #0
 8001fe6:	f040 8095 	bne.w	8002114 <_printf_i+0x22c>
 8001fea:	4675      	mov	r5, lr
 8001fec:	2a08      	cmp	r2, #8
 8001fee:	d10b      	bne.n	8002008 <_printf_i+0x120>
 8001ff0:	6823      	ldr	r3, [r4, #0]
 8001ff2:	07da      	lsls	r2, r3, #31
 8001ff4:	d508      	bpl.n	8002008 <_printf_i+0x120>
 8001ff6:	6923      	ldr	r3, [r4, #16]
 8001ff8:	6862      	ldr	r2, [r4, #4]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	bfde      	ittt	le
 8001ffe:	2330      	movle	r3, #48	; 0x30
 8002000:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002004:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002008:	ebae 0305 	sub.w	r3, lr, r5
 800200c:	6123      	str	r3, [r4, #16]
 800200e:	f8cd 8000 	str.w	r8, [sp]
 8002012:	463b      	mov	r3, r7
 8002014:	aa03      	add	r2, sp, #12
 8002016:	4621      	mov	r1, r4
 8002018:	4630      	mov	r0, r6
 800201a:	f7ff feed 	bl	8001df8 <_printf_common>
 800201e:	3001      	adds	r0, #1
 8002020:	d155      	bne.n	80020ce <_printf_i+0x1e6>
 8002022:	f04f 30ff 	mov.w	r0, #4294967295
 8002026:	b005      	add	sp, #20
 8002028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800202c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002030:	493c      	ldr	r1, [pc, #240]	; (8002124 <_printf_i+0x23c>)
 8002032:	6822      	ldr	r2, [r4, #0]
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	f012 0f80 	tst.w	r2, #128	; 0x80
 800203a:	f100 0504 	add.w	r5, r0, #4
 800203e:	601d      	str	r5, [r3, #0]
 8002040:	d001      	beq.n	8002046 <_printf_i+0x15e>
 8002042:	6803      	ldr	r3, [r0, #0]
 8002044:	e002      	b.n	800204c <_printf_i+0x164>
 8002046:	0655      	lsls	r5, r2, #25
 8002048:	d5fb      	bpl.n	8002042 <_printf_i+0x15a>
 800204a:	8803      	ldrh	r3, [r0, #0]
 800204c:	07d0      	lsls	r0, r2, #31
 800204e:	bf44      	itt	mi
 8002050:	f042 0220 	orrmi.w	r2, r2, #32
 8002054:	6022      	strmi	r2, [r4, #0]
 8002056:	b91b      	cbnz	r3, 8002060 <_printf_i+0x178>
 8002058:	6822      	ldr	r2, [r4, #0]
 800205a:	f022 0220 	bic.w	r2, r2, #32
 800205e:	6022      	str	r2, [r4, #0]
 8002060:	2210      	movs	r2, #16
 8002062:	e7b1      	b.n	8001fc8 <_printf_i+0xe0>
 8002064:	4675      	mov	r5, lr
 8002066:	fbb3 f0f2 	udiv	r0, r3, r2
 800206a:	fb02 3310 	mls	r3, r2, r0, r3
 800206e:	5ccb      	ldrb	r3, [r1, r3]
 8002070:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002074:	4603      	mov	r3, r0
 8002076:	2800      	cmp	r0, #0
 8002078:	d1f5      	bne.n	8002066 <_printf_i+0x17e>
 800207a:	e7b7      	b.n	8001fec <_printf_i+0x104>
 800207c:	6808      	ldr	r0, [r1, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002084:	6949      	ldr	r1, [r1, #20]
 8002086:	d004      	beq.n	8002092 <_printf_i+0x1aa>
 8002088:	1d10      	adds	r0, r2, #4
 800208a:	6018      	str	r0, [r3, #0]
 800208c:	6813      	ldr	r3, [r2, #0]
 800208e:	6019      	str	r1, [r3, #0]
 8002090:	e007      	b.n	80020a2 <_printf_i+0x1ba>
 8002092:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002096:	f102 0004 	add.w	r0, r2, #4
 800209a:	6018      	str	r0, [r3, #0]
 800209c:	6813      	ldr	r3, [r2, #0]
 800209e:	d0f6      	beq.n	800208e <_printf_i+0x1a6>
 80020a0:	8019      	strh	r1, [r3, #0]
 80020a2:	2300      	movs	r3, #0
 80020a4:	4675      	mov	r5, lr
 80020a6:	6123      	str	r3, [r4, #16]
 80020a8:	e7b1      	b.n	800200e <_printf_i+0x126>
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	1d11      	adds	r1, r2, #4
 80020ae:	6019      	str	r1, [r3, #0]
 80020b0:	6815      	ldr	r5, [r2, #0]
 80020b2:	2100      	movs	r1, #0
 80020b4:	6862      	ldr	r2, [r4, #4]
 80020b6:	4628      	mov	r0, r5
 80020b8:	f000 fa94 	bl	80025e4 <memchr>
 80020bc:	b108      	cbz	r0, 80020c2 <_printf_i+0x1da>
 80020be:	1b40      	subs	r0, r0, r5
 80020c0:	6060      	str	r0, [r4, #4]
 80020c2:	6863      	ldr	r3, [r4, #4]
 80020c4:	6123      	str	r3, [r4, #16]
 80020c6:	2300      	movs	r3, #0
 80020c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020cc:	e79f      	b.n	800200e <_printf_i+0x126>
 80020ce:	6923      	ldr	r3, [r4, #16]
 80020d0:	462a      	mov	r2, r5
 80020d2:	4639      	mov	r1, r7
 80020d4:	4630      	mov	r0, r6
 80020d6:	47c0      	blx	r8
 80020d8:	3001      	adds	r0, #1
 80020da:	d0a2      	beq.n	8002022 <_printf_i+0x13a>
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	079b      	lsls	r3, r3, #30
 80020e0:	d507      	bpl.n	80020f2 <_printf_i+0x20a>
 80020e2:	2500      	movs	r5, #0
 80020e4:	f104 0919 	add.w	r9, r4, #25
 80020e8:	68e3      	ldr	r3, [r4, #12]
 80020ea:	9a03      	ldr	r2, [sp, #12]
 80020ec:	1a9b      	subs	r3, r3, r2
 80020ee:	429d      	cmp	r5, r3
 80020f0:	db05      	blt.n	80020fe <_printf_i+0x216>
 80020f2:	68e0      	ldr	r0, [r4, #12]
 80020f4:	9b03      	ldr	r3, [sp, #12]
 80020f6:	4298      	cmp	r0, r3
 80020f8:	bfb8      	it	lt
 80020fa:	4618      	movlt	r0, r3
 80020fc:	e793      	b.n	8002026 <_printf_i+0x13e>
 80020fe:	2301      	movs	r3, #1
 8002100:	464a      	mov	r2, r9
 8002102:	4639      	mov	r1, r7
 8002104:	4630      	mov	r0, r6
 8002106:	47c0      	blx	r8
 8002108:	3001      	adds	r0, #1
 800210a:	d08a      	beq.n	8002022 <_printf_i+0x13a>
 800210c:	3501      	adds	r5, #1
 800210e:	e7eb      	b.n	80020e8 <_printf_i+0x200>
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1a7      	bne.n	8002064 <_printf_i+0x17c>
 8002114:	780b      	ldrb	r3, [r1, #0]
 8002116:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800211a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800211e:	e765      	b.n	8001fec <_printf_i+0x104>
 8002120:	080027f6 	.word	0x080027f6
 8002124:	080027e5 	.word	0x080027e5

08002128 <_sbrk_r>:
 8002128:	b538      	push	{r3, r4, r5, lr}
 800212a:	2300      	movs	r3, #0
 800212c:	4c05      	ldr	r4, [pc, #20]	; (8002144 <_sbrk_r+0x1c>)
 800212e:	4605      	mov	r5, r0
 8002130:	4608      	mov	r0, r1
 8002132:	6023      	str	r3, [r4, #0]
 8002134:	f7ff faf2 	bl	800171c <_sbrk>
 8002138:	1c43      	adds	r3, r0, #1
 800213a:	d102      	bne.n	8002142 <_sbrk_r+0x1a>
 800213c:	6823      	ldr	r3, [r4, #0]
 800213e:	b103      	cbz	r3, 8002142 <_sbrk_r+0x1a>
 8002140:	602b      	str	r3, [r5, #0]
 8002142:	bd38      	pop	{r3, r4, r5, pc}
 8002144:	20000130 	.word	0x20000130

08002148 <__sread>:
 8002148:	b510      	push	{r4, lr}
 800214a:	460c      	mov	r4, r1
 800214c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002150:	f000 faa4 	bl	800269c <_read_r>
 8002154:	2800      	cmp	r0, #0
 8002156:	bfab      	itete	ge
 8002158:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800215a:	89a3      	ldrhlt	r3, [r4, #12]
 800215c:	181b      	addge	r3, r3, r0
 800215e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002162:	bfac      	ite	ge
 8002164:	6563      	strge	r3, [r4, #84]	; 0x54
 8002166:	81a3      	strhlt	r3, [r4, #12]
 8002168:	bd10      	pop	{r4, pc}

0800216a <__swrite>:
 800216a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800216e:	461f      	mov	r7, r3
 8002170:	898b      	ldrh	r3, [r1, #12]
 8002172:	4605      	mov	r5, r0
 8002174:	05db      	lsls	r3, r3, #23
 8002176:	460c      	mov	r4, r1
 8002178:	4616      	mov	r6, r2
 800217a:	d505      	bpl.n	8002188 <__swrite+0x1e>
 800217c:	2302      	movs	r3, #2
 800217e:	2200      	movs	r2, #0
 8002180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002184:	f000 f9b8 	bl	80024f8 <_lseek_r>
 8002188:	89a3      	ldrh	r3, [r4, #12]
 800218a:	4632      	mov	r2, r6
 800218c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002190:	81a3      	strh	r3, [r4, #12]
 8002192:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002196:	463b      	mov	r3, r7
 8002198:	4628      	mov	r0, r5
 800219a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800219e:	f000 b869 	b.w	8002274 <_write_r>

080021a2 <__sseek>:
 80021a2:	b510      	push	{r4, lr}
 80021a4:	460c      	mov	r4, r1
 80021a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021aa:	f000 f9a5 	bl	80024f8 <_lseek_r>
 80021ae:	1c43      	adds	r3, r0, #1
 80021b0:	89a3      	ldrh	r3, [r4, #12]
 80021b2:	bf15      	itete	ne
 80021b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80021b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80021ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80021be:	81a3      	strheq	r3, [r4, #12]
 80021c0:	bf18      	it	ne
 80021c2:	81a3      	strhne	r3, [r4, #12]
 80021c4:	bd10      	pop	{r4, pc}

080021c6 <__sclose>:
 80021c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021ca:	f000 b8d3 	b.w	8002374 <_close_r>
	...

080021d0 <__swbuf_r>:
 80021d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d2:	460e      	mov	r6, r1
 80021d4:	4614      	mov	r4, r2
 80021d6:	4605      	mov	r5, r0
 80021d8:	b118      	cbz	r0, 80021e2 <__swbuf_r+0x12>
 80021da:	6983      	ldr	r3, [r0, #24]
 80021dc:	b90b      	cbnz	r3, 80021e2 <__swbuf_r+0x12>
 80021de:	f7ff fbe5 	bl	80019ac <__sinit>
 80021e2:	4b21      	ldr	r3, [pc, #132]	; (8002268 <__swbuf_r+0x98>)
 80021e4:	429c      	cmp	r4, r3
 80021e6:	d12a      	bne.n	800223e <__swbuf_r+0x6e>
 80021e8:	686c      	ldr	r4, [r5, #4]
 80021ea:	69a3      	ldr	r3, [r4, #24]
 80021ec:	60a3      	str	r3, [r4, #8]
 80021ee:	89a3      	ldrh	r3, [r4, #12]
 80021f0:	071a      	lsls	r2, r3, #28
 80021f2:	d52e      	bpl.n	8002252 <__swbuf_r+0x82>
 80021f4:	6923      	ldr	r3, [r4, #16]
 80021f6:	b363      	cbz	r3, 8002252 <__swbuf_r+0x82>
 80021f8:	6923      	ldr	r3, [r4, #16]
 80021fa:	6820      	ldr	r0, [r4, #0]
 80021fc:	b2f6      	uxtb	r6, r6
 80021fe:	1ac0      	subs	r0, r0, r3
 8002200:	6963      	ldr	r3, [r4, #20]
 8002202:	4637      	mov	r7, r6
 8002204:	4298      	cmp	r0, r3
 8002206:	db04      	blt.n	8002212 <__swbuf_r+0x42>
 8002208:	4621      	mov	r1, r4
 800220a:	4628      	mov	r0, r5
 800220c:	f000 f94a 	bl	80024a4 <_fflush_r>
 8002210:	bb28      	cbnz	r0, 800225e <__swbuf_r+0x8e>
 8002212:	68a3      	ldr	r3, [r4, #8]
 8002214:	3001      	adds	r0, #1
 8002216:	3b01      	subs	r3, #1
 8002218:	60a3      	str	r3, [r4, #8]
 800221a:	6823      	ldr	r3, [r4, #0]
 800221c:	1c5a      	adds	r2, r3, #1
 800221e:	6022      	str	r2, [r4, #0]
 8002220:	701e      	strb	r6, [r3, #0]
 8002222:	6963      	ldr	r3, [r4, #20]
 8002224:	4298      	cmp	r0, r3
 8002226:	d004      	beq.n	8002232 <__swbuf_r+0x62>
 8002228:	89a3      	ldrh	r3, [r4, #12]
 800222a:	07db      	lsls	r3, r3, #31
 800222c:	d519      	bpl.n	8002262 <__swbuf_r+0x92>
 800222e:	2e0a      	cmp	r6, #10
 8002230:	d117      	bne.n	8002262 <__swbuf_r+0x92>
 8002232:	4621      	mov	r1, r4
 8002234:	4628      	mov	r0, r5
 8002236:	f000 f935 	bl	80024a4 <_fflush_r>
 800223a:	b190      	cbz	r0, 8002262 <__swbuf_r+0x92>
 800223c:	e00f      	b.n	800225e <__swbuf_r+0x8e>
 800223e:	4b0b      	ldr	r3, [pc, #44]	; (800226c <__swbuf_r+0x9c>)
 8002240:	429c      	cmp	r4, r3
 8002242:	d101      	bne.n	8002248 <__swbuf_r+0x78>
 8002244:	68ac      	ldr	r4, [r5, #8]
 8002246:	e7d0      	b.n	80021ea <__swbuf_r+0x1a>
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <__swbuf_r+0xa0>)
 800224a:	429c      	cmp	r4, r3
 800224c:	bf08      	it	eq
 800224e:	68ec      	ldreq	r4, [r5, #12]
 8002250:	e7cb      	b.n	80021ea <__swbuf_r+0x1a>
 8002252:	4621      	mov	r1, r4
 8002254:	4628      	mov	r0, r5
 8002256:	f000 f81f 	bl	8002298 <__swsetup_r>
 800225a:	2800      	cmp	r0, #0
 800225c:	d0cc      	beq.n	80021f8 <__swbuf_r+0x28>
 800225e:	f04f 37ff 	mov.w	r7, #4294967295
 8002262:	4638      	mov	r0, r7
 8002264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002266:	bf00      	nop
 8002268:	08002794 	.word	0x08002794
 800226c:	080027b4 	.word	0x080027b4
 8002270:	08002774 	.word	0x08002774

08002274 <_write_r>:
 8002274:	b538      	push	{r3, r4, r5, lr}
 8002276:	4605      	mov	r5, r0
 8002278:	4608      	mov	r0, r1
 800227a:	4611      	mov	r1, r2
 800227c:	2200      	movs	r2, #0
 800227e:	4c05      	ldr	r4, [pc, #20]	; (8002294 <_write_r+0x20>)
 8002280:	6022      	str	r2, [r4, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	f7ff f97a 	bl	800157c <_write>
 8002288:	1c43      	adds	r3, r0, #1
 800228a:	d102      	bne.n	8002292 <_write_r+0x1e>
 800228c:	6823      	ldr	r3, [r4, #0]
 800228e:	b103      	cbz	r3, 8002292 <_write_r+0x1e>
 8002290:	602b      	str	r3, [r5, #0]
 8002292:	bd38      	pop	{r3, r4, r5, pc}
 8002294:	20000130 	.word	0x20000130

08002298 <__swsetup_r>:
 8002298:	4b32      	ldr	r3, [pc, #200]	; (8002364 <__swsetup_r+0xcc>)
 800229a:	b570      	push	{r4, r5, r6, lr}
 800229c:	681d      	ldr	r5, [r3, #0]
 800229e:	4606      	mov	r6, r0
 80022a0:	460c      	mov	r4, r1
 80022a2:	b125      	cbz	r5, 80022ae <__swsetup_r+0x16>
 80022a4:	69ab      	ldr	r3, [r5, #24]
 80022a6:	b913      	cbnz	r3, 80022ae <__swsetup_r+0x16>
 80022a8:	4628      	mov	r0, r5
 80022aa:	f7ff fb7f 	bl	80019ac <__sinit>
 80022ae:	4b2e      	ldr	r3, [pc, #184]	; (8002368 <__swsetup_r+0xd0>)
 80022b0:	429c      	cmp	r4, r3
 80022b2:	d10f      	bne.n	80022d4 <__swsetup_r+0x3c>
 80022b4:	686c      	ldr	r4, [r5, #4]
 80022b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	0715      	lsls	r5, r2, #28
 80022be:	d42c      	bmi.n	800231a <__swsetup_r+0x82>
 80022c0:	06d0      	lsls	r0, r2, #27
 80022c2:	d411      	bmi.n	80022e8 <__swsetup_r+0x50>
 80022c4:	2209      	movs	r2, #9
 80022c6:	6032      	str	r2, [r6, #0]
 80022c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022cc:	81a3      	strh	r3, [r4, #12]
 80022ce:	f04f 30ff 	mov.w	r0, #4294967295
 80022d2:	bd70      	pop	{r4, r5, r6, pc}
 80022d4:	4b25      	ldr	r3, [pc, #148]	; (800236c <__swsetup_r+0xd4>)
 80022d6:	429c      	cmp	r4, r3
 80022d8:	d101      	bne.n	80022de <__swsetup_r+0x46>
 80022da:	68ac      	ldr	r4, [r5, #8]
 80022dc:	e7eb      	b.n	80022b6 <__swsetup_r+0x1e>
 80022de:	4b24      	ldr	r3, [pc, #144]	; (8002370 <__swsetup_r+0xd8>)
 80022e0:	429c      	cmp	r4, r3
 80022e2:	bf08      	it	eq
 80022e4:	68ec      	ldreq	r4, [r5, #12]
 80022e6:	e7e6      	b.n	80022b6 <__swsetup_r+0x1e>
 80022e8:	0751      	lsls	r1, r2, #29
 80022ea:	d512      	bpl.n	8002312 <__swsetup_r+0x7a>
 80022ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80022ee:	b141      	cbz	r1, 8002302 <__swsetup_r+0x6a>
 80022f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80022f4:	4299      	cmp	r1, r3
 80022f6:	d002      	beq.n	80022fe <__swsetup_r+0x66>
 80022f8:	4630      	mov	r0, r6
 80022fa:	f000 f983 	bl	8002604 <_free_r>
 80022fe:	2300      	movs	r3, #0
 8002300:	6363      	str	r3, [r4, #52]	; 0x34
 8002302:	89a3      	ldrh	r3, [r4, #12]
 8002304:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002308:	81a3      	strh	r3, [r4, #12]
 800230a:	2300      	movs	r3, #0
 800230c:	6063      	str	r3, [r4, #4]
 800230e:	6923      	ldr	r3, [r4, #16]
 8002310:	6023      	str	r3, [r4, #0]
 8002312:	89a3      	ldrh	r3, [r4, #12]
 8002314:	f043 0308 	orr.w	r3, r3, #8
 8002318:	81a3      	strh	r3, [r4, #12]
 800231a:	6923      	ldr	r3, [r4, #16]
 800231c:	b94b      	cbnz	r3, 8002332 <__swsetup_r+0x9a>
 800231e:	89a3      	ldrh	r3, [r4, #12]
 8002320:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002328:	d003      	beq.n	8002332 <__swsetup_r+0x9a>
 800232a:	4621      	mov	r1, r4
 800232c:	4630      	mov	r0, r6
 800232e:	f000 f919 	bl	8002564 <__smakebuf_r>
 8002332:	89a2      	ldrh	r2, [r4, #12]
 8002334:	f012 0301 	ands.w	r3, r2, #1
 8002338:	d00c      	beq.n	8002354 <__swsetup_r+0xbc>
 800233a:	2300      	movs	r3, #0
 800233c:	60a3      	str	r3, [r4, #8]
 800233e:	6963      	ldr	r3, [r4, #20]
 8002340:	425b      	negs	r3, r3
 8002342:	61a3      	str	r3, [r4, #24]
 8002344:	6923      	ldr	r3, [r4, #16]
 8002346:	b953      	cbnz	r3, 800235e <__swsetup_r+0xc6>
 8002348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800234c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002350:	d1ba      	bne.n	80022c8 <__swsetup_r+0x30>
 8002352:	bd70      	pop	{r4, r5, r6, pc}
 8002354:	0792      	lsls	r2, r2, #30
 8002356:	bf58      	it	pl
 8002358:	6963      	ldrpl	r3, [r4, #20]
 800235a:	60a3      	str	r3, [r4, #8]
 800235c:	e7f2      	b.n	8002344 <__swsetup_r+0xac>
 800235e:	2000      	movs	r0, #0
 8002360:	e7f7      	b.n	8002352 <__swsetup_r+0xba>
 8002362:	bf00      	nop
 8002364:	2000000c 	.word	0x2000000c
 8002368:	08002794 	.word	0x08002794
 800236c:	080027b4 	.word	0x080027b4
 8002370:	08002774 	.word	0x08002774

08002374 <_close_r>:
 8002374:	b538      	push	{r3, r4, r5, lr}
 8002376:	2300      	movs	r3, #0
 8002378:	4c05      	ldr	r4, [pc, #20]	; (8002390 <_close_r+0x1c>)
 800237a:	4605      	mov	r5, r0
 800237c:	4608      	mov	r0, r1
 800237e:	6023      	str	r3, [r4, #0]
 8002380:	f7ff f9e6 	bl	8001750 <_close>
 8002384:	1c43      	adds	r3, r0, #1
 8002386:	d102      	bne.n	800238e <_close_r+0x1a>
 8002388:	6823      	ldr	r3, [r4, #0]
 800238a:	b103      	cbz	r3, 800238e <_close_r+0x1a>
 800238c:	602b      	str	r3, [r5, #0]
 800238e:	bd38      	pop	{r3, r4, r5, pc}
 8002390:	20000130 	.word	0x20000130

08002394 <__sflush_r>:
 8002394:	898a      	ldrh	r2, [r1, #12]
 8002396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800239a:	4605      	mov	r5, r0
 800239c:	0710      	lsls	r0, r2, #28
 800239e:	460c      	mov	r4, r1
 80023a0:	d45a      	bmi.n	8002458 <__sflush_r+0xc4>
 80023a2:	684b      	ldr	r3, [r1, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	dc05      	bgt.n	80023b4 <__sflush_r+0x20>
 80023a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	dc02      	bgt.n	80023b4 <__sflush_r+0x20>
 80023ae:	2000      	movs	r0, #0
 80023b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80023b6:	2e00      	cmp	r6, #0
 80023b8:	d0f9      	beq.n	80023ae <__sflush_r+0x1a>
 80023ba:	2300      	movs	r3, #0
 80023bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80023c0:	682f      	ldr	r7, [r5, #0]
 80023c2:	602b      	str	r3, [r5, #0]
 80023c4:	d033      	beq.n	800242e <__sflush_r+0x9a>
 80023c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80023c8:	89a3      	ldrh	r3, [r4, #12]
 80023ca:	075a      	lsls	r2, r3, #29
 80023cc:	d505      	bpl.n	80023da <__sflush_r+0x46>
 80023ce:	6863      	ldr	r3, [r4, #4]
 80023d0:	1ac0      	subs	r0, r0, r3
 80023d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80023d4:	b10b      	cbz	r3, 80023da <__sflush_r+0x46>
 80023d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023d8:	1ac0      	subs	r0, r0, r3
 80023da:	2300      	movs	r3, #0
 80023dc:	4602      	mov	r2, r0
 80023de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80023e0:	6a21      	ldr	r1, [r4, #32]
 80023e2:	4628      	mov	r0, r5
 80023e4:	47b0      	blx	r6
 80023e6:	1c43      	adds	r3, r0, #1
 80023e8:	89a3      	ldrh	r3, [r4, #12]
 80023ea:	d106      	bne.n	80023fa <__sflush_r+0x66>
 80023ec:	6829      	ldr	r1, [r5, #0]
 80023ee:	291d      	cmp	r1, #29
 80023f0:	d84b      	bhi.n	800248a <__sflush_r+0xf6>
 80023f2:	4a2b      	ldr	r2, [pc, #172]	; (80024a0 <__sflush_r+0x10c>)
 80023f4:	40ca      	lsrs	r2, r1
 80023f6:	07d6      	lsls	r6, r2, #31
 80023f8:	d547      	bpl.n	800248a <__sflush_r+0xf6>
 80023fa:	2200      	movs	r2, #0
 80023fc:	6062      	str	r2, [r4, #4]
 80023fe:	6922      	ldr	r2, [r4, #16]
 8002400:	04d9      	lsls	r1, r3, #19
 8002402:	6022      	str	r2, [r4, #0]
 8002404:	d504      	bpl.n	8002410 <__sflush_r+0x7c>
 8002406:	1c42      	adds	r2, r0, #1
 8002408:	d101      	bne.n	800240e <__sflush_r+0x7a>
 800240a:	682b      	ldr	r3, [r5, #0]
 800240c:	b903      	cbnz	r3, 8002410 <__sflush_r+0x7c>
 800240e:	6560      	str	r0, [r4, #84]	; 0x54
 8002410:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002412:	602f      	str	r7, [r5, #0]
 8002414:	2900      	cmp	r1, #0
 8002416:	d0ca      	beq.n	80023ae <__sflush_r+0x1a>
 8002418:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800241c:	4299      	cmp	r1, r3
 800241e:	d002      	beq.n	8002426 <__sflush_r+0x92>
 8002420:	4628      	mov	r0, r5
 8002422:	f000 f8ef 	bl	8002604 <_free_r>
 8002426:	2000      	movs	r0, #0
 8002428:	6360      	str	r0, [r4, #52]	; 0x34
 800242a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800242e:	6a21      	ldr	r1, [r4, #32]
 8002430:	2301      	movs	r3, #1
 8002432:	4628      	mov	r0, r5
 8002434:	47b0      	blx	r6
 8002436:	1c41      	adds	r1, r0, #1
 8002438:	d1c6      	bne.n	80023c8 <__sflush_r+0x34>
 800243a:	682b      	ldr	r3, [r5, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0c3      	beq.n	80023c8 <__sflush_r+0x34>
 8002440:	2b1d      	cmp	r3, #29
 8002442:	d001      	beq.n	8002448 <__sflush_r+0xb4>
 8002444:	2b16      	cmp	r3, #22
 8002446:	d101      	bne.n	800244c <__sflush_r+0xb8>
 8002448:	602f      	str	r7, [r5, #0]
 800244a:	e7b0      	b.n	80023ae <__sflush_r+0x1a>
 800244c:	89a3      	ldrh	r3, [r4, #12]
 800244e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002452:	81a3      	strh	r3, [r4, #12]
 8002454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002458:	690f      	ldr	r7, [r1, #16]
 800245a:	2f00      	cmp	r7, #0
 800245c:	d0a7      	beq.n	80023ae <__sflush_r+0x1a>
 800245e:	0793      	lsls	r3, r2, #30
 8002460:	bf18      	it	ne
 8002462:	2300      	movne	r3, #0
 8002464:	680e      	ldr	r6, [r1, #0]
 8002466:	bf08      	it	eq
 8002468:	694b      	ldreq	r3, [r1, #20]
 800246a:	eba6 0807 	sub.w	r8, r6, r7
 800246e:	600f      	str	r7, [r1, #0]
 8002470:	608b      	str	r3, [r1, #8]
 8002472:	f1b8 0f00 	cmp.w	r8, #0
 8002476:	dd9a      	ble.n	80023ae <__sflush_r+0x1a>
 8002478:	4643      	mov	r3, r8
 800247a:	463a      	mov	r2, r7
 800247c:	6a21      	ldr	r1, [r4, #32]
 800247e:	4628      	mov	r0, r5
 8002480:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002482:	47b0      	blx	r6
 8002484:	2800      	cmp	r0, #0
 8002486:	dc07      	bgt.n	8002498 <__sflush_r+0x104>
 8002488:	89a3      	ldrh	r3, [r4, #12]
 800248a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800248e:	81a3      	strh	r3, [r4, #12]
 8002490:	f04f 30ff 	mov.w	r0, #4294967295
 8002494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002498:	4407      	add	r7, r0
 800249a:	eba8 0800 	sub.w	r8, r8, r0
 800249e:	e7e8      	b.n	8002472 <__sflush_r+0xde>
 80024a0:	20400001 	.word	0x20400001

080024a4 <_fflush_r>:
 80024a4:	b538      	push	{r3, r4, r5, lr}
 80024a6:	690b      	ldr	r3, [r1, #16]
 80024a8:	4605      	mov	r5, r0
 80024aa:	460c      	mov	r4, r1
 80024ac:	b1db      	cbz	r3, 80024e6 <_fflush_r+0x42>
 80024ae:	b118      	cbz	r0, 80024b8 <_fflush_r+0x14>
 80024b0:	6983      	ldr	r3, [r0, #24]
 80024b2:	b90b      	cbnz	r3, 80024b8 <_fflush_r+0x14>
 80024b4:	f7ff fa7a 	bl	80019ac <__sinit>
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <_fflush_r+0x48>)
 80024ba:	429c      	cmp	r4, r3
 80024bc:	d109      	bne.n	80024d2 <_fflush_r+0x2e>
 80024be:	686c      	ldr	r4, [r5, #4]
 80024c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024c4:	b17b      	cbz	r3, 80024e6 <_fflush_r+0x42>
 80024c6:	4621      	mov	r1, r4
 80024c8:	4628      	mov	r0, r5
 80024ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024ce:	f7ff bf61 	b.w	8002394 <__sflush_r>
 80024d2:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <_fflush_r+0x4c>)
 80024d4:	429c      	cmp	r4, r3
 80024d6:	d101      	bne.n	80024dc <_fflush_r+0x38>
 80024d8:	68ac      	ldr	r4, [r5, #8]
 80024da:	e7f1      	b.n	80024c0 <_fflush_r+0x1c>
 80024dc:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <_fflush_r+0x50>)
 80024de:	429c      	cmp	r4, r3
 80024e0:	bf08      	it	eq
 80024e2:	68ec      	ldreq	r4, [r5, #12]
 80024e4:	e7ec      	b.n	80024c0 <_fflush_r+0x1c>
 80024e6:	2000      	movs	r0, #0
 80024e8:	bd38      	pop	{r3, r4, r5, pc}
 80024ea:	bf00      	nop
 80024ec:	08002794 	.word	0x08002794
 80024f0:	080027b4 	.word	0x080027b4
 80024f4:	08002774 	.word	0x08002774

080024f8 <_lseek_r>:
 80024f8:	b538      	push	{r3, r4, r5, lr}
 80024fa:	4605      	mov	r5, r0
 80024fc:	4608      	mov	r0, r1
 80024fe:	4611      	mov	r1, r2
 8002500:	2200      	movs	r2, #0
 8002502:	4c05      	ldr	r4, [pc, #20]	; (8002518 <_lseek_r+0x20>)
 8002504:	6022      	str	r2, [r4, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	f7ff f92c 	bl	8001764 <_lseek>
 800250c:	1c43      	adds	r3, r0, #1
 800250e:	d102      	bne.n	8002516 <_lseek_r+0x1e>
 8002510:	6823      	ldr	r3, [r4, #0]
 8002512:	b103      	cbz	r3, 8002516 <_lseek_r+0x1e>
 8002514:	602b      	str	r3, [r5, #0]
 8002516:	bd38      	pop	{r3, r4, r5, pc}
 8002518:	20000130 	.word	0x20000130

0800251c <__swhatbuf_r>:
 800251c:	b570      	push	{r4, r5, r6, lr}
 800251e:	460e      	mov	r6, r1
 8002520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002524:	b090      	sub	sp, #64	; 0x40
 8002526:	2900      	cmp	r1, #0
 8002528:	4614      	mov	r4, r2
 800252a:	461d      	mov	r5, r3
 800252c:	da07      	bge.n	800253e <__swhatbuf_r+0x22>
 800252e:	2300      	movs	r3, #0
 8002530:	602b      	str	r3, [r5, #0]
 8002532:	89b3      	ldrh	r3, [r6, #12]
 8002534:	061a      	lsls	r2, r3, #24
 8002536:	d410      	bmi.n	800255a <__swhatbuf_r+0x3e>
 8002538:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800253c:	e00e      	b.n	800255c <__swhatbuf_r+0x40>
 800253e:	aa01      	add	r2, sp, #4
 8002540:	f000 f8be 	bl	80026c0 <_fstat_r>
 8002544:	2800      	cmp	r0, #0
 8002546:	dbf2      	blt.n	800252e <__swhatbuf_r+0x12>
 8002548:	9a02      	ldr	r2, [sp, #8]
 800254a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800254e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002552:	425a      	negs	r2, r3
 8002554:	415a      	adcs	r2, r3
 8002556:	602a      	str	r2, [r5, #0]
 8002558:	e7ee      	b.n	8002538 <__swhatbuf_r+0x1c>
 800255a:	2340      	movs	r3, #64	; 0x40
 800255c:	2000      	movs	r0, #0
 800255e:	6023      	str	r3, [r4, #0]
 8002560:	b010      	add	sp, #64	; 0x40
 8002562:	bd70      	pop	{r4, r5, r6, pc}

08002564 <__smakebuf_r>:
 8002564:	898b      	ldrh	r3, [r1, #12]
 8002566:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002568:	079d      	lsls	r5, r3, #30
 800256a:	4606      	mov	r6, r0
 800256c:	460c      	mov	r4, r1
 800256e:	d507      	bpl.n	8002580 <__smakebuf_r+0x1c>
 8002570:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002574:	6023      	str	r3, [r4, #0]
 8002576:	6123      	str	r3, [r4, #16]
 8002578:	2301      	movs	r3, #1
 800257a:	6163      	str	r3, [r4, #20]
 800257c:	b002      	add	sp, #8
 800257e:	bd70      	pop	{r4, r5, r6, pc}
 8002580:	ab01      	add	r3, sp, #4
 8002582:	466a      	mov	r2, sp
 8002584:	f7ff ffca 	bl	800251c <__swhatbuf_r>
 8002588:	9900      	ldr	r1, [sp, #0]
 800258a:	4605      	mov	r5, r0
 800258c:	4630      	mov	r0, r6
 800258e:	f7ff fa97 	bl	8001ac0 <_malloc_r>
 8002592:	b948      	cbnz	r0, 80025a8 <__smakebuf_r+0x44>
 8002594:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002598:	059a      	lsls	r2, r3, #22
 800259a:	d4ef      	bmi.n	800257c <__smakebuf_r+0x18>
 800259c:	f023 0303 	bic.w	r3, r3, #3
 80025a0:	f043 0302 	orr.w	r3, r3, #2
 80025a4:	81a3      	strh	r3, [r4, #12]
 80025a6:	e7e3      	b.n	8002570 <__smakebuf_r+0xc>
 80025a8:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <__smakebuf_r+0x7c>)
 80025aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80025ac:	89a3      	ldrh	r3, [r4, #12]
 80025ae:	6020      	str	r0, [r4, #0]
 80025b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025b4:	81a3      	strh	r3, [r4, #12]
 80025b6:	9b00      	ldr	r3, [sp, #0]
 80025b8:	6120      	str	r0, [r4, #16]
 80025ba:	6163      	str	r3, [r4, #20]
 80025bc:	9b01      	ldr	r3, [sp, #4]
 80025be:	b15b      	cbz	r3, 80025d8 <__smakebuf_r+0x74>
 80025c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025c4:	4630      	mov	r0, r6
 80025c6:	f000 f88d 	bl	80026e4 <_isatty_r>
 80025ca:	b128      	cbz	r0, 80025d8 <__smakebuf_r+0x74>
 80025cc:	89a3      	ldrh	r3, [r4, #12]
 80025ce:	f023 0303 	bic.w	r3, r3, #3
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	81a3      	strh	r3, [r4, #12]
 80025d8:	89a3      	ldrh	r3, [r4, #12]
 80025da:	431d      	orrs	r5, r3
 80025dc:	81a5      	strh	r5, [r4, #12]
 80025de:	e7cd      	b.n	800257c <__smakebuf_r+0x18>
 80025e0:	0800192d 	.word	0x0800192d

080025e4 <memchr>:
 80025e4:	b510      	push	{r4, lr}
 80025e6:	b2c9      	uxtb	r1, r1
 80025e8:	4402      	add	r2, r0
 80025ea:	4290      	cmp	r0, r2
 80025ec:	4603      	mov	r3, r0
 80025ee:	d101      	bne.n	80025f4 <memchr+0x10>
 80025f0:	2000      	movs	r0, #0
 80025f2:	bd10      	pop	{r4, pc}
 80025f4:	781c      	ldrb	r4, [r3, #0]
 80025f6:	3001      	adds	r0, #1
 80025f8:	428c      	cmp	r4, r1
 80025fa:	d1f6      	bne.n	80025ea <memchr+0x6>
 80025fc:	4618      	mov	r0, r3
 80025fe:	bd10      	pop	{r4, pc}

08002600 <__malloc_lock>:
 8002600:	4770      	bx	lr

08002602 <__malloc_unlock>:
 8002602:	4770      	bx	lr

08002604 <_free_r>:
 8002604:	b538      	push	{r3, r4, r5, lr}
 8002606:	4605      	mov	r5, r0
 8002608:	2900      	cmp	r1, #0
 800260a:	d043      	beq.n	8002694 <_free_r+0x90>
 800260c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002610:	1f0c      	subs	r4, r1, #4
 8002612:	2b00      	cmp	r3, #0
 8002614:	bfb8      	it	lt
 8002616:	18e4      	addlt	r4, r4, r3
 8002618:	f7ff fff2 	bl	8002600 <__malloc_lock>
 800261c:	4a1e      	ldr	r2, [pc, #120]	; (8002698 <_free_r+0x94>)
 800261e:	6813      	ldr	r3, [r2, #0]
 8002620:	4610      	mov	r0, r2
 8002622:	b933      	cbnz	r3, 8002632 <_free_r+0x2e>
 8002624:	6063      	str	r3, [r4, #4]
 8002626:	6014      	str	r4, [r2, #0]
 8002628:	4628      	mov	r0, r5
 800262a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800262e:	f7ff bfe8 	b.w	8002602 <__malloc_unlock>
 8002632:	42a3      	cmp	r3, r4
 8002634:	d90b      	bls.n	800264e <_free_r+0x4a>
 8002636:	6821      	ldr	r1, [r4, #0]
 8002638:	1862      	adds	r2, r4, r1
 800263a:	4293      	cmp	r3, r2
 800263c:	bf01      	itttt	eq
 800263e:	681a      	ldreq	r2, [r3, #0]
 8002640:	685b      	ldreq	r3, [r3, #4]
 8002642:	1852      	addeq	r2, r2, r1
 8002644:	6022      	streq	r2, [r4, #0]
 8002646:	6063      	str	r3, [r4, #4]
 8002648:	6004      	str	r4, [r0, #0]
 800264a:	e7ed      	b.n	8002628 <_free_r+0x24>
 800264c:	4613      	mov	r3, r2
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	b10a      	cbz	r2, 8002656 <_free_r+0x52>
 8002652:	42a2      	cmp	r2, r4
 8002654:	d9fa      	bls.n	800264c <_free_r+0x48>
 8002656:	6819      	ldr	r1, [r3, #0]
 8002658:	1858      	adds	r0, r3, r1
 800265a:	42a0      	cmp	r0, r4
 800265c:	d10b      	bne.n	8002676 <_free_r+0x72>
 800265e:	6820      	ldr	r0, [r4, #0]
 8002660:	4401      	add	r1, r0
 8002662:	1858      	adds	r0, r3, r1
 8002664:	4282      	cmp	r2, r0
 8002666:	6019      	str	r1, [r3, #0]
 8002668:	d1de      	bne.n	8002628 <_free_r+0x24>
 800266a:	6810      	ldr	r0, [r2, #0]
 800266c:	6852      	ldr	r2, [r2, #4]
 800266e:	4401      	add	r1, r0
 8002670:	6019      	str	r1, [r3, #0]
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	e7d8      	b.n	8002628 <_free_r+0x24>
 8002676:	d902      	bls.n	800267e <_free_r+0x7a>
 8002678:	230c      	movs	r3, #12
 800267a:	602b      	str	r3, [r5, #0]
 800267c:	e7d4      	b.n	8002628 <_free_r+0x24>
 800267e:	6820      	ldr	r0, [r4, #0]
 8002680:	1821      	adds	r1, r4, r0
 8002682:	428a      	cmp	r2, r1
 8002684:	bf01      	itttt	eq
 8002686:	6811      	ldreq	r1, [r2, #0]
 8002688:	6852      	ldreq	r2, [r2, #4]
 800268a:	1809      	addeq	r1, r1, r0
 800268c:	6021      	streq	r1, [r4, #0]
 800268e:	6062      	str	r2, [r4, #4]
 8002690:	605c      	str	r4, [r3, #4]
 8002692:	e7c9      	b.n	8002628 <_free_r+0x24>
 8002694:	bd38      	pop	{r3, r4, r5, pc}
 8002696:	bf00      	nop
 8002698:	20000090 	.word	0x20000090

0800269c <_read_r>:
 800269c:	b538      	push	{r3, r4, r5, lr}
 800269e:	4605      	mov	r5, r0
 80026a0:	4608      	mov	r0, r1
 80026a2:	4611      	mov	r1, r2
 80026a4:	2200      	movs	r2, #0
 80026a6:	4c05      	ldr	r4, [pc, #20]	; (80026bc <_read_r+0x20>)
 80026a8:	6022      	str	r2, [r4, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	f7ff f828 	bl	8001700 <_read>
 80026b0:	1c43      	adds	r3, r0, #1
 80026b2:	d102      	bne.n	80026ba <_read_r+0x1e>
 80026b4:	6823      	ldr	r3, [r4, #0]
 80026b6:	b103      	cbz	r3, 80026ba <_read_r+0x1e>
 80026b8:	602b      	str	r3, [r5, #0]
 80026ba:	bd38      	pop	{r3, r4, r5, pc}
 80026bc:	20000130 	.word	0x20000130

080026c0 <_fstat_r>:
 80026c0:	b538      	push	{r3, r4, r5, lr}
 80026c2:	2300      	movs	r3, #0
 80026c4:	4c06      	ldr	r4, [pc, #24]	; (80026e0 <_fstat_r+0x20>)
 80026c6:	4605      	mov	r5, r0
 80026c8:	4608      	mov	r0, r1
 80026ca:	4611      	mov	r1, r2
 80026cc:	6023      	str	r3, [r4, #0]
 80026ce:	f7ff f842 	bl	8001756 <_fstat>
 80026d2:	1c43      	adds	r3, r0, #1
 80026d4:	d102      	bne.n	80026dc <_fstat_r+0x1c>
 80026d6:	6823      	ldr	r3, [r4, #0]
 80026d8:	b103      	cbz	r3, 80026dc <_fstat_r+0x1c>
 80026da:	602b      	str	r3, [r5, #0]
 80026dc:	bd38      	pop	{r3, r4, r5, pc}
 80026de:	bf00      	nop
 80026e0:	20000130 	.word	0x20000130

080026e4 <_isatty_r>:
 80026e4:	b538      	push	{r3, r4, r5, lr}
 80026e6:	2300      	movs	r3, #0
 80026e8:	4c05      	ldr	r4, [pc, #20]	; (8002700 <_isatty_r+0x1c>)
 80026ea:	4605      	mov	r5, r0
 80026ec:	4608      	mov	r0, r1
 80026ee:	6023      	str	r3, [r4, #0]
 80026f0:	f7ff f836 	bl	8001760 <_isatty>
 80026f4:	1c43      	adds	r3, r0, #1
 80026f6:	d102      	bne.n	80026fe <_isatty_r+0x1a>
 80026f8:	6823      	ldr	r3, [r4, #0]
 80026fa:	b103      	cbz	r3, 80026fe <_isatty_r+0x1a>
 80026fc:	602b      	str	r3, [r5, #0]
 80026fe:	bd38      	pop	{r3, r4, r5, pc}
 8002700:	20000130 	.word	0x20000130

08002704 <_init>:
 8002704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002706:	bf00      	nop
 8002708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800270a:	bc08      	pop	{r3}
 800270c:	469e      	mov	lr, r3
 800270e:	4770      	bx	lr

08002710 <_fini>:
 8002710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002712:	bf00      	nop
 8002714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002716:	bc08      	pop	{r3}
 8002718:	469e      	mov	lr, r3
 800271a:	4770      	bx	lr
