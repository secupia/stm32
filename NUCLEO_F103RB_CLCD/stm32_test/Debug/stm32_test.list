
stm32_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002958  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08002a64  08002a64  00012a64  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002afc  08002afc  00012afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002b00  08002b00  00012b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000088  20000000  08002b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000204  20000088  08002b8c  00020088  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000028c  08002b8c  0002028c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  9 .debug_info   00014057  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000037da  00000000  00000000  00034108  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000096a2  00000000  00000000  000378e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e00  00000000  00000000  00040f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001370  00000000  00000000  00041d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000888b  00000000  00000000  000430f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004961  00000000  00000000  0004b983  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000502e4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002bac  00000000  00000000  00050360  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a4c 	.word	0x08002a4c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08002a4c 	.word	0x08002a4c

0800014c <micros>:
//**************************************************************************************
//**************************************************************************************
//Time

uint32_t micros(){
  return (millis()&0x3FFFFF)*1000 + (SYSTICK_LOAD-SysTick->VAL)/SYS_CLOCK;
 800014c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
#define SYS_CLOCK       (SystemCoreClock/1000000)
#define SYSTICK_LOAD    ((SystemCoreClock/1000)-1)
extern __IO uint32_t uwTick;
static inline uint32_t millis(void)
{
  return uwTick;
 8000150:	4b0a      	ldr	r3, [pc, #40]	; (800017c <micros+0x30>)
uint32_t micros(){
 8000152:	b510      	push	{r4, lr}
 8000154:	6819      	ldr	r1, [r3, #0]
  return (millis()&0x3FFFFF)*1000 + (SYSTICK_LOAD-SysTick->VAL)/SYS_CLOCK;
 8000156:	4b0a      	ldr	r3, [pc, #40]	; (8000180 <micros+0x34>)
 8000158:	f3c1 0115 	ubfx	r1, r1, #0, #22
 800015c:	681a      	ldr	r2, [r3, #0]
 800015e:	4b09      	ldr	r3, [pc, #36]	; (8000184 <micros+0x38>)
 8000160:	689c      	ldr	r4, [r3, #8]
 8000162:	fbb2 f3f0 	udiv	r3, r2, r0
 8000166:	1b1b      	subs	r3, r3, r4
 8000168:	4c07      	ldr	r4, [pc, #28]	; (8000188 <micros+0x3c>)
 800016a:	3b01      	subs	r3, #1
 800016c:	fbb2 f2f4 	udiv	r2, r2, r4
 8000170:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8000174:	fb00 3001 	mla	r0, r0, r1, r3
 8000178:	bd10      	pop	{r4, pc}
 800017a:	bf00      	nop
 800017c:	200000bc 	.word	0x200000bc
 8000180:	20000020 	.word	0x20000020
 8000184:	e000e010 	.word	0xe000e010
 8000188:	000f4240 	.word	0x000f4240

0800018c <delay_us>:

void delay_us(uint32_t us){
 800018c:	b570      	push	{r4, r5, r6, lr}
 800018e:	4604      	mov	r4, r0
  uint32_t temp = micros();
 8000190:	f7ff ffdc 	bl	800014c <micros>
  uint32_t comp = temp + us;
  uint8_t  flag = 0;
 8000194:	2500      	movs	r5, #0
 8000196:	4e09      	ldr	r6, [pc, #36]	; (80001bc <delay_us+0x30>)
  uint32_t comp = temp + us;
 8000198:	4404      	add	r4, r0
  while(comp > temp){
 800019a:	42a0      	cmp	r0, r4
 800019c:	d300      	bcc.n	80001a0 <delay_us+0x14>
    }
    else  {
      temp = micros();
    }
  }
}
 800019e:	bd70      	pop	{r4, r5, r6, pc}
 80001a0:	6833      	ldr	r3, [r6, #0]
    if(((mil&0x3FFFFF)==0)&&(flag==0)){
 80001a2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80001a6:	b103      	cbz	r3, 80001aa <delay_us+0x1e>
    if(flag) {
 80001a8:	b12d      	cbz	r5, 80001b6 <delay_us+0x2a>
      temp = micros() + 0x400000UL * 1000;
 80001aa:	f7ff ffcf 	bl	800014c <micros>
 80001ae:	2501      	movs	r5, #1
 80001b0:	f100 407a 	add.w	r0, r0, #4194304000	; 0xfa000000
 80001b4:	e7f1      	b.n	800019a <delay_us+0xe>
      temp = micros();
 80001b6:	f7ff ffc9 	bl	800014c <micros>
 80001ba:	e7ee      	b.n	800019a <delay_us+0xe>
 80001bc:	200000bc 	.word	0x200000bc

080001c0 <write4bits>:
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
  delay_us(100);          // commands need > 37us to settle
}

#ifdef _LCD_4BITMODE_
void write4bits(uint8_t value) {
 80001c0:	b570      	push	{r4, r5, r6, lr}
 80001c2:	4606      	mov	r6, r0
 80001c4:	2400      	movs	r4, #0
  for (uint8_t i = 0; i < 4; i++) {
    HAL_GPIO_WritePin(hlcd.data_ports[i], hlcd.data_pins[i],  (value >> i) & 0x01 );
 80001c6:	4d15      	ldr	r5, [pc, #84]	; (800021c <write4bits+0x5c>)
 80001c8:	6869      	ldr	r1, [r5, #4]
 80001ca:	682b      	ldr	r3, [r5, #0]
 80001cc:	fa46 f204 	asr.w	r2, r6, r4
 80001d0:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
 80001d4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80001d8:	f002 0201 	and.w	r2, r2, #1
 80001dc:	3401      	adds	r4, #1
 80001de:	f000 fc19 	bl	8000a14 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 4; i++) {
 80001e2:	2c04      	cmp	r4, #4
 80001e4:	d1f0      	bne.n	80001c8 <write4bits+0x8>
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 80001e6:	2200      	movs	r2, #0
 80001e8:	2180      	movs	r1, #128	; 0x80
 80001ea:	480d      	ldr	r0, [pc, #52]	; (8000220 <write4bits+0x60>)
 80001ec:	f000 fc12 	bl	8000a14 <HAL_GPIO_WritePin>
  delay_us(1);              //
 80001f0:	2001      	movs	r0, #1
 80001f2:	f7ff ffcb 	bl	800018c <delay_us>
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 80001f6:	2201      	movs	r2, #1
 80001f8:	2180      	movs	r1, #128	; 0x80
 80001fa:	4809      	ldr	r0, [pc, #36]	; (8000220 <write4bits+0x60>)
 80001fc:	f000 fc0a 	bl	8000a14 <HAL_GPIO_WritePin>
  delay_us(1);   			   // enable pulse must be >450ns
 8000200:	2001      	movs	r0, #1
 8000202:	f7ff ffc3 	bl	800018c <delay_us>
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000206:	4806      	ldr	r0, [pc, #24]	; (8000220 <write4bits+0x60>)
 8000208:	2200      	movs	r2, #0
 800020a:	2180      	movs	r1, #128	; 0x80
 800020c:	f000 fc02 	bl	8000a14 <HAL_GPIO_WritePin>
  }

  pulseEnable();
}
 8000210:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  delay_us(100);          // commands need > 37us to settle
 8000214:	2064      	movs	r0, #100	; 0x64
 8000216:	f7ff bfb9 	b.w	800018c <delay_us>
 800021a:	bf00      	nop
 800021c:	200000b0 	.word	0x200000b0
 8000220:	40011000 	.word	0x40011000

08000224 <send>:
void send(uint8_t value, GPIO_PinState mode) {
 8000224:	b510      	push	{r4, lr}
 8000226:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, mode);   // digitalWrite(_rs_pin, mode);
 8000228:	460a      	mov	r2, r1
 800022a:	4806      	ldr	r0, [pc, #24]	; (8000244 <send+0x20>)
 800022c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000230:	f000 fbf0 	bl	8000a14 <HAL_GPIO_WritePin>
    write4bits(value>>4);
 8000234:	0920      	lsrs	r0, r4, #4
 8000236:	f7ff ffc3 	bl	80001c0 <write4bits>
    write4bits(value);
 800023a:	4620      	mov	r0, r4
}
 800023c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write4bits(value);
 8000240:	f7ff bfbe 	b.w	80001c0 <write4bits>
 8000244:	40010800 	.word	0x40010800

08000248 <command>:
  send(value, GPIO_PIN_RESET);
 8000248:	2100      	movs	r1, #0
 800024a:	f7ff bfeb 	b.w	8000224 <send>
	...

08000250 <lcd_setCursor>:
  uint8_t row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000250:	2300      	movs	r3, #0
{
 8000252:	b082      	sub	sp, #8
  uint8_t row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000254:	f88d 3004 	strb.w	r3, [sp, #4]
 8000258:	2340      	movs	r3, #64	; 0x40
 800025a:	f88d 3005 	strb.w	r3, [sp, #5]
 800025e:	2314      	movs	r3, #20
 8000260:	f88d 3006 	strb.w	r3, [sp, #6]
 8000264:	2354      	movs	r3, #84	; 0x54
 8000266:	f88d 3007 	strb.w	r3, [sp, #7]
  if ( row > hlcd.numlines ) {
 800026a:	4b09      	ldr	r3, [pc, #36]	; (8000290 <lcd_setCursor+0x40>)
 800026c:	7adb      	ldrb	r3, [r3, #11]
 800026e:	428b      	cmp	r3, r1
    row = hlcd.numlines-1;    // we count rows starting w/0
 8000270:	bf3c      	itt	cc
 8000272:	f103 31ff 	addcc.w	r1, r3, #4294967295
 8000276:	b2c9      	uxtbcc	r1, r1
  command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000278:	ab02      	add	r3, sp, #8
 800027a:	4419      	add	r1, r3
 800027c:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 8000280:	4418      	add	r0, r3
 8000282:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8000286:	b2c0      	uxtb	r0, r0
}
 8000288:	b002      	add	sp, #8
  command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800028a:	f7ff bfdd 	b.w	8000248 <command>
 800028e:	bf00      	nop
 8000290:	200000b0 	.word	0x200000b0

08000294 <lcd_display>:
  hlcd.displaycontrol |= LCD_DISPLAYON;
 8000294:	4b04      	ldr	r3, [pc, #16]	; (80002a8 <lcd_display+0x14>)
 8000296:	7a58      	ldrb	r0, [r3, #9]
 8000298:	f040 0204 	orr.w	r2, r0, #4
  command(LCD_DISPLAYCONTROL | hlcd.displaycontrol);
 800029c:	f040 000c 	orr.w	r0, r0, #12
  hlcd.displaycontrol |= LCD_DISPLAYON;
 80002a0:	725a      	strb	r2, [r3, #9]
  command(LCD_DISPLAYCONTROL | hlcd.displaycontrol);
 80002a2:	f7ff bfd1 	b.w	8000248 <command>
 80002a6:	bf00      	nop
 80002a8:	200000b0 	.word	0x200000b0

080002ac <lcd_Init>:
void lcd_Init(uint8_t cols, uint8_t lines) {
 80002ac:	b510      	push	{r4, lr}
  hlcd.data_ports = data_ports;  // LCD Data Ports , hlcd.data_ports
 80002ae:	4b26      	ldr	r3, [pc, #152]	; (8000348 <lcd_Init+0x9c>)
 80002b0:	4c26      	ldr	r4, [pc, #152]	; (800034c <lcd_Init+0xa0>)
if (lines > 1) {
 80002b2:	2901      	cmp	r1, #1
  hlcd.data_ports = data_ports;  // LCD Data Ports , hlcd.data_ports
 80002b4:	6023      	str	r3, [r4, #0]
  hlcd.data_pins = data_pins;    // LCD Data Pins , hlcd.data_pins
 80002b6:	4b26      	ldr	r3, [pc, #152]	; (8000350 <lcd_Init+0xa4>)
  delay_ms(50);        //delayMicroseconds(50000); 
 80002b8:	f04f 0032 	mov.w	r0, #50	; 0x32
  hlcd.data_pins = data_pins;    // LCD Data Pins , hlcd.data_pins
 80002bc:	6063      	str	r3, [r4, #4]
    hlcd.displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80002be:	bf94      	ite	ls
 80002c0:	2300      	movls	r3, #0
    hlcd.displayfunction |= LCD_2LINE;
 80002c2:	2308      	movhi	r3, #8
  hlcd.numlines = lines;
 80002c4:	72e1      	strb	r1, [r4, #11]
    hlcd.displayfunction |= LCD_2LINE;
 80002c6:	7223      	strb	r3, [r4, #8]
  delay_ms(50);        //delayMicroseconds(50000); 
 80002c8:	f000 f8a4 	bl	8000414 <HAL_Delay>
  HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);  // digitalWrite(_rs_pin, LOW);
 80002cc:	2200      	movs	r2, #0
 80002ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002d2:	4820      	ldr	r0, [pc, #128]	; (8000354 <lcd_Init+0xa8>)
 80002d4:	f000 fb9e 	bl	8000a14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);  // digitalWrite(_enable_pin, LOW);
 80002d8:	2200      	movs	r2, #0
 80002da:	2180      	movs	r1, #128	; 0x80
 80002dc:	481e      	ldr	r0, [pc, #120]	; (8000358 <lcd_Init+0xac>)
 80002de:	f000 fb99 	bl	8000a14 <HAL_GPIO_WritePin>
    write4bits(0x03);
 80002e2:	2003      	movs	r0, #3
 80002e4:	f7ff ff6c 	bl	80001c0 <write4bits>
    delay_us(4500);    //delayMicroseconds(4500); // wait min 4.1ms
 80002e8:	f241 1094 	movw	r0, #4500	; 0x1194
 80002ec:	f7ff ff4e 	bl	800018c <delay_us>
    write4bits(0x03);
 80002f0:	2003      	movs	r0, #3
 80002f2:	f7ff ff65 	bl	80001c0 <write4bits>
    delay_us(100);    //delayMicroseconds(4500); // wait min 4.1ms
 80002f6:	2064      	movs	r0, #100	; 0x64
 80002f8:	f7ff ff48 	bl	800018c <delay_us>
    write4bits(0x03); 
 80002fc:	2003      	movs	r0, #3
 80002fe:	f7ff ff5f 	bl	80001c0 <write4bits>
    delay_us(100);    //delayMicroseconds(150);
 8000302:	2064      	movs	r0, #100	; 0x64
 8000304:	f7ff ff42 	bl	800018c <delay_us>
    write4bits(0x02);
 8000308:	2002      	movs	r0, #2
 800030a:	f7ff ff59 	bl	80001c0 <write4bits>
    delay_us(100);
 800030e:	2064      	movs	r0, #100	; 0x64
 8000310:	f7ff ff3c 	bl	800018c <delay_us>
  command(LCD_FUNCTIONSET | hlcd.displayfunction);  
 8000314:	7a20      	ldrb	r0, [r4, #8]
 8000316:	f040 0020 	orr.w	r0, r0, #32
 800031a:	f7ff ff95 	bl	8000248 <command>
  hlcd.displaycontrol = LCD_DISPLAYOFF | LCD_CURSOROFF | LCD_BLINKOFF;
 800031e:	2300      	movs	r3, #0
  command(LCD_DISPLAYCONTROL | hlcd.displaycontrol);
 8000320:	2008      	movs	r0, #8
  hlcd.displaycontrol = LCD_DISPLAYOFF | LCD_CURSOROFF | LCD_BLINKOFF;
 8000322:	7263      	strb	r3, [r4, #9]
  command(LCD_DISPLAYCONTROL | hlcd.displaycontrol);
 8000324:	f7ff ff90 	bl	8000248 <command>
  command(LCD_CLEARDISPLAY);    //200426
 8000328:	2001      	movs	r0, #1
 800032a:	f7ff ff8d 	bl	8000248 <command>
  delay_ms(3);
 800032e:	2003      	movs	r0, #3
 8000330:	f000 f870 	bl	8000414 <HAL_Delay>
  hlcd.displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000334:	2302      	movs	r3, #2
  command(LCD_ENTRYMODESET | hlcd.displaymode);
 8000336:	2006      	movs	r0, #6
  hlcd.displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000338:	72a3      	strb	r3, [r4, #10]
  command(LCD_ENTRYMODESET | hlcd.displaymode);
 800033a:	f7ff ff85 	bl	8000248 <command>
}
 800033e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  lcd_display();
 8000342:	f7ff bfa7 	b.w	8000294 <lcd_display>
 8000346:	bf00      	nop
 8000348:	20000008 	.word	0x20000008
 800034c:	200000b0 	.word	0x200000b0
 8000350:	20000000 	.word	0x20000000
 8000354:	40010800 	.word	0x40010800
 8000358:	40011000 	.word	0x40011000

0800035c <lcd_string>:
void lcd_string(char * str_data) {
 800035c:	b510      	push	{r4, lr}
 800035e:	1e44      	subs	r4, r0, #1
   while(*str_data) {
 8000360:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000364:	b900      	cbnz	r0, 8000368 <lcd_string+0xc>
}
 8000366:	bd10      	pop	{r4, pc}
  send(value, GPIO_PIN_SET);
 8000368:	2101      	movs	r1, #1
 800036a:	f7ff ff5b 	bl	8000224 <send>
 800036e:	e7f7      	b.n	8000360 <lcd_string+0x4>

08000370 <lcd_setCurStr>:
void lcd_setCurStr(uint8_t col, uint8_t row,  char * str) {
 8000370:	b510      	push	{r4, lr}
 8000372:	4614      	mov	r4, r2
	lcd_setCursor(col, row);
 8000374:	f7ff ff6c 	bl	8000250 <lcd_setCursor>
	lcd_string(str);
 8000378:	4620      	mov	r0, r4
}
 800037a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lcd_string(str);
 800037e:	f7ff bfed 	b.w	800035c <lcd_string>
	...

08000384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000384:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000386:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <HAL_InitTick+0x3c>)
{
 8000388:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800038a:	7818      	ldrb	r0, [r3, #0]
 800038c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000390:	fbb3 f3f0 	udiv	r3, r3, r0
 8000394:	4a0b      	ldr	r2, [pc, #44]	; (80003c4 <HAL_InitTick+0x40>)
 8000396:	6810      	ldr	r0, [r2, #0]
 8000398:	fbb0 f0f3 	udiv	r0, r0, r3
 800039c:	f000 fa42 	bl	8000824 <HAL_SYSTICK_Config>
 80003a0:	4604      	mov	r4, r0
 80003a2:	b958      	cbnz	r0, 80003bc <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003a4:	2d0f      	cmp	r5, #15
 80003a6:	d809      	bhi.n	80003bc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003a8:	4602      	mov	r2, r0
 80003aa:	4629      	mov	r1, r5
 80003ac:	f04f 30ff 	mov.w	r0, #4294967295
 80003b0:	f000 f9f6 	bl	80007a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80003b4:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <HAL_InitTick+0x44>)
 80003b6:	4620      	mov	r0, r4
 80003b8:	601d      	str	r5, [r3, #0]
 80003ba:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80003bc:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80003be:	bd38      	pop	{r3, r4, r5, pc}
 80003c0:	20000018 	.word	0x20000018
 80003c4:	20000020 	.word	0x20000020
 80003c8:	2000001c 	.word	0x2000001c

080003cc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003cc:	4a07      	ldr	r2, [pc, #28]	; (80003ec <HAL_Init+0x20>)
{
 80003ce:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003d0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003d2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003d4:	f043 0310 	orr.w	r3, r3, #16
 80003d8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003da:	f000 f9cf 	bl	800077c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80003de:	2000      	movs	r0, #0
 80003e0:	f7ff ffd0 	bl	8000384 <HAL_InitTick>
  HAL_MspInit();
 80003e4:	f001 fd92 	bl	8001f0c <HAL_MspInit>
}
 80003e8:	2000      	movs	r0, #0
 80003ea:	bd08      	pop	{r3, pc}
 80003ec:	40022000 	.word	0x40022000

080003f0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80003f0:	4a03      	ldr	r2, [pc, #12]	; (8000400 <HAL_IncTick+0x10>)
 80003f2:	4b04      	ldr	r3, [pc, #16]	; (8000404 <HAL_IncTick+0x14>)
 80003f4:	6811      	ldr	r1, [r2, #0]
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	440b      	add	r3, r1
 80003fa:	6013      	str	r3, [r2, #0]
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	200000bc 	.word	0x200000bc
 8000404:	20000018 	.word	0x20000018

08000408 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000408:	4b01      	ldr	r3, [pc, #4]	; (8000410 <HAL_GetTick+0x8>)
 800040a:	6818      	ldr	r0, [r3, #0]
}
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	200000bc 	.word	0x200000bc

08000414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000414:	b538      	push	{r3, r4, r5, lr}
 8000416:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000418:	f7ff fff6 	bl	8000408 <HAL_GetTick>
 800041c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800041e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000420:	bf1e      	ittt	ne
 8000422:	4b04      	ldrne	r3, [pc, #16]	; (8000434 <HAL_Delay+0x20>)
 8000424:	781b      	ldrbne	r3, [r3, #0]
 8000426:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000428:	f7ff ffee 	bl	8000408 <HAL_GetTick>
 800042c:	1b40      	subs	r0, r0, r5
 800042e:	4284      	cmp	r4, r0
 8000430:	d8fa      	bhi.n	8000428 <HAL_Delay+0x14>
  {
  }
}
 8000432:	bd38      	pop	{r3, r4, r5, pc}
 8000434:	20000018 	.word	0x20000018

08000438 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000438:	2300      	movs	r3, #0
{ 
 800043a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800043c:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800043e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000442:	2b01      	cmp	r3, #1
 8000444:	d074      	beq.n	8000530 <HAL_ADC_ConfigChannel+0xf8>
 8000446:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000448:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 800044a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800044e:	2d06      	cmp	r5, #6
 8000450:	6802      	ldr	r2, [r0, #0]
 8000452:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000456:	680c      	ldr	r4, [r1, #0]
 8000458:	d825      	bhi.n	80004a6 <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800045a:	442b      	add	r3, r5
 800045c:	251f      	movs	r5, #31
 800045e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000460:	3b05      	subs	r3, #5
 8000462:	409d      	lsls	r5, r3
 8000464:	ea26 0505 	bic.w	r5, r6, r5
 8000468:	fa04 f303 	lsl.w	r3, r4, r3
 800046c:	432b      	orrs	r3, r5
 800046e:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000470:	2c09      	cmp	r4, #9
 8000472:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000476:	688d      	ldr	r5, [r1, #8]
 8000478:	d92f      	bls.n	80004da <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800047a:	2607      	movs	r6, #7
 800047c:	4423      	add	r3, r4
 800047e:	68d1      	ldr	r1, [r2, #12]
 8000480:	3b1e      	subs	r3, #30
 8000482:	409e      	lsls	r6, r3
 8000484:	ea21 0106 	bic.w	r1, r1, r6
 8000488:	fa05 f303 	lsl.w	r3, r5, r3
 800048c:	430b      	orrs	r3, r1
 800048e:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000490:	f1a4 0310 	sub.w	r3, r4, #16
 8000494:	2b01      	cmp	r3, #1
 8000496:	d92b      	bls.n	80004f0 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000498:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800049a:	2200      	movs	r2, #0
 800049c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	b002      	add	sp, #8
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80004a6:	2d0c      	cmp	r5, #12
 80004a8:	d80b      	bhi.n	80004c2 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80004aa:	442b      	add	r3, r5
 80004ac:	251f      	movs	r5, #31
 80004ae:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80004b0:	3b23      	subs	r3, #35	; 0x23
 80004b2:	409d      	lsls	r5, r3
 80004b4:	ea26 0505 	bic.w	r5, r6, r5
 80004b8:	fa04 f303 	lsl.w	r3, r4, r3
 80004bc:	432b      	orrs	r3, r5
 80004be:	6313      	str	r3, [r2, #48]	; 0x30
 80004c0:	e7d6      	b.n	8000470 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80004c2:	442b      	add	r3, r5
 80004c4:	251f      	movs	r5, #31
 80004c6:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80004c8:	3b41      	subs	r3, #65	; 0x41
 80004ca:	409d      	lsls	r5, r3
 80004cc:	ea26 0505 	bic.w	r5, r6, r5
 80004d0:	fa04 f303 	lsl.w	r3, r4, r3
 80004d4:	432b      	orrs	r3, r5
 80004d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004d8:	e7ca      	b.n	8000470 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80004da:	2607      	movs	r6, #7
 80004dc:	6911      	ldr	r1, [r2, #16]
 80004de:	4423      	add	r3, r4
 80004e0:	409e      	lsls	r6, r3
 80004e2:	ea21 0106 	bic.w	r1, r1, r6
 80004e6:	fa05 f303 	lsl.w	r3, r5, r3
 80004ea:	430b      	orrs	r3, r1
 80004ec:	6113      	str	r3, [r2, #16]
 80004ee:	e7cf      	b.n	8000490 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 80004f0:	4b10      	ldr	r3, [pc, #64]	; (8000534 <HAL_ADC_ConfigChannel+0xfc>)
 80004f2:	429a      	cmp	r2, r3
 80004f4:	d116      	bne.n	8000524 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80004f6:	6893      	ldr	r3, [r2, #8]
 80004f8:	021b      	lsls	r3, r3, #8
 80004fa:	d4cd      	bmi.n	8000498 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80004fc:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80004fe:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000500:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000504:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000506:	d1c7      	bne.n	8000498 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000508:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <HAL_ADC_ConfigChannel+0x100>)
 800050a:	4a0c      	ldr	r2, [pc, #48]	; (800053c <HAL_ADC_ConfigChannel+0x104>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000512:	230a      	movs	r3, #10
 8000514:	4353      	muls	r3, r2
            wait_loop_index--;
 8000516:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000518:	9b01      	ldr	r3, [sp, #4]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d0bc      	beq.n	8000498 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 800051e:	9b01      	ldr	r3, [sp, #4]
 8000520:	3b01      	subs	r3, #1
 8000522:	e7f8      	b.n	8000516 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000524:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000526:	f043 0320 	orr.w	r3, r3, #32
 800052a:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800052c:	2301      	movs	r3, #1
 800052e:	e7b4      	b.n	800049a <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000530:	2302      	movs	r3, #2
 8000532:	e7b5      	b.n	80004a0 <HAL_ADC_ConfigChannel+0x68>
 8000534:	40012400 	.word	0x40012400
 8000538:	20000020 	.word	0x20000020
 800053c:	000f4240 	.word	0x000f4240

08000540 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000540:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000542:	6803      	ldr	r3, [r0, #0]
{
 8000544:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000546:	689a      	ldr	r2, [r3, #8]
 8000548:	07d2      	lsls	r2, r2, #31
 800054a:	d401      	bmi.n	8000550 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800054c:	2000      	movs	r0, #0
 800054e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000550:	689a      	ldr	r2, [r3, #8]
 8000552:	f022 0201 	bic.w	r2, r2, #1
 8000556:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000558:	f7ff ff56 	bl	8000408 <HAL_GetTick>
 800055c:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800055e:	6823      	ldr	r3, [r4, #0]
 8000560:	689b      	ldr	r3, [r3, #8]
 8000562:	07db      	lsls	r3, r3, #31
 8000564:	d5f2      	bpl.n	800054c <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000566:	f7ff ff4f 	bl	8000408 <HAL_GetTick>
 800056a:	1b40      	subs	r0, r0, r5
 800056c:	2802      	cmp	r0, #2
 800056e:	d9f6      	bls.n	800055e <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000570:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000572:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000574:	f043 0310 	orr.w	r3, r3, #16
 8000578:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800057a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000582:	bd38      	pop	{r3, r4, r5, pc}

08000584 <HAL_ADC_Init>:
{
 8000584:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000586:	4604      	mov	r4, r0
 8000588:	2800      	cmp	r0, #0
 800058a:	d071      	beq.n	8000670 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800058c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800058e:	b923      	cbnz	r3, 800059a <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000590:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000592:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000596:	f001 f9bb 	bl	8001910 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800059a:	4620      	mov	r0, r4
 800059c:	f7ff ffd0 	bl	8000540 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80005a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80005a2:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 80005a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80005a8:	d164      	bne.n	8000674 <HAL_ADC_Init+0xf0>
 80005aa:	2800      	cmp	r0, #0
 80005ac:	d162      	bne.n	8000674 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80005ae:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 80005b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80005b4:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80005b6:	f023 0302 	bic.w	r3, r3, #2
 80005ba:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80005be:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80005c0:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80005c2:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80005c4:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80005c6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80005ca:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80005ce:	d038      	beq.n	8000642 <HAL_ADC_Init+0xbe>
 80005d0:	2901      	cmp	r1, #1
 80005d2:	bf14      	ite	ne
 80005d4:	4606      	movne	r6, r0
 80005d6:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80005da:	7d25      	ldrb	r5, [r4, #20]
 80005dc:	2d01      	cmp	r5, #1
 80005de:	d107      	bne.n	80005f0 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d130      	bne.n	8000646 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80005e4:	69a3      	ldr	r3, [r4, #24]
 80005e6:	3b01      	subs	r3, #1
 80005e8:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80005ec:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80005f0:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80005f2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80005f6:	685d      	ldr	r5, [r3, #4]
 80005f8:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80005fc:	ea45 0506 	orr.w	r5, r5, r6
 8000600:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000602:	689e      	ldr	r6, [r3, #8]
 8000604:	4d1d      	ldr	r5, [pc, #116]	; (800067c <HAL_ADC_Init+0xf8>)
 8000606:	ea05 0506 	and.w	r5, r5, r6
 800060a:	ea45 0502 	orr.w	r5, r5, r2
 800060e:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000610:	d001      	beq.n	8000616 <HAL_ADC_Init+0x92>
 8000612:	2901      	cmp	r1, #1
 8000614:	d120      	bne.n	8000658 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000616:	6921      	ldr	r1, [r4, #16]
 8000618:	3901      	subs	r1, #1
 800061a:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800061c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800061e:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000622:	4329      	orrs	r1, r5
 8000624:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000626:	6899      	ldr	r1, [r3, #8]
 8000628:	4b15      	ldr	r3, [pc, #84]	; (8000680 <HAL_ADC_Init+0xfc>)
 800062a:	400b      	ands	r3, r1
 800062c:	429a      	cmp	r2, r3
 800062e:	d115      	bne.n	800065c <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8000630:	2300      	movs	r3, #0
 8000632:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000634:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000636:	f023 0303 	bic.w	r3, r3, #3
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	62a3      	str	r3, [r4, #40]	; 0x28
 8000640:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000642:	460e      	mov	r6, r1
 8000644:	e7c9      	b.n	80005da <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000646:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000648:	f043 0320 	orr.w	r3, r3, #32
 800064c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800064e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000656:	e7cb      	b.n	80005f0 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000658:	2100      	movs	r1, #0
 800065a:	e7df      	b.n	800061c <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 800065c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800065e:	f023 0312 	bic.w	r3, r3, #18
 8000662:	f043 0310 	orr.w	r3, r3, #16
 8000666:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000668:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800066a:	f043 0301 	orr.w	r3, r3, #1
 800066e:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000670:	2001      	movs	r0, #1
}
 8000672:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000674:	f043 0310 	orr.w	r3, r3, #16
 8000678:	62a3      	str	r3, [r4, #40]	; 0x28
 800067a:	e7f9      	b.n	8000670 <HAL_ADC_Init+0xec>
 800067c:	ffe1f7fd 	.word	0xffe1f7fd
 8000680:	ff1f0efe 	.word	0xff1f0efe

08000684 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000684:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000686:	4604      	mov	r4, r0
 8000688:	2800      	cmp	r0, #0
 800068a:	d06e      	beq.n	800076a <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800068c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000690:	b90b      	cbnz	r3, 8000696 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000692:	f001 f9bb 	bl	8001a0c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000696:	6822      	ldr	r2, [r4, #0]
 8000698:	6813      	ldr	r3, [r2, #0]
 800069a:	f023 0302 	bic.w	r3, r3, #2
 800069e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006a0:	f7ff feb2 	bl	8000408 <HAL_GetTick>
 80006a4:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80006a6:	6823      	ldr	r3, [r4, #0]
 80006a8:	685a      	ldr	r2, [r3, #4]
 80006aa:	0791      	lsls	r1, r2, #30
 80006ac:	d451      	bmi.n	8000752 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	f042 0201 	orr.w	r2, r2, #1
 80006b4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006b6:	f7ff fea7 	bl	8000408 <HAL_GetTick>
 80006ba:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006bc:	6823      	ldr	r3, [r4, #0]
 80006be:	685a      	ldr	r2, [r3, #4]
 80006c0:	07d2      	lsls	r2, r2, #31
 80006c2:	d554      	bpl.n	800076e <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80006c4:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80006c6:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80006c8:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	bf0c      	ite	eq
 80006ce:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006d2:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80006d6:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80006d8:	7e62      	ldrb	r2, [r4, #25]
 80006da:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	bf0c      	ite	eq
 80006e0:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006e4:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80006e8:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 80006ea:	7ea2      	ldrb	r2, [r4, #26]
 80006ec:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	bf0c      	ite	eq
 80006f2:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80006f6:	f022 0220 	bicne.w	r2, r2, #32
 80006fa:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 80006fc:	7ee2      	ldrb	r2, [r4, #27]
 80006fe:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	bf0c      	ite	eq
 8000704:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000708:	f042 0210 	orrne.w	r2, r2, #16
 800070c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800070e:	7f22      	ldrb	r2, [r4, #28]
 8000710:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	bf0c      	ite	eq
 8000716:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800071a:	f022 0208 	bicne.w	r2, r2, #8
 800071e:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000720:	7f62      	ldrb	r2, [r4, #29]
 8000722:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	bf0c      	ite	eq
 8000728:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800072c:	f022 0204 	bicne.w	r2, r2, #4
 8000730:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000732:	68e1      	ldr	r1, [r4, #12]
 8000734:	68a2      	ldr	r2, [r4, #8]
 8000736:	430a      	orrs	r2, r1
 8000738:	6921      	ldr	r1, [r4, #16]
 800073a:	430a      	orrs	r2, r1
 800073c:	6961      	ldr	r1, [r4, #20]
 800073e:	430a      	orrs	r2, r1
 8000740:	6861      	ldr	r1, [r4, #4]
 8000742:	3901      	subs	r1, #1
 8000744:	430a      	orrs	r2, r1
 8000746:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000748:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800074a:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800074c:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8000750:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000752:	f7ff fe59 	bl	8000408 <HAL_GetTick>
 8000756:	1b40      	subs	r0, r0, r5
 8000758:	280a      	cmp	r0, #10
 800075a:	d9a4      	bls.n	80006a6 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800075c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800075e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000762:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000764:	2305      	movs	r3, #5
 8000766:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 800076a:	2001      	movs	r0, #1
}
 800076c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800076e:	f7ff fe4b 	bl	8000408 <HAL_GetTick>
 8000772:	1b40      	subs	r0, r0, r5
 8000774:	280a      	cmp	r0, #10
 8000776:	d9a1      	bls.n	80006bc <HAL_CAN_Init+0x38>
 8000778:	e7f0      	b.n	800075c <HAL_CAN_Init+0xd8>
	...

0800077c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800077c:	4a07      	ldr	r2, [pc, #28]	; (800079c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800077e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000780:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000782:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000786:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800078a:	041b      	lsls	r3, r3, #16
 800078c:	0c1b      	lsrs	r3, r3, #16
 800078e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000796:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000798:	60d3      	str	r3, [r2, #12]
 800079a:	4770      	bx	lr
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	68dc      	ldr	r4, [r3, #12]
 80007a6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007aa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ae:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b0:	2b04      	cmp	r3, #4
 80007b2:	bf28      	it	cs
 80007b4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007b6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b8:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007bc:	bf98      	it	ls
 80007be:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	fa05 f303 	lsl.w	r3, r5, r3
 80007c4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c8:	bf88      	it	hi
 80007ca:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007cc:	4019      	ands	r1, r3
 80007ce:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d0:	fa05 f404 	lsl.w	r4, r5, r4
 80007d4:	3c01      	subs	r4, #1
 80007d6:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80007d8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007da:	ea42 0201 	orr.w	r2, r2, r1
 80007de:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e2:	bfa9      	itett	ge
 80007e4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e8:	4b06      	ldrlt	r3, [pc, #24]	; (8000804 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ea:	b2d2      	uxtbge	r2, r2
 80007ec:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f0:	bfbb      	ittet	lt
 80007f2:	f000 000f 	andlt.w	r0, r0, #15
 80007f6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fc:	541a      	strblt	r2, [r3, r0]
 80007fe:	bd30      	pop	{r4, r5, pc}
 8000800:	e000ed00 	.word	0xe000ed00
 8000804:	e000ed14 	.word	0xe000ed14

08000808 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000808:	2800      	cmp	r0, #0
 800080a:	db08      	blt.n	800081e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800080c:	2301      	movs	r3, #1
 800080e:	0942      	lsrs	r2, r0, #5
 8000810:	f000 001f 	and.w	r0, r0, #31
 8000814:	fa03 f000 	lsl.w	r0, r3, r0
 8000818:	4b01      	ldr	r3, [pc, #4]	; (8000820 <HAL_NVIC_EnableIRQ+0x18>)
 800081a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800081e:	4770      	bx	lr
 8000820:	e000e100 	.word	0xe000e100

08000824 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000824:	3801      	subs	r0, #1
 8000826:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800082a:	d20a      	bcs.n	8000842 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000830:	4a06      	ldr	r2, [pc, #24]	; (800084c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000832:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000834:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000838:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800083a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800083c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000842:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	e000e010 	.word	0xe000e010
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000854:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000856:	4626      	mov	r6, r4
 8000858:	4b66      	ldr	r3, [pc, #408]	; (80009f4 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800085a:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000a04 <HAL_GPIO_Init+0x1b4>
 800085e:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000a08 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000862:	680a      	ldr	r2, [r1, #0]
 8000864:	fa32 f506 	lsrs.w	r5, r2, r6
 8000868:	d102      	bne.n	8000870 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 800086a:	b003      	add	sp, #12
 800086c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000870:	f04f 0801 	mov.w	r8, #1
 8000874:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000878:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 800087c:	4590      	cmp	r8, r2
 800087e:	d17f      	bne.n	8000980 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8000880:	684d      	ldr	r5, [r1, #4]
 8000882:	2d12      	cmp	r5, #18
 8000884:	f000 80aa 	beq.w	80009dc <HAL_GPIO_Init+0x18c>
 8000888:	f200 8083 	bhi.w	8000992 <HAL_GPIO_Init+0x142>
 800088c:	2d02      	cmp	r5, #2
 800088e:	f000 80a2 	beq.w	80009d6 <HAL_GPIO_Init+0x186>
 8000892:	d877      	bhi.n	8000984 <HAL_GPIO_Init+0x134>
 8000894:	2d00      	cmp	r5, #0
 8000896:	f000 8089 	beq.w	80009ac <HAL_GPIO_Init+0x15c>
 800089a:	2d01      	cmp	r5, #1
 800089c:	f000 8099 	beq.w	80009d2 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008a0:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008a4:	2aff      	cmp	r2, #255	; 0xff
 80008a6:	bf93      	iteet	ls
 80008a8:	4682      	movls	sl, r0
 80008aa:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80008ae:	3d08      	subhi	r5, #8
 80008b0:	f8d0 b000 	ldrls.w	fp, [r0]
 80008b4:	bf92      	itee	ls
 80008b6:	00b5      	lslls	r5, r6, #2
 80008b8:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80008bc:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008be:	fa09 f805 	lsl.w	r8, r9, r5
 80008c2:	ea2b 0808 	bic.w	r8, fp, r8
 80008c6:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008ca:	bf88      	it	hi
 80008cc:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008d0:	ea48 0505 	orr.w	r5, r8, r5
 80008d4:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008d8:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80008dc:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80008e0:	d04e      	beq.n	8000980 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008e2:	4d45      	ldr	r5, [pc, #276]	; (80009f8 <HAL_GPIO_Init+0x1a8>)
 80008e4:	4f44      	ldr	r7, [pc, #272]	; (80009f8 <HAL_GPIO_Init+0x1a8>)
 80008e6:	69ad      	ldr	r5, [r5, #24]
 80008e8:	f026 0803 	bic.w	r8, r6, #3
 80008ec:	f045 0501 	orr.w	r5, r5, #1
 80008f0:	61bd      	str	r5, [r7, #24]
 80008f2:	69bd      	ldr	r5, [r7, #24]
 80008f4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80008f8:	f005 0501 	and.w	r5, r5, #1
 80008fc:	9501      	str	r5, [sp, #4]
 80008fe:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000902:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000906:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000908:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800090c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000910:	fa09 f90b 	lsl.w	r9, r9, fp
 8000914:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000918:	4d38      	ldr	r5, [pc, #224]	; (80009fc <HAL_GPIO_Init+0x1ac>)
 800091a:	42a8      	cmp	r0, r5
 800091c:	d063      	beq.n	80009e6 <HAL_GPIO_Init+0x196>
 800091e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000922:	42a8      	cmp	r0, r5
 8000924:	d061      	beq.n	80009ea <HAL_GPIO_Init+0x19a>
 8000926:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800092a:	42a8      	cmp	r0, r5
 800092c:	d05f      	beq.n	80009ee <HAL_GPIO_Init+0x19e>
 800092e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000932:	42a8      	cmp	r0, r5
 8000934:	bf0c      	ite	eq
 8000936:	2503      	moveq	r5, #3
 8000938:	2504      	movne	r5, #4
 800093a:	fa05 f50b 	lsl.w	r5, r5, fp
 800093e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000942:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000946:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000948:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800094c:	bf14      	ite	ne
 800094e:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000950:	4395      	biceq	r5, r2
 8000952:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000954:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000956:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800095a:	bf14      	ite	ne
 800095c:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800095e:	4395      	biceq	r5, r2
 8000960:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000962:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000964:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000968:	bf14      	ite	ne
 800096a:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800096c:	4395      	biceq	r5, r2
 800096e:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000970:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000972:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000976:	bf14      	ite	ne
 8000978:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800097a:	ea25 0202 	biceq.w	r2, r5, r2
 800097e:	60da      	str	r2, [r3, #12]
	position++;
 8000980:	3601      	adds	r6, #1
 8000982:	e76e      	b.n	8000862 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8000984:	2d03      	cmp	r5, #3
 8000986:	d022      	beq.n	80009ce <HAL_GPIO_Init+0x17e>
 8000988:	2d11      	cmp	r5, #17
 800098a:	d189      	bne.n	80008a0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800098c:	68cc      	ldr	r4, [r1, #12]
 800098e:	3404      	adds	r4, #4
          break;
 8000990:	e786      	b.n	80008a0 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000992:	4f1b      	ldr	r7, [pc, #108]	; (8000a00 <HAL_GPIO_Init+0x1b0>)
 8000994:	42bd      	cmp	r5, r7
 8000996:	d009      	beq.n	80009ac <HAL_GPIO_Init+0x15c>
 8000998:	d812      	bhi.n	80009c0 <HAL_GPIO_Init+0x170>
 800099a:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000a0c <HAL_GPIO_Init+0x1bc>
 800099e:	454d      	cmp	r5, r9
 80009a0:	d004      	beq.n	80009ac <HAL_GPIO_Init+0x15c>
 80009a2:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80009a6:	454d      	cmp	r5, r9
 80009a8:	f47f af7a 	bne.w	80008a0 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009ac:	688c      	ldr	r4, [r1, #8]
 80009ae:	b1c4      	cbz	r4, 80009e2 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009b0:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80009b2:	bf0c      	ite	eq
 80009b4:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80009b8:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009bc:	2408      	movs	r4, #8
 80009be:	e76f      	b.n	80008a0 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80009c0:	4575      	cmp	r5, lr
 80009c2:	d0f3      	beq.n	80009ac <HAL_GPIO_Init+0x15c>
 80009c4:	4565      	cmp	r5, ip
 80009c6:	d0f1      	beq.n	80009ac <HAL_GPIO_Init+0x15c>
 80009c8:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000a10 <HAL_GPIO_Init+0x1c0>
 80009cc:	e7eb      	b.n	80009a6 <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009ce:	2400      	movs	r4, #0
 80009d0:	e766      	b.n	80008a0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009d2:	68cc      	ldr	r4, [r1, #12]
          break;
 80009d4:	e764      	b.n	80008a0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009d6:	68cc      	ldr	r4, [r1, #12]
 80009d8:	3408      	adds	r4, #8
          break;
 80009da:	e761      	b.n	80008a0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009dc:	68cc      	ldr	r4, [r1, #12]
 80009de:	340c      	adds	r4, #12
          break;
 80009e0:	e75e      	b.n	80008a0 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009e2:	2404      	movs	r4, #4
 80009e4:	e75c      	b.n	80008a0 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009e6:	2500      	movs	r5, #0
 80009e8:	e7a7      	b.n	800093a <HAL_GPIO_Init+0xea>
 80009ea:	2501      	movs	r5, #1
 80009ec:	e7a5      	b.n	800093a <HAL_GPIO_Init+0xea>
 80009ee:	2502      	movs	r5, #2
 80009f0:	e7a3      	b.n	800093a <HAL_GPIO_Init+0xea>
 80009f2:	bf00      	nop
 80009f4:	40010400 	.word	0x40010400
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40010800 	.word	0x40010800
 8000a00:	10210000 	.word	0x10210000
 8000a04:	10310000 	.word	0x10310000
 8000a08:	10320000 	.word	0x10320000
 8000a0c:	10110000 	.word	0x10110000
 8000a10:	10220000 	.word	0x10220000

08000a14 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a14:	b10a      	cbz	r2, 8000a1a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a16:	6101      	str	r1, [r0, #16]
 8000a18:	4770      	bx	lr
 8000a1a:	0409      	lsls	r1, r1, #16
 8000a1c:	e7fb      	b.n	8000a16 <HAL_GPIO_WritePin+0x2>

08000a1e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a1e:	4770      	bx	lr

08000a20 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000a20:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000a22:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000a24:	6959      	ldr	r1, [r3, #20]
 8000a26:	4201      	tst	r1, r0
 8000a28:	d002      	beq.n	8000a30 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000a2a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000a2c:	f7ff fff7 	bl	8000a1e <HAL_GPIO_EXTI_Callback>
 8000a30:	bd08      	pop	{r3, pc}
 8000a32:	bf00      	nop
 8000a34:	40010400 	.word	0x40010400

08000a38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000a38:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	b908      	cbnz	r0, 8000a42 <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8000a3e:	2001      	movs	r0, #1
 8000a40:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000a42:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000a46:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000a4a:	b91b      	cbnz	r3, 8000a54 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000a4c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000a50:	f001 f8cc 	bl	8001bec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000a54:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000a56:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000a58:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000a5c:	6813      	ldr	r3, [r2, #0]
 8000a5e:	f023 0301 	bic.w	r3, r3, #1
 8000a62:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000a64:	f000 fb0a 	bl	800107c <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000a68:	6865      	ldr	r5, [r4, #4]
 8000a6a:	4b41      	ldr	r3, [pc, #260]	; (8000b70 <HAL_I2C_Init+0x138>)
 8000a6c:	429d      	cmp	r5, r3
 8000a6e:	d84d      	bhi.n	8000b0c <HAL_I2C_Init+0xd4>
 8000a70:	4b40      	ldr	r3, [pc, #256]	; (8000b74 <HAL_I2C_Init+0x13c>)
 8000a72:	4298      	cmp	r0, r3
 8000a74:	d9e3      	bls.n	8000a3e <HAL_I2C_Init+0x6>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000a76:	4940      	ldr	r1, [pc, #256]	; (8000b78 <HAL_I2C_Init+0x140>)

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000a78:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000a7a:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000a7e:	6853      	ldr	r3, [r2, #4]
 8000a80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a84:	430b      	orrs	r3, r1
 8000a86:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000a88:	6a13      	ldr	r3, [r2, #32]
 8000a8a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a8e:	3101      	adds	r1, #1
 8000a90:	4319      	orrs	r1, r3
 8000a92:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000a94:	69d1      	ldr	r1, [r2, #28]
 8000a96:	4b36      	ldr	r3, [pc, #216]	; (8000b70 <HAL_I2C_Init+0x138>)
 8000a98:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000a9c:	429d      	cmp	r5, r3
 8000a9e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000aa2:	f100 30ff 	add.w	r0, r0, #4294967295
 8000aa6:	d848      	bhi.n	8000b3a <HAL_I2C_Init+0x102>
 8000aa8:	006d      	lsls	r5, r5, #1
 8000aaa:	fbb0 f0f5 	udiv	r0, r0, r5
 8000aae:	3001      	adds	r0, #1
 8000ab0:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000ab4:	2b04      	cmp	r3, #4
 8000ab6:	bf38      	it	cc
 8000ab8:	2304      	movcc	r3, #4
 8000aba:	430b      	orrs	r3, r1
 8000abc:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000abe:	6811      	ldr	r1, [r2, #0]
 8000ac0:	6a20      	ldr	r0, [r4, #32]
 8000ac2:	69e3      	ldr	r3, [r4, #28]
 8000ac4:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000ac8:	4303      	orrs	r3, r0
 8000aca:	430b      	orrs	r3, r1
 8000acc:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000ace:	6891      	ldr	r1, [r2, #8]
 8000ad0:	68e0      	ldr	r0, [r4, #12]
 8000ad2:	6923      	ldr	r3, [r4, #16]
 8000ad4:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8000ad8:	4303      	orrs	r3, r0
 8000ada:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000ade:	430b      	orrs	r3, r1
 8000ae0:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000ae2:	68d1      	ldr	r1, [r2, #12]
 8000ae4:	69a0      	ldr	r0, [r4, #24]
 8000ae6:	6963      	ldr	r3, [r4, #20]
 8000ae8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000aec:	4303      	orrs	r3, r0
 8000aee:	430b      	orrs	r3, r1
 8000af0:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000af2:	6813      	ldr	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000af4:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000afc:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000afe:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000b00:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000b04:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b06:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8000b0a:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <HAL_I2C_Init+0x144>)
 8000b0e:	4298      	cmp	r0, r3
 8000b10:	d995      	bls.n	8000a3e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000b12:	4e19      	ldr	r6, [pc, #100]	; (8000b78 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000b14:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8000b18:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000b1c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000b1e:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000b20:	6853      	ldr	r3, [r2, #4]
 8000b22:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b26:	4333      	orrs	r3, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000b28:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000b2c:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000b2e:	6a13      	ldr	r3, [r2, #32]
 8000b30:	fbb1 f1f6 	udiv	r1, r1, r6
 8000b34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b38:	e7a9      	b.n	8000a8e <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000b3a:	68a3      	ldr	r3, [r4, #8]
 8000b3c:	b953      	cbnz	r3, 8000b54 <HAL_I2C_Init+0x11c>
 8000b3e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000b42:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b46:	1c43      	adds	r3, r0, #1
 8000b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b4c:	b16b      	cbz	r3, 8000b6a <HAL_I2C_Init+0x132>
 8000b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b52:	e7b2      	b.n	8000aba <HAL_I2C_Init+0x82>
 8000b54:	2319      	movs	r3, #25
 8000b56:	436b      	muls	r3, r5
 8000b58:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b5c:	1c43      	adds	r3, r0, #1
 8000b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b62:	b113      	cbz	r3, 8000b6a <HAL_I2C_Init+0x132>
 8000b64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b68:	e7a7      	b.n	8000aba <HAL_I2C_Init+0x82>
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e7a5      	b.n	8000aba <HAL_I2C_Init+0x82>
 8000b6e:	bf00      	nop
 8000b70:	000186a0 	.word	0x000186a0
 8000b74:	001e847f 	.word	0x001e847f
 8000b78:	000f4240 	.word	0x000f4240
 8000b7c:	003d08ff 	.word	0x003d08ff

08000b80 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000b80:	2201      	movs	r2, #1
 8000b82:	4b01      	ldr	r3, [pc, #4]	; (8000b88 <HAL_PWR_EnableBkUpAccess+0x8>)
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	4770      	bx	lr
 8000b88:	420e0020 	.word	0x420e0020

08000b8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b90:	4605      	mov	r5, r0
 8000b92:	b908      	cbnz	r0, 8000b98 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000b94:	2001      	movs	r0, #1
 8000b96:	e03c      	b.n	8000c12 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b98:	6803      	ldr	r3, [r0, #0]
 8000b9a:	07db      	lsls	r3, r3, #31
 8000b9c:	d410      	bmi.n	8000bc0 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b9e:	682b      	ldr	r3, [r5, #0]
 8000ba0:	079f      	lsls	r7, r3, #30
 8000ba2:	d45d      	bmi.n	8000c60 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ba4:	682b      	ldr	r3, [r5, #0]
 8000ba6:	0719      	lsls	r1, r3, #28
 8000ba8:	f100 8094 	bmi.w	8000cd4 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bac:	682b      	ldr	r3, [r5, #0]
 8000bae:	075a      	lsls	r2, r3, #29
 8000bb0:	f100 80be 	bmi.w	8000d30 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000bb4:	69e8      	ldr	r0, [r5, #28]
 8000bb6:	2800      	cmp	r0, #0
 8000bb8:	f040 812c 	bne.w	8000e14 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e028      	b.n	8000c12 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bc0:	4c8f      	ldr	r4, [pc, #572]	; (8000e00 <HAL_RCC_OscConfig+0x274>)
 8000bc2:	6863      	ldr	r3, [r4, #4]
 8000bc4:	f003 030c 	and.w	r3, r3, #12
 8000bc8:	2b04      	cmp	r3, #4
 8000bca:	d007      	beq.n	8000bdc <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bcc:	6863      	ldr	r3, [r4, #4]
 8000bce:	f003 030c 	and.w	r3, r3, #12
 8000bd2:	2b08      	cmp	r3, #8
 8000bd4:	d109      	bne.n	8000bea <HAL_RCC_OscConfig+0x5e>
 8000bd6:	6863      	ldr	r3, [r4, #4]
 8000bd8:	03de      	lsls	r6, r3, #15
 8000bda:	d506      	bpl.n	8000bea <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bdc:	6823      	ldr	r3, [r4, #0]
 8000bde:	039c      	lsls	r4, r3, #14
 8000be0:	d5dd      	bpl.n	8000b9e <HAL_RCC_OscConfig+0x12>
 8000be2:	686b      	ldr	r3, [r5, #4]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d1da      	bne.n	8000b9e <HAL_RCC_OscConfig+0x12>
 8000be8:	e7d4      	b.n	8000b94 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bea:	686b      	ldr	r3, [r5, #4]
 8000bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bf0:	d112      	bne.n	8000c18 <HAL_RCC_OscConfig+0x8c>
 8000bf2:	6823      	ldr	r3, [r4, #0]
 8000bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bf8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000bfa:	f7ff fc05 	bl	8000408 <HAL_GetTick>
 8000bfe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c00:	6823      	ldr	r3, [r4, #0]
 8000c02:	0398      	lsls	r0, r3, #14
 8000c04:	d4cb      	bmi.n	8000b9e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c06:	f7ff fbff 	bl	8000408 <HAL_GetTick>
 8000c0a:	1b80      	subs	r0, r0, r6
 8000c0c:	2864      	cmp	r0, #100	; 0x64
 8000c0e:	d9f7      	bls.n	8000c00 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000c10:	2003      	movs	r0, #3
}
 8000c12:	b002      	add	sp, #8
 8000c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c18:	b99b      	cbnz	r3, 8000c42 <HAL_RCC_OscConfig+0xb6>
 8000c1a:	6823      	ldr	r3, [r4, #0]
 8000c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c20:	6023      	str	r3, [r4, #0]
 8000c22:	6823      	ldr	r3, [r4, #0]
 8000c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c28:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c2a:	f7ff fbed 	bl	8000408 <HAL_GetTick>
 8000c2e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c30:	6823      	ldr	r3, [r4, #0]
 8000c32:	0399      	lsls	r1, r3, #14
 8000c34:	d5b3      	bpl.n	8000b9e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c36:	f7ff fbe7 	bl	8000408 <HAL_GetTick>
 8000c3a:	1b80      	subs	r0, r0, r6
 8000c3c:	2864      	cmp	r0, #100	; 0x64
 8000c3e:	d9f7      	bls.n	8000c30 <HAL_RCC_OscConfig+0xa4>
 8000c40:	e7e6      	b.n	8000c10 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c46:	6823      	ldr	r3, [r4, #0]
 8000c48:	d103      	bne.n	8000c52 <HAL_RCC_OscConfig+0xc6>
 8000c4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c4e:	6023      	str	r3, [r4, #0]
 8000c50:	e7cf      	b.n	8000bf2 <HAL_RCC_OscConfig+0x66>
 8000c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c56:	6023      	str	r3, [r4, #0]
 8000c58:	6823      	ldr	r3, [r4, #0]
 8000c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c5e:	e7cb      	b.n	8000bf8 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c60:	4c67      	ldr	r4, [pc, #412]	; (8000e00 <HAL_RCC_OscConfig+0x274>)
 8000c62:	6863      	ldr	r3, [r4, #4]
 8000c64:	f013 0f0c 	tst.w	r3, #12
 8000c68:	d007      	beq.n	8000c7a <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c6a:	6863      	ldr	r3, [r4, #4]
 8000c6c:	f003 030c 	and.w	r3, r3, #12
 8000c70:	2b08      	cmp	r3, #8
 8000c72:	d110      	bne.n	8000c96 <HAL_RCC_OscConfig+0x10a>
 8000c74:	6863      	ldr	r3, [r4, #4]
 8000c76:	03da      	lsls	r2, r3, #15
 8000c78:	d40d      	bmi.n	8000c96 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c7a:	6823      	ldr	r3, [r4, #0]
 8000c7c:	079b      	lsls	r3, r3, #30
 8000c7e:	d502      	bpl.n	8000c86 <HAL_RCC_OscConfig+0xfa>
 8000c80:	692b      	ldr	r3, [r5, #16]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d186      	bne.n	8000b94 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c86:	6823      	ldr	r3, [r4, #0]
 8000c88:	696a      	ldr	r2, [r5, #20]
 8000c8a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000c8e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c92:	6023      	str	r3, [r4, #0]
 8000c94:	e786      	b.n	8000ba4 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c96:	692a      	ldr	r2, [r5, #16]
 8000c98:	4b5a      	ldr	r3, [pc, #360]	; (8000e04 <HAL_RCC_OscConfig+0x278>)
 8000c9a:	b16a      	cbz	r2, 8000cb8 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ca0:	f7ff fbb2 	bl	8000408 <HAL_GetTick>
 8000ca4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ca6:	6823      	ldr	r3, [r4, #0]
 8000ca8:	079f      	lsls	r7, r3, #30
 8000caa:	d4ec      	bmi.n	8000c86 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cac:	f7ff fbac 	bl	8000408 <HAL_GetTick>
 8000cb0:	1b80      	subs	r0, r0, r6
 8000cb2:	2802      	cmp	r0, #2
 8000cb4:	d9f7      	bls.n	8000ca6 <HAL_RCC_OscConfig+0x11a>
 8000cb6:	e7ab      	b.n	8000c10 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000cb8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000cba:	f7ff fba5 	bl	8000408 <HAL_GetTick>
 8000cbe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cc0:	6823      	ldr	r3, [r4, #0]
 8000cc2:	0798      	lsls	r0, r3, #30
 8000cc4:	f57f af6e 	bpl.w	8000ba4 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cc8:	f7ff fb9e 	bl	8000408 <HAL_GetTick>
 8000ccc:	1b80      	subs	r0, r0, r6
 8000cce:	2802      	cmp	r0, #2
 8000cd0:	d9f6      	bls.n	8000cc0 <HAL_RCC_OscConfig+0x134>
 8000cd2:	e79d      	b.n	8000c10 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cd4:	69aa      	ldr	r2, [r5, #24]
 8000cd6:	4c4a      	ldr	r4, [pc, #296]	; (8000e00 <HAL_RCC_OscConfig+0x274>)
 8000cd8:	4b4b      	ldr	r3, [pc, #300]	; (8000e08 <HAL_RCC_OscConfig+0x27c>)
 8000cda:	b1da      	cbz	r2, 8000d14 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000cdc:	2201      	movs	r2, #1
 8000cde:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ce0:	f7ff fb92 	bl	8000408 <HAL_GetTick>
 8000ce4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ce6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ce8:	079b      	lsls	r3, r3, #30
 8000cea:	d50d      	bpl.n	8000d08 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000cec:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000cf0:	4b46      	ldr	r3, [pc, #280]	; (8000e0c <HAL_RCC_OscConfig+0x280>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8000cf8:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000cfa:	bf00      	nop
  }
  while (Delay --);
 8000cfc:	9b01      	ldr	r3, [sp, #4]
 8000cfe:	1e5a      	subs	r2, r3, #1
 8000d00:	9201      	str	r2, [sp, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d1f9      	bne.n	8000cfa <HAL_RCC_OscConfig+0x16e>
 8000d06:	e751      	b.n	8000bac <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d08:	f7ff fb7e 	bl	8000408 <HAL_GetTick>
 8000d0c:	1b80      	subs	r0, r0, r6
 8000d0e:	2802      	cmp	r0, #2
 8000d10:	d9e9      	bls.n	8000ce6 <HAL_RCC_OscConfig+0x15a>
 8000d12:	e77d      	b.n	8000c10 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000d14:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d16:	f7ff fb77 	bl	8000408 <HAL_GetTick>
 8000d1a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d1e:	079f      	lsls	r7, r3, #30
 8000d20:	f57f af44 	bpl.w	8000bac <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d24:	f7ff fb70 	bl	8000408 <HAL_GetTick>
 8000d28:	1b80      	subs	r0, r0, r6
 8000d2a:	2802      	cmp	r0, #2
 8000d2c:	d9f6      	bls.n	8000d1c <HAL_RCC_OscConfig+0x190>
 8000d2e:	e76f      	b.n	8000c10 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d30:	4c33      	ldr	r4, [pc, #204]	; (8000e00 <HAL_RCC_OscConfig+0x274>)
 8000d32:	69e3      	ldr	r3, [r4, #28]
 8000d34:	00d8      	lsls	r0, r3, #3
 8000d36:	d424      	bmi.n	8000d82 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000d38:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d3a:	69e3      	ldr	r3, [r4, #28]
 8000d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d40:	61e3      	str	r3, [r4, #28]
 8000d42:	69e3      	ldr	r3, [r4, #28]
 8000d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d4c:	4e30      	ldr	r6, [pc, #192]	; (8000e10 <HAL_RCC_OscConfig+0x284>)
 8000d4e:	6833      	ldr	r3, [r6, #0]
 8000d50:	05d9      	lsls	r1, r3, #23
 8000d52:	d518      	bpl.n	8000d86 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d54:	68eb      	ldr	r3, [r5, #12]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d126      	bne.n	8000da8 <HAL_RCC_OscConfig+0x21c>
 8000d5a:	6a23      	ldr	r3, [r4, #32]
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000d62:	f7ff fb51 	bl	8000408 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d66:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000d6a:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d6c:	6a23      	ldr	r3, [r4, #32]
 8000d6e:	079b      	lsls	r3, r3, #30
 8000d70:	d53f      	bpl.n	8000df2 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000d72:	2f00      	cmp	r7, #0
 8000d74:	f43f af1e 	beq.w	8000bb4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d78:	69e3      	ldr	r3, [r4, #28]
 8000d7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	61e3      	str	r3, [r4, #28]
 8000d80:	e718      	b.n	8000bb4 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000d82:	2700      	movs	r7, #0
 8000d84:	e7e2      	b.n	8000d4c <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d86:	6833      	ldr	r3, [r6, #0]
 8000d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000d8e:	f7ff fb3b 	bl	8000408 <HAL_GetTick>
 8000d92:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d94:	6833      	ldr	r3, [r6, #0]
 8000d96:	05da      	lsls	r2, r3, #23
 8000d98:	d4dc      	bmi.n	8000d54 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d9a:	f7ff fb35 	bl	8000408 <HAL_GetTick>
 8000d9e:	eba0 0008 	sub.w	r0, r0, r8
 8000da2:	2864      	cmp	r0, #100	; 0x64
 8000da4:	d9f6      	bls.n	8000d94 <HAL_RCC_OscConfig+0x208>
 8000da6:	e733      	b.n	8000c10 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000da8:	b9ab      	cbnz	r3, 8000dd6 <HAL_RCC_OscConfig+0x24a>
 8000daa:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dac:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000db0:	f023 0301 	bic.w	r3, r3, #1
 8000db4:	6223      	str	r3, [r4, #32]
 8000db6:	6a23      	ldr	r3, [r4, #32]
 8000db8:	f023 0304 	bic.w	r3, r3, #4
 8000dbc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000dbe:	f7ff fb23 	bl	8000408 <HAL_GetTick>
 8000dc2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dc4:	6a23      	ldr	r3, [r4, #32]
 8000dc6:	0798      	lsls	r0, r3, #30
 8000dc8:	d5d3      	bpl.n	8000d72 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dca:	f7ff fb1d 	bl	8000408 <HAL_GetTick>
 8000dce:	1b80      	subs	r0, r0, r6
 8000dd0:	4540      	cmp	r0, r8
 8000dd2:	d9f7      	bls.n	8000dc4 <HAL_RCC_OscConfig+0x238>
 8000dd4:	e71c      	b.n	8000c10 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dd6:	2b05      	cmp	r3, #5
 8000dd8:	6a23      	ldr	r3, [r4, #32]
 8000dda:	d103      	bne.n	8000de4 <HAL_RCC_OscConfig+0x258>
 8000ddc:	f043 0304 	orr.w	r3, r3, #4
 8000de0:	6223      	str	r3, [r4, #32]
 8000de2:	e7ba      	b.n	8000d5a <HAL_RCC_OscConfig+0x1ce>
 8000de4:	f023 0301 	bic.w	r3, r3, #1
 8000de8:	6223      	str	r3, [r4, #32]
 8000dea:	6a23      	ldr	r3, [r4, #32]
 8000dec:	f023 0304 	bic.w	r3, r3, #4
 8000df0:	e7b6      	b.n	8000d60 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000df2:	f7ff fb09 	bl	8000408 <HAL_GetTick>
 8000df6:	eba0 0008 	sub.w	r0, r0, r8
 8000dfa:	42b0      	cmp	r0, r6
 8000dfc:	d9b6      	bls.n	8000d6c <HAL_RCC_OscConfig+0x1e0>
 8000dfe:	e707      	b.n	8000c10 <HAL_RCC_OscConfig+0x84>
 8000e00:	40021000 	.word	0x40021000
 8000e04:	42420000 	.word	0x42420000
 8000e08:	42420480 	.word	0x42420480
 8000e0c:	20000020 	.word	0x20000020
 8000e10:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e14:	4b2a      	ldr	r3, [pc, #168]	; (8000ec0 <HAL_RCC_OscConfig+0x334>)
 8000e16:	685a      	ldr	r2, [r3, #4]
 8000e18:	461c      	mov	r4, r3
 8000e1a:	f002 020c 	and.w	r2, r2, #12
 8000e1e:	2a08      	cmp	r2, #8
 8000e20:	d03d      	beq.n	8000e9e <HAL_RCC_OscConfig+0x312>
 8000e22:	2300      	movs	r3, #0
 8000e24:	4e27      	ldr	r6, [pc, #156]	; (8000ec4 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e26:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000e28:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e2a:	d12b      	bne.n	8000e84 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000e2c:	f7ff faec 	bl	8000408 <HAL_GetTick>
 8000e30:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e32:	6823      	ldr	r3, [r4, #0]
 8000e34:	0199      	lsls	r1, r3, #6
 8000e36:	d41f      	bmi.n	8000e78 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e38:	6a2b      	ldr	r3, [r5, #32]
 8000e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e3e:	d105      	bne.n	8000e4c <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e40:	6862      	ldr	r2, [r4, #4]
 8000e42:	68a9      	ldr	r1, [r5, #8]
 8000e44:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e4c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000e4e:	6862      	ldr	r2, [r4, #4]
 8000e50:	430b      	orrs	r3, r1
 8000e52:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000e56:	4313      	orrs	r3, r2
 8000e58:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000e5e:	f7ff fad3 	bl	8000408 <HAL_GetTick>
 8000e62:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e64:	6823      	ldr	r3, [r4, #0]
 8000e66:	019a      	lsls	r2, r3, #6
 8000e68:	f53f aea8 	bmi.w	8000bbc <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e6c:	f7ff facc 	bl	8000408 <HAL_GetTick>
 8000e70:	1b40      	subs	r0, r0, r5
 8000e72:	2802      	cmp	r0, #2
 8000e74:	d9f6      	bls.n	8000e64 <HAL_RCC_OscConfig+0x2d8>
 8000e76:	e6cb      	b.n	8000c10 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e78:	f7ff fac6 	bl	8000408 <HAL_GetTick>
 8000e7c:	1bc0      	subs	r0, r0, r7
 8000e7e:	2802      	cmp	r0, #2
 8000e80:	d9d7      	bls.n	8000e32 <HAL_RCC_OscConfig+0x2a6>
 8000e82:	e6c5      	b.n	8000c10 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000e84:	f7ff fac0 	bl	8000408 <HAL_GetTick>
 8000e88:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e8a:	6823      	ldr	r3, [r4, #0]
 8000e8c:	019b      	lsls	r3, r3, #6
 8000e8e:	f57f ae95 	bpl.w	8000bbc <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e92:	f7ff fab9 	bl	8000408 <HAL_GetTick>
 8000e96:	1b40      	subs	r0, r0, r5
 8000e98:	2802      	cmp	r0, #2
 8000e9a:	d9f6      	bls.n	8000e8a <HAL_RCC_OscConfig+0x2fe>
 8000e9c:	e6b8      	b.n	8000c10 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e9e:	2801      	cmp	r0, #1
 8000ea0:	f43f aeb7 	beq.w	8000c12 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8000ea4:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ea6:	6a2b      	ldr	r3, [r5, #32]
 8000ea8:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8000eac:	429a      	cmp	r2, r3
 8000eae:	f47f ae71 	bne.w	8000b94 <HAL_RCC_OscConfig+0x8>
 8000eb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000eb4:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000eb8:	1ac0      	subs	r0, r0, r3
 8000eba:	bf18      	it	ne
 8000ebc:	2001      	movne	r0, #1
 8000ebe:	e6a8      	b.n	8000c12 <HAL_RCC_OscConfig+0x86>
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	42420060 	.word	0x42420060

08000ec8 <HAL_RCC_GetSysClockFreq>:
{
 8000ec8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000eca:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000ecc:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000ece:	ac02      	add	r4, sp, #8
 8000ed0:	f103 0510 	add.w	r5, r3, #16
 8000ed4:	4622      	mov	r2, r4
 8000ed6:	6818      	ldr	r0, [r3, #0]
 8000ed8:	6859      	ldr	r1, [r3, #4]
 8000eda:	3308      	adds	r3, #8
 8000edc:	c203      	stmia	r2!, {r0, r1}
 8000ede:	42ab      	cmp	r3, r5
 8000ee0:	4614      	mov	r4, r2
 8000ee2:	d1f7      	bne.n	8000ed4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	f88d 3004 	strb.w	r3, [sp, #4]
 8000eea:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000eec:	4911      	ldr	r1, [pc, #68]	; (8000f34 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000eee:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000ef2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000ef4:	f003 020c 	and.w	r2, r3, #12
 8000ef8:	2a08      	cmp	r2, #8
 8000efa:	d117      	bne.n	8000f2c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000efc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000f00:	a806      	add	r0, sp, #24
 8000f02:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f04:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f06:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f0a:	d50c      	bpl.n	8000f26 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f0c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f0e:	480a      	ldr	r0, [pc, #40]	; (8000f38 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f10:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f14:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f16:	aa06      	add	r2, sp, #24
 8000f18:	4413      	add	r3, r2
 8000f1a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f1e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000f22:	b007      	add	sp, #28
 8000f24:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000f26:	4805      	ldr	r0, [pc, #20]	; (8000f3c <HAL_RCC_GetSysClockFreq+0x74>)
 8000f28:	4350      	muls	r0, r2
 8000f2a:	e7fa      	b.n	8000f22 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000f2e:	e7f8      	b.n	8000f22 <HAL_RCC_GetSysClockFreq+0x5a>
 8000f30:	08002a64 	.word	0x08002a64
 8000f34:	40021000 	.word	0x40021000
 8000f38:	007a1200 	.word	0x007a1200
 8000f3c:	003d0900 	.word	0x003d0900

08000f40 <HAL_RCC_ClockConfig>:
{
 8000f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f44:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000f46:	4604      	mov	r4, r0
 8000f48:	b910      	cbnz	r0, 8000f50 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f50:	4a45      	ldr	r2, [pc, #276]	; (8001068 <HAL_RCC_ClockConfig+0x128>)
 8000f52:	6813      	ldr	r3, [r2, #0]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	d329      	bcc.n	8000fb0 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f5c:	6821      	ldr	r1, [r4, #0]
 8000f5e:	078e      	lsls	r6, r1, #30
 8000f60:	d431      	bmi.n	8000fc6 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f62:	07ca      	lsls	r2, r1, #31
 8000f64:	d444      	bmi.n	8000ff0 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000f66:	4a40      	ldr	r2, [pc, #256]	; (8001068 <HAL_RCC_ClockConfig+0x128>)
 8000f68:	6813      	ldr	r3, [r2, #0]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	429d      	cmp	r5, r3
 8000f70:	d367      	bcc.n	8001042 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f72:	6822      	ldr	r2, [r4, #0]
 8000f74:	4d3d      	ldr	r5, [pc, #244]	; (800106c <HAL_RCC_ClockConfig+0x12c>)
 8000f76:	f012 0f04 	tst.w	r2, #4
 8000f7a:	d16e      	bne.n	800105a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f7c:	0713      	lsls	r3, r2, #28
 8000f7e:	d506      	bpl.n	8000f8e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000f80:	686b      	ldr	r3, [r5, #4]
 8000f82:	6922      	ldr	r2, [r4, #16]
 8000f84:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000f88:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000f8c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000f8e:	f7ff ff9b 	bl	8000ec8 <HAL_RCC_GetSysClockFreq>
 8000f92:	686b      	ldr	r3, [r5, #4]
 8000f94:	4a36      	ldr	r2, [pc, #216]	; (8001070 <HAL_RCC_ClockConfig+0x130>)
 8000f96:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000f9a:	5cd3      	ldrb	r3, [r2, r3]
 8000f9c:	40d8      	lsrs	r0, r3
 8000f9e:	4b35      	ldr	r3, [pc, #212]	; (8001074 <HAL_RCC_ClockConfig+0x134>)
 8000fa0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000fa2:	4b35      	ldr	r3, [pc, #212]	; (8001078 <HAL_RCC_ClockConfig+0x138>)
 8000fa4:	6818      	ldr	r0, [r3, #0]
 8000fa6:	f7ff f9ed 	bl	8000384 <HAL_InitTick>
  return HAL_OK;
 8000faa:	2000      	movs	r0, #0
 8000fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fb0:	6813      	ldr	r3, [r2, #0]
 8000fb2:	f023 0307 	bic.w	r3, r3, #7
 8000fb6:	430b      	orrs	r3, r1
 8000fb8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fba:	6813      	ldr	r3, [r2, #0]
 8000fbc:	f003 0307 	and.w	r3, r3, #7
 8000fc0:	4299      	cmp	r1, r3
 8000fc2:	d1c2      	bne.n	8000f4a <HAL_RCC_ClockConfig+0xa>
 8000fc4:	e7ca      	b.n	8000f5c <HAL_RCC_ClockConfig+0x1c>
 8000fc6:	4b29      	ldr	r3, [pc, #164]	; (800106c <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fc8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fcc:	bf1e      	ittt	ne
 8000fce:	685a      	ldrne	r2, [r3, #4]
 8000fd0:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000fd4:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fd6:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fd8:	bf42      	ittt	mi
 8000fda:	685a      	ldrmi	r2, [r3, #4]
 8000fdc:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000fe0:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	68a0      	ldr	r0, [r4, #8]
 8000fe6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000fea:	4302      	orrs	r2, r0
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	e7b8      	b.n	8000f62 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ff0:	6862      	ldr	r2, [r4, #4]
 8000ff2:	4e1e      	ldr	r6, [pc, #120]	; (800106c <HAL_RCC_ClockConfig+0x12c>)
 8000ff4:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff6:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ff8:	d11b      	bne.n	8001032 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ffe:	d0a4      	beq.n	8000f4a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001000:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001002:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001006:	f023 0303 	bic.w	r3, r3, #3
 800100a:	4313      	orrs	r3, r2
 800100c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800100e:	f7ff f9fb 	bl	8000408 <HAL_GetTick>
 8001012:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001014:	6873      	ldr	r3, [r6, #4]
 8001016:	6862      	ldr	r2, [r4, #4]
 8001018:	f003 030c 	and.w	r3, r3, #12
 800101c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001020:	d0a1      	beq.n	8000f66 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001022:	f7ff f9f1 	bl	8000408 <HAL_GetTick>
 8001026:	1bc0      	subs	r0, r0, r7
 8001028:	4540      	cmp	r0, r8
 800102a:	d9f3      	bls.n	8001014 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 800102c:	2003      	movs	r0, #3
}
 800102e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001032:	2a02      	cmp	r2, #2
 8001034:	d102      	bne.n	800103c <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001036:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800103a:	e7e0      	b.n	8000ffe <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800103c:	f013 0f02 	tst.w	r3, #2
 8001040:	e7dd      	b.n	8000ffe <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001042:	6813      	ldr	r3, [r2, #0]
 8001044:	f023 0307 	bic.w	r3, r3, #7
 8001048:	432b      	orrs	r3, r5
 800104a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800104c:	6813      	ldr	r3, [r2, #0]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	429d      	cmp	r5, r3
 8001054:	f47f af79 	bne.w	8000f4a <HAL_RCC_ClockConfig+0xa>
 8001058:	e78b      	b.n	8000f72 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800105a:	686b      	ldr	r3, [r5, #4]
 800105c:	68e1      	ldr	r1, [r4, #12]
 800105e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001062:	430b      	orrs	r3, r1
 8001064:	606b      	str	r3, [r5, #4]
 8001066:	e789      	b.n	8000f7c <HAL_RCC_ClockConfig+0x3c>
 8001068:	40022000 	.word	0x40022000
 800106c:	40021000 	.word	0x40021000
 8001070:	08002aaf 	.word	0x08002aaf
 8001074:	20000020 	.word	0x20000020
 8001078:	2000001c 	.word	0x2000001c

0800107c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <HAL_RCC_GetPCLK1Freq+0x14>)
 800107e:	4a05      	ldr	r2, [pc, #20]	; (8001094 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001086:	5cd3      	ldrb	r3, [r2, r3]
 8001088:	4a03      	ldr	r2, [pc, #12]	; (8001098 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800108a:	6810      	ldr	r0, [r2, #0]
}
 800108c:	40d8      	lsrs	r0, r3
 800108e:	4770      	bx	lr
 8001090:	40021000 	.word	0x40021000
 8001094:	08002abf 	.word	0x08002abf
 8001098:	20000020 	.word	0x20000020

0800109c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <HAL_RCC_GetPCLK2Freq+0x14>)
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80010a6:	5cd3      	ldrb	r3, [r2, r3]
 80010a8:	4a03      	ldr	r2, [pc, #12]	; (80010b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80010aa:	6810      	ldr	r0, [r2, #0]
}
 80010ac:	40d8      	lsrs	r0, r3
 80010ae:	4770      	bx	lr
 80010b0:	40021000 	.word	0x40021000
 80010b4:	08002abf 	.word	0x08002abf
 80010b8:	20000020 	.word	0x20000020

080010bc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80010bc:	6803      	ldr	r3, [r0, #0]
{
 80010be:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80010c2:	07d9      	lsls	r1, r3, #31
{
 80010c4:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80010c6:	d520      	bpl.n	800110a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010c8:	4c35      	ldr	r4, [pc, #212]	; (80011a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80010ca:	69e3      	ldr	r3, [r4, #28]
 80010cc:	00da      	lsls	r2, r3, #3
 80010ce:	d432      	bmi.n	8001136 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80010d0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80010d2:	69e3      	ldr	r3, [r4, #28]
 80010d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d8:	61e3      	str	r3, [r4, #28]
 80010da:	69e3      	ldr	r3, [r4, #28]
 80010dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010e4:	4e2f      	ldr	r6, [pc, #188]	; (80011a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80010e6:	6833      	ldr	r3, [r6, #0]
 80010e8:	05db      	lsls	r3, r3, #23
 80010ea:	d526      	bpl.n	800113a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80010ec:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80010ee:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80010f2:	d136      	bne.n	8001162 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80010f4:	6a23      	ldr	r3, [r4, #32]
 80010f6:	686a      	ldr	r2, [r5, #4]
 80010f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010fc:	4313      	orrs	r3, r2
 80010fe:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001100:	b11f      	cbz	r7, 800110a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001102:	69e3      	ldr	r3, [r4, #28]
 8001104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001108:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800110a:	6828      	ldr	r0, [r5, #0]
 800110c:	0783      	lsls	r3, r0, #30
 800110e:	d506      	bpl.n	800111e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001110:	4a23      	ldr	r2, [pc, #140]	; (80011a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001112:	68a9      	ldr	r1, [r5, #8]
 8001114:	6853      	ldr	r3, [r2, #4]
 8001116:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800111a:	430b      	orrs	r3, r1
 800111c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800111e:	f010 0010 	ands.w	r0, r0, #16
 8001122:	d01b      	beq.n	800115c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001124:	4a1e      	ldr	r2, [pc, #120]	; (80011a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001126:	68e9      	ldr	r1, [r5, #12]
 8001128:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800112a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800112c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001130:	430b      	orrs	r3, r1
 8001132:	6053      	str	r3, [r2, #4]
 8001134:	e012      	b.n	800115c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001136:	2700      	movs	r7, #0
 8001138:	e7d4      	b.n	80010e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800113a:	6833      	ldr	r3, [r6, #0]
 800113c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001140:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001142:	f7ff f961 	bl	8000408 <HAL_GetTick>
 8001146:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001148:	6833      	ldr	r3, [r6, #0]
 800114a:	05d8      	lsls	r0, r3, #23
 800114c:	d4ce      	bmi.n	80010ec <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800114e:	f7ff f95b 	bl	8000408 <HAL_GetTick>
 8001152:	eba0 0008 	sub.w	r0, r0, r8
 8001156:	2864      	cmp	r0, #100	; 0x64
 8001158:	d9f6      	bls.n	8001148 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800115a:	2003      	movs	r0, #3
}
 800115c:	b002      	add	sp, #8
 800115e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001162:	686a      	ldr	r2, [r5, #4]
 8001164:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001168:	4293      	cmp	r3, r2
 800116a:	d0c3      	beq.n	80010f4 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 800116c:	2001      	movs	r0, #1
 800116e:	4a0e      	ldr	r2, [pc, #56]	; (80011a8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001170:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001172:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001174:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001176:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800117a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 800117c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800117e:	07d9      	lsls	r1, r3, #31
 8001180:	d5b8      	bpl.n	80010f4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001182:	f7ff f941 	bl	8000408 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001186:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800118a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800118c:	6a23      	ldr	r3, [r4, #32]
 800118e:	079a      	lsls	r2, r3, #30
 8001190:	d4b0      	bmi.n	80010f4 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001192:	f7ff f939 	bl	8000408 <HAL_GetTick>
 8001196:	1b80      	subs	r0, r0, r6
 8001198:	4540      	cmp	r0, r8
 800119a:	d9f7      	bls.n	800118c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 800119c:	e7dd      	b.n	800115a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800119e:	bf00      	nop
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40007000 	.word	0x40007000
 80011a8:	42420440 	.word	0x42420440

080011ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80011ac:	b570      	push	{r4, r5, r6, lr}
 80011ae:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011b0:	4b35      	ldr	r3, [pc, #212]	; (8001288 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 80011b2:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011b4:	ad02      	add	r5, sp, #8
 80011b6:	f103 0610 	add.w	r6, r3, #16
 80011ba:	462a      	mov	r2, r5
 80011bc:	6818      	ldr	r0, [r3, #0]
 80011be:	6859      	ldr	r1, [r3, #4]
 80011c0:	3308      	adds	r3, #8
 80011c2:	c203      	stmia	r2!, {r0, r1}
 80011c4:	42b3      	cmp	r3, r6
 80011c6:	4615      	mov	r5, r2
 80011c8:	d1f7      	bne.n	80011ba <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011ca:	2301      	movs	r3, #1
 80011cc:	f88d 3004 	strb.w	r3, [sp, #4]
 80011d0:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80011d2:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011d4:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 80011d8:	d047      	beq.n	800126a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 80011da:	2c10      	cmp	r4, #16
 80011dc:	d017      	beq.n	800120e <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80011de:	2c01      	cmp	r4, #1
 80011e0:	d14f      	bne.n	8001282 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80011e2:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 80011e6:	4a29      	ldr	r2, [pc, #164]	; (800128c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 80011e8:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80011ea:	4019      	ands	r1, r3
 80011ec:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 80011f0:	d044      	beq.n	800127c <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80011f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80011f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011fa:	d12d      	bne.n	8001258 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 80011fc:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001200:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8001202:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 8001206:	bf08      	it	eq
 8001208:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 800120a:	b006      	add	sp, #24
 800120c:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 800120e:	4b1f      	ldr	r3, [pc, #124]	; (800128c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8001210:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001212:	6818      	ldr	r0, [r3, #0]
 8001214:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8001218:	d0f7      	beq.n	800120a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800121a:	f3c1 4283 	ubfx	r2, r1, #18, #4
 800121e:	a806      	add	r0, sp, #24
 8001220:	4402      	add	r2, r0
 8001222:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001226:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001228:	bf41      	itttt	mi
 800122a:	685a      	ldrmi	r2, [r3, #4]
 800122c:	a906      	addmi	r1, sp, #24
 800122e:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8001232:	1852      	addmi	r2, r2, r1
 8001234:	bf44      	itt	mi
 8001236:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800123a:	4a15      	ldrmi	r2, [pc, #84]	; (8001290 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800123c:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800123e:	bf4c      	ite	mi
 8001240:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001244:	4a13      	ldrpl	r2, [pc, #76]	; (8001294 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001246:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001248:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800124c:	d4dd      	bmi.n	800120a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 800124e:	2303      	movs	r3, #3
 8001250:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001252:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001256:	e7d8      	b.n	800120a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001258:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800125c:	d111      	bne.n	8001282 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800125e:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8001260:	f24f 4024 	movw	r0, #62500	; 0xf424
 8001264:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001268:	e7cd      	b.n	8001206 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800126a:	f7ff ff17 	bl	800109c <HAL_RCC_GetPCLK2Freq>
 800126e:	4b07      	ldr	r3, [pc, #28]	; (800128c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8001276:	3301      	adds	r3, #1
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	e7ea      	b.n	8001252 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 800127c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001280:	e7c3      	b.n	800120a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
  uint32_t temp_reg = 0U, frequency = 0U;
 8001282:	2000      	movs	r0, #0
 8001284:	e7c1      	b.n	800120a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8001286:	bf00      	nop
 8001288:	08002a74 	.word	0x08002a74
 800128c:	40021000 	.word	0x40021000
 8001290:	007a1200 	.word	0x007a1200
 8001294:	003d0900 	.word	0x003d0900

08001298 <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001298:	6803      	ldr	r3, [r0, #0]
{
 800129a:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800129c:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800129e:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80012a0:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 80012a2:	b295      	uxth	r5, r2
 80012a4:	b28c      	uxth	r4, r1
 80012a6:	42a5      	cmp	r5, r4
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80012a8:	bf1d      	ittte	ne
 80012aa:	69d8      	ldrne	r0, [r3, #28]
 80012ac:	b280      	uxthne	r0, r0
 80012ae:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80012b2:	b280      	uxtheq	r0, r0
 80012b4:	bf08      	it	eq
 80012b6:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 80012ba:	bd30      	pop	{r4, r5, pc}

080012bc <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80012bc:	6803      	ldr	r3, [r0, #0]
 80012be:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 80012c2:	b29b      	uxth	r3, r3
}
 80012c4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80012c8:	4770      	bx	lr

080012ca <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 80012ca:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80012cc:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 80012ce:	f000 000f 	and.w	r0, r0, #15
 80012d2:	fb02 0003 	mla	r0, r2, r3, r0
}
 80012d6:	b2c0      	uxtb	r0, r0
 80012d8:	4770      	bx	lr

080012da <RTC_WeekDayNum>:
{
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;

  if (nMonth < 3U)
 80012da:	2902      	cmp	r1, #2
{
 80012dc:	b570      	push	{r4, r5, r6, lr}
 80012de:	f04f 0317 	mov.w	r3, #23
  year = 2000U + nYear;
 80012e2:	f500 65fa 	add.w	r5, r0, #2000	; 0x7d0
 80012e6:	f04f 0609 	mov.w	r6, #9
  if (nMonth < 3U)
 80012ea:	d81a      	bhi.n	8001322 <RTC_WeekDayNum+0x48>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80012ec:	434b      	muls	r3, r1
 80012ee:	f200 74cf 	addw	r4, r0, #1999	; 0x7cf
 80012f2:	fbb3 f0f6 	udiv	r0, r3, r6
 80012f6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80012fa:	fbb4 f3f3 	udiv	r3, r4, r3
 80012fe:	3204      	adds	r2, #4
 8001300:	442a      	add	r2, r5
 8001302:	4410      	add	r0, r2
 8001304:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 8001308:	4418      	add	r0, r3
 800130a:	2364      	movs	r3, #100	; 0x64
 800130c:	fbb4 f4f3 	udiv	r4, r4, r3
 8001310:	1b00      	subs	r0, r0, r4
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8001312:	2307      	movs	r3, #7
 8001314:	fbb0 f3f3 	udiv	r3, r0, r3
 8001318:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800131c:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 800131e:	b2c0      	uxtb	r0, r0
 8001320:	bd70      	pop	{r4, r5, r6, pc}
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8001322:	fb03 f001 	mul.w	r0, r3, r1
 8001326:	fbb0 f0f6 	udiv	r0, r0, r6
 800132a:	3202      	adds	r2, #2
 800132c:	442a      	add	r2, r5
 800132e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001332:	4410      	add	r0, r2
 8001334:	2264      	movs	r2, #100	; 0x64
 8001336:	fbb5 f3f3 	udiv	r3, r5, r3
 800133a:	fbb5 f2f2 	udiv	r2, r5, r2
 800133e:	eb00 0095 	add.w	r0, r0, r5, lsr #2
 8001342:	4418      	add	r0, r3
 8001344:	1a80      	subs	r0, r0, r2
 8001346:	e7e4      	b.n	8001312 <RTC_WeekDayNum+0x38>

08001348 <RTC_EnterInitMode>:
{
 8001348:	b538      	push	{r3, r4, r5, lr}
 800134a:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 800134c:	f7ff f85c 	bl	8000408 <HAL_GetTick>
 8001350:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001352:	6823      	ldr	r3, [r4, #0]
 8001354:	685a      	ldr	r2, [r3, #4]
 8001356:	0692      	lsls	r2, r2, #26
 8001358:	d505      	bpl.n	8001366 <RTC_EnterInitMode+0x1e>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800135a:	685a      	ldr	r2, [r3, #4]
  return HAL_OK;
 800135c:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800135e:	f042 0210 	orr.w	r2, r2, #16
 8001362:	605a      	str	r2, [r3, #4]
  return HAL_OK;
 8001364:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001366:	f7ff f84f 	bl	8000408 <HAL_GetTick>
 800136a:	1b40      	subs	r0, r0, r5
 800136c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001370:	d9ef      	bls.n	8001352 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8001372:	2003      	movs	r0, #3
}
 8001374:	bd38      	pop	{r3, r4, r5, pc}

08001376 <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001376:	6802      	ldr	r2, [r0, #0]
{
 8001378:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800137a:	6853      	ldr	r3, [r2, #4]
{
 800137c:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800137e:	f023 0310 	bic.w	r3, r3, #16
 8001382:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8001384:	f7ff f840 	bl	8000408 <HAL_GetTick>
 8001388:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800138a:	6823      	ldr	r3, [r4, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	069b      	lsls	r3, r3, #26
 8001390:	d501      	bpl.n	8001396 <RTC_ExitInitMode+0x20>
  return HAL_OK;
 8001392:	2000      	movs	r0, #0
 8001394:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001396:	f7ff f837 	bl	8000408 <HAL_GetTick>
 800139a:	1b40      	subs	r0, r0, r5
 800139c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80013a0:	d9f3      	bls.n	800138a <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 80013a2:	2003      	movs	r0, #3
}
 80013a4:	bd38      	pop	{r3, r4, r5, pc}

080013a6 <RTC_WriteTimeCounter>:
{
 80013a6:	b538      	push	{r3, r4, r5, lr}
 80013a8:	4605      	mov	r5, r0
 80013aa:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80013ac:	f7ff ffcc 	bl	8001348 <RTC_EnterInitMode>
 80013b0:	b958      	cbnz	r0, 80013ca <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80013b2:	682b      	ldr	r3, [r5, #0]
 80013b4:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80013b6:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80013b8:	619a      	str	r2, [r3, #24]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80013ba:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80013bc:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80013be:	f7ff ffda 	bl	8001376 <RTC_ExitInitMode>
    status = HAL_ERROR;
 80013c2:	3000      	adds	r0, #0
 80013c4:	bf18      	it	ne
 80013c6:	2001      	movne	r0, #1
 80013c8:	bd38      	pop	{r3, r4, r5, pc}
 80013ca:	2001      	movs	r0, #1
}
 80013cc:	bd38      	pop	{r3, r4, r5, pc}

080013ce <RTC_WriteAlarmCounter>:
{
 80013ce:	b538      	push	{r3, r4, r5, lr}
 80013d0:	4605      	mov	r5, r0
 80013d2:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80013d4:	f7ff ffb8 	bl	8001348 <RTC_EnterInitMode>
 80013d8:	b958      	cbnz	r0, 80013f2 <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80013da:	682b      	ldr	r3, [r5, #0]
 80013dc:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80013de:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80013e0:	621a      	str	r2, [r3, #32]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80013e2:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80013e4:	625c      	str	r4, [r3, #36]	; 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80013e6:	f7ff ffc6 	bl	8001376 <RTC_ExitInitMode>
    status = HAL_ERROR;
 80013ea:	3000      	adds	r0, #0
 80013ec:	bf18      	it	ne
 80013ee:	2001      	movne	r0, #1
 80013f0:	bd38      	pop	{r3, r4, r5, pc}
 80013f2:	2001      	movs	r0, #1
}
 80013f4:	bd38      	pop	{r3, r4, r5, pc}

080013f6 <HAL_RTC_SetTime>:
{
 80013f6:	b570      	push	{r4, r5, r6, lr}
  if ((hrtc == NULL) || (sTime == NULL))
 80013f8:	4604      	mov	r4, r0
 80013fa:	b1e0      	cbz	r0, 8001436 <HAL_RTC_SetTime+0x40>
 80013fc:	b1d9      	cbz	r1, 8001436 <HAL_RTC_SetTime+0x40>
  __HAL_LOCK(hrtc);
 80013fe:	7c03      	ldrb	r3, [r0, #16]
 8001400:	2602      	movs	r6, #2
 8001402:	2b01      	cmp	r3, #1
 8001404:	d046      	beq.n	8001494 <HAL_RTC_SetTime+0x9e>
 8001406:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001408:	7446      	strb	r6, [r0, #17]
  __HAL_LOCK(hrtc);
 800140a:	7403      	strb	r3, [r0, #16]
 800140c:	7808      	ldrb	r0, [r1, #0]
 800140e:	784e      	ldrb	r6, [r1, #1]
 8001410:	7889      	ldrb	r1, [r1, #2]
  if (Format == RTC_FORMAT_BIN)
 8001412:	b992      	cbnz	r2, 800143a <HAL_RTC_SetTime+0x44>
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001414:	253c      	movs	r5, #60	; 0x3c
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001416:	f44f 6361 	mov.w	r3, #3600	; 0xe10
                              ((uint32_t)sTime->Minutes * 60U) + \
 800141a:	4375      	muls	r5, r6
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800141c:	fb03 5000 	mla	r0, r3, r0, r5
 8001420:	1845      	adds	r5, r0, r1
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001422:	4629      	mov	r1, r5
 8001424:	4620      	mov	r0, r4
 8001426:	f7ff ffbe 	bl	80013a6 <RTC_WriteTimeCounter>
 800142a:	4606      	mov	r6, r0
 800142c:	b1b0      	cbz	r0, 800145c <HAL_RTC_SetTime+0x66>
    hrtc->State = HAL_RTC_STATE_ERROR;
 800142e:	2304      	movs	r3, #4
 8001430:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8001432:	2300      	movs	r3, #0
 8001434:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 8001436:	2601      	movs	r6, #1
 8001438:	e02c      	b.n	8001494 <HAL_RTC_SetTime+0x9e>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800143a:	f7ff ff46 	bl	80012ca <RTC_Bcd2ToByte>
 800143e:	4605      	mov	r5, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001440:	4630      	mov	r0, r6
 8001442:	f7ff ff42 	bl	80012ca <RTC_Bcd2ToByte>
 8001446:	233c      	movs	r3, #60	; 0x3c
 8001448:	4358      	muls	r0, r3
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800144a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800144e:	fb03 0505 	mla	r5, r3, r5, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001452:	4608      	mov	r0, r1
 8001454:	f7ff ff39 	bl	80012ca <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001458:	4405      	add	r5, r0
 800145a:	e7e2      	b.n	8001422 <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800145c:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800145e:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001460:	6853      	ldr	r3, [r2, #4]
 8001462:	f023 0305 	bic.w	r3, r3, #5
 8001466:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001468:	f7ff ff28 	bl	80012bc <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800146c:	1c43      	adds	r3, r0, #1
 800146e:	d00d      	beq.n	800148c <HAL_RTC_SetTime+0x96>
      if (counter_alarm < counter_time)
 8001470:	4285      	cmp	r5, r0
 8001472:	d90b      	bls.n	800148c <HAL_RTC_SetTime+0x96>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001474:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8001478:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 800147c:	4620      	mov	r0, r4
 800147e:	f7ff ffa6 	bl	80013ce <RTC_WriteAlarmCounter>
 8001482:	b118      	cbz	r0, 800148c <HAL_RTC_SetTime+0x96>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001484:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8001486:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001488:	7463      	strb	r3, [r4, #17]
 800148a:	e7d4      	b.n	8001436 <HAL_RTC_SetTime+0x40>
    hrtc->State = HAL_RTC_STATE_READY;
 800148c:	2301      	movs	r3, #1
 800148e:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8001490:	2300      	movs	r3, #0
 8001492:	7423      	strb	r3, [r4, #16]
}
 8001494:	4630      	mov	r0, r6
 8001496:	bd70      	pop	{r4, r5, r6, pc}

08001498 <HAL_RTC_SetDate>:
{
 8001498:	b570      	push	{r4, r5, r6, lr}
 800149a:	460d      	mov	r5, r1
  if ((hrtc == NULL) || (sDate == NULL))
 800149c:	4604      	mov	r4, r0
 800149e:	b358      	cbz	r0, 80014f8 <HAL_RTC_SetDate+0x60>
 80014a0:	b351      	cbz	r1, 80014f8 <HAL_RTC_SetDate+0x60>
  __HAL_LOCK(hrtc);
 80014a2:	7c03      	ldrb	r3, [r0, #16]
 80014a4:	2002      	movs	r0, #2
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d027      	beq.n	80014fa <HAL_RTC_SetDate+0x62>
 80014aa:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80014ac:	7460      	strb	r0, [r4, #17]
  __HAL_LOCK(hrtc);
 80014ae:	7423      	strb	r3, [r4, #16]
 80014b0:	78c8      	ldrb	r0, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 80014b2:	bb1a      	cbnz	r2, 80014fc <HAL_RTC_SetDate+0x64>
    hrtc->DateToUpdate.Year  = sDate->Year;
 80014b4:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80014b6:	784b      	ldrb	r3, [r1, #1]
 80014b8:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80014ba:	788b      	ldrb	r3, [r1, #2]
 80014bc:	73a3      	strb	r3, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80014be:	7ba2      	ldrb	r2, [r4, #14]
 80014c0:	7b61      	ldrb	r1, [r4, #13]
 80014c2:	7be0      	ldrb	r0, [r4, #15]
 80014c4:	f7ff ff09 	bl	80012da <RTC_WeekDayNum>
 80014c8:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80014ca:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 80014cc:	4620      	mov	r0, r4
 80014ce:	f7ff fee3 	bl	8001298 <RTC_ReadTimeCounter>
  if (hours > 24U)
 80014d2:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <HAL_RTC_SetDate+0xac>)
 80014d4:	4298      	cmp	r0, r3
 80014d6:	d930      	bls.n	800153a <HAL_RTC_SetDate+0xa2>
 80014d8:	f6a3 630f 	subw	r3, r3, #3599	; 0xe0f
 80014dc:	fbb0 f5f3 	udiv	r5, r0, r3
 80014e0:	fb03 0515 	mls	r5, r3, r5, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80014e4:	4620      	mov	r0, r4
 80014e6:	4629      	mov	r1, r5
 80014e8:	f7ff ff5d 	bl	80013a6 <RTC_WriteTimeCounter>
 80014ec:	4606      	mov	r6, r0
 80014ee:	b188      	cbz	r0, 8001514 <HAL_RTC_SetDate+0x7c>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80014f0:	2304      	movs	r3, #4
 80014f2:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 80014f4:	2300      	movs	r3, #0
 80014f6:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 80014f8:	2001      	movs	r0, #1
}
 80014fa:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80014fc:	f7ff fee5 	bl	80012ca <RTC_Bcd2ToByte>
 8001500:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001502:	7848      	ldrb	r0, [r1, #1]
 8001504:	f7ff fee1 	bl	80012ca <RTC_Bcd2ToByte>
 8001508:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800150a:	7888      	ldrb	r0, [r1, #2]
 800150c:	f7ff fedd 	bl	80012ca <RTC_Bcd2ToByte>
 8001510:	73a0      	strb	r0, [r4, #14]
 8001512:	e7d4      	b.n	80014be <HAL_RTC_SetDate+0x26>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001514:	4620      	mov	r0, r4
 8001516:	f7ff fed1 	bl	80012bc <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800151a:	1c43      	adds	r3, r0, #1
 800151c:	d00d      	beq.n	800153a <HAL_RTC_SetDate+0xa2>
      if (counter_alarm < counter_time)
 800151e:	4285      	cmp	r5, r0
 8001520:	d90b      	bls.n	800153a <HAL_RTC_SetDate+0xa2>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001522:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8001526:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 800152a:	4620      	mov	r0, r4
 800152c:	f7ff ff4f 	bl	80013ce <RTC_WriteAlarmCounter>
 8001530:	b118      	cbz	r0, 800153a <HAL_RTC_SetDate+0xa2>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001532:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8001534:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001536:	7463      	strb	r3, [r4, #17]
 8001538:	e7de      	b.n	80014f8 <HAL_RTC_SetDate+0x60>
  hrtc->State = HAL_RTC_STATE_READY ;
 800153a:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 800153c:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 800153e:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8001540:	7420      	strb	r0, [r4, #16]
  return HAL_OK;
 8001542:	bd70      	pop	{r4, r5, r6, pc}
 8001544:	00015f8f 	.word	0x00015f8f

08001548 <HAL_RTC_WaitForSynchro>:
{
 8001548:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 800154a:	4604      	mov	r4, r0
 800154c:	b1a8      	cbz	r0, 800157a <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800154e:	6802      	ldr	r2, [r0, #0]
 8001550:	6853      	ldr	r3, [r2, #4]
 8001552:	f023 0308 	bic.w	r3, r3, #8
 8001556:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8001558:	f7fe ff56 	bl	8000408 <HAL_GetTick>
 800155c:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800155e:	6823      	ldr	r3, [r4, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	071b      	lsls	r3, r3, #28
 8001564:	d501      	bpl.n	800156a <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8001566:	2000      	movs	r0, #0
 8001568:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800156a:	f7fe ff4d 	bl	8000408 <HAL_GetTick>
 800156e:	1b40      	subs	r0, r0, r5
 8001570:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001574:	d9f3      	bls.n	800155e <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8001576:	2003      	movs	r0, #3
}
 8001578:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800157a:	2001      	movs	r0, #1
 800157c:	bd38      	pop	{r3, r4, r5, pc}
	...

08001580 <HAL_RTC_Init>:
{
 8001580:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8001582:	4604      	mov	r4, r0
 8001584:	b170      	cbz	r0, 80015a4 <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001586:	7c43      	ldrb	r3, [r0, #17]
 8001588:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800158c:	b913      	cbnz	r3, 8001594 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 800158e:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8001590:	f000 fc40 	bl	8001e14 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001594:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001596:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001598:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800159a:	f7ff ffd5 	bl	8001548 <HAL_RTC_WaitForSynchro>
 800159e:	b118      	cbz	r0, 80015a8 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 80015a0:	2304      	movs	r3, #4
 80015a2:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 80015a4:	2001      	movs	r0, #1
}
 80015a6:	bd10      	pop	{r4, pc}
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80015a8:	4620      	mov	r0, r4
 80015aa:	f7ff fecd 	bl	8001348 <RTC_EnterInitMode>
 80015ae:	2800      	cmp	r0, #0
 80015b0:	d1f6      	bne.n	80015a0 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80015b2:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80015b4:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80015b6:	6853      	ldr	r3, [r2, #4]
 80015b8:	f023 0307 	bic.w	r3, r3, #7
 80015bc:	6053      	str	r3, [r2, #4]
 80015be:	4a17      	ldr	r2, [pc, #92]	; (800161c <HAL_RTC_Init+0x9c>)
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80015c0:	b118      	cbz	r0, 80015ca <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80015c2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80015c4:	f021 0101 	bic.w	r1, r1, #1
 80015c8:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80015ca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80015cc:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 80015d0:	4303      	orrs	r3, r0
 80015d2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80015d4:	6860      	ldr	r0, [r4, #4]
 80015d6:	1c43      	adds	r3, r0, #1
 80015d8:	d105      	bne.n	80015e6 <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80015da:	2001      	movs	r0, #1
 80015dc:	f7ff fde6 	bl	80011ac <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 80015e0:	2800      	cmp	r0, #0
 80015e2:	d0dd      	beq.n	80015a0 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 80015e4:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80015e6:	6822      	ldr	r2, [r4, #0]
 80015e8:	6893      	ldr	r3, [r2, #8]
 80015ea:	f023 030f 	bic.w	r3, r3, #15
 80015ee:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80015f2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80015f4:	68d3      	ldr	r3, [r2, #12]
 80015f6:	b280      	uxth	r0, r0
 80015f8:	0c1b      	lsrs	r3, r3, #16
 80015fa:	041b      	lsls	r3, r3, #16
 80015fc:	4318      	orrs	r0, r3
 80015fe:	60d0      	str	r0, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001600:	4620      	mov	r0, r4
 8001602:	f7ff feb8 	bl	8001376 <RTC_ExitInitMode>
 8001606:	2301      	movs	r3, #1
 8001608:	b110      	cbz	r0, 8001610 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 800160a:	2204      	movs	r2, #4
 800160c:	7462      	strb	r2, [r4, #17]
 800160e:	e7c9      	b.n	80015a4 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Year = 0x00U;
 8001610:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001612:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001614:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8001616:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 8001618:	bd10      	pop	{r4, pc}
 800161a:	bf00      	nop
 800161c:	40006c00 	.word	0x40006c00

08001620 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001620:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001622:	4604      	mov	r4, r0
 8001624:	2800      	cmp	r0, #0
 8001626:	d034      	beq.n	8001692 <HAL_SPI_Init+0x72>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800162c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001630:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001634:	b91b      	cbnz	r3, 800163e <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001636:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800163a:	f000 fc2b 	bl	8001e94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800163e:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001640:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001642:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001646:	6813      	ldr	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001648:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 800164a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800164e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001650:	6863      	ldr	r3, [r4, #4]
 8001652:	69a1      	ldr	r1, [r4, #24]
 8001654:	4303      	orrs	r3, r0
 8001656:	68e0      	ldr	r0, [r4, #12]
 8001658:	4303      	orrs	r3, r0
 800165a:	6920      	ldr	r0, [r4, #16]
 800165c:	4303      	orrs	r3, r0
 800165e:	6960      	ldr	r0, [r4, #20]
 8001660:	4303      	orrs	r3, r0
 8001662:	69e0      	ldr	r0, [r4, #28]
 8001664:	4303      	orrs	r3, r0
 8001666:	6a20      	ldr	r0, [r4, #32]
 8001668:	4303      	orrs	r3, r0
 800166a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800166c:	4303      	orrs	r3, r0
 800166e:	f401 7000 	and.w	r0, r1, #512	; 0x200
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001672:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001674:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001676:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800167a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800167c:	6051      	str	r1, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800167e:	69d3      	ldr	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001680:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001682:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001686:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001688:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800168a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800168c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8001690:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001692:	2001      	movs	r0, #1
}
 8001694:	bd10      	pop	{r4, pc}
	...

08001698 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001698:	b538      	push	{r3, r4, r5, lr}
 800169a:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800169c:	6803      	ldr	r3, [r0, #0]
 800169e:	68c1      	ldr	r1, [r0, #12]
 80016a0:	691a      	ldr	r2, [r3, #16]
 80016a2:	2419      	movs	r4, #25
 80016a4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80016a8:	430a      	orrs	r2, r1
 80016aa:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016ac:	6882      	ldr	r2, [r0, #8]
 80016ae:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80016b0:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016b2:	4302      	orrs	r2, r0
 80016b4:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 80016b6:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80016ba:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016be:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80016c0:	430a      	orrs	r2, r1
 80016c2:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80016c4:	695a      	ldr	r2, [r3, #20]
 80016c6:	69a9      	ldr	r1, [r5, #24]
 80016c8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80016cc:	430a      	orrs	r2, r1
 80016ce:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80016d0:	4a0d      	ldr	r2, [pc, #52]	; (8001708 <UART_SetConfig+0x70>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d114      	bne.n	8001700 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80016d6:	f7ff fce1 	bl	800109c <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80016da:	4360      	muls	r0, r4
 80016dc:	686c      	ldr	r4, [r5, #4]
 80016de:	2264      	movs	r2, #100	; 0x64
 80016e0:	00a4      	lsls	r4, r4, #2
 80016e2:	fbb0 f0f4 	udiv	r0, r0, r4
 80016e6:	fbb0 f4f2 	udiv	r4, r0, r2
 80016ea:	fb02 0314 	mls	r3, r2, r4, r0
 80016ee:	011b      	lsls	r3, r3, #4
 80016f0:	3332      	adds	r3, #50	; 0x32
 80016f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80016f6:	6829      	ldr	r1, [r5, #0]
 80016f8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80016fc:	608b      	str	r3, [r1, #8]
 80016fe:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8001700:	f7ff fcbc 	bl	800107c <HAL_RCC_GetPCLK1Freq>
 8001704:	e7e9      	b.n	80016da <UART_SetConfig+0x42>
 8001706:	bf00      	nop
 8001708:	40013800 	.word	0x40013800

0800170c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 800170c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800170e:	4604      	mov	r4, r0
 8001710:	460e      	mov	r6, r1
 8001712:	4617      	mov	r7, r2
 8001714:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001716:	6821      	ldr	r1, [r4, #0]
 8001718:	680b      	ldr	r3, [r1, #0]
 800171a:	ea36 0303 	bics.w	r3, r6, r3
 800171e:	d101      	bne.n	8001724 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001720:	2000      	movs	r0, #0
}
 8001722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001724:	1c6b      	adds	r3, r5, #1
 8001726:	d0f7      	beq.n	8001718 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001728:	b995      	cbnz	r5, 8001750 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800172a:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800172c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800172e:	68da      	ldr	r2, [r3, #12]
 8001730:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001734:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001736:	695a      	ldr	r2, [r3, #20]
 8001738:	f022 0201 	bic.w	r2, r2, #1
 800173c:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800173e:	2320      	movs	r3, #32
 8001740:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001744:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001748:	2300      	movs	r3, #0
 800174a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800174e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001750:	f7fe fe5a 	bl	8000408 <HAL_GetTick>
 8001754:	1bc0      	subs	r0, r0, r7
 8001756:	4285      	cmp	r5, r0
 8001758:	d2dd      	bcs.n	8001716 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800175a:	e7e6      	b.n	800172a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

0800175c <HAL_UART_Init>:
{
 800175c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800175e:	4604      	mov	r4, r0
 8001760:	b340      	cbz	r0, 80017b4 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001762:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001766:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800176a:	b91b      	cbnz	r3, 8001774 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800176c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001770:	f000 fc74 	bl	800205c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001774:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001776:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001778:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800177c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800177e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001780:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001784:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001786:	f7ff ff87 	bl	8001698 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800178a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800178c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800178e:	691a      	ldr	r2, [r3, #16]
 8001790:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001794:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001796:	695a      	ldr	r2, [r3, #20]
 8001798:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800179c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800179e:	68da      	ldr	r2, [r3, #12]
 80017a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017a4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80017a6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017a8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80017aa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80017ae:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80017b2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80017b4:	2001      	movs	r0, #1
}
 80017b6:	bd10      	pop	{r4, pc}

080017b8 <HAL_UART_Transmit>:
{
 80017b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017bc:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80017be:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80017c2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80017c4:	2b20      	cmp	r3, #32
{
 80017c6:	460d      	mov	r5, r1
 80017c8:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80017ca:	d14e      	bne.n	800186a <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 80017cc:	2900      	cmp	r1, #0
 80017ce:	d049      	beq.n	8001864 <HAL_UART_Transmit+0xac>
 80017d0:	2a00      	cmp	r2, #0
 80017d2:	d047      	beq.n	8001864 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80017d4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d046      	beq.n	800186a <HAL_UART_Transmit+0xb2>
 80017dc:	2301      	movs	r3, #1
 80017de:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80017e6:	2321      	movs	r3, #33	; 0x21
 80017e8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80017ec:	f7fe fe0c 	bl	8000408 <HAL_GetTick>
 80017f0:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80017f2:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80017f6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80017fa:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	b96b      	cbnz	r3, 800181c <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001800:	463b      	mov	r3, r7
 8001802:	4632      	mov	r2, r6
 8001804:	2140      	movs	r1, #64	; 0x40
 8001806:	4620      	mov	r0, r4
 8001808:	f7ff ff80 	bl	800170c <UART_WaitOnFlagUntilTimeout.constprop.3>
 800180c:	b9a8      	cbnz	r0, 800183a <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 800180e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001810:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8001814:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 800181c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800181e:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8001820:	3b01      	subs	r3, #1
 8001822:	b29b      	uxth	r3, r3
 8001824:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001826:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001828:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800182a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800182e:	4620      	mov	r0, r4
 8001830:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001832:	d10e      	bne.n	8001852 <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001834:	f7ff ff6a 	bl	800170c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001838:	b110      	cbz	r0, 8001840 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 800183a:	2003      	movs	r0, #3
 800183c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001840:	882b      	ldrh	r3, [r5, #0]
 8001842:	6822      	ldr	r2, [r4, #0]
 8001844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001848:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800184a:	6923      	ldr	r3, [r4, #16]
 800184c:	b943      	cbnz	r3, 8001860 <HAL_UART_Transmit+0xa8>
          pData += 2U;
 800184e:	3502      	adds	r5, #2
 8001850:	e7d3      	b.n	80017fa <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001852:	f7ff ff5b 	bl	800170c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001856:	2800      	cmp	r0, #0
 8001858:	d1ef      	bne.n	800183a <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800185a:	6823      	ldr	r3, [r4, #0]
 800185c:	782a      	ldrb	r2, [r5, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	3501      	adds	r5, #1
 8001862:	e7ca      	b.n	80017fa <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001864:	2001      	movs	r0, #1
 8001866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800186a:	2002      	movs	r0, #2
}
 800186c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001870 <MX_ADC1_Init>:
{
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001870:	4811      	ldr	r0, [pc, #68]	; (80018b8 <MX_ADC1_Init+0x48>)
 8001872:	4b12      	ldr	r3, [pc, #72]	; (80018bc <MX_ADC1_Init+0x4c>)
{
 8001874:	b530      	push	{r4, r5, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 8001876:	2400      	movs	r4, #0
  hadc1.Instance = ADC1;
 8001878:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 800187a:	2501      	movs	r5, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800187c:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
{
 8001880:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8001882:	9401      	str	r4, [sp, #4]
 8001884:	9402      	str	r4, [sp, #8]
 8001886:	9403      	str	r4, [sp, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001888:	6084      	str	r4, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800188a:	7304      	strb	r4, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800188c:	7504      	strb	r4, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800188e:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001890:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001892:	6105      	str	r5, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001894:	f7fe fe76 	bl	8000584 <HAL_ADC_Init>
 8001898:	b108      	cbz	r0, 800189e <MX_ADC1_Init+0x2e>
  {
    Error_Handler();
 800189a:	f000 fa81 	bl	8001da0 <Error_Handler>
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800189e:	a901      	add	r1, sp, #4
 80018a0:	4805      	ldr	r0, [pc, #20]	; (80018b8 <MX_ADC1_Init+0x48>)
  sConfig.Channel = ADC_CHANNEL_0;
 80018a2:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018a4:	9502      	str	r5, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018a6:	9403      	str	r4, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018a8:	f7fe fdc6 	bl	8000438 <HAL_ADC_ConfigChannel>
 80018ac:	b108      	cbz	r0, 80018b2 <MX_ADC1_Init+0x42>
  {
    Error_Handler();
 80018ae:	f000 fa77 	bl	8001da0 <Error_Handler>
  }

}
 80018b2:	b005      	add	sp, #20
 80018b4:	bd30      	pop	{r4, r5, pc}
 80018b6:	bf00      	nop
 80018b8:	200000f0 	.word	0x200000f0
 80018bc:	40012400 	.word	0x40012400

080018c0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80018c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config 
  */
  hadc2.Instance = ADC2;
 80018c2:	4811      	ldr	r0, [pc, #68]	; (8001908 <MX_ADC2_Init+0x48>)
 80018c4:	4a11      	ldr	r2, [pc, #68]	; (800190c <MX_ADC2_Init+0x4c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80018c6:	2300      	movs	r3, #0
  hadc2.Instance = ADC2;
 80018c8:	6002      	str	r2, [r0, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
 80018ca:	2401      	movs	r4, #1
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018cc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 80018d0:	9301      	str	r3, [sp, #4]
 80018d2:	9302      	str	r3, [sp, #8]
 80018d4:	9303      	str	r3, [sp, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018d6:	6083      	str	r3, [r0, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80018d8:	7303      	strb	r3, [r0, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80018da:	7503      	strb	r3, [r0, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018dc:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018de:	6043      	str	r3, [r0, #4]
  hadc2.Init.NbrOfConversion = 1;
 80018e0:	6104      	str	r4, [r0, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80018e2:	f7fe fe4f 	bl	8000584 <HAL_ADC_Init>
 80018e6:	b108      	cbz	r0, 80018ec <MX_ADC2_Init+0x2c>
  {
    Error_Handler();
 80018e8:	f000 fa5a 	bl	8001da0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80018ec:	2307      	movs	r3, #7
 80018ee:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018f0:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80018f2:	a901      	add	r1, sp, #4
 80018f4:	4804      	ldr	r0, [pc, #16]	; (8001908 <MX_ADC2_Init+0x48>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018f6:	9402      	str	r4, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018f8:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80018fa:	f7fe fd9d 	bl	8000438 <HAL_ADC_ConfigChannel>
 80018fe:	b108      	cbz	r0, 8001904 <MX_ADC2_Init+0x44>
  {
    Error_Handler();
 8001900:	f000 fa4e 	bl	8001da0 <Error_Handler>
  }

}
 8001904:	b004      	add	sp, #16
 8001906:	bd10      	pop	{r4, pc}
 8001908:	200000c0 	.word	0x200000c0
 800190c:	40012800 	.word	0x40012800

08001910 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001910:	b510      	push	{r4, lr}
 8001912:	4604      	mov	r4, r0
 8001914:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001916:	2210      	movs	r2, #16
 8001918:	2100      	movs	r1, #0
 800191a:	a806      	add	r0, sp, #24
 800191c:	f000 fc5a 	bl	80021d4 <memset>
  if(adcHandle->Instance==ADC1)
 8001920:	6823      	ldr	r3, [r4, #0]
 8001922:	4a26      	ldr	r2, [pc, #152]	; (80019bc <HAL_ADC_MspInit+0xac>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d12b      	bne.n	8001980 <HAL_ADC_MspInit+0x70>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001928:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <HAL_ADC_MspInit+0xb0>)
    PA0-WKUP     ------> ADC1_IN0
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800192a:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 800192c:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192e:	a906      	add	r1, sp, #24
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001934:	619a      	str	r2, [r3, #24]
 8001936:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001938:	4822      	ldr	r0, [pc, #136]	; (80019c4 <HAL_ADC_MspInit+0xb4>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800193a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800193e:	9201      	str	r2, [sp, #4]
 8001940:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001942:	699a      	ldr	r2, [r3, #24]
 8001944:	f042 0204 	orr.w	r2, r2, #4
 8001948:	619a      	str	r2, [r3, #24]
 800194a:	699a      	ldr	r2, [r3, #24]
 800194c:	f002 0204 	and.w	r2, r2, #4
 8001950:	9202      	str	r2, [sp, #8]
 8001952:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001954:	699a      	ldr	r2, [r3, #24]
 8001956:	f042 0208 	orr.w	r2, r2, #8
 800195a:	619a      	str	r2, [r3, #24]
 800195c:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800195e:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	9303      	str	r3, [sp, #12]
 8001966:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001968:	2301      	movs	r3, #1
 800196a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196c:	f7fe ff70 	bl	8000850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001970:	4815      	ldr	r0, [pc, #84]	; (80019c8 <HAL_ADC_MspInit+0xb8>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001972:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001974:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001976:	a906      	add	r1, sp, #24
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001978:	f7fe ff6a 	bl	8000850 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800197c:	b00a      	add	sp, #40	; 0x28
 800197e:	bd10      	pop	{r4, pc}
  else if(adcHandle->Instance==ADC2)
 8001980:	4a12      	ldr	r2, [pc, #72]	; (80019cc <HAL_ADC_MspInit+0xbc>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d1fa      	bne.n	800197c <HAL_ADC_MspInit+0x6c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <HAL_ADC_MspInit+0xb0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001988:	a906      	add	r1, sp, #24
    __HAL_RCC_ADC2_CLK_ENABLE();
 800198a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198c:	480d      	ldr	r0, [pc, #52]	; (80019c4 <HAL_ADC_MspInit+0xb4>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 800198e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001992:	619a      	str	r2, [r3, #24]
 8001994:	699a      	ldr	r2, [r3, #24]
 8001996:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800199a:	9204      	str	r2, [sp, #16]
 800199c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	699a      	ldr	r2, [r3, #24]
 80019a0:	f042 0204 	orr.w	r2, r2, #4
 80019a4:	619a      	str	r2, [r3, #24]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	9305      	str	r3, [sp, #20]
 80019ae:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019b0:	23c0      	movs	r3, #192	; 0xc0
 80019b2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019b4:	2303      	movs	r3, #3
 80019b6:	9307      	str	r3, [sp, #28]
 80019b8:	e7de      	b.n	8001978 <HAL_ADC_MspInit+0x68>
 80019ba:	bf00      	nop
 80019bc:	40012400 	.word	0x40012400
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40010800 	.word	0x40010800
 80019c8:	40010c00 	.word	0x40010c00
 80019cc:	40012800 	.word	0x40012800

080019d0 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80019d0:	b508      	push	{r3, lr}

  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 16;
 80019d2:	f04f 0e10 	mov.w	lr, #16
  hcan.Instance = CAN1;
 80019d6:	480b      	ldr	r0, [pc, #44]	; (8001a04 <MX_CAN_Init+0x34>)
  hcan.Init.Prescaler = 16;
 80019d8:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <MX_CAN_Init+0x38>)
 80019da:	e880 4008 	stmia.w	r0, {r3, lr}
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80019de:	2300      	movs	r3, #0
 80019e0:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80019e2:	60c3      	str	r3, [r0, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80019e4:	6103      	str	r3, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80019e6:	6143      	str	r3, [r0, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80019e8:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80019ea:	7643      	strb	r3, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80019ec:	7683      	strb	r3, [r0, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80019ee:	76c3      	strb	r3, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80019f0:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80019f2:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80019f4:	f7fe fe46 	bl	8000684 <HAL_CAN_Init>
 80019f8:	b118      	cbz	r0, 8001a02 <MX_CAN_Init+0x32>
  {
    Error_Handler();
  }

}
 80019fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80019fe:	f000 b9cf 	b.w	8001da0 <Error_Handler>
 8001a02:	bd08      	pop	{r3, pc}
 8001a04:	20000120 	.word	0x20000120
 8001a08:	40006400 	.word	0x40006400

08001a0c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001a0c:	b510      	push	{r4, lr}
 8001a0e:	4604      	mov	r4, r0
 8001a10:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a12:	2210      	movs	r2, #16
 8001a14:	2100      	movs	r1, #0
 8001a16:	a802      	add	r0, sp, #8
 8001a18:	f000 fbdc 	bl	80021d4 <memset>
  if(canHandle->Instance==CAN1)
 8001a1c:	6822      	ldr	r2, [r4, #0]
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <HAL_CAN_MspInit+0x68>)
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d125      	bne.n	8001a70 <HAL_CAN_MspInit+0x64>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a24:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8001a28:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2a:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a2c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001a30:	61da      	str	r2, [r3, #28]
 8001a32:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a34:	4810      	ldr	r0, [pc, #64]	; (8001a78 <HAL_CAN_MspInit+0x6c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a36:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001a3a:	9200      	str	r2, [sp, #0]
 8001a3c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3e:	699a      	ldr	r2, [r3, #24]
 8001a40:	f042 0204 	orr.w	r2, r2, #4
 8001a44:	619a      	str	r2, [r3, #24]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	9301      	str	r3, [sp, #4]
 8001a4e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a54:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a56:	f7fe fefb 	bl	8000850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a64:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a66:	a902      	add	r1, sp, #8
 8001a68:	4803      	ldr	r0, [pc, #12]	; (8001a78 <HAL_CAN_MspInit+0x6c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a6a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6c:	f7fe fef0 	bl	8000850 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001a70:	b006      	add	sp, #24
 8001a72:	bd10      	pop	{r4, pc}
 8001a74:	40006400 	.word	0x40006400
 8001a78:	40010800 	.word	0x40010800

08001a7c <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	2210      	movs	r2, #16
{
 8001a7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a82:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	eb0d 0002 	add.w	r0, sp, r2
 8001a88:	2100      	movs	r1, #0
 8001a8a:	f000 fba3 	bl	80021d4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8e:	4b42      	ldr	r3, [pc, #264]	; (8001b98 <MX_GPIO_Init+0x11c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001a90:	4d42      	ldr	r5, [pc, #264]	; (8001b9c <MX_GPIO_Init+0x120>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a92:	699a      	ldr	r2, [r3, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001a94:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8001ba8 <MX_GPIO_Init+0x12c>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a98:	f042 0210 	orr.w	r2, r2, #16
 8001a9c:	619a      	str	r2, [r3, #24]
 8001a9e:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001aa0:	4e3f      	ldr	r6, [pc, #252]	; (8001ba0 <MX_GPIO_Init+0x124>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa2:	f002 0210 	and.w	r2, r2, #16
 8001aa6:	9200      	str	r2, [sp, #0]
 8001aa8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aaa:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001aac:	4628      	mov	r0, r5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aae:	f042 0220 	orr.w	r2, r2, #32
 8001ab2:	619a      	str	r2, [r3, #24]
 8001ab4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001ab6:	21ff      	movs	r1, #255	; 0xff
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ab8:	f002 0220 	and.w	r2, r2, #32
 8001abc:	9201      	str	r2, [sp, #4]
 8001abe:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac0:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac4:	f042 0204 	orr.w	r2, r2, #4
 8001ac8:	619a      	str	r2, [r3, #24]
 8001aca:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001acc:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad0:	f002 0204 	and.w	r2, r2, #4
 8001ad4:	9202      	str	r2, [sp, #8]
 8001ad6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad8:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2702      	movs	r7, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001adc:	f042 0208 	orr.w	r2, r2, #8
 8001ae0:	619a      	str	r2, [r3, #24]
 8001ae2:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001ae4:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	9303      	str	r3, [sp, #12]
 8001aec:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001aee:	f7fe ff91 	bl	8000a14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001af2:	4648      	mov	r0, r9
 8001af4:	2200      	movs	r2, #0
 8001af6:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001afa:	f7fe ff8b 	bl	8000a14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001afe:	2200      	movs	r2, #0
 8001b00:	4630      	mov	r0, r6
 8001b02:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8001b06:	f7fe ff85 	bl	8000a14 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8001b0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b0e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b10:	4b24      	ldr	r3, [pc, #144]	; (8001ba4 <MX_GPIO_Init+0x128>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b12:	a904      	add	r1, sp, #16
 8001b14:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b16:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b1a:	f7fe fe99 	bl	8000850 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001b1e:	23ff      	movs	r3, #255	; 0xff
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b20:	a904      	add	r1, sp, #16
 8001b22:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001b24:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b26:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2c:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2e:	f7fe fe8f 	bl	8000850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8001b32:	f44f 7348 	mov.w	r3, #800	; 0x320
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	a904      	add	r1, sp, #16
 8001b38:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8001b3a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3c:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	f7fe fe84 	bl	8000850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001b48:	f44f 638e 	mov.w	r3, #1136	; 0x470
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4c:	a904      	add	r1, sp, #16
 8001b4e:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001b50:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b52:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5a:	f7fe fe79 	bl	8000850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b5e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b62:	a904      	add	r1, sp, #16
 8001b64:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b66:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b68:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6c:	f7fe fe70 	bl	8000850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b70:	f44f 7340 	mov.w	r3, #768	; 0x300
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b74:	a904      	add	r1, sp, #16
 8001b76:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b78:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7e:	f7fe fe67 	bl	8000850 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b82:	4622      	mov	r2, r4
 8001b84:	4621      	mov	r1, r4
 8001b86:	2028      	movs	r0, #40	; 0x28
 8001b88:	f7fe fe0a 	bl	80007a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b8c:	2028      	movs	r0, #40	; 0x28
 8001b8e:	f7fe fe3b 	bl	8000808 <HAL_NVIC_EnableIRQ>

}
 8001b92:	b009      	add	sp, #36	; 0x24
 8001b94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40011000 	.word	0x40011000
 8001ba0:	40010c00 	.word	0x40010c00
 8001ba4:	10110000 	.word	0x10110000
 8001ba8:	40010800 	.word	0x40010800

08001bac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001bac:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8001bae:	480c      	ldr	r0, [pc, #48]	; (8001be0 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 100000;
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <MX_I2C1_Init+0x38>)
 8001bb2:	f8df e034 	ldr.w	lr, [pc, #52]	; 8001be8 <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8001bba:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bbe:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bc0:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bc2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bc4:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bc6:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bc8:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bca:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bcc:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bce:	f7fe ff33 	bl	8000a38 <HAL_I2C_Init>
 8001bd2:	b118      	cbz	r0, 8001bdc <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 8001bd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001bd8:	f000 b8e2 	b.w	8001da0 <Error_Handler>
 8001bdc:	bd08      	pop	{r3, pc}
 8001bde:	bf00      	nop
 8001be0:	20000148 	.word	0x20000148
 8001be4:	40005400 	.word	0x40005400
 8001be8:	000186a0 	.word	0x000186a0

08001bec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bec:	b510      	push	{r4, lr}
 8001bee:	4604      	mov	r4, r0
 8001bf0:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf2:	2210      	movs	r2, #16
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	a802      	add	r0, sp, #8
 8001bf8:	f000 faec 	bl	80021d4 <memset>
  if(i2cHandle->Instance==I2C1)
 8001bfc:	6822      	ldr	r2, [r4, #0]
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <HAL_I2C_MspInit+0x68>)
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d124      	bne.n	8001c4e <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c04:	4c14      	ldr	r4, [pc, #80]	; (8001c58 <HAL_I2C_MspInit+0x6c>)
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c06:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c08:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0a:	4814      	ldr	r0, [pc, #80]	; (8001c5c <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0c:	f043 0308 	orr.w	r3, r3, #8
 8001c10:	61a3      	str	r3, [r4, #24]
 8001c12:	69a3      	ldr	r3, [r4, #24]
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c20:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c22:	2312      	movs	r3, #18
 8001c24:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c26:	2303      	movs	r3, #3
 8001c28:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2a:	f7fe fe11 	bl	8000850 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001c2e:	4a0c      	ldr	r2, [pc, #48]	; (8001c60 <HAL_I2C_MspInit+0x74>)
 8001c30:	6853      	ldr	r3, [r2, #4]
 8001c32:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c36:	f043 0302 	orr.w	r3, r3, #2
 8001c3a:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c3c:	69e3      	ldr	r3, [r4, #28]
 8001c3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c42:	61e3      	str	r3, [r4, #28]
 8001c44:	69e3      	ldr	r3, [r4, #28]
 8001c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c4a:	9301      	str	r3, [sp, #4]
 8001c4c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c4e:	b006      	add	sp, #24
 8001c50:	bd10      	pop	{r4, pc}
 8001c52:	bf00      	nop
 8001c54:	40005400 	.word	0x40005400
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40010c00 	.word	0x40010c00
 8001c60:	40010000 	.word	0x40010000

08001c64 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c64:	2228      	movs	r2, #40	; 0x28
{
 8001c66:	b510      	push	{r4, lr}
 8001c68:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c6a:	eb0d 0002 	add.w	r0, sp, r2
 8001c6e:	2100      	movs	r1, #0
 8001c70:	f000 fab0 	bl	80021d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c74:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c76:	2410      	movs	r4, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c78:	eb0d 0002 	add.w	r0, sp, r2
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	f000 faa9 	bl	80021d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c82:	4622      	mov	r2, r4
 8001c84:	2100      	movs	r1, #0
 8001c86:	a801      	add	r0, sp, #4
 8001c88:	f000 faa4 	bl	80021d4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001c8c:	2306      	movs	r3, #6
 8001c8e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001c90:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c92:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001c94:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c96:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c98:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001c9a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c9e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ca0:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001ca2:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ca4:	f7fe ff72 	bl	8000b8c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ca8:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001caa:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cac:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cae:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cb4:	4621      	mov	r1, r4
 8001cb6:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cb8:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cba:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cbc:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cbe:	f7ff f93f 	bl	8000f40 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	9301      	str	r3, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001cc6:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cca:	a801      	add	r0, sp, #4
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001ccc:	9302      	str	r3, [sp, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001cce:	9403      	str	r4, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cd0:	f7ff f9f4 	bl	80010bc <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001cd4:	b014      	add	sp, #80	; 0x50
 8001cd6:	bd10      	pop	{r4, pc}

08001cd8 <main>:
{
 8001cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cda:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8001cdc:	f7fe fb76 	bl	80003cc <HAL_Init>
  SystemClock_Config();
 8001ce0:	f7ff ffc0 	bl	8001c64 <SystemClock_Config>
  MX_GPIO_Init();
 8001ce4:	f7ff feca 	bl	8001a7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001ce8:	f000 f980 	bl	8001fec <MX_USART2_UART_Init>
  MX_RTC_Init();
 8001cec:	f000 f85a 	bl	8001da4 <MX_RTC_Init>
  MX_ADC1_Init();
 8001cf0:	f7ff fdbe 	bl	8001870 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001cf4:	f7ff fde4 	bl	80018c0 <MX_ADC2_Init>
  MX_CAN_Init();
 8001cf8:	f7ff fe6a 	bl	80019d0 <MX_CAN_Init>
  MX_I2C1_Init();
 8001cfc:	f7ff ff56 	bl	8001bac <MX_I2C1_Init>
  MX_SPI2_Init();
 8001d00:	f000 f8a6 	bl	8001e50 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8001d04:	f000 f98e 	bl	8002024 <MX_USART3_UART_Init>
  lcd_Init(16, 2);
 8001d08:	2102      	movs	r1, #2
 8001d0a:	2010      	movs	r0, #16
 8001d0c:	f7fe face 	bl	80002ac <lcd_Init>
  HAL_UART_Init(&huart2);
 8001d10:	481e      	ldr	r0, [pc, #120]	; (8001d8c <main+0xb4>)
 8001d12:	f7ff fd23 	bl	800175c <HAL_UART_Init>
  char mystr1[] = "STM32 world!!\n\r";
 8001d16:	aa08      	add	r2, sp, #32
 8001d18:	4617      	mov	r7, r2
 8001d1a:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <main+0xb8>)
 8001d1c:	f103 0510 	add.w	r5, r3, #16
 8001d20:	4614      	mov	r4, r2
 8001d22:	6818      	ldr	r0, [r3, #0]
 8001d24:	6859      	ldr	r1, [r3, #4]
 8001d26:	3308      	adds	r3, #8
 8001d28:	c403      	stmia	r4!, {r0, r1}
 8001d2a:	42ab      	cmp	r3, r5
 8001d2c:	4622      	mov	r2, r4
 8001d2e:	d1f7      	bne.n	8001d20 <main+0x48>
  HAL_GPIO_WritePin(BL_GPIO_Port,BL_Pin,1);
 8001d30:	2201      	movs	r2, #1
 8001d32:	2140      	movs	r1, #64	; 0x40
 8001d34:	4817      	ldr	r0, [pc, #92]	; (8001d94 <main+0xbc>)
 8001d36:	f7fe fe6d 	bl	8000a14 <HAL_GPIO_WritePin>
  uint8_t i = 0;
 8001d3a:	2400      	movs	r4, #0
	HAL_UART_Transmit(&huart2, (uint8_t *)mystr1,sizeof(mystr1)/sizeof(mystr1[0]),100);
 8001d3c:	4e13      	ldr	r6, [pc, #76]	; (8001d8c <main+0xb4>)
  sprintf(test_string0,"2020/04/26[SAT]");
 8001d3e:	4d16      	ldr	r5, [pc, #88]	; (8001d98 <main+0xc0>)
	HAL_UART_Transmit(&huart2, (uint8_t *)mystr1,sizeof(mystr1)/sizeof(mystr1[0]),100);
 8001d40:	2364      	movs	r3, #100	; 0x64
 8001d42:	2210      	movs	r2, #16
 8001d44:	4639      	mov	r1, r7
 8001d46:	4630      	mov	r0, r6
 8001d48:	f7ff fd36 	bl	80017b8 <HAL_UART_Transmit>
  sprintf(test_string0,"2020/04/26[SAT]");
 8001d4c:	4629      	mov	r1, r5
 8001d4e:	4668      	mov	r0, sp
 8001d50:	f000 fa6c 	bl	800222c <strcpy>
  lcd_setCurStr(0, 0, test_string0);
 8001d54:	2100      	movs	r1, #0
 8001d56:	466a      	mov	r2, sp
 8001d58:	4608      	mov	r0, r1
 8001d5a:	f7fe fb09 	bl	8000370 <lcd_setCurStr>
  sprintf(test_string1,"14:25:%02d",i);
 8001d5e:	4622      	mov	r2, r4
  if(++i>=60) i=0;
 8001d60:	3401      	adds	r4, #1
 8001d62:	b2e4      	uxtb	r4, r4
  sprintf(test_string1,"14:25:%02d",i);
 8001d64:	490d      	ldr	r1, [pc, #52]	; (8001d9c <main+0xc4>)
 8001d66:	a804      	add	r0, sp, #16
 8001d68:	f000 fa3c 	bl	80021e4 <siprintf>
  if(++i>=60) i=0;
 8001d6c:	2c3c      	cmp	r4, #60	; 0x3c
  lcd_setCurStr(0, 1, test_string1);
 8001d6e:	aa04      	add	r2, sp, #16
 8001d70:	f04f 0101 	mov.w	r1, #1
 8001d74:	f04f 0000 	mov.w	r0, #0
  if(++i>=60) i=0;
 8001d78:	bf28      	it	cs
 8001d7a:	2400      	movcs	r4, #0
  lcd_setCurStr(0, 1, test_string1);
 8001d7c:	f7fe faf8 	bl	8000370 <lcd_setCurStr>
  HAL_Delay(1000);
 8001d80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d84:	f7fe fb46 	bl	8000414 <HAL_Delay>
  {
 8001d88:	e7da      	b.n	8001d40 <main+0x68>
 8001d8a:	bf00      	nop
 8001d8c:	20000248 	.word	0x20000248
 8001d90:	08002a9f 	.word	0x08002a9f
 8001d94:	40010c00 	.word	0x40010c00
 8001d98:	08002a84 	.word	0x08002a84
 8001d9c:	08002a94 	.word	0x08002a94

08001da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da0:	4770      	bx	lr
	...

08001da4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001da4:	b513      	push	{r0, r1, r4, lr}
  RTC_DateTypeDef DateToUpdate = {0};

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001da6:	f04f 33ff 	mov.w	r3, #4294967295
  RTC_TimeTypeDef sTime = {0};
 8001daa:	2400      	movs	r4, #0
  hrtc.Instance = RTC;
 8001dac:	4817      	ldr	r0, [pc, #92]	; (8001e0c <MX_RTC_Init+0x68>)
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001dae:	4a18      	ldr	r2, [pc, #96]	; (8001e10 <MX_RTC_Init+0x6c>)
  RTC_TimeTypeDef sTime = {0};
 8001db0:	f8ad 4000 	strh.w	r4, [sp]
 8001db4:	f88d 4002 	strb.w	r4, [sp, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001db8:	9401      	str	r4, [sp, #4]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001dba:	e880 000c 	stmia.w	r0, {r2, r3}
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8001dbe:	6084      	str	r4, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001dc0:	f7ff fbde 	bl	8001580 <HAL_RTC_Init>
 8001dc4:	b108      	cbz	r0, 8001dca <MX_RTC_Init+0x26>
  {
    Error_Handler();
 8001dc6:	f7ff ffeb 	bl	8001da0 <Error_Handler>
  */
  sTime.Hours = 0x0;
  sTime.Minutes = 0x0;
  sTime.Seconds = 0x0;

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	4669      	mov	r1, sp
 8001dce:	480f      	ldr	r0, [pc, #60]	; (8001e0c <MX_RTC_Init+0x68>)
  sTime.Hours = 0x0;
 8001dd0:	f88d 4000 	strb.w	r4, [sp]
  sTime.Minutes = 0x0;
 8001dd4:	f88d 4001 	strb.w	r4, [sp, #1]
  sTime.Seconds = 0x0;
 8001dd8:	f88d 4002 	strb.w	r4, [sp, #2]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001ddc:	f7ff fb0b 	bl	80013f6 <HAL_RTC_SetTime>
 8001de0:	b108      	cbz	r0, 8001de6 <MX_RTC_Init+0x42>
  {
    Error_Handler();
 8001de2:	f7ff ffdd 	bl	8001da0 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001de6:	2201      	movs	r2, #1
  DateToUpdate.Month = RTC_MONTH_JANUARY;
  DateToUpdate.Date = 0x1;
  DateToUpdate.Year = 0x0;
 8001de8:	2300      	movs	r3, #0

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001dea:	a901      	add	r1, sp, #4
 8001dec:	4807      	ldr	r0, [pc, #28]	; (8001e0c <MX_RTC_Init+0x68>)
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001dee:	f88d 2004 	strb.w	r2, [sp, #4]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001df2:	f88d 2005 	strb.w	r2, [sp, #5]
  DateToUpdate.Date = 0x1;
 8001df6:	f88d 2006 	strb.w	r2, [sp, #6]
  DateToUpdate.Year = 0x0;
 8001dfa:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001dfe:	f7ff fb4b 	bl	8001498 <HAL_RTC_SetDate>
 8001e02:	b108      	cbz	r0, 8001e08 <MX_RTC_Init+0x64>
  {
    Error_Handler();
 8001e04:	f7ff ffcc 	bl	8001da0 <Error_Handler>
  }

}
 8001e08:	b002      	add	sp, #8
 8001e0a:	bd10      	pop	{r4, pc}
 8001e0c:	2000019c 	.word	0x2000019c
 8001e10:	40002800 	.word	0x40002800

08001e14 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001e14:	b507      	push	{r0, r1, r2, lr}

  if(rtcHandle->Instance==RTC)
 8001e16:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <HAL_RTC_MspInit+0x30>)
 8001e18:	6802      	ldr	r2, [r0, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d10e      	bne.n	8001e3c <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001e1e:	f7fe feaf 	bl	8000b80 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <HAL_RTC_MspInit+0x34>)
 8001e24:	69da      	ldr	r2, [r3, #28]
 8001e26:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001e2a:	61da      	str	r2, [r3, #28]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e2c:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 8001e2e:	69db      	ldr	r3, [r3, #28]
 8001e30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e34:	9301      	str	r3, [sp, #4]
 8001e36:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 8001e38:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <HAL_RTC_MspInit+0x38>)
 8001e3a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001e3c:	b003      	add	sp, #12
 8001e3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e42:	bf00      	nop
 8001e44:	40002800 	.word	0x40002800
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	4242043c 	.word	0x4242043c

08001e50 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001e50:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e52:	f44f 7e82 	mov.w	lr, #260	; 0x104
  hspi2.Instance = SPI2;
 8001e56:	480d      	ldr	r0, [pc, #52]	; (8001e8c <MX_SPI2_Init+0x3c>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e58:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <MX_SPI2_Init+0x40>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e5a:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e5e:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e62:	2300      	movs	r3, #0
 8001e64:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e66:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e68:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e6a:	6143      	str	r3, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e6c:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e6e:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e70:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e72:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001e74:	230a      	movs	r3, #10
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e76:	6182      	str	r2, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 8001e78:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e7a:	f7ff fbd1 	bl	8001620 <HAL_SPI_Init>
 8001e7e:	b118      	cbz	r0, 8001e88 <MX_SPI2_Init+0x38>
  {
    Error_Handler();
  }

}
 8001e80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001e84:	f7ff bf8c 	b.w	8001da0 <Error_Handler>
 8001e88:	bd08      	pop	{r3, pc}
 8001e8a:	bf00      	nop
 8001e8c:	200001b0 	.word	0x200001b0
 8001e90:	40003800 	.word	0x40003800

08001e94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e94:	b510      	push	{r4, lr}
 8001e96:	4604      	mov	r4, r0
 8001e98:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9a:	2210      	movs	r2, #16
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	a802      	add	r0, sp, #8
 8001ea0:	f000 f998 	bl	80021d4 <memset>
  if(spiHandle->Instance==SPI2)
 8001ea4:	6822      	ldr	r2, [r4, #0]
 8001ea6:	4b17      	ldr	r3, [pc, #92]	; (8001f04 <HAL_SPI_MspInit+0x70>)
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d128      	bne.n	8001efe <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001eac:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 8001eb0:	69da      	ldr	r2, [r3, #28]
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb2:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001eb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eb8:	61da      	str	r2, [r3, #28]
 8001eba:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ebc:	4812      	ldr	r0, [pc, #72]	; (8001f08 <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ebe:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001ec2:	9200      	str	r2, [sp, #0]
 8001ec4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec6:	699a      	ldr	r2, [r3, #24]
 8001ec8:	f042 0208 	orr.w	r2, r2, #8
 8001ecc:	619a      	str	r2, [r3, #24]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	9301      	str	r3, [sp, #4]
 8001ed6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001ed8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001edc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee6:	f7fe fcb3 	bl	8000850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001eea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001eee:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef0:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef2:	a902      	add	r1, sp, #8
 8001ef4:	4804      	ldr	r0, [pc, #16]	; (8001f08 <HAL_SPI_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efa:	f7fe fca9 	bl	8000850 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001efe:	b006      	add	sp, #24
 8001f00:	bd10      	pop	{r4, pc}
 8001f02:	bf00      	nop
 8001f04:	40003800 	.word	0x40003800
 8001f08:	40010c00 	.word	0x40010c00

08001f0c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f0c:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <HAL_MspInit+0x3c>)
{
 8001f0e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f10:	699a      	ldr	r2, [r3, #24]
 8001f12:	f042 0201 	orr.w	r2, r2, #1
 8001f16:	619a      	str	r2, [r3, #24]
 8001f18:	699a      	ldr	r2, [r3, #24]
 8001f1a:	f002 0201 	and.w	r2, r2, #1
 8001f1e:	9200      	str	r2, [sp, #0]
 8001f20:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f22:	69da      	ldr	r2, [r3, #28]
 8001f24:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f28:	61da      	str	r2, [r3, #28]
 8001f2a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f2c:	4a07      	ldr	r2, [pc, #28]	; (8001f4c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	9301      	str	r3, [sp, #4]
 8001f34:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f36:	6853      	ldr	r3, [r2, #4]
 8001f38:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f42:	b002      	add	sp, #8
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40010000 	.word	0x40010000

08001f50 <NMI_Handler>:
 8001f50:	4770      	bx	lr

08001f52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f52:	e7fe      	b.n	8001f52 <HardFault_Handler>

08001f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f54:	e7fe      	b.n	8001f54 <MemManage_Handler>

08001f56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f56:	e7fe      	b.n	8001f56 <BusFault_Handler>

08001f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f58:	e7fe      	b.n	8001f58 <UsageFault_Handler>

08001f5a <SVC_Handler>:
 8001f5a:	4770      	bx	lr

08001f5c <DebugMon_Handler>:
 8001f5c:	4770      	bx	lr

08001f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f5e:	4770      	bx	lr

08001f60 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f60:	f7fe ba46 	b.w	80003f0 <HAL_IncTick>

08001f64 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001f64:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f68:	f7fe bd5a 	b.w	8000a20 <HAL_GPIO_EXTI_IRQHandler>

08001f6c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001f6c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <_sbrk+0x2c>)
{
 8001f70:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001f72:	6819      	ldr	r1, [r3, #0]
 8001f74:	b909      	cbnz	r1, 8001f7a <_sbrk+0xe>
		heap_end = &end;
 8001f76:	4909      	ldr	r1, [pc, #36]	; (8001f9c <_sbrk+0x30>)
 8001f78:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001f7a:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001f7c:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001f7e:	4402      	add	r2, r0
 8001f80:	428a      	cmp	r2, r1
 8001f82:	d906      	bls.n	8001f92 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001f84:	f000 f8fc 	bl	8002180 <__errno>
 8001f88:	230c      	movs	r3, #12
 8001f8a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f90:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001f92:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001f94:	bd08      	pop	{r3, pc}
 8001f96:	bf00      	nop
 8001f98:	200000a4 	.word	0x200000a4
 8001f9c:	2000028c 	.word	0x2000028c

08001fa0 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <SystemInit+0x40>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	f042 0201 	orr.w	r2, r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001faa:	6859      	ldr	r1, [r3, #4]
 8001fac:	4a0d      	ldr	r2, [pc, #52]	; (8001fe4 <SystemInit+0x44>)
 8001fae:	400a      	ands	r2, r1
 8001fb0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001fb8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001fbc:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fc4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001fcc:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001fce:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001fd2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001fd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <SystemInit+0x48>)
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	f8ff0000 	.word	0xf8ff0000
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001fec:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8001fee:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart2.Instance = USART2;
 8001ff2:	480a      	ldr	r0, [pc, #40]	; (800201c <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8001ff4:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <MX_USART2_UART_Init+0x34>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ff6:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 8001ff8:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ffc:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ffe:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002000:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002002:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002004:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002006:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002008:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800200a:	f7ff fba7 	bl	800175c <HAL_UART_Init>
 800200e:	b118      	cbz	r0, 8002018 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8002010:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002014:	f7ff bec4 	b.w	8001da0 <Error_Handler>
 8002018:	bd08      	pop	{r3, pc}
 800201a:	bf00      	nop
 800201c:	20000248 	.word	0x20000248
 8002020:	40004400 	.word	0x40004400

08002024 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002024:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
 8002026:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart3.Instance = USART3;
 800202a:	480a      	ldr	r0, [pc, #40]	; (8002054 <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 800202c:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <MX_USART3_UART_Init+0x34>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 800202e:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 8002030:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002034:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002036:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002038:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800203a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800203c:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800203e:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002040:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002042:	f7ff fb8b 	bl	800175c <HAL_UART_Init>
 8002046:	b118      	cbz	r0, 8002050 <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8002048:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800204c:	f7ff bea8 	b.w	8001da0 <Error_Handler>
 8002050:	bd08      	pop	{r3, pc}
 8002052:	bf00      	nop
 8002054:	20000208 	.word	0x20000208
 8002058:	40004800 	.word	0x40004800

0800205c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	2210      	movs	r2, #16
{
 800205e:	b510      	push	{r4, lr}
 8002060:	4604      	mov	r4, r0
 8002062:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	eb0d 0002 	add.w	r0, sp, r2
 8002068:	2100      	movs	r1, #0
 800206a:	f000 f8b3 	bl	80021d4 <memset>
  if(uartHandle->Instance==USART2)
 800206e:	6823      	ldr	r3, [r4, #0]
 8002070:	4a2a      	ldr	r2, [pc, #168]	; (800211c <HAL_UART_MspInit+0xc0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d11d      	bne.n	80020b2 <HAL_UART_MspInit+0x56>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002076:	4b2a      	ldr	r3, [pc, #168]	; (8002120 <HAL_UART_MspInit+0xc4>)
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002078:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 800207a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207c:	4829      	ldr	r0, [pc, #164]	; (8002124 <HAL_UART_MspInit+0xc8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800207e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002082:	61da      	str	r2, [r3, #28]
 8002084:	69da      	ldr	r2, [r3, #28]
 8002086:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800208a:	9200      	str	r2, [sp, #0]
 800208c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208e:	699a      	ldr	r2, [r3, #24]
 8002090:	f042 0204 	orr.w	r2, r2, #4
 8002094:	619a      	str	r2, [r3, #24]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	9301      	str	r3, [sp, #4]
 800209e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020a0:	230c      	movs	r3, #12
 80020a2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a4:	2302      	movs	r3, #2
 80020a6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020aa:	f7fe fbd1 	bl	8000850 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80020ae:	b008      	add	sp, #32
 80020b0:	bd10      	pop	{r4, pc}
  else if(uartHandle->Instance==USART3)
 80020b2:	4a1d      	ldr	r2, [pc, #116]	; (8002128 <HAL_UART_MspInit+0xcc>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d1fa      	bne.n	80020ae <HAL_UART_MspInit+0x52>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020b8:	4b19      	ldr	r3, [pc, #100]	; (8002120 <HAL_UART_MspInit+0xc4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ba:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 80020bc:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020be:	481b      	ldr	r0, [pc, #108]	; (800212c <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80020c0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80020c4:	61da      	str	r2, [r3, #28]
 80020c6:	69da      	ldr	r2, [r3, #28]
 80020c8:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80020cc:	9202      	str	r2, [sp, #8]
 80020ce:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d0:	699a      	ldr	r2, [r3, #24]
 80020d2:	f042 0210 	orr.w	r2, r2, #16
 80020d6:	619a      	str	r2, [r3, #24]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	f003 0310 	and.w	r3, r3, #16
 80020de:	9303      	str	r3, [sp, #12]
 80020e0:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020e6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ec:	2303      	movs	r3, #3
 80020ee:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f0:	f7fe fbae 	bl	8000850 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80020f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020f8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020fa:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020fc:	a904      	add	r1, sp, #16
 80020fe:	480b      	ldr	r0, [pc, #44]	; (800212c <HAL_UART_MspInit+0xd0>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002100:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002104:	f7fe fba4 	bl	8000850 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8002108:	4a09      	ldr	r2, [pc, #36]	; (8002130 <HAL_UART_MspInit+0xd4>)
 800210a:	6853      	ldr	r3, [r2, #4]
 800210c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002110:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002114:	f043 0310 	orr.w	r3, r3, #16
 8002118:	6053      	str	r3, [r2, #4]
}
 800211a:	e7c8      	b.n	80020ae <HAL_UART_MspInit+0x52>
 800211c:	40004400 	.word	0x40004400
 8002120:	40021000 	.word	0x40021000
 8002124:	40010800 	.word	0x40010800
 8002128:	40004800 	.word	0x40004800
 800212c:	40011000 	.word	0x40011000
 8002130:	40010000 	.word	0x40010000

08002134 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002134:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002136:	e003      	b.n	8002140 <LoopCopyDataInit>

08002138 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002138:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800213a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800213c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800213e:	3104      	adds	r1, #4

08002140 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002140:	480a      	ldr	r0, [pc, #40]	; (800216c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002142:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002144:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002146:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002148:	d3f6      	bcc.n	8002138 <CopyDataInit>
  ldr r2, =_sbss
 800214a:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800214c:	e002      	b.n	8002154 <LoopFillZerobss>

0800214e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800214e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002150:	f842 3b04 	str.w	r3, [r2], #4

08002154 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002154:	4b08      	ldr	r3, [pc, #32]	; (8002178 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002156:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002158:	d3f9      	bcc.n	800214e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800215a:	f7ff ff21 	bl	8001fa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800215e:	f000 f815 	bl	800218c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002162:	f7ff fdb9 	bl	8001cd8 <main>
  bx lr
 8002166:	4770      	bx	lr
  ldr r3, =_sidata
 8002168:	08002b04 	.word	0x08002b04
  ldr r0, =_sdata
 800216c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002170:	20000088 	.word	0x20000088
  ldr r2, =_sbss
 8002174:	20000088 	.word	0x20000088
  ldr r3, = _ebss
 8002178:	2000028c 	.word	0x2000028c

0800217c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800217c:	e7fe      	b.n	800217c <ADC1_2_IRQHandler>
	...

08002180 <__errno>:
 8002180:	4b01      	ldr	r3, [pc, #4]	; (8002188 <__errno+0x8>)
 8002182:	6818      	ldr	r0, [r3, #0]
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	20000024 	.word	0x20000024

0800218c <__libc_init_array>:
 800218c:	b570      	push	{r4, r5, r6, lr}
 800218e:	2500      	movs	r5, #0
 8002190:	4e0c      	ldr	r6, [pc, #48]	; (80021c4 <__libc_init_array+0x38>)
 8002192:	4c0d      	ldr	r4, [pc, #52]	; (80021c8 <__libc_init_array+0x3c>)
 8002194:	1ba4      	subs	r4, r4, r6
 8002196:	10a4      	asrs	r4, r4, #2
 8002198:	42a5      	cmp	r5, r4
 800219a:	d109      	bne.n	80021b0 <__libc_init_array+0x24>
 800219c:	f000 fc56 	bl	8002a4c <_init>
 80021a0:	2500      	movs	r5, #0
 80021a2:	4e0a      	ldr	r6, [pc, #40]	; (80021cc <__libc_init_array+0x40>)
 80021a4:	4c0a      	ldr	r4, [pc, #40]	; (80021d0 <__libc_init_array+0x44>)
 80021a6:	1ba4      	subs	r4, r4, r6
 80021a8:	10a4      	asrs	r4, r4, #2
 80021aa:	42a5      	cmp	r5, r4
 80021ac:	d105      	bne.n	80021ba <__libc_init_array+0x2e>
 80021ae:	bd70      	pop	{r4, r5, r6, pc}
 80021b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021b4:	4798      	blx	r3
 80021b6:	3501      	adds	r5, #1
 80021b8:	e7ee      	b.n	8002198 <__libc_init_array+0xc>
 80021ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021be:	4798      	blx	r3
 80021c0:	3501      	adds	r5, #1
 80021c2:	e7f2      	b.n	80021aa <__libc_init_array+0x1e>
 80021c4:	08002afc 	.word	0x08002afc
 80021c8:	08002afc 	.word	0x08002afc
 80021cc:	08002afc 	.word	0x08002afc
 80021d0:	08002b00 	.word	0x08002b00

080021d4 <memset>:
 80021d4:	4603      	mov	r3, r0
 80021d6:	4402      	add	r2, r0
 80021d8:	4293      	cmp	r3, r2
 80021da:	d100      	bne.n	80021de <memset+0xa>
 80021dc:	4770      	bx	lr
 80021de:	f803 1b01 	strb.w	r1, [r3], #1
 80021e2:	e7f9      	b.n	80021d8 <memset+0x4>

080021e4 <siprintf>:
 80021e4:	b40e      	push	{r1, r2, r3}
 80021e6:	f44f 7102 	mov.w	r1, #520	; 0x208
 80021ea:	b500      	push	{lr}
 80021ec:	b09c      	sub	sp, #112	; 0x70
 80021ee:	f8ad 1014 	strh.w	r1, [sp, #20]
 80021f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80021f6:	9104      	str	r1, [sp, #16]
 80021f8:	9107      	str	r1, [sp, #28]
 80021fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80021fe:	ab1d      	add	r3, sp, #116	; 0x74
 8002200:	9002      	str	r0, [sp, #8]
 8002202:	9006      	str	r0, [sp, #24]
 8002204:	4808      	ldr	r0, [pc, #32]	; (8002228 <siprintf+0x44>)
 8002206:	f853 2b04 	ldr.w	r2, [r3], #4
 800220a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800220e:	6800      	ldr	r0, [r0, #0]
 8002210:	a902      	add	r1, sp, #8
 8002212:	9301      	str	r3, [sp, #4]
 8002214:	f000 f86e 	bl	80022f4 <_svfiprintf_r>
 8002218:	2200      	movs	r2, #0
 800221a:	9b02      	ldr	r3, [sp, #8]
 800221c:	701a      	strb	r2, [r3, #0]
 800221e:	b01c      	add	sp, #112	; 0x70
 8002220:	f85d eb04 	ldr.w	lr, [sp], #4
 8002224:	b003      	add	sp, #12
 8002226:	4770      	bx	lr
 8002228:	20000024 	.word	0x20000024

0800222c <strcpy>:
 800222c:	4603      	mov	r3, r0
 800222e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002232:	f803 2b01 	strb.w	r2, [r3], #1
 8002236:	2a00      	cmp	r2, #0
 8002238:	d1f9      	bne.n	800222e <strcpy+0x2>
 800223a:	4770      	bx	lr

0800223c <__ssputs_r>:
 800223c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002240:	688e      	ldr	r6, [r1, #8]
 8002242:	4682      	mov	sl, r0
 8002244:	429e      	cmp	r6, r3
 8002246:	460c      	mov	r4, r1
 8002248:	4691      	mov	r9, r2
 800224a:	4698      	mov	r8, r3
 800224c:	d835      	bhi.n	80022ba <__ssputs_r+0x7e>
 800224e:	898a      	ldrh	r2, [r1, #12]
 8002250:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002254:	d031      	beq.n	80022ba <__ssputs_r+0x7e>
 8002256:	2302      	movs	r3, #2
 8002258:	6825      	ldr	r5, [r4, #0]
 800225a:	6909      	ldr	r1, [r1, #16]
 800225c:	1a6f      	subs	r7, r5, r1
 800225e:	6965      	ldr	r5, [r4, #20]
 8002260:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002264:	fb95 f5f3 	sdiv	r5, r5, r3
 8002268:	f108 0301 	add.w	r3, r8, #1
 800226c:	443b      	add	r3, r7
 800226e:	429d      	cmp	r5, r3
 8002270:	bf38      	it	cc
 8002272:	461d      	movcc	r5, r3
 8002274:	0553      	lsls	r3, r2, #21
 8002276:	d531      	bpl.n	80022dc <__ssputs_r+0xa0>
 8002278:	4629      	mov	r1, r5
 800227a:	f000 fb47 	bl	800290c <_malloc_r>
 800227e:	4606      	mov	r6, r0
 8002280:	b950      	cbnz	r0, 8002298 <__ssputs_r+0x5c>
 8002282:	230c      	movs	r3, #12
 8002284:	f8ca 3000 	str.w	r3, [sl]
 8002288:	89a3      	ldrh	r3, [r4, #12]
 800228a:	f04f 30ff 	mov.w	r0, #4294967295
 800228e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002292:	81a3      	strh	r3, [r4, #12]
 8002294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002298:	463a      	mov	r2, r7
 800229a:	6921      	ldr	r1, [r4, #16]
 800229c:	f000 fac4 	bl	8002828 <memcpy>
 80022a0:	89a3      	ldrh	r3, [r4, #12]
 80022a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80022a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022aa:	81a3      	strh	r3, [r4, #12]
 80022ac:	6126      	str	r6, [r4, #16]
 80022ae:	443e      	add	r6, r7
 80022b0:	6026      	str	r6, [r4, #0]
 80022b2:	4646      	mov	r6, r8
 80022b4:	6165      	str	r5, [r4, #20]
 80022b6:	1bed      	subs	r5, r5, r7
 80022b8:	60a5      	str	r5, [r4, #8]
 80022ba:	4546      	cmp	r6, r8
 80022bc:	bf28      	it	cs
 80022be:	4646      	movcs	r6, r8
 80022c0:	4649      	mov	r1, r9
 80022c2:	4632      	mov	r2, r6
 80022c4:	6820      	ldr	r0, [r4, #0]
 80022c6:	f000 faba 	bl	800283e <memmove>
 80022ca:	68a3      	ldr	r3, [r4, #8]
 80022cc:	2000      	movs	r0, #0
 80022ce:	1b9b      	subs	r3, r3, r6
 80022d0:	60a3      	str	r3, [r4, #8]
 80022d2:	6823      	ldr	r3, [r4, #0]
 80022d4:	441e      	add	r6, r3
 80022d6:	6026      	str	r6, [r4, #0]
 80022d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022dc:	462a      	mov	r2, r5
 80022de:	f000 fb73 	bl	80029c8 <_realloc_r>
 80022e2:	4606      	mov	r6, r0
 80022e4:	2800      	cmp	r0, #0
 80022e6:	d1e1      	bne.n	80022ac <__ssputs_r+0x70>
 80022e8:	6921      	ldr	r1, [r4, #16]
 80022ea:	4650      	mov	r0, sl
 80022ec:	f000 fac2 	bl	8002874 <_free_r>
 80022f0:	e7c7      	b.n	8002282 <__ssputs_r+0x46>
	...

080022f4 <_svfiprintf_r>:
 80022f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022f8:	b09d      	sub	sp, #116	; 0x74
 80022fa:	9303      	str	r3, [sp, #12]
 80022fc:	898b      	ldrh	r3, [r1, #12]
 80022fe:	4680      	mov	r8, r0
 8002300:	061c      	lsls	r4, r3, #24
 8002302:	460d      	mov	r5, r1
 8002304:	4616      	mov	r6, r2
 8002306:	d50f      	bpl.n	8002328 <_svfiprintf_r+0x34>
 8002308:	690b      	ldr	r3, [r1, #16]
 800230a:	b96b      	cbnz	r3, 8002328 <_svfiprintf_r+0x34>
 800230c:	2140      	movs	r1, #64	; 0x40
 800230e:	f000 fafd 	bl	800290c <_malloc_r>
 8002312:	6028      	str	r0, [r5, #0]
 8002314:	6128      	str	r0, [r5, #16]
 8002316:	b928      	cbnz	r0, 8002324 <_svfiprintf_r+0x30>
 8002318:	230c      	movs	r3, #12
 800231a:	f8c8 3000 	str.w	r3, [r8]
 800231e:	f04f 30ff 	mov.w	r0, #4294967295
 8002322:	e0c4      	b.n	80024ae <_svfiprintf_r+0x1ba>
 8002324:	2340      	movs	r3, #64	; 0x40
 8002326:	616b      	str	r3, [r5, #20]
 8002328:	2300      	movs	r3, #0
 800232a:	9309      	str	r3, [sp, #36]	; 0x24
 800232c:	2320      	movs	r3, #32
 800232e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002332:	2330      	movs	r3, #48	; 0x30
 8002334:	f04f 0b01 	mov.w	fp, #1
 8002338:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800233c:	4637      	mov	r7, r6
 800233e:	463c      	mov	r4, r7
 8002340:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d13c      	bne.n	80023c2 <_svfiprintf_r+0xce>
 8002348:	ebb7 0a06 	subs.w	sl, r7, r6
 800234c:	d00b      	beq.n	8002366 <_svfiprintf_r+0x72>
 800234e:	4653      	mov	r3, sl
 8002350:	4632      	mov	r2, r6
 8002352:	4629      	mov	r1, r5
 8002354:	4640      	mov	r0, r8
 8002356:	f7ff ff71 	bl	800223c <__ssputs_r>
 800235a:	3001      	adds	r0, #1
 800235c:	f000 80a2 	beq.w	80024a4 <_svfiprintf_r+0x1b0>
 8002360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002362:	4453      	add	r3, sl
 8002364:	9309      	str	r3, [sp, #36]	; 0x24
 8002366:	783b      	ldrb	r3, [r7, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 809b 	beq.w	80024a4 <_svfiprintf_r+0x1b0>
 800236e:	2300      	movs	r3, #0
 8002370:	f04f 32ff 	mov.w	r2, #4294967295
 8002374:	9304      	str	r3, [sp, #16]
 8002376:	9307      	str	r3, [sp, #28]
 8002378:	9205      	str	r2, [sp, #20]
 800237a:	9306      	str	r3, [sp, #24]
 800237c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002380:	931a      	str	r3, [sp, #104]	; 0x68
 8002382:	2205      	movs	r2, #5
 8002384:	7821      	ldrb	r1, [r4, #0]
 8002386:	4850      	ldr	r0, [pc, #320]	; (80024c8 <_svfiprintf_r+0x1d4>)
 8002388:	f000 fa40 	bl	800280c <memchr>
 800238c:	1c67      	adds	r7, r4, #1
 800238e:	9b04      	ldr	r3, [sp, #16]
 8002390:	b9d8      	cbnz	r0, 80023ca <_svfiprintf_r+0xd6>
 8002392:	06d9      	lsls	r1, r3, #27
 8002394:	bf44      	itt	mi
 8002396:	2220      	movmi	r2, #32
 8002398:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800239c:	071a      	lsls	r2, r3, #28
 800239e:	bf44      	itt	mi
 80023a0:	222b      	movmi	r2, #43	; 0x2b
 80023a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80023a6:	7822      	ldrb	r2, [r4, #0]
 80023a8:	2a2a      	cmp	r2, #42	; 0x2a
 80023aa:	d016      	beq.n	80023da <_svfiprintf_r+0xe6>
 80023ac:	2100      	movs	r1, #0
 80023ae:	200a      	movs	r0, #10
 80023b0:	9a07      	ldr	r2, [sp, #28]
 80023b2:	4627      	mov	r7, r4
 80023b4:	783b      	ldrb	r3, [r7, #0]
 80023b6:	3401      	adds	r4, #1
 80023b8:	3b30      	subs	r3, #48	; 0x30
 80023ba:	2b09      	cmp	r3, #9
 80023bc:	d950      	bls.n	8002460 <_svfiprintf_r+0x16c>
 80023be:	b1c9      	cbz	r1, 80023f4 <_svfiprintf_r+0x100>
 80023c0:	e011      	b.n	80023e6 <_svfiprintf_r+0xf2>
 80023c2:	2b25      	cmp	r3, #37	; 0x25
 80023c4:	d0c0      	beq.n	8002348 <_svfiprintf_r+0x54>
 80023c6:	4627      	mov	r7, r4
 80023c8:	e7b9      	b.n	800233e <_svfiprintf_r+0x4a>
 80023ca:	4a3f      	ldr	r2, [pc, #252]	; (80024c8 <_svfiprintf_r+0x1d4>)
 80023cc:	463c      	mov	r4, r7
 80023ce:	1a80      	subs	r0, r0, r2
 80023d0:	fa0b f000 	lsl.w	r0, fp, r0
 80023d4:	4318      	orrs	r0, r3
 80023d6:	9004      	str	r0, [sp, #16]
 80023d8:	e7d3      	b.n	8002382 <_svfiprintf_r+0x8e>
 80023da:	9a03      	ldr	r2, [sp, #12]
 80023dc:	1d11      	adds	r1, r2, #4
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	9103      	str	r1, [sp, #12]
 80023e2:	2a00      	cmp	r2, #0
 80023e4:	db01      	blt.n	80023ea <_svfiprintf_r+0xf6>
 80023e6:	9207      	str	r2, [sp, #28]
 80023e8:	e004      	b.n	80023f4 <_svfiprintf_r+0x100>
 80023ea:	4252      	negs	r2, r2
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	9207      	str	r2, [sp, #28]
 80023f2:	9304      	str	r3, [sp, #16]
 80023f4:	783b      	ldrb	r3, [r7, #0]
 80023f6:	2b2e      	cmp	r3, #46	; 0x2e
 80023f8:	d10d      	bne.n	8002416 <_svfiprintf_r+0x122>
 80023fa:	787b      	ldrb	r3, [r7, #1]
 80023fc:	1c79      	adds	r1, r7, #1
 80023fe:	2b2a      	cmp	r3, #42	; 0x2a
 8002400:	d132      	bne.n	8002468 <_svfiprintf_r+0x174>
 8002402:	9b03      	ldr	r3, [sp, #12]
 8002404:	3702      	adds	r7, #2
 8002406:	1d1a      	adds	r2, r3, #4
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	9203      	str	r2, [sp, #12]
 800240c:	2b00      	cmp	r3, #0
 800240e:	bfb8      	it	lt
 8002410:	f04f 33ff 	movlt.w	r3, #4294967295
 8002414:	9305      	str	r3, [sp, #20]
 8002416:	4c2d      	ldr	r4, [pc, #180]	; (80024cc <_svfiprintf_r+0x1d8>)
 8002418:	2203      	movs	r2, #3
 800241a:	7839      	ldrb	r1, [r7, #0]
 800241c:	4620      	mov	r0, r4
 800241e:	f000 f9f5 	bl	800280c <memchr>
 8002422:	b138      	cbz	r0, 8002434 <_svfiprintf_r+0x140>
 8002424:	2340      	movs	r3, #64	; 0x40
 8002426:	1b00      	subs	r0, r0, r4
 8002428:	fa03 f000 	lsl.w	r0, r3, r0
 800242c:	9b04      	ldr	r3, [sp, #16]
 800242e:	3701      	adds	r7, #1
 8002430:	4303      	orrs	r3, r0
 8002432:	9304      	str	r3, [sp, #16]
 8002434:	7839      	ldrb	r1, [r7, #0]
 8002436:	2206      	movs	r2, #6
 8002438:	4825      	ldr	r0, [pc, #148]	; (80024d0 <_svfiprintf_r+0x1dc>)
 800243a:	1c7e      	adds	r6, r7, #1
 800243c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002440:	f000 f9e4 	bl	800280c <memchr>
 8002444:	2800      	cmp	r0, #0
 8002446:	d035      	beq.n	80024b4 <_svfiprintf_r+0x1c0>
 8002448:	4b22      	ldr	r3, [pc, #136]	; (80024d4 <_svfiprintf_r+0x1e0>)
 800244a:	b9fb      	cbnz	r3, 800248c <_svfiprintf_r+0x198>
 800244c:	9b03      	ldr	r3, [sp, #12]
 800244e:	3307      	adds	r3, #7
 8002450:	f023 0307 	bic.w	r3, r3, #7
 8002454:	3308      	adds	r3, #8
 8002456:	9303      	str	r3, [sp, #12]
 8002458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800245a:	444b      	add	r3, r9
 800245c:	9309      	str	r3, [sp, #36]	; 0x24
 800245e:	e76d      	b.n	800233c <_svfiprintf_r+0x48>
 8002460:	fb00 3202 	mla	r2, r0, r2, r3
 8002464:	2101      	movs	r1, #1
 8002466:	e7a4      	b.n	80023b2 <_svfiprintf_r+0xbe>
 8002468:	2300      	movs	r3, #0
 800246a:	240a      	movs	r4, #10
 800246c:	4618      	mov	r0, r3
 800246e:	9305      	str	r3, [sp, #20]
 8002470:	460f      	mov	r7, r1
 8002472:	783a      	ldrb	r2, [r7, #0]
 8002474:	3101      	adds	r1, #1
 8002476:	3a30      	subs	r2, #48	; 0x30
 8002478:	2a09      	cmp	r2, #9
 800247a:	d903      	bls.n	8002484 <_svfiprintf_r+0x190>
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0ca      	beq.n	8002416 <_svfiprintf_r+0x122>
 8002480:	9005      	str	r0, [sp, #20]
 8002482:	e7c8      	b.n	8002416 <_svfiprintf_r+0x122>
 8002484:	fb04 2000 	mla	r0, r4, r0, r2
 8002488:	2301      	movs	r3, #1
 800248a:	e7f1      	b.n	8002470 <_svfiprintf_r+0x17c>
 800248c:	ab03      	add	r3, sp, #12
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	462a      	mov	r2, r5
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <_svfiprintf_r+0x1e4>)
 8002494:	a904      	add	r1, sp, #16
 8002496:	4640      	mov	r0, r8
 8002498:	f3af 8000 	nop.w
 800249c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80024a0:	4681      	mov	r9, r0
 80024a2:	d1d9      	bne.n	8002458 <_svfiprintf_r+0x164>
 80024a4:	89ab      	ldrh	r3, [r5, #12]
 80024a6:	065b      	lsls	r3, r3, #25
 80024a8:	f53f af39 	bmi.w	800231e <_svfiprintf_r+0x2a>
 80024ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80024ae:	b01d      	add	sp, #116	; 0x74
 80024b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024b4:	ab03      	add	r3, sp, #12
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	462a      	mov	r2, r5
 80024ba:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <_svfiprintf_r+0x1e4>)
 80024bc:	a904      	add	r1, sp, #16
 80024be:	4640      	mov	r0, r8
 80024c0:	f000 f884 	bl	80025cc <_printf_i>
 80024c4:	e7ea      	b.n	800249c <_svfiprintf_r+0x1a8>
 80024c6:	bf00      	nop
 80024c8:	08002ac7 	.word	0x08002ac7
 80024cc:	08002acd 	.word	0x08002acd
 80024d0:	08002ad1 	.word	0x08002ad1
 80024d4:	00000000 	.word	0x00000000
 80024d8:	0800223d 	.word	0x0800223d

080024dc <_printf_common>:
 80024dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024e0:	4691      	mov	r9, r2
 80024e2:	461f      	mov	r7, r3
 80024e4:	688a      	ldr	r2, [r1, #8]
 80024e6:	690b      	ldr	r3, [r1, #16]
 80024e8:	4606      	mov	r6, r0
 80024ea:	4293      	cmp	r3, r2
 80024ec:	bfb8      	it	lt
 80024ee:	4613      	movlt	r3, r2
 80024f0:	f8c9 3000 	str.w	r3, [r9]
 80024f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80024f8:	460c      	mov	r4, r1
 80024fa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80024fe:	b112      	cbz	r2, 8002506 <_printf_common+0x2a>
 8002500:	3301      	adds	r3, #1
 8002502:	f8c9 3000 	str.w	r3, [r9]
 8002506:	6823      	ldr	r3, [r4, #0]
 8002508:	0699      	lsls	r1, r3, #26
 800250a:	bf42      	ittt	mi
 800250c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002510:	3302      	addmi	r3, #2
 8002512:	f8c9 3000 	strmi.w	r3, [r9]
 8002516:	6825      	ldr	r5, [r4, #0]
 8002518:	f015 0506 	ands.w	r5, r5, #6
 800251c:	d107      	bne.n	800252e <_printf_common+0x52>
 800251e:	f104 0a19 	add.w	sl, r4, #25
 8002522:	68e3      	ldr	r3, [r4, #12]
 8002524:	f8d9 2000 	ldr.w	r2, [r9]
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	429d      	cmp	r5, r3
 800252c:	db2a      	blt.n	8002584 <_printf_common+0xa8>
 800252e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002532:	6822      	ldr	r2, [r4, #0]
 8002534:	3300      	adds	r3, #0
 8002536:	bf18      	it	ne
 8002538:	2301      	movne	r3, #1
 800253a:	0692      	lsls	r2, r2, #26
 800253c:	d42f      	bmi.n	800259e <_printf_common+0xc2>
 800253e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002542:	4639      	mov	r1, r7
 8002544:	4630      	mov	r0, r6
 8002546:	47c0      	blx	r8
 8002548:	3001      	adds	r0, #1
 800254a:	d022      	beq.n	8002592 <_printf_common+0xb6>
 800254c:	6823      	ldr	r3, [r4, #0]
 800254e:	68e5      	ldr	r5, [r4, #12]
 8002550:	f003 0306 	and.w	r3, r3, #6
 8002554:	2b04      	cmp	r3, #4
 8002556:	bf18      	it	ne
 8002558:	2500      	movne	r5, #0
 800255a:	f8d9 2000 	ldr.w	r2, [r9]
 800255e:	f04f 0900 	mov.w	r9, #0
 8002562:	bf08      	it	eq
 8002564:	1aad      	subeq	r5, r5, r2
 8002566:	68a3      	ldr	r3, [r4, #8]
 8002568:	6922      	ldr	r2, [r4, #16]
 800256a:	bf08      	it	eq
 800256c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002570:	4293      	cmp	r3, r2
 8002572:	bfc4      	itt	gt
 8002574:	1a9b      	subgt	r3, r3, r2
 8002576:	18ed      	addgt	r5, r5, r3
 8002578:	341a      	adds	r4, #26
 800257a:	454d      	cmp	r5, r9
 800257c:	d11b      	bne.n	80025b6 <_printf_common+0xda>
 800257e:	2000      	movs	r0, #0
 8002580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002584:	2301      	movs	r3, #1
 8002586:	4652      	mov	r2, sl
 8002588:	4639      	mov	r1, r7
 800258a:	4630      	mov	r0, r6
 800258c:	47c0      	blx	r8
 800258e:	3001      	adds	r0, #1
 8002590:	d103      	bne.n	800259a <_printf_common+0xbe>
 8002592:	f04f 30ff 	mov.w	r0, #4294967295
 8002596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800259a:	3501      	adds	r5, #1
 800259c:	e7c1      	b.n	8002522 <_printf_common+0x46>
 800259e:	2030      	movs	r0, #48	; 0x30
 80025a0:	18e1      	adds	r1, r4, r3
 80025a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80025ac:	4422      	add	r2, r4
 80025ae:	3302      	adds	r3, #2
 80025b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80025b4:	e7c3      	b.n	800253e <_printf_common+0x62>
 80025b6:	2301      	movs	r3, #1
 80025b8:	4622      	mov	r2, r4
 80025ba:	4639      	mov	r1, r7
 80025bc:	4630      	mov	r0, r6
 80025be:	47c0      	blx	r8
 80025c0:	3001      	adds	r0, #1
 80025c2:	d0e6      	beq.n	8002592 <_printf_common+0xb6>
 80025c4:	f109 0901 	add.w	r9, r9, #1
 80025c8:	e7d7      	b.n	800257a <_printf_common+0x9e>
	...

080025cc <_printf_i>:
 80025cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025d0:	4617      	mov	r7, r2
 80025d2:	7e0a      	ldrb	r2, [r1, #24]
 80025d4:	b085      	sub	sp, #20
 80025d6:	2a6e      	cmp	r2, #110	; 0x6e
 80025d8:	4698      	mov	r8, r3
 80025da:	4606      	mov	r6, r0
 80025dc:	460c      	mov	r4, r1
 80025de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80025e0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80025e4:	f000 80bc 	beq.w	8002760 <_printf_i+0x194>
 80025e8:	d81a      	bhi.n	8002620 <_printf_i+0x54>
 80025ea:	2a63      	cmp	r2, #99	; 0x63
 80025ec:	d02e      	beq.n	800264c <_printf_i+0x80>
 80025ee:	d80a      	bhi.n	8002606 <_printf_i+0x3a>
 80025f0:	2a00      	cmp	r2, #0
 80025f2:	f000 80c8 	beq.w	8002786 <_printf_i+0x1ba>
 80025f6:	2a58      	cmp	r2, #88	; 0x58
 80025f8:	f000 808a 	beq.w	8002710 <_printf_i+0x144>
 80025fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002600:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002604:	e02a      	b.n	800265c <_printf_i+0x90>
 8002606:	2a64      	cmp	r2, #100	; 0x64
 8002608:	d001      	beq.n	800260e <_printf_i+0x42>
 800260a:	2a69      	cmp	r2, #105	; 0x69
 800260c:	d1f6      	bne.n	80025fc <_printf_i+0x30>
 800260e:	6821      	ldr	r1, [r4, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002616:	d023      	beq.n	8002660 <_printf_i+0x94>
 8002618:	1d11      	adds	r1, r2, #4
 800261a:	6019      	str	r1, [r3, #0]
 800261c:	6813      	ldr	r3, [r2, #0]
 800261e:	e027      	b.n	8002670 <_printf_i+0xa4>
 8002620:	2a73      	cmp	r2, #115	; 0x73
 8002622:	f000 80b4 	beq.w	800278e <_printf_i+0x1c2>
 8002626:	d808      	bhi.n	800263a <_printf_i+0x6e>
 8002628:	2a6f      	cmp	r2, #111	; 0x6f
 800262a:	d02a      	beq.n	8002682 <_printf_i+0xb6>
 800262c:	2a70      	cmp	r2, #112	; 0x70
 800262e:	d1e5      	bne.n	80025fc <_printf_i+0x30>
 8002630:	680a      	ldr	r2, [r1, #0]
 8002632:	f042 0220 	orr.w	r2, r2, #32
 8002636:	600a      	str	r2, [r1, #0]
 8002638:	e003      	b.n	8002642 <_printf_i+0x76>
 800263a:	2a75      	cmp	r2, #117	; 0x75
 800263c:	d021      	beq.n	8002682 <_printf_i+0xb6>
 800263e:	2a78      	cmp	r2, #120	; 0x78
 8002640:	d1dc      	bne.n	80025fc <_printf_i+0x30>
 8002642:	2278      	movs	r2, #120	; 0x78
 8002644:	496f      	ldr	r1, [pc, #444]	; (8002804 <_printf_i+0x238>)
 8002646:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800264a:	e064      	b.n	8002716 <_printf_i+0x14a>
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002652:	1d11      	adds	r1, r2, #4
 8002654:	6019      	str	r1, [r3, #0]
 8002656:	6813      	ldr	r3, [r2, #0]
 8002658:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800265c:	2301      	movs	r3, #1
 800265e:	e0a3      	b.n	80027a8 <_printf_i+0x1dc>
 8002660:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002664:	f102 0104 	add.w	r1, r2, #4
 8002668:	6019      	str	r1, [r3, #0]
 800266a:	d0d7      	beq.n	800261c <_printf_i+0x50>
 800266c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002670:	2b00      	cmp	r3, #0
 8002672:	da03      	bge.n	800267c <_printf_i+0xb0>
 8002674:	222d      	movs	r2, #45	; 0x2d
 8002676:	425b      	negs	r3, r3
 8002678:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800267c:	4962      	ldr	r1, [pc, #392]	; (8002808 <_printf_i+0x23c>)
 800267e:	220a      	movs	r2, #10
 8002680:	e017      	b.n	80026b2 <_printf_i+0xe6>
 8002682:	6820      	ldr	r0, [r4, #0]
 8002684:	6819      	ldr	r1, [r3, #0]
 8002686:	f010 0f80 	tst.w	r0, #128	; 0x80
 800268a:	d003      	beq.n	8002694 <_printf_i+0xc8>
 800268c:	1d08      	adds	r0, r1, #4
 800268e:	6018      	str	r0, [r3, #0]
 8002690:	680b      	ldr	r3, [r1, #0]
 8002692:	e006      	b.n	80026a2 <_printf_i+0xd6>
 8002694:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002698:	f101 0004 	add.w	r0, r1, #4
 800269c:	6018      	str	r0, [r3, #0]
 800269e:	d0f7      	beq.n	8002690 <_printf_i+0xc4>
 80026a0:	880b      	ldrh	r3, [r1, #0]
 80026a2:	2a6f      	cmp	r2, #111	; 0x6f
 80026a4:	bf14      	ite	ne
 80026a6:	220a      	movne	r2, #10
 80026a8:	2208      	moveq	r2, #8
 80026aa:	4957      	ldr	r1, [pc, #348]	; (8002808 <_printf_i+0x23c>)
 80026ac:	2000      	movs	r0, #0
 80026ae:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80026b2:	6865      	ldr	r5, [r4, #4]
 80026b4:	2d00      	cmp	r5, #0
 80026b6:	60a5      	str	r5, [r4, #8]
 80026b8:	f2c0 809c 	blt.w	80027f4 <_printf_i+0x228>
 80026bc:	6820      	ldr	r0, [r4, #0]
 80026be:	f020 0004 	bic.w	r0, r0, #4
 80026c2:	6020      	str	r0, [r4, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d13f      	bne.n	8002748 <_printf_i+0x17c>
 80026c8:	2d00      	cmp	r5, #0
 80026ca:	f040 8095 	bne.w	80027f8 <_printf_i+0x22c>
 80026ce:	4675      	mov	r5, lr
 80026d0:	2a08      	cmp	r2, #8
 80026d2:	d10b      	bne.n	80026ec <_printf_i+0x120>
 80026d4:	6823      	ldr	r3, [r4, #0]
 80026d6:	07da      	lsls	r2, r3, #31
 80026d8:	d508      	bpl.n	80026ec <_printf_i+0x120>
 80026da:	6923      	ldr	r3, [r4, #16]
 80026dc:	6862      	ldr	r2, [r4, #4]
 80026de:	429a      	cmp	r2, r3
 80026e0:	bfde      	ittt	le
 80026e2:	2330      	movle	r3, #48	; 0x30
 80026e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80026e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80026ec:	ebae 0305 	sub.w	r3, lr, r5
 80026f0:	6123      	str	r3, [r4, #16]
 80026f2:	f8cd 8000 	str.w	r8, [sp]
 80026f6:	463b      	mov	r3, r7
 80026f8:	aa03      	add	r2, sp, #12
 80026fa:	4621      	mov	r1, r4
 80026fc:	4630      	mov	r0, r6
 80026fe:	f7ff feed 	bl	80024dc <_printf_common>
 8002702:	3001      	adds	r0, #1
 8002704:	d155      	bne.n	80027b2 <_printf_i+0x1e6>
 8002706:	f04f 30ff 	mov.w	r0, #4294967295
 800270a:	b005      	add	sp, #20
 800270c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002710:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002714:	493c      	ldr	r1, [pc, #240]	; (8002808 <_printf_i+0x23c>)
 8002716:	6822      	ldr	r2, [r4, #0]
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800271e:	f100 0504 	add.w	r5, r0, #4
 8002722:	601d      	str	r5, [r3, #0]
 8002724:	d001      	beq.n	800272a <_printf_i+0x15e>
 8002726:	6803      	ldr	r3, [r0, #0]
 8002728:	e002      	b.n	8002730 <_printf_i+0x164>
 800272a:	0655      	lsls	r5, r2, #25
 800272c:	d5fb      	bpl.n	8002726 <_printf_i+0x15a>
 800272e:	8803      	ldrh	r3, [r0, #0]
 8002730:	07d0      	lsls	r0, r2, #31
 8002732:	bf44      	itt	mi
 8002734:	f042 0220 	orrmi.w	r2, r2, #32
 8002738:	6022      	strmi	r2, [r4, #0]
 800273a:	b91b      	cbnz	r3, 8002744 <_printf_i+0x178>
 800273c:	6822      	ldr	r2, [r4, #0]
 800273e:	f022 0220 	bic.w	r2, r2, #32
 8002742:	6022      	str	r2, [r4, #0]
 8002744:	2210      	movs	r2, #16
 8002746:	e7b1      	b.n	80026ac <_printf_i+0xe0>
 8002748:	4675      	mov	r5, lr
 800274a:	fbb3 f0f2 	udiv	r0, r3, r2
 800274e:	fb02 3310 	mls	r3, r2, r0, r3
 8002752:	5ccb      	ldrb	r3, [r1, r3]
 8002754:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002758:	4603      	mov	r3, r0
 800275a:	2800      	cmp	r0, #0
 800275c:	d1f5      	bne.n	800274a <_printf_i+0x17e>
 800275e:	e7b7      	b.n	80026d0 <_printf_i+0x104>
 8002760:	6808      	ldr	r0, [r1, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002768:	6949      	ldr	r1, [r1, #20]
 800276a:	d004      	beq.n	8002776 <_printf_i+0x1aa>
 800276c:	1d10      	adds	r0, r2, #4
 800276e:	6018      	str	r0, [r3, #0]
 8002770:	6813      	ldr	r3, [r2, #0]
 8002772:	6019      	str	r1, [r3, #0]
 8002774:	e007      	b.n	8002786 <_printf_i+0x1ba>
 8002776:	f010 0f40 	tst.w	r0, #64	; 0x40
 800277a:	f102 0004 	add.w	r0, r2, #4
 800277e:	6018      	str	r0, [r3, #0]
 8002780:	6813      	ldr	r3, [r2, #0]
 8002782:	d0f6      	beq.n	8002772 <_printf_i+0x1a6>
 8002784:	8019      	strh	r1, [r3, #0]
 8002786:	2300      	movs	r3, #0
 8002788:	4675      	mov	r5, lr
 800278a:	6123      	str	r3, [r4, #16]
 800278c:	e7b1      	b.n	80026f2 <_printf_i+0x126>
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	1d11      	adds	r1, r2, #4
 8002792:	6019      	str	r1, [r3, #0]
 8002794:	6815      	ldr	r5, [r2, #0]
 8002796:	2100      	movs	r1, #0
 8002798:	6862      	ldr	r2, [r4, #4]
 800279a:	4628      	mov	r0, r5
 800279c:	f000 f836 	bl	800280c <memchr>
 80027a0:	b108      	cbz	r0, 80027a6 <_printf_i+0x1da>
 80027a2:	1b40      	subs	r0, r0, r5
 80027a4:	6060      	str	r0, [r4, #4]
 80027a6:	6863      	ldr	r3, [r4, #4]
 80027a8:	6123      	str	r3, [r4, #16]
 80027aa:	2300      	movs	r3, #0
 80027ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027b0:	e79f      	b.n	80026f2 <_printf_i+0x126>
 80027b2:	6923      	ldr	r3, [r4, #16]
 80027b4:	462a      	mov	r2, r5
 80027b6:	4639      	mov	r1, r7
 80027b8:	4630      	mov	r0, r6
 80027ba:	47c0      	blx	r8
 80027bc:	3001      	adds	r0, #1
 80027be:	d0a2      	beq.n	8002706 <_printf_i+0x13a>
 80027c0:	6823      	ldr	r3, [r4, #0]
 80027c2:	079b      	lsls	r3, r3, #30
 80027c4:	d507      	bpl.n	80027d6 <_printf_i+0x20a>
 80027c6:	2500      	movs	r5, #0
 80027c8:	f104 0919 	add.w	r9, r4, #25
 80027cc:	68e3      	ldr	r3, [r4, #12]
 80027ce:	9a03      	ldr	r2, [sp, #12]
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	429d      	cmp	r5, r3
 80027d4:	db05      	blt.n	80027e2 <_printf_i+0x216>
 80027d6:	68e0      	ldr	r0, [r4, #12]
 80027d8:	9b03      	ldr	r3, [sp, #12]
 80027da:	4298      	cmp	r0, r3
 80027dc:	bfb8      	it	lt
 80027de:	4618      	movlt	r0, r3
 80027e0:	e793      	b.n	800270a <_printf_i+0x13e>
 80027e2:	2301      	movs	r3, #1
 80027e4:	464a      	mov	r2, r9
 80027e6:	4639      	mov	r1, r7
 80027e8:	4630      	mov	r0, r6
 80027ea:	47c0      	blx	r8
 80027ec:	3001      	adds	r0, #1
 80027ee:	d08a      	beq.n	8002706 <_printf_i+0x13a>
 80027f0:	3501      	adds	r5, #1
 80027f2:	e7eb      	b.n	80027cc <_printf_i+0x200>
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1a7      	bne.n	8002748 <_printf_i+0x17c>
 80027f8:	780b      	ldrb	r3, [r1, #0]
 80027fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002802:	e765      	b.n	80026d0 <_printf_i+0x104>
 8002804:	08002ae9 	.word	0x08002ae9
 8002808:	08002ad8 	.word	0x08002ad8

0800280c <memchr>:
 800280c:	b510      	push	{r4, lr}
 800280e:	b2c9      	uxtb	r1, r1
 8002810:	4402      	add	r2, r0
 8002812:	4290      	cmp	r0, r2
 8002814:	4603      	mov	r3, r0
 8002816:	d101      	bne.n	800281c <memchr+0x10>
 8002818:	2000      	movs	r0, #0
 800281a:	bd10      	pop	{r4, pc}
 800281c:	781c      	ldrb	r4, [r3, #0]
 800281e:	3001      	adds	r0, #1
 8002820:	428c      	cmp	r4, r1
 8002822:	d1f6      	bne.n	8002812 <memchr+0x6>
 8002824:	4618      	mov	r0, r3
 8002826:	bd10      	pop	{r4, pc}

08002828 <memcpy>:
 8002828:	b510      	push	{r4, lr}
 800282a:	1e43      	subs	r3, r0, #1
 800282c:	440a      	add	r2, r1
 800282e:	4291      	cmp	r1, r2
 8002830:	d100      	bne.n	8002834 <memcpy+0xc>
 8002832:	bd10      	pop	{r4, pc}
 8002834:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002838:	f803 4f01 	strb.w	r4, [r3, #1]!
 800283c:	e7f7      	b.n	800282e <memcpy+0x6>

0800283e <memmove>:
 800283e:	4288      	cmp	r0, r1
 8002840:	b510      	push	{r4, lr}
 8002842:	eb01 0302 	add.w	r3, r1, r2
 8002846:	d803      	bhi.n	8002850 <memmove+0x12>
 8002848:	1e42      	subs	r2, r0, #1
 800284a:	4299      	cmp	r1, r3
 800284c:	d10c      	bne.n	8002868 <memmove+0x2a>
 800284e:	bd10      	pop	{r4, pc}
 8002850:	4298      	cmp	r0, r3
 8002852:	d2f9      	bcs.n	8002848 <memmove+0xa>
 8002854:	1881      	adds	r1, r0, r2
 8002856:	1ad2      	subs	r2, r2, r3
 8002858:	42d3      	cmn	r3, r2
 800285a:	d100      	bne.n	800285e <memmove+0x20>
 800285c:	bd10      	pop	{r4, pc}
 800285e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002862:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002866:	e7f7      	b.n	8002858 <memmove+0x1a>
 8002868:	f811 4b01 	ldrb.w	r4, [r1], #1
 800286c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002870:	e7eb      	b.n	800284a <memmove+0xc>
	...

08002874 <_free_r>:
 8002874:	b538      	push	{r3, r4, r5, lr}
 8002876:	4605      	mov	r5, r0
 8002878:	2900      	cmp	r1, #0
 800287a:	d043      	beq.n	8002904 <_free_r+0x90>
 800287c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002880:	1f0c      	subs	r4, r1, #4
 8002882:	2b00      	cmp	r3, #0
 8002884:	bfb8      	it	lt
 8002886:	18e4      	addlt	r4, r4, r3
 8002888:	f000 f8d4 	bl	8002a34 <__malloc_lock>
 800288c:	4a1e      	ldr	r2, [pc, #120]	; (8002908 <_free_r+0x94>)
 800288e:	6813      	ldr	r3, [r2, #0]
 8002890:	4610      	mov	r0, r2
 8002892:	b933      	cbnz	r3, 80028a2 <_free_r+0x2e>
 8002894:	6063      	str	r3, [r4, #4]
 8002896:	6014      	str	r4, [r2, #0]
 8002898:	4628      	mov	r0, r5
 800289a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800289e:	f000 b8ca 	b.w	8002a36 <__malloc_unlock>
 80028a2:	42a3      	cmp	r3, r4
 80028a4:	d90b      	bls.n	80028be <_free_r+0x4a>
 80028a6:	6821      	ldr	r1, [r4, #0]
 80028a8:	1862      	adds	r2, r4, r1
 80028aa:	4293      	cmp	r3, r2
 80028ac:	bf01      	itttt	eq
 80028ae:	681a      	ldreq	r2, [r3, #0]
 80028b0:	685b      	ldreq	r3, [r3, #4]
 80028b2:	1852      	addeq	r2, r2, r1
 80028b4:	6022      	streq	r2, [r4, #0]
 80028b6:	6063      	str	r3, [r4, #4]
 80028b8:	6004      	str	r4, [r0, #0]
 80028ba:	e7ed      	b.n	8002898 <_free_r+0x24>
 80028bc:	4613      	mov	r3, r2
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	b10a      	cbz	r2, 80028c6 <_free_r+0x52>
 80028c2:	42a2      	cmp	r2, r4
 80028c4:	d9fa      	bls.n	80028bc <_free_r+0x48>
 80028c6:	6819      	ldr	r1, [r3, #0]
 80028c8:	1858      	adds	r0, r3, r1
 80028ca:	42a0      	cmp	r0, r4
 80028cc:	d10b      	bne.n	80028e6 <_free_r+0x72>
 80028ce:	6820      	ldr	r0, [r4, #0]
 80028d0:	4401      	add	r1, r0
 80028d2:	1858      	adds	r0, r3, r1
 80028d4:	4282      	cmp	r2, r0
 80028d6:	6019      	str	r1, [r3, #0]
 80028d8:	d1de      	bne.n	8002898 <_free_r+0x24>
 80028da:	6810      	ldr	r0, [r2, #0]
 80028dc:	6852      	ldr	r2, [r2, #4]
 80028de:	4401      	add	r1, r0
 80028e0:	6019      	str	r1, [r3, #0]
 80028e2:	605a      	str	r2, [r3, #4]
 80028e4:	e7d8      	b.n	8002898 <_free_r+0x24>
 80028e6:	d902      	bls.n	80028ee <_free_r+0x7a>
 80028e8:	230c      	movs	r3, #12
 80028ea:	602b      	str	r3, [r5, #0]
 80028ec:	e7d4      	b.n	8002898 <_free_r+0x24>
 80028ee:	6820      	ldr	r0, [r4, #0]
 80028f0:	1821      	adds	r1, r4, r0
 80028f2:	428a      	cmp	r2, r1
 80028f4:	bf01      	itttt	eq
 80028f6:	6811      	ldreq	r1, [r2, #0]
 80028f8:	6852      	ldreq	r2, [r2, #4]
 80028fa:	1809      	addeq	r1, r1, r0
 80028fc:	6021      	streq	r1, [r4, #0]
 80028fe:	6062      	str	r2, [r4, #4]
 8002900:	605c      	str	r4, [r3, #4]
 8002902:	e7c9      	b.n	8002898 <_free_r+0x24>
 8002904:	bd38      	pop	{r3, r4, r5, pc}
 8002906:	bf00      	nop
 8002908:	200000a8 	.word	0x200000a8

0800290c <_malloc_r>:
 800290c:	b570      	push	{r4, r5, r6, lr}
 800290e:	1ccd      	adds	r5, r1, #3
 8002910:	f025 0503 	bic.w	r5, r5, #3
 8002914:	3508      	adds	r5, #8
 8002916:	2d0c      	cmp	r5, #12
 8002918:	bf38      	it	cc
 800291a:	250c      	movcc	r5, #12
 800291c:	2d00      	cmp	r5, #0
 800291e:	4606      	mov	r6, r0
 8002920:	db01      	blt.n	8002926 <_malloc_r+0x1a>
 8002922:	42a9      	cmp	r1, r5
 8002924:	d903      	bls.n	800292e <_malloc_r+0x22>
 8002926:	230c      	movs	r3, #12
 8002928:	6033      	str	r3, [r6, #0]
 800292a:	2000      	movs	r0, #0
 800292c:	bd70      	pop	{r4, r5, r6, pc}
 800292e:	f000 f881 	bl	8002a34 <__malloc_lock>
 8002932:	4a23      	ldr	r2, [pc, #140]	; (80029c0 <_malloc_r+0xb4>)
 8002934:	6814      	ldr	r4, [r2, #0]
 8002936:	4621      	mov	r1, r4
 8002938:	b991      	cbnz	r1, 8002960 <_malloc_r+0x54>
 800293a:	4c22      	ldr	r4, [pc, #136]	; (80029c4 <_malloc_r+0xb8>)
 800293c:	6823      	ldr	r3, [r4, #0]
 800293e:	b91b      	cbnz	r3, 8002948 <_malloc_r+0x3c>
 8002940:	4630      	mov	r0, r6
 8002942:	f000 f867 	bl	8002a14 <_sbrk_r>
 8002946:	6020      	str	r0, [r4, #0]
 8002948:	4629      	mov	r1, r5
 800294a:	4630      	mov	r0, r6
 800294c:	f000 f862 	bl	8002a14 <_sbrk_r>
 8002950:	1c43      	adds	r3, r0, #1
 8002952:	d126      	bne.n	80029a2 <_malloc_r+0x96>
 8002954:	230c      	movs	r3, #12
 8002956:	4630      	mov	r0, r6
 8002958:	6033      	str	r3, [r6, #0]
 800295a:	f000 f86c 	bl	8002a36 <__malloc_unlock>
 800295e:	e7e4      	b.n	800292a <_malloc_r+0x1e>
 8002960:	680b      	ldr	r3, [r1, #0]
 8002962:	1b5b      	subs	r3, r3, r5
 8002964:	d41a      	bmi.n	800299c <_malloc_r+0x90>
 8002966:	2b0b      	cmp	r3, #11
 8002968:	d90f      	bls.n	800298a <_malloc_r+0x7e>
 800296a:	600b      	str	r3, [r1, #0]
 800296c:	18cc      	adds	r4, r1, r3
 800296e:	50cd      	str	r5, [r1, r3]
 8002970:	4630      	mov	r0, r6
 8002972:	f000 f860 	bl	8002a36 <__malloc_unlock>
 8002976:	f104 000b 	add.w	r0, r4, #11
 800297a:	1d23      	adds	r3, r4, #4
 800297c:	f020 0007 	bic.w	r0, r0, #7
 8002980:	1ac3      	subs	r3, r0, r3
 8002982:	d01b      	beq.n	80029bc <_malloc_r+0xb0>
 8002984:	425a      	negs	r2, r3
 8002986:	50e2      	str	r2, [r4, r3]
 8002988:	bd70      	pop	{r4, r5, r6, pc}
 800298a:	428c      	cmp	r4, r1
 800298c:	bf0b      	itete	eq
 800298e:	6863      	ldreq	r3, [r4, #4]
 8002990:	684b      	ldrne	r3, [r1, #4]
 8002992:	6013      	streq	r3, [r2, #0]
 8002994:	6063      	strne	r3, [r4, #4]
 8002996:	bf18      	it	ne
 8002998:	460c      	movne	r4, r1
 800299a:	e7e9      	b.n	8002970 <_malloc_r+0x64>
 800299c:	460c      	mov	r4, r1
 800299e:	6849      	ldr	r1, [r1, #4]
 80029a0:	e7ca      	b.n	8002938 <_malloc_r+0x2c>
 80029a2:	1cc4      	adds	r4, r0, #3
 80029a4:	f024 0403 	bic.w	r4, r4, #3
 80029a8:	42a0      	cmp	r0, r4
 80029aa:	d005      	beq.n	80029b8 <_malloc_r+0xac>
 80029ac:	1a21      	subs	r1, r4, r0
 80029ae:	4630      	mov	r0, r6
 80029b0:	f000 f830 	bl	8002a14 <_sbrk_r>
 80029b4:	3001      	adds	r0, #1
 80029b6:	d0cd      	beq.n	8002954 <_malloc_r+0x48>
 80029b8:	6025      	str	r5, [r4, #0]
 80029ba:	e7d9      	b.n	8002970 <_malloc_r+0x64>
 80029bc:	bd70      	pop	{r4, r5, r6, pc}
 80029be:	bf00      	nop
 80029c0:	200000a8 	.word	0x200000a8
 80029c4:	200000ac 	.word	0x200000ac

080029c8 <_realloc_r>:
 80029c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ca:	4607      	mov	r7, r0
 80029cc:	4614      	mov	r4, r2
 80029ce:	460e      	mov	r6, r1
 80029d0:	b921      	cbnz	r1, 80029dc <_realloc_r+0x14>
 80029d2:	4611      	mov	r1, r2
 80029d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80029d8:	f7ff bf98 	b.w	800290c <_malloc_r>
 80029dc:	b922      	cbnz	r2, 80029e8 <_realloc_r+0x20>
 80029de:	f7ff ff49 	bl	8002874 <_free_r>
 80029e2:	4625      	mov	r5, r4
 80029e4:	4628      	mov	r0, r5
 80029e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029e8:	f000 f826 	bl	8002a38 <_malloc_usable_size_r>
 80029ec:	4284      	cmp	r4, r0
 80029ee:	d90f      	bls.n	8002a10 <_realloc_r+0x48>
 80029f0:	4621      	mov	r1, r4
 80029f2:	4638      	mov	r0, r7
 80029f4:	f7ff ff8a 	bl	800290c <_malloc_r>
 80029f8:	4605      	mov	r5, r0
 80029fa:	2800      	cmp	r0, #0
 80029fc:	d0f2      	beq.n	80029e4 <_realloc_r+0x1c>
 80029fe:	4631      	mov	r1, r6
 8002a00:	4622      	mov	r2, r4
 8002a02:	f7ff ff11 	bl	8002828 <memcpy>
 8002a06:	4631      	mov	r1, r6
 8002a08:	4638      	mov	r0, r7
 8002a0a:	f7ff ff33 	bl	8002874 <_free_r>
 8002a0e:	e7e9      	b.n	80029e4 <_realloc_r+0x1c>
 8002a10:	4635      	mov	r5, r6
 8002a12:	e7e7      	b.n	80029e4 <_realloc_r+0x1c>

08002a14 <_sbrk_r>:
 8002a14:	b538      	push	{r3, r4, r5, lr}
 8002a16:	2300      	movs	r3, #0
 8002a18:	4c05      	ldr	r4, [pc, #20]	; (8002a30 <_sbrk_r+0x1c>)
 8002a1a:	4605      	mov	r5, r0
 8002a1c:	4608      	mov	r0, r1
 8002a1e:	6023      	str	r3, [r4, #0]
 8002a20:	f7ff faa4 	bl	8001f6c <_sbrk>
 8002a24:	1c43      	adds	r3, r0, #1
 8002a26:	d102      	bne.n	8002a2e <_sbrk_r+0x1a>
 8002a28:	6823      	ldr	r3, [r4, #0]
 8002a2a:	b103      	cbz	r3, 8002a2e <_sbrk_r+0x1a>
 8002a2c:	602b      	str	r3, [r5, #0]
 8002a2e:	bd38      	pop	{r3, r4, r5, pc}
 8002a30:	20000288 	.word	0x20000288

08002a34 <__malloc_lock>:
 8002a34:	4770      	bx	lr

08002a36 <__malloc_unlock>:
 8002a36:	4770      	bx	lr

08002a38 <_malloc_usable_size_r>:
 8002a38:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002a3c:	2800      	cmp	r0, #0
 8002a3e:	f1a0 0004 	sub.w	r0, r0, #4
 8002a42:	bfbc      	itt	lt
 8002a44:	580b      	ldrlt	r3, [r1, r0]
 8002a46:	18c0      	addlt	r0, r0, r3
 8002a48:	4770      	bx	lr
	...

08002a4c <_init>:
 8002a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4e:	bf00      	nop
 8002a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a52:	bc08      	pop	{r3}
 8002a54:	469e      	mov	lr, r3
 8002a56:	4770      	bx	lr

08002a58 <_fini>:
 8002a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5a:	bf00      	nop
 8002a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a5e:	bc08      	pop	{r3}
 8002a60:	469e      	mov	lr, r3
 8002a62:	4770      	bx	lr
