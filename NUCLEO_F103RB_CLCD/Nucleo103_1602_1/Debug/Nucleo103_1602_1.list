
Nucleo103_1602_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000222c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08002338  08002338  00012338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002418  08002418  00012418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800241c  0800241c  0001241c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08002420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000a4  20000070  08002490  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000114  08002490  00020114  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   00009056  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001d40  00000000  00000000  000290ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000033dd  00000000  00000000  0002ae2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000006b0  00000000  00000000  0002e210  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000880  00000000  00000000  0002e8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003a80  00000000  00000000  0002f140  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000276c  00000000  00000000  00032bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003532c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001844  00000000  00000000  000353a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002320 	.word	0x08002320

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002320 	.word	0x08002320

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f9b8 	bl	80004d8 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f97a 	bl	8000470 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f953 	bl	800044c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 f86e 	bl	800128c <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	2000009c 	.word	0x2000009c

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000200:	2300      	movs	r3, #0
{ 
 8000202:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000204:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000206:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800020a:	2b01      	cmp	r3, #1
 800020c:	d074      	beq.n	80002f8 <HAL_ADC_ConfigChannel+0xf8>
 800020e:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000210:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000212:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000216:	2d06      	cmp	r5, #6
 8000218:	6802      	ldr	r2, [r0, #0]
 800021a:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800021e:	680c      	ldr	r4, [r1, #0]
 8000220:	d825      	bhi.n	800026e <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000222:	442b      	add	r3, r5
 8000224:	251f      	movs	r5, #31
 8000226:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000228:	3b05      	subs	r3, #5
 800022a:	409d      	lsls	r5, r3
 800022c:	ea26 0505 	bic.w	r5, r6, r5
 8000230:	fa04 f303 	lsl.w	r3, r4, r3
 8000234:	432b      	orrs	r3, r5
 8000236:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000238:	2c09      	cmp	r4, #9
 800023a:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800023e:	688d      	ldr	r5, [r1, #8]
 8000240:	d92f      	bls.n	80002a2 <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000242:	2607      	movs	r6, #7
 8000244:	4423      	add	r3, r4
 8000246:	68d1      	ldr	r1, [r2, #12]
 8000248:	3b1e      	subs	r3, #30
 800024a:	409e      	lsls	r6, r3
 800024c:	ea21 0106 	bic.w	r1, r1, r6
 8000250:	fa05 f303 	lsl.w	r3, r5, r3
 8000254:	430b      	orrs	r3, r1
 8000256:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000258:	f1a4 0310 	sub.w	r3, r4, #16
 800025c:	2b01      	cmp	r3, #1
 800025e:	d92b      	bls.n	80002b8 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000260:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000262:	2200      	movs	r2, #0
 8000264:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000268:	4618      	mov	r0, r3
 800026a:	b002      	add	sp, #8
 800026c:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800026e:	2d0c      	cmp	r5, #12
 8000270:	d80b      	bhi.n	800028a <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000272:	442b      	add	r3, r5
 8000274:	251f      	movs	r5, #31
 8000276:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000278:	3b23      	subs	r3, #35	; 0x23
 800027a:	409d      	lsls	r5, r3
 800027c:	ea26 0505 	bic.w	r5, r6, r5
 8000280:	fa04 f303 	lsl.w	r3, r4, r3
 8000284:	432b      	orrs	r3, r5
 8000286:	6313      	str	r3, [r2, #48]	; 0x30
 8000288:	e7d6      	b.n	8000238 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800028a:	442b      	add	r3, r5
 800028c:	251f      	movs	r5, #31
 800028e:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000290:	3b41      	subs	r3, #65	; 0x41
 8000292:	409d      	lsls	r5, r3
 8000294:	ea26 0505 	bic.w	r5, r6, r5
 8000298:	fa04 f303 	lsl.w	r3, r4, r3
 800029c:	432b      	orrs	r3, r5
 800029e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80002a0:	e7ca      	b.n	8000238 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80002a2:	2607      	movs	r6, #7
 80002a4:	6911      	ldr	r1, [r2, #16]
 80002a6:	4423      	add	r3, r4
 80002a8:	409e      	lsls	r6, r3
 80002aa:	ea21 0106 	bic.w	r1, r1, r6
 80002ae:	fa05 f303 	lsl.w	r3, r5, r3
 80002b2:	430b      	orrs	r3, r1
 80002b4:	6113      	str	r3, [r2, #16]
 80002b6:	e7cf      	b.n	8000258 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 80002b8:	4b10      	ldr	r3, [pc, #64]	; (80002fc <HAL_ADC_ConfigChannel+0xfc>)
 80002ba:	429a      	cmp	r2, r3
 80002bc:	d116      	bne.n	80002ec <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80002be:	6893      	ldr	r3, [r2, #8]
 80002c0:	021b      	lsls	r3, r3, #8
 80002c2:	d4cd      	bmi.n	8000260 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80002c4:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80002c6:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80002c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002cc:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80002ce:	d1c7      	bne.n	8000260 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80002d0:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <HAL_ADC_ConfigChannel+0x100>)
 80002d2:	4a0c      	ldr	r2, [pc, #48]	; (8000304 <HAL_ADC_ConfigChannel+0x104>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80002da:	230a      	movs	r3, #10
 80002dc:	4353      	muls	r3, r2
            wait_loop_index--;
 80002de:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80002e0:	9b01      	ldr	r3, [sp, #4]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d0bc      	beq.n	8000260 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80002e6:	9b01      	ldr	r3, [sp, #4]
 80002e8:	3b01      	subs	r3, #1
 80002ea:	e7f8      	b.n	80002de <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80002ee:	f043 0320 	orr.w	r3, r3, #32
 80002f2:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80002f4:	2301      	movs	r3, #1
 80002f6:	e7b4      	b.n	8000262 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80002f8:	2302      	movs	r3, #2
 80002fa:	e7b5      	b.n	8000268 <HAL_ADC_ConfigChannel+0x68>
 80002fc:	40012400 	.word	0x40012400
 8000300:	20000008 	.word	0x20000008
 8000304:	000f4240 	.word	0x000f4240

08000308 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000308:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800030a:	6803      	ldr	r3, [r0, #0]
{
 800030c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800030e:	689a      	ldr	r2, [r3, #8]
 8000310:	07d2      	lsls	r2, r2, #31
 8000312:	d401      	bmi.n	8000318 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000314:	2000      	movs	r0, #0
 8000316:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000318:	689a      	ldr	r2, [r3, #8]
 800031a:	f022 0201 	bic.w	r2, r2, #1
 800031e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000320:	f7ff ff56 	bl	80001d0 <HAL_GetTick>
 8000324:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000326:	6823      	ldr	r3, [r4, #0]
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	07db      	lsls	r3, r3, #31
 800032c:	d5f2      	bpl.n	8000314 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800032e:	f7ff ff4f 	bl	80001d0 <HAL_GetTick>
 8000332:	1b40      	subs	r0, r0, r5
 8000334:	2802      	cmp	r0, #2
 8000336:	d9f6      	bls.n	8000326 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000338:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800033a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800033c:	f043 0310 	orr.w	r3, r3, #16
 8000340:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000342:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000344:	f043 0301 	orr.w	r3, r3, #1
 8000348:	62e3      	str	r3, [r4, #44]	; 0x2c
 800034a:	bd38      	pop	{r3, r4, r5, pc}

0800034c <HAL_ADC_Init>:
{
 800034c:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800034e:	4604      	mov	r4, r0
 8000350:	2800      	cmp	r0, #0
 8000352:	d071      	beq.n	8000438 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000354:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000356:	b923      	cbnz	r3, 8000362 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000358:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800035a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800035e:	f000 ffb7 	bl	80012d0 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000362:	4620      	mov	r0, r4
 8000364:	f7ff ffd0 	bl	8000308 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000368:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800036a:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800036e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000370:	d164      	bne.n	800043c <HAL_ADC_Init+0xf0>
 8000372:	2800      	cmp	r0, #0
 8000374:	d162      	bne.n	800043c <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000376:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000378:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800037c:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800037e:	f023 0302 	bic.w	r3, r3, #2
 8000382:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000386:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000388:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800038a:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800038c:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800038e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000392:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000396:	d038      	beq.n	800040a <HAL_ADC_Init+0xbe>
 8000398:	2901      	cmp	r1, #1
 800039a:	bf14      	ite	ne
 800039c:	4606      	movne	r6, r0
 800039e:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80003a2:	7d25      	ldrb	r5, [r4, #20]
 80003a4:	2d01      	cmp	r5, #1
 80003a6:	d107      	bne.n	80003b8 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d130      	bne.n	800040e <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80003ac:	69a3      	ldr	r3, [r4, #24]
 80003ae:	3b01      	subs	r3, #1
 80003b0:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80003b4:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80003b8:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80003ba:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80003be:	685d      	ldr	r5, [r3, #4]
 80003c0:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80003c4:	ea45 0506 	orr.w	r5, r5, r6
 80003c8:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80003ca:	689e      	ldr	r6, [r3, #8]
 80003cc:	4d1d      	ldr	r5, [pc, #116]	; (8000444 <HAL_ADC_Init+0xf8>)
 80003ce:	ea05 0506 	and.w	r5, r5, r6
 80003d2:	ea45 0502 	orr.w	r5, r5, r2
 80003d6:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80003d8:	d001      	beq.n	80003de <HAL_ADC_Init+0x92>
 80003da:	2901      	cmp	r1, #1
 80003dc:	d120      	bne.n	8000420 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80003de:	6921      	ldr	r1, [r4, #16]
 80003e0:	3901      	subs	r1, #1
 80003e2:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80003e4:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80003e6:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80003ea:	4329      	orrs	r1, r5
 80003ec:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003ee:	6899      	ldr	r1, [r3, #8]
 80003f0:	4b15      	ldr	r3, [pc, #84]	; (8000448 <HAL_ADC_Init+0xfc>)
 80003f2:	400b      	ands	r3, r1
 80003f4:	429a      	cmp	r2, r3
 80003f6:	d115      	bne.n	8000424 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80003f8:	2300      	movs	r3, #0
 80003fa:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80003fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003fe:	f023 0303 	bic.w	r3, r3, #3
 8000402:	f043 0301 	orr.w	r3, r3, #1
 8000406:	62a3      	str	r3, [r4, #40]	; 0x28
 8000408:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800040a:	460e      	mov	r6, r1
 800040c:	e7c9      	b.n	80003a2 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800040e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000410:	f043 0320 	orr.w	r3, r3, #32
 8000414:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000416:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800041e:	e7cb      	b.n	80003b8 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000420:	2100      	movs	r1, #0
 8000422:	e7df      	b.n	80003e4 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000424:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000426:	f023 0312 	bic.w	r3, r3, #18
 800042a:	f043 0310 	orr.w	r3, r3, #16
 800042e:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000430:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000432:	f043 0301 	orr.w	r3, r3, #1
 8000436:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000438:	2001      	movs	r0, #1
}
 800043a:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800043c:	f043 0310 	orr.w	r3, r3, #16
 8000440:	62a3      	str	r3, [r4, #40]	; 0x28
 8000442:	e7f9      	b.n	8000438 <HAL_ADC_Init+0xec>
 8000444:	ffe1f7fd 	.word	0xffe1f7fd
 8000448:	ff1f0efe 	.word	0xff1f0efe

0800044c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800044c:	4a07      	ldr	r2, [pc, #28]	; (800046c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800044e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000450:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000452:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000456:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800045a:	041b      	lsls	r3, r3, #16
 800045c:	0c1b      	lsrs	r3, r3, #16
 800045e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000466:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000468:	60d3      	str	r3, [r2, #12]
 800046a:	4770      	bx	lr
 800046c:	e000ed00 	.word	0xe000ed00

08000470 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000470:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	68dc      	ldr	r4, [r3, #12]
 8000476:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800047a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800047e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000480:	2b04      	cmp	r3, #4
 8000482:	bf28      	it	cs
 8000484:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000486:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000488:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800048c:	bf98      	it	ls
 800048e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000490:	fa05 f303 	lsl.w	r3, r5, r3
 8000494:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000498:	bf88      	it	hi
 800049a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800049c:	4019      	ands	r1, r3
 800049e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004a0:	fa05 f404 	lsl.w	r4, r5, r4
 80004a4:	3c01      	subs	r4, #1
 80004a6:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80004a8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004aa:	ea42 0201 	orr.w	r2, r2, r1
 80004ae:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b2:	bfa9      	itett	ge
 80004b4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b8:	4b06      	ldrlt	r3, [pc, #24]	; (80004d4 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ba:	b2d2      	uxtbge	r2, r2
 80004bc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004c0:	bfbb      	ittet	lt
 80004c2:	f000 000f 	andlt.w	r0, r0, #15
 80004c6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004c8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004cc:	541a      	strblt	r2, [r3, r0]
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	e000ed00 	.word	0xe000ed00
 80004d4:	e000ed14 	.word	0xe000ed14

080004d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004d8:	3801      	subs	r0, #1
 80004da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80004de:	d20a      	bcs.n	80004f6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004e0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004e2:	4b06      	ldr	r3, [pc, #24]	; (80004fc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004e6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004e8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004ec:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004ee:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004f0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80004f6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	e000e010 	.word	0xe000e010
 8000500:	e000ed00 	.word	0xe000ed00

08000504 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000508:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800050a:	4626      	mov	r6, r4
 800050c:	4b66      	ldr	r3, [pc, #408]	; (80006a8 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800050e:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 80006b8 <HAL_GPIO_Init+0x1b4>
 8000512:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 80006bc <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000516:	680a      	ldr	r2, [r1, #0]
 8000518:	fa32 f506 	lsrs.w	r5, r2, r6
 800051c:	d102      	bne.n	8000524 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 800051e:	b003      	add	sp, #12
 8000520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000524:	f04f 0801 	mov.w	r8, #1
 8000528:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800052c:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000530:	4590      	cmp	r8, r2
 8000532:	d17f      	bne.n	8000634 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8000534:	684d      	ldr	r5, [r1, #4]
 8000536:	2d12      	cmp	r5, #18
 8000538:	f000 80aa 	beq.w	8000690 <HAL_GPIO_Init+0x18c>
 800053c:	f200 8083 	bhi.w	8000646 <HAL_GPIO_Init+0x142>
 8000540:	2d02      	cmp	r5, #2
 8000542:	f000 80a2 	beq.w	800068a <HAL_GPIO_Init+0x186>
 8000546:	d877      	bhi.n	8000638 <HAL_GPIO_Init+0x134>
 8000548:	2d00      	cmp	r5, #0
 800054a:	f000 8089 	beq.w	8000660 <HAL_GPIO_Init+0x15c>
 800054e:	2d01      	cmp	r5, #1
 8000550:	f000 8099 	beq.w	8000686 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000554:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000558:	2aff      	cmp	r2, #255	; 0xff
 800055a:	bf93      	iteet	ls
 800055c:	4682      	movls	sl, r0
 800055e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000562:	3d08      	subhi	r5, #8
 8000564:	f8d0 b000 	ldrls.w	fp, [r0]
 8000568:	bf92      	itee	ls
 800056a:	00b5      	lslls	r5, r6, #2
 800056c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000570:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000572:	fa09 f805 	lsl.w	r8, r9, r5
 8000576:	ea2b 0808 	bic.w	r8, fp, r8
 800057a:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800057e:	bf88      	it	hi
 8000580:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000584:	ea48 0505 	orr.w	r5, r8, r5
 8000588:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800058c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000590:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000594:	d04e      	beq.n	8000634 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000596:	4d45      	ldr	r5, [pc, #276]	; (80006ac <HAL_GPIO_Init+0x1a8>)
 8000598:	4f44      	ldr	r7, [pc, #272]	; (80006ac <HAL_GPIO_Init+0x1a8>)
 800059a:	69ad      	ldr	r5, [r5, #24]
 800059c:	f026 0803 	bic.w	r8, r6, #3
 80005a0:	f045 0501 	orr.w	r5, r5, #1
 80005a4:	61bd      	str	r5, [r7, #24]
 80005a6:	69bd      	ldr	r5, [r7, #24]
 80005a8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80005ac:	f005 0501 	and.w	r5, r5, #1
 80005b0:	9501      	str	r5, [sp, #4]
 80005b2:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005b6:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005ba:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005bc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80005c0:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005c4:	fa09 f90b 	lsl.w	r9, r9, fp
 80005c8:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005cc:	4d38      	ldr	r5, [pc, #224]	; (80006b0 <HAL_GPIO_Init+0x1ac>)
 80005ce:	42a8      	cmp	r0, r5
 80005d0:	d063      	beq.n	800069a <HAL_GPIO_Init+0x196>
 80005d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005d6:	42a8      	cmp	r0, r5
 80005d8:	d061      	beq.n	800069e <HAL_GPIO_Init+0x19a>
 80005da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005de:	42a8      	cmp	r0, r5
 80005e0:	d05f      	beq.n	80006a2 <HAL_GPIO_Init+0x19e>
 80005e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005e6:	42a8      	cmp	r0, r5
 80005e8:	bf0c      	ite	eq
 80005ea:	2503      	moveq	r5, #3
 80005ec:	2504      	movne	r5, #4
 80005ee:	fa05 f50b 	lsl.w	r5, r5, fp
 80005f2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80005f6:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80005fa:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005fc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000600:	bf14      	ite	ne
 8000602:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000604:	4395      	biceq	r5, r2
 8000606:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000608:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800060a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800060e:	bf14      	ite	ne
 8000610:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000612:	4395      	biceq	r5, r2
 8000614:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000616:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000618:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800061c:	bf14      	ite	ne
 800061e:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000620:	4395      	biceq	r5, r2
 8000622:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000624:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000626:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800062a:	bf14      	ite	ne
 800062c:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800062e:	ea25 0202 	biceq.w	r2, r5, r2
 8000632:	60da      	str	r2, [r3, #12]
	position++;
 8000634:	3601      	adds	r6, #1
 8000636:	e76e      	b.n	8000516 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8000638:	2d03      	cmp	r5, #3
 800063a:	d022      	beq.n	8000682 <HAL_GPIO_Init+0x17e>
 800063c:	2d11      	cmp	r5, #17
 800063e:	d189      	bne.n	8000554 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000640:	68cc      	ldr	r4, [r1, #12]
 8000642:	3404      	adds	r4, #4
          break;
 8000644:	e786      	b.n	8000554 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000646:	4f1b      	ldr	r7, [pc, #108]	; (80006b4 <HAL_GPIO_Init+0x1b0>)
 8000648:	42bd      	cmp	r5, r7
 800064a:	d009      	beq.n	8000660 <HAL_GPIO_Init+0x15c>
 800064c:	d812      	bhi.n	8000674 <HAL_GPIO_Init+0x170>
 800064e:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80006c0 <HAL_GPIO_Init+0x1bc>
 8000652:	454d      	cmp	r5, r9
 8000654:	d004      	beq.n	8000660 <HAL_GPIO_Init+0x15c>
 8000656:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800065a:	454d      	cmp	r5, r9
 800065c:	f47f af7a 	bne.w	8000554 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000660:	688c      	ldr	r4, [r1, #8]
 8000662:	b1c4      	cbz	r4, 8000696 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000664:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8000666:	bf0c      	ite	eq
 8000668:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800066c:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000670:	2408      	movs	r4, #8
 8000672:	e76f      	b.n	8000554 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000674:	4575      	cmp	r5, lr
 8000676:	d0f3      	beq.n	8000660 <HAL_GPIO_Init+0x15c>
 8000678:	4565      	cmp	r5, ip
 800067a:	d0f1      	beq.n	8000660 <HAL_GPIO_Init+0x15c>
 800067c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80006c4 <HAL_GPIO_Init+0x1c0>
 8000680:	e7eb      	b.n	800065a <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000682:	2400      	movs	r4, #0
 8000684:	e766      	b.n	8000554 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000686:	68cc      	ldr	r4, [r1, #12]
          break;
 8000688:	e764      	b.n	8000554 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800068a:	68cc      	ldr	r4, [r1, #12]
 800068c:	3408      	adds	r4, #8
          break;
 800068e:	e761      	b.n	8000554 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000690:	68cc      	ldr	r4, [r1, #12]
 8000692:	340c      	adds	r4, #12
          break;
 8000694:	e75e      	b.n	8000554 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000696:	2404      	movs	r4, #4
 8000698:	e75c      	b.n	8000554 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800069a:	2500      	movs	r5, #0
 800069c:	e7a7      	b.n	80005ee <HAL_GPIO_Init+0xea>
 800069e:	2501      	movs	r5, #1
 80006a0:	e7a5      	b.n	80005ee <HAL_GPIO_Init+0xea>
 80006a2:	2502      	movs	r5, #2
 80006a4:	e7a3      	b.n	80005ee <HAL_GPIO_Init+0xea>
 80006a6:	bf00      	nop
 80006a8:	40010400 	.word	0x40010400
 80006ac:	40021000 	.word	0x40021000
 80006b0:	40010800 	.word	0x40010800
 80006b4:	10210000 	.word	0x10210000
 80006b8:	10310000 	.word	0x10310000
 80006bc:	10320000 	.word	0x10320000
 80006c0:	10110000 	.word	0x10110000
 80006c4:	10220000 	.word	0x10220000

080006c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80006c8:	b10a      	cbz	r2, 80006ce <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006ca:	6101      	str	r1, [r0, #16]
 80006cc:	4770      	bx	lr
 80006ce:	0409      	lsls	r1, r1, #16
 80006d0:	e7fb      	b.n	80006ca <HAL_GPIO_WritePin+0x2>
	...

080006d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80006d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80006d8:	4605      	mov	r5, r0
 80006da:	b908      	cbnz	r0, 80006e0 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80006dc:	2001      	movs	r0, #1
 80006de:	e03c      	b.n	800075a <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006e0:	6803      	ldr	r3, [r0, #0]
 80006e2:	07db      	lsls	r3, r3, #31
 80006e4:	d410      	bmi.n	8000708 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80006e6:	682b      	ldr	r3, [r5, #0]
 80006e8:	079f      	lsls	r7, r3, #30
 80006ea:	d45d      	bmi.n	80007a8 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80006ec:	682b      	ldr	r3, [r5, #0]
 80006ee:	0719      	lsls	r1, r3, #28
 80006f0:	f100 8094 	bmi.w	800081c <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80006f4:	682b      	ldr	r3, [r5, #0]
 80006f6:	075a      	lsls	r2, r3, #29
 80006f8:	f100 80be 	bmi.w	8000878 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80006fc:	69e8      	ldr	r0, [r5, #28]
 80006fe:	2800      	cmp	r0, #0
 8000700:	f040 812c 	bne.w	800095c <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8000704:	2000      	movs	r0, #0
 8000706:	e028      	b.n	800075a <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000708:	4c8f      	ldr	r4, [pc, #572]	; (8000948 <HAL_RCC_OscConfig+0x274>)
 800070a:	6863      	ldr	r3, [r4, #4]
 800070c:	f003 030c 	and.w	r3, r3, #12
 8000710:	2b04      	cmp	r3, #4
 8000712:	d007      	beq.n	8000724 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000714:	6863      	ldr	r3, [r4, #4]
 8000716:	f003 030c 	and.w	r3, r3, #12
 800071a:	2b08      	cmp	r3, #8
 800071c:	d109      	bne.n	8000732 <HAL_RCC_OscConfig+0x5e>
 800071e:	6863      	ldr	r3, [r4, #4]
 8000720:	03de      	lsls	r6, r3, #15
 8000722:	d506      	bpl.n	8000732 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000724:	6823      	ldr	r3, [r4, #0]
 8000726:	039c      	lsls	r4, r3, #14
 8000728:	d5dd      	bpl.n	80006e6 <HAL_RCC_OscConfig+0x12>
 800072a:	686b      	ldr	r3, [r5, #4]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d1da      	bne.n	80006e6 <HAL_RCC_OscConfig+0x12>
 8000730:	e7d4      	b.n	80006dc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000732:	686b      	ldr	r3, [r5, #4]
 8000734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000738:	d112      	bne.n	8000760 <HAL_RCC_OscConfig+0x8c>
 800073a:	6823      	ldr	r3, [r4, #0]
 800073c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000740:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000742:	f7ff fd45 	bl	80001d0 <HAL_GetTick>
 8000746:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000748:	6823      	ldr	r3, [r4, #0]
 800074a:	0398      	lsls	r0, r3, #14
 800074c:	d4cb      	bmi.n	80006e6 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800074e:	f7ff fd3f 	bl	80001d0 <HAL_GetTick>
 8000752:	1b80      	subs	r0, r0, r6
 8000754:	2864      	cmp	r0, #100	; 0x64
 8000756:	d9f7      	bls.n	8000748 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000758:	2003      	movs	r0, #3
}
 800075a:	b002      	add	sp, #8
 800075c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000760:	b99b      	cbnz	r3, 800078a <HAL_RCC_OscConfig+0xb6>
 8000762:	6823      	ldr	r3, [r4, #0]
 8000764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000768:	6023      	str	r3, [r4, #0]
 800076a:	6823      	ldr	r3, [r4, #0]
 800076c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000770:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000772:	f7ff fd2d 	bl	80001d0 <HAL_GetTick>
 8000776:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000778:	6823      	ldr	r3, [r4, #0]
 800077a:	0399      	lsls	r1, r3, #14
 800077c:	d5b3      	bpl.n	80006e6 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800077e:	f7ff fd27 	bl	80001d0 <HAL_GetTick>
 8000782:	1b80      	subs	r0, r0, r6
 8000784:	2864      	cmp	r0, #100	; 0x64
 8000786:	d9f7      	bls.n	8000778 <HAL_RCC_OscConfig+0xa4>
 8000788:	e7e6      	b.n	8000758 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800078a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800078e:	6823      	ldr	r3, [r4, #0]
 8000790:	d103      	bne.n	800079a <HAL_RCC_OscConfig+0xc6>
 8000792:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000796:	6023      	str	r3, [r4, #0]
 8000798:	e7cf      	b.n	800073a <HAL_RCC_OscConfig+0x66>
 800079a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800079e:	6023      	str	r3, [r4, #0]
 80007a0:	6823      	ldr	r3, [r4, #0]
 80007a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007a6:	e7cb      	b.n	8000740 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80007a8:	4c67      	ldr	r4, [pc, #412]	; (8000948 <HAL_RCC_OscConfig+0x274>)
 80007aa:	6863      	ldr	r3, [r4, #4]
 80007ac:	f013 0f0c 	tst.w	r3, #12
 80007b0:	d007      	beq.n	80007c2 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80007b2:	6863      	ldr	r3, [r4, #4]
 80007b4:	f003 030c 	and.w	r3, r3, #12
 80007b8:	2b08      	cmp	r3, #8
 80007ba:	d110      	bne.n	80007de <HAL_RCC_OscConfig+0x10a>
 80007bc:	6863      	ldr	r3, [r4, #4]
 80007be:	03da      	lsls	r2, r3, #15
 80007c0:	d40d      	bmi.n	80007de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80007c2:	6823      	ldr	r3, [r4, #0]
 80007c4:	079b      	lsls	r3, r3, #30
 80007c6:	d502      	bpl.n	80007ce <HAL_RCC_OscConfig+0xfa>
 80007c8:	692b      	ldr	r3, [r5, #16]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d186      	bne.n	80006dc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80007ce:	6823      	ldr	r3, [r4, #0]
 80007d0:	696a      	ldr	r2, [r5, #20]
 80007d2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80007d6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80007da:	6023      	str	r3, [r4, #0]
 80007dc:	e786      	b.n	80006ec <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80007de:	692a      	ldr	r2, [r5, #16]
 80007e0:	4b5a      	ldr	r3, [pc, #360]	; (800094c <HAL_RCC_OscConfig+0x278>)
 80007e2:	b16a      	cbz	r2, 8000800 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 80007e4:	2201      	movs	r2, #1
 80007e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80007e8:	f7ff fcf2 	bl	80001d0 <HAL_GetTick>
 80007ec:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80007ee:	6823      	ldr	r3, [r4, #0]
 80007f0:	079f      	lsls	r7, r3, #30
 80007f2:	d4ec      	bmi.n	80007ce <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80007f4:	f7ff fcec 	bl	80001d0 <HAL_GetTick>
 80007f8:	1b80      	subs	r0, r0, r6
 80007fa:	2802      	cmp	r0, #2
 80007fc:	d9f7      	bls.n	80007ee <HAL_RCC_OscConfig+0x11a>
 80007fe:	e7ab      	b.n	8000758 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000800:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000802:	f7ff fce5 	bl	80001d0 <HAL_GetTick>
 8000806:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000808:	6823      	ldr	r3, [r4, #0]
 800080a:	0798      	lsls	r0, r3, #30
 800080c:	f57f af6e 	bpl.w	80006ec <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000810:	f7ff fcde 	bl	80001d0 <HAL_GetTick>
 8000814:	1b80      	subs	r0, r0, r6
 8000816:	2802      	cmp	r0, #2
 8000818:	d9f6      	bls.n	8000808 <HAL_RCC_OscConfig+0x134>
 800081a:	e79d      	b.n	8000758 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800081c:	69aa      	ldr	r2, [r5, #24]
 800081e:	4c4a      	ldr	r4, [pc, #296]	; (8000948 <HAL_RCC_OscConfig+0x274>)
 8000820:	4b4b      	ldr	r3, [pc, #300]	; (8000950 <HAL_RCC_OscConfig+0x27c>)
 8000822:	b1da      	cbz	r2, 800085c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000824:	2201      	movs	r2, #1
 8000826:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000828:	f7ff fcd2 	bl	80001d0 <HAL_GetTick>
 800082c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800082e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000830:	079b      	lsls	r3, r3, #30
 8000832:	d50d      	bpl.n	8000850 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000834:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000838:	4b46      	ldr	r3, [pc, #280]	; (8000954 <HAL_RCC_OscConfig+0x280>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000840:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000842:	bf00      	nop
  }
  while (Delay --);
 8000844:	9b01      	ldr	r3, [sp, #4]
 8000846:	1e5a      	subs	r2, r3, #1
 8000848:	9201      	str	r2, [sp, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d1f9      	bne.n	8000842 <HAL_RCC_OscConfig+0x16e>
 800084e:	e751      	b.n	80006f4 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000850:	f7ff fcbe 	bl	80001d0 <HAL_GetTick>
 8000854:	1b80      	subs	r0, r0, r6
 8000856:	2802      	cmp	r0, #2
 8000858:	d9e9      	bls.n	800082e <HAL_RCC_OscConfig+0x15a>
 800085a:	e77d      	b.n	8000758 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 800085c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800085e:	f7ff fcb7 	bl	80001d0 <HAL_GetTick>
 8000862:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000864:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000866:	079f      	lsls	r7, r3, #30
 8000868:	f57f af44 	bpl.w	80006f4 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800086c:	f7ff fcb0 	bl	80001d0 <HAL_GetTick>
 8000870:	1b80      	subs	r0, r0, r6
 8000872:	2802      	cmp	r0, #2
 8000874:	d9f6      	bls.n	8000864 <HAL_RCC_OscConfig+0x190>
 8000876:	e76f      	b.n	8000758 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000878:	4c33      	ldr	r4, [pc, #204]	; (8000948 <HAL_RCC_OscConfig+0x274>)
 800087a:	69e3      	ldr	r3, [r4, #28]
 800087c:	00d8      	lsls	r0, r3, #3
 800087e:	d424      	bmi.n	80008ca <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000880:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	69e3      	ldr	r3, [r4, #28]
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000888:	61e3      	str	r3, [r4, #28]
 800088a:	69e3      	ldr	r3, [r4, #28]
 800088c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000894:	4e30      	ldr	r6, [pc, #192]	; (8000958 <HAL_RCC_OscConfig+0x284>)
 8000896:	6833      	ldr	r3, [r6, #0]
 8000898:	05d9      	lsls	r1, r3, #23
 800089a:	d518      	bpl.n	80008ce <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800089c:	68eb      	ldr	r3, [r5, #12]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d126      	bne.n	80008f0 <HAL_RCC_OscConfig+0x21c>
 80008a2:	6a23      	ldr	r3, [r4, #32]
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80008aa:	f7ff fc91 	bl	80001d0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80008ae:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80008b2:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008b4:	6a23      	ldr	r3, [r4, #32]
 80008b6:	079b      	lsls	r3, r3, #30
 80008b8:	d53f      	bpl.n	800093a <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 80008ba:	2f00      	cmp	r7, #0
 80008bc:	f43f af1e 	beq.w	80006fc <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80008c0:	69e3      	ldr	r3, [r4, #28]
 80008c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80008c6:	61e3      	str	r3, [r4, #28]
 80008c8:	e718      	b.n	80006fc <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80008ca:	2700      	movs	r7, #0
 80008cc:	e7e2      	b.n	8000894 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80008ce:	6833      	ldr	r3, [r6, #0]
 80008d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008d4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80008d6:	f7ff fc7b 	bl	80001d0 <HAL_GetTick>
 80008da:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008dc:	6833      	ldr	r3, [r6, #0]
 80008de:	05da      	lsls	r2, r3, #23
 80008e0:	d4dc      	bmi.n	800089c <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80008e2:	f7ff fc75 	bl	80001d0 <HAL_GetTick>
 80008e6:	eba0 0008 	sub.w	r0, r0, r8
 80008ea:	2864      	cmp	r0, #100	; 0x64
 80008ec:	d9f6      	bls.n	80008dc <HAL_RCC_OscConfig+0x208>
 80008ee:	e733      	b.n	8000758 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008f0:	b9ab      	cbnz	r3, 800091e <HAL_RCC_OscConfig+0x24a>
 80008f2:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80008f4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008f8:	f023 0301 	bic.w	r3, r3, #1
 80008fc:	6223      	str	r3, [r4, #32]
 80008fe:	6a23      	ldr	r3, [r4, #32]
 8000900:	f023 0304 	bic.w	r3, r3, #4
 8000904:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000906:	f7ff fc63 	bl	80001d0 <HAL_GetTick>
 800090a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800090c:	6a23      	ldr	r3, [r4, #32]
 800090e:	0798      	lsls	r0, r3, #30
 8000910:	d5d3      	bpl.n	80008ba <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000912:	f7ff fc5d 	bl	80001d0 <HAL_GetTick>
 8000916:	1b80      	subs	r0, r0, r6
 8000918:	4540      	cmp	r0, r8
 800091a:	d9f7      	bls.n	800090c <HAL_RCC_OscConfig+0x238>
 800091c:	e71c      	b.n	8000758 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800091e:	2b05      	cmp	r3, #5
 8000920:	6a23      	ldr	r3, [r4, #32]
 8000922:	d103      	bne.n	800092c <HAL_RCC_OscConfig+0x258>
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	6223      	str	r3, [r4, #32]
 800092a:	e7ba      	b.n	80008a2 <HAL_RCC_OscConfig+0x1ce>
 800092c:	f023 0301 	bic.w	r3, r3, #1
 8000930:	6223      	str	r3, [r4, #32]
 8000932:	6a23      	ldr	r3, [r4, #32]
 8000934:	f023 0304 	bic.w	r3, r3, #4
 8000938:	e7b6      	b.n	80008a8 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800093a:	f7ff fc49 	bl	80001d0 <HAL_GetTick>
 800093e:	eba0 0008 	sub.w	r0, r0, r8
 8000942:	42b0      	cmp	r0, r6
 8000944:	d9b6      	bls.n	80008b4 <HAL_RCC_OscConfig+0x1e0>
 8000946:	e707      	b.n	8000758 <HAL_RCC_OscConfig+0x84>
 8000948:	40021000 	.word	0x40021000
 800094c:	42420000 	.word	0x42420000
 8000950:	42420480 	.word	0x42420480
 8000954:	20000008 	.word	0x20000008
 8000958:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800095c:	4b2a      	ldr	r3, [pc, #168]	; (8000a08 <HAL_RCC_OscConfig+0x334>)
 800095e:	685a      	ldr	r2, [r3, #4]
 8000960:	461c      	mov	r4, r3
 8000962:	f002 020c 	and.w	r2, r2, #12
 8000966:	2a08      	cmp	r2, #8
 8000968:	d03d      	beq.n	80009e6 <HAL_RCC_OscConfig+0x312>
 800096a:	2300      	movs	r3, #0
 800096c:	4e27      	ldr	r6, [pc, #156]	; (8000a0c <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800096e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000970:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000972:	d12b      	bne.n	80009cc <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000974:	f7ff fc2c 	bl	80001d0 <HAL_GetTick>
 8000978:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800097a:	6823      	ldr	r3, [r4, #0]
 800097c:	0199      	lsls	r1, r3, #6
 800097e:	d41f      	bmi.n	80009c0 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000980:	6a2b      	ldr	r3, [r5, #32]
 8000982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000986:	d105      	bne.n	8000994 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000988:	6862      	ldr	r2, [r4, #4]
 800098a:	68a9      	ldr	r1, [r5, #8]
 800098c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000990:	430a      	orrs	r2, r1
 8000992:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000994:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000996:	6862      	ldr	r2, [r4, #4]
 8000998:	430b      	orrs	r3, r1
 800099a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800099e:	4313      	orrs	r3, r2
 80009a0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80009a2:	2301      	movs	r3, #1
 80009a4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80009a6:	f7ff fc13 	bl	80001d0 <HAL_GetTick>
 80009aa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009ac:	6823      	ldr	r3, [r4, #0]
 80009ae:	019a      	lsls	r2, r3, #6
 80009b0:	f53f aea8 	bmi.w	8000704 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80009b4:	f7ff fc0c 	bl	80001d0 <HAL_GetTick>
 80009b8:	1b40      	subs	r0, r0, r5
 80009ba:	2802      	cmp	r0, #2
 80009bc:	d9f6      	bls.n	80009ac <HAL_RCC_OscConfig+0x2d8>
 80009be:	e6cb      	b.n	8000758 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80009c0:	f7ff fc06 	bl	80001d0 <HAL_GetTick>
 80009c4:	1bc0      	subs	r0, r0, r7
 80009c6:	2802      	cmp	r0, #2
 80009c8:	d9d7      	bls.n	800097a <HAL_RCC_OscConfig+0x2a6>
 80009ca:	e6c5      	b.n	8000758 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80009cc:	f7ff fc00 	bl	80001d0 <HAL_GetTick>
 80009d0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009d2:	6823      	ldr	r3, [r4, #0]
 80009d4:	019b      	lsls	r3, r3, #6
 80009d6:	f57f ae95 	bpl.w	8000704 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80009da:	f7ff fbf9 	bl	80001d0 <HAL_GetTick>
 80009de:	1b40      	subs	r0, r0, r5
 80009e0:	2802      	cmp	r0, #2
 80009e2:	d9f6      	bls.n	80009d2 <HAL_RCC_OscConfig+0x2fe>
 80009e4:	e6b8      	b.n	8000758 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80009e6:	2801      	cmp	r0, #1
 80009e8:	f43f aeb7 	beq.w	800075a <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80009ec:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80009ee:	6a2b      	ldr	r3, [r5, #32]
 80009f0:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80009f4:	429a      	cmp	r2, r3
 80009f6:	f47f ae71 	bne.w	80006dc <HAL_RCC_OscConfig+0x8>
 80009fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80009fc:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000a00:	1ac0      	subs	r0, r0, r3
 8000a02:	bf18      	it	ne
 8000a04:	2001      	movne	r0, #1
 8000a06:	e6a8      	b.n	800075a <HAL_RCC_OscConfig+0x86>
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	42420060 	.word	0x42420060

08000a10 <HAL_RCC_GetSysClockFreq>:
{
 8000a10:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a12:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000a14:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a16:	ac02      	add	r4, sp, #8
 8000a18:	f103 0510 	add.w	r5, r3, #16
 8000a1c:	4622      	mov	r2, r4
 8000a1e:	6818      	ldr	r0, [r3, #0]
 8000a20:	6859      	ldr	r1, [r3, #4]
 8000a22:	3308      	adds	r3, #8
 8000a24:	c203      	stmia	r2!, {r0, r1}
 8000a26:	42ab      	cmp	r3, r5
 8000a28:	4614      	mov	r4, r2
 8000a2a:	d1f7      	bne.n	8000a1c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	f88d 3004 	strb.w	r3, [sp, #4]
 8000a32:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000a34:	4911      	ldr	r1, [pc, #68]	; (8000a7c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000a36:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000a3a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000a3c:	f003 020c 	and.w	r2, r3, #12
 8000a40:	2a08      	cmp	r2, #8
 8000a42:	d117      	bne.n	8000a74 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000a44:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000a48:	a806      	add	r0, sp, #24
 8000a4a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000a4c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000a4e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000a52:	d50c      	bpl.n	8000a6e <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a54:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a56:	480a      	ldr	r0, [pc, #40]	; (8000a80 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a58:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a5c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a5e:	aa06      	add	r2, sp, #24
 8000a60:	4413      	add	r3, r2
 8000a62:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a66:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000a6a:	b007      	add	sp, #28
 8000a6c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <HAL_RCC_GetSysClockFreq+0x74>)
 8000a70:	4350      	muls	r0, r2
 8000a72:	e7fa      	b.n	8000a6a <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000a76:	e7f8      	b.n	8000a6a <HAL_RCC_GetSysClockFreq+0x5a>
 8000a78:	08002338 	.word	0x08002338
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	007a1200 	.word	0x007a1200
 8000a84:	003d0900 	.word	0x003d0900

08000a88 <HAL_RCC_ClockConfig>:
{
 8000a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a8c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000a8e:	4604      	mov	r4, r0
 8000a90:	b910      	cbnz	r0, 8000a98 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000a92:	2001      	movs	r0, #1
 8000a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000a98:	4a45      	ldr	r2, [pc, #276]	; (8000bb0 <HAL_RCC_ClockConfig+0x128>)
 8000a9a:	6813      	ldr	r3, [r2, #0]
 8000a9c:	f003 0307 	and.w	r3, r3, #7
 8000aa0:	428b      	cmp	r3, r1
 8000aa2:	d329      	bcc.n	8000af8 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000aa4:	6821      	ldr	r1, [r4, #0]
 8000aa6:	078e      	lsls	r6, r1, #30
 8000aa8:	d431      	bmi.n	8000b0e <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000aaa:	07ca      	lsls	r2, r1, #31
 8000aac:	d444      	bmi.n	8000b38 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000aae:	4a40      	ldr	r2, [pc, #256]	; (8000bb0 <HAL_RCC_ClockConfig+0x128>)
 8000ab0:	6813      	ldr	r3, [r2, #0]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	429d      	cmp	r5, r3
 8000ab8:	d367      	bcc.n	8000b8a <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000aba:	6822      	ldr	r2, [r4, #0]
 8000abc:	4d3d      	ldr	r5, [pc, #244]	; (8000bb4 <HAL_RCC_ClockConfig+0x12c>)
 8000abe:	f012 0f04 	tst.w	r2, #4
 8000ac2:	d16e      	bne.n	8000ba2 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ac4:	0713      	lsls	r3, r2, #28
 8000ac6:	d506      	bpl.n	8000ad6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000ac8:	686b      	ldr	r3, [r5, #4]
 8000aca:	6922      	ldr	r2, [r4, #16]
 8000acc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000ad0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ad4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000ad6:	f7ff ff9b 	bl	8000a10 <HAL_RCC_GetSysClockFreq>
 8000ada:	686b      	ldr	r3, [r5, #4]
 8000adc:	4a36      	ldr	r2, [pc, #216]	; (8000bb8 <HAL_RCC_ClockConfig+0x130>)
 8000ade:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ae2:	5cd3      	ldrb	r3, [r2, r3]
 8000ae4:	40d8      	lsrs	r0, r3
 8000ae6:	4b35      	ldr	r3, [pc, #212]	; (8000bbc <HAL_RCC_ClockConfig+0x134>)
 8000ae8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000aea:	4b35      	ldr	r3, [pc, #212]	; (8000bc0 <HAL_RCC_ClockConfig+0x138>)
 8000aec:	6818      	ldr	r0, [r3, #0]
 8000aee:	f7ff fb2d 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000af2:	2000      	movs	r0, #0
 8000af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000af8:	6813      	ldr	r3, [r2, #0]
 8000afa:	f023 0307 	bic.w	r3, r3, #7
 8000afe:	430b      	orrs	r3, r1
 8000b00:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b02:	6813      	ldr	r3, [r2, #0]
 8000b04:	f003 0307 	and.w	r3, r3, #7
 8000b08:	4299      	cmp	r1, r3
 8000b0a:	d1c2      	bne.n	8000a92 <HAL_RCC_ClockConfig+0xa>
 8000b0c:	e7ca      	b.n	8000aa4 <HAL_RCC_ClockConfig+0x1c>
 8000b0e:	4b29      	ldr	r3, [pc, #164]	; (8000bb4 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b10:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000b14:	bf1e      	ittt	ne
 8000b16:	685a      	ldrne	r2, [r3, #4]
 8000b18:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000b1c:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b1e:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000b20:	bf42      	ittt	mi
 8000b22:	685a      	ldrmi	r2, [r3, #4]
 8000b24:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000b28:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b2a:	685a      	ldr	r2, [r3, #4]
 8000b2c:	68a0      	ldr	r0, [r4, #8]
 8000b2e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000b32:	4302      	orrs	r2, r0
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	e7b8      	b.n	8000aaa <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b38:	6862      	ldr	r2, [r4, #4]
 8000b3a:	4e1e      	ldr	r6, [pc, #120]	; (8000bb4 <HAL_RCC_ClockConfig+0x12c>)
 8000b3c:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b3e:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b40:	d11b      	bne.n	8000b7a <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b42:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b46:	d0a4      	beq.n	8000a92 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b48:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b4a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b4e:	f023 0303 	bic.w	r3, r3, #3
 8000b52:	4313      	orrs	r3, r2
 8000b54:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000b56:	f7ff fb3b 	bl	80001d0 <HAL_GetTick>
 8000b5a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000b5c:	6873      	ldr	r3, [r6, #4]
 8000b5e:	6862      	ldr	r2, [r4, #4]
 8000b60:	f003 030c 	and.w	r3, r3, #12
 8000b64:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000b68:	d0a1      	beq.n	8000aae <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b6a:	f7ff fb31 	bl	80001d0 <HAL_GetTick>
 8000b6e:	1bc0      	subs	r0, r0, r7
 8000b70:	4540      	cmp	r0, r8
 8000b72:	d9f3      	bls.n	8000b5c <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000b74:	2003      	movs	r0, #3
}
 8000b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b7a:	2a02      	cmp	r2, #2
 8000b7c:	d102      	bne.n	8000b84 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b7e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000b82:	e7e0      	b.n	8000b46 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b84:	f013 0f02 	tst.w	r3, #2
 8000b88:	e7dd      	b.n	8000b46 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b8a:	6813      	ldr	r3, [r2, #0]
 8000b8c:	f023 0307 	bic.w	r3, r3, #7
 8000b90:	432b      	orrs	r3, r5
 8000b92:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b94:	6813      	ldr	r3, [r2, #0]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	429d      	cmp	r5, r3
 8000b9c:	f47f af79 	bne.w	8000a92 <HAL_RCC_ClockConfig+0xa>
 8000ba0:	e78b      	b.n	8000aba <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ba2:	686b      	ldr	r3, [r5, #4]
 8000ba4:	68e1      	ldr	r1, [r4, #12]
 8000ba6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000baa:	430b      	orrs	r3, r1
 8000bac:	606b      	str	r3, [r5, #4]
 8000bae:	e789      	b.n	8000ac4 <HAL_RCC_ClockConfig+0x3c>
 8000bb0:	40022000 	.word	0x40022000
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	08002365 	.word	0x08002365
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	20000004 	.word	0x20000004

08000bc4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <HAL_RCC_GetPCLK1Freq+0x18>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000bce:	5cd3      	ldrb	r3, [r2, r3]
 8000bd0:	4a03      	ldr	r2, [pc, #12]	; (8000be0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000bd2:	6810      	ldr	r0, [r2, #0]
}
 8000bd4:	40d8      	lsrs	r0, r3
 8000bd6:	4770      	bx	lr
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	08002375 	.word	0x08002375
 8000be0:	20000008 	.word	0x20000008

08000be4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <HAL_RCC_GetPCLK2Freq+0x18>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000bee:	5cd3      	ldrb	r3, [r2, r3]
 8000bf0:	4a03      	ldr	r2, [pc, #12]	; (8000c00 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000bf2:	6810      	ldr	r0, [r2, #0]
}
 8000bf4:	40d8      	lsrs	r0, r3
 8000bf6:	4770      	bx	lr
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	08002375 	.word	0x08002375
 8000c00:	20000008 	.word	0x20000008

08000c04 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000c04:	6803      	ldr	r3, [r0, #0]
{
 8000c06:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000c0a:	07d9      	lsls	r1, r3, #31
{
 8000c0c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000c0e:	d520      	bpl.n	8000c52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c10:	4c35      	ldr	r4, [pc, #212]	; (8000ce8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000c12:	69e3      	ldr	r3, [r4, #28]
 8000c14:	00da      	lsls	r2, r3, #3
 8000c16:	d432      	bmi.n	8000c7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8000c18:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	69e3      	ldr	r3, [r4, #28]
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c20:	61e3      	str	r3, [r4, #28]
 8000c22:	69e3      	ldr	r3, [r4, #28]
 8000c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c28:	9301      	str	r3, [sp, #4]
 8000c2a:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c2c:	4e2f      	ldr	r6, [pc, #188]	; (8000cec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8000c2e:	6833      	ldr	r3, [r6, #0]
 8000c30:	05db      	lsls	r3, r3, #23
 8000c32:	d526      	bpl.n	8000c82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000c34:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000c36:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000c3a:	d136      	bne.n	8000caa <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000c3c:	6a23      	ldr	r3, [r4, #32]
 8000c3e:	686a      	ldr	r2, [r5, #4]
 8000c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c44:	4313      	orrs	r3, r2
 8000c46:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000c48:	b11f      	cbz	r7, 8000c52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c4a:	69e3      	ldr	r3, [r4, #28]
 8000c4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c50:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8000c52:	6828      	ldr	r0, [r5, #0]
 8000c54:	0783      	lsls	r3, r0, #30
 8000c56:	d506      	bpl.n	8000c66 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8000c58:	4a23      	ldr	r2, [pc, #140]	; (8000ce8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000c5a:	68a9      	ldr	r1, [r5, #8]
 8000c5c:	6853      	ldr	r3, [r2, #4]
 8000c5e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c62:	430b      	orrs	r3, r1
 8000c64:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000c66:	f010 0010 	ands.w	r0, r0, #16
 8000c6a:	d01b      	beq.n	8000ca4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000c6c:	4a1e      	ldr	r2, [pc, #120]	; (8000ce8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000c6e:	68e9      	ldr	r1, [r5, #12]
 8000c70:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8000c72:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000c74:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000c78:	430b      	orrs	r3, r1
 8000c7a:	6053      	str	r3, [r2, #4]
 8000c7c:	e012      	b.n	8000ca4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8000c7e:	2700      	movs	r7, #0
 8000c80:	e7d4      	b.n	8000c2c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c82:	6833      	ldr	r3, [r6, #0]
 8000c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c88:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000c8a:	f7ff faa1 	bl	80001d0 <HAL_GetTick>
 8000c8e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c90:	6833      	ldr	r3, [r6, #0]
 8000c92:	05d8      	lsls	r0, r3, #23
 8000c94:	d4ce      	bmi.n	8000c34 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c96:	f7ff fa9b 	bl	80001d0 <HAL_GetTick>
 8000c9a:	eba0 0008 	sub.w	r0, r0, r8
 8000c9e:	2864      	cmp	r0, #100	; 0x64
 8000ca0:	d9f6      	bls.n	8000c90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8000ca2:	2003      	movs	r0, #3
}
 8000ca4:	b002      	add	sp, #8
 8000ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000caa:	686a      	ldr	r2, [r5, #4]
 8000cac:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d0c3      	beq.n	8000c3c <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000cb8:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000cba:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000cbc:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000cbe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000cc2:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8000cc4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000cc6:	07d9      	lsls	r1, r3, #31
 8000cc8:	d5b8      	bpl.n	8000c3c <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8000cca:	f7ff fa81 	bl	80001d0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cce:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000cd2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cd4:	6a23      	ldr	r3, [r4, #32]
 8000cd6:	079a      	lsls	r2, r3, #30
 8000cd8:	d4b0      	bmi.n	8000c3c <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cda:	f7ff fa79 	bl	80001d0 <HAL_GetTick>
 8000cde:	1b80      	subs	r0, r0, r6
 8000ce0:	4540      	cmp	r0, r8
 8000ce2:	d9f7      	bls.n	8000cd4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8000ce4:	e7dd      	b.n	8000ca2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8000ce6:	bf00      	nop
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40007000 	.word	0x40007000
 8000cf0:	42420440 	.word	0x42420440

08000cf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000cf4:	b538      	push	{r3, r4, r5, lr}
 8000cf6:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000cf8:	6803      	ldr	r3, [r0, #0]
 8000cfa:	68c1      	ldr	r1, [r0, #12]
 8000cfc:	691a      	ldr	r2, [r3, #16]
 8000cfe:	2419      	movs	r4, #25
 8000d00:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000d04:	430a      	orrs	r2, r1
 8000d06:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000d08:	6882      	ldr	r2, [r0, #8]
 8000d0a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8000d0c:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000d0e:	4302      	orrs	r2, r0
 8000d10:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8000d12:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8000d16:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000d1a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000d20:	695a      	ldr	r2, [r3, #20]
 8000d22:	69a9      	ldr	r1, [r5, #24]
 8000d24:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <UART_SetConfig+0x70>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d114      	bne.n	8000d5c <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8000d32:	f7ff ff57 	bl	8000be4 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000d36:	4360      	muls	r0, r4
 8000d38:	686c      	ldr	r4, [r5, #4]
 8000d3a:	2264      	movs	r2, #100	; 0x64
 8000d3c:	00a4      	lsls	r4, r4, #2
 8000d3e:	fbb0 f0f4 	udiv	r0, r0, r4
 8000d42:	fbb0 f4f2 	udiv	r4, r0, r2
 8000d46:	fb02 0314 	mls	r3, r2, r4, r0
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	3332      	adds	r3, #50	; 0x32
 8000d4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d52:	6829      	ldr	r1, [r5, #0]
 8000d54:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8000d58:	608b      	str	r3, [r1, #8]
 8000d5a:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8000d5c:	f7ff ff32 	bl	8000bc4 <HAL_RCC_GetPCLK1Freq>
 8000d60:	e7e9      	b.n	8000d36 <UART_SetConfig+0x42>
 8000d62:	bf00      	nop
 8000d64:	40013800 	.word	0x40013800

08000d68 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	460e      	mov	r6, r1
 8000d6e:	4617      	mov	r7, r2
 8000d70:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000d72:	6821      	ldr	r1, [r4, #0]
 8000d74:	680b      	ldr	r3, [r1, #0]
 8000d76:	ea36 0303 	bics.w	r3, r6, r3
 8000d7a:	d101      	bne.n	8000d80 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000d7c:	2000      	movs	r0, #0
}
 8000d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000d80:	1c6b      	adds	r3, r5, #1
 8000d82:	d0f7      	beq.n	8000d74 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000d84:	b995      	cbnz	r5, 8000dac <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000d86:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000d88:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000d8a:	68da      	ldr	r2, [r3, #12]
 8000d8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000d90:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000d92:	695a      	ldr	r2, [r3, #20]
 8000d94:	f022 0201 	bic.w	r2, r2, #1
 8000d98:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000d9a:	2320      	movs	r3, #32
 8000d9c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000da0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000da4:	2300      	movs	r3, #0
 8000da6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000dac:	f7ff fa10 	bl	80001d0 <HAL_GetTick>
 8000db0:	1bc0      	subs	r0, r0, r7
 8000db2:	4285      	cmp	r5, r0
 8000db4:	d2dd      	bcs.n	8000d72 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000db6:	e7e6      	b.n	8000d86 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000db8 <HAL_UART_Init>:
{
 8000db8:	b510      	push	{r4, lr}
  if (huart == NULL)
 8000dba:	4604      	mov	r4, r0
 8000dbc:	b340      	cbz	r0, 8000e10 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8000dbe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000dc2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000dc6:	b91b      	cbnz	r3, 8000dd0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000dc8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000dcc:	f000 faae 	bl	800132c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000dd0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000dd2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000dd4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000dd8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000dda:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000ddc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000de0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000de2:	f7ff ff87 	bl	8000cf4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000de6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000de8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000dea:	691a      	ldr	r2, [r3, #16]
 8000dec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000df0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000df2:	695a      	ldr	r2, [r3, #20]
 8000df4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000df8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000dfa:	68da      	ldr	r2, [r3, #12]
 8000dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e00:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8000e02:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e04:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000e06:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000e0a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000e0e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e10:	2001      	movs	r0, #1
}
 8000e12:	bd10      	pop	{r4, pc}

08000e14 <HAL_UART_Transmit>:
{
 8000e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e18:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8000e1a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8000e1e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8000e20:	2b20      	cmp	r3, #32
{
 8000e22:	460d      	mov	r5, r1
 8000e24:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8000e26:	d14e      	bne.n	8000ec6 <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 8000e28:	2900      	cmp	r1, #0
 8000e2a:	d049      	beq.n	8000ec0 <HAL_UART_Transmit+0xac>
 8000e2c:	2a00      	cmp	r2, #0
 8000e2e:	d047      	beq.n	8000ec0 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8000e30:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d046      	beq.n	8000ec6 <HAL_UART_Transmit+0xb2>
 8000e38:	2301      	movs	r3, #1
 8000e3a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000e42:	2321      	movs	r3, #33	; 0x21
 8000e44:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000e48:	f7ff f9c2 	bl	80001d0 <HAL_GetTick>
 8000e4c:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8000e4e:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8000e52:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8000e56:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	b96b      	cbnz	r3, 8000e78 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	4632      	mov	r2, r6
 8000e60:	2140      	movs	r1, #64	; 0x40
 8000e62:	4620      	mov	r0, r4
 8000e64:	f7ff ff80 	bl	8000d68 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000e68:	b9a8      	cbnz	r0, 8000e96 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8000e6a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000e6c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8000e70:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8000e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8000e78:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000e7a:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000e82:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000e84:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000e8e:	d10e      	bne.n	8000eae <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000e90:	f7ff ff6a 	bl	8000d68 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000e94:	b110      	cbz	r0, 8000e9c <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8000e96:	2003      	movs	r0, #3
 8000e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000e9c:	882b      	ldrh	r3, [r5, #0]
 8000e9e:	6822      	ldr	r2, [r4, #0]
 8000ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ea4:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8000ea6:	6923      	ldr	r3, [r4, #16]
 8000ea8:	b943      	cbnz	r3, 8000ebc <HAL_UART_Transmit+0xa8>
          pData += 2U;
 8000eaa:	3502      	adds	r5, #2
 8000eac:	e7d3      	b.n	8000e56 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000eae:	f7ff ff5b 	bl	8000d68 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000eb2:	2800      	cmp	r0, #0
 8000eb4:	d1ef      	bne.n	8000e96 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000eb6:	6823      	ldr	r3, [r4, #0]
 8000eb8:	782a      	ldrb	r2, [r5, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	3501      	adds	r5, #1
 8000ebe:	e7ca      	b.n	8000e56 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8000ec6:	2002      	movs	r0, #2
}
 8000ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000ecc <DispDataWr>:
	  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
	}
}

static void DispDataWr(uint8_t data)		// Must be changed using 4 Bit Mode
{
 8000ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ece:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (GPIO_PinState)(data & 0x80));
 8000ed0:	4f29      	ldr	r7, [pc, #164]	; (8000f78 <DispDataWr+0xac>)
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (GPIO_PinState)(data & 0x40));
 8000ed2:	4d2a      	ldr	r5, [pc, #168]	; (8000f7c <DispDataWr+0xb0>)
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (GPIO_PinState)(data & 0x80));
 8000ed4:	f000 0280 	and.w	r2, r0, #128	; 0x80
 8000ed8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000edc:	4638      	mov	r0, r7
 8000ede:	f7ff fbf3 	bl	80006c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (GPIO_PinState)(data & 0x40));
 8000ee2:	f004 0240 	and.w	r2, r4, #64	; 0x40
 8000ee6:	4628      	mov	r0, r5
 8000ee8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eec:	f7ff fbec 	bl	80006c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (GPIO_PinState)(data & 0x20));
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (GPIO_PinState)(data & 0x10));

    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000ef0:	4e23      	ldr	r6, [pc, #140]	; (8000f80 <DispDataWr+0xb4>)
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (GPIO_PinState)(data & 0x20));
 8000ef2:	f004 0220 	and.w	r2, r4, #32
 8000ef6:	4628      	mov	r0, r5
 8000ef8:	2110      	movs	r1, #16
 8000efa:	f7ff fbe5 	bl	80006c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (GPIO_PinState)(data & 0x10));
 8000efe:	f004 0210 	and.w	r2, r4, #16
 8000f02:	4628      	mov	r0, r5
 8000f04:	2120      	movs	r1, #32
 8000f06:	f7ff fbdf 	bl	80006c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2180      	movs	r1, #128	; 0x80
 8000f0e:	4630      	mov	r0, r6
 8000f10:	f7ff fbda 	bl	80006c8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f7ff f961 	bl	80001dc <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000f1a:	4630      	mov	r0, r6
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2180      	movs	r1, #128	; 0x80
 8000f20:	f7ff fbd2 	bl	80006c8 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (GPIO_PinState)(data & 0x08));
 8000f24:	f004 0208 	and.w	r2, r4, #8
 8000f28:	4638      	mov	r0, r7
 8000f2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f2e:	f7ff fbcb 	bl	80006c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (GPIO_PinState)(data & 0x04));
 8000f32:	f004 0204 	and.w	r2, r4, #4
 8000f36:	4628      	mov	r0, r5
 8000f38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f3c:	f7ff fbc4 	bl	80006c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (GPIO_PinState)(data & 0x02));
 8000f40:	f004 0202 	and.w	r2, r4, #2
 8000f44:	4628      	mov	r0, r5
 8000f46:	2110      	movs	r1, #16
 8000f48:	f7ff fbbe 	bl	80006c8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (GPIO_PinState)(data & 0x01));
 8000f4c:	f004 0201 	and.w	r2, r4, #1
 8000f50:	4628      	mov	r0, r5
 8000f52:	2120      	movs	r1, #32
 8000f54:	f7ff fbb8 	bl	80006c8 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2180      	movs	r1, #128	; 0x80
 8000f5c:	4630      	mov	r0, r6
 8000f5e:	f7ff fbb3 	bl	80006c8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000f62:	2001      	movs	r0, #1
 8000f64:	f7ff f93a 	bl	80001dc <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000f68:	4630      	mov	r0, r6
}
 8000f6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2180      	movs	r1, #128	; 0x80
 8000f72:	f7ff bba9 	b.w	80006c8 <HAL_GPIO_WritePin>
 8000f76:	bf00      	nop
 8000f78:	40010800 	.word	0x40010800
 8000f7c:	40010c00 	.word	0x40010c00
 8000f80:	40011000 	.word	0x40011000

08000f84 <DispCursorSet>:
#if 1
static void DispCursorSet(uint8_t row, uint8_t col)
{
 8000f84:	b538      	push	{r3, r4, r5, lr}
 8000f86:	4605      	mov	r5, r0
 8000f88:	460c      	mov	r4, r1
		HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f90:	4808      	ldr	r0, [pc, #32]	; (8000fb4 <DispCursorSet+0x30>)
 8000f92:	f7ff fb99 	bl	80006c8 <HAL_GPIO_WritePin>
    DispSel(DISP_SEL_CMD_REG);
    switch(row){
 8000f96:	b115      	cbz	r5, 8000f9e <DispCursorSet+0x1a>
 8000f98:	2d01      	cmp	r5, #1
 8000f9a:	d006      	beq.n	8000faa <DispCursorSet+0x26>
 8000f9c:	bd38      	pop	{r3, r4, r5, pc}
    case 0:
        DispDataWr(0x80 + col);
 8000f9e:	f084 0080 	eor.w	r0, r4, #128	; 0x80
        break;
    case 1:
        DispDataWr(0xC0 + col);
        break;
    }
}
 8000fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        DispDataWr(0xC0 + col);
 8000fa6:	f7ff bf91 	b.w	8000ecc <DispDataWr>
 8000faa:	f1a4 0040 	sub.w	r0, r4, #64	; 0x40
 8000fae:	b2c0      	uxtb	r0, r0
 8000fb0:	e7f7      	b.n	8000fa2 <DispCursorSet+0x1e>
 8000fb2:	bf00      	nop
 8000fb4:	40010800 	.word	0x40010800

08000fb8 <DispInit>:
#endif

void DispInit(uint8_t maxrows, uint8_t maxcols)
{
 8000fb8:	b508      	push	{r3, lr}
    DispMaxRows = maxrows;
 8000fba:	4b1c      	ldr	r3, [pc, #112]	; (800102c <DispInit+0x74>)
		HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
    DispMaxRows = maxrows;
 8000fbe:	7018      	strb	r0, [r3, #0]
    DispMaxCols = maxcols;
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <DispInit+0x78>)
		HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000fc2:	481c      	ldr	r0, [pc, #112]	; (8001034 <DispInit+0x7c>)
    DispMaxCols = maxcols;
 8000fc4:	7019      	strb	r1, [r3, #0]
		HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000fc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fca:	f7ff fb7d 	bl	80006c8 <HAL_GPIO_WritePin>

    DispSel(DISP_SEL_CMD_REG);
    HAL_Delay(50);
 8000fce:	2032      	movs	r0, #50	; 0x32
 8000fd0:	f7ff f904 	bl	80001dc <HAL_Delay>

    DispDataWr(DISP_CMD_FNCT);
 8000fd4:	202b      	movs	r0, #43	; 0x2b
 8000fd6:	f7ff ff79 	bl	8000ecc <DispDataWr>
    HAL_Delay(5);
 8000fda:	2005      	movs	r0, #5
 8000fdc:	f7ff f8fe 	bl	80001dc <HAL_Delay>
    DispDataWr(DISP_CMD_FNCT);
 8000fe0:	202b      	movs	r0, #43	; 0x2b
 8000fe2:	f7ff ff73 	bl	8000ecc <DispDataWr>
    HAL_Delay(5);
 8000fe6:	2005      	movs	r0, #5
 8000fe8:	f7ff f8f8 	bl	80001dc <HAL_Delay>
    DispDataWr(DISP_CMD_FNCT);
 8000fec:	202b      	movs	r0, #43	; 0x2b
 8000fee:	f7ff ff6d 	bl	8000ecc <DispDataWr>
    HAL_Delay(5);
 8000ff2:	2005      	movs	r0, #5
 8000ff4:	f7ff f8f2 	bl	80001dc <HAL_Delay>
    DispDataWr(DISP_CMD_FNCT);
 8000ff8:	202b      	movs	r0, #43	; 0x2b
 8000ffa:	f7ff ff67 	bl	8000ecc <DispDataWr>
    HAL_Delay(5);
 8000ffe:	2005      	movs	r0, #5
 8001000:	f7ff f8ec 	bl	80001dc <HAL_Delay>

    DispDataWr(DISP_CMD_ON_OFF);
 8001004:	200f      	movs	r0, #15
 8001006:	f7ff ff61 	bl	8000ecc <DispDataWr>
    HAL_Delay(5);
 800100a:	2005      	movs	r0, #5
 800100c:	f7ff f8e6 	bl	80001dc <HAL_Delay>
    DispDataWr(DISP_CMD_MODE);
 8001010:	2006      	movs	r0, #6
 8001012:	f7ff ff5b 	bl	8000ecc <DispDataWr>
    HAL_Delay(5);
 8001016:	2005      	movs	r0, #5
 8001018:	f7ff f8e0 	bl	80001dc <HAL_Delay>
    DispDataWr(DISP_CMD_CLS);
 800101c:	2001      	movs	r0, #1
 800101e:	f7ff ff55 	bl	8000ecc <DispDataWr>
    HAL_Delay(5);

}
 8001022:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_Delay(5);
 8001026:	2005      	movs	r0, #5
 8001028:	f7ff b8d8 	b.w	80001dc <HAL_Delay>
 800102c:	2000008d 	.word	0x2000008d
 8001030:	2000008c 	.word	0x2000008c
 8001034:	40010800 	.word	0x40010800

08001038 <DispStr>:
        DispDataWr(c);
    }
}

void DispStr(uint8_t row, uint8_t col, char *s)
{
 8001038:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    if(row < DispMaxRows && col < DispMaxCols){
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <DispStr+0x40>)
{
 800103c:	460c      	mov	r4, r1
    if(row < DispMaxRows && col < DispMaxCols){
 800103e:	781b      	ldrb	r3, [r3, #0]
{
 8001040:	4615      	mov	r5, r2
    if(row < DispMaxRows && col < DispMaxCols){
 8001042:	4283      	cmp	r3, r0
 8001044:	d912      	bls.n	800106c <DispStr+0x34>
 8001046:	4e0d      	ldr	r6, [pc, #52]	; (800107c <DispStr+0x44>)
 8001048:	7832      	ldrb	r2, [r6, #0]
 800104a:	428a      	cmp	r2, r1
 800104c:	d90e      	bls.n	800106c <DispStr+0x34>
        DispCursorSet(row, col);
 800104e:	f7ff ff99 	bl	8000f84 <DispCursorSet>
	  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8001052:	2201      	movs	r2, #1
 8001054:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001058:	4809      	ldr	r0, [pc, #36]	; (8001080 <DispStr+0x48>)
 800105a:	f7ff fb35 	bl	80006c8 <HAL_GPIO_WritePin>
 800105e:	3d01      	subs	r5, #1
        DispSel(DISP_SEL_DATA_REG);
        i = col;
        while(i < DispMaxCols && *s){
 8001060:	7833      	ldrb	r3, [r6, #0]
 8001062:	42a3      	cmp	r3, r4
 8001064:	d902      	bls.n	800106c <DispStr+0x34>
 8001066:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800106a:	b900      	cbnz	r0, 800106e <DispStr+0x36>
 800106c:	bd70      	pop	{r4, r5, r6, pc}
            DispDataWr(*s++);
            i++;
 800106e:	3401      	adds	r4, #1
            DispDataWr(*s++);
 8001070:	f7ff ff2c 	bl	8000ecc <DispDataWr>
            i++;
 8001074:	b2e4      	uxtb	r4, r4
 8001076:	e7f3      	b.n	8001060 <DispStr+0x28>
 8001078:	2000008d 	.word	0x2000008d
 800107c:	2000008c 	.word	0x2000008c
 8001080:	40010800 	.word	0x40010800

08001084 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001084:	b510      	push	{r4, lr}
 8001086:	4614      	mov	r4, r2

  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, (uint16_t)len, 0xFFFFFFFF);
 8001088:	f04f 33ff 	mov.w	r3, #4294967295
 800108c:	b292      	uxth	r2, r2
 800108e:	4802      	ldr	r0, [pc, #8]	; (8001098 <_write+0x14>)
 8001090:	f7ff fec0 	bl	8000e14 <HAL_UART_Transmit>

  return len;
}
 8001094:	4620      	mov	r0, r4
 8001096:	bd10      	pop	{r4, pc}
 8001098:	200000d0 	.word	0x200000d0

0800109c <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109c:	2228      	movs	r2, #40	; 0x28
{
 800109e:	b530      	push	{r4, r5, lr}
 80010a0:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a2:	eb0d 0002 	add.w	r0, sp, r2
 80010a6:	2100      	movs	r1, #0
 80010a8:	f000 fa2e 	bl	8001508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ac:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ae:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b0:	eb0d 0002 	add.w	r0, sp, r2
 80010b4:	2100      	movs	r1, #0
 80010b6:	f000 fa27 	bl	8001508 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ba:	462a      	mov	r2, r5
 80010bc:	2100      	movs	r1, #0
 80010be:	a801      	add	r0, sp, #4
 80010c0:	f000 fa22 	bl	8001508 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c4:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010c6:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c8:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80010ca:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ce:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80010d0:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d2:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d4:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d6:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d8:	f7ff fafc 	bl	80006d4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010dc:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010de:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e2:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e4:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010e6:	4621      	mov	r1, r4
 80010e8:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ea:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ec:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ee:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f0:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010f2:	f7ff fcc9 	bl	8000a88 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80010f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010fa:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010fc:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80010fe:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001100:	f7ff fd80 	bl	8000c04 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001104:	b015      	add	sp, #84	; 0x54
 8001106:	bd30      	pop	{r4, r5, pc}

08001108 <main>:
{
 8001108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110a:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 800110c:	f7ff f842 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8001110:	f7ff ffc4 	bl	800109c <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	2210      	movs	r2, #16
 8001116:	2100      	movs	r1, #0
 8001118:	eb0d 0002 	add.w	r0, sp, r2
 800111c:	f000 f9f4 	bl	8001508 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001120:	4b4f      	ldr	r3, [pc, #316]	; (8001260 <main+0x158>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin|LCD_BLC_Pin, GPIO_PIN_RESET);
 8001122:	f44f 618e 	mov.w	r1, #1136	; 0x470
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001126:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin|LCD_BLC_Pin, GPIO_PIN_RESET);
 8001128:	484e      	ldr	r0, [pc, #312]	; (8001264 <main+0x15c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112a:	f042 0210 	orr.w	r2, r2, #16
 800112e:	619a      	str	r2, [r3, #24]
 8001130:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin|LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin LCD_BLC_Pin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin|LCD_BLC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001134:	f002 0210 	and.w	r2, r2, #16
 8001138:	9201      	str	r2, [sp, #4]
 800113a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113c:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113e:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001140:	f042 0204 	orr.w	r2, r2, #4
 8001144:	619a      	str	r2, [r3, #24]
 8001146:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2702      	movs	r7, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	f002 0204 	and.w	r2, r2, #4
 800114e:	9202      	str	r2, [sp, #8]
 8001150:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001152:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LCD_E_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LCD_D7_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_RS_Pin;
 8001154:	f44f 7540 	mov.w	r5, #768	; 0x300
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001158:	f042 0208 	orr.w	r2, r2, #8
 800115c:	619a      	str	r2, [r3, #24]
 800115e:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin|LCD_BLC_Pin, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	f003 0308 	and.w	r3, r3, #8
 8001166:	9303      	str	r3, [sp, #12]
 8001168:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin|LCD_BLC_Pin, GPIO_PIN_RESET);
 800116a:	f7ff faad 	bl	80006c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	2180      	movs	r1, #128	; 0x80
 8001172:	483d      	ldr	r0, [pc, #244]	; (8001268 <main+0x160>)
 8001174:	f7ff faa8 	bl	80006c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800117e:	483b      	ldr	r0, [pc, #236]	; (800126c <main+0x164>)
 8001180:	f7ff faa2 	bl	80006c8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin|LCD_BLC_Pin;
 8001184:	f44f 638e 	mov.w	r3, #1136	; 0x470
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	a904      	add	r1, sp, #16
 800118a:	4836      	ldr	r0, [pc, #216]	; (8001264 <main+0x15c>)
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin|LCD_BLC_Pin;
 800118c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118e:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	f7ff f9b6 	bl	8000504 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_E_Pin;
 8001198:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(LCD_E_GPIO_Port, &GPIO_InitStruct);
 800119a:	a904      	add	r1, sp, #16
 800119c:	4832      	ldr	r0, [pc, #200]	; (8001268 <main+0x160>)
  GPIO_InitStruct.Pin = LCD_E_Pin;
 800119e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a0:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LCD_E_GPIO_Port, &GPIO_InitStruct);
 80011a6:	f7ff f9ad 	bl	8000504 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011aa:	a904      	add	r1, sp, #16
 80011ac:	482f      	ldr	r0, [pc, #188]	; (800126c <main+0x164>)
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_RS_Pin;
 80011ae:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b0:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f7ff f9a5 	bl	8000504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ba:	2312      	movs	r3, #18
 80011bc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011be:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c0:	a904      	add	r1, sp, #16
 80011c2:	4828      	ldr	r0, [pc, #160]	; (8001264 <main+0x15c>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011c4:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c6:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	f7ff f99c 	bl	8000504 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_I2C1_ENABLE();
 80011cc:	4a28      	ldr	r2, [pc, #160]	; (8001270 <main+0x168>)
  hadc1.Instance = ADC1;
 80011ce:	4d29      	ldr	r5, [pc, #164]	; (8001274 <main+0x16c>)
  __HAL_AFIO_REMAP_I2C1_ENABLE();
 80011d0:	6853      	ldr	r3, [r2, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d2:	4628      	mov	r0, r5
  __HAL_AFIO_REMAP_I2C1_ENABLE();
 80011d4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80011d8:	433b      	orrs	r3, r7
 80011da:	6053      	str	r3, [r2, #4]
  hadc1.Instance = ADC1;
 80011dc:	4b26      	ldr	r3, [pc, #152]	; (8001278 <main+0x170>)
  hadc1.Init.NbrOfConversion = 1;
 80011de:	612e      	str	r6, [r5, #16]
  hadc1.Instance = ADC1;
 80011e0:	602b      	str	r3, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011e2:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 80011e6:	9404      	str	r4, [sp, #16]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011e8:	61eb      	str	r3, [r5, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011ea:	9405      	str	r4, [sp, #20]
 80011ec:	9406      	str	r4, [sp, #24]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011ee:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011f0:	732c      	strb	r4, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011f2:	752c      	strb	r4, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011f4:	606c      	str	r4, [r5, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011f6:	f7ff f8a9 	bl	800034c <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011fa:	a904      	add	r1, sp, #16
 80011fc:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011fe:	9605      	str	r6, [sp, #20]
  sConfig.Channel = ADC_CHANNEL_0;
 8001200:	9404      	str	r4, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001202:	9406      	str	r4, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001204:	f7fe fffc 	bl	8000200 <HAL_ADC_ConfigChannel>
  huart2.Init.BaudRate = 115200;
 8001208:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Instance = USART2;
 800120c:	481b      	ldr	r0, [pc, #108]	; (800127c <main+0x174>)
  huart2.Init.BaudRate = 115200;
 800120e:	4a1c      	ldr	r2, [pc, #112]	; (8001280 <main+0x178>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001210:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8001212:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001216:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001218:	60c4      	str	r4, [r0, #12]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800121a:	6143      	str	r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 800121c:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121e:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001220:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001222:	f7ff fdc9 	bl	8000db8 <HAL_UART_Init>
  DispInit(2, 16);
 8001226:	4638      	mov	r0, r7
 8001228:	2110      	movs	r1, #16
 800122a:	f7ff fec5 	bl	8000fb8 <DispInit>
  DispStr(0, 0, (char *)"STM32F103");
 800122e:	4a15      	ldr	r2, [pc, #84]	; (8001284 <main+0x17c>)
 8001230:	4621      	mov	r1, r4
 8001232:	4620      	mov	r0, r4
 8001234:	f7ff ff00 	bl	8001038 <DispStr>
  	HAL_GPIO_WritePin(LCD_BLC_GPIO_Port, LCD_BLC_Pin, GPIO_PIN_SET);	// LCD Backlight Control On
 8001238:	4f0a      	ldr	r7, [pc, #40]	; (8001264 <main+0x15c>)
  	printf("Count Value %d \r \n", count1++);
 800123a:	4e13      	ldr	r6, [pc, #76]	; (8001288 <main+0x180>)
  	HAL_GPIO_WritePin(LCD_BLC_GPIO_Port, LCD_BLC_Pin, GPIO_PIN_SET);	// LCD Backlight Control On
 800123c:	2201      	movs	r2, #1
 800123e:	2140      	movs	r1, #64	; 0x40
 8001240:	4638      	mov	r0, r7
 8001242:	f7ff fa41 	bl	80006c8 <HAL_GPIO_WritePin>
  	printf("Count Value %d \r \n", count1++);
 8001246:	1c65      	adds	r5, r4, #1
 8001248:	4621      	mov	r1, r4
 800124a:	4630      	mov	r0, r6
 800124c:	f000 f964 	bl	8001518 <iprintf>
 8001250:	b2ed      	uxtb	r5, r5
  	HAL_Delay(1000);
 8001252:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001256:	f7fe ffc1 	bl	80001dc <HAL_Delay>
  	printf("Count Value %d \r \n", count1++);
 800125a:	462c      	mov	r4, r5
 800125c:	e7ee      	b.n	800123c <main+0x134>
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000
 8001264:	40010c00 	.word	0x40010c00
 8001268:	40011000 	.word	0x40011000
 800126c:	40010800 	.word	0x40010800
 8001270:	40010000 	.word	0x40010000
 8001274:	200000a0 	.word	0x200000a0
 8001278:	40012400 	.word	0x40012400
 800127c:	200000d0 	.word	0x200000d0
 8001280:	40004400 	.word	0x40004400
 8001284:	08002348 	.word	0x08002348
 8001288:	08002352 	.word	0x08002352

0800128c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800128c:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <HAL_MspInit+0x3c>)
{
 800128e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001290:	699a      	ldr	r2, [r3, #24]
 8001292:	f042 0201 	orr.w	r2, r2, #1
 8001296:	619a      	str	r2, [r3, #24]
 8001298:	699a      	ldr	r2, [r3, #24]
 800129a:	f002 0201 	and.w	r2, r2, #1
 800129e:	9200      	str	r2, [sp, #0]
 80012a0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a2:	69da      	ldr	r2, [r3, #28]
 80012a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012a8:	61da      	str	r2, [r3, #28]
 80012aa:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012ac:	4a07      	ldr	r2, [pc, #28]	; (80012cc <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012b6:	6853      	ldr	r3, [r2, #4]
 80012b8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c2:	b002      	add	sp, #8
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40010000 	.word	0x40010000

080012d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012d0:	b510      	push	{r4, lr}
 80012d2:	4604      	mov	r4, r0
 80012d4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d6:	2210      	movs	r2, #16
 80012d8:	2100      	movs	r1, #0
 80012da:	a802      	add	r0, sp, #8
 80012dc:	f000 f914 	bl	8001508 <memset>
  if(hadc->Instance==ADC1)
 80012e0:	6822      	ldr	r2, [r4, #0]
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <HAL_ADC_MspInit+0x54>)
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d11b      	bne.n	8001320 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012e8:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80012ec:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012f4:	619a      	str	r2, [r3, #24]
 80012f6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	480b      	ldr	r0, [pc, #44]	; (8001328 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012fa:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80012fe:	9200      	str	r2, [sp, #0]
 8001300:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	699a      	ldr	r2, [r3, #24]
 8001304:	f042 0204 	orr.w	r2, r2, #4
 8001308:	619a      	str	r2, [r3, #24]
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	9301      	str	r3, [sp, #4]
 8001312:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001314:	2301      	movs	r3, #1
 8001316:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001318:	2303      	movs	r3, #3
 800131a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131c:	f7ff f8f2 	bl	8000504 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001320:	b006      	add	sp, #24
 8001322:	bd10      	pop	{r4, pc}
 8001324:	40012400 	.word	0x40012400
 8001328:	40010800 	.word	0x40010800

0800132c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800132c:	b510      	push	{r4, lr}
 800132e:	4604      	mov	r4, r0
 8001330:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001332:	2210      	movs	r2, #16
 8001334:	2100      	movs	r1, #0
 8001336:	a802      	add	r0, sp, #8
 8001338:	f000 f8e6 	bl	8001508 <memset>
  if(huart->Instance==USART2)
 800133c:	6822      	ldr	r2, [r4, #0]
 800133e:	4b16      	ldr	r3, [pc, #88]	; (8001398 <HAL_UART_MspInit+0x6c>)
 8001340:	429a      	cmp	r2, r3
 8001342:	d126      	bne.n	8001392 <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001344:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001348:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134a:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 800134c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001350:	61da      	str	r2, [r3, #28]
 8001352:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001354:	4811      	ldr	r0, [pc, #68]	; (800139c <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001356:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800135a:	9200      	str	r2, [sp, #0]
 800135c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135e:	699a      	ldr	r2, [r3, #24]
 8001360:	f042 0204 	orr.w	r2, r2, #4
 8001364:	619a      	str	r2, [r3, #24]
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001370:	2304      	movs	r3, #4
 8001372:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f7ff f8c2 	bl	8000504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001380:	2308      	movs	r3, #8
 8001382:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001384:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	a902      	add	r1, sp, #8
 8001388:	4804      	ldr	r0, [pc, #16]	; (800139c <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	f7ff f8b9 	bl	8000504 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001392:	b006      	add	sp, #24
 8001394:	bd10      	pop	{r4, pc}
 8001396:	bf00      	nop
 8001398:	40004400 	.word	0x40004400
 800139c:	40010800 	.word	0x40010800

080013a0 <NMI_Handler>:
 80013a0:	4770      	bx	lr

080013a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a2:	e7fe      	b.n	80013a2 <HardFault_Handler>

080013a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a4:	e7fe      	b.n	80013a4 <MemManage_Handler>

080013a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a6:	e7fe      	b.n	80013a6 <BusFault_Handler>

080013a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a8:	e7fe      	b.n	80013a8 <UsageFault_Handler>

080013aa <SVC_Handler>:
 80013aa:	4770      	bx	lr

080013ac <DebugMon_Handler>:
 80013ac:	4770      	bx	lr

080013ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ae:	4770      	bx	lr

080013b0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b0:	f7fe bf02 	b.w	80001b8 <HAL_IncTick>

080013b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013b4:	b570      	push	{r4, r5, r6, lr}
 80013b6:	460e      	mov	r6, r1
 80013b8:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ba:	460c      	mov	r4, r1
 80013bc:	1ba3      	subs	r3, r4, r6
 80013be:	429d      	cmp	r5, r3
 80013c0:	dc01      	bgt.n	80013c6 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80013c2:	4628      	mov	r0, r5
 80013c4:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80013c6:	f3af 8000 	nop.w
 80013ca:	f804 0b01 	strb.w	r0, [r4], #1
 80013ce:	e7f5      	b.n	80013bc <_read+0x8>

080013d0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80013d0:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <_sbrk+0x2c>)
{
 80013d4:	4602      	mov	r2, r0
	if (heap_end == 0)
 80013d6:	6819      	ldr	r1, [r3, #0]
 80013d8:	b909      	cbnz	r1, 80013de <_sbrk+0xe>
		heap_end = &end;
 80013da:	4909      	ldr	r1, [pc, #36]	; (8001400 <_sbrk+0x30>)
 80013dc:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80013de:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80013e0:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80013e2:	4402      	add	r2, r0
 80013e4:	428a      	cmp	r2, r1
 80013e6:	d906      	bls.n	80013f6 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80013e8:	f000 f864 	bl	80014b4 <__errno>
 80013ec:	230c      	movs	r3, #12
 80013ee:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295
 80013f4:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80013f6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80013f8:	bd08      	pop	{r3, pc}
 80013fa:	bf00      	nop
 80013fc:	20000090 	.word	0x20000090
 8001400:	20000114 	.word	0x20000114

08001404 <_close>:

int _close(int file)
{
	return -1;
}
 8001404:	f04f 30ff 	mov.w	r0, #4294967295
 8001408:	4770      	bx	lr

0800140a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800140a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800140e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001410:	604b      	str	r3, [r1, #4]
}
 8001412:	4770      	bx	lr

08001414 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001414:	2001      	movs	r0, #1
 8001416:	4770      	bx	lr

08001418 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001418:	2000      	movs	r0, #0
 800141a:	4770      	bx	lr

0800141c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800141c:	4b0f      	ldr	r3, [pc, #60]	; (800145c <SystemInit+0x40>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	f042 0201 	orr.w	r2, r2, #1
 8001424:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001426:	6859      	ldr	r1, [r3, #4]
 8001428:	4a0d      	ldr	r2, [pc, #52]	; (8001460 <SystemInit+0x44>)
 800142a:	400a      	ands	r2, r1
 800142c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001434:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001438:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001440:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001448:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800144a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800144e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001450:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001454:	4b03      	ldr	r3, [pc, #12]	; (8001464 <SystemInit+0x48>)
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000
 8001460:	f8ff0000 	.word	0xf8ff0000
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001468:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800146a:	e003      	b.n	8001474 <LoopCopyDataInit>

0800146c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800146e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001470:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001472:	3104      	adds	r1, #4

08001474 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001474:	480a      	ldr	r0, [pc, #40]	; (80014a0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001478:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800147a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800147c:	d3f6      	bcc.n	800146c <CopyDataInit>
  ldr r2, =_sbss
 800147e:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001480:	e002      	b.n	8001488 <LoopFillZerobss>

08001482 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001484:	f842 3b04 	str.w	r3, [r2], #4

08001488 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <LoopFillZerobss+0x24>)
  cmp r2, r3
 800148a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800148c:	d3f9      	bcc.n	8001482 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800148e:	f7ff ffc5 	bl	800141c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001492:	f000 f815 	bl	80014c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001496:	f7ff fe37 	bl	8001108 <main>
  bx lr
 800149a:	4770      	bx	lr
  ldr r3, =_sidata
 800149c:	08002420 	.word	0x08002420
  ldr r0, =_sdata
 80014a0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80014a4:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80014a8:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80014ac:	20000114 	.word	0x20000114

080014b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014b0:	e7fe      	b.n	80014b0 <ADC1_2_IRQHandler>
	...

080014b4 <__errno>:
 80014b4:	4b01      	ldr	r3, [pc, #4]	; (80014bc <__errno+0x8>)
 80014b6:	6818      	ldr	r0, [r3, #0]
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	2000000c 	.word	0x2000000c

080014c0 <__libc_init_array>:
 80014c0:	b570      	push	{r4, r5, r6, lr}
 80014c2:	2500      	movs	r5, #0
 80014c4:	4e0c      	ldr	r6, [pc, #48]	; (80014f8 <__libc_init_array+0x38>)
 80014c6:	4c0d      	ldr	r4, [pc, #52]	; (80014fc <__libc_init_array+0x3c>)
 80014c8:	1ba4      	subs	r4, r4, r6
 80014ca:	10a4      	asrs	r4, r4, #2
 80014cc:	42a5      	cmp	r5, r4
 80014ce:	d109      	bne.n	80014e4 <__libc_init_array+0x24>
 80014d0:	f000 ff26 	bl	8002320 <_init>
 80014d4:	2500      	movs	r5, #0
 80014d6:	4e0a      	ldr	r6, [pc, #40]	; (8001500 <__libc_init_array+0x40>)
 80014d8:	4c0a      	ldr	r4, [pc, #40]	; (8001504 <__libc_init_array+0x44>)
 80014da:	1ba4      	subs	r4, r4, r6
 80014dc:	10a4      	asrs	r4, r4, #2
 80014de:	42a5      	cmp	r5, r4
 80014e0:	d105      	bne.n	80014ee <__libc_init_array+0x2e>
 80014e2:	bd70      	pop	{r4, r5, r6, pc}
 80014e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014e8:	4798      	blx	r3
 80014ea:	3501      	adds	r5, #1
 80014ec:	e7ee      	b.n	80014cc <__libc_init_array+0xc>
 80014ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014f2:	4798      	blx	r3
 80014f4:	3501      	adds	r5, #1
 80014f6:	e7f2      	b.n	80014de <__libc_init_array+0x1e>
 80014f8:	08002418 	.word	0x08002418
 80014fc:	08002418 	.word	0x08002418
 8001500:	08002418 	.word	0x08002418
 8001504:	0800241c 	.word	0x0800241c

08001508 <memset>:
 8001508:	4603      	mov	r3, r0
 800150a:	4402      	add	r2, r0
 800150c:	4293      	cmp	r3, r2
 800150e:	d100      	bne.n	8001512 <memset+0xa>
 8001510:	4770      	bx	lr
 8001512:	f803 1b01 	strb.w	r1, [r3], #1
 8001516:	e7f9      	b.n	800150c <memset+0x4>

08001518 <iprintf>:
 8001518:	b40f      	push	{r0, r1, r2, r3}
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <iprintf+0x2c>)
 800151c:	b513      	push	{r0, r1, r4, lr}
 800151e:	681c      	ldr	r4, [r3, #0]
 8001520:	b124      	cbz	r4, 800152c <iprintf+0x14>
 8001522:	69a3      	ldr	r3, [r4, #24]
 8001524:	b913      	cbnz	r3, 800152c <iprintf+0x14>
 8001526:	4620      	mov	r0, r4
 8001528:	f000 f84e 	bl	80015c8 <__sinit>
 800152c:	ab05      	add	r3, sp, #20
 800152e:	9a04      	ldr	r2, [sp, #16]
 8001530:	68a1      	ldr	r1, [r4, #8]
 8001532:	4620      	mov	r0, r4
 8001534:	9301      	str	r3, [sp, #4]
 8001536:	f000 f957 	bl	80017e8 <_vfiprintf_r>
 800153a:	b002      	add	sp, #8
 800153c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001540:	b004      	add	sp, #16
 8001542:	4770      	bx	lr
 8001544:	2000000c 	.word	0x2000000c

08001548 <_cleanup_r>:
 8001548:	4901      	ldr	r1, [pc, #4]	; (8001550 <_cleanup_r+0x8>)
 800154a:	f000 b8a9 	b.w	80016a0 <_fwalk_reent>
 800154e:	bf00      	nop
 8001550:	080020c1 	.word	0x080020c1

08001554 <std.isra.0>:
 8001554:	2300      	movs	r3, #0
 8001556:	b510      	push	{r4, lr}
 8001558:	4604      	mov	r4, r0
 800155a:	6003      	str	r3, [r0, #0]
 800155c:	6043      	str	r3, [r0, #4]
 800155e:	6083      	str	r3, [r0, #8]
 8001560:	8181      	strh	r1, [r0, #12]
 8001562:	6643      	str	r3, [r0, #100]	; 0x64
 8001564:	81c2      	strh	r2, [r0, #14]
 8001566:	6103      	str	r3, [r0, #16]
 8001568:	6143      	str	r3, [r0, #20]
 800156a:	6183      	str	r3, [r0, #24]
 800156c:	4619      	mov	r1, r3
 800156e:	2208      	movs	r2, #8
 8001570:	305c      	adds	r0, #92	; 0x5c
 8001572:	f7ff ffc9 	bl	8001508 <memset>
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <std.isra.0+0x38>)
 8001578:	6224      	str	r4, [r4, #32]
 800157a:	6263      	str	r3, [r4, #36]	; 0x24
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <std.isra.0+0x3c>)
 800157e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <std.isra.0+0x40>)
 8001582:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <std.isra.0+0x44>)
 8001586:	6323      	str	r3, [r4, #48]	; 0x30
 8001588:	bd10      	pop	{r4, pc}
 800158a:	bf00      	nop
 800158c:	08001d65 	.word	0x08001d65
 8001590:	08001d87 	.word	0x08001d87
 8001594:	08001dbf 	.word	0x08001dbf
 8001598:	08001de3 	.word	0x08001de3

0800159c <__sfmoreglue>:
 800159c:	b570      	push	{r4, r5, r6, lr}
 800159e:	2568      	movs	r5, #104	; 0x68
 80015a0:	1e4a      	subs	r2, r1, #1
 80015a2:	4355      	muls	r5, r2
 80015a4:	460e      	mov	r6, r1
 80015a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80015aa:	f000 f897 	bl	80016dc <_malloc_r>
 80015ae:	4604      	mov	r4, r0
 80015b0:	b140      	cbz	r0, 80015c4 <__sfmoreglue+0x28>
 80015b2:	2100      	movs	r1, #0
 80015b4:	e880 0042 	stmia.w	r0, {r1, r6}
 80015b8:	300c      	adds	r0, #12
 80015ba:	60a0      	str	r0, [r4, #8]
 80015bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80015c0:	f7ff ffa2 	bl	8001508 <memset>
 80015c4:	4620      	mov	r0, r4
 80015c6:	bd70      	pop	{r4, r5, r6, pc}

080015c8 <__sinit>:
 80015c8:	6983      	ldr	r3, [r0, #24]
 80015ca:	b510      	push	{r4, lr}
 80015cc:	4604      	mov	r4, r0
 80015ce:	bb33      	cbnz	r3, 800161e <__sinit+0x56>
 80015d0:	6483      	str	r3, [r0, #72]	; 0x48
 80015d2:	64c3      	str	r3, [r0, #76]	; 0x4c
 80015d4:	6503      	str	r3, [r0, #80]	; 0x50
 80015d6:	4b12      	ldr	r3, [pc, #72]	; (8001620 <__sinit+0x58>)
 80015d8:	4a12      	ldr	r2, [pc, #72]	; (8001624 <__sinit+0x5c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6282      	str	r2, [r0, #40]	; 0x28
 80015de:	4298      	cmp	r0, r3
 80015e0:	bf04      	itt	eq
 80015e2:	2301      	moveq	r3, #1
 80015e4:	6183      	streq	r3, [r0, #24]
 80015e6:	f000 f81f 	bl	8001628 <__sfp>
 80015ea:	6060      	str	r0, [r4, #4]
 80015ec:	4620      	mov	r0, r4
 80015ee:	f000 f81b 	bl	8001628 <__sfp>
 80015f2:	60a0      	str	r0, [r4, #8]
 80015f4:	4620      	mov	r0, r4
 80015f6:	f000 f817 	bl	8001628 <__sfp>
 80015fa:	2200      	movs	r2, #0
 80015fc:	60e0      	str	r0, [r4, #12]
 80015fe:	2104      	movs	r1, #4
 8001600:	6860      	ldr	r0, [r4, #4]
 8001602:	f7ff ffa7 	bl	8001554 <std.isra.0>
 8001606:	2201      	movs	r2, #1
 8001608:	2109      	movs	r1, #9
 800160a:	68a0      	ldr	r0, [r4, #8]
 800160c:	f7ff ffa2 	bl	8001554 <std.isra.0>
 8001610:	2202      	movs	r2, #2
 8001612:	2112      	movs	r1, #18
 8001614:	68e0      	ldr	r0, [r4, #12]
 8001616:	f7ff ff9d 	bl	8001554 <std.isra.0>
 800161a:	2301      	movs	r3, #1
 800161c:	61a3      	str	r3, [r4, #24]
 800161e:	bd10      	pop	{r4, pc}
 8001620:	08002380 	.word	0x08002380
 8001624:	08001549 	.word	0x08001549

08001628 <__sfp>:
 8001628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800162a:	4b1c      	ldr	r3, [pc, #112]	; (800169c <__sfp+0x74>)
 800162c:	4607      	mov	r7, r0
 800162e:	681e      	ldr	r6, [r3, #0]
 8001630:	69b3      	ldr	r3, [r6, #24]
 8001632:	b913      	cbnz	r3, 800163a <__sfp+0x12>
 8001634:	4630      	mov	r0, r6
 8001636:	f7ff ffc7 	bl	80015c8 <__sinit>
 800163a:	3648      	adds	r6, #72	; 0x48
 800163c:	68b4      	ldr	r4, [r6, #8]
 800163e:	6873      	ldr	r3, [r6, #4]
 8001640:	3b01      	subs	r3, #1
 8001642:	d503      	bpl.n	800164c <__sfp+0x24>
 8001644:	6833      	ldr	r3, [r6, #0]
 8001646:	b133      	cbz	r3, 8001656 <__sfp+0x2e>
 8001648:	6836      	ldr	r6, [r6, #0]
 800164a:	e7f7      	b.n	800163c <__sfp+0x14>
 800164c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001650:	b16d      	cbz	r5, 800166e <__sfp+0x46>
 8001652:	3468      	adds	r4, #104	; 0x68
 8001654:	e7f4      	b.n	8001640 <__sfp+0x18>
 8001656:	2104      	movs	r1, #4
 8001658:	4638      	mov	r0, r7
 800165a:	f7ff ff9f 	bl	800159c <__sfmoreglue>
 800165e:	6030      	str	r0, [r6, #0]
 8001660:	2800      	cmp	r0, #0
 8001662:	d1f1      	bne.n	8001648 <__sfp+0x20>
 8001664:	230c      	movs	r3, #12
 8001666:	4604      	mov	r4, r0
 8001668:	603b      	str	r3, [r7, #0]
 800166a:	4620      	mov	r0, r4
 800166c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800166e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001672:	81e3      	strh	r3, [r4, #14]
 8001674:	2301      	movs	r3, #1
 8001676:	6665      	str	r5, [r4, #100]	; 0x64
 8001678:	81a3      	strh	r3, [r4, #12]
 800167a:	6025      	str	r5, [r4, #0]
 800167c:	60a5      	str	r5, [r4, #8]
 800167e:	6065      	str	r5, [r4, #4]
 8001680:	6125      	str	r5, [r4, #16]
 8001682:	6165      	str	r5, [r4, #20]
 8001684:	61a5      	str	r5, [r4, #24]
 8001686:	2208      	movs	r2, #8
 8001688:	4629      	mov	r1, r5
 800168a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800168e:	f7ff ff3b 	bl	8001508 <memset>
 8001692:	6365      	str	r5, [r4, #52]	; 0x34
 8001694:	63a5      	str	r5, [r4, #56]	; 0x38
 8001696:	64a5      	str	r5, [r4, #72]	; 0x48
 8001698:	64e5      	str	r5, [r4, #76]	; 0x4c
 800169a:	e7e6      	b.n	800166a <__sfp+0x42>
 800169c:	08002380 	.word	0x08002380

080016a0 <_fwalk_reent>:
 80016a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016a4:	4680      	mov	r8, r0
 80016a6:	4689      	mov	r9, r1
 80016a8:	2600      	movs	r6, #0
 80016aa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80016ae:	b914      	cbnz	r4, 80016b6 <_fwalk_reent+0x16>
 80016b0:	4630      	mov	r0, r6
 80016b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016b6:	68a5      	ldr	r5, [r4, #8]
 80016b8:	6867      	ldr	r7, [r4, #4]
 80016ba:	3f01      	subs	r7, #1
 80016bc:	d501      	bpl.n	80016c2 <_fwalk_reent+0x22>
 80016be:	6824      	ldr	r4, [r4, #0]
 80016c0:	e7f5      	b.n	80016ae <_fwalk_reent+0xe>
 80016c2:	89ab      	ldrh	r3, [r5, #12]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d907      	bls.n	80016d8 <_fwalk_reent+0x38>
 80016c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80016cc:	3301      	adds	r3, #1
 80016ce:	d003      	beq.n	80016d8 <_fwalk_reent+0x38>
 80016d0:	4629      	mov	r1, r5
 80016d2:	4640      	mov	r0, r8
 80016d4:	47c8      	blx	r9
 80016d6:	4306      	orrs	r6, r0
 80016d8:	3568      	adds	r5, #104	; 0x68
 80016da:	e7ee      	b.n	80016ba <_fwalk_reent+0x1a>

080016dc <_malloc_r>:
 80016dc:	b570      	push	{r4, r5, r6, lr}
 80016de:	1ccd      	adds	r5, r1, #3
 80016e0:	f025 0503 	bic.w	r5, r5, #3
 80016e4:	3508      	adds	r5, #8
 80016e6:	2d0c      	cmp	r5, #12
 80016e8:	bf38      	it	cc
 80016ea:	250c      	movcc	r5, #12
 80016ec:	2d00      	cmp	r5, #0
 80016ee:	4606      	mov	r6, r0
 80016f0:	db01      	blt.n	80016f6 <_malloc_r+0x1a>
 80016f2:	42a9      	cmp	r1, r5
 80016f4:	d903      	bls.n	80016fe <_malloc_r+0x22>
 80016f6:	230c      	movs	r3, #12
 80016f8:	6033      	str	r3, [r6, #0]
 80016fa:	2000      	movs	r0, #0
 80016fc:	bd70      	pop	{r4, r5, r6, pc}
 80016fe:	f000 fd8d 	bl	800221c <__malloc_lock>
 8001702:	4a23      	ldr	r2, [pc, #140]	; (8001790 <_malloc_r+0xb4>)
 8001704:	6814      	ldr	r4, [r2, #0]
 8001706:	4621      	mov	r1, r4
 8001708:	b991      	cbnz	r1, 8001730 <_malloc_r+0x54>
 800170a:	4c22      	ldr	r4, [pc, #136]	; (8001794 <_malloc_r+0xb8>)
 800170c:	6823      	ldr	r3, [r4, #0]
 800170e:	b91b      	cbnz	r3, 8001718 <_malloc_r+0x3c>
 8001710:	4630      	mov	r0, r6
 8001712:	f000 fb17 	bl	8001d44 <_sbrk_r>
 8001716:	6020      	str	r0, [r4, #0]
 8001718:	4629      	mov	r1, r5
 800171a:	4630      	mov	r0, r6
 800171c:	f000 fb12 	bl	8001d44 <_sbrk_r>
 8001720:	1c43      	adds	r3, r0, #1
 8001722:	d126      	bne.n	8001772 <_malloc_r+0x96>
 8001724:	230c      	movs	r3, #12
 8001726:	4630      	mov	r0, r6
 8001728:	6033      	str	r3, [r6, #0]
 800172a:	f000 fd78 	bl	800221e <__malloc_unlock>
 800172e:	e7e4      	b.n	80016fa <_malloc_r+0x1e>
 8001730:	680b      	ldr	r3, [r1, #0]
 8001732:	1b5b      	subs	r3, r3, r5
 8001734:	d41a      	bmi.n	800176c <_malloc_r+0x90>
 8001736:	2b0b      	cmp	r3, #11
 8001738:	d90f      	bls.n	800175a <_malloc_r+0x7e>
 800173a:	600b      	str	r3, [r1, #0]
 800173c:	18cc      	adds	r4, r1, r3
 800173e:	50cd      	str	r5, [r1, r3]
 8001740:	4630      	mov	r0, r6
 8001742:	f000 fd6c 	bl	800221e <__malloc_unlock>
 8001746:	f104 000b 	add.w	r0, r4, #11
 800174a:	1d23      	adds	r3, r4, #4
 800174c:	f020 0007 	bic.w	r0, r0, #7
 8001750:	1ac3      	subs	r3, r0, r3
 8001752:	d01b      	beq.n	800178c <_malloc_r+0xb0>
 8001754:	425a      	negs	r2, r3
 8001756:	50e2      	str	r2, [r4, r3]
 8001758:	bd70      	pop	{r4, r5, r6, pc}
 800175a:	428c      	cmp	r4, r1
 800175c:	bf0b      	itete	eq
 800175e:	6863      	ldreq	r3, [r4, #4]
 8001760:	684b      	ldrne	r3, [r1, #4]
 8001762:	6013      	streq	r3, [r2, #0]
 8001764:	6063      	strne	r3, [r4, #4]
 8001766:	bf18      	it	ne
 8001768:	460c      	movne	r4, r1
 800176a:	e7e9      	b.n	8001740 <_malloc_r+0x64>
 800176c:	460c      	mov	r4, r1
 800176e:	6849      	ldr	r1, [r1, #4]
 8001770:	e7ca      	b.n	8001708 <_malloc_r+0x2c>
 8001772:	1cc4      	adds	r4, r0, #3
 8001774:	f024 0403 	bic.w	r4, r4, #3
 8001778:	42a0      	cmp	r0, r4
 800177a:	d005      	beq.n	8001788 <_malloc_r+0xac>
 800177c:	1a21      	subs	r1, r4, r0
 800177e:	4630      	mov	r0, r6
 8001780:	f000 fae0 	bl	8001d44 <_sbrk_r>
 8001784:	3001      	adds	r0, #1
 8001786:	d0cd      	beq.n	8001724 <_malloc_r+0x48>
 8001788:	6025      	str	r5, [r4, #0]
 800178a:	e7d9      	b.n	8001740 <_malloc_r+0x64>
 800178c:	bd70      	pop	{r4, r5, r6, pc}
 800178e:	bf00      	nop
 8001790:	20000094 	.word	0x20000094
 8001794:	20000098 	.word	0x20000098

08001798 <__sfputc_r>:
 8001798:	6893      	ldr	r3, [r2, #8]
 800179a:	b410      	push	{r4}
 800179c:	3b01      	subs	r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	6093      	str	r3, [r2, #8]
 80017a2:	da08      	bge.n	80017b6 <__sfputc_r+0x1e>
 80017a4:	6994      	ldr	r4, [r2, #24]
 80017a6:	42a3      	cmp	r3, r4
 80017a8:	db02      	blt.n	80017b0 <__sfputc_r+0x18>
 80017aa:	b2cb      	uxtb	r3, r1
 80017ac:	2b0a      	cmp	r3, #10
 80017ae:	d102      	bne.n	80017b6 <__sfputc_r+0x1e>
 80017b0:	bc10      	pop	{r4}
 80017b2:	f000 bb1b 	b.w	8001dec <__swbuf_r>
 80017b6:	6813      	ldr	r3, [r2, #0]
 80017b8:	1c58      	adds	r0, r3, #1
 80017ba:	6010      	str	r0, [r2, #0]
 80017bc:	7019      	strb	r1, [r3, #0]
 80017be:	b2c8      	uxtb	r0, r1
 80017c0:	bc10      	pop	{r4}
 80017c2:	4770      	bx	lr

080017c4 <__sfputs_r>:
 80017c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c6:	4606      	mov	r6, r0
 80017c8:	460f      	mov	r7, r1
 80017ca:	4614      	mov	r4, r2
 80017cc:	18d5      	adds	r5, r2, r3
 80017ce:	42ac      	cmp	r4, r5
 80017d0:	d101      	bne.n	80017d6 <__sfputs_r+0x12>
 80017d2:	2000      	movs	r0, #0
 80017d4:	e007      	b.n	80017e6 <__sfputs_r+0x22>
 80017d6:	463a      	mov	r2, r7
 80017d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017dc:	4630      	mov	r0, r6
 80017de:	f7ff ffdb 	bl	8001798 <__sfputc_r>
 80017e2:	1c43      	adds	r3, r0, #1
 80017e4:	d1f3      	bne.n	80017ce <__sfputs_r+0xa>
 80017e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080017e8 <_vfiprintf_r>:
 80017e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017ec:	b09d      	sub	sp, #116	; 0x74
 80017ee:	460c      	mov	r4, r1
 80017f0:	4617      	mov	r7, r2
 80017f2:	9303      	str	r3, [sp, #12]
 80017f4:	4606      	mov	r6, r0
 80017f6:	b118      	cbz	r0, 8001800 <_vfiprintf_r+0x18>
 80017f8:	6983      	ldr	r3, [r0, #24]
 80017fa:	b90b      	cbnz	r3, 8001800 <_vfiprintf_r+0x18>
 80017fc:	f7ff fee4 	bl	80015c8 <__sinit>
 8001800:	4b7c      	ldr	r3, [pc, #496]	; (80019f4 <_vfiprintf_r+0x20c>)
 8001802:	429c      	cmp	r4, r3
 8001804:	d157      	bne.n	80018b6 <_vfiprintf_r+0xce>
 8001806:	6874      	ldr	r4, [r6, #4]
 8001808:	89a3      	ldrh	r3, [r4, #12]
 800180a:	0718      	lsls	r0, r3, #28
 800180c:	d55d      	bpl.n	80018ca <_vfiprintf_r+0xe2>
 800180e:	6923      	ldr	r3, [r4, #16]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d05a      	beq.n	80018ca <_vfiprintf_r+0xe2>
 8001814:	2300      	movs	r3, #0
 8001816:	9309      	str	r3, [sp, #36]	; 0x24
 8001818:	2320      	movs	r3, #32
 800181a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800181e:	2330      	movs	r3, #48	; 0x30
 8001820:	f04f 0b01 	mov.w	fp, #1
 8001824:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001828:	46b8      	mov	r8, r7
 800182a:	4645      	mov	r5, r8
 800182c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001830:	2b00      	cmp	r3, #0
 8001832:	d155      	bne.n	80018e0 <_vfiprintf_r+0xf8>
 8001834:	ebb8 0a07 	subs.w	sl, r8, r7
 8001838:	d00b      	beq.n	8001852 <_vfiprintf_r+0x6a>
 800183a:	4653      	mov	r3, sl
 800183c:	463a      	mov	r2, r7
 800183e:	4621      	mov	r1, r4
 8001840:	4630      	mov	r0, r6
 8001842:	f7ff ffbf 	bl	80017c4 <__sfputs_r>
 8001846:	3001      	adds	r0, #1
 8001848:	f000 80c4 	beq.w	80019d4 <_vfiprintf_r+0x1ec>
 800184c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800184e:	4453      	add	r3, sl
 8001850:	9309      	str	r3, [sp, #36]	; 0x24
 8001852:	f898 3000 	ldrb.w	r3, [r8]
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 80bc 	beq.w	80019d4 <_vfiprintf_r+0x1ec>
 800185c:	2300      	movs	r3, #0
 800185e:	f04f 32ff 	mov.w	r2, #4294967295
 8001862:	9304      	str	r3, [sp, #16]
 8001864:	9307      	str	r3, [sp, #28]
 8001866:	9205      	str	r2, [sp, #20]
 8001868:	9306      	str	r3, [sp, #24]
 800186a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800186e:	931a      	str	r3, [sp, #104]	; 0x68
 8001870:	2205      	movs	r2, #5
 8001872:	7829      	ldrb	r1, [r5, #0]
 8001874:	4860      	ldr	r0, [pc, #384]	; (80019f8 <_vfiprintf_r+0x210>)
 8001876:	f000 fcc3 	bl	8002200 <memchr>
 800187a:	f105 0801 	add.w	r8, r5, #1
 800187e:	9b04      	ldr	r3, [sp, #16]
 8001880:	2800      	cmp	r0, #0
 8001882:	d131      	bne.n	80018e8 <_vfiprintf_r+0x100>
 8001884:	06d9      	lsls	r1, r3, #27
 8001886:	bf44      	itt	mi
 8001888:	2220      	movmi	r2, #32
 800188a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800188e:	071a      	lsls	r2, r3, #28
 8001890:	bf44      	itt	mi
 8001892:	222b      	movmi	r2, #43	; 0x2b
 8001894:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001898:	782a      	ldrb	r2, [r5, #0]
 800189a:	2a2a      	cmp	r2, #42	; 0x2a
 800189c:	d02c      	beq.n	80018f8 <_vfiprintf_r+0x110>
 800189e:	2100      	movs	r1, #0
 80018a0:	200a      	movs	r0, #10
 80018a2:	9a07      	ldr	r2, [sp, #28]
 80018a4:	46a8      	mov	r8, r5
 80018a6:	f898 3000 	ldrb.w	r3, [r8]
 80018aa:	3501      	adds	r5, #1
 80018ac:	3b30      	subs	r3, #48	; 0x30
 80018ae:	2b09      	cmp	r3, #9
 80018b0:	d96d      	bls.n	800198e <_vfiprintf_r+0x1a6>
 80018b2:	b371      	cbz	r1, 8001912 <_vfiprintf_r+0x12a>
 80018b4:	e026      	b.n	8001904 <_vfiprintf_r+0x11c>
 80018b6:	4b51      	ldr	r3, [pc, #324]	; (80019fc <_vfiprintf_r+0x214>)
 80018b8:	429c      	cmp	r4, r3
 80018ba:	d101      	bne.n	80018c0 <_vfiprintf_r+0xd8>
 80018bc:	68b4      	ldr	r4, [r6, #8]
 80018be:	e7a3      	b.n	8001808 <_vfiprintf_r+0x20>
 80018c0:	4b4f      	ldr	r3, [pc, #316]	; (8001a00 <_vfiprintf_r+0x218>)
 80018c2:	429c      	cmp	r4, r3
 80018c4:	bf08      	it	eq
 80018c6:	68f4      	ldreq	r4, [r6, #12]
 80018c8:	e79e      	b.n	8001808 <_vfiprintf_r+0x20>
 80018ca:	4621      	mov	r1, r4
 80018cc:	4630      	mov	r0, r6
 80018ce:	f000 faf1 	bl	8001eb4 <__swsetup_r>
 80018d2:	2800      	cmp	r0, #0
 80018d4:	d09e      	beq.n	8001814 <_vfiprintf_r+0x2c>
 80018d6:	f04f 30ff 	mov.w	r0, #4294967295
 80018da:	b01d      	add	sp, #116	; 0x74
 80018dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018e0:	2b25      	cmp	r3, #37	; 0x25
 80018e2:	d0a7      	beq.n	8001834 <_vfiprintf_r+0x4c>
 80018e4:	46a8      	mov	r8, r5
 80018e6:	e7a0      	b.n	800182a <_vfiprintf_r+0x42>
 80018e8:	4a43      	ldr	r2, [pc, #268]	; (80019f8 <_vfiprintf_r+0x210>)
 80018ea:	4645      	mov	r5, r8
 80018ec:	1a80      	subs	r0, r0, r2
 80018ee:	fa0b f000 	lsl.w	r0, fp, r0
 80018f2:	4318      	orrs	r0, r3
 80018f4:	9004      	str	r0, [sp, #16]
 80018f6:	e7bb      	b.n	8001870 <_vfiprintf_r+0x88>
 80018f8:	9a03      	ldr	r2, [sp, #12]
 80018fa:	1d11      	adds	r1, r2, #4
 80018fc:	6812      	ldr	r2, [r2, #0]
 80018fe:	9103      	str	r1, [sp, #12]
 8001900:	2a00      	cmp	r2, #0
 8001902:	db01      	blt.n	8001908 <_vfiprintf_r+0x120>
 8001904:	9207      	str	r2, [sp, #28]
 8001906:	e004      	b.n	8001912 <_vfiprintf_r+0x12a>
 8001908:	4252      	negs	r2, r2
 800190a:	f043 0302 	orr.w	r3, r3, #2
 800190e:	9207      	str	r2, [sp, #28]
 8001910:	9304      	str	r3, [sp, #16]
 8001912:	f898 3000 	ldrb.w	r3, [r8]
 8001916:	2b2e      	cmp	r3, #46	; 0x2e
 8001918:	d110      	bne.n	800193c <_vfiprintf_r+0x154>
 800191a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800191e:	f108 0101 	add.w	r1, r8, #1
 8001922:	2b2a      	cmp	r3, #42	; 0x2a
 8001924:	d137      	bne.n	8001996 <_vfiprintf_r+0x1ae>
 8001926:	9b03      	ldr	r3, [sp, #12]
 8001928:	f108 0802 	add.w	r8, r8, #2
 800192c:	1d1a      	adds	r2, r3, #4
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	9203      	str	r2, [sp, #12]
 8001932:	2b00      	cmp	r3, #0
 8001934:	bfb8      	it	lt
 8001936:	f04f 33ff 	movlt.w	r3, #4294967295
 800193a:	9305      	str	r3, [sp, #20]
 800193c:	4d31      	ldr	r5, [pc, #196]	; (8001a04 <_vfiprintf_r+0x21c>)
 800193e:	2203      	movs	r2, #3
 8001940:	f898 1000 	ldrb.w	r1, [r8]
 8001944:	4628      	mov	r0, r5
 8001946:	f000 fc5b 	bl	8002200 <memchr>
 800194a:	b140      	cbz	r0, 800195e <_vfiprintf_r+0x176>
 800194c:	2340      	movs	r3, #64	; 0x40
 800194e:	1b40      	subs	r0, r0, r5
 8001950:	fa03 f000 	lsl.w	r0, r3, r0
 8001954:	9b04      	ldr	r3, [sp, #16]
 8001956:	f108 0801 	add.w	r8, r8, #1
 800195a:	4303      	orrs	r3, r0
 800195c:	9304      	str	r3, [sp, #16]
 800195e:	f898 1000 	ldrb.w	r1, [r8]
 8001962:	2206      	movs	r2, #6
 8001964:	4828      	ldr	r0, [pc, #160]	; (8001a08 <_vfiprintf_r+0x220>)
 8001966:	f108 0701 	add.w	r7, r8, #1
 800196a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800196e:	f000 fc47 	bl	8002200 <memchr>
 8001972:	2800      	cmp	r0, #0
 8001974:	d034      	beq.n	80019e0 <_vfiprintf_r+0x1f8>
 8001976:	4b25      	ldr	r3, [pc, #148]	; (8001a0c <_vfiprintf_r+0x224>)
 8001978:	bb03      	cbnz	r3, 80019bc <_vfiprintf_r+0x1d4>
 800197a:	9b03      	ldr	r3, [sp, #12]
 800197c:	3307      	adds	r3, #7
 800197e:	f023 0307 	bic.w	r3, r3, #7
 8001982:	3308      	adds	r3, #8
 8001984:	9303      	str	r3, [sp, #12]
 8001986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001988:	444b      	add	r3, r9
 800198a:	9309      	str	r3, [sp, #36]	; 0x24
 800198c:	e74c      	b.n	8001828 <_vfiprintf_r+0x40>
 800198e:	fb00 3202 	mla	r2, r0, r2, r3
 8001992:	2101      	movs	r1, #1
 8001994:	e786      	b.n	80018a4 <_vfiprintf_r+0xbc>
 8001996:	2300      	movs	r3, #0
 8001998:	250a      	movs	r5, #10
 800199a:	4618      	mov	r0, r3
 800199c:	9305      	str	r3, [sp, #20]
 800199e:	4688      	mov	r8, r1
 80019a0:	f898 2000 	ldrb.w	r2, [r8]
 80019a4:	3101      	adds	r1, #1
 80019a6:	3a30      	subs	r2, #48	; 0x30
 80019a8:	2a09      	cmp	r2, #9
 80019aa:	d903      	bls.n	80019b4 <_vfiprintf_r+0x1cc>
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0c5      	beq.n	800193c <_vfiprintf_r+0x154>
 80019b0:	9005      	str	r0, [sp, #20]
 80019b2:	e7c3      	b.n	800193c <_vfiprintf_r+0x154>
 80019b4:	fb05 2000 	mla	r0, r5, r0, r2
 80019b8:	2301      	movs	r3, #1
 80019ba:	e7f0      	b.n	800199e <_vfiprintf_r+0x1b6>
 80019bc:	ab03      	add	r3, sp, #12
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	4622      	mov	r2, r4
 80019c2:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <_vfiprintf_r+0x228>)
 80019c4:	a904      	add	r1, sp, #16
 80019c6:	4630      	mov	r0, r6
 80019c8:	f3af 8000 	nop.w
 80019cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80019d0:	4681      	mov	r9, r0
 80019d2:	d1d8      	bne.n	8001986 <_vfiprintf_r+0x19e>
 80019d4:	89a3      	ldrh	r3, [r4, #12]
 80019d6:	065b      	lsls	r3, r3, #25
 80019d8:	f53f af7d 	bmi.w	80018d6 <_vfiprintf_r+0xee>
 80019dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80019de:	e77c      	b.n	80018da <_vfiprintf_r+0xf2>
 80019e0:	ab03      	add	r3, sp, #12
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	4622      	mov	r2, r4
 80019e6:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <_vfiprintf_r+0x228>)
 80019e8:	a904      	add	r1, sp, #16
 80019ea:	4630      	mov	r0, r6
 80019ec:	f000 f88a 	bl	8001b04 <_printf_i>
 80019f0:	e7ec      	b.n	80019cc <_vfiprintf_r+0x1e4>
 80019f2:	bf00      	nop
 80019f4:	080023a4 	.word	0x080023a4
 80019f8:	080023e4 	.word	0x080023e4
 80019fc:	080023c4 	.word	0x080023c4
 8001a00:	08002384 	.word	0x08002384
 8001a04:	080023ea 	.word	0x080023ea
 8001a08:	080023ee 	.word	0x080023ee
 8001a0c:	00000000 	.word	0x00000000
 8001a10:	080017c5 	.word	0x080017c5

08001a14 <_printf_common>:
 8001a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a18:	4691      	mov	r9, r2
 8001a1a:	461f      	mov	r7, r3
 8001a1c:	688a      	ldr	r2, [r1, #8]
 8001a1e:	690b      	ldr	r3, [r1, #16]
 8001a20:	4606      	mov	r6, r0
 8001a22:	4293      	cmp	r3, r2
 8001a24:	bfb8      	it	lt
 8001a26:	4613      	movlt	r3, r2
 8001a28:	f8c9 3000 	str.w	r3, [r9]
 8001a2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001a30:	460c      	mov	r4, r1
 8001a32:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001a36:	b112      	cbz	r2, 8001a3e <_printf_common+0x2a>
 8001a38:	3301      	adds	r3, #1
 8001a3a:	f8c9 3000 	str.w	r3, [r9]
 8001a3e:	6823      	ldr	r3, [r4, #0]
 8001a40:	0699      	lsls	r1, r3, #26
 8001a42:	bf42      	ittt	mi
 8001a44:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001a48:	3302      	addmi	r3, #2
 8001a4a:	f8c9 3000 	strmi.w	r3, [r9]
 8001a4e:	6825      	ldr	r5, [r4, #0]
 8001a50:	f015 0506 	ands.w	r5, r5, #6
 8001a54:	d107      	bne.n	8001a66 <_printf_common+0x52>
 8001a56:	f104 0a19 	add.w	sl, r4, #25
 8001a5a:	68e3      	ldr	r3, [r4, #12]
 8001a5c:	f8d9 2000 	ldr.w	r2, [r9]
 8001a60:	1a9b      	subs	r3, r3, r2
 8001a62:	429d      	cmp	r5, r3
 8001a64:	db2a      	blt.n	8001abc <_printf_common+0xa8>
 8001a66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001a6a:	6822      	ldr	r2, [r4, #0]
 8001a6c:	3300      	adds	r3, #0
 8001a6e:	bf18      	it	ne
 8001a70:	2301      	movne	r3, #1
 8001a72:	0692      	lsls	r2, r2, #26
 8001a74:	d42f      	bmi.n	8001ad6 <_printf_common+0xc2>
 8001a76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001a7a:	4639      	mov	r1, r7
 8001a7c:	4630      	mov	r0, r6
 8001a7e:	47c0      	blx	r8
 8001a80:	3001      	adds	r0, #1
 8001a82:	d022      	beq.n	8001aca <_printf_common+0xb6>
 8001a84:	6823      	ldr	r3, [r4, #0]
 8001a86:	68e5      	ldr	r5, [r4, #12]
 8001a88:	f003 0306 	and.w	r3, r3, #6
 8001a8c:	2b04      	cmp	r3, #4
 8001a8e:	bf18      	it	ne
 8001a90:	2500      	movne	r5, #0
 8001a92:	f8d9 2000 	ldr.w	r2, [r9]
 8001a96:	f04f 0900 	mov.w	r9, #0
 8001a9a:	bf08      	it	eq
 8001a9c:	1aad      	subeq	r5, r5, r2
 8001a9e:	68a3      	ldr	r3, [r4, #8]
 8001aa0:	6922      	ldr	r2, [r4, #16]
 8001aa2:	bf08      	it	eq
 8001aa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	bfc4      	itt	gt
 8001aac:	1a9b      	subgt	r3, r3, r2
 8001aae:	18ed      	addgt	r5, r5, r3
 8001ab0:	341a      	adds	r4, #26
 8001ab2:	454d      	cmp	r5, r9
 8001ab4:	d11b      	bne.n	8001aee <_printf_common+0xda>
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001abc:	2301      	movs	r3, #1
 8001abe:	4652      	mov	r2, sl
 8001ac0:	4639      	mov	r1, r7
 8001ac2:	4630      	mov	r0, r6
 8001ac4:	47c0      	blx	r8
 8001ac6:	3001      	adds	r0, #1
 8001ac8:	d103      	bne.n	8001ad2 <_printf_common+0xbe>
 8001aca:	f04f 30ff 	mov.w	r0, #4294967295
 8001ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ad2:	3501      	adds	r5, #1
 8001ad4:	e7c1      	b.n	8001a5a <_printf_common+0x46>
 8001ad6:	2030      	movs	r0, #48	; 0x30
 8001ad8:	18e1      	adds	r1, r4, r3
 8001ada:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001ae4:	4422      	add	r2, r4
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001aec:	e7c3      	b.n	8001a76 <_printf_common+0x62>
 8001aee:	2301      	movs	r3, #1
 8001af0:	4622      	mov	r2, r4
 8001af2:	4639      	mov	r1, r7
 8001af4:	4630      	mov	r0, r6
 8001af6:	47c0      	blx	r8
 8001af8:	3001      	adds	r0, #1
 8001afa:	d0e6      	beq.n	8001aca <_printf_common+0xb6>
 8001afc:	f109 0901 	add.w	r9, r9, #1
 8001b00:	e7d7      	b.n	8001ab2 <_printf_common+0x9e>
	...

08001b04 <_printf_i>:
 8001b04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b08:	4617      	mov	r7, r2
 8001b0a:	7e0a      	ldrb	r2, [r1, #24]
 8001b0c:	b085      	sub	sp, #20
 8001b0e:	2a6e      	cmp	r2, #110	; 0x6e
 8001b10:	4698      	mov	r8, r3
 8001b12:	4606      	mov	r6, r0
 8001b14:	460c      	mov	r4, r1
 8001b16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001b18:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001b1c:	f000 80bc 	beq.w	8001c98 <_printf_i+0x194>
 8001b20:	d81a      	bhi.n	8001b58 <_printf_i+0x54>
 8001b22:	2a63      	cmp	r2, #99	; 0x63
 8001b24:	d02e      	beq.n	8001b84 <_printf_i+0x80>
 8001b26:	d80a      	bhi.n	8001b3e <_printf_i+0x3a>
 8001b28:	2a00      	cmp	r2, #0
 8001b2a:	f000 80c8 	beq.w	8001cbe <_printf_i+0x1ba>
 8001b2e:	2a58      	cmp	r2, #88	; 0x58
 8001b30:	f000 808a 	beq.w	8001c48 <_printf_i+0x144>
 8001b34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b38:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001b3c:	e02a      	b.n	8001b94 <_printf_i+0x90>
 8001b3e:	2a64      	cmp	r2, #100	; 0x64
 8001b40:	d001      	beq.n	8001b46 <_printf_i+0x42>
 8001b42:	2a69      	cmp	r2, #105	; 0x69
 8001b44:	d1f6      	bne.n	8001b34 <_printf_i+0x30>
 8001b46:	6821      	ldr	r1, [r4, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001b4e:	d023      	beq.n	8001b98 <_printf_i+0x94>
 8001b50:	1d11      	adds	r1, r2, #4
 8001b52:	6019      	str	r1, [r3, #0]
 8001b54:	6813      	ldr	r3, [r2, #0]
 8001b56:	e027      	b.n	8001ba8 <_printf_i+0xa4>
 8001b58:	2a73      	cmp	r2, #115	; 0x73
 8001b5a:	f000 80b4 	beq.w	8001cc6 <_printf_i+0x1c2>
 8001b5e:	d808      	bhi.n	8001b72 <_printf_i+0x6e>
 8001b60:	2a6f      	cmp	r2, #111	; 0x6f
 8001b62:	d02a      	beq.n	8001bba <_printf_i+0xb6>
 8001b64:	2a70      	cmp	r2, #112	; 0x70
 8001b66:	d1e5      	bne.n	8001b34 <_printf_i+0x30>
 8001b68:	680a      	ldr	r2, [r1, #0]
 8001b6a:	f042 0220 	orr.w	r2, r2, #32
 8001b6e:	600a      	str	r2, [r1, #0]
 8001b70:	e003      	b.n	8001b7a <_printf_i+0x76>
 8001b72:	2a75      	cmp	r2, #117	; 0x75
 8001b74:	d021      	beq.n	8001bba <_printf_i+0xb6>
 8001b76:	2a78      	cmp	r2, #120	; 0x78
 8001b78:	d1dc      	bne.n	8001b34 <_printf_i+0x30>
 8001b7a:	2278      	movs	r2, #120	; 0x78
 8001b7c:	496f      	ldr	r1, [pc, #444]	; (8001d3c <_printf_i+0x238>)
 8001b7e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001b82:	e064      	b.n	8001c4e <_printf_i+0x14a>
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001b8a:	1d11      	adds	r1, r2, #4
 8001b8c:	6019      	str	r1, [r3, #0]
 8001b8e:	6813      	ldr	r3, [r2, #0]
 8001b90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0a3      	b.n	8001ce0 <_printf_i+0x1dc>
 8001b98:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001b9c:	f102 0104 	add.w	r1, r2, #4
 8001ba0:	6019      	str	r1, [r3, #0]
 8001ba2:	d0d7      	beq.n	8001b54 <_printf_i+0x50>
 8001ba4:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	da03      	bge.n	8001bb4 <_printf_i+0xb0>
 8001bac:	222d      	movs	r2, #45	; 0x2d
 8001bae:	425b      	negs	r3, r3
 8001bb0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001bb4:	4962      	ldr	r1, [pc, #392]	; (8001d40 <_printf_i+0x23c>)
 8001bb6:	220a      	movs	r2, #10
 8001bb8:	e017      	b.n	8001bea <_printf_i+0xe6>
 8001bba:	6820      	ldr	r0, [r4, #0]
 8001bbc:	6819      	ldr	r1, [r3, #0]
 8001bbe:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001bc2:	d003      	beq.n	8001bcc <_printf_i+0xc8>
 8001bc4:	1d08      	adds	r0, r1, #4
 8001bc6:	6018      	str	r0, [r3, #0]
 8001bc8:	680b      	ldr	r3, [r1, #0]
 8001bca:	e006      	b.n	8001bda <_printf_i+0xd6>
 8001bcc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001bd0:	f101 0004 	add.w	r0, r1, #4
 8001bd4:	6018      	str	r0, [r3, #0]
 8001bd6:	d0f7      	beq.n	8001bc8 <_printf_i+0xc4>
 8001bd8:	880b      	ldrh	r3, [r1, #0]
 8001bda:	2a6f      	cmp	r2, #111	; 0x6f
 8001bdc:	bf14      	ite	ne
 8001bde:	220a      	movne	r2, #10
 8001be0:	2208      	moveq	r2, #8
 8001be2:	4957      	ldr	r1, [pc, #348]	; (8001d40 <_printf_i+0x23c>)
 8001be4:	2000      	movs	r0, #0
 8001be6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001bea:	6865      	ldr	r5, [r4, #4]
 8001bec:	2d00      	cmp	r5, #0
 8001bee:	60a5      	str	r5, [r4, #8]
 8001bf0:	f2c0 809c 	blt.w	8001d2c <_printf_i+0x228>
 8001bf4:	6820      	ldr	r0, [r4, #0]
 8001bf6:	f020 0004 	bic.w	r0, r0, #4
 8001bfa:	6020      	str	r0, [r4, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d13f      	bne.n	8001c80 <_printf_i+0x17c>
 8001c00:	2d00      	cmp	r5, #0
 8001c02:	f040 8095 	bne.w	8001d30 <_printf_i+0x22c>
 8001c06:	4675      	mov	r5, lr
 8001c08:	2a08      	cmp	r2, #8
 8001c0a:	d10b      	bne.n	8001c24 <_printf_i+0x120>
 8001c0c:	6823      	ldr	r3, [r4, #0]
 8001c0e:	07da      	lsls	r2, r3, #31
 8001c10:	d508      	bpl.n	8001c24 <_printf_i+0x120>
 8001c12:	6923      	ldr	r3, [r4, #16]
 8001c14:	6862      	ldr	r2, [r4, #4]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	bfde      	ittt	le
 8001c1a:	2330      	movle	r3, #48	; 0x30
 8001c1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001c20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001c24:	ebae 0305 	sub.w	r3, lr, r5
 8001c28:	6123      	str	r3, [r4, #16]
 8001c2a:	f8cd 8000 	str.w	r8, [sp]
 8001c2e:	463b      	mov	r3, r7
 8001c30:	aa03      	add	r2, sp, #12
 8001c32:	4621      	mov	r1, r4
 8001c34:	4630      	mov	r0, r6
 8001c36:	f7ff feed 	bl	8001a14 <_printf_common>
 8001c3a:	3001      	adds	r0, #1
 8001c3c:	d155      	bne.n	8001cea <_printf_i+0x1e6>
 8001c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c42:	b005      	add	sp, #20
 8001c44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c48:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001c4c:	493c      	ldr	r1, [pc, #240]	; (8001d40 <_printf_i+0x23c>)
 8001c4e:	6822      	ldr	r2, [r4, #0]
 8001c50:	6818      	ldr	r0, [r3, #0]
 8001c52:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001c56:	f100 0504 	add.w	r5, r0, #4
 8001c5a:	601d      	str	r5, [r3, #0]
 8001c5c:	d001      	beq.n	8001c62 <_printf_i+0x15e>
 8001c5e:	6803      	ldr	r3, [r0, #0]
 8001c60:	e002      	b.n	8001c68 <_printf_i+0x164>
 8001c62:	0655      	lsls	r5, r2, #25
 8001c64:	d5fb      	bpl.n	8001c5e <_printf_i+0x15a>
 8001c66:	8803      	ldrh	r3, [r0, #0]
 8001c68:	07d0      	lsls	r0, r2, #31
 8001c6a:	bf44      	itt	mi
 8001c6c:	f042 0220 	orrmi.w	r2, r2, #32
 8001c70:	6022      	strmi	r2, [r4, #0]
 8001c72:	b91b      	cbnz	r3, 8001c7c <_printf_i+0x178>
 8001c74:	6822      	ldr	r2, [r4, #0]
 8001c76:	f022 0220 	bic.w	r2, r2, #32
 8001c7a:	6022      	str	r2, [r4, #0]
 8001c7c:	2210      	movs	r2, #16
 8001c7e:	e7b1      	b.n	8001be4 <_printf_i+0xe0>
 8001c80:	4675      	mov	r5, lr
 8001c82:	fbb3 f0f2 	udiv	r0, r3, r2
 8001c86:	fb02 3310 	mls	r3, r2, r0, r3
 8001c8a:	5ccb      	ldrb	r3, [r1, r3]
 8001c8c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001c90:	4603      	mov	r3, r0
 8001c92:	2800      	cmp	r0, #0
 8001c94:	d1f5      	bne.n	8001c82 <_printf_i+0x17e>
 8001c96:	e7b7      	b.n	8001c08 <_printf_i+0x104>
 8001c98:	6808      	ldr	r0, [r1, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001ca0:	6949      	ldr	r1, [r1, #20]
 8001ca2:	d004      	beq.n	8001cae <_printf_i+0x1aa>
 8001ca4:	1d10      	adds	r0, r2, #4
 8001ca6:	6018      	str	r0, [r3, #0]
 8001ca8:	6813      	ldr	r3, [r2, #0]
 8001caa:	6019      	str	r1, [r3, #0]
 8001cac:	e007      	b.n	8001cbe <_printf_i+0x1ba>
 8001cae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001cb2:	f102 0004 	add.w	r0, r2, #4
 8001cb6:	6018      	str	r0, [r3, #0]
 8001cb8:	6813      	ldr	r3, [r2, #0]
 8001cba:	d0f6      	beq.n	8001caa <_printf_i+0x1a6>
 8001cbc:	8019      	strh	r1, [r3, #0]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	4675      	mov	r5, lr
 8001cc2:	6123      	str	r3, [r4, #16]
 8001cc4:	e7b1      	b.n	8001c2a <_printf_i+0x126>
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	1d11      	adds	r1, r2, #4
 8001cca:	6019      	str	r1, [r3, #0]
 8001ccc:	6815      	ldr	r5, [r2, #0]
 8001cce:	2100      	movs	r1, #0
 8001cd0:	6862      	ldr	r2, [r4, #4]
 8001cd2:	4628      	mov	r0, r5
 8001cd4:	f000 fa94 	bl	8002200 <memchr>
 8001cd8:	b108      	cbz	r0, 8001cde <_printf_i+0x1da>
 8001cda:	1b40      	subs	r0, r0, r5
 8001cdc:	6060      	str	r0, [r4, #4]
 8001cde:	6863      	ldr	r3, [r4, #4]
 8001ce0:	6123      	str	r3, [r4, #16]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ce8:	e79f      	b.n	8001c2a <_printf_i+0x126>
 8001cea:	6923      	ldr	r3, [r4, #16]
 8001cec:	462a      	mov	r2, r5
 8001cee:	4639      	mov	r1, r7
 8001cf0:	4630      	mov	r0, r6
 8001cf2:	47c0      	blx	r8
 8001cf4:	3001      	adds	r0, #1
 8001cf6:	d0a2      	beq.n	8001c3e <_printf_i+0x13a>
 8001cf8:	6823      	ldr	r3, [r4, #0]
 8001cfa:	079b      	lsls	r3, r3, #30
 8001cfc:	d507      	bpl.n	8001d0e <_printf_i+0x20a>
 8001cfe:	2500      	movs	r5, #0
 8001d00:	f104 0919 	add.w	r9, r4, #25
 8001d04:	68e3      	ldr	r3, [r4, #12]
 8001d06:	9a03      	ldr	r2, [sp, #12]
 8001d08:	1a9b      	subs	r3, r3, r2
 8001d0a:	429d      	cmp	r5, r3
 8001d0c:	db05      	blt.n	8001d1a <_printf_i+0x216>
 8001d0e:	68e0      	ldr	r0, [r4, #12]
 8001d10:	9b03      	ldr	r3, [sp, #12]
 8001d12:	4298      	cmp	r0, r3
 8001d14:	bfb8      	it	lt
 8001d16:	4618      	movlt	r0, r3
 8001d18:	e793      	b.n	8001c42 <_printf_i+0x13e>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	464a      	mov	r2, r9
 8001d1e:	4639      	mov	r1, r7
 8001d20:	4630      	mov	r0, r6
 8001d22:	47c0      	blx	r8
 8001d24:	3001      	adds	r0, #1
 8001d26:	d08a      	beq.n	8001c3e <_printf_i+0x13a>
 8001d28:	3501      	adds	r5, #1
 8001d2a:	e7eb      	b.n	8001d04 <_printf_i+0x200>
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1a7      	bne.n	8001c80 <_printf_i+0x17c>
 8001d30:	780b      	ldrb	r3, [r1, #0]
 8001d32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d3a:	e765      	b.n	8001c08 <_printf_i+0x104>
 8001d3c:	08002406 	.word	0x08002406
 8001d40:	080023f5 	.word	0x080023f5

08001d44 <_sbrk_r>:
 8001d44:	b538      	push	{r3, r4, r5, lr}
 8001d46:	2300      	movs	r3, #0
 8001d48:	4c05      	ldr	r4, [pc, #20]	; (8001d60 <_sbrk_r+0x1c>)
 8001d4a:	4605      	mov	r5, r0
 8001d4c:	4608      	mov	r0, r1
 8001d4e:	6023      	str	r3, [r4, #0]
 8001d50:	f7ff fb3e 	bl	80013d0 <_sbrk>
 8001d54:	1c43      	adds	r3, r0, #1
 8001d56:	d102      	bne.n	8001d5e <_sbrk_r+0x1a>
 8001d58:	6823      	ldr	r3, [r4, #0]
 8001d5a:	b103      	cbz	r3, 8001d5e <_sbrk_r+0x1a>
 8001d5c:	602b      	str	r3, [r5, #0]
 8001d5e:	bd38      	pop	{r3, r4, r5, pc}
 8001d60:	20000110 	.word	0x20000110

08001d64 <__sread>:
 8001d64:	b510      	push	{r4, lr}
 8001d66:	460c      	mov	r4, r1
 8001d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d6c:	f000 faa4 	bl	80022b8 <_read_r>
 8001d70:	2800      	cmp	r0, #0
 8001d72:	bfab      	itete	ge
 8001d74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001d76:	89a3      	ldrhlt	r3, [r4, #12]
 8001d78:	181b      	addge	r3, r3, r0
 8001d7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001d7e:	bfac      	ite	ge
 8001d80:	6563      	strge	r3, [r4, #84]	; 0x54
 8001d82:	81a3      	strhlt	r3, [r4, #12]
 8001d84:	bd10      	pop	{r4, pc}

08001d86 <__swrite>:
 8001d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d8a:	461f      	mov	r7, r3
 8001d8c:	898b      	ldrh	r3, [r1, #12]
 8001d8e:	4605      	mov	r5, r0
 8001d90:	05db      	lsls	r3, r3, #23
 8001d92:	460c      	mov	r4, r1
 8001d94:	4616      	mov	r6, r2
 8001d96:	d505      	bpl.n	8001da4 <__swrite+0x1e>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001da0:	f000 f9b8 	bl	8002114 <_lseek_r>
 8001da4:	89a3      	ldrh	r3, [r4, #12]
 8001da6:	4632      	mov	r2, r6
 8001da8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001dac:	81a3      	strh	r3, [r4, #12]
 8001dae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001db2:	463b      	mov	r3, r7
 8001db4:	4628      	mov	r0, r5
 8001db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001dba:	f000 b869 	b.w	8001e90 <_write_r>

08001dbe <__sseek>:
 8001dbe:	b510      	push	{r4, lr}
 8001dc0:	460c      	mov	r4, r1
 8001dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dc6:	f000 f9a5 	bl	8002114 <_lseek_r>
 8001dca:	1c43      	adds	r3, r0, #1
 8001dcc:	89a3      	ldrh	r3, [r4, #12]
 8001dce:	bf15      	itete	ne
 8001dd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8001dd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001dd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001dda:	81a3      	strheq	r3, [r4, #12]
 8001ddc:	bf18      	it	ne
 8001dde:	81a3      	strhne	r3, [r4, #12]
 8001de0:	bd10      	pop	{r4, pc}

08001de2 <__sclose>:
 8001de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001de6:	f000 b8d3 	b.w	8001f90 <_close_r>
	...

08001dec <__swbuf_r>:
 8001dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dee:	460e      	mov	r6, r1
 8001df0:	4614      	mov	r4, r2
 8001df2:	4605      	mov	r5, r0
 8001df4:	b118      	cbz	r0, 8001dfe <__swbuf_r+0x12>
 8001df6:	6983      	ldr	r3, [r0, #24]
 8001df8:	b90b      	cbnz	r3, 8001dfe <__swbuf_r+0x12>
 8001dfa:	f7ff fbe5 	bl	80015c8 <__sinit>
 8001dfe:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <__swbuf_r+0x98>)
 8001e00:	429c      	cmp	r4, r3
 8001e02:	d12a      	bne.n	8001e5a <__swbuf_r+0x6e>
 8001e04:	686c      	ldr	r4, [r5, #4]
 8001e06:	69a3      	ldr	r3, [r4, #24]
 8001e08:	60a3      	str	r3, [r4, #8]
 8001e0a:	89a3      	ldrh	r3, [r4, #12]
 8001e0c:	071a      	lsls	r2, r3, #28
 8001e0e:	d52e      	bpl.n	8001e6e <__swbuf_r+0x82>
 8001e10:	6923      	ldr	r3, [r4, #16]
 8001e12:	b363      	cbz	r3, 8001e6e <__swbuf_r+0x82>
 8001e14:	6923      	ldr	r3, [r4, #16]
 8001e16:	6820      	ldr	r0, [r4, #0]
 8001e18:	b2f6      	uxtb	r6, r6
 8001e1a:	1ac0      	subs	r0, r0, r3
 8001e1c:	6963      	ldr	r3, [r4, #20]
 8001e1e:	4637      	mov	r7, r6
 8001e20:	4298      	cmp	r0, r3
 8001e22:	db04      	blt.n	8001e2e <__swbuf_r+0x42>
 8001e24:	4621      	mov	r1, r4
 8001e26:	4628      	mov	r0, r5
 8001e28:	f000 f94a 	bl	80020c0 <_fflush_r>
 8001e2c:	bb28      	cbnz	r0, 8001e7a <__swbuf_r+0x8e>
 8001e2e:	68a3      	ldr	r3, [r4, #8]
 8001e30:	3001      	adds	r0, #1
 8001e32:	3b01      	subs	r3, #1
 8001e34:	60a3      	str	r3, [r4, #8]
 8001e36:	6823      	ldr	r3, [r4, #0]
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	6022      	str	r2, [r4, #0]
 8001e3c:	701e      	strb	r6, [r3, #0]
 8001e3e:	6963      	ldr	r3, [r4, #20]
 8001e40:	4298      	cmp	r0, r3
 8001e42:	d004      	beq.n	8001e4e <__swbuf_r+0x62>
 8001e44:	89a3      	ldrh	r3, [r4, #12]
 8001e46:	07db      	lsls	r3, r3, #31
 8001e48:	d519      	bpl.n	8001e7e <__swbuf_r+0x92>
 8001e4a:	2e0a      	cmp	r6, #10
 8001e4c:	d117      	bne.n	8001e7e <__swbuf_r+0x92>
 8001e4e:	4621      	mov	r1, r4
 8001e50:	4628      	mov	r0, r5
 8001e52:	f000 f935 	bl	80020c0 <_fflush_r>
 8001e56:	b190      	cbz	r0, 8001e7e <__swbuf_r+0x92>
 8001e58:	e00f      	b.n	8001e7a <__swbuf_r+0x8e>
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <__swbuf_r+0x9c>)
 8001e5c:	429c      	cmp	r4, r3
 8001e5e:	d101      	bne.n	8001e64 <__swbuf_r+0x78>
 8001e60:	68ac      	ldr	r4, [r5, #8]
 8001e62:	e7d0      	b.n	8001e06 <__swbuf_r+0x1a>
 8001e64:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <__swbuf_r+0xa0>)
 8001e66:	429c      	cmp	r4, r3
 8001e68:	bf08      	it	eq
 8001e6a:	68ec      	ldreq	r4, [r5, #12]
 8001e6c:	e7cb      	b.n	8001e06 <__swbuf_r+0x1a>
 8001e6e:	4621      	mov	r1, r4
 8001e70:	4628      	mov	r0, r5
 8001e72:	f000 f81f 	bl	8001eb4 <__swsetup_r>
 8001e76:	2800      	cmp	r0, #0
 8001e78:	d0cc      	beq.n	8001e14 <__swbuf_r+0x28>
 8001e7a:	f04f 37ff 	mov.w	r7, #4294967295
 8001e7e:	4638      	mov	r0, r7
 8001e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e82:	bf00      	nop
 8001e84:	080023a4 	.word	0x080023a4
 8001e88:	080023c4 	.word	0x080023c4
 8001e8c:	08002384 	.word	0x08002384

08001e90 <_write_r>:
 8001e90:	b538      	push	{r3, r4, r5, lr}
 8001e92:	4605      	mov	r5, r0
 8001e94:	4608      	mov	r0, r1
 8001e96:	4611      	mov	r1, r2
 8001e98:	2200      	movs	r2, #0
 8001e9a:	4c05      	ldr	r4, [pc, #20]	; (8001eb0 <_write_r+0x20>)
 8001e9c:	6022      	str	r2, [r4, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	f7ff f8f0 	bl	8001084 <_write>
 8001ea4:	1c43      	adds	r3, r0, #1
 8001ea6:	d102      	bne.n	8001eae <_write_r+0x1e>
 8001ea8:	6823      	ldr	r3, [r4, #0]
 8001eaa:	b103      	cbz	r3, 8001eae <_write_r+0x1e>
 8001eac:	602b      	str	r3, [r5, #0]
 8001eae:	bd38      	pop	{r3, r4, r5, pc}
 8001eb0:	20000110 	.word	0x20000110

08001eb4 <__swsetup_r>:
 8001eb4:	4b32      	ldr	r3, [pc, #200]	; (8001f80 <__swsetup_r+0xcc>)
 8001eb6:	b570      	push	{r4, r5, r6, lr}
 8001eb8:	681d      	ldr	r5, [r3, #0]
 8001eba:	4606      	mov	r6, r0
 8001ebc:	460c      	mov	r4, r1
 8001ebe:	b125      	cbz	r5, 8001eca <__swsetup_r+0x16>
 8001ec0:	69ab      	ldr	r3, [r5, #24]
 8001ec2:	b913      	cbnz	r3, 8001eca <__swsetup_r+0x16>
 8001ec4:	4628      	mov	r0, r5
 8001ec6:	f7ff fb7f 	bl	80015c8 <__sinit>
 8001eca:	4b2e      	ldr	r3, [pc, #184]	; (8001f84 <__swsetup_r+0xd0>)
 8001ecc:	429c      	cmp	r4, r3
 8001ece:	d10f      	bne.n	8001ef0 <__swsetup_r+0x3c>
 8001ed0:	686c      	ldr	r4, [r5, #4]
 8001ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	0715      	lsls	r5, r2, #28
 8001eda:	d42c      	bmi.n	8001f36 <__swsetup_r+0x82>
 8001edc:	06d0      	lsls	r0, r2, #27
 8001ede:	d411      	bmi.n	8001f04 <__swsetup_r+0x50>
 8001ee0:	2209      	movs	r2, #9
 8001ee2:	6032      	str	r2, [r6, #0]
 8001ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ee8:	81a3      	strh	r3, [r4, #12]
 8001eea:	f04f 30ff 	mov.w	r0, #4294967295
 8001eee:	bd70      	pop	{r4, r5, r6, pc}
 8001ef0:	4b25      	ldr	r3, [pc, #148]	; (8001f88 <__swsetup_r+0xd4>)
 8001ef2:	429c      	cmp	r4, r3
 8001ef4:	d101      	bne.n	8001efa <__swsetup_r+0x46>
 8001ef6:	68ac      	ldr	r4, [r5, #8]
 8001ef8:	e7eb      	b.n	8001ed2 <__swsetup_r+0x1e>
 8001efa:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <__swsetup_r+0xd8>)
 8001efc:	429c      	cmp	r4, r3
 8001efe:	bf08      	it	eq
 8001f00:	68ec      	ldreq	r4, [r5, #12]
 8001f02:	e7e6      	b.n	8001ed2 <__swsetup_r+0x1e>
 8001f04:	0751      	lsls	r1, r2, #29
 8001f06:	d512      	bpl.n	8001f2e <__swsetup_r+0x7a>
 8001f08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f0a:	b141      	cbz	r1, 8001f1e <__swsetup_r+0x6a>
 8001f0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f10:	4299      	cmp	r1, r3
 8001f12:	d002      	beq.n	8001f1a <__swsetup_r+0x66>
 8001f14:	4630      	mov	r0, r6
 8001f16:	f000 f983 	bl	8002220 <_free_r>
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	6363      	str	r3, [r4, #52]	; 0x34
 8001f1e:	89a3      	ldrh	r3, [r4, #12]
 8001f20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001f24:	81a3      	strh	r3, [r4, #12]
 8001f26:	2300      	movs	r3, #0
 8001f28:	6063      	str	r3, [r4, #4]
 8001f2a:	6923      	ldr	r3, [r4, #16]
 8001f2c:	6023      	str	r3, [r4, #0]
 8001f2e:	89a3      	ldrh	r3, [r4, #12]
 8001f30:	f043 0308 	orr.w	r3, r3, #8
 8001f34:	81a3      	strh	r3, [r4, #12]
 8001f36:	6923      	ldr	r3, [r4, #16]
 8001f38:	b94b      	cbnz	r3, 8001f4e <__swsetup_r+0x9a>
 8001f3a:	89a3      	ldrh	r3, [r4, #12]
 8001f3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f44:	d003      	beq.n	8001f4e <__swsetup_r+0x9a>
 8001f46:	4621      	mov	r1, r4
 8001f48:	4630      	mov	r0, r6
 8001f4a:	f000 f919 	bl	8002180 <__smakebuf_r>
 8001f4e:	89a2      	ldrh	r2, [r4, #12]
 8001f50:	f012 0301 	ands.w	r3, r2, #1
 8001f54:	d00c      	beq.n	8001f70 <__swsetup_r+0xbc>
 8001f56:	2300      	movs	r3, #0
 8001f58:	60a3      	str	r3, [r4, #8]
 8001f5a:	6963      	ldr	r3, [r4, #20]
 8001f5c:	425b      	negs	r3, r3
 8001f5e:	61a3      	str	r3, [r4, #24]
 8001f60:	6923      	ldr	r3, [r4, #16]
 8001f62:	b953      	cbnz	r3, 8001f7a <__swsetup_r+0xc6>
 8001f64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f68:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001f6c:	d1ba      	bne.n	8001ee4 <__swsetup_r+0x30>
 8001f6e:	bd70      	pop	{r4, r5, r6, pc}
 8001f70:	0792      	lsls	r2, r2, #30
 8001f72:	bf58      	it	pl
 8001f74:	6963      	ldrpl	r3, [r4, #20]
 8001f76:	60a3      	str	r3, [r4, #8]
 8001f78:	e7f2      	b.n	8001f60 <__swsetup_r+0xac>
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	e7f7      	b.n	8001f6e <__swsetup_r+0xba>
 8001f7e:	bf00      	nop
 8001f80:	2000000c 	.word	0x2000000c
 8001f84:	080023a4 	.word	0x080023a4
 8001f88:	080023c4 	.word	0x080023c4
 8001f8c:	08002384 	.word	0x08002384

08001f90 <_close_r>:
 8001f90:	b538      	push	{r3, r4, r5, lr}
 8001f92:	2300      	movs	r3, #0
 8001f94:	4c05      	ldr	r4, [pc, #20]	; (8001fac <_close_r+0x1c>)
 8001f96:	4605      	mov	r5, r0
 8001f98:	4608      	mov	r0, r1
 8001f9a:	6023      	str	r3, [r4, #0]
 8001f9c:	f7ff fa32 	bl	8001404 <_close>
 8001fa0:	1c43      	adds	r3, r0, #1
 8001fa2:	d102      	bne.n	8001faa <_close_r+0x1a>
 8001fa4:	6823      	ldr	r3, [r4, #0]
 8001fa6:	b103      	cbz	r3, 8001faa <_close_r+0x1a>
 8001fa8:	602b      	str	r3, [r5, #0]
 8001faa:	bd38      	pop	{r3, r4, r5, pc}
 8001fac:	20000110 	.word	0x20000110

08001fb0 <__sflush_r>:
 8001fb0:	898a      	ldrh	r2, [r1, #12]
 8001fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fb6:	4605      	mov	r5, r0
 8001fb8:	0710      	lsls	r0, r2, #28
 8001fba:	460c      	mov	r4, r1
 8001fbc:	d45a      	bmi.n	8002074 <__sflush_r+0xc4>
 8001fbe:	684b      	ldr	r3, [r1, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	dc05      	bgt.n	8001fd0 <__sflush_r+0x20>
 8001fc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	dc02      	bgt.n	8001fd0 <__sflush_r+0x20>
 8001fca:	2000      	movs	r0, #0
 8001fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001fd2:	2e00      	cmp	r6, #0
 8001fd4:	d0f9      	beq.n	8001fca <__sflush_r+0x1a>
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001fdc:	682f      	ldr	r7, [r5, #0]
 8001fde:	602b      	str	r3, [r5, #0]
 8001fe0:	d033      	beq.n	800204a <__sflush_r+0x9a>
 8001fe2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001fe4:	89a3      	ldrh	r3, [r4, #12]
 8001fe6:	075a      	lsls	r2, r3, #29
 8001fe8:	d505      	bpl.n	8001ff6 <__sflush_r+0x46>
 8001fea:	6863      	ldr	r3, [r4, #4]
 8001fec:	1ac0      	subs	r0, r0, r3
 8001fee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ff0:	b10b      	cbz	r3, 8001ff6 <__sflush_r+0x46>
 8001ff2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ff4:	1ac0      	subs	r0, r0, r3
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ffc:	6a21      	ldr	r1, [r4, #32]
 8001ffe:	4628      	mov	r0, r5
 8002000:	47b0      	blx	r6
 8002002:	1c43      	adds	r3, r0, #1
 8002004:	89a3      	ldrh	r3, [r4, #12]
 8002006:	d106      	bne.n	8002016 <__sflush_r+0x66>
 8002008:	6829      	ldr	r1, [r5, #0]
 800200a:	291d      	cmp	r1, #29
 800200c:	d84b      	bhi.n	80020a6 <__sflush_r+0xf6>
 800200e:	4a2b      	ldr	r2, [pc, #172]	; (80020bc <__sflush_r+0x10c>)
 8002010:	40ca      	lsrs	r2, r1
 8002012:	07d6      	lsls	r6, r2, #31
 8002014:	d547      	bpl.n	80020a6 <__sflush_r+0xf6>
 8002016:	2200      	movs	r2, #0
 8002018:	6062      	str	r2, [r4, #4]
 800201a:	6922      	ldr	r2, [r4, #16]
 800201c:	04d9      	lsls	r1, r3, #19
 800201e:	6022      	str	r2, [r4, #0]
 8002020:	d504      	bpl.n	800202c <__sflush_r+0x7c>
 8002022:	1c42      	adds	r2, r0, #1
 8002024:	d101      	bne.n	800202a <__sflush_r+0x7a>
 8002026:	682b      	ldr	r3, [r5, #0]
 8002028:	b903      	cbnz	r3, 800202c <__sflush_r+0x7c>
 800202a:	6560      	str	r0, [r4, #84]	; 0x54
 800202c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800202e:	602f      	str	r7, [r5, #0]
 8002030:	2900      	cmp	r1, #0
 8002032:	d0ca      	beq.n	8001fca <__sflush_r+0x1a>
 8002034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002038:	4299      	cmp	r1, r3
 800203a:	d002      	beq.n	8002042 <__sflush_r+0x92>
 800203c:	4628      	mov	r0, r5
 800203e:	f000 f8ef 	bl	8002220 <_free_r>
 8002042:	2000      	movs	r0, #0
 8002044:	6360      	str	r0, [r4, #52]	; 0x34
 8002046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800204a:	6a21      	ldr	r1, [r4, #32]
 800204c:	2301      	movs	r3, #1
 800204e:	4628      	mov	r0, r5
 8002050:	47b0      	blx	r6
 8002052:	1c41      	adds	r1, r0, #1
 8002054:	d1c6      	bne.n	8001fe4 <__sflush_r+0x34>
 8002056:	682b      	ldr	r3, [r5, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0c3      	beq.n	8001fe4 <__sflush_r+0x34>
 800205c:	2b1d      	cmp	r3, #29
 800205e:	d001      	beq.n	8002064 <__sflush_r+0xb4>
 8002060:	2b16      	cmp	r3, #22
 8002062:	d101      	bne.n	8002068 <__sflush_r+0xb8>
 8002064:	602f      	str	r7, [r5, #0]
 8002066:	e7b0      	b.n	8001fca <__sflush_r+0x1a>
 8002068:	89a3      	ldrh	r3, [r4, #12]
 800206a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800206e:	81a3      	strh	r3, [r4, #12]
 8002070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002074:	690f      	ldr	r7, [r1, #16]
 8002076:	2f00      	cmp	r7, #0
 8002078:	d0a7      	beq.n	8001fca <__sflush_r+0x1a>
 800207a:	0793      	lsls	r3, r2, #30
 800207c:	bf18      	it	ne
 800207e:	2300      	movne	r3, #0
 8002080:	680e      	ldr	r6, [r1, #0]
 8002082:	bf08      	it	eq
 8002084:	694b      	ldreq	r3, [r1, #20]
 8002086:	eba6 0807 	sub.w	r8, r6, r7
 800208a:	600f      	str	r7, [r1, #0]
 800208c:	608b      	str	r3, [r1, #8]
 800208e:	f1b8 0f00 	cmp.w	r8, #0
 8002092:	dd9a      	ble.n	8001fca <__sflush_r+0x1a>
 8002094:	4643      	mov	r3, r8
 8002096:	463a      	mov	r2, r7
 8002098:	6a21      	ldr	r1, [r4, #32]
 800209a:	4628      	mov	r0, r5
 800209c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800209e:	47b0      	blx	r6
 80020a0:	2800      	cmp	r0, #0
 80020a2:	dc07      	bgt.n	80020b4 <__sflush_r+0x104>
 80020a4:	89a3      	ldrh	r3, [r4, #12]
 80020a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020aa:	81a3      	strh	r3, [r4, #12]
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020b4:	4407      	add	r7, r0
 80020b6:	eba8 0800 	sub.w	r8, r8, r0
 80020ba:	e7e8      	b.n	800208e <__sflush_r+0xde>
 80020bc:	20400001 	.word	0x20400001

080020c0 <_fflush_r>:
 80020c0:	b538      	push	{r3, r4, r5, lr}
 80020c2:	690b      	ldr	r3, [r1, #16]
 80020c4:	4605      	mov	r5, r0
 80020c6:	460c      	mov	r4, r1
 80020c8:	b1db      	cbz	r3, 8002102 <_fflush_r+0x42>
 80020ca:	b118      	cbz	r0, 80020d4 <_fflush_r+0x14>
 80020cc:	6983      	ldr	r3, [r0, #24]
 80020ce:	b90b      	cbnz	r3, 80020d4 <_fflush_r+0x14>
 80020d0:	f7ff fa7a 	bl	80015c8 <__sinit>
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <_fflush_r+0x48>)
 80020d6:	429c      	cmp	r4, r3
 80020d8:	d109      	bne.n	80020ee <_fflush_r+0x2e>
 80020da:	686c      	ldr	r4, [r5, #4]
 80020dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020e0:	b17b      	cbz	r3, 8002102 <_fflush_r+0x42>
 80020e2:	4621      	mov	r1, r4
 80020e4:	4628      	mov	r0, r5
 80020e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020ea:	f7ff bf61 	b.w	8001fb0 <__sflush_r>
 80020ee:	4b07      	ldr	r3, [pc, #28]	; (800210c <_fflush_r+0x4c>)
 80020f0:	429c      	cmp	r4, r3
 80020f2:	d101      	bne.n	80020f8 <_fflush_r+0x38>
 80020f4:	68ac      	ldr	r4, [r5, #8]
 80020f6:	e7f1      	b.n	80020dc <_fflush_r+0x1c>
 80020f8:	4b05      	ldr	r3, [pc, #20]	; (8002110 <_fflush_r+0x50>)
 80020fa:	429c      	cmp	r4, r3
 80020fc:	bf08      	it	eq
 80020fe:	68ec      	ldreq	r4, [r5, #12]
 8002100:	e7ec      	b.n	80020dc <_fflush_r+0x1c>
 8002102:	2000      	movs	r0, #0
 8002104:	bd38      	pop	{r3, r4, r5, pc}
 8002106:	bf00      	nop
 8002108:	080023a4 	.word	0x080023a4
 800210c:	080023c4 	.word	0x080023c4
 8002110:	08002384 	.word	0x08002384

08002114 <_lseek_r>:
 8002114:	b538      	push	{r3, r4, r5, lr}
 8002116:	4605      	mov	r5, r0
 8002118:	4608      	mov	r0, r1
 800211a:	4611      	mov	r1, r2
 800211c:	2200      	movs	r2, #0
 800211e:	4c05      	ldr	r4, [pc, #20]	; (8002134 <_lseek_r+0x20>)
 8002120:	6022      	str	r2, [r4, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	f7ff f978 	bl	8001418 <_lseek>
 8002128:	1c43      	adds	r3, r0, #1
 800212a:	d102      	bne.n	8002132 <_lseek_r+0x1e>
 800212c:	6823      	ldr	r3, [r4, #0]
 800212e:	b103      	cbz	r3, 8002132 <_lseek_r+0x1e>
 8002130:	602b      	str	r3, [r5, #0]
 8002132:	bd38      	pop	{r3, r4, r5, pc}
 8002134:	20000110 	.word	0x20000110

08002138 <__swhatbuf_r>:
 8002138:	b570      	push	{r4, r5, r6, lr}
 800213a:	460e      	mov	r6, r1
 800213c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002140:	b090      	sub	sp, #64	; 0x40
 8002142:	2900      	cmp	r1, #0
 8002144:	4614      	mov	r4, r2
 8002146:	461d      	mov	r5, r3
 8002148:	da07      	bge.n	800215a <__swhatbuf_r+0x22>
 800214a:	2300      	movs	r3, #0
 800214c:	602b      	str	r3, [r5, #0]
 800214e:	89b3      	ldrh	r3, [r6, #12]
 8002150:	061a      	lsls	r2, r3, #24
 8002152:	d410      	bmi.n	8002176 <__swhatbuf_r+0x3e>
 8002154:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002158:	e00e      	b.n	8002178 <__swhatbuf_r+0x40>
 800215a:	aa01      	add	r2, sp, #4
 800215c:	f000 f8be 	bl	80022dc <_fstat_r>
 8002160:	2800      	cmp	r0, #0
 8002162:	dbf2      	blt.n	800214a <__swhatbuf_r+0x12>
 8002164:	9a02      	ldr	r2, [sp, #8]
 8002166:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800216a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800216e:	425a      	negs	r2, r3
 8002170:	415a      	adcs	r2, r3
 8002172:	602a      	str	r2, [r5, #0]
 8002174:	e7ee      	b.n	8002154 <__swhatbuf_r+0x1c>
 8002176:	2340      	movs	r3, #64	; 0x40
 8002178:	2000      	movs	r0, #0
 800217a:	6023      	str	r3, [r4, #0]
 800217c:	b010      	add	sp, #64	; 0x40
 800217e:	bd70      	pop	{r4, r5, r6, pc}

08002180 <__smakebuf_r>:
 8002180:	898b      	ldrh	r3, [r1, #12]
 8002182:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002184:	079d      	lsls	r5, r3, #30
 8002186:	4606      	mov	r6, r0
 8002188:	460c      	mov	r4, r1
 800218a:	d507      	bpl.n	800219c <__smakebuf_r+0x1c>
 800218c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002190:	6023      	str	r3, [r4, #0]
 8002192:	6123      	str	r3, [r4, #16]
 8002194:	2301      	movs	r3, #1
 8002196:	6163      	str	r3, [r4, #20]
 8002198:	b002      	add	sp, #8
 800219a:	bd70      	pop	{r4, r5, r6, pc}
 800219c:	ab01      	add	r3, sp, #4
 800219e:	466a      	mov	r2, sp
 80021a0:	f7ff ffca 	bl	8002138 <__swhatbuf_r>
 80021a4:	9900      	ldr	r1, [sp, #0]
 80021a6:	4605      	mov	r5, r0
 80021a8:	4630      	mov	r0, r6
 80021aa:	f7ff fa97 	bl	80016dc <_malloc_r>
 80021ae:	b948      	cbnz	r0, 80021c4 <__smakebuf_r+0x44>
 80021b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021b4:	059a      	lsls	r2, r3, #22
 80021b6:	d4ef      	bmi.n	8002198 <__smakebuf_r+0x18>
 80021b8:	f023 0303 	bic.w	r3, r3, #3
 80021bc:	f043 0302 	orr.w	r3, r3, #2
 80021c0:	81a3      	strh	r3, [r4, #12]
 80021c2:	e7e3      	b.n	800218c <__smakebuf_r+0xc>
 80021c4:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <__smakebuf_r+0x7c>)
 80021c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80021c8:	89a3      	ldrh	r3, [r4, #12]
 80021ca:	6020      	str	r0, [r4, #0]
 80021cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d0:	81a3      	strh	r3, [r4, #12]
 80021d2:	9b00      	ldr	r3, [sp, #0]
 80021d4:	6120      	str	r0, [r4, #16]
 80021d6:	6163      	str	r3, [r4, #20]
 80021d8:	9b01      	ldr	r3, [sp, #4]
 80021da:	b15b      	cbz	r3, 80021f4 <__smakebuf_r+0x74>
 80021dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021e0:	4630      	mov	r0, r6
 80021e2:	f000 f88d 	bl	8002300 <_isatty_r>
 80021e6:	b128      	cbz	r0, 80021f4 <__smakebuf_r+0x74>
 80021e8:	89a3      	ldrh	r3, [r4, #12]
 80021ea:	f023 0303 	bic.w	r3, r3, #3
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	81a3      	strh	r3, [r4, #12]
 80021f4:	89a3      	ldrh	r3, [r4, #12]
 80021f6:	431d      	orrs	r5, r3
 80021f8:	81a5      	strh	r5, [r4, #12]
 80021fa:	e7cd      	b.n	8002198 <__smakebuf_r+0x18>
 80021fc:	08001549 	.word	0x08001549

08002200 <memchr>:
 8002200:	b510      	push	{r4, lr}
 8002202:	b2c9      	uxtb	r1, r1
 8002204:	4402      	add	r2, r0
 8002206:	4290      	cmp	r0, r2
 8002208:	4603      	mov	r3, r0
 800220a:	d101      	bne.n	8002210 <memchr+0x10>
 800220c:	2000      	movs	r0, #0
 800220e:	bd10      	pop	{r4, pc}
 8002210:	781c      	ldrb	r4, [r3, #0]
 8002212:	3001      	adds	r0, #1
 8002214:	428c      	cmp	r4, r1
 8002216:	d1f6      	bne.n	8002206 <memchr+0x6>
 8002218:	4618      	mov	r0, r3
 800221a:	bd10      	pop	{r4, pc}

0800221c <__malloc_lock>:
 800221c:	4770      	bx	lr

0800221e <__malloc_unlock>:
 800221e:	4770      	bx	lr

08002220 <_free_r>:
 8002220:	b538      	push	{r3, r4, r5, lr}
 8002222:	4605      	mov	r5, r0
 8002224:	2900      	cmp	r1, #0
 8002226:	d043      	beq.n	80022b0 <_free_r+0x90>
 8002228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800222c:	1f0c      	subs	r4, r1, #4
 800222e:	2b00      	cmp	r3, #0
 8002230:	bfb8      	it	lt
 8002232:	18e4      	addlt	r4, r4, r3
 8002234:	f7ff fff2 	bl	800221c <__malloc_lock>
 8002238:	4a1e      	ldr	r2, [pc, #120]	; (80022b4 <_free_r+0x94>)
 800223a:	6813      	ldr	r3, [r2, #0]
 800223c:	4610      	mov	r0, r2
 800223e:	b933      	cbnz	r3, 800224e <_free_r+0x2e>
 8002240:	6063      	str	r3, [r4, #4]
 8002242:	6014      	str	r4, [r2, #0]
 8002244:	4628      	mov	r0, r5
 8002246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800224a:	f7ff bfe8 	b.w	800221e <__malloc_unlock>
 800224e:	42a3      	cmp	r3, r4
 8002250:	d90b      	bls.n	800226a <_free_r+0x4a>
 8002252:	6821      	ldr	r1, [r4, #0]
 8002254:	1862      	adds	r2, r4, r1
 8002256:	4293      	cmp	r3, r2
 8002258:	bf01      	itttt	eq
 800225a:	681a      	ldreq	r2, [r3, #0]
 800225c:	685b      	ldreq	r3, [r3, #4]
 800225e:	1852      	addeq	r2, r2, r1
 8002260:	6022      	streq	r2, [r4, #0]
 8002262:	6063      	str	r3, [r4, #4]
 8002264:	6004      	str	r4, [r0, #0]
 8002266:	e7ed      	b.n	8002244 <_free_r+0x24>
 8002268:	4613      	mov	r3, r2
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	b10a      	cbz	r2, 8002272 <_free_r+0x52>
 800226e:	42a2      	cmp	r2, r4
 8002270:	d9fa      	bls.n	8002268 <_free_r+0x48>
 8002272:	6819      	ldr	r1, [r3, #0]
 8002274:	1858      	adds	r0, r3, r1
 8002276:	42a0      	cmp	r0, r4
 8002278:	d10b      	bne.n	8002292 <_free_r+0x72>
 800227a:	6820      	ldr	r0, [r4, #0]
 800227c:	4401      	add	r1, r0
 800227e:	1858      	adds	r0, r3, r1
 8002280:	4282      	cmp	r2, r0
 8002282:	6019      	str	r1, [r3, #0]
 8002284:	d1de      	bne.n	8002244 <_free_r+0x24>
 8002286:	6810      	ldr	r0, [r2, #0]
 8002288:	6852      	ldr	r2, [r2, #4]
 800228a:	4401      	add	r1, r0
 800228c:	6019      	str	r1, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	e7d8      	b.n	8002244 <_free_r+0x24>
 8002292:	d902      	bls.n	800229a <_free_r+0x7a>
 8002294:	230c      	movs	r3, #12
 8002296:	602b      	str	r3, [r5, #0]
 8002298:	e7d4      	b.n	8002244 <_free_r+0x24>
 800229a:	6820      	ldr	r0, [r4, #0]
 800229c:	1821      	adds	r1, r4, r0
 800229e:	428a      	cmp	r2, r1
 80022a0:	bf01      	itttt	eq
 80022a2:	6811      	ldreq	r1, [r2, #0]
 80022a4:	6852      	ldreq	r2, [r2, #4]
 80022a6:	1809      	addeq	r1, r1, r0
 80022a8:	6021      	streq	r1, [r4, #0]
 80022aa:	6062      	str	r2, [r4, #4]
 80022ac:	605c      	str	r4, [r3, #4]
 80022ae:	e7c9      	b.n	8002244 <_free_r+0x24>
 80022b0:	bd38      	pop	{r3, r4, r5, pc}
 80022b2:	bf00      	nop
 80022b4:	20000094 	.word	0x20000094

080022b8 <_read_r>:
 80022b8:	b538      	push	{r3, r4, r5, lr}
 80022ba:	4605      	mov	r5, r0
 80022bc:	4608      	mov	r0, r1
 80022be:	4611      	mov	r1, r2
 80022c0:	2200      	movs	r2, #0
 80022c2:	4c05      	ldr	r4, [pc, #20]	; (80022d8 <_read_r+0x20>)
 80022c4:	6022      	str	r2, [r4, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	f7ff f874 	bl	80013b4 <_read>
 80022cc:	1c43      	adds	r3, r0, #1
 80022ce:	d102      	bne.n	80022d6 <_read_r+0x1e>
 80022d0:	6823      	ldr	r3, [r4, #0]
 80022d2:	b103      	cbz	r3, 80022d6 <_read_r+0x1e>
 80022d4:	602b      	str	r3, [r5, #0]
 80022d6:	bd38      	pop	{r3, r4, r5, pc}
 80022d8:	20000110 	.word	0x20000110

080022dc <_fstat_r>:
 80022dc:	b538      	push	{r3, r4, r5, lr}
 80022de:	2300      	movs	r3, #0
 80022e0:	4c06      	ldr	r4, [pc, #24]	; (80022fc <_fstat_r+0x20>)
 80022e2:	4605      	mov	r5, r0
 80022e4:	4608      	mov	r0, r1
 80022e6:	4611      	mov	r1, r2
 80022e8:	6023      	str	r3, [r4, #0]
 80022ea:	f7ff f88e 	bl	800140a <_fstat>
 80022ee:	1c43      	adds	r3, r0, #1
 80022f0:	d102      	bne.n	80022f8 <_fstat_r+0x1c>
 80022f2:	6823      	ldr	r3, [r4, #0]
 80022f4:	b103      	cbz	r3, 80022f8 <_fstat_r+0x1c>
 80022f6:	602b      	str	r3, [r5, #0]
 80022f8:	bd38      	pop	{r3, r4, r5, pc}
 80022fa:	bf00      	nop
 80022fc:	20000110 	.word	0x20000110

08002300 <_isatty_r>:
 8002300:	b538      	push	{r3, r4, r5, lr}
 8002302:	2300      	movs	r3, #0
 8002304:	4c05      	ldr	r4, [pc, #20]	; (800231c <_isatty_r+0x1c>)
 8002306:	4605      	mov	r5, r0
 8002308:	4608      	mov	r0, r1
 800230a:	6023      	str	r3, [r4, #0]
 800230c:	f7ff f882 	bl	8001414 <_isatty>
 8002310:	1c43      	adds	r3, r0, #1
 8002312:	d102      	bne.n	800231a <_isatty_r+0x1a>
 8002314:	6823      	ldr	r3, [r4, #0]
 8002316:	b103      	cbz	r3, 800231a <_isatty_r+0x1a>
 8002318:	602b      	str	r3, [r5, #0]
 800231a:	bd38      	pop	{r3, r4, r5, pc}
 800231c:	20000110 	.word	0x20000110

08002320 <_init>:
 8002320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002322:	bf00      	nop
 8002324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002326:	bc08      	pop	{r3}
 8002328:	469e      	mov	lr, r3
 800232a:	4770      	bx	lr

0800232c <_fini>:
 800232c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800232e:	bf00      	nop
 8002330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002332:	bc08      	pop	{r3}
 8002334:	469e      	mov	lr, r3
 8002336:	4770      	bx	lr
