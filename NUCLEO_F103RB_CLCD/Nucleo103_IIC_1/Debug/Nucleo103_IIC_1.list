
Nucleo103_IIC_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000131c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08001428  08001428  00011428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001480  08001480  00011480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001484  08001484  00011484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  20000000  08001488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000007c  2000001c  080014a4  0002001c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000098  080014a4  00020098  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008646  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000016fb  00000000  00000000  0002868b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000416a  00000000  00000000  00029d86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000005e8  00000000  00000000  0002def0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a38  00000000  00000000  0002e4d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003e25  00000000  00000000  0002ef10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000022a0  00000000  00000000  00032d35  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00034fd5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000103c  00000000  00000000  00035054  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001410 	.word	0x08001410

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08001410 	.word	0x08001410

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f892 	bl	800028c <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f854 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000018 	.word	0x20000018
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f82d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 f850 	bl	8001250 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000038 	.word	0x20000038
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000038 	.word	0x20000038

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000202:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000206:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800020e:	041b      	lsls	r3, r3, #16
 8000210:	0c1b      	lsrs	r3, r3, #16
 8000212:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800021a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800021c:	60d3      	str	r3, [r2, #12]
 800021e:	4770      	bx	lr
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	68dc      	ldr	r4, [r3, #12]
 800022a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000232:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000234:	2b04      	cmp	r3, #4
 8000236:	bf28      	it	cs
 8000238:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf98      	it	ls
 8000242:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	fa05 f303 	lsl.w	r3, r5, r3
 8000248:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	bf88      	it	hi
 800024e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000250:	4019      	ands	r1, r3
 8000252:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000254:	fa05 f404 	lsl.w	r4, r5, r4
 8000258:	3c01      	subs	r4, #1
 800025a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800025c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	ea42 0201 	orr.w	r2, r2, r1
 8000262:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	bfa9      	itett	ge
 8000268:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	4b06      	ldrlt	r3, [pc, #24]	; (8000288 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026e:	b2d2      	uxtbge	r2, r2
 8000270:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	bfbb      	ittet	lt
 8000276:	f000 000f 	andlt.w	r0, r0, #15
 800027a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000280:	541a      	strblt	r2, [r3, r0]
 8000282:	bd30      	pop	{r4, r5, pc}
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000ed14 	.word	0xe000ed14

0800028c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800028c:	3801      	subs	r0, #1
 800028e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000292:	d20a      	bcs.n	80002aa <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000298:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800029a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002aa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	e000e010 	.word	0xe000e010
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80002bc:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80002be:	4626      	mov	r6, r4
 80002c0:	4b66      	ldr	r3, [pc, #408]	; (800045c <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002c2:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 800046c <HAL_GPIO_Init+0x1b4>
 80002c6:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000470 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80002ca:	680a      	ldr	r2, [r1, #0]
 80002cc:	fa32 f506 	lsrs.w	r5, r2, r6
 80002d0:	d102      	bne.n	80002d8 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80002d2:	b003      	add	sp, #12
 80002d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80002d8:	f04f 0801 	mov.w	r8, #1
 80002dc:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002e0:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80002e4:	4590      	cmp	r8, r2
 80002e6:	d17f      	bne.n	80003e8 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 80002e8:	684d      	ldr	r5, [r1, #4]
 80002ea:	2d12      	cmp	r5, #18
 80002ec:	f000 80aa 	beq.w	8000444 <HAL_GPIO_Init+0x18c>
 80002f0:	f200 8083 	bhi.w	80003fa <HAL_GPIO_Init+0x142>
 80002f4:	2d02      	cmp	r5, #2
 80002f6:	f000 80a2 	beq.w	800043e <HAL_GPIO_Init+0x186>
 80002fa:	d877      	bhi.n	80003ec <HAL_GPIO_Init+0x134>
 80002fc:	2d00      	cmp	r5, #0
 80002fe:	f000 8089 	beq.w	8000414 <HAL_GPIO_Init+0x15c>
 8000302:	2d01      	cmp	r5, #1
 8000304:	f000 8099 	beq.w	800043a <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000308:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800030c:	2aff      	cmp	r2, #255	; 0xff
 800030e:	bf93      	iteet	ls
 8000310:	4682      	movls	sl, r0
 8000312:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000316:	3d08      	subhi	r5, #8
 8000318:	f8d0 b000 	ldrls.w	fp, [r0]
 800031c:	bf92      	itee	ls
 800031e:	00b5      	lslls	r5, r6, #2
 8000320:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000324:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000326:	fa09 f805 	lsl.w	r8, r9, r5
 800032a:	ea2b 0808 	bic.w	r8, fp, r8
 800032e:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000332:	bf88      	it	hi
 8000334:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000338:	ea48 0505 	orr.w	r5, r8, r5
 800033c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000340:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000344:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000348:	d04e      	beq.n	80003e8 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800034a:	4d45      	ldr	r5, [pc, #276]	; (8000460 <HAL_GPIO_Init+0x1a8>)
 800034c:	4f44      	ldr	r7, [pc, #272]	; (8000460 <HAL_GPIO_Init+0x1a8>)
 800034e:	69ad      	ldr	r5, [r5, #24]
 8000350:	f026 0803 	bic.w	r8, r6, #3
 8000354:	f045 0501 	orr.w	r5, r5, #1
 8000358:	61bd      	str	r5, [r7, #24]
 800035a:	69bd      	ldr	r5, [r7, #24]
 800035c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000360:	f005 0501 	and.w	r5, r5, #1
 8000364:	9501      	str	r5, [sp, #4]
 8000366:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800036a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800036e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000370:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000374:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000378:	fa09 f90b 	lsl.w	r9, r9, fp
 800037c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000380:	4d38      	ldr	r5, [pc, #224]	; (8000464 <HAL_GPIO_Init+0x1ac>)
 8000382:	42a8      	cmp	r0, r5
 8000384:	d063      	beq.n	800044e <HAL_GPIO_Init+0x196>
 8000386:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800038a:	42a8      	cmp	r0, r5
 800038c:	d061      	beq.n	8000452 <HAL_GPIO_Init+0x19a>
 800038e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000392:	42a8      	cmp	r0, r5
 8000394:	d05f      	beq.n	8000456 <HAL_GPIO_Init+0x19e>
 8000396:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800039a:	42a8      	cmp	r0, r5
 800039c:	bf0c      	ite	eq
 800039e:	2503      	moveq	r5, #3
 80003a0:	2504      	movne	r5, #4
 80003a2:	fa05 f50b 	lsl.w	r5, r5, fp
 80003a6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80003aa:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80003ae:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003b0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003b4:	bf14      	ite	ne
 80003b6:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003b8:	4395      	biceq	r5, r2
 80003ba:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80003bc:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003be:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003c2:	bf14      	ite	ne
 80003c4:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003c6:	4395      	biceq	r5, r2
 80003c8:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80003ca:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003cc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003d0:	bf14      	ite	ne
 80003d2:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003d4:	4395      	biceq	r5, r2
 80003d6:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80003d8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003da:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003de:	bf14      	ite	ne
 80003e0:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003e2:	ea25 0202 	biceq.w	r2, r5, r2
 80003e6:	60da      	str	r2, [r3, #12]
	position++;
 80003e8:	3601      	adds	r6, #1
 80003ea:	e76e      	b.n	80002ca <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80003ec:	2d03      	cmp	r5, #3
 80003ee:	d022      	beq.n	8000436 <HAL_GPIO_Init+0x17e>
 80003f0:	2d11      	cmp	r5, #17
 80003f2:	d189      	bne.n	8000308 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003f4:	68cc      	ldr	r4, [r1, #12]
 80003f6:	3404      	adds	r4, #4
          break;
 80003f8:	e786      	b.n	8000308 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80003fa:	4f1b      	ldr	r7, [pc, #108]	; (8000468 <HAL_GPIO_Init+0x1b0>)
 80003fc:	42bd      	cmp	r5, r7
 80003fe:	d009      	beq.n	8000414 <HAL_GPIO_Init+0x15c>
 8000400:	d812      	bhi.n	8000428 <HAL_GPIO_Init+0x170>
 8000402:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000474 <HAL_GPIO_Init+0x1bc>
 8000406:	454d      	cmp	r5, r9
 8000408:	d004      	beq.n	8000414 <HAL_GPIO_Init+0x15c>
 800040a:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800040e:	454d      	cmp	r5, r9
 8000410:	f47f af7a 	bne.w	8000308 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000414:	688c      	ldr	r4, [r1, #8]
 8000416:	b1c4      	cbz	r4, 800044a <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000418:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 800041a:	bf0c      	ite	eq
 800041c:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000420:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000424:	2408      	movs	r4, #8
 8000426:	e76f      	b.n	8000308 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000428:	4575      	cmp	r5, lr
 800042a:	d0f3      	beq.n	8000414 <HAL_GPIO_Init+0x15c>
 800042c:	4565      	cmp	r5, ip
 800042e:	d0f1      	beq.n	8000414 <HAL_GPIO_Init+0x15c>
 8000430:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000478 <HAL_GPIO_Init+0x1c0>
 8000434:	e7eb      	b.n	800040e <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000436:	2400      	movs	r4, #0
 8000438:	e766      	b.n	8000308 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800043a:	68cc      	ldr	r4, [r1, #12]
          break;
 800043c:	e764      	b.n	8000308 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800043e:	68cc      	ldr	r4, [r1, #12]
 8000440:	3408      	adds	r4, #8
          break;
 8000442:	e761      	b.n	8000308 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000444:	68cc      	ldr	r4, [r1, #12]
 8000446:	340c      	adds	r4, #12
          break;
 8000448:	e75e      	b.n	8000308 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800044a:	2404      	movs	r4, #4
 800044c:	e75c      	b.n	8000308 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800044e:	2500      	movs	r5, #0
 8000450:	e7a7      	b.n	80003a2 <HAL_GPIO_Init+0xea>
 8000452:	2501      	movs	r5, #1
 8000454:	e7a5      	b.n	80003a2 <HAL_GPIO_Init+0xea>
 8000456:	2502      	movs	r5, #2
 8000458:	e7a3      	b.n	80003a2 <HAL_GPIO_Init+0xea>
 800045a:	bf00      	nop
 800045c:	40010400 	.word	0x40010400
 8000460:	40021000 	.word	0x40021000
 8000464:	40010800 	.word	0x40010800
 8000468:	10210000 	.word	0x10210000
 800046c:	10310000 	.word	0x10310000
 8000470:	10320000 	.word	0x10320000
 8000474:	10110000 	.word	0x10110000
 8000478:	10220000 	.word	0x10220000

0800047c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800047c:	b10a      	cbz	r2, 8000482 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800047e:	6101      	str	r1, [r0, #16]
 8000480:	4770      	bx	lr
 8000482:	0409      	lsls	r1, r1, #16
 8000484:	e7fb      	b.n	800047e <HAL_GPIO_WritePin+0x2>

08000486 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000486:	68c3      	ldr	r3, [r0, #12]
 8000488:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800048a:	bf14      	ite	ne
 800048c:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800048e:	6101      	streq	r1, [r0, #16]
 8000490:	4770      	bx	lr

08000492 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000492:	6801      	ldr	r1, [r0, #0]
 8000494:	2200      	movs	r2, #0
 8000496:	694b      	ldr	r3, [r1, #20]
 8000498:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 800049c:	d010      	beq.n	80004c0 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800049e:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80004a2:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80004a4:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80004a6:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80004a8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80004ac:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80004b0:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80004b2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80004b6:	f043 0304 	orr.w	r3, r3, #4
 80004ba:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80004bc:	2001      	movs	r0, #1
 80004be:	4770      	bx	lr
  }
  return HAL_OK;
 80004c0:	4618      	mov	r0, r3
}
 80004c2:	4770      	bx	lr

080004c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80004c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80004c8:	4604      	mov	r4, r0
 80004ca:	4617      	mov	r7, r2
 80004cc:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80004ce:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80004d2:	b28e      	uxth	r6, r1
 80004d4:	6825      	ldr	r5, [r4, #0]
 80004d6:	f1b8 0f01 	cmp.w	r8, #1
 80004da:	bf0c      	ite	eq
 80004dc:	696b      	ldreq	r3, [r5, #20]
 80004de:	69ab      	ldrne	r3, [r5, #24]
 80004e0:	ea36 0303 	bics.w	r3, r6, r3
 80004e4:	bf14      	ite	ne
 80004e6:	2001      	movne	r0, #1
 80004e8:	2000      	moveq	r0, #0
 80004ea:	b908      	cbnz	r0, 80004f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 80004ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80004f0:	696b      	ldr	r3, [r5, #20]
 80004f2:	055a      	lsls	r2, r3, #21
 80004f4:	d516      	bpl.n	8000524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80004f6:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 80004f8:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80004fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004fe:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000500:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000504:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000506:	2300      	movs	r3, #0
 8000508:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800050a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800050e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000512:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000514:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000518:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800051a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800051e:	2001      	movs	r0, #1
 8000520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000524:	1c7b      	adds	r3, r7, #1
 8000526:	d0d5      	beq.n	80004d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000528:	f7ff fe52 	bl	80001d0 <HAL_GetTick>
 800052c:	eba0 0009 	sub.w	r0, r0, r9
 8000530:	4287      	cmp	r7, r0
 8000532:	d301      	bcc.n	8000538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 8000534:	2f00      	cmp	r7, #0
 8000536:	d1cd      	bne.n	80004d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000538:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800053a:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800053c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800053e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000542:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000546:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000548:	f042 0220 	orr.w	r2, r2, #32
 800054c:	e7e4      	b.n	8000518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

0800054e <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800054e:	b570      	push	{r4, r5, r6, lr}
 8000550:	4604      	mov	r4, r0
 8000552:	460d      	mov	r5, r1
 8000554:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000556:	6823      	ldr	r3, [r4, #0]
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	075b      	lsls	r3, r3, #29
 800055c:	d501      	bpl.n	8000562 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800055e:	2000      	movs	r0, #0
 8000560:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000562:	4620      	mov	r0, r4
 8000564:	f7ff ff95 	bl	8000492 <I2C_IsAcknowledgeFailed>
 8000568:	b9a8      	cbnz	r0, 8000596 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800056a:	1c6a      	adds	r2, r5, #1
 800056c:	d0f3      	beq.n	8000556 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800056e:	f7ff fe2f 	bl	80001d0 <HAL_GetTick>
 8000572:	1b80      	subs	r0, r0, r6
 8000574:	4285      	cmp	r5, r0
 8000576:	d301      	bcc.n	800057c <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8000578:	2d00      	cmp	r5, #0
 800057a:	d1ec      	bne.n	8000556 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800057c:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800057e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000580:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000582:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000586:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800058a:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800058c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000590:	f042 0220 	orr.w	r2, r2, #32
 8000594:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000596:	2001      	movs	r0, #1
}
 8000598:	bd70      	pop	{r4, r5, r6, pc}

0800059a <I2C_WaitOnFlagUntilTimeout>:
{
 800059a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800059e:	4604      	mov	r4, r0
 80005a0:	4690      	mov	r8, r2
 80005a2:	461f      	mov	r7, r3
 80005a4:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80005a6:	f3c1 4907 	ubfx	r9, r1, #16, #8
 80005aa:	b28d      	uxth	r5, r1
 80005ac:	6823      	ldr	r3, [r4, #0]
 80005ae:	f1b9 0f01 	cmp.w	r9, #1
 80005b2:	bf0c      	ite	eq
 80005b4:	695b      	ldreq	r3, [r3, #20]
 80005b6:	699b      	ldrne	r3, [r3, #24]
 80005b8:	ea35 0303 	bics.w	r3, r5, r3
 80005bc:	bf0c      	ite	eq
 80005be:	2301      	moveq	r3, #1
 80005c0:	2300      	movne	r3, #0
 80005c2:	4543      	cmp	r3, r8
 80005c4:	d002      	beq.n	80005cc <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 80005c6:	2000      	movs	r0, #0
}
 80005c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 80005cc:	1c7b      	adds	r3, r7, #1
 80005ce:	d0ed      	beq.n	80005ac <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80005d0:	f7ff fdfe 	bl	80001d0 <HAL_GetTick>
 80005d4:	1b80      	subs	r0, r0, r6
 80005d6:	4287      	cmp	r7, r0
 80005d8:	d301      	bcc.n	80005de <I2C_WaitOnFlagUntilTimeout+0x44>
 80005da:	2f00      	cmp	r7, #0
 80005dc:	d1e6      	bne.n	80005ac <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80005de:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80005e0:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80005e2:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80005e4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80005e8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80005ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80005ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80005f2:	f042 0220 	orr.w	r2, r2, #32
 80005f6:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80005f8:	2001      	movs	r0, #1
 80005fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080005fe <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80005fe:	b570      	push	{r4, r5, r6, lr}
 8000600:	4604      	mov	r4, r0
 8000602:	460d      	mov	r5, r1
 8000604:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000606:	6823      	ldr	r3, [r4, #0]
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	061b      	lsls	r3, r3, #24
 800060c:	d501      	bpl.n	8000612 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 800060e:	2000      	movs	r0, #0
 8000610:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000612:	4620      	mov	r0, r4
 8000614:	f7ff ff3d 	bl	8000492 <I2C_IsAcknowledgeFailed>
 8000618:	b9a8      	cbnz	r0, 8000646 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800061a:	1c6a      	adds	r2, r5, #1
 800061c:	d0f3      	beq.n	8000606 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800061e:	f7ff fdd7 	bl	80001d0 <HAL_GetTick>
 8000622:	1b80      	subs	r0, r0, r6
 8000624:	4285      	cmp	r5, r0
 8000626:	d301      	bcc.n	800062c <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8000628:	2d00      	cmp	r5, #0
 800062a:	d1ec      	bne.n	8000606 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800062c:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800062e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000630:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000632:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000636:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800063a:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800063c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000640:	f042 0220 	orr.w	r2, r2, #32
 8000644:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000646:	2001      	movs	r0, #1
}
 8000648:	bd70      	pop	{r4, r5, r6, pc}
	...

0800064c <HAL_I2C_Init>:
{
 800064c:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800064e:	4604      	mov	r4, r0
 8000650:	b908      	cbnz	r0, 8000656 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8000652:	2001      	movs	r0, #1
 8000654:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000656:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800065a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800065e:	b91b      	cbnz	r3, 8000668 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8000660:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000664:	f000 fe16 	bl	8001294 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000668:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800066a:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800066c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000670:	6813      	ldr	r3, [r2, #0]
 8000672:	f023 0301 	bic.w	r3, r3, #1
 8000676:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000678:	f000 fbd2 	bl	8000e20 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800067c:	6865      	ldr	r5, [r4, #4]
 800067e:	4b41      	ldr	r3, [pc, #260]	; (8000784 <HAL_I2C_Init+0x138>)
 8000680:	429d      	cmp	r5, r3
 8000682:	d84d      	bhi.n	8000720 <HAL_I2C_Init+0xd4>
 8000684:	4b40      	ldr	r3, [pc, #256]	; (8000788 <HAL_I2C_Init+0x13c>)
 8000686:	4298      	cmp	r0, r3
 8000688:	d9e3      	bls.n	8000652 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800068a:	4940      	ldr	r1, [pc, #256]	; (800078c <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800068c:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800068e:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000692:	6853      	ldr	r3, [r2, #4]
 8000694:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000698:	430b      	orrs	r3, r1
 800069a:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800069c:	6a13      	ldr	r3, [r2, #32]
 800069e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80006a2:	3101      	adds	r1, #1
 80006a4:	4319      	orrs	r1, r3
 80006a6:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80006a8:	69d1      	ldr	r1, [r2, #28]
 80006aa:	4b36      	ldr	r3, [pc, #216]	; (8000784 <HAL_I2C_Init+0x138>)
 80006ac:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80006b0:	429d      	cmp	r5, r3
 80006b2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80006b6:	f100 30ff 	add.w	r0, r0, #4294967295
 80006ba:	d848      	bhi.n	800074e <HAL_I2C_Init+0x102>
 80006bc:	006d      	lsls	r5, r5, #1
 80006be:	fbb0 f0f5 	udiv	r0, r0, r5
 80006c2:	3001      	adds	r0, #1
 80006c4:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80006c8:	2b04      	cmp	r3, #4
 80006ca:	bf38      	it	cc
 80006cc:	2304      	movcc	r3, #4
 80006ce:	430b      	orrs	r3, r1
 80006d0:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80006d2:	6811      	ldr	r1, [r2, #0]
 80006d4:	6a20      	ldr	r0, [r4, #32]
 80006d6:	69e3      	ldr	r3, [r4, #28]
 80006d8:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80006dc:	4303      	orrs	r3, r0
 80006de:	430b      	orrs	r3, r1
 80006e0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80006e2:	6891      	ldr	r1, [r2, #8]
 80006e4:	68e0      	ldr	r0, [r4, #12]
 80006e6:	6923      	ldr	r3, [r4, #16]
 80006e8:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80006ec:	4303      	orrs	r3, r0
 80006ee:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80006f2:	430b      	orrs	r3, r1
 80006f4:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80006f6:	68d1      	ldr	r1, [r2, #12]
 80006f8:	69a0      	ldr	r0, [r4, #24]
 80006fa:	6963      	ldr	r3, [r4, #20]
 80006fc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000700:	4303      	orrs	r3, r0
 8000702:	430b      	orrs	r3, r1
 8000704:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000706:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000708:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 800070a:	f043 0301 	orr.w	r3, r3, #1
 800070e:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000710:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000712:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000714:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000718:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800071a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800071e:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <HAL_I2C_Init+0x144>)
 8000722:	4298      	cmp	r0, r3
 8000724:	d995      	bls.n	8000652 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000726:	4e19      	ldr	r6, [pc, #100]	; (800078c <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000728:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 800072c:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000730:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000732:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000734:	6853      	ldr	r3, [r2, #4]
 8000736:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800073a:	4333      	orrs	r3, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800073c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000740:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000742:	6a13      	ldr	r3, [r2, #32]
 8000744:	fbb1 f1f6 	udiv	r1, r1, r6
 8000748:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800074c:	e7a9      	b.n	80006a2 <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800074e:	68a3      	ldr	r3, [r4, #8]
 8000750:	b953      	cbnz	r3, 8000768 <HAL_I2C_Init+0x11c>
 8000752:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000756:	fbb0 f0f3 	udiv	r0, r0, r3
 800075a:	1c43      	adds	r3, r0, #1
 800075c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000760:	b16b      	cbz	r3, 800077e <HAL_I2C_Init+0x132>
 8000762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000766:	e7b2      	b.n	80006ce <HAL_I2C_Init+0x82>
 8000768:	2319      	movs	r3, #25
 800076a:	436b      	muls	r3, r5
 800076c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000770:	1c43      	adds	r3, r0, #1
 8000772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000776:	b113      	cbz	r3, 800077e <HAL_I2C_Init+0x132>
 8000778:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800077c:	e7a7      	b.n	80006ce <HAL_I2C_Init+0x82>
 800077e:	2301      	movs	r3, #1
 8000780:	e7a5      	b.n	80006ce <HAL_I2C_Init+0x82>
 8000782:	bf00      	nop
 8000784:	000186a0 	.word	0x000186a0
 8000788:	001e847f 	.word	0x001e847f
 800078c:	000f4240 	.word	0x000f4240
 8000790:	003d08ff 	.word	0x003d08ff

08000794 <HAL_I2C_Master_Transmit>:
{
 8000794:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000798:	4604      	mov	r4, r0
 800079a:	461f      	mov	r7, r3
 800079c:	460d      	mov	r5, r1
 800079e:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80007a0:	f7ff fd16 	bl	80001d0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80007a4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80007a8:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80007aa:	2b20      	cmp	r3, #32
 80007ac:	d004      	beq.n	80007b8 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 80007ae:	2502      	movs	r5, #2
}
 80007b0:	4628      	mov	r0, r5
 80007b2:	b004      	add	sp, #16
 80007b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80007b8:	9000      	str	r0, [sp, #0]
 80007ba:	2319      	movs	r3, #25
 80007bc:	2201      	movs	r2, #1
 80007be:	4958      	ldr	r1, [pc, #352]	; (8000920 <HAL_I2C_Master_Transmit+0x18c>)
 80007c0:	4620      	mov	r0, r4
 80007c2:	f7ff feea 	bl	800059a <I2C_WaitOnFlagUntilTimeout>
 80007c6:	2800      	cmp	r0, #0
 80007c8:	d1f1      	bne.n	80007ae <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 80007ca:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d0ed      	beq.n	80007ae <HAL_I2C_Master_Transmit+0x1a>
 80007d2:	2301      	movs	r3, #1
 80007d4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80007d8:	6823      	ldr	r3, [r4, #0]
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80007de:	bf5e      	ittt	pl
 80007e0:	681a      	ldrpl	r2, [r3, #0]
 80007e2:	f042 0201 	orrpl.w	r2, r2, #1
 80007e6:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80007ee:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80007f0:	2221      	movs	r2, #33	; 0x21
 80007f2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80007f6:	2210      	movs	r2, #16
 80007f8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80007fc:	2200      	movs	r2, #0
 80007fe:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8000800:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000802:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8000804:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8000808:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800080a:	4a46      	ldr	r2, [pc, #280]	; (8000924 <HAL_I2C_Master_Transmit+0x190>)
 800080c:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800080e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000810:	2a08      	cmp	r2, #8
 8000812:	d004      	beq.n	800081e <HAL_I2C_Master_Transmit+0x8a>
 8000814:	2a01      	cmp	r2, #1
 8000816:	d002      	beq.n	800081e <HAL_I2C_Master_Transmit+0x8a>
 8000818:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800081c:	d104      	bne.n	8000828 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	e002      	b.n	800082e <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000828:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800082a:	2a12      	cmp	r2, #18
 800082c:	d0f7      	beq.n	800081e <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800082e:	9600      	str	r6, [sp, #0]
 8000830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000832:	2200      	movs	r2, #0
 8000834:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000838:	4620      	mov	r0, r4
 800083a:	f7ff feae 	bl	800059a <I2C_WaitOnFlagUntilTimeout>
 800083e:	b108      	cbz	r0, 8000844 <HAL_I2C_Master_Transmit+0xb0>
        return HAL_ERROR;
 8000840:	2501      	movs	r5, #1
 8000842:	e7b5      	b.n	80007b0 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000844:	6923      	ldr	r3, [r4, #16]
 8000846:	6822      	ldr	r2, [r4, #0]
 8000848:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800084c:	d113      	bne.n	8000876 <HAL_I2C_Master_Transmit+0xe2>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800084e:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8000852:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000854:	4633      	mov	r3, r6
 8000856:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000858:	4933      	ldr	r1, [pc, #204]	; (8000928 <HAL_I2C_Master_Transmit+0x194>)
 800085a:	4620      	mov	r0, r4
 800085c:	f7ff fe32 	bl	80004c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000860:	4605      	mov	r5, r0
 8000862:	2800      	cmp	r0, #0
 8000864:	d1ec      	bne.n	8000840 <HAL_I2C_Master_Transmit+0xac>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000866:	6823      	ldr	r3, [r4, #0]
 8000868:	9003      	str	r0, [sp, #12]
 800086a:	695a      	ldr	r2, [r3, #20]
 800086c:	9203      	str	r2, [sp, #12]
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	9303      	str	r3, [sp, #12]
 8000872:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8000874:	e044      	b.n	8000900 <HAL_I2C_Master_Transmit+0x16c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000876:	11eb      	asrs	r3, r5, #7
 8000878:	f003 0306 	and.w	r3, r3, #6
 800087c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000880:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000882:	492a      	ldr	r1, [pc, #168]	; (800092c <HAL_I2C_Master_Transmit+0x198>)
 8000884:	4633      	mov	r3, r6
 8000886:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000888:	4620      	mov	r0, r4
 800088a:	f7ff fe1b 	bl	80004c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800088e:	2800      	cmp	r0, #0
 8000890:	d1d6      	bne.n	8000840 <HAL_I2C_Master_Transmit+0xac>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000892:	6823      	ldr	r3, [r4, #0]
 8000894:	b2ed      	uxtb	r5, r5
 8000896:	611d      	str	r5, [r3, #16]
 8000898:	e7dc      	b.n	8000854 <HAL_I2C_Master_Transmit+0xc0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800089a:	4632      	mov	r2, r6
 800089c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800089e:	4620      	mov	r0, r4
 80008a0:	f7ff fead 	bl	80005fe <I2C_WaitOnTXEFlagUntilTimeout>
 80008a4:	b140      	cbz	r0, 80008b8 <HAL_I2C_Master_Transmit+0x124>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80008a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008a8:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80008aa:	bf01      	itttt	eq
 80008ac:	6822      	ldreq	r2, [r4, #0]
 80008ae:	6813      	ldreq	r3, [r2, #0]
 80008b0:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80008b4:	6013      	streq	r3, [r2, #0]
 80008b6:	e7c3      	b.n	8000840 <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80008b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008ba:	6820      	ldr	r0, [r4, #0]
 80008bc:	461a      	mov	r2, r3
 80008be:	f812 1b01 	ldrb.w	r1, [r2], #1
 80008c2:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 80008c4:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80008c6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80008c8:	3a01      	subs	r2, #1
 80008ca:	b292      	uxth	r2, r2
 80008cc:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80008ce:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80008d0:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 80008d2:	1e51      	subs	r1, r2, #1
 80008d4:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80008d6:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 80008d8:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80008da:	d50a      	bpl.n	80008f2 <HAL_I2C_Master_Transmit+0x15e>
 80008dc:	b149      	cbz	r1, 80008f2 <HAL_I2C_Master_Transmit+0x15e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80008de:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 80008e0:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80008e2:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 80008e4:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80008e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80008e8:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 80008ea:	3b01      	subs	r3, #1
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80008f0:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80008f2:	4632      	mov	r2, r6
 80008f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80008f6:	4620      	mov	r0, r4
 80008f8:	f7ff fe29 	bl	800054e <I2C_WaitOnBTFFlagUntilTimeout>
 80008fc:	2800      	cmp	r0, #0
 80008fe:	d1d2      	bne.n	80008a6 <HAL_I2C_Master_Transmit+0x112>
    while (hi2c->XferSize > 0U)
 8000900:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000902:	2b00      	cmp	r3, #0
 8000904:	d1c9      	bne.n	800089a <HAL_I2C_Master_Transmit+0x106>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000906:	6821      	ldr	r1, [r4, #0]
 8000908:	680a      	ldr	r2, [r1, #0]
 800090a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800090e:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000910:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8000912:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8000916:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800091a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800091e:	e747      	b.n	80007b0 <HAL_I2C_Master_Transmit+0x1c>
 8000920:	00100002 	.word	0x00100002
 8000924:	ffff0000 	.word	0xffff0000
 8000928:	00010002 	.word	0x00010002
 800092c:	00010008 	.word	0x00010008

08000930 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000930:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000934:	4605      	mov	r5, r0
 8000936:	b908      	cbnz	r0, 800093c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000938:	2001      	movs	r0, #1
 800093a:	e03c      	b.n	80009b6 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800093c:	6803      	ldr	r3, [r0, #0]
 800093e:	07db      	lsls	r3, r3, #31
 8000940:	d410      	bmi.n	8000964 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000942:	682b      	ldr	r3, [r5, #0]
 8000944:	079f      	lsls	r7, r3, #30
 8000946:	d45d      	bmi.n	8000a04 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000948:	682b      	ldr	r3, [r5, #0]
 800094a:	0719      	lsls	r1, r3, #28
 800094c:	f100 8094 	bmi.w	8000a78 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000950:	682b      	ldr	r3, [r5, #0]
 8000952:	075a      	lsls	r2, r3, #29
 8000954:	f100 80be 	bmi.w	8000ad4 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000958:	69e8      	ldr	r0, [r5, #28]
 800095a:	2800      	cmp	r0, #0
 800095c:	f040 812c 	bne.w	8000bb8 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8000960:	2000      	movs	r0, #0
 8000962:	e028      	b.n	80009b6 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000964:	4c8f      	ldr	r4, [pc, #572]	; (8000ba4 <HAL_RCC_OscConfig+0x274>)
 8000966:	6863      	ldr	r3, [r4, #4]
 8000968:	f003 030c 	and.w	r3, r3, #12
 800096c:	2b04      	cmp	r3, #4
 800096e:	d007      	beq.n	8000980 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000970:	6863      	ldr	r3, [r4, #4]
 8000972:	f003 030c 	and.w	r3, r3, #12
 8000976:	2b08      	cmp	r3, #8
 8000978:	d109      	bne.n	800098e <HAL_RCC_OscConfig+0x5e>
 800097a:	6863      	ldr	r3, [r4, #4]
 800097c:	03de      	lsls	r6, r3, #15
 800097e:	d506      	bpl.n	800098e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000980:	6823      	ldr	r3, [r4, #0]
 8000982:	039c      	lsls	r4, r3, #14
 8000984:	d5dd      	bpl.n	8000942 <HAL_RCC_OscConfig+0x12>
 8000986:	686b      	ldr	r3, [r5, #4]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d1da      	bne.n	8000942 <HAL_RCC_OscConfig+0x12>
 800098c:	e7d4      	b.n	8000938 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800098e:	686b      	ldr	r3, [r5, #4]
 8000990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000994:	d112      	bne.n	80009bc <HAL_RCC_OscConfig+0x8c>
 8000996:	6823      	ldr	r3, [r4, #0]
 8000998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800099c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800099e:	f7ff fc17 	bl	80001d0 <HAL_GetTick>
 80009a2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009a4:	6823      	ldr	r3, [r4, #0]
 80009a6:	0398      	lsls	r0, r3, #14
 80009a8:	d4cb      	bmi.n	8000942 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80009aa:	f7ff fc11 	bl	80001d0 <HAL_GetTick>
 80009ae:	1b80      	subs	r0, r0, r6
 80009b0:	2864      	cmp	r0, #100	; 0x64
 80009b2:	d9f7      	bls.n	80009a4 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80009b4:	2003      	movs	r0, #3
}
 80009b6:	b002      	add	sp, #8
 80009b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009bc:	b99b      	cbnz	r3, 80009e6 <HAL_RCC_OscConfig+0xb6>
 80009be:	6823      	ldr	r3, [r4, #0]
 80009c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009c4:	6023      	str	r3, [r4, #0]
 80009c6:	6823      	ldr	r3, [r4, #0]
 80009c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009cc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009ce:	f7ff fbff 	bl	80001d0 <HAL_GetTick>
 80009d2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009d4:	6823      	ldr	r3, [r4, #0]
 80009d6:	0399      	lsls	r1, r3, #14
 80009d8:	d5b3      	bpl.n	8000942 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80009da:	f7ff fbf9 	bl	80001d0 <HAL_GetTick>
 80009de:	1b80      	subs	r0, r0, r6
 80009e0:	2864      	cmp	r0, #100	; 0x64
 80009e2:	d9f7      	bls.n	80009d4 <HAL_RCC_OscConfig+0xa4>
 80009e4:	e7e6      	b.n	80009b4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009ea:	6823      	ldr	r3, [r4, #0]
 80009ec:	d103      	bne.n	80009f6 <HAL_RCC_OscConfig+0xc6>
 80009ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009f2:	6023      	str	r3, [r4, #0]
 80009f4:	e7cf      	b.n	8000996 <HAL_RCC_OscConfig+0x66>
 80009f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009fa:	6023      	str	r3, [r4, #0]
 80009fc:	6823      	ldr	r3, [r4, #0]
 80009fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a02:	e7cb      	b.n	800099c <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a04:	4c67      	ldr	r4, [pc, #412]	; (8000ba4 <HAL_RCC_OscConfig+0x274>)
 8000a06:	6863      	ldr	r3, [r4, #4]
 8000a08:	f013 0f0c 	tst.w	r3, #12
 8000a0c:	d007      	beq.n	8000a1e <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000a0e:	6863      	ldr	r3, [r4, #4]
 8000a10:	f003 030c 	and.w	r3, r3, #12
 8000a14:	2b08      	cmp	r3, #8
 8000a16:	d110      	bne.n	8000a3a <HAL_RCC_OscConfig+0x10a>
 8000a18:	6863      	ldr	r3, [r4, #4]
 8000a1a:	03da      	lsls	r2, r3, #15
 8000a1c:	d40d      	bmi.n	8000a3a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a1e:	6823      	ldr	r3, [r4, #0]
 8000a20:	079b      	lsls	r3, r3, #30
 8000a22:	d502      	bpl.n	8000a2a <HAL_RCC_OscConfig+0xfa>
 8000a24:	692b      	ldr	r3, [r5, #16]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d186      	bne.n	8000938 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a2a:	6823      	ldr	r3, [r4, #0]
 8000a2c:	696a      	ldr	r2, [r5, #20]
 8000a2e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a32:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a36:	6023      	str	r3, [r4, #0]
 8000a38:	e786      	b.n	8000948 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a3a:	692a      	ldr	r2, [r5, #16]
 8000a3c:	4b5a      	ldr	r3, [pc, #360]	; (8000ba8 <HAL_RCC_OscConfig+0x278>)
 8000a3e:	b16a      	cbz	r2, 8000a5c <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8000a40:	2201      	movs	r2, #1
 8000a42:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a44:	f7ff fbc4 	bl	80001d0 <HAL_GetTick>
 8000a48:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a4a:	6823      	ldr	r3, [r4, #0]
 8000a4c:	079f      	lsls	r7, r3, #30
 8000a4e:	d4ec      	bmi.n	8000a2a <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a50:	f7ff fbbe 	bl	80001d0 <HAL_GetTick>
 8000a54:	1b80      	subs	r0, r0, r6
 8000a56:	2802      	cmp	r0, #2
 8000a58:	d9f7      	bls.n	8000a4a <HAL_RCC_OscConfig+0x11a>
 8000a5a:	e7ab      	b.n	80009b4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000a5c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a5e:	f7ff fbb7 	bl	80001d0 <HAL_GetTick>
 8000a62:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a64:	6823      	ldr	r3, [r4, #0]
 8000a66:	0798      	lsls	r0, r3, #30
 8000a68:	f57f af6e 	bpl.w	8000948 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a6c:	f7ff fbb0 	bl	80001d0 <HAL_GetTick>
 8000a70:	1b80      	subs	r0, r0, r6
 8000a72:	2802      	cmp	r0, #2
 8000a74:	d9f6      	bls.n	8000a64 <HAL_RCC_OscConfig+0x134>
 8000a76:	e79d      	b.n	80009b4 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a78:	69aa      	ldr	r2, [r5, #24]
 8000a7a:	4c4a      	ldr	r4, [pc, #296]	; (8000ba4 <HAL_RCC_OscConfig+0x274>)
 8000a7c:	4b4b      	ldr	r3, [pc, #300]	; (8000bac <HAL_RCC_OscConfig+0x27c>)
 8000a7e:	b1da      	cbz	r2, 8000ab8 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000a80:	2201      	movs	r2, #1
 8000a82:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a84:	f7ff fba4 	bl	80001d0 <HAL_GetTick>
 8000a88:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a8c:	079b      	lsls	r3, r3, #30
 8000a8e:	d50d      	bpl.n	8000aac <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000a90:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000a94:	4b46      	ldr	r3, [pc, #280]	; (8000bb0 <HAL_RCC_OscConfig+0x280>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a9c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000a9e:	bf00      	nop
  }
  while (Delay --);
 8000aa0:	9b01      	ldr	r3, [sp, #4]
 8000aa2:	1e5a      	subs	r2, r3, #1
 8000aa4:	9201      	str	r2, [sp, #4]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d1f9      	bne.n	8000a9e <HAL_RCC_OscConfig+0x16e>
 8000aaa:	e751      	b.n	8000950 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000aac:	f7ff fb90 	bl	80001d0 <HAL_GetTick>
 8000ab0:	1b80      	subs	r0, r0, r6
 8000ab2:	2802      	cmp	r0, #2
 8000ab4:	d9e9      	bls.n	8000a8a <HAL_RCC_OscConfig+0x15a>
 8000ab6:	e77d      	b.n	80009b4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000ab8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000aba:	f7ff fb89 	bl	80001d0 <HAL_GetTick>
 8000abe:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ac2:	079f      	lsls	r7, r3, #30
 8000ac4:	f57f af44 	bpl.w	8000950 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ac8:	f7ff fb82 	bl	80001d0 <HAL_GetTick>
 8000acc:	1b80      	subs	r0, r0, r6
 8000ace:	2802      	cmp	r0, #2
 8000ad0:	d9f6      	bls.n	8000ac0 <HAL_RCC_OscConfig+0x190>
 8000ad2:	e76f      	b.n	80009b4 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ad4:	4c33      	ldr	r4, [pc, #204]	; (8000ba4 <HAL_RCC_OscConfig+0x274>)
 8000ad6:	69e3      	ldr	r3, [r4, #28]
 8000ad8:	00d8      	lsls	r0, r3, #3
 8000ada:	d424      	bmi.n	8000b26 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000adc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	69e3      	ldr	r3, [r4, #28]
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	61e3      	str	r3, [r4, #28]
 8000ae6:	69e3      	ldr	r3, [r4, #28]
 8000ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000af0:	4e30      	ldr	r6, [pc, #192]	; (8000bb4 <HAL_RCC_OscConfig+0x284>)
 8000af2:	6833      	ldr	r3, [r6, #0]
 8000af4:	05d9      	lsls	r1, r3, #23
 8000af6:	d518      	bpl.n	8000b2a <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000af8:	68eb      	ldr	r3, [r5, #12]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d126      	bne.n	8000b4c <HAL_RCC_OscConfig+0x21c>
 8000afe:	6a23      	ldr	r3, [r4, #32]
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000b06:	f7ff fb63 	bl	80001d0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b0a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b0e:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b10:	6a23      	ldr	r3, [r4, #32]
 8000b12:	079b      	lsls	r3, r3, #30
 8000b14:	d53f      	bpl.n	8000b96 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000b16:	2f00      	cmp	r7, #0
 8000b18:	f43f af1e 	beq.w	8000958 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b1c:	69e3      	ldr	r3, [r4, #28]
 8000b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b22:	61e3      	str	r3, [r4, #28]
 8000b24:	e718      	b.n	8000958 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000b26:	2700      	movs	r7, #0
 8000b28:	e7e2      	b.n	8000af0 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b2a:	6833      	ldr	r3, [r6, #0]
 8000b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b30:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000b32:	f7ff fb4d 	bl	80001d0 <HAL_GetTick>
 8000b36:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b38:	6833      	ldr	r3, [r6, #0]
 8000b3a:	05da      	lsls	r2, r3, #23
 8000b3c:	d4dc      	bmi.n	8000af8 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b3e:	f7ff fb47 	bl	80001d0 <HAL_GetTick>
 8000b42:	eba0 0008 	sub.w	r0, r0, r8
 8000b46:	2864      	cmp	r0, #100	; 0x64
 8000b48:	d9f6      	bls.n	8000b38 <HAL_RCC_OscConfig+0x208>
 8000b4a:	e733      	b.n	80009b4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b4c:	b9ab      	cbnz	r3, 8000b7a <HAL_RCC_OscConfig+0x24a>
 8000b4e:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b50:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b54:	f023 0301 	bic.w	r3, r3, #1
 8000b58:	6223      	str	r3, [r4, #32]
 8000b5a:	6a23      	ldr	r3, [r4, #32]
 8000b5c:	f023 0304 	bic.w	r3, r3, #4
 8000b60:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000b62:	f7ff fb35 	bl	80001d0 <HAL_GetTick>
 8000b66:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b68:	6a23      	ldr	r3, [r4, #32]
 8000b6a:	0798      	lsls	r0, r3, #30
 8000b6c:	d5d3      	bpl.n	8000b16 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b6e:	f7ff fb2f 	bl	80001d0 <HAL_GetTick>
 8000b72:	1b80      	subs	r0, r0, r6
 8000b74:	4540      	cmp	r0, r8
 8000b76:	d9f7      	bls.n	8000b68 <HAL_RCC_OscConfig+0x238>
 8000b78:	e71c      	b.n	80009b4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b7a:	2b05      	cmp	r3, #5
 8000b7c:	6a23      	ldr	r3, [r4, #32]
 8000b7e:	d103      	bne.n	8000b88 <HAL_RCC_OscConfig+0x258>
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	6223      	str	r3, [r4, #32]
 8000b86:	e7ba      	b.n	8000afe <HAL_RCC_OscConfig+0x1ce>
 8000b88:	f023 0301 	bic.w	r3, r3, #1
 8000b8c:	6223      	str	r3, [r4, #32]
 8000b8e:	6a23      	ldr	r3, [r4, #32]
 8000b90:	f023 0304 	bic.w	r3, r3, #4
 8000b94:	e7b6      	b.n	8000b04 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b96:	f7ff fb1b 	bl	80001d0 <HAL_GetTick>
 8000b9a:	eba0 0008 	sub.w	r0, r0, r8
 8000b9e:	42b0      	cmp	r0, r6
 8000ba0:	d9b6      	bls.n	8000b10 <HAL_RCC_OscConfig+0x1e0>
 8000ba2:	e707      	b.n	80009b4 <HAL_RCC_OscConfig+0x84>
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	42420000 	.word	0x42420000
 8000bac:	42420480 	.word	0x42420480
 8000bb0:	20000018 	.word	0x20000018
 8000bb4:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bb8:	4b2a      	ldr	r3, [pc, #168]	; (8000c64 <HAL_RCC_OscConfig+0x334>)
 8000bba:	685a      	ldr	r2, [r3, #4]
 8000bbc:	461c      	mov	r4, r3
 8000bbe:	f002 020c 	and.w	r2, r2, #12
 8000bc2:	2a08      	cmp	r2, #8
 8000bc4:	d03d      	beq.n	8000c42 <HAL_RCC_OscConfig+0x312>
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	4e27      	ldr	r6, [pc, #156]	; (8000c68 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bca:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000bcc:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bce:	d12b      	bne.n	8000c28 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000bd0:	f7ff fafe 	bl	80001d0 <HAL_GetTick>
 8000bd4:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bd6:	6823      	ldr	r3, [r4, #0]
 8000bd8:	0199      	lsls	r1, r3, #6
 8000bda:	d41f      	bmi.n	8000c1c <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000bdc:	6a2b      	ldr	r3, [r5, #32]
 8000bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000be2:	d105      	bne.n	8000bf0 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000be4:	6862      	ldr	r2, [r4, #4]
 8000be6:	68a9      	ldr	r1, [r5, #8]
 8000be8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000bec:	430a      	orrs	r2, r1
 8000bee:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bf0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000bf2:	6862      	ldr	r2, [r4, #4]
 8000bf4:	430b      	orrs	r3, r1
 8000bf6:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000bfe:	2301      	movs	r3, #1
 8000c00:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000c02:	f7ff fae5 	bl	80001d0 <HAL_GetTick>
 8000c06:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c08:	6823      	ldr	r3, [r4, #0]
 8000c0a:	019a      	lsls	r2, r3, #6
 8000c0c:	f53f aea8 	bmi.w	8000960 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c10:	f7ff fade 	bl	80001d0 <HAL_GetTick>
 8000c14:	1b40      	subs	r0, r0, r5
 8000c16:	2802      	cmp	r0, #2
 8000c18:	d9f6      	bls.n	8000c08 <HAL_RCC_OscConfig+0x2d8>
 8000c1a:	e6cb      	b.n	80009b4 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c1c:	f7ff fad8 	bl	80001d0 <HAL_GetTick>
 8000c20:	1bc0      	subs	r0, r0, r7
 8000c22:	2802      	cmp	r0, #2
 8000c24:	d9d7      	bls.n	8000bd6 <HAL_RCC_OscConfig+0x2a6>
 8000c26:	e6c5      	b.n	80009b4 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000c28:	f7ff fad2 	bl	80001d0 <HAL_GetTick>
 8000c2c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c2e:	6823      	ldr	r3, [r4, #0]
 8000c30:	019b      	lsls	r3, r3, #6
 8000c32:	f57f ae95 	bpl.w	8000960 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c36:	f7ff facb 	bl	80001d0 <HAL_GetTick>
 8000c3a:	1b40      	subs	r0, r0, r5
 8000c3c:	2802      	cmp	r0, #2
 8000c3e:	d9f6      	bls.n	8000c2e <HAL_RCC_OscConfig+0x2fe>
 8000c40:	e6b8      	b.n	80009b4 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c42:	2801      	cmp	r0, #1
 8000c44:	f43f aeb7 	beq.w	80009b6 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8000c48:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c4a:	6a2b      	ldr	r3, [r5, #32]
 8000c4c:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8000c50:	429a      	cmp	r2, r3
 8000c52:	f47f ae71 	bne.w	8000938 <HAL_RCC_OscConfig+0x8>
 8000c56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c58:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000c5c:	1ac0      	subs	r0, r0, r3
 8000c5e:	bf18      	it	ne
 8000c60:	2001      	movne	r0, #1
 8000c62:	e6a8      	b.n	80009b6 <HAL_RCC_OscConfig+0x86>
 8000c64:	40021000 	.word	0x40021000
 8000c68:	42420060 	.word	0x42420060

08000c6c <HAL_RCC_GetSysClockFreq>:
{
 8000c6c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000c6e:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000c70:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000c72:	ac02      	add	r4, sp, #8
 8000c74:	f103 0510 	add.w	r5, r3, #16
 8000c78:	4622      	mov	r2, r4
 8000c7a:	6818      	ldr	r0, [r3, #0]
 8000c7c:	6859      	ldr	r1, [r3, #4]
 8000c7e:	3308      	adds	r3, #8
 8000c80:	c203      	stmia	r2!, {r0, r1}
 8000c82:	42ab      	cmp	r3, r5
 8000c84:	4614      	mov	r4, r2
 8000c86:	d1f7      	bne.n	8000c78 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000c88:	2301      	movs	r3, #1
 8000c8a:	f88d 3004 	strb.w	r3, [sp, #4]
 8000c8e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000c90:	4911      	ldr	r1, [pc, #68]	; (8000cd8 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000c92:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000c96:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000c98:	f003 020c 	and.w	r2, r3, #12
 8000c9c:	2a08      	cmp	r2, #8
 8000c9e:	d117      	bne.n	8000cd0 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000ca0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000ca4:	a806      	add	r0, sp, #24
 8000ca6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ca8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000caa:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000cae:	d50c      	bpl.n	8000cca <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000cb0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000cb2:	480a      	ldr	r0, [pc, #40]	; (8000cdc <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000cb4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000cb8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000cba:	aa06      	add	r2, sp, #24
 8000cbc:	4413      	add	r3, r2
 8000cbe:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000cc2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000cc6:	b007      	add	sp, #28
 8000cc8:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000cca:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <HAL_RCC_GetSysClockFreq+0x74>)
 8000ccc:	4350      	muls	r0, r2
 8000cce:	e7fa      	b.n	8000cc6 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000cd0:	4802      	ldr	r0, [pc, #8]	; (8000cdc <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000cd2:	e7f8      	b.n	8000cc6 <HAL_RCC_GetSysClockFreq+0x5a>
 8000cd4:	08001428 	.word	0x08001428
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	007a1200 	.word	0x007a1200
 8000ce0:	003d0900 	.word	0x003d0900

08000ce4 <HAL_RCC_ClockConfig>:
{
 8000ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ce8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000cea:	4604      	mov	r4, r0
 8000cec:	b910      	cbnz	r0, 8000cf4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000cee:	2001      	movs	r0, #1
 8000cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000cf4:	4a45      	ldr	r2, [pc, #276]	; (8000e0c <HAL_RCC_ClockConfig+0x128>)
 8000cf6:	6813      	ldr	r3, [r2, #0]
 8000cf8:	f003 0307 	and.w	r3, r3, #7
 8000cfc:	428b      	cmp	r3, r1
 8000cfe:	d329      	bcc.n	8000d54 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d00:	6821      	ldr	r1, [r4, #0]
 8000d02:	078e      	lsls	r6, r1, #30
 8000d04:	d431      	bmi.n	8000d6a <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d06:	07ca      	lsls	r2, r1, #31
 8000d08:	d444      	bmi.n	8000d94 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000d0a:	4a40      	ldr	r2, [pc, #256]	; (8000e0c <HAL_RCC_ClockConfig+0x128>)
 8000d0c:	6813      	ldr	r3, [r2, #0]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	429d      	cmp	r5, r3
 8000d14:	d367      	bcc.n	8000de6 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d16:	6822      	ldr	r2, [r4, #0]
 8000d18:	4d3d      	ldr	r5, [pc, #244]	; (8000e10 <HAL_RCC_ClockConfig+0x12c>)
 8000d1a:	f012 0f04 	tst.w	r2, #4
 8000d1e:	d16e      	bne.n	8000dfe <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d20:	0713      	lsls	r3, r2, #28
 8000d22:	d506      	bpl.n	8000d32 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d24:	686b      	ldr	r3, [r5, #4]
 8000d26:	6922      	ldr	r2, [r4, #16]
 8000d28:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000d2c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d30:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000d32:	f7ff ff9b 	bl	8000c6c <HAL_RCC_GetSysClockFreq>
 8000d36:	686b      	ldr	r3, [r5, #4]
 8000d38:	4a36      	ldr	r2, [pc, #216]	; (8000e14 <HAL_RCC_ClockConfig+0x130>)
 8000d3a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000d3e:	5cd3      	ldrb	r3, [r2, r3]
 8000d40:	40d8      	lsrs	r0, r3
 8000d42:	4b35      	ldr	r3, [pc, #212]	; (8000e18 <HAL_RCC_ClockConfig+0x134>)
 8000d44:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000d46:	4b35      	ldr	r3, [pc, #212]	; (8000e1c <HAL_RCC_ClockConfig+0x138>)
 8000d48:	6818      	ldr	r0, [r3, #0]
 8000d4a:	f7ff f9ff 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000d4e:	2000      	movs	r0, #0
 8000d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d54:	6813      	ldr	r3, [r2, #0]
 8000d56:	f023 0307 	bic.w	r3, r3, #7
 8000d5a:	430b      	orrs	r3, r1
 8000d5c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d5e:	6813      	ldr	r3, [r2, #0]
 8000d60:	f003 0307 	and.w	r3, r3, #7
 8000d64:	4299      	cmp	r1, r3
 8000d66:	d1c2      	bne.n	8000cee <HAL_RCC_ClockConfig+0xa>
 8000d68:	e7ca      	b.n	8000d00 <HAL_RCC_ClockConfig+0x1c>
 8000d6a:	4b29      	ldr	r3, [pc, #164]	; (8000e10 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d6c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d70:	bf1e      	ittt	ne
 8000d72:	685a      	ldrne	r2, [r3, #4]
 8000d74:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000d78:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d7a:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d7c:	bf42      	ittt	mi
 8000d7e:	685a      	ldrmi	r2, [r3, #4]
 8000d80:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000d84:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d86:	685a      	ldr	r2, [r3, #4]
 8000d88:	68a0      	ldr	r0, [r4, #8]
 8000d8a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000d8e:	4302      	orrs	r2, r0
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	e7b8      	b.n	8000d06 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d94:	6862      	ldr	r2, [r4, #4]
 8000d96:	4e1e      	ldr	r6, [pc, #120]	; (8000e10 <HAL_RCC_ClockConfig+0x12c>)
 8000d98:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d9a:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d9c:	d11b      	bne.n	8000dd6 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d9e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da2:	d0a4      	beq.n	8000cee <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000da4:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000da6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000daa:	f023 0303 	bic.w	r3, r3, #3
 8000dae:	4313      	orrs	r3, r2
 8000db0:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000db2:	f7ff fa0d 	bl	80001d0 <HAL_GetTick>
 8000db6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000db8:	6873      	ldr	r3, [r6, #4]
 8000dba:	6862      	ldr	r2, [r4, #4]
 8000dbc:	f003 030c 	and.w	r3, r3, #12
 8000dc0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000dc4:	d0a1      	beq.n	8000d0a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dc6:	f7ff fa03 	bl	80001d0 <HAL_GetTick>
 8000dca:	1bc0      	subs	r0, r0, r7
 8000dcc:	4540      	cmp	r0, r8
 8000dce:	d9f3      	bls.n	8000db8 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000dd0:	2003      	movs	r0, #3
}
 8000dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000dd6:	2a02      	cmp	r2, #2
 8000dd8:	d102      	bne.n	8000de0 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dda:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000dde:	e7e0      	b.n	8000da2 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de0:	f013 0f02 	tst.w	r3, #2
 8000de4:	e7dd      	b.n	8000da2 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000de6:	6813      	ldr	r3, [r2, #0]
 8000de8:	f023 0307 	bic.w	r3, r3, #7
 8000dec:	432b      	orrs	r3, r5
 8000dee:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000df0:	6813      	ldr	r3, [r2, #0]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	429d      	cmp	r5, r3
 8000df8:	f47f af79 	bne.w	8000cee <HAL_RCC_ClockConfig+0xa>
 8000dfc:	e78b      	b.n	8000d16 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dfe:	686b      	ldr	r3, [r5, #4]
 8000e00:	68e1      	ldr	r1, [r4, #12]
 8000e02:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e06:	430b      	orrs	r3, r1
 8000e08:	606b      	str	r3, [r5, #4]
 8000e0a:	e789      	b.n	8000d20 <HAL_RCC_ClockConfig+0x3c>
 8000e0c:	40022000 	.word	0x40022000
 8000e10:	40021000 	.word	0x40021000
 8000e14:	08001467 	.word	0x08001467
 8000e18:	20000018 	.word	0x20000018
 8000e1c:	20000004 	.word	0x20000004

08000e20 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000e22:	4a05      	ldr	r2, [pc, #20]	; (8000e38 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000e2a:	5cd3      	ldrb	r3, [r2, r3]
 8000e2c:	4a03      	ldr	r2, [pc, #12]	; (8000e3c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000e2e:	6810      	ldr	r0, [r2, #0]
}
 8000e30:	40d8      	lsrs	r0, r3
 8000e32:	4770      	bx	lr
 8000e34:	40021000 	.word	0x40021000
 8000e38:	08001477 	.word	0x08001477
 8000e3c:	20000018 	.word	0x20000018

08000e40 <DelayUS>:
  __ASM volatile ("NOP");
  __ASM volatile ("NOP");
}

static void DelayUS(uint32_t us) {
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <DelayUS+0x24>)
 8000e42:	4a09      	ldr	r2, [pc, #36]	; (8000e68 <DelayUS+0x28>)
 8000e44:	681b      	ldr	r3, [r3, #0]
static void DelayUS(uint32_t us) {
 8000e46:	b082      	sub	sp, #8
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000e48:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e4c:	4358      	muls	r0, r3
  uint32_t start = DWT->CYCCNT;
 8000e4e:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <DelayUS+0x2c>)
 8000e50:	6859      	ldr	r1, [r3, #4]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	1a52      	subs	r2, r2, r1
 8000e56:	9201      	str	r2, [sp, #4]
  } while(cnt < cycles);
 8000e58:	9a01      	ldr	r2, [sp, #4]
 8000e5a:	4290      	cmp	r0, r2
 8000e5c:	d8f9      	bhi.n	8000e52 <DelayUS+0x12>
}
 8000e5e:	b002      	add	sp, #8
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000018 	.word	0x20000018
 8000e68:	000f4240 	.word	0x000f4240
 8000e6c:	e0001000 	.word	0xe0001000

08000e70 <ExpanderWrite>:
{
 8000e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t data = _data | dpBacklight;
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <ExpanderWrite+0x24>)
 8000e74:	aa04      	add	r2, sp, #16
 8000e76:	781b      	ldrb	r3, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000e78:	214e      	movs	r1, #78	; 0x4e
  uint8_t data = _data | dpBacklight;
 8000e7a:	4318      	orrs	r0, r3
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000e7c:	230a      	movs	r3, #10
  uint8_t data = _data | dpBacklight;
 8000e7e:	f802 0d01 	strb.w	r0, [r2, #-1]!
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	4804      	ldr	r0, [pc, #16]	; (8000e98 <ExpanderWrite+0x28>)
 8000e86:	2301      	movs	r3, #1
 8000e88:	f7ff fc84 	bl	8000794 <HAL_I2C_Master_Transmit>
}
 8000e8c:	b005      	add	sp, #20
 8000e8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e92:	bf00      	nop
 8000e94:	20000040 	.word	0x20000040
 8000e98:	20000044 	.word	0x20000044

08000e9c <Write4Bits>:
{
 8000e9c:	b510      	push	{r4, lr}
 8000e9e:	4604      	mov	r4, r0
  ExpanderWrite(value);
 8000ea0:	f7ff ffe6 	bl	8000e70 <ExpanderWrite>
  ExpanderWrite(_data | ENABLE);
 8000ea4:	f044 0004 	orr.w	r0, r4, #4
 8000ea8:	f7ff ffe2 	bl	8000e70 <ExpanderWrite>
  DelayUS(20);
 8000eac:	2014      	movs	r0, #20
 8000eae:	f7ff ffc7 	bl	8000e40 <DelayUS>
  ExpanderWrite(_data & ~ENABLE);
 8000eb2:	f004 00fb 	and.w	r0, r4, #251	; 0xfb
 8000eb6:	f7ff ffdb 	bl	8000e70 <ExpanderWrite>
}
 8000eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  DelayUS(20);
 8000ebe:	2014      	movs	r0, #20
 8000ec0:	f7ff bfbe 	b.w	8000e40 <DelayUS>

08000ec4 <Send>:
{
 8000ec4:	b538      	push	{r3, r4, r5, lr}
 8000ec6:	4605      	mov	r5, r0
 8000ec8:	460c      	mov	r4, r1
  uint8_t highnib = value & 0xF0;
 8000eca:	f020 000f 	bic.w	r0, r0, #15
  Write4Bits((highnib)|mode);
 8000ece:	4308      	orrs	r0, r1
 8000ed0:	f7ff ffe4 	bl	8000e9c <Write4Bits>
  Write4Bits((lownib)|mode);
 8000ed4:	ea44 1005 	orr.w	r0, r4, r5, lsl #4
 8000ed8:	b2c0      	uxtb	r0, r0
}
 8000eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Write4Bits((lownib)|mode);
 8000ede:	f7ff bfdd 	b.w	8000e9c <Write4Bits>

08000ee2 <SendCommand>:
  Send(cmd, 0);
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	f7ff bfee 	b.w	8000ec4 <Send>

08000ee8 <HD44780_Clear>:
{
 8000ee8:	b508      	push	{r3, lr}
  SendCommand(LCD_CLEARDISPLAY);
 8000eea:	2001      	movs	r0, #1
 8000eec:	f7ff fff9 	bl	8000ee2 <SendCommand>
}
 8000ef0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  DelayUS(2000);
 8000ef4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ef8:	f7ff bfa2 	b.w	8000e40 <DelayUS>

08000efc <HD44780_Home>:
{
 8000efc:	b508      	push	{r3, lr}
  SendCommand(LCD_RETURNHOME);
 8000efe:	2002      	movs	r0, #2
 8000f00:	f7ff ffef 	bl	8000ee2 <SendCommand>
}
 8000f04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  DelayUS(2000);
 8000f08:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f0c:	f7ff bf98 	b.w	8000e40 <DelayUS>

08000f10 <HD44780_SetCursor>:
{
 8000f10:	b530      	push	{r4, r5, lr}
 8000f12:	460d      	mov	r5, r1
 8000f14:	4604      	mov	r4, r0
 8000f16:	b085      	sub	sp, #20
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000f18:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <HD44780_SetCursor+0x40>)
 8000f1a:	f10d 0e10 	add.w	lr, sp, #16
 8000f1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f20:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000f24:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <HD44780_SetCursor+0x44>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	42ab      	cmp	r3, r5
    row = dpRows-1;
 8000f2a:	bf9c      	itt	ls
 8000f2c:	f103 35ff 	addls.w	r5, r3, #4294967295
 8000f30:	b2ed      	uxtbls	r5, r5
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000f32:	ab04      	add	r3, sp, #16
 8000f34:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8000f38:	f855 0c10 	ldr.w	r0, [r5, #-16]
 8000f3c:	4420      	add	r0, r4
 8000f3e:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8000f42:	b2c0      	uxtb	r0, r0
}
 8000f44:	b005      	add	sp, #20
 8000f46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000f4a:	f7ff bfca 	b.w	8000ee2 <SendCommand>
 8000f4e:	bf00      	nop
 8000f50:	08001438 	.word	0x08001438
 8000f54:	2000003e 	.word	0x2000003e

08000f58 <HD44780_NoDisplay>:
  dpControl &= ~LCD_DISPLAYON;
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <HD44780_NoDisplay+0x14>)
 8000f5a:	7818      	ldrb	r0, [r3, #0]
 8000f5c:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
 8000f60:	7018      	strb	r0, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000f62:	f040 0008 	orr.w	r0, r0, #8
 8000f66:	f7ff bfbc 	b.w	8000ee2 <SendCommand>
 8000f6a:	bf00      	nop
 8000f6c:	2000003f 	.word	0x2000003f

08000f70 <HD44780_Display>:
  dpControl |= LCD_DISPLAYON;
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <HD44780_Display+0x14>)
 8000f72:	7818      	ldrb	r0, [r3, #0]
 8000f74:	f040 0204 	orr.w	r2, r0, #4
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000f78:	f040 000c 	orr.w	r0, r0, #12
  dpControl |= LCD_DISPLAYON;
 8000f7c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000f7e:	f7ff bfb0 	b.w	8000ee2 <SendCommand>
 8000f82:	bf00      	nop
 8000f84:	2000003f 	.word	0x2000003f

08000f88 <HD44780_Cursor>:
  dpControl |= LCD_CURSORON;
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <HD44780_Cursor+0x14>)
 8000f8a:	7818      	ldrb	r0, [r3, #0]
 8000f8c:	f040 0202 	orr.w	r2, r0, #2
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000f90:	f040 000a 	orr.w	r0, r0, #10
  dpControl |= LCD_CURSORON;
 8000f94:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000f96:	f7ff bfa4 	b.w	8000ee2 <SendCommand>
 8000f9a:	bf00      	nop
 8000f9c:	2000003f 	.word	0x2000003f

08000fa0 <HD44780_Blink>:
  dpControl |= LCD_BLINKON;
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <HD44780_Blink+0x14>)
 8000fa2:	7818      	ldrb	r0, [r3, #0]
 8000fa4:	f040 0201 	orr.w	r2, r0, #1
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000fa8:	f040 0009 	orr.w	r0, r0, #9
  dpControl |= LCD_BLINKON;
 8000fac:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000fae:	f7ff bf98 	b.w	8000ee2 <SendCommand>
 8000fb2:	bf00      	nop
 8000fb4:	2000003f 	.word	0x2000003f

08000fb8 <HD44780_CreateSpecialChar>:
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000fb8:	f000 0007 	and.w	r0, r0, #7
 8000fbc:	00c0      	lsls	r0, r0, #3
{
 8000fbe:	b538      	push	{r3, r4, r5, lr}
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000fc0:	f040 0040 	orr.w	r0, r0, #64	; 0x40
{
 8000fc4:	460c      	mov	r4, r1
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000fc6:	f7ff ff8c 	bl	8000ee2 <SendCommand>
 8000fca:	1e65      	subs	r5, r4, #1
 8000fcc:	3407      	adds	r4, #7
  Send(ch, RS);
 8000fce:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	f7ff ff76 	bl	8000ec4 <Send>
  for (int i=0; i<8; i++)
 8000fd8:	42a5      	cmp	r5, r4
 8000fda:	d1f8      	bne.n	8000fce <HD44780_CreateSpecialChar+0x16>
}
 8000fdc:	bd38      	pop	{r3, r4, r5, pc}
	...

08000fe0 <HD44780_Init>:
  dpRows = rows;
 8000fe0:	4b34      	ldr	r3, [pc, #208]	; (80010b4 <HD44780_Init+0xd4>)
{
 8000fe2:	b570      	push	{r4, r5, r6, lr}
  dpRows = rows;
 8000fe4:	7018      	strb	r0, [r3, #0]
  dpBacklight = LCD_BACKLIGHT;
 8000fe6:	2308      	movs	r3, #8
 8000fe8:	4c33      	ldr	r4, [pc, #204]	; (80010b8 <HD44780_Init+0xd8>)
  if (dpRows > 1)
 8000fea:	2801      	cmp	r0, #1
  dpBacklight = LCD_BACKLIGHT;
 8000fec:	7023      	strb	r3, [r4, #0]
    dpFunction |= LCD_5x10DOTS;
 8000fee:	bf98      	it	ls
 8000ff0:	2304      	movls	r3, #4
  DWT->CYCCNT = 0;
 8000ff2:	2600      	movs	r6, #0
 8000ff4:	4d31      	ldr	r5, [pc, #196]	; (80010bc <HD44780_Init+0xdc>)
    dpFunction |= LCD_5x10DOTS;
 8000ff6:	702b      	strb	r3, [r5, #0]
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000ff8:	4b31      	ldr	r3, [pc, #196]	; (80010c0 <HD44780_Init+0xe0>)
 8000ffa:	68da      	ldr	r2, [r3, #12]
 8000ffc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001000:	60da      	str	r2, [r3, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001002:	68da      	ldr	r2, [r3, #12]
 8001004:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001008:	60da      	str	r2, [r3, #12]
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800100a:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <HD44780_Init+0xe4>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	f022 0201 	bic.w	r2, r2, #1
 8001012:	601a      	str	r2, [r3, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	f042 0201 	orr.w	r2, r2, #1
 800101a:	601a      	str	r2, [r3, #0]
  DWT->CYCCNT = 0;
 800101c:	605e      	str	r6, [r3, #4]
  __ASM volatile ("NOP");
 800101e:	bf00      	nop
  __ASM volatile ("NOP");
 8001020:	bf00      	nop
  __ASM volatile ("NOP");
 8001022:	bf00      	nop
  HAL_Delay(50);
 8001024:	2032      	movs	r0, #50	; 0x32
 8001026:	f7ff f8d9 	bl	80001dc <HAL_Delay>
  ExpanderWrite(dpBacklight);
 800102a:	7820      	ldrb	r0, [r4, #0]
 800102c:	f7ff ff20 	bl	8000e70 <ExpanderWrite>
  HAL_Delay(1000);
 8001030:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001034:	f7ff f8d2 	bl	80001dc <HAL_Delay>
  Write4Bits(0x03 << 4);
 8001038:	2030      	movs	r0, #48	; 0x30
 800103a:	f7ff ff2f 	bl	8000e9c <Write4Bits>
  DelayUS(4500);
 800103e:	f241 1094 	movw	r0, #4500	; 0x1194
 8001042:	f7ff fefd 	bl	8000e40 <DelayUS>
  Write4Bits(0x03 << 4);
 8001046:	2030      	movs	r0, #48	; 0x30
 8001048:	f7ff ff28 	bl	8000e9c <Write4Bits>
  DelayUS(4500);
 800104c:	f241 1094 	movw	r0, #4500	; 0x1194
 8001050:	f7ff fef6 	bl	8000e40 <DelayUS>
  Write4Bits(0x03 << 4);
 8001054:	2030      	movs	r0, #48	; 0x30
 8001056:	f7ff ff21 	bl	8000e9c <Write4Bits>
  DelayUS(4500);
 800105a:	f241 1094 	movw	r0, #4500	; 0x1194
 800105e:	f7ff feef 	bl	8000e40 <DelayUS>
  Write4Bits(0x02 << 4);
 8001062:	2020      	movs	r0, #32
 8001064:	f7ff ff1a 	bl	8000e9c <Write4Bits>
  DelayUS(100);
 8001068:	2064      	movs	r0, #100	; 0x64
 800106a:	f7ff fee9 	bl	8000e40 <DelayUS>
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800106e:	7828      	ldrb	r0, [r5, #0]
 8001070:	f040 0020 	orr.w	r0, r0, #32
 8001074:	f7ff ff35 	bl	8000ee2 <SendCommand>
  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001078:	2204      	movs	r2, #4
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <HD44780_Init+0xe8>)
 800107c:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800107e:	f7ff ff77 	bl	8000f70 <HD44780_Display>
  HD44780_Clear();
 8001082:	f7ff ff31 	bl	8000ee8 <HD44780_Clear>
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001086:	2202      	movs	r2, #2
 8001088:	4b10      	ldr	r3, [pc, #64]	; (80010cc <HD44780_Init+0xec>)
  SendCommand(LCD_ENTRYMODESET | dpMode);
 800108a:	2006      	movs	r0, #6
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800108c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 800108e:	f7ff ff28 	bl	8000ee2 <SendCommand>
  DelayUS(4500);
 8001092:	f241 1094 	movw	r0, #4500	; 0x1194
 8001096:	f7ff fed3 	bl	8000e40 <DelayUS>
  HD44780_CreateSpecialChar(0, special1);
 800109a:	4630      	mov	r0, r6
 800109c:	490c      	ldr	r1, [pc, #48]	; (80010d0 <HD44780_Init+0xf0>)
 800109e:	f7ff ff8b 	bl	8000fb8 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80010a2:	490c      	ldr	r1, [pc, #48]	; (80010d4 <HD44780_Init+0xf4>)
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <HD44780_CreateSpecialChar>
}
 80010aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HD44780_Home();
 80010ae:	f7ff bf25 	b.w	8000efc <HD44780_Home>
 80010b2:	bf00      	nop
 80010b4:	2000003e 	.word	0x2000003e
 80010b8:	20000040 	.word	0x20000040
 80010bc:	2000003c 	.word	0x2000003c
 80010c0:	e000edf0 	.word	0xe000edf0
 80010c4:	e0001000 	.word	0xe0001000
 80010c8:	2000003f 	.word	0x2000003f
 80010cc:	2000003d 	.word	0x2000003d
 80010d0:	20000008 	.word	0x20000008
 80010d4:	20000010 	.word	0x20000010

080010d8 <HD44780_PrintSpecialChar>:
  Send(ch, RS);
 80010d8:	2101      	movs	r1, #1
 80010da:	f7ff bef3 	b.w	8000ec4 <Send>

080010de <HD44780_PrintStr>:
{
 80010de:	b510      	push	{r4, lr}
 80010e0:	1e44      	subs	r4, r0, #1
  while(*c) SendChar(*c++);
 80010e2:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80010e6:	b900      	cbnz	r0, 80010ea <HD44780_PrintStr+0xc>
}
 80010e8:	bd10      	pop	{r4, pc}
  Send(ch, RS);
 80010ea:	2101      	movs	r1, #1
 80010ec:	f7ff feea 	bl	8000ec4 <Send>
 80010f0:	e7f7      	b.n	80010e2 <HD44780_PrintStr+0x4>

080010f2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f2:	b510      	push	{r4, lr}
 80010f4:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f6:	2228      	movs	r2, #40	; 0x28
 80010f8:	2100      	movs	r1, #0
 80010fa:	a806      	add	r0, sp, #24
 80010fc:	f000 f980 	bl	8001400 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	2100      	movs	r1, #0
 8001102:	2214      	movs	r2, #20
 8001104:	a801      	add	r0, sp, #4
 8001106:	f000 f97b 	bl	8001400 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800110a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800110e:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001110:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001112:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001114:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001116:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800111c:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800111e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001120:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001122:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001124:	f7ff fc04 	bl	8000930 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001128:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800112a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001130:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001132:	4621      	mov	r1, r4
 8001134:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001136:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001138:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800113a:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113c:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800113e:	f7ff fdd1 	bl	8000ce4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001142:	b010      	add	sp, #64	; 0x40
 8001144:	bd10      	pop	{r4, pc}
	...

08001148 <main>:
{
 8001148:	b500      	push	{lr}
 800114a:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 800114c:	f7ff f822 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8001150:	f7ff ffcf 	bl	80010f2 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	2210      	movs	r2, #16
 8001156:	2100      	movs	r1, #0
 8001158:	eb0d 0002 	add.w	r0, sp, r2
 800115c:	f000 f950 	bl	8001400 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001160:	4b34      	ldr	r3, [pc, #208]	; (8001234 <main+0xec>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001162:	2120      	movs	r1, #32
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001164:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001166:	4834      	ldr	r0, [pc, #208]	; (8001238 <main+0xf0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001168:	f042 0220 	orr.w	r2, r2, #32
 800116c:	619a      	str	r2, [r3, #24]
 800116e:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001172:	f002 0220 	and.w	r2, r2, #32
 8001176:	9201      	str	r2, [sp, #4]
 8001178:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	f042 0204 	orr.w	r2, r2, #4
 8001182:	619a      	str	r2, [r3, #24]
 8001184:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2602      	movs	r6, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001188:	f002 0204 	and.w	r2, r2, #4
 800118c:	9202      	str	r2, [sp, #8]
 800118e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001190:	699a      	ldr	r2, [r3, #24]
 8001192:	f042 0208 	orr.w	r2, r2, #8
 8001196:	619a      	str	r2, [r3, #24]
 8001198:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119c:	f003 0308 	and.w	r3, r3, #8
 80011a0:	9303      	str	r3, [sp, #12]
 80011a2:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011a4:	f7ff f96a 	bl	800047c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LD2_Pin;
 80011a8:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011aa:	a904      	add	r1, sp, #16
 80011ac:	4822      	ldr	r0, [pc, #136]	; (8001238 <main+0xf0>)
  GPIO_InitStruct.Pin = LD2_Pin;
 80011ae:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b2:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011b6:	f7ff f87f 	bl	80002b8 <HAL_GPIO_Init>
  hi2c1.Init.ClockSpeed = 100000;
 80011ba:	4a20      	ldr	r2, [pc, #128]	; (800123c <main+0xf4>)
  hi2c1.Instance = I2C1;
 80011bc:	4820      	ldr	r0, [pc, #128]	; (8001240 <main+0xf8>)
  hi2c1.Init.ClockSpeed = 100000;
 80011be:	4b21      	ldr	r3, [pc, #132]	; (8001244 <main+0xfc>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011c0:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 80011c2:	e880 000c 	stmia.w	r0, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 80011ca:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011cc:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ce:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011d0:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d2:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011d4:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011d6:	f7ff fa39 	bl	800064c <HAL_I2C_Init>
  HD44780_Init(2);
 80011da:	4630      	mov	r0, r6
 80011dc:	f7ff ff00 	bl	8000fe0 <HD44780_Init>
  HD44780_Clear();
 80011e0:	f7ff fe82 	bl	8000ee8 <HD44780_Clear>
  HD44780_NoDisplay();
 80011e4:	f7ff feb8 	bl	8000f58 <HD44780_NoDisplay>
  HD44780_Cursor();
 80011e8:	f7ff fece 	bl	8000f88 <HD44780_Cursor>
  HD44780_SetCursor(0,0);
 80011ec:	4621      	mov	r1, r4
 80011ee:	4620      	mov	r0, r4
 80011f0:	f7ff fe8e 	bl	8000f10 <HD44780_SetCursor>
  HD44780_PrintStr("Hello STM32Study");
 80011f4:	4814      	ldr	r0, [pc, #80]	; (8001248 <main+0x100>)
 80011f6:	f7ff ff72 	bl	80010de <HD44780_PrintStr>
  HD44780_PrintSpecialChar(0);
 80011fa:	4620      	mov	r0, r4
 80011fc:	f7ff ff6c 	bl	80010d8 <HD44780_PrintSpecialChar>
  HD44780_Display();
 8001200:	f7ff feb6 	bl	8000f70 <HD44780_Display>
	HD44780_SetCursor(0, 1);
 8001204:	4629      	mov	r1, r5
 8001206:	4620      	mov	r0, r4
 8001208:	f7ff fe82 	bl	8000f10 <HD44780_SetCursor>
	HD44780_PrintStr("Step by step!");
 800120c:	480f      	ldr	r0, [pc, #60]	; (800124c <main+0x104>)
 800120e:	f7ff ff66 	bl	80010de <HD44780_PrintStr>
	HD44780_PrintSpecialChar(1);
 8001212:	4628      	mov	r0, r5
 8001214:	f7ff ff60 	bl	80010d8 <HD44780_PrintSpecialChar>
	HD44780_Blink();
 8001218:	f7ff fec2 	bl	8000fa0 <HD44780_Blink>
  	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800121c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001220:	f504 3484 	add.w	r4, r4, #67584	; 0x10800
 8001224:	4620      	mov	r0, r4
 8001226:	2120      	movs	r1, #32
 8001228:	f7ff f92d 	bl	8000486 <HAL_GPIO_TogglePin>
  	HAL_Delay(50);
 800122c:	2032      	movs	r0, #50	; 0x32
 800122e:	f7fe ffd5 	bl	80001dc <HAL_Delay>
 8001232:	e7f7      	b.n	8001224 <main+0xdc>
 8001234:	40021000 	.word	0x40021000
 8001238:	40010800 	.word	0x40010800
 800123c:	40005400 	.word	0x40005400
 8001240:	20000044 	.word	0x20000044
 8001244:	000186a0 	.word	0x000186a0
 8001248:	08001448 	.word	0x08001448
 800124c:	08001459 	.word	0x08001459

08001250 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001250:	4b0e      	ldr	r3, [pc, #56]	; (800128c <HAL_MspInit+0x3c>)
{
 8001252:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001254:	699a      	ldr	r2, [r3, #24]
 8001256:	f042 0201 	orr.w	r2, r2, #1
 800125a:	619a      	str	r2, [r3, #24]
 800125c:	699a      	ldr	r2, [r3, #24]
 800125e:	f002 0201 	and.w	r2, r2, #1
 8001262:	9200      	str	r2, [sp, #0]
 8001264:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001266:	69da      	ldr	r2, [r3, #28]
 8001268:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800126c:	61da      	str	r2, [r3, #28]
 800126e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001270:	4a07      	ldr	r2, [pc, #28]	; (8001290 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800127a:	6853      	ldr	r3, [r2, #4]
 800127c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001280:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001284:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001286:	b002      	add	sp, #8
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40021000 	.word	0x40021000
 8001290:	40010000 	.word	0x40010000

08001294 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001294:	b510      	push	{r4, lr}
 8001296:	4604      	mov	r4, r0
 8001298:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129a:	2210      	movs	r2, #16
 800129c:	2100      	movs	r1, #0
 800129e:	a802      	add	r0, sp, #8
 80012a0:	f000 f8ae 	bl	8001400 <memset>
  if(hi2c->Instance==I2C1)
 80012a4:	6822      	ldr	r2, [r4, #0]
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <HAL_I2C_MspInit+0x68>)
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d124      	bne.n	80012f6 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ac:	4c14      	ldr	r4, [pc, #80]	; (8001300 <HAL_I2C_MspInit+0x6c>)
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ae:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b0:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b2:	4814      	ldr	r0, [pc, #80]	; (8001304 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b4:	f043 0308 	orr.w	r3, r3, #8
 80012b8:	61a3      	str	r3, [r4, #24]
 80012ba:	69a3      	ldr	r3, [r4, #24]
 80012bc:	f003 0308 	and.w	r3, r3, #8
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012c8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ca:	2312      	movs	r3, #18
 80012cc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ce:	2303      	movs	r3, #3
 80012d0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d2:	f7fe fff1 	bl	80002b8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80012d6:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <HAL_I2C_MspInit+0x74>)
 80012d8:	6853      	ldr	r3, [r2, #4]
 80012da:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80012de:	f043 0302 	orr.w	r3, r3, #2
 80012e2:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012e4:	69e3      	ldr	r3, [r4, #28]
 80012e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012ea:	61e3      	str	r3, [r4, #28]
 80012ec:	69e3      	ldr	r3, [r4, #28]
 80012ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012f6:	b006      	add	sp, #24
 80012f8:	bd10      	pop	{r4, pc}
 80012fa:	bf00      	nop
 80012fc:	40005400 	.word	0x40005400
 8001300:	40021000 	.word	0x40021000
 8001304:	40010c00 	.word	0x40010c00
 8001308:	40010000 	.word	0x40010000

0800130c <NMI_Handler>:
 800130c:	4770      	bx	lr

0800130e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130e:	e7fe      	b.n	800130e <HardFault_Handler>

08001310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001310:	e7fe      	b.n	8001310 <MemManage_Handler>

08001312 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001312:	e7fe      	b.n	8001312 <BusFault_Handler>

08001314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001314:	e7fe      	b.n	8001314 <UsageFault_Handler>

08001316 <SVC_Handler>:
 8001316:	4770      	bx	lr

08001318 <DebugMon_Handler>:
 8001318:	4770      	bx	lr

0800131a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131a:	4770      	bx	lr

0800131c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800131c:	f7fe bf4c 	b.w	80001b8 <HAL_IncTick>

08001320 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <SystemInit+0x40>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	f042 0201 	orr.w	r2, r2, #1
 8001328:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800132a:	6859      	ldr	r1, [r3, #4]
 800132c:	4a0d      	ldr	r2, [pc, #52]	; (8001364 <SystemInit+0x44>)
 800132e:	400a      	ands	r2, r1
 8001330:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001338:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800133c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001344:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800134c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800134e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001352:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001354:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <SystemInit+0x48>)
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40021000 	.word	0x40021000
 8001364:	f8ff0000 	.word	0xf8ff0000
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800136c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800136e:	e003      	b.n	8001378 <LoopCopyDataInit>

08001370 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001370:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001372:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001374:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001376:	3104      	adds	r1, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001378:	480a      	ldr	r0, [pc, #40]	; (80013a4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800137c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800137e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001380:	d3f6      	bcc.n	8001370 <CopyDataInit>
  ldr r2, =_sbss
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001384:	e002      	b.n	800138c <LoopFillZerobss>

08001386 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001388:	f842 3b04 	str.w	r3, [r2], #4

0800138c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800138e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001390:	d3f9      	bcc.n	8001386 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001392:	f7ff ffc5 	bl	8001320 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001396:	f000 f80f 	bl	80013b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800139a:	f7ff fed5 	bl	8001148 <main>
  bx lr
 800139e:	4770      	bx	lr
  ldr r3, =_sidata
 80013a0:	08001488 	.word	0x08001488
  ldr r0, =_sdata
 80013a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80013a8:	2000001c 	.word	0x2000001c
  ldr r2, =_sbss
 80013ac:	2000001c 	.word	0x2000001c
  ldr r3, = _ebss
 80013b0:	20000098 	.word	0x20000098

080013b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013b4:	e7fe      	b.n	80013b4 <ADC1_2_IRQHandler>
	...

080013b8 <__libc_init_array>:
 80013b8:	b570      	push	{r4, r5, r6, lr}
 80013ba:	2500      	movs	r5, #0
 80013bc:	4e0c      	ldr	r6, [pc, #48]	; (80013f0 <__libc_init_array+0x38>)
 80013be:	4c0d      	ldr	r4, [pc, #52]	; (80013f4 <__libc_init_array+0x3c>)
 80013c0:	1ba4      	subs	r4, r4, r6
 80013c2:	10a4      	asrs	r4, r4, #2
 80013c4:	42a5      	cmp	r5, r4
 80013c6:	d109      	bne.n	80013dc <__libc_init_array+0x24>
 80013c8:	f000 f822 	bl	8001410 <_init>
 80013cc:	2500      	movs	r5, #0
 80013ce:	4e0a      	ldr	r6, [pc, #40]	; (80013f8 <__libc_init_array+0x40>)
 80013d0:	4c0a      	ldr	r4, [pc, #40]	; (80013fc <__libc_init_array+0x44>)
 80013d2:	1ba4      	subs	r4, r4, r6
 80013d4:	10a4      	asrs	r4, r4, #2
 80013d6:	42a5      	cmp	r5, r4
 80013d8:	d105      	bne.n	80013e6 <__libc_init_array+0x2e>
 80013da:	bd70      	pop	{r4, r5, r6, pc}
 80013dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013e0:	4798      	blx	r3
 80013e2:	3501      	adds	r5, #1
 80013e4:	e7ee      	b.n	80013c4 <__libc_init_array+0xc>
 80013e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013ea:	4798      	blx	r3
 80013ec:	3501      	adds	r5, #1
 80013ee:	e7f2      	b.n	80013d6 <__libc_init_array+0x1e>
 80013f0:	08001480 	.word	0x08001480
 80013f4:	08001480 	.word	0x08001480
 80013f8:	08001480 	.word	0x08001480
 80013fc:	08001484 	.word	0x08001484

08001400 <memset>:
 8001400:	4603      	mov	r3, r0
 8001402:	4402      	add	r2, r0
 8001404:	4293      	cmp	r3, r2
 8001406:	d100      	bne.n	800140a <memset+0xa>
 8001408:	4770      	bx	lr
 800140a:	f803 1b01 	strb.w	r1, [r3], #1
 800140e:	e7f9      	b.n	8001404 <memset+0x4>

08001410 <_init>:
 8001410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001412:	bf00      	nop
 8001414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001416:	bc08      	pop	{r3}
 8001418:	469e      	mov	lr, r3
 800141a:	4770      	bx	lr

0800141c <_fini>:
 800141c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800141e:	bf00      	nop
 8001420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001422:	bc08      	pop	{r3}
 8001424:	469e      	mov	lr, r3
 8001426:	4770      	bx	lr
