
FreeRTOS_Example1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026fc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080028ac  080028ac  000128ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800292c  0800292c  0001292c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002934  08002934  00012934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002938  08002938  00012938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  0800293c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00004040  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000404c  2000404c  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_line   00006c9c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   00013bae  00000000  00000000  00026cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002836  00000000  00000000  0003a886  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f60  00000000  00000000  0003d0c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f60  00000000  00000000  0003e020  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005655  00000000  00000000  0003ef80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000445d5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000028e0  00000000  00000000  00044654  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00009d0b  00000000  00000000  00046f34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002894 	.word	0x08002894

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	08002894 	.word	0x08002894

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b97a 	b.w	80004fc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	468c      	mov	ip, r1
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	9e08      	ldr	r6, [sp, #32]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d151      	bne.n	80002d4 <__udivmoddi4+0xb4>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d96d      	bls.n	8000312 <__udivmoddi4+0xf2>
 8000236:	fab2 fe82 	clz	lr, r2
 800023a:	f1be 0f00 	cmp.w	lr, #0
 800023e:	d00b      	beq.n	8000258 <__udivmoddi4+0x38>
 8000240:	f1ce 0c20 	rsb	ip, lr, #32
 8000244:	fa01 f50e 	lsl.w	r5, r1, lr
 8000248:	fa20 fc0c 	lsr.w	ip, r0, ip
 800024c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000250:	ea4c 0c05 	orr.w	ip, ip, r5
 8000254:	fa00 f40e 	lsl.w	r4, r0, lr
 8000258:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800025c:	0c25      	lsrs	r5, r4, #16
 800025e:	fbbc f8fa 	udiv	r8, ip, sl
 8000262:	fa1f f987 	uxth.w	r9, r7
 8000266:	fb0a cc18 	mls	ip, sl, r8, ip
 800026a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026e:	fb08 f309 	mul.w	r3, r8, r9
 8000272:	42ab      	cmp	r3, r5
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x6c>
 8000276:	19ed      	adds	r5, r5, r7
 8000278:	f108 32ff 	add.w	r2, r8, #4294967295
 800027c:	f080 8123 	bcs.w	80004c6 <__udivmoddi4+0x2a6>
 8000280:	42ab      	cmp	r3, r5
 8000282:	f240 8120 	bls.w	80004c6 <__udivmoddi4+0x2a6>
 8000286:	f1a8 0802 	sub.w	r8, r8, #2
 800028a:	443d      	add	r5, r7
 800028c:	1aed      	subs	r5, r5, r3
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb5 f0fa 	udiv	r0, r5, sl
 8000294:	fb0a 5510 	mls	r5, sl, r0, r5
 8000298:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800029c:	fb00 f909 	mul.w	r9, r0, r9
 80002a0:	45a1      	cmp	r9, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x98>
 80002a4:	19e4      	adds	r4, r4, r7
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 810a 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80002ae:	45a1      	cmp	r9, r4
 80002b0:	f240 8107 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	eba4 0409 	sub.w	r4, r4, r9
 80002bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002c0:	2100      	movs	r1, #0
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d061      	beq.n	800038a <__udivmoddi4+0x16a>
 80002c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ca:	2300      	movs	r3, #0
 80002cc:	6034      	str	r4, [r6, #0]
 80002ce:	6073      	str	r3, [r6, #4]
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xc8>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d054      	beq.n	8000386 <__udivmoddi4+0x166>
 80002dc:	2100      	movs	r1, #0
 80002de:	e886 0021 	stmia.w	r6, {r0, r5}
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	f040 808e 	bne.w	800040e <__udivmoddi4+0x1ee>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xdc>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2d0>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	46ac      	mov	ip, r5
 8000306:	2e00      	cmp	r6, #0
 8000308:	d03f      	beq.n	800038a <__udivmoddi4+0x16a>
 800030a:	e886 1010 	stmia.w	r6, {r4, ip}
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	b912      	cbnz	r2, 800031a <__udivmoddi4+0xfa>
 8000314:	2701      	movs	r7, #1
 8000316:	fbb7 f7f2 	udiv	r7, r7, r2
 800031a:	fab7 fe87 	clz	lr, r7
 800031e:	f1be 0f00 	cmp.w	lr, #0
 8000322:	d134      	bne.n	800038e <__udivmoddi4+0x16e>
 8000324:	1beb      	subs	r3, r5, r7
 8000326:	0c3a      	lsrs	r2, r7, #16
 8000328:	fa1f fc87 	uxth.w	ip, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000332:	0c25      	lsrs	r5, r4, #16
 8000334:	fb02 3318 	mls	r3, r2, r8, r3
 8000338:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800033c:	fb0c f308 	mul.w	r3, ip, r8
 8000340:	42ab      	cmp	r3, r5
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x134>
 8000344:	19ed      	adds	r5, r5, r7
 8000346:	f108 30ff 	add.w	r0, r8, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x132>
 800034c:	42ab      	cmp	r3, r5
 800034e:	f200 80d1 	bhi.w	80004f4 <__udivmoddi4+0x2d4>
 8000352:	4680      	mov	r8, r0
 8000354:	1aed      	subs	r5, r5, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb5 f0f2 	udiv	r0, r5, r2
 800035c:	fb02 5510 	mls	r5, r2, r0, r5
 8000360:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000364:	fb0c fc00 	mul.w	ip, ip, r0
 8000368:	45a4      	cmp	ip, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x15c>
 800036c:	19e4      	adds	r4, r4, r7
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x15a>
 8000374:	45a4      	cmp	ip, r4
 8000376:	f200 80b8 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 040c 	sub.w	r4, r4, ip
 8000380:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000384:	e79d      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000386:	4631      	mov	r1, r6
 8000388:	4630      	mov	r0, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	f1ce 0420 	rsb	r4, lr, #32
 8000392:	fa05 f30e 	lsl.w	r3, r5, lr
 8000396:	fa07 f70e 	lsl.w	r7, r7, lr
 800039a:	fa20 f804 	lsr.w	r8, r0, r4
 800039e:	0c3a      	lsrs	r2, r7, #16
 80003a0:	fa25 f404 	lsr.w	r4, r5, r4
 80003a4:	ea48 0803 	orr.w	r8, r8, r3
 80003a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003b0:	fb02 4411 	mls	r4, r2, r1, r4
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003bc:	fb01 f30c 	mul.w	r3, r1, ip
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x1bc>
 80003c8:	19ed      	adds	r5, r5, r7
 80003ca:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ce:	f080 808a 	bcs.w	80004e6 <__udivmoddi4+0x2c6>
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	f240 8087 	bls.w	80004e6 <__udivmoddi4+0x2c6>
 80003d8:	3902      	subs	r1, #2
 80003da:	443d      	add	r5, r7
 80003dc:	1aeb      	subs	r3, r5, r3
 80003de:	fa1f f588 	uxth.w	r5, r8
 80003e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ee:	fb00 f30c 	mul.w	r3, r0, ip
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1e6>
 80003f6:	19ed      	adds	r5, r5, r7
 80003f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fc:	d26f      	bcs.n	80004de <__udivmoddi4+0x2be>
 80003fe:	42ab      	cmp	r3, r5
 8000400:	d96d      	bls.n	80004de <__udivmoddi4+0x2be>
 8000402:	3802      	subs	r0, #2
 8000404:	443d      	add	r5, r7
 8000406:	1aeb      	subs	r3, r5, r3
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	e78f      	b.n	800032e <__udivmoddi4+0x10e>
 800040e:	f1c1 0720 	rsb	r7, r1, #32
 8000412:	fa22 f807 	lsr.w	r8, r2, r7
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 f401 	lsl.w	r4, r5, r1
 800041c:	ea48 0303 	orr.w	r3, r8, r3
 8000420:	fa20 fe07 	lsr.w	lr, r0, r7
 8000424:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000428:	40fd      	lsrs	r5, r7
 800042a:	ea4e 0e04 	orr.w	lr, lr, r4
 800042e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000432:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000436:	fb0c 5519 	mls	r5, ip, r9, r5
 800043a:	fa1f f883 	uxth.w	r8, r3
 800043e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000442:	fb09 f408 	mul.w	r4, r9, r8
 8000446:	42ac      	cmp	r4, r5
 8000448:	fa02 f201 	lsl.w	r2, r2, r1
 800044c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x244>
 8000452:	18ed      	adds	r5, r5, r3
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295
 8000458:	d243      	bcs.n	80004e2 <__udivmoddi4+0x2c2>
 800045a:	42ac      	cmp	r4, r5
 800045c:	d941      	bls.n	80004e2 <__udivmoddi4+0x2c2>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	441d      	add	r5, r3
 8000464:	1b2d      	subs	r5, r5, r4
 8000466:	fa1f fe8e 	uxth.w	lr, lr
 800046a:	fbb5 f0fc 	udiv	r0, r5, ip
 800046e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000472:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45a0      	cmp	r8, r4
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x26e>
 800047e:	18e4      	adds	r4, r4, r3
 8000480:	f100 35ff 	add.w	r5, r0, #4294967295
 8000484:	d229      	bcs.n	80004da <__udivmoddi4+0x2ba>
 8000486:	45a0      	cmp	r8, r4
 8000488:	d927      	bls.n	80004da <__udivmoddi4+0x2ba>
 800048a:	3802      	subs	r0, #2
 800048c:	441c      	add	r4, r3
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba4 0408 	sub.w	r4, r4, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454c      	cmp	r4, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	464d      	mov	r5, r9
 80004a0:	d315      	bcc.n	80004ce <__udivmoddi4+0x2ae>
 80004a2:	d012      	beq.n	80004ca <__udivmoddi4+0x2aa>
 80004a4:	b156      	cbz	r6, 80004bc <__udivmoddi4+0x29c>
 80004a6:	ebba 030e 	subs.w	r3, sl, lr
 80004aa:	eb64 0405 	sbc.w	r4, r4, r5
 80004ae:	fa04 f707 	lsl.w	r7, r4, r7
 80004b2:	40cb      	lsrs	r3, r1
 80004b4:	431f      	orrs	r7, r3
 80004b6:	40cc      	lsrs	r4, r1
 80004b8:	6037      	str	r7, [r6, #0]
 80004ba:	6074      	str	r4, [r6, #4]
 80004bc:	2100      	movs	r1, #0
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	4618      	mov	r0, r3
 80004c4:	e6f8      	b.n	80002b8 <__udivmoddi4+0x98>
 80004c6:	4690      	mov	r8, r2
 80004c8:	e6e0      	b.n	800028c <__udivmoddi4+0x6c>
 80004ca:	45c2      	cmp	sl, r8
 80004cc:	d2ea      	bcs.n	80004a4 <__udivmoddi4+0x284>
 80004ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d2:	eb69 0503 	sbc.w	r5, r9, r3
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7e4      	b.n	80004a4 <__udivmoddi4+0x284>
 80004da:	4628      	mov	r0, r5
 80004dc:	e7d7      	b.n	800048e <__udivmoddi4+0x26e>
 80004de:	4640      	mov	r0, r8
 80004e0:	e791      	b.n	8000406 <__udivmoddi4+0x1e6>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e7be      	b.n	8000464 <__udivmoddi4+0x244>
 80004e6:	4601      	mov	r1, r0
 80004e8:	e778      	b.n	80003dc <__udivmoddi4+0x1bc>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	e745      	b.n	800037c <__udivmoddi4+0x15c>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xe6>
 80004f4:	f1a8 0802 	sub.w	r8, r8, #2
 80004f8:	443d      	add	r5, r7
 80004fa:	e72b      	b.n	8000354 <__udivmoddi4+0x134>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000538 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000504:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000506:	e003      	b.n	8000510 <LoopCopyDataInit>

08000508 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000508:	4b0c      	ldr	r3, [pc, #48]	; (800053c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800050a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800050c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800050e:	3104      	adds	r1, #4

08000510 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000510:	480b      	ldr	r0, [pc, #44]	; (8000540 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000514:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000516:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000518:	d3f6      	bcc.n	8000508 <CopyDataInit>
  ldr  r2, =_sbss
 800051a:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800051c:	e002      	b.n	8000524 <LoopFillZerobss>

0800051e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800051e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000520:	f842 3b04 	str.w	r3, [r2], #4

08000524 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000524:	4b09      	ldr	r3, [pc, #36]	; (800054c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000526:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000528:	d3f9      	bcc.n	800051e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800052a:	f000 f9f5 	bl	8000918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800052e:	f002 f985 	bl	800283c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000532:	f000 f901 	bl	8000738 <main>
  bx  lr    
 8000536:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000538:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800053c:	0800293c 	.word	0x0800293c
  ldr  r0, =_sdata
 8000540:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000544:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000548:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800054c:	2000404c 	.word	0x2000404c

08000550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000550:	e7fe      	b.n	8000550 <ADC_IRQHandler>
	...

08000554 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <vApplicationGetIdleTaskMemory+0x10>)
 8000556:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000558:	4b03      	ldr	r3, [pc, #12]	; (8000568 <vApplicationGetIdleTaskMemory+0x14>)
 800055a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800055c:	2380      	movs	r3, #128	; 0x80
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000228 	.word	0x20000228
 8000568:	20000028 	.word	0x20000028

0800056c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000570:	2400      	movs	r4, #0
 8000572:	9405      	str	r4, [sp, #20]
 8000574:	9406      	str	r4, [sp, #24]
 8000576:	9407      	str	r4, [sp, #28]
 8000578:	9408      	str	r4, [sp, #32]
 800057a:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800057c:	9401      	str	r4, [sp, #4]
 800057e:	4b1e      	ldr	r3, [pc, #120]	; (80005f8 <MX_GPIO_Init+0x8c>)
 8000580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000582:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000586:	631a      	str	r2, [r3, #48]	; 0x30
 8000588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800058a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000592:	9402      	str	r4, [sp, #8]
 8000594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000596:	f042 0201 	orr.w	r2, r2, #1
 800059a:	631a      	str	r2, [r3, #48]	; 0x30
 800059c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800059e:	f002 0201 	and.w	r2, r2, #1
 80005a2:	9202      	str	r2, [sp, #8]
 80005a4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005a6:	9403      	str	r4, [sp, #12]
 80005a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80005ae:	631a      	str	r2, [r3, #48]	; 0x30
 80005b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005b2:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80005b6:	9203      	str	r2, [sp, #12]
 80005b8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ba:	9404      	str	r4, [sp, #16]
 80005bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005be:	f042 0202 	orr.w	r2, r2, #2
 80005c2:	631a      	str	r2, [r3, #48]	; 0x30
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0302 	and.w	r3, r3, #2
 80005ca:	9304      	str	r3, [sp, #16]
 80005cc:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80005ce:	4d0b      	ldr	r5, [pc, #44]	; (80005fc <MX_GPIO_Init+0x90>)
 80005d0:	4622      	mov	r2, r4
 80005d2:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80005d6:	4628      	mov	r0, r5
 80005d8:	f000 fb34 	bl	8000c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 80005dc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80005e0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e2:	2301      	movs	r3, #1
 80005e4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80005ea:	a905      	add	r1, sp, #20
 80005ec:	4628      	mov	r0, r5
 80005ee:	f000 fa37 	bl	8000a60 <HAL_GPIO_Init>

}
 80005f2:	b00b      	add	sp, #44	; 0x2c
 80005f4:	bd30      	pop	{r4, r5, pc}
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40021800 	.word	0x40021800

08000600 <MX_USART1_UART_Init>:
{
 8000600:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000602:	4808      	ldr	r0, [pc, #32]	; (8000624 <MX_USART1_UART_Init+0x24>)
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_USART1_UART_Init+0x28>)
 8000606:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000608:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800060c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800060e:	2300      	movs	r3, #0
 8000610:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000612:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000614:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000616:	220c      	movs	r2, #12
 8000618:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800061c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800061e:	f001 f971 	bl	8001904 <HAL_UART_Init>
 8000622:	bd08      	pop	{r3, pc}
 8000624:	20003fc8 	.word	0x20003fc8
 8000628:	40011000 	.word	0x40011000

0800062c <vTask1>:

/* USER CODE BEGIN 4 */
void vTask1(void *pvParameters)
{
 800062c:	b500      	push	{lr}
 800062e:	b083      	sub	sp, #12
 8000630:	e006      	b.n	8000640 <vTask1+0x14>

    for(;;){
        HAL_UART_Transmit(&huart1, (uint8_t *)"Task 1 is running\r\n", strlen("Task 1 is running\r\n"), 0xFFFFFFFF);
        HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);

        for(ul = 0; ul < mainDELAY_LOOP_COUNT; ul++);
 8000632:	9b01      	ldr	r3, [sp, #4]
 8000634:	3301      	adds	r3, #1
 8000636:	9301      	str	r3, [sp, #4]
 8000638:	9b01      	ldr	r3, [sp, #4]
 800063a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800063e:	d3f8      	bcc.n	8000632 <vTask1+0x6>
        HAL_UART_Transmit(&huart1, (uint8_t *)"Task 1 is running\r\n", strlen("Task 1 is running\r\n"), 0xFFFFFFFF);
 8000640:	f04f 33ff 	mov.w	r3, #4294967295
 8000644:	2213      	movs	r2, #19
 8000646:	4906      	ldr	r1, [pc, #24]	; (8000660 <vTask1+0x34>)
 8000648:	4806      	ldr	r0, [pc, #24]	; (8000664 <vTask1+0x38>)
 800064a:	f001 f98a 	bl	8001962 <HAL_UART_Transmit>
        HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800064e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <vTask1+0x3c>)
 8000654:	f000 fafc 	bl	8000c50 <HAL_GPIO_TogglePin>
        for(ul = 0; ul < mainDELAY_LOOP_COUNT; ul++);
 8000658:	2300      	movs	r3, #0
 800065a:	9301      	str	r3, [sp, #4]
 800065c:	e7ec      	b.n	8000638 <vTask1+0xc>
 800065e:	bf00      	nop
 8000660:	080028e4 	.word	0x080028e4
 8000664:	20003fc8 	.word	0x20003fc8
 8000668:	40021800 	.word	0x40021800

0800066c <vTask2>:
    }
}

void vTask2(void *pvParameters)
{
 800066c:	b500      	push	{lr}
 800066e:	b083      	sub	sp, #12
 8000670:	e006      	b.n	8000680 <vTask2+0x14>

    for(;;){
        HAL_UART_Transmit(&huart1, (uint8_t *)"Task 2 is running\r\n", strlen("Task 2 is running\r\n"), 0xFFFFFFFF);
        HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);

        for(ul = 0; ul < mainDELAY_LOOP_COUNT; ul++);
 8000672:	9b01      	ldr	r3, [sp, #4]
 8000674:	3301      	adds	r3, #1
 8000676:	9301      	str	r3, [sp, #4]
 8000678:	9b01      	ldr	r3, [sp, #4]
 800067a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800067e:	d3f8      	bcc.n	8000672 <vTask2+0x6>
        HAL_UART_Transmit(&huart1, (uint8_t *)"Task 2 is running\r\n", strlen("Task 2 is running\r\n"), 0xFFFFFFFF);
 8000680:	f04f 33ff 	mov.w	r3, #4294967295
 8000684:	2213      	movs	r2, #19
 8000686:	4906      	ldr	r1, [pc, #24]	; (80006a0 <vTask2+0x34>)
 8000688:	4806      	ldr	r0, [pc, #24]	; (80006a4 <vTask2+0x38>)
 800068a:	f001 f96a 	bl	8001962 <HAL_UART_Transmit>
        HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 800068e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <vTask2+0x3c>)
 8000694:	f000 fadc 	bl	8000c50 <HAL_GPIO_TogglePin>
        for(ul = 0; ul < mainDELAY_LOOP_COUNT; ul++);
 8000698:	2300      	movs	r3, #0
 800069a:	9301      	str	r3, [sp, #4]
 800069c:	e7ec      	b.n	8000678 <vTask2+0xc>
 800069e:	bf00      	nop
 80006a0:	080028f8 	.word	0x080028f8
 80006a4:	20003fc8 	.word	0x20003fc8
 80006a8:	40021800 	.word	0x40021800

080006ac <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006ac:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006ae:	2001      	movs	r0, #1
 80006b0:	f001 fa08 	bl	8001ac4 <osDelay>
 80006b4:	e7fb      	b.n	80006ae <StartDefaultTask+0x2>
	...

080006b8 <SystemClock_Config>:
{
 80006b8:	b510      	push	{r4, lr}
 80006ba:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006bc:	2230      	movs	r2, #48	; 0x30
 80006be:	2100      	movs	r1, #0
 80006c0:	a808      	add	r0, sp, #32
 80006c2:	f002 f8df 	bl	8002884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c6:	2400      	movs	r4, #0
 80006c8:	9403      	str	r4, [sp, #12]
 80006ca:	9404      	str	r4, [sp, #16]
 80006cc:	9405      	str	r4, [sp, #20]
 80006ce:	9406      	str	r4, [sp, #24]
 80006d0:	9407      	str	r4, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	9401      	str	r4, [sp, #4]
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <SystemClock_Config+0x78>)
 80006d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80006dc:	641a      	str	r2, [r3, #64]	; 0x40
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e4:	9301      	str	r3, [sp, #4]
 80006e6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006e8:	9402      	str	r4, [sp, #8]
 80006ea:	4a12      	ldr	r2, [pc, #72]	; (8000734 <SystemClock_Config+0x7c>)
 80006ec:	6813      	ldr	r3, [r2, #0]
 80006ee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f6:	6013      	str	r3, [r2, #0]
 80006f8:	6813      	ldr	r3, [r2, #0]
 80006fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006fe:	9302      	str	r3, [sp, #8]
 8000700:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000702:	2302      	movs	r3, #2
 8000704:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000706:	2301      	movs	r3, #1
 8000708:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800070a:	2310      	movs	r3, #16
 800070c:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800070e:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	a808      	add	r0, sp, #32
 8000712:	f000 faa7 	bl	8000c64 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	230f      	movs	r3, #15
 8000718:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800071a:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071e:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000720:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000722:	4621      	mov	r1, r4
 8000724:	a803      	add	r0, sp, #12
 8000726:	f000 fcd3 	bl	80010d0 <HAL_RCC_ClockConfig>
}
 800072a:	b014      	add	sp, #80	; 0x50
 800072c:	bd10      	pop	{r4, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000

08000738 <main>:
{
 8000738:	b500      	push	{lr}
 800073a:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 800073c:	f000 f912 	bl	8000964 <HAL_Init>
  SystemClock_Config();
 8000740:	f7ff ffba 	bl	80006b8 <SystemClock_Config>
  MX_GPIO_Init();
 8000744:	f7ff ff12 	bl	800056c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000748:	f7ff ff5a 	bl	8000600 <MX_USART1_UART_Init>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800074c:	ac03      	add	r4, sp, #12
 800074e:	4d12      	ldr	r5, [pc, #72]	; (8000798 <main+0x60>)
 8000750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000754:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000758:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800075c:	2100      	movs	r1, #0
 800075e:	a803      	add	r0, sp, #12
 8000760:	f001 f97b 	bl	8001a5a <osThreadCreate>
 8000764:	4b0d      	ldr	r3, [pc, #52]	; (800079c <main+0x64>)
 8000766:	6018      	str	r0, [r3, #0]
  xTaskCreate(vTask1, "Task1", 1000, NULL, 1, NULL);
 8000768:	2400      	movs	r4, #0
 800076a:	9401      	str	r4, [sp, #4]
 800076c:	2501      	movs	r5, #1
 800076e:	9500      	str	r5, [sp, #0]
 8000770:	4623      	mov	r3, r4
 8000772:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000776:	490a      	ldr	r1, [pc, #40]	; (80007a0 <main+0x68>)
 8000778:	480a      	ldr	r0, [pc, #40]	; (80007a4 <main+0x6c>)
 800077a:	f001 fe64 	bl	8002446 <xTaskCreate>
  xTaskCreate(vTask2, "Task2", 1000, NULL, 1, NULL);
 800077e:	9401      	str	r4, [sp, #4]
 8000780:	9500      	str	r5, [sp, #0]
 8000782:	4623      	mov	r3, r4
 8000784:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000788:	4907      	ldr	r1, [pc, #28]	; (80007a8 <main+0x70>)
 800078a:	4808      	ldr	r0, [pc, #32]	; (80007ac <main+0x74>)
 800078c:	f001 fe5b 	bl	8002446 <xTaskCreate>
  osKernelStart();
 8000790:	f001 f95e 	bl	8001a50 <osKernelStart>
 8000794:	e7fe      	b.n	8000794 <main+0x5c>
 8000796:	bf00      	nop
 8000798:	080028ac 	.word	0x080028ac
 800079c:	20003fc4 	.word	0x20003fc4
 80007a0:	080028c8 	.word	0x080028c8
 80007a4:	0800062d 	.word	0x0800062d
 80007a8:	080028d0 	.word	0x080028d0
 80007ac:	0800066d 	.word	0x0800066d

080007b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007b2:	6802      	ldr	r2, [r0, #0]
 80007b4:	4b03      	ldr	r3, [pc, #12]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d000      	beq.n	80007bc <HAL_TIM_PeriodElapsedCallback+0xc>
 80007ba:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80007bc:	f000 f8ec 	bl	8000998 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007c0:	e7fb      	b.n	80007ba <HAL_TIM_PeriodElapsedCallback+0xa>
 80007c2:	bf00      	nop
 80007c4:	40001000 	.word	0x40001000

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b500      	push	{lr}
 80007ca:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007cc:	2200      	movs	r2, #0
 80007ce:	9200      	str	r2, [sp, #0]
 80007d0:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <HAL_MspInit+0x40>)
 80007d2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80007d4:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80007d8:	6459      	str	r1, [r3, #68]	; 0x44
 80007da:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80007dc:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80007e0:	9100      	str	r1, [sp, #0]
 80007e2:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e4:	9201      	str	r2, [sp, #4]
 80007e6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80007e8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80007ec:	6419      	str	r1, [r3, #64]	; 0x40
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f4:	9301      	str	r3, [sp, #4]
 80007f6:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007f8:	210f      	movs	r1, #15
 80007fa:	f06f 0001 	mvn.w	r0, #1
 80007fe:	f000 f8ef 	bl	80009e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000802:	b003      	add	sp, #12
 8000804:	f85d fb04 	ldr.w	pc, [sp], #4
 8000808:	40023800 	.word	0x40023800

0800080c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800080c:	b500      	push	{lr}
 800080e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	2300      	movs	r3, #0
 8000812:	9303      	str	r3, [sp, #12]
 8000814:	9304      	str	r3, [sp, #16]
 8000816:	9305      	str	r3, [sp, #20]
 8000818:	9306      	str	r3, [sp, #24]
 800081a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 800081c:	6802      	ldr	r2, [r0, #0]
 800081e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000822:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8000826:	429a      	cmp	r2, r3
 8000828:	d002      	beq.n	8000830 <HAL_UART_MspInit+0x24>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800082a:	b009      	add	sp, #36	; 0x24
 800082c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8000830:	2100      	movs	r1, #0
 8000832:	9101      	str	r1, [sp, #4]
 8000834:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8000838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800083a:	f042 0210 	orr.w	r2, r2, #16
 800083e:	645a      	str	r2, [r3, #68]	; 0x44
 8000840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000842:	f002 0210 	and.w	r2, r2, #16
 8000846:	9201      	str	r2, [sp, #4]
 8000848:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	9102      	str	r1, [sp, #8]
 800084c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800084e:	f042 0201 	orr.w	r2, r2, #1
 8000852:	631a      	str	r2, [r3, #48]	; 0x30
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	9302      	str	r3, [sp, #8]
 800085c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800085e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000862:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000868:	2301      	movs	r3, #1
 800086a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086c:	2303      	movs	r3, #3
 800086e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000870:	2307      	movs	r3, #7
 8000872:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	a903      	add	r1, sp, #12
 8000876:	4802      	ldr	r0, [pc, #8]	; (8000880 <HAL_UART_MspInit+0x74>)
 8000878:	f000 f8f2 	bl	8000a60 <HAL_GPIO_Init>
}
 800087c:	e7d5      	b.n	800082a <HAL_UART_MspInit+0x1e>
 800087e:	bf00      	nop
 8000880:	40020000 	.word	0x40020000

08000884 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000884:	b510      	push	{r4, lr}
 8000886:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000888:	2200      	movs	r2, #0
 800088a:	4601      	mov	r1, r0
 800088c:	2036      	movs	r0, #54	; 0x36
 800088e:	f000 f8a7 	bl	80009e0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000892:	2036      	movs	r0, #54	; 0x36
 8000894:	f000 f8d6 	bl	8000a44 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000898:	2400      	movs	r4, #0
 800089a:	9401      	str	r4, [sp, #4]
 800089c:	4b13      	ldr	r3, [pc, #76]	; (80008ec <HAL_InitTick+0x68>)
 800089e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008a0:	f042 0210 	orr.w	r2, r2, #16
 80008a4:	641a      	str	r2, [r3, #64]	; 0x40
 80008a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a8:	f003 0310 	and.w	r3, r3, #16
 80008ac:	9301      	str	r3, [sp, #4]
 80008ae:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008b0:	a902      	add	r1, sp, #8
 80008b2:	a803      	add	r0, sp, #12
 80008b4:	f000 fcde 	bl	8001274 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008b8:	f000 fcbc 	bl	8001234 <HAL_RCC_GetPCLK1Freq>
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <HAL_InitTick+0x6c>)
 80008be:	fba3 2300 	umull	r2, r3, r3, r0
 80008c2:	0c9b      	lsrs	r3, r3, #18
 80008c4:	3b01      	subs	r3, #1
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008c6:	480b      	ldr	r0, [pc, #44]	; (80008f4 <HAL_InitTick+0x70>)
 80008c8:	4a0b      	ldr	r2, [pc, #44]	; (80008f8 <HAL_InitTick+0x74>)
 80008ca:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80008cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008d0:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008d2:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 80008d4:	6104      	str	r4, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d6:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80008d8:	f000 fe24 	bl	8001524 <HAL_TIM_Base_Init>
 80008dc:	b110      	cbz	r0, 80008e4 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }
  
  /* Return function status */
  return HAL_ERROR;
 80008de:	2001      	movs	r0, #1
}
 80008e0:	b008      	add	sp, #32
 80008e2:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim6);
 80008e4:	4803      	ldr	r0, [pc, #12]	; (80008f4 <HAL_InitTick+0x70>)
 80008e6:	f000 fce4 	bl	80012b2 <HAL_TIM_Base_Start_IT>
 80008ea:	e7f9      	b.n	80008e0 <HAL_InitTick+0x5c>
 80008ec:	40023800 	.word	0x40023800
 80008f0:	431bde83 	.word	0x431bde83
 80008f4:	20004008 	.word	0x20004008
 80008f8:	40001000 	.word	0x40001000

080008fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008fc:	4770      	bx	lr

080008fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fe:	e7fe      	b.n	80008fe <HardFault_Handler>

08000900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000900:	e7fe      	b.n	8000900 <MemManage_Handler>

08000902 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000902:	e7fe      	b.n	8000902 <BusFault_Handler>

08000904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000904:	e7fe      	b.n	8000904 <UsageFault_Handler>

08000906 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000906:	4770      	bx	lr

08000908 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000908:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800090a:	4802      	ldr	r0, [pc, #8]	; (8000914 <TIM6_DAC_IRQHandler+0xc>)
 800090c:	f000 fce6 	bl	80012dc <HAL_TIM_IRQHandler>
 8000910:	bd08      	pop	{r3, pc}
 8000912:	bf00      	nop
 8000914:	20004008 	.word	0x20004008

08000918 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000918:	490f      	ldr	r1, [pc, #60]	; (8000958 <SystemInit+0x40>)
 800091a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800091e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <SystemInit+0x44>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	f042 0201 	orr.w	r2, r2, #1
 800092e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000930:	2000      	movs	r0, #0
 8000932:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800093a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800093e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000940:	4a07      	ldr	r2, [pc, #28]	; (8000960 <SystemInit+0x48>)
 8000942:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800094a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800094c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800094e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000952:	608b      	str	r3, [r1, #8]
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000ed00 	.word	0xe000ed00
 800095c:	40023800 	.word	0x40023800
 8000960:	24003010 	.word	0x24003010

08000964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000964:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <HAL_Init+0x30>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800096e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000976:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800097e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000980:	2003      	movs	r0, #3
 8000982:	f000 f81b 	bl	80009bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff ff7c 	bl	8000884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800098c:	f7ff ff1c 	bl	80007c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000990:	2000      	movs	r0, #0
 8000992:	bd08      	pop	{r3, pc}
 8000994:	40023c00 	.word	0x40023c00

08000998 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000998:	4a03      	ldr	r2, [pc, #12]	; (80009a8 <HAL_IncTick+0x10>)
 800099a:	6811      	ldr	r1, [r2, #0]
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <HAL_IncTick+0x14>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	440b      	add	r3, r1
 80009a2:	6013      	str	r3, [r2, #0]
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20004048 	.word	0x20004048
 80009ac:	20000004 	.word	0x20000004

080009b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80009b0:	4b01      	ldr	r3, [pc, #4]	; (80009b8 <HAL_GetTick+0x8>)
 80009b2:	6818      	ldr	r0, [r3, #0]
}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	20004048 	.word	0x20004048

080009bc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009bc:	4a07      	ldr	r2, [pc, #28]	; (80009dc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80009be:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009c4:	041b      	lsls	r3, r3, #16
 80009c6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009c8:	0200      	lsls	r0, r0, #8
 80009ca:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ce:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80009d0:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80009d4:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80009d8:	60d0      	str	r0, [r2, #12]
 80009da:	4770      	bx	lr
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009e0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e2:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <HAL_NVIC_SetPriority+0x5c>)
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ea:	f1c3 0407 	rsb	r4, r3, #7
 80009ee:	2c04      	cmp	r4, #4
 80009f0:	bf28      	it	cs
 80009f2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009f4:	1d1d      	adds	r5, r3, #4
 80009f6:	2d06      	cmp	r5, #6
 80009f8:	d917      	bls.n	8000a2a <HAL_NVIC_SetPriority+0x4a>
 80009fa:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	2501      	movs	r5, #1
 80009fe:	fa05 f404 	lsl.w	r4, r5, r4
 8000a02:	3c01      	subs	r4, #1
 8000a04:	4021      	ands	r1, r4
 8000a06:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a08:	fa05 f303 	lsl.w	r3, r5, r3
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a10:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000a12:	2800      	cmp	r0, #0
 8000a14:	db0b      	blt.n	8000a2e <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a16:	0109      	lsls	r1, r1, #4
 8000a18:	b2c9      	uxtb	r1, r1
 8000a1a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000a1e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000a22:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000a26:	bc30      	pop	{r4, r5}
 8000a28:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	e7e6      	b.n	80009fc <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2e:	f000 000f 	and.w	r0, r0, #15
 8000a32:	0109      	lsls	r1, r1, #4
 8000a34:	b2c9      	uxtb	r1, r1
 8000a36:	4b02      	ldr	r3, [pc, #8]	; (8000a40 <HAL_NVIC_SetPriority+0x60>)
 8000a38:	5419      	strb	r1, [r3, r0]
 8000a3a:	e7f4      	b.n	8000a26 <HAL_NVIC_SetPriority+0x46>
 8000a3c:	e000ed00 	.word	0xe000ed00
 8000a40:	e000ed14 	.word	0xe000ed14

08000a44 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000a44:	2800      	cmp	r0, #0
 8000a46:	db08      	blt.n	8000a5a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a48:	0942      	lsrs	r2, r0, #5
 8000a4a:	f000 001f 	and.w	r0, r0, #31
 8000a4e:	2301      	movs	r3, #1
 8000a50:	fa03 f000 	lsl.w	r0, r3, r0
 8000a54:	4b01      	ldr	r3, [pc, #4]	; (8000a5c <HAL_NVIC_EnableIRQ+0x18>)
 8000a56:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000a5a:	4770      	bx	lr
 8000a5c:	e000e100 	.word	0xe000e100

08000a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a62:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a64:	2400      	movs	r4, #0
 8000a66:	e04b      	b.n	8000b00 <HAL_GPIO_Init+0xa0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a68:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8000a6c:	f10e 0e08 	add.w	lr, lr, #8
 8000a70:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a74:	f004 0607 	and.w	r6, r4, #7
 8000a78:	00b6      	lsls	r6, r6, #2
 8000a7a:	270f      	movs	r7, #15
 8000a7c:	40b7      	lsls	r7, r6
 8000a7e:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a82:	690f      	ldr	r7, [r1, #16]
 8000a84:	fa07 f606 	lsl.w	r6, r7, r6
 8000a88:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 8000a8a:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 8000a8e:	e046      	b.n	8000b1e <HAL_GPIO_Init+0xbe>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a90:	2609      	movs	r6, #9
 8000a92:	e000      	b.n	8000a96 <HAL_GPIO_Init+0x36>
 8000a94:	2600      	movs	r6, #0
 8000a96:	fa06 f60e 	lsl.w	r6, r6, lr
 8000a9a:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a9c:	3302      	adds	r3, #2
 8000a9e:	4e64      	ldr	r6, [pc, #400]	; (8000c30 <HAL_GPIO_Init+0x1d0>)
 8000aa0:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aa4:	4b63      	ldr	r3, [pc, #396]	; (8000c34 <HAL_GPIO_Init+0x1d4>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8000aa8:	43eb      	mvns	r3, r5
 8000aaa:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aae:	684f      	ldr	r7, [r1, #4]
 8000ab0:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000ab4:	d001      	beq.n	8000aba <HAL_GPIO_Init+0x5a>
        {
          temp |= iocurrent;
 8000ab6:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 8000aba:	4a5e      	ldr	r2, [pc, #376]	; (8000c34 <HAL_GPIO_Init+0x1d4>)
 8000abc:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000abe:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000ac0:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ac4:	684f      	ldr	r7, [r1, #4]
 8000ac6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000aca:	d001      	beq.n	8000ad0 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8000acc:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 8000ad0:	4a58      	ldr	r2, [pc, #352]	; (8000c34 <HAL_GPIO_Init+0x1d4>)
 8000ad2:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ad4:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000ad6:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ada:	684f      	ldr	r7, [r1, #4]
 8000adc:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000ae0:	d001      	beq.n	8000ae6 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 8000ae2:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 8000ae6:	4a53      	ldr	r2, [pc, #332]	; (8000c34 <HAL_GPIO_Init+0x1d4>)
 8000ae8:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000aea:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000aec:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aee:	684e      	ldr	r6, [r1, #4]
 8000af0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000af4:	d001      	beq.n	8000afa <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 8000af6:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 8000afa:	4a4e      	ldr	r2, [pc, #312]	; (8000c34 <HAL_GPIO_Init+0x1d4>)
 8000afc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000afe:	3401      	adds	r4, #1
 8000b00:	2c0f      	cmp	r4, #15
 8000b02:	f200 8092 	bhi.w	8000c2a <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 8000b06:	2301      	movs	r3, #1
 8000b08:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b0a:	680a      	ldr	r2, [r1, #0]
 8000b0c:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 8000b10:	42ab      	cmp	r3, r5
 8000b12:	d1f4      	bne.n	8000afe <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b14:	684a      	ldr	r2, [r1, #4]
 8000b16:	2a02      	cmp	r2, #2
 8000b18:	d0a6      	beq.n	8000a68 <HAL_GPIO_Init+0x8>
 8000b1a:	2a12      	cmp	r2, #18
 8000b1c:	d0a4      	beq.n	8000a68 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8000b1e:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b20:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8000b24:	2203      	movs	r2, #3
 8000b26:	fa02 f20e 	lsl.w	r2, r2, lr
 8000b2a:	43d2      	mvns	r2, r2
 8000b2c:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b2e:	684f      	ldr	r7, [r1, #4]
 8000b30:	f007 0703 	and.w	r7, r7, #3
 8000b34:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b38:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8000b3a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b3c:	684e      	ldr	r6, [r1, #4]
 8000b3e:	1e77      	subs	r7, r6, #1
 8000b40:	2f01      	cmp	r7, #1
 8000b42:	d903      	bls.n	8000b4c <HAL_GPIO_Init+0xec>
 8000b44:	2e11      	cmp	r6, #17
 8000b46:	d001      	beq.n	8000b4c <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b48:	2e12      	cmp	r6, #18
 8000b4a:	d10f      	bne.n	8000b6c <HAL_GPIO_Init+0x10c>
        temp = GPIOx->OSPEEDR; 
 8000b4c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b4e:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b50:	68cf      	ldr	r7, [r1, #12]
 8000b52:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b56:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000b58:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b5a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b5c:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b60:	684e      	ldr	r6, [r1, #4]
 8000b62:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8000b66:	40a6      	lsls	r6, r4
 8000b68:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8000b6a:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8000b6c:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b6e:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b70:	688b      	ldr	r3, [r1, #8]
 8000b72:	fa03 f30e 	lsl.w	r3, r3, lr
 8000b76:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 8000b78:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b7a:	684b      	ldr	r3, [r1, #4]
 8000b7c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000b80:	d0bd      	beq.n	8000afe <HAL_GPIO_Init+0x9e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	9301      	str	r3, [sp, #4]
 8000b86:	4b2c      	ldr	r3, [pc, #176]	; (8000c38 <HAL_GPIO_Init+0x1d8>)
 8000b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000b8e:	645a      	str	r2, [r3, #68]	; 0x44
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b96:	9301      	str	r3, [sp, #4]
 8000b98:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000b9a:	08a3      	lsrs	r3, r4, #2
 8000b9c:	1c9e      	adds	r6, r3, #2
 8000b9e:	4a24      	ldr	r2, [pc, #144]	; (8000c30 <HAL_GPIO_Init+0x1d0>)
 8000ba0:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ba4:	f004 0603 	and.w	r6, r4, #3
 8000ba8:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8000bac:	260f      	movs	r6, #15
 8000bae:	fa06 f60e 	lsl.w	r6, r6, lr
 8000bb2:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bb6:	4f21      	ldr	r7, [pc, #132]	; (8000c3c <HAL_GPIO_Init+0x1dc>)
 8000bb8:	42b8      	cmp	r0, r7
 8000bba:	f43f af6b 	beq.w	8000a94 <HAL_GPIO_Init+0x34>
 8000bbe:	4e20      	ldr	r6, [pc, #128]	; (8000c40 <HAL_GPIO_Init+0x1e0>)
 8000bc0:	42b0      	cmp	r0, r6
 8000bc2:	d022      	beq.n	8000c0a <HAL_GPIO_Init+0x1aa>
 8000bc4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bc8:	42b0      	cmp	r0, r6
 8000bca:	d020      	beq.n	8000c0e <HAL_GPIO_Init+0x1ae>
 8000bcc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bd0:	42b0      	cmp	r0, r6
 8000bd2:	d01e      	beq.n	8000c12 <HAL_GPIO_Init+0x1b2>
 8000bd4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bd8:	42b0      	cmp	r0, r6
 8000bda:	d01c      	beq.n	8000c16 <HAL_GPIO_Init+0x1b6>
 8000bdc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000be0:	42b0      	cmp	r0, r6
 8000be2:	d01a      	beq.n	8000c1a <HAL_GPIO_Init+0x1ba>
 8000be4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000be8:	42b0      	cmp	r0, r6
 8000bea:	d018      	beq.n	8000c1e <HAL_GPIO_Init+0x1be>
 8000bec:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bf0:	42b0      	cmp	r0, r6
 8000bf2:	d016      	beq.n	8000c22 <HAL_GPIO_Init+0x1c2>
 8000bf4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bf8:	42b0      	cmp	r0, r6
 8000bfa:	d014      	beq.n	8000c26 <HAL_GPIO_Init+0x1c6>
 8000bfc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c00:	42b0      	cmp	r0, r6
 8000c02:	f43f af45 	beq.w	8000a90 <HAL_GPIO_Init+0x30>
 8000c06:	260a      	movs	r6, #10
 8000c08:	e745      	b.n	8000a96 <HAL_GPIO_Init+0x36>
 8000c0a:	2601      	movs	r6, #1
 8000c0c:	e743      	b.n	8000a96 <HAL_GPIO_Init+0x36>
 8000c0e:	2602      	movs	r6, #2
 8000c10:	e741      	b.n	8000a96 <HAL_GPIO_Init+0x36>
 8000c12:	2603      	movs	r6, #3
 8000c14:	e73f      	b.n	8000a96 <HAL_GPIO_Init+0x36>
 8000c16:	2604      	movs	r6, #4
 8000c18:	e73d      	b.n	8000a96 <HAL_GPIO_Init+0x36>
 8000c1a:	2605      	movs	r6, #5
 8000c1c:	e73b      	b.n	8000a96 <HAL_GPIO_Init+0x36>
 8000c1e:	2606      	movs	r6, #6
 8000c20:	e739      	b.n	8000a96 <HAL_GPIO_Init+0x36>
 8000c22:	2607      	movs	r6, #7
 8000c24:	e737      	b.n	8000a96 <HAL_GPIO_Init+0x36>
 8000c26:	2608      	movs	r6, #8
 8000c28:	e735      	b.n	8000a96 <HAL_GPIO_Init+0x36>
      }
    }
  }
}
 8000c2a:	b003      	add	sp, #12
 8000c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40013800 	.word	0x40013800
 8000c34:	40013c00 	.word	0x40013c00
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020000 	.word	0x40020000
 8000c40:	40020400 	.word	0x40020400

08000c44 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c44:	b912      	cbnz	r2, 8000c4c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c46:	0409      	lsls	r1, r1, #16
 8000c48:	6181      	str	r1, [r0, #24]
 8000c4a:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000c4c:	6181      	str	r1, [r0, #24]
 8000c4e:	4770      	bx	lr

08000c50 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000c50:	6943      	ldr	r3, [r0, #20]
 8000c52:	ea31 0303 	bics.w	r3, r1, r3
 8000c56:	d001      	beq.n	8000c5c <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c58:	6181      	str	r1, [r0, #24]
 8000c5a:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000c5c:	0409      	lsls	r1, r1, #16
 8000c5e:	6181      	str	r1, [r0, #24]
 8000c60:	4770      	bx	lr
	...

08000c64 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c64:	2800      	cmp	r0, #0
 8000c66:	f000 81bb 	beq.w	8000fe0 <HAL_RCC_OscConfig+0x37c>
{
 8000c6a:	b570      	push	{r4, r5, r6, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c70:	6803      	ldr	r3, [r0, #0]
 8000c72:	f013 0f01 	tst.w	r3, #1
 8000c76:	d03b      	beq.n	8000cf0 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c78:	4ba7      	ldr	r3, [pc, #668]	; (8000f18 <HAL_RCC_OscConfig+0x2b4>)
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	f003 030c 	and.w	r3, r3, #12
 8000c80:	2b04      	cmp	r3, #4
 8000c82:	d02c      	beq.n	8000cde <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c84:	4ba4      	ldr	r3, [pc, #656]	; (8000f18 <HAL_RCC_OscConfig+0x2b4>)
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c8c:	2b08      	cmp	r3, #8
 8000c8e:	d021      	beq.n	8000cd4 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c90:	6863      	ldr	r3, [r4, #4]
 8000c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c96:	d04f      	beq.n	8000d38 <HAL_RCC_OscConfig+0xd4>
 8000c98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c9c:	d052      	beq.n	8000d44 <HAL_RCC_OscConfig+0xe0>
 8000c9e:	4b9e      	ldr	r3, [pc, #632]	; (8000f18 <HAL_RCC_OscConfig+0x2b4>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000cae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000cb0:	6863      	ldr	r3, [r4, #4]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d050      	beq.n	8000d58 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb6:	f7ff fe7b 	bl	80009b0 <HAL_GetTick>
 8000cba:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cbc:	4b96      	ldr	r3, [pc, #600]	; (8000f18 <HAL_RCC_OscConfig+0x2b4>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000cc4:	d114      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cc6:	f7ff fe73 	bl	80009b0 <HAL_GetTick>
 8000cca:	1b40      	subs	r0, r0, r5
 8000ccc:	2864      	cmp	r0, #100	; 0x64
 8000cce:	d9f5      	bls.n	8000cbc <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8000cd0:	2003      	movs	r0, #3
 8000cd2:	e18a      	b.n	8000fea <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cd4:	4b90      	ldr	r3, [pc, #576]	; (8000f18 <HAL_RCC_OscConfig+0x2b4>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000cdc:	d0d8      	beq.n	8000c90 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cde:	4b8e      	ldr	r3, [pc, #568]	; (8000f18 <HAL_RCC_OscConfig+0x2b4>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000ce6:	d003      	beq.n	8000cf0 <HAL_RCC_OscConfig+0x8c>
 8000ce8:	6863      	ldr	r3, [r4, #4]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f000 817a 	beq.w	8000fe4 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cf0:	6823      	ldr	r3, [r4, #0]
 8000cf2:	f013 0f02 	tst.w	r3, #2
 8000cf6:	d055      	beq.n	8000da4 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cf8:	4b87      	ldr	r3, [pc, #540]	; (8000f18 <HAL_RCC_OscConfig+0x2b4>)
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	f013 0f0c 	tst.w	r3, #12
 8000d00:	d03e      	beq.n	8000d80 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d02:	4b85      	ldr	r3, [pc, #532]	; (8000f18 <HAL_RCC_OscConfig+0x2b4>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d0a:	2b08      	cmp	r3, #8
 8000d0c:	d033      	beq.n	8000d76 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d0e:	68e3      	ldr	r3, [r4, #12]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d068      	beq.n	8000de6 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d14:	2201      	movs	r2, #1
 8000d16:	4b81      	ldr	r3, [pc, #516]	; (8000f1c <HAL_RCC_OscConfig+0x2b8>)
 8000d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d1a:	f7ff fe49 	bl	80009b0 <HAL_GetTick>
 8000d1e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d20:	4b7d      	ldr	r3, [pc, #500]	; (8000f18 <HAL_RCC_OscConfig+0x2b4>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f013 0f02 	tst.w	r3, #2
 8000d28:	d154      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d2a:	f7ff fe41 	bl	80009b0 <HAL_GetTick>
 8000d2e:	1b40      	subs	r0, r0, r5
 8000d30:	2802      	cmp	r0, #2
 8000d32:	d9f5      	bls.n	8000d20 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000d34:	2003      	movs	r0, #3
 8000d36:	e158      	b.n	8000fea <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d38:	4a77      	ldr	r2, [pc, #476]	; (8000f18 <HAL_RCC_OscConfig+0x2b4>)
 8000d3a:	6813      	ldr	r3, [r2, #0]
 8000d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	e7b5      	b.n	8000cb0 <HAL_RCC_OscConfig+0x4c>
 8000d44:	4b74      	ldr	r3, [pc, #464]	; (8000f18 <HAL_RCC_OscConfig+0x2b4>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	e7ab      	b.n	8000cb0 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000d58:	f7ff fe2a 	bl	80009b0 <HAL_GetTick>
 8000d5c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d5e:	4b6e      	ldr	r3, [pc, #440]	; (8000f18 <HAL_RCC_OscConfig+0x2b4>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000d66:	d0c3      	beq.n	8000cf0 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d68:	f7ff fe22 	bl	80009b0 <HAL_GetTick>
 8000d6c:	1b40      	subs	r0, r0, r5
 8000d6e:	2864      	cmp	r0, #100	; 0x64
 8000d70:	d9f5      	bls.n	8000d5e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8000d72:	2003      	movs	r0, #3
 8000d74:	e139      	b.n	8000fea <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d76:	4b68      	ldr	r3, [pc, #416]	; (8000f18 <HAL_RCC_OscConfig+0x2b4>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000d7e:	d1c6      	bne.n	8000d0e <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d80:	4b65      	ldr	r3, [pc, #404]	; (8000f18 <HAL_RCC_OscConfig+0x2b4>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f013 0f02 	tst.w	r3, #2
 8000d88:	d004      	beq.n	8000d94 <HAL_RCC_OscConfig+0x130>
 8000d8a:	68e3      	ldr	r3, [r4, #12]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d001      	beq.n	8000d94 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8000d90:	2001      	movs	r0, #1
 8000d92:	e12a      	b.n	8000fea <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d94:	4a60      	ldr	r2, [pc, #384]	; (8000f18 <HAL_RCC_OscConfig+0x2b4>)
 8000d96:	6813      	ldr	r3, [r2, #0]
 8000d98:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d9c:	6921      	ldr	r1, [r4, #16]
 8000d9e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000da2:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000da4:	6823      	ldr	r3, [r4, #0]
 8000da6:	f013 0f08 	tst.w	r3, #8
 8000daa:	d040      	beq.n	8000e2e <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000dac:	6963      	ldr	r3, [r4, #20]
 8000dae:	b363      	cbz	r3, 8000e0a <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000db0:	2201      	movs	r2, #1
 8000db2:	4b5b      	ldr	r3, [pc, #364]	; (8000f20 <HAL_RCC_OscConfig+0x2bc>)
 8000db4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000db6:	f7ff fdfb 	bl	80009b0 <HAL_GetTick>
 8000dba:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dbc:	4b56      	ldr	r3, [pc, #344]	; (8000f18 <HAL_RCC_OscConfig+0x2b4>)
 8000dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dc0:	f013 0f02 	tst.w	r3, #2
 8000dc4:	d133      	bne.n	8000e2e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dc6:	f7ff fdf3 	bl	80009b0 <HAL_GetTick>
 8000dca:	1b40      	subs	r0, r0, r5
 8000dcc:	2802      	cmp	r0, #2
 8000dce:	d9f5      	bls.n	8000dbc <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8000dd0:	2003      	movs	r0, #3
 8000dd2:	e10a      	b.n	8000fea <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dd4:	4a50      	ldr	r2, [pc, #320]	; (8000f18 <HAL_RCC_OscConfig+0x2b4>)
 8000dd6:	6813      	ldr	r3, [r2, #0]
 8000dd8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ddc:	6921      	ldr	r1, [r4, #16]
 8000dde:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	e7de      	b.n	8000da4 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8000de6:	2200      	movs	r2, #0
 8000de8:	4b4c      	ldr	r3, [pc, #304]	; (8000f1c <HAL_RCC_OscConfig+0x2b8>)
 8000dea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000dec:	f7ff fde0 	bl	80009b0 <HAL_GetTick>
 8000df0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000df2:	4b49      	ldr	r3, [pc, #292]	; (8000f18 <HAL_RCC_OscConfig+0x2b4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f013 0f02 	tst.w	r3, #2
 8000dfa:	d0d3      	beq.n	8000da4 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dfc:	f7ff fdd8 	bl	80009b0 <HAL_GetTick>
 8000e00:	1b40      	subs	r0, r0, r5
 8000e02:	2802      	cmp	r0, #2
 8000e04:	d9f5      	bls.n	8000df2 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8000e06:	2003      	movs	r0, #3
 8000e08:	e0ef      	b.n	8000fea <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	4b44      	ldr	r3, [pc, #272]	; (8000f20 <HAL_RCC_OscConfig+0x2bc>)
 8000e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e10:	f7ff fdce 	bl	80009b0 <HAL_GetTick>
 8000e14:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e16:	4b40      	ldr	r3, [pc, #256]	; (8000f18 <HAL_RCC_OscConfig+0x2b4>)
 8000e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e1a:	f013 0f02 	tst.w	r3, #2
 8000e1e:	d006      	beq.n	8000e2e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e20:	f7ff fdc6 	bl	80009b0 <HAL_GetTick>
 8000e24:	1b40      	subs	r0, r0, r5
 8000e26:	2802      	cmp	r0, #2
 8000e28:	d9f5      	bls.n	8000e16 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8000e2a:	2003      	movs	r0, #3
 8000e2c:	e0dd      	b.n	8000fea <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e2e:	6823      	ldr	r3, [r4, #0]
 8000e30:	f013 0f04 	tst.w	r3, #4
 8000e34:	d079      	beq.n	8000f2a <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e36:	4b38      	ldr	r3, [pc, #224]	; (8000f18 <HAL_RCC_OscConfig+0x2b4>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000e3e:	d133      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e40:	2300      	movs	r3, #0
 8000e42:	9301      	str	r3, [sp, #4]
 8000e44:	4b34      	ldr	r3, [pc, #208]	; (8000f18 <HAL_RCC_OscConfig+0x2b4>)
 8000e46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e48:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e4c:	641a      	str	r2, [r3, #64]	; 0x40
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e54:	9301      	str	r3, [sp, #4]
 8000e56:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e58:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e5a:	4b32      	ldr	r3, [pc, #200]	; (8000f24 <HAL_RCC_OscConfig+0x2c0>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000e62:	d023      	beq.n	8000eac <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e64:	68a3      	ldr	r3, [r4, #8]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d034      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x270>
 8000e6a:	2b05      	cmp	r3, #5
 8000e6c:	d038      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x27c>
 8000e6e:	4b2a      	ldr	r3, [pc, #168]	; (8000f18 <HAL_RCC_OscConfig+0x2b4>)
 8000e70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000e72:	f022 0201 	bic.w	r2, r2, #1
 8000e76:	671a      	str	r2, [r3, #112]	; 0x70
 8000e78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000e7a:	f022 0204 	bic.w	r2, r2, #4
 8000e7e:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e80:	68a3      	ldr	r3, [r4, #8]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d036      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e86:	f7ff fd93 	bl	80009b0 <HAL_GetTick>
 8000e8a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <HAL_RCC_OscConfig+0x2b4>)
 8000e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e90:	f013 0f02 	tst.w	r3, #2
 8000e94:	d148      	bne.n	8000f28 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e96:	f7ff fd8b 	bl	80009b0 <HAL_GetTick>
 8000e9a:	1b80      	subs	r0, r0, r6
 8000e9c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ea0:	4298      	cmp	r0, r3
 8000ea2:	d9f3      	bls.n	8000e8c <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	e0a0      	b.n	8000fea <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8000ea8:	2500      	movs	r5, #0
 8000eaa:	e7d6      	b.n	8000e5a <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eac:	4a1d      	ldr	r2, [pc, #116]	; (8000f24 <HAL_RCC_OscConfig+0x2c0>)
 8000eae:	6813      	ldr	r3, [r2, #0]
 8000eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000eb6:	f7ff fd7b 	bl	80009b0 <HAL_GetTick>
 8000eba:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ebc:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <HAL_RCC_OscConfig+0x2c0>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000ec4:	d1ce      	bne.n	8000e64 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ec6:	f7ff fd73 	bl	80009b0 <HAL_GetTick>
 8000eca:	1b80      	subs	r0, r0, r6
 8000ecc:	2802      	cmp	r0, #2
 8000ece:	d9f5      	bls.n	8000ebc <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	e08a      	b.n	8000fea <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ed4:	4a10      	ldr	r2, [pc, #64]	; (8000f18 <HAL_RCC_OscConfig+0x2b4>)
 8000ed6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6713      	str	r3, [r2, #112]	; 0x70
 8000ede:	e7cf      	b.n	8000e80 <HAL_RCC_OscConfig+0x21c>
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <HAL_RCC_OscConfig+0x2b4>)
 8000ee2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000ee4:	f042 0204 	orr.w	r2, r2, #4
 8000ee8:	671a      	str	r2, [r3, #112]	; 0x70
 8000eea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000eec:	f042 0201 	orr.w	r2, r2, #1
 8000ef0:	671a      	str	r2, [r3, #112]	; 0x70
 8000ef2:	e7c5      	b.n	8000e80 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef4:	f7ff fd5c 	bl	80009b0 <HAL_GetTick>
 8000ef8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000efa:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <HAL_RCC_OscConfig+0x2b4>)
 8000efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000efe:	f013 0f02 	tst.w	r3, #2
 8000f02:	d011      	beq.n	8000f28 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f04:	f7ff fd54 	bl	80009b0 <HAL_GetTick>
 8000f08:	1b80      	subs	r0, r0, r6
 8000f0a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f0e:	4298      	cmp	r0, r3
 8000f10:	d9f3      	bls.n	8000efa <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8000f12:	2003      	movs	r0, #3
 8000f14:	e069      	b.n	8000fea <HAL_RCC_OscConfig+0x386>
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	42470000 	.word	0x42470000
 8000f20:	42470e80 	.word	0x42470e80
 8000f24:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f28:	b9e5      	cbnz	r5, 8000f64 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f2a:	69a3      	ldr	r3, [r4, #24]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d05b      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f30:	4a30      	ldr	r2, [pc, #192]	; (8000ff4 <HAL_RCC_OscConfig+0x390>)
 8000f32:	6892      	ldr	r2, [r2, #8]
 8000f34:	f002 020c 	and.w	r2, r2, #12
 8000f38:	2a08      	cmp	r2, #8
 8000f3a:	d058      	beq.n	8000fee <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d017      	beq.n	8000f70 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f40:	2200      	movs	r2, #0
 8000f42:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <HAL_RCC_OscConfig+0x394>)
 8000f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f46:	f7ff fd33 	bl	80009b0 <HAL_GetTick>
 8000f4a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f4c:	4b29      	ldr	r3, [pc, #164]	; (8000ff4 <HAL_RCC_OscConfig+0x390>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000f54:	d042      	beq.n	8000fdc <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f56:	f7ff fd2b 	bl	80009b0 <HAL_GetTick>
 8000f5a:	1b00      	subs	r0, r0, r4
 8000f5c:	2802      	cmp	r0, #2
 8000f5e:	d9f5      	bls.n	8000f4c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000f60:	2003      	movs	r0, #3
 8000f62:	e042      	b.n	8000fea <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f64:	4a23      	ldr	r2, [pc, #140]	; (8000ff4 <HAL_RCC_OscConfig+0x390>)
 8000f66:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6e:	e7dc      	b.n	8000f2a <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8000f70:	2200      	movs	r2, #0
 8000f72:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <HAL_RCC_OscConfig+0x394>)
 8000f74:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f76:	f7ff fd1b 	bl	80009b0 <HAL_GetTick>
 8000f7a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <HAL_RCC_OscConfig+0x390>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000f84:	d006      	beq.n	8000f94 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f86:	f7ff fd13 	bl	80009b0 <HAL_GetTick>
 8000f8a:	1b40      	subs	r0, r0, r5
 8000f8c:	2802      	cmp	r0, #2
 8000f8e:	d9f5      	bls.n	8000f7c <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8000f90:	2003      	movs	r0, #3
 8000f92:	e02a      	b.n	8000fea <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f94:	69e3      	ldr	r3, [r4, #28]
 8000f96:	6a22      	ldr	r2, [r4, #32]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f9c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000fa0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000fa2:	0852      	lsrs	r2, r2, #1
 8000fa4:	3a01      	subs	r2, #1
 8000fa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000faa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000fac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000fb0:	4a10      	ldr	r2, [pc, #64]	; (8000ff4 <HAL_RCC_OscConfig+0x390>)
 8000fb2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <HAL_RCC_OscConfig+0x394>)
 8000fb8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fba:	f7ff fcf9 	bl	80009b0 <HAL_GetTick>
 8000fbe:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <HAL_RCC_OscConfig+0x390>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000fc8:	d106      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fca:	f7ff fcf1 	bl	80009b0 <HAL_GetTick>
 8000fce:	1b00      	subs	r0, r0, r4
 8000fd0:	2802      	cmp	r0, #2
 8000fd2:	d9f5      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	e008      	b.n	8000fea <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000fd8:	2000      	movs	r0, #0
 8000fda:	e006      	b.n	8000fea <HAL_RCC_OscConfig+0x386>
 8000fdc:	2000      	movs	r0, #0
 8000fde:	e004      	b.n	8000fea <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	4770      	bx	lr
        return HAL_ERROR;
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	e000      	b.n	8000fea <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8000fe8:	2000      	movs	r0, #0
}
 8000fea:	b002      	add	sp, #8
 8000fec:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000fee:	2001      	movs	r0, #1
 8000ff0:	e7fb      	b.n	8000fea <HAL_RCC_OscConfig+0x386>
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	42470060 	.word	0x42470060

08000ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ffe:	4b31      	ldr	r3, [pc, #196]	; (80010c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f003 030c 	and.w	r3, r3, #12
 8001006:	2b04      	cmp	r3, #4
 8001008:	d059      	beq.n	80010be <HAL_RCC_GetSysClockFreq+0xc2>
 800100a:	2b08      	cmp	r3, #8
 800100c:	d001      	beq.n	8001012 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800100e:	482e      	ldr	r0, [pc, #184]	; (80010c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001012:	4b2c      	ldr	r3, [pc, #176]	; (80010c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001020:	d02a      	beq.n	8001078 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001022:	4b28      	ldr	r3, [pc, #160]	; (80010c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800102a:	461e      	mov	r6, r3
 800102c:	2700      	movs	r7, #0
 800102e:	015c      	lsls	r4, r3, #5
 8001030:	2500      	movs	r5, #0
 8001032:	1ae4      	subs	r4, r4, r3
 8001034:	eb65 0507 	sbc.w	r5, r5, r7
 8001038:	01a9      	lsls	r1, r5, #6
 800103a:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 800103e:	01a0      	lsls	r0, r4, #6
 8001040:	1b00      	subs	r0, r0, r4
 8001042:	eb61 0105 	sbc.w	r1, r1, r5
 8001046:	00cb      	lsls	r3, r1, #3
 8001048:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800104c:	00c4      	lsls	r4, r0, #3
 800104e:	19a0      	adds	r0, r4, r6
 8001050:	eb43 0107 	adc.w	r1, r3, r7
 8001054:	024b      	lsls	r3, r1, #9
 8001056:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800105a:	0244      	lsls	r4, r0, #9
 800105c:	4620      	mov	r0, r4
 800105e:	4619      	mov	r1, r3
 8001060:	2300      	movs	r3, #0
 8001062:	f7ff f8c5 	bl	80001f0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800106e:	3301      	adds	r3, #1
 8001070:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001072:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001080:	461e      	mov	r6, r3
 8001082:	2700      	movs	r7, #0
 8001084:	015c      	lsls	r4, r3, #5
 8001086:	2500      	movs	r5, #0
 8001088:	1ae4      	subs	r4, r4, r3
 800108a:	eb65 0507 	sbc.w	r5, r5, r7
 800108e:	01a9      	lsls	r1, r5, #6
 8001090:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001094:	01a0      	lsls	r0, r4, #6
 8001096:	1b00      	subs	r0, r0, r4
 8001098:	eb61 0105 	sbc.w	r1, r1, r5
 800109c:	00cb      	lsls	r3, r1, #3
 800109e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80010a2:	00c4      	lsls	r4, r0, #3
 80010a4:	19a0      	adds	r0, r4, r6
 80010a6:	eb43 0107 	adc.w	r1, r3, r7
 80010aa:	028b      	lsls	r3, r1, #10
 80010ac:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80010b0:	0284      	lsls	r4, r0, #10
 80010b2:	4620      	mov	r0, r4
 80010b4:	4619      	mov	r1, r3
 80010b6:	2300      	movs	r3, #0
 80010b8:	f7ff f89a 	bl	80001f0 <__aeabi_uldivmod>
 80010bc:	e7d3      	b.n	8001066 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 80010be:	4803      	ldr	r0, [pc, #12]	; (80010cc <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80010c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	00f42400 	.word	0x00f42400
 80010cc:	007a1200 	.word	0x007a1200

080010d0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80010d0:	2800      	cmp	r0, #0
 80010d2:	f000 809d 	beq.w	8001210 <HAL_RCC_ClockConfig+0x140>
{
 80010d6:	b570      	push	{r4, r5, r6, lr}
 80010d8:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010da:	4b4f      	ldr	r3, [pc, #316]	; (8001218 <HAL_RCC_ClockConfig+0x148>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	428b      	cmp	r3, r1
 80010e4:	d209      	bcs.n	80010fa <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010e6:	b2cb      	uxtb	r3, r1
 80010e8:	4a4b      	ldr	r2, [pc, #300]	; (8001218 <HAL_RCC_ClockConfig+0x148>)
 80010ea:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ec:	6813      	ldr	r3, [r2, #0]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	4299      	cmp	r1, r3
 80010f4:	d001      	beq.n	80010fa <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 80010f6:	2001      	movs	r0, #1
 80010f8:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010fa:	6823      	ldr	r3, [r4, #0]
 80010fc:	f013 0f02 	tst.w	r3, #2
 8001100:	d017      	beq.n	8001132 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001102:	f013 0f04 	tst.w	r3, #4
 8001106:	d004      	beq.n	8001112 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001108:	4a44      	ldr	r2, [pc, #272]	; (800121c <HAL_RCC_ClockConfig+0x14c>)
 800110a:	6893      	ldr	r3, [r2, #8]
 800110c:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001110:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001112:	6823      	ldr	r3, [r4, #0]
 8001114:	f013 0f08 	tst.w	r3, #8
 8001118:	d004      	beq.n	8001124 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800111a:	4a40      	ldr	r2, [pc, #256]	; (800121c <HAL_RCC_ClockConfig+0x14c>)
 800111c:	6893      	ldr	r3, [r2, #8]
 800111e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001122:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001124:	4a3d      	ldr	r2, [pc, #244]	; (800121c <HAL_RCC_ClockConfig+0x14c>)
 8001126:	6893      	ldr	r3, [r2, #8]
 8001128:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800112c:	68a0      	ldr	r0, [r4, #8]
 800112e:	4303      	orrs	r3, r0
 8001130:	6093      	str	r3, [r2, #8]
 8001132:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001134:	6823      	ldr	r3, [r4, #0]
 8001136:	f013 0f01 	tst.w	r3, #1
 800113a:	d032      	beq.n	80011a2 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800113c:	6863      	ldr	r3, [r4, #4]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d021      	beq.n	8001186 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001142:	1e9a      	subs	r2, r3, #2
 8001144:	2a01      	cmp	r2, #1
 8001146:	d925      	bls.n	8001194 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001148:	4a34      	ldr	r2, [pc, #208]	; (800121c <HAL_RCC_ClockConfig+0x14c>)
 800114a:	6812      	ldr	r2, [r2, #0]
 800114c:	f012 0f02 	tst.w	r2, #2
 8001150:	d060      	beq.n	8001214 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001152:	4932      	ldr	r1, [pc, #200]	; (800121c <HAL_RCC_ClockConfig+0x14c>)
 8001154:	688a      	ldr	r2, [r1, #8]
 8001156:	f022 0203 	bic.w	r2, r2, #3
 800115a:	4313      	orrs	r3, r2
 800115c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800115e:	f7ff fc27 	bl	80009b0 <HAL_GetTick>
 8001162:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001164:	4b2d      	ldr	r3, [pc, #180]	; (800121c <HAL_RCC_ClockConfig+0x14c>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f003 030c 	and.w	r3, r3, #12
 800116c:	6862      	ldr	r2, [r4, #4]
 800116e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001172:	d016      	beq.n	80011a2 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001174:	f7ff fc1c 	bl	80009b0 <HAL_GetTick>
 8001178:	1b80      	subs	r0, r0, r6
 800117a:	f241 3388 	movw	r3, #5000	; 0x1388
 800117e:	4298      	cmp	r0, r3
 8001180:	d9f0      	bls.n	8001164 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8001182:	2003      	movs	r0, #3
 8001184:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001186:	4a25      	ldr	r2, [pc, #148]	; (800121c <HAL_RCC_ClockConfig+0x14c>)
 8001188:	6812      	ldr	r2, [r2, #0]
 800118a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800118e:	d1e0      	bne.n	8001152 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001190:	2001      	movs	r0, #1
 8001192:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001194:	4a21      	ldr	r2, [pc, #132]	; (800121c <HAL_RCC_ClockConfig+0x14c>)
 8001196:	6812      	ldr	r2, [r2, #0]
 8001198:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800119c:	d1d9      	bne.n	8001152 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 800119e:	2001      	movs	r0, #1
 80011a0:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011a2:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <HAL_RCC_ClockConfig+0x148>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	429d      	cmp	r5, r3
 80011ac:	d209      	bcs.n	80011c2 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ae:	b2ea      	uxtb	r2, r5
 80011b0:	4b19      	ldr	r3, [pc, #100]	; (8001218 <HAL_RCC_ClockConfig+0x148>)
 80011b2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	429d      	cmp	r5, r3
 80011bc:	d001      	beq.n	80011c2 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 80011be:	2001      	movs	r0, #1
}
 80011c0:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011c2:	6823      	ldr	r3, [r4, #0]
 80011c4:	f013 0f04 	tst.w	r3, #4
 80011c8:	d006      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011ca:	4a14      	ldr	r2, [pc, #80]	; (800121c <HAL_RCC_ClockConfig+0x14c>)
 80011cc:	6893      	ldr	r3, [r2, #8]
 80011ce:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80011d2:	68e1      	ldr	r1, [r4, #12]
 80011d4:	430b      	orrs	r3, r1
 80011d6:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	f013 0f08 	tst.w	r3, #8
 80011de:	d007      	beq.n	80011f0 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011e0:	4a0e      	ldr	r2, [pc, #56]	; (800121c <HAL_RCC_ClockConfig+0x14c>)
 80011e2:	6893      	ldr	r3, [r2, #8]
 80011e4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80011e8:	6921      	ldr	r1, [r4, #16]
 80011ea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80011ee:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011f0:	f7ff ff04 	bl	8000ffc <HAL_RCC_GetSysClockFreq>
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <HAL_RCC_ClockConfig+0x14c>)
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80011fc:	4a08      	ldr	r2, [pc, #32]	; (8001220 <HAL_RCC_ClockConfig+0x150>)
 80011fe:	5cd3      	ldrb	r3, [r2, r3]
 8001200:	40d8      	lsrs	r0, r3
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <HAL_RCC_ClockConfig+0x154>)
 8001204:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001206:	2000      	movs	r0, #0
 8001208:	f7ff fb3c 	bl	8000884 <HAL_InitTick>
  return HAL_OK;
 800120c:	2000      	movs	r0, #0
 800120e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001210:	2001      	movs	r0, #1
 8001212:	4770      	bx	lr
        return HAL_ERROR;
 8001214:	2001      	movs	r0, #1
 8001216:	bd70      	pop	{r4, r5, r6, pc}
 8001218:	40023c00 	.word	0x40023c00
 800121c:	40023800 	.word	0x40023800
 8001220:	0800290c 	.word	0x0800290c
 8001224:	20000000 	.word	0x20000000

08001228 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001228:	4b01      	ldr	r3, [pc, #4]	; (8001230 <HAL_RCC_GetHCLKFreq+0x8>)
 800122a:	6818      	ldr	r0, [r3, #0]
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000000 	.word	0x20000000

08001234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001234:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001236:	f7ff fff7 	bl	8001228 <HAL_RCC_GetHCLKFreq>
 800123a:	4b04      	ldr	r3, [pc, #16]	; (800124c <HAL_RCC_GetPCLK1Freq+0x18>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001242:	4a03      	ldr	r2, [pc, #12]	; (8001250 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001244:	5cd3      	ldrb	r3, [r2, r3]
}
 8001246:	40d8      	lsrs	r0, r3
 8001248:	bd08      	pop	{r3, pc}
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800
 8001250:	0800291c 	.word	0x0800291c

08001254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001254:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001256:	f7ff ffe7 	bl	8001228 <HAL_RCC_GetHCLKFreq>
 800125a:	4b04      	ldr	r3, [pc, #16]	; (800126c <HAL_RCC_GetPCLK2Freq+0x18>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001262:	4a03      	ldr	r2, [pc, #12]	; (8001270 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001264:	5cd3      	ldrb	r3, [r2, r3]
}
 8001266:	40d8      	lsrs	r0, r3
 8001268:	bd08      	pop	{r3, pc}
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800
 8001270:	0800291c 	.word	0x0800291c

08001274 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001274:	230f      	movs	r3, #15
 8001276:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001278:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <HAL_RCC_GetClockConfig+0x34>)
 800127a:	689a      	ldr	r2, [r3, #8]
 800127c:	f002 0203 	and.w	r2, r2, #3
 8001280:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001288:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001290:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	08db      	lsrs	r3, r3, #3
 8001296:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800129a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <HAL_RCC_GetClockConfig+0x38>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 030f 	and.w	r3, r3, #15
 80012a4:	600b      	str	r3, [r1, #0]
 80012a6:	4770      	bx	lr
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40023c00 	.word	0x40023c00

080012b0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80012b0:	4770      	bx	lr

080012b2 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80012b2:	6802      	ldr	r2, [r0, #0]
 80012b4:	68d3      	ldr	r3, [r2, #12]
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80012bc:	6802      	ldr	r2, [r0, #0]
 80012be:	6893      	ldr	r3, [r2, #8]
 80012c0:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80012c4:	2b06      	cmp	r3, #6
 80012c6:	d003      	beq.n	80012d0 <HAL_TIM_Base_Start_IT+0x1e>
  {
    __HAL_TIM_ENABLE(htim);
 80012c8:	6813      	ldr	r3, [r2, #0]
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	6013      	str	r3, [r2, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80012d0:	2000      	movs	r0, #0
 80012d2:	4770      	bx	lr

080012d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012d4:	4770      	bx	lr

080012d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80012d6:	4770      	bx	lr

080012d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80012d8:	4770      	bx	lr

080012da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80012da:	4770      	bx	lr

080012dc <HAL_TIM_IRQHandler>:
{
 80012dc:	b510      	push	{r4, lr}
 80012de:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80012e0:	6803      	ldr	r3, [r0, #0]
 80012e2:	691a      	ldr	r2, [r3, #16]
 80012e4:	f012 0f02 	tst.w	r2, #2
 80012e8:	d011      	beq.n	800130e <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80012ea:	68da      	ldr	r2, [r3, #12]
 80012ec:	f012 0f02 	tst.w	r2, #2
 80012f0:	d00d      	beq.n	800130e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80012f2:	f06f 0202 	mvn.w	r2, #2
 80012f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80012fc:	6803      	ldr	r3, [r0, #0]
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	f013 0f03 	tst.w	r3, #3
 8001304:	d070      	beq.n	80013e8 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8001306:	f7ff ffe6 	bl	80012d6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800130a:	2300      	movs	r3, #0
 800130c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800130e:	6823      	ldr	r3, [r4, #0]
 8001310:	691a      	ldr	r2, [r3, #16]
 8001312:	f012 0f04 	tst.w	r2, #4
 8001316:	d012      	beq.n	800133e <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001318:	68da      	ldr	r2, [r3, #12]
 800131a:	f012 0f04 	tst.w	r2, #4
 800131e:	d00e      	beq.n	800133e <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001320:	f06f 0204 	mvn.w	r2, #4
 8001324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001326:	2302      	movs	r3, #2
 8001328:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800132a:	6823      	ldr	r3, [r4, #0]
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001332:	d05f      	beq.n	80013f4 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8001334:	4620      	mov	r0, r4
 8001336:	f7ff ffce 	bl	80012d6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800133a:	2300      	movs	r3, #0
 800133c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800133e:	6823      	ldr	r3, [r4, #0]
 8001340:	691a      	ldr	r2, [r3, #16]
 8001342:	f012 0f08 	tst.w	r2, #8
 8001346:	d012      	beq.n	800136e <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	f012 0f08 	tst.w	r2, #8
 800134e:	d00e      	beq.n	800136e <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001350:	f06f 0208 	mvn.w	r2, #8
 8001354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001356:	2304      	movs	r3, #4
 8001358:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800135a:	6823      	ldr	r3, [r4, #0]
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	f013 0f03 	tst.w	r3, #3
 8001362:	d04e      	beq.n	8001402 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8001364:	4620      	mov	r0, r4
 8001366:	f7ff ffb6 	bl	80012d6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800136a:	2300      	movs	r3, #0
 800136c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800136e:	6823      	ldr	r3, [r4, #0]
 8001370:	691a      	ldr	r2, [r3, #16]
 8001372:	f012 0f10 	tst.w	r2, #16
 8001376:	d012      	beq.n	800139e <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001378:	68da      	ldr	r2, [r3, #12]
 800137a:	f012 0f10 	tst.w	r2, #16
 800137e:	d00e      	beq.n	800139e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001380:	f06f 0210 	mvn.w	r2, #16
 8001384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001386:	2308      	movs	r3, #8
 8001388:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800138a:	6823      	ldr	r3, [r4, #0]
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001392:	d03d      	beq.n	8001410 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8001394:	4620      	mov	r0, r4
 8001396:	f7ff ff9e 	bl	80012d6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800139a:	2300      	movs	r3, #0
 800139c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800139e:	6823      	ldr	r3, [r4, #0]
 80013a0:	691a      	ldr	r2, [r3, #16]
 80013a2:	f012 0f01 	tst.w	r2, #1
 80013a6:	d003      	beq.n	80013b0 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80013a8:	68da      	ldr	r2, [r3, #12]
 80013aa:	f012 0f01 	tst.w	r2, #1
 80013ae:	d136      	bne.n	800141e <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80013b0:	6823      	ldr	r3, [r4, #0]
 80013b2:	691a      	ldr	r2, [r3, #16]
 80013b4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80013b8:	d003      	beq.n	80013c2 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	f012 0f80 	tst.w	r2, #128	; 0x80
 80013c0:	d134      	bne.n	800142c <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80013c2:	6823      	ldr	r3, [r4, #0]
 80013c4:	691a      	ldr	r2, [r3, #16]
 80013c6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80013ca:	d003      	beq.n	80013d4 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80013cc:	68da      	ldr	r2, [r3, #12]
 80013ce:	f012 0f40 	tst.w	r2, #64	; 0x40
 80013d2:	d132      	bne.n	800143a <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80013d4:	6823      	ldr	r3, [r4, #0]
 80013d6:	691a      	ldr	r2, [r3, #16]
 80013d8:	f012 0f20 	tst.w	r2, #32
 80013dc:	d003      	beq.n	80013e6 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80013de:	68da      	ldr	r2, [r3, #12]
 80013e0:	f012 0f20 	tst.w	r2, #32
 80013e4:	d130      	bne.n	8001448 <HAL_TIM_IRQHandler+0x16c>
 80013e6:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80013e8:	f7ff ff74 	bl	80012d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013ec:	4620      	mov	r0, r4
 80013ee:	f7ff ff73 	bl	80012d8 <HAL_TIM_PWM_PulseFinishedCallback>
 80013f2:	e78a      	b.n	800130a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013f4:	4620      	mov	r0, r4
 80013f6:	f7ff ff6d 	bl	80012d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013fa:	4620      	mov	r0, r4
 80013fc:	f7ff ff6c 	bl	80012d8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001400:	e79b      	b.n	800133a <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001402:	4620      	mov	r0, r4
 8001404:	f7ff ff66 	bl	80012d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001408:	4620      	mov	r0, r4
 800140a:	f7ff ff65 	bl	80012d8 <HAL_TIM_PWM_PulseFinishedCallback>
 800140e:	e7ac      	b.n	800136a <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001410:	4620      	mov	r0, r4
 8001412:	f7ff ff5f 	bl	80012d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001416:	4620      	mov	r0, r4
 8001418:	f7ff ff5e 	bl	80012d8 <HAL_TIM_PWM_PulseFinishedCallback>
 800141c:	e7bd      	b.n	800139a <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800141e:	f06f 0201 	mvn.w	r2, #1
 8001422:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001424:	4620      	mov	r0, r4
 8001426:	f7ff f9c3 	bl	80007b0 <HAL_TIM_PeriodElapsedCallback>
 800142a:	e7c1      	b.n	80013b0 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800142c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001430:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001432:	4620      	mov	r0, r4
 8001434:	f000 f890 	bl	8001558 <HAL_TIMEx_BreakCallback>
 8001438:	e7c3      	b.n	80013c2 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800143a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800143e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001440:	4620      	mov	r0, r4
 8001442:	f7ff ff4a 	bl	80012da <HAL_TIM_TriggerCallback>
 8001446:	e7c5      	b.n	80013d4 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001448:	f06f 0220 	mvn.w	r2, #32
 800144c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800144e:	4620      	mov	r0, r4
 8001450:	f000 f881 	bl	8001556 <HAL_TIMEx_CommutCallback>
}
 8001454:	e7c7      	b.n	80013e6 <HAL_TIM_IRQHandler+0x10a>
	...

08001458 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001458:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800145a:	4a31      	ldr	r2, [pc, #196]	; (8001520 <TIM_Base_SetConfig+0xc8>)
 800145c:	4290      	cmp	r0, r2
 800145e:	d012      	beq.n	8001486 <TIM_Base_SetConfig+0x2e>
 8001460:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001464:	d00f      	beq.n	8001486 <TIM_Base_SetConfig+0x2e>
 8001466:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800146a:	4290      	cmp	r0, r2
 800146c:	d00b      	beq.n	8001486 <TIM_Base_SetConfig+0x2e>
 800146e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001472:	4290      	cmp	r0, r2
 8001474:	d007      	beq.n	8001486 <TIM_Base_SetConfig+0x2e>
 8001476:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800147a:	4290      	cmp	r0, r2
 800147c:	d003      	beq.n	8001486 <TIM_Base_SetConfig+0x2e>
 800147e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001482:	4290      	cmp	r0, r2
 8001484:	d103      	bne.n	800148e <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800148a:	684a      	ldr	r2, [r1, #4]
 800148c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800148e:	4a24      	ldr	r2, [pc, #144]	; (8001520 <TIM_Base_SetConfig+0xc8>)
 8001490:	4290      	cmp	r0, r2
 8001492:	d02a      	beq.n	80014ea <TIM_Base_SetConfig+0x92>
 8001494:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001498:	d027      	beq.n	80014ea <TIM_Base_SetConfig+0x92>
 800149a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800149e:	4290      	cmp	r0, r2
 80014a0:	d023      	beq.n	80014ea <TIM_Base_SetConfig+0x92>
 80014a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014a6:	4290      	cmp	r0, r2
 80014a8:	d01f      	beq.n	80014ea <TIM_Base_SetConfig+0x92>
 80014aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014ae:	4290      	cmp	r0, r2
 80014b0:	d01b      	beq.n	80014ea <TIM_Base_SetConfig+0x92>
 80014b2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80014b6:	4290      	cmp	r0, r2
 80014b8:	d017      	beq.n	80014ea <TIM_Base_SetConfig+0x92>
 80014ba:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80014be:	4290      	cmp	r0, r2
 80014c0:	d013      	beq.n	80014ea <TIM_Base_SetConfig+0x92>
 80014c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014c6:	4290      	cmp	r0, r2
 80014c8:	d00f      	beq.n	80014ea <TIM_Base_SetConfig+0x92>
 80014ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014ce:	4290      	cmp	r0, r2
 80014d0:	d00b      	beq.n	80014ea <TIM_Base_SetConfig+0x92>
 80014d2:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80014d6:	4290      	cmp	r0, r2
 80014d8:	d007      	beq.n	80014ea <TIM_Base_SetConfig+0x92>
 80014da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014de:	4290      	cmp	r0, r2
 80014e0:	d003      	beq.n	80014ea <TIM_Base_SetConfig+0x92>
 80014e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014e6:	4290      	cmp	r0, r2
 80014e8:	d103      	bne.n	80014f2 <TIM_Base_SetConfig+0x9a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80014ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80014ee:	68ca      	ldr	r2, [r1, #12]
 80014f0:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80014f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014f6:	694a      	ldr	r2, [r1, #20]
 80014f8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80014fa:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80014fc:	688b      	ldr	r3, [r1, #8]
 80014fe:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001500:	680b      	ldr	r3, [r1, #0]
 8001502:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <TIM_Base_SetConfig+0xc8>)
 8001506:	4298      	cmp	r0, r3
 8001508:	d006      	beq.n	8001518 <TIM_Base_SetConfig+0xc0>
 800150a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800150e:	4298      	cmp	r0, r3
 8001510:	d002      	beq.n	8001518 <TIM_Base_SetConfig+0xc0>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001512:	2301      	movs	r3, #1
 8001514:	6143      	str	r3, [r0, #20]
 8001516:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001518:	690b      	ldr	r3, [r1, #16]
 800151a:	6303      	str	r3, [r0, #48]	; 0x30
 800151c:	e7f9      	b.n	8001512 <TIM_Base_SetConfig+0xba>
 800151e:	bf00      	nop
 8001520:	40010000 	.word	0x40010000

08001524 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001524:	b1a8      	cbz	r0, 8001552 <HAL_TIM_Base_Init+0x2e>
{
 8001526:	b510      	push	{r4, lr}
 8001528:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800152a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800152e:	b15b      	cbz	r3, 8001548 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8001530:	2302      	movs	r3, #2
 8001532:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001536:	1d21      	adds	r1, r4, #4
 8001538:	6820      	ldr	r0, [r4, #0]
 800153a:	f7ff ff8d 	bl	8001458 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800153e:	2301      	movs	r3, #1
 8001540:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001544:	2000      	movs	r0, #0
 8001546:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001548:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800154c:	f7ff feb0 	bl	80012b0 <HAL_TIM_Base_MspInit>
 8001550:	e7ee      	b.n	8001530 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001552:	2001      	movs	r0, #1
 8001554:	4770      	bx	lr

08001556 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001556:	4770      	bx	lr

08001558 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001558:	4770      	bx	lr
	...

0800155c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800155c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001560:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001562:	6802      	ldr	r2, [r0, #0]
 8001564:	6913      	ldr	r3, [r2, #16]
 8001566:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800156a:	68c1      	ldr	r1, [r0, #12]
 800156c:	430b      	orrs	r3, r1
 800156e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001570:	6883      	ldr	r3, [r0, #8]
 8001572:	6902      	ldr	r2, [r0, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	6942      	ldr	r2, [r0, #20]
 8001578:	4313      	orrs	r3, r2
 800157a:	69c2      	ldr	r2, [r0, #28]
 800157c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1,
 800157e:	6801      	ldr	r1, [r0, #0]
 8001580:	68ca      	ldr	r2, [r1, #12]
 8001582:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8001586:	f022 020c 	bic.w	r2, r2, #12
 800158a:	4313      	orrs	r3, r2
 800158c:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800158e:	6802      	ldr	r2, [r0, #0]
 8001590:	6953      	ldr	r3, [r2, #20]
 8001592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001596:	6981      	ldr	r1, [r0, #24]
 8001598:	430b      	orrs	r3, r1
 800159a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800159c:	69c3      	ldr	r3, [r0, #28]
 800159e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015a2:	d062      	beq.n	800166a <UART_SetConfig+0x10e>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80015a4:	f8d0 8000 	ldr.w	r8, [r0]
 80015a8:	4bbb      	ldr	r3, [pc, #748]	; (8001898 <UART_SetConfig+0x33c>)
 80015aa:	4598      	cmp	r8, r3
 80015ac:	f000 811b 	beq.w	80017e6 <UART_SetConfig+0x28a>
 80015b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015b4:	4598      	cmp	r8, r3
 80015b6:	f000 8116 	beq.w	80017e6 <UART_SetConfig+0x28a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80015ba:	f7ff fe3b 	bl	8001234 <HAL_RCC_GetPCLK1Freq>
 80015be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80015c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80015c6:	6865      	ldr	r5, [r4, #4]
 80015c8:	00ad      	lsls	r5, r5, #2
 80015ca:	fbb0 f5f5 	udiv	r5, r0, r5
 80015ce:	4fb3      	ldr	r7, [pc, #716]	; (800189c <UART_SetConfig+0x340>)
 80015d0:	fba7 3505 	umull	r3, r5, r7, r5
 80015d4:	096d      	lsrs	r5, r5, #5
 80015d6:	012e      	lsls	r6, r5, #4
 80015d8:	f7ff fe2c 	bl	8001234 <HAL_RCC_GetPCLK1Freq>
 80015dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80015e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80015e4:	6865      	ldr	r5, [r4, #4]
 80015e6:	00ad      	lsls	r5, r5, #2
 80015e8:	fbb0 faf5 	udiv	sl, r0, r5
 80015ec:	f7ff fe22 	bl	8001234 <HAL_RCC_GetPCLK1Freq>
 80015f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80015f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80015f8:	6865      	ldr	r5, [r4, #4]
 80015fa:	00ad      	lsls	r5, r5, #2
 80015fc:	fbb0 f5f5 	udiv	r5, r0, r5
 8001600:	fba7 3505 	umull	r3, r5, r7, r5
 8001604:	096d      	lsrs	r5, r5, #5
 8001606:	f04f 0964 	mov.w	r9, #100	; 0x64
 800160a:	fb09 a515 	mls	r5, r9, r5, sl
 800160e:	012d      	lsls	r5, r5, #4
 8001610:	3532      	adds	r5, #50	; 0x32
 8001612:	fba7 3505 	umull	r3, r5, r7, r5
 8001616:	096d      	lsrs	r5, r5, #5
 8001618:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 800161c:	4435      	add	r5, r6
 800161e:	f7ff fe09 	bl	8001234 <HAL_RCC_GetPCLK1Freq>
 8001622:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001626:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800162a:	6866      	ldr	r6, [r4, #4]
 800162c:	00b6      	lsls	r6, r6, #2
 800162e:	fbb0 f6f6 	udiv	r6, r0, r6
 8001632:	f7ff fdff 	bl	8001234 <HAL_RCC_GetPCLK1Freq>
 8001636:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800163a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800163e:	6863      	ldr	r3, [r4, #4]
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	fbb0 f0f3 	udiv	r0, r0, r3
 8001646:	fba7 3000 	umull	r3, r0, r7, r0
 800164a:	0940      	lsrs	r0, r0, #5
 800164c:	fb09 6910 	mls	r9, r9, r0, r6
 8001650:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001654:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001658:	fba7 3709 	umull	r3, r7, r7, r9
 800165c:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8001660:	442f      	add	r7, r5
 8001662:	f8c8 7008 	str.w	r7, [r8, #8]
 8001666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800166a:	f8d0 8000 	ldr.w	r8, [r0]
 800166e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001672:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8001676:	4598      	cmp	r8, r3
 8001678:	d05c      	beq.n	8001734 <UART_SetConfig+0x1d8>
 800167a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800167e:	4598      	cmp	r8, r3
 8001680:	d058      	beq.n	8001734 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001682:	f7ff fdd7 	bl	8001234 <HAL_RCC_GetPCLK1Freq>
 8001686:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800168a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800168e:	6865      	ldr	r5, [r4, #4]
 8001690:	006d      	lsls	r5, r5, #1
 8001692:	fbb0 f5f5 	udiv	r5, r0, r5
 8001696:	4f81      	ldr	r7, [pc, #516]	; (800189c <UART_SetConfig+0x340>)
 8001698:	fba7 3505 	umull	r3, r5, r7, r5
 800169c:	096d      	lsrs	r5, r5, #5
 800169e:	012e      	lsls	r6, r5, #4
 80016a0:	f7ff fdc8 	bl	8001234 <HAL_RCC_GetPCLK1Freq>
 80016a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80016a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80016ac:	6865      	ldr	r5, [r4, #4]
 80016ae:	006d      	lsls	r5, r5, #1
 80016b0:	fbb0 faf5 	udiv	sl, r0, r5
 80016b4:	f7ff fdbe 	bl	8001234 <HAL_RCC_GetPCLK1Freq>
 80016b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80016bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80016c0:	6865      	ldr	r5, [r4, #4]
 80016c2:	006d      	lsls	r5, r5, #1
 80016c4:	fbb0 f5f5 	udiv	r5, r0, r5
 80016c8:	fba7 3505 	umull	r3, r5, r7, r5
 80016cc:	096d      	lsrs	r5, r5, #5
 80016ce:	f04f 0964 	mov.w	r9, #100	; 0x64
 80016d2:	fb09 a515 	mls	r5, r9, r5, sl
 80016d6:	00ed      	lsls	r5, r5, #3
 80016d8:	3532      	adds	r5, #50	; 0x32
 80016da:	fba7 3505 	umull	r3, r5, r7, r5
 80016de:	096d      	lsrs	r5, r5, #5
 80016e0:	006d      	lsls	r5, r5, #1
 80016e2:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 80016e6:	4435      	add	r5, r6
 80016e8:	f7ff fda4 	bl	8001234 <HAL_RCC_GetPCLK1Freq>
 80016ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80016f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80016f4:	6866      	ldr	r6, [r4, #4]
 80016f6:	0076      	lsls	r6, r6, #1
 80016f8:	fbb0 f6f6 	udiv	r6, r0, r6
 80016fc:	f7ff fd9a 	bl	8001234 <HAL_RCC_GetPCLK1Freq>
 8001700:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001704:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001708:	6863      	ldr	r3, [r4, #4]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001710:	fba7 2303 	umull	r2, r3, r7, r3
 8001714:	095b      	lsrs	r3, r3, #5
 8001716:	fb09 6913 	mls	r9, r9, r3, r6
 800171a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800171e:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001722:	fba7 3709 	umull	r3, r7, r7, r9
 8001726:	f3c7 1742 	ubfx	r7, r7, #5, #3
 800172a:	442f      	add	r7, r5
 800172c:	f8c8 7008 	str.w	r7, [r8, #8]
 8001730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001734:	f7ff fd8e 	bl	8001254 <HAL_RCC_GetPCLK2Freq>
 8001738:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800173c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001740:	6865      	ldr	r5, [r4, #4]
 8001742:	006d      	lsls	r5, r5, #1
 8001744:	fbb0 f5f5 	udiv	r5, r0, r5
 8001748:	4f54      	ldr	r7, [pc, #336]	; (800189c <UART_SetConfig+0x340>)
 800174a:	fba7 3505 	umull	r3, r5, r7, r5
 800174e:	096d      	lsrs	r5, r5, #5
 8001750:	012e      	lsls	r6, r5, #4
 8001752:	f7ff fd7f 	bl	8001254 <HAL_RCC_GetPCLK2Freq>
 8001756:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800175a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800175e:	6865      	ldr	r5, [r4, #4]
 8001760:	006d      	lsls	r5, r5, #1
 8001762:	fbb0 faf5 	udiv	sl, r0, r5
 8001766:	f7ff fd75 	bl	8001254 <HAL_RCC_GetPCLK2Freq>
 800176a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800176e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001772:	6865      	ldr	r5, [r4, #4]
 8001774:	006d      	lsls	r5, r5, #1
 8001776:	fbb0 f5f5 	udiv	r5, r0, r5
 800177a:	fba7 3505 	umull	r3, r5, r7, r5
 800177e:	096d      	lsrs	r5, r5, #5
 8001780:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001784:	fb09 a515 	mls	r5, r9, r5, sl
 8001788:	00ed      	lsls	r5, r5, #3
 800178a:	3532      	adds	r5, #50	; 0x32
 800178c:	fba7 3505 	umull	r3, r5, r7, r5
 8001790:	096d      	lsrs	r5, r5, #5
 8001792:	006d      	lsls	r5, r5, #1
 8001794:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8001798:	4435      	add	r5, r6
 800179a:	f7ff fd5b 	bl	8001254 <HAL_RCC_GetPCLK2Freq>
 800179e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80017a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80017a6:	6866      	ldr	r6, [r4, #4]
 80017a8:	0076      	lsls	r6, r6, #1
 80017aa:	fbb0 f6f6 	udiv	r6, r0, r6
 80017ae:	f7ff fd51 	bl	8001254 <HAL_RCC_GetPCLK2Freq>
 80017b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80017b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80017ba:	6863      	ldr	r3, [r4, #4]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c2:	fba7 2303 	umull	r2, r3, r7, r3
 80017c6:	095b      	lsrs	r3, r3, #5
 80017c8:	fb09 6913 	mls	r9, r9, r3, r6
 80017cc:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80017d0:	f109 0932 	add.w	r9, r9, #50	; 0x32
 80017d4:	fba7 3709 	umull	r3, r7, r7, r9
 80017d8:	f3c7 1742 	ubfx	r7, r7, #5, #3
 80017dc:	442f      	add	r7, r5
 80017de:	f8c8 7008 	str.w	r7, [r8, #8]
 80017e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80017e6:	f7ff fd35 	bl	8001254 <HAL_RCC_GetPCLK2Freq>
 80017ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80017ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80017f2:	6865      	ldr	r5, [r4, #4]
 80017f4:	00ad      	lsls	r5, r5, #2
 80017f6:	fbb0 f5f5 	udiv	r5, r0, r5
 80017fa:	4f28      	ldr	r7, [pc, #160]	; (800189c <UART_SetConfig+0x340>)
 80017fc:	fba7 3505 	umull	r3, r5, r7, r5
 8001800:	096d      	lsrs	r5, r5, #5
 8001802:	012e      	lsls	r6, r5, #4
 8001804:	f7ff fd26 	bl	8001254 <HAL_RCC_GetPCLK2Freq>
 8001808:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800180c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001810:	6865      	ldr	r5, [r4, #4]
 8001812:	00ad      	lsls	r5, r5, #2
 8001814:	fbb0 faf5 	udiv	sl, r0, r5
 8001818:	f7ff fd1c 	bl	8001254 <HAL_RCC_GetPCLK2Freq>
 800181c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001820:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001824:	6865      	ldr	r5, [r4, #4]
 8001826:	00ad      	lsls	r5, r5, #2
 8001828:	fbb0 f5f5 	udiv	r5, r0, r5
 800182c:	fba7 3505 	umull	r3, r5, r7, r5
 8001830:	096d      	lsrs	r5, r5, #5
 8001832:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001836:	fb09 a515 	mls	r5, r9, r5, sl
 800183a:	012d      	lsls	r5, r5, #4
 800183c:	3532      	adds	r5, #50	; 0x32
 800183e:	fba7 3505 	umull	r3, r5, r7, r5
 8001842:	096d      	lsrs	r5, r5, #5
 8001844:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8001848:	4435      	add	r5, r6
 800184a:	f7ff fd03 	bl	8001254 <HAL_RCC_GetPCLK2Freq>
 800184e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001852:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001856:	6866      	ldr	r6, [r4, #4]
 8001858:	00b6      	lsls	r6, r6, #2
 800185a:	fbb0 f6f6 	udiv	r6, r0, r6
 800185e:	f7ff fcf9 	bl	8001254 <HAL_RCC_GetPCLK2Freq>
 8001862:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001866:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800186a:	6863      	ldr	r3, [r4, #4]
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001872:	fba7 2303 	umull	r2, r3, r7, r3
 8001876:	095b      	lsrs	r3, r3, #5
 8001878:	fb09 6913 	mls	r9, r9, r3, r6
 800187c:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001880:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001884:	fba7 3709 	umull	r3, r7, r7, r9
 8001888:	f3c7 1743 	ubfx	r7, r7, #5, #4
 800188c:	442f      	add	r7, r5
 800188e:	f8c8 7008 	str.w	r7, [r8, #8]
 8001892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001896:	bf00      	nop
 8001898:	40011000 	.word	0x40011000
 800189c:	51eb851f 	.word	0x51eb851f

080018a0 <UART_WaitOnFlagUntilTimeout>:
{
 80018a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018a4:	4605      	mov	r5, r0
 80018a6:	460f      	mov	r7, r1
 80018a8:	4616      	mov	r6, r2
 80018aa:	4698      	mov	r8, r3
 80018ac:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018ae:	682b      	ldr	r3, [r5, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	ea37 0303 	bics.w	r3, r7, r3
 80018b6:	bf0c      	ite	eq
 80018b8:	2301      	moveq	r3, #1
 80018ba:	2300      	movne	r3, #0
 80018bc:	42b3      	cmp	r3, r6
 80018be:	d11e      	bne.n	80018fe <UART_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 80018c0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80018c4:	d0f3      	beq.n	80018ae <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80018c6:	b12c      	cbz	r4, 80018d4 <UART_WaitOnFlagUntilTimeout+0x34>
 80018c8:	f7ff f872 	bl	80009b0 <HAL_GetTick>
 80018cc:	eba0 0008 	sub.w	r0, r0, r8
 80018d0:	4284      	cmp	r4, r0
 80018d2:	d2ec      	bcs.n	80018ae <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018d4:	682a      	ldr	r2, [r5, #0]
 80018d6:	68d3      	ldr	r3, [r2, #12]
 80018d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80018dc:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018de:	682a      	ldr	r2, [r5, #0]
 80018e0:	6953      	ldr	r3, [r2, #20]
 80018e2:	f023 0301 	bic.w	r3, r3, #1
 80018e6:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80018e8:	2320      	movs	r3, #32
 80018ea:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80018ee:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80018f2:	2300      	movs	r3, #0
 80018f4:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 80018f8:	2003      	movs	r0, #3
 80018fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 80018fe:	2000      	movs	r0, #0
}
 8001900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001904 <HAL_UART_Init>:
  if (huart == NULL)
 8001904:	b358      	cbz	r0, 800195e <HAL_UART_Init+0x5a>
{
 8001906:	b510      	push	{r4, lr}
 8001908:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800190a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800190e:	b30b      	cbz	r3, 8001954 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001910:	2324      	movs	r3, #36	; 0x24
 8001912:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001916:	6822      	ldr	r2, [r4, #0]
 8001918:	68d3      	ldr	r3, [r2, #12]
 800191a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800191e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001920:	4620      	mov	r0, r4
 8001922:	f7ff fe1b 	bl	800155c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001926:	6822      	ldr	r2, [r4, #0]
 8001928:	6913      	ldr	r3, [r2, #16]
 800192a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800192e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001930:	6822      	ldr	r2, [r4, #0]
 8001932:	6953      	ldr	r3, [r2, #20]
 8001934:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001938:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800193a:	6822      	ldr	r2, [r4, #0]
 800193c:	68d3      	ldr	r3, [r2, #12]
 800193e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001942:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001944:	2000      	movs	r0, #0
 8001946:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001948:	2320      	movs	r3, #32
 800194a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800194e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001952:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001954:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001958:	f7fe ff58 	bl	800080c <HAL_UART_MspInit>
 800195c:	e7d8      	b.n	8001910 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800195e:	2001      	movs	r0, #1
 8001960:	4770      	bx	lr

08001962 <HAL_UART_Transmit>:
{
 8001962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800196a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b20      	cmp	r3, #32
 8001972:	d004      	beq.n	800197e <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 8001974:	2302      	movs	r3, #2
}
 8001976:	4618      	mov	r0, r3
 8001978:	b002      	add	sp, #8
 800197a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800197e:	4604      	mov	r4, r0
 8001980:	460d      	mov	r5, r1
 8001982:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001984:	2900      	cmp	r1, #0
 8001986:	d055      	beq.n	8001a34 <HAL_UART_Transmit+0xd2>
 8001988:	2a00      	cmp	r2, #0
 800198a:	d055      	beq.n	8001a38 <HAL_UART_Transmit+0xd6>
    __HAL_LOCK(huart);
 800198c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001990:	2b01      	cmp	r3, #1
 8001992:	d101      	bne.n	8001998 <HAL_UART_Transmit+0x36>
 8001994:	2302      	movs	r3, #2
 8001996:	e7ee      	b.n	8001976 <HAL_UART_Transmit+0x14>
 8001998:	2301      	movs	r3, #1
 800199a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800199e:	2300      	movs	r3, #0
 80019a0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019a2:	2321      	movs	r3, #33	; 0x21
 80019a4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80019a8:	f7ff f802 	bl	80009b0 <HAL_GetTick>
 80019ac:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80019ae:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80019b2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80019b6:	e010      	b.n	80019da <HAL_UART_Transmit+0x78>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019b8:	9600      	str	r6, [sp, #0]
 80019ba:	463b      	mov	r3, r7
 80019bc:	2200      	movs	r2, #0
 80019be:	2180      	movs	r1, #128	; 0x80
 80019c0:	4620      	mov	r0, r4
 80019c2:	f7ff ff6d 	bl	80018a0 <UART_WaitOnFlagUntilTimeout>
 80019c6:	2800      	cmp	r0, #0
 80019c8:	d138      	bne.n	8001a3c <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80019ca:	6822      	ldr	r2, [r4, #0]
 80019cc:	882b      	ldrh	r3, [r5, #0]
 80019ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019d2:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80019d4:	6923      	ldr	r3, [r4, #16]
 80019d6:	b9cb      	cbnz	r3, 8001a0c <HAL_UART_Transmit+0xaa>
          pData += 2U;
 80019d8:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 80019da:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80019dc:	b29b      	uxth	r3, r3
 80019de:	b1bb      	cbz	r3, 8001a10 <HAL_UART_Transmit+0xae>
      huart->TxXferCount--;
 80019e0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	3b01      	subs	r3, #1
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80019ea:	68a3      	ldr	r3, [r4, #8]
 80019ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019f0:	d0e2      	beq.n	80019b8 <HAL_UART_Transmit+0x56>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019f2:	9600      	str	r6, [sp, #0]
 80019f4:	463b      	mov	r3, r7
 80019f6:	2200      	movs	r2, #0
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	4620      	mov	r0, r4
 80019fc:	f7ff ff50 	bl	80018a0 <UART_WaitOnFlagUntilTimeout>
 8001a00:	b9f0      	cbnz	r0, 8001a40 <HAL_UART_Transmit+0xde>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001a02:	6823      	ldr	r3, [r4, #0]
 8001a04:	782a      	ldrb	r2, [r5, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	3501      	adds	r5, #1
 8001a0a:	e7e6      	b.n	80019da <HAL_UART_Transmit+0x78>
          pData += 1U;
 8001a0c:	3501      	adds	r5, #1
 8001a0e:	e7e4      	b.n	80019da <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a10:	9600      	str	r6, [sp, #0]
 8001a12:	463b      	mov	r3, r7
 8001a14:	2200      	movs	r2, #0
 8001a16:	2140      	movs	r1, #64	; 0x40
 8001a18:	4620      	mov	r0, r4
 8001a1a:	f7ff ff41 	bl	80018a0 <UART_WaitOnFlagUntilTimeout>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	b108      	cbz	r0, 8001a26 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e7a7      	b.n	8001976 <HAL_UART_Transmit+0x14>
    huart->gState = HAL_UART_STATE_READY;
 8001a26:	2220      	movs	r2, #32
 8001a28:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8001a32:	e7a0      	b.n	8001976 <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e79e      	b.n	8001976 <HAL_UART_Transmit+0x14>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e79c      	b.n	8001976 <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e79a      	b.n	8001976 <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e798      	b.n	8001976 <HAL_UART_Transmit+0x14>

08001a44 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8001a44:	2884      	cmp	r0, #132	; 0x84
 8001a46:	d001      	beq.n	8001a4c <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8001a48:	3003      	adds	r0, #3
 8001a4a:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001a4c:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8001a4e:	4770      	bx	lr

08001a50 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001a50:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001a52:	f000 fd2b 	bl	80024ac <vTaskStartScheduler>
  
  return osOK;
}
 8001a56:	2000      	movs	r0, #0
 8001a58:	bd08      	pop	{r3, pc}

08001a5a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001a5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	4604      	mov	r4, r0
 8001a62:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001a64:	6945      	ldr	r5, [r0, #20]
 8001a66:	b1bd      	cbz	r5, 8001a98 <osThreadCreate+0x3e>
 8001a68:	6986      	ldr	r6, [r0, #24]
 8001a6a:	b1ae      	cbz	r6, 8001a98 <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a6c:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8001a70:	f8d0 9000 	ldr.w	r9, [r0]
 8001a74:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8001a78:	f7ff ffe4 	bl	8001a44 <makeFreeRtosPriority>
 8001a7c:	6922      	ldr	r2, [r4, #16]
 8001a7e:	9602      	str	r6, [sp, #8]
 8001a80:	9501      	str	r5, [sp, #4]
 8001a82:	9000      	str	r0, [sp, #0]
 8001a84:	463b      	mov	r3, r7
 8001a86:	4649      	mov	r1, r9
 8001a88:	4640      	mov	r0, r8
 8001a8a:	f000 fca3 	bl	80023d4 <xTaskCreateStatic>
 8001a8e:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001a90:	9805      	ldr	r0, [sp, #20]
}
 8001a92:	b007      	add	sp, #28
 8001a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a98:	6865      	ldr	r5, [r4, #4]
 8001a9a:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001a9c:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001aa0:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8001aa4:	f7ff ffce 	bl	8001a44 <makeFreeRtosPriority>
 8001aa8:	ab05      	add	r3, sp, #20
 8001aaa:	9301      	str	r3, [sp, #4]
 8001aac:	9000      	str	r0, [sp, #0]
 8001aae:	463b      	mov	r3, r7
 8001ab0:	fa1f f288 	uxth.w	r2, r8
 8001ab4:	4631      	mov	r1, r6
 8001ab6:	4628      	mov	r0, r5
 8001ab8:	f000 fcc5 	bl	8002446 <xTaskCreate>
 8001abc:	2801      	cmp	r0, #1
 8001abe:	d0e7      	beq.n	8001a90 <osThreadCreate+0x36>
      return NULL;
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	e7e6      	b.n	8001a92 <osThreadCreate+0x38>

08001ac4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001ac4:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	b900      	cbnz	r0, 8001acc <osDelay+0x8>
 8001aca:	2301      	movs	r3, #1
 8001acc:	4618      	mov	r0, r3
 8001ace:	f000 fe3f 	bl	8002750 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	bd08      	pop	{r3, pc}
	...

08001ad8 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001ad8:	4a12      	ldr	r2, [pc, #72]	; (8001b24 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001ada:	f012 0f07 	tst.w	r2, #7
 8001ade:	d01e      	beq.n	8001b1e <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001ae0:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001ae2:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001ae6:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 8001aea:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001aec:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001aee:	480e      	ldr	r0, [pc, #56]	; (8001b28 <prvHeapInit+0x50>)
 8001af0:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001af2:	2100      	movs	r1, #0
 8001af4:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001af6:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8001af8:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001afa:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8001afe:	480b      	ldr	r0, [pc, #44]	; (8001b2c <prvHeapInit+0x54>)
 8001b00:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8001b02:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001b04:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001b06:	1a99      	subs	r1, r3, r2
 8001b08:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001b0a:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <prvHeapInit+0x58>)
 8001b0e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b10:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <prvHeapInit+0x5c>)
 8001b12:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001b14:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b18:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <prvHeapInit+0x60>)
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001b1e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001b22:	e7e4      	b.n	8001aee <prvHeapInit+0x16>
 8001b24:	20000280 	.word	0x20000280
 8001b28:	20003e8c 	.word	0x20003e8c
 8001b2c:	2000027c 	.word	0x2000027c
 8001b30:	20003e88 	.word	0x20003e88
 8001b34:	20003e84 	.word	0x20003e84
 8001b38:	20003e80 	.word	0x20003e80

08001b3c <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001b3c:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001b3e:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <prvInsertBlockIntoFreeList+0x50>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	4282      	cmp	r2, r0
 8001b44:	d31b      	bcc.n	8001b7e <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001b46:	6859      	ldr	r1, [r3, #4]
 8001b48:	185c      	adds	r4, r3, r1
 8001b4a:	42a0      	cmp	r0, r4
 8001b4c:	d103      	bne.n	8001b56 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001b4e:	6840      	ldr	r0, [r0, #4]
 8001b50:	4401      	add	r1, r0
 8001b52:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001b54:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001b56:	6841      	ldr	r1, [r0, #4]
 8001b58:	1844      	adds	r4, r0, r1
 8001b5a:	42a2      	cmp	r2, r4
 8001b5c:	d113      	bne.n	8001b86 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001b5e:	4c0c      	ldr	r4, [pc, #48]	; (8001b90 <prvInsertBlockIntoFreeList+0x54>)
 8001b60:	6824      	ldr	r4, [r4, #0]
 8001b62:	42a2      	cmp	r2, r4
 8001b64:	d00d      	beq.n	8001b82 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001b66:	6852      	ldr	r2, [r2, #4]
 8001b68:	4411      	add	r1, r2
 8001b6a:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001b72:	4298      	cmp	r0, r3
 8001b74:	d000      	beq.n	8001b78 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001b76:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001b78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b7c:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001b7e:	4613      	mov	r3, r2
 8001b80:	e7de      	b.n	8001b40 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001b82:	6004      	str	r4, [r0, #0]
 8001b84:	e7f5      	b.n	8001b72 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001b86:	6002      	str	r2, [r0, #0]
 8001b88:	e7f3      	b.n	8001b72 <prvInsertBlockIntoFreeList+0x36>
 8001b8a:	bf00      	nop
 8001b8c:	20003e8c 	.word	0x20003e8c
 8001b90:	2000027c 	.word	0x2000027c

08001b94 <pvPortMalloc>:
{
 8001b94:	b570      	push	{r4, r5, r6, lr}
 8001b96:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8001b98:	f000 fcc4 	bl	8002524 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001b9c:	4b3a      	ldr	r3, [pc, #232]	; (8001c88 <pvPortMalloc+0xf4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	b1bb      	cbz	r3, 8001bd2 <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001ba2:	4b3a      	ldr	r3, [pc, #232]	; (8001c8c <pvPortMalloc+0xf8>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	421c      	tst	r4, r3
 8001ba8:	d163      	bne.n	8001c72 <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 8001baa:	b1ac      	cbz	r4, 8001bd8 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 8001bac:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001bae:	f014 0f07 	tst.w	r4, #7
 8001bb2:	d011      	beq.n	8001bd8 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001bb4:	f024 0407 	bic.w	r4, r4, #7
 8001bb8:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001bba:	f004 0307 	and.w	r3, r4, #7
 8001bbe:	b15b      	cbz	r3, 8001bd8 <pvPortMalloc+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bc4:	f383 8811 	msr	BASEPRI, r3
 8001bc8:	f3bf 8f6f 	isb	sy
 8001bcc:	f3bf 8f4f 	dsb	sy
 8001bd0:	e7fe      	b.n	8001bd0 <pvPortMalloc+0x3c>
			prvHeapInit();
 8001bd2:	f7ff ff81 	bl	8001ad8 <prvHeapInit>
 8001bd6:	e7e4      	b.n	8001ba2 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001bd8:	2c00      	cmp	r4, #0
 8001bda:	d04c      	beq.n	8001c76 <pvPortMalloc+0xe2>
 8001bdc:	4b2c      	ldr	r3, [pc, #176]	; (8001c90 <pvPortMalloc+0xfc>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	429c      	cmp	r4, r3
 8001be2:	d84a      	bhi.n	8001c7a <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 8001be4:	4b2b      	ldr	r3, [pc, #172]	; (8001c94 <pvPortMalloc+0x100>)
 8001be6:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001be8:	e001      	b.n	8001bee <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 8001bea:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8001bec:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001bee:	686a      	ldr	r2, [r5, #4]
 8001bf0:	4294      	cmp	r4, r2
 8001bf2:	d902      	bls.n	8001bfa <pvPortMalloc+0x66>
 8001bf4:	682a      	ldr	r2, [r5, #0]
 8001bf6:	2a00      	cmp	r2, #0
 8001bf8:	d1f7      	bne.n	8001bea <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 8001bfa:	4a23      	ldr	r2, [pc, #140]	; (8001c88 <pvPortMalloc+0xf4>)
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	4295      	cmp	r5, r2
 8001c00:	d03d      	beq.n	8001c7e <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001c02:	681e      	ldr	r6, [r3, #0]
 8001c04:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001c06:	682a      	ldr	r2, [r5, #0]
 8001c08:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001c0a:	686b      	ldr	r3, [r5, #4]
 8001c0c:	1b1b      	subs	r3, r3, r4
 8001c0e:	2b10      	cmp	r3, #16
 8001c10:	d910      	bls.n	8001c34 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001c12:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c14:	f010 0f07 	tst.w	r0, #7
 8001c18:	d008      	beq.n	8001c2c <pvPortMalloc+0x98>
 8001c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c1e:	f383 8811 	msr	BASEPRI, r3
 8001c22:	f3bf 8f6f 	isb	sy
 8001c26:	f3bf 8f4f 	dsb	sy
 8001c2a:	e7fe      	b.n	8001c2a <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001c2c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001c2e:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001c30:	f7ff ff84 	bl	8001b3c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001c34:	686a      	ldr	r2, [r5, #4]
 8001c36:	4916      	ldr	r1, [pc, #88]	; (8001c90 <pvPortMalloc+0xfc>)
 8001c38:	680b      	ldr	r3, [r1, #0]
 8001c3a:	1a9b      	subs	r3, r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001c3e:	4916      	ldr	r1, [pc, #88]	; (8001c98 <pvPortMalloc+0x104>)
 8001c40:	6809      	ldr	r1, [r1, #0]
 8001c42:	428b      	cmp	r3, r1
 8001c44:	d201      	bcs.n	8001c4a <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001c46:	4914      	ldr	r1, [pc, #80]	; (8001c98 <pvPortMalloc+0x104>)
 8001c48:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <pvPortMalloc+0xf8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8001c56:	f000 fcfd 	bl	8002654 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c5a:	f016 0f07 	tst.w	r6, #7
 8001c5e:	d010      	beq.n	8001c82 <pvPortMalloc+0xee>
 8001c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c64:	f383 8811 	msr	BASEPRI, r3
 8001c68:	f3bf 8f6f 	isb	sy
 8001c6c:	f3bf 8f4f 	dsb	sy
 8001c70:	e7fe      	b.n	8001c70 <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 8001c72:	2600      	movs	r6, #0
 8001c74:	e7ef      	b.n	8001c56 <pvPortMalloc+0xc2>
 8001c76:	2600      	movs	r6, #0
 8001c78:	e7ed      	b.n	8001c56 <pvPortMalloc+0xc2>
 8001c7a:	2600      	movs	r6, #0
 8001c7c:	e7eb      	b.n	8001c56 <pvPortMalloc+0xc2>
 8001c7e:	2600      	movs	r6, #0
 8001c80:	e7e9      	b.n	8001c56 <pvPortMalloc+0xc2>
}
 8001c82:	4630      	mov	r0, r6
 8001c84:	bd70      	pop	{r4, r5, r6, pc}
 8001c86:	bf00      	nop
 8001c88:	2000027c 	.word	0x2000027c
 8001c8c:	20003e80 	.word	0x20003e80
 8001c90:	20003e84 	.word	0x20003e84
 8001c94:	20003e8c 	.word	0x20003e8c
 8001c98:	20003e88 	.word	0x20003e88

08001c9c <vPortFree>:
	if( pv != NULL )
 8001c9c:	b380      	cbz	r0, 8001d00 <vPortFree+0x64>
{
 8001c9e:	b538      	push	{r3, r4, r5, lr}
 8001ca0:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8001ca2:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001ca6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8001caa:	4916      	ldr	r1, [pc, #88]	; (8001d04 <vPortFree+0x68>)
 8001cac:	6809      	ldr	r1, [r1, #0]
 8001cae:	420a      	tst	r2, r1
 8001cb0:	d108      	bne.n	8001cc4 <vPortFree+0x28>
 8001cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb6:	f383 8811 	msr	BASEPRI, r3
 8001cba:	f3bf 8f6f 	isb	sy
 8001cbe:	f3bf 8f4f 	dsb	sy
 8001cc2:	e7fe      	b.n	8001cc2 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001cc4:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8001cc8:	b140      	cbz	r0, 8001cdc <vPortFree+0x40>
 8001cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cce:	f383 8811 	msr	BASEPRI, r3
 8001cd2:	f3bf 8f6f 	isb	sy
 8001cd6:	f3bf 8f4f 	dsb	sy
 8001cda:	e7fe      	b.n	8001cda <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001cdc:	ea22 0201 	bic.w	r2, r2, r1
 8001ce0:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8001ce4:	f000 fc1e 	bl	8002524 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001ce8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8001cec:	4a06      	ldr	r2, [pc, #24]	; (8001d08 <vPortFree+0x6c>)
 8001cee:	6813      	ldr	r3, [r2, #0]
 8001cf0:	440b      	add	r3, r1
 8001cf2:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001cf4:	4628      	mov	r0, r5
 8001cf6:	f7ff ff21 	bl	8001b3c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8001cfa:	f000 fcab 	bl	8002654 <xTaskResumeAll>
 8001cfe:	bd38      	pop	{r3, r4, r5, pc}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20003e80 	.word	0x20003e80
 8001d08:	20003e84 	.word	0x20003e84

08001d0c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d0c:	f100 0308 	add.w	r3, r0, #8
 8001d10:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d12:	f04f 32ff 	mov.w	r2, #4294967295
 8001d16:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d18:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d1a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	6003      	str	r3, [r0, #0]
 8001d20:	4770      	bx	lr

08001d22 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	6103      	str	r3, [r0, #16]
 8001d26:	4770      	bx	lr

08001d28 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001d28:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001d2a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001d34:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d36:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001d38:	6803      	ldr	r3, [r0, #0]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	6003      	str	r3, [r0, #0]
 8001d3e:	4770      	bx	lr

08001d40 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d40:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001d42:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001d44:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001d48:	d002      	beq.n	8001d50 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d4a:	f100 0208 	add.w	r2, r0, #8
 8001d4e:	e002      	b.n	8001d56 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8001d50:	6902      	ldr	r2, [r0, #16]
 8001d52:	e004      	b.n	8001d5e <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d54:	461a      	mov	r2, r3
 8001d56:	6853      	ldr	r3, [r2, #4]
 8001d58:	681c      	ldr	r4, [r3, #0]
 8001d5a:	42a5      	cmp	r5, r4
 8001d5c:	d2fa      	bcs.n	8001d54 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001d5e:	6853      	ldr	r3, [r2, #4]
 8001d60:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d62:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d64:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001d66:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d68:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001d6a:	6803      	ldr	r3, [r0, #0]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	6003      	str	r3, [r0, #0]
}
 8001d70:	bc30      	pop	{r4, r5}
 8001d72:	4770      	bx	lr

08001d74 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001d74:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d76:	6842      	ldr	r2, [r0, #4]
 8001d78:	6881      	ldr	r1, [r0, #8]
 8001d7a:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d7c:	6882      	ldr	r2, [r0, #8]
 8001d7e:	6841      	ldr	r1, [r0, #4]
 8001d80:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	4290      	cmp	r0, r2
 8001d86:	d006      	beq.n	8001d96 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001d88:	2200      	movs	r2, #0
 8001d8a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	3a01      	subs	r2, #1
 8001d90:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001d92:	6818      	ldr	r0, [r3, #0]
}
 8001d94:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d96:	6882      	ldr	r2, [r0, #8]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	e7f5      	b.n	8001d88 <uxListRemove+0x14>

08001d9c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001d9c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001da2:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <prvTaskExitError+0x3c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001daa:	d008      	beq.n	8001dbe <prvTaskExitError+0x22>
 8001dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db0:	f383 8811 	msr	BASEPRI, r3
 8001db4:	f3bf 8f6f 	isb	sy
 8001db8:	f3bf 8f4f 	dsb	sy
 8001dbc:	e7fe      	b.n	8001dbc <prvTaskExitError+0x20>
 8001dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc2:	f383 8811 	msr	BASEPRI, r3
 8001dc6:	f3bf 8f6f 	isb	sy
 8001dca:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001dce:	9b01      	ldr	r3, [sp, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0fc      	beq.n	8001dce <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001dd4:	b002      	add	sp, #8
 8001dd6:	4770      	bx	lr
 8001dd8:	20000008 	.word	0x20000008

08001ddc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001ddc:	4808      	ldr	r0, [pc, #32]	; (8001e00 <prvPortStartFirstTask+0x24>)
 8001dde:	6800      	ldr	r0, [r0, #0]
 8001de0:	6800      	ldr	r0, [r0, #0]
 8001de2:	f380 8808 	msr	MSP, r0
 8001de6:	f04f 0000 	mov.w	r0, #0
 8001dea:	f380 8814 	msr	CONTROL, r0
 8001dee:	b662      	cpsie	i
 8001df0:	b661      	cpsie	f
 8001df2:	f3bf 8f4f 	dsb	sy
 8001df6:	f3bf 8f6f 	isb	sy
 8001dfa:	df00      	svc	0
 8001dfc:	bf00      	nop
 8001dfe:	0000      	.short	0x0000
 8001e00:	e000ed08 	.word	0xe000ed08

08001e04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001e04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001e14 <vPortEnableVFP+0x10>
 8001e08:	6801      	ldr	r1, [r0, #0]
 8001e0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001e0e:	6001      	str	r1, [r0, #0]
 8001e10:	4770      	bx	lr
 8001e12:	0000      	.short	0x0000
 8001e14:	e000ed88 	.word	0xe000ed88

08001e18 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001e18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e1c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001e20:	f021 0101 	bic.w	r1, r1, #1
 8001e24:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <pxPortInitialiseStack+0x28>)
 8001e2a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001e2e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001e32:	f06f 0302 	mvn.w	r3, #2
 8001e36:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001e3a:	3844      	subs	r0, #68	; 0x44
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	08001d9d 	.word	0x08001d9d
	...

08001e50 <SVC_Handler>:
	__asm volatile (
 8001e50:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <pxCurrentTCBConst2>)
 8001e52:	6819      	ldr	r1, [r3, #0]
 8001e54:	6808      	ldr	r0, [r1, #0]
 8001e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e5a:	f380 8809 	msr	PSP, r0
 8001e5e:	f3bf 8f6f 	isb	sy
 8001e62:	f04f 0000 	mov.w	r0, #0
 8001e66:	f380 8811 	msr	BASEPRI, r0
 8001e6a:	4770      	bx	lr
 8001e6c:	f3af 8000 	nop.w

08001e70 <pxCurrentTCBConst2>:
 8001e70:	20003e9c 	.word	0x20003e9c

08001e74 <vPortEnterCritical>:
 8001e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e78:	f383 8811 	msr	BASEPRI, r3
 8001e7c:	f3bf 8f6f 	isb	sy
 8001e80:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001e84:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <vPortEnterCritical+0x3c>)
 8001e86:	6813      	ldr	r3, [r2, #0]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d10d      	bne.n	8001eac <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <vPortEnterCritical+0x40>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001e98:	d008      	beq.n	8001eac <vPortEnterCritical+0x38>
 8001e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e9e:	f383 8811 	msr	BASEPRI, r3
 8001ea2:	f3bf 8f6f 	isb	sy
 8001ea6:	f3bf 8f4f 	dsb	sy
 8001eaa:	e7fe      	b.n	8001eaa <vPortEnterCritical+0x36>
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000008 	.word	0x20000008
 8001eb4:	e000ed04 	.word	0xe000ed04

08001eb8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001eb8:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <vPortExitCritical+0x28>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	b943      	cbnz	r3, 8001ed0 <vPortExitCritical+0x18>
 8001ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec2:	f383 8811 	msr	BASEPRI, r3
 8001ec6:	f3bf 8f6f 	isb	sy
 8001eca:	f3bf 8f4f 	dsb	sy
 8001ece:	e7fe      	b.n	8001ece <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	4a03      	ldr	r2, [pc, #12]	; (8001ee0 <vPortExitCritical+0x28>)
 8001ed4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001ed6:	b90b      	cbnz	r3, 8001edc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001ed8:	f383 8811 	msr	BASEPRI, r3
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	20000008 	.word	0x20000008
	...

08001ef0 <PendSV_Handler>:
	__asm volatile
 8001ef0:	f3ef 8009 	mrs	r0, PSP
 8001ef4:	f3bf 8f6f 	isb	sy
 8001ef8:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <pxCurrentTCBConst>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	f01e 0f10 	tst.w	lr, #16
 8001f00:	bf08      	it	eq
 8001f02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001f06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f0a:	6010      	str	r0, [r2, #0]
 8001f0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001f10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001f14:	f380 8811 	msr	BASEPRI, r0
 8001f18:	f3bf 8f4f 	dsb	sy
 8001f1c:	f3bf 8f6f 	isb	sy
 8001f20:	f000 fc3e 	bl	80027a0 <vTaskSwitchContext>
 8001f24:	f04f 0000 	mov.w	r0, #0
 8001f28:	f380 8811 	msr	BASEPRI, r0
 8001f2c:	bc09      	pop	{r0, r3}
 8001f2e:	6819      	ldr	r1, [r3, #0]
 8001f30:	6808      	ldr	r0, [r1, #0]
 8001f32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f36:	f01e 0f10 	tst.w	lr, #16
 8001f3a:	bf08      	it	eq
 8001f3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001f40:	f380 8809 	msr	PSP, r0
 8001f44:	f3bf 8f6f 	isb	sy
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	f3af 8000 	nop.w

08001f50 <pxCurrentTCBConst>:
 8001f50:	20003e9c 	.word	0x20003e9c

08001f54 <SysTick_Handler>:
{
 8001f54:	b508      	push	{r3, lr}
	__asm volatile
 8001f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f5a:	f383 8811 	msr	BASEPRI, r3
 8001f5e:	f3bf 8f6f 	isb	sy
 8001f62:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001f66:	f000 fae5 	bl	8002534 <xTaskIncrementTick>
 8001f6a:	b118      	cbz	r0, 8001f74 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001f6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f70:	4b02      	ldr	r3, [pc, #8]	; (8001f7c <SysTick_Handler+0x28>)
 8001f72:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001f74:	2300      	movs	r3, #0
 8001f76:	f383 8811 	msr	BASEPRI, r3
 8001f7a:	bd08      	pop	{r3, pc}
 8001f7c:	e000ed04 	.word	0xe000ed04

08001f80 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001f80:	4a08      	ldr	r2, [pc, #32]	; (8001fa4 <vPortSetupTimerInterrupt+0x24>)
 8001f82:	2300      	movs	r3, #0
 8001f84:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001f86:	4908      	ldr	r1, [pc, #32]	; (8001fa8 <vPortSetupTimerInterrupt+0x28>)
 8001f88:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001f8a:	4b08      	ldr	r3, [pc, #32]	; (8001fac <vPortSetupTimerInterrupt+0x2c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4908      	ldr	r1, [pc, #32]	; (8001fb0 <vPortSetupTimerInterrupt+0x30>)
 8001f90:	fba1 1303 	umull	r1, r3, r1, r3
 8001f94:	099b      	lsrs	r3, r3, #6
 8001f96:	3b01      	subs	r3, #1
 8001f98:	4906      	ldr	r1, [pc, #24]	; (8001fb4 <vPortSetupTimerInterrupt+0x34>)
 8001f9a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001f9c:	2307      	movs	r3, #7
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000e010 	.word	0xe000e010
 8001fa8:	e000e018 	.word	0xe000e018
 8001fac:	20000000 	.word	0x20000000
 8001fb0:	10624dd3 	.word	0x10624dd3
 8001fb4:	e000e014 	.word	0xe000e014

08001fb8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001fb8:	4b3a      	ldr	r3, [pc, #232]	; (80020a4 <xPortStartScheduler+0xec>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b3a      	ldr	r3, [pc, #232]	; (80020a8 <xPortStartScheduler+0xf0>)
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d108      	bne.n	8001fd4 <xPortStartScheduler+0x1c>
	__asm volatile
 8001fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc6:	f383 8811 	msr	BASEPRI, r3
 8001fca:	f3bf 8f6f 	isb	sy
 8001fce:	f3bf 8f4f 	dsb	sy
 8001fd2:	e7fe      	b.n	8001fd2 <xPortStartScheduler+0x1a>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001fd4:	4b33      	ldr	r3, [pc, #204]	; (80020a4 <xPortStartScheduler+0xec>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4b34      	ldr	r3, [pc, #208]	; (80020ac <xPortStartScheduler+0xf4>)
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d108      	bne.n	8001ff0 <xPortStartScheduler+0x38>
 8001fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe2:	f383 8811 	msr	BASEPRI, r3
 8001fe6:	f3bf 8f6f 	isb	sy
 8001fea:	f3bf 8f4f 	dsb	sy
 8001fee:	e7fe      	b.n	8001fee <xPortStartScheduler+0x36>
{
 8001ff0:	b510      	push	{r4, lr}
 8001ff2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001ff4:	4b2e      	ldr	r3, [pc, #184]	; (80020b0 <xPortStartScheduler+0xf8>)
 8001ff6:	781a      	ldrb	r2, [r3, #0]
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001ffc:	22ff      	movs	r2, #255	; 0xff
 8001ffe:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	b2db      	uxtb	r3, r3
 8002004:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002008:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800200c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002010:	4a28      	ldr	r2, [pc, #160]	; (80020b4 <xPortStartScheduler+0xfc>)
 8002012:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002014:	2207      	movs	r2, #7
 8002016:	4b28      	ldr	r3, [pc, #160]	; (80020b8 <xPortStartScheduler+0x100>)
 8002018:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800201a:	e009      	b.n	8002030 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 800201c:	4a26      	ldr	r2, [pc, #152]	; (80020b8 <xPortStartScheduler+0x100>)
 800201e:	6813      	ldr	r3, [r2, #0]
 8002020:	3b01      	subs	r3, #1
 8002022:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002024:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	b2db      	uxtb	r3, r3
 800202c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002030:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002034:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002038:	d1f0      	bne.n	800201c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800203a:	4b1f      	ldr	r3, [pc, #124]	; (80020b8 <xPortStartScheduler+0x100>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b03      	cmp	r3, #3
 8002040:	d008      	beq.n	8002054 <xPortStartScheduler+0x9c>
 8002042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002046:	f383 8811 	msr	BASEPRI, r3
 800204a:	f3bf 8f6f 	isb	sy
 800204e:	f3bf 8f4f 	dsb	sy
 8002052:	e7fe      	b.n	8002052 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002054:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002056:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800205a:	4a17      	ldr	r2, [pc, #92]	; (80020b8 <xPortStartScheduler+0x100>)
 800205c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800205e:	9b01      	ldr	r3, [sp, #4]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	4a13      	ldr	r2, [pc, #76]	; (80020b0 <xPortStartScheduler+0xf8>)
 8002064:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002066:	4b15      	ldr	r3, [pc, #84]	; (80020bc <xPortStartScheduler+0x104>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800206e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002076:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002078:	f7ff ff82 	bl	8001f80 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800207c:	2400      	movs	r4, #0
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <xPortStartScheduler+0x108>)
 8002080:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8002082:	f7ff febf 	bl	8001e04 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002086:	4a0f      	ldr	r2, [pc, #60]	; (80020c4 <xPortStartScheduler+0x10c>)
 8002088:	6813      	ldr	r3, [r2, #0]
 800208a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800208e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002090:	f7ff fea4 	bl	8001ddc <prvPortStartFirstTask>
	vTaskSwitchContext();
 8002094:	f000 fb84 	bl	80027a0 <vTaskSwitchContext>
	prvTaskExitError();
 8002098:	f7ff fe80 	bl	8001d9c <prvTaskExitError>
}
 800209c:	4620      	mov	r0, r4
 800209e:	b002      	add	sp, #8
 80020a0:	bd10      	pop	{r4, pc}
 80020a2:	bf00      	nop
 80020a4:	e000ed00 	.word	0xe000ed00
 80020a8:	410fc271 	.word	0x410fc271
 80020ac:	410fc270 	.word	0x410fc270
 80020b0:	e000e400 	.word	0xe000e400
 80020b4:	20003e94 	.word	0x20003e94
 80020b8:	20003e98 	.word	0x20003e98
 80020bc:	e000ed20 	.word	0xe000ed20
 80020c0:	20000008 	.word	0x20000008
 80020c4:	e000ef34 	.word	0xe000ef34

080020c8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020c8:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <prvResetNextTaskUnblockTime+0x2c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	b94b      	cbnz	r3, 80020e4 <prvResetNextTaskUnblockTime+0x1c>
 80020d0:	2301      	movs	r3, #1
 80020d2:	b94b      	cbnz	r3, 80020e8 <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80020d4:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <prvResetNextTaskUnblockTime+0x2c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <prvResetNextTaskUnblockTime+0x30>)
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020e4:	2300      	movs	r3, #0
 80020e6:	e7f4      	b.n	80020d2 <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
 80020e8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ec:	4b02      	ldr	r3, [pc, #8]	; (80020f8 <prvResetNextTaskUnblockTime+0x30>)
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20003ea0 	.word	0x20003ea0
 80020f8:	20003f74 	.word	0x20003f74

080020fc <prvInitialiseNewTask>:
{
 80020fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002100:	4680      	mov	r8, r0
 8002102:	4699      	mov	r9, r3
 8002104:	9d08      	ldr	r5, [sp, #32]
 8002106:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002108:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800210a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800210c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002110:	3a01      	subs	r2, #1
 8002112:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002116:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800211a:	2300      	movs	r3, #0
 800211c:	2b0f      	cmp	r3, #15
 800211e:	d807      	bhi.n	8002130 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002120:	5cc8      	ldrb	r0, [r1, r3]
 8002122:	18e2      	adds	r2, r4, r3
 8002124:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8002128:	5cca      	ldrb	r2, [r1, r3]
 800212a:	b10a      	cbz	r2, 8002130 <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800212c:	3301      	adds	r3, #1
 800212e:	e7f5      	b.n	800211c <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002130:	2300      	movs	r3, #0
 8002132:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002136:	2d06      	cmp	r5, #6
 8002138:	d900      	bls.n	800213c <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800213a:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 800213c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800213e:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002140:	f04f 0a00 	mov.w	sl, #0
 8002144:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002148:	1d20      	adds	r0, r4, #4
 800214a:	f7ff fdea 	bl	8001d22 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800214e:	f104 0018 	add.w	r0, r4, #24
 8002152:	f7ff fde6 	bl	8001d22 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002156:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002158:	f1c5 0507 	rsb	r5, r5, #7
 800215c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800215e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8002160:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002164:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002168:	464a      	mov	r2, r9
 800216a:	4641      	mov	r1, r8
 800216c:	4630      	mov	r0, r6
 800216e:	f7ff fe53 	bl	8001e18 <pxPortInitialiseStack>
 8002172:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002174:	b107      	cbz	r7, 8002178 <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002176:	603c      	str	r4, [r7, #0]
 8002178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800217c <prvInitialiseTaskLists>:
{
 800217c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800217e:	2400      	movs	r4, #0
 8002180:	e007      	b.n	8002192 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002182:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002186:	0093      	lsls	r3, r2, #2
 8002188:	480e      	ldr	r0, [pc, #56]	; (80021c4 <prvInitialiseTaskLists+0x48>)
 800218a:	4418      	add	r0, r3
 800218c:	f7ff fdbe 	bl	8001d0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002190:	3401      	adds	r4, #1
 8002192:	2c06      	cmp	r4, #6
 8002194:	d9f5      	bls.n	8002182 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8002196:	4d0c      	ldr	r5, [pc, #48]	; (80021c8 <prvInitialiseTaskLists+0x4c>)
 8002198:	4628      	mov	r0, r5
 800219a:	f7ff fdb7 	bl	8001d0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800219e:	4c0b      	ldr	r4, [pc, #44]	; (80021cc <prvInitialiseTaskLists+0x50>)
 80021a0:	4620      	mov	r0, r4
 80021a2:	f7ff fdb3 	bl	8001d0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80021a6:	480a      	ldr	r0, [pc, #40]	; (80021d0 <prvInitialiseTaskLists+0x54>)
 80021a8:	f7ff fdb0 	bl	8001d0c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80021ac:	4809      	ldr	r0, [pc, #36]	; (80021d4 <prvInitialiseTaskLists+0x58>)
 80021ae:	f7ff fdad 	bl	8001d0c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80021b2:	4809      	ldr	r0, [pc, #36]	; (80021d8 <prvInitialiseTaskLists+0x5c>)
 80021b4:	f7ff fdaa 	bl	8001d0c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <prvInitialiseTaskLists+0x60>)
 80021ba:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80021bc:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <prvInitialiseTaskLists+0x64>)
 80021be:	601c      	str	r4, [r3, #0]
 80021c0:	bd38      	pop	{r3, r4, r5, pc}
 80021c2:	bf00      	nop
 80021c4:	20003ea8 	.word	0x20003ea8
 80021c8:	20003f4c 	.word	0x20003f4c
 80021cc:	20003f60 	.word	0x20003f60
 80021d0:	20003f7c 	.word	0x20003f7c
 80021d4:	20003fa8 	.word	0x20003fa8
 80021d8:	20003f94 	.word	0x20003f94
 80021dc:	20003ea0 	.word	0x20003ea0
 80021e0:	20003ea4 	.word	0x20003ea4

080021e4 <prvAddNewTaskToReadyList>:
{
 80021e4:	b510      	push	{r4, lr}
 80021e6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80021e8:	f7ff fe44 	bl	8001e74 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80021ec:	4a20      	ldr	r2, [pc, #128]	; (8002270 <prvAddNewTaskToReadyList+0x8c>)
 80021ee:	6813      	ldr	r3, [r2, #0]
 80021f0:	3301      	adds	r3, #1
 80021f2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80021f4:	4b1f      	ldr	r3, [pc, #124]	; (8002274 <prvAddNewTaskToReadyList+0x90>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d031      	beq.n	8002260 <prvAddNewTaskToReadyList+0x7c>
			if( xSchedulerRunning == pdFALSE )
 80021fc:	4b1e      	ldr	r3, [pc, #120]	; (8002278 <prvAddNewTaskToReadyList+0x94>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	b93b      	cbnz	r3, 8002212 <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002202:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <prvAddNewTaskToReadyList+0x90>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002208:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800220a:	429a      	cmp	r2, r3
 800220c:	d801      	bhi.n	8002212 <prvAddNewTaskToReadyList+0x2e>
					pxCurrentTCB = pxNewTCB;
 800220e:	4b19      	ldr	r3, [pc, #100]	; (8002274 <prvAddNewTaskToReadyList+0x90>)
 8002210:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
 8002212:	4a1a      	ldr	r2, [pc, #104]	; (800227c <prvAddNewTaskToReadyList+0x98>)
 8002214:	6813      	ldr	r3, [r2, #0]
 8002216:	3301      	adds	r3, #1
 8002218:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800221a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800221c:	2201      	movs	r2, #1
 800221e:	409a      	lsls	r2, r3
 8002220:	4917      	ldr	r1, [pc, #92]	; (8002280 <prvAddNewTaskToReadyList+0x9c>)
 8002222:	6808      	ldr	r0, [r1, #0]
 8002224:	4302      	orrs	r2, r0
 8002226:	600a      	str	r2, [r1, #0]
 8002228:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800222c:	009a      	lsls	r2, r3, #2
 800222e:	1d21      	adds	r1, r4, #4
 8002230:	4814      	ldr	r0, [pc, #80]	; (8002284 <prvAddNewTaskToReadyList+0xa0>)
 8002232:	4410      	add	r0, r2
 8002234:	f7ff fd78 	bl	8001d28 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002238:	f7ff fe3e 	bl	8001eb8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800223c:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <prvAddNewTaskToReadyList+0x94>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	b16b      	cbz	r3, 800225e <prvAddNewTaskToReadyList+0x7a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002242:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <prvAddNewTaskToReadyList+0x90>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002248:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800224a:	429a      	cmp	r2, r3
 800224c:	d207      	bcs.n	800225e <prvAddNewTaskToReadyList+0x7a>
			taskYIELD_IF_USING_PREEMPTION();
 800224e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002252:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <prvAddNewTaskToReadyList+0xa4>)
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	f3bf 8f4f 	dsb	sy
 800225a:	f3bf 8f6f 	isb	sy
 800225e:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <prvAddNewTaskToReadyList+0x90>)
 8002262:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002264:	6813      	ldr	r3, [r2, #0]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d1d3      	bne.n	8002212 <prvAddNewTaskToReadyList+0x2e>
				prvInitialiseTaskLists();
 800226a:	f7ff ff87 	bl	800217c <prvInitialiseTaskLists>
 800226e:	e7d0      	b.n	8002212 <prvAddNewTaskToReadyList+0x2e>
 8002270:	20003f34 	.word	0x20003f34
 8002274:	20003e9c 	.word	0x20003e9c
 8002278:	20003f90 	.word	0x20003f90
 800227c:	20003f44 	.word	0x20003f44
 8002280:	20003f48 	.word	0x20003f48
 8002284:	20003ea8 	.word	0x20003ea8
 8002288:	e000ed04 	.word	0xe000ed04

0800228c <prvDeleteTCB>:
	{
 800228c:	b510      	push	{r4, lr}
 800228e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002290:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002294:	b163      	cbz	r3, 80022b0 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002296:	2b01      	cmp	r3, #1
 8002298:	d011      	beq.n	80022be <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800229a:	2b02      	cmp	r3, #2
 800229c:	d012      	beq.n	80022c4 <prvDeleteTCB+0x38>
 800229e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a2:	f383 8811 	msr	BASEPRI, r3
 80022a6:	f3bf 8f6f 	isb	sy
 80022aa:	f3bf 8f4f 	dsb	sy
 80022ae:	e7fe      	b.n	80022ae <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 80022b0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80022b2:	f7ff fcf3 	bl	8001c9c <vPortFree>
				vPortFree( pxTCB );
 80022b6:	4620      	mov	r0, r4
 80022b8:	f7ff fcf0 	bl	8001c9c <vPortFree>
 80022bc:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80022be:	f7ff fced 	bl	8001c9c <vPortFree>
 80022c2:	bd10      	pop	{r4, pc}
 80022c4:	bd10      	pop	{r4, pc}
	...

080022c8 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80022c8:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <prvCheckTasksWaitingTermination+0x40>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	b1d3      	cbz	r3, 8002304 <prvCheckTasksWaitingTermination+0x3c>
{
 80022ce:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 80022d0:	f7ff fdd0 	bl	8001e74 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80022d4:	4b0d      	ldr	r3, [pc, #52]	; (800230c <prvCheckTasksWaitingTermination+0x44>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022da:	1d20      	adds	r0, r4, #4
 80022dc:	f7ff fd4a 	bl	8001d74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80022e0:	4a0b      	ldr	r2, [pc, #44]	; (8002310 <prvCheckTasksWaitingTermination+0x48>)
 80022e2:	6813      	ldr	r3, [r2, #0]
 80022e4:	3b01      	subs	r3, #1
 80022e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80022e8:	4a07      	ldr	r2, [pc, #28]	; (8002308 <prvCheckTasksWaitingTermination+0x40>)
 80022ea:	6813      	ldr	r3, [r2, #0]
 80022ec:	3b01      	subs	r3, #1
 80022ee:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80022f0:	f7ff fde2 	bl	8001eb8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80022f4:	4620      	mov	r0, r4
 80022f6:	f7ff ffc9 	bl	800228c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80022fa:	4b03      	ldr	r3, [pc, #12]	; (8002308 <prvCheckTasksWaitingTermination+0x40>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1e6      	bne.n	80022d0 <prvCheckTasksWaitingTermination+0x8>
}
 8002302:	bd10      	pop	{r4, pc}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20003f38 	.word	0x20003f38
 800230c:	20003fa8 	.word	0x20003fa8
 8002310:	20003f34 	.word	0x20003f34

08002314 <prvIdleTask>:
{
 8002314:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8002316:	f7ff ffd7 	bl	80022c8 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <prvIdleTask+0x20>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d9f9      	bls.n	8002316 <prvIdleTask+0x2>
				taskYIELD();
 8002322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002326:	4b04      	ldr	r3, [pc, #16]	; (8002338 <prvIdleTask+0x24>)
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	f3bf 8f4f 	dsb	sy
 800232e:	f3bf 8f6f 	isb	sy
 8002332:	e7f0      	b.n	8002316 <prvIdleTask+0x2>
 8002334:	20003ea8 	.word	0x20003ea8
 8002338:	e000ed04 	.word	0xe000ed04

0800233c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800233c:	b570      	push	{r4, r5, r6, lr}
 800233e:	4604      	mov	r4, r0
 8002340:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002342:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002344:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002346:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <prvAddCurrentTaskToDelayedList+0x80>)
 8002348:	6818      	ldr	r0, [r3, #0]
 800234a:	3004      	adds	r0, #4
 800234c:	f7ff fd12 	bl	8001d74 <uxListRemove>
 8002350:	b950      	cbnz	r0, 8002368 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002352:	4b1a      	ldr	r3, [pc, #104]	; (80023bc <prvAddCurrentTaskToDelayedList+0x80>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002358:	2301      	movs	r3, #1
 800235a:	fa03 f202 	lsl.w	r2, r3, r2
 800235e:	4918      	ldr	r1, [pc, #96]	; (80023c0 <prvAddCurrentTaskToDelayedList+0x84>)
 8002360:	680b      	ldr	r3, [r1, #0]
 8002362:	ea23 0302 	bic.w	r3, r3, r2
 8002366:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002368:	f1b4 3fff 	cmp.w	r4, #4294967295
 800236c:	d013      	beq.n	8002396 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800236e:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002370:	4b12      	ldr	r3, [pc, #72]	; (80023bc <prvAddCurrentTaskToDelayedList+0x80>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8002376:	42a5      	cmp	r5, r4
 8002378:	d816      	bhi.n	80023a8 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800237a:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <prvAddCurrentTaskToDelayedList+0x88>)
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <prvAddCurrentTaskToDelayedList+0x80>)
 8002380:	6819      	ldr	r1, [r3, #0]
 8002382:	3104      	adds	r1, #4
 8002384:	f7ff fcdc 	bl	8001d40 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8002388:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <prvAddCurrentTaskToDelayedList+0x8c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	429c      	cmp	r4, r3
 800238e:	d201      	bcs.n	8002394 <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8002390:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <prvAddCurrentTaskToDelayedList+0x8c>)
 8002392:	601c      	str	r4, [r3, #0]
 8002394:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002396:	2e00      	cmp	r6, #0
 8002398:	d0e9      	beq.n	800236e <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800239a:	4b08      	ldr	r3, [pc, #32]	; (80023bc <prvAddCurrentTaskToDelayedList+0x80>)
 800239c:	6819      	ldr	r1, [r3, #0]
 800239e:	3104      	adds	r1, #4
 80023a0:	480a      	ldr	r0, [pc, #40]	; (80023cc <prvAddCurrentTaskToDelayedList+0x90>)
 80023a2:	f7ff fcc1 	bl	8001d28 <vListInsertEnd>
 80023a6:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023a8:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80023aa:	6818      	ldr	r0, [r3, #0]
 80023ac:	4b03      	ldr	r3, [pc, #12]	; (80023bc <prvAddCurrentTaskToDelayedList+0x80>)
 80023ae:	6819      	ldr	r1, [r3, #0]
 80023b0:	3104      	adds	r1, #4
 80023b2:	f7ff fcc5 	bl	8001d40 <vListInsert>
 80023b6:	bd70      	pop	{r4, r5, r6, pc}
 80023b8:	20003fbc 	.word	0x20003fbc
 80023bc:	20003e9c 	.word	0x20003e9c
 80023c0:	20003f48 	.word	0x20003f48
 80023c4:	20003ea0 	.word	0x20003ea0
 80023c8:	20003f74 	.word	0x20003f74
 80023cc:	20003f94 	.word	0x20003f94
 80023d0:	20003ea4 	.word	0x20003ea4

080023d4 <xTaskCreateStatic>:
	{
 80023d4:	b570      	push	{r4, r5, r6, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80023da:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 80023dc:	b175      	cbz	r5, 80023fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80023de:	b1b4      	cbz	r4, 800240e <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80023e0:	2654      	movs	r6, #84	; 0x54
 80023e2:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80023e4:	9e04      	ldr	r6, [sp, #16]
 80023e6:	2e54      	cmp	r6, #84	; 0x54
 80023e8:	d01a      	beq.n	8002420 <xTaskCreateStatic+0x4c>
 80023ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ee:	f383 8811 	msr	BASEPRI, r3
 80023f2:	f3bf 8f6f 	isb	sy
 80023f6:	f3bf 8f4f 	dsb	sy
 80023fa:	e7fe      	b.n	80023fa <xTaskCreateStatic+0x26>
 80023fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002400:	f383 8811 	msr	BASEPRI, r3
 8002404:	f3bf 8f6f 	isb	sy
 8002408:	f3bf 8f4f 	dsb	sy
 800240c:	e7fe      	b.n	800240c <xTaskCreateStatic+0x38>
 800240e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002412:	f383 8811 	msr	BASEPRI, r3
 8002416:	f3bf 8f6f 	isb	sy
 800241a:	f3bf 8f4f 	dsb	sy
 800241e:	e7fe      	b.n	800241e <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002420:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002422:	2502      	movs	r5, #2
 8002424:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002428:	2500      	movs	r5, #0
 800242a:	9503      	str	r5, [sp, #12]
 800242c:	9402      	str	r4, [sp, #8]
 800242e:	ad05      	add	r5, sp, #20
 8002430:	9501      	str	r5, [sp, #4]
 8002432:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002434:	9500      	str	r5, [sp, #0]
 8002436:	f7ff fe61 	bl	80020fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800243a:	4620      	mov	r0, r4
 800243c:	f7ff fed2 	bl	80021e4 <prvAddNewTaskToReadyList>
	}
 8002440:	9805      	ldr	r0, [sp, #20]
 8002442:	b006      	add	sp, #24
 8002444:	bd70      	pop	{r4, r5, r6, pc}

08002446 <xTaskCreate>:
	{
 8002446:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800244a:	b085      	sub	sp, #20
 800244c:	4606      	mov	r6, r0
 800244e:	460f      	mov	r7, r1
 8002450:	4615      	mov	r5, r2
 8002452:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002454:	0090      	lsls	r0, r2, #2
 8002456:	f7ff fb9d 	bl	8001b94 <pvPortMalloc>
			if( pxStack != NULL )
 800245a:	b310      	cbz	r0, 80024a2 <xTaskCreate+0x5c>
 800245c:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800245e:	2054      	movs	r0, #84	; 0x54
 8002460:	f7ff fb98 	bl	8001b94 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002464:	4604      	mov	r4, r0
 8002466:	b1c0      	cbz	r0, 800249a <xTaskCreate+0x54>
					pxNewTCB->pxStack = pxStack;
 8002468:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800246c:	b1dc      	cbz	r4, 80024a6 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800246e:	2300      	movs	r3, #0
 8002470:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002474:	9303      	str	r3, [sp, #12]
 8002476:	9402      	str	r4, [sp, #8]
 8002478:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800247a:	9301      	str	r3, [sp, #4]
 800247c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	4643      	mov	r3, r8
 8002482:	462a      	mov	r2, r5
 8002484:	4639      	mov	r1, r7
 8002486:	4630      	mov	r0, r6
 8002488:	f7ff fe38 	bl	80020fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800248c:	4620      	mov	r0, r4
 800248e:	f7ff fea9 	bl	80021e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002492:	2001      	movs	r0, #1
	}
 8002494:	b005      	add	sp, #20
 8002496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800249a:	4648      	mov	r0, r9
 800249c:	f7ff fbfe 	bl	8001c9c <vPortFree>
 80024a0:	e7e4      	b.n	800246c <xTaskCreate+0x26>
				pxNewTCB = NULL;
 80024a2:	2400      	movs	r4, #0
 80024a4:	e7e2      	b.n	800246c <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80024a6:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80024aa:	e7f3      	b.n	8002494 <xTaskCreate+0x4e>

080024ac <vTaskStartScheduler>:
{
 80024ac:	b510      	push	{r4, lr}
 80024ae:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80024b0:	2400      	movs	r4, #0
 80024b2:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80024b4:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80024b6:	aa07      	add	r2, sp, #28
 80024b8:	a906      	add	r1, sp, #24
 80024ba:	a805      	add	r0, sp, #20
 80024bc:	f7fe f84a 	bl	8000554 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80024c0:	9b05      	ldr	r3, [sp, #20]
 80024c2:	9302      	str	r3, [sp, #8]
 80024c4:	9b06      	ldr	r3, [sp, #24]
 80024c6:	9301      	str	r3, [sp, #4]
 80024c8:	9400      	str	r4, [sp, #0]
 80024ca:	4623      	mov	r3, r4
 80024cc:	9a07      	ldr	r2, [sp, #28]
 80024ce:	4910      	ldr	r1, [pc, #64]	; (8002510 <vTaskStartScheduler+0x64>)
 80024d0:	4810      	ldr	r0, [pc, #64]	; (8002514 <vTaskStartScheduler+0x68>)
 80024d2:	f7ff ff7f 	bl	80023d4 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80024d6:	b118      	cbz	r0, 80024e0 <vTaskStartScheduler+0x34>
			xReturn = pdPASS;
 80024d8:	2301      	movs	r3, #1
	if( xReturn == pdPASS )
 80024da:	b91b      	cbnz	r3, 80024e4 <vTaskStartScheduler+0x38>
}
 80024dc:	b008      	add	sp, #32
 80024de:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	e7fa      	b.n	80024da <vTaskStartScheduler+0x2e>
 80024e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e8:	f383 8811 	msr	BASEPRI, r3
 80024ec:	f3bf 8f6f 	isb	sy
 80024f0:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80024f4:	f04f 32ff 	mov.w	r2, #4294967295
 80024f8:	4b07      	ldr	r3, [pc, #28]	; (8002518 <vTaskStartScheduler+0x6c>)
 80024fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80024fc:	2201      	movs	r2, #1
 80024fe:	4b07      	ldr	r3, [pc, #28]	; (800251c <vTaskStartScheduler+0x70>)
 8002500:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002502:	2200      	movs	r2, #0
 8002504:	4b06      	ldr	r3, [pc, #24]	; (8002520 <vTaskStartScheduler+0x74>)
 8002506:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8002508:	f7ff fd56 	bl	8001fb8 <xPortStartScheduler>
 800250c:	e7e6      	b.n	80024dc <vTaskStartScheduler+0x30>
 800250e:	bf00      	nop
 8002510:	08002924 	.word	0x08002924
 8002514:	08002315 	.word	0x08002315
 8002518:	20003f74 	.word	0x20003f74
 800251c:	20003f90 	.word	0x20003f90
 8002520:	20003fbc 	.word	0x20003fbc

08002524 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002524:	4a02      	ldr	r2, [pc, #8]	; (8002530 <vTaskSuspendAll+0xc>)
 8002526:	6813      	ldr	r3, [r2, #0]
 8002528:	3301      	adds	r3, #1
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	20003f40 	.word	0x20003f40

08002534 <xTaskIncrementTick>:
{
 8002534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002536:	4b3c      	ldr	r3, [pc, #240]	; (8002628 <xTaskIncrementTick+0xf4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d168      	bne.n	8002610 <xTaskIncrementTick+0xdc>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800253e:	4b3b      	ldr	r3, [pc, #236]	; (800262c <xTaskIncrementTick+0xf8>)
 8002540:	681d      	ldr	r5, [r3, #0]
 8002542:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8002544:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002546:	b9c5      	cbnz	r5, 800257a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002548:	4b39      	ldr	r3, [pc, #228]	; (8002630 <xTaskIncrementTick+0xfc>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	b143      	cbz	r3, 8002562 <xTaskIncrementTick+0x2e>
 8002550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002554:	f383 8811 	msr	BASEPRI, r3
 8002558:	f3bf 8f6f 	isb	sy
 800255c:	f3bf 8f4f 	dsb	sy
 8002560:	e7fe      	b.n	8002560 <xTaskIncrementTick+0x2c>
 8002562:	4a33      	ldr	r2, [pc, #204]	; (8002630 <xTaskIncrementTick+0xfc>)
 8002564:	6811      	ldr	r1, [r2, #0]
 8002566:	4b33      	ldr	r3, [pc, #204]	; (8002634 <xTaskIncrementTick+0x100>)
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	6010      	str	r0, [r2, #0]
 800256c:	6019      	str	r1, [r3, #0]
 800256e:	4a32      	ldr	r2, [pc, #200]	; (8002638 <xTaskIncrementTick+0x104>)
 8002570:	6813      	ldr	r3, [r2, #0]
 8002572:	3301      	adds	r3, #1
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	f7ff fda7 	bl	80020c8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800257a:	4b30      	ldr	r3, [pc, #192]	; (800263c <xTaskIncrementTick+0x108>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	429d      	cmp	r5, r3
 8002580:	d23a      	bcs.n	80025f8 <xTaskIncrementTick+0xc4>
BaseType_t xSwitchRequired = pdFALSE;
 8002582:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002584:	4b2e      	ldr	r3, [pc, #184]	; (8002640 <xTaskIncrementTick+0x10c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800258e:	009a      	lsls	r2, r3, #2
 8002590:	4b2c      	ldr	r3, [pc, #176]	; (8002644 <xTaskIncrementTick+0x110>)
 8002592:	589b      	ldr	r3, [r3, r2]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d940      	bls.n	800261a <xTaskIncrementTick+0xe6>
				xSwitchRequired = pdTRUE;
 8002598:	2401      	movs	r4, #1
 800259a:	e03e      	b.n	800261a <xTaskIncrementTick+0xe6>
							xSwitchRequired = pdTRUE;
 800259c:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800259e:	4b24      	ldr	r3, [pc, #144]	; (8002630 <xTaskIncrementTick+0xfc>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	b353      	cbz	r3, 80025fc <xTaskIncrementTick+0xc8>
 80025a6:	2300      	movs	r3, #0
 80025a8:	bb53      	cbnz	r3, 8002600 <xTaskIncrementTick+0xcc>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80025aa:	4b21      	ldr	r3, [pc, #132]	; (8002630 <xTaskIncrementTick+0xfc>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80025b2:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 80025b4:	429d      	cmp	r5, r3
 80025b6:	d328      	bcc.n	800260a <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80025b8:	1d37      	adds	r7, r6, #4
 80025ba:	4638      	mov	r0, r7
 80025bc:	f7ff fbda 	bl	8001d74 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80025c0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80025c2:	b11b      	cbz	r3, 80025cc <xTaskIncrementTick+0x98>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80025c4:	f106 0018 	add.w	r0, r6, #24
 80025c8:	f7ff fbd4 	bl	8001d74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80025cc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80025ce:	2201      	movs	r2, #1
 80025d0:	409a      	lsls	r2, r3
 80025d2:	491d      	ldr	r1, [pc, #116]	; (8002648 <xTaskIncrementTick+0x114>)
 80025d4:	6808      	ldr	r0, [r1, #0]
 80025d6:	4302      	orrs	r2, r0
 80025d8:	600a      	str	r2, [r1, #0]
 80025da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80025de:	009a      	lsls	r2, r3, #2
 80025e0:	4639      	mov	r1, r7
 80025e2:	4818      	ldr	r0, [pc, #96]	; (8002644 <xTaskIncrementTick+0x110>)
 80025e4:	4410      	add	r0, r2
 80025e6:	f7ff fb9f 	bl	8001d28 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80025ea:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80025ec:	4b14      	ldr	r3, [pc, #80]	; (8002640 <xTaskIncrementTick+0x10c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d2d2      	bcs.n	800259c <xTaskIncrementTick+0x68>
 80025f6:	e7d2      	b.n	800259e <xTaskIncrementTick+0x6a>
 80025f8:	2400      	movs	r4, #0
 80025fa:	e7d0      	b.n	800259e <xTaskIncrementTick+0x6a>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80025fc:	2301      	movs	r3, #1
 80025fe:	e7d3      	b.n	80025a8 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002600:	f04f 32ff 	mov.w	r2, #4294967295
 8002604:	4b0d      	ldr	r3, [pc, #52]	; (800263c <xTaskIncrementTick+0x108>)
 8002606:	601a      	str	r2, [r3, #0]
					break;
 8002608:	e7bc      	b.n	8002584 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800260a:	4a0c      	ldr	r2, [pc, #48]	; (800263c <xTaskIncrementTick+0x108>)
 800260c:	6013      	str	r3, [r2, #0]
						break;
 800260e:	e7b9      	b.n	8002584 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8002610:	4a0e      	ldr	r2, [pc, #56]	; (800264c <xTaskIncrementTick+0x118>)
 8002612:	6813      	ldr	r3, [r2, #0]
 8002614:	3301      	adds	r3, #1
 8002616:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8002618:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800261a:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <xTaskIncrementTick+0x11c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	b103      	cbz	r3, 8002622 <xTaskIncrementTick+0xee>
			xSwitchRequired = pdTRUE;
 8002620:	2401      	movs	r4, #1
}
 8002622:	4620      	mov	r0, r4
 8002624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002626:	bf00      	nop
 8002628:	20003f40 	.word	0x20003f40
 800262c:	20003fbc 	.word	0x20003fbc
 8002630:	20003ea0 	.word	0x20003ea0
 8002634:	20003ea4 	.word	0x20003ea4
 8002638:	20003f78 	.word	0x20003f78
 800263c:	20003f74 	.word	0x20003f74
 8002640:	20003e9c 	.word	0x20003e9c
 8002644:	20003ea8 	.word	0x20003ea8
 8002648:	20003f48 	.word	0x20003f48
 800264c:	20003f3c 	.word	0x20003f3c
 8002650:	20003fc0 	.word	0x20003fc0

08002654 <xTaskResumeAll>:
{
 8002654:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8002656:	4b35      	ldr	r3, [pc, #212]	; (800272c <xTaskResumeAll+0xd8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	b943      	cbnz	r3, 800266e <xTaskResumeAll+0x1a>
 800265c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002660:	f383 8811 	msr	BASEPRI, r3
 8002664:	f3bf 8f6f 	isb	sy
 8002668:	f3bf 8f4f 	dsb	sy
 800266c:	e7fe      	b.n	800266c <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800266e:	f7ff fc01 	bl	8001e74 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002672:	4b2e      	ldr	r3, [pc, #184]	; (800272c <xTaskResumeAll+0xd8>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	3a01      	subs	r2, #1
 8002678:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d150      	bne.n	8002722 <xTaskResumeAll+0xce>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002680:	4b2b      	ldr	r3, [pc, #172]	; (8002730 <xTaskResumeAll+0xdc>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	b923      	cbnz	r3, 8002690 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 8002686:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002688:	f7ff fc16 	bl	8001eb8 <vPortExitCritical>
}
 800268c:	4620      	mov	r0, r4
 800268e:	bd38      	pop	{r3, r4, r5, pc}
 8002690:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002692:	4b28      	ldr	r3, [pc, #160]	; (8002734 <xTaskResumeAll+0xe0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	b31b      	cbz	r3, 80026e0 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002698:	4b26      	ldr	r3, [pc, #152]	; (8002734 <xTaskResumeAll+0xe0>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800269e:	f104 0018 	add.w	r0, r4, #24
 80026a2:	f7ff fb67 	bl	8001d74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026a6:	1d25      	adds	r5, r4, #4
 80026a8:	4628      	mov	r0, r5
 80026aa:	f7ff fb63 	bl	8001d74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80026ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80026b0:	2201      	movs	r2, #1
 80026b2:	409a      	lsls	r2, r3
 80026b4:	4920      	ldr	r1, [pc, #128]	; (8002738 <xTaskResumeAll+0xe4>)
 80026b6:	6808      	ldr	r0, [r1, #0]
 80026b8:	4302      	orrs	r2, r0
 80026ba:	600a      	str	r2, [r1, #0]
 80026bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80026c0:	009a      	lsls	r2, r3, #2
 80026c2:	4629      	mov	r1, r5
 80026c4:	481d      	ldr	r0, [pc, #116]	; (800273c <xTaskResumeAll+0xe8>)
 80026c6:	4410      	add	r0, r2
 80026c8:	f7ff fb2e 	bl	8001d28 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80026ce:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <xTaskResumeAll+0xec>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d3dc      	bcc.n	8002692 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 80026d8:	2201      	movs	r2, #1
 80026da:	4b1a      	ldr	r3, [pc, #104]	; (8002744 <xTaskResumeAll+0xf0>)
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	e7d8      	b.n	8002692 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 80026e0:	b10c      	cbz	r4, 80026e6 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 80026e2:	f7ff fcf1 	bl	80020c8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80026e6:	4b18      	ldr	r3, [pc, #96]	; (8002748 <xTaskResumeAll+0xf4>)
 80026e8:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80026ea:	b974      	cbnz	r4, 800270a <xTaskResumeAll+0xb6>
				if( xYieldPending != pdFALSE )
 80026ec:	4b15      	ldr	r3, [pc, #84]	; (8002744 <xTaskResumeAll+0xf0>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	b1cb      	cbz	r3, 8002726 <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
 80026f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026f6:	4b15      	ldr	r3, [pc, #84]	; (800274c <xTaskResumeAll+0xf8>)
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	f3bf 8f4f 	dsb	sy
 80026fe:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002702:	2401      	movs	r4, #1
 8002704:	e7c0      	b.n	8002688 <xTaskResumeAll+0x34>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002706:	3c01      	subs	r4, #1
 8002708:	d007      	beq.n	800271a <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
 800270a:	f7ff ff13 	bl	8002534 <xTaskIncrementTick>
 800270e:	2800      	cmp	r0, #0
 8002710:	d0f9      	beq.n	8002706 <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 8002712:	2201      	movs	r2, #1
 8002714:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <xTaskResumeAll+0xf0>)
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	e7f5      	b.n	8002706 <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 800271a:	2200      	movs	r2, #0
 800271c:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <xTaskResumeAll+0xf4>)
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	e7e4      	b.n	80026ec <xTaskResumeAll+0x98>
BaseType_t xAlreadyYielded = pdFALSE;
 8002722:	2400      	movs	r4, #0
 8002724:	e7b0      	b.n	8002688 <xTaskResumeAll+0x34>
 8002726:	2400      	movs	r4, #0
 8002728:	e7ae      	b.n	8002688 <xTaskResumeAll+0x34>
 800272a:	bf00      	nop
 800272c:	20003f40 	.word	0x20003f40
 8002730:	20003f34 	.word	0x20003f34
 8002734:	20003f7c 	.word	0x20003f7c
 8002738:	20003f48 	.word	0x20003f48
 800273c:	20003ea8 	.word	0x20003ea8
 8002740:	20003e9c 	.word	0x20003e9c
 8002744:	20003fc0 	.word	0x20003fc0
 8002748:	20003f3c 	.word	0x20003f3c
 800274c:	e000ed04 	.word	0xe000ed04

08002750 <vTaskDelay>:
	{
 8002750:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002752:	b1a8      	cbz	r0, 8002780 <vTaskDelay+0x30>
 8002754:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8002756:	4b10      	ldr	r3, [pc, #64]	; (8002798 <vTaskDelay+0x48>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	b143      	cbz	r3, 800276e <vTaskDelay+0x1e>
 800275c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002760:	f383 8811 	msr	BASEPRI, r3
 8002764:	f3bf 8f6f 	isb	sy
 8002768:	f3bf 8f4f 	dsb	sy
 800276c:	e7fe      	b.n	800276c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800276e:	f7ff fed9 	bl	8002524 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002772:	2100      	movs	r1, #0
 8002774:	4620      	mov	r0, r4
 8002776:	f7ff fde1 	bl	800233c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800277a:	f7ff ff6b 	bl	8002654 <xTaskResumeAll>
 800277e:	e000      	b.n	8002782 <vTaskDelay+0x32>
	BaseType_t xAlreadyYielded = pdFALSE;
 8002780:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 8002782:	b938      	cbnz	r0, 8002794 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8002784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002788:	4b04      	ldr	r3, [pc, #16]	; (800279c <vTaskDelay+0x4c>)
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	f3bf 8f4f 	dsb	sy
 8002790:	f3bf 8f6f 	isb	sy
 8002794:	bd10      	pop	{r4, pc}
 8002796:	bf00      	nop
 8002798:	20003f40 	.word	0x20003f40
 800279c:	e000ed04 	.word	0xe000ed04

080027a0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80027a0:	4b21      	ldr	r3, [pc, #132]	; (8002828 <vTaskSwitchContext+0x88>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	b9c3      	cbnz	r3, 80027d8 <vTaskSwitchContext+0x38>
		xYieldPending = pdFALSE;
 80027a6:	2200      	movs	r2, #0
 80027a8:	4b20      	ldr	r3, [pc, #128]	; (800282c <vTaskSwitchContext+0x8c>)
 80027aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80027ac:	4b20      	ldr	r3, [pc, #128]	; (8002830 <vTaskSwitchContext+0x90>)
 80027ae:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80027b0:	fab3 f383 	clz	r3, r3
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	f1c3 031f 	rsb	r3, r3, #31
 80027ba:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80027be:	008a      	lsls	r2, r1, #2
 80027c0:	491c      	ldr	r1, [pc, #112]	; (8002834 <vTaskSwitchContext+0x94>)
 80027c2:	588a      	ldr	r2, [r1, r2]
 80027c4:	b962      	cbnz	r2, 80027e0 <vTaskSwitchContext+0x40>
	__asm volatile
 80027c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ca:	f383 8811 	msr	BASEPRI, r3
 80027ce:	f3bf 8f6f 	isb	sy
 80027d2:	f3bf 8f4f 	dsb	sy
 80027d6:	e7fe      	b.n	80027d6 <vTaskSwitchContext+0x36>
		xYieldPending = pdTRUE;
 80027d8:	2201      	movs	r2, #1
 80027da:	4b14      	ldr	r3, [pc, #80]	; (800282c <vTaskSwitchContext+0x8c>)
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	4770      	bx	lr
{
 80027e0:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80027e2:	4814      	ldr	r0, [pc, #80]	; (8002834 <vTaskSwitchContext+0x94>)
 80027e4:	009a      	lsls	r2, r3, #2
 80027e6:	18d4      	adds	r4, r2, r3
 80027e8:	00a1      	lsls	r1, r4, #2
 80027ea:	4401      	add	r1, r0
 80027ec:	684c      	ldr	r4, [r1, #4]
 80027ee:	6864      	ldr	r4, [r4, #4]
 80027f0:	604c      	str	r4, [r1, #4]
 80027f2:	441a      	add	r2, r3
 80027f4:	0091      	lsls	r1, r2, #2
 80027f6:	3108      	adds	r1, #8
 80027f8:	4408      	add	r0, r1
 80027fa:	4284      	cmp	r4, r0
 80027fc:	d00b      	beq.n	8002816 <vTaskSwitchContext+0x76>
 80027fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002802:	009a      	lsls	r2, r3, #2
 8002804:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <vTaskSwitchContext+0x94>)
 8002806:	4413      	add	r3, r2
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <vTaskSwitchContext+0x98>)
 800280e:	601a      	str	r2, [r3, #0]
}
 8002810:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002814:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002816:	6860      	ldr	r0, [r4, #4]
 8002818:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800281c:	0091      	lsls	r1, r2, #2
 800281e:	4a05      	ldr	r2, [pc, #20]	; (8002834 <vTaskSwitchContext+0x94>)
 8002820:	440a      	add	r2, r1
 8002822:	6050      	str	r0, [r2, #4]
 8002824:	e7eb      	b.n	80027fe <vTaskSwitchContext+0x5e>
 8002826:	bf00      	nop
 8002828:	20003f40 	.word	0x20003f40
 800282c:	20003fc0 	.word	0x20003fc0
 8002830:	20003f48 	.word	0x20003f48
 8002834:	20003ea8 	.word	0x20003ea8
 8002838:	20003e9c 	.word	0x20003e9c

0800283c <__libc_init_array>:
 800283c:	b570      	push	{r4, r5, r6, lr}
 800283e:	4e0d      	ldr	r6, [pc, #52]	; (8002874 <__libc_init_array+0x38>)
 8002840:	4c0d      	ldr	r4, [pc, #52]	; (8002878 <__libc_init_array+0x3c>)
 8002842:	1ba4      	subs	r4, r4, r6
 8002844:	10a4      	asrs	r4, r4, #2
 8002846:	2500      	movs	r5, #0
 8002848:	42a5      	cmp	r5, r4
 800284a:	d109      	bne.n	8002860 <__libc_init_array+0x24>
 800284c:	4e0b      	ldr	r6, [pc, #44]	; (800287c <__libc_init_array+0x40>)
 800284e:	4c0c      	ldr	r4, [pc, #48]	; (8002880 <__libc_init_array+0x44>)
 8002850:	f000 f820 	bl	8002894 <_init>
 8002854:	1ba4      	subs	r4, r4, r6
 8002856:	10a4      	asrs	r4, r4, #2
 8002858:	2500      	movs	r5, #0
 800285a:	42a5      	cmp	r5, r4
 800285c:	d105      	bne.n	800286a <__libc_init_array+0x2e>
 800285e:	bd70      	pop	{r4, r5, r6, pc}
 8002860:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002864:	4798      	blx	r3
 8002866:	3501      	adds	r5, #1
 8002868:	e7ee      	b.n	8002848 <__libc_init_array+0xc>
 800286a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800286e:	4798      	blx	r3
 8002870:	3501      	adds	r5, #1
 8002872:	e7f2      	b.n	800285a <__libc_init_array+0x1e>
 8002874:	08002934 	.word	0x08002934
 8002878:	08002934 	.word	0x08002934
 800287c:	08002934 	.word	0x08002934
 8002880:	08002938 	.word	0x08002938

08002884 <memset>:
 8002884:	4402      	add	r2, r0
 8002886:	4603      	mov	r3, r0
 8002888:	4293      	cmp	r3, r2
 800288a:	d100      	bne.n	800288e <memset+0xa>
 800288c:	4770      	bx	lr
 800288e:	f803 1b01 	strb.w	r1, [r3], #1
 8002892:	e7f9      	b.n	8002888 <memset+0x4>

08002894 <_init>:
 8002894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002896:	bf00      	nop
 8002898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800289a:	bc08      	pop	{r3}
 800289c:	469e      	mov	lr, r3
 800289e:	4770      	bx	lr

080028a0 <_fini>:
 80028a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a2:	bf00      	nop
 80028a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028a6:	bc08      	pop	{r3}
 80028a8:	469e      	mov	lr, r3
 80028aa:	4770      	bx	lr
