
FreeRTOS_Example2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022a8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002458  08002458  00012458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080024d4  080024d4  000124d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080024dc  080024dc  000124dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080024e0  080024e0  000124e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080024e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00004040  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000404c  2000404c  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_line   000067eb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   00014162  00000000  00000000  00026827  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d49  00000000  00000000  0003a989  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cf8  00000000  00000000  0003d6d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f40  00000000  00000000  0003e3d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005655  00000000  00000000  0003f310  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00044965  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000025c8  00000000  00000000  000449e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00008686  00000000  00000000  00046fac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002440 	.word	0x08002440

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	08002440 	.word	0x08002440

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b97a 	b.w	80004fc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	468c      	mov	ip, r1
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	9e08      	ldr	r6, [sp, #32]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d151      	bne.n	80002d4 <__udivmoddi4+0xb4>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d96d      	bls.n	8000312 <__udivmoddi4+0xf2>
 8000236:	fab2 fe82 	clz	lr, r2
 800023a:	f1be 0f00 	cmp.w	lr, #0
 800023e:	d00b      	beq.n	8000258 <__udivmoddi4+0x38>
 8000240:	f1ce 0c20 	rsb	ip, lr, #32
 8000244:	fa01 f50e 	lsl.w	r5, r1, lr
 8000248:	fa20 fc0c 	lsr.w	ip, r0, ip
 800024c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000250:	ea4c 0c05 	orr.w	ip, ip, r5
 8000254:	fa00 f40e 	lsl.w	r4, r0, lr
 8000258:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800025c:	0c25      	lsrs	r5, r4, #16
 800025e:	fbbc f8fa 	udiv	r8, ip, sl
 8000262:	fa1f f987 	uxth.w	r9, r7
 8000266:	fb0a cc18 	mls	ip, sl, r8, ip
 800026a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026e:	fb08 f309 	mul.w	r3, r8, r9
 8000272:	42ab      	cmp	r3, r5
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x6c>
 8000276:	19ed      	adds	r5, r5, r7
 8000278:	f108 32ff 	add.w	r2, r8, #4294967295
 800027c:	f080 8123 	bcs.w	80004c6 <__udivmoddi4+0x2a6>
 8000280:	42ab      	cmp	r3, r5
 8000282:	f240 8120 	bls.w	80004c6 <__udivmoddi4+0x2a6>
 8000286:	f1a8 0802 	sub.w	r8, r8, #2
 800028a:	443d      	add	r5, r7
 800028c:	1aed      	subs	r5, r5, r3
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb5 f0fa 	udiv	r0, r5, sl
 8000294:	fb0a 5510 	mls	r5, sl, r0, r5
 8000298:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800029c:	fb00 f909 	mul.w	r9, r0, r9
 80002a0:	45a1      	cmp	r9, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x98>
 80002a4:	19e4      	adds	r4, r4, r7
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 810a 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80002ae:	45a1      	cmp	r9, r4
 80002b0:	f240 8107 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	eba4 0409 	sub.w	r4, r4, r9
 80002bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002c0:	2100      	movs	r1, #0
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d061      	beq.n	800038a <__udivmoddi4+0x16a>
 80002c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ca:	2300      	movs	r3, #0
 80002cc:	6034      	str	r4, [r6, #0]
 80002ce:	6073      	str	r3, [r6, #4]
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xc8>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d054      	beq.n	8000386 <__udivmoddi4+0x166>
 80002dc:	2100      	movs	r1, #0
 80002de:	e886 0021 	stmia.w	r6, {r0, r5}
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	f040 808e 	bne.w	800040e <__udivmoddi4+0x1ee>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xdc>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2d0>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	46ac      	mov	ip, r5
 8000306:	2e00      	cmp	r6, #0
 8000308:	d03f      	beq.n	800038a <__udivmoddi4+0x16a>
 800030a:	e886 1010 	stmia.w	r6, {r4, ip}
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	b912      	cbnz	r2, 800031a <__udivmoddi4+0xfa>
 8000314:	2701      	movs	r7, #1
 8000316:	fbb7 f7f2 	udiv	r7, r7, r2
 800031a:	fab7 fe87 	clz	lr, r7
 800031e:	f1be 0f00 	cmp.w	lr, #0
 8000322:	d134      	bne.n	800038e <__udivmoddi4+0x16e>
 8000324:	1beb      	subs	r3, r5, r7
 8000326:	0c3a      	lsrs	r2, r7, #16
 8000328:	fa1f fc87 	uxth.w	ip, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000332:	0c25      	lsrs	r5, r4, #16
 8000334:	fb02 3318 	mls	r3, r2, r8, r3
 8000338:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800033c:	fb0c f308 	mul.w	r3, ip, r8
 8000340:	42ab      	cmp	r3, r5
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x134>
 8000344:	19ed      	adds	r5, r5, r7
 8000346:	f108 30ff 	add.w	r0, r8, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x132>
 800034c:	42ab      	cmp	r3, r5
 800034e:	f200 80d1 	bhi.w	80004f4 <__udivmoddi4+0x2d4>
 8000352:	4680      	mov	r8, r0
 8000354:	1aed      	subs	r5, r5, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb5 f0f2 	udiv	r0, r5, r2
 800035c:	fb02 5510 	mls	r5, r2, r0, r5
 8000360:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000364:	fb0c fc00 	mul.w	ip, ip, r0
 8000368:	45a4      	cmp	ip, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x15c>
 800036c:	19e4      	adds	r4, r4, r7
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x15a>
 8000374:	45a4      	cmp	ip, r4
 8000376:	f200 80b8 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 040c 	sub.w	r4, r4, ip
 8000380:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000384:	e79d      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000386:	4631      	mov	r1, r6
 8000388:	4630      	mov	r0, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	f1ce 0420 	rsb	r4, lr, #32
 8000392:	fa05 f30e 	lsl.w	r3, r5, lr
 8000396:	fa07 f70e 	lsl.w	r7, r7, lr
 800039a:	fa20 f804 	lsr.w	r8, r0, r4
 800039e:	0c3a      	lsrs	r2, r7, #16
 80003a0:	fa25 f404 	lsr.w	r4, r5, r4
 80003a4:	ea48 0803 	orr.w	r8, r8, r3
 80003a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003b0:	fb02 4411 	mls	r4, r2, r1, r4
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003bc:	fb01 f30c 	mul.w	r3, r1, ip
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x1bc>
 80003c8:	19ed      	adds	r5, r5, r7
 80003ca:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ce:	f080 808a 	bcs.w	80004e6 <__udivmoddi4+0x2c6>
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	f240 8087 	bls.w	80004e6 <__udivmoddi4+0x2c6>
 80003d8:	3902      	subs	r1, #2
 80003da:	443d      	add	r5, r7
 80003dc:	1aeb      	subs	r3, r5, r3
 80003de:	fa1f f588 	uxth.w	r5, r8
 80003e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ee:	fb00 f30c 	mul.w	r3, r0, ip
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1e6>
 80003f6:	19ed      	adds	r5, r5, r7
 80003f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fc:	d26f      	bcs.n	80004de <__udivmoddi4+0x2be>
 80003fe:	42ab      	cmp	r3, r5
 8000400:	d96d      	bls.n	80004de <__udivmoddi4+0x2be>
 8000402:	3802      	subs	r0, #2
 8000404:	443d      	add	r5, r7
 8000406:	1aeb      	subs	r3, r5, r3
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	e78f      	b.n	800032e <__udivmoddi4+0x10e>
 800040e:	f1c1 0720 	rsb	r7, r1, #32
 8000412:	fa22 f807 	lsr.w	r8, r2, r7
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 f401 	lsl.w	r4, r5, r1
 800041c:	ea48 0303 	orr.w	r3, r8, r3
 8000420:	fa20 fe07 	lsr.w	lr, r0, r7
 8000424:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000428:	40fd      	lsrs	r5, r7
 800042a:	ea4e 0e04 	orr.w	lr, lr, r4
 800042e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000432:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000436:	fb0c 5519 	mls	r5, ip, r9, r5
 800043a:	fa1f f883 	uxth.w	r8, r3
 800043e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000442:	fb09 f408 	mul.w	r4, r9, r8
 8000446:	42ac      	cmp	r4, r5
 8000448:	fa02 f201 	lsl.w	r2, r2, r1
 800044c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x244>
 8000452:	18ed      	adds	r5, r5, r3
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295
 8000458:	d243      	bcs.n	80004e2 <__udivmoddi4+0x2c2>
 800045a:	42ac      	cmp	r4, r5
 800045c:	d941      	bls.n	80004e2 <__udivmoddi4+0x2c2>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	441d      	add	r5, r3
 8000464:	1b2d      	subs	r5, r5, r4
 8000466:	fa1f fe8e 	uxth.w	lr, lr
 800046a:	fbb5 f0fc 	udiv	r0, r5, ip
 800046e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000472:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45a0      	cmp	r8, r4
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x26e>
 800047e:	18e4      	adds	r4, r4, r3
 8000480:	f100 35ff 	add.w	r5, r0, #4294967295
 8000484:	d229      	bcs.n	80004da <__udivmoddi4+0x2ba>
 8000486:	45a0      	cmp	r8, r4
 8000488:	d927      	bls.n	80004da <__udivmoddi4+0x2ba>
 800048a:	3802      	subs	r0, #2
 800048c:	441c      	add	r4, r3
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba4 0408 	sub.w	r4, r4, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454c      	cmp	r4, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	464d      	mov	r5, r9
 80004a0:	d315      	bcc.n	80004ce <__udivmoddi4+0x2ae>
 80004a2:	d012      	beq.n	80004ca <__udivmoddi4+0x2aa>
 80004a4:	b156      	cbz	r6, 80004bc <__udivmoddi4+0x29c>
 80004a6:	ebba 030e 	subs.w	r3, sl, lr
 80004aa:	eb64 0405 	sbc.w	r4, r4, r5
 80004ae:	fa04 f707 	lsl.w	r7, r4, r7
 80004b2:	40cb      	lsrs	r3, r1
 80004b4:	431f      	orrs	r7, r3
 80004b6:	40cc      	lsrs	r4, r1
 80004b8:	6037      	str	r7, [r6, #0]
 80004ba:	6074      	str	r4, [r6, #4]
 80004bc:	2100      	movs	r1, #0
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	4618      	mov	r0, r3
 80004c4:	e6f8      	b.n	80002b8 <__udivmoddi4+0x98>
 80004c6:	4690      	mov	r8, r2
 80004c8:	e6e0      	b.n	800028c <__udivmoddi4+0x6c>
 80004ca:	45c2      	cmp	sl, r8
 80004cc:	d2ea      	bcs.n	80004a4 <__udivmoddi4+0x284>
 80004ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d2:	eb69 0503 	sbc.w	r5, r9, r3
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7e4      	b.n	80004a4 <__udivmoddi4+0x284>
 80004da:	4628      	mov	r0, r5
 80004dc:	e7d7      	b.n	800048e <__udivmoddi4+0x26e>
 80004de:	4640      	mov	r0, r8
 80004e0:	e791      	b.n	8000406 <__udivmoddi4+0x1e6>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e7be      	b.n	8000464 <__udivmoddi4+0x244>
 80004e6:	4601      	mov	r1, r0
 80004e8:	e778      	b.n	80003dc <__udivmoddi4+0x1bc>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	e745      	b.n	800037c <__udivmoddi4+0x15c>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xe6>
 80004f4:	f1a8 0802 	sub.w	r8, r8, #2
 80004f8:	443d      	add	r5, r7
 80004fa:	e72b      	b.n	8000354 <__udivmoddi4+0x134>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000538 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000504:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000506:	e003      	b.n	8000510 <LoopCopyDataInit>

08000508 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000508:	4b0c      	ldr	r3, [pc, #48]	; (800053c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800050a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800050c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800050e:	3104      	adds	r1, #4

08000510 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000510:	480b      	ldr	r0, [pc, #44]	; (8000540 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000514:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000516:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000518:	d3f6      	bcc.n	8000508 <CopyDataInit>
  ldr  r2, =_sbss
 800051a:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800051c:	e002      	b.n	8000524 <LoopFillZerobss>

0800051e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800051e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000520:	f842 3b04 	str.w	r3, [r2], #4

08000524 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000524:	4b09      	ldr	r3, [pc, #36]	; (800054c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000526:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000528:	d3f9      	bcc.n	800051e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800052a:	f000 f9e1 	bl	80008f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800052e:	f001 ff5b 	bl	80023e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000532:	f000 f8ad 	bl	8000690 <main>
  bx  lr    
 8000536:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000538:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800053c:	080024e4 	.word	0x080024e4
  ldr  r0, =_sdata
 8000540:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000544:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000548:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800054c:	2000404c 	.word	0x2000404c

08000550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000550:	e7fe      	b.n	8000550 <ADC_IRQHandler>
	...

08000554 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <vApplicationGetIdleTaskMemory+0x10>)
 8000556:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000558:	4b03      	ldr	r3, [pc, #12]	; (8000568 <vApplicationGetIdleTaskMemory+0x14>)
 800055a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800055c:	2380      	movs	r3, #128	; 0x80
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000228 	.word	0x20000228
 8000568:	20000028 	.word	0x20000028

0800056c <vTask1>:

}

/* USER CODE BEGIN 4 */
void vTask1(void *pvParameters)
{
 800056c:	b507      	push	{r0, r1, r2, lr}
    volatile unsigned long ul;

    for(;;){
    	  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800056e:	4c0f      	ldr	r4, [pc, #60]	; (80005ac <vTask1+0x40>)
    	  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
        HAL_UART_Transmit(&huart1, (uint8_t *)"Task 1 is running\r\n", strlen("Task 1 is running\r\n"), 0xFFFFFFFF);
 8000570:	4e0f      	ldr	r6, [pc, #60]	; (80005b0 <vTask1+0x44>)
    	  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000572:	2500      	movs	r5, #0
 8000574:	2200      	movs	r2, #0
 8000576:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800057a:	4620      	mov	r0, r4
 800057c:	f000 fb4a 	bl	8000c14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000586:	4620      	mov	r0, r4
 8000588:	f000 fb44 	bl	8000c14 <HAL_GPIO_WritePin>
        HAL_UART_Transmit(&huart1, (uint8_t *)"Task 1 is running\r\n", strlen("Task 1 is running\r\n"), 0xFFFFFFFF);
 800058c:	f04f 33ff 	mov.w	r3, #4294967295
 8000590:	2213      	movs	r2, #19
 8000592:	4631      	mov	r1, r6
 8000594:	4807      	ldr	r0, [pc, #28]	; (80005b4 <vTask1+0x48>)
 8000596:	f001 f875 	bl	8001684 <HAL_UART_Transmit>
        //HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);

        for(ul = 0; ul < mainDELAY_LOOP_COUNT; ul++);
 800059a:	9501      	str	r5, [sp, #4]
 800059c:	9b01      	ldr	r3, [sp, #4]
 800059e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80005a2:	d2e7      	bcs.n	8000574 <vTask1+0x8>
 80005a4:	9b01      	ldr	r3, [sp, #4]
 80005a6:	3301      	adds	r3, #1
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	e7f7      	b.n	800059c <vTask1+0x30>
 80005ac:	40021800 	.word	0x40021800
 80005b0:	0800248c 	.word	0x0800248c
 80005b4:	20003fc8 	.word	0x20003fc8

080005b8 <vTask2>:
    }
}

void vTask2(void *pvParameters)
{
 80005b8:	b507      	push	{r0, r1, r2, lr}
    volatile unsigned long ul;

    for(;;){
    		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80005ba:	4c0f      	ldr	r4, [pc, #60]	; (80005f8 <vTask2+0x40>)
    	  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
        HAL_UART_Transmit(&huart1, (uint8_t *)"Task 2 is running\r\n", strlen("Task 2 is running\r\n"), 0xFFFFFFFF);
 80005bc:	4e0f      	ldr	r6, [pc, #60]	; (80005fc <vTask2+0x44>)
    		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80005be:	2500      	movs	r5, #0
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c6:	4620      	mov	r0, r4
 80005c8:	f000 fb24 	bl	8000c14 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d2:	4620      	mov	r0, r4
 80005d4:	f000 fb1e 	bl	8000c14 <HAL_GPIO_WritePin>
        HAL_UART_Transmit(&huart1, (uint8_t *)"Task 2 is running\r\n", strlen("Task 2 is running\r\n"), 0xFFFFFFFF);
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295
 80005dc:	2213      	movs	r2, #19
 80005de:	4631      	mov	r1, r6
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <vTask2+0x48>)
 80005e2:	f001 f84f 	bl	8001684 <HAL_UART_Transmit>
        //HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);

        for(ul = 0; ul < mainDELAY_LOOP_COUNT; ul++);
 80005e6:	9501      	str	r5, [sp, #4]
 80005e8:	9b01      	ldr	r3, [sp, #4]
 80005ea:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80005ee:	d2e7      	bcs.n	80005c0 <vTask2+0x8>
 80005f0:	9b01      	ldr	r3, [sp, #4]
 80005f2:	3301      	adds	r3, #1
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	e7f7      	b.n	80005e8 <vTask2+0x30>
 80005f8:	40021800 	.word	0x40021800
 80005fc:	080024a0 	.word	0x080024a0
 8000600:	20003fc8 	.word	0x20003fc8

08000604 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000604:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000606:	2001      	movs	r0, #1
 8000608:	f001 f8c6 	bl	8001798 <osDelay>
 800060c:	e7fb      	b.n	8000606 <StartDefaultTask+0x2>
	...

08000610 <SystemClock_Config>:
{
 8000610:	b510      	push	{r4, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000614:	2230      	movs	r2, #48	; 0x30
 8000616:	2100      	movs	r1, #0
 8000618:	a808      	add	r0, sp, #32
 800061a:	f001 ff09 	bl	8002430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061e:	2100      	movs	r1, #0
 8000620:	2214      	movs	r2, #20
 8000622:	a803      	add	r0, sp, #12
 8000624:	f001 ff04 	bl	8002430 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2400      	movs	r4, #0
 800062a:	4b17      	ldr	r3, [pc, #92]	; (8000688 <SystemClock_Config+0x78>)
 800062c:	9401      	str	r4, [sp, #4]
 800062e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000630:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000634:	641a      	str	r2, [r3, #64]	; 0x40
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000638:	4a14      	ldr	r2, [pc, #80]	; (800068c <SystemClock_Config+0x7c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800063a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000642:	9402      	str	r4, [sp, #8]
 8000644:	6813      	ldr	r3, [r2, #0]
 8000646:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800064a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000652:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000654:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000658:	9302      	str	r3, [sp, #8]
 800065a:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065c:	2302      	movs	r3, #2
 800065e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000666:	2310      	movs	r3, #16
 8000668:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f000 fad9 	bl	8000c20 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	230f      	movs	r3, #15
 8000670:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000672:	4621      	mov	r1, r4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000674:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000676:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000678:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800067a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067c:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067e:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000680:	f000 fc7e 	bl	8000f80 <HAL_RCC_ClockConfig>
}
 8000684:	b014      	add	sp, #80	; 0x50
 8000686:	bd10      	pop	{r4, pc}
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <main>:
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8000694:	f000 f952 	bl	800093c <HAL_Init>
  SystemClock_Config();
 8000698:	f7ff ffba 	bl	8000610 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	2214      	movs	r2, #20
 800069e:	2100      	movs	r1, #0
 80006a0:	eb0d 0002 	add.w	r0, sp, r2
 80006a4:	f001 fec4 	bl	8002430 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a8:	2400      	movs	r4, #0
 80006aa:	4b31      	ldr	r3, [pc, #196]	; (8000770 <main+0xe0>)
 80006ac:	9402      	str	r4, [sp, #8]
 80006ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80006b0:	4830      	ldr	r0, [pc, #192]	; (8000774 <main+0xe4>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80006b2:	4e31      	ldr	r6, [pc, #196]	; (8000778 <main+0xe8>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006b8:	631a      	str	r2, [r3, #48]	; 0x30
 80006ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006bc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80006c0:	9202      	str	r2, [sp, #8]
 80006c2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c4:	9403      	str	r4, [sp, #12]
 80006c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006c8:	f042 0201 	orr.w	r2, r2, #1
 80006cc:	631a      	str	r2, [r3, #48]	; 0x30
 80006ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006d0:	f002 0201 	and.w	r2, r2, #1
 80006d4:	9203      	str	r2, [sp, #12]
 80006d6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006d8:	9404      	str	r4, [sp, #16]
 80006da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006e0:	631a      	str	r2, [r3, #48]	; 0x30
 80006e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80006e8:	4622      	mov	r2, r4
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006ea:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80006ec:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	2701      	movs	r7, #1
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006f2:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80006f4:	f000 fa8e 	bl	8000c14 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 80006f8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006fc:	a905      	add	r1, sp, #20
 80006fe:	481d      	ldr	r0, [pc, #116]	; (8000774 <main+0xe4>)
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 8000700:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000702:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000708:	f000 f998 	bl	8000a3c <HAL_GPIO_Init>
  huart1.Instance = USART1;
 800070c:	481b      	ldr	r0, [pc, #108]	; (800077c <main+0xec>)
  huart1.Init.BaudRate = 115200;
 800070e:	4a1c      	ldr	r2, [pc, #112]	; (8000780 <main+0xf0>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000710:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 8000712:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000716:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 800071a:	230c      	movs	r3, #12
 800071c:	6143      	str	r3, [r0, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800071e:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000720:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000724:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000726:	f000 ff7f 	bl	8001628 <HAL_UART_Init>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800072a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800072c:	ad05      	add	r5, sp, #20
 800072e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000730:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8000734:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000738:	4621      	mov	r1, r4
 800073a:	a805      	add	r0, sp, #20
 800073c:	f001 f804 	bl	8001748 <osThreadCreate>
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <main+0xf4>)
  xTaskCreate(vTask1, "Task1", 1000, NULL, 1, NULL);
 8000742:	4911      	ldr	r1, [pc, #68]	; (8000788 <main+0xf8>)
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000744:	6018      	str	r0, [r3, #0]
  xTaskCreate(vTask1, "Task1", 1000, NULL, 1, NULL);
 8000746:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800074a:	4623      	mov	r3, r4
 800074c:	9401      	str	r4, [sp, #4]
 800074e:	9700      	str	r7, [sp, #0]
 8000750:	480e      	ldr	r0, [pc, #56]	; (800078c <main+0xfc>)
 8000752:	f001 fc76 	bl	8002042 <xTaskCreate>
  xTaskCreate(vTask2, "Task2", 1000, NULL, 1, NULL);
 8000756:	4623      	mov	r3, r4
 8000758:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800075c:	490c      	ldr	r1, [pc, #48]	; (8000790 <main+0x100>)
 800075e:	9401      	str	r4, [sp, #4]
 8000760:	9700      	str	r7, [sp, #0]
 8000762:	480c      	ldr	r0, [pc, #48]	; (8000794 <main+0x104>)
 8000764:	f001 fc6d 	bl	8002042 <xTaskCreate>
  osKernelStart();
 8000768:	f000 ffe9 	bl	800173e <osKernelStart>
 800076c:	e7fe      	b.n	800076c <main+0xdc>
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40021800 	.word	0x40021800
 8000778:	08002458 	.word	0x08002458
 800077c:	20003fc8 	.word	0x20003fc8
 8000780:	40011000 	.word	0x40011000
 8000784:	20003fc4 	.word	0x20003fc4
 8000788:	08002474 	.word	0x08002474
 800078c:	0800056d 	.word	0x0800056d
 8000790:	0800247a 	.word	0x0800247a
 8000794:	080005b9 	.word	0x080005b9

08000798 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000798:	6802      	ldr	r2, [r0, #0]
 800079a:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800079c:	429a      	cmp	r2, r3
 800079e:	d101      	bne.n	80007a4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80007a0:	f000 b8e6 	b.w	8000970 <HAL_IncTick>
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40001000 	.word	0x40001000

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <HAL_MspInit+0x40>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	9200      	str	r2, [sp, #0]
 80007b4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80007b6:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80007ba:	6459      	str	r1, [r3, #68]	; 0x44
 80007bc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80007be:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80007c2:	9100      	str	r1, [sp, #0]
 80007c4:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	9201      	str	r2, [sp, #4]
 80007c8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80007ca:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80007ce:	6419      	str	r1, [r3, #64]	; 0x40
 80007d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d6:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007d8:	210f      	movs	r1, #15
 80007da:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007e0:	f000 f8ea 	bl	80009b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e4:	b003      	add	sp, #12
 80007e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800

080007f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f0:	b510      	push	{r4, lr}
 80007f2:	4604      	mov	r4, r0
 80007f4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	2214      	movs	r2, #20
 80007f8:	2100      	movs	r1, #0
 80007fa:	a803      	add	r0, sp, #12
 80007fc:	f001 fe18 	bl	8002430 <memset>
  if(huart->Instance==USART1)
 8000800:	6822      	ldr	r2, [r4, #0]
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <HAL_UART_MspInit+0x68>)
 8000804:	429a      	cmp	r2, r3
 8000806:	d125      	bne.n	8000854 <HAL_UART_MspInit+0x64>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000808:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800080c:	2100      	movs	r1, #0
 800080e:	9101      	str	r1, [sp, #4]
 8000810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000812:	4812      	ldr	r0, [pc, #72]	; (800085c <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8000814:	f042 0210 	orr.w	r2, r2, #16
 8000818:	645a      	str	r2, [r3, #68]	; 0x44
 800081a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800081c:	f002 0210 	and.w	r2, r2, #16
 8000820:	9201      	str	r2, [sp, #4]
 8000822:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000824:	9102      	str	r1, [sp, #8]
 8000826:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000828:	f042 0201 	orr.w	r2, r2, #1
 800082c:	631a      	str	r2, [r3, #48]	; 0x30
 800082e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000830:	f003 0301 	and.w	r3, r3, #1
 8000834:	9302      	str	r3, [sp, #8]
 8000836:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000838:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800083c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000842:	2301      	movs	r3, #1
 8000844:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000846:	2303      	movs	r3, #3
 8000848:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800084c:	2307      	movs	r3, #7
 800084e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000850:	f000 f8f4 	bl	8000a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000854:	b008      	add	sp, #32
 8000856:	bd10      	pop	{r4, pc}
 8000858:	40011000 	.word	0x40011000
 800085c:	40020000 	.word	0x40020000

08000860 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000860:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000862:	4601      	mov	r1, r0
{
 8000864:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000866:	2200      	movs	r2, #0
 8000868:	2036      	movs	r0, #54	; 0x36
 800086a:	f000 f8a5 	bl	80009b8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800086e:	2036      	movs	r0, #54	; 0x36
 8000870:	f000 f8d6 	bl	8000a20 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000874:	2500      	movs	r5, #0
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <HAL_InitTick+0x68>)
 8000878:	9502      	str	r5, [sp, #8]
 800087a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800087c:	4c13      	ldr	r4, [pc, #76]	; (80008cc <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 800087e:	f042 0210 	orr.w	r2, r2, #16
 8000882:	641a      	str	r2, [r3, #64]	; 0x40
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	f003 0310 	and.w	r3, r3, #16
 800088a:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800088c:	a901      	add	r1, sp, #4
 800088e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000890:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000892:	f000 fc2f 	bl	80010f4 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000896:	f000 fc0d 	bl	80010b4 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <HAL_InitTick+0x70>)
 800089c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800089e:	f240 33e7 	movw	r3, #999	; 0x3e7
 80008a2:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80008a4:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <HAL_InitTick+0x74>)
 80008a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80008aa:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 80008ac:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80008ae:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80008b0:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b2:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80008b4:	f000 fd5a 	bl	800136c <HAL_TIM_Base_Init>
 80008b8:	b920      	cbnz	r0, 80008c4 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80008ba:	4620      	mov	r0, r4
 80008bc:	f000 fc39 	bl	8001132 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80008c0:	b009      	add	sp, #36	; 0x24
 80008c2:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 80008c4:	2001      	movs	r0, #1
 80008c6:	e7fb      	b.n	80008c0 <HAL_InitTick+0x60>
 80008c8:	40023800 	.word	0x40023800
 80008cc:	20004008 	.word	0x20004008
 80008d0:	40001000 	.word	0x40001000
 80008d4:	000f4240 	.word	0x000f4240

080008d8 <NMI_Handler>:
 80008d8:	4770      	bx	lr

080008da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008da:	e7fe      	b.n	80008da <HardFault_Handler>

080008dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008dc:	e7fe      	b.n	80008dc <MemManage_Handler>

080008de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008de:	e7fe      	b.n	80008de <BusFault_Handler>

080008e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e0:	e7fe      	b.n	80008e0 <UsageFault_Handler>

080008e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e2:	4770      	bx	lr

080008e4 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008e4:	4801      	ldr	r0, [pc, #4]	; (80008ec <TIM6_DAC_IRQHandler+0x8>)
 80008e6:	f000 bc38 	b.w	800115a <HAL_TIM_IRQHandler>
 80008ea:	bf00      	nop
 80008ec:	20004008 	.word	0x20004008

080008f0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f0:	490f      	ldr	r1, [pc, #60]	; (8000930 <SystemInit+0x40>)
 80008f2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80008f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80008fe:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <SystemInit+0x44>)
 8000900:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000902:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000904:	f042 0201 	orr.w	r2, r2, #1
 8000908:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800090a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000912:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000916:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000918:	4a07      	ldr	r2, [pc, #28]	; (8000938 <SystemInit+0x48>)
 800091a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000922:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000924:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000926:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800092a:	608b      	str	r3, [r1, #8]
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000ed00 	.word	0xe000ed00
 8000934:	40023800 	.word	0x40023800
 8000938:	24003010 	.word	0x24003010

0800093c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800093c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <HAL_Init+0x30>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000946:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800094e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000956:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000958:	2003      	movs	r0, #3
 800095a:	f000 f81b 	bl	8000994 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095e:	2000      	movs	r0, #0
 8000960:	f7ff ff7e 	bl	8000860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000964:	f7ff ff22 	bl	80007ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000968:	2000      	movs	r0, #0
 800096a:	bd08      	pop	{r3, pc}
 800096c:	40023c00 	.word	0x40023c00

08000970 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000970:	4a03      	ldr	r2, [pc, #12]	; (8000980 <HAL_IncTick+0x10>)
 8000972:	4b04      	ldr	r3, [pc, #16]	; (8000984 <HAL_IncTick+0x14>)
 8000974:	6811      	ldr	r1, [r2, #0]
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	440b      	add	r3, r1
 800097a:	6013      	str	r3, [r2, #0]
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	20004048 	.word	0x20004048
 8000984:	20000004 	.word	0x20000004

08000988 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000988:	4b01      	ldr	r3, [pc, #4]	; (8000990 <HAL_GetTick+0x8>)
 800098a:	6818      	ldr	r0, [r3, #0]
}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	20004048 	.word	0x20004048

08000994 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000994:	4a07      	ldr	r2, [pc, #28]	; (80009b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000996:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000998:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800099c:	041b      	lsls	r3, r3, #16
 800099e:	0c1b      	lsrs	r3, r3, #16
 80009a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009a4:	0200      	lsls	r0, r0, #8
 80009a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009aa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80009ae:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80009b0:	60d3      	str	r3, [r2, #12]
 80009b2:	4770      	bx	lr
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b8:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ba:	b530      	push	{r4, r5, lr}
 80009bc:	68dc      	ldr	r4, [r3, #12]
 80009be:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009c6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c8:	2b04      	cmp	r3, #4
 80009ca:	bf28      	it	cs
 80009cc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ce:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	f04f 0501 	mov.w	r5, #1
 80009d4:	fa05 f303 	lsl.w	r3, r5, r3
 80009d8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009dc:	bf8c      	ite	hi
 80009de:	3c03      	subhi	r4, #3
 80009e0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e2:	4019      	ands	r1, r3
 80009e4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e6:	fa05 f404 	lsl.w	r4, r5, r4
 80009ea:	3c01      	subs	r4, #1
 80009ec:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80009ee:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f0:	ea42 0201 	orr.w	r2, r2, r1
 80009f4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f8:	bfad      	iteet	ge
 80009fa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fe:	f000 000f 	andlt.w	r0, r0, #15
 8000a02:	4b06      	ldrlt	r3, [pc, #24]	; (8000a1c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a04:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a08:	bfb5      	itete	lt
 8000a0a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a10:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000a14:	bd30      	pop	{r4, r5, pc}
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00
 8000a1c:	e000ed14 	.word	0xe000ed14

08000a20 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000a20:	2800      	cmp	r0, #0
 8000a22:	db08      	blt.n	8000a36 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a24:	0942      	lsrs	r2, r0, #5
 8000a26:	2301      	movs	r3, #1
 8000a28:	f000 001f 	and.w	r0, r0, #31
 8000a2c:	fa03 f000 	lsl.w	r0, r3, r0
 8000a30:	4b01      	ldr	r3, [pc, #4]	; (8000a38 <HAL_NVIC_EnableIRQ+0x18>)
 8000a32:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000a36:	4770      	bx	lr
 8000a38:	e000e100 	.word	0xe000e100

08000a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a40:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a42:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a44:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8000c0c <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a48:	4a6e      	ldr	r2, [pc, #440]	; (8000c04 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a4a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8000c10 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a4e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a50:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000a52:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a56:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000a58:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a5c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000a60:	45b6      	cmp	lr, r6
 8000a62:	f040 80b6 	bne.w	8000bd2 <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a66:	684c      	ldr	r4, [r1, #4]
 8000a68:	f024 0710 	bic.w	r7, r4, #16
 8000a6c:	2f02      	cmp	r7, #2
 8000a6e:	d116      	bne.n	8000a9e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000a70:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000a74:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a78:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000a7c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a80:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000a84:	f04f 0c0f 	mov.w	ip, #15
 8000a88:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000a8c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a90:	690d      	ldr	r5, [r1, #16]
 8000a92:	fa05 f50b 	lsl.w	r5, r5, fp
 8000a96:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000a9a:	f8ca 5020 	str.w	r5, [sl, #32]
 8000a9e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000aa2:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000aa4:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000aa8:	fa05 f50a 	lsl.w	r5, r5, sl
 8000aac:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000aae:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ab2:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ab6:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000aba:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000abc:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ac0:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000ac2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ac6:	d811      	bhi.n	8000aec <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000ac8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000aca:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ace:	68cf      	ldr	r7, [r1, #12]
 8000ad0:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000ad4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000ad8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ada:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000adc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ae0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000ae4:	409f      	lsls	r7, r3
 8000ae6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000aea:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000aec:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000aee:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000af0:	688f      	ldr	r7, [r1, #8]
 8000af2:	fa07 f70a 	lsl.w	r7, r7, sl
 8000af6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000af8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000afa:	00e5      	lsls	r5, r4, #3
 8000afc:	d569      	bpl.n	8000bd2 <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	f04f 0b00 	mov.w	fp, #0
 8000b02:	f8cd b00c 	str.w	fp, [sp, #12]
 8000b06:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b0a:	4d3f      	ldr	r5, [pc, #252]	; (8000c08 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000b10:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000b14:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000b18:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000b1c:	9703      	str	r7, [sp, #12]
 8000b1e:	9f03      	ldr	r7, [sp, #12]
 8000b20:	f023 0703 	bic.w	r7, r3, #3
 8000b24:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000b28:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b2c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000b30:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b34:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000b38:	f04f 0e0f 	mov.w	lr, #15
 8000b3c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b40:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b42:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b46:	d04b      	beq.n	8000be0 <HAL_GPIO_Init+0x1a4>
 8000b48:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b4c:	42a8      	cmp	r0, r5
 8000b4e:	d049      	beq.n	8000be4 <HAL_GPIO_Init+0x1a8>
 8000b50:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b54:	42a8      	cmp	r0, r5
 8000b56:	d047      	beq.n	8000be8 <HAL_GPIO_Init+0x1ac>
 8000b58:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b5c:	42a8      	cmp	r0, r5
 8000b5e:	d045      	beq.n	8000bec <HAL_GPIO_Init+0x1b0>
 8000b60:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b64:	42a8      	cmp	r0, r5
 8000b66:	d043      	beq.n	8000bf0 <HAL_GPIO_Init+0x1b4>
 8000b68:	4548      	cmp	r0, r9
 8000b6a:	d043      	beq.n	8000bf4 <HAL_GPIO_Init+0x1b8>
 8000b6c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000b70:	42a8      	cmp	r0, r5
 8000b72:	d041      	beq.n	8000bf8 <HAL_GPIO_Init+0x1bc>
 8000b74:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b78:	42a8      	cmp	r0, r5
 8000b7a:	d03f      	beq.n	8000bfc <HAL_GPIO_Init+0x1c0>
 8000b7c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b80:	42a8      	cmp	r0, r5
 8000b82:	d03d      	beq.n	8000c00 <HAL_GPIO_Init+0x1c4>
 8000b84:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b88:	42a8      	cmp	r0, r5
 8000b8a:	bf14      	ite	ne
 8000b8c:	250a      	movne	r5, #10
 8000b8e:	2509      	moveq	r5, #9
 8000b90:	fa05 f50c 	lsl.w	r5, r5, ip
 8000b94:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b98:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000b9a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000b9c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b9e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000ba2:	bf0c      	ite	eq
 8000ba4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000ba6:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000ba8:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000baa:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bac:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000bb0:	bf0c      	ite	eq
 8000bb2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000bb4:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000bb6:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bb8:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bba:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000bbe:	bf0c      	ite	eq
 8000bc0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000bc2:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000bc4:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000bc6:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bc8:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000bca:	bf54      	ite	pl
 8000bcc:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000bce:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000bd0:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	2b10      	cmp	r3, #16
 8000bd6:	f47f af3c 	bne.w	8000a52 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000bda:	b005      	add	sp, #20
 8000bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000be0:	465d      	mov	r5, fp
 8000be2:	e7d5      	b.n	8000b90 <HAL_GPIO_Init+0x154>
 8000be4:	2501      	movs	r5, #1
 8000be6:	e7d3      	b.n	8000b90 <HAL_GPIO_Init+0x154>
 8000be8:	2502      	movs	r5, #2
 8000bea:	e7d1      	b.n	8000b90 <HAL_GPIO_Init+0x154>
 8000bec:	2503      	movs	r5, #3
 8000bee:	e7cf      	b.n	8000b90 <HAL_GPIO_Init+0x154>
 8000bf0:	2504      	movs	r5, #4
 8000bf2:	e7cd      	b.n	8000b90 <HAL_GPIO_Init+0x154>
 8000bf4:	2505      	movs	r5, #5
 8000bf6:	e7cb      	b.n	8000b90 <HAL_GPIO_Init+0x154>
 8000bf8:	2506      	movs	r5, #6
 8000bfa:	e7c9      	b.n	8000b90 <HAL_GPIO_Init+0x154>
 8000bfc:	2507      	movs	r5, #7
 8000bfe:	e7c7      	b.n	8000b90 <HAL_GPIO_Init+0x154>
 8000c00:	2508      	movs	r5, #8
 8000c02:	e7c5      	b.n	8000b90 <HAL_GPIO_Init+0x154>
 8000c04:	40013c00 	.word	0x40013c00
 8000c08:	40020000 	.word	0x40020000
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40021400 	.word	0x40021400

08000c14 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c14:	b10a      	cbz	r2, 8000c1a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c16:	6181      	str	r1, [r0, #24]
 8000c18:	4770      	bx	lr
 8000c1a:	0409      	lsls	r1, r1, #16
 8000c1c:	e7fb      	b.n	8000c16 <HAL_GPIO_WritePin+0x2>
	...

08000c20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c24:	4604      	mov	r4, r0
 8000c26:	b918      	cbnz	r0, 8000c30 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000c28:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000c2a:	b002      	add	sp, #8
 8000c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c30:	6803      	ldr	r3, [r0, #0]
 8000c32:	07dd      	lsls	r5, r3, #31
 8000c34:	d410      	bmi.n	8000c58 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c36:	6823      	ldr	r3, [r4, #0]
 8000c38:	0798      	lsls	r0, r3, #30
 8000c3a:	d458      	bmi.n	8000cee <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c3c:	6823      	ldr	r3, [r4, #0]
 8000c3e:	071a      	lsls	r2, r3, #28
 8000c40:	f100 809a 	bmi.w	8000d78 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c44:	6823      	ldr	r3, [r4, #0]
 8000c46:	075b      	lsls	r3, r3, #29
 8000c48:	f100 80b8 	bmi.w	8000dbc <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c4c:	69a2      	ldr	r2, [r4, #24]
 8000c4e:	2a00      	cmp	r2, #0
 8000c50:	f040 8119 	bne.w	8000e86 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000c54:	2000      	movs	r0, #0
 8000c56:	e7e8      	b.n	8000c2a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c58:	4ba6      	ldr	r3, [pc, #664]	; (8000ef4 <HAL_RCC_OscConfig+0x2d4>)
 8000c5a:	689a      	ldr	r2, [r3, #8]
 8000c5c:	f002 020c 	and.w	r2, r2, #12
 8000c60:	2a04      	cmp	r2, #4
 8000c62:	d007      	beq.n	8000c74 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c64:	689a      	ldr	r2, [r3, #8]
 8000c66:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c6a:	2a08      	cmp	r2, #8
 8000c6c:	d10a      	bne.n	8000c84 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	0259      	lsls	r1, r3, #9
 8000c72:	d507      	bpl.n	8000c84 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c74:	4b9f      	ldr	r3, [pc, #636]	; (8000ef4 <HAL_RCC_OscConfig+0x2d4>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	039a      	lsls	r2, r3, #14
 8000c7a:	d5dc      	bpl.n	8000c36 <HAL_RCC_OscConfig+0x16>
 8000c7c:	6863      	ldr	r3, [r4, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1d9      	bne.n	8000c36 <HAL_RCC_OscConfig+0x16>
 8000c82:	e7d1      	b.n	8000c28 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c84:	6863      	ldr	r3, [r4, #4]
 8000c86:	4d9b      	ldr	r5, [pc, #620]	; (8000ef4 <HAL_RCC_OscConfig+0x2d4>)
 8000c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c8c:	d111      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x92>
 8000c8e:	682b      	ldr	r3, [r5, #0]
 8000c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c94:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c96:	f7ff fe77 	bl	8000988 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c9a:	4d96      	ldr	r5, [pc, #600]	; (8000ef4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000c9c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c9e:	682b      	ldr	r3, [r5, #0]
 8000ca0:	039b      	lsls	r3, r3, #14
 8000ca2:	d4c8      	bmi.n	8000c36 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ca4:	f7ff fe70 	bl	8000988 <HAL_GetTick>
 8000ca8:	1b80      	subs	r0, r0, r6
 8000caa:	2864      	cmp	r0, #100	; 0x64
 8000cac:	d9f7      	bls.n	8000c9e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000cae:	2003      	movs	r0, #3
 8000cb0:	e7bb      	b.n	8000c2a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cb6:	d104      	bne.n	8000cc2 <HAL_RCC_OscConfig+0xa2>
 8000cb8:	682b      	ldr	r3, [r5, #0]
 8000cba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cbe:	602b      	str	r3, [r5, #0]
 8000cc0:	e7e5      	b.n	8000c8e <HAL_RCC_OscConfig+0x6e>
 8000cc2:	682a      	ldr	r2, [r5, #0]
 8000cc4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000cc8:	602a      	str	r2, [r5, #0]
 8000cca:	682a      	ldr	r2, [r5, #0]
 8000ccc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000cd0:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1df      	bne.n	8000c96 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8000cd6:	f7ff fe57 	bl	8000988 <HAL_GetTick>
 8000cda:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cdc:	682b      	ldr	r3, [r5, #0]
 8000cde:	039f      	lsls	r7, r3, #14
 8000ce0:	d5a9      	bpl.n	8000c36 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ce2:	f7ff fe51 	bl	8000988 <HAL_GetTick>
 8000ce6:	1b80      	subs	r0, r0, r6
 8000ce8:	2864      	cmp	r0, #100	; 0x64
 8000cea:	d9f7      	bls.n	8000cdc <HAL_RCC_OscConfig+0xbc>
 8000cec:	e7df      	b.n	8000cae <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cee:	4b81      	ldr	r3, [pc, #516]	; (8000ef4 <HAL_RCC_OscConfig+0x2d4>)
 8000cf0:	689a      	ldr	r2, [r3, #8]
 8000cf2:	f012 0f0c 	tst.w	r2, #12
 8000cf6:	d007      	beq.n	8000d08 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cf8:	689a      	ldr	r2, [r3, #8]
 8000cfa:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cfe:	2a08      	cmp	r2, #8
 8000d00:	d111      	bne.n	8000d26 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	025e      	lsls	r6, r3, #9
 8000d06:	d40e      	bmi.n	8000d26 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d08:	4b7a      	ldr	r3, [pc, #488]	; (8000ef4 <HAL_RCC_OscConfig+0x2d4>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	0795      	lsls	r5, r2, #30
 8000d0e:	d502      	bpl.n	8000d16 <HAL_RCC_OscConfig+0xf6>
 8000d10:	68e2      	ldr	r2, [r4, #12]
 8000d12:	2a01      	cmp	r2, #1
 8000d14:	d188      	bne.n	8000c28 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	6921      	ldr	r1, [r4, #16]
 8000d1a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000d1e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000d22:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d24:	e78a      	b.n	8000c3c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d26:	68e2      	ldr	r2, [r4, #12]
 8000d28:	4b73      	ldr	r3, [pc, #460]	; (8000ef8 <HAL_RCC_OscConfig+0x2d8>)
 8000d2a:	b1b2      	cbz	r2, 8000d5a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d30:	f7ff fe2a 	bl	8000988 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d34:	4d6f      	ldr	r5, [pc, #444]	; (8000ef4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000d36:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d38:	682b      	ldr	r3, [r5, #0]
 8000d3a:	0798      	lsls	r0, r3, #30
 8000d3c:	d507      	bpl.n	8000d4e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d3e:	682b      	ldr	r3, [r5, #0]
 8000d40:	6922      	ldr	r2, [r4, #16]
 8000d42:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d46:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d4a:	602b      	str	r3, [r5, #0]
 8000d4c:	e776      	b.n	8000c3c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d4e:	f7ff fe1b 	bl	8000988 <HAL_GetTick>
 8000d52:	1b80      	subs	r0, r0, r6
 8000d54:	2802      	cmp	r0, #2
 8000d56:	d9ef      	bls.n	8000d38 <HAL_RCC_OscConfig+0x118>
 8000d58:	e7a9      	b.n	8000cae <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000d5a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d5c:	f7ff fe14 	bl	8000988 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d60:	4d64      	ldr	r5, [pc, #400]	; (8000ef4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000d62:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d64:	682b      	ldr	r3, [r5, #0]
 8000d66:	0799      	lsls	r1, r3, #30
 8000d68:	f57f af68 	bpl.w	8000c3c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d6c:	f7ff fe0c 	bl	8000988 <HAL_GetTick>
 8000d70:	1b80      	subs	r0, r0, r6
 8000d72:	2802      	cmp	r0, #2
 8000d74:	d9f6      	bls.n	8000d64 <HAL_RCC_OscConfig+0x144>
 8000d76:	e79a      	b.n	8000cae <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d78:	6962      	ldr	r2, [r4, #20]
 8000d7a:	4b60      	ldr	r3, [pc, #384]	; (8000efc <HAL_RCC_OscConfig+0x2dc>)
 8000d7c:	b17a      	cbz	r2, 8000d9e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000d7e:	2201      	movs	r2, #1
 8000d80:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d82:	f7ff fe01 	bl	8000988 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d86:	4d5b      	ldr	r5, [pc, #364]	; (8000ef4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000d88:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d8a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000d8c:	079f      	lsls	r7, r3, #30
 8000d8e:	f53f af59 	bmi.w	8000c44 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d92:	f7ff fdf9 	bl	8000988 <HAL_GetTick>
 8000d96:	1b80      	subs	r0, r0, r6
 8000d98:	2802      	cmp	r0, #2
 8000d9a:	d9f6      	bls.n	8000d8a <HAL_RCC_OscConfig+0x16a>
 8000d9c:	e787      	b.n	8000cae <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000d9e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000da0:	f7ff fdf2 	bl	8000988 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000da4:	4d53      	ldr	r5, [pc, #332]	; (8000ef4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000da6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000da8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000daa:	0798      	lsls	r0, r3, #30
 8000dac:	f57f af4a 	bpl.w	8000c44 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000db0:	f7ff fdea 	bl	8000988 <HAL_GetTick>
 8000db4:	1b80      	subs	r0, r0, r6
 8000db6:	2802      	cmp	r0, #2
 8000db8:	d9f6      	bls.n	8000da8 <HAL_RCC_OscConfig+0x188>
 8000dba:	e778      	b.n	8000cae <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dbc:	4b4d      	ldr	r3, [pc, #308]	; (8000ef4 <HAL_RCC_OscConfig+0x2d4>)
 8000dbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dc0:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000dc4:	d128      	bne.n	8000e18 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dc6:	9201      	str	r2, [sp, #4]
 8000dc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000dce:	641a      	str	r2, [r3, #64]	; 0x40
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	9301      	str	r3, [sp, #4]
 8000dd8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000dda:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ddc:	4d48      	ldr	r5, [pc, #288]	; (8000f00 <HAL_RCC_OscConfig+0x2e0>)
 8000dde:	682b      	ldr	r3, [r5, #0]
 8000de0:	05d9      	lsls	r1, r3, #23
 8000de2:	d51b      	bpl.n	8000e1c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000de4:	68a3      	ldr	r3, [r4, #8]
 8000de6:	4d43      	ldr	r5, [pc, #268]	; (8000ef4 <HAL_RCC_OscConfig+0x2d4>)
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d127      	bne.n	8000e3c <HAL_RCC_OscConfig+0x21c>
 8000dec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000df4:	f7ff fdc8 	bl	8000988 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000df8:	4d3e      	ldr	r5, [pc, #248]	; (8000ef4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000dfa:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dfc:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e00:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e02:	079b      	lsls	r3, r3, #30
 8000e04:	d539      	bpl.n	8000e7a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000e06:	2e00      	cmp	r6, #0
 8000e08:	f43f af20 	beq.w	8000c4c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e0c:	4a39      	ldr	r2, [pc, #228]	; (8000ef4 <HAL_RCC_OscConfig+0x2d4>)
 8000e0e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	e719      	b.n	8000c4c <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e7df      	b.n	8000ddc <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e1c:	682b      	ldr	r3, [r5, #0]
 8000e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e22:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000e24:	f7ff fdb0 	bl	8000988 <HAL_GetTick>
 8000e28:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e2a:	682b      	ldr	r3, [r5, #0]
 8000e2c:	05da      	lsls	r2, r3, #23
 8000e2e:	d4d9      	bmi.n	8000de4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e30:	f7ff fdaa 	bl	8000988 <HAL_GetTick>
 8000e34:	1bc0      	subs	r0, r0, r7
 8000e36:	2802      	cmp	r0, #2
 8000e38:	d9f7      	bls.n	8000e2a <HAL_RCC_OscConfig+0x20a>
 8000e3a:	e738      	b.n	8000cae <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e3c:	2b05      	cmp	r3, #5
 8000e3e:	d104      	bne.n	8000e4a <HAL_RCC_OscConfig+0x22a>
 8000e40:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e42:	f043 0304 	orr.w	r3, r3, #4
 8000e46:	672b      	str	r3, [r5, #112]	; 0x70
 8000e48:	e7d0      	b.n	8000dec <HAL_RCC_OscConfig+0x1cc>
 8000e4a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000e4c:	f022 0201 	bic.w	r2, r2, #1
 8000e50:	672a      	str	r2, [r5, #112]	; 0x70
 8000e52:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000e54:	f022 0204 	bic.w	r2, r2, #4
 8000e58:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d1ca      	bne.n	8000df4 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000e5e:	f7ff fd93 	bl	8000988 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e62:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000e66:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e68:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e6a:	0798      	lsls	r0, r3, #30
 8000e6c:	d5cb      	bpl.n	8000e06 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e6e:	f7ff fd8b 	bl	8000988 <HAL_GetTick>
 8000e72:	1bc0      	subs	r0, r0, r7
 8000e74:	4540      	cmp	r0, r8
 8000e76:	d9f7      	bls.n	8000e68 <HAL_RCC_OscConfig+0x248>
 8000e78:	e719      	b.n	8000cae <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e7a:	f7ff fd85 	bl	8000988 <HAL_GetTick>
 8000e7e:	1bc0      	subs	r0, r0, r7
 8000e80:	4540      	cmp	r0, r8
 8000e82:	d9bd      	bls.n	8000e00 <HAL_RCC_OscConfig+0x1e0>
 8000e84:	e713      	b.n	8000cae <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e86:	4d1b      	ldr	r5, [pc, #108]	; (8000ef4 <HAL_RCC_OscConfig+0x2d4>)
 8000e88:	68ab      	ldr	r3, [r5, #8]
 8000e8a:	f003 030c 	and.w	r3, r3, #12
 8000e8e:	2b08      	cmp	r3, #8
 8000e90:	f43f aeca 	beq.w	8000c28 <HAL_RCC_OscConfig+0x8>
 8000e94:	4e1b      	ldr	r6, [pc, #108]	; (8000f04 <HAL_RCC_OscConfig+0x2e4>)
 8000e96:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e98:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000e9a:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e9c:	d134      	bne.n	8000f08 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000e9e:	f7ff fd73 	bl	8000988 <HAL_GetTick>
 8000ea2:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ea4:	682b      	ldr	r3, [r5, #0]
 8000ea6:	0199      	lsls	r1, r3, #6
 8000ea8:	d41e      	bmi.n	8000ee8 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000eaa:	6a22      	ldr	r2, [r4, #32]
 8000eac:	69e3      	ldr	r3, [r4, #28]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000eb2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000eb6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000eb8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000ebc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ebe:	4c0d      	ldr	r4, [pc, #52]	; (8000ef4 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ec0:	0852      	lsrs	r2, r2, #1
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ec8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000eca:	2301      	movs	r3, #1
 8000ecc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000ece:	f7ff fd5b 	bl	8000988 <HAL_GetTick>
 8000ed2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ed4:	6823      	ldr	r3, [r4, #0]
 8000ed6:	019a      	lsls	r2, r3, #6
 8000ed8:	f53f aebc 	bmi.w	8000c54 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000edc:	f7ff fd54 	bl	8000988 <HAL_GetTick>
 8000ee0:	1b40      	subs	r0, r0, r5
 8000ee2:	2802      	cmp	r0, #2
 8000ee4:	d9f6      	bls.n	8000ed4 <HAL_RCC_OscConfig+0x2b4>
 8000ee6:	e6e2      	b.n	8000cae <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ee8:	f7ff fd4e 	bl	8000988 <HAL_GetTick>
 8000eec:	1bc0      	subs	r0, r0, r7
 8000eee:	2802      	cmp	r0, #2
 8000ef0:	d9d8      	bls.n	8000ea4 <HAL_RCC_OscConfig+0x284>
 8000ef2:	e6dc      	b.n	8000cae <HAL_RCC_OscConfig+0x8e>
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	42470000 	.word	0x42470000
 8000efc:	42470e80 	.word	0x42470e80
 8000f00:	40007000 	.word	0x40007000
 8000f04:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000f08:	f7ff fd3e 	bl	8000988 <HAL_GetTick>
 8000f0c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f0e:	682b      	ldr	r3, [r5, #0]
 8000f10:	019b      	lsls	r3, r3, #6
 8000f12:	f57f ae9f 	bpl.w	8000c54 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f16:	f7ff fd37 	bl	8000988 <HAL_GetTick>
 8000f1a:	1b00      	subs	r0, r0, r4
 8000f1c:	2802      	cmp	r0, #2
 8000f1e:	d9f6      	bls.n	8000f0e <HAL_RCC_OscConfig+0x2ee>
 8000f20:	e6c5      	b.n	8000cae <HAL_RCC_OscConfig+0x8e>
 8000f22:	bf00      	nop

08000f24 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f24:	4913      	ldr	r1, [pc, #76]	; (8000f74 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000f26:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f28:	688b      	ldr	r3, [r1, #8]
 8000f2a:	f003 030c 	and.w	r3, r3, #12
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	d003      	beq.n	8000f3a <HAL_RCC_GetSysClockFreq+0x16>
 8000f32:	2b08      	cmp	r3, #8
 8000f34:	d003      	beq.n	8000f3e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000f36:	4810      	ldr	r0, [pc, #64]	; (8000f78 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000f38:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000f3a:	4810      	ldr	r0, [pc, #64]	; (8000f7c <HAL_RCC_GetSysClockFreq+0x58>)
 8000f3c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f3e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f40:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f42:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f44:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f48:	bf14      	ite	ne
 8000f4a:	480c      	ldrne	r0, [pc, #48]	; (8000f7c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f4c:	480a      	ldreq	r0, [pc, #40]	; (8000f78 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f4e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000f52:	bf18      	it	ne
 8000f54:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f56:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f5a:	fba1 0100 	umull	r0, r1, r1, r0
 8000f5e:	f7ff f947 	bl	80001f0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000f62:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <HAL_RCC_GetSysClockFreq+0x50>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000f6e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f72:	bd08      	pop	{r3, pc}
 8000f74:	40023800 	.word	0x40023800
 8000f78:	00f42400 	.word	0x00f42400
 8000f7c:	007a1200 	.word	0x007a1200

08000f80 <HAL_RCC_ClockConfig>:
{
 8000f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f84:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000f86:	4604      	mov	r4, r0
 8000f88:	b910      	cbnz	r0, 8000f90 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f90:	4b44      	ldr	r3, [pc, #272]	; (80010a4 <HAL_RCC_ClockConfig+0x124>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	f002 020f 	and.w	r2, r2, #15
 8000f98:	428a      	cmp	r2, r1
 8000f9a:	d328      	bcc.n	8000fee <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f9c:	6821      	ldr	r1, [r4, #0]
 8000f9e:	078f      	lsls	r7, r1, #30
 8000fa0:	d42d      	bmi.n	8000ffe <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fa2:	07c8      	lsls	r0, r1, #31
 8000fa4:	d440      	bmi.n	8001028 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000fa6:	4b3f      	ldr	r3, [pc, #252]	; (80010a4 <HAL_RCC_ClockConfig+0x124>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	f002 020f 	and.w	r2, r2, #15
 8000fae:	4295      	cmp	r5, r2
 8000fb0:	d366      	bcc.n	8001080 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fb2:	6822      	ldr	r2, [r4, #0]
 8000fb4:	0751      	lsls	r1, r2, #29
 8000fb6:	d46c      	bmi.n	8001092 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fb8:	0713      	lsls	r3, r2, #28
 8000fba:	d507      	bpl.n	8000fcc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000fbc:	4a3a      	ldr	r2, [pc, #232]	; (80010a8 <HAL_RCC_ClockConfig+0x128>)
 8000fbe:	6921      	ldr	r1, [r4, #16]
 8000fc0:	6893      	ldr	r3, [r2, #8]
 8000fc2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000fc6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000fca:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000fcc:	f7ff ffaa 	bl	8000f24 <HAL_RCC_GetSysClockFreq>
 8000fd0:	4b35      	ldr	r3, [pc, #212]	; (80010a8 <HAL_RCC_ClockConfig+0x128>)
 8000fd2:	4a36      	ldr	r2, [pc, #216]	; (80010ac <HAL_RCC_ClockConfig+0x12c>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000fda:	5cd3      	ldrb	r3, [r2, r3]
 8000fdc:	40d8      	lsrs	r0, r3
 8000fde:	4b34      	ldr	r3, [pc, #208]	; (80010b0 <HAL_RCC_ClockConfig+0x130>)
 8000fe0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f7ff fc3c 	bl	8000860 <HAL_InitTick>
  return HAL_OK;
 8000fe8:	2000      	movs	r0, #0
 8000fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fee:	b2ca      	uxtb	r2, r1
 8000ff0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 030f 	and.w	r3, r3, #15
 8000ff8:	4299      	cmp	r1, r3
 8000ffa:	d1c6      	bne.n	8000f8a <HAL_RCC_ClockConfig+0xa>
 8000ffc:	e7ce      	b.n	8000f9c <HAL_RCC_ClockConfig+0x1c>
 8000ffe:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001000:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001004:	bf1e      	ittt	ne
 8001006:	689a      	ldrne	r2, [r3, #8]
 8001008:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 800100c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800100e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001010:	bf42      	ittt	mi
 8001012:	689a      	ldrmi	r2, [r3, #8]
 8001014:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001018:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	68a0      	ldr	r0, [r4, #8]
 800101e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001022:	4302      	orrs	r2, r0
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	e7bc      	b.n	8000fa2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001028:	6862      	ldr	r2, [r4, #4]
 800102a:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <HAL_RCC_ClockConfig+0x128>)
 800102c:	2a01      	cmp	r2, #1
 800102e:	d11d      	bne.n	800106c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001036:	d0a8      	beq.n	8000f8a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001038:	4e1b      	ldr	r6, [pc, #108]	; (80010a8 <HAL_RCC_ClockConfig+0x128>)
 800103a:	68b3      	ldr	r3, [r6, #8]
 800103c:	f023 0303 	bic.w	r3, r3, #3
 8001040:	4313      	orrs	r3, r2
 8001042:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001044:	f7ff fca0 	bl	8000988 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001048:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800104c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800104e:	68b3      	ldr	r3, [r6, #8]
 8001050:	6862      	ldr	r2, [r4, #4]
 8001052:	f003 030c 	and.w	r3, r3, #12
 8001056:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800105a:	d0a4      	beq.n	8000fa6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800105c:	f7ff fc94 	bl	8000988 <HAL_GetTick>
 8001060:	1bc0      	subs	r0, r0, r7
 8001062:	4540      	cmp	r0, r8
 8001064:	d9f3      	bls.n	800104e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001066:	2003      	movs	r0, #3
}
 8001068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800106c:	1e91      	subs	r1, r2, #2
 800106e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001070:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001072:	d802      	bhi.n	800107a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001074:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001078:	e7dd      	b.n	8001036 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800107a:	f013 0f02 	tst.w	r3, #2
 800107e:	e7da      	b.n	8001036 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001080:	b2ea      	uxtb	r2, r5
 8001082:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	429d      	cmp	r5, r3
 800108c:	f47f af7d 	bne.w	8000f8a <HAL_RCC_ClockConfig+0xa>
 8001090:	e78f      	b.n	8000fb2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001092:	4905      	ldr	r1, [pc, #20]	; (80010a8 <HAL_RCC_ClockConfig+0x128>)
 8001094:	68e0      	ldr	r0, [r4, #12]
 8001096:	688b      	ldr	r3, [r1, #8]
 8001098:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800109c:	4303      	orrs	r3, r0
 800109e:	608b      	str	r3, [r1, #8]
 80010a0:	e78a      	b.n	8000fb8 <HAL_RCC_ClockConfig+0x38>
 80010a2:	bf00      	nop
 80010a4:	40023c00 	.word	0x40023c00
 80010a8:	40023800 	.word	0x40023800
 80010ac:	080024b4 	.word	0x080024b4
 80010b0:	20000000 	.word	0x20000000

080010b4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <HAL_RCC_GetPCLK1Freq+0x18>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80010be:	5cd3      	ldrb	r3, [r2, r3]
 80010c0:	4a03      	ldr	r2, [pc, #12]	; (80010d0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80010c2:	6810      	ldr	r0, [r2, #0]
}
 80010c4:	40d8      	lsrs	r0, r3
 80010c6:	4770      	bx	lr
 80010c8:	40023800 	.word	0x40023800
 80010cc:	080024c4 	.word	0x080024c4
 80010d0:	20000000 	.word	0x20000000

080010d4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80010d6:	4a05      	ldr	r2, [pc, #20]	; (80010ec <HAL_RCC_GetPCLK2Freq+0x18>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80010de:	5cd3      	ldrb	r3, [r2, r3]
 80010e0:	4a03      	ldr	r2, [pc, #12]	; (80010f0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80010e2:	6810      	ldr	r0, [r2, #0]
}
 80010e4:	40d8      	lsrs	r0, r3
 80010e6:	4770      	bx	lr
 80010e8:	40023800 	.word	0x40023800
 80010ec:	080024c4 	.word	0x080024c4
 80010f0:	20000000 	.word	0x20000000

080010f4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80010f4:	230f      	movs	r3, #15
 80010f6:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <HAL_RCC_GetClockConfig+0x34>)
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	f002 0203 	and.w	r2, r2, #3
 8001100:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001108:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001110:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	08db      	lsrs	r3, r3, #3
 8001116:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800111a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <HAL_RCC_GetClockConfig+0x38>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 030f 	and.w	r3, r3, #15
 8001124:	600b      	str	r3, [r1, #0]
 8001126:	4770      	bx	lr
 8001128:	40023800 	.word	0x40023800
 800112c:	40023c00 	.word	0x40023c00

08001130 <HAL_TIM_Base_MspInit>:
 8001130:	4770      	bx	lr

08001132 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001132:	6803      	ldr	r3, [r0, #0]
 8001134:	68da      	ldr	r2, [r3, #12]
 8001136:	f042 0201 	orr.w	r2, r2, #1
 800113a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001142:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8001144:	bf1e      	ittt	ne
 8001146:	681a      	ldrne	r2, [r3, #0]
 8001148:	f042 0201 	orrne.w	r2, r2, #1
 800114c:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800114e:	2000      	movs	r0, #0
 8001150:	4770      	bx	lr

08001152 <HAL_TIM_OC_DelayElapsedCallback>:
 8001152:	4770      	bx	lr

08001154 <HAL_TIM_IC_CaptureCallback>:
 8001154:	4770      	bx	lr

08001156 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001156:	4770      	bx	lr

08001158 <HAL_TIM_TriggerCallback>:
 8001158:	4770      	bx	lr

0800115a <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800115a:	6803      	ldr	r3, [r0, #0]
 800115c:	691a      	ldr	r2, [r3, #16]
 800115e:	0791      	lsls	r1, r2, #30
{
 8001160:	b510      	push	{r4, lr}
 8001162:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001164:	d50e      	bpl.n	8001184 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	0792      	lsls	r2, r2, #30
 800116a:	d50b      	bpl.n	8001184 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800116c:	f06f 0202 	mvn.w	r2, #2
 8001170:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001172:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001174:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001176:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001178:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800117a:	d077      	beq.n	800126c <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800117c:	f7ff ffea 	bl	8001154 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001180:	2300      	movs	r3, #0
 8001182:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001184:	6823      	ldr	r3, [r4, #0]
 8001186:	691a      	ldr	r2, [r3, #16]
 8001188:	0750      	lsls	r0, r2, #29
 800118a:	d510      	bpl.n	80011ae <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800118c:	68da      	ldr	r2, [r3, #12]
 800118e:	0751      	lsls	r1, r2, #29
 8001190:	d50d      	bpl.n	80011ae <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001192:	f06f 0204 	mvn.w	r2, #4
 8001196:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001198:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800119a:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800119c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80011a0:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80011a2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80011a4:	d068      	beq.n	8001278 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80011a6:	f7ff ffd5 	bl	8001154 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011aa:	2300      	movs	r3, #0
 80011ac:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80011ae:	6823      	ldr	r3, [r4, #0]
 80011b0:	691a      	ldr	r2, [r3, #16]
 80011b2:	0712      	lsls	r2, r2, #28
 80011b4:	d50f      	bpl.n	80011d6 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80011b6:	68da      	ldr	r2, [r3, #12]
 80011b8:	0710      	lsls	r0, r2, #28
 80011ba:	d50c      	bpl.n	80011d6 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80011bc:	f06f 0208 	mvn.w	r2, #8
 80011c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80011c2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80011c4:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80011c6:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80011c8:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80011ca:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80011cc:	d05a      	beq.n	8001284 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80011ce:	f7ff ffc1 	bl	8001154 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011d2:	2300      	movs	r3, #0
 80011d4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80011d6:	6823      	ldr	r3, [r4, #0]
 80011d8:	691a      	ldr	r2, [r3, #16]
 80011da:	06d2      	lsls	r2, r2, #27
 80011dc:	d510      	bpl.n	8001200 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	06d0      	lsls	r0, r2, #27
 80011e2:	d50d      	bpl.n	8001200 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80011e4:	f06f 0210 	mvn.w	r2, #16
 80011e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80011ea:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80011ec:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80011ee:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80011f2:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80011f4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80011f6:	d04b      	beq.n	8001290 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80011f8:	f7ff ffac 	bl	8001154 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011fc:	2300      	movs	r3, #0
 80011fe:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001200:	6823      	ldr	r3, [r4, #0]
 8001202:	691a      	ldr	r2, [r3, #16]
 8001204:	07d1      	lsls	r1, r2, #31
 8001206:	d508      	bpl.n	800121a <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001208:	68da      	ldr	r2, [r3, #12]
 800120a:	07d2      	lsls	r2, r2, #31
 800120c:	d505      	bpl.n	800121a <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800120e:	f06f 0201 	mvn.w	r2, #1
 8001212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001214:	4620      	mov	r0, r4
 8001216:	f7ff fabf 	bl	8000798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800121a:	6823      	ldr	r3, [r4, #0]
 800121c:	691a      	ldr	r2, [r3, #16]
 800121e:	0610      	lsls	r0, r2, #24
 8001220:	d508      	bpl.n	8001234 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	0611      	lsls	r1, r2, #24
 8001226:	d505      	bpl.n	8001234 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001228:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800122c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800122e:	4620      	mov	r0, r4
 8001230:	f000 f8b7 	bl	80013a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001234:	6823      	ldr	r3, [r4, #0]
 8001236:	691a      	ldr	r2, [r3, #16]
 8001238:	0652      	lsls	r2, r2, #25
 800123a:	d508      	bpl.n	800124e <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800123c:	68da      	ldr	r2, [r3, #12]
 800123e:	0650      	lsls	r0, r2, #25
 8001240:	d505      	bpl.n	800124e <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001242:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001248:	4620      	mov	r0, r4
 800124a:	f7ff ff85 	bl	8001158 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800124e:	6823      	ldr	r3, [r4, #0]
 8001250:	691a      	ldr	r2, [r3, #16]
 8001252:	0691      	lsls	r1, r2, #26
 8001254:	d522      	bpl.n	800129c <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001256:	68da      	ldr	r2, [r3, #12]
 8001258:	0692      	lsls	r2, r2, #26
 800125a:	d51f      	bpl.n	800129c <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800125c:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001260:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001262:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001268:	f000 b89a 	b.w	80013a0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800126c:	f7ff ff71 	bl	8001152 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001270:	4620      	mov	r0, r4
 8001272:	f7ff ff70 	bl	8001156 <HAL_TIM_PWM_PulseFinishedCallback>
 8001276:	e783      	b.n	8001180 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001278:	f7ff ff6b 	bl	8001152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800127c:	4620      	mov	r0, r4
 800127e:	f7ff ff6a 	bl	8001156 <HAL_TIM_PWM_PulseFinishedCallback>
 8001282:	e792      	b.n	80011aa <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001284:	f7ff ff65 	bl	8001152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001288:	4620      	mov	r0, r4
 800128a:	f7ff ff64 	bl	8001156 <HAL_TIM_PWM_PulseFinishedCallback>
 800128e:	e7a0      	b.n	80011d2 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001290:	f7ff ff5f 	bl	8001152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001294:	4620      	mov	r0, r4
 8001296:	f7ff ff5e 	bl	8001156 <HAL_TIM_PWM_PulseFinishedCallback>
 800129a:	e7af      	b.n	80011fc <HAL_TIM_IRQHandler+0xa2>
 800129c:	bd10      	pop	{r4, pc}
	...

080012a0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012a0:	4a30      	ldr	r2, [pc, #192]	; (8001364 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80012a2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012a4:	4290      	cmp	r0, r2
 80012a6:	d012      	beq.n	80012ce <TIM_Base_SetConfig+0x2e>
 80012a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80012ac:	d00f      	beq.n	80012ce <TIM_Base_SetConfig+0x2e>
 80012ae:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80012b2:	4290      	cmp	r0, r2
 80012b4:	d00b      	beq.n	80012ce <TIM_Base_SetConfig+0x2e>
 80012b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012ba:	4290      	cmp	r0, r2
 80012bc:	d007      	beq.n	80012ce <TIM_Base_SetConfig+0x2e>
 80012be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012c2:	4290      	cmp	r0, r2
 80012c4:	d003      	beq.n	80012ce <TIM_Base_SetConfig+0x2e>
 80012c6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80012ca:	4290      	cmp	r0, r2
 80012cc:	d119      	bne.n	8001302 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80012ce:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80012d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80012d4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80012d6:	4a23      	ldr	r2, [pc, #140]	; (8001364 <TIM_Base_SetConfig+0xc4>)
 80012d8:	4290      	cmp	r0, r2
 80012da:	d029      	beq.n	8001330 <TIM_Base_SetConfig+0x90>
 80012dc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80012e0:	d026      	beq.n	8001330 <TIM_Base_SetConfig+0x90>
 80012e2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80012e6:	4290      	cmp	r0, r2
 80012e8:	d022      	beq.n	8001330 <TIM_Base_SetConfig+0x90>
 80012ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012ee:	4290      	cmp	r0, r2
 80012f0:	d01e      	beq.n	8001330 <TIM_Base_SetConfig+0x90>
 80012f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012f6:	4290      	cmp	r0, r2
 80012f8:	d01a      	beq.n	8001330 <TIM_Base_SetConfig+0x90>
 80012fa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80012fe:	4290      	cmp	r0, r2
 8001300:	d016      	beq.n	8001330 <TIM_Base_SetConfig+0x90>
 8001302:	4a19      	ldr	r2, [pc, #100]	; (8001368 <TIM_Base_SetConfig+0xc8>)
 8001304:	4290      	cmp	r0, r2
 8001306:	d013      	beq.n	8001330 <TIM_Base_SetConfig+0x90>
 8001308:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800130c:	4290      	cmp	r0, r2
 800130e:	d00f      	beq.n	8001330 <TIM_Base_SetConfig+0x90>
 8001310:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001314:	4290      	cmp	r0, r2
 8001316:	d00b      	beq.n	8001330 <TIM_Base_SetConfig+0x90>
 8001318:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800131c:	4290      	cmp	r0, r2
 800131e:	d007      	beq.n	8001330 <TIM_Base_SetConfig+0x90>
 8001320:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001324:	4290      	cmp	r0, r2
 8001326:	d003      	beq.n	8001330 <TIM_Base_SetConfig+0x90>
 8001328:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800132c:	4290      	cmp	r0, r2
 800132e:	d103      	bne.n	8001338 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001330:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001336:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001338:	694a      	ldr	r2, [r1, #20]
 800133a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800133e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001340:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001342:	688b      	ldr	r3, [r1, #8]
 8001344:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001346:	680b      	ldr	r3, [r1, #0]
 8001348:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <TIM_Base_SetConfig+0xc4>)
 800134c:	4298      	cmp	r0, r3
 800134e:	d003      	beq.n	8001358 <TIM_Base_SetConfig+0xb8>
 8001350:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001354:	4298      	cmp	r0, r3
 8001356:	d101      	bne.n	800135c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001358:	690b      	ldr	r3, [r1, #16]
 800135a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800135c:	2301      	movs	r3, #1
 800135e:	6143      	str	r3, [r0, #20]
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40010000 	.word	0x40010000
 8001368:	40014000 	.word	0x40014000

0800136c <HAL_TIM_Base_Init>:
{
 800136c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800136e:	4604      	mov	r4, r0
 8001370:	b1a0      	cbz	r0, 800139c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001372:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001376:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800137a:	b91b      	cbnz	r3, 8001384 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800137c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001380:	f7ff fed6 	bl	8001130 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001384:	2302      	movs	r3, #2
 8001386:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800138a:	6820      	ldr	r0, [r4, #0]
 800138c:	1d21      	adds	r1, r4, #4
 800138e:	f7ff ff87 	bl	80012a0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001392:	2301      	movs	r3, #1
 8001394:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001398:	2000      	movs	r0, #0
 800139a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800139c:	2001      	movs	r0, #1
}
 800139e:	bd10      	pop	{r4, pc}

080013a0 <HAL_TIMEx_CommutCallback>:
 80013a0:	4770      	bx	lr

080013a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80013a2:	4770      	bx	lr

080013a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80013a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013a8:	6806      	ldr	r6, [r0, #0]
 80013aa:	68c2      	ldr	r2, [r0, #12]
 80013ac:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80013ae:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013b4:	4313      	orrs	r3, r2
 80013b6:	6133      	str	r3, [r6, #16]
{
 80013b8:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80013ba:	6883      	ldr	r3, [r0, #8]
 80013bc:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80013be:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80013c0:	4303      	orrs	r3, r0
 80013c2:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80013c4:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80013c8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80013ca:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80013ce:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 80013d0:	4313      	orrs	r3, r2
 80013d2:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80013d4:	6973      	ldr	r3, [r6, #20]
 80013d6:	69a2      	ldr	r2, [r4, #24]
 80013d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013dc:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013de:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80013e2:	6173      	str	r3, [r6, #20]
 80013e4:	4b7a      	ldr	r3, [pc, #488]	; (80015d0 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013e6:	d17c      	bne.n	80014e2 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80013e8:	429e      	cmp	r6, r3
 80013ea:	d003      	beq.n	80013f4 <UART_SetConfig+0x50>
 80013ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013f0:	429e      	cmp	r6, r3
 80013f2:	d144      	bne.n	800147e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80013f4:	f7ff fe6e 	bl	80010d4 <HAL_RCC_GetPCLK2Freq>
 80013f8:	2519      	movs	r5, #25
 80013fa:	fb05 f300 	mul.w	r3, r5, r0
 80013fe:	6860      	ldr	r0, [r4, #4]
 8001400:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001404:	0040      	lsls	r0, r0, #1
 8001406:	fbb3 f3f0 	udiv	r3, r3, r0
 800140a:	fbb3 f3f9 	udiv	r3, r3, r9
 800140e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001412:	f7ff fe5f 	bl	80010d4 <HAL_RCC_GetPCLK2Freq>
 8001416:	6863      	ldr	r3, [r4, #4]
 8001418:	4368      	muls	r0, r5
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	fbb0 f7f3 	udiv	r7, r0, r3
 8001420:	f7ff fe58 	bl	80010d4 <HAL_RCC_GetPCLK2Freq>
 8001424:	6863      	ldr	r3, [r4, #4]
 8001426:	4368      	muls	r0, r5
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	fbb0 f3f3 	udiv	r3, r0, r3
 800142e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001432:	fb09 7313 	mls	r3, r9, r3, r7
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	3332      	adds	r3, #50	; 0x32
 800143a:	fbb3 f3f9 	udiv	r3, r3, r9
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001444:	f7ff fe46 	bl	80010d4 <HAL_RCC_GetPCLK2Freq>
 8001448:	6862      	ldr	r2, [r4, #4]
 800144a:	4368      	muls	r0, r5
 800144c:	0052      	lsls	r2, r2, #1
 800144e:	fbb0 faf2 	udiv	sl, r0, r2
 8001452:	f7ff fe3f 	bl	80010d4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001456:	6863      	ldr	r3, [r4, #4]
 8001458:	4368      	muls	r0, r5
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001460:	fbb3 f3f9 	udiv	r3, r3, r9
 8001464:	fb09 a313 	mls	r3, r9, r3, sl
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	3332      	adds	r3, #50	; 0x32
 800146c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001476:	443b      	add	r3, r7
 8001478:	60b3      	str	r3, [r6, #8]
 800147a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800147e:	f7ff fe19 	bl	80010b4 <HAL_RCC_GetPCLK1Freq>
 8001482:	2519      	movs	r5, #25
 8001484:	fb05 f300 	mul.w	r3, r5, r0
 8001488:	6860      	ldr	r0, [r4, #4]
 800148a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800148e:	0040      	lsls	r0, r0, #1
 8001490:	fbb3 f3f0 	udiv	r3, r3, r0
 8001494:	fbb3 f3f9 	udiv	r3, r3, r9
 8001498:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800149c:	f7ff fe0a 	bl	80010b4 <HAL_RCC_GetPCLK1Freq>
 80014a0:	6863      	ldr	r3, [r4, #4]
 80014a2:	4368      	muls	r0, r5
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	fbb0 f7f3 	udiv	r7, r0, r3
 80014aa:	f7ff fe03 	bl	80010b4 <HAL_RCC_GetPCLK1Freq>
 80014ae:	6863      	ldr	r3, [r4, #4]
 80014b0:	4368      	muls	r0, r5
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80014b8:	fbb3 f3f9 	udiv	r3, r3, r9
 80014bc:	fb09 7313 	mls	r3, r9, r3, r7
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	3332      	adds	r3, #50	; 0x32
 80014c4:	fbb3 f3f9 	udiv	r3, r3, r9
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80014ce:	f7ff fdf1 	bl	80010b4 <HAL_RCC_GetPCLK1Freq>
 80014d2:	6862      	ldr	r2, [r4, #4]
 80014d4:	4368      	muls	r0, r5
 80014d6:	0052      	lsls	r2, r2, #1
 80014d8:	fbb0 faf2 	udiv	sl, r0, r2
 80014dc:	f7ff fdea 	bl	80010b4 <HAL_RCC_GetPCLK1Freq>
 80014e0:	e7b9      	b.n	8001456 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80014e2:	429e      	cmp	r6, r3
 80014e4:	d002      	beq.n	80014ec <UART_SetConfig+0x148>
 80014e6:	4b3b      	ldr	r3, [pc, #236]	; (80015d4 <UART_SetConfig+0x230>)
 80014e8:	429e      	cmp	r6, r3
 80014ea:	d140      	bne.n	800156e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80014ec:	f7ff fdf2 	bl	80010d4 <HAL_RCC_GetPCLK2Freq>
 80014f0:	6867      	ldr	r7, [r4, #4]
 80014f2:	2519      	movs	r5, #25
 80014f4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80014f8:	fb05 f300 	mul.w	r3, r5, r0
 80014fc:	00bf      	lsls	r7, r7, #2
 80014fe:	fbb3 f3f7 	udiv	r3, r3, r7
 8001502:	fbb3 f3f9 	udiv	r3, r3, r9
 8001506:	011f      	lsls	r7, r3, #4
 8001508:	f7ff fde4 	bl	80010d4 <HAL_RCC_GetPCLK2Freq>
 800150c:	6863      	ldr	r3, [r4, #4]
 800150e:	4368      	muls	r0, r5
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	fbb0 f8f3 	udiv	r8, r0, r3
 8001516:	f7ff fddd 	bl	80010d4 <HAL_RCC_GetPCLK2Freq>
 800151a:	6863      	ldr	r3, [r4, #4]
 800151c:	4368      	muls	r0, r5
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	fbb0 f3f3 	udiv	r3, r0, r3
 8001524:	fbb3 f3f9 	udiv	r3, r3, r9
 8001528:	fb09 8313 	mls	r3, r9, r3, r8
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	3332      	adds	r3, #50	; 0x32
 8001530:	fbb3 f3f9 	udiv	r3, r3, r9
 8001534:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001538:	f7ff fdcc 	bl	80010d4 <HAL_RCC_GetPCLK2Freq>
 800153c:	6862      	ldr	r2, [r4, #4]
 800153e:	4368      	muls	r0, r5
 8001540:	0092      	lsls	r2, r2, #2
 8001542:	fbb0 faf2 	udiv	sl, r0, r2
 8001546:	f7ff fdc5 	bl	80010d4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800154a:	6863      	ldr	r3, [r4, #4]
 800154c:	4368      	muls	r0, r5
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	fbb0 f3f3 	udiv	r3, r0, r3
 8001554:	fbb3 f3f9 	udiv	r3, r3, r9
 8001558:	fb09 a313 	mls	r3, r9, r3, sl
 800155c:	011b      	lsls	r3, r3, #4
 800155e:	3332      	adds	r3, #50	; 0x32
 8001560:	fbb3 f3f9 	udiv	r3, r3, r9
 8001564:	f003 030f 	and.w	r3, r3, #15
 8001568:	ea43 0308 	orr.w	r3, r3, r8
 800156c:	e783      	b.n	8001476 <UART_SetConfig+0xd2>
 800156e:	f7ff fda1 	bl	80010b4 <HAL_RCC_GetPCLK1Freq>
 8001572:	6867      	ldr	r7, [r4, #4]
 8001574:	2519      	movs	r5, #25
 8001576:	f04f 0964 	mov.w	r9, #100	; 0x64
 800157a:	fb05 f300 	mul.w	r3, r5, r0
 800157e:	00bf      	lsls	r7, r7, #2
 8001580:	fbb3 f3f7 	udiv	r3, r3, r7
 8001584:	fbb3 f3f9 	udiv	r3, r3, r9
 8001588:	011f      	lsls	r7, r3, #4
 800158a:	f7ff fd93 	bl	80010b4 <HAL_RCC_GetPCLK1Freq>
 800158e:	6863      	ldr	r3, [r4, #4]
 8001590:	4368      	muls	r0, r5
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	fbb0 f8f3 	udiv	r8, r0, r3
 8001598:	f7ff fd8c 	bl	80010b4 <HAL_RCC_GetPCLK1Freq>
 800159c:	6863      	ldr	r3, [r4, #4]
 800159e:	4368      	muls	r0, r5
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015a6:	fbb3 f3f9 	udiv	r3, r3, r9
 80015aa:	fb09 8313 	mls	r3, r9, r3, r8
 80015ae:	011b      	lsls	r3, r3, #4
 80015b0:	3332      	adds	r3, #50	; 0x32
 80015b2:	fbb3 f3f9 	udiv	r3, r3, r9
 80015b6:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80015ba:	f7ff fd7b 	bl	80010b4 <HAL_RCC_GetPCLK1Freq>
 80015be:	6862      	ldr	r2, [r4, #4]
 80015c0:	4368      	muls	r0, r5
 80015c2:	0092      	lsls	r2, r2, #2
 80015c4:	fbb0 faf2 	udiv	sl, r0, r2
 80015c8:	f7ff fd74 	bl	80010b4 <HAL_RCC_GetPCLK1Freq>
 80015cc:	e7bd      	b.n	800154a <UART_SetConfig+0x1a6>
 80015ce:	bf00      	nop
 80015d0:	40011000 	.word	0x40011000
 80015d4:	40011400 	.word	0x40011400

080015d8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80015d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015da:	4604      	mov	r4, r0
 80015dc:	460e      	mov	r6, r1
 80015de:	4617      	mov	r7, r2
 80015e0:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80015e2:	6821      	ldr	r1, [r4, #0]
 80015e4:	680b      	ldr	r3, [r1, #0]
 80015e6:	ea36 0303 	bics.w	r3, r6, r3
 80015ea:	d101      	bne.n	80015f0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80015ec:	2000      	movs	r0, #0
}
 80015ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80015f0:	1c6b      	adds	r3, r5, #1
 80015f2:	d0f7      	beq.n	80015e4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80015f4:	b995      	cbnz	r5, 800161c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80015f6:	6823      	ldr	r3, [r4, #0]
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80015fe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001600:	695a      	ldr	r2, [r3, #20]
 8001602:	f022 0201 	bic.w	r2, r2, #1
 8001606:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001608:	2320      	movs	r3, #32
 800160a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800160e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001612:	2300      	movs	r3, #0
 8001614:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001618:	2003      	movs	r0, #3
 800161a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800161c:	f7ff f9b4 	bl	8000988 <HAL_GetTick>
 8001620:	1bc0      	subs	r0, r0, r7
 8001622:	4285      	cmp	r5, r0
 8001624:	d2dd      	bcs.n	80015e2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001626:	e7e6      	b.n	80015f6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001628 <HAL_UART_Init>:
{
 8001628:	b510      	push	{r4, lr}
  if (huart == NULL)
 800162a:	4604      	mov	r4, r0
 800162c:	b340      	cbz	r0, 8001680 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800162e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001632:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001636:	b91b      	cbnz	r3, 8001640 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001638:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800163c:	f7ff f8d8 	bl	80007f0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001640:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001642:	2324      	movs	r3, #36	; 0x24
 8001644:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001648:	68d3      	ldr	r3, [r2, #12]
 800164a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800164e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001650:	4620      	mov	r0, r4
 8001652:	f7ff fea7 	bl	80013a4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001656:	6823      	ldr	r3, [r4, #0]
 8001658:	691a      	ldr	r2, [r3, #16]
 800165a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800165e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001660:	695a      	ldr	r2, [r3, #20]
 8001662:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001666:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001668:	68da      	ldr	r2, [r3, #12]
 800166a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800166e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001670:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001672:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001674:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001676:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800167a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800167e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001680:	2001      	movs	r0, #1
}
 8001682:	bd10      	pop	{r4, pc}

08001684 <HAL_UART_Transmit>:
{
 8001684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001688:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800168a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800168e:	2b20      	cmp	r3, #32
{
 8001690:	4604      	mov	r4, r0
 8001692:	460d      	mov	r5, r1
 8001694:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001696:	d14f      	bne.n	8001738 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8001698:	2900      	cmp	r1, #0
 800169a:	d04a      	beq.n	8001732 <HAL_UART_Transmit+0xae>
 800169c:	2a00      	cmp	r2, #0
 800169e:	d048      	beq.n	8001732 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80016a0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d047      	beq.n	8001738 <HAL_UART_Transmit+0xb4>
 80016a8:	2301      	movs	r3, #1
 80016aa:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016b2:	2321      	movs	r3, #33	; 0x21
 80016b4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80016b8:	f7ff f966 	bl	8000988 <HAL_GetTick>
    huart->TxXferSize = Size;
 80016bc:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80016c0:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80016c2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80016c6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	b96b      	cbnz	r3, 80016e8 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80016cc:	463b      	mov	r3, r7
 80016ce:	4632      	mov	r2, r6
 80016d0:	2140      	movs	r1, #64	; 0x40
 80016d2:	4620      	mov	r0, r4
 80016d4:	f7ff ff80 	bl	80015d8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80016d8:	b9b0      	cbnz	r0, 8001708 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 80016da:	2320      	movs	r3, #32
 80016dc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80016e0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80016e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80016e8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80016ea:	3b01      	subs	r3, #1
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80016f0:	68a3      	ldr	r3, [r4, #8]
 80016f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016f6:	4632      	mov	r2, r6
 80016f8:	463b      	mov	r3, r7
 80016fa:	f04f 0180 	mov.w	r1, #128	; 0x80
 80016fe:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001700:	d10e      	bne.n	8001720 <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001702:	f7ff ff69 	bl	80015d8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001706:	b110      	cbz	r0, 800170e <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001708:	2003      	movs	r0, #3
 800170a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800170e:	882b      	ldrh	r3, [r5, #0]
 8001710:	6822      	ldr	r2, [r4, #0]
 8001712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001716:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001718:	6923      	ldr	r3, [r4, #16]
 800171a:	b943      	cbnz	r3, 800172e <HAL_UART_Transmit+0xaa>
          pData += 2U;
 800171c:	3502      	adds	r5, #2
 800171e:	e7d2      	b.n	80016c6 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001720:	f7ff ff5a 	bl	80015d8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001724:	2800      	cmp	r0, #0
 8001726:	d1ef      	bne.n	8001708 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001728:	6823      	ldr	r3, [r4, #0]
 800172a:	782a      	ldrb	r2, [r5, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	3501      	adds	r5, #1
 8001730:	e7c9      	b.n	80016c6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001732:	2001      	movs	r0, #1
 8001734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001738:	2002      	movs	r0, #2
}
 800173a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800173e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800173e:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001740:	f000 fcac 	bl	800209c <vTaskStartScheduler>
  
  return osOK;
}
 8001744:	2000      	movs	r0, #0
 8001746:	bd08      	pop	{r3, pc}

08001748 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001748:	b570      	push	{r4, r5, r6, lr}
 800174a:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800174c:	6946      	ldr	r6, [r0, #20]
 800174e:	692a      	ldr	r2, [r5, #16]
 8001750:	6840      	ldr	r0, [r0, #4]
 8001752:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8001756:	460b      	mov	r3, r1
 8001758:	b086      	sub	sp, #24
 800175a:	6829      	ldr	r1, [r5, #0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800175c:	b176      	cbz	r6, 800177c <osThreadCreate+0x34>
 800175e:	69ad      	ldr	r5, [r5, #24]
 8001760:	b165      	cbz	r5, 800177c <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8001762:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001764:	bf14      	ite	ne
 8001766:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001768:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800176a:	9502      	str	r5, [sp, #8]
 800176c:	e88d 0050 	stmia.w	sp, {r4, r6}
 8001770:	f000 fc30 	bl	8001fd4 <xTaskCreateStatic>
 8001774:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001776:	9805      	ldr	r0, [sp, #20]
}
 8001778:	b006      	add	sp, #24
 800177a:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 800177c:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800177e:	bf14      	ite	ne
 8001780:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001782:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001784:	ad05      	add	r5, sp, #20
 8001786:	b292      	uxth	r2, r2
 8001788:	e88d 0030 	stmia.w	sp, {r4, r5}
 800178c:	f000 fc59 	bl	8002042 <xTaskCreate>
 8001790:	2801      	cmp	r0, #1
 8001792:	d0f0      	beq.n	8001776 <osThreadCreate+0x2e>
      return NULL;
 8001794:	2000      	movs	r0, #0
 8001796:	e7ef      	b.n	8001778 <osThreadCreate+0x30>

08001798 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001798:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800179a:	2800      	cmp	r0, #0
 800179c:	bf08      	it	eq
 800179e:	2001      	moveq	r0, #1
 80017a0:	f000 fdc4 	bl	800232c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80017a4:	2000      	movs	r0, #0
 80017a6:	bd08      	pop	{r3, pc}

080017a8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80017a8:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <prvInsertBlockIntoFreeList+0x40>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	4282      	cmp	r2, r0
 80017b0:	d318      	bcc.n	80017e4 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80017b2:	685c      	ldr	r4, [r3, #4]
 80017b4:	1919      	adds	r1, r3, r4
 80017b6:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80017b8:	bf01      	itttt	eq
 80017ba:	6841      	ldreq	r1, [r0, #4]
 80017bc:	4618      	moveq	r0, r3
 80017be:	1909      	addeq	r1, r1, r4
 80017c0:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80017c2:	6844      	ldr	r4, [r0, #4]
 80017c4:	1901      	adds	r1, r0, r4
 80017c6:	428a      	cmp	r2, r1
 80017c8:	d107      	bne.n	80017da <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80017ca:	4908      	ldr	r1, [pc, #32]	; (80017ec <prvInsertBlockIntoFreeList+0x44>)
 80017cc:	6809      	ldr	r1, [r1, #0]
 80017ce:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80017d0:	bf1f      	itttt	ne
 80017d2:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80017d4:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80017d6:	1909      	addne	r1, r1, r4
 80017d8:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80017da:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80017dc:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80017de:	bf18      	it	ne
 80017e0:	6018      	strne	r0, [r3, #0]
 80017e2:	bd10      	pop	{r4, pc}
 80017e4:	4613      	mov	r3, r2
 80017e6:	e7e1      	b.n	80017ac <prvInsertBlockIntoFreeList+0x4>
 80017e8:	20003e8c 	.word	0x20003e8c
 80017ec:	2000027c 	.word	0x2000027c

080017f0 <pvPortMalloc>:
{
 80017f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017f4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80017f6:	f000 fc87 	bl	8002108 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80017fa:	493e      	ldr	r1, [pc, #248]	; (80018f4 <pvPortMalloc+0x104>)
 80017fc:	4d3e      	ldr	r5, [pc, #248]	; (80018f8 <pvPortMalloc+0x108>)
 80017fe:	680b      	ldr	r3, [r1, #0]
 8001800:	bb0b      	cbnz	r3, 8001846 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8001802:	4a3e      	ldr	r2, [pc, #248]	; (80018fc <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001804:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001806:	bf1f      	itttt	ne
 8001808:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800180a:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800180e:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8001812:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001814:	bf14      	ite	ne
 8001816:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001818:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800181c:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800181e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001820:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001824:	4e36      	ldr	r6, [pc, #216]	; (8001900 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8001826:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001828:	2000      	movs	r0, #0
 800182a:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800182c:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 800182e:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001830:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001832:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001834:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001836:	4b33      	ldr	r3, [pc, #204]	; (8001904 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001838:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800183a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800183c:	4b32      	ldr	r3, [pc, #200]	; (8001908 <pvPortMalloc+0x118>)
 800183e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001840:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001844:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001846:	682f      	ldr	r7, [r5, #0]
 8001848:	4227      	tst	r7, r4
 800184a:	d116      	bne.n	800187a <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 800184c:	2c00      	cmp	r4, #0
 800184e:	d041      	beq.n	80018d4 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8001850:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001854:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001856:	bf1c      	itt	ne
 8001858:	f023 0307 	bicne.w	r3, r3, #7
 800185c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800185e:	b163      	cbz	r3, 800187a <pvPortMalloc+0x8a>
 8001860:	4a29      	ldr	r2, [pc, #164]	; (8001908 <pvPortMalloc+0x118>)
 8001862:	6816      	ldr	r6, [r2, #0]
 8001864:	42b3      	cmp	r3, r6
 8001866:	4690      	mov	r8, r2
 8001868:	d807      	bhi.n	800187a <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800186a:	4a25      	ldr	r2, [pc, #148]	; (8001900 <pvPortMalloc+0x110>)
 800186c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800186e:	6868      	ldr	r0, [r5, #4]
 8001870:	4283      	cmp	r3, r0
 8001872:	d804      	bhi.n	800187e <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8001874:	6809      	ldr	r1, [r1, #0]
 8001876:	428d      	cmp	r5, r1
 8001878:	d107      	bne.n	800188a <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800187a:	2400      	movs	r4, #0
 800187c:	e02a      	b.n	80018d4 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800187e:	682c      	ldr	r4, [r5, #0]
 8001880:	2c00      	cmp	r4, #0
 8001882:	d0f7      	beq.n	8001874 <pvPortMalloc+0x84>
 8001884:	462a      	mov	r2, r5
 8001886:	4625      	mov	r5, r4
 8001888:	e7f1      	b.n	800186e <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800188a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800188c:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800188e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001890:	1ac2      	subs	r2, r0, r3
 8001892:	2a10      	cmp	r2, #16
 8001894:	d90f      	bls.n	80018b6 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001896:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001898:	0741      	lsls	r1, r0, #29
 800189a:	d008      	beq.n	80018ae <pvPortMalloc+0xbe>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800189c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018a0:	f383 8811 	msr	BASEPRI, r3
 80018a4:	f3bf 8f6f 	isb	sy
 80018a8:	f3bf 8f4f 	dsb	sy
 80018ac:	e7fe      	b.n	80018ac <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80018ae:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80018b0:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80018b2:	f7ff ff79 	bl	80017a8 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80018b6:	4913      	ldr	r1, [pc, #76]	; (8001904 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80018b8:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80018ba:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80018bc:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80018be:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80018c0:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 80018c2:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80018c6:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80018ca:	bf38      	it	cc
 80018cc:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80018ce:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80018d0:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80018d2:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80018d4:	f000 fcb2 	bl	800223c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80018d8:	0763      	lsls	r3, r4, #29
 80018da:	d008      	beq.n	80018ee <pvPortMalloc+0xfe>
 80018dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018e0:	f383 8811 	msr	BASEPRI, r3
 80018e4:	f3bf 8f6f 	isb	sy
 80018e8:	f3bf 8f4f 	dsb	sy
 80018ec:	e7fe      	b.n	80018ec <pvPortMalloc+0xfc>
}
 80018ee:	4620      	mov	r0, r4
 80018f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018f4:	2000027c 	.word	0x2000027c
 80018f8:	20003e80 	.word	0x20003e80
 80018fc:	20000280 	.word	0x20000280
 8001900:	20003e8c 	.word	0x20003e8c
 8001904:	20003e88 	.word	0x20003e88
 8001908:	20003e84 	.word	0x20003e84

0800190c <vPortFree>:
{
 800190c:	b510      	push	{r4, lr}
	if( pv != NULL )
 800190e:	4604      	mov	r4, r0
 8001910:	b370      	cbz	r0, 8001970 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001912:	4a18      	ldr	r2, [pc, #96]	; (8001974 <vPortFree+0x68>)
 8001914:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001918:	6812      	ldr	r2, [r2, #0]
 800191a:	4213      	tst	r3, r2
 800191c:	d108      	bne.n	8001930 <vPortFree+0x24>
 800191e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001922:	f383 8811 	msr	BASEPRI, r3
 8001926:	f3bf 8f6f 	isb	sy
 800192a:	f3bf 8f4f 	dsb	sy
 800192e:	e7fe      	b.n	800192e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001930:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001934:	b141      	cbz	r1, 8001948 <vPortFree+0x3c>
 8001936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800193a:	f383 8811 	msr	BASEPRI, r3
 800193e:	f3bf 8f6f 	isb	sy
 8001942:	f3bf 8f4f 	dsb	sy
 8001946:	e7fe      	b.n	8001946 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001948:	ea23 0302 	bic.w	r3, r3, r2
 800194c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001950:	f000 fbda 	bl	8002108 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001954:	4a08      	ldr	r2, [pc, #32]	; (8001978 <vPortFree+0x6c>)
 8001956:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800195a:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800195c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001960:	440b      	add	r3, r1
 8001962:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001964:	f7ff ff20 	bl	80017a8 <prvInsertBlockIntoFreeList>
}
 8001968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800196c:	f000 bc66 	b.w	800223c <xTaskResumeAll>
 8001970:	bd10      	pop	{r4, pc}
 8001972:	bf00      	nop
 8001974:	20003e80 	.word	0x20003e80
 8001978:	20003e84 	.word	0x20003e84

0800197c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800197c:	f100 0308 	add.w	r3, r0, #8
 8001980:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001982:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001986:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001988:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800198a:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800198c:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800198e:	6003      	str	r3, [r0, #0]
 8001990:	4770      	bx	lr

08001992 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001992:	2300      	movs	r3, #0
 8001994:	6103      	str	r3, [r0, #16]
 8001996:	4770      	bx	lr

08001998 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001998:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800199a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80019a4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80019a6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80019a8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80019aa:	3301      	adds	r3, #1
 80019ac:	6003      	str	r3, [r0, #0]
 80019ae:	4770      	bx	lr

080019b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80019b0:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80019b2:	1c53      	adds	r3, r2, #1
{
 80019b4:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 80019b6:	d10a      	bne.n	80019ce <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80019b8:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80019be:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80019c0:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80019c2:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80019c4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80019c6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80019c8:	3301      	adds	r3, #1
 80019ca:	6003      	str	r3, [r0, #0]
 80019cc:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019ce:	f100 0308 	add.w	r3, r0, #8
 80019d2:	685c      	ldr	r4, [r3, #4]
 80019d4:	6825      	ldr	r5, [r4, #0]
 80019d6:	42aa      	cmp	r2, r5
 80019d8:	d3ef      	bcc.n	80019ba <vListInsert+0xa>
 80019da:	4623      	mov	r3, r4
 80019dc:	e7f9      	b.n	80019d2 <vListInsert+0x22>

080019de <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80019de:	6841      	ldr	r1, [r0, #4]
 80019e0:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80019e2:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80019e4:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80019e6:	6882      	ldr	r2, [r0, #8]
 80019e8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80019ea:	6859      	ldr	r1, [r3, #4]
 80019ec:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80019ee:	bf08      	it	eq
 80019f0:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80019f2:	2200      	movs	r2, #0
 80019f4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	3a01      	subs	r2, #1
 80019fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80019fc:	6818      	ldr	r0, [r3, #0]
}
 80019fe:	4770      	bx	lr

08001a00 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001a00:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001a06:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <prvTaskExitError+0x3c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	d008      	beq.n	8001a20 <prvTaskExitError+0x20>
 8001a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a12:	f383 8811 	msr	BASEPRI, r3
 8001a16:	f3bf 8f6f 	isb	sy
 8001a1a:	f3bf 8f4f 	dsb	sy
 8001a1e:	e7fe      	b.n	8001a1e <prvTaskExitError+0x1e>
 8001a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a24:	f383 8811 	msr	BASEPRI, r3
 8001a28:	f3bf 8f6f 	isb	sy
 8001a2c:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001a30:	9b01      	ldr	r3, [sp, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0fc      	beq.n	8001a30 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001a36:	b002      	add	sp, #8
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000008 	.word	0x20000008

08001a40 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001a40:	4808      	ldr	r0, [pc, #32]	; (8001a64 <prvPortStartFirstTask+0x24>)
 8001a42:	6800      	ldr	r0, [r0, #0]
 8001a44:	6800      	ldr	r0, [r0, #0]
 8001a46:	f380 8808 	msr	MSP, r0
 8001a4a:	f04f 0000 	mov.w	r0, #0
 8001a4e:	f380 8814 	msr	CONTROL, r0
 8001a52:	b662      	cpsie	i
 8001a54:	b661      	cpsie	f
 8001a56:	f3bf 8f4f 	dsb	sy
 8001a5a:	f3bf 8f6f 	isb	sy
 8001a5e:	df00      	svc	0
 8001a60:	bf00      	nop
 8001a62:	0000      	.short	0x0000
 8001a64:	e000ed08 	.word	0xe000ed08

08001a68 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001a68:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001a78 <vPortEnableVFP+0x10>
 8001a6c:	6801      	ldr	r1, [r0, #0]
 8001a6e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001a72:	6001      	str	r1, [r0, #0]
 8001a74:	4770      	bx	lr
 8001a76:	0000      	.short	0x0000
 8001a78:	e000ed88 	.word	0xe000ed88

08001a7c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001a7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a80:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001a84:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <pxPortInitialiseStack+0x28>)
 8001a86:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001a8a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001a8e:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001a92:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001a96:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001a9a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001a9e:	3844      	subs	r0, #68	; 0x44
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	08001a01 	.word	0x08001a01
	...

08001ab0 <SVC_Handler>:
	__asm volatile (
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <pxCurrentTCBConst2>)
 8001ab2:	6819      	ldr	r1, [r3, #0]
 8001ab4:	6808      	ldr	r0, [r1, #0]
 8001ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001aba:	f380 8809 	msr	PSP, r0
 8001abe:	f3bf 8f6f 	isb	sy
 8001ac2:	f04f 0000 	mov.w	r0, #0
 8001ac6:	f380 8811 	msr	BASEPRI, r0
 8001aca:	4770      	bx	lr
 8001acc:	f3af 8000 	nop.w

08001ad0 <pxCurrentTCBConst2>:
 8001ad0:	20003e9c 	.word	0x20003e9c

08001ad4 <vPortEnterCritical>:
 8001ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad8:	f383 8811 	msr	BASEPRI, r3
 8001adc:	f3bf 8f6f 	isb	sy
 8001ae0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001ae4:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <vPortEnterCritical+0x3c>)
 8001ae6:	6813      	ldr	r3, [r2, #0]
 8001ae8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8001aea:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8001aec:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8001aee:	d10d      	bne.n	8001b0c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001af0:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <vPortEnterCritical+0x40>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001af8:	d008      	beq.n	8001b0c <vPortEnterCritical+0x38>
 8001afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001afe:	f383 8811 	msr	BASEPRI, r3
 8001b02:	f3bf 8f6f 	isb	sy
 8001b06:	f3bf 8f4f 	dsb	sy
 8001b0a:	e7fe      	b.n	8001b0a <vPortEnterCritical+0x36>
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20000008 	.word	0x20000008
 8001b14:	e000ed04 	.word	0xe000ed04

08001b18 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001b18:	4a08      	ldr	r2, [pc, #32]	; (8001b3c <vPortExitCritical+0x24>)
 8001b1a:	6813      	ldr	r3, [r2, #0]
 8001b1c:	b943      	cbnz	r3, 8001b30 <vPortExitCritical+0x18>
 8001b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b22:	f383 8811 	msr	BASEPRI, r3
 8001b26:	f3bf 8f6f 	isb	sy
 8001b2a:	f3bf 8f4f 	dsb	sy
 8001b2e:	e7fe      	b.n	8001b2e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001b30:	3b01      	subs	r3, #1
 8001b32:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001b34:	b90b      	cbnz	r3, 8001b3a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001b36:	f383 8811 	msr	BASEPRI, r3
 8001b3a:	4770      	bx	lr
 8001b3c:	20000008 	.word	0x20000008

08001b40 <PendSV_Handler>:
	__asm volatile
 8001b40:	f3ef 8009 	mrs	r0, PSP
 8001b44:	f3bf 8f6f 	isb	sy
 8001b48:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <pxCurrentTCBConst>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	f01e 0f10 	tst.w	lr, #16
 8001b50:	bf08      	it	eq
 8001b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b5a:	6010      	str	r0, [r2, #0]
 8001b5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001b60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001b64:	f380 8811 	msr	BASEPRI, r0
 8001b68:	f3bf 8f4f 	dsb	sy
 8001b6c:	f3bf 8f6f 	isb	sy
 8001b70:	f000 fc00 	bl	8002374 <vTaskSwitchContext>
 8001b74:	f04f 0000 	mov.w	r0, #0
 8001b78:	f380 8811 	msr	BASEPRI, r0
 8001b7c:	bc09      	pop	{r0, r3}
 8001b7e:	6819      	ldr	r1, [r3, #0]
 8001b80:	6808      	ldr	r0, [r1, #0]
 8001b82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b86:	f01e 0f10 	tst.w	lr, #16
 8001b8a:	bf08      	it	eq
 8001b8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001b90:	f380 8809 	msr	PSP, r0
 8001b94:	f3bf 8f6f 	isb	sy
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	f3af 8000 	nop.w

08001ba0 <pxCurrentTCBConst>:
 8001ba0:	20003e9c 	.word	0x20003e9c

08001ba4 <SysTick_Handler>:
{
 8001ba4:	b508      	push	{r3, lr}
	__asm volatile
 8001ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001baa:	f383 8811 	msr	BASEPRI, r3
 8001bae:	f3bf 8f6f 	isb	sy
 8001bb2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001bb6:	f000 faaf 	bl	8002118 <xTaskIncrementTick>
 8001bba:	b118      	cbz	r0, 8001bc4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001bbc:	4b03      	ldr	r3, [pc, #12]	; (8001bcc <SysTick_Handler+0x28>)
 8001bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bc2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f383 8811 	msr	BASEPRI, r3
 8001bca:	bd08      	pop	{r3, pc}
 8001bcc:	e000ed04 	.word	0xe000ed04

08001bd0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001bd0:	4a08      	ldr	r2, [pc, #32]	; (8001bf4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001bd2:	4909      	ldr	r1, [pc, #36]	; (8001bf8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001bd8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001bda:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <vPortSetupTimerInterrupt+0x2c>)
 8001bdc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be6:	4906      	ldr	r1, [pc, #24]	; (8001c00 <vPortSetupTimerInterrupt+0x30>)
 8001be8:	3b01      	subs	r3, #1
 8001bea:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001bec:	2307      	movs	r3, #7
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000e010 	.word	0xe000e010
 8001bf8:	e000e018 	.word	0xe000e018
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	e000e014 	.word	0xe000e014

08001c04 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001c04:	4b39      	ldr	r3, [pc, #228]	; (8001cec <xPortStartScheduler+0xe8>)
 8001c06:	4a3a      	ldr	r2, [pc, #232]	; (8001cf0 <xPortStartScheduler+0xec>)
{
 8001c08:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001c0a:	6819      	ldr	r1, [r3, #0]
 8001c0c:	4291      	cmp	r1, r2
 8001c0e:	d108      	bne.n	8001c22 <xPortStartScheduler+0x1e>
	__asm volatile
 8001c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c14:	f383 8811 	msr	BASEPRI, r3
 8001c18:	f3bf 8f6f 	isb	sy
 8001c1c:	f3bf 8f4f 	dsb	sy
 8001c20:	e7fe      	b.n	8001c20 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4b33      	ldr	r3, [pc, #204]	; (8001cf4 <xPortStartScheduler+0xf0>)
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d108      	bne.n	8001c3c <xPortStartScheduler+0x38>
 8001c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c2e:	f383 8811 	msr	BASEPRI, r3
 8001c32:	f3bf 8f6f 	isb	sy
 8001c36:	f3bf 8f4f 	dsb	sy
 8001c3a:	e7fe      	b.n	8001c3a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001c3c:	4b2e      	ldr	r3, [pc, #184]	; (8001cf8 <xPortStartScheduler+0xf4>)
 8001c3e:	781a      	ldrb	r2, [r3, #0]
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001c44:	22ff      	movs	r2, #255	; 0xff
 8001c46:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001c48:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001c4a:	4a2c      	ldr	r2, [pc, #176]	; (8001cfc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001c52:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001c56:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c5a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001c5c:	4b28      	ldr	r3, [pc, #160]	; (8001d00 <xPortStartScheduler+0xfc>)
 8001c5e:	2207      	movs	r2, #7
 8001c60:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001c62:	2100      	movs	r1, #0
 8001c64:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001c68:	0600      	lsls	r0, r0, #24
 8001c6a:	f102 34ff 	add.w	r4, r2, #4294967295
 8001c6e:	d40d      	bmi.n	8001c8c <xPortStartScheduler+0x88>
 8001c70:	b101      	cbz	r1, 8001c74 <xPortStartScheduler+0x70>
 8001c72:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	2a03      	cmp	r2, #3
 8001c78:	d011      	beq.n	8001c9e <xPortStartScheduler+0x9a>
 8001c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c7e:	f383 8811 	msr	BASEPRI, r3
 8001c82:	f3bf 8f6f 	isb	sy
 8001c86:	f3bf 8f4f 	dsb	sy
 8001c8a:	e7fe      	b.n	8001c8a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001c8c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001c90:	0052      	lsls	r2, r2, #1
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	f88d 2003 	strb.w	r2, [sp, #3]
 8001c98:	2101      	movs	r1, #1
 8001c9a:	4622      	mov	r2, r4
 8001c9c:	e7e2      	b.n	8001c64 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001c9e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001ca0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001ca4:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001ca6:	9b01      	ldr	r3, [sp, #4]
 8001ca8:	4a13      	ldr	r2, [pc, #76]	; (8001cf8 <xPortStartScheduler+0xf4>)
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001cae:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <xPortStartScheduler+0x100>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001cb6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001cbe:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001cc0:	f7ff ff86 	bl	8001bd0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001cc4:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <xPortStartScheduler+0x104>)
 8001cc6:	2400      	movs	r4, #0
 8001cc8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8001cca:	f7ff fecd 	bl	8001a68 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001cce:	4a0f      	ldr	r2, [pc, #60]	; (8001d0c <xPortStartScheduler+0x108>)
 8001cd0:	6813      	ldr	r3, [r2, #0]
 8001cd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001cd6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8001cd8:	f7ff feb2 	bl	8001a40 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8001cdc:	f000 fb4a 	bl	8002374 <vTaskSwitchContext>
	prvTaskExitError();
 8001ce0:	f7ff fe8e 	bl	8001a00 <prvTaskExitError>
}
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	b002      	add	sp, #8
 8001ce8:	bd10      	pop	{r4, pc}
 8001cea:	bf00      	nop
 8001cec:	e000ed00 	.word	0xe000ed00
 8001cf0:	410fc271 	.word	0x410fc271
 8001cf4:	410fc270 	.word	0x410fc270
 8001cf8:	e000e400 	.word	0xe000e400
 8001cfc:	20003e94 	.word	0x20003e94
 8001d00:	20003e98 	.word	0x20003e98
 8001d04:	e000ed20 	.word	0xe000ed20
 8001d08:	20000008 	.word	0x20000008
 8001d0c:	e000ef34 	.word	0xe000ef34

08001d10 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d14:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001d16:	f7ff fedd 	bl	8001ad4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001d1a:	4b2d      	ldr	r3, [pc, #180]	; (8001dd0 <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8001d1c:	4c2d      	ldr	r4, [pc, #180]	; (8001dd4 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4f2d      	ldr	r7, [pc, #180]	; (8001dd8 <prvAddNewTaskToReadyList+0xc8>)
 8001d22:	3201      	adds	r2, #1
 8001d24:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001d26:	6825      	ldr	r5, [r4, #0]
 8001d28:	2d00      	cmp	r5, #0
 8001d2a:	d145      	bne.n	8001db8 <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001d2c:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d11c      	bne.n	8001d6e <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001d34:	1978      	adds	r0, r7, r5
 8001d36:	3514      	adds	r5, #20
 8001d38:	f7ff fe20 	bl	800197c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d3c:	2d8c      	cmp	r5, #140	; 0x8c
 8001d3e:	d1f9      	bne.n	8001d34 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001d40:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8001e04 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8001d44:	4d25      	ldr	r5, [pc, #148]	; (8001ddc <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 8001d46:	4640      	mov	r0, r8
 8001d48:	f7ff fe18 	bl	800197c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001d4c:	4628      	mov	r0, r5
 8001d4e:	f7ff fe15 	bl	800197c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001d52:	4823      	ldr	r0, [pc, #140]	; (8001de0 <prvAddNewTaskToReadyList+0xd0>)
 8001d54:	f7ff fe12 	bl	800197c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001d58:	4822      	ldr	r0, [pc, #136]	; (8001de4 <prvAddNewTaskToReadyList+0xd4>)
 8001d5a:	f7ff fe0f 	bl	800197c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001d5e:	4822      	ldr	r0, [pc, #136]	; (8001de8 <prvAddNewTaskToReadyList+0xd8>)
 8001d60:	f7ff fe0c 	bl	800197c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001d64:	4b21      	ldr	r3, [pc, #132]	; (8001dec <prvAddNewTaskToReadyList+0xdc>)
 8001d66:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001d6a:	4b21      	ldr	r3, [pc, #132]	; (8001df0 <prvAddNewTaskToReadyList+0xe0>)
 8001d6c:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8001d6e:	4a21      	ldr	r2, [pc, #132]	; (8001df4 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 8001d70:	4921      	ldr	r1, [pc, #132]	; (8001df8 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8001d72:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001d74:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8001d76:	3301      	adds	r3, #1
 8001d78:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001d7a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	4093      	lsls	r3, r2
 8001d80:	4303      	orrs	r3, r0
 8001d82:	2014      	movs	r0, #20
 8001d84:	600b      	str	r3, [r1, #0]
 8001d86:	fb00 7002 	mla	r0, r0, r2, r7
 8001d8a:	1d31      	adds	r1, r6, #4
 8001d8c:	f7ff fe04 	bl	8001998 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001d90:	f7ff fec2 	bl	8001b18 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001d94:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <prvAddNewTaskToReadyList+0xec>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	b163      	cbz	r3, 8001db4 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001d9a:	6823      	ldr	r3, [r4, #0]
 8001d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d9e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d207      	bcs.n	8001db4 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8001da4:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <prvAddNewTaskToReadyList+0xf0>)
 8001da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	f3bf 8f4f 	dsb	sy
 8001db0:	f3bf 8f6f 	isb	sy
 8001db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8001db8:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <prvAddNewTaskToReadyList+0xec>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1d6      	bne.n	8001d6e <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001dc0:	6823      	ldr	r3, [r4, #0]
 8001dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8001dc6:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001dc8:	bf98      	it	ls
 8001dca:	6026      	strls	r6, [r4, #0]
 8001dcc:	e7cf      	b.n	8001d6e <prvAddNewTaskToReadyList+0x5e>
 8001dce:	bf00      	nop
 8001dd0:	20003f34 	.word	0x20003f34
 8001dd4:	20003e9c 	.word	0x20003e9c
 8001dd8:	20003ea8 	.word	0x20003ea8
 8001ddc:	20003f60 	.word	0x20003f60
 8001de0:	20003f7c 	.word	0x20003f7c
 8001de4:	20003fa8 	.word	0x20003fa8
 8001de8:	20003f94 	.word	0x20003f94
 8001dec:	20003ea0 	.word	0x20003ea0
 8001df0:	20003ea4 	.word	0x20003ea4
 8001df4:	20003f44 	.word	0x20003f44
 8001df8:	20003f48 	.word	0x20003f48
 8001dfc:	20003f90 	.word	0x20003f90
 8001e00:	e000ed04 	.word	0xe000ed04
 8001e04:	20003f4c 	.word	0x20003f4c

08001e08 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e08:	4a06      	ldr	r2, [pc, #24]	; (8001e24 <prvResetNextTaskUnblockTime+0x1c>)
 8001e0a:	6813      	ldr	r3, [r2, #0]
 8001e0c:	6819      	ldr	r1, [r3, #0]
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <prvResetNextTaskUnblockTime+0x20>)
 8001e10:	b919      	cbnz	r1, 8001e1a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001e12:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001e1e:	68d2      	ldr	r2, [r2, #12]
 8001e20:	6852      	ldr	r2, [r2, #4]
 8001e22:	e7f8      	b.n	8001e16 <prvResetNextTaskUnblockTime+0xe>
 8001e24:	20003ea0 	.word	0x20003ea0
 8001e28:	20003f74 	.word	0x20003f74

08001e2c <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8001e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001e32:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001e36:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8001e38:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001e3c:	3a01      	subs	r2, #1
 8001e3e:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8001e42:	469a      	mov	sl, r3
 8001e44:	4681      	mov	r9, r0
 8001e46:	1e4b      	subs	r3, r1, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001e48:	f026 0607 	bic.w	r6, r6, #7
 8001e4c:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8001e50:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001e52:	7858      	ldrb	r0, [r3, #1]
 8001e54:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8001e58:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8001e5c:	b108      	cbz	r0, 8001e62 <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001e5e:	428b      	cmp	r3, r1
 8001e60:	d1f7      	bne.n	8001e52 <prvInitialiseNewTask.isra.2+0x26>
 8001e62:	9d08      	ldr	r5, [sp, #32]
 8001e64:	2d06      	cmp	r5, #6
 8001e66:	bf28      	it	cs
 8001e68:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001e6a:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 8001e6c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001e6e:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001e70:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001e72:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8001e76:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001e78:	f7ff fd8b 	bl	8001992 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e7c:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001e80:	f104 0018 	add.w	r0, r4, #24
 8001e84:	f7ff fd85 	bl	8001992 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001e88:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001e8a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e8c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001e8e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001e90:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001e94:	4652      	mov	r2, sl
 8001e96:	4649      	mov	r1, r9
 8001e98:	4630      	mov	r0, r6
 8001e9a:	f7ff fdef 	bl	8001a7c <pxPortInitialiseStack>
 8001e9e:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8001ea0:	f1b8 0f00 	cmp.w	r8, #0
 8001ea4:	d001      	beq.n	8001eaa <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001ea6:	f8c8 4000 	str.w	r4, [r8]
 8001eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001eae <prvDeleteTCB>:
	{
 8001eae:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001eb0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8001eb4:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001eb6:	b93b      	cbnz	r3, 8001ec8 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8001eb8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001eba:	f7ff fd27 	bl	800190c <vPortFree>
				vPortFree( pxTCB );
 8001ebe:	4620      	mov	r0, r4
	}
 8001ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8001ec4:	f7ff bd22 	b.w	800190c <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d0f9      	beq.n	8001ec0 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d008      	beq.n	8001ee2 <prvDeleteTCB+0x34>
 8001ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed4:	f383 8811 	msr	BASEPRI, r3
 8001ed8:	f3bf 8f6f 	isb	sy
 8001edc:	f3bf 8f4f 	dsb	sy
 8001ee0:	e7fe      	b.n	8001ee0 <prvDeleteTCB+0x32>
 8001ee2:	bd10      	pop	{r4, pc}

08001ee4 <prvIdleTask>:
{
 8001ee4:	b580      	push	{r7, lr}
				taskYIELD();
 8001ee6:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8001f44 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001eea:	4f12      	ldr	r7, [pc, #72]	; (8001f34 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001eec:	4c12      	ldr	r4, [pc, #72]	; (8001f38 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8001eee:	4d13      	ldr	r5, [pc, #76]	; (8001f3c <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	b963      	cbnz	r3, 8001f0e <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <prvIdleTask+0x5c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d9f8      	bls.n	8001eee <prvIdleTask+0xa>
				taskYIELD();
 8001efc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001f00:	f8c8 3000 	str.w	r3, [r8]
 8001f04:	f3bf 8f4f 	dsb	sy
 8001f08:	f3bf 8f6f 	isb	sy
 8001f0c:	e7ee      	b.n	8001eec <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8001f0e:	f7ff fde1 	bl	8001ad4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f16:	1d30      	adds	r0, r6, #4
 8001f18:	f7ff fd61 	bl	80019de <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001f1c:	682b      	ldr	r3, [r5, #0]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001f22:	6823      	ldr	r3, [r4, #0]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8001f28:	f7ff fdf6 	bl	8001b18 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8001f2c:	4630      	mov	r0, r6
 8001f2e:	f7ff ffbe 	bl	8001eae <prvDeleteTCB>
 8001f32:	e7dd      	b.n	8001ef0 <prvIdleTask+0xc>
 8001f34:	20003fa8 	.word	0x20003fa8
 8001f38:	20003f38 	.word	0x20003f38
 8001f3c:	20003f34 	.word	0x20003f34
 8001f40:	20003ea8 	.word	0x20003ea8
 8001f44:	e000ed04 	.word	0xe000ed04

08001f48 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001f4a:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f4c:	4e1b      	ldr	r6, [pc, #108]	; (8001fbc <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8001f4e:	681d      	ldr	r5, [r3, #0]
{
 8001f50:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f52:	6830      	ldr	r0, [r6, #0]
 8001f54:	3004      	adds	r0, #4
{
 8001f56:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f58:	f7ff fd41 	bl	80019de <uxListRemove>
 8001f5c:	4633      	mov	r3, r6
 8001f5e:	b940      	cbnz	r0, 8001f72 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001f60:	6831      	ldr	r1, [r6, #0]
 8001f62:	4e17      	ldr	r6, [pc, #92]	; (8001fc0 <prvAddCurrentTaskToDelayedList+0x78>)
 8001f64:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001f66:	6832      	ldr	r2, [r6, #0]
 8001f68:	2001      	movs	r0, #1
 8001f6a:	4088      	lsls	r0, r1
 8001f6c:	ea22 0200 	bic.w	r2, r2, r0
 8001f70:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001f72:	1c62      	adds	r2, r4, #1
 8001f74:	d107      	bne.n	8001f86 <prvAddCurrentTaskToDelayedList+0x3e>
 8001f76:	b137      	cbz	r7, 8001f86 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f78:	6819      	ldr	r1, [r3, #0]
 8001f7a:	4812      	ldr	r0, [pc, #72]	; (8001fc4 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001f7c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001f7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f82:	f7ff bd09 	b.w	8001998 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001f86:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001f88:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8001f8a:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001f8c:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8001f8e:	d907      	bls.n	8001fa0 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f90:	4a0d      	ldr	r2, [pc, #52]	; (8001fc8 <prvAddCurrentTaskToDelayedList+0x80>)
 8001f92:	6810      	ldr	r0, [r2, #0]
 8001f94:	6819      	ldr	r1, [r3, #0]
}
 8001f96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f9a:	3104      	adds	r1, #4
 8001f9c:	f7ff bd08 	b.w	80019b0 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001fa0:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <prvAddCurrentTaskToDelayedList+0x84>)
 8001fa2:	6810      	ldr	r0, [r2, #0]
 8001fa4:	6819      	ldr	r1, [r3, #0]
 8001fa6:	3104      	adds	r1, #4
 8001fa8:	f7ff fd02 	bl	80019b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001fac:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <prvAddCurrentTaskToDelayedList+0x88>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8001fb2:	bf38      	it	cc
 8001fb4:	601c      	strcc	r4, [r3, #0]
 8001fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fb8:	20003fbc 	.word	0x20003fbc
 8001fbc:	20003e9c 	.word	0x20003e9c
 8001fc0:	20003f48 	.word	0x20003f48
 8001fc4:	20003f94 	.word	0x20003f94
 8001fc8:	20003ea4 	.word	0x20003ea4
 8001fcc:	20003ea0 	.word	0x20003ea0
 8001fd0:	20003f74 	.word	0x20003f74

08001fd4 <xTaskCreateStatic>:
	{
 8001fd4:	b570      	push	{r4, r5, r6, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8001fda:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8001fdc:	b945      	cbnz	r5, 8001ff0 <xTaskCreateStatic+0x1c>
 8001fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe2:	f383 8811 	msr	BASEPRI, r3
 8001fe6:	f3bf 8f6f 	isb	sy
 8001fea:	f3bf 8f4f 	dsb	sy
 8001fee:	e7fe      	b.n	8001fee <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8001ff0:	b944      	cbnz	r4, 8002004 <xTaskCreateStatic+0x30>
 8001ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff6:	f383 8811 	msr	BASEPRI, r3
 8001ffa:	f3bf 8f6f 	isb	sy
 8001ffe:	f3bf 8f4f 	dsb	sy
 8002002:	e7fe      	b.n	8002002 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8002004:	2654      	movs	r6, #84	; 0x54
 8002006:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002008:	9e04      	ldr	r6, [sp, #16]
 800200a:	2e54      	cmp	r6, #84	; 0x54
 800200c:	d008      	beq.n	8002020 <xTaskCreateStatic+0x4c>
 800200e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002012:	f383 8811 	msr	BASEPRI, r3
 8002016:	f3bf 8f6f 	isb	sy
 800201a:	f3bf 8f4f 	dsb	sy
 800201e:	e7fe      	b.n	800201e <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002020:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002022:	2502      	movs	r5, #2
 8002024:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002028:	ad05      	add	r5, sp, #20
 800202a:	9501      	str	r5, [sp, #4]
 800202c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800202e:	9402      	str	r4, [sp, #8]
 8002030:	9500      	str	r5, [sp, #0]
 8002032:	f7ff fefb 	bl	8001e2c <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002036:	4620      	mov	r0, r4
 8002038:	f7ff fe6a 	bl	8001d10 <prvAddNewTaskToReadyList>
	}
 800203c:	9805      	ldr	r0, [sp, #20]
 800203e:	b006      	add	sp, #24
 8002040:	bd70      	pop	{r4, r5, r6, pc}

08002042 <xTaskCreate>:
	{
 8002042:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002046:	4607      	mov	r7, r0
 8002048:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800204a:	0090      	lsls	r0, r2, #2
	{
 800204c:	4688      	mov	r8, r1
 800204e:	4616      	mov	r6, r2
 8002050:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002052:	f7ff fbcd 	bl	80017f0 <pvPortMalloc>
			if( pxStack != NULL )
 8002056:	4605      	mov	r5, r0
 8002058:	b1e8      	cbz	r0, 8002096 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800205a:	2054      	movs	r0, #84	; 0x54
 800205c:	f7ff fbc8 	bl	80017f0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002060:	4604      	mov	r4, r0
 8002062:	b1a8      	cbz	r0, 8002090 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002064:	2300      	movs	r3, #0
 8002066:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800206a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 800206c:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800206e:	9301      	str	r3, [sp, #4]
 8002070:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002072:	9002      	str	r0, [sp, #8]
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	4632      	mov	r2, r6
 8002078:	464b      	mov	r3, r9
 800207a:	4641      	mov	r1, r8
 800207c:	4638      	mov	r0, r7
 800207e:	f7ff fed5 	bl	8001e2c <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002082:	4620      	mov	r0, r4
 8002084:	f7ff fe44 	bl	8001d10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002088:	2001      	movs	r0, #1
	}
 800208a:	b005      	add	sp, #20
 800208c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8002090:	4628      	mov	r0, r5
 8002092:	f7ff fc3b 	bl	800190c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002096:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800209a:	e7f6      	b.n	800208a <xTaskCreate+0x48>

0800209c <vTaskStartScheduler>:
{
 800209c:	b510      	push	{r4, lr}
 800209e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80020a0:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80020a2:	aa07      	add	r2, sp, #28
 80020a4:	a906      	add	r1, sp, #24
 80020a6:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80020a8:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80020aa:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80020ac:	f7fe fa52 	bl	8000554 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80020b0:	9b05      	ldr	r3, [sp, #20]
 80020b2:	9302      	str	r3, [sp, #8]
 80020b4:	9b06      	ldr	r3, [sp, #24]
 80020b6:	9301      	str	r3, [sp, #4]
 80020b8:	9400      	str	r4, [sp, #0]
 80020ba:	4623      	mov	r3, r4
 80020bc:	9a07      	ldr	r2, [sp, #28]
 80020be:	490d      	ldr	r1, [pc, #52]	; (80020f4 <vTaskStartScheduler+0x58>)
 80020c0:	480d      	ldr	r0, [pc, #52]	; (80020f8 <vTaskStartScheduler+0x5c>)
 80020c2:	f7ff ff87 	bl	8001fd4 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80020c6:	b190      	cbz	r0, 80020ee <vTaskStartScheduler+0x52>
 80020c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020cc:	f383 8811 	msr	BASEPRI, r3
 80020d0:	f3bf 8f6f 	isb	sy
 80020d4:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <vTaskStartScheduler+0x60>)
 80020da:	f04f 32ff 	mov.w	r2, #4294967295
 80020de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80020e0:	4b07      	ldr	r3, [pc, #28]	; (8002100 <vTaskStartScheduler+0x64>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80020e6:	4b07      	ldr	r3, [pc, #28]	; (8002104 <vTaskStartScheduler+0x68>)
 80020e8:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80020ea:	f7ff fd8b 	bl	8001c04 <xPortStartScheduler>
}
 80020ee:	b008      	add	sp, #32
 80020f0:	bd10      	pop	{r4, pc}
 80020f2:	bf00      	nop
 80020f4:	080024cc 	.word	0x080024cc
 80020f8:	08001ee5 	.word	0x08001ee5
 80020fc:	20003f74 	.word	0x20003f74
 8002100:	20003f90 	.word	0x20003f90
 8002104:	20003fbc 	.word	0x20003fbc

08002108 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002108:	4a02      	ldr	r2, [pc, #8]	; (8002114 <vTaskSuspendAll+0xc>)
 800210a:	6813      	ldr	r3, [r2, #0]
 800210c:	3301      	adds	r3, #1
 800210e:	6013      	str	r3, [r2, #0]
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	20003f40 	.word	0x20003f40

08002118 <xTaskIncrementTick>:
{
 8002118:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800211c:	4b3c      	ldr	r3, [pc, #240]	; (8002210 <xTaskIncrementTick+0xf8>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d153      	bne.n	80021cc <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002124:	4b3b      	ldr	r3, [pc, #236]	; (8002214 <xTaskIncrementTick+0xfc>)
 8002126:	681c      	ldr	r4, [r3, #0]
 8002128:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800212a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800212c:	b9bc      	cbnz	r4, 800215e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800212e:	4b3a      	ldr	r3, [pc, #232]	; (8002218 <xTaskIncrementTick+0x100>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	b142      	cbz	r2, 8002148 <xTaskIncrementTick+0x30>
 8002136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800213a:	f383 8811 	msr	BASEPRI, r3
 800213e:	f3bf 8f6f 	isb	sy
 8002142:	f3bf 8f4f 	dsb	sy
 8002146:	e7fe      	b.n	8002146 <xTaskIncrementTick+0x2e>
 8002148:	4a34      	ldr	r2, [pc, #208]	; (800221c <xTaskIncrementTick+0x104>)
 800214a:	6819      	ldr	r1, [r3, #0]
 800214c:	6810      	ldr	r0, [r2, #0]
 800214e:	6018      	str	r0, [r3, #0]
 8002150:	6011      	str	r1, [r2, #0]
 8002152:	4a33      	ldr	r2, [pc, #204]	; (8002220 <xTaskIncrementTick+0x108>)
 8002154:	6813      	ldr	r3, [r2, #0]
 8002156:	3301      	adds	r3, #1
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	f7ff fe55 	bl	8001e08 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800215e:	4d31      	ldr	r5, [pc, #196]	; (8002224 <xTaskIncrementTick+0x10c>)
 8002160:	4f31      	ldr	r7, [pc, #196]	; (8002228 <xTaskIncrementTick+0x110>)
 8002162:	682b      	ldr	r3, [r5, #0]
 8002164:	429c      	cmp	r4, r3
 8002166:	f04f 0b00 	mov.w	fp, #0
 800216a:	d33e      	bcc.n	80021ea <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800216c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002218 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8002170:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8002238 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002174:	f8d8 2000 	ldr.w	r2, [r8]
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	bb72      	cbnz	r2, 80021da <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800217c:	f04f 32ff 	mov.w	r2, #4294967295
 8002180:	602a      	str	r2, [r5, #0]
					break;
 8002182:	e032      	b.n	80021ea <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002184:	f106 0a04 	add.w	sl, r6, #4
 8002188:	4650      	mov	r0, sl
 800218a:	f7ff fc28 	bl	80019de <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800218e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002190:	b119      	cbz	r1, 800219a <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002192:	f106 0018 	add.w	r0, r6, #24
 8002196:	f7ff fc22 	bl	80019de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800219a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800219c:	f8d9 3000 	ldr.w	r3, [r9]
 80021a0:	2201      	movs	r2, #1
 80021a2:	fa02 f100 	lsl.w	r1, r2, r0
 80021a6:	4319      	orrs	r1, r3
 80021a8:	4b20      	ldr	r3, [pc, #128]	; (800222c <xTaskIncrementTick+0x114>)
 80021aa:	f8c9 1000 	str.w	r1, [r9]
 80021ae:	f04f 0e14 	mov.w	lr, #20
 80021b2:	4651      	mov	r1, sl
 80021b4:	fb0e 3000 	mla	r0, lr, r0, r3
 80021b8:	f7ff fbee 	bl	8001998 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80021bc:	6838      	ldr	r0, [r7, #0]
 80021be:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80021c0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80021c2:	4291      	cmp	r1, r2
 80021c4:	bf28      	it	cs
 80021c6:	f04f 0b01 	movcs.w	fp, #1
 80021ca:	e7d3      	b.n	8002174 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 80021cc:	4a18      	ldr	r2, [pc, #96]	; (8002230 <xTaskIncrementTick+0x118>)
 80021ce:	6813      	ldr	r3, [r2, #0]
 80021d0:	3301      	adds	r3, #1
 80021d2:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80021d4:	f04f 0b00 	mov.w	fp, #0
 80021d8:	e011      	b.n	80021fe <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80021da:	f8d8 2000 	ldr.w	r2, [r8]
 80021de:	68d2      	ldr	r2, [r2, #12]
 80021e0:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80021e2:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80021e4:	428c      	cmp	r4, r1
 80021e6:	d2cd      	bcs.n	8002184 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 80021e8:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	4b0f      	ldr	r3, [pc, #60]	; (800222c <xTaskIncrementTick+0x114>)
 80021ee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021f0:	2214      	movs	r2, #20
 80021f2:	434a      	muls	r2, r1
 80021f4:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80021f6:	2a02      	cmp	r2, #2
 80021f8:	bf28      	it	cs
 80021fa:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80021fe:	4a0d      	ldr	r2, [pc, #52]	; (8002234 <xTaskIncrementTick+0x11c>)
 8002200:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8002202:	2a00      	cmp	r2, #0
 8002204:	bf18      	it	ne
 8002206:	f04f 0b01 	movne.w	fp, #1
}
 800220a:	4658      	mov	r0, fp
 800220c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002210:	20003f40 	.word	0x20003f40
 8002214:	20003fbc 	.word	0x20003fbc
 8002218:	20003ea0 	.word	0x20003ea0
 800221c:	20003ea4 	.word	0x20003ea4
 8002220:	20003f78 	.word	0x20003f78
 8002224:	20003f74 	.word	0x20003f74
 8002228:	20003e9c 	.word	0x20003e9c
 800222c:	20003ea8 	.word	0x20003ea8
 8002230:	20003f3c 	.word	0x20003f3c
 8002234:	20003fc0 	.word	0x20003fc0
 8002238:	20003f48 	.word	0x20003f48

0800223c <xTaskResumeAll>:
{
 800223c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8002240:	4c31      	ldr	r4, [pc, #196]	; (8002308 <xTaskResumeAll+0xcc>)
 8002242:	6823      	ldr	r3, [r4, #0]
 8002244:	b943      	cbnz	r3, 8002258 <xTaskResumeAll+0x1c>
 8002246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800224a:	f383 8811 	msr	BASEPRI, r3
 800224e:	f3bf 8f6f 	isb	sy
 8002252:	f3bf 8f4f 	dsb	sy
 8002256:	e7fe      	b.n	8002256 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8002258:	f7ff fc3c 	bl	8001ad4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800225c:	6823      	ldr	r3, [r4, #0]
 800225e:	3b01      	subs	r3, #1
 8002260:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002262:	6824      	ldr	r4, [r4, #0]
 8002264:	b12c      	cbz	r4, 8002272 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8002266:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002268:	f7ff fc56 	bl	8001b18 <vPortExitCritical>
}
 800226c:	4620      	mov	r0, r4
 800226e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002272:	4b26      	ldr	r3, [pc, #152]	; (800230c <xTaskResumeAll+0xd0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f5      	beq.n	8002266 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800227a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8002324 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 800227e:	4f24      	ldr	r7, [pc, #144]	; (8002310 <xTaskResumeAll+0xd4>)
 8002280:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002328 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002284:	f8d9 3000 	ldr.w	r3, [r9]
 8002288:	b9e3      	cbnz	r3, 80022c4 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 800228a:	b10c      	cbz	r4, 8002290 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 800228c:	f7ff fdbc 	bl	8001e08 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002290:	4d20      	ldr	r5, [pc, #128]	; (8002314 <xTaskResumeAll+0xd8>)
 8002292:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002294:	b144      	cbz	r4, 80022a8 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8002296:	4e20      	ldr	r6, [pc, #128]	; (8002318 <xTaskResumeAll+0xdc>)
 8002298:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800229a:	f7ff ff3d 	bl	8002118 <xTaskIncrementTick>
 800229e:	b100      	cbz	r0, 80022a2 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 80022a0:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80022a2:	3c01      	subs	r4, #1
 80022a4:	d1f9      	bne.n	800229a <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 80022a6:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80022a8:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <xTaskResumeAll+0xdc>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0da      	beq.n	8002266 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80022b0:	4b1a      	ldr	r3, [pc, #104]	; (800231c <xTaskResumeAll+0xe0>)
 80022b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	f3bf 8f4f 	dsb	sy
 80022bc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80022c0:	2401      	movs	r4, #1
 80022c2:	e7d1      	b.n	8002268 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80022c4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80022c8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022ca:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80022cc:	f104 0018 	add.w	r0, r4, #24
 80022d0:	f7ff fb85 	bl	80019de <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022d4:	4630      	mov	r0, r6
 80022d6:	f7ff fb82 	bl	80019de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80022da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80022dc:	6839      	ldr	r1, [r7, #0]
 80022de:	2501      	movs	r5, #1
 80022e0:	fa05 f302 	lsl.w	r3, r5, r2
 80022e4:	2014      	movs	r0, #20
 80022e6:	430b      	orrs	r3, r1
 80022e8:	fb00 8002 	mla	r0, r0, r2, r8
 80022ec:	4631      	mov	r1, r6
 80022ee:	603b      	str	r3, [r7, #0]
 80022f0:	f7ff fb52 	bl	8001998 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80022f4:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <xTaskResumeAll+0xe4>)
 80022f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 80022fe:	bf24      	itt	cs
 8002300:	4b05      	ldrcs	r3, [pc, #20]	; (8002318 <xTaskResumeAll+0xdc>)
 8002302:	601d      	strcs	r5, [r3, #0]
 8002304:	e7be      	b.n	8002284 <xTaskResumeAll+0x48>
 8002306:	bf00      	nop
 8002308:	20003f40 	.word	0x20003f40
 800230c:	20003f34 	.word	0x20003f34
 8002310:	20003f48 	.word	0x20003f48
 8002314:	20003f3c 	.word	0x20003f3c
 8002318:	20003fc0 	.word	0x20003fc0
 800231c:	e000ed04 	.word	0xe000ed04
 8002320:	20003e9c 	.word	0x20003e9c
 8002324:	20003f7c 	.word	0x20003f7c
 8002328:	20003ea8 	.word	0x20003ea8

0800232c <vTaskDelay>:
	{
 800232c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800232e:	b940      	cbnz	r0, 8002342 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8002330:	4b0e      	ldr	r3, [pc, #56]	; (800236c <vTaskDelay+0x40>)
 8002332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	f3bf 8f4f 	dsb	sy
 800233c:	f3bf 8f6f 	isb	sy
 8002340:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <vTaskDelay+0x44>)
 8002344:	6819      	ldr	r1, [r3, #0]
 8002346:	b141      	cbz	r1, 800235a <vTaskDelay+0x2e>
 8002348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234c:	f383 8811 	msr	BASEPRI, r3
 8002350:	f3bf 8f6f 	isb	sy
 8002354:	f3bf 8f4f 	dsb	sy
 8002358:	e7fe      	b.n	8002358 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800235a:	f7ff fed5 	bl	8002108 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800235e:	f7ff fdf3 	bl	8001f48 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002362:	f7ff ff6b 	bl	800223c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8002366:	2800      	cmp	r0, #0
 8002368:	d0e2      	beq.n	8002330 <vTaskDelay+0x4>
 800236a:	bd08      	pop	{r3, pc}
 800236c:	e000ed04 	.word	0xe000ed04
 8002370:	20003f40 	.word	0x20003f40

08002374 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002374:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <vTaskSwitchContext+0x60>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4b17      	ldr	r3, [pc, #92]	; (80023d8 <vTaskSwitchContext+0x64>)
{
 800237a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800237c:	b112      	cbz	r2, 8002384 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800237e:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8002384:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002386:	4b15      	ldr	r3, [pc, #84]	; (80023dc <vTaskSwitchContext+0x68>)
 8002388:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	f1c3 031f 	rsb	r3, r3, #31
 8002394:	2214      	movs	r2, #20
 8002396:	4912      	ldr	r1, [pc, #72]	; (80023e0 <vTaskSwitchContext+0x6c>)
 8002398:	435a      	muls	r2, r3
 800239a:	1888      	adds	r0, r1, r2
 800239c:	588c      	ldr	r4, [r1, r2]
 800239e:	b944      	cbnz	r4, 80023b2 <vTaskSwitchContext+0x3e>
	__asm volatile
 80023a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a4:	f383 8811 	msr	BASEPRI, r3
 80023a8:	f3bf 8f6f 	isb	sy
 80023ac:	f3bf 8f4f 	dsb	sy
 80023b0:	e7fe      	b.n	80023b0 <vTaskSwitchContext+0x3c>
 80023b2:	6844      	ldr	r4, [r0, #4]
 80023b4:	3208      	adds	r2, #8
 80023b6:	6864      	ldr	r4, [r4, #4]
 80023b8:	6044      	str	r4, [r0, #4]
 80023ba:	440a      	add	r2, r1
 80023bc:	4294      	cmp	r4, r2
 80023be:	bf04      	itt	eq
 80023c0:	6862      	ldreq	r2, [r4, #4]
 80023c2:	6042      	streq	r2, [r0, #4]
 80023c4:	2214      	movs	r2, #20
 80023c6:	fb02 1303 	mla	r3, r2, r3, r1
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <vTaskSwitchContext+0x70>)
 80023d0:	e7d6      	b.n	8002380 <vTaskSwitchContext+0xc>
 80023d2:	bf00      	nop
 80023d4:	20003f40 	.word	0x20003f40
 80023d8:	20003fc0 	.word	0x20003fc0
 80023dc:	20003f48 	.word	0x20003f48
 80023e0:	20003ea8 	.word	0x20003ea8
 80023e4:	20003e9c 	.word	0x20003e9c

080023e8 <__libc_init_array>:
 80023e8:	b570      	push	{r4, r5, r6, lr}
 80023ea:	4e0d      	ldr	r6, [pc, #52]	; (8002420 <__libc_init_array+0x38>)
 80023ec:	4c0d      	ldr	r4, [pc, #52]	; (8002424 <__libc_init_array+0x3c>)
 80023ee:	1ba4      	subs	r4, r4, r6
 80023f0:	10a4      	asrs	r4, r4, #2
 80023f2:	2500      	movs	r5, #0
 80023f4:	42a5      	cmp	r5, r4
 80023f6:	d109      	bne.n	800240c <__libc_init_array+0x24>
 80023f8:	4e0b      	ldr	r6, [pc, #44]	; (8002428 <__libc_init_array+0x40>)
 80023fa:	4c0c      	ldr	r4, [pc, #48]	; (800242c <__libc_init_array+0x44>)
 80023fc:	f000 f820 	bl	8002440 <_init>
 8002400:	1ba4      	subs	r4, r4, r6
 8002402:	10a4      	asrs	r4, r4, #2
 8002404:	2500      	movs	r5, #0
 8002406:	42a5      	cmp	r5, r4
 8002408:	d105      	bne.n	8002416 <__libc_init_array+0x2e>
 800240a:	bd70      	pop	{r4, r5, r6, pc}
 800240c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002410:	4798      	blx	r3
 8002412:	3501      	adds	r5, #1
 8002414:	e7ee      	b.n	80023f4 <__libc_init_array+0xc>
 8002416:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800241a:	4798      	blx	r3
 800241c:	3501      	adds	r5, #1
 800241e:	e7f2      	b.n	8002406 <__libc_init_array+0x1e>
 8002420:	080024dc 	.word	0x080024dc
 8002424:	080024dc 	.word	0x080024dc
 8002428:	080024dc 	.word	0x080024dc
 800242c:	080024e0 	.word	0x080024e0

08002430 <memset>:
 8002430:	4402      	add	r2, r0
 8002432:	4603      	mov	r3, r0
 8002434:	4293      	cmp	r3, r2
 8002436:	d100      	bne.n	800243a <memset+0xa>
 8002438:	4770      	bx	lr
 800243a:	f803 1b01 	strb.w	r1, [r3], #1
 800243e:	e7f9      	b.n	8002434 <memset+0x4>

08002440 <_init>:
 8002440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002442:	bf00      	nop
 8002444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002446:	bc08      	pop	{r3}
 8002448:	469e      	mov	lr, r3
 800244a:	4770      	bx	lr

0800244c <_fini>:
 800244c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800244e:	bf00      	nop
 8002450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002452:	bc08      	pop	{r3}
 8002454:	469e      	mov	lr, r3
 8002456:	4770      	bx	lr
