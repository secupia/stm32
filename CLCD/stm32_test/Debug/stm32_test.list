
stm32_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080021f0  080021f0  000121f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002258  08002258  00012258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800225c  0800225c  0001225c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  08002260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001f4  20000024  08002284  00020024  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000218  08002284  00020218  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
  9 .debug_info   000130c6  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000034d4  00000000  00000000  00033113  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009375  00000000  00000000  000365e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000d50  00000000  00000000  0003f960  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000012d0  00000000  00000000  000406b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000084e5  00000000  00000000  00041980  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000433c  00000000  00000000  00049e65  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004e1a1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002670  00000000  00000000  0004e220  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	080021d8 	.word	0x080021d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	080021d8 	.word	0x080021d8

0800014c <micros>:
//**************************************************************************************
//**************************************************************************************
//Time

uint32_t micros(){
  return (millis()&0x3FFFFF)*1000 + (SYSTICK_LOAD-SysTick->VAL)/SYS_CLOCK;
 800014c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
#define SYS_CLOCK       (SystemCoreClock/1000000)
#define SYSTICK_LOAD    ((SystemCoreClock/1000)-1)
extern __IO uint32_t uwTick;
static inline uint32_t millis(void)
{
  return uwTick;
 8000150:	4b0a      	ldr	r3, [pc, #40]	; (800017c <micros+0x30>)
uint32_t micros(){
 8000152:	b510      	push	{r4, lr}
 8000154:	6819      	ldr	r1, [r3, #0]
  return (millis()&0x3FFFFF)*1000 + (SYSTICK_LOAD-SysTick->VAL)/SYS_CLOCK;
 8000156:	4b0a      	ldr	r3, [pc, #40]	; (8000180 <micros+0x34>)
 8000158:	f3c1 0115 	ubfx	r1, r1, #0, #22
 800015c:	681a      	ldr	r2, [r3, #0]
 800015e:	4b09      	ldr	r3, [pc, #36]	; (8000184 <micros+0x38>)
 8000160:	689c      	ldr	r4, [r3, #8]
 8000162:	fbb2 f3f0 	udiv	r3, r2, r0
 8000166:	1b1b      	subs	r3, r3, r4
 8000168:	4c07      	ldr	r4, [pc, #28]	; (8000188 <micros+0x3c>)
 800016a:	3b01      	subs	r3, #1
 800016c:	fbb2 f2f4 	udiv	r2, r2, r4
 8000170:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8000174:	fb00 3001 	mla	r0, r0, r1, r3
 8000178:	bd10      	pop	{r4, pc}
 800017a:	bf00      	nop
 800017c:	2000004c 	.word	0x2000004c
 8000180:	20000020 	.word	0x20000020
 8000184:	e000e010 	.word	0xe000e010
 8000188:	000f4240 	.word	0x000f4240

0800018c <delay_us>:

void delay_us(uint32_t us){
 800018c:	b570      	push	{r4, r5, r6, lr}
 800018e:	4604      	mov	r4, r0
  uint32_t temp = micros();
 8000190:	f7ff ffdc 	bl	800014c <micros>
  uint32_t comp = temp + us;
  uint8_t  flag = 0;
 8000194:	2500      	movs	r5, #0
 8000196:	4e09      	ldr	r6, [pc, #36]	; (80001bc <delay_us+0x30>)
  uint32_t comp = temp + us;
 8000198:	4404      	add	r4, r0
  while(comp > temp){
 800019a:	42a0      	cmp	r0, r4
 800019c:	d300      	bcc.n	80001a0 <delay_us+0x14>
    }
    else  {
      temp = micros();
    }
  }
}
 800019e:	bd70      	pop	{r4, r5, r6, pc}
 80001a0:	6833      	ldr	r3, [r6, #0]
    if(((mil&0x3FFFFF)==0)&&(flag==0)){
 80001a2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80001a6:	b103      	cbz	r3, 80001aa <delay_us+0x1e>
    if(flag) {
 80001a8:	b12d      	cbz	r5, 80001b6 <delay_us+0x2a>
      temp = micros() + 0x400000UL * 1000;
 80001aa:	f7ff ffcf 	bl	800014c <micros>
 80001ae:	2501      	movs	r5, #1
 80001b0:	f100 407a 	add.w	r0, r0, #4194304000	; 0xfa000000
 80001b4:	e7f1      	b.n	800019a <delay_us+0xe>
      temp = micros();
 80001b6:	f7ff ffc9 	bl	800014c <micros>
 80001ba:	e7ee      	b.n	800019a <delay_us+0xe>
 80001bc:	2000004c 	.word	0x2000004c

080001c0 <write4bits>:
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
  delay_us(100);          // commands need > 37us to settle
}

#ifdef _LCD_4BITMODE_
void write4bits(uint8_t value) {
 80001c0:	b570      	push	{r4, r5, r6, lr}
 80001c2:	4606      	mov	r6, r0
 80001c4:	2400      	movs	r4, #0
  for (uint8_t i = 0; i < 4; i++) {
    HAL_GPIO_WritePin(hlcd.data_ports[i], hlcd.data_pins[i],  (value >> i) & 0x01 );
 80001c6:	4d15      	ldr	r5, [pc, #84]	; (800021c <write4bits+0x5c>)
 80001c8:	6869      	ldr	r1, [r5, #4]
 80001ca:	682b      	ldr	r3, [r5, #0]
 80001cc:	fa46 f204 	asr.w	r2, r6, r4
 80001d0:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
 80001d4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80001d8:	f002 0201 	and.w	r2, r2, #1
 80001dc:	3401      	adds	r4, #1
 80001de:	f000 fc25 	bl	8000a2c <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 4; i++) {
 80001e2:	2c04      	cmp	r4, #4
 80001e4:	d1f0      	bne.n	80001c8 <write4bits+0x8>
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 80001e6:	2200      	movs	r2, #0
 80001e8:	2180      	movs	r1, #128	; 0x80
 80001ea:	480d      	ldr	r0, [pc, #52]	; (8000220 <write4bits+0x60>)
 80001ec:	f000 fc1e 	bl	8000a2c <HAL_GPIO_WritePin>
  delay_us(1);              //
 80001f0:	2001      	movs	r0, #1
 80001f2:	f7ff ffcb 	bl	800018c <delay_us>
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 80001f6:	2201      	movs	r2, #1
 80001f8:	2180      	movs	r1, #128	; 0x80
 80001fa:	4809      	ldr	r0, [pc, #36]	; (8000220 <write4bits+0x60>)
 80001fc:	f000 fc16 	bl	8000a2c <HAL_GPIO_WritePin>
  delay_us(1);   			   // enable pulse must be >450ns
 8000200:	2001      	movs	r0, #1
 8000202:	f7ff ffc3 	bl	800018c <delay_us>
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000206:	4806      	ldr	r0, [pc, #24]	; (8000220 <write4bits+0x60>)
 8000208:	2200      	movs	r2, #0
 800020a:	2180      	movs	r1, #128	; 0x80
 800020c:	f000 fc0e 	bl	8000a2c <HAL_GPIO_WritePin>
  }

  pulseEnable();
}
 8000210:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  delay_us(100);          // commands need > 37us to settle
 8000214:	2064      	movs	r0, #100	; 0x64
 8000216:	f7ff bfb9 	b.w	800018c <delay_us>
 800021a:	bf00      	nop
 800021c:	20000040 	.word	0x20000040
 8000220:	40011000 	.word	0x40011000

08000224 <send>:
void send(uint8_t value, GPIO_PinState mode) {
 8000224:	b510      	push	{r4, lr}
 8000226:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, mode);   // digitalWrite(_rs_pin, mode);
 8000228:	460a      	mov	r2, r1
 800022a:	4806      	ldr	r0, [pc, #24]	; (8000244 <send+0x20>)
 800022c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000230:	f000 fbfc 	bl	8000a2c <HAL_GPIO_WritePin>
    write4bits(value>>4);
 8000234:	0920      	lsrs	r0, r4, #4
 8000236:	f7ff ffc3 	bl	80001c0 <write4bits>
    write4bits(value);
 800023a:	4620      	mov	r0, r4
}
 800023c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write4bits(value);
 8000240:	f7ff bfbe 	b.w	80001c0 <write4bits>
 8000244:	40010800 	.word	0x40010800

08000248 <command>:
  send(value, GPIO_PIN_RESET);
 8000248:	2100      	movs	r1, #0
 800024a:	f7ff bfeb 	b.w	8000224 <send>

0800024e <lcd_clear>:
{
 800024e:	b508      	push	{r3, lr}
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 8000250:	2001      	movs	r0, #1
 8000252:	f7ff fff9 	bl	8000248 <command>
}
 8000256:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay_ms(2);                //  this command takes a long time!
 800025a:	2002      	movs	r0, #2
 800025c:	f000 b8e6 	b.w	800042c <HAL_Delay>

08000260 <lcd_setCursor>:
  uint8_t row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000260:	2300      	movs	r3, #0
{
 8000262:	b082      	sub	sp, #8
  uint8_t row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000264:	f88d 3004 	strb.w	r3, [sp, #4]
 8000268:	2340      	movs	r3, #64	; 0x40
 800026a:	f88d 3005 	strb.w	r3, [sp, #5]
 800026e:	2314      	movs	r3, #20
 8000270:	f88d 3006 	strb.w	r3, [sp, #6]
 8000274:	2354      	movs	r3, #84	; 0x54
 8000276:	f88d 3007 	strb.w	r3, [sp, #7]
  if ( row > hlcd.numlines ) {
 800027a:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <lcd_setCursor+0x40>)
 800027c:	7adb      	ldrb	r3, [r3, #11]
 800027e:	428b      	cmp	r3, r1
    row = hlcd.numlines-1;    // we count rows starting w/0
 8000280:	bf3c      	itt	cc
 8000282:	f103 31ff 	addcc.w	r1, r3, #4294967295
 8000286:	b2c9      	uxtbcc	r1, r1
  command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000288:	ab02      	add	r3, sp, #8
 800028a:	4419      	add	r1, r3
 800028c:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 8000290:	4418      	add	r0, r3
 8000292:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8000296:	b2c0      	uxtb	r0, r0
}
 8000298:	b002      	add	sp, #8
  command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800029a:	f7ff bfd5 	b.w	8000248 <command>
 800029e:	bf00      	nop
 80002a0:	20000040 	.word	0x20000040

080002a4 <lcd_display>:
  hlcd.displaycontrol |= LCD_DISPLAYON;
 80002a4:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <lcd_display+0x14>)
 80002a6:	7a58      	ldrb	r0, [r3, #9]
 80002a8:	f040 0204 	orr.w	r2, r0, #4
  command(LCD_DISPLAYCONTROL | hlcd.displaycontrol);
 80002ac:	f040 000c 	orr.w	r0, r0, #12
  hlcd.displaycontrol |= LCD_DISPLAYON;
 80002b0:	725a      	strb	r2, [r3, #9]
  command(LCD_DISPLAYCONTROL | hlcd.displaycontrol);
 80002b2:	f7ff bfc9 	b.w	8000248 <command>
 80002b6:	bf00      	nop
 80002b8:	20000040 	.word	0x20000040

080002bc <lcd_Init>:
void lcd_Init(uint8_t cols, uint8_t lines) {
 80002bc:	b510      	push	{r4, lr}
  hlcd.data_ports = data_ports;  // LCD Data Ports , hlcd.data_ports
 80002be:	4b25      	ldr	r3, [pc, #148]	; (8000354 <lcd_Init+0x98>)
 80002c0:	4c25      	ldr	r4, [pc, #148]	; (8000358 <lcd_Init+0x9c>)
if (lines > 1) {
 80002c2:	2901      	cmp	r1, #1
  hlcd.data_ports = data_ports;  // LCD Data Ports , hlcd.data_ports
 80002c4:	6023      	str	r3, [r4, #0]
  hlcd.data_pins = data_pins;    // LCD Data Pins , hlcd.data_pins
 80002c6:	4b25      	ldr	r3, [pc, #148]	; (800035c <lcd_Init+0xa0>)
  delay_ms(50);        //delayMicroseconds(50000); 
 80002c8:	f04f 0032 	mov.w	r0, #50	; 0x32
  hlcd.data_pins = data_pins;    // LCD Data Pins , hlcd.data_pins
 80002cc:	6063      	str	r3, [r4, #4]
    hlcd.displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80002ce:	bf94      	ite	ls
 80002d0:	2300      	movls	r3, #0
    hlcd.displayfunction |= LCD_2LINE;
 80002d2:	2308      	movhi	r3, #8
  hlcd.numlines = lines;
 80002d4:	72e1      	strb	r1, [r4, #11]
    hlcd.displayfunction |= LCD_2LINE;
 80002d6:	7223      	strb	r3, [r4, #8]
  delay_ms(50);        //delayMicroseconds(50000); 
 80002d8:	f000 f8a8 	bl	800042c <HAL_Delay>
  HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);  // digitalWrite(_rs_pin, LOW);
 80002dc:	2200      	movs	r2, #0
 80002de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002e2:	481f      	ldr	r0, [pc, #124]	; (8000360 <lcd_Init+0xa4>)
 80002e4:	f000 fba2 	bl	8000a2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);  // digitalWrite(_enable_pin, LOW);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2180      	movs	r1, #128	; 0x80
 80002ec:	481d      	ldr	r0, [pc, #116]	; (8000364 <lcd_Init+0xa8>)
 80002ee:	f000 fb9d 	bl	8000a2c <HAL_GPIO_WritePin>
    write4bits(0x03);
 80002f2:	2003      	movs	r0, #3
 80002f4:	f7ff ff64 	bl	80001c0 <write4bits>
    delay_us(4500);    //delayMicroseconds(4500); // wait min 4.1ms
 80002f8:	f241 1094 	movw	r0, #4500	; 0x1194
 80002fc:	f7ff ff46 	bl	800018c <delay_us>
    write4bits(0x03);
 8000300:	2003      	movs	r0, #3
 8000302:	f7ff ff5d 	bl	80001c0 <write4bits>
    delay_us(100);    //delayMicroseconds(4500); // wait min 4.1ms
 8000306:	2064      	movs	r0, #100	; 0x64
 8000308:	f7ff ff40 	bl	800018c <delay_us>
    write4bits(0x03); 
 800030c:	2003      	movs	r0, #3
 800030e:	f7ff ff57 	bl	80001c0 <write4bits>
    delay_us(100);    //delayMicroseconds(150);
 8000312:	2064      	movs	r0, #100	; 0x64
 8000314:	f7ff ff3a 	bl	800018c <delay_us>
    write4bits(0x02);
 8000318:	2002      	movs	r0, #2
 800031a:	f7ff ff51 	bl	80001c0 <write4bits>
    delay_us(100);
 800031e:	2064      	movs	r0, #100	; 0x64
 8000320:	f7ff ff34 	bl	800018c <delay_us>
  command(LCD_FUNCTIONSET | hlcd.displayfunction);  
 8000324:	7a20      	ldrb	r0, [r4, #8]
 8000326:	f040 0020 	orr.w	r0, r0, #32
 800032a:	f7ff ff8d 	bl	8000248 <command>
  hlcd.displaycontrol = LCD_DISPLAYOFF | LCD_CURSOROFF | LCD_BLINKOFF;
 800032e:	2300      	movs	r3, #0
  command(LCD_DISPLAYCONTROL | hlcd.displaycontrol);
 8000330:	2008      	movs	r0, #8
  hlcd.displaycontrol = LCD_DISPLAYOFF | LCD_CURSOROFF | LCD_BLINKOFF;
 8000332:	7263      	strb	r3, [r4, #9]
  command(LCD_DISPLAYCONTROL | hlcd.displaycontrol);
 8000334:	f7ff ff88 	bl	8000248 <command>
  lcd_clear();
 8000338:	f7ff ff89 	bl	800024e <lcd_clear>
  delay_ms(3);
 800033c:	2003      	movs	r0, #3
 800033e:	f000 f875 	bl	800042c <HAL_Delay>
  hlcd.displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000342:	2302      	movs	r3, #2
  command(LCD_ENTRYMODESET | hlcd.displaymode);
 8000344:	2006      	movs	r0, #6
  hlcd.displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000346:	72a3      	strb	r3, [r4, #10]
  command(LCD_ENTRYMODESET | hlcd.displaymode);
 8000348:	f7ff ff7e 	bl	8000248 <command>
}
 800034c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  lcd_display();
 8000350:	f7ff bfa8 	b.w	80002a4 <lcd_display>
 8000354:	20000008 	.word	0x20000008
 8000358:	20000040 	.word	0x20000040
 800035c:	20000000 	.word	0x20000000
 8000360:	40010800 	.word	0x40010800
 8000364:	40011000 	.word	0x40011000

08000368 <lcd_scrollDisplayLeft>:
  command(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 8000368:	2018      	movs	r0, #24
 800036a:	f7ff bf6d 	b.w	8000248 <command>

0800036e <lcd_scrollDisplayRight>:
  command(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
 800036e:	201c      	movs	r0, #28
 8000370:	f7ff bf6a 	b.w	8000248 <command>

08000374 <lcd_string>:
void lcd_string(char * str_data) {
 8000374:	b510      	push	{r4, lr}
 8000376:	1e44      	subs	r4, r0, #1
   while(*str_data) {
 8000378:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800037c:	b900      	cbnz	r0, 8000380 <lcd_string+0xc>
}
 800037e:	bd10      	pop	{r4, pc}
  send(value, GPIO_PIN_SET);
 8000380:	2101      	movs	r1, #1
 8000382:	f7ff ff4f 	bl	8000224 <send>
 8000386:	e7f7      	b.n	8000378 <lcd_string+0x4>

08000388 <lcd_setCurStr>:
void lcd_setCurStr(uint8_t col, uint8_t row,  char * str) {
 8000388:	b510      	push	{r4, lr}
 800038a:	4614      	mov	r4, r2
	lcd_setCursor(col, row);
 800038c:	f7ff ff68 	bl	8000260 <lcd_setCursor>
	lcd_string(str);
 8000390:	4620      	mov	r0, r4
}
 8000392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lcd_string(str);
 8000396:	f7ff bfed 	b.w	8000374 <lcd_string>
	...

0800039c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800039c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800039e:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <HAL_InitTick+0x3c>)
{
 80003a0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003a2:	7818      	ldrb	r0, [r3, #0]
 80003a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003a8:	fbb3 f3f0 	udiv	r3, r3, r0
 80003ac:	4a0b      	ldr	r2, [pc, #44]	; (80003dc <HAL_InitTick+0x40>)
 80003ae:	6810      	ldr	r0, [r2, #0]
 80003b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80003b4:	f000 fa42 	bl	800083c <HAL_SYSTICK_Config>
 80003b8:	4604      	mov	r4, r0
 80003ba:	b958      	cbnz	r0, 80003d4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003bc:	2d0f      	cmp	r5, #15
 80003be:	d809      	bhi.n	80003d4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003c0:	4602      	mov	r2, r0
 80003c2:	4629      	mov	r1, r5
 80003c4:	f04f 30ff 	mov.w	r0, #4294967295
 80003c8:	f000 f9f6 	bl	80007b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80003cc:	4b04      	ldr	r3, [pc, #16]	; (80003e0 <HAL_InitTick+0x44>)
 80003ce:	4620      	mov	r0, r4
 80003d0:	601d      	str	r5, [r3, #0]
 80003d2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80003d4:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80003d6:	bd38      	pop	{r3, r4, r5, pc}
 80003d8:	20000018 	.word	0x20000018
 80003dc:	20000020 	.word	0x20000020
 80003e0:	2000001c 	.word	0x2000001c

080003e4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003e4:	4a07      	ldr	r2, [pc, #28]	; (8000404 <HAL_Init+0x20>)
{
 80003e6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003e8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003ea:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003ec:	f043 0310 	orr.w	r3, r3, #16
 80003f0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003f2:	f000 f9cf 	bl	8000794 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80003f6:	2000      	movs	r0, #0
 80003f8:	f7ff ffd0 	bl	800039c <HAL_InitTick>
  HAL_MspInit();
 80003fc:	f001 fda0 	bl	8001f40 <HAL_MspInit>
}
 8000400:	2000      	movs	r0, #0
 8000402:	bd08      	pop	{r3, pc}
 8000404:	40022000 	.word	0x40022000

08000408 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000408:	4a03      	ldr	r2, [pc, #12]	; (8000418 <HAL_IncTick+0x10>)
 800040a:	4b04      	ldr	r3, [pc, #16]	; (800041c <HAL_IncTick+0x14>)
 800040c:	6811      	ldr	r1, [r2, #0]
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	440b      	add	r3, r1
 8000412:	6013      	str	r3, [r2, #0]
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	2000004c 	.word	0x2000004c
 800041c:	20000018 	.word	0x20000018

08000420 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000420:	4b01      	ldr	r3, [pc, #4]	; (8000428 <HAL_GetTick+0x8>)
 8000422:	6818      	ldr	r0, [r3, #0]
}
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	2000004c 	.word	0x2000004c

0800042c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800042c:	b538      	push	{r3, r4, r5, lr}
 800042e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000430:	f7ff fff6 	bl	8000420 <HAL_GetTick>
 8000434:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000436:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000438:	bf1e      	ittt	ne
 800043a:	4b04      	ldrne	r3, [pc, #16]	; (800044c <HAL_Delay+0x20>)
 800043c:	781b      	ldrbne	r3, [r3, #0]
 800043e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000440:	f7ff ffee 	bl	8000420 <HAL_GetTick>
 8000444:	1b40      	subs	r0, r0, r5
 8000446:	4284      	cmp	r4, r0
 8000448:	d8fa      	bhi.n	8000440 <HAL_Delay+0x14>
  {
  }
}
 800044a:	bd38      	pop	{r3, r4, r5, pc}
 800044c:	20000018 	.word	0x20000018

08000450 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000450:	2300      	movs	r3, #0
{ 
 8000452:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000454:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000456:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800045a:	2b01      	cmp	r3, #1
 800045c:	d074      	beq.n	8000548 <HAL_ADC_ConfigChannel+0xf8>
 800045e:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000460:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000462:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000466:	2d06      	cmp	r5, #6
 8000468:	6802      	ldr	r2, [r0, #0]
 800046a:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800046e:	680c      	ldr	r4, [r1, #0]
 8000470:	d825      	bhi.n	80004be <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000472:	442b      	add	r3, r5
 8000474:	251f      	movs	r5, #31
 8000476:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000478:	3b05      	subs	r3, #5
 800047a:	409d      	lsls	r5, r3
 800047c:	ea26 0505 	bic.w	r5, r6, r5
 8000480:	fa04 f303 	lsl.w	r3, r4, r3
 8000484:	432b      	orrs	r3, r5
 8000486:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000488:	2c09      	cmp	r4, #9
 800048a:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800048e:	688d      	ldr	r5, [r1, #8]
 8000490:	d92f      	bls.n	80004f2 <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000492:	2607      	movs	r6, #7
 8000494:	4423      	add	r3, r4
 8000496:	68d1      	ldr	r1, [r2, #12]
 8000498:	3b1e      	subs	r3, #30
 800049a:	409e      	lsls	r6, r3
 800049c:	ea21 0106 	bic.w	r1, r1, r6
 80004a0:	fa05 f303 	lsl.w	r3, r5, r3
 80004a4:	430b      	orrs	r3, r1
 80004a6:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80004a8:	f1a4 0310 	sub.w	r3, r4, #16
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d92b      	bls.n	8000508 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80004b0:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80004b2:	2200      	movs	r2, #0
 80004b4:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	b002      	add	sp, #8
 80004bc:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80004be:	2d0c      	cmp	r5, #12
 80004c0:	d80b      	bhi.n	80004da <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80004c2:	442b      	add	r3, r5
 80004c4:	251f      	movs	r5, #31
 80004c6:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80004c8:	3b23      	subs	r3, #35	; 0x23
 80004ca:	409d      	lsls	r5, r3
 80004cc:	ea26 0505 	bic.w	r5, r6, r5
 80004d0:	fa04 f303 	lsl.w	r3, r4, r3
 80004d4:	432b      	orrs	r3, r5
 80004d6:	6313      	str	r3, [r2, #48]	; 0x30
 80004d8:	e7d6      	b.n	8000488 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80004da:	442b      	add	r3, r5
 80004dc:	251f      	movs	r5, #31
 80004de:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80004e0:	3b41      	subs	r3, #65	; 0x41
 80004e2:	409d      	lsls	r5, r3
 80004e4:	ea26 0505 	bic.w	r5, r6, r5
 80004e8:	fa04 f303 	lsl.w	r3, r4, r3
 80004ec:	432b      	orrs	r3, r5
 80004ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004f0:	e7ca      	b.n	8000488 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80004f2:	2607      	movs	r6, #7
 80004f4:	6911      	ldr	r1, [r2, #16]
 80004f6:	4423      	add	r3, r4
 80004f8:	409e      	lsls	r6, r3
 80004fa:	ea21 0106 	bic.w	r1, r1, r6
 80004fe:	fa05 f303 	lsl.w	r3, r5, r3
 8000502:	430b      	orrs	r3, r1
 8000504:	6113      	str	r3, [r2, #16]
 8000506:	e7cf      	b.n	80004a8 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000508:	4b10      	ldr	r3, [pc, #64]	; (800054c <HAL_ADC_ConfigChannel+0xfc>)
 800050a:	429a      	cmp	r2, r3
 800050c:	d116      	bne.n	800053c <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800050e:	6893      	ldr	r3, [r2, #8]
 8000510:	021b      	lsls	r3, r3, #8
 8000512:	d4cd      	bmi.n	80004b0 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000514:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000516:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000518:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800051c:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800051e:	d1c7      	bne.n	80004b0 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_ADC_ConfigChannel+0x100>)
 8000522:	4a0c      	ldr	r2, [pc, #48]	; (8000554 <HAL_ADC_ConfigChannel+0x104>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	fbb3 f2f2 	udiv	r2, r3, r2
 800052a:	230a      	movs	r3, #10
 800052c:	4353      	muls	r3, r2
            wait_loop_index--;
 800052e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000530:	9b01      	ldr	r3, [sp, #4]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d0bc      	beq.n	80004b0 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8000536:	9b01      	ldr	r3, [sp, #4]
 8000538:	3b01      	subs	r3, #1
 800053a:	e7f8      	b.n	800052e <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800053c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800053e:	f043 0320 	orr.w	r3, r3, #32
 8000542:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000544:	2301      	movs	r3, #1
 8000546:	e7b4      	b.n	80004b2 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000548:	2302      	movs	r3, #2
 800054a:	e7b5      	b.n	80004b8 <HAL_ADC_ConfigChannel+0x68>
 800054c:	40012400 	.word	0x40012400
 8000550:	20000020 	.word	0x20000020
 8000554:	000f4240 	.word	0x000f4240

08000558 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000558:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800055a:	6803      	ldr	r3, [r0, #0]
{
 800055c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800055e:	689a      	ldr	r2, [r3, #8]
 8000560:	07d2      	lsls	r2, r2, #31
 8000562:	d401      	bmi.n	8000568 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000564:	2000      	movs	r0, #0
 8000566:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000568:	689a      	ldr	r2, [r3, #8]
 800056a:	f022 0201 	bic.w	r2, r2, #1
 800056e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000570:	f7ff ff56 	bl	8000420 <HAL_GetTick>
 8000574:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000576:	6823      	ldr	r3, [r4, #0]
 8000578:	689b      	ldr	r3, [r3, #8]
 800057a:	07db      	lsls	r3, r3, #31
 800057c:	d5f2      	bpl.n	8000564 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800057e:	f7ff ff4f 	bl	8000420 <HAL_GetTick>
 8000582:	1b40      	subs	r0, r0, r5
 8000584:	2802      	cmp	r0, #2
 8000586:	d9f6      	bls.n	8000576 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000588:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800058a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800058c:	f043 0310 	orr.w	r3, r3, #16
 8000590:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000592:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	62e3      	str	r3, [r4, #44]	; 0x2c
 800059a:	bd38      	pop	{r3, r4, r5, pc}

0800059c <HAL_ADC_Init>:
{
 800059c:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800059e:	4604      	mov	r4, r0
 80005a0:	2800      	cmp	r0, #0
 80005a2:	d071      	beq.n	8000688 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80005a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80005a6:	b923      	cbnz	r3, 80005b2 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80005a8:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80005aa:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80005ae:	f001 f9bb 	bl	8001928 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80005b2:	4620      	mov	r0, r4
 80005b4:	f7ff ffd0 	bl	8000558 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80005b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80005ba:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 80005be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80005c0:	d164      	bne.n	800068c <HAL_ADC_Init+0xf0>
 80005c2:	2800      	cmp	r0, #0
 80005c4:	d162      	bne.n	800068c <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80005c6:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 80005c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80005cc:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80005ce:	f023 0302 	bic.w	r3, r3, #2
 80005d2:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80005d6:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80005d8:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80005da:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80005dc:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80005de:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80005e2:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80005e6:	d038      	beq.n	800065a <HAL_ADC_Init+0xbe>
 80005e8:	2901      	cmp	r1, #1
 80005ea:	bf14      	ite	ne
 80005ec:	4606      	movne	r6, r0
 80005ee:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80005f2:	7d25      	ldrb	r5, [r4, #20]
 80005f4:	2d01      	cmp	r5, #1
 80005f6:	d107      	bne.n	8000608 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d130      	bne.n	800065e <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80005fc:	69a3      	ldr	r3, [r4, #24]
 80005fe:	3b01      	subs	r3, #1
 8000600:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000604:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000608:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800060a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800060e:	685d      	ldr	r5, [r3, #4]
 8000610:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000614:	ea45 0506 	orr.w	r5, r5, r6
 8000618:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800061a:	689e      	ldr	r6, [r3, #8]
 800061c:	4d1d      	ldr	r5, [pc, #116]	; (8000694 <HAL_ADC_Init+0xf8>)
 800061e:	ea05 0506 	and.w	r5, r5, r6
 8000622:	ea45 0502 	orr.w	r5, r5, r2
 8000626:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000628:	d001      	beq.n	800062e <HAL_ADC_Init+0x92>
 800062a:	2901      	cmp	r1, #1
 800062c:	d120      	bne.n	8000670 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800062e:	6921      	ldr	r1, [r4, #16]
 8000630:	3901      	subs	r1, #1
 8000632:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000634:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8000636:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 800063a:	4329      	orrs	r1, r5
 800063c:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800063e:	6899      	ldr	r1, [r3, #8]
 8000640:	4b15      	ldr	r3, [pc, #84]	; (8000698 <HAL_ADC_Init+0xfc>)
 8000642:	400b      	ands	r3, r1
 8000644:	429a      	cmp	r2, r3
 8000646:	d115      	bne.n	8000674 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8000648:	2300      	movs	r3, #0
 800064a:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800064c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800064e:	f023 0303 	bic.w	r3, r3, #3
 8000652:	f043 0301 	orr.w	r3, r3, #1
 8000656:	62a3      	str	r3, [r4, #40]	; 0x28
 8000658:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800065a:	460e      	mov	r6, r1
 800065c:	e7c9      	b.n	80005f2 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800065e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000660:	f043 0320 	orr.w	r3, r3, #32
 8000664:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000666:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800066e:	e7cb      	b.n	8000608 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000670:	2100      	movs	r1, #0
 8000672:	e7df      	b.n	8000634 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000674:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000676:	f023 0312 	bic.w	r3, r3, #18
 800067a:	f043 0310 	orr.w	r3, r3, #16
 800067e:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000680:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000682:	f043 0301 	orr.w	r3, r3, #1
 8000686:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000688:	2001      	movs	r0, #1
}
 800068a:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800068c:	f043 0310 	orr.w	r3, r3, #16
 8000690:	62a3      	str	r3, [r4, #40]	; 0x28
 8000692:	e7f9      	b.n	8000688 <HAL_ADC_Init+0xec>
 8000694:	ffe1f7fd 	.word	0xffe1f7fd
 8000698:	ff1f0efe 	.word	0xff1f0efe

0800069c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800069c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800069e:	4604      	mov	r4, r0
 80006a0:	2800      	cmp	r0, #0
 80006a2:	d06e      	beq.n	8000782 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80006a4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80006a8:	b90b      	cbnz	r3, 80006ae <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80006aa:	f001 f9bb 	bl	8001a24 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80006ae:	6822      	ldr	r2, [r4, #0]
 80006b0:	6813      	ldr	r3, [r2, #0]
 80006b2:	f023 0302 	bic.w	r3, r3, #2
 80006b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006b8:	f7ff feb2 	bl	8000420 <HAL_GetTick>
 80006bc:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80006be:	6823      	ldr	r3, [r4, #0]
 80006c0:	685a      	ldr	r2, [r3, #4]
 80006c2:	0791      	lsls	r1, r2, #30
 80006c4:	d451      	bmi.n	800076a <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	f042 0201 	orr.w	r2, r2, #1
 80006cc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006ce:	f7ff fea7 	bl	8000420 <HAL_GetTick>
 80006d2:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006d4:	6823      	ldr	r3, [r4, #0]
 80006d6:	685a      	ldr	r2, [r3, #4]
 80006d8:	07d2      	lsls	r2, r2, #31
 80006da:	d554      	bpl.n	8000786 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80006dc:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80006de:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80006e0:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	bf0c      	ite	eq
 80006e6:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006ea:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80006ee:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80006f0:	7e62      	ldrb	r2, [r4, #25]
 80006f2:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	bf0c      	ite	eq
 80006f8:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006fc:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8000700:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000702:	7ea2      	ldrb	r2, [r4, #26]
 8000704:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	bf0c      	ite	eq
 800070a:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800070e:	f022 0220 	bicne.w	r2, r2, #32
 8000712:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000714:	7ee2      	ldrb	r2, [r4, #27]
 8000716:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	bf0c      	ite	eq
 800071c:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000720:	f042 0210 	orrne.w	r2, r2, #16
 8000724:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000726:	7f22      	ldrb	r2, [r4, #28]
 8000728:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	bf0c      	ite	eq
 800072e:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000732:	f022 0208 	bicne.w	r2, r2, #8
 8000736:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000738:	7f62      	ldrb	r2, [r4, #29]
 800073a:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	bf0c      	ite	eq
 8000740:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000744:	f022 0204 	bicne.w	r2, r2, #4
 8000748:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800074a:	68e1      	ldr	r1, [r4, #12]
 800074c:	68a2      	ldr	r2, [r4, #8]
 800074e:	430a      	orrs	r2, r1
 8000750:	6921      	ldr	r1, [r4, #16]
 8000752:	430a      	orrs	r2, r1
 8000754:	6961      	ldr	r1, [r4, #20]
 8000756:	430a      	orrs	r2, r1
 8000758:	6861      	ldr	r1, [r4, #4]
 800075a:	3901      	subs	r1, #1
 800075c:	430a      	orrs	r2, r1
 800075e:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000760:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000762:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000764:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8000768:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800076a:	f7ff fe59 	bl	8000420 <HAL_GetTick>
 800076e:	1b40      	subs	r0, r0, r5
 8000770:	280a      	cmp	r0, #10
 8000772:	d9a4      	bls.n	80006be <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000774:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800077a:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800077c:	2305      	movs	r3, #5
 800077e:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8000782:	2001      	movs	r0, #1
}
 8000784:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000786:	f7ff fe4b 	bl	8000420 <HAL_GetTick>
 800078a:	1b40      	subs	r0, r0, r5
 800078c:	280a      	cmp	r0, #10
 800078e:	d9a1      	bls.n	80006d4 <HAL_CAN_Init+0x38>
 8000790:	e7f0      	b.n	8000774 <HAL_CAN_Init+0xd8>
	...

08000794 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000794:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000796:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000798:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800079a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800079e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007a2:	041b      	lsls	r3, r3, #16
 80007a4:	0c1b      	lsrs	r3, r3, #16
 80007a6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80007ae:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80007b0:	60d3      	str	r3, [r2, #12]
 80007b2:	4770      	bx	lr
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ba:	b530      	push	{r4, r5, lr}
 80007bc:	68dc      	ldr	r4, [r3, #12]
 80007be:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c8:	2b04      	cmp	r3, #4
 80007ca:	bf28      	it	cs
 80007cc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ce:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d0:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d4:	bf98      	it	ls
 80007d6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	fa05 f303 	lsl.w	r3, r5, r3
 80007dc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007e0:	bf88      	it	hi
 80007e2:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e4:	4019      	ands	r1, r3
 80007e6:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e8:	fa05 f404 	lsl.w	r4, r5, r4
 80007ec:	3c01      	subs	r4, #1
 80007ee:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80007f0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f2:	ea42 0201 	orr.w	r2, r2, r1
 80007f6:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fa:	bfa9      	itett	ge
 80007fc:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000800:	4b06      	ldrlt	r3, [pc, #24]	; (800081c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000802:	b2d2      	uxtbge	r2, r2
 8000804:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000808:	bfbb      	ittet	lt
 800080a:	f000 000f 	andlt.w	r0, r0, #15
 800080e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000810:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000814:	541a      	strblt	r2, [r3, r0]
 8000816:	bd30      	pop	{r4, r5, pc}
 8000818:	e000ed00 	.word	0xe000ed00
 800081c:	e000ed14 	.word	0xe000ed14

08000820 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000820:	2800      	cmp	r0, #0
 8000822:	db08      	blt.n	8000836 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000824:	2301      	movs	r3, #1
 8000826:	0942      	lsrs	r2, r0, #5
 8000828:	f000 001f 	and.w	r0, r0, #31
 800082c:	fa03 f000 	lsl.w	r0, r3, r0
 8000830:	4b01      	ldr	r3, [pc, #4]	; (8000838 <HAL_NVIC_EnableIRQ+0x18>)
 8000832:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000836:	4770      	bx	lr
 8000838:	e000e100 	.word	0xe000e100

0800083c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800083c:	3801      	subs	r0, #1
 800083e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000842:	d20a      	bcs.n	800085a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000844:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000848:	4a06      	ldr	r2, [pc, #24]	; (8000864 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800084a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000850:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000852:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000854:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800085a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000e010 	.word	0xe000e010
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000868:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800086c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800086e:	4626      	mov	r6, r4
 8000870:	4b66      	ldr	r3, [pc, #408]	; (8000a0c <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000872:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000a1c <HAL_GPIO_Init+0x1b4>
 8000876:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000a20 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800087a:	680a      	ldr	r2, [r1, #0]
 800087c:	fa32 f506 	lsrs.w	r5, r2, r6
 8000880:	d102      	bne.n	8000888 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8000882:	b003      	add	sp, #12
 8000884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000888:	f04f 0801 	mov.w	r8, #1
 800088c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000890:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000894:	4590      	cmp	r8, r2
 8000896:	d17f      	bne.n	8000998 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8000898:	684d      	ldr	r5, [r1, #4]
 800089a:	2d12      	cmp	r5, #18
 800089c:	f000 80aa 	beq.w	80009f4 <HAL_GPIO_Init+0x18c>
 80008a0:	f200 8083 	bhi.w	80009aa <HAL_GPIO_Init+0x142>
 80008a4:	2d02      	cmp	r5, #2
 80008a6:	f000 80a2 	beq.w	80009ee <HAL_GPIO_Init+0x186>
 80008aa:	d877      	bhi.n	800099c <HAL_GPIO_Init+0x134>
 80008ac:	2d00      	cmp	r5, #0
 80008ae:	f000 8089 	beq.w	80009c4 <HAL_GPIO_Init+0x15c>
 80008b2:	2d01      	cmp	r5, #1
 80008b4:	f000 8099 	beq.w	80009ea <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008b8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008bc:	2aff      	cmp	r2, #255	; 0xff
 80008be:	bf93      	iteet	ls
 80008c0:	4682      	movls	sl, r0
 80008c2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80008c6:	3d08      	subhi	r5, #8
 80008c8:	f8d0 b000 	ldrls.w	fp, [r0]
 80008cc:	bf92      	itee	ls
 80008ce:	00b5      	lslls	r5, r6, #2
 80008d0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80008d4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008d6:	fa09 f805 	lsl.w	r8, r9, r5
 80008da:	ea2b 0808 	bic.w	r8, fp, r8
 80008de:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008e2:	bf88      	it	hi
 80008e4:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008e8:	ea48 0505 	orr.w	r5, r8, r5
 80008ec:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008f0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80008f4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80008f8:	d04e      	beq.n	8000998 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008fa:	4d45      	ldr	r5, [pc, #276]	; (8000a10 <HAL_GPIO_Init+0x1a8>)
 80008fc:	4f44      	ldr	r7, [pc, #272]	; (8000a10 <HAL_GPIO_Init+0x1a8>)
 80008fe:	69ad      	ldr	r5, [r5, #24]
 8000900:	f026 0803 	bic.w	r8, r6, #3
 8000904:	f045 0501 	orr.w	r5, r5, #1
 8000908:	61bd      	str	r5, [r7, #24]
 800090a:	69bd      	ldr	r5, [r7, #24]
 800090c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000910:	f005 0501 	and.w	r5, r5, #1
 8000914:	9501      	str	r5, [sp, #4]
 8000916:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800091a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800091e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000920:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000924:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000928:	fa09 f90b 	lsl.w	r9, r9, fp
 800092c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000930:	4d38      	ldr	r5, [pc, #224]	; (8000a14 <HAL_GPIO_Init+0x1ac>)
 8000932:	42a8      	cmp	r0, r5
 8000934:	d063      	beq.n	80009fe <HAL_GPIO_Init+0x196>
 8000936:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800093a:	42a8      	cmp	r0, r5
 800093c:	d061      	beq.n	8000a02 <HAL_GPIO_Init+0x19a>
 800093e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000942:	42a8      	cmp	r0, r5
 8000944:	d05f      	beq.n	8000a06 <HAL_GPIO_Init+0x19e>
 8000946:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800094a:	42a8      	cmp	r0, r5
 800094c:	bf0c      	ite	eq
 800094e:	2503      	moveq	r5, #3
 8000950:	2504      	movne	r5, #4
 8000952:	fa05 f50b 	lsl.w	r5, r5, fp
 8000956:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800095a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800095e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000960:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000964:	bf14      	ite	ne
 8000966:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000968:	4395      	biceq	r5, r2
 800096a:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800096c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800096e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000972:	bf14      	ite	ne
 8000974:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000976:	4395      	biceq	r5, r2
 8000978:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800097a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800097c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000980:	bf14      	ite	ne
 8000982:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000984:	4395      	biceq	r5, r2
 8000986:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000988:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800098a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800098e:	bf14      	ite	ne
 8000990:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000992:	ea25 0202 	biceq.w	r2, r5, r2
 8000996:	60da      	str	r2, [r3, #12]
	position++;
 8000998:	3601      	adds	r6, #1
 800099a:	e76e      	b.n	800087a <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 800099c:	2d03      	cmp	r5, #3
 800099e:	d022      	beq.n	80009e6 <HAL_GPIO_Init+0x17e>
 80009a0:	2d11      	cmp	r5, #17
 80009a2:	d189      	bne.n	80008b8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009a4:	68cc      	ldr	r4, [r1, #12]
 80009a6:	3404      	adds	r4, #4
          break;
 80009a8:	e786      	b.n	80008b8 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80009aa:	4f1b      	ldr	r7, [pc, #108]	; (8000a18 <HAL_GPIO_Init+0x1b0>)
 80009ac:	42bd      	cmp	r5, r7
 80009ae:	d009      	beq.n	80009c4 <HAL_GPIO_Init+0x15c>
 80009b0:	d812      	bhi.n	80009d8 <HAL_GPIO_Init+0x170>
 80009b2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000a24 <HAL_GPIO_Init+0x1bc>
 80009b6:	454d      	cmp	r5, r9
 80009b8:	d004      	beq.n	80009c4 <HAL_GPIO_Init+0x15c>
 80009ba:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80009be:	454d      	cmp	r5, r9
 80009c0:	f47f af7a 	bne.w	80008b8 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009c4:	688c      	ldr	r4, [r1, #8]
 80009c6:	b1c4      	cbz	r4, 80009fa <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009c8:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80009ca:	bf0c      	ite	eq
 80009cc:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80009d0:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009d4:	2408      	movs	r4, #8
 80009d6:	e76f      	b.n	80008b8 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80009d8:	4575      	cmp	r5, lr
 80009da:	d0f3      	beq.n	80009c4 <HAL_GPIO_Init+0x15c>
 80009dc:	4565      	cmp	r5, ip
 80009de:	d0f1      	beq.n	80009c4 <HAL_GPIO_Init+0x15c>
 80009e0:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000a28 <HAL_GPIO_Init+0x1c0>
 80009e4:	e7eb      	b.n	80009be <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009e6:	2400      	movs	r4, #0
 80009e8:	e766      	b.n	80008b8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009ea:	68cc      	ldr	r4, [r1, #12]
          break;
 80009ec:	e764      	b.n	80008b8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009ee:	68cc      	ldr	r4, [r1, #12]
 80009f0:	3408      	adds	r4, #8
          break;
 80009f2:	e761      	b.n	80008b8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009f4:	68cc      	ldr	r4, [r1, #12]
 80009f6:	340c      	adds	r4, #12
          break;
 80009f8:	e75e      	b.n	80008b8 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009fa:	2404      	movs	r4, #4
 80009fc:	e75c      	b.n	80008b8 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009fe:	2500      	movs	r5, #0
 8000a00:	e7a7      	b.n	8000952 <HAL_GPIO_Init+0xea>
 8000a02:	2501      	movs	r5, #1
 8000a04:	e7a5      	b.n	8000952 <HAL_GPIO_Init+0xea>
 8000a06:	2502      	movs	r5, #2
 8000a08:	e7a3      	b.n	8000952 <HAL_GPIO_Init+0xea>
 8000a0a:	bf00      	nop
 8000a0c:	40010400 	.word	0x40010400
 8000a10:	40021000 	.word	0x40021000
 8000a14:	40010800 	.word	0x40010800
 8000a18:	10210000 	.word	0x10210000
 8000a1c:	10310000 	.word	0x10310000
 8000a20:	10320000 	.word	0x10320000
 8000a24:	10110000 	.word	0x10110000
 8000a28:	10220000 	.word	0x10220000

08000a2c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a2c:	b10a      	cbz	r2, 8000a32 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a2e:	6101      	str	r1, [r0, #16]
 8000a30:	4770      	bx	lr
 8000a32:	0409      	lsls	r1, r1, #16
 8000a34:	e7fb      	b.n	8000a2e <HAL_GPIO_WritePin+0x2>

08000a36 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a36:	4770      	bx	lr

08000a38 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000a38:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000a3a:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000a3c:	6959      	ldr	r1, [r3, #20]
 8000a3e:	4201      	tst	r1, r0
 8000a40:	d002      	beq.n	8000a48 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000a42:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000a44:	f7ff fff7 	bl	8000a36 <HAL_GPIO_EXTI_Callback>
 8000a48:	bd08      	pop	{r3, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40010400 	.word	0x40010400

08000a50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000a50:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000a52:	4604      	mov	r4, r0
 8000a54:	b908      	cbnz	r0, 8000a5a <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8000a56:	2001      	movs	r0, #1
 8000a58:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000a5a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000a5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000a62:	b91b      	cbnz	r3, 8000a6c <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000a64:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000a68:	f001 f8cc 	bl	8001c04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000a6c:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000a6e:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000a70:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000a74:	6813      	ldr	r3, [r2, #0]
 8000a76:	f023 0301 	bic.w	r3, r3, #1
 8000a7a:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000a7c:	f000 fb0a 	bl	8001094 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000a80:	6865      	ldr	r5, [r4, #4]
 8000a82:	4b41      	ldr	r3, [pc, #260]	; (8000b88 <HAL_I2C_Init+0x138>)
 8000a84:	429d      	cmp	r5, r3
 8000a86:	d84d      	bhi.n	8000b24 <HAL_I2C_Init+0xd4>
 8000a88:	4b40      	ldr	r3, [pc, #256]	; (8000b8c <HAL_I2C_Init+0x13c>)
 8000a8a:	4298      	cmp	r0, r3
 8000a8c:	d9e3      	bls.n	8000a56 <HAL_I2C_Init+0x6>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000a8e:	4940      	ldr	r1, [pc, #256]	; (8000b90 <HAL_I2C_Init+0x140>)

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000a90:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000a92:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000a96:	6853      	ldr	r3, [r2, #4]
 8000a98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a9c:	430b      	orrs	r3, r1
 8000a9e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000aa0:	6a13      	ldr	r3, [r2, #32]
 8000aa2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000aa6:	3101      	adds	r1, #1
 8000aa8:	4319      	orrs	r1, r3
 8000aaa:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000aac:	69d1      	ldr	r1, [r2, #28]
 8000aae:	4b36      	ldr	r3, [pc, #216]	; (8000b88 <HAL_I2C_Init+0x138>)
 8000ab0:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000ab4:	429d      	cmp	r5, r3
 8000ab6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000aba:	f100 30ff 	add.w	r0, r0, #4294967295
 8000abe:	d848      	bhi.n	8000b52 <HAL_I2C_Init+0x102>
 8000ac0:	006d      	lsls	r5, r5, #1
 8000ac2:	fbb0 f0f5 	udiv	r0, r0, r5
 8000ac6:	3001      	adds	r0, #1
 8000ac8:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000acc:	2b04      	cmp	r3, #4
 8000ace:	bf38      	it	cc
 8000ad0:	2304      	movcc	r3, #4
 8000ad2:	430b      	orrs	r3, r1
 8000ad4:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000ad6:	6811      	ldr	r1, [r2, #0]
 8000ad8:	6a20      	ldr	r0, [r4, #32]
 8000ada:	69e3      	ldr	r3, [r4, #28]
 8000adc:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000ae0:	4303      	orrs	r3, r0
 8000ae2:	430b      	orrs	r3, r1
 8000ae4:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000ae6:	6891      	ldr	r1, [r2, #8]
 8000ae8:	68e0      	ldr	r0, [r4, #12]
 8000aea:	6923      	ldr	r3, [r4, #16]
 8000aec:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8000af0:	4303      	orrs	r3, r0
 8000af2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000af6:	430b      	orrs	r3, r1
 8000af8:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000afa:	68d1      	ldr	r1, [r2, #12]
 8000afc:	69a0      	ldr	r0, [r4, #24]
 8000afe:	6963      	ldr	r3, [r4, #20]
 8000b00:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000b04:	4303      	orrs	r3, r0
 8000b06:	430b      	orrs	r3, r1
 8000b08:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000b0a:	6813      	ldr	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b0c:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000b14:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b16:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000b18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000b1c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b1e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8000b22:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000b24:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <HAL_I2C_Init+0x144>)
 8000b26:	4298      	cmp	r0, r3
 8000b28:	d995      	bls.n	8000a56 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000b2a:	4e19      	ldr	r6, [pc, #100]	; (8000b90 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000b2c:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8000b30:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000b34:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000b36:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000b38:	6853      	ldr	r3, [r2, #4]
 8000b3a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b3e:	4333      	orrs	r3, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000b40:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000b44:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000b46:	6a13      	ldr	r3, [r2, #32]
 8000b48:	fbb1 f1f6 	udiv	r1, r1, r6
 8000b4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b50:	e7a9      	b.n	8000aa6 <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000b52:	68a3      	ldr	r3, [r4, #8]
 8000b54:	b953      	cbnz	r3, 8000b6c <HAL_I2C_Init+0x11c>
 8000b56:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000b5a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b5e:	1c43      	adds	r3, r0, #1
 8000b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b64:	b16b      	cbz	r3, 8000b82 <HAL_I2C_Init+0x132>
 8000b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b6a:	e7b2      	b.n	8000ad2 <HAL_I2C_Init+0x82>
 8000b6c:	2319      	movs	r3, #25
 8000b6e:	436b      	muls	r3, r5
 8000b70:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b74:	1c43      	adds	r3, r0, #1
 8000b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b7a:	b113      	cbz	r3, 8000b82 <HAL_I2C_Init+0x132>
 8000b7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b80:	e7a7      	b.n	8000ad2 <HAL_I2C_Init+0x82>
 8000b82:	2301      	movs	r3, #1
 8000b84:	e7a5      	b.n	8000ad2 <HAL_I2C_Init+0x82>
 8000b86:	bf00      	nop
 8000b88:	000186a0 	.word	0x000186a0
 8000b8c:	001e847f 	.word	0x001e847f
 8000b90:	000f4240 	.word	0x000f4240
 8000b94:	003d08ff 	.word	0x003d08ff

08000b98 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000b98:	2201      	movs	r2, #1
 8000b9a:	4b01      	ldr	r3, [pc, #4]	; (8000ba0 <HAL_PWR_EnableBkUpAccess+0x8>)
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	4770      	bx	lr
 8000ba0:	420e0020 	.word	0x420e0020

08000ba4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ba4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ba8:	4605      	mov	r5, r0
 8000baa:	b908      	cbnz	r0, 8000bb0 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000bac:	2001      	movs	r0, #1
 8000bae:	e03c      	b.n	8000c2a <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bb0:	6803      	ldr	r3, [r0, #0]
 8000bb2:	07db      	lsls	r3, r3, #31
 8000bb4:	d410      	bmi.n	8000bd8 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bb6:	682b      	ldr	r3, [r5, #0]
 8000bb8:	079f      	lsls	r7, r3, #30
 8000bba:	d45d      	bmi.n	8000c78 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bbc:	682b      	ldr	r3, [r5, #0]
 8000bbe:	0719      	lsls	r1, r3, #28
 8000bc0:	f100 8094 	bmi.w	8000cec <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bc4:	682b      	ldr	r3, [r5, #0]
 8000bc6:	075a      	lsls	r2, r3, #29
 8000bc8:	f100 80be 	bmi.w	8000d48 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000bcc:	69e8      	ldr	r0, [r5, #28]
 8000bce:	2800      	cmp	r0, #0
 8000bd0:	f040 812c 	bne.w	8000e2c <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	e028      	b.n	8000c2a <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bd8:	4c8f      	ldr	r4, [pc, #572]	; (8000e18 <HAL_RCC_OscConfig+0x274>)
 8000bda:	6863      	ldr	r3, [r4, #4]
 8000bdc:	f003 030c 	and.w	r3, r3, #12
 8000be0:	2b04      	cmp	r3, #4
 8000be2:	d007      	beq.n	8000bf4 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000be4:	6863      	ldr	r3, [r4, #4]
 8000be6:	f003 030c 	and.w	r3, r3, #12
 8000bea:	2b08      	cmp	r3, #8
 8000bec:	d109      	bne.n	8000c02 <HAL_RCC_OscConfig+0x5e>
 8000bee:	6863      	ldr	r3, [r4, #4]
 8000bf0:	03de      	lsls	r6, r3, #15
 8000bf2:	d506      	bpl.n	8000c02 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bf4:	6823      	ldr	r3, [r4, #0]
 8000bf6:	039c      	lsls	r4, r3, #14
 8000bf8:	d5dd      	bpl.n	8000bb6 <HAL_RCC_OscConfig+0x12>
 8000bfa:	686b      	ldr	r3, [r5, #4]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d1da      	bne.n	8000bb6 <HAL_RCC_OscConfig+0x12>
 8000c00:	e7d4      	b.n	8000bac <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c02:	686b      	ldr	r3, [r5, #4]
 8000c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c08:	d112      	bne.n	8000c30 <HAL_RCC_OscConfig+0x8c>
 8000c0a:	6823      	ldr	r3, [r4, #0]
 8000c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c10:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c12:	f7ff fc05 	bl	8000420 <HAL_GetTick>
 8000c16:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c18:	6823      	ldr	r3, [r4, #0]
 8000c1a:	0398      	lsls	r0, r3, #14
 8000c1c:	d4cb      	bmi.n	8000bb6 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c1e:	f7ff fbff 	bl	8000420 <HAL_GetTick>
 8000c22:	1b80      	subs	r0, r0, r6
 8000c24:	2864      	cmp	r0, #100	; 0x64
 8000c26:	d9f7      	bls.n	8000c18 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000c28:	2003      	movs	r0, #3
}
 8000c2a:	b002      	add	sp, #8
 8000c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c30:	b99b      	cbnz	r3, 8000c5a <HAL_RCC_OscConfig+0xb6>
 8000c32:	6823      	ldr	r3, [r4, #0]
 8000c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c38:	6023      	str	r3, [r4, #0]
 8000c3a:	6823      	ldr	r3, [r4, #0]
 8000c3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c40:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c42:	f7ff fbed 	bl	8000420 <HAL_GetTick>
 8000c46:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c48:	6823      	ldr	r3, [r4, #0]
 8000c4a:	0399      	lsls	r1, r3, #14
 8000c4c:	d5b3      	bpl.n	8000bb6 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c4e:	f7ff fbe7 	bl	8000420 <HAL_GetTick>
 8000c52:	1b80      	subs	r0, r0, r6
 8000c54:	2864      	cmp	r0, #100	; 0x64
 8000c56:	d9f7      	bls.n	8000c48 <HAL_RCC_OscConfig+0xa4>
 8000c58:	e7e6      	b.n	8000c28 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c5e:	6823      	ldr	r3, [r4, #0]
 8000c60:	d103      	bne.n	8000c6a <HAL_RCC_OscConfig+0xc6>
 8000c62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c66:	6023      	str	r3, [r4, #0]
 8000c68:	e7cf      	b.n	8000c0a <HAL_RCC_OscConfig+0x66>
 8000c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c6e:	6023      	str	r3, [r4, #0]
 8000c70:	6823      	ldr	r3, [r4, #0]
 8000c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c76:	e7cb      	b.n	8000c10 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c78:	4c67      	ldr	r4, [pc, #412]	; (8000e18 <HAL_RCC_OscConfig+0x274>)
 8000c7a:	6863      	ldr	r3, [r4, #4]
 8000c7c:	f013 0f0c 	tst.w	r3, #12
 8000c80:	d007      	beq.n	8000c92 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c82:	6863      	ldr	r3, [r4, #4]
 8000c84:	f003 030c 	and.w	r3, r3, #12
 8000c88:	2b08      	cmp	r3, #8
 8000c8a:	d110      	bne.n	8000cae <HAL_RCC_OscConfig+0x10a>
 8000c8c:	6863      	ldr	r3, [r4, #4]
 8000c8e:	03da      	lsls	r2, r3, #15
 8000c90:	d40d      	bmi.n	8000cae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c92:	6823      	ldr	r3, [r4, #0]
 8000c94:	079b      	lsls	r3, r3, #30
 8000c96:	d502      	bpl.n	8000c9e <HAL_RCC_OscConfig+0xfa>
 8000c98:	692b      	ldr	r3, [r5, #16]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d186      	bne.n	8000bac <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c9e:	6823      	ldr	r3, [r4, #0]
 8000ca0:	696a      	ldr	r2, [r5, #20]
 8000ca2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ca6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000caa:	6023      	str	r3, [r4, #0]
 8000cac:	e786      	b.n	8000bbc <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cae:	692a      	ldr	r2, [r5, #16]
 8000cb0:	4b5a      	ldr	r3, [pc, #360]	; (8000e1c <HAL_RCC_OscConfig+0x278>)
 8000cb2:	b16a      	cbz	r2, 8000cd0 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000cb8:	f7ff fbb2 	bl	8000420 <HAL_GetTick>
 8000cbc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cbe:	6823      	ldr	r3, [r4, #0]
 8000cc0:	079f      	lsls	r7, r3, #30
 8000cc2:	d4ec      	bmi.n	8000c9e <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cc4:	f7ff fbac 	bl	8000420 <HAL_GetTick>
 8000cc8:	1b80      	subs	r0, r0, r6
 8000cca:	2802      	cmp	r0, #2
 8000ccc:	d9f7      	bls.n	8000cbe <HAL_RCC_OscConfig+0x11a>
 8000cce:	e7ab      	b.n	8000c28 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000cd0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000cd2:	f7ff fba5 	bl	8000420 <HAL_GetTick>
 8000cd6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cd8:	6823      	ldr	r3, [r4, #0]
 8000cda:	0798      	lsls	r0, r3, #30
 8000cdc:	f57f af6e 	bpl.w	8000bbc <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ce0:	f7ff fb9e 	bl	8000420 <HAL_GetTick>
 8000ce4:	1b80      	subs	r0, r0, r6
 8000ce6:	2802      	cmp	r0, #2
 8000ce8:	d9f6      	bls.n	8000cd8 <HAL_RCC_OscConfig+0x134>
 8000cea:	e79d      	b.n	8000c28 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cec:	69aa      	ldr	r2, [r5, #24]
 8000cee:	4c4a      	ldr	r4, [pc, #296]	; (8000e18 <HAL_RCC_OscConfig+0x274>)
 8000cf0:	4b4b      	ldr	r3, [pc, #300]	; (8000e20 <HAL_RCC_OscConfig+0x27c>)
 8000cf2:	b1da      	cbz	r2, 8000d2c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000cf8:	f7ff fb92 	bl	8000420 <HAL_GetTick>
 8000cfc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d00:	079b      	lsls	r3, r3, #30
 8000d02:	d50d      	bpl.n	8000d20 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000d04:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000d08:	4b46      	ldr	r3, [pc, #280]	; (8000e24 <HAL_RCC_OscConfig+0x280>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d10:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000d12:	bf00      	nop
  }
  while (Delay --);
 8000d14:	9b01      	ldr	r3, [sp, #4]
 8000d16:	1e5a      	subs	r2, r3, #1
 8000d18:	9201      	str	r2, [sp, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d1f9      	bne.n	8000d12 <HAL_RCC_OscConfig+0x16e>
 8000d1e:	e751      	b.n	8000bc4 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d20:	f7ff fb7e 	bl	8000420 <HAL_GetTick>
 8000d24:	1b80      	subs	r0, r0, r6
 8000d26:	2802      	cmp	r0, #2
 8000d28:	d9e9      	bls.n	8000cfe <HAL_RCC_OscConfig+0x15a>
 8000d2a:	e77d      	b.n	8000c28 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000d2c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d2e:	f7ff fb77 	bl	8000420 <HAL_GetTick>
 8000d32:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d36:	079f      	lsls	r7, r3, #30
 8000d38:	f57f af44 	bpl.w	8000bc4 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d3c:	f7ff fb70 	bl	8000420 <HAL_GetTick>
 8000d40:	1b80      	subs	r0, r0, r6
 8000d42:	2802      	cmp	r0, #2
 8000d44:	d9f6      	bls.n	8000d34 <HAL_RCC_OscConfig+0x190>
 8000d46:	e76f      	b.n	8000c28 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d48:	4c33      	ldr	r4, [pc, #204]	; (8000e18 <HAL_RCC_OscConfig+0x274>)
 8000d4a:	69e3      	ldr	r3, [r4, #28]
 8000d4c:	00d8      	lsls	r0, r3, #3
 8000d4e:	d424      	bmi.n	8000d9a <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000d50:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	69e3      	ldr	r3, [r4, #28]
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d58:	61e3      	str	r3, [r4, #28]
 8000d5a:	69e3      	ldr	r3, [r4, #28]
 8000d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d64:	4e30      	ldr	r6, [pc, #192]	; (8000e28 <HAL_RCC_OscConfig+0x284>)
 8000d66:	6833      	ldr	r3, [r6, #0]
 8000d68:	05d9      	lsls	r1, r3, #23
 8000d6a:	d518      	bpl.n	8000d9e <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d6c:	68eb      	ldr	r3, [r5, #12]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d126      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x21c>
 8000d72:	6a23      	ldr	r3, [r4, #32]
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000d7a:	f7ff fb51 	bl	8000420 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d7e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000d82:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d84:	6a23      	ldr	r3, [r4, #32]
 8000d86:	079b      	lsls	r3, r3, #30
 8000d88:	d53f      	bpl.n	8000e0a <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	f43f af1e 	beq.w	8000bcc <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d90:	69e3      	ldr	r3, [r4, #28]
 8000d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d96:	61e3      	str	r3, [r4, #28]
 8000d98:	e718      	b.n	8000bcc <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000d9a:	2700      	movs	r7, #0
 8000d9c:	e7e2      	b.n	8000d64 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d9e:	6833      	ldr	r3, [r6, #0]
 8000da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000da6:	f7ff fb3b 	bl	8000420 <HAL_GetTick>
 8000daa:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dac:	6833      	ldr	r3, [r6, #0]
 8000dae:	05da      	lsls	r2, r3, #23
 8000db0:	d4dc      	bmi.n	8000d6c <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000db2:	f7ff fb35 	bl	8000420 <HAL_GetTick>
 8000db6:	eba0 0008 	sub.w	r0, r0, r8
 8000dba:	2864      	cmp	r0, #100	; 0x64
 8000dbc:	d9f6      	bls.n	8000dac <HAL_RCC_OscConfig+0x208>
 8000dbe:	e733      	b.n	8000c28 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dc0:	b9ab      	cbnz	r3, 8000dee <HAL_RCC_OscConfig+0x24a>
 8000dc2:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dc4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dc8:	f023 0301 	bic.w	r3, r3, #1
 8000dcc:	6223      	str	r3, [r4, #32]
 8000dce:	6a23      	ldr	r3, [r4, #32]
 8000dd0:	f023 0304 	bic.w	r3, r3, #4
 8000dd4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000dd6:	f7ff fb23 	bl	8000420 <HAL_GetTick>
 8000dda:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ddc:	6a23      	ldr	r3, [r4, #32]
 8000dde:	0798      	lsls	r0, r3, #30
 8000de0:	d5d3      	bpl.n	8000d8a <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000de2:	f7ff fb1d 	bl	8000420 <HAL_GetTick>
 8000de6:	1b80      	subs	r0, r0, r6
 8000de8:	4540      	cmp	r0, r8
 8000dea:	d9f7      	bls.n	8000ddc <HAL_RCC_OscConfig+0x238>
 8000dec:	e71c      	b.n	8000c28 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dee:	2b05      	cmp	r3, #5
 8000df0:	6a23      	ldr	r3, [r4, #32]
 8000df2:	d103      	bne.n	8000dfc <HAL_RCC_OscConfig+0x258>
 8000df4:	f043 0304 	orr.w	r3, r3, #4
 8000df8:	6223      	str	r3, [r4, #32]
 8000dfa:	e7ba      	b.n	8000d72 <HAL_RCC_OscConfig+0x1ce>
 8000dfc:	f023 0301 	bic.w	r3, r3, #1
 8000e00:	6223      	str	r3, [r4, #32]
 8000e02:	6a23      	ldr	r3, [r4, #32]
 8000e04:	f023 0304 	bic.w	r3, r3, #4
 8000e08:	e7b6      	b.n	8000d78 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e0a:	f7ff fb09 	bl	8000420 <HAL_GetTick>
 8000e0e:	eba0 0008 	sub.w	r0, r0, r8
 8000e12:	42b0      	cmp	r0, r6
 8000e14:	d9b6      	bls.n	8000d84 <HAL_RCC_OscConfig+0x1e0>
 8000e16:	e707      	b.n	8000c28 <HAL_RCC_OscConfig+0x84>
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	42420000 	.word	0x42420000
 8000e20:	42420480 	.word	0x42420480
 8000e24:	20000020 	.word	0x20000020
 8000e28:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e2c:	4b2a      	ldr	r3, [pc, #168]	; (8000ed8 <HAL_RCC_OscConfig+0x334>)
 8000e2e:	685a      	ldr	r2, [r3, #4]
 8000e30:	461c      	mov	r4, r3
 8000e32:	f002 020c 	and.w	r2, r2, #12
 8000e36:	2a08      	cmp	r2, #8
 8000e38:	d03d      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x312>
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	4e27      	ldr	r6, [pc, #156]	; (8000edc <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e3e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000e40:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e42:	d12b      	bne.n	8000e9c <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000e44:	f7ff faec 	bl	8000420 <HAL_GetTick>
 8000e48:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e4a:	6823      	ldr	r3, [r4, #0]
 8000e4c:	0199      	lsls	r1, r3, #6
 8000e4e:	d41f      	bmi.n	8000e90 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e50:	6a2b      	ldr	r3, [r5, #32]
 8000e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e56:	d105      	bne.n	8000e64 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e58:	6862      	ldr	r2, [r4, #4]
 8000e5a:	68a9      	ldr	r1, [r5, #8]
 8000e5c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000e60:	430a      	orrs	r2, r1
 8000e62:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e64:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000e66:	6862      	ldr	r2, [r4, #4]
 8000e68:	430b      	orrs	r3, r1
 8000e6a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000e72:	2301      	movs	r3, #1
 8000e74:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000e76:	f7ff fad3 	bl	8000420 <HAL_GetTick>
 8000e7a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e7c:	6823      	ldr	r3, [r4, #0]
 8000e7e:	019a      	lsls	r2, r3, #6
 8000e80:	f53f aea8 	bmi.w	8000bd4 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e84:	f7ff facc 	bl	8000420 <HAL_GetTick>
 8000e88:	1b40      	subs	r0, r0, r5
 8000e8a:	2802      	cmp	r0, #2
 8000e8c:	d9f6      	bls.n	8000e7c <HAL_RCC_OscConfig+0x2d8>
 8000e8e:	e6cb      	b.n	8000c28 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e90:	f7ff fac6 	bl	8000420 <HAL_GetTick>
 8000e94:	1bc0      	subs	r0, r0, r7
 8000e96:	2802      	cmp	r0, #2
 8000e98:	d9d7      	bls.n	8000e4a <HAL_RCC_OscConfig+0x2a6>
 8000e9a:	e6c5      	b.n	8000c28 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000e9c:	f7ff fac0 	bl	8000420 <HAL_GetTick>
 8000ea0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ea2:	6823      	ldr	r3, [r4, #0]
 8000ea4:	019b      	lsls	r3, r3, #6
 8000ea6:	f57f ae95 	bpl.w	8000bd4 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000eaa:	f7ff fab9 	bl	8000420 <HAL_GetTick>
 8000eae:	1b40      	subs	r0, r0, r5
 8000eb0:	2802      	cmp	r0, #2
 8000eb2:	d9f6      	bls.n	8000ea2 <HAL_RCC_OscConfig+0x2fe>
 8000eb4:	e6b8      	b.n	8000c28 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000eb6:	2801      	cmp	r0, #1
 8000eb8:	f43f aeb7 	beq.w	8000c2a <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8000ebc:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ebe:	6a2b      	ldr	r3, [r5, #32]
 8000ec0:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	f47f ae71 	bne.w	8000bac <HAL_RCC_OscConfig+0x8>
 8000eca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000ecc:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000ed0:	1ac0      	subs	r0, r0, r3
 8000ed2:	bf18      	it	ne
 8000ed4:	2001      	movne	r0, #1
 8000ed6:	e6a8      	b.n	8000c2a <HAL_RCC_OscConfig+0x86>
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	42420060 	.word	0x42420060

08000ee0 <HAL_RCC_GetSysClockFreq>:
{
 8000ee0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000ee2:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000ee4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000ee6:	ac02      	add	r4, sp, #8
 8000ee8:	f103 0510 	add.w	r5, r3, #16
 8000eec:	4622      	mov	r2, r4
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	6859      	ldr	r1, [r3, #4]
 8000ef2:	3308      	adds	r3, #8
 8000ef4:	c203      	stmia	r2!, {r0, r1}
 8000ef6:	42ab      	cmp	r3, r5
 8000ef8:	4614      	mov	r4, r2
 8000efa:	d1f7      	bne.n	8000eec <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000efc:	2301      	movs	r3, #1
 8000efe:	f88d 3004 	strb.w	r3, [sp, #4]
 8000f02:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000f04:	4911      	ldr	r1, [pc, #68]	; (8000f4c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f06:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000f0a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000f0c:	f003 020c 	and.w	r2, r3, #12
 8000f10:	2a08      	cmp	r2, #8
 8000f12:	d117      	bne.n	8000f44 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f14:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000f18:	a806      	add	r0, sp, #24
 8000f1a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f1c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f1e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f22:	d50c      	bpl.n	8000f3e <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f24:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f26:	480a      	ldr	r0, [pc, #40]	; (8000f50 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f28:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f2c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f2e:	aa06      	add	r2, sp, #24
 8000f30:	4413      	add	r3, r2
 8000f32:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f36:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000f3a:	b007      	add	sp, #28
 8000f3c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <HAL_RCC_GetSysClockFreq+0x74>)
 8000f40:	4350      	muls	r0, r2
 8000f42:	e7fa      	b.n	8000f3a <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000f46:	e7f8      	b.n	8000f3a <HAL_RCC_GetSysClockFreq+0x5a>
 8000f48:	080021f0 	.word	0x080021f0
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	007a1200 	.word	0x007a1200
 8000f54:	003d0900 	.word	0x003d0900

08000f58 <HAL_RCC_ClockConfig>:
{
 8000f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f5c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000f5e:	4604      	mov	r4, r0
 8000f60:	b910      	cbnz	r0, 8000f68 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000f62:	2001      	movs	r0, #1
 8000f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f68:	4a45      	ldr	r2, [pc, #276]	; (8001080 <HAL_RCC_ClockConfig+0x128>)
 8000f6a:	6813      	ldr	r3, [r2, #0]
 8000f6c:	f003 0307 	and.w	r3, r3, #7
 8000f70:	428b      	cmp	r3, r1
 8000f72:	d329      	bcc.n	8000fc8 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f74:	6821      	ldr	r1, [r4, #0]
 8000f76:	078e      	lsls	r6, r1, #30
 8000f78:	d431      	bmi.n	8000fde <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f7a:	07ca      	lsls	r2, r1, #31
 8000f7c:	d444      	bmi.n	8001008 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000f7e:	4a40      	ldr	r2, [pc, #256]	; (8001080 <HAL_RCC_ClockConfig+0x128>)
 8000f80:	6813      	ldr	r3, [r2, #0]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	429d      	cmp	r5, r3
 8000f88:	d367      	bcc.n	800105a <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f8a:	6822      	ldr	r2, [r4, #0]
 8000f8c:	4d3d      	ldr	r5, [pc, #244]	; (8001084 <HAL_RCC_ClockConfig+0x12c>)
 8000f8e:	f012 0f04 	tst.w	r2, #4
 8000f92:	d16e      	bne.n	8001072 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f94:	0713      	lsls	r3, r2, #28
 8000f96:	d506      	bpl.n	8000fa6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000f98:	686b      	ldr	r3, [r5, #4]
 8000f9a:	6922      	ldr	r2, [r4, #16]
 8000f9c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000fa0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000fa4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000fa6:	f7ff ff9b 	bl	8000ee0 <HAL_RCC_GetSysClockFreq>
 8000faa:	686b      	ldr	r3, [r5, #4]
 8000fac:	4a36      	ldr	r2, [pc, #216]	; (8001088 <HAL_RCC_ClockConfig+0x130>)
 8000fae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000fb2:	5cd3      	ldrb	r3, [r2, r3]
 8000fb4:	40d8      	lsrs	r0, r3
 8000fb6:	4b35      	ldr	r3, [pc, #212]	; (800108c <HAL_RCC_ClockConfig+0x134>)
 8000fb8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000fba:	4b35      	ldr	r3, [pc, #212]	; (8001090 <HAL_RCC_ClockConfig+0x138>)
 8000fbc:	6818      	ldr	r0, [r3, #0]
 8000fbe:	f7ff f9ed 	bl	800039c <HAL_InitTick>
  return HAL_OK;
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fc8:	6813      	ldr	r3, [r2, #0]
 8000fca:	f023 0307 	bic.w	r3, r3, #7
 8000fce:	430b      	orrs	r3, r1
 8000fd0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fd2:	6813      	ldr	r3, [r2, #0]
 8000fd4:	f003 0307 	and.w	r3, r3, #7
 8000fd8:	4299      	cmp	r1, r3
 8000fda:	d1c2      	bne.n	8000f62 <HAL_RCC_ClockConfig+0xa>
 8000fdc:	e7ca      	b.n	8000f74 <HAL_RCC_ClockConfig+0x1c>
 8000fde:	4b29      	ldr	r3, [pc, #164]	; (8001084 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fe0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fe4:	bf1e      	ittt	ne
 8000fe6:	685a      	ldrne	r2, [r3, #4]
 8000fe8:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000fec:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fee:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ff0:	bf42      	ittt	mi
 8000ff2:	685a      	ldrmi	r2, [r3, #4]
 8000ff4:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000ff8:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	68a0      	ldr	r0, [r4, #8]
 8000ffe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001002:	4302      	orrs	r2, r0
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	e7b8      	b.n	8000f7a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001008:	6862      	ldr	r2, [r4, #4]
 800100a:	4e1e      	ldr	r6, [pc, #120]	; (8001084 <HAL_RCC_ClockConfig+0x12c>)
 800100c:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800100e:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001010:	d11b      	bne.n	800104a <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001012:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001016:	d0a4      	beq.n	8000f62 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001018:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800101a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800101e:	f023 0303 	bic.w	r3, r3, #3
 8001022:	4313      	orrs	r3, r2
 8001024:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001026:	f7ff f9fb 	bl	8000420 <HAL_GetTick>
 800102a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800102c:	6873      	ldr	r3, [r6, #4]
 800102e:	6862      	ldr	r2, [r4, #4]
 8001030:	f003 030c 	and.w	r3, r3, #12
 8001034:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001038:	d0a1      	beq.n	8000f7e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800103a:	f7ff f9f1 	bl	8000420 <HAL_GetTick>
 800103e:	1bc0      	subs	r0, r0, r7
 8001040:	4540      	cmp	r0, r8
 8001042:	d9f3      	bls.n	800102c <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001044:	2003      	movs	r0, #3
}
 8001046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800104a:	2a02      	cmp	r2, #2
 800104c:	d102      	bne.n	8001054 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800104e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001052:	e7e0      	b.n	8001016 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001054:	f013 0f02 	tst.w	r3, #2
 8001058:	e7dd      	b.n	8001016 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800105a:	6813      	ldr	r3, [r2, #0]
 800105c:	f023 0307 	bic.w	r3, r3, #7
 8001060:	432b      	orrs	r3, r5
 8001062:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001064:	6813      	ldr	r3, [r2, #0]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	429d      	cmp	r5, r3
 800106c:	f47f af79 	bne.w	8000f62 <HAL_RCC_ClockConfig+0xa>
 8001070:	e78b      	b.n	8000f8a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001072:	686b      	ldr	r3, [r5, #4]
 8001074:	68e1      	ldr	r1, [r4, #12]
 8001076:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800107a:	430b      	orrs	r3, r1
 800107c:	606b      	str	r3, [r5, #4]
 800107e:	e789      	b.n	8000f94 <HAL_RCC_ClockConfig+0x3c>
 8001080:	40022000 	.word	0x40022000
 8001084:	40021000 	.word	0x40021000
 8001088:	0800223d 	.word	0x0800223d
 800108c:	20000020 	.word	0x20000020
 8001090:	2000001c 	.word	0x2000001c

08001094 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001096:	4a05      	ldr	r2, [pc, #20]	; (80010ac <HAL_RCC_GetPCLK1Freq+0x18>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800109e:	5cd3      	ldrb	r3, [r2, r3]
 80010a0:	4a03      	ldr	r2, [pc, #12]	; (80010b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80010a2:	6810      	ldr	r0, [r2, #0]
}
 80010a4:	40d8      	lsrs	r0, r3
 80010a6:	4770      	bx	lr
 80010a8:	40021000 	.word	0x40021000
 80010ac:	0800224d 	.word	0x0800224d
 80010b0:	20000020 	.word	0x20000020

080010b4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <HAL_RCC_GetPCLK2Freq+0x18>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80010be:	5cd3      	ldrb	r3, [r2, r3]
 80010c0:	4a03      	ldr	r2, [pc, #12]	; (80010d0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80010c2:	6810      	ldr	r0, [r2, #0]
}
 80010c4:	40d8      	lsrs	r0, r3
 80010c6:	4770      	bx	lr
 80010c8:	40021000 	.word	0x40021000
 80010cc:	0800224d 	.word	0x0800224d
 80010d0:	20000020 	.word	0x20000020

080010d4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80010d4:	6803      	ldr	r3, [r0, #0]
{
 80010d6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80010da:	07d9      	lsls	r1, r3, #31
{
 80010dc:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80010de:	d520      	bpl.n	8001122 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010e0:	4c35      	ldr	r4, [pc, #212]	; (80011b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80010e2:	69e3      	ldr	r3, [r4, #28]
 80010e4:	00da      	lsls	r2, r3, #3
 80010e6:	d432      	bmi.n	800114e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80010e8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ea:	69e3      	ldr	r3, [r4, #28]
 80010ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f0:	61e3      	str	r3, [r4, #28]
 80010f2:	69e3      	ldr	r3, [r4, #28]
 80010f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f8:	9301      	str	r3, [sp, #4]
 80010fa:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010fc:	4e2f      	ldr	r6, [pc, #188]	; (80011bc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80010fe:	6833      	ldr	r3, [r6, #0]
 8001100:	05db      	lsls	r3, r3, #23
 8001102:	d526      	bpl.n	8001152 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001104:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001106:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800110a:	d136      	bne.n	800117a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800110c:	6a23      	ldr	r3, [r4, #32]
 800110e:	686a      	ldr	r2, [r5, #4]
 8001110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001114:	4313      	orrs	r3, r2
 8001116:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001118:	b11f      	cbz	r7, 8001122 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800111a:	69e3      	ldr	r3, [r4, #28]
 800111c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001120:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001122:	6828      	ldr	r0, [r5, #0]
 8001124:	0783      	lsls	r3, r0, #30
 8001126:	d506      	bpl.n	8001136 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001128:	4a23      	ldr	r2, [pc, #140]	; (80011b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800112a:	68a9      	ldr	r1, [r5, #8]
 800112c:	6853      	ldr	r3, [r2, #4]
 800112e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001132:	430b      	orrs	r3, r1
 8001134:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001136:	f010 0010 	ands.w	r0, r0, #16
 800113a:	d01b      	beq.n	8001174 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800113c:	4a1e      	ldr	r2, [pc, #120]	; (80011b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800113e:	68e9      	ldr	r1, [r5, #12]
 8001140:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001142:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001144:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001148:	430b      	orrs	r3, r1
 800114a:	6053      	str	r3, [r2, #4]
 800114c:	e012      	b.n	8001174 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 800114e:	2700      	movs	r7, #0
 8001150:	e7d4      	b.n	80010fc <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001152:	6833      	ldr	r3, [r6, #0]
 8001154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001158:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800115a:	f7ff f961 	bl	8000420 <HAL_GetTick>
 800115e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001160:	6833      	ldr	r3, [r6, #0]
 8001162:	05d8      	lsls	r0, r3, #23
 8001164:	d4ce      	bmi.n	8001104 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001166:	f7ff f95b 	bl	8000420 <HAL_GetTick>
 800116a:	eba0 0008 	sub.w	r0, r0, r8
 800116e:	2864      	cmp	r0, #100	; 0x64
 8001170:	d9f6      	bls.n	8001160 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001172:	2003      	movs	r0, #3
}
 8001174:	b002      	add	sp, #8
 8001176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800117a:	686a      	ldr	r2, [r5, #4]
 800117c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001180:	4293      	cmp	r3, r2
 8001182:	d0c3      	beq.n	800110c <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001184:	2001      	movs	r0, #1
 8001186:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001188:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800118a:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800118c:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800118e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001192:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001194:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001196:	07d9      	lsls	r1, r3, #31
 8001198:	d5b8      	bpl.n	800110c <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800119a:	f7ff f941 	bl	8000420 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800119e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80011a2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a4:	6a23      	ldr	r3, [r4, #32]
 80011a6:	079a      	lsls	r2, r3, #30
 80011a8:	d4b0      	bmi.n	800110c <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011aa:	f7ff f939 	bl	8000420 <HAL_GetTick>
 80011ae:	1b80      	subs	r0, r0, r6
 80011b0:	4540      	cmp	r0, r8
 80011b2:	d9f7      	bls.n	80011a4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80011b4:	e7dd      	b.n	8001172 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80011b6:	bf00      	nop
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40007000 	.word	0x40007000
 80011c0:	42420440 	.word	0x42420440

080011c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80011c4:	b570      	push	{r4, r5, r6, lr}
 80011c6:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011c8:	4b35      	ldr	r3, [pc, #212]	; (80012a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 80011ca:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011cc:	ad02      	add	r5, sp, #8
 80011ce:	f103 0610 	add.w	r6, r3, #16
 80011d2:	462a      	mov	r2, r5
 80011d4:	6818      	ldr	r0, [r3, #0]
 80011d6:	6859      	ldr	r1, [r3, #4]
 80011d8:	3308      	adds	r3, #8
 80011da:	c203      	stmia	r2!, {r0, r1}
 80011dc:	42b3      	cmp	r3, r6
 80011de:	4615      	mov	r5, r2
 80011e0:	d1f7      	bne.n	80011d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011e2:	2301      	movs	r3, #1
 80011e4:	f88d 3004 	strb.w	r3, [sp, #4]
 80011e8:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80011ea:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011ec:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 80011f0:	d047      	beq.n	8001282 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 80011f2:	2c10      	cmp	r4, #16
 80011f4:	d017      	beq.n	8001226 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80011f6:	2c01      	cmp	r4, #1
 80011f8:	d14f      	bne.n	800129a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80011fa:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 80011fe:	4a29      	ldr	r2, [pc, #164]	; (80012a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8001200:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001202:	4019      	ands	r1, r3
 8001204:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8001208:	d044      	beq.n	8001294 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800120a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800120e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001212:	d12d      	bne.n	8001270 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 8001214:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001218:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 800121a:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 800121e:	bf08      	it	eq
 8001220:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8001222:	b006      	add	sp, #24
 8001224:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 8001226:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8001228:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800122a:	6818      	ldr	r0, [r3, #0]
 800122c:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8001230:	d0f7      	beq.n	8001222 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001232:	f3c1 4283 	ubfx	r2, r1, #18, #4
 8001236:	a806      	add	r0, sp, #24
 8001238:	4402      	add	r2, r0
 800123a:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800123e:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001240:	bf41      	itttt	mi
 8001242:	685a      	ldrmi	r2, [r3, #4]
 8001244:	a906      	addmi	r1, sp, #24
 8001246:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 800124a:	1852      	addmi	r2, r2, r1
 800124c:	bf44      	itt	mi
 800124e:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001252:	4a15      	ldrmi	r2, [pc, #84]	; (80012a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001254:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001256:	bf4c      	ite	mi
 8001258:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800125c:	4a13      	ldrpl	r2, [pc, #76]	; (80012ac <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800125e:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001260:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001264:	d4dd      	bmi.n	8001222 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 8001266:	2303      	movs	r3, #3
 8001268:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800126a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800126e:	e7d8      	b.n	8001222 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001270:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001274:	d111      	bne.n	800129a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8001276:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8001278:	f24f 4024 	movw	r0, #62500	; 0xf424
 800127c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001280:	e7cd      	b.n	800121e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001282:	f7ff ff17 	bl	80010b4 <HAL_RCC_GetPCLK2Freq>
 8001286:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800128e:	3301      	adds	r3, #1
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	e7ea      	b.n	800126a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 8001294:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001298:	e7c3      	b.n	8001222 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
  uint32_t temp_reg = 0U, frequency = 0U;
 800129a:	2000      	movs	r0, #0
 800129c:	e7c1      	b.n	8001222 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 800129e:	bf00      	nop
 80012a0:	08002200 	.word	0x08002200
 80012a4:	40021000 	.word	0x40021000
 80012a8:	007a1200 	.word	0x007a1200
 80012ac:	003d0900 	.word	0x003d0900

080012b0 <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80012b0:	6803      	ldr	r3, [r0, #0]
{
 80012b2:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80012b4:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80012b6:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80012b8:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 80012ba:	b295      	uxth	r5, r2
 80012bc:	b28c      	uxth	r4, r1
 80012be:	42a5      	cmp	r5, r4
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80012c0:	bf1d      	ittte	ne
 80012c2:	69d8      	ldrne	r0, [r3, #28]
 80012c4:	b280      	uxthne	r0, r0
 80012c6:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80012ca:	b280      	uxtheq	r0, r0
 80012cc:	bf08      	it	eq
 80012ce:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 80012d2:	bd30      	pop	{r4, r5, pc}

080012d4 <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80012d4:	6803      	ldr	r3, [r0, #0]
 80012d6:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 80012da:	b29b      	uxth	r3, r3
}
 80012dc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80012e0:	4770      	bx	lr

080012e2 <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 80012e2:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80012e4:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 80012e6:	f000 000f 	and.w	r0, r0, #15
 80012ea:	fb02 0003 	mla	r0, r2, r3, r0
}
 80012ee:	b2c0      	uxtb	r0, r0
 80012f0:	4770      	bx	lr

080012f2 <RTC_WeekDayNum>:
{
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;

  if (nMonth < 3U)
 80012f2:	2902      	cmp	r1, #2
{
 80012f4:	b570      	push	{r4, r5, r6, lr}
 80012f6:	f04f 0317 	mov.w	r3, #23
  year = 2000U + nYear;
 80012fa:	f500 65fa 	add.w	r5, r0, #2000	; 0x7d0
 80012fe:	f04f 0609 	mov.w	r6, #9
  if (nMonth < 3U)
 8001302:	d81a      	bhi.n	800133a <RTC_WeekDayNum+0x48>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8001304:	434b      	muls	r3, r1
 8001306:	f200 74cf 	addw	r4, r0, #1999	; 0x7cf
 800130a:	fbb3 f0f6 	udiv	r0, r3, r6
 800130e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001312:	fbb4 f3f3 	udiv	r3, r4, r3
 8001316:	3204      	adds	r2, #4
 8001318:	442a      	add	r2, r5
 800131a:	4410      	add	r0, r2
 800131c:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 8001320:	4418      	add	r0, r3
 8001322:	2364      	movs	r3, #100	; 0x64
 8001324:	fbb4 f4f3 	udiv	r4, r4, r3
 8001328:	1b00      	subs	r0, r0, r4
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800132a:	2307      	movs	r3, #7
 800132c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001330:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8001334:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 8001336:	b2c0      	uxtb	r0, r0
 8001338:	bd70      	pop	{r4, r5, r6, pc}
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800133a:	fb03 f001 	mul.w	r0, r3, r1
 800133e:	fbb0 f0f6 	udiv	r0, r0, r6
 8001342:	3202      	adds	r2, #2
 8001344:	442a      	add	r2, r5
 8001346:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800134a:	4410      	add	r0, r2
 800134c:	2264      	movs	r2, #100	; 0x64
 800134e:	fbb5 f3f3 	udiv	r3, r5, r3
 8001352:	fbb5 f2f2 	udiv	r2, r5, r2
 8001356:	eb00 0095 	add.w	r0, r0, r5, lsr #2
 800135a:	4418      	add	r0, r3
 800135c:	1a80      	subs	r0, r0, r2
 800135e:	e7e4      	b.n	800132a <RTC_WeekDayNum+0x38>

08001360 <RTC_EnterInitMode>:
{
 8001360:	b538      	push	{r3, r4, r5, lr}
 8001362:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8001364:	f7ff f85c 	bl	8000420 <HAL_GetTick>
 8001368:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800136a:	6823      	ldr	r3, [r4, #0]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	0692      	lsls	r2, r2, #26
 8001370:	d505      	bpl.n	800137e <RTC_EnterInitMode+0x1e>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001372:	685a      	ldr	r2, [r3, #4]
  return HAL_OK;
 8001374:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001376:	f042 0210 	orr.w	r2, r2, #16
 800137a:	605a      	str	r2, [r3, #4]
  return HAL_OK;
 800137c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800137e:	f7ff f84f 	bl	8000420 <HAL_GetTick>
 8001382:	1b40      	subs	r0, r0, r5
 8001384:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001388:	d9ef      	bls.n	800136a <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 800138a:	2003      	movs	r0, #3
}
 800138c:	bd38      	pop	{r3, r4, r5, pc}

0800138e <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800138e:	6802      	ldr	r2, [r0, #0]
{
 8001390:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001392:	6853      	ldr	r3, [r2, #4]
{
 8001394:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001396:	f023 0310 	bic.w	r3, r3, #16
 800139a:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 800139c:	f7ff f840 	bl	8000420 <HAL_GetTick>
 80013a0:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80013a2:	6823      	ldr	r3, [r4, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	069b      	lsls	r3, r3, #26
 80013a8:	d501      	bpl.n	80013ae <RTC_ExitInitMode+0x20>
  return HAL_OK;
 80013aa:	2000      	movs	r0, #0
 80013ac:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80013ae:	f7ff f837 	bl	8000420 <HAL_GetTick>
 80013b2:	1b40      	subs	r0, r0, r5
 80013b4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80013b8:	d9f3      	bls.n	80013a2 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 80013ba:	2003      	movs	r0, #3
}
 80013bc:	bd38      	pop	{r3, r4, r5, pc}

080013be <RTC_WriteTimeCounter>:
{
 80013be:	b538      	push	{r3, r4, r5, lr}
 80013c0:	4605      	mov	r5, r0
 80013c2:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80013c4:	f7ff ffcc 	bl	8001360 <RTC_EnterInitMode>
 80013c8:	b958      	cbnz	r0, 80013e2 <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80013ca:	682b      	ldr	r3, [r5, #0]
 80013cc:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80013ce:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80013d0:	619a      	str	r2, [r3, #24]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80013d2:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80013d4:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80013d6:	f7ff ffda 	bl	800138e <RTC_ExitInitMode>
    status = HAL_ERROR;
 80013da:	3000      	adds	r0, #0
 80013dc:	bf18      	it	ne
 80013de:	2001      	movne	r0, #1
 80013e0:	bd38      	pop	{r3, r4, r5, pc}
 80013e2:	2001      	movs	r0, #1
}
 80013e4:	bd38      	pop	{r3, r4, r5, pc}

080013e6 <RTC_WriteAlarmCounter>:
{
 80013e6:	b538      	push	{r3, r4, r5, lr}
 80013e8:	4605      	mov	r5, r0
 80013ea:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80013ec:	f7ff ffb8 	bl	8001360 <RTC_EnterInitMode>
 80013f0:	b958      	cbnz	r0, 800140a <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80013f2:	682b      	ldr	r3, [r5, #0]
 80013f4:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80013f6:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80013f8:	621a      	str	r2, [r3, #32]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80013fa:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80013fc:	625c      	str	r4, [r3, #36]	; 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80013fe:	f7ff ffc6 	bl	800138e <RTC_ExitInitMode>
    status = HAL_ERROR;
 8001402:	3000      	adds	r0, #0
 8001404:	bf18      	it	ne
 8001406:	2001      	movne	r0, #1
 8001408:	bd38      	pop	{r3, r4, r5, pc}
 800140a:	2001      	movs	r0, #1
}
 800140c:	bd38      	pop	{r3, r4, r5, pc}

0800140e <HAL_RTC_SetTime>:
{
 800140e:	b570      	push	{r4, r5, r6, lr}
  if ((hrtc == NULL) || (sTime == NULL))
 8001410:	4604      	mov	r4, r0
 8001412:	b1e0      	cbz	r0, 800144e <HAL_RTC_SetTime+0x40>
 8001414:	b1d9      	cbz	r1, 800144e <HAL_RTC_SetTime+0x40>
  __HAL_LOCK(hrtc);
 8001416:	7c03      	ldrb	r3, [r0, #16]
 8001418:	2602      	movs	r6, #2
 800141a:	2b01      	cmp	r3, #1
 800141c:	d046      	beq.n	80014ac <HAL_RTC_SetTime+0x9e>
 800141e:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001420:	7446      	strb	r6, [r0, #17]
  __HAL_LOCK(hrtc);
 8001422:	7403      	strb	r3, [r0, #16]
 8001424:	7808      	ldrb	r0, [r1, #0]
 8001426:	784e      	ldrb	r6, [r1, #1]
 8001428:	7889      	ldrb	r1, [r1, #2]
  if (Format == RTC_FORMAT_BIN)
 800142a:	b992      	cbnz	r2, 8001452 <HAL_RTC_SetTime+0x44>
                              ((uint32_t)sTime->Minutes * 60U) + \
 800142c:	253c      	movs	r5, #60	; 0x3c
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800142e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001432:	4375      	muls	r5, r6
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001434:	fb03 5000 	mla	r0, r3, r0, r5
 8001438:	1845      	adds	r5, r0, r1
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800143a:	4629      	mov	r1, r5
 800143c:	4620      	mov	r0, r4
 800143e:	f7ff ffbe 	bl	80013be <RTC_WriteTimeCounter>
 8001442:	4606      	mov	r6, r0
 8001444:	b1b0      	cbz	r0, 8001474 <HAL_RTC_SetTime+0x66>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001446:	2304      	movs	r3, #4
 8001448:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 800144a:	2300      	movs	r3, #0
 800144c:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 800144e:	2601      	movs	r6, #1
 8001450:	e02c      	b.n	80014ac <HAL_RTC_SetTime+0x9e>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001452:	f7ff ff46 	bl	80012e2 <RTC_Bcd2ToByte>
 8001456:	4605      	mov	r5, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001458:	4630      	mov	r0, r6
 800145a:	f7ff ff42 	bl	80012e2 <RTC_Bcd2ToByte>
 800145e:	233c      	movs	r3, #60	; 0x3c
 8001460:	4358      	muls	r0, r3
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001462:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001466:	fb03 0505 	mla	r5, r3, r5, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800146a:	4608      	mov	r0, r1
 800146c:	f7ff ff39 	bl	80012e2 <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001470:	4405      	add	r5, r0
 8001472:	e7e2      	b.n	800143a <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001474:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001476:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001478:	6853      	ldr	r3, [r2, #4]
 800147a:	f023 0305 	bic.w	r3, r3, #5
 800147e:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001480:	f7ff ff28 	bl	80012d4 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001484:	1c43      	adds	r3, r0, #1
 8001486:	d00d      	beq.n	80014a4 <HAL_RTC_SetTime+0x96>
      if (counter_alarm < counter_time)
 8001488:	4285      	cmp	r5, r0
 800148a:	d90b      	bls.n	80014a4 <HAL_RTC_SetTime+0x96>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800148c:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8001490:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8001494:	4620      	mov	r0, r4
 8001496:	f7ff ffa6 	bl	80013e6 <RTC_WriteAlarmCounter>
 800149a:	b118      	cbz	r0, 80014a4 <HAL_RTC_SetTime+0x96>
          hrtc->State = HAL_RTC_STATE_ERROR;
 800149c:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 800149e:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 80014a0:	7463      	strb	r3, [r4, #17]
 80014a2:	e7d4      	b.n	800144e <HAL_RTC_SetTime+0x40>
    hrtc->State = HAL_RTC_STATE_READY;
 80014a4:	2301      	movs	r3, #1
 80014a6:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 80014a8:	2300      	movs	r3, #0
 80014aa:	7423      	strb	r3, [r4, #16]
}
 80014ac:	4630      	mov	r0, r6
 80014ae:	bd70      	pop	{r4, r5, r6, pc}

080014b0 <HAL_RTC_SetDate>:
{
 80014b0:	b570      	push	{r4, r5, r6, lr}
 80014b2:	460d      	mov	r5, r1
  if ((hrtc == NULL) || (sDate == NULL))
 80014b4:	4604      	mov	r4, r0
 80014b6:	b358      	cbz	r0, 8001510 <HAL_RTC_SetDate+0x60>
 80014b8:	b351      	cbz	r1, 8001510 <HAL_RTC_SetDate+0x60>
  __HAL_LOCK(hrtc);
 80014ba:	7c03      	ldrb	r3, [r0, #16]
 80014bc:	2002      	movs	r0, #2
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d027      	beq.n	8001512 <HAL_RTC_SetDate+0x62>
 80014c2:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80014c4:	7460      	strb	r0, [r4, #17]
  __HAL_LOCK(hrtc);
 80014c6:	7423      	strb	r3, [r4, #16]
 80014c8:	78c8      	ldrb	r0, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 80014ca:	bb1a      	cbnz	r2, 8001514 <HAL_RTC_SetDate+0x64>
    hrtc->DateToUpdate.Year  = sDate->Year;
 80014cc:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80014ce:	784b      	ldrb	r3, [r1, #1]
 80014d0:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80014d2:	788b      	ldrb	r3, [r1, #2]
 80014d4:	73a3      	strb	r3, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80014d6:	7ba2      	ldrb	r2, [r4, #14]
 80014d8:	7b61      	ldrb	r1, [r4, #13]
 80014da:	7be0      	ldrb	r0, [r4, #15]
 80014dc:	f7ff ff09 	bl	80012f2 <RTC_WeekDayNum>
 80014e0:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80014e2:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 80014e4:	4620      	mov	r0, r4
 80014e6:	f7ff fee3 	bl	80012b0 <RTC_ReadTimeCounter>
  if (hours > 24U)
 80014ea:	4b1c      	ldr	r3, [pc, #112]	; (800155c <HAL_RTC_SetDate+0xac>)
 80014ec:	4298      	cmp	r0, r3
 80014ee:	d930      	bls.n	8001552 <HAL_RTC_SetDate+0xa2>
 80014f0:	f6a3 630f 	subw	r3, r3, #3599	; 0xe0f
 80014f4:	fbb0 f5f3 	udiv	r5, r0, r3
 80014f8:	fb03 0515 	mls	r5, r3, r5, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80014fc:	4620      	mov	r0, r4
 80014fe:	4629      	mov	r1, r5
 8001500:	f7ff ff5d 	bl	80013be <RTC_WriteTimeCounter>
 8001504:	4606      	mov	r6, r0
 8001506:	b188      	cbz	r0, 800152c <HAL_RTC_SetDate+0x7c>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001508:	2304      	movs	r3, #4
 800150a:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 800150c:	2300      	movs	r3, #0
 800150e:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 8001510:	2001      	movs	r0, #1
}
 8001512:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8001514:	f7ff fee5 	bl	80012e2 <RTC_Bcd2ToByte>
 8001518:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800151a:	7848      	ldrb	r0, [r1, #1]
 800151c:	f7ff fee1 	bl	80012e2 <RTC_Bcd2ToByte>
 8001520:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8001522:	7888      	ldrb	r0, [r1, #2]
 8001524:	f7ff fedd 	bl	80012e2 <RTC_Bcd2ToByte>
 8001528:	73a0      	strb	r0, [r4, #14]
 800152a:	e7d4      	b.n	80014d6 <HAL_RTC_SetDate+0x26>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800152c:	4620      	mov	r0, r4
 800152e:	f7ff fed1 	bl	80012d4 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001532:	1c43      	adds	r3, r0, #1
 8001534:	d00d      	beq.n	8001552 <HAL_RTC_SetDate+0xa2>
      if (counter_alarm < counter_time)
 8001536:	4285      	cmp	r5, r0
 8001538:	d90b      	bls.n	8001552 <HAL_RTC_SetDate+0xa2>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800153a:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 800153e:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8001542:	4620      	mov	r0, r4
 8001544:	f7ff ff4f 	bl	80013e6 <RTC_WriteAlarmCounter>
 8001548:	b118      	cbz	r0, 8001552 <HAL_RTC_SetDate+0xa2>
          hrtc->State = HAL_RTC_STATE_ERROR;
 800154a:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 800154c:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 800154e:	7463      	strb	r3, [r4, #17]
 8001550:	e7de      	b.n	8001510 <HAL_RTC_SetDate+0x60>
  hrtc->State = HAL_RTC_STATE_READY ;
 8001552:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8001554:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 8001556:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8001558:	7420      	strb	r0, [r4, #16]
  return HAL_OK;
 800155a:	bd70      	pop	{r4, r5, r6, pc}
 800155c:	00015f8f 	.word	0x00015f8f

08001560 <HAL_RTC_WaitForSynchro>:
{
 8001560:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 8001562:	4604      	mov	r4, r0
 8001564:	b1a8      	cbz	r0, 8001592 <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001566:	6802      	ldr	r2, [r0, #0]
 8001568:	6853      	ldr	r3, [r2, #4]
 800156a:	f023 0308 	bic.w	r3, r3, #8
 800156e:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8001570:	f7fe ff56 	bl	8000420 <HAL_GetTick>
 8001574:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001576:	6823      	ldr	r3, [r4, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	071b      	lsls	r3, r3, #28
 800157c:	d501      	bpl.n	8001582 <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 800157e:	2000      	movs	r0, #0
 8001580:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001582:	f7fe ff4d 	bl	8000420 <HAL_GetTick>
 8001586:	1b40      	subs	r0, r0, r5
 8001588:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800158c:	d9f3      	bls.n	8001576 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 800158e:	2003      	movs	r0, #3
}
 8001590:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001592:	2001      	movs	r0, #1
 8001594:	bd38      	pop	{r3, r4, r5, pc}
	...

08001598 <HAL_RTC_Init>:
{
 8001598:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 800159a:	4604      	mov	r4, r0
 800159c:	b170      	cbz	r0, 80015bc <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800159e:	7c43      	ldrb	r3, [r0, #17]
 80015a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80015a4:	b913      	cbnz	r3, 80015ac <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 80015a6:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 80015a8:	f000 fc4e 	bl	8001e48 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80015ac:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80015ae:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 80015b0:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80015b2:	f7ff ffd5 	bl	8001560 <HAL_RTC_WaitForSynchro>
 80015b6:	b118      	cbz	r0, 80015c0 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 80015b8:	2304      	movs	r3, #4
 80015ba:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 80015bc:	2001      	movs	r0, #1
}
 80015be:	bd10      	pop	{r4, pc}
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80015c0:	4620      	mov	r0, r4
 80015c2:	f7ff fecd 	bl	8001360 <RTC_EnterInitMode>
 80015c6:	2800      	cmp	r0, #0
 80015c8:	d1f6      	bne.n	80015b8 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80015ca:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80015cc:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80015ce:	6853      	ldr	r3, [r2, #4]
 80015d0:	f023 0307 	bic.w	r3, r3, #7
 80015d4:	6053      	str	r3, [r2, #4]
 80015d6:	4a17      	ldr	r2, [pc, #92]	; (8001634 <HAL_RTC_Init+0x9c>)
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80015d8:	b118      	cbz	r0, 80015e2 <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80015da:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80015dc:	f021 0101 	bic.w	r1, r1, #1
 80015e0:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80015e2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80015e4:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 80015e8:	4303      	orrs	r3, r0
 80015ea:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80015ec:	6860      	ldr	r0, [r4, #4]
 80015ee:	1c43      	adds	r3, r0, #1
 80015f0:	d105      	bne.n	80015fe <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80015f2:	2001      	movs	r0, #1
 80015f4:	f7ff fde6 	bl	80011c4 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 80015f8:	2800      	cmp	r0, #0
 80015fa:	d0dd      	beq.n	80015b8 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 80015fc:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80015fe:	6822      	ldr	r2, [r4, #0]
 8001600:	6893      	ldr	r3, [r2, #8]
 8001602:	f023 030f 	bic.w	r3, r3, #15
 8001606:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 800160a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800160c:	68d3      	ldr	r3, [r2, #12]
 800160e:	b280      	uxth	r0, r0
 8001610:	0c1b      	lsrs	r3, r3, #16
 8001612:	041b      	lsls	r3, r3, #16
 8001614:	4318      	orrs	r0, r3
 8001616:	60d0      	str	r0, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001618:	4620      	mov	r0, r4
 800161a:	f7ff feb8 	bl	800138e <RTC_ExitInitMode>
 800161e:	2301      	movs	r3, #1
 8001620:	b110      	cbz	r0, 8001628 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001622:	2204      	movs	r2, #4
 8001624:	7462      	strb	r2, [r4, #17]
 8001626:	e7c9      	b.n	80015bc <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Year = 0x00U;
 8001628:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800162a:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800162c:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 800162e:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 8001630:	bd10      	pop	{r4, pc}
 8001632:	bf00      	nop
 8001634:	40006c00 	.word	0x40006c00

08001638 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001638:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800163a:	4604      	mov	r4, r0
 800163c:	2800      	cmp	r0, #0
 800163e:	d034      	beq.n	80016aa <HAL_SPI_Init+0x72>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001640:	2300      	movs	r3, #0
 8001642:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001644:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001648:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800164c:	b91b      	cbnz	r3, 8001656 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800164e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001652:	f000 fc39 	bl	8001ec8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001656:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001658:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800165a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800165e:	6813      	ldr	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001660:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001666:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001668:	6863      	ldr	r3, [r4, #4]
 800166a:	69a1      	ldr	r1, [r4, #24]
 800166c:	4303      	orrs	r3, r0
 800166e:	68e0      	ldr	r0, [r4, #12]
 8001670:	4303      	orrs	r3, r0
 8001672:	6920      	ldr	r0, [r4, #16]
 8001674:	4303      	orrs	r3, r0
 8001676:	6960      	ldr	r0, [r4, #20]
 8001678:	4303      	orrs	r3, r0
 800167a:	69e0      	ldr	r0, [r4, #28]
 800167c:	4303      	orrs	r3, r0
 800167e:	6a20      	ldr	r0, [r4, #32]
 8001680:	4303      	orrs	r3, r0
 8001682:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001684:	4303      	orrs	r3, r0
 8001686:	f401 7000 	and.w	r0, r1, #512	; 0x200
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800168a:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800168c:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800168e:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001692:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001694:	6051      	str	r1, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001696:	69d3      	ldr	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001698:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800169a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800169e:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80016a0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016a2:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80016a4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 80016a8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80016aa:	2001      	movs	r0, #1
}
 80016ac:	bd10      	pop	{r4, pc}
	...

080016b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80016b0:	b538      	push	{r3, r4, r5, lr}
 80016b2:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016b4:	6803      	ldr	r3, [r0, #0]
 80016b6:	68c1      	ldr	r1, [r0, #12]
 80016b8:	691a      	ldr	r2, [r3, #16]
 80016ba:	2419      	movs	r4, #25
 80016bc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80016c0:	430a      	orrs	r2, r1
 80016c2:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016c4:	6882      	ldr	r2, [r0, #8]
 80016c6:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80016c8:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016ca:	4302      	orrs	r2, r0
 80016cc:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 80016ce:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80016d2:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016d6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80016d8:	430a      	orrs	r2, r1
 80016da:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80016dc:	695a      	ldr	r2, [r3, #20]
 80016de:	69a9      	ldr	r1, [r5, #24]
 80016e0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80016e4:	430a      	orrs	r2, r1
 80016e6:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80016e8:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <UART_SetConfig+0x70>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d114      	bne.n	8001718 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80016ee:	f7ff fce1 	bl	80010b4 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80016f2:	4360      	muls	r0, r4
 80016f4:	686c      	ldr	r4, [r5, #4]
 80016f6:	2264      	movs	r2, #100	; 0x64
 80016f8:	00a4      	lsls	r4, r4, #2
 80016fa:	fbb0 f0f4 	udiv	r0, r0, r4
 80016fe:	fbb0 f4f2 	udiv	r4, r0, r2
 8001702:	fb02 0314 	mls	r3, r2, r4, r0
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	3332      	adds	r3, #50	; 0x32
 800170a:	fbb3 f3f2 	udiv	r3, r3, r2
 800170e:	6829      	ldr	r1, [r5, #0]
 8001710:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8001714:	608b      	str	r3, [r1, #8]
 8001716:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8001718:	f7ff fcbc 	bl	8001094 <HAL_RCC_GetPCLK1Freq>
 800171c:	e7e9      	b.n	80016f2 <UART_SetConfig+0x42>
 800171e:	bf00      	nop
 8001720:	40013800 	.word	0x40013800

08001724 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001726:	4604      	mov	r4, r0
 8001728:	460e      	mov	r6, r1
 800172a:	4617      	mov	r7, r2
 800172c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800172e:	6821      	ldr	r1, [r4, #0]
 8001730:	680b      	ldr	r3, [r1, #0]
 8001732:	ea36 0303 	bics.w	r3, r6, r3
 8001736:	d101      	bne.n	800173c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001738:	2000      	movs	r0, #0
}
 800173a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 800173c:	1c6b      	adds	r3, r5, #1
 800173e:	d0f7      	beq.n	8001730 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001740:	b995      	cbnz	r5, 8001768 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001742:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001744:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001746:	68da      	ldr	r2, [r3, #12]
 8001748:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800174c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800174e:	695a      	ldr	r2, [r3, #20]
 8001750:	f022 0201 	bic.w	r2, r2, #1
 8001754:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001756:	2320      	movs	r3, #32
 8001758:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800175c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001760:	2300      	movs	r3, #0
 8001762:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001768:	f7fe fe5a 	bl	8000420 <HAL_GetTick>
 800176c:	1bc0      	subs	r0, r0, r7
 800176e:	4285      	cmp	r5, r0
 8001770:	d2dd      	bcs.n	800172e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001772:	e7e6      	b.n	8001742 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001774 <HAL_UART_Init>:
{
 8001774:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001776:	4604      	mov	r4, r0
 8001778:	b340      	cbz	r0, 80017cc <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800177a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800177e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001782:	b91b      	cbnz	r3, 800178c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001784:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001788:	f000 fc68 	bl	800205c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800178c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800178e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001790:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001794:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001796:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001798:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800179c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800179e:	f7ff ff87 	bl	80016b0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017a2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017a4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017a6:	691a      	ldr	r2, [r3, #16]
 80017a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80017ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017ae:	695a      	ldr	r2, [r3, #20]
 80017b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80017b4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017bc:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80017be:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017c0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80017c2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80017c6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80017ca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80017cc:	2001      	movs	r0, #1
}
 80017ce:	bd10      	pop	{r4, pc}

080017d0 <HAL_UART_Transmit>:
{
 80017d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017d4:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80017d6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80017da:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80017dc:	2b20      	cmp	r3, #32
{
 80017de:	460d      	mov	r5, r1
 80017e0:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80017e2:	d14e      	bne.n	8001882 <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 80017e4:	2900      	cmp	r1, #0
 80017e6:	d049      	beq.n	800187c <HAL_UART_Transmit+0xac>
 80017e8:	2a00      	cmp	r2, #0
 80017ea:	d047      	beq.n	800187c <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80017ec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d046      	beq.n	8001882 <HAL_UART_Transmit+0xb2>
 80017f4:	2301      	movs	r3, #1
 80017f6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80017fe:	2321      	movs	r3, #33	; 0x21
 8001800:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001804:	f7fe fe0c 	bl	8000420 <HAL_GetTick>
 8001808:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 800180a:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800180e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001812:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001814:	b29b      	uxth	r3, r3
 8001816:	b96b      	cbnz	r3, 8001834 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001818:	463b      	mov	r3, r7
 800181a:	4632      	mov	r2, r6
 800181c:	2140      	movs	r1, #64	; 0x40
 800181e:	4620      	mov	r0, r4
 8001820:	f7ff ff80 	bl	8001724 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001824:	b9a8      	cbnz	r0, 8001852 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8001826:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001828:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 800182c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001834:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001836:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8001838:	3b01      	subs	r3, #1
 800183a:	b29b      	uxth	r3, r3
 800183c:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800183e:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001840:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001846:	4620      	mov	r0, r4
 8001848:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800184a:	d10e      	bne.n	800186a <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800184c:	f7ff ff6a 	bl	8001724 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001850:	b110      	cbz	r0, 8001858 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8001852:	2003      	movs	r0, #3
 8001854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001858:	882b      	ldrh	r3, [r5, #0]
 800185a:	6822      	ldr	r2, [r4, #0]
 800185c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001860:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001862:	6923      	ldr	r3, [r4, #16]
 8001864:	b943      	cbnz	r3, 8001878 <HAL_UART_Transmit+0xa8>
          pData += 2U;
 8001866:	3502      	adds	r5, #2
 8001868:	e7d3      	b.n	8001812 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800186a:	f7ff ff5b 	bl	8001724 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800186e:	2800      	cmp	r0, #0
 8001870:	d1ef      	bne.n	8001852 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001872:	6823      	ldr	r3, [r4, #0]
 8001874:	782a      	ldrb	r2, [r5, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	3501      	adds	r5, #1
 800187a:	e7ca      	b.n	8001812 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800187c:	2001      	movs	r0, #1
 800187e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001882:	2002      	movs	r0, #2
}
 8001884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001888 <MX_ADC1_Init>:
{
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001888:	4811      	ldr	r0, [pc, #68]	; (80018d0 <MX_ADC1_Init+0x48>)
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <MX_ADC1_Init+0x4c>)
{
 800188c:	b530      	push	{r4, r5, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 800188e:	2400      	movs	r4, #0
  hadc1.Instance = ADC1;
 8001890:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8001892:	2501      	movs	r5, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001894:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
{
 8001898:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 800189a:	9401      	str	r4, [sp, #4]
 800189c:	9402      	str	r4, [sp, #8]
 800189e:	9403      	str	r4, [sp, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018a0:	6084      	str	r4, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018a2:	7304      	strb	r4, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018a4:	7504      	strb	r4, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018a6:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018a8:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 80018aa:	6105      	str	r5, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018ac:	f7fe fe76 	bl	800059c <HAL_ADC_Init>
 80018b0:	b108      	cbz	r0, 80018b6 <MX_ADC1_Init+0x2e>
  {
    Error_Handler();
 80018b2:	f000 fa8f 	bl	8001dd4 <Error_Handler>
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018b6:	a901      	add	r1, sp, #4
 80018b8:	4805      	ldr	r0, [pc, #20]	; (80018d0 <MX_ADC1_Init+0x48>)
  sConfig.Channel = ADC_CHANNEL_0;
 80018ba:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018bc:	9502      	str	r5, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018be:	9403      	str	r4, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018c0:	f7fe fdc6 	bl	8000450 <HAL_ADC_ConfigChannel>
 80018c4:	b108      	cbz	r0, 80018ca <MX_ADC1_Init+0x42>
  {
    Error_Handler();
 80018c6:	f000 fa85 	bl	8001dd4 <Error_Handler>
  }

}
 80018ca:	b005      	add	sp, #20
 80018cc:	bd30      	pop	{r4, r5, pc}
 80018ce:	bf00      	nop
 80018d0:	20000080 	.word	0x20000080
 80018d4:	40012400 	.word	0x40012400

080018d8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80018d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config 
  */
  hadc2.Instance = ADC2;
 80018da:	4811      	ldr	r0, [pc, #68]	; (8001920 <MX_ADC2_Init+0x48>)
 80018dc:	4a11      	ldr	r2, [pc, #68]	; (8001924 <MX_ADC2_Init+0x4c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80018de:	2300      	movs	r3, #0
  hadc2.Instance = ADC2;
 80018e0:	6002      	str	r2, [r0, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
 80018e2:	2401      	movs	r4, #1
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018e4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 80018e8:	9301      	str	r3, [sp, #4]
 80018ea:	9302      	str	r3, [sp, #8]
 80018ec:	9303      	str	r3, [sp, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018ee:	6083      	str	r3, [r0, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80018f0:	7303      	strb	r3, [r0, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80018f2:	7503      	strb	r3, [r0, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018f4:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018f6:	6043      	str	r3, [r0, #4]
  hadc2.Init.NbrOfConversion = 1;
 80018f8:	6104      	str	r4, [r0, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80018fa:	f7fe fe4f 	bl	800059c <HAL_ADC_Init>
 80018fe:	b108      	cbz	r0, 8001904 <MX_ADC2_Init+0x2c>
  {
    Error_Handler();
 8001900:	f000 fa68 	bl	8001dd4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001904:	2307      	movs	r3, #7
 8001906:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001908:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800190a:	a901      	add	r1, sp, #4
 800190c:	4804      	ldr	r0, [pc, #16]	; (8001920 <MX_ADC2_Init+0x48>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800190e:	9402      	str	r4, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001910:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001912:	f7fe fd9d 	bl	8000450 <HAL_ADC_ConfigChannel>
 8001916:	b108      	cbz	r0, 800191c <MX_ADC2_Init+0x44>
  {
    Error_Handler();
 8001918:	f000 fa5c 	bl	8001dd4 <Error_Handler>
  }

}
 800191c:	b004      	add	sp, #16
 800191e:	bd10      	pop	{r4, pc}
 8001920:	20000050 	.word	0x20000050
 8001924:	40012800 	.word	0x40012800

08001928 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001928:	b510      	push	{r4, lr}
 800192a:	4604      	mov	r4, r0
 800192c:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192e:	2210      	movs	r2, #16
 8001930:	2100      	movs	r1, #0
 8001932:	a806      	add	r0, sp, #24
 8001934:	f000 fc48 	bl	80021c8 <memset>
  if(adcHandle->Instance==ADC1)
 8001938:	6823      	ldr	r3, [r4, #0]
 800193a:	4a26      	ldr	r2, [pc, #152]	; (80019d4 <HAL_ADC_MspInit+0xac>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d12b      	bne.n	8001998 <HAL_ADC_MspInit+0x70>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001940:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <HAL_ADC_MspInit+0xb0>)
    PA0-WKUP     ------> ADC1_IN0
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001942:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001944:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001946:	a906      	add	r1, sp, #24
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800194c:	619a      	str	r2, [r3, #24]
 800194e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001950:	4822      	ldr	r0, [pc, #136]	; (80019dc <HAL_ADC_MspInit+0xb4>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001952:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001956:	9201      	str	r2, [sp, #4]
 8001958:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	699a      	ldr	r2, [r3, #24]
 800195c:	f042 0204 	orr.w	r2, r2, #4
 8001960:	619a      	str	r2, [r3, #24]
 8001962:	699a      	ldr	r2, [r3, #24]
 8001964:	f002 0204 	and.w	r2, r2, #4
 8001968:	9202      	str	r2, [sp, #8]
 800196a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800196c:	699a      	ldr	r2, [r3, #24]
 800196e:	f042 0208 	orr.w	r2, r2, #8
 8001972:	619a      	str	r2, [r3, #24]
 8001974:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001976:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	9303      	str	r3, [sp, #12]
 800197e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001980:	2301      	movs	r3, #1
 8001982:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f7fe ff70 	bl	8000868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001988:	4815      	ldr	r0, [pc, #84]	; (80019e0 <HAL_ADC_MspInit+0xb8>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800198a:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800198c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198e:	a906      	add	r1, sp, #24
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001990:	f7fe ff6a 	bl	8000868 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001994:	b00a      	add	sp, #40	; 0x28
 8001996:	bd10      	pop	{r4, pc}
  else if(adcHandle->Instance==ADC2)
 8001998:	4a12      	ldr	r2, [pc, #72]	; (80019e4 <HAL_ADC_MspInit+0xbc>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d1fa      	bne.n	8001994 <HAL_ADC_MspInit+0x6c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <HAL_ADC_MspInit+0xb0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a0:	a906      	add	r1, sp, #24
    __HAL_RCC_ADC2_CLK_ENABLE();
 80019a2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a4:	480d      	ldr	r0, [pc, #52]	; (80019dc <HAL_ADC_MspInit+0xb4>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 80019a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019aa:	619a      	str	r2, [r3, #24]
 80019ac:	699a      	ldr	r2, [r3, #24]
 80019ae:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80019b2:	9204      	str	r2, [sp, #16]
 80019b4:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	699a      	ldr	r2, [r3, #24]
 80019b8:	f042 0204 	orr.w	r2, r2, #4
 80019bc:	619a      	str	r2, [r3, #24]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	9305      	str	r3, [sp, #20]
 80019c6:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019c8:	23c0      	movs	r3, #192	; 0xc0
 80019ca:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019cc:	2303      	movs	r3, #3
 80019ce:	9307      	str	r3, [sp, #28]
 80019d0:	e7de      	b.n	8001990 <HAL_ADC_MspInit+0x68>
 80019d2:	bf00      	nop
 80019d4:	40012400 	.word	0x40012400
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40010800 	.word	0x40010800
 80019e0:	40010c00 	.word	0x40010c00
 80019e4:	40012800 	.word	0x40012800

080019e8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80019e8:	b508      	push	{r3, lr}

  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 16;
 80019ea:	f04f 0e10 	mov.w	lr, #16
  hcan.Instance = CAN1;
 80019ee:	480b      	ldr	r0, [pc, #44]	; (8001a1c <MX_CAN_Init+0x34>)
  hcan.Init.Prescaler = 16;
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <MX_CAN_Init+0x38>)
 80019f2:	e880 4008 	stmia.w	r0, {r3, lr}
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80019fa:	60c3      	str	r3, [r0, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80019fc:	6103      	str	r3, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80019fe:	6143      	str	r3, [r0, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001a00:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001a02:	7643      	strb	r3, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001a04:	7683      	strb	r3, [r0, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001a06:	76c3      	strb	r3, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001a08:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001a0a:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001a0c:	f7fe fe46 	bl	800069c <HAL_CAN_Init>
 8001a10:	b118      	cbz	r0, 8001a1a <MX_CAN_Init+0x32>
  {
    Error_Handler();
  }

}
 8001a12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001a16:	f000 b9dd 	b.w	8001dd4 <Error_Handler>
 8001a1a:	bd08      	pop	{r3, pc}
 8001a1c:	200000b0 	.word	0x200000b0
 8001a20:	40006400 	.word	0x40006400

08001a24 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001a24:	b510      	push	{r4, lr}
 8001a26:	4604      	mov	r4, r0
 8001a28:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2a:	2210      	movs	r2, #16
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	a802      	add	r0, sp, #8
 8001a30:	f000 fbca 	bl	80021c8 <memset>
  if(canHandle->Instance==CAN1)
 8001a34:	6822      	ldr	r2, [r4, #0]
 8001a36:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <HAL_CAN_MspInit+0x68>)
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d125      	bne.n	8001a88 <HAL_CAN_MspInit+0x64>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a3c:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8001a40:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a42:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a44:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001a48:	61da      	str	r2, [r3, #28]
 8001a4a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4c:	4810      	ldr	r0, [pc, #64]	; (8001a90 <HAL_CAN_MspInit+0x6c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a4e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001a52:	9200      	str	r2, [sp, #0]
 8001a54:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	699a      	ldr	r2, [r3, #24]
 8001a58:	f042 0204 	orr.w	r2, r2, #4
 8001a5c:	619a      	str	r2, [r3, #24]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	9301      	str	r3, [sp, #4]
 8001a66:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a6c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6e:	f7fe fefb 	bl	8000868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a76:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a7c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7e:	a902      	add	r1, sp, #8
 8001a80:	4803      	ldr	r0, [pc, #12]	; (8001a90 <HAL_CAN_MspInit+0x6c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a82:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a84:	f7fe fef0 	bl	8000868 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001a88:	b006      	add	sp, #24
 8001a8a:	bd10      	pop	{r4, pc}
 8001a8c:	40006400 	.word	0x40006400
 8001a90:	40010800 	.word	0x40010800

08001a94 <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	2210      	movs	r2, #16
{
 8001a96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a9a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	eb0d 0002 	add.w	r0, sp, r2
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	f000 fb91 	bl	80021c8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa6:	4b42      	ldr	r3, [pc, #264]	; (8001bb0 <MX_GPIO_Init+0x11c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001aa8:	4d42      	ldr	r5, [pc, #264]	; (8001bb4 <MX_GPIO_Init+0x120>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aaa:	699a      	ldr	r2, [r3, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001aac:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8001bc0 <MX_GPIO_Init+0x12c>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab0:	f042 0210 	orr.w	r2, r2, #16
 8001ab4:	619a      	str	r2, [r3, #24]
 8001ab6:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001ab8:	4e3f      	ldr	r6, [pc, #252]	; (8001bb8 <MX_GPIO_Init+0x124>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aba:	f002 0210 	and.w	r2, r2, #16
 8001abe:	9200      	str	r2, [sp, #0]
 8001ac0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ac2:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001ac4:	4628      	mov	r0, r5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ac6:	f042 0220 	orr.w	r2, r2, #32
 8001aca:	619a      	str	r2, [r3, #24]
 8001acc:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001ace:	21ff      	movs	r1, #255	; 0xff
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad0:	f002 0220 	and.w	r2, r2, #32
 8001ad4:	9201      	str	r2, [sp, #4]
 8001ad6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad8:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001adc:	f042 0204 	orr.w	r2, r2, #4
 8001ae0:	619a      	str	r2, [r3, #24]
 8001ae2:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae4:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae8:	f002 0204 	and.w	r2, r2, #4
 8001aec:	9202      	str	r2, [sp, #8]
 8001aee:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2702      	movs	r7, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af4:	f042 0208 	orr.w	r2, r2, #8
 8001af8:	619a      	str	r2, [r3, #24]
 8001afa:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001afc:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	9303      	str	r3, [sp, #12]
 8001b04:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001b06:	f7fe ff91 	bl	8000a2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001b0a:	4648      	mov	r0, r9
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001b12:	f7fe ff8b 	bl	8000a2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001b16:	2200      	movs	r2, #0
 8001b18:	4630      	mov	r0, r6
 8001b1a:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8001b1e:	f7fe ff85 	bl	8000a2c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8001b22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b26:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b28:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <MX_GPIO_Init+0x128>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b2a:	a904      	add	r1, sp, #16
 8001b2c:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b2e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b32:	f7fe fe99 	bl	8000868 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001b36:	23ff      	movs	r3, #255	; 0xff
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b38:	a904      	add	r1, sp, #16
 8001b3a:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001b3c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3e:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b46:	f7fe fe8f 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8001b4a:	f44f 7348 	mov.w	r3, #800	; 0x320
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4e:	a904      	add	r1, sp, #16
 8001b50:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8001b52:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b54:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5c:	f7fe fe84 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001b60:	f44f 638e 	mov.w	r3, #1136	; 0x470
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b64:	a904      	add	r1, sp, #16
 8001b66:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001b68:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6a:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b72:	f7fe fe79 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7a:	a904      	add	r1, sp, #16
 8001b7c:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b7e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b80:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b84:	f7fe fe70 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b88:	f44f 7340 	mov.w	r3, #768	; 0x300
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b8c:	a904      	add	r1, sp, #16
 8001b8e:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b90:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b92:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b96:	f7fe fe67 	bl	8000868 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b9a:	4622      	mov	r2, r4
 8001b9c:	4621      	mov	r1, r4
 8001b9e:	2028      	movs	r0, #40	; 0x28
 8001ba0:	f7fe fe0a 	bl	80007b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ba4:	2028      	movs	r0, #40	; 0x28
 8001ba6:	f7fe fe3b 	bl	8000820 <HAL_NVIC_EnableIRQ>

}
 8001baa:	b009      	add	sp, #36	; 0x24
 8001bac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40011000 	.word	0x40011000
 8001bb8:	40010c00 	.word	0x40010c00
 8001bbc:	10110000 	.word	0x10110000
 8001bc0:	40010800 	.word	0x40010800

08001bc4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001bc4:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8001bc6:	480c      	ldr	r0, [pc, #48]	; (8001bf8 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 100000;
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <MX_I2C1_Init+0x38>)
 8001bca:	f8df e034 	ldr.w	lr, [pc, #52]	; 8001c00 <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8001bd2:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bd6:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bd8:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bda:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bdc:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bde:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001be0:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001be2:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001be4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001be6:	f7fe ff33 	bl	8000a50 <HAL_I2C_Init>
 8001bea:	b118      	cbz	r0, 8001bf4 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 8001bec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001bf0:	f000 b8f0 	b.w	8001dd4 <Error_Handler>
 8001bf4:	bd08      	pop	{r3, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200000d8 	.word	0x200000d8
 8001bfc:	40005400 	.word	0x40005400
 8001c00:	000186a0 	.word	0x000186a0

08001c04 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c04:	b510      	push	{r4, lr}
 8001c06:	4604      	mov	r4, r0
 8001c08:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0a:	2210      	movs	r2, #16
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	a802      	add	r0, sp, #8
 8001c10:	f000 fada 	bl	80021c8 <memset>
  if(i2cHandle->Instance==I2C1)
 8001c14:	6822      	ldr	r2, [r4, #0]
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <HAL_I2C_MspInit+0x68>)
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d124      	bne.n	8001c66 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1c:	4c14      	ldr	r4, [pc, #80]	; (8001c70 <HAL_I2C_MspInit+0x6c>)
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c20:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c22:	4814      	ldr	r0, [pc, #80]	; (8001c74 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c24:	f043 0308 	orr.w	r3, r3, #8
 8001c28:	61a3      	str	r3, [r4, #24]
 8001c2a:	69a3      	ldr	r3, [r4, #24]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c38:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c3a:	2312      	movs	r3, #18
 8001c3c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c42:	f7fe fe11 	bl	8000868 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001c46:	4a0c      	ldr	r2, [pc, #48]	; (8001c78 <HAL_I2C_MspInit+0x74>)
 8001c48:	6853      	ldr	r3, [r2, #4]
 8001c4a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c4e:	f043 0302 	orr.w	r3, r3, #2
 8001c52:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c54:	69e3      	ldr	r3, [r4, #28]
 8001c56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c5a:	61e3      	str	r3, [r4, #28]
 8001c5c:	69e3      	ldr	r3, [r4, #28]
 8001c5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c66:	b006      	add	sp, #24
 8001c68:	bd10      	pop	{r4, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40005400 	.word	0x40005400
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40010c00 	.word	0x40010c00
 8001c78:	40010000 	.word	0x40010000

08001c7c <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c7c:	2228      	movs	r2, #40	; 0x28
{
 8001c7e:	b510      	push	{r4, lr}
 8001c80:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c82:	eb0d 0002 	add.w	r0, sp, r2
 8001c86:	2100      	movs	r1, #0
 8001c88:	f000 fa9e 	bl	80021c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c8c:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c8e:	2410      	movs	r4, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c90:	eb0d 0002 	add.w	r0, sp, r2
 8001c94:	2100      	movs	r1, #0
 8001c96:	f000 fa97 	bl	80021c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c9a:	4622      	mov	r2, r4
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	a801      	add	r0, sp, #4
 8001ca0:	f000 fa92 	bl	80021c8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001ca4:	2306      	movs	r3, #6
 8001ca6:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001ca8:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001caa:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001cac:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cae:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cb0:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001cb2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cb6:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cb8:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001cba:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cbc:	f7fe ff72 	bl	8000ba4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cc0:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cc2:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cc4:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cc6:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ccc:	4621      	mov	r1, r4
 8001cce:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cd0:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cd2:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cd4:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cd6:	f7ff f93f 	bl	8000f58 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	9301      	str	r3, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001cde:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ce2:	a801      	add	r0, sp, #4
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001ce4:	9302      	str	r3, [sp, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001ce6:	9403      	str	r4, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ce8:	f7ff f9f4 	bl	80010d4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001cec:	b014      	add	sp, #80	; 0x50
 8001cee:	bd10      	pop	{r4, pc}

08001cf0 <main>:
{
 8001cf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HAL_Init();
 8001cf2:	f7fe fb77 	bl	80003e4 <HAL_Init>
  SystemClock_Config();
 8001cf6:	f7ff ffc1 	bl	8001c7c <SystemClock_Config>
  MX_GPIO_Init();
 8001cfa:	f7ff fecb 	bl	8001a94 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001cfe:	f000 f975 	bl	8001fec <MX_USART2_UART_Init>
  MX_RTC_Init();
 8001d02:	f000 f869 	bl	8001dd8 <MX_RTC_Init>
  MX_ADC1_Init();
 8001d06:	f7ff fdbf 	bl	8001888 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001d0a:	f7ff fde5 	bl	80018d8 <MX_ADC2_Init>
  MX_CAN_Init();
 8001d0e:	f7ff fe6b 	bl	80019e8 <MX_CAN_Init>
  MX_I2C1_Init();
 8001d12:	f7ff ff57 	bl	8001bc4 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001d16:	f000 f8b5 	bl	8001e84 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8001d1a:	f000 f983 	bl	8002024 <MX_USART3_UART_Init>
  lcd_Init(16, 2);
 8001d1e:	2102      	movs	r1, #2
 8001d20:	2010      	movs	r0, #16
 8001d22:	f7fe facb 	bl	80002bc <lcd_Init>
  lcd_string("Hello World!");
 8001d26:	4826      	ldr	r0, [pc, #152]	; (8001dc0 <main+0xd0>)
 8001d28:	f7fe fb24 	bl	8000374 <lcd_string>
  lcd_setCurStr(0, 1, "STM32 CLCD TEST");
 8001d2c:	4a25      	ldr	r2, [pc, #148]	; (8001dc4 <main+0xd4>)
 8001d2e:	2101      	movs	r1, #1
 8001d30:	2000      	movs	r0, #0
 8001d32:	f7fe fb29 	bl	8000388 <lcd_setCurStr>
  HAL_UART_Init(&huart2);
 8001d36:	4824      	ldr	r0, [pc, #144]	; (8001dc8 <main+0xd8>)
 8001d38:	f7ff fd1c 	bl	8001774 <HAL_UART_Init>
 8001d3c:	466d      	mov	r5, sp
  char mystr1[] = "STM32 world!!\n\r";
 8001d3e:	466a      	mov	r2, sp
 8001d40:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <main+0xdc>)
 8001d42:	f103 0610 	add.w	r6, r3, #16
 8001d46:	4614      	mov	r4, r2
 8001d48:	6818      	ldr	r0, [r3, #0]
 8001d4a:	6859      	ldr	r1, [r3, #4]
 8001d4c:	3308      	adds	r3, #8
 8001d4e:	c403      	stmia	r4!, {r0, r1}
 8001d50:	42b3      	cmp	r3, r6
 8001d52:	4622      	mov	r2, r4
 8001d54:	d1f7      	bne.n	8001d46 <main+0x56>
  HAL_GPIO_WritePin(BL_GPIO_Port,BL_Pin,1);
 8001d56:	2201      	movs	r2, #1
 8001d58:	2140      	movs	r1, #64	; 0x40
 8001d5a:	481d      	ldr	r0, [pc, #116]	; (8001dd0 <main+0xe0>)
 8001d5c:	f7fe fe66 	bl	8000a2c <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart2, (uint8_t *)mystr1,sizeof(mystr1)/sizeof(mystr1[0]),100);
 8001d60:	4e19      	ldr	r6, [pc, #100]	; (8001dc8 <main+0xd8>)
 8001d62:	2364      	movs	r3, #100	; 0x64
 8001d64:	2210      	movs	r2, #16
 8001d66:	4629      	mov	r1, r5
 8001d68:	4630      	mov	r0, r6
 8001d6a:	f7ff fd31 	bl	80017d0 <HAL_UART_Transmit>
 8001d6e:	240a      	movs	r4, #10
    lcd_scrollDisplayLeft();
 8001d70:	f7fe fafa 	bl	8000368 <lcd_scrollDisplayLeft>
    HAL_Delay(150);
 8001d74:	2096      	movs	r0, #150	; 0x96
 8001d76:	f7fe fb59 	bl	800042c <HAL_Delay>
  for(int cnt = 0; cnt < 10; cnt++) {
 8001d7a:	3c01      	subs	r4, #1
 8001d7c:	d1f8      	bne.n	8001d70 <main+0x80>
 8001d7e:	240a      	movs	r4, #10
    lcd_scrollDisplayRight();
 8001d80:	f7fe faf5 	bl	800036e <lcd_scrollDisplayRight>
    HAL_Delay(150);
 8001d84:	2096      	movs	r0, #150	; 0x96
 8001d86:	f7fe fb51 	bl	800042c <HAL_Delay>
  for (int cnt =0; cnt < 10; cnt++) {
 8001d8a:	3c01      	subs	r4, #1
 8001d8c:	d1f8      	bne.n	8001d80 <main+0x90>
  HAL_Delay(1500);
 8001d8e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001d92:	f7fe fb4b 	bl	800042c <HAL_Delay>
 8001d96:	240a      	movs	r4, #10
      lcd_scrollDisplayRight();
 8001d98:	f7fe fae9 	bl	800036e <lcd_scrollDisplayRight>
      HAL_Delay(150);
 8001d9c:	2096      	movs	r0, #150	; 0x96
 8001d9e:	f7fe fb45 	bl	800042c <HAL_Delay>
  for (int cnt =0; cnt < 10; cnt++) {
 8001da2:	3c01      	subs	r4, #1
 8001da4:	d1f8      	bne.n	8001d98 <main+0xa8>
 8001da6:	240a      	movs	r4, #10
    lcd_scrollDisplayLeft();
 8001da8:	f7fe fade 	bl	8000368 <lcd_scrollDisplayLeft>
    HAL_Delay(150);
 8001dac:	2096      	movs	r0, #150	; 0x96
 8001dae:	f7fe fb3d 	bl	800042c <HAL_Delay>
  for(int cnt = 0; cnt < 10; cnt++) {
 8001db2:	3c01      	subs	r4, #1
 8001db4:	d1f8      	bne.n	8001da8 <main+0xb8>
  HAL_Delay(1500);
 8001db6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001dba:	f7fe fb37 	bl	800042c <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)mystr1,sizeof(mystr1)/sizeof(mystr1[0]),100);
 8001dbe:	e7d0      	b.n	8001d62 <main+0x72>
 8001dc0:	08002210 	.word	0x08002210
 8001dc4:	0800221d 	.word	0x0800221d
 8001dc8:	200001d8 	.word	0x200001d8
 8001dcc:	0800222d 	.word	0x0800222d
 8001dd0:	40010c00 	.word	0x40010c00

08001dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dd4:	4770      	bx	lr
	...

08001dd8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001dd8:	b513      	push	{r0, r1, r4, lr}
  RTC_DateTypeDef DateToUpdate = {0};

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295
  RTC_TimeTypeDef sTime = {0};
 8001dde:	2400      	movs	r4, #0
  hrtc.Instance = RTC;
 8001de0:	4817      	ldr	r0, [pc, #92]	; (8001e40 <MX_RTC_Init+0x68>)
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001de2:	4a18      	ldr	r2, [pc, #96]	; (8001e44 <MX_RTC_Init+0x6c>)
  RTC_TimeTypeDef sTime = {0};
 8001de4:	f8ad 4000 	strh.w	r4, [sp]
 8001de8:	f88d 4002 	strb.w	r4, [sp, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001dec:	9401      	str	r4, [sp, #4]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001dee:	e880 000c 	stmia.w	r0, {r2, r3}
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8001df2:	6084      	str	r4, [r0, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001df4:	f7ff fbd0 	bl	8001598 <HAL_RTC_Init>
 8001df8:	b108      	cbz	r0, 8001dfe <MX_RTC_Init+0x26>
  {
    Error_Handler();
 8001dfa:	f7ff ffeb 	bl	8001dd4 <Error_Handler>
  */
  sTime.Hours = 0x0;
  sTime.Minutes = 0x0;
  sTime.Seconds = 0x0;

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	4669      	mov	r1, sp
 8001e02:	480f      	ldr	r0, [pc, #60]	; (8001e40 <MX_RTC_Init+0x68>)
  sTime.Hours = 0x0;
 8001e04:	f88d 4000 	strb.w	r4, [sp]
  sTime.Minutes = 0x0;
 8001e08:	f88d 4001 	strb.w	r4, [sp, #1]
  sTime.Seconds = 0x0;
 8001e0c:	f88d 4002 	strb.w	r4, [sp, #2]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001e10:	f7ff fafd 	bl	800140e <HAL_RTC_SetTime>
 8001e14:	b108      	cbz	r0, 8001e1a <MX_RTC_Init+0x42>
  {
    Error_Handler();
 8001e16:	f7ff ffdd 	bl	8001dd4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001e1a:	2201      	movs	r2, #1
  DateToUpdate.Month = RTC_MONTH_JANUARY;
  DateToUpdate.Date = 0x1;
  DateToUpdate.Year = 0x0;
 8001e1c:	2300      	movs	r3, #0

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001e1e:	a901      	add	r1, sp, #4
 8001e20:	4807      	ldr	r0, [pc, #28]	; (8001e40 <MX_RTC_Init+0x68>)
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001e22:	f88d 2004 	strb.w	r2, [sp, #4]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001e26:	f88d 2005 	strb.w	r2, [sp, #5]
  DateToUpdate.Date = 0x1;
 8001e2a:	f88d 2006 	strb.w	r2, [sp, #6]
  DateToUpdate.Year = 0x0;
 8001e2e:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001e32:	f7ff fb3d 	bl	80014b0 <HAL_RTC_SetDate>
 8001e36:	b108      	cbz	r0, 8001e3c <MX_RTC_Init+0x64>
  {
    Error_Handler();
 8001e38:	f7ff ffcc 	bl	8001dd4 <Error_Handler>
  }

}
 8001e3c:	b002      	add	sp, #8
 8001e3e:	bd10      	pop	{r4, pc}
 8001e40:	2000012c 	.word	0x2000012c
 8001e44:	40002800 	.word	0x40002800

08001e48 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001e48:	b507      	push	{r0, r1, r2, lr}

  if(rtcHandle->Instance==RTC)
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <HAL_RTC_MspInit+0x30>)
 8001e4c:	6802      	ldr	r2, [r0, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d10e      	bne.n	8001e70 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001e52:	f7fe fea1 	bl	8000b98 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_RTC_MspInit+0x34>)
 8001e58:	69da      	ldr	r2, [r3, #28]
 8001e5a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001e5e:	61da      	str	r2, [r3, #28]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e60:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e68:	9301      	str	r3, [sp, #4]
 8001e6a:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <HAL_RTC_MspInit+0x38>)
 8001e6e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001e70:	b003      	add	sp, #12
 8001e72:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e76:	bf00      	nop
 8001e78:	40002800 	.word	0x40002800
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	4242043c 	.word	0x4242043c

08001e84 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001e84:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e86:	f44f 7e82 	mov.w	lr, #260	; 0x104
  hspi2.Instance = SPI2;
 8001e8a:	480d      	ldr	r0, [pc, #52]	; (8001ec0 <MX_SPI2_Init+0x3c>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e8c:	4b0d      	ldr	r3, [pc, #52]	; (8001ec4 <MX_SPI2_Init+0x40>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e92:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e96:	2300      	movs	r3, #0
 8001e98:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e9a:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e9c:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e9e:	6143      	str	r3, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ea0:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ea2:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ea4:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ea6:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001ea8:	230a      	movs	r3, #10
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001eaa:	6182      	str	r2, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 8001eac:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001eae:	f7ff fbc3 	bl	8001638 <HAL_SPI_Init>
 8001eb2:	b118      	cbz	r0, 8001ebc <MX_SPI2_Init+0x38>
  {
    Error_Handler();
  }

}
 8001eb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001eb8:	f7ff bf8c 	b.w	8001dd4 <Error_Handler>
 8001ebc:	bd08      	pop	{r3, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000140 	.word	0x20000140
 8001ec4:	40003800 	.word	0x40003800

08001ec8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ec8:	b510      	push	{r4, lr}
 8001eca:	4604      	mov	r4, r0
 8001ecc:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ece:	2210      	movs	r2, #16
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	a802      	add	r0, sp, #8
 8001ed4:	f000 f978 	bl	80021c8 <memset>
  if(spiHandle->Instance==SPI2)
 8001ed8:	6822      	ldr	r2, [r4, #0]
 8001eda:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <HAL_SPI_MspInit+0x70>)
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d128      	bne.n	8001f32 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ee0:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 8001ee4:	69da      	ldr	r2, [r3, #28]
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee6:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ee8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eec:	61da      	str	r2, [r3, #28]
 8001eee:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef0:	4812      	ldr	r0, [pc, #72]	; (8001f3c <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ef2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001ef6:	9200      	str	r2, [sp, #0]
 8001ef8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efa:	699a      	ldr	r2, [r3, #24]
 8001efc:	f042 0208 	orr.w	r2, r2, #8
 8001f00:	619a      	str	r2, [r3, #24]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	9301      	str	r3, [sp, #4]
 8001f0a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001f0c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001f10:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f16:	2303      	movs	r3, #3
 8001f18:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1a:	f7fe fca5 	bl	8000868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001f1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f22:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f24:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f26:	a902      	add	r1, sp, #8
 8001f28:	4804      	ldr	r0, [pc, #16]	; (8001f3c <HAL_SPI_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f2a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2e:	f7fe fc9b 	bl	8000868 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001f32:	b006      	add	sp, #24
 8001f34:	bd10      	pop	{r4, pc}
 8001f36:	bf00      	nop
 8001f38:	40003800 	.word	0x40003800
 8001f3c:	40010c00 	.word	0x40010c00

08001f40 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f40:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <HAL_MspInit+0x3c>)
{
 8001f42:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f44:	699a      	ldr	r2, [r3, #24]
 8001f46:	f042 0201 	orr.w	r2, r2, #1
 8001f4a:	619a      	str	r2, [r3, #24]
 8001f4c:	699a      	ldr	r2, [r3, #24]
 8001f4e:	f002 0201 	and.w	r2, r2, #1
 8001f52:	9200      	str	r2, [sp, #0]
 8001f54:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f56:	69da      	ldr	r2, [r3, #28]
 8001f58:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f5c:	61da      	str	r2, [r3, #28]
 8001f5e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f60:	4a07      	ldr	r2, [pc, #28]	; (8001f80 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f66:	9301      	str	r3, [sp, #4]
 8001f68:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f6a:	6853      	ldr	r3, [r2, #4]
 8001f6c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f76:	b002      	add	sp, #8
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40010000 	.word	0x40010000

08001f84 <NMI_Handler>:
 8001f84:	4770      	bx	lr

08001f86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f86:	e7fe      	b.n	8001f86 <HardFault_Handler>

08001f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f88:	e7fe      	b.n	8001f88 <MemManage_Handler>

08001f8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f8a:	e7fe      	b.n	8001f8a <BusFault_Handler>

08001f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f8c:	e7fe      	b.n	8001f8c <UsageFault_Handler>

08001f8e <SVC_Handler>:
 8001f8e:	4770      	bx	lr

08001f90 <DebugMon_Handler>:
 8001f90:	4770      	bx	lr

08001f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f92:	4770      	bx	lr

08001f94 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f94:	f7fe ba38 	b.w	8000408 <HAL_IncTick>

08001f98 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001f98:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f9c:	f7fe bd4c 	b.w	8000a38 <HAL_GPIO_EXTI_IRQHandler>

08001fa0 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <SystemInit+0x40>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	f042 0201 	orr.w	r2, r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001faa:	6859      	ldr	r1, [r3, #4]
 8001fac:	4a0d      	ldr	r2, [pc, #52]	; (8001fe4 <SystemInit+0x44>)
 8001fae:	400a      	ands	r2, r1
 8001fb0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001fb8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001fbc:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fc4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001fcc:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001fce:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001fd2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001fd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <SystemInit+0x48>)
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	f8ff0000 	.word	0xf8ff0000
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001fec:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8001fee:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart2.Instance = USART2;
 8001ff2:	480a      	ldr	r0, [pc, #40]	; (800201c <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8001ff4:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <MX_USART2_UART_Init+0x34>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ff6:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 8001ff8:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ffc:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ffe:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002000:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002002:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002004:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002006:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002008:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800200a:	f7ff fbb3 	bl	8001774 <HAL_UART_Init>
 800200e:	b118      	cbz	r0, 8002018 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8002010:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002014:	f7ff bede 	b.w	8001dd4 <Error_Handler>
 8002018:	bd08      	pop	{r3, pc}
 800201a:	bf00      	nop
 800201c:	200001d8 	.word	0x200001d8
 8002020:	40004400 	.word	0x40004400

08002024 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002024:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
 8002026:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart3.Instance = USART3;
 800202a:	480a      	ldr	r0, [pc, #40]	; (8002054 <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 800202c:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <MX_USART3_UART_Init+0x34>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 800202e:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 8002030:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002034:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002036:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002038:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800203a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800203c:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800203e:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002040:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002042:	f7ff fb97 	bl	8001774 <HAL_UART_Init>
 8002046:	b118      	cbz	r0, 8002050 <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8002048:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800204c:	f7ff bec2 	b.w	8001dd4 <Error_Handler>
 8002050:	bd08      	pop	{r3, pc}
 8002052:	bf00      	nop
 8002054:	20000198 	.word	0x20000198
 8002058:	40004800 	.word	0x40004800

0800205c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	2210      	movs	r2, #16
{
 800205e:	b510      	push	{r4, lr}
 8002060:	4604      	mov	r4, r0
 8002062:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	eb0d 0002 	add.w	r0, sp, r2
 8002068:	2100      	movs	r1, #0
 800206a:	f000 f8ad 	bl	80021c8 <memset>
  if(uartHandle->Instance==USART2)
 800206e:	6823      	ldr	r3, [r4, #0]
 8002070:	4a2a      	ldr	r2, [pc, #168]	; (800211c <HAL_UART_MspInit+0xc0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d11d      	bne.n	80020b2 <HAL_UART_MspInit+0x56>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002076:	4b2a      	ldr	r3, [pc, #168]	; (8002120 <HAL_UART_MspInit+0xc4>)
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002078:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 800207a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207c:	4829      	ldr	r0, [pc, #164]	; (8002124 <HAL_UART_MspInit+0xc8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800207e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002082:	61da      	str	r2, [r3, #28]
 8002084:	69da      	ldr	r2, [r3, #28]
 8002086:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800208a:	9200      	str	r2, [sp, #0]
 800208c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208e:	699a      	ldr	r2, [r3, #24]
 8002090:	f042 0204 	orr.w	r2, r2, #4
 8002094:	619a      	str	r2, [r3, #24]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	9301      	str	r3, [sp, #4]
 800209e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020a0:	230c      	movs	r3, #12
 80020a2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a4:	2302      	movs	r3, #2
 80020a6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020aa:	f7fe fbdd 	bl	8000868 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80020ae:	b008      	add	sp, #32
 80020b0:	bd10      	pop	{r4, pc}
  else if(uartHandle->Instance==USART3)
 80020b2:	4a1d      	ldr	r2, [pc, #116]	; (8002128 <HAL_UART_MspInit+0xcc>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d1fa      	bne.n	80020ae <HAL_UART_MspInit+0x52>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020b8:	4b19      	ldr	r3, [pc, #100]	; (8002120 <HAL_UART_MspInit+0xc4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ba:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 80020bc:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020be:	481b      	ldr	r0, [pc, #108]	; (800212c <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80020c0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80020c4:	61da      	str	r2, [r3, #28]
 80020c6:	69da      	ldr	r2, [r3, #28]
 80020c8:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80020cc:	9202      	str	r2, [sp, #8]
 80020ce:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d0:	699a      	ldr	r2, [r3, #24]
 80020d2:	f042 0210 	orr.w	r2, r2, #16
 80020d6:	619a      	str	r2, [r3, #24]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	f003 0310 	and.w	r3, r3, #16
 80020de:	9303      	str	r3, [sp, #12]
 80020e0:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020e6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ec:	2303      	movs	r3, #3
 80020ee:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f0:	f7fe fbba 	bl	8000868 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80020f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020f8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020fa:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020fc:	a904      	add	r1, sp, #16
 80020fe:	480b      	ldr	r0, [pc, #44]	; (800212c <HAL_UART_MspInit+0xd0>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002100:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002104:	f7fe fbb0 	bl	8000868 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8002108:	4a09      	ldr	r2, [pc, #36]	; (8002130 <HAL_UART_MspInit+0xd4>)
 800210a:	6853      	ldr	r3, [r2, #4]
 800210c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002110:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002114:	f043 0310 	orr.w	r3, r3, #16
 8002118:	6053      	str	r3, [r2, #4]
}
 800211a:	e7c8      	b.n	80020ae <HAL_UART_MspInit+0x52>
 800211c:	40004400 	.word	0x40004400
 8002120:	40021000 	.word	0x40021000
 8002124:	40010800 	.word	0x40010800
 8002128:	40004800 	.word	0x40004800
 800212c:	40011000 	.word	0x40011000
 8002130:	40010000 	.word	0x40010000

08002134 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002134:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002136:	e003      	b.n	8002140 <LoopCopyDataInit>

08002138 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002138:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800213a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800213c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800213e:	3104      	adds	r1, #4

08002140 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002140:	480a      	ldr	r0, [pc, #40]	; (800216c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002142:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002144:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002146:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002148:	d3f6      	bcc.n	8002138 <CopyDataInit>
  ldr r2, =_sbss
 800214a:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800214c:	e002      	b.n	8002154 <LoopFillZerobss>

0800214e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800214e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002150:	f842 3b04 	str.w	r3, [r2], #4

08002154 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002154:	4b08      	ldr	r3, [pc, #32]	; (8002178 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002156:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002158:	d3f9      	bcc.n	800214e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800215a:	f7ff ff21 	bl	8001fa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800215e:	f000 f80f 	bl	8002180 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002162:	f7ff fdc5 	bl	8001cf0 <main>
  bx lr
 8002166:	4770      	bx	lr
  ldr r3, =_sidata
 8002168:	08002260 	.word	0x08002260
  ldr r0, =_sdata
 800216c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002170:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 8002174:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 8002178:	20000218 	.word	0x20000218

0800217c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800217c:	e7fe      	b.n	800217c <ADC1_2_IRQHandler>
	...

08002180 <__libc_init_array>:
 8002180:	b570      	push	{r4, r5, r6, lr}
 8002182:	2500      	movs	r5, #0
 8002184:	4e0c      	ldr	r6, [pc, #48]	; (80021b8 <__libc_init_array+0x38>)
 8002186:	4c0d      	ldr	r4, [pc, #52]	; (80021bc <__libc_init_array+0x3c>)
 8002188:	1ba4      	subs	r4, r4, r6
 800218a:	10a4      	asrs	r4, r4, #2
 800218c:	42a5      	cmp	r5, r4
 800218e:	d109      	bne.n	80021a4 <__libc_init_array+0x24>
 8002190:	f000 f822 	bl	80021d8 <_init>
 8002194:	2500      	movs	r5, #0
 8002196:	4e0a      	ldr	r6, [pc, #40]	; (80021c0 <__libc_init_array+0x40>)
 8002198:	4c0a      	ldr	r4, [pc, #40]	; (80021c4 <__libc_init_array+0x44>)
 800219a:	1ba4      	subs	r4, r4, r6
 800219c:	10a4      	asrs	r4, r4, #2
 800219e:	42a5      	cmp	r5, r4
 80021a0:	d105      	bne.n	80021ae <__libc_init_array+0x2e>
 80021a2:	bd70      	pop	{r4, r5, r6, pc}
 80021a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021a8:	4798      	blx	r3
 80021aa:	3501      	adds	r5, #1
 80021ac:	e7ee      	b.n	800218c <__libc_init_array+0xc>
 80021ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021b2:	4798      	blx	r3
 80021b4:	3501      	adds	r5, #1
 80021b6:	e7f2      	b.n	800219e <__libc_init_array+0x1e>
 80021b8:	08002258 	.word	0x08002258
 80021bc:	08002258 	.word	0x08002258
 80021c0:	08002258 	.word	0x08002258
 80021c4:	0800225c 	.word	0x0800225c

080021c8 <memset>:
 80021c8:	4603      	mov	r3, r0
 80021ca:	4402      	add	r2, r0
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d100      	bne.n	80021d2 <memset+0xa>
 80021d0:	4770      	bx	lr
 80021d2:	f803 1b01 	strb.w	r1, [r3], #1
 80021d6:	e7f9      	b.n	80021cc <memset+0x4>

080021d8 <_init>:
 80021d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021da:	bf00      	nop
 80021dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021de:	bc08      	pop	{r3}
 80021e0:	469e      	mov	lr, r3
 80021e2:	4770      	bx	lr

080021e4 <_fini>:
 80021e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021e6:	bf00      	nop
 80021e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ea:	bc08      	pop	{r3}
 80021ec:	469e      	mov	lr, r3
 80021ee:	4770      	bx	lr
