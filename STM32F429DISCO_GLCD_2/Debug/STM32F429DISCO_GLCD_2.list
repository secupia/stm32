
STM32F429DISCO_GLCD_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036a4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b14  08003850  08003850  00013850  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005364  08005364  00015364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800536c  0800536c  0001536c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005370  08005370  00015370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000050  20000000  08005374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020050  2**0
                  CONTENTS
  8 .bss          00000440  20000050  20000050  00020050  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000490  20000490  00020050  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 11 .debug_info   000199b9  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000355d  00000000  00000000  00039a39  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000ce62  00000000  00000000  0003cf96  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f38  00000000  00000000  00049df8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001658  00000000  00000000  0004ad30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00008c5f  00000000  00000000  0004c388  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005570  00000000  00000000  00054fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0005a557  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002df8  00000000  00000000  0005a5d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000050 	.word	0x20000050
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003838 	.word	0x08003838

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000054 	.word	0x20000054
 80001e8:	08003838 	.word	0x08003838

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b97a 	b.w	80004f8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	468c      	mov	ip, r1
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	9e08      	ldr	r6, [sp, #32]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d151      	bne.n	80002d0 <__udivmoddi4+0xb4>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d96d      	bls.n	800030e <__udivmoddi4+0xf2>
 8000232:	fab2 fe82 	clz	lr, r2
 8000236:	f1be 0f00 	cmp.w	lr, #0
 800023a:	d00b      	beq.n	8000254 <__udivmoddi4+0x38>
 800023c:	f1ce 0c20 	rsb	ip, lr, #32
 8000240:	fa01 f50e 	lsl.w	r5, r1, lr
 8000244:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000248:	fa02 f70e 	lsl.w	r7, r2, lr
 800024c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000250:	fa00 f40e 	lsl.w	r4, r0, lr
 8000254:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000258:	0c25      	lsrs	r5, r4, #16
 800025a:	fbbc f8fa 	udiv	r8, ip, sl
 800025e:	fa1f f987 	uxth.w	r9, r7
 8000262:	fb0a cc18 	mls	ip, sl, r8, ip
 8000266:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026a:	fb08 f309 	mul.w	r3, r8, r9
 800026e:	42ab      	cmp	r3, r5
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x6c>
 8000272:	19ed      	adds	r5, r5, r7
 8000274:	f108 32ff 	add.w	r2, r8, #4294967295
 8000278:	f080 8123 	bcs.w	80004c2 <__udivmoddi4+0x2a6>
 800027c:	42ab      	cmp	r3, r5
 800027e:	f240 8120 	bls.w	80004c2 <__udivmoddi4+0x2a6>
 8000282:	f1a8 0802 	sub.w	r8, r8, #2
 8000286:	443d      	add	r5, r7
 8000288:	1aed      	subs	r5, r5, r3
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000290:	fb0a 5510 	mls	r5, sl, r0, r5
 8000294:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000298:	fb00 f909 	mul.w	r9, r0, r9
 800029c:	45a1      	cmp	r9, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x98>
 80002a0:	19e4      	adds	r4, r4, r7
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a6:	f080 810a 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80002aa:	45a1      	cmp	r9, r4
 80002ac:	f240 8107 	bls.w	80004be <__udivmoddi4+0x2a2>
 80002b0:	3802      	subs	r0, #2
 80002b2:	443c      	add	r4, r7
 80002b4:	eba4 0409 	sub.w	r4, r4, r9
 80002b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002bc:	2100      	movs	r1, #0
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d061      	beq.n	8000386 <__udivmoddi4+0x16a>
 80002c2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002c6:	2300      	movs	r3, #0
 80002c8:	6034      	str	r4, [r6, #0]
 80002ca:	6073      	str	r3, [r6, #4]
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xc8>
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d054      	beq.n	8000382 <__udivmoddi4+0x166>
 80002d8:	2100      	movs	r1, #0
 80002da:	e886 0021 	stmia.w	r6, {r0, r5}
 80002de:	4608      	mov	r0, r1
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	fab3 f183 	clz	r1, r3
 80002e8:	2900      	cmp	r1, #0
 80002ea:	f040 808e 	bne.w	800040a <__udivmoddi4+0x1ee>
 80002ee:	42ab      	cmp	r3, r5
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xdc>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2d0>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb65 0503 	sbc.w	r5, r5, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	46ac      	mov	ip, r5
 8000302:	2e00      	cmp	r6, #0
 8000304:	d03f      	beq.n	8000386 <__udivmoddi4+0x16a>
 8000306:	e886 1010 	stmia.w	r6, {r4, ip}
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b912      	cbnz	r2, 8000316 <__udivmoddi4+0xfa>
 8000310:	2701      	movs	r7, #1
 8000312:	fbb7 f7f2 	udiv	r7, r7, r2
 8000316:	fab7 fe87 	clz	lr, r7
 800031a:	f1be 0f00 	cmp.w	lr, #0
 800031e:	d134      	bne.n	800038a <__udivmoddi4+0x16e>
 8000320:	1beb      	subs	r3, r5, r7
 8000322:	0c3a      	lsrs	r2, r7, #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb3 f8f2 	udiv	r8, r3, r2
 800032e:	0c25      	lsrs	r5, r4, #16
 8000330:	fb02 3318 	mls	r3, r2, r8, r3
 8000334:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000338:	fb0c f308 	mul.w	r3, ip, r8
 800033c:	42ab      	cmp	r3, r5
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x134>
 8000340:	19ed      	adds	r5, r5, r7
 8000342:	f108 30ff 	add.w	r0, r8, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x132>
 8000348:	42ab      	cmp	r3, r5
 800034a:	f200 80d1 	bhi.w	80004f0 <__udivmoddi4+0x2d4>
 800034e:	4680      	mov	r8, r0
 8000350:	1aed      	subs	r5, r5, r3
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb5 f0f2 	udiv	r0, r5, r2
 8000358:	fb02 5510 	mls	r5, r2, r0, r5
 800035c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000360:	fb0c fc00 	mul.w	ip, ip, r0
 8000364:	45a4      	cmp	ip, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x15c>
 8000368:	19e4      	adds	r4, r4, r7
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x15a>
 8000370:	45a4      	cmp	ip, r4
 8000372:	f200 80b8 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 040c 	sub.w	r4, r4, ip
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	e79d      	b.n	80002be <__udivmoddi4+0xa2>
 8000382:	4631      	mov	r1, r6
 8000384:	4630      	mov	r0, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	f1ce 0420 	rsb	r4, lr, #32
 800038e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000392:	fa07 f70e 	lsl.w	r7, r7, lr
 8000396:	fa20 f804 	lsr.w	r8, r0, r4
 800039a:	0c3a      	lsrs	r2, r7, #16
 800039c:	fa25 f404 	lsr.w	r4, r5, r4
 80003a0:	ea48 0803 	orr.w	r8, r8, r3
 80003a4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ac:	fb02 4411 	mls	r4, r2, r1, r4
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b8:	fb01 f30c 	mul.w	r3, r1, ip
 80003bc:	42ab      	cmp	r3, r5
 80003be:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1bc>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ca:	f080 808a 	bcs.w	80004e2 <__udivmoddi4+0x2c6>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	f240 8087 	bls.w	80004e2 <__udivmoddi4+0x2c6>
 80003d4:	3902      	subs	r1, #2
 80003d6:	443d      	add	r5, r7
 80003d8:	1aeb      	subs	r3, r5, r3
 80003da:	fa1f f588 	uxth.w	r5, r8
 80003de:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e2:	fb02 3310 	mls	r3, r2, r0, r3
 80003e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ea:	fb00 f30c 	mul.w	r3, r0, ip
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1e6>
 80003f2:	19ed      	adds	r5, r5, r7
 80003f4:	f100 38ff 	add.w	r8, r0, #4294967295
 80003f8:	d26f      	bcs.n	80004da <__udivmoddi4+0x2be>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d96d      	bls.n	80004da <__udivmoddi4+0x2be>
 80003fe:	3802      	subs	r0, #2
 8000400:	443d      	add	r5, r7
 8000402:	1aeb      	subs	r3, r5, r3
 8000404:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000408:	e78f      	b.n	800032a <__udivmoddi4+0x10e>
 800040a:	f1c1 0720 	rsb	r7, r1, #32
 800040e:	fa22 f807 	lsr.w	r8, r2, r7
 8000412:	408b      	lsls	r3, r1
 8000414:	fa05 f401 	lsl.w	r4, r5, r1
 8000418:	ea48 0303 	orr.w	r3, r8, r3
 800041c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000420:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000424:	40fd      	lsrs	r5, r7
 8000426:	ea4e 0e04 	orr.w	lr, lr, r4
 800042a:	fbb5 f9fc 	udiv	r9, r5, ip
 800042e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000432:	fb0c 5519 	mls	r5, ip, r9, r5
 8000436:	fa1f f883 	uxth.w	r8, r3
 800043a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800043e:	fb09 f408 	mul.w	r4, r9, r8
 8000442:	42ac      	cmp	r4, r5
 8000444:	fa02 f201 	lsl.w	r2, r2, r1
 8000448:	fa00 fa01 	lsl.w	sl, r0, r1
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x244>
 800044e:	18ed      	adds	r5, r5, r3
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d243      	bcs.n	80004de <__udivmoddi4+0x2c2>
 8000456:	42ac      	cmp	r4, r5
 8000458:	d941      	bls.n	80004de <__udivmoddi4+0x2c2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	441d      	add	r5, r3
 8000460:	1b2d      	subs	r5, r5, r4
 8000462:	fa1f fe8e 	uxth.w	lr, lr
 8000466:	fbb5 f0fc 	udiv	r0, r5, ip
 800046a:	fb0c 5510 	mls	r5, ip, r0, r5
 800046e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45a0      	cmp	r8, r4
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x26e>
 800047a:	18e4      	adds	r4, r4, r3
 800047c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000480:	d229      	bcs.n	80004d6 <__udivmoddi4+0x2ba>
 8000482:	45a0      	cmp	r8, r4
 8000484:	d927      	bls.n	80004d6 <__udivmoddi4+0x2ba>
 8000486:	3802      	subs	r0, #2
 8000488:	441c      	add	r4, r3
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba4 0408 	sub.w	r4, r4, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454c      	cmp	r4, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	464d      	mov	r5, r9
 800049c:	d315      	bcc.n	80004ca <__udivmoddi4+0x2ae>
 800049e:	d012      	beq.n	80004c6 <__udivmoddi4+0x2aa>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x29c>
 80004a2:	ebba 030e 	subs.w	r3, sl, lr
 80004a6:	eb64 0405 	sbc.w	r4, r4, r5
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40cb      	lsrs	r3, r1
 80004b0:	431f      	orrs	r7, r3
 80004b2:	40cc      	lsrs	r4, r1
 80004b4:	6037      	str	r7, [r6, #0]
 80004b6:	6074      	str	r4, [r6, #4]
 80004b8:	2100      	movs	r1, #0
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	4618      	mov	r0, r3
 80004c0:	e6f8      	b.n	80002b4 <__udivmoddi4+0x98>
 80004c2:	4690      	mov	r8, r2
 80004c4:	e6e0      	b.n	8000288 <__udivmoddi4+0x6c>
 80004c6:	45c2      	cmp	sl, r8
 80004c8:	d2ea      	bcs.n	80004a0 <__udivmoddi4+0x284>
 80004ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ce:	eb69 0503 	sbc.w	r5, r9, r3
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7e4      	b.n	80004a0 <__udivmoddi4+0x284>
 80004d6:	4628      	mov	r0, r5
 80004d8:	e7d7      	b.n	800048a <__udivmoddi4+0x26e>
 80004da:	4640      	mov	r0, r8
 80004dc:	e791      	b.n	8000402 <__udivmoddi4+0x1e6>
 80004de:	4681      	mov	r9, r0
 80004e0:	e7be      	b.n	8000460 <__udivmoddi4+0x244>
 80004e2:	4601      	mov	r1, r0
 80004e4:	e778      	b.n	80003d8 <__udivmoddi4+0x1bc>
 80004e6:	3802      	subs	r0, #2
 80004e8:	443c      	add	r4, r7
 80004ea:	e745      	b.n	8000378 <__udivmoddi4+0x15c>
 80004ec:	4608      	mov	r0, r1
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xe6>
 80004f0:	f1a8 0802 	sub.w	r8, r8, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	e72b      	b.n	8000350 <__udivmoddi4+0x134>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <ili9341_GetLcdPixelWidth>:
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
}
 80004fc:	20f0      	movs	r0, #240	; 0xf0
 80004fe:	4770      	bx	lr

08000500 <ili9341_GetLcdPixelHeight>:
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
}
 8000500:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8000504:	4770      	bx	lr

08000506 <ili9341_DisplayOn>:
  LCD_IO_WriteReg(LCD_Reg);
 8000506:	2029      	movs	r0, #41	; 0x29
 8000508:	f000 ba32 	b.w	8000970 <LCD_IO_WriteReg>

0800050c <ili9341_DisplayOff>:
 800050c:	2028      	movs	r0, #40	; 0x28
 800050e:	f000 ba2f 	b.w	8000970 <LCD_IO_WriteReg>

08000512 <ili9341_Init>:
{
 8000512:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8000514:	f000 f9b4 	bl	8000880 <LCD_IO_Init>
  LCD_IO_WriteReg(LCD_Reg);
 8000518:	20ca      	movs	r0, #202	; 0xca
 800051a:	f000 fa29 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800051e:	20c3      	movs	r0, #195	; 0xc3
 8000520:	f000 fa0a 	bl	8000938 <LCD_IO_WriteData>
 8000524:	2008      	movs	r0, #8
 8000526:	f000 fa07 	bl	8000938 <LCD_IO_WriteData>
 800052a:	2050      	movs	r0, #80	; 0x50
 800052c:	f000 fa04 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000530:	20cf      	movs	r0, #207	; 0xcf
 8000532:	f000 fa1d 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000536:	2000      	movs	r0, #0
 8000538:	f000 f9fe 	bl	8000938 <LCD_IO_WriteData>
 800053c:	20c1      	movs	r0, #193	; 0xc1
 800053e:	f000 f9fb 	bl	8000938 <LCD_IO_WriteData>
 8000542:	2030      	movs	r0, #48	; 0x30
 8000544:	f000 f9f8 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000548:	20ed      	movs	r0, #237	; 0xed
 800054a:	f000 fa11 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800054e:	2064      	movs	r0, #100	; 0x64
 8000550:	f000 f9f2 	bl	8000938 <LCD_IO_WriteData>
 8000554:	2003      	movs	r0, #3
 8000556:	f000 f9ef 	bl	8000938 <LCD_IO_WriteData>
 800055a:	2012      	movs	r0, #18
 800055c:	f000 f9ec 	bl	8000938 <LCD_IO_WriteData>
 8000560:	2081      	movs	r0, #129	; 0x81
 8000562:	f000 f9e9 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000566:	20e8      	movs	r0, #232	; 0xe8
 8000568:	f000 fa02 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800056c:	2085      	movs	r0, #133	; 0x85
 800056e:	f000 f9e3 	bl	8000938 <LCD_IO_WriteData>
 8000572:	2000      	movs	r0, #0
 8000574:	f000 f9e0 	bl	8000938 <LCD_IO_WriteData>
 8000578:	2078      	movs	r0, #120	; 0x78
 800057a:	f000 f9dd 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800057e:	20cb      	movs	r0, #203	; 0xcb
 8000580:	f000 f9f6 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000584:	2039      	movs	r0, #57	; 0x39
 8000586:	f000 f9d7 	bl	8000938 <LCD_IO_WriteData>
 800058a:	202c      	movs	r0, #44	; 0x2c
 800058c:	f000 f9d4 	bl	8000938 <LCD_IO_WriteData>
 8000590:	2000      	movs	r0, #0
 8000592:	f000 f9d1 	bl	8000938 <LCD_IO_WriteData>
 8000596:	2034      	movs	r0, #52	; 0x34
 8000598:	f000 f9ce 	bl	8000938 <LCD_IO_WriteData>
 800059c:	2002      	movs	r0, #2
 800059e:	f000 f9cb 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005a2:	20f7      	movs	r0, #247	; 0xf7
 80005a4:	f000 f9e4 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005a8:	2020      	movs	r0, #32
 80005aa:	f000 f9c5 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005ae:	20ea      	movs	r0, #234	; 0xea
 80005b0:	f000 f9de 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005b4:	2000      	movs	r0, #0
 80005b6:	f000 f9bf 	bl	8000938 <LCD_IO_WriteData>
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 f9bc 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005c0:	20b1      	movs	r0, #177	; 0xb1
 80005c2:	f000 f9d5 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005c6:	2000      	movs	r0, #0
 80005c8:	f000 f9b6 	bl	8000938 <LCD_IO_WriteData>
 80005cc:	201b      	movs	r0, #27
 80005ce:	f000 f9b3 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005d2:	20b6      	movs	r0, #182	; 0xb6
 80005d4:	f000 f9cc 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005d8:	200a      	movs	r0, #10
 80005da:	f000 f9ad 	bl	8000938 <LCD_IO_WriteData>
 80005de:	20a2      	movs	r0, #162	; 0xa2
 80005e0:	f000 f9aa 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005e4:	20c0      	movs	r0, #192	; 0xc0
 80005e6:	f000 f9c3 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005ea:	2010      	movs	r0, #16
 80005ec:	f000 f9a4 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005f0:	20c1      	movs	r0, #193	; 0xc1
 80005f2:	f000 f9bd 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005f6:	2010      	movs	r0, #16
 80005f8:	f000 f99e 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005fc:	20c5      	movs	r0, #197	; 0xc5
 80005fe:	f000 f9b7 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000602:	2045      	movs	r0, #69	; 0x45
 8000604:	f000 f998 	bl	8000938 <LCD_IO_WriteData>
 8000608:	2015      	movs	r0, #21
 800060a:	f000 f995 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800060e:	20c7      	movs	r0, #199	; 0xc7
 8000610:	f000 f9ae 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000614:	2090      	movs	r0, #144	; 0x90
 8000616:	f000 f98f 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800061a:	2036      	movs	r0, #54	; 0x36
 800061c:	f000 f9a8 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000620:	20c8      	movs	r0, #200	; 0xc8
 8000622:	f000 f989 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000626:	20f2      	movs	r0, #242	; 0xf2
 8000628:	f000 f9a2 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800062c:	2000      	movs	r0, #0
 800062e:	f000 f983 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000632:	20b0      	movs	r0, #176	; 0xb0
 8000634:	f000 f99c 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000638:	20c2      	movs	r0, #194	; 0xc2
 800063a:	f000 f97d 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800063e:	20b6      	movs	r0, #182	; 0xb6
 8000640:	f000 f996 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000644:	200a      	movs	r0, #10
 8000646:	f000 f977 	bl	8000938 <LCD_IO_WriteData>
 800064a:	20a7      	movs	r0, #167	; 0xa7
 800064c:	f000 f974 	bl	8000938 <LCD_IO_WriteData>
 8000650:	2027      	movs	r0, #39	; 0x27
 8000652:	f000 f971 	bl	8000938 <LCD_IO_WriteData>
 8000656:	2004      	movs	r0, #4
 8000658:	f000 f96e 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800065c:	202a      	movs	r0, #42	; 0x2a
 800065e:	f000 f987 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000662:	2000      	movs	r0, #0
 8000664:	f000 f968 	bl	8000938 <LCD_IO_WriteData>
 8000668:	2000      	movs	r0, #0
 800066a:	f000 f965 	bl	8000938 <LCD_IO_WriteData>
 800066e:	2000      	movs	r0, #0
 8000670:	f000 f962 	bl	8000938 <LCD_IO_WriteData>
 8000674:	20ef      	movs	r0, #239	; 0xef
 8000676:	f000 f95f 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800067a:	202b      	movs	r0, #43	; 0x2b
 800067c:	f000 f978 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000680:	2000      	movs	r0, #0
 8000682:	f000 f959 	bl	8000938 <LCD_IO_WriteData>
 8000686:	2000      	movs	r0, #0
 8000688:	f000 f956 	bl	8000938 <LCD_IO_WriteData>
 800068c:	2001      	movs	r0, #1
 800068e:	f000 f953 	bl	8000938 <LCD_IO_WriteData>
 8000692:	203f      	movs	r0, #63	; 0x3f
 8000694:	f000 f950 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000698:	20f6      	movs	r0, #246	; 0xf6
 800069a:	f000 f969 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800069e:	2001      	movs	r0, #1
 80006a0:	f000 f94a 	bl	8000938 <LCD_IO_WriteData>
 80006a4:	2000      	movs	r0, #0
 80006a6:	f000 f947 	bl	8000938 <LCD_IO_WriteData>
 80006aa:	2006      	movs	r0, #6
 80006ac:	f000 f944 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006b0:	202c      	movs	r0, #44	; 0x2c
 80006b2:	f000 f95d 	bl	8000970 <LCD_IO_WriteReg>
  LCD_Delay(200);
 80006b6:	20c8      	movs	r0, #200	; 0xc8
 80006b8:	f000 f9ac 	bl	8000a14 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 80006bc:	2026      	movs	r0, #38	; 0x26
 80006be:	f000 f957 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006c2:	2001      	movs	r0, #1
 80006c4:	f000 f938 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006c8:	20e0      	movs	r0, #224	; 0xe0
 80006ca:	f000 f951 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006ce:	200f      	movs	r0, #15
 80006d0:	f000 f932 	bl	8000938 <LCD_IO_WriteData>
 80006d4:	2029      	movs	r0, #41	; 0x29
 80006d6:	f000 f92f 	bl	8000938 <LCD_IO_WriteData>
 80006da:	2024      	movs	r0, #36	; 0x24
 80006dc:	f000 f92c 	bl	8000938 <LCD_IO_WriteData>
 80006e0:	200c      	movs	r0, #12
 80006e2:	f000 f929 	bl	8000938 <LCD_IO_WriteData>
 80006e6:	200e      	movs	r0, #14
 80006e8:	f000 f926 	bl	8000938 <LCD_IO_WriteData>
 80006ec:	2009      	movs	r0, #9
 80006ee:	f000 f923 	bl	8000938 <LCD_IO_WriteData>
 80006f2:	204e      	movs	r0, #78	; 0x4e
 80006f4:	f000 f920 	bl	8000938 <LCD_IO_WriteData>
 80006f8:	2078      	movs	r0, #120	; 0x78
 80006fa:	f000 f91d 	bl	8000938 <LCD_IO_WriteData>
 80006fe:	203c      	movs	r0, #60	; 0x3c
 8000700:	f000 f91a 	bl	8000938 <LCD_IO_WriteData>
 8000704:	2009      	movs	r0, #9
 8000706:	f000 f917 	bl	8000938 <LCD_IO_WriteData>
 800070a:	2013      	movs	r0, #19
 800070c:	f000 f914 	bl	8000938 <LCD_IO_WriteData>
 8000710:	2005      	movs	r0, #5
 8000712:	f000 f911 	bl	8000938 <LCD_IO_WriteData>
 8000716:	2017      	movs	r0, #23
 8000718:	f000 f90e 	bl	8000938 <LCD_IO_WriteData>
 800071c:	2011      	movs	r0, #17
 800071e:	f000 f90b 	bl	8000938 <LCD_IO_WriteData>
 8000722:	2000      	movs	r0, #0
 8000724:	f000 f908 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000728:	20e1      	movs	r0, #225	; 0xe1
 800072a:	f000 f921 	bl	8000970 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800072e:	2000      	movs	r0, #0
 8000730:	f000 f902 	bl	8000938 <LCD_IO_WriteData>
 8000734:	2016      	movs	r0, #22
 8000736:	f000 f8ff 	bl	8000938 <LCD_IO_WriteData>
 800073a:	201b      	movs	r0, #27
 800073c:	f000 f8fc 	bl	8000938 <LCD_IO_WriteData>
 8000740:	2004      	movs	r0, #4
 8000742:	f000 f8f9 	bl	8000938 <LCD_IO_WriteData>
 8000746:	2011      	movs	r0, #17
 8000748:	f000 f8f6 	bl	8000938 <LCD_IO_WriteData>
 800074c:	2007      	movs	r0, #7
 800074e:	f000 f8f3 	bl	8000938 <LCD_IO_WriteData>
 8000752:	2031      	movs	r0, #49	; 0x31
 8000754:	f000 f8f0 	bl	8000938 <LCD_IO_WriteData>
 8000758:	2033      	movs	r0, #51	; 0x33
 800075a:	f000 f8ed 	bl	8000938 <LCD_IO_WriteData>
 800075e:	2042      	movs	r0, #66	; 0x42
 8000760:	f000 f8ea 	bl	8000938 <LCD_IO_WriteData>
 8000764:	2005      	movs	r0, #5
 8000766:	f000 f8e7 	bl	8000938 <LCD_IO_WriteData>
 800076a:	200c      	movs	r0, #12
 800076c:	f000 f8e4 	bl	8000938 <LCD_IO_WriteData>
 8000770:	200a      	movs	r0, #10
 8000772:	f000 f8e1 	bl	8000938 <LCD_IO_WriteData>
 8000776:	2028      	movs	r0, #40	; 0x28
 8000778:	f000 f8de 	bl	8000938 <LCD_IO_WriteData>
 800077c:	202f      	movs	r0, #47	; 0x2f
 800077e:	f000 f8db 	bl	8000938 <LCD_IO_WriteData>
 8000782:	200f      	movs	r0, #15
 8000784:	f000 f8d8 	bl	8000938 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000788:	2011      	movs	r0, #17
 800078a:	f000 f8f1 	bl	8000970 <LCD_IO_WriteReg>
  LCD_Delay(200);
 800078e:	20c8      	movs	r0, #200	; 0xc8
 8000790:	f000 f940 	bl	8000a14 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 8000794:	2029      	movs	r0, #41	; 0x29
 8000796:	f000 f8eb 	bl	8000970 <LCD_IO_WriteReg>
 800079a:	202c      	movs	r0, #44	; 0x2c
}
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 80007a0:	f000 b8e6 	b.w	8000970 <LCD_IO_WriteReg>

080007a4 <ili9341_ReadID>:
{
 80007a4:	b508      	push	{r3, lr}
  LCD_IO_Init();
 80007a6:	f000 f86b 	bl	8000880 <LCD_IO_Init>
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80007aa:	2103      	movs	r1, #3
 80007ac:	20d3      	movs	r0, #211	; 0xd3
 80007ae:	f000 f8fb 	bl	80009a8 <LCD_IO_ReadData>
}
 80007b2:	b280      	uxth	r0, r0
 80007b4:	bd08      	pop	{r3, pc}
	...

080007b8 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80007b8:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80007ba:	4c21      	ldr	r4, [pc, #132]	; (8000840 <SPIx_Init+0x88>)
{
 80007bc:	b088      	sub	sp, #32
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80007be:	4620      	mov	r0, r4
 80007c0:	f002 fab2 	bl	8002d28 <HAL_SPI_GetState>
 80007c4:	2800      	cmp	r0, #0
 80007c6:	d138      	bne.n	800083a <SPIx_Init+0x82>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80007c8:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <SPIx_Init+0x8c>)
 80007ca:	6023      	str	r3, [r4, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80007cc:	2318      	movs	r3, #24
 80007ce:	61e3      	str	r3, [r4, #28]
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial  = 7;
 80007d0:	2307      	movs	r3, #7
 80007d2:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80007d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007d8:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80007da:	f44f 7382 	mov.w	r3, #260	; 0x104
 80007de:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80007e0:	4b19      	ldr	r3, [pc, #100]	; (8000848 <SPIx_Init+0x90>)
 80007e2:	9001      	str	r0, [sp, #4]
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80007e4:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80007e6:	6160      	str	r0, [r4, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80007e8:	6120      	str	r0, [r4, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80007ea:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80007ec:	60e0      	str	r0, [r4, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80007ee:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80007f0:	6260      	str	r0, [r4, #36]	; 0x24
  DISCOVERY_SPIx_CLK_ENABLE();
 80007f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007f4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80007f8:	645a      	str	r2, [r3, #68]	; 0x44
 80007fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007fc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8000800:	9201      	str	r2, [sp, #4]
 8000802:	9a01      	ldr	r2, [sp, #4]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8000804:	9002      	str	r0, [sp, #8]
 8000806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8000808:	4810      	ldr	r0, [pc, #64]	; (800084c <SPIx_Init+0x94>)
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800080a:	f042 0220 	orr.w	r2, r2, #32
 800080e:	631a      	str	r2, [r3, #48]	; 0x30
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0320 	and.w	r3, r3, #32
 8000816:	9302      	str	r3, [sp, #8]
 8000818:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800081a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800081e:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8000820:	2302      	movs	r3, #2
 8000822:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8000824:	9305      	str	r3, [sp, #20]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8000826:	2301      	movs	r3, #1
 8000828:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800082a:	a903      	add	r1, sp, #12
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800082c:	2305      	movs	r3, #5
 800082e:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8000830:	f000 ffcc 	bl	80017cc <HAL_GPIO_Init>
    HAL_SPI_Init(&SpiHandle);
 8000834:	4620      	mov	r0, r4
 8000836:	f001 fff5 	bl	8002824 <HAL_SPI_Init>
}
 800083a:	b008      	add	sp, #32
 800083c:	bd10      	pop	{r4, pc}
 800083e:	bf00      	nop
 8000840:	20000070 	.word	0x20000070
 8000844:	40015000 	.word	0x40015000
 8000848:	40023800 	.word	0x40023800
 800084c:	40021400 	.word	0x40021400

08000850 <SPIx_Write>:
{
 8000850:	b507      	push	{r0, r1, r2, lr}
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <SPIx_Write+0x28>)
{
 8000854:	a902      	add	r1, sp, #8
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8000856:	681b      	ldr	r3, [r3, #0]
{
 8000858:	f821 0d02 	strh.w	r0, [r1, #-2]!
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800085c:	2201      	movs	r2, #1
 800085e:	4807      	ldr	r0, [pc, #28]	; (800087c <SPIx_Write+0x2c>)
 8000860:	f002 f833 	bl	80028ca <HAL_SPI_Transmit>
  if(status != HAL_OK)
 8000864:	b120      	cbz	r0, 8000870 <SPIx_Write+0x20>
  HAL_SPI_DeInit(&SpiHandle);
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <SPIx_Write+0x2c>)
 8000868:	f002 f819 	bl	800289e <HAL_SPI_DeInit>
  SPIx_Init();
 800086c:	f7ff ffa4 	bl	80007b8 <SPIx_Init>
}
 8000870:	b003      	add	sp, #12
 8000872:	f85d fb04 	ldr.w	pc, [sp], #4
 8000876:	bf00      	nop
 8000878:	20000038 	.word	0x20000038
 800087c:	20000070 	.word	0x20000070

08000880 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8000880:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8000882:	4b29      	ldr	r3, [pc, #164]	; (8000928 <LCD_IO_Init+0xa8>)
 8000884:	781d      	ldrb	r5, [r3, #0]
{
 8000886:	b089      	sub	sp, #36	; 0x24
  if(Is_LCD_IO_Initialized == 0)
 8000888:	2d00      	cmp	r5, #0
 800088a:	d14a      	bne.n	8000922 <LCD_IO_Init+0xa2>
  {
    Is_LCD_IO_Initialized = 1; 
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800088c:	4c27      	ldr	r4, [pc, #156]	; (800092c <LCD_IO_Init+0xac>)
 800088e:	9500      	str	r5, [sp, #0]
    Is_LCD_IO_Initialized = 1; 
 8000890:	2601      	movs	r6, #1
 8000892:	701e      	strb	r6, [r3, #0]
    LCD_WRX_GPIO_CLK_ENABLE();
 8000894:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000896:	4826      	ldr	r0, [pc, #152]	; (8000930 <LCD_IO_Init+0xb0>)
    LCD_WRX_GPIO_CLK_ENABLE();
 8000898:	f043 0308 	orr.w	r3, r3, #8
 800089c:	6323      	str	r3, [r4, #48]	; 0x30
 800089e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80008a0:	9604      	str	r6, [sp, #16]
    LCD_WRX_GPIO_CLK_ENABLE();
 80008a2:	f003 0308 	and.w	r3, r3, #8
 80008a6:	9300      	str	r3, [sp, #0]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80008a8:	2702      	movs	r7, #2
    LCD_WRX_GPIO_CLK_ENABLE();
 80008aa:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80008ac:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80008ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80008b2:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80008b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80008b6:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80008b8:	f000 ff88 	bl	80017cc <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80008bc:	9501      	str	r5, [sp, #4]
 80008be:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80008c0:	481b      	ldr	r0, [pc, #108]	; (8000930 <LCD_IO_Init+0xb0>)
    LCD_RDX_GPIO_CLK_ENABLE();
 80008c2:	f043 0308 	orr.w	r3, r3, #8
 80008c6:	6323      	str	r3, [r4, #48]	; 0x30
 80008c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80008ca:	9604      	str	r6, [sp, #16]
    LCD_RDX_GPIO_CLK_ENABLE();
 80008cc:	f003 0308 	and.w	r3, r3, #8
 80008d0:	9301      	str	r3, [sp, #4]
 80008d2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80008d4:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80008d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80008da:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80008dc:	9303      	str	r3, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80008de:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80008e0:	f000 ff74 	bl	80017cc <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80008e4:	9502      	str	r5, [sp, #8]
 80008e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80008e8:	4812      	ldr	r0, [pc, #72]	; (8000934 <LCD_IO_Init+0xb4>)
    LCD_NCS_GPIO_CLK_ENABLE();
 80008ea:	f043 0304 	orr.w	r3, r3, #4
 80008ee:	6323      	str	r3, [r4, #48]	; 0x30
 80008f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80008f2:	9604      	str	r6, [sp, #16]
    LCD_NCS_GPIO_CLK_ENABLE();
 80008f4:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80008f8:	2404      	movs	r4, #4
    LCD_NCS_GPIO_CLK_ENABLE();
 80008fa:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80008fc:	a903      	add	r1, sp, #12
    LCD_NCS_GPIO_CLK_ENABLE();
 80008fe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8000900:	9403      	str	r4, [sp, #12]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000902:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000904:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000906:	f000 ff61 	bl	80017cc <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 800090a:	462a      	mov	r2, r5
 800090c:	4621      	mov	r1, r4
 800090e:	4809      	ldr	r0, [pc, #36]	; (8000934 <LCD_IO_Init+0xb4>)
 8000910:	f001 f8e2 	bl	8001ad8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8000914:	4632      	mov	r2, r6
 8000916:	4621      	mov	r1, r4
 8000918:	4806      	ldr	r0, [pc, #24]	; (8000934 <LCD_IO_Init+0xb4>)
 800091a:	f001 f8dd 	bl	8001ad8 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 800091e:	f7ff ff4b 	bl	80007b8 <SPIx_Init>
  }
}
 8000922:	b009      	add	sp, #36	; 0x24
 8000924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000926:	bf00      	nop
 8000928:	2000006c 	.word	0x2000006c
 800092c:	40023800 	.word	0x40023800
 8000930:	40020c00 	.word	0x40020c00
 8000934:	40020800 	.word	0x40020800

08000938 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8000938:	b538      	push	{r3, r4, r5, lr}
  /* Set WRX to send data */
  LCD_WRX_HIGH();
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800093a:	4c0b      	ldr	r4, [pc, #44]	; (8000968 <LCD_IO_WriteData+0x30>)
{
 800093c:	4605      	mov	r5, r0
  LCD_WRX_HIGH();
 800093e:	2201      	movs	r2, #1
 8000940:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000944:	4809      	ldr	r0, [pc, #36]	; (800096c <LCD_IO_WriteData+0x34>)
 8000946:	f001 f8c7 	bl	8001ad8 <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 800094a:	2200      	movs	r2, #0
 800094c:	2104      	movs	r1, #4
 800094e:	4620      	mov	r0, r4
 8000950:	f001 f8c2 	bl	8001ad8 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8000954:	4628      	mov	r0, r5
 8000956:	f7ff ff7b 	bl	8000850 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800095a:	4620      	mov	r0, r4
 800095c:	2201      	movs	r2, #1
 800095e:	2104      	movs	r1, #4
}
 8000960:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 8000964:	f001 b8b8 	b.w	8001ad8 <HAL_GPIO_WritePin>
 8000968:	40020800 	.word	0x40020800
 800096c:	40020c00 	.word	0x40020c00

08000970 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8000970:	b538      	push	{r3, r4, r5, lr}
  /* Reset WRX to send command */
  LCD_WRX_LOW();
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8000972:	4c0b      	ldr	r4, [pc, #44]	; (80009a0 <LCD_IO_WriteReg+0x30>)
{
 8000974:	4605      	mov	r5, r0
  LCD_WRX_LOW();
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800097c:	4809      	ldr	r0, [pc, #36]	; (80009a4 <LCD_IO_WriteReg+0x34>)
 800097e:	f001 f8ab 	bl	8001ad8 <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 8000982:	2200      	movs	r2, #0
 8000984:	2104      	movs	r1, #4
 8000986:	4620      	mov	r0, r4
 8000988:	f001 f8a6 	bl	8001ad8 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 800098c:	4628      	mov	r0, r5
 800098e:	f7ff ff5f 	bl	8000850 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000992:	4620      	mov	r0, r4
 8000994:	2201      	movs	r2, #1
 8000996:	2104      	movs	r1, #4
}
 8000998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 800099c:	f001 b89c 	b.w	8001ad8 <HAL_GPIO_WritePin>
 80009a0:	40020800 	.word	0x40020800
 80009a4:	40020c00 	.word	0x40020c00

080009a8 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80009a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80009aa:	4605      	mov	r5, r0
 80009ac:	460c      	mov	r4, r1
  uint32_t readvalue = 0;

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80009ae:	2200      	movs	r2, #0
 80009b0:	2104      	movs	r1, #4
 80009b2:	4814      	ldr	r0, [pc, #80]	; (8000a04 <LCD_IO_ReadData+0x5c>)
 80009b4:	f001 f890 	bl	8001ad8 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80009b8:	2200      	movs	r2, #0
 80009ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009be:	4812      	ldr	r0, [pc, #72]	; (8000a08 <LCD_IO_ReadData+0x60>)
 80009c0:	f001 f88a 	bl	8001ad8 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80009c4:	4628      	mov	r0, r5
 80009c6:	f7ff ff43 	bl	8000850 <SPIx_Write>
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <LCD_IO_ReadData+0x64>)
 80009cc:	4810      	ldr	r0, [pc, #64]	; (8000a10 <LCD_IO_ReadData+0x68>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4622      	mov	r2, r4
 80009d2:	a901      	add	r1, sp, #4
 80009d4:	f002 f911 	bl	8002bfa <HAL_SPI_Receive>
  if(status != HAL_OK)
 80009d8:	b120      	cbz	r0, 80009e4 <LCD_IO_ReadData+0x3c>
  HAL_SPI_DeInit(&SpiHandle);
 80009da:	480d      	ldr	r0, [pc, #52]	; (8000a10 <LCD_IO_ReadData+0x68>)
 80009dc:	f001 ff5f 	bl	800289e <HAL_SPI_DeInit>
  SPIx_Init();
 80009e0:	f7ff feea 	bl	80007b8 <SPIx_Init>
  
  readvalue = SPIx_Read(ReadSize);

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80009e4:	2201      	movs	r2, #1
 80009e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ea:	4807      	ldr	r0, [pc, #28]	; (8000a08 <LCD_IO_ReadData+0x60>)
  return readvalue;
 80009ec:	9c01      	ldr	r4, [sp, #4]
  LCD_WRX_HIGH();
 80009ee:	f001 f873 	bl	8001ad8 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80009f2:	2201      	movs	r2, #1
 80009f4:	2104      	movs	r1, #4
 80009f6:	4803      	ldr	r0, [pc, #12]	; (8000a04 <LCD_IO_ReadData+0x5c>)
 80009f8:	f001 f86e 	bl	8001ad8 <HAL_GPIO_WritePin>
  
  return readvalue;
}
 80009fc:	4620      	mov	r0, r4
 80009fe:	b003      	add	sp, #12
 8000a00:	bd30      	pop	{r4, r5, pc}
 8000a02:	bf00      	nop
 8000a04:	40020800 	.word	0x40020800
 8000a08:	40020c00 	.word	0x40020c00
 8000a0c:	20000038 	.word	0x20000038
 8000a10:	20000070 	.word	0x20000070

08000a14 <LCD_Delay>:
 8000a14:	f000 bc4a 	b.w	80012ac <HAL_Delay>

08000a18 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8000a18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8000a1c:	4c15      	ldr	r4, [pc, #84]	; (8000a74 <FillBuffer+0x5c>)
{
 8000a1e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000a20:	4698      	mov	r8, r3
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8000a22:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000a26:	6063      	str	r3, [r4, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60a3      	str	r3, [r4, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8000a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000a2e:	60e3      	str	r3, [r4, #12]
{
 8000a30:	4681      	mov	r9, r0
  
  Dma2dHandler.Instance = DMA2D; 
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <FillBuffer+0x60>)
 8000a34:	6023      	str	r3, [r4, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8000a36:	4620      	mov	r0, r4
{
 8000a38:	460e      	mov	r6, r1
 8000a3a:	4617      	mov	r7, r2
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8000a3c:	f000 fdb4 	bl	80015a8 <HAL_DMA2D_Init>
 8000a40:	b9a0      	cbnz	r0, 8000a6c <FillBuffer+0x54>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8000a42:	4649      	mov	r1, r9
 8000a44:	4620      	mov	r0, r4
 8000a46:	f000 fe77 	bl	8001738 <HAL_DMA2D_ConfigLayer>
 8000a4a:	b978      	cbnz	r0, 8000a6c <FillBuffer+0x54>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8000a4c:	f8cd 8000 	str.w	r8, [sp]
 8000a50:	463b      	mov	r3, r7
 8000a52:	4632      	mov	r2, r6
 8000a54:	4629      	mov	r1, r5
 8000a56:	4620      	mov	r0, r4
 8000a58:	f000 fdd2 	bl	8001600 <HAL_DMA2D_Start>
 8000a5c:	b930      	cbnz	r0, 8000a6c <FillBuffer+0x54>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8000a5e:	210a      	movs	r1, #10
 8000a60:	4620      	mov	r0, r4
      }
    }
  } 
}
 8000a62:	b003      	add	sp, #12
 8000a64:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8000a68:	f000 bde4 	b.w	8001634 <HAL_DMA2D_PollForTransfer>
}
 8000a6c:	b003      	add	sp, #12
 8000a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a72:	bf00      	nop
 8000a74:	200000cc 	.word	0x200000cc
 8000a78:	4002b000 	.word	0x4002b000

08000a7c <BSP_LCD_GetXSize>:
{
 8000a7c:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelWidth();
 8000a7e:	4b02      	ldr	r3, [pc, #8]	; (8000a88 <BSP_LCD_GetXSize+0xc>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a84:	4798      	blx	r3
}
 8000a86:	bd08      	pop	{r3, pc}
 8000a88:	200002c0 	.word	0x200002c0

08000a8c <BSP_LCD_GetYSize>:
{
 8000a8c:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelHeight();
 8000a8e:	4b02      	ldr	r3, [pc, #8]	; (8000a98 <BSP_LCD_GetYSize+0xc>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a94:	4798      	blx	r3
}
 8000a96:	bd08      	pop	{r3, pc}
 8000a98:	200002c0 	.word	0x200002c0

08000a9c <BSP_LCD_LayerDefaultInit>:
{     
 8000a9c:	b570      	push	{r4, r5, r6, lr}
 8000a9e:	b08e      	sub	sp, #56	; 0x38
  Layercfg.WindowX0 = 0;
 8000aa0:	2400      	movs	r4, #0
{     
 8000aa2:	460e      	mov	r6, r1
 8000aa4:	4605      	mov	r5, r0
  Layercfg.WindowX0 = 0;
 8000aa6:	9401      	str	r4, [sp, #4]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8000aa8:	f7ff ffe8 	bl	8000a7c <BSP_LCD_GetXSize>
  Layercfg.WindowY0 = 0;
 8000aac:	9403      	str	r4, [sp, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8000aae:	9002      	str	r0, [sp, #8]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000ab0:	f7ff ffec 	bl	8000a8c <BSP_LCD_GetYSize>
  Layercfg.Alpha = 255;
 8000ab4:	23ff      	movs	r3, #255	; 0xff
 8000ab6:	9306      	str	r3, [sp, #24]
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000ab8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000abc:	9308      	str	r3, [sp, #32]
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000abe:	2307      	movs	r3, #7
 8000ac0:	9309      	str	r3, [sp, #36]	; 0x24
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000ac2:	9405      	str	r4, [sp, #20]
  Layercfg.Alpha0 = 0;
 8000ac4:	9407      	str	r4, [sp, #28]
  Layercfg.Backcolor.Blue = 0;
 8000ac6:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
  Layercfg.Backcolor.Green = 0;
 8000aca:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
  Layercfg.Backcolor.Red = 0;
 8000ace:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8000ad2:	9004      	str	r0, [sp, #16]
  Layercfg.FBStartAdress = FB_Address;
 8000ad4:	960a      	str	r6, [sp, #40]	; 0x28
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8000ad6:	f7ff ffd1 	bl	8000a7c <BSP_LCD_GetXSize>
 8000ada:	900b      	str	r0, [sp, #44]	; 0x2c
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8000adc:	f7ff ffd6 	bl	8000a8c <BSP_LCD_GetYSize>
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8000ae0:	4c0b      	ldr	r4, [pc, #44]	; (8000b10 <BSP_LCD_LayerDefaultInit+0x74>)
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8000ae2:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8000ae4:	462a      	mov	r2, r5
 8000ae6:	a901      	add	r1, sp, #4
 8000ae8:	4620      	mov	r0, r4
 8000aea:	f001 f9cf 	bl	8001e8c <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <BSP_LCD_LayerDefaultInit+0x78>)
 8000af0:	200c      	movs	r0, #12
 8000af2:	4368      	muls	r0, r5
 8000af4:	181a      	adds	r2, r3, r0
 8000af6:	f04f 31ff 	mov.w	r1, #4294967295
 8000afa:	6051      	str	r1, [r2, #4]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000afc:	4906      	ldr	r1, [pc, #24]	; (8000b18 <BSP_LCD_LayerDefaultInit+0x7c>)
 8000afe:	6091      	str	r1, [r2, #8]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8000b00:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000b04:	501a      	str	r2, [r3, r0]
  HAL_LTDC_EnableDither(&LtdcHandler);
 8000b06:	4620      	mov	r0, r4
 8000b08:	f001 f9ea 	bl	8001ee0 <HAL_LTDC_EnableDither>
}
 8000b0c:	b00e      	add	sp, #56	; 0x38
 8000b0e:	bd70      	pop	{r4, r5, r6, pc}
 8000b10:	20000218 	.word	0x20000218
 8000b14:	2000010c 	.word	0x2000010c
 8000b18:	2000003c 	.word	0x2000003c

08000b1c <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8000b1c:	4b01      	ldr	r3, [pc, #4]	; (8000b24 <BSP_LCD_SelectLayer+0x8>)
 8000b1e:	6018      	str	r0, [r3, #0]
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	200000c8 	.word	0x200000c8

08000b28 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <BSP_LCD_SetTextColor+0x10>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	230c      	movs	r3, #12
 8000b2e:	4353      	muls	r3, r2
 8000b30:	4a02      	ldr	r2, [pc, #8]	; (8000b3c <BSP_LCD_SetTextColor+0x14>)
 8000b32:	50d0      	str	r0, [r2, r3]
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	200000c8 	.word	0x200000c8
 8000b3c:	2000010c 	.word	0x2000010c

08000b40 <BSP_LCD_Clear>:
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <BSP_LCD_Clear+0x34>)
{ 
 8000b42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000b44:	681c      	ldr	r4, [r3, #0]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <BSP_LCD_Clear+0x38>)
 8000b48:	2334      	movs	r3, #52	; 0x34
 8000b4a:	fb03 2304 	mla	r3, r3, r4, r2
{ 
 8000b4e:	4607      	mov	r7, r0
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000b50:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8000b52:	f7ff ff93 	bl	8000a7c <BSP_LCD_GetXSize>
 8000b56:	4606      	mov	r6, r0
 8000b58:	f7ff ff98 	bl	8000a8c <BSP_LCD_GetYSize>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	9701      	str	r7, [sp, #4]
 8000b62:	4603      	mov	r3, r0
 8000b64:	4632      	mov	r2, r6
 8000b66:	4629      	mov	r1, r5
 8000b68:	4620      	mov	r0, r4
 8000b6a:	f7ff ff55 	bl	8000a18 <FillBuffer>
}
 8000b6e:	b003      	add	sp, #12
 8000b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200000c8 	.word	0x200000c8
 8000b78:	20000218 	.word	0x20000218

08000b7c <BSP_LCD_DisplayOn>:
  if(LcdDrv->DisplayOn != NULL)
 8000b7c:	4b02      	ldr	r3, [pc, #8]	; (8000b88 <BSP_LCD_DisplayOn+0xc>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	b103      	cbz	r3, 8000b86 <BSP_LCD_DisplayOn+0xa>
    LcdDrv->DisplayOn();
 8000b84:	4718      	bx	r3
 8000b86:	4770      	bx	lr
 8000b88:	200002c0 	.word	0x200002c0

08000b8c <BSP_LCD_MspInit>:
{
 8000b8c:	b530      	push	{r4, r5, lr}
 8000b8e:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000b90:	4b49      	ldr	r3, [pc, #292]	; (8000cb8 <BSP_LCD_MspInit+0x12c>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000b92:	4d4a      	ldr	r5, [pc, #296]	; (8000cbc <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000b94:	484a      	ldr	r0, [pc, #296]	; (8000cc0 <BSP_LCD_MspInit+0x134>)
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000b96:	4c4b      	ldr	r4, [pc, #300]	; (8000cc4 <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000b98:	2200      	movs	r2, #0
 8000b9a:	9201      	str	r2, [sp, #4]
 8000b9c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000b9e:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8000ba2:	6459      	str	r1, [r3, #68]	; 0x44
 8000ba4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000ba6:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
 8000baa:	9101      	str	r1, [sp, #4]
 8000bac:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8000bae:	9202      	str	r2, [sp, #8]
 8000bb0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000bb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bb6:	6319      	str	r1, [r3, #48]	; 0x30
 8000bb8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000bba:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8000bbe:	9102      	str	r1, [sp, #8]
 8000bc0:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	9203      	str	r2, [sp, #12]
 8000bc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000bc6:	f041 0101 	orr.w	r1, r1, #1
 8000bca:	6319      	str	r1, [r3, #48]	; 0x30
 8000bcc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000bce:	f001 0101 	and.w	r1, r1, #1
 8000bd2:	9103      	str	r1, [sp, #12]
 8000bd4:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	9204      	str	r2, [sp, #16]
 8000bd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000bda:	f041 0102 	orr.w	r1, r1, #2
 8000bde:	6319      	str	r1, [r3, #48]	; 0x30
 8000be0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000be2:	f001 0102 	and.w	r1, r1, #2
 8000be6:	9104      	str	r1, [sp, #16]
 8000be8:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bea:	9205      	str	r2, [sp, #20]
 8000bec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000bee:	f041 0104 	orr.w	r1, r1, #4
 8000bf2:	6319      	str	r1, [r3, #48]	; 0x30
 8000bf4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000bf6:	f001 0104 	and.w	r1, r1, #4
 8000bfa:	9105      	str	r1, [sp, #20]
 8000bfc:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfe:	9206      	str	r2, [sp, #24]
 8000c00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c02:	f041 0108 	orr.w	r1, r1, #8
 8000c06:	6319      	str	r1, [r3, #48]	; 0x30
 8000c08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c0a:	f001 0108 	and.w	r1, r1, #8
 8000c0e:	9106      	str	r1, [sp, #24]
 8000c10:	9906      	ldr	r1, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c12:	9207      	str	r2, [sp, #28]
 8000c14:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c16:	f041 0120 	orr.w	r1, r1, #32
 8000c1a:	6319      	str	r1, [r3, #48]	; 0x30
 8000c1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c1e:	f001 0120 	and.w	r1, r1, #32
 8000c22:	9107      	str	r1, [sp, #28]
 8000c24:	9907      	ldr	r1, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c26:	9208      	str	r2, [sp, #32]
 8000c28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c2a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8000c2e:	6319      	str	r1, [r3, #48]	; 0x30
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000c32:	920b      	str	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c38:	9308      	str	r3, [sp, #32]
 8000c3a:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000c3c:	f641 0358 	movw	r3, #6232	; 0x1858
 8000c40:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000c46:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000c48:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000c4a:	230e      	movs	r3, #14
 8000c4c:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000c4e:	f000 fdbd 	bl	80017cc <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000c52:	f44f 6370 	mov.w	r3, #3840	; 0xf00
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000c56:	a909      	add	r1, sp, #36	; 0x24
 8000c58:	4628      	mov	r0, r5
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000c5a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000c5c:	f000 fdb6 	bl	80017cc <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000c60:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000c64:	a909      	add	r1, sp, #36	; 0x24
 8000c66:	4818      	ldr	r0, [pc, #96]	; (8000cc8 <BSP_LCD_MspInit+0x13c>)
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000c68:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000c6a:	f000 fdaf 	bl	80017cc <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000c6e:	2348      	movs	r3, #72	; 0x48
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000c70:	a909      	add	r1, sp, #36	; 0x24
 8000c72:	4816      	ldr	r0, [pc, #88]	; (8000ccc <BSP_LCD_MspInit+0x140>)
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000c74:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000c76:	f000 fda9 	bl	80017cc <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8000c7e:	a909      	add	r1, sp, #36	; 0x24
 8000c80:	4813      	ldr	r0, [pc, #76]	; (8000cd0 <BSP_LCD_MspInit+0x144>)
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000c82:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8000c84:	f000 fda2 	bl	80017cc <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000c88:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000c8c:	a909      	add	r1, sp, #36	; 0x24
 8000c8e:	4620      	mov	r0, r4
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000c90:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000c92:	f000 fd9b 	bl	80017cc <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000c96:	2303      	movs	r3, #3
 8000c98:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000c9a:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000c9c:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000c9e:	4628      	mov	r0, r5
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000ca0:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000ca2:	f000 fd93 	bl	80017cc <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000ca6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000caa:	a909      	add	r1, sp, #36	; 0x24
 8000cac:	4620      	mov	r0, r4
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000cae:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000cb0:	f000 fd8c 	bl	80017cc <HAL_GPIO_Init>
}
 8000cb4:	b00f      	add	sp, #60	; 0x3c
 8000cb6:	bd30      	pop	{r4, r5, pc}
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020400 	.word	0x40020400
 8000cc0:	40020000 	.word	0x40020000
 8000cc4:	40021800 	.word	0x40021800
 8000cc8:	40020800 	.word	0x40020800
 8000ccc:	40020c00 	.word	0x40020c00
 8000cd0:	40021400 	.word	0x40021400

08000cd4 <BSP_LCD_Init>:
{ 
 8000cd4:	b538      	push	{r3, r4, r5, lr}
    LtdcHandler.Instance = LTDC;
 8000cd6:	4c22      	ldr	r4, [pc, #136]	; (8000d60 <BSP_LCD_Init+0x8c>)
 8000cd8:	4b22      	ldr	r3, [pc, #136]	; (8000d64 <BSP_LCD_Init+0x90>)
 8000cda:	6023      	str	r3, [r4, #0]
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8000cdc:	2309      	movs	r3, #9
 8000cde:	6163      	str	r3, [r4, #20]
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	61a3      	str	r3, [r4, #24]
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8000ce4:	231d      	movs	r3, #29
 8000ce6:	61e3      	str	r3, [r4, #28]
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	6223      	str	r3, [r4, #32]
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8000cec:	f240 130d 	movw	r3, #269	; 0x10d
 8000cf0:	6263      	str	r3, [r4, #36]	; 0x24
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8000cf2:	f240 1343 	movw	r3, #323	; 0x143
 8000cf6:	62a3      	str	r3, [r4, #40]	; 0x28
    LtdcHandler.Init.TotalWidth = 279;
 8000cf8:	f240 1317 	movw	r3, #279	; 0x117
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000cfc:	481a      	ldr	r0, [pc, #104]	; (8000d68 <BSP_LCD_Init+0x94>)
    LtdcHandler.Init.TotalWidth = 279;
 8000cfe:	62e3      	str	r3, [r4, #44]	; 0x2c
    LtdcHandler.Init.TotalHeigh = 327;
 8000d00:	f240 1347 	movw	r3, #327	; 0x147
 8000d04:	6323      	str	r3, [r4, #48]	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d06:	2308      	movs	r3, #8
 8000d08:	6003      	str	r3, [r0, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000d0a:	23c0      	movs	r3, #192	; 0xc0
 8000d0c:	6103      	str	r3, [r0, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000d0e:	2304      	movs	r3, #4
    LtdcHandler.Init.Backcolor.Red= 0;
 8000d10:	2500      	movs	r5, #0
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000d12:	6183      	str	r3, [r0, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000d14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d18:	6243      	str	r3, [r0, #36]	; 0x24
    LtdcHandler.Init.Backcolor.Red= 0;
 8000d1a:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8000d1e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8000d22:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8000d26:	f001 fb89 	bl	800243c <HAL_RCCEx_PeriphCLKConfig>
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000d2a:	6065      	str	r5, [r4, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000d2c:	60a5      	str	r5, [r4, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000d2e:	60e5      	str	r5, [r4, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000d30:	6125      	str	r5, [r4, #16]
    BSP_LCD_MspInit();
 8000d32:	f7ff ff2b 	bl	8000b8c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8000d36:	4620      	mov	r0, r4
 8000d38:	f001 f83c 	bl	8001db4 <HAL_LTDC_Init>
    LcdDrv = &ili9341_drv;
 8000d3c:	4a0b      	ldr	r2, [pc, #44]	; (8000d6c <BSP_LCD_Init+0x98>)
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <BSP_LCD_Init+0x9c>)
 8000d40:	6013      	str	r3, [r2, #0]
    LcdDrv->Init();
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4798      	blx	r3
    BSP_SDRAM_Init();
 8000d46:	f000 fa23 	bl	8001190 <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = pFonts;
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <BSP_LCD_Init+0xa0>)
 8000d4c:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <BSP_LCD_Init+0xa4>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	210c      	movs	r1, #12
 8000d52:	fb01 2303 	mla	r3, r1, r3, r2
 8000d56:	4a09      	ldr	r2, [pc, #36]	; (8000d7c <BSP_LCD_Init+0xa8>)
 8000d58:	609a      	str	r2, [r3, #8]
}  
 8000d5a:	4628      	mov	r0, r5
 8000d5c:	bd38      	pop	{r3, r4, r5, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000218 	.word	0x20000218
 8000d64:	40016800 	.word	0x40016800
 8000d68:	20000124 	.word	0x20000124
 8000d6c:	200002c0 	.word	0x200002c0
 8000d70:	20000000 	.word	0x20000000
 8000d74:	200000c8 	.word	0x200000c8
 8000d78:	2000010c 	.word	0x2000010c
 8000d7c:	2000003c 	.word	0x2000003c

08000d80 <BSP_LCD_DrawPixel>:
{
 8000d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <BSP_LCD_DrawPixel+0x24>)
{
 8000d84:	4616      	mov	r6, r2
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a07      	ldr	r2, [pc, #28]	; (8000da8 <BSP_LCD_DrawPixel+0x28>)
{
 8000d8a:	460c      	mov	r4, r1
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000d8c:	2134      	movs	r1, #52	; 0x34
 8000d8e:	fb01 2303 	mla	r3, r1, r3, r2
{
 8000d92:	4607      	mov	r7, r0
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000d94:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8000d96:	f7ff fe71 	bl	8000a7c <BSP_LCD_GetXSize>
 8000d9a:	fb00 7004 	mla	r0, r0, r4, r7
 8000d9e:	f845 6020 	str.w	r6, [r5, r0, lsl #2]
 8000da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000da4:	200000c8 	.word	0x200000c8
 8000da8:	20000218 	.word	0x20000218

08000dac <BSP_LCD_DisplayChar>:
{
 8000dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000db0:	4b2f      	ldr	r3, [pc, #188]	; (8000e70 <BSP_LCD_DisplayChar+0xc4>)
{
 8000db2:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000db4:	681b      	ldr	r3, [r3, #0]
{
 8000db6:	9102      	str	r1, [sp, #8]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000db8:	492e      	ldr	r1, [pc, #184]	; (8000e74 <BSP_LCD_DisplayChar+0xc8>)
{
 8000dba:	9001      	str	r0, [sp, #4]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000dbc:	200c      	movs	r0, #12
 8000dbe:	fb00 1303 	mla	r3, r0, r3, r1
 8000dc2:	f1a2 0420 	sub.w	r4, r2, #32
 8000dc6:	6899      	ldr	r1, [r3, #8]
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000dc8:	f8b1 a004 	ldrh.w	sl, [r1, #4]
 8000dcc:	f8b1 b006 	ldrh.w	fp, [r1, #6]
 8000dd0:	680a      	ldr	r2, [r1, #0]
 8000dd2:	f10a 0607 	add.w	r6, sl, #7
 8000dd6:	10f6      	asrs	r6, r6, #3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000dd8:	fb0b f404 	mul.w	r4, fp, r4
  offset = 8 *((width + 7)/8) -  width ;
 8000ddc:	ebca 00c6 	rsb	r0, sl, r6, lsl #3
 8000de0:	fb06 2404 	mla	r4, r6, r4, r2
      if(line & (1 << (width- j + offset- 1))) 
 8000de4:	f10a 32ff 	add.w	r2, sl, #4294967295
 8000de8:	fa52 f380 	uxtab	r3, r2, r0
  for(i = 0; i < height; i++)
 8000dec:	f04f 0800 	mov.w	r8, #0
      if(line & (1 << (width- j + offset- 1))) 
 8000df0:	9303      	str	r3, [sp, #12]
 8000df2:	9b02      	ldr	r3, [sp, #8]
  for(i = 0; i < height; i++)
 8000df4:	45d8      	cmp	r8, fp
 8000df6:	eb03 0908 	add.w	r9, r3, r8
 8000dfa:	fa1f f989 	uxth.w	r9, r9
 8000dfe:	d302      	bcc.n	8000e06 <BSP_LCD_DisplayChar+0x5a>
}
 8000e00:	b005      	add	sp, #20
 8000e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 8000e06:	2e01      	cmp	r6, #1
 8000e08:	d009      	beq.n	8000e1e <BSP_LCD_DisplayChar+0x72>
 8000e0a:	2e02      	cmp	r6, #2
 8000e0c:	d00f      	beq.n	8000e2e <BSP_LCD_DisplayChar+0x82>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8000e0e:	7865      	ldrb	r5, [r4, #1]
 8000e10:	7822      	ldrb	r2, [r4, #0]
 8000e12:	022d      	lsls	r5, r5, #8
 8000e14:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
 8000e18:	78a2      	ldrb	r2, [r4, #2]
 8000e1a:	4315      	orrs	r5, r2
 8000e1c:	e000      	b.n	8000e20 <BSP_LCD_DisplayChar+0x74>
      line =  pchar[0];      
 8000e1e:	7825      	ldrb	r5, [r4, #0]
    for (j = 0; j < width; j++)
 8000e20:	2700      	movs	r7, #0
 8000e22:	45ba      	cmp	sl, r7
 8000e24:	d808      	bhi.n	8000e38 <BSP_LCD_DisplayChar+0x8c>
  for(i = 0; i < height; i++)
 8000e26:	f108 0801 	add.w	r8, r8, #1
 8000e2a:	4434      	add	r4, r6
 8000e2c:	e7e1      	b.n	8000df2 <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 8) | pchar[1];
 8000e2e:	7822      	ldrb	r2, [r4, #0]
 8000e30:	7865      	ldrb	r5, [r4, #1]
 8000e32:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8000e36:	e7f3      	b.n	8000e20 <BSP_LCD_DisplayChar+0x74>
      if(line & (1 << (width- j + offset- 1))) 
 8000e38:	9b03      	ldr	r3, [sp, #12]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	1bd9      	subs	r1, r3, r7
 8000e3e:	408a      	lsls	r2, r1
 8000e40:	490b      	ldr	r1, [pc, #44]	; (8000e70 <BSP_LCD_DisplayChar+0xc4>)
 8000e42:	422a      	tst	r2, r5
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8000e44:	6809      	ldr	r1, [r1, #0]
 8000e46:	f04f 020c 	mov.w	r2, #12
      if(line & (1 << (width- j + offset- 1))) 
 8000e4a:	d00a      	beq.n	8000e62 <BSP_LCD_DisplayChar+0xb6>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8000e4c:	9b01      	ldr	r3, [sp, #4]
 8000e4e:	434a      	muls	r2, r1
 8000e50:	19d8      	adds	r0, r3, r7
 8000e52:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <BSP_LCD_DisplayChar+0xc8>)
 8000e54:	589a      	ldr	r2, [r3, r2]
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8000e56:	4649      	mov	r1, r9
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	f7ff ff91 	bl	8000d80 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8000e5e:	3701      	adds	r7, #1
 8000e60:	e7df      	b.n	8000e22 <BSP_LCD_DisplayChar+0x76>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8000e62:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <BSP_LCD_DisplayChar+0xc8>)
 8000e64:	fb02 3201 	mla	r2, r2, r1, r3
 8000e68:	9b01      	ldr	r3, [sp, #4]
 8000e6a:	6852      	ldr	r2, [r2, #4]
 8000e6c:	19d8      	adds	r0, r3, r7
 8000e6e:	e7f2      	b.n	8000e56 <BSP_LCD_DisplayChar+0xaa>
 8000e70:	200000c8 	.word	0x200000c8
 8000e74:	2000010c 	.word	0x2000010c

08000e78 <BSP_LCD_DisplayStringAt>:
{
 8000e78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e7c:	469a      	mov	sl, r3
 8000e7e:	4604      	mov	r4, r0
 8000e80:	460f      	mov	r7, r1
 8000e82:	4616      	mov	r6, r2
  uint8_t  *ptr = pText;
 8000e84:	4613      	mov	r3, r2
 8000e86:	eba3 0906 	sub.w	r9, r3, r6
  while (*ptr++) size ++ ;
 8000e8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e8e:	2a00      	cmp	r2, #0
 8000e90:	d1f9      	bne.n	8000e86 <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000e92:	f7ff fdf3 	bl	8000a7c <BSP_LCD_GetXSize>
 8000e96:	4b25      	ldr	r3, [pc, #148]	; (8000f2c <BSP_LCD_DisplayStringAt+0xb4>)
 8000e98:	4d25      	ldr	r5, [pc, #148]	; (8000f30 <BSP_LCD_DisplayStringAt+0xb8>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	210c      	movs	r1, #12
 8000e9e:	fb01 5202 	mla	r2, r1, r2, r5
  switch (mode)
 8000ea2:	f1ba 0f01 	cmp.w	sl, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000ea6:	6892      	ldr	r2, [r2, #8]
 8000ea8:	4698      	mov	r8, r3
 8000eaa:	8892      	ldrh	r2, [r2, #4]
 8000eac:	fbb0 f0f2 	udiv	r0, r0, r2
  switch (mode)
 8000eb0:	d021      	beq.n	8000ef6 <BSP_LCD_DisplayStringAt+0x7e>
 8000eb2:	f1ba 0f02 	cmp.w	sl, #2
 8000eb6:	d025      	beq.n	8000f04 <BSP_LCD_DisplayStringAt+0x8c>
  uint8_t  *ptr = pText;
 8000eb8:	46b3      	mov	fp, r6
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000eba:	f04f 0a0c 	mov.w	sl, #12
 8000ebe:	f89b 2000 	ldrb.w	r2, [fp]
 8000ec2:	3200      	adds	r2, #0
 8000ec4:	bf18      	it	ne
 8000ec6:	2201      	movne	r2, #1
 8000ec8:	9201      	str	r2, [sp, #4]
 8000eca:	f7ff fdd7 	bl	8000a7c <BSP_LCD_GetXSize>
 8000ece:	f8d8 3000 	ldr.w	r3, [r8]
 8000ed2:	fb0a 5303 	mla	r3, sl, r3, r5
 8000ed6:	ebab 0906 	sub.w	r9, fp, r6
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	889b      	ldrh	r3, [r3, #4]
 8000ede:	fa1f f989 	uxth.w	r9, r9
 8000ee2:	fb03 0019 	mls	r0, r3, r9, r0
 8000ee6:	b280      	uxth	r0, r0
 8000ee8:	4298      	cmp	r0, r3
 8000eea:	d301      	bcc.n	8000ef0 <BSP_LCD_DisplayStringAt+0x78>
 8000eec:	9a01      	ldr	r2, [sp, #4]
 8000eee:	b972      	cbnz	r2, 8000f0e <BSP_LCD_DisplayStringAt+0x96>
}
 8000ef0:	b003      	add	sp, #12
 8000ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8000ef6:	eba0 0009 	sub.w	r0, r0, r9
 8000efa:	4350      	muls	r0, r2
 8000efc:	eb04 0050 	add.w	r0, r4, r0, lsr #1
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8000f00:	b284      	uxth	r4, r0
      break;
 8000f02:	e7d9      	b.n	8000eb8 <BSP_LCD_DisplayStringAt+0x40>
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8000f04:	eba0 0009 	sub.w	r0, r0, r9
 8000f08:	fb10 4002 	smlabb	r0, r0, r2, r4
 8000f0c:	e7f8      	b.n	8000f00 <BSP_LCD_DisplayStringAt+0x88>
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8000f0e:	4620      	mov	r0, r4
 8000f10:	f81b 2b01 	ldrb.w	r2, [fp], #1
 8000f14:	4639      	mov	r1, r7
 8000f16:	f7ff ff49 	bl	8000dac <BSP_LCD_DisplayChar>
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8000f1a:	f8d8 3000 	ldr.w	r3, [r8]
 8000f1e:	fb0a 5303 	mla	r3, sl, r3, r5
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	8898      	ldrh	r0, [r3, #4]
 8000f26:	4420      	add	r0, r4
 8000f28:	b284      	uxth	r4, r0
 8000f2a:	e7c8      	b.n	8000ebe <BSP_LCD_DisplayStringAt+0x46>
 8000f2c:	200000c8 	.word	0x200000c8
 8000f30:	2000010c 	.word	0x2000010c

08000f34 <BSP_LCD_DisplayStringAtLine>:
  return DrawProp[ActiveLayer].pFont;
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <BSP_LCD_DisplayStringAtLine+0x28>)
 8000f36:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <BSP_LCD_DisplayStringAtLine+0x2c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
{
 8000f3a:	b410      	push	{r4}
  return DrawProp[ActiveLayer].pFont;
 8000f3c:	240c      	movs	r4, #12
 8000f3e:	fb04 2303 	mla	r3, r4, r3, r2
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8000f42:	460a      	mov	r2, r1
 8000f44:	689b      	ldr	r3, [r3, #8]
}
 8000f46:	f85d 4b04 	ldr.w	r4, [sp], #4
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8000f4a:	88db      	ldrh	r3, [r3, #6]
 8000f4c:	fb13 f000 	smulbb	r0, r3, r0
 8000f50:	b281      	uxth	r1, r0
 8000f52:	2303      	movs	r3, #3
 8000f54:	2000      	movs	r0, #0
 8000f56:	f7ff bf8f 	b.w	8000e78 <BSP_LCD_DisplayStringAt>
 8000f5a:	bf00      	nop
 8000f5c:	200000c8 	.word	0x200000c8
 8000f60:	2000010c 	.word	0x2000010c

08000f64 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8000f64:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t tmpmrd =0;
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8000f68:	4c23      	ldr	r4, [pc, #140]	; (8000ff8 <BSP_SDRAM_Initialization_sequence+0x94>)
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000f6a:	4d24      	ldr	r5, [pc, #144]	; (8000ffc <BSP_SDRAM_Initialization_sequence+0x98>)
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000f6c:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd =0;
 8000f6e:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000f72:	2708      	movs	r7, #8
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000f74:	4621      	mov	r1, r4
{
 8000f76:	4682      	mov	sl, r0
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000f78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f7c:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd =0;
 8000f7e:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000f82:	e884 00c0 	stmia.w	r4, {r6, r7}
  Command.AutoRefreshNumber       = 1;
 8000f86:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition  = 0;
 8000f88:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000f8c:	f001 fb8e 	bl	80026ac <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000f90:	4630      	mov	r0, r6
 8000f92:	f000 f98b 	bl	80012ac <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8000f96:	2302      	movs	r3, #2
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8000f98:	4621      	mov	r1, r4
 8000f9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f9e:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000fa0:	e884 0088 	stmia.w	r4, {r3, r7}
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 4;
 8000fa4:	f04f 0904 	mov.w	r9, #4
  Command.AutoRefreshNumber       = 1;
 8000fa8:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition  = 0;
 8000faa:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8000fae:	f001 fb7d 	bl	80026ac <HAL_SDRAM_SendCommand>
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000fb2:	2303      	movs	r3, #3
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000fb4:	4621      	mov	r1, r4
 8000fb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fba:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000fbc:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.AutoRefreshNumber       = 4;
 8000fc0:	f8c4 9008 	str.w	r9, [r4, #8]
  Command.ModeRegisterDefinition  = 0;
 8000fc4:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000fc8:	f001 fb70 	bl	80026ac <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8000fcc:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000fd0:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = tmpmrd;
 8000fd2:	9b01      	ldr	r3, [sp, #4]
 8000fd4:	60e3      	str	r3, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000fd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fda:	4621      	mov	r1, r4
 8000fdc:	4628      	mov	r0, r5
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8000fde:	f8c4 9000 	str.w	r9, [r4]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000fe2:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber       = 1;
 8000fe4:	60a6      	str	r6, [r4, #8]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000fe6:	f001 fb61 	bl	80026ac <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8000fea:	4651      	mov	r1, sl
 8000fec:	4628      	mov	r0, r5
 8000fee:	f001 fb74 	bl	80026da <HAL_SDRAM_ProgramRefreshRate>
}
 8000ff2:	b002      	add	sp, #8
 8000ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff8:	20000154 	.word	0x20000154
 8000ffc:	20000164 	.word	0x20000164

08001000 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8001000:	b570      	push	{r4, r5, r6, lr}
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8001002:	4606      	mov	r6, r0
{
 8001004:	b08e      	sub	sp, #56	; 0x38
  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8001006:	2800      	cmp	r0, #0
 8001008:	f000 80ad 	beq.w	8001166 <BSP_SDRAM_MspInit+0x166>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800100c:	4b57      	ldr	r3, [pc, #348]	; (800116c <BSP_SDRAM_MspInit+0x16c>)
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800100e:	4858      	ldr	r0, [pc, #352]	; (8001170 <BSP_SDRAM_MspInit+0x170>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001010:	2500      	movs	r5, #0
 8001012:	9501      	str	r5, [sp, #4]
 8001014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001016:	f042 0201 	orr.w	r2, r2, #1
 800101a:	639a      	str	r2, [r3, #56]	; 0x38
 800101c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800101e:	f002 0201 	and.w	r2, r2, #1
 8001022:	9201      	str	r2, [sp, #4]
 8001024:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8001026:	9502      	str	r5, [sp, #8]
 8001028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800102a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800102e:	631a      	str	r2, [r3, #48]	; 0x30
 8001030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001032:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001036:	9202      	str	r2, [sp, #8]
 8001038:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103a:	9503      	str	r5, [sp, #12]
 800103c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800103e:	f042 0202 	orr.w	r2, r2, #2
 8001042:	631a      	str	r2, [r3, #48]	; 0x30
 8001044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001046:	f002 0202 	and.w	r2, r2, #2
 800104a:	9203      	str	r2, [sp, #12]
 800104c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104e:	9504      	str	r5, [sp, #16]
 8001050:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001052:	f042 0204 	orr.w	r2, r2, #4
 8001056:	631a      	str	r2, [r3, #48]	; 0x30
 8001058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800105a:	f002 0204 	and.w	r2, r2, #4
 800105e:	9204      	str	r2, [sp, #16]
 8001060:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001062:	9505      	str	r5, [sp, #20]
 8001064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001066:	f042 0208 	orr.w	r2, r2, #8
 800106a:	631a      	str	r2, [r3, #48]	; 0x30
 800106c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800106e:	f002 0208 	and.w	r2, r2, #8
 8001072:	9205      	str	r2, [sp, #20]
 8001074:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001076:	9506      	str	r5, [sp, #24]
 8001078:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800107a:	f042 0210 	orr.w	r2, r2, #16
 800107e:	631a      	str	r2, [r3, #48]	; 0x30
 8001080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001082:	f002 0210 	and.w	r2, r2, #16
 8001086:	9206      	str	r2, [sp, #24]
 8001088:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800108a:	9507      	str	r5, [sp, #28]
 800108c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800108e:	f042 0220 	orr.w	r2, r2, #32
 8001092:	631a      	str	r2, [r3, #48]	; 0x30
 8001094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001096:	f002 0220 	and.w	r2, r2, #32
 800109a:	9207      	str	r2, [sp, #28]
 800109c:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800109e:	9508      	str	r5, [sp, #32]
 80010a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010a6:	631a      	str	r2, [r3, #48]	; 0x30
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80010aa:	950b      	str	r5, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010b0:	9308      	str	r3, [sp, #32]
 80010b2:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80010b6:	ac0e      	add	r4, sp, #56	; 0x38
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80010b8:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80010ba:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80010bc:	230c      	movs	r3, #12
 80010be:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80010c0:	2360      	movs	r3, #96	; 0x60
 80010c2:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80010c6:	4621      	mov	r1, r4
 80010c8:	f000 fb80 	bl	80017cc <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80010cc:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80010ce:	4621      	mov	r1, r4
 80010d0:	4828      	ldr	r0, [pc, #160]	; (8001174 <BSP_SDRAM_MspInit+0x174>)
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80010d2:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80010d4:	f000 fb7a 	bl	80017cc <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80010d8:	f24c 7303 	movw	r3, #50947	; 0xc703
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80010dc:	4621      	mov	r1, r4
 80010de:	4826      	ldr	r0, [pc, #152]	; (8001178 <BSP_SDRAM_MspInit+0x178>)
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80010e0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80010e2:	f000 fb73 	bl	80017cc <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80010e6:	f64f 7383 	movw	r3, #65411	; 0xff83
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80010ea:	4621      	mov	r1, r4
 80010ec:	4823      	ldr	r0, [pc, #140]	; (800117c <BSP_SDRAM_MspInit+0x17c>)
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80010ee:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80010f0:	f000 fb6c 	bl	80017cc <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80010f4:	f64f 033f 	movw	r3, #63551	; 0xf83f
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80010f8:	4621      	mov	r1, r4
 80010fa:	4821      	ldr	r0, [pc, #132]	; (8001180 <BSP_SDRAM_MspInit+0x180>)
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80010fc:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80010fe:	f000 fb65 	bl	80017cc <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001102:	4621      	mov	r1, r4
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8001104:	f248 1333 	movw	r3, #33075	; 0x8133

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001108:	4c1e      	ldr	r4, [pc, #120]	; (8001184 <BSP_SDRAM_MspInit+0x184>)
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800110a:	481f      	ldr	r0, [pc, #124]	; (8001188 <BSP_SDRAM_MspInit+0x188>)
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800110c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800110e:	f000 fb5d 	bl	80017cc <HAL_GPIO_Init>
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001112:	2380      	movs	r3, #128	; 0x80
 8001114:	60a3      	str	r3, [r4, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001116:	f44f 7300 	mov.w	r3, #512	; 0x200
 800111a:	60e3      	str	r3, [r4, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800111c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001120:	6123      	str	r3, [r4, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001126:	6163      	str	r3, [r4, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001128:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800112c:	61a3      	str	r3, [r4, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800112e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001132:	6223      	str	r3, [r4, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001134:	2303      	movs	r3, #3
 8001136:	62a3      	str	r3, [r4, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001138:	6325      	str	r5, [r4, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <BSP_SDRAM_MspInit+0x18c>)
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800113c:	6334      	str	r4, [r6, #48]	; 0x30
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800113e:	4620      	mov	r0, r4
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8001140:	6023      	str	r3, [r4, #0]
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001142:	6065      	str	r5, [r4, #4]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8001144:	61e5      	str	r5, [r4, #28]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001146:	6265      	str	r5, [r4, #36]	; 0x24
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001148:	62e5      	str	r5, [r4, #44]	; 0x2c
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800114a:	63a6      	str	r6, [r4, #56]	; 0x38
  HAL_DMA_DeInit(&dmaHandle);
 800114c:	f000 f9c0 	bl	80014d0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8001150:	4620      	mov	r0, r4
 8001152:	f000 f93f 	bl	80013d4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001156:	2038      	movs	r0, #56	; 0x38
 8001158:	462a      	mov	r2, r5
 800115a:	210f      	movs	r1, #15
 800115c:	f000 f8cc 	bl	80012f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001160:	2038      	movs	r0, #56	; 0x38
 8001162:	f000 f8fd 	bl	8001360 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8001166:	b00e      	add	sp, #56	; 0x38
 8001168:	bd70      	pop	{r4, r5, r6, pc}
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800
 8001170:	40020400 	.word	0x40020400
 8001174:	40020800 	.word	0x40020800
 8001178:	40020c00 	.word	0x40020c00
 800117c:	40021000 	.word	0x40021000
 8001180:	40021400 	.word	0x40021400
 8001184:	200001b4 	.word	0x200001b4
 8001188:	40021800 	.word	0x40021800
 800118c:	40026410 	.word	0x40026410

08001190 <BSP_SDRAM_Init>:
{
 8001190:	b570      	push	{r4, r5, r6, lr}
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001192:	4c1a      	ldr	r4, [pc, #104]	; (80011fc <BSP_SDRAM_Init+0x6c>)
  Timing.LoadToActiveDelay    = 2;
 8001194:	4d1a      	ldr	r5, [pc, #104]	; (8001200 <BSP_SDRAM_Init+0x70>)
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001196:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <BSP_SDRAM_Init+0x74>)
 8001198:	6023      	str	r3, [r4, #0]
  Timing.LoadToActiveDelay    = 2;
 800119a:	2302      	movs	r3, #2
 800119c:	602b      	str	r3, [r5, #0]
  Timing.WriteRecoveryTime    = 2;
 800119e:	612b      	str	r3, [r5, #16]
  Timing.RPDelay              = 2;
 80011a0:	616b      	str	r3, [r5, #20]
  Timing.RCDDelay             = 2;
 80011a2:	61ab      	str	r3, [r5, #24]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80011a4:	2310      	movs	r3, #16
 80011a6:	6123      	str	r3, [r4, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80011a8:	2340      	movs	r3, #64	; 0x40
 80011aa:	6163      	str	r3, [r4, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80011ac:	f44f 73c0 	mov.w	r3, #384	; 0x180
  Timing.ExitSelfRefreshDelay = 7;
 80011b0:	2107      	movs	r1, #7
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80011b2:	61a3      	str	r3, [r4, #24]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80011b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  Timing.SelfRefreshTime      = 4;
 80011b8:	2204      	movs	r2, #4
  Timing.ExitSelfRefreshDelay = 7;
 80011ba:	6069      	str	r1, [r5, #4]
  Timing.RowCycleDelay        = 7;
 80011bc:	60e9      	str	r1, [r5, #12]
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80011be:	2601      	movs	r6, #1
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80011c0:	2100      	movs	r1, #0
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80011c2:	6223      	str	r3, [r4, #32]
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80011c4:	4620      	mov	r0, r4
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80011c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80011ca:	60e2      	str	r2, [r4, #12]
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80011cc:	62a3      	str	r3, [r4, #40]	; 0x28
  Timing.SelfRefreshTime      = 4;
 80011ce:	60aa      	str	r2, [r5, #8]
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80011d0:	6066      	str	r6, [r4, #4]
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80011d2:	60a1      	str	r1, [r4, #8]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80011d4:	61e1      	str	r1, [r4, #28]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80011d6:	6261      	str	r1, [r4, #36]	; 0x24
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80011d8:	f7ff ff12 	bl	8001000 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80011dc:	4629      	mov	r1, r5
 80011de:	4620      	mov	r0, r4
 80011e0:	f001 fa44 	bl	800266c <HAL_SDRAM_Init>
 80011e4:	4c08      	ldr	r4, [pc, #32]	; (8001208 <BSP_SDRAM_Init+0x78>)
    sdramstatus = SDRAM_ERROR;
 80011e6:	2800      	cmp	r0, #0
 80011e8:	bf14      	ite	ne
 80011ea:	4630      	movne	r0, r6
 80011ec:	2000      	moveq	r0, #0
 80011ee:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80011f0:	f240 506a 	movw	r0, #1386	; 0x56a
 80011f4:	f7ff feb6 	bl	8000f64 <BSP_SDRAM_Initialization_sequence>
}
 80011f8:	7820      	ldrb	r0, [r4, #0]
 80011fa:	bd70      	pop	{r4, r5, r6, pc}
 80011fc:	20000164 	.word	0x20000164
 8001200:	20000198 	.word	0x20000198
 8001204:	a0000140 	.word	0xa0000140
 8001208:	20000044 	.word	0x20000044

0800120c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800120c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800120e:	4a0e      	ldr	r2, [pc, #56]	; (8001248 <HAL_InitTick+0x3c>)
 8001210:	4b0e      	ldr	r3, [pc, #56]	; (800124c <HAL_InitTick+0x40>)
{
 8001212:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001214:	7818      	ldrb	r0, [r3, #0]
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	fbb3 f3f0 	udiv	r3, r3, r0
 800121e:	6810      	ldr	r0, [r2, #0]
 8001220:	fbb0 f0f3 	udiv	r0, r0, r3
 8001224:	f000 f8aa 	bl	800137c <HAL_SYSTICK_Config>
 8001228:	4604      	mov	r4, r0
 800122a:	b958      	cbnz	r0, 8001244 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122c:	2d0f      	cmp	r5, #15
 800122e:	d809      	bhi.n	8001244 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001230:	4602      	mov	r2, r0
 8001232:	4629      	mov	r1, r5
 8001234:	f04f 30ff 	mov.w	r0, #4294967295
 8001238:	f000 f85e 	bl	80012f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <HAL_InitTick+0x44>)
 800123e:	4620      	mov	r0, r4
 8001240:	601d      	str	r5, [r3, #0]
 8001242:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001244:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001246:	bd38      	pop	{r3, r4, r5, pc}
 8001248:	2000004c 	.word	0x2000004c
 800124c:	20000045 	.word	0x20000045
 8001250:	20000048 	.word	0x20000048

08001254 <HAL_Init>:
{
 8001254:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <HAL_Init+0x30>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800125e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001266:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800126e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001270:	2003      	movs	r0, #3
 8001272:	f000 f82f 	bl	80012d4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001276:	2000      	movs	r0, #0
 8001278:	f7ff ffc8 	bl	800120c <HAL_InitTick>
  HAL_MspInit();
 800127c:	f002 f85a 	bl	8003334 <HAL_MspInit>
}
 8001280:	2000      	movs	r0, #0
 8001282:	bd08      	pop	{r3, pc}
 8001284:	40023c00 	.word	0x40023c00

08001288 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001288:	4a03      	ldr	r2, [pc, #12]	; (8001298 <HAL_IncTick+0x10>)
 800128a:	4b04      	ldr	r3, [pc, #16]	; (800129c <HAL_IncTick+0x14>)
 800128c:	6811      	ldr	r1, [r2, #0]
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	440b      	add	r3, r1
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	200002c4 	.word	0x200002c4
 800129c:	20000045 	.word	0x20000045

080012a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80012a0:	4b01      	ldr	r3, [pc, #4]	; (80012a8 <HAL_GetTick+0x8>)
 80012a2:	6818      	ldr	r0, [r3, #0]
}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	200002c4 	.word	0x200002c4

080012ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012ac:	b538      	push	{r3, r4, r5, lr}
 80012ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80012b0:	f7ff fff6 	bl	80012a0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b4:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80012b6:	bf1c      	itt	ne
 80012b8:	4b05      	ldrne	r3, [pc, #20]	; (80012d0 <HAL_Delay+0x24>)
 80012ba:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80012bc:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80012be:	bf18      	it	ne
 80012c0:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012c2:	f7ff ffed 	bl	80012a0 <HAL_GetTick>
 80012c6:	1b40      	subs	r0, r0, r5
 80012c8:	4284      	cmp	r4, r0
 80012ca:	d8fa      	bhi.n	80012c2 <HAL_Delay+0x16>
  {
  }
}
 80012cc:	bd38      	pop	{r3, r4, r5, pc}
 80012ce:	bf00      	nop
 80012d0:	20000045 	.word	0x20000045

080012d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d4:	4a07      	ldr	r2, [pc, #28]	; (80012f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80012d6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012dc:	041b      	lsls	r3, r3, #16
 80012de:	0c1b      	lsrs	r3, r3, #16
 80012e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e4:	0200      	lsls	r0, r0, #8
 80012e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80012ee:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80012f0:	60d3      	str	r3, [r2, #12]
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f8:	4b17      	ldr	r3, [pc, #92]	; (8001358 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fa:	b530      	push	{r4, r5, lr}
 80012fc:	68dc      	ldr	r4, [r3, #12]
 80012fe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001302:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001306:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001308:	2b04      	cmp	r3, #4
 800130a:	bf28      	it	cs
 800130c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	f04f 0501 	mov.w	r5, #1
 8001314:	fa05 f303 	lsl.w	r3, r5, r3
 8001318:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131c:	bf8c      	ite	hi
 800131e:	3c03      	subhi	r4, #3
 8001320:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001322:	4019      	ands	r1, r3
 8001324:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001326:	fa05 f404 	lsl.w	r4, r5, r4
 800132a:	3c01      	subs	r4, #1
 800132c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800132e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	ea42 0201 	orr.w	r2, r2, r1
 8001334:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001338:	bfad      	iteet	ge
 800133a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133e:	f000 000f 	andlt.w	r0, r0, #15
 8001342:	4b06      	ldrlt	r3, [pc, #24]	; (800135c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001344:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001348:	bfb5      	itete	lt
 800134a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001350:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001354:	bd30      	pop	{r4, r5, pc}
 8001356:	bf00      	nop
 8001358:	e000ed00 	.word	0xe000ed00
 800135c:	e000ed14 	.word	0xe000ed14

08001360 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001360:	2800      	cmp	r0, #0
 8001362:	db08      	blt.n	8001376 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001364:	0942      	lsrs	r2, r0, #5
 8001366:	2301      	movs	r3, #1
 8001368:	f000 001f 	and.w	r0, r0, #31
 800136c:	fa03 f000 	lsl.w	r0, r3, r0
 8001370:	4b01      	ldr	r3, [pc, #4]	; (8001378 <HAL_NVIC_EnableIRQ+0x18>)
 8001372:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001376:	4770      	bx	lr
 8001378:	e000e100 	.word	0xe000e100

0800137c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800137c:	3801      	subs	r0, #1
 800137e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001382:	d20a      	bcs.n	800139a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001386:	4a07      	ldr	r2, [pc, #28]	; (80013a4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001388:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138a:	21f0      	movs	r1, #240	; 0xf0
 800138c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001390:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001392:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001394:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800139a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000e010 	.word	0xe000e010
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013a8:	6803      	ldr	r3, [r0, #0]
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013b0:	f023 0303 	bic.w	r3, r3, #3
 80013b4:	2118      	movs	r1, #24
 80013b6:	3a10      	subs	r2, #16
 80013b8:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013bc:	4904      	ldr	r1, [pc, #16]	; (80013d0 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80013be:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80013c0:	bf88      	it	hi
 80013c2:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013c4:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80013c6:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013c8:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 80013ca:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	08005308 	.word	0x08005308

080013d4 <HAL_DMA_Init>:
{
 80013d4:	b570      	push	{r4, r5, r6, lr}
 80013d6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80013d8:	f7ff ff62 	bl	80012a0 <HAL_GetTick>
 80013dc:	4605      	mov	r5, r0
  if(hdma == NULL)
 80013de:	2c00      	cmp	r4, #0
 80013e0:	d071      	beq.n	80014c6 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80013e2:	2300      	movs	r3, #0
 80013e4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80013e8:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80013ea:	2302      	movs	r3, #2
 80013ec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80013f0:	6813      	ldr	r3, [r2, #0]
 80013f2:	f023 0301 	bic.w	r3, r3, #1
 80013f6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013f8:	6821      	ldr	r1, [r4, #0]
 80013fa:	680b      	ldr	r3, [r1, #0]
 80013fc:	07d8      	lsls	r0, r3, #31
 80013fe:	d43c      	bmi.n	800147a <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8001400:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001402:	4d32      	ldr	r5, [pc, #200]	; (80014cc <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001404:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001406:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001408:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800140a:	68a3      	ldr	r3, [r4, #8]
 800140c:	4313      	orrs	r3, r2
 800140e:	68e2      	ldr	r2, [r4, #12]
 8001410:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001412:	6922      	ldr	r2, [r4, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	6962      	ldr	r2, [r4, #20]
 8001418:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800141a:	69e2      	ldr	r2, [r4, #28]
 800141c:	4303      	orrs	r3, r0
 800141e:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001420:	6a22      	ldr	r2, [r4, #32]
 8001422:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001424:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001426:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001428:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800142c:	bf01      	itttt	eq
 800142e:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8001430:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8001432:	4335      	orreq	r5, r6
 8001434:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8001436:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001438:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800143a:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800143c:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001440:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001444:	d10b      	bne.n	800145e <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8001446:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001448:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800144a:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800144c:	b13d      	cbz	r5, 800145e <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800144e:	b9f8      	cbnz	r0, 8001490 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8001450:	2a01      	cmp	r2, #1
 8001452:	d02d      	beq.n	80014b0 <HAL_DMA_Init+0xdc>
 8001454:	d301      	bcc.n	800145a <HAL_DMA_Init+0x86>
 8001456:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001458:	d101      	bne.n	800145e <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800145a:	01ea      	lsls	r2, r5, #7
 800145c:	d42b      	bmi.n	80014b6 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 800145e:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001460:	4620      	mov	r0, r4
 8001462:	f7ff ffa1 	bl	80013a8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001466:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001468:	233f      	movs	r3, #63	; 0x3f
 800146a:	4093      	lsls	r3, r2
 800146c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800146e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001470:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001472:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001474:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001478:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800147a:	f7ff ff11 	bl	80012a0 <HAL_GetTick>
 800147e:	1b40      	subs	r0, r0, r5
 8001480:	2805      	cmp	r0, #5
 8001482:	d9b9      	bls.n	80013f8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001484:	2320      	movs	r3, #32
 8001486:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001488:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 800148a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800148e:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001490:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001494:	d113      	bne.n	80014be <HAL_DMA_Init+0xea>
    switch (tmp)
 8001496:	2a03      	cmp	r2, #3
 8001498:	d8e1      	bhi.n	800145e <HAL_DMA_Init+0x8a>
 800149a:	a001      	add	r0, pc, #4	; (adr r0, 80014a0 <HAL_DMA_Init+0xcc>)
 800149c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80014a0:	080014b7 	.word	0x080014b7
 80014a4:	0800145b 	.word	0x0800145b
 80014a8:	080014b7 	.word	0x080014b7
 80014ac:	080014b1 	.word	0x080014b1
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014b0:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80014b4:	d1d3      	bne.n	800145e <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014b6:	2340      	movs	r3, #64	; 0x40
 80014b8:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80014ba:	2001      	movs	r0, #1
 80014bc:	e7e5      	b.n	800148a <HAL_DMA_Init+0xb6>
    switch (tmp)
 80014be:	2a02      	cmp	r2, #2
 80014c0:	d9f9      	bls.n	80014b6 <HAL_DMA_Init+0xe2>
 80014c2:	2a03      	cmp	r2, #3
 80014c4:	e7c8      	b.n	8001458 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80014c6:	2001      	movs	r0, #1
 80014c8:	bd70      	pop	{r4, r5, r6, pc}
 80014ca:	bf00      	nop
 80014cc:	f010803f 	.word	0xf010803f

080014d0 <HAL_DMA_DeInit>:
{
 80014d0:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 80014d2:	4605      	mov	r5, r0
 80014d4:	b320      	cbz	r0, 8001520 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80014d6:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80014da:	b2e4      	uxtb	r4, r4
 80014dc:	2c02      	cmp	r4, #2
 80014de:	d01d      	beq.n	800151c <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 80014e0:	6803      	ldr	r3, [r0, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 80014e8:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 80014ea:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 80014ec:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 80014ee:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80014f0:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80014f2:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80014f4:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80014f6:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 80014f8:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014fa:	f7ff ff55 	bl	80013a8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014fe:	6dea      	ldr	r2, [r5, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8001500:	63ec      	str	r4, [r5, #60]	; 0x3c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001502:	233f      	movs	r3, #63	; 0x3f
 8001504:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 8001506:	642c      	str	r4, [r5, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001508:	646c      	str	r4, [r5, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800150a:	64ac      	str	r4, [r5, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800150c:	64ec      	str	r4, [r5, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800150e:	652c      	str	r4, [r5, #80]	; 0x50
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001510:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001512:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8001514:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8001518:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
    return HAL_BUSY;
 800151c:	4620      	mov	r0, r4
}
 800151e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001520:	2001      	movs	r0, #1
 8001522:	bd38      	pop	{r3, r4, r5, pc}

08001524 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8001524:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8001526:	6804      	ldr	r4, [r0, #0]
 8001528:	9d04      	ldr	r5, [sp, #16]
 800152a:	6c66      	ldr	r6, [r4, #68]	; 0x44
 800152c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8001530:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 8001534:	4333      	orrs	r3, r6
 8001536:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001538:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800153a:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800153c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001540:	d130      	bne.n	80015a4 <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001542:	6886      	ldr	r6, [r0, #8]
 8001544:	b11e      	cbz	r6, 800154e <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001546:	2e01      	cmp	r6, #1
 8001548:	d103      	bne.n	8001552 <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800154a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U );
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800154e:	63a1      	str	r1, [r4, #56]	; 0x38
 8001550:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001552:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001554:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001558:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800155c:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800155e:	d107      	bne.n	8001570 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 8001560:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
 8001562:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001564:	02c9      	lsls	r1, r1, #11
 8001566:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 800156a:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800156e:	e7ee      	b.n	800154e <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001570:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001572:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001576:	d10a      	bne.n	800158e <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 8001578:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 800157a:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800157c:	029b      	lsls	r3, r3, #10
 800157e:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8001582:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
      tmp1 = (tmp1 >> 31U);
 8001586:	0fd1      	lsrs	r1, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001588:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 800158c:	e7df      	b.n	800154e <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 800158e:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 8001590:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001592:	0209      	lsls	r1, r1, #8
 8001594:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8001598:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
      tmp1 = (tmp1 >> 28U);
 800159c:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800159e:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 80015a2:	e7d4      	b.n	800154e <DMA2D_SetConfig+0x2a>
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80015a4:	60e1      	str	r1, [r4, #12]
 80015a6:	bd70      	pop	{r4, r5, r6, pc}

080015a8 <HAL_DMA2D_Init>:
{
 80015a8:	b510      	push	{r4, lr}
  if(hdma2d == NULL)
 80015aa:	4604      	mov	r4, r0
 80015ac:	b330      	cbz	r0, 80015fc <HAL_DMA2D_Init+0x54>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80015ae:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80015b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80015b6:	b91b      	cbnz	r3, 80015c0 <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 80015b8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 80015bc:	f001 feda 	bl	8003374 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80015c0:	6822      	ldr	r2, [r4, #0]
 80015c2:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80015c4:	2302      	movs	r3, #2
 80015c6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80015ca:	6813      	ldr	r3, [r2, #0]
 80015cc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80015d0:	430b      	orrs	r3, r1
 80015d2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80015d4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80015d6:	68a1      	ldr	r1, [r4, #8]
 80015d8:	f023 0307 	bic.w	r3, r3, #7
 80015dc:	430b      	orrs	r3, r1
 80015de:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80015e0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80015e2:	68e1      	ldr	r1, [r4, #12]
 80015e4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80015e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015ec:	430b      	orrs	r3, r1
 80015ee:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80015f0:	2000      	movs	r0, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80015f2:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80015f4:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80015f6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80015fa:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 80015fc:	2001      	movs	r0, #1
}
 80015fe:	bd10      	pop	{r4, pc}

08001600 <HAL_DMA2D_Start>:
{
 8001600:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8001602:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 8001606:	2c01      	cmp	r4, #1
{
 8001608:	4605      	mov	r5, r0
 800160a:	f04f 0402 	mov.w	r4, #2
  __HAL_LOCK(hdma2d);
 800160e:	d00f      	beq.n	8001630 <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001610:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8001614:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001616:	9c06      	ldr	r4, [sp, #24]
  __HAL_LOCK(hdma2d);
 8001618:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800161c:	9400      	str	r4, [sp, #0]
 800161e:	f7ff ff81 	bl	8001524 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8001622:	682a      	ldr	r2, [r5, #0]
 8001624:	6813      	ldr	r3, [r2, #0]
 8001626:	4333      	orrs	r3, r6
 8001628:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800162a:	2000      	movs	r0, #0
}
 800162c:	b002      	add	sp, #8
 800162e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8001630:	4620      	mov	r0, r4
 8001632:	e7fb      	b.n	800162c <HAL_DMA2D_Start+0x2c>

08001634 <HAL_DMA2D_PollForTransfer>:
{
 8001634:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8001636:	2300      	movs	r3, #0
 8001638:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800163a:	6803      	ldr	r3, [r0, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	07db      	lsls	r3, r3, #31
{
 8001640:	4604      	mov	r4, r0
 8001642:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001644:	d417      	bmi.n	8001676 <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8001646:	6822      	ldr	r2, [r4, #0]
 8001648:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800164a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800164c:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 800164e:	069e      	lsls	r6, r3, #26
 8001650:	d506      	bpl.n	8001660 <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 8001652:	f7ff fe25 	bl	80012a0 <HAL_GetTick>
 8001656:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001658:	6823      	ldr	r3, [r4, #0]
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	06d2      	lsls	r2, r2, #27
 800165e:	d543      	bpl.n	80016e8 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001660:	6823      	ldr	r3, [r4, #0]
 8001662:	2212      	movs	r2, #18
 8001664:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8001666:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001668:	2301      	movs	r3, #1
 800166a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 800166e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001672:	b002      	add	sp, #8
 8001674:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 8001676:	f7ff fe13 	bl	80012a0 <HAL_GetTick>
 800167a:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800167c:	6823      	ldr	r3, [r4, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	0792      	lsls	r2, r2, #30
 8001682:	d4e0      	bmi.n	8001646 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8001688:	9a01      	ldr	r2, [sp, #4]
 800168a:	f012 0f21 	tst.w	r2, #33	; 0x21
 800168e:	d017      	beq.n	80016c0 <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001690:	9a01      	ldr	r2, [sp, #4]
 8001692:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001694:	bf42      	ittt	mi
 8001696:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8001698:	f042 0202 	orrmi.w	r2, r2, #2
 800169c:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800169e:	9a01      	ldr	r2, [sp, #4]
 80016a0:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80016a2:	bf42      	ittt	mi
 80016a4:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 80016a6:	f042 0201 	orrmi.w	r2, r2, #1
 80016aa:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80016ac:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80016ae:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80016b0:	2304      	movs	r3, #4
 80016b2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 80016b6:	2300      	movs	r3, #0
 80016b8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 80016bc:	2001      	movs	r0, #1
 80016be:	e7d8      	b.n	8001672 <HAL_DMA2D_PollForTransfer+0x3e>
      if(Timeout != HAL_MAX_DELAY)
 80016c0:	1c69      	adds	r1, r5, #1
 80016c2:	d0dc      	beq.n	800167e <HAL_DMA2D_PollForTransfer+0x4a>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80016c4:	f7ff fdec 	bl	80012a0 <HAL_GetTick>
 80016c8:	1b80      	subs	r0, r0, r6
 80016ca:	4285      	cmp	r5, r0
 80016cc:	d301      	bcc.n	80016d2 <HAL_DMA2D_PollForTransfer+0x9e>
 80016ce:	2d00      	cmp	r5, #0
 80016d0:	d1d4      	bne.n	800167c <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80016d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80016d4:	f043 0320 	orr.w	r3, r3, #32
 80016d8:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80016da:	2003      	movs	r0, #3
          __HAL_UNLOCK(hdma2d);
 80016dc:	2300      	movs	r3, #0
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80016de:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 80016e2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 80016e6:	e7c4      	b.n	8001672 <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80016ec:	9a01      	ldr	r2, [sp, #4]
 80016ee:	f012 0f29 	tst.w	r2, #41	; 0x29
 80016f2:	d016      	beq.n	8001722 <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80016f4:	9a01      	ldr	r2, [sp, #4]
 80016f6:	0716      	lsls	r6, r2, #28
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80016f8:	bf42      	ittt	mi
 80016fa:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 80016fc:	f042 0204 	orrmi.w	r2, r2, #4
 8001700:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001702:	9a01      	ldr	r2, [sp, #4]
 8001704:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001706:	bf42      	ittt	mi
 8001708:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 800170a:	f042 0202 	orrmi.w	r2, r2, #2
 800170e:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001710:	9a01      	ldr	r2, [sp, #4]
 8001712:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001714:	bf42      	ittt	mi
 8001716:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8001718:	f042 0201 	orrmi.w	r2, r2, #1
 800171c:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800171e:	2229      	movs	r2, #41	; 0x29
 8001720:	e7c5      	b.n	80016ae <HAL_DMA2D_PollForTransfer+0x7a>
      if(Timeout != HAL_MAX_DELAY)
 8001722:	1c69      	adds	r1, r5, #1
 8001724:	d099      	beq.n	800165a <HAL_DMA2D_PollForTransfer+0x26>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001726:	f7ff fdbb 	bl	80012a0 <HAL_GetTick>
 800172a:	1b80      	subs	r0, r0, r6
 800172c:	4285      	cmp	r5, r0
 800172e:	d3d0      	bcc.n	80016d2 <HAL_DMA2D_PollForTransfer+0x9e>
 8001730:	2d00      	cmp	r5, #0
 8001732:	d191      	bne.n	8001658 <HAL_DMA2D_PollForTransfer+0x24>
 8001734:	e7cd      	b.n	80016d2 <HAL_DMA2D_PollForTransfer+0x9e>
	...

08001738 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8001738:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800173c:	2b01      	cmp	r3, #1
{
 800173e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001740:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdma2d);
 8001744:	d036      	beq.n	80017b4 <HAL_DMA2D_ConfigLayer+0x7c>
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001746:	010e      	lsls	r6, r1, #4
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001748:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800174c:	1983      	adds	r3, r0, r6
  __HAL_LOCK(hdma2d);
 800174e:	2201      	movs	r2, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001750:	69dd      	ldr	r5, [r3, #28]
  __HAL_LOCK(hdma2d);
 8001752:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001756:	6a1a      	ldr	r2, [r3, #32]
 8001758:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800175a:	4f1b      	ldr	r7, [pc, #108]	; (80017c8 <HAL_DMA2D_ConfigLayer+0x90>)
 800175c:	6803      	ldr	r3, [r0, #0]
 800175e:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001762:	3d09      	subs	r5, #9
 8001764:	2d01      	cmp	r5, #1
 8001766:	d80f      	bhi.n	8001788 <HAL_DMA2D_ConfigLayer+0x50>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001768:	f004 4e7f 	and.w	lr, r4, #4278190080	; 0xff000000
 800176c:	ea4e 0202 	orr.w	r2, lr, r2
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001770:	b969      	cbnz	r1, 800178e <HAL_DMA2D_ConfigLayer+0x56>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001772:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001774:	4039      	ands	r1, r7
 8001776:	430a      	orrs	r2, r1
 8001778:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800177a:	6982      	ldr	r2, [r0, #24]
 800177c:	619a      	str	r2, [r3, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800177e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001780:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001784:	629a      	str	r2, [r3, #40]	; 0x28
 8001786:	e00f      	b.n	80017a8 <HAL_DMA2D_ConfigLayer+0x70>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001788:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800178c:	b1a1      	cbz	r1, 80017b8 <HAL_DMA2D_ConfigLayer+0x80>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800178e:	69d9      	ldr	r1, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001790:	4406      	add	r6, r0
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001792:	4039      	ands	r1, r7
 8001794:	430a      	orrs	r2, r1
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001796:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001798:	61da      	str	r2, [r3, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800179a:	bf98      	it	ls
 800179c:	f024 447f 	bicls.w	r4, r4, #4278190080	; 0xff000000
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80017a0:	69b2      	ldr	r2, [r6, #24]
 80017a2:	611a      	str	r2, [r3, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80017a4:	bf98      	it	ls
 80017a6:	621c      	strls	r4, [r3, #32]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80017a8:	2301      	movs	r3, #1
 80017aa:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 80017ae:	2300      	movs	r3, #0
 80017b0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 80017b4:	4618      	mov	r0, r3
 80017b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80017b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80017ba:	4039      	ands	r1, r7
 80017bc:	430a      	orrs	r2, r1
 80017be:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80017c0:	6982      	ldr	r2, [r0, #24]
 80017c2:	619a      	str	r2, [r3, #24]
 80017c4:	e7f0      	b.n	80017a8 <HAL_DMA2D_ConfigLayer+0x70>
 80017c6:	bf00      	nop
 80017c8:	00fcfff0 	.word	0x00fcfff0

080017cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017d0:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d4:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 800199c <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017d8:	4a6e      	ldr	r2, [pc, #440]	; (8001994 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017da:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80019a0 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017de:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017e0:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80017e2:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017e6:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80017e8:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ec:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80017f0:	45b6      	cmp	lr, r6
 80017f2:	f040 80b6 	bne.w	8001962 <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017f6:	684c      	ldr	r4, [r1, #4]
 80017f8:	f024 0710 	bic.w	r7, r4, #16
 80017fc:	2f02      	cmp	r7, #2
 80017fe:	d116      	bne.n	800182e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001800:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001804:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001808:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800180c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001810:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001814:	f04f 0c0f 	mov.w	ip, #15
 8001818:	fa0c fc0b 	lsl.w	ip, ip, fp
 800181c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001820:	690d      	ldr	r5, [r1, #16]
 8001822:	fa05 f50b 	lsl.w	r5, r5, fp
 8001826:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800182a:	f8ca 5020 	str.w	r5, [sl, #32]
 800182e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001832:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001834:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001838:	fa05 f50a 	lsl.w	r5, r5, sl
 800183c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800183e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001842:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001846:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800184a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800184c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001850:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001852:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001856:	d811      	bhi.n	800187c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001858:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800185a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800185e:	68cf      	ldr	r7, [r1, #12]
 8001860:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001864:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001868:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800186a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800186c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001870:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001874:	409f      	lsls	r7, r3
 8001876:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800187a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800187c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800187e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001880:	688f      	ldr	r7, [r1, #8]
 8001882:	fa07 f70a 	lsl.w	r7, r7, sl
 8001886:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001888:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800188a:	00e5      	lsls	r5, r4, #3
 800188c:	d569      	bpl.n	8001962 <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188e:	f04f 0b00 	mov.w	fp, #0
 8001892:	f8cd b00c 	str.w	fp, [sp, #12]
 8001896:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800189a:	4d3f      	ldr	r5, [pc, #252]	; (8001998 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80018a0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80018a4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80018a8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80018ac:	9703      	str	r7, [sp, #12]
 80018ae:	9f03      	ldr	r7, [sp, #12]
 80018b0:	f023 0703 	bic.w	r7, r3, #3
 80018b4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80018b8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018bc:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80018c0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018c4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80018c8:	f04f 0e0f 	mov.w	lr, #15
 80018cc:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018d0:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018d2:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018d6:	d04b      	beq.n	8001970 <HAL_GPIO_Init+0x1a4>
 80018d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018dc:	42a8      	cmp	r0, r5
 80018de:	d049      	beq.n	8001974 <HAL_GPIO_Init+0x1a8>
 80018e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018e4:	42a8      	cmp	r0, r5
 80018e6:	d047      	beq.n	8001978 <HAL_GPIO_Init+0x1ac>
 80018e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018ec:	42a8      	cmp	r0, r5
 80018ee:	d045      	beq.n	800197c <HAL_GPIO_Init+0x1b0>
 80018f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018f4:	42a8      	cmp	r0, r5
 80018f6:	d043      	beq.n	8001980 <HAL_GPIO_Init+0x1b4>
 80018f8:	4548      	cmp	r0, r9
 80018fa:	d043      	beq.n	8001984 <HAL_GPIO_Init+0x1b8>
 80018fc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001900:	42a8      	cmp	r0, r5
 8001902:	d041      	beq.n	8001988 <HAL_GPIO_Init+0x1bc>
 8001904:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001908:	42a8      	cmp	r0, r5
 800190a:	d03f      	beq.n	800198c <HAL_GPIO_Init+0x1c0>
 800190c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001910:	42a8      	cmp	r0, r5
 8001912:	d03d      	beq.n	8001990 <HAL_GPIO_Init+0x1c4>
 8001914:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001918:	42a8      	cmp	r0, r5
 800191a:	bf14      	ite	ne
 800191c:	250a      	movne	r5, #10
 800191e:	2509      	moveq	r5, #9
 8001920:	fa05 f50c 	lsl.w	r5, r5, ip
 8001924:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001928:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800192a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800192c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800192e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001932:	bf0c      	ite	eq
 8001934:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001936:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001938:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800193a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800193c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001940:	bf0c      	ite	eq
 8001942:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001944:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001946:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001948:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800194a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800194e:	bf0c      	ite	eq
 8001950:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001952:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001954:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001956:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001958:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800195a:	bf54      	ite	pl
 800195c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800195e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001960:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001962:	3301      	adds	r3, #1
 8001964:	2b10      	cmp	r3, #16
 8001966:	f47f af3c 	bne.w	80017e2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800196a:	b005      	add	sp, #20
 800196c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001970:	465d      	mov	r5, fp
 8001972:	e7d5      	b.n	8001920 <HAL_GPIO_Init+0x154>
 8001974:	2501      	movs	r5, #1
 8001976:	e7d3      	b.n	8001920 <HAL_GPIO_Init+0x154>
 8001978:	2502      	movs	r5, #2
 800197a:	e7d1      	b.n	8001920 <HAL_GPIO_Init+0x154>
 800197c:	2503      	movs	r5, #3
 800197e:	e7cf      	b.n	8001920 <HAL_GPIO_Init+0x154>
 8001980:	2504      	movs	r5, #4
 8001982:	e7cd      	b.n	8001920 <HAL_GPIO_Init+0x154>
 8001984:	2505      	movs	r5, #5
 8001986:	e7cb      	b.n	8001920 <HAL_GPIO_Init+0x154>
 8001988:	2506      	movs	r5, #6
 800198a:	e7c9      	b.n	8001920 <HAL_GPIO_Init+0x154>
 800198c:	2507      	movs	r5, #7
 800198e:	e7c7      	b.n	8001920 <HAL_GPIO_Init+0x154>
 8001990:	2508      	movs	r5, #8
 8001992:	e7c5      	b.n	8001920 <HAL_GPIO_Init+0x154>
 8001994:	40013c00 	.word	0x40013c00
 8001998:	40020000 	.word	0x40020000
 800199c:	40023800 	.word	0x40023800
 80019a0:	40021400 	.word	0x40021400

080019a4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80019a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80019a8:	4d46      	ldr	r5, [pc, #280]	; (8001ac4 <HAL_GPIO_DeInit+0x120>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80019aa:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8001acc <HAL_GPIO_DeInit+0x128>
 80019ae:	f8df a120 	ldr.w	sl, [pc, #288]	; 8001ad0 <HAL_GPIO_DeInit+0x12c>
 80019b2:	f8df b120 	ldr.w	fp, [pc, #288]	; 8001ad4 <HAL_GPIO_DeInit+0x130>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019b6:	2200      	movs	r2, #0
    ioposition = 0x01U << position;
 80019b8:	2301      	movs	r3, #1
 80019ba:	fa03 fc02 	lsl.w	ip, r3, r2
    iocurrent = (GPIO_Pin) & ioposition;
 80019be:	ea0c 0401 	and.w	r4, ip, r1
    if(iocurrent == ioposition)
 80019c2:	45a4      	cmp	ip, r4
 80019c4:	d167      	bne.n	8001a96 <HAL_GPIO_DeInit+0xf2>
 80019c6:	f022 0603 	bic.w	r6, r2, #3
 80019ca:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80019ce:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80019d2:	f002 0e03 	and.w	lr, r2, #3
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80019d6:	4b3c      	ldr	r3, [pc, #240]	; (8001ac8 <HAL_GPIO_DeInit+0x124>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 80019d8:	f8d6 8008 	ldr.w	r8, [r6, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80019dc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80019e0:	270f      	movs	r7, #15
 80019e2:	fa07 f70e 	lsl.w	r7, r7, lr
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80019e6:	4298      	cmp	r0, r3
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80019e8:	ea08 0807 	and.w	r8, r8, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80019ec:	d058      	beq.n	8001aa0 <HAL_GPIO_DeInit+0xfc>
 80019ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019f2:	4298      	cmp	r0, r3
 80019f4:	d056      	beq.n	8001aa4 <HAL_GPIO_DeInit+0x100>
 80019f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019fa:	4298      	cmp	r0, r3
 80019fc:	d054      	beq.n	8001aa8 <HAL_GPIO_DeInit+0x104>
 80019fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a02:	4298      	cmp	r0, r3
 8001a04:	d052      	beq.n	8001aac <HAL_GPIO_DeInit+0x108>
 8001a06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a0a:	4298      	cmp	r0, r3
 8001a0c:	d050      	beq.n	8001ab0 <HAL_GPIO_DeInit+0x10c>
 8001a0e:	4548      	cmp	r0, r9
 8001a10:	d050      	beq.n	8001ab4 <HAL_GPIO_DeInit+0x110>
 8001a12:	4550      	cmp	r0, sl
 8001a14:	d050      	beq.n	8001ab8 <HAL_GPIO_DeInit+0x114>
 8001a16:	4558      	cmp	r0, fp
 8001a18:	d050      	beq.n	8001abc <HAL_GPIO_DeInit+0x118>
 8001a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a1e:	4298      	cmp	r0, r3
 8001a20:	d04e      	beq.n	8001ac0 <HAL_GPIO_DeInit+0x11c>
 8001a22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a26:	4298      	cmp	r0, r3
 8001a28:	bf0c      	ite	eq
 8001a2a:	2309      	moveq	r3, #9
 8001a2c:	230a      	movne	r3, #10
 8001a2e:	fa03 f30e 	lsl.w	r3, r3, lr
 8001a32:	4598      	cmp	r8, r3
 8001a34:	d110      	bne.n	8001a58 <HAL_GPIO_DeInit+0xb4>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001a36:	68b3      	ldr	r3, [r6, #8]
 8001a38:	ea23 0707 	bic.w	r7, r3, r7
 8001a3c:	60b7      	str	r7, [r6, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001a3e:	682b      	ldr	r3, [r5, #0]
 8001a40:	43e4      	mvns	r4, r4
 8001a42:	4023      	ands	r3, r4
 8001a44:	602b      	str	r3, [r5, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001a46:	686b      	ldr	r3, [r5, #4]
 8001a48:	4023      	ands	r3, r4
 8001a4a:	606b      	str	r3, [r5, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001a4c:	68ab      	ldr	r3, [r5, #8]
 8001a4e:	4023      	ands	r3, r4
 8001a50:	60ab      	str	r3, [r5, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001a52:	68eb      	ldr	r3, [r5, #12]
 8001a54:	401c      	ands	r4, r3
 8001a56:	60ec      	str	r4, [r5, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a58:	0056      	lsls	r6, r2, #1
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	6804      	ldr	r4, [r0, #0]
 8001a5e:	40b3      	lsls	r3, r6
 8001a60:	43db      	mvns	r3, r3
 8001a62:	401c      	ands	r4, r3
 8001a64:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a66:	08d4      	lsrs	r4, r2, #3
 8001a68:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8001a6c:	f002 0e07 	and.w	lr, r2, #7
 8001a70:	6a26      	ldr	r6, [r4, #32]
 8001a72:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001a76:	270f      	movs	r7, #15
 8001a78:	fa07 f70e 	lsl.w	r7, r7, lr
 8001a7c:	ea26 0707 	bic.w	r7, r6, r7
 8001a80:	6227      	str	r7, [r4, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a82:	6884      	ldr	r4, [r0, #8]
 8001a84:	401c      	ands	r4, r3
 8001a86:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a88:	6844      	ldr	r4, [r0, #4]
 8001a8a:	ea24 040c 	bic.w	r4, r4, ip
 8001a8e:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a90:	68c4      	ldr	r4, [r0, #12]
 8001a92:	4023      	ands	r3, r4
 8001a94:	60c3      	str	r3, [r0, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a96:	3201      	adds	r2, #1
 8001a98:	2a10      	cmp	r2, #16
 8001a9a:	d18d      	bne.n	80019b8 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8001a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	e7c4      	b.n	8001a2e <HAL_GPIO_DeInit+0x8a>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e7c2      	b.n	8001a2e <HAL_GPIO_DeInit+0x8a>
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	e7c0      	b.n	8001a2e <HAL_GPIO_DeInit+0x8a>
 8001aac:	2303      	movs	r3, #3
 8001aae:	e7be      	b.n	8001a2e <HAL_GPIO_DeInit+0x8a>
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	e7bc      	b.n	8001a2e <HAL_GPIO_DeInit+0x8a>
 8001ab4:	2305      	movs	r3, #5
 8001ab6:	e7ba      	b.n	8001a2e <HAL_GPIO_DeInit+0x8a>
 8001ab8:	2306      	movs	r3, #6
 8001aba:	e7b8      	b.n	8001a2e <HAL_GPIO_DeInit+0x8a>
 8001abc:	2307      	movs	r3, #7
 8001abe:	e7b6      	b.n	8001a2e <HAL_GPIO_DeInit+0x8a>
 8001ac0:	2308      	movs	r3, #8
 8001ac2:	e7b4      	b.n	8001a2e <HAL_GPIO_DeInit+0x8a>
 8001ac4:	40013c00 	.word	0x40013c00
 8001ac8:	40020000 	.word	0x40020000
 8001acc:	40021400 	.word	0x40021400
 8001ad0:	40021800 	.word	0x40021800
 8001ad4:	40021c00 	.word	0x40021c00

08001ad8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ad8:	b10a      	cbz	r2, 8001ade <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ada:	6181      	str	r1, [r0, #24]
 8001adc:	4770      	bx	lr
 8001ade:	0409      	lsls	r1, r1, #16
 8001ae0:	e7fb      	b.n	8001ada <HAL_GPIO_WritePin+0x2>
	...

08001ae4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ae4:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ae6:	4604      	mov	r4, r0
 8001ae8:	b908      	cbnz	r0, 8001aee <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8001aea:	2001      	movs	r0, #1
 8001aec:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001aee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001af2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001af6:	b91b      	cbnz	r3, 8001b00 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001af8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001afc:	f001 fc52 	bl	80033a4 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b00:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b02:	2324      	movs	r3, #36	; 0x24
 8001b04:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001b08:	6813      	ldr	r3, [r2, #0]
 8001b0a:	f023 0301 	bic.w	r3, r3, #1
 8001b0e:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b10:	f000 fc84 	bl	800241c <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b14:	6865      	ldr	r5, [r4, #4]
 8001b16:	4b41      	ldr	r3, [pc, #260]	; (8001c1c <HAL_I2C_Init+0x138>)
 8001b18:	429d      	cmp	r5, r3
 8001b1a:	d84d      	bhi.n	8001bb8 <HAL_I2C_Init+0xd4>
 8001b1c:	4b40      	ldr	r3, [pc, #256]	; (8001c20 <HAL_I2C_Init+0x13c>)
 8001b1e:	4298      	cmp	r0, r3
 8001b20:	d9e3      	bls.n	8001aea <HAL_I2C_Init+0x6>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b22:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001b24:	493f      	ldr	r1, [pc, #252]	; (8001c24 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b26:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001b28:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b30:	430b      	orrs	r3, r1
 8001b32:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b34:	6a13      	ldr	r3, [r2, #32]
 8001b36:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b3a:	3101      	adds	r1, #1
 8001b3c:	4319      	orrs	r1, r3
 8001b3e:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b40:	69d1      	ldr	r1, [r2, #28]
 8001b42:	4b36      	ldr	r3, [pc, #216]	; (8001c1c <HAL_I2C_Init+0x138>)
 8001b44:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001b48:	429d      	cmp	r5, r3
 8001b4a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001b4e:	f100 30ff 	add.w	r0, r0, #4294967295
 8001b52:	d848      	bhi.n	8001be6 <HAL_I2C_Init+0x102>
 8001b54:	006d      	lsls	r5, r5, #1
 8001b56:	fbb0 f0f5 	udiv	r0, r0, r5
 8001b5a:	3001      	adds	r0, #1
 8001b5c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	bf38      	it	cc
 8001b64:	2304      	movcc	r3, #4
 8001b66:	430b      	orrs	r3, r1
 8001b68:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b6a:	6811      	ldr	r1, [r2, #0]
 8001b6c:	6a20      	ldr	r0, [r4, #32]
 8001b6e:	69e3      	ldr	r3, [r4, #28]
 8001b70:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001b74:	4303      	orrs	r3, r0
 8001b76:	430b      	orrs	r3, r1
 8001b78:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b7a:	6891      	ldr	r1, [r2, #8]
 8001b7c:	68e0      	ldr	r0, [r4, #12]
 8001b7e:	6923      	ldr	r3, [r4, #16]
 8001b80:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001b84:	4303      	orrs	r3, r0
 8001b86:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001b8a:	430b      	orrs	r3, r1
 8001b8c:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b8e:	68d1      	ldr	r1, [r2, #12]
 8001b90:	69a0      	ldr	r0, [r4, #24]
 8001b92:	6963      	ldr	r3, [r4, #20]
 8001b94:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001b98:	4303      	orrs	r3, r0
 8001b9a:	430b      	orrs	r3, r1
 8001b9c:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b9e:	6813      	ldr	r3, [r2, #0]
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ba6:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001ba8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001baa:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bb0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8001bb6:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <HAL_I2C_Init+0x144>)
 8001bba:	4298      	cmp	r0, r3
 8001bbc:	d995      	bls.n	8001aea <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bbe:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001bc0:	4e18      	ldr	r6, [pc, #96]	; (8001c24 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bc2:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001bc4:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bcc:	4333      	orrs	r3, r6
 8001bce:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bd0:	6a13      	ldr	r3, [r2, #32]
 8001bd2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001bd6:	4371      	muls	r1, r6
 8001bd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bdc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001be0:	fbb1 f1f6 	udiv	r1, r1, r6
 8001be4:	e7a9      	b.n	8001b3a <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001be6:	68a3      	ldr	r3, [r4, #8]
 8001be8:	b953      	cbnz	r3, 8001c00 <HAL_I2C_Init+0x11c>
 8001bea:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001bee:	fbb0 f0f3 	udiv	r0, r0, r3
 8001bf2:	1c43      	adds	r3, r0, #1
 8001bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf8:	b16b      	cbz	r3, 8001c16 <HAL_I2C_Init+0x132>
 8001bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bfe:	e7b2      	b.n	8001b66 <HAL_I2C_Init+0x82>
 8001c00:	2319      	movs	r3, #25
 8001c02:	436b      	muls	r3, r5
 8001c04:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c08:	1c43      	adds	r3, r0, #1
 8001c0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c0e:	b113      	cbz	r3, 8001c16 <HAL_I2C_Init+0x132>
 8001c10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c14:	e7a7      	b.n	8001b66 <HAL_I2C_Init+0x82>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e7a5      	b.n	8001b66 <HAL_I2C_Init+0x82>
 8001c1a:	bf00      	nop
 8001c1c:	000186a0 	.word	0x000186a0
 8001c20:	001e847f 	.word	0x001e847f
 8001c24:	000f4240 	.word	0x000f4240
 8001c28:	003d08ff 	.word	0x003d08ff

08001c2c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c2c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	2a20      	cmp	r2, #32
{
 8001c34:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c36:	d116      	bne.n	8001c66 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c38:	2324      	movs	r3, #36	; 0x24
 8001c3a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c3e:	6803      	ldr	r3, [r0, #0]
 8001c40:	681c      	ldr	r4, [r3, #0]
 8001c42:	f024 0401 	bic.w	r4, r4, #1
 8001c46:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8001c48:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001c4a:	f024 0410 	bic.w	r4, r4, #16
 8001c4e:	625c      	str	r4, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8001c50:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001c52:	4321      	orrs	r1, r4
 8001c54:	6259      	str	r1, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8001c56:	6819      	ldr	r1, [r3, #0]
 8001c58:	f041 0101 	orr.w	r1, r1, #1
 8001c5c:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c5e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_OK;
 8001c62:	2000      	movs	r0, #0
 8001c64:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001c66:	2002      	movs	r0, #2
  }
}
 8001c68:	bd10      	pop	{r4, pc}

08001c6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c6a:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c6c:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8001c70:	b2e4      	uxtb	r4, r4
 8001c72:	2c20      	cmp	r4, #32
 8001c74:	d116      	bne.n	8001ca4 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c76:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c78:	2324      	movs	r3, #36	; 0x24
 8001c7a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8001c7e:	6815      	ldr	r5, [r2, #0]
 8001c80:	f025 0501 	bic.w	r5, r5, #1
 8001c84:	6015      	str	r5, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8001c86:	6a55      	ldr	r5, [r2, #36]	; 0x24

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8001c88:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001c8c:	402b      	ands	r3, r5

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8001c8e:	430b      	orrs	r3, r1

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	6253      	str	r3, [r2, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8001c94:	6813      	ldr	r3, [r2, #0]
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c9c:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d

    return HAL_OK;
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    return HAL_BUSY;
 8001ca4:	2002      	movs	r0, #2
  }
}
 8001ca6:	bd30      	pop	{r4, r5, pc}

08001ca8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001ca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001cac:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001cae:	6804      	ldr	r4, [r0, #0]
 8001cb0:	684f      	ldr	r7, [r1, #4]
 8001cb2:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001cb4:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8001cb8:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001cbc:	3284      	adds	r2, #132	; 0x84
 8001cbe:	18a3      	adds	r3, r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001cc0:	f10e 0601 	add.w	r6, lr, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001cc4:	6858      	ldr	r0, [r3, #4]
 8001cc6:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8001cca:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001ccc:	68e0      	ldr	r0, [r4, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001cce:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001cd2:	f3c0 400b 	ubfx	r0, r0, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001cd6:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001cd8:	4430      	add	r0, r6
 8001cda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001cde:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8001ce0:	68e0      	ldr	r0, [r4, #12]
 8001ce2:	68cd      	ldr	r5, [r1, #12]
 8001ce4:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8001ce8:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001cea:	6898      	ldr	r0, [r3, #8]
 8001cec:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8001cf0:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8001cf2:	68e6      	ldr	r6, [r4, #12]
 8001cf4:	6888      	ldr	r0, [r1, #8]
 8001cf6:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8001cfa:	3001      	adds	r0, #1
 8001cfc:	4430      	add	r0, r6
 8001cfe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001d02:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001d04:	6918      	ldr	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001d06:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001d08:	f020 0007 	bic.w	r0, r0, #7
 8001d0c:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001d0e:	f04f 0c00 	mov.w	ip, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001d12:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001d14:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8001d16:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8001d1a:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001d1e:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8001d22:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8001d26:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8001d2a:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8001d2e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001d32:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8001d34:	6958      	ldr	r0, [r3, #20]
 8001d36:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8001d3a:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8001d3c:	6948      	ldr	r0, [r1, #20]
 8001d3e:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8001d40:	69d8      	ldr	r0, [r3, #28]
 8001d42:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8001d46:	f020 0007 	bic.w	r0, r0, #7
 8001d4a:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8001d4c:	6a08      	ldr	r0, [r1, #32]
 8001d4e:	69cd      	ldr	r5, [r1, #28]
 8001d50:	4305      	orrs	r5, r0
 8001d52:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001d54:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001d56:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001d58:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001d5c:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001d5e:	b31e      	cbz	r6, 8001da8 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8001d60:	2e01      	cmp	r6, #1
 8001d62:	d023      	beq.n	8001dac <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001d64:	1eb0      	subs	r0, r6, #2
 8001d66:	2802      	cmp	r0, #2
 8001d68:	d922      	bls.n	8001db0 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001d6a:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8001d6c:	bf0c      	ite	eq
 8001d6e:	2002      	moveq	r0, #2
 8001d70:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001d72:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8001d74:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8001d78:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001d7a:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001d7c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001d7e:	eba7 070e 	sub.w	r7, r7, lr
 8001d82:	4345      	muls	r5, r0
 8001d84:	4378      	muls	r0, r7
 8001d86:	3003      	adds	r0, #3
 8001d88:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001d8c:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001d8e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d90:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8001d94:	f020 0007 	bic.w	r0, r0, #7
 8001d98:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001d9a:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001d9c:	58a3      	ldr	r3, [r4, r2]
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	50a3      	str	r3, [r4, r2]
 8001da4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8001da8:	2004      	movs	r0, #4
 8001daa:	e7e2      	b.n	8001d72 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8001dac:	2003      	movs	r0, #3
 8001dae:	e7e0      	b.n	8001d72 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8001db0:	2002      	movs	r0, #2
 8001db2:	e7de      	b.n	8001d72 <LTDC_SetConfig+0xca>

08001db4 <HAL_LTDC_Init>:
{
 8001db4:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8001db6:	4604      	mov	r4, r0
 8001db8:	2800      	cmp	r0, #0
 8001dba:	d063      	beq.n	8001e84 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8001dbc:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8001dc0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001dc4:	b91b      	cbnz	r3, 8001dce <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8001dc6:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8001dca:	f001 fb3f 	bl	800344c <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001dd4:	6823      	ldr	r3, [r4, #0]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001dd6:	68a0      	ldr	r0, [r4, #8]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001dd8:	699a      	ldr	r2, [r3, #24]
 8001dda:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8001dde:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001de0:	6862      	ldr	r2, [r4, #4]
 8001de2:	6999      	ldr	r1, [r3, #24]
 8001de4:	4302      	orrs	r2, r0
 8001de6:	68e0      	ldr	r0, [r4, #12]
 8001de8:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001dea:	6920      	ldr	r0, [r4, #16]
 8001dec:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001dee:	430a      	orrs	r2, r1
 8001df0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	4924      	ldr	r1, [pc, #144]	; (8001e88 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8001df6:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001df8:	400a      	ands	r2, r1
 8001dfa:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001e02:	69a0      	ldr	r0, [r4, #24]
 8001e04:	4302      	orrs	r2, r0
 8001e06:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001e08:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8001e0a:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001e0c:	400a      	ands	r2, r1
 8001e0e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001e16:	6a20      	ldr	r0, [r4, #32]
 8001e18:	4302      	orrs	r2, r0
 8001e1a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001e1c:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8001e1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001e20:	400a      	ands	r2, r1
 8001e22:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8001e24:	691a      	ldr	r2, [r3, #16]
 8001e26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001e2a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001e2c:	4302      	orrs	r2, r0
 8001e2e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001e30:	695a      	ldr	r2, [r3, #20]
 8001e32:	4011      	ands	r1, r2
 8001e34:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8001e36:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8001e38:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8001e3a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001e3e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001e40:	430a      	orrs	r2, r1
 8001e42:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001e44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8001e46:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8001e4a:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001e4e:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8001e52:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001e54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e56:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8001e60:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001e64:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8001e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e68:	f042 0206 	orr.w	r2, r2, #6
 8001e6c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8001e6e:	699a      	ldr	r2, [r3, #24]
 8001e70:	f042 0201 	orr.w	r2, r2, #1
 8001e74:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001e76:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8001e78:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001e7a:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8001e7e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 8001e82:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001e84:	2001      	movs	r0, #1
}
 8001e86:	bd38      	pop	{r3, r4, r5, pc}
 8001e88:	f000f800 	.word	0xf000f800

08001e8c <HAL_LTDC_ConfigLayer>:
{
 8001e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8001e8e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001e92:	2b01      	cmp	r3, #1
{
 8001e94:	4606      	mov	r6, r0
 8001e96:	468e      	mov	lr, r1
 8001e98:	4694      	mov	ip, r2
 8001e9a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 8001e9e:	d01d      	beq.n	8001edc <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001ea0:	2434      	movs	r4, #52	; 0x34
 8001ea2:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001ea4:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001ea8:	fb04 6402 	mla	r4, r4, r2, r6
 8001eac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  __HAL_LOCK(hltdc);
 8001eae:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001eb0:	3438      	adds	r4, #56	; 0x38
  __HAL_LOCK(hltdc);
 8001eb2:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ebc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ebe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ec0:	682b      	ldr	r3, [r5, #0]
 8001ec2:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001ec4:	4630      	mov	r0, r6
 8001ec6:	4662      	mov	r2, ip
 8001ec8:	4671      	mov	r1, lr
 8001eca:	f7ff feed 	bl	8001ca8 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001ece:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8001ed0:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001ed2:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8001ed4:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8001ed8:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8001edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001ee0 <HAL_LTDC_EnableDither>:
  __HAL_LOCK(hltdc);
 8001ee0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	f04f 0302 	mov.w	r3, #2
 8001eea:	d00c      	beq.n	8001f06 <HAL_LTDC_EnableDither+0x26>
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8001eec:	4a07      	ldr	r2, [pc, #28]	; (8001f0c <HAL_LTDC_EnableDither+0x2c>)
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001eee:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8001ef2:	6993      	ldr	r3, [r2, #24]
 8001ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef8:	6193      	str	r3, [r2, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8001efa:	2301      	movs	r3, #1
 8001efc:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8001f00:	2300      	movs	r3, #0
 8001f02:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8001f06:	4618      	mov	r0, r3
}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40016800 	.word	0x40016800

08001f10 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f10:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	9301      	str	r3, [sp, #4]
 8001f16:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f18:	4c18      	ldr	r4, [pc, #96]	; (8001f7c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f1c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f20:	641a      	str	r2, [r3, #64]	; 0x40
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f28:	9301      	str	r3, [sp, #4]
 8001f2a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f2c:	4b14      	ldr	r3, [pc, #80]	; (8001f80 <HAL_PWREx_EnableOverDrive+0x70>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001f32:	f7ff f9b5 	bl	80012a0 <HAL_GetTick>
 8001f36:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f38:	6863      	ldr	r3, [r4, #4]
 8001f3a:	03da      	lsls	r2, r3, #15
 8001f3c:	d50b      	bpl.n	8001f56 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f40:	4c0e      	ldr	r4, [pc, #56]	; (8001f7c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f42:	2201      	movs	r2, #1
 8001f44:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001f46:	f7ff f9ab 	bl	80012a0 <HAL_GetTick>
 8001f4a:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f4c:	6863      	ldr	r3, [r4, #4]
 8001f4e:	039b      	lsls	r3, r3, #14
 8001f50:	d50a      	bpl.n	8001f68 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001f52:	2000      	movs	r0, #0
 8001f54:	e006      	b.n	8001f64 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f56:	f7ff f9a3 	bl	80012a0 <HAL_GetTick>
 8001f5a:	1b40      	subs	r0, r0, r5
 8001f5c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001f60:	d9ea      	bls.n	8001f38 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8001f62:	2003      	movs	r0, #3
}
 8001f64:	b003      	add	sp, #12
 8001f66:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f68:	f7ff f99a 	bl	80012a0 <HAL_GetTick>
 8001f6c:	1b40      	subs	r0, r0, r5
 8001f6e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001f72:	d9eb      	bls.n	8001f4c <HAL_PWREx_EnableOverDrive+0x3c>
 8001f74:	e7f5      	b.n	8001f62 <HAL_PWREx_EnableOverDrive+0x52>
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40007000 	.word	0x40007000
 8001f80:	420e0040 	.word	0x420e0040
 8001f84:	420e0044 	.word	0x420e0044

08001f88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f8c:	4604      	mov	r4, r0
 8001f8e:	b918      	cbnz	r0, 8001f98 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001f90:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001f92:	b002      	add	sp, #8
 8001f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f98:	6803      	ldr	r3, [r0, #0]
 8001f9a:	07dd      	lsls	r5, r3, #31
 8001f9c:	d410      	bmi.n	8001fc0 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f9e:	6823      	ldr	r3, [r4, #0]
 8001fa0:	0798      	lsls	r0, r3, #30
 8001fa2:	d458      	bmi.n	8002056 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa4:	6823      	ldr	r3, [r4, #0]
 8001fa6:	071a      	lsls	r2, r3, #28
 8001fa8:	f100 809a 	bmi.w	80020e0 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fac:	6823      	ldr	r3, [r4, #0]
 8001fae:	075b      	lsls	r3, r3, #29
 8001fb0:	f100 80b8 	bmi.w	8002124 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fb4:	69a2      	ldr	r2, [r4, #24]
 8001fb6:	2a00      	cmp	r2, #0
 8001fb8:	f040 8119 	bne.w	80021ee <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	e7e8      	b.n	8001f92 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fc0:	4ba6      	ldr	r3, [pc, #664]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	f002 020c 	and.w	r2, r2, #12
 8001fc8:	2a04      	cmp	r2, #4
 8001fca:	d007      	beq.n	8001fdc <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fd2:	2a08      	cmp	r2, #8
 8001fd4:	d10a      	bne.n	8001fec <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	0259      	lsls	r1, r3, #9
 8001fda:	d507      	bpl.n	8001fec <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fdc:	4b9f      	ldr	r3, [pc, #636]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	039a      	lsls	r2, r3, #14
 8001fe2:	d5dc      	bpl.n	8001f9e <HAL_RCC_OscConfig+0x16>
 8001fe4:	6863      	ldr	r3, [r4, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1d9      	bne.n	8001f9e <HAL_RCC_OscConfig+0x16>
 8001fea:	e7d1      	b.n	8001f90 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fec:	6863      	ldr	r3, [r4, #4]
 8001fee:	4d9b      	ldr	r5, [pc, #620]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
 8001ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff4:	d111      	bne.n	800201a <HAL_RCC_OscConfig+0x92>
 8001ff6:	682b      	ldr	r3, [r5, #0]
 8001ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ffc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001ffe:	f7ff f94f 	bl	80012a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002002:	4d96      	ldr	r5, [pc, #600]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002004:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002006:	682b      	ldr	r3, [r5, #0]
 8002008:	039b      	lsls	r3, r3, #14
 800200a:	d4c8      	bmi.n	8001f9e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800200c:	f7ff f948 	bl	80012a0 <HAL_GetTick>
 8002010:	1b80      	subs	r0, r0, r6
 8002012:	2864      	cmp	r0, #100	; 0x64
 8002014:	d9f7      	bls.n	8002006 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8002016:	2003      	movs	r0, #3
 8002018:	e7bb      	b.n	8001f92 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800201a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800201e:	d104      	bne.n	800202a <HAL_RCC_OscConfig+0xa2>
 8002020:	682b      	ldr	r3, [r5, #0]
 8002022:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002026:	602b      	str	r3, [r5, #0]
 8002028:	e7e5      	b.n	8001ff6 <HAL_RCC_OscConfig+0x6e>
 800202a:	682a      	ldr	r2, [r5, #0]
 800202c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002030:	602a      	str	r2, [r5, #0]
 8002032:	682a      	ldr	r2, [r5, #0]
 8002034:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002038:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1df      	bne.n	8001ffe <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800203e:	f7ff f92f 	bl	80012a0 <HAL_GetTick>
 8002042:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002044:	682b      	ldr	r3, [r5, #0]
 8002046:	039f      	lsls	r7, r3, #14
 8002048:	d5a9      	bpl.n	8001f9e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800204a:	f7ff f929 	bl	80012a0 <HAL_GetTick>
 800204e:	1b80      	subs	r0, r0, r6
 8002050:	2864      	cmp	r0, #100	; 0x64
 8002052:	d9f7      	bls.n	8002044 <HAL_RCC_OscConfig+0xbc>
 8002054:	e7df      	b.n	8002016 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002056:	4b81      	ldr	r3, [pc, #516]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	f012 0f0c 	tst.w	r2, #12
 800205e:	d007      	beq.n	8002070 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002066:	2a08      	cmp	r2, #8
 8002068:	d111      	bne.n	800208e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	025e      	lsls	r6, r3, #9
 800206e:	d40e      	bmi.n	800208e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002070:	4b7a      	ldr	r3, [pc, #488]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	0795      	lsls	r5, r2, #30
 8002076:	d502      	bpl.n	800207e <HAL_RCC_OscConfig+0xf6>
 8002078:	68e2      	ldr	r2, [r4, #12]
 800207a:	2a01      	cmp	r2, #1
 800207c:	d188      	bne.n	8001f90 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	6921      	ldr	r1, [r4, #16]
 8002082:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002086:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800208a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208c:	e78a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800208e:	68e2      	ldr	r2, [r4, #12]
 8002090:	4b73      	ldr	r3, [pc, #460]	; (8002260 <HAL_RCC_OscConfig+0x2d8>)
 8002092:	b1b2      	cbz	r2, 80020c2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8002094:	2201      	movs	r2, #1
 8002096:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002098:	f7ff f902 	bl	80012a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209c:	4d6f      	ldr	r5, [pc, #444]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800209e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a0:	682b      	ldr	r3, [r5, #0]
 80020a2:	0798      	lsls	r0, r3, #30
 80020a4:	d507      	bpl.n	80020b6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a6:	682b      	ldr	r3, [r5, #0]
 80020a8:	6922      	ldr	r2, [r4, #16]
 80020aa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80020ae:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80020b2:	602b      	str	r3, [r5, #0]
 80020b4:	e776      	b.n	8001fa4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020b6:	f7ff f8f3 	bl	80012a0 <HAL_GetTick>
 80020ba:	1b80      	subs	r0, r0, r6
 80020bc:	2802      	cmp	r0, #2
 80020be:	d9ef      	bls.n	80020a0 <HAL_RCC_OscConfig+0x118>
 80020c0:	e7a9      	b.n	8002016 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80020c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80020c4:	f7ff f8ec 	bl	80012a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c8:	4d64      	ldr	r5, [pc, #400]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80020ca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020cc:	682b      	ldr	r3, [r5, #0]
 80020ce:	0799      	lsls	r1, r3, #30
 80020d0:	f57f af68 	bpl.w	8001fa4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d4:	f7ff f8e4 	bl	80012a0 <HAL_GetTick>
 80020d8:	1b80      	subs	r0, r0, r6
 80020da:	2802      	cmp	r0, #2
 80020dc:	d9f6      	bls.n	80020cc <HAL_RCC_OscConfig+0x144>
 80020de:	e79a      	b.n	8002016 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020e0:	6962      	ldr	r2, [r4, #20]
 80020e2:	4b60      	ldr	r3, [pc, #384]	; (8002264 <HAL_RCC_OscConfig+0x2dc>)
 80020e4:	b17a      	cbz	r2, 8002106 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80020e6:	2201      	movs	r2, #1
 80020e8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80020ea:	f7ff f8d9 	bl	80012a0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ee:	4d5b      	ldr	r5, [pc, #364]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80020f0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80020f4:	079f      	lsls	r7, r3, #30
 80020f6:	f53f af59 	bmi.w	8001fac <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020fa:	f7ff f8d1 	bl	80012a0 <HAL_GetTick>
 80020fe:	1b80      	subs	r0, r0, r6
 8002100:	2802      	cmp	r0, #2
 8002102:	d9f6      	bls.n	80020f2 <HAL_RCC_OscConfig+0x16a>
 8002104:	e787      	b.n	8002016 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8002106:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002108:	f7ff f8ca 	bl	80012a0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210c:	4d53      	ldr	r5, [pc, #332]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800210e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002110:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002112:	0798      	lsls	r0, r3, #30
 8002114:	f57f af4a 	bpl.w	8001fac <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002118:	f7ff f8c2 	bl	80012a0 <HAL_GetTick>
 800211c:	1b80      	subs	r0, r0, r6
 800211e:	2802      	cmp	r0, #2
 8002120:	d9f6      	bls.n	8002110 <HAL_RCC_OscConfig+0x188>
 8002122:	e778      	b.n	8002016 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002124:	4b4d      	ldr	r3, [pc, #308]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
 8002126:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002128:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800212c:	d128      	bne.n	8002180 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800212e:	9201      	str	r2, [sp, #4]
 8002130:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002132:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002136:	641a      	str	r2, [r3, #64]	; 0x40
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213e:	9301      	str	r3, [sp, #4]
 8002140:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002142:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002144:	4d48      	ldr	r5, [pc, #288]	; (8002268 <HAL_RCC_OscConfig+0x2e0>)
 8002146:	682b      	ldr	r3, [r5, #0]
 8002148:	05d9      	lsls	r1, r3, #23
 800214a:	d51b      	bpl.n	8002184 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800214c:	68a3      	ldr	r3, [r4, #8]
 800214e:	4d43      	ldr	r5, [pc, #268]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
 8002150:	2b01      	cmp	r3, #1
 8002152:	d127      	bne.n	80021a4 <HAL_RCC_OscConfig+0x21c>
 8002154:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800215c:	f7ff f8a0 	bl	80012a0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002160:	4d3e      	ldr	r5, [pc, #248]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002162:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002164:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002168:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800216a:	079b      	lsls	r3, r3, #30
 800216c:	d539      	bpl.n	80021e2 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800216e:	2e00      	cmp	r6, #0
 8002170:	f43f af20 	beq.w	8001fb4 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002174:	4a39      	ldr	r2, [pc, #228]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
 8002176:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800217c:	6413      	str	r3, [r2, #64]	; 0x40
 800217e:	e719      	b.n	8001fb4 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8002180:	2600      	movs	r6, #0
 8002182:	e7df      	b.n	8002144 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002184:	682b      	ldr	r3, [r5, #0]
 8002186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800218c:	f7ff f888 	bl	80012a0 <HAL_GetTick>
 8002190:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002192:	682b      	ldr	r3, [r5, #0]
 8002194:	05da      	lsls	r2, r3, #23
 8002196:	d4d9      	bmi.n	800214c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002198:	f7ff f882 	bl	80012a0 <HAL_GetTick>
 800219c:	1bc0      	subs	r0, r0, r7
 800219e:	2802      	cmp	r0, #2
 80021a0:	d9f7      	bls.n	8002192 <HAL_RCC_OscConfig+0x20a>
 80021a2:	e738      	b.n	8002016 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a4:	2b05      	cmp	r3, #5
 80021a6:	d104      	bne.n	80021b2 <HAL_RCC_OscConfig+0x22a>
 80021a8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80021aa:	f043 0304 	orr.w	r3, r3, #4
 80021ae:	672b      	str	r3, [r5, #112]	; 0x70
 80021b0:	e7d0      	b.n	8002154 <HAL_RCC_OscConfig+0x1cc>
 80021b2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80021b4:	f022 0201 	bic.w	r2, r2, #1
 80021b8:	672a      	str	r2, [r5, #112]	; 0x70
 80021ba:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80021bc:	f022 0204 	bic.w	r2, r2, #4
 80021c0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1ca      	bne.n	800215c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80021c6:	f7ff f86b 	bl	80012a0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ca:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80021ce:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80021d2:	0798      	lsls	r0, r3, #30
 80021d4:	d5cb      	bpl.n	800216e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d6:	f7ff f863 	bl	80012a0 <HAL_GetTick>
 80021da:	1bc0      	subs	r0, r0, r7
 80021dc:	4540      	cmp	r0, r8
 80021de:	d9f7      	bls.n	80021d0 <HAL_RCC_OscConfig+0x248>
 80021e0:	e719      	b.n	8002016 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e2:	f7ff f85d 	bl	80012a0 <HAL_GetTick>
 80021e6:	1bc0      	subs	r0, r0, r7
 80021e8:	4540      	cmp	r0, r8
 80021ea:	d9bd      	bls.n	8002168 <HAL_RCC_OscConfig+0x1e0>
 80021ec:	e713      	b.n	8002016 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021ee:	4d1b      	ldr	r5, [pc, #108]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
 80021f0:	68ab      	ldr	r3, [r5, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	f43f aeca 	beq.w	8001f90 <HAL_RCC_OscConfig+0x8>
 80021fc:	4e1b      	ldr	r6, [pc, #108]	; (800226c <HAL_RCC_OscConfig+0x2e4>)
 80021fe:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002200:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002202:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002204:	d134      	bne.n	8002270 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8002206:	f7ff f84b 	bl	80012a0 <HAL_GetTick>
 800220a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220c:	682b      	ldr	r3, [r5, #0]
 800220e:	0199      	lsls	r1, r3, #6
 8002210:	d41e      	bmi.n	8002250 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002212:	6a22      	ldr	r2, [r4, #32]
 8002214:	69e3      	ldr	r3, [r4, #28]
 8002216:	4313      	orrs	r3, r2
 8002218:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800221a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800221e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002220:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002224:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002226:	4c0d      	ldr	r4, [pc, #52]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002228:	0852      	lsrs	r2, r2, #1
 800222a:	3a01      	subs	r2, #1
 800222c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002230:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002232:	2301      	movs	r3, #1
 8002234:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002236:	f7ff f833 	bl	80012a0 <HAL_GetTick>
 800223a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223c:	6823      	ldr	r3, [r4, #0]
 800223e:	019a      	lsls	r2, r3, #6
 8002240:	f53f aebc 	bmi.w	8001fbc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002244:	f7ff f82c 	bl	80012a0 <HAL_GetTick>
 8002248:	1b40      	subs	r0, r0, r5
 800224a:	2802      	cmp	r0, #2
 800224c:	d9f6      	bls.n	800223c <HAL_RCC_OscConfig+0x2b4>
 800224e:	e6e2      	b.n	8002016 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002250:	f7ff f826 	bl	80012a0 <HAL_GetTick>
 8002254:	1bc0      	subs	r0, r0, r7
 8002256:	2802      	cmp	r0, #2
 8002258:	d9d8      	bls.n	800220c <HAL_RCC_OscConfig+0x284>
 800225a:	e6dc      	b.n	8002016 <HAL_RCC_OscConfig+0x8e>
 800225c:	40023800 	.word	0x40023800
 8002260:	42470000 	.word	0x42470000
 8002264:	42470e80 	.word	0x42470e80
 8002268:	40007000 	.word	0x40007000
 800226c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8002270:	f7ff f816 	bl	80012a0 <HAL_GetTick>
 8002274:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002276:	682b      	ldr	r3, [r5, #0]
 8002278:	019b      	lsls	r3, r3, #6
 800227a:	f57f ae9f 	bpl.w	8001fbc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800227e:	f7ff f80f 	bl	80012a0 <HAL_GetTick>
 8002282:	1b00      	subs	r0, r0, r4
 8002284:	2802      	cmp	r0, #2
 8002286:	d9f6      	bls.n	8002276 <HAL_RCC_OscConfig+0x2ee>
 8002288:	e6c5      	b.n	8002016 <HAL_RCC_OscConfig+0x8e>
 800228a:	bf00      	nop

0800228c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800228c:	4913      	ldr	r1, [pc, #76]	; (80022dc <HAL_RCC_GetSysClockFreq+0x50>)
{
 800228e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002290:	688b      	ldr	r3, [r1, #8]
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	2b04      	cmp	r3, #4
 8002298:	d003      	beq.n	80022a2 <HAL_RCC_GetSysClockFreq+0x16>
 800229a:	2b08      	cmp	r3, #8
 800229c:	d003      	beq.n	80022a6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800229e:	4810      	ldr	r0, [pc, #64]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80022a0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80022a2:	4810      	ldr	r0, [pc, #64]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x58>)
 80022a4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022a6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022a8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022aa:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022ac:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022b0:	bf14      	ite	ne
 80022b2:	480c      	ldrne	r0, [pc, #48]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022b4:	480a      	ldreq	r0, [pc, #40]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022b6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80022ba:	bf18      	it	ne
 80022bc:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022be:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022c2:	fba1 0100 	umull	r0, r1, r1, r0
 80022c6:	f7fd ff91 	bl	80001ec <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022ca:	4b04      	ldr	r3, [pc, #16]	; (80022dc <HAL_RCC_GetSysClockFreq+0x50>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80022d2:	3301      	adds	r3, #1
 80022d4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80022d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80022da:	bd08      	pop	{r3, pc}
 80022dc:	40023800 	.word	0x40023800
 80022e0:	00f42400 	.word	0x00f42400
 80022e4:	007a1200 	.word	0x007a1200

080022e8 <HAL_RCC_ClockConfig>:
{
 80022e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022ec:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80022ee:	4604      	mov	r4, r0
 80022f0:	b910      	cbnz	r0, 80022f8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80022f2:	2001      	movs	r0, #1
 80022f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022f8:	4b44      	ldr	r3, [pc, #272]	; (800240c <HAL_RCC_ClockConfig+0x124>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	f002 020f 	and.w	r2, r2, #15
 8002300:	428a      	cmp	r2, r1
 8002302:	d328      	bcc.n	8002356 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002304:	6821      	ldr	r1, [r4, #0]
 8002306:	078f      	lsls	r7, r1, #30
 8002308:	d42d      	bmi.n	8002366 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230a:	07c8      	lsls	r0, r1, #31
 800230c:	d440      	bmi.n	8002390 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800230e:	4b3f      	ldr	r3, [pc, #252]	; (800240c <HAL_RCC_ClockConfig+0x124>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	f002 020f 	and.w	r2, r2, #15
 8002316:	4295      	cmp	r5, r2
 8002318:	d366      	bcc.n	80023e8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231a:	6822      	ldr	r2, [r4, #0]
 800231c:	0751      	lsls	r1, r2, #29
 800231e:	d46c      	bmi.n	80023fa <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002320:	0713      	lsls	r3, r2, #28
 8002322:	d507      	bpl.n	8002334 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002324:	4a3a      	ldr	r2, [pc, #232]	; (8002410 <HAL_RCC_ClockConfig+0x128>)
 8002326:	6921      	ldr	r1, [r4, #16]
 8002328:	6893      	ldr	r3, [r2, #8]
 800232a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800232e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002332:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002334:	f7ff ffaa 	bl	800228c <HAL_RCC_GetSysClockFreq>
 8002338:	4b35      	ldr	r3, [pc, #212]	; (8002410 <HAL_RCC_ClockConfig+0x128>)
 800233a:	4a36      	ldr	r2, [pc, #216]	; (8002414 <HAL_RCC_ClockConfig+0x12c>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002342:	5cd3      	ldrb	r3, [r2, r3]
 8002344:	40d8      	lsrs	r0, r3
 8002346:	4b34      	ldr	r3, [pc, #208]	; (8002418 <HAL_RCC_ClockConfig+0x130>)
 8002348:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800234a:	2000      	movs	r0, #0
 800234c:	f7fe ff5e 	bl	800120c <HAL_InitTick>
  return HAL_OK;
 8002350:	2000      	movs	r0, #0
 8002352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002356:	b2ca      	uxtb	r2, r1
 8002358:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 030f 	and.w	r3, r3, #15
 8002360:	4299      	cmp	r1, r3
 8002362:	d1c6      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xa>
 8002364:	e7ce      	b.n	8002304 <HAL_RCC_ClockConfig+0x1c>
 8002366:	4b2a      	ldr	r3, [pc, #168]	; (8002410 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002368:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800236c:	bf1e      	ittt	ne
 800236e:	689a      	ldrne	r2, [r3, #8]
 8002370:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002374:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002376:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002378:	bf42      	ittt	mi
 800237a:	689a      	ldrmi	r2, [r3, #8]
 800237c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002380:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	68a0      	ldr	r0, [r4, #8]
 8002386:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800238a:	4302      	orrs	r2, r0
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	e7bc      	b.n	800230a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002390:	6862      	ldr	r2, [r4, #4]
 8002392:	4b1f      	ldr	r3, [pc, #124]	; (8002410 <HAL_RCC_ClockConfig+0x128>)
 8002394:	2a01      	cmp	r2, #1
 8002396:	d11d      	bne.n	80023d4 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239e:	d0a8      	beq.n	80022f2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023a0:	4e1b      	ldr	r6, [pc, #108]	; (8002410 <HAL_RCC_ClockConfig+0x128>)
 80023a2:	68b3      	ldr	r3, [r6, #8]
 80023a4:	f023 0303 	bic.w	r3, r3, #3
 80023a8:	4313      	orrs	r3, r2
 80023aa:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80023ac:	f7fe ff78 	bl	80012a0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80023b4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b6:	68b3      	ldr	r3, [r6, #8]
 80023b8:	6862      	ldr	r2, [r4, #4]
 80023ba:	f003 030c 	and.w	r3, r3, #12
 80023be:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80023c2:	d0a4      	beq.n	800230e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c4:	f7fe ff6c 	bl	80012a0 <HAL_GetTick>
 80023c8:	1bc0      	subs	r0, r0, r7
 80023ca:	4540      	cmp	r0, r8
 80023cc:	d9f3      	bls.n	80023b6 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80023ce:	2003      	movs	r0, #3
}
 80023d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023d4:	1e91      	subs	r1, r2, #2
 80023d6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023da:	d802      	bhi.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023dc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80023e0:	e7dd      	b.n	800239e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e2:	f013 0f02 	tst.w	r3, #2
 80023e6:	e7da      	b.n	800239e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e8:	b2ea      	uxtb	r2, r5
 80023ea:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	429d      	cmp	r5, r3
 80023f4:	f47f af7d 	bne.w	80022f2 <HAL_RCC_ClockConfig+0xa>
 80023f8:	e78f      	b.n	800231a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023fa:	4905      	ldr	r1, [pc, #20]	; (8002410 <HAL_RCC_ClockConfig+0x128>)
 80023fc:	68e0      	ldr	r0, [r4, #12]
 80023fe:	688b      	ldr	r3, [r1, #8]
 8002400:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002404:	4303      	orrs	r3, r0
 8002406:	608b      	str	r3, [r1, #8]
 8002408:	e78a      	b.n	8002320 <HAL_RCC_ClockConfig+0x38>
 800240a:	bf00      	nop
 800240c:	40023c00 	.word	0x40023c00
 8002410:	40023800 	.word	0x40023800
 8002414:	0800534c 	.word	0x0800534c
 8002418:	2000004c 	.word	0x2000004c

0800241c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800241c:	4b04      	ldr	r3, [pc, #16]	; (8002430 <HAL_RCC_GetPCLK1Freq+0x14>)
 800241e:	4a05      	ldr	r2, [pc, #20]	; (8002434 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002426:	5cd3      	ldrb	r3, [r2, r3]
 8002428:	4a03      	ldr	r2, [pc, #12]	; (8002438 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800242a:	6810      	ldr	r0, [r2, #0]
}
 800242c:	40d8      	lsrs	r0, r3
 800242e:	4770      	bx	lr
 8002430:	40023800 	.word	0x40023800
 8002434:	0800535c 	.word	0x0800535c
 8002438:	2000004c 	.word	0x2000004c

0800243c <HAL_RCCEx_PeriphCLKConfig>:

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800243c:	6803      	ldr	r3, [r0, #0]
{
 800243e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002440:	079a      	lsls	r2, r3, #30
{
 8002442:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002444:	f040 8088 	bne.w	8002558 <HAL_RCCEx_PeriphCLKConfig+0x11c>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002448:	6823      	ldr	r3, [r4, #0]
 800244a:	f013 0f0c 	tst.w	r3, #12
 800244e:	d044      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002450:	4d80      	ldr	r5, [pc, #512]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x218>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002452:	4e81      	ldr	r6, [pc, #516]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    __HAL_RCC_PLLSAI_DISABLE();
 8002454:	2300      	movs	r3, #0
 8002456:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002458:	f7fe ff22 	bl	80012a0 <HAL_GetTick>
 800245c:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800245e:	6833      	ldr	r3, [r6, #0]
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	f100 80bd 	bmi.w	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002466:	6821      	ldr	r1, [r4, #0]
 8002468:	074f      	lsls	r7, r1, #29
 800246a:	d515      	bpl.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x5c>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800246c:	6963      	ldr	r3, [r4, #20]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800246e:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002472:	6920      	ldr	r0, [r4, #16]
 8002474:	061b      	lsls	r3, r3, #24
 8002476:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 800247a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002484:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8002488:	6a22      	ldr	r2, [r4, #32]
 800248a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800248e:	3a01      	subs	r2, #1
 8002490:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002494:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002498:	070e      	lsls	r6, r1, #28
 800249a:	d514      	bpl.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800249c:	4a6e      	ldr	r2, [pc, #440]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800249e:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024a0:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80024a4:	6920      	ldr	r0, [r4, #16]
 80024a6:	071b      	lsls	r3, r3, #28
 80024a8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80024ac:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80024b0:	430b      	orrs	r3, r1
 80024b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80024b6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80024ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80024bc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80024c0:	430b      	orrs	r3, r1
 80024c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80024c6:	2301      	movs	r3, #1
 80024c8:	602b      	str	r3, [r5, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80024ca:	f7fe fee9 	bl	80012a0 <HAL_GetTick>
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024ce:	4d62      	ldr	r5, [pc, #392]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    tickstart = HAL_GetTick();
 80024d0:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024d2:	682b      	ldr	r3, [r5, #0]
 80024d4:	0098      	lsls	r0, r3, #2
 80024d6:	f140 808a 	bpl.w	80025ee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024da:	6823      	ldr	r3, [r4, #0]
 80024dc:	069a      	lsls	r2, r3, #26
 80024de:	d531      	bpl.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80024e0:	2300      	movs	r3, #0
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	4b5c      	ldr	r3, [pc, #368]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x21c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80024e6:	4d5d      	ldr	r5, [pc, #372]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x220>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80024e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024ee:	641a      	str	r2, [r3, #64]	; 0x40
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f6:	9301      	str	r3, [sp, #4]
 80024f8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80024fa:	682b      	ldr	r3, [r5, #0]
 80024fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002500:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002502:	f7fe fecd 	bl	80012a0 <HAL_GetTick>
 8002506:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002508:	682b      	ldr	r3, [r5, #0]
 800250a:	05d9      	lsls	r1, r3, #23
 800250c:	d576      	bpl.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800250e:	4d52      	ldr	r5, [pc, #328]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8002510:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002512:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002516:	d177      	bne.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002518:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800251a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800251e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002522:	4a4d      	ldr	r2, [pc, #308]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8002524:	f040 8091 	bne.w	800264a <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8002528:	6891      	ldr	r1, [r2, #8]
 800252a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800252e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002532:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8002536:	4301      	orrs	r1, r0
 8002538:	6091      	str	r1, [r2, #8]
 800253a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800253c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002540:	430b      	orrs	r3, r1
 8002542:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002544:	6820      	ldr	r0, [r4, #0]
 8002546:	f010 0010 	ands.w	r0, r0, #16
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800254a:	bf1f      	itttt	ne
 800254c:	4b44      	ldrne	r3, [pc, #272]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800254e:	f894 202c 	ldrbne.w	r2, [r4, #44]	; 0x2c
 8002552:	601a      	strne	r2, [r3, #0]
  }
  return HAL_OK;
 8002554:	2000      	movne	r0, #0
 8002556:	e041      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_PLLI2S_DISABLE();
 8002558:	4d42      	ldr	r5, [pc, #264]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x228>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800255a:	4e3f      	ldr	r6, [pc, #252]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    __HAL_RCC_PLLI2S_DISABLE();
 800255c:	2300      	movs	r3, #0
 800255e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002560:	f7fe fe9e 	bl	80012a0 <HAL_GetTick>
 8002564:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002566:	6833      	ldr	r3, [r6, #0]
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	d431      	bmi.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800256c:	6822      	ldr	r2, [r4, #0]
 800256e:	07d7      	lsls	r7, r2, #31
 8002570:	d506      	bpl.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002572:	68a3      	ldr	r3, [r4, #8]
 8002574:	6861      	ldr	r1, [r4, #4]
 8002576:	071b      	lsls	r3, r3, #28
 8002578:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800257c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002580:	0790      	lsls	r0, r2, #30
 8002582:	d515      	bpl.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002584:	4a34      	ldr	r2, [pc, #208]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8002586:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002588:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800258c:	6860      	ldr	r0, [r4, #4]
 800258e:	061b      	lsls	r3, r3, #24
 8002590:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002594:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002598:	430b      	orrs	r3, r1
 800259a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800259e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80025a2:	69e3      	ldr	r3, [r4, #28]
 80025a4:	f021 011f 	bic.w	r1, r1, #31
 80025a8:	3b01      	subs	r3, #1
 80025aa:	430b      	orrs	r3, r1
 80025ac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLI2S_ENABLE();
 80025b0:	2301      	movs	r3, #1
 80025b2:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80025b4:	f7fe fe74 	bl	80012a0 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025b8:	4d27      	ldr	r5, [pc, #156]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    tickstart = HAL_GetTick();
 80025ba:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025bc:	682b      	ldr	r3, [r5, #0]
 80025be:	0119      	lsls	r1, r3, #4
 80025c0:	f53f af42 	bmi.w	8002448 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80025c4:	f7fe fe6c 	bl	80012a0 <HAL_GetTick>
 80025c8:	1b80      	subs	r0, r0, r6
 80025ca:	2802      	cmp	r0, #2
 80025cc:	d9f6      	bls.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x180>
 80025ce:	e004      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80025d0:	f7fe fe66 	bl	80012a0 <HAL_GetTick>
 80025d4:	1bc0      	subs	r0, r0, r7
 80025d6:	2802      	cmp	r0, #2
 80025d8:	d9c5      	bls.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        return HAL_TIMEOUT;
 80025da:	2003      	movs	r0, #3
}
 80025dc:	b003      	add	sp, #12
 80025de:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80025e0:	f7fe fe5e 	bl	80012a0 <HAL_GetTick>
 80025e4:	1bc0      	subs	r0, r0, r7
 80025e6:	2802      	cmp	r0, #2
 80025e8:	f67f af39 	bls.w	800245e <HAL_RCCEx_PeriphCLKConfig+0x22>
 80025ec:	e7f5      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80025ee:	f7fe fe57 	bl	80012a0 <HAL_GetTick>
 80025f2:	1b80      	subs	r0, r0, r6
 80025f4:	2802      	cmp	r0, #2
 80025f6:	f67f af6c 	bls.w	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x96>
 80025fa:	e7ee      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80025fc:	f7fe fe50 	bl	80012a0 <HAL_GetTick>
 8002600:	1b80      	subs	r0, r0, r6
 8002602:	2802      	cmp	r0, #2
 8002604:	d980      	bls.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002606:	e7e8      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x19e>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002608:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800260a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800260e:	4293      	cmp	r3, r2
 8002610:	d082      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002612:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002614:	4a14      	ldr	r2, [pc, #80]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002616:	2101      	movs	r1, #1
 8002618:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800261a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800261e:	2100      	movs	r1, #0
 8002620:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8002622:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002624:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002626:	07da      	lsls	r2, r3, #31
 8002628:	f57f af76 	bpl.w	8002518 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        tickstart = HAL_GetTick();
 800262c:	f7fe fe38 	bl	80012a0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002630:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002634:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002636:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002638:	079b      	lsls	r3, r3, #30
 800263a:	f53f af6d 	bmi.w	8002518 <HAL_RCCEx_PeriphCLKConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800263e:	f7fe fe2f 	bl	80012a0 <HAL_GetTick>
 8002642:	1b80      	subs	r0, r0, r6
 8002644:	42b8      	cmp	r0, r7
 8002646:	d9f6      	bls.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002648:	e7c7      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x19e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800264a:	6891      	ldr	r1, [r2, #8]
 800264c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002650:	e772      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002652:	bf00      	nop
 8002654:	42470070 	.word	0x42470070
 8002658:	40023800 	.word	0x40023800
 800265c:	40007000 	.word	0x40007000
 8002660:	424711e0 	.word	0x424711e0
 8002664:	42470068 	.word	0x42470068
 8002668:	42470e40 	.word	0x42470e40

0800266c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800266c:	b538      	push	{r3, r4, r5, lr}
 800266e:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8002670:	4604      	mov	r4, r0
 8002672:	b1c8      	cbz	r0, 80026a8 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8002674:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002678:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800267c:	b91b      	cbnz	r3, 8002686 <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800267e:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8002682:	f000 ffeb 	bl	800365c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002686:	2302      	movs	r3, #2
 8002688:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800268c:	1d21      	adds	r1, r4, #4
 800268e:	6820      	ldr	r0, [r4, #0]
 8002690:	f000 fb4d 	bl	8002d2e <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8002694:	6862      	ldr	r2, [r4, #4]
 8002696:	6820      	ldr	r0, [r4, #0]
 8002698:	4629      	mov	r1, r5
 800269a:	f000 fb87 	bl	8002dac <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800269e:	2301      	movs	r3, #1
 80026a0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 80026a4:	2000      	movs	r0, #0
 80026a6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80026a8:	2001      	movs	r0, #1
}
 80026aa:	bd38      	pop	{r3, r4, r5, pc}

080026ac <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80026ac:	b538      	push	{r3, r4, r5, lr}
 80026ae:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80026b0:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80026b4:	b2c0      	uxtb	r0, r0
 80026b6:	2802      	cmp	r0, #2
{
 80026b8:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80026ba:	d00d      	beq.n	80026d8 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80026bc:	2302      	movs	r3, #2
 80026be:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80026c2:	6820      	ldr	r0, [r4, #0]
 80026c4:	f000 fbba 	bl	8002e3c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80026c8:	682b      	ldr	r3, [r5, #0]
 80026ca:	2b02      	cmp	r3, #2
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80026cc:	bf0c      	ite	eq
 80026ce:	2305      	moveq	r3, #5
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80026d0:	2301      	movne	r3, #1
 80026d2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80026d6:	2000      	movs	r0, #0
}
 80026d8:	bd38      	pop	{r3, r4, r5, pc}

080026da <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80026da:	b510      	push	{r4, lr}
 80026dc:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80026de:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80026e2:	b2c0      	uxtb	r0, r0
 80026e4:	2802      	cmp	r0, #2
 80026e6:	d009      	beq.n	80026fc <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80026e8:	2302      	movs	r3, #2
 80026ea:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80026ee:	6820      	ldr	r0, [r4, #0]
 80026f0:	f000 fbc9 	bl	8002e86 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80026f4:	2301      	movs	r3, #1
 80026f6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 80026fa:	2000      	movs	r0, #0
}
 80026fc:	bd10      	pop	{r4, pc}

080026fe <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80026fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002700:	4604      	mov	r4, r0
 8002702:	460e      	mov	r6, r1
 8002704:	4615      	mov	r5, r2
 8002706:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002708:	6821      	ldr	r1, [r4, #0]
 800270a:	688a      	ldr	r2, [r1, #8]
 800270c:	ea36 0302 	bics.w	r3, r6, r2
 8002710:	d001      	beq.n	8002716 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002712:	2000      	movs	r0, #0
}
 8002714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002716:	1c6b      	adds	r3, r5, #1
 8002718:	d0f7      	beq.n	800270a <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800271a:	f7fe fdc1 	bl	80012a0 <HAL_GetTick>
 800271e:	1bc0      	subs	r0, r0, r7
 8002720:	4285      	cmp	r5, r0
 8002722:	d8f1      	bhi.n	8002708 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002724:	6823      	ldr	r3, [r4, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800272c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800272e:	6862      	ldr	r2, [r4, #4]
 8002730:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002734:	d10a      	bne.n	800274c <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 8002736:	68a2      	ldr	r2, [r4, #8]
 8002738:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800273c:	d002      	beq.n	8002744 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800273e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002742:	d103      	bne.n	800274c <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800274a:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800274c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800274e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002752:	d107      	bne.n	8002764 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002762:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002764:	2301      	movs	r3, #1
 8002766:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800276a:	2300      	movs	r3, #0
 800276c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8002770:	2003      	movs	r0, #3
 8002772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002774 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002774:	b538      	push	{r3, r4, r5, lr}
 8002776:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002778:	6842      	ldr	r2, [r0, #4]
 800277a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 800277e:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002780:	d11f      	bne.n	80027c2 <SPI_EndRxTransaction+0x4e>
 8002782:	6882      	ldr	r2, [r0, #8]
 8002784:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002788:	d002      	beq.n	8002790 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800278a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800278e:	d107      	bne.n	80027a0 <SPI_EndRxTransaction+0x2c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002790:	6825      	ldr	r5, [r4, #0]
 8002792:	6828      	ldr	r0, [r5, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002794:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 8002798:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800279c:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800279e:	d007      	beq.n	80027b0 <SPI_EndRxTransaction+0x3c>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027a0:	460a      	mov	r2, r1
 80027a2:	2180      	movs	r1, #128	; 0x80
 80027a4:	4620      	mov	r0, r4
 80027a6:	f7ff ffaa 	bl	80026fe <SPI_WaitFlagStateUntilTimeout.constprop.9>
 80027aa:	b920      	cbnz	r0, 80027b6 <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80027ac:	2000      	movs	r0, #0
 80027ae:	bd38      	pop	{r3, r4, r5, pc}
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80027b0:	460a      	mov	r2, r1
 80027b2:	2101      	movs	r1, #1
 80027b4:	e7f6      	b.n	80027a4 <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80027b8:	f043 0320 	orr.w	r3, r3, #32
 80027bc:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80027be:	2003      	movs	r0, #3
 80027c0:	bd38      	pop	{r3, r4, r5, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80027c2:	460a      	mov	r2, r1
 80027c4:	2101      	movs	r1, #1
 80027c6:	e7ee      	b.n	80027a6 <SPI_EndRxTransaction+0x32>

080027c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80027ca:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80027cc:	4a13      	ldr	r2, [pc, #76]	; (800281c <SPI_EndRxTxTransaction+0x54>)
 80027ce:	4e14      	ldr	r6, [pc, #80]	; (8002820 <SPI_EndRxTxTransaction+0x58>)
 80027d0:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027d2:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80027d4:	fbb5 f6f6 	udiv	r6, r5, r6
 80027d8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80027dc:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027de:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 80027e2:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80027e4:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027e6:	d10d      	bne.n	8002804 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027e8:	460a      	mov	r2, r1
 80027ea:	2180      	movs	r1, #128	; 0x80
 80027ec:	f7ff ff87 	bl	80026fe <SPI_WaitFlagStateUntilTimeout.constprop.9>
 80027f0:	b910      	cbnz	r0, 80027f8 <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 80027f2:	2000      	movs	r0, #0
}
 80027f4:	b002      	add	sp, #8
 80027f6:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80027fa:	f043 0320 	orr.w	r3, r3, #32
 80027fe:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002800:	2003      	movs	r0, #3
 8002802:	e7f7      	b.n	80027f4 <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 8002804:	9b01      	ldr	r3, [sp, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f3      	beq.n	80027f2 <SPI_EndRxTxTransaction+0x2a>
      count--;
 800280a:	9b01      	ldr	r3, [sp, #4]
 800280c:	3b01      	subs	r3, #1
 800280e:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002810:	6823      	ldr	r3, [r4, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	061b      	lsls	r3, r3, #24
 8002816:	d4f5      	bmi.n	8002804 <SPI_EndRxTxTransaction+0x3c>
 8002818:	e7eb      	b.n	80027f2 <SPI_EndRxTxTransaction+0x2a>
 800281a:	bf00      	nop
 800281c:	2000004c 	.word	0x2000004c
 8002820:	016e3600 	.word	0x016e3600

08002824 <HAL_SPI_Init>:
{
 8002824:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8002826:	4604      	mov	r4, r0
 8002828:	2800      	cmp	r0, #0
 800282a:	d036      	beq.n	800289a <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800282c:	2300      	movs	r3, #0
 800282e:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002830:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002834:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002838:	b91b      	cbnz	r3, 8002842 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 800283a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800283e:	f000 fec3 	bl	80035c8 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8002842:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002844:	68a0      	ldr	r0, [r4, #8]
 8002846:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002848:	2302      	movs	r3, #2
 800284a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800284e:	680b      	ldr	r3, [r1, #0]
 8002850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002854:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002856:	6863      	ldr	r3, [r4, #4]
 8002858:	4303      	orrs	r3, r0
 800285a:	68e0      	ldr	r0, [r4, #12]
 800285c:	4303      	orrs	r3, r0
 800285e:	6920      	ldr	r0, [r4, #16]
 8002860:	4303      	orrs	r3, r0
 8002862:	6960      	ldr	r0, [r4, #20]
 8002864:	4303      	orrs	r3, r0
 8002866:	69e0      	ldr	r0, [r4, #28]
 8002868:	4303      	orrs	r3, r0
 800286a:	6a20      	ldr	r0, [r4, #32]
 800286c:	4303      	orrs	r3, r0
 800286e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002870:	4303      	orrs	r3, r0
 8002872:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8002876:	4303      	orrs	r3, r0
 8002878:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800287a:	0c12      	lsrs	r2, r2, #16
 800287c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800287e:	f002 0204 	and.w	r2, r2, #4
 8002882:	431a      	orrs	r2, r3
 8002884:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002886:	69cb      	ldr	r3, [r1, #28]
 8002888:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800288c:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800288e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002890:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002892:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002894:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8002898:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800289a:	2001      	movs	r0, #1
}
 800289c:	bd10      	pop	{r4, pc}

0800289e <HAL_SPI_DeInit>:
{
 800289e:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80028a0:	4604      	mov	r4, r0
 80028a2:	b180      	cbz	r0, 80028c6 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 80028a4:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80028a6:	2302      	movs	r3, #2
 80028a8:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80028ac:	6813      	ldr	r3, [r2, #0]
 80028ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028b2:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 80028b4:	f000 febc 	bl	8003630 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028b8:	2000      	movs	r0, #0
 80028ba:	6560      	str	r0, [r4, #84]	; 0x54
  __HAL_UNLOCK(hspi);
 80028bc:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hspi->State = HAL_SPI_STATE_RESET;
 80028c0:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  return HAL_OK;
 80028c4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80028c6:	2001      	movs	r0, #1
}
 80028c8:	bd10      	pop	{r4, pc}

080028ca <HAL_SPI_Transmit>:
{
 80028ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80028ce:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80028d0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80028d4:	2b01      	cmp	r3, #1
{
 80028d6:	4604      	mov	r4, r0
 80028d8:	460d      	mov	r5, r1
 80028da:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80028dc:	f000 809b 	beq.w	8002a16 <HAL_SPI_Transmit+0x14c>
 80028e0:	2301      	movs	r3, #1
 80028e2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80028e6:	f7fe fcdb 	bl	80012a0 <HAL_GetTick>
 80028ea:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80028ec:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80028f0:	b2c0      	uxtb	r0, r0
 80028f2:	2801      	cmp	r0, #1
 80028f4:	f040 808d 	bne.w	8002a12 <HAL_SPI_Transmit+0x148>
  if ((pData == NULL) || (Size == 0U))
 80028f8:	2d00      	cmp	r5, #0
 80028fa:	d05d      	beq.n	80029b8 <HAL_SPI_Transmit+0xee>
 80028fc:	f1b8 0f00 	cmp.w	r8, #0
 8002900:	d05a      	beq.n	80029b8 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002902:	2303      	movs	r3, #3
 8002904:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002908:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800290a:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800290c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800290e:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002910:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8002914:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002916:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002918:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 800291a:	6420      	str	r0, [r4, #64]	; 0x40
 800291c:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800291e:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8002924:	bf08      	it	eq
 8002926:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8002928:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 800292c:	bf04      	itt	eq
 800292e:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8002932:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002934:	6803      	ldr	r3, [r0, #0]
 8002936:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8002938:	bf5e      	ittt	pl
 800293a:	6803      	ldrpl	r3, [r0, #0]
 800293c:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8002940:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002942:	68e3      	ldr	r3, [r4, #12]
 8002944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002948:	6863      	ldr	r3, [r4, #4]
 800294a:	d13e      	bne.n	80029ca <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800294c:	b113      	cbz	r3, 8002954 <HAL_SPI_Transmit+0x8a>
 800294e:	f1b8 0f01 	cmp.w	r8, #1
 8002952:	d107      	bne.n	8002964 <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002954:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002958:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800295a:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800295c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800295e:	3b01      	subs	r3, #1
 8002960:	b29b      	uxth	r3, r3
 8002962:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002964:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002966:	b29b      	uxth	r3, r3
 8002968:	b9a3      	cbnz	r3, 8002994 <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800296a:	463a      	mov	r2, r7
 800296c:	4631      	mov	r1, r6
 800296e:	4620      	mov	r0, r4
 8002970:	f7ff ff2a 	bl	80027c8 <SPI_EndRxTxTransaction>
 8002974:	2800      	cmp	r0, #0
 8002976:	d149      	bne.n	8002a0c <HAL_SPI_Transmit+0x142>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002978:	68a3      	ldr	r3, [r4, #8]
 800297a:	b933      	cbnz	r3, 800298a <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800297c:	9301      	str	r3, [sp, #4]
 800297e:	6823      	ldr	r3, [r4, #0]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	9201      	str	r2, [sp, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	9301      	str	r3, [sp, #4]
 8002988:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800298a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800298c:	3000      	adds	r0, #0
 800298e:	bf18      	it	ne
 8002990:	2001      	movne	r0, #1
 8002992:	e011      	b.n	80029b8 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002994:	6822      	ldr	r2, [r4, #0]
 8002996:	6893      	ldr	r3, [r2, #8]
 8002998:	0798      	lsls	r0, r3, #30
 800299a:	d505      	bpl.n	80029a8 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800299c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800299e:	f833 1b02 	ldrh.w	r1, [r3], #2
 80029a2:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029a4:	6323      	str	r3, [r4, #48]	; 0x30
 80029a6:	e7d9      	b.n	800295c <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029a8:	f7fe fc7a 	bl	80012a0 <HAL_GetTick>
 80029ac:	1bc0      	subs	r0, r0, r7
 80029ae:	42b0      	cmp	r0, r6
 80029b0:	d3d8      	bcc.n	8002964 <HAL_SPI_Transmit+0x9a>
 80029b2:	1c71      	adds	r1, r6, #1
 80029b4:	d0d6      	beq.n	8002964 <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 80029b6:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80029b8:	2301      	movs	r3, #1
 80029ba:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80029be:	2300      	movs	r3, #0
 80029c0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80029c4:	b002      	add	sp, #8
 80029c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029ca:	b113      	cbz	r3, 80029d2 <HAL_SPI_Transmit+0x108>
 80029cc:	f1b8 0f01 	cmp.w	r8, #1
 80029d0:	d108      	bne.n	80029e4 <HAL_SPI_Transmit+0x11a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029d2:	782b      	ldrb	r3, [r5, #0]
 80029d4:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80029d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80029d8:	3301      	adds	r3, #1
 80029da:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80029dc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80029e4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0be      	beq.n	800296a <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029ec:	6823      	ldr	r3, [r4, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	0792      	lsls	r2, r2, #30
 80029f2:	d503      	bpl.n	80029fc <HAL_SPI_Transmit+0x132>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80029f6:	7812      	ldrb	r2, [r2, #0]
 80029f8:	731a      	strb	r2, [r3, #12]
 80029fa:	e7ec      	b.n	80029d6 <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029fc:	f7fe fc50 	bl	80012a0 <HAL_GetTick>
 8002a00:	1bc0      	subs	r0, r0, r7
 8002a02:	4286      	cmp	r6, r0
 8002a04:	d8ee      	bhi.n	80029e4 <HAL_SPI_Transmit+0x11a>
 8002a06:	1c73      	adds	r3, r6, #1
 8002a08:	d0ec      	beq.n	80029e4 <HAL_SPI_Transmit+0x11a>
 8002a0a:	e7d4      	b.n	80029b6 <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a0c:	2320      	movs	r3, #32
 8002a0e:	6563      	str	r3, [r4, #84]	; 0x54
 8002a10:	e7b2      	b.n	8002978 <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 8002a12:	2002      	movs	r0, #2
 8002a14:	e7d0      	b.n	80029b8 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 8002a16:	2002      	movs	r0, #2
 8002a18:	e7d4      	b.n	80029c4 <HAL_SPI_Transmit+0xfa>

08002a1a <HAL_SPI_TransmitReceive>:
{
 8002a1a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002a1e:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002a20:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8002a24:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8002a26:	2b01      	cmp	r3, #1
{
 8002a28:	4604      	mov	r4, r0
 8002a2a:	460d      	mov	r5, r1
 8002a2c:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8002a2e:	f000 80e2 	beq.w	8002bf6 <HAL_SPI_TransmitReceive+0x1dc>
 8002a32:	2301      	movs	r3, #1
 8002a34:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002a38:	f7fe fc32 	bl	80012a0 <HAL_GetTick>
  tmp_state           = hspi->State;
 8002a3c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8002a40:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8002a42:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a44:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8002a46:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a48:	d00a      	beq.n	8002a60 <HAL_SPI_TransmitReceive+0x46>
 8002a4a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8002a4e:	f040 80d0 	bne.w	8002bf2 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a52:	68a0      	ldr	r0, [r4, #8]
 8002a54:	2800      	cmp	r0, #0
 8002a56:	f040 80cc 	bne.w	8002bf2 <HAL_SPI_TransmitReceive+0x1d8>
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	f040 80c9 	bne.w	8002bf2 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a60:	2d00      	cmp	r5, #0
 8002a62:	f000 80c4 	beq.w	8002bee <HAL_SPI_TransmitReceive+0x1d4>
 8002a66:	f1b9 0f00 	cmp.w	r9, #0
 8002a6a:	f000 80c0 	beq.w	8002bee <HAL_SPI_TransmitReceive+0x1d4>
 8002a6e:	2e00      	cmp	r6, #0
 8002a70:	f000 80bd 	beq.w	8002bee <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a74:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a78:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a7c:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a7e:	bf1c      	itt	ne
 8002a80:	2305      	movne	r3, #5
 8002a82:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a86:	2300      	movs	r3, #0
 8002a88:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8002a8a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002a8c:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a8e:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8002a90:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8002a92:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a94:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8002a96:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a98:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002a9a:	bf58      	it	pl
 8002a9c:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a9e:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8002aa0:	bf58      	it	pl
 8002aa2:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8002aa6:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8002aa8:	bf58      	it	pl
 8002aaa:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002aac:	68e2      	ldr	r2, [r4, #12]
 8002aae:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002ab2:	d158      	bne.n	8002b66 <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ab4:	b109      	cbz	r1, 8002aba <HAL_SPI_TransmitReceive+0xa0>
 8002ab6:	2e01      	cmp	r6, #1
 8002ab8:	d107      	bne.n	8002aca <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002aba:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002abe:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002ac0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ac2:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002aca:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002acc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	b9ab      	cbnz	r3, 8002afe <HAL_SPI_TransmitReceive+0xe4>
 8002ad2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	b993      	cbnz	r3, 8002afe <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ad8:	4642      	mov	r2, r8
 8002ada:	4639      	mov	r1, r7
 8002adc:	4620      	mov	r0, r4
 8002ade:	f7ff fe73 	bl	80027c8 <SPI_EndRxTxTransaction>
 8002ae2:	2800      	cmp	r0, #0
 8002ae4:	f040 8081 	bne.w	8002bea <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ae8:	68a3      	ldr	r3, [r4, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d132      	bne.n	8002b54 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002aee:	6823      	ldr	r3, [r4, #0]
 8002af0:	9001      	str	r0, [sp, #4]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	9201      	str	r2, [sp, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	9301      	str	r3, [sp, #4]
 8002afa:	9b01      	ldr	r3, [sp, #4]
 8002afc:	e02a      	b.n	8002b54 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002afe:	6822      	ldr	r2, [r4, #0]
 8002b00:	6893      	ldr	r3, [r2, #8]
 8002b02:	0799      	lsls	r1, r3, #30
 8002b04:	d50d      	bpl.n	8002b22 <HAL_SPI_TransmitReceive+0x108>
 8002b06:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	b153      	cbz	r3, 8002b22 <HAL_SPI_TransmitReceive+0x108>
 8002b0c:	b14d      	cbz	r5, 8002b22 <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b10:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002b14:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b16:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002b18:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8002b20:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b22:	6893      	ldr	r3, [r2, #8]
 8002b24:	07db      	lsls	r3, r3, #31
 8002b26:	d50c      	bpl.n	8002b42 <HAL_SPI_TransmitReceive+0x128>
 8002b28:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	b14b      	cbz	r3, 8002b42 <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b30:	68d2      	ldr	r2, [r2, #12]
 8002b32:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b36:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002b38:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002b40:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b42:	f7fe fbad 	bl	80012a0 <HAL_GetTick>
 8002b46:	eba0 0008 	sub.w	r0, r0, r8
 8002b4a:	4287      	cmp	r7, r0
 8002b4c:	d8be      	bhi.n	8002acc <HAL_SPI_TransmitReceive+0xb2>
 8002b4e:	1c7e      	adds	r6, r7, #1
 8002b50:	d0bc      	beq.n	8002acc <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8002b52:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002b54:	2301      	movs	r3, #1
 8002b56:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002b60:	b003      	add	sp, #12
 8002b62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b66:	b109      	cbz	r1, 8002b6c <HAL_SPI_TransmitReceive+0x152>
 8002b68:	2e01      	cmp	r6, #1
 8002b6a:	d108      	bne.n	8002b7e <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b6c:	782a      	ldrb	r2, [r5, #0]
 8002b6e:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b70:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b72:	3301      	adds	r3, #1
 8002b74:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002b76:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002b7e:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b80:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	b91b      	cbnz	r3, 8002b8e <HAL_SPI_TransmitReceive+0x174>
 8002b86:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0a4      	beq.n	8002ad8 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b8e:	6822      	ldr	r2, [r4, #0]
 8002b90:	6893      	ldr	r3, [r2, #8]
 8002b92:	0798      	lsls	r0, r3, #30
 8002b94:	d50e      	bpl.n	8002bb4 <HAL_SPI_TransmitReceive+0x19a>
 8002b96:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	b15b      	cbz	r3, 8002bb4 <HAL_SPI_TransmitReceive+0x19a>
 8002b9c:	b155      	cbz	r5, 8002bb4 <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8002ba4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002baa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8002bb2:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002bb4:	6822      	ldr	r2, [r4, #0]
 8002bb6:	6893      	ldr	r3, [r2, #8]
 8002bb8:	07d9      	lsls	r1, r3, #31
 8002bba:	d50d      	bpl.n	8002bd8 <HAL_SPI_TransmitReceive+0x1be>
 8002bbc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	b153      	cbz	r3, 8002bd8 <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002bc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002bc4:	68d2      	ldr	r2, [r2, #12]
 8002bc6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002bc8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002bca:	3301      	adds	r3, #1
 8002bcc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002bce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002bd6:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002bd8:	f7fe fb62 	bl	80012a0 <HAL_GetTick>
 8002bdc:	eba0 0008 	sub.w	r0, r0, r8
 8002be0:	4287      	cmp	r7, r0
 8002be2:	d8cd      	bhi.n	8002b80 <HAL_SPI_TransmitReceive+0x166>
 8002be4:	1c7b      	adds	r3, r7, #1
 8002be6:	d0cb      	beq.n	8002b80 <HAL_SPI_TransmitReceive+0x166>
 8002be8:	e7b3      	b.n	8002b52 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bea:	2320      	movs	r3, #32
 8002bec:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002bee:	2001      	movs	r0, #1
 8002bf0:	e7b0      	b.n	8002b54 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 8002bf2:	2002      	movs	r0, #2
 8002bf4:	e7ae      	b.n	8002b54 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 8002bf6:	2002      	movs	r0, #2
 8002bf8:	e7b2      	b.n	8002b60 <HAL_SPI_TransmitReceive+0x146>

08002bfa <HAL_SPI_Receive>:
{
 8002bfa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002bfe:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002c00:	6843      	ldr	r3, [r0, #4]
 8002c02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8002c06:	4604      	mov	r4, r0
 8002c08:	4688      	mov	r8, r1
 8002c0a:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002c0c:	d10c      	bne.n	8002c28 <HAL_SPI_Receive+0x2e>
 8002c0e:	6883      	ldr	r3, [r0, #8]
 8002c10:	b953      	cbnz	r3, 8002c28 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c12:	2304      	movs	r3, #4
 8002c14:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002c18:	4613      	mov	r3, r2
 8002c1a:	9500      	str	r5, [sp, #0]
 8002c1c:	460a      	mov	r2, r1
 8002c1e:	f7ff fefc 	bl	8002a1a <HAL_SPI_TransmitReceive>
}
 8002c22:	b002      	add	sp, #8
 8002c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8002c28:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d079      	beq.n	8002d24 <HAL_SPI_Receive+0x12a>
 8002c30:	2301      	movs	r3, #1
 8002c32:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002c36:	f7fe fb33 	bl	80012a0 <HAL_GetTick>
 8002c3a:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002c3c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002c40:	b2c0      	uxtb	r0, r0
 8002c42:	2801      	cmp	r0, #1
 8002c44:	d16c      	bne.n	8002d20 <HAL_SPI_Receive+0x126>
  if ((pData == NULL) || (Size == 0U))
 8002c46:	f1b8 0f00 	cmp.w	r8, #0
 8002c4a:	d057      	beq.n	8002cfc <HAL_SPI_Receive+0x102>
 8002c4c:	2f00      	cmp	r7, #0
 8002c4e:	d055      	beq.n	8002cfc <HAL_SPI_Receive+0x102>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c50:	2304      	movs	r3, #4
 8002c52:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c56:	2300      	movs	r3, #0
 8002c58:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c5a:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8002c5c:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8002c5e:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002c60:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002c62:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c64:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c66:	68a3      	ldr	r3, [r4, #8]
  hspi->RxXferSize  = Size;
 8002c68:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c6e:	6823      	ldr	r3, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c70:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
    SPI_1LINE_RX(hspi);
 8002c74:	bf02      	ittt	eq
 8002c76:	681a      	ldreq	r2, [r3, #0]
 8002c78:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 8002c7c:	601a      	streq	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002c82:	bf5e      	ittt	pl
 8002c84:	681a      	ldrpl	r2, [r3, #0]
 8002c86:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8002c8a:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002c8c:	68e3      	ldr	r3, [r4, #12]
 8002c8e:	b1f3      	cbz	r3, 8002cce <HAL_SPI_Receive+0xd4>
    while (hspi->RxXferCount > 0U)
 8002c90:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	b1fb      	cbz	r3, 8002cd6 <HAL_SPI_Receive+0xdc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c96:	6823      	ldr	r3, [r4, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	07d2      	lsls	r2, r2, #31
 8002c9c:	d535      	bpl.n	8002d0a <HAL_SPI_Receive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ca2:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ca6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002ca8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002cb0:	e7ee      	b.n	8002c90 <HAL_SPI_Receive+0x96>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cb2:	6823      	ldr	r3, [r4, #0]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	07d0      	lsls	r0, r2, #31
 8002cb8:	d518      	bpl.n	8002cec <HAL_SPI_Receive+0xf2>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002cba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002cbc:	7b1b      	ldrb	r3, [r3, #12]
 8002cbe:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002cc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002cc6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8002cce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1ed      	bne.n	8002cb2 <HAL_SPI_Receive+0xb8>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cd6:	4632      	mov	r2, r6
 8002cd8:	4629      	mov	r1, r5
 8002cda:	4620      	mov	r0, r4
 8002cdc:	f7ff fd4a 	bl	8002774 <SPI_EndRxTransaction>
 8002ce0:	b9d8      	cbnz	r0, 8002d1a <HAL_SPI_Receive+0x120>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ce2:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8002ce4:	3000      	adds	r0, #0
 8002ce6:	bf18      	it	ne
 8002ce8:	2001      	movne	r0, #1
 8002cea:	e007      	b.n	8002cfc <HAL_SPI_Receive+0x102>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cec:	f7fe fad8 	bl	80012a0 <HAL_GetTick>
 8002cf0:	1b80      	subs	r0, r0, r6
 8002cf2:	4285      	cmp	r5, r0
 8002cf4:	d8eb      	bhi.n	8002cce <HAL_SPI_Receive+0xd4>
 8002cf6:	1c69      	adds	r1, r5, #1
 8002cf8:	d0e9      	beq.n	8002cce <HAL_SPI_Receive+0xd4>
          errorcode = HAL_TIMEOUT;
 8002cfa:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d02:	2300      	movs	r3, #0
 8002d04:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8002d08:	e78b      	b.n	8002c22 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d0a:	f7fe fac9 	bl	80012a0 <HAL_GetTick>
 8002d0e:	1b80      	subs	r0, r0, r6
 8002d10:	4285      	cmp	r5, r0
 8002d12:	d8bd      	bhi.n	8002c90 <HAL_SPI_Receive+0x96>
 8002d14:	1c6b      	adds	r3, r5, #1
 8002d16:	d0bb      	beq.n	8002c90 <HAL_SPI_Receive+0x96>
 8002d18:	e7ef      	b.n	8002cfa <HAL_SPI_Receive+0x100>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d1a:	2320      	movs	r3, #32
 8002d1c:	6563      	str	r3, [r4, #84]	; 0x54
 8002d1e:	e7e0      	b.n	8002ce2 <HAL_SPI_Receive+0xe8>
    errorcode = HAL_BUSY;
 8002d20:	2002      	movs	r0, #2
 8002d22:	e7eb      	b.n	8002cfc <HAL_SPI_Receive+0x102>
  __HAL_LOCK(hspi);
 8002d24:	2002      	movs	r0, #2
 8002d26:	e77c      	b.n	8002c22 <HAL_SPI_Receive+0x28>

08002d28 <HAL_SPI_GetState>:
  return hspi->State;
 8002d28:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8002d2c:	4770      	bx	lr

08002d2e <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8002d2e:	680b      	ldr	r3, [r1, #0]
 8002d30:	684a      	ldr	r2, [r1, #4]
 8002d32:	f8d1 c010 	ldr.w	ip, [r1, #16]
 8002d36:	2b01      	cmp	r3, #1
{
 8002d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8002d3c:	6803      	ldr	r3, [r0, #0]
 8002d3e:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8002d42:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8002d46:	694d      	ldr	r5, [r1, #20]
 8002d48:	698c      	ldr	r4, [r1, #24]
 8002d4a:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 8002d4e:	6a0f      	ldr	r7, [r1, #32]
 8002d50:	6a4e      	ldr	r6, [r1, #36]	; 0x24
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8002d52:	d014      	beq.n	8002d7e <FMC_SDRAM_Init+0x50>
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8002d54:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	ea42 0209 	orr.w	r2, r2, r9
 8002d62:	ea42 0208 	orr.w	r2, r2, r8
 8002d66:	ea42 030c 	orr.w	r3, r2, ip
 8002d6a:	432b      	orrs	r3, r5
 8002d6c:	4323      	orrs	r3, r4
 8002d6e:	ea43 030e 	orr.w	r3, r3, lr
 8002d72:	433b      	orrs	r3, r7
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002d74:	4333      	orrs	r3, r6
                                               Init->WriteProtection    |\
                                               Init->SDClockPeriod      |\
                                               Init->ReadBurst          |\
                                               Init->ReadPipeDelay
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8002d76:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }  
  
  return HAL_OK;
}
 8002d78:	2000      	movs	r0, #0
 8002d7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8002d7e:	6841      	ldr	r1, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8002d80:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8002d84:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8002d88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	ea43 030e 	orr.w	r3, r3, lr
 8002d92:	ea42 0209 	orr.w	r2, r2, r9
 8002d96:	433b      	orrs	r3, r7
 8002d98:	ea42 0208 	orr.w	r2, r2, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8002d9c:	431e      	orrs	r6, r3
 8002d9e:	ea42 030c 	orr.w	r3, r2, ip
 8002da2:	432b      	orrs	r3, r5
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002da4:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8002da6:	6006      	str	r6, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8002da8:	6043      	str	r3, [r0, #4]
 8002daa:	e7e5      	b.n	8002d78 <FMC_SDRAM_Init+0x4a>

08002dac <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8002dac:	2a01      	cmp	r2, #1
{
 8002dae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002db0:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8002db4:	688f      	ldr	r7, [r1, #8]
 8002db6:	690d      	ldr	r5, [r1, #16]
 8002db8:	694e      	ldr	r6, [r1, #20]
 8002dba:	e891 4008 	ldmia.w	r1, {r3, lr}
 8002dbe:	6989      	ldr	r1, [r1, #24]
  if (Bank != FMC_SDRAM_BANK2) 
 8002dc0:	d01b      	beq.n	8002dfa <FMC_SDRAM_Timing_Init+0x4e>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8002dc2:	6882      	ldr	r2, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8002dc4:	f10e 3eff 	add.w	lr, lr, #4294967295
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8002dc8:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 8002dd2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8002dd4:	1e7b      	subs	r3, r7, #1
 8002dd6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8002dda:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002dde:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8002de2:	3d01      	subs	r5, #1
 8002de4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8002de8:	3e01      	subs	r6, #1
 8002dea:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
                       (((Timing->RCDDelay)-1U) << 24U));
 8002dee:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8002df0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8002df4:	6083      	str	r3, [r0, #8]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  return HAL_OK;
}
 8002df6:	2000      	movs	r0, #0
 8002df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8002dfa:	6884      	ldr	r4, [r0, #8]
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8002dfc:	68c2      	ldr	r2, [r0, #12]
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8002dfe:	f10e 3eff 	add.w	lr, lr, #4294967295
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8002e02:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8002e06:	3b01      	subs	r3, #1
 8002e08:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 8002e0c:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8002e0e:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8002e12:	1e7b      	subs	r3, r7, #1
 8002e14:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8002e18:	f10c 3cff 	add.w	ip, ip, #4294967295
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8002e1c:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8002e20:	1e6b      	subs	r3, r5, #1
 8002e22:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8002e26:	3e01      	subs	r6, #1
 8002e28:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8002e2c:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8002e2e:	ea44 5606 	orr.w	r6, r4, r6, lsl #20
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8002e32:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8002e36:	6086      	str	r6, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8002e38:	60c3      	str	r3, [r0, #12]
 8002e3a:	e7dc      	b.n	8002df6 <FMC_SDRAM_Timing_Init+0x4a>

08002e3c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8002e3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t tmpr = 0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	9301      	str	r3, [sp, #4]
{
 8002e42:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8002e44:	e891 000c 	ldmia.w	r1, {r2, r3}
 8002e48:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
                    ((Command->ModeRegisterDefinition) << 9U)
 8002e4a:	68ca      	ldr	r2, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8002e4c:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8002e50:	688a      	ldr	r2, [r1, #8]
 8002e52:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8002e54:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8002e58:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 8002e5a:	9b01      	ldr	r3, [sp, #4]
 8002e5c:	6103      	str	r3, [r0, #16]
{
 8002e5e:	4604      	mov	r4, r0

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002e60:	f7fe fa1e 	bl	80012a0 <HAL_GetTick>
 8002e64:	4606      	mov	r6, r0

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8002e66:	69a0      	ldr	r0, [r4, #24]
 8002e68:	f010 0020 	ands.w	r0, r0, #32
 8002e6c:	d003      	beq.n	8002e76 <FMC_SDRAM_SendCommand+0x3a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002e6e:	1c6b      	adds	r3, r5, #1
 8002e70:	d0f9      	beq.n	8002e66 <FMC_SDRAM_SendCommand+0x2a>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002e72:	b915      	cbnz	r5, 8002e7a <FMC_SDRAM_SendCommand+0x3e>
      {
        return HAL_TIMEOUT;
 8002e74:	2003      	movs	r0, #3
      }
    }
  }

  return HAL_OK;
}
 8002e76:	b002      	add	sp, #8
 8002e78:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002e7a:	f7fe fa11 	bl	80012a0 <HAL_GetTick>
 8002e7e:	1b80      	subs	r0, r0, r6
 8002e80:	4285      	cmp	r5, r0
 8002e82:	d2f0      	bcs.n	8002e66 <FMC_SDRAM_SendCommand+0x2a>
 8002e84:	e7f6      	b.n	8002e74 <FMC_SDRAM_SendCommand+0x38>

08002e86 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8002e86:	6943      	ldr	r3, [r0, #20]
 8002e88:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8002e8c:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 8002e8e:	2000      	movs	r0, #0
 8002e90:	4770      	bx	lr
	...

08002e94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e94:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e96:	2430      	movs	r4, #48	; 0x30
{
 8002e98:	b0a0      	sub	sp, #128	; 0x80
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e9a:	4622      	mov	r2, r4
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	a808      	add	r0, sp, #32
 8002ea0:	f000 fcc2 	bl	8003828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ea4:	2214      	movs	r2, #20
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	a803      	add	r0, sp, #12
 8002eaa:	f000 fcbd 	bl	8003828 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002eae:	2100      	movs	r1, #0
 8002eb0:	4622      	mov	r2, r4
 8002eb2:	a814      	add	r0, sp, #80	; 0x50
 8002eb4:	f000 fcb8 	bl	8003828 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eb8:	2400      	movs	r4, #0
 8002eba:	4b22      	ldr	r3, [pc, #136]	; (8002f44 <SystemClock_Config+0xb0>)
 8002ebc:	9401      	str	r4, [sp, #4]
 8002ebe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ec0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ecc:	9301      	str	r3, [sp, #4]
 8002ece:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ed0:	4b1d      	ldr	r3, [pc, #116]	; (8002f48 <SystemClock_Config+0xb4>)
 8002ed2:	9402      	str	r4, [sp, #8]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ee2:	9302      	str	r3, [sp, #8]
 8002ee4:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002eea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eee:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ef0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ef4:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002ef6:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ef8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 8;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002efa:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 360;
 8002efc:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002f00:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f02:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002f04:	9610      	str	r6, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f06:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002f08:	9613      	str	r6, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f0a:	f7ff f83d 	bl	8001f88 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002f0e:	f7fe ffff 	bl	8001f10 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f12:	230f      	movs	r3, #15
 8002f14:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f16:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f1a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002f1c:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002f22:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f24:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f26:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f28:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002f2a:	f7ff f9dd 	bl	80022e8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 432;
 8002f2e:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f32:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002f34:	9614      	str	r6, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 432;
 8002f36:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002f38:	951a      	str	r5, [sp, #104]	; 0x68
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002f3a:	941d      	str	r4, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f3c:	f7ff fa7e 	bl	800243c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002f40:	b020      	add	sp, #128	; 0x80
 8002f42:	bd70      	pop	{r4, r5, r6, pc}
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40007000 	.word	0x40007000

08002f4c <main>:
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b0a2      	sub	sp, #136	; 0x88
  HAL_Init();
 8002f50:	f7fe f980 	bl	8001254 <HAL_Init>
  SystemClock_Config();
 8002f54:	f7ff ff9e 	bl	8002e94 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f58:	2214      	movs	r2, #20
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	a815      	add	r0, sp, #84	; 0x54

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f5e:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f60:	f000 fc62 	bl	8003828 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f64:	4ba9      	ldr	r3, [pc, #676]	; (800320c <main+0x2c0>)
 8002f66:	9400      	str	r4, [sp, #0]
 8002f68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002f6a:	48a9      	ldr	r0, [pc, #676]	; (8003210 <main+0x2c4>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002f6c:	4da9      	ldr	r5, [pc, #676]	; (8003214 <main+0x2c8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f6e:	f042 0204 	orr.w	r2, r2, #4
 8002f72:	631a      	str	r2, [r3, #48]	; 0x30
 8002f74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f76:	f002 0204 	and.w	r2, r2, #4
 8002f7a:	9200      	str	r2, [sp, #0]
 8002f7c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f7e:	9401      	str	r4, [sp, #4]
 8002f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f82:	f042 0220 	orr.w	r2, r2, #32
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
 8002f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f8a:	f002 0220 	and.w	r2, r2, #32
 8002f8e:	9201      	str	r2, [sp, #4]
 8002f90:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f92:	9402      	str	r4, [sp, #8]
 8002f94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30
 8002f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f9e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002fa2:	9202      	str	r2, [sp, #8]
 8002fa4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa6:	9403      	str	r4, [sp, #12]
 8002fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002faa:	f042 0201 	orr.w	r2, r2, #1
 8002fae:	631a      	str	r2, [r3, #48]	; 0x30
 8002fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fb2:	f002 0201 	and.w	r2, r2, #1
 8002fb6:	9203      	str	r2, [sp, #12]
 8002fb8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fba:	9404      	str	r4, [sp, #16]
 8002fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fbe:	f042 0202 	orr.w	r2, r2, #2
 8002fc2:	631a      	str	r2, [r3, #48]	; 0x30
 8002fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fc6:	f002 0202 	and.w	r2, r2, #2
 8002fca:	9204      	str	r2, [sp, #16]
 8002fcc:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002fce:	9405      	str	r4, [sp, #20]
 8002fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fd6:	631a      	str	r2, [r3, #48]	; 0x30
 8002fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fda:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002fde:	9205      	str	r2, [sp, #20]
 8002fe0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fe2:	9406      	str	r4, [sp, #24]
 8002fe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fe6:	f042 0210 	orr.w	r2, r2, #16
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30
 8002fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fee:	f002 0210 	and.w	r2, r2, #16
 8002ff2:	9206      	str	r2, [sp, #24]
 8002ff4:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ff6:	9407      	str	r4, [sp, #28]
 8002ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ffa:	f042 0208 	orr.w	r2, r2, #8
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8003006:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003008:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800300a:	2116      	movs	r1, #22
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800300c:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800300e:	f7fe fd63 	bl	8001ad8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8003012:	4622      	mov	r2, r4
 8003014:	2180      	movs	r1, #128	; 0x80
 8003016:	4880      	ldr	r0, [pc, #512]	; (8003218 <main+0x2cc>)
 8003018:	f7fe fd5e 	bl	8001ad8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800301c:	4622      	mov	r2, r4
 800301e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003022:	487e      	ldr	r0, [pc, #504]	; (800321c <main+0x2d0>)
 8003024:	f7fe fd58 	bl	8001ad8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8003028:	4622      	mov	r2, r4
 800302a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800302e:	487c      	ldr	r0, [pc, #496]	; (8003220 <main+0x2d4>)
 8003030:	f7fe fd52 	bl	8001ad8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003034:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8003036:	2316      	movs	r3, #22
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003038:	a915      	add	r1, sp, #84	; 0x54
 800303a:	4875      	ldr	r0, [pc, #468]	; (8003210 <main+0x2c4>)
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800303c:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800303e:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003040:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003042:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003044:	f7fe fbc2 	bl	80017cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8003048:	f248 0307 	movw	r3, #32775	; 0x8007
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800304c:	a915      	add	r1, sp, #84	; 0x54
 800304e:	4872      	ldr	r0, [pc, #456]	; (8003218 <main+0x2cc>)
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8003050:	9315      	str	r3, [sp, #84]	; 0x54

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8003052:	f04f 0880 	mov.w	r8, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003056:	9516      	str	r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003058:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800305a:	f7fe fbb7 	bl	80017cc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800305e:	a915      	add	r1, sp, #84	; 0x54
 8003060:	486d      	ldr	r0, [pc, #436]	; (8003218 <main+0x2cc>)
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8003062:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003066:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003068:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306a:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800306c:	f7fe fbae 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8003070:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8003072:	a915      	add	r1, sp, #84	; 0x54
 8003074:	4866      	ldr	r0, [pc, #408]	; (8003210 <main+0x2c4>)
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8003076:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003078:	9516      	str	r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307a:	9417      	str	r4, [sp, #92]	; 0x5c

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800307c:	f04f 0904 	mov.w	r9, #4
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8003080:	f7fe fba4 	bl	80017cc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003084:	a915      	add	r1, sp, #84	; 0x54
 8003086:	4867      	ldr	r0, [pc, #412]	; (8003224 <main+0x2d8>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003088:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308a:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800308c:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003090:	f7fe fb9c 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8003094:	f44f 4350 	mov.w	r3, #53248	; 0xd000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003098:	2702      	movs	r7, #2
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800309a:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800309c:	a915      	add	r1, sp, #84	; 0x54
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800309e:	230c      	movs	r3, #12
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a0:	4860      	ldr	r0, [pc, #384]	; (8003224 <main+0x2d8>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a2:	9716      	str	r7, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a4:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a6:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80030a8:	9319      	str	r3, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030aa:	f7fe fb8f 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80030ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80030b2:	a915      	add	r1, sp, #84	; 0x54
 80030b4:	485b      	ldr	r0, [pc, #364]	; (8003224 <main+0x2d8>)
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80030b6:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030b8:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ba:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80030bc:	f7fe fb86 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80030c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80030c4:	a915      	add	r1, sp, #84	; 0x54
 80030c6:	4855      	ldr	r0, [pc, #340]	; (800321c <main+0x2d0>)
  GPIO_InitStruct.Pin = TE_Pin;
 80030c8:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030ca:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030cc:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80030ce:	f7fe fb7d 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80030d2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030d6:	a915      	add	r1, sp, #84	; 0x54
 80030d8:	4850      	ldr	r0, [pc, #320]	; (800321c <main+0x2d0>)
  hdma2d.Instance = DMA2D;
 80030da:	4d53      	ldr	r5, [pc, #332]	; (8003228 <main+0x2dc>)
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80030dc:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030de:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e0:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e2:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030e4:	f7fe fb72 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80030e8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030ec:	a915      	add	r1, sp, #84	; 0x54
 80030ee:	484c      	ldr	r0, [pc, #304]	; (8003220 <main+0x2d4>)
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80030f0:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030f2:	9616      	str	r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f4:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f6:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030f8:	f7fe fb68 	bl	80017cc <HAL_GPIO_Init>
  hdma2d.Instance = DMA2D;
 80030fc:	4b4b      	ldr	r3, [pc, #300]	; (800322c <main+0x2e0>)
  hdma2d.LayerCfg[1].InputOffset = 0;
 80030fe:	62ac      	str	r4, [r5, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8003100:	62ef      	str	r7, [r5, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003102:	632c      	str	r4, [r5, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8003104:	636c      	str	r4, [r5, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8003106:	4628      	mov	r0, r5
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8003108:	e885 0098 	stmia.w	r5, {r3, r4, r7}
  hdma2d.Init.OutputOffset = 0;
 800310c:	60ec      	str	r4, [r5, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800310e:	f7fe fa4b 	bl	80015a8 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8003112:	4631      	mov	r1, r6
 8003114:	4628      	mov	r0, r5
 8003116:	f7fe fb0f 	bl	8001738 <HAL_DMA2D_ConfigLayer>
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800311a:	4621      	mov	r1, r4
 800311c:	221c      	movs	r2, #28
 800311e:	a815      	add	r0, sp, #84	; 0x54
 8003120:	f000 fb82 	bl	8003828 <memset>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003124:	4842      	ldr	r0, [pc, #264]	; (8003230 <main+0x2e4>)
 8003126:	4b43      	ldr	r3, [pc, #268]	; (8003234 <main+0x2e8>)
  hi2c3.Instance = I2C3;
 8003128:	4d43      	ldr	r5, [pc, #268]	; (8003238 <main+0x2ec>)
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800312a:	6084      	str	r4, [r0, #8]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800312c:	e880 0048 	stmia.w	r0, {r3, r6}
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003130:	2240      	movs	r2, #64	; 0x40
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8003132:	2310      	movs	r3, #16
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003134:	a915      	add	r1, sp, #84	; 0x54
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8003136:	6103      	str	r3, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003138:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800313a:	f8c0 8018 	str.w	r8, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800313e:	61c4      	str	r4, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8003140:	6204      	str	r4, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8003142:	6244      	str	r4, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8003144:	6284      	str	r4, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 16;
 8003146:	9315      	str	r3, [sp, #84]	; 0x54
  SdramTiming.ExitSelfRefreshDelay = 16;
 8003148:	9316      	str	r3, [sp, #88]	; 0x58
  SdramTiming.SelfRefreshTime = 16;
 800314a:	9317      	str	r3, [sp, #92]	; 0x5c
  SdramTiming.RowCycleDelay = 16;
 800314c:	9318      	str	r3, [sp, #96]	; 0x60
  SdramTiming.WriteRecoveryTime = 16;
 800314e:	9319      	str	r3, [sp, #100]	; 0x64
  SdramTiming.RPDelay = 16;
 8003150:	931a      	str	r3, [sp, #104]	; 0x68
  SdramTiming.RCDDelay = 16;
 8003152:	931b      	str	r3, [sp, #108]	; 0x6c
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8003154:	f8c0 900c 	str.w	r9, [r0, #12]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003158:	f7ff fa88 	bl	800266c <HAL_SDRAM_Init>
  hi2c3.Init.ClockSpeed = 100000;
 800315c:	4a37      	ldr	r2, [pc, #220]	; (800323c <main+0x2f0>)
 800315e:	4b38      	ldr	r3, [pc, #224]	; (8003240 <main+0x2f4>)
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003160:	60ac      	str	r4, [r5, #8]
  hi2c3.Init.ClockSpeed = 100000;
 8003162:	e885 000c 	stmia.w	r5, {r2, r3}
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003166:	4628      	mov	r0, r5
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003168:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800316c:	612b      	str	r3, [r5, #16]
  hi2c3.Init.OwnAddress1 = 0;
 800316e:	60ec      	str	r4, [r5, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003170:	616c      	str	r4, [r5, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003172:	61ac      	str	r4, [r5, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003174:	61ec      	str	r4, [r5, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003176:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003178:	f7fe fcb4 	bl	8001ae4 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800317c:	4621      	mov	r1, r4
 800317e:	4628      	mov	r0, r5
 8003180:	f7fe fd54 	bl	8001c2c <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003184:	4621      	mov	r1, r4
 8003186:	4628      	mov	r0, r5
 8003188:	f7fe fd6f 	bl	8001c6a <HAL_I2CEx_ConfigDigitalFilter>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800318c:	4621      	mov	r1, r4
 800318e:	2234      	movs	r2, #52	; 0x34
 8003190:	a808      	add	r0, sp, #32
 8003192:	f000 fb49 	bl	8003828 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8003196:	4621      	mov	r1, r4
 8003198:	2234      	movs	r2, #52	; 0x34
 800319a:	a815      	add	r0, sp, #84	; 0x54
 800319c:	f000 fb44 	bl	8003828 <memset>
  hltdc.Instance = LTDC;
 80031a0:	4d28      	ldr	r5, [pc, #160]	; (8003244 <main+0x2f8>)
 80031a2:	4b29      	ldr	r3, [pc, #164]	; (8003248 <main+0x2fc>)
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80031a4:	60ac      	str	r4, [r5, #8]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80031a6:	e885 0018 	stmia.w	r5, {r3, r4}
  hltdc.Init.HorizontalSync = 7;
 80031aa:	2307      	movs	r3, #7
 80031ac:	616b      	str	r3, [r5, #20]
  hltdc.Init.VerticalSync = 3;
 80031ae:	2303      	movs	r3, #3
 80031b0:	61ab      	str	r3, [r5, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80031b2:	230e      	movs	r3, #14
 80031b4:	61eb      	str	r3, [r5, #28]
  hltdc.Init.AccumulatedActiveW = 334;
 80031b6:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 80031ba:	626b      	str	r3, [r5, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 245;
 80031bc:	23f5      	movs	r3, #245	; 0xf5
 80031be:	62ab      	str	r3, [r5, #40]	; 0x28
  hltdc.Init.TotalWidth = 340;
 80031c0:	f44f 73aa 	mov.w	r3, #340	; 0x154
  hltdc.Init.AccumulatedVBP = 5;
 80031c4:	2705      	movs	r7, #5
  hltdc.Init.TotalWidth = 340;
 80031c6:	62eb      	str	r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80031c8:	4628      	mov	r0, r5
  hltdc.Init.TotalHeigh = 247;
 80031ca:	23f7      	movs	r3, #247	; 0xf7
 80031cc:	632b      	str	r3, [r5, #48]	; 0x30
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80031ce:	60ec      	str	r4, [r5, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80031d0:	612c      	str	r4, [r5, #16]
  hltdc.Init.Backcolor.Blue = 0;
 80031d2:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80031d6:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80031da:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.AccumulatedVBP = 5;
 80031de:	622f      	str	r7, [r5, #32]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80031e0:	f44f 6880 	mov.w	r8, #1024	; 0x400
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80031e4:	f7fe fde6 	bl	8001db4 <HAL_LTDC_Init>
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80031e8:	4622      	mov	r2, r4
 80031ea:	a908      	add	r1, sp, #32
 80031ec:	4628      	mov	r0, r5
  pLayerCfg.WindowX0 = 0;
 80031ee:	9408      	str	r4, [sp, #32]
  pLayerCfg.WindowX1 = 0;
 80031f0:	9409      	str	r4, [sp, #36]	; 0x24
  pLayerCfg.WindowY0 = 0;
 80031f2:	940a      	str	r4, [sp, #40]	; 0x28
  pLayerCfg.WindowY1 = 0;
 80031f4:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80031f6:	940c      	str	r4, [sp, #48]	; 0x30
  pLayerCfg.Alpha = 0;
 80031f8:	940d      	str	r4, [sp, #52]	; 0x34
  pLayerCfg.Alpha0 = 0;
 80031fa:	940e      	str	r4, [sp, #56]	; 0x38
  pLayerCfg.FBStartAdress = 0;
 80031fc:	9411      	str	r4, [sp, #68]	; 0x44
  pLayerCfg.ImageWidth = 0;
 80031fe:	9412      	str	r4, [sp, #72]	; 0x48
  pLayerCfg.ImageHeight = 0;
 8003200:	9413      	str	r4, [sp, #76]	; 0x4c
  pLayerCfg.Backcolor.Blue = 0;
 8003202:	f88d 4050 	strb.w	r4, [sp, #80]	; 0x50
  pLayerCfg.Backcolor.Green = 0;
 8003206:	f88d 4051 	strb.w	r4, [sp, #81]	; 0x51
 800320a:	e01f      	b.n	800324c <main+0x300>
 800320c:	40023800 	.word	0x40023800
 8003210:	40020800 	.word	0x40020800
 8003214:	10120000 	.word	0x10120000
 8003218:	40020000 	.word	0x40020000
 800321c:	40020c00 	.word	0x40020c00
 8003220:	40021800 	.word	0x40021800
 8003224:	40020400 	.word	0x40020400
 8003228:	2000041c 	.word	0x2000041c
 800322c:	4002b000 	.word	0x4002b000
 8003230:	2000045c 	.word	0x2000045c
 8003234:	a0000140 	.word	0xa0000140
 8003238:	200002c8 	.word	0x200002c8
 800323c:	40005c00 	.word	0x40005c00
 8003240:	000186a0 	.word	0x000186a0
 8003244:	20000374 	.word	0x20000374
 8003248:	40016800 	.word	0x40016800
  pLayerCfg.Backcolor.Red = 0;
 800324c:	f88d 4052 	strb.w	r4, [sp, #82]	; 0x52
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003250:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003254:	9710      	str	r7, [sp, #64]	; 0x40
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003256:	f7fe fe19 	bl	8001e8c <HAL_LTDC_ConfigLayer>
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800325a:	4632      	mov	r2, r6
 800325c:	a915      	add	r1, sp, #84	; 0x54
 800325e:	4628      	mov	r0, r5
  pLayerCfg1.WindowX0 = 0;
 8003260:	9415      	str	r4, [sp, #84]	; 0x54
  pLayerCfg1.WindowX1 = 0;
 8003262:	9416      	str	r4, [sp, #88]	; 0x58
  pLayerCfg1.WindowY0 = 0;
 8003264:	9417      	str	r4, [sp, #92]	; 0x5c
  pLayerCfg1.WindowY1 = 0;
 8003266:	9418      	str	r4, [sp, #96]	; 0x60
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003268:	9419      	str	r4, [sp, #100]	; 0x64
  pLayerCfg1.Alpha = 0;
 800326a:	941a      	str	r4, [sp, #104]	; 0x68
  pLayerCfg1.Alpha0 = 0;
 800326c:	941b      	str	r4, [sp, #108]	; 0x6c
  pLayerCfg1.FBStartAdress = 0;
 800326e:	941e      	str	r4, [sp, #120]	; 0x78
  pLayerCfg1.ImageWidth = 0;
 8003270:	941f      	str	r4, [sp, #124]	; 0x7c
  pLayerCfg1.ImageHeight = 0;
 8003272:	9420      	str	r4, [sp, #128]	; 0x80
  pLayerCfg1.Backcolor.Blue = 0;
 8003274:	f88d 4084 	strb.w	r4, [sp, #132]	; 0x84
  pLayerCfg1.Backcolor.Green = 0;
 8003278:	f88d 4085 	strb.w	r4, [sp, #133]	; 0x85
  pLayerCfg1.Backcolor.Red = 0;
 800327c:	f88d 4086 	strb.w	r4, [sp, #134]	; 0x86
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003280:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003284:	971d      	str	r7, [sp, #116]	; 0x74
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8003286:	f7fe fe01 	bl	8001e8c <HAL_LTDC_ConfigLayer>
  hspi5.Instance = SPI5;
 800328a:	4822      	ldr	r0, [pc, #136]	; (8003314 <main+0x3c8>)
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800328c:	4922      	ldr	r1, [pc, #136]	; (8003318 <main+0x3cc>)
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800328e:	6084      	str	r4, [r0, #8]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003290:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003294:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003298:	f44f 7300 	mov.w	r3, #512	; 0x200
 800329c:	6183      	str	r3, [r0, #24]
  hspi5.Init.CRCPolynomial = 10;
 800329e:	230a      	movs	r3, #10
 80032a0:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80032a2:	60c4      	str	r4, [r0, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032a4:	6104      	str	r4, [r0, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032a6:	6144      	str	r4, [r0, #20]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032a8:	61c4      	str	r4, [r0, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032aa:	6204      	str	r4, [r0, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80032ac:	6244      	str	r4, [r0, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032ae:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80032b0:	f7ff fab8 	bl	8002824 <HAL_SPI_Init>
  BSP_LCD_Init();
 80032b4:	f7fd fd0e 	bl	8000cd4 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);
 80032b8:	4620      	mov	r0, r4
 80032ba:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80032be:	f7fd fbed 	bl	8000a9c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 80032c2:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80032c6:	4630      	mov	r0, r6
 80032c8:	f7fd fbe8 	bl	8000a9c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 80032cc:	4630      	mov	r0, r6
 80032ce:	f7fd fc25 	bl	8000b1c <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 80032d2:	f7fd fc53 	bl	8000b7c <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80032d6:	f04f 30ff 	mov.w	r0, #4294967295
 80032da:	f7fd fc31 	bl	8000b40 <BSP_LCD_Clear>
  	BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
 80032de:	4e0f      	ldr	r6, [pc, #60]	; (800331c <main+0x3d0>)
		BSP_LCD_DisplayStringAtLine(1,(uint8_t*)"TEST LINE 1");
 80032e0:	4d0f      	ldr	r5, [pc, #60]	; (8003320 <main+0x3d4>)
		BSP_LCD_DisplayStringAtLine(2,(uint8_t*)"TEST LINE 2");
 80032e2:	4c10      	ldr	r4, [pc, #64]	; (8003324 <main+0x3d8>)
  	BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
 80032e4:	4630      	mov	r0, r6
 80032e6:	f7fd fc1f 	bl	8000b28 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAtLine(1,(uint8_t*)"TEST LINE 1");
 80032ea:	4629      	mov	r1, r5
 80032ec:	2001      	movs	r0, #1
 80032ee:	f7fd fe21 	bl	8000f34 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(2,(uint8_t*)"TEST LINE 2");
 80032f2:	4621      	mov	r1, r4
 80032f4:	2002      	movs	r0, #2
 80032f6:	f7fd fe1d 	bl	8000f34 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(3,(uint8_t*)"TEST LINE 3");
 80032fa:	490b      	ldr	r1, [pc, #44]	; (8003328 <main+0x3dc>)
 80032fc:	2003      	movs	r0, #3
 80032fe:	f7fd fe19 	bl	8000f34 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(4,(uint8_t*)"TEST LINE 4");
 8003302:	490a      	ldr	r1, [pc, #40]	; (800332c <main+0x3e0>)
 8003304:	2004      	movs	r0, #4
 8003306:	f7fd fe15 	bl	8000f34 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(5,(uint8_t*)"TEST LINE 5");
 800330a:	4909      	ldr	r1, [pc, #36]	; (8003330 <main+0x3e4>)
 800330c:	2005      	movs	r0, #5
 800330e:	f7fd fe11 	bl	8000f34 <BSP_LCD_DisplayStringAtLine>
 8003312:	e7e7      	b.n	80032e4 <main+0x398>
 8003314:	2000031c 	.word	0x2000031c
 8003318:	40015000 	.word	0x40015000
 800331c:	ff404040 	.word	0xff404040
 8003320:	08005310 	.word	0x08005310
 8003324:	0800531c 	.word	0x0800531c
 8003328:	08005328 	.word	0x08005328
 800332c:	08005334 	.word	0x08005334
 8003330:	08005340 	.word	0x08005340

08003334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003334:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003336:	4b0e      	ldr	r3, [pc, #56]	; (8003370 <HAL_MspInit+0x3c>)
 8003338:	2100      	movs	r1, #0
 800333a:	9100      	str	r1, [sp, #0]
 800333c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800333e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003342:	645a      	str	r2, [r3, #68]	; 0x44
 8003344:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003346:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800334a:	9200      	str	r2, [sp, #0]
 800334c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800334e:	9101      	str	r1, [sp, #4]
 8003350:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003352:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003356:	641a      	str	r2, [r3, #64]	; 0x40
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003360:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8003362:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003364:	f7fd ffb6 	bl	80012d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003368:	b003      	add	sp, #12
 800336a:	f85d fb04 	ldr.w	pc, [sp], #4
 800336e:	bf00      	nop
 8003370:	40023800 	.word	0x40023800

08003374 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8003374:	6802      	ldr	r2, [r0, #0]
 8003376:	4b09      	ldr	r3, [pc, #36]	; (800339c <HAL_DMA2D_MspInit+0x28>)
 8003378:	429a      	cmp	r2, r3
{
 800337a:	b082      	sub	sp, #8
  if(hdma2d->Instance==DMA2D)
 800337c:	d10b      	bne.n	8003396 <HAL_DMA2D_MspInit+0x22>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800337e:	2300      	movs	r3, #0
 8003380:	9301      	str	r3, [sp, #4]
 8003382:	4b07      	ldr	r3, [pc, #28]	; (80033a0 <HAL_DMA2D_MspInit+0x2c>)
 8003384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003386:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800338a:	631a      	str	r2, [r3, #48]	; 0x30
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003392:	9301      	str	r3, [sp, #4]
 8003394:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003396:	b002      	add	sp, #8
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	4002b000 	.word	0x4002b000
 80033a0:	40023800 	.word	0x40023800

080033a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033a8:	4604      	mov	r4, r0
 80033aa:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ac:	2214      	movs	r2, #20
 80033ae:	2100      	movs	r1, #0
 80033b0:	a803      	add	r0, sp, #12
 80033b2:	f000 fa39 	bl	8003828 <memset>
  if(hi2c->Instance==I2C3)
 80033b6:	6822      	ldr	r2, [r4, #0]
 80033b8:	4b20      	ldr	r3, [pc, #128]	; (800343c <HAL_I2C_MspInit+0x98>)
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d13a      	bne.n	8003434 <HAL_I2C_MspInit+0x90>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033be:	4c20      	ldr	r4, [pc, #128]	; (8003440 <HAL_I2C_MspInit+0x9c>)
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80033c0:	4820      	ldr	r0, [pc, #128]	; (8003444 <HAL_I2C_MspInit+0xa0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033c2:	2500      	movs	r5, #0
 80033c4:	9500      	str	r5, [sp, #0]
 80033c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033c8:	f043 0304 	orr.w	r3, r3, #4
 80033cc:	6323      	str	r3, [r4, #48]	; 0x30
 80033ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d8:	9501      	str	r5, [sp, #4]
 80033da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6323      	str	r3, [r4, #48]	; 0x30
 80033e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	9301      	str	r3, [sp, #4]
 80033ea:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033ec:	f04f 0812 	mov.w	r8, #18
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80033f0:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033f4:	2701      	movs	r7, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80033f6:	2604      	movs	r6, #4
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80033f8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80033fa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033fc:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003400:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003402:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003404:	f7fe f9e2 	bl	80017cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003408:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800340c:	a903      	add	r1, sp, #12
 800340e:	480e      	ldr	r0, [pc, #56]	; (8003448 <HAL_I2C_MspInit+0xa4>)
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003410:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003412:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003416:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003418:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800341a:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800341c:	f7fe f9d6 	bl	80017cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003420:	9502      	str	r5, [sp, #8]
 8003422:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003424:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003428:	6423      	str	r3, [r4, #64]	; 0x40
 800342a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800342c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003430:	9302      	str	r3, [sp, #8]
 8003432:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003434:	b008      	add	sp, #32
 8003436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800343a:	bf00      	nop
 800343c:	40005c00 	.word	0x40005c00
 8003440:	40023800 	.word	0x40023800
 8003444:	40020800 	.word	0x40020800
 8003448:	40020000 	.word	0x40020000

0800344c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800344c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800344e:	4604      	mov	r4, r0
 8003450:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003452:	2214      	movs	r2, #20
 8003454:	2100      	movs	r1, #0
 8003456:	a807      	add	r0, sp, #28
 8003458:	f000 f9e6 	bl	8003828 <memset>
  if(hltdc->Instance==LTDC)
 800345c:	6822      	ldr	r2, [r4, #0]
 800345e:	4b53      	ldr	r3, [pc, #332]	; (80035ac <HAL_LTDC_MspInit+0x160>)
 8003460:	429a      	cmp	r2, r3
 8003462:	f040 80a0 	bne.w	80035a6 <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003466:	2400      	movs	r4, #0
 8003468:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 800346c:	9400      	str	r4, [sp, #0]
 800346e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = ENABLE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003470:	484f      	ldr	r0, [pc, #316]	; (80035b0 <HAL_LTDC_MspInit+0x164>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003472:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003476:	645a      	str	r2, [r3, #68]	; 0x44
 8003478:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800347a:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800347e:	9200      	str	r2, [sp, #0]
 8003480:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003482:	9401      	str	r4, [sp, #4]
 8003484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003486:	f042 0220 	orr.w	r2, r2, #32
 800348a:	631a      	str	r2, [r3, #48]	; 0x30
 800348c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800348e:	f002 0220 	and.w	r2, r2, #32
 8003492:	9201      	str	r2, [sp, #4]
 8003494:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003496:	9402      	str	r4, [sp, #8]
 8003498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	631a      	str	r2, [r3, #48]	; 0x30
 80034a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034a2:	f002 0201 	and.w	r2, r2, #1
 80034a6:	9202      	str	r2, [sp, #8]
 80034a8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034aa:	9403      	str	r4, [sp, #12]
 80034ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ae:	f042 0202 	orr.w	r2, r2, #2
 80034b2:	631a      	str	r2, [r3, #48]	; 0x30
 80034b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b6:	f002 0202 	and.w	r2, r2, #2
 80034ba:	9203      	str	r2, [sp, #12]
 80034bc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80034be:	9404      	str	r4, [sp, #16]
 80034c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034c6:	631a      	str	r2, [r3, #48]	; 0x30
 80034c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ca:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80034ce:	9204      	str	r2, [sp, #16]
 80034d0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034d2:	9405      	str	r4, [sp, #20]
 80034d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034d6:	f042 0204 	orr.w	r2, r2, #4
 80034da:	631a      	str	r2, [r3, #48]	; 0x30
 80034dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034de:	f002 0204 	and.w	r2, r2, #4
 80034e2:	9205      	str	r2, [sp, #20]
 80034e4:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034e6:	9406      	str	r4, [sp, #24]
 80034e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ea:	f042 0208 	orr.w	r2, r2, #8
 80034ee:	631a      	str	r2, [r3, #48]	; 0x30
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f8:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034fa:	260e      	movs	r6, #14
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034fc:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fe:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8003500:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003504:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8003506:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003508:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800350a:	f7fe f95f 	bl	80017cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 800350e:	f641 0358 	movw	r3, #6232	; 0x1858
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003512:	a907      	add	r1, sp, #28
 8003514:	4827      	ldr	r0, [pc, #156]	; (80035b4 <HAL_LTDC_MspInit+0x168>)
    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 8003516:	9307      	str	r3, [sp, #28]

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003518:	2709      	movs	r7, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351e:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003520:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003522:	f7fe f953 	bl	80017cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8003526:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003528:	a907      	add	r1, sp, #28
 800352a:	4823      	ldr	r0, [pc, #140]	; (80035b8 <HAL_LTDC_MspInit+0x16c>)
    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800352c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352e:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003530:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003532:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003534:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003536:	f7fe f949 	bl	80017cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800353a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800353e:	a907      	add	r1, sp, #28
 8003540:	481d      	ldr	r0, [pc, #116]	; (80035b8 <HAL_LTDC_MspInit+0x16c>)
    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8003542:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003544:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003546:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003548:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800354a:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800354c:	f7fe f93e 	bl	80017cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8003550:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003554:	a907      	add	r1, sp, #28
 8003556:	4819      	ldr	r0, [pc, #100]	; (80035bc <HAL_LTDC_MspInit+0x170>)
    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8003558:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800355e:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003560:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003562:	f7fe f933 	bl	80017cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8003566:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800356a:	a907      	add	r1, sp, #28
 800356c:	4814      	ldr	r0, [pc, #80]	; (80035c0 <HAL_LTDC_MspInit+0x174>)
    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800356e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003570:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003572:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003574:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003576:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003578:	f7fe f928 	bl	80017cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800357c:	2348      	movs	r3, #72	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800357e:	a907      	add	r1, sp, #28
 8003580:	4810      	ldr	r0, [pc, #64]	; (80035c4 <HAL_LTDC_MspInit+0x178>)
    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8003582:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003584:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003586:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003588:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800358a:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800358c:	f7fe f91e 	bl	80017cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8003590:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003594:	a907      	add	r1, sp, #28
 8003596:	4809      	ldr	r0, [pc, #36]	; (80035bc <HAL_LTDC_MspInit+0x170>)
    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8003598:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800359e:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80035a0:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035a2:	f7fe f913 	bl	80017cc <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80035a6:	b00d      	add	sp, #52	; 0x34
 80035a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40016800 	.word	0x40016800
 80035b0:	40021400 	.word	0x40021400
 80035b4:	40020000 	.word	0x40020000
 80035b8:	40020400 	.word	0x40020400
 80035bc:	40021800 	.word	0x40021800
 80035c0:	40020800 	.word	0x40020800
 80035c4:	40020c00 	.word	0x40020c00

080035c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035c8:	b510      	push	{r4, lr}
 80035ca:	4604      	mov	r4, r0
 80035cc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ce:	2214      	movs	r2, #20
 80035d0:	2100      	movs	r1, #0
 80035d2:	a803      	add	r0, sp, #12
 80035d4:	f000 f928 	bl	8003828 <memset>
  if(hspi->Instance==SPI5)
 80035d8:	6822      	ldr	r2, [r4, #0]
 80035da:	4b13      	ldr	r3, [pc, #76]	; (8003628 <HAL_SPI_MspInit+0x60>)
 80035dc:	429a      	cmp	r2, r3
 80035de:	d121      	bne.n	8003624 <HAL_SPI_MspInit+0x5c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80035e0:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 80035e4:	2100      	movs	r1, #0
 80035e6:	9101      	str	r1, [sp, #4]
 80035e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80035ea:	4810      	ldr	r0, [pc, #64]	; (800362c <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 80035ec:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80035f0:	645a      	str	r2, [r3, #68]	; 0x44
 80035f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035f4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80035f8:	9201      	str	r2, [sp, #4]
 80035fa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80035fc:	9102      	str	r1, [sp, #8]
 80035fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003600:	f042 0220 	orr.w	r2, r2, #32
 8003604:	631a      	str	r2, [r3, #48]	; 0x30
 8003606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003608:	f003 0320 	and.w	r3, r3, #32
 800360c:	9302      	str	r3, [sp, #8]
 800360e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8003610:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003614:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003616:	2302      	movs	r3, #2
 8003618:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800361a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800361c:	2305      	movs	r3, #5
 800361e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003620:	f7fe f8d4 	bl	80017cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8003624:	b008      	add	sp, #32
 8003626:	bd10      	pop	{r4, pc}
 8003628:	40015000 	.word	0x40015000
 800362c:	40021400 	.word	0x40021400

08003630 <HAL_SPI_MspDeInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
  if(hspi->Instance==SPI5)
 8003630:	6802      	ldr	r2, [r0, #0]
 8003632:	4b07      	ldr	r3, [pc, #28]	; (8003650 <HAL_SPI_MspDeInit+0x20>)
 8003634:	429a      	cmp	r2, r3
 8003636:	d109      	bne.n	800364c <HAL_SPI_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8003638:	4a06      	ldr	r2, [pc, #24]	; (8003654 <HAL_SPI_MspDeInit+0x24>)
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800363a:	4807      	ldr	r0, [pc, #28]	; (8003658 <HAL_SPI_MspDeInit+0x28>)
    __HAL_RCC_SPI5_CLK_DISABLE();
 800363c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800363e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003642:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8003644:	f44f 7160 	mov.w	r1, #896	; 0x380
 8003648:	f7fe b9ac 	b.w	80019a4 <HAL_GPIO_DeInit>
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40015000 	.word	0x40015000
 8003654:	40023800 	.word	0x40023800
 8003658:	40021400 	.word	0x40021400

0800365c <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800365c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003660:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003662:	2214      	movs	r2, #20
 8003664:	2100      	movs	r1, #0
 8003666:	a801      	add	r0, sp, #4
 8003668:	f000 f8de 	bl	8003828 <memset>
  if (FMC_Initialized) {
 800366c:	4b2b      	ldr	r3, [pc, #172]	; (800371c <HAL_SDRAM_MspInit+0xc0>)
 800366e:	681c      	ldr	r4, [r3, #0]
 8003670:	2c00      	cmp	r4, #0
 8003672:	d150      	bne.n	8003716 <HAL_SDRAM_MspInit+0xba>
  FMC_Initialized = 1;
 8003674:	f04f 0801 	mov.w	r8, #1
 8003678:	f8c3 8000 	str.w	r8, [r3]
  __HAL_RCC_FMC_CLK_ENABLE();
 800367c:	4b28      	ldr	r3, [pc, #160]	; (8003720 <HAL_SDRAM_MspInit+0xc4>)
 800367e:	9400      	str	r4, [sp, #0]
 8003680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003682:	4828      	ldr	r0, [pc, #160]	; (8003724 <HAL_SDRAM_MspInit+0xc8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8003684:	ea42 0208 	orr.w	r2, r2, r8
 8003688:	639a      	str	r2, [r3, #56]	; 0x38
 800368a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368c:	ea03 0308 	and.w	r3, r3, r8
 8003690:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003692:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003694:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003696:	250c      	movs	r5, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8003698:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369a:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 800369c:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80036a0:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 80036a2:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036a4:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036a6:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80036a8:	f7fe f890 	bl	80017cc <HAL_GPIO_Init>
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80036ac:	a901      	add	r1, sp, #4
 80036ae:	481e      	ldr	r0, [pc, #120]	; (8003728 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80036b0:	f8cd 8004 	str.w	r8, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b4:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b6:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b8:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036ba:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80036bc:	f7fe f886 	bl	80017cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 80036c0:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80036c4:	a901      	add	r1, sp, #4
 80036c6:	4819      	ldr	r0, [pc, #100]	; (800372c <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 80036c8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ca:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036cc:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ce:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036d0:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80036d2:	f7fe f87b 	bl	80017cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 80036d6:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036da:	a901      	add	r1, sp, #4
 80036dc:	4814      	ldr	r0, [pc, #80]	; (8003730 <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 80036de:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e0:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e2:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e4:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036e6:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036e8:	f7fe f870 	bl	80017cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 80036ec:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036f0:	a901      	add	r1, sp, #4
 80036f2:	4810      	ldr	r0, [pc, #64]	; (8003734 <HAL_SDRAM_MspInit+0xd8>)
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 80036f4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f6:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036fa:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036fc:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036fe:	f7fe f865 	bl	80017cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8003702:	2360      	movs	r3, #96	; 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003704:	a901      	add	r1, sp, #4
 8003706:	480c      	ldr	r0, [pc, #48]	; (8003738 <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8003708:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370a:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370c:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800370e:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003710:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003712:	f7fe f85b 	bl	80017cc <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003716:	b006      	add	sp, #24
 8003718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800371c:	20000214 	.word	0x20000214
 8003720:	40023800 	.word	0x40023800
 8003724:	40021400 	.word	0x40021400
 8003728:	40020800 	.word	0x40020800
 800372c:	40021800 	.word	0x40021800
 8003730:	40021000 	.word	0x40021000
 8003734:	40020c00 	.word	0x40020c00
 8003738:	40020400 	.word	0x40020400

0800373c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800373c:	f7fd bda4 	b.w	8001288 <HAL_IncTick>

08003740 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003740:	490f      	ldr	r1, [pc, #60]	; (8003780 <SystemInit+0x40>)
 8003742:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003746:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800374a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800374e:	4b0d      	ldr	r3, [pc, #52]	; (8003784 <SystemInit+0x44>)
 8003750:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003752:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003754:	f042 0201 	orr.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800375a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003762:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003766:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003768:	4a07      	ldr	r2, [pc, #28]	; (8003788 <SystemInit+0x48>)
 800376a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003772:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003774:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003776:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800377a:	608b      	str	r3, [r1, #8]
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	e000ed00 	.word	0xe000ed00
 8003784:	40023800 	.word	0x40023800
 8003788:	24003010 	.word	0x24003010

0800378c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800378c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037c4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003790:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003792:	e003      	b.n	800379c <LoopCopyDataInit>

08003794 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003794:	4b0c      	ldr	r3, [pc, #48]	; (80037c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003796:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003798:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800379a:	3104      	adds	r1, #4

0800379c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800379c:	480b      	ldr	r0, [pc, #44]	; (80037cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800379e:	4b0c      	ldr	r3, [pc, #48]	; (80037d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80037a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80037a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80037a4:	d3f6      	bcc.n	8003794 <CopyDataInit>
  ldr  r2, =_sbss
 80037a6:	4a0b      	ldr	r2, [pc, #44]	; (80037d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80037a8:	e002      	b.n	80037b0 <LoopFillZerobss>

080037aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80037aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80037ac:	f842 3b04 	str.w	r3, [r2], #4

080037b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80037b0:	4b09      	ldr	r3, [pc, #36]	; (80037d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80037b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80037b4:	d3f9      	bcc.n	80037aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80037b6:	f7ff ffc3 	bl	8003740 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037ba:	f000 f811 	bl	80037e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037be:	f7ff fbc5 	bl	8002f4c <main>
  bx  lr    
 80037c2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80037c4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80037c8:	08005374 	.word	0x08005374
  ldr  r0, =_sdata
 80037cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80037d0:	20000050 	.word	0x20000050
  ldr  r2, =_sbss
 80037d4:	20000050 	.word	0x20000050
  ldr  r3, = _ebss
 80037d8:	20000490 	.word	0x20000490

080037dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037dc:	e7fe      	b.n	80037dc <ADC_IRQHandler>
	...

080037e0 <__libc_init_array>:
 80037e0:	b570      	push	{r4, r5, r6, lr}
 80037e2:	4e0d      	ldr	r6, [pc, #52]	; (8003818 <__libc_init_array+0x38>)
 80037e4:	4c0d      	ldr	r4, [pc, #52]	; (800381c <__libc_init_array+0x3c>)
 80037e6:	1ba4      	subs	r4, r4, r6
 80037e8:	10a4      	asrs	r4, r4, #2
 80037ea:	2500      	movs	r5, #0
 80037ec:	42a5      	cmp	r5, r4
 80037ee:	d109      	bne.n	8003804 <__libc_init_array+0x24>
 80037f0:	4e0b      	ldr	r6, [pc, #44]	; (8003820 <__libc_init_array+0x40>)
 80037f2:	4c0c      	ldr	r4, [pc, #48]	; (8003824 <__libc_init_array+0x44>)
 80037f4:	f000 f820 	bl	8003838 <_init>
 80037f8:	1ba4      	subs	r4, r4, r6
 80037fa:	10a4      	asrs	r4, r4, #2
 80037fc:	2500      	movs	r5, #0
 80037fe:	42a5      	cmp	r5, r4
 8003800:	d105      	bne.n	800380e <__libc_init_array+0x2e>
 8003802:	bd70      	pop	{r4, r5, r6, pc}
 8003804:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003808:	4798      	blx	r3
 800380a:	3501      	adds	r5, #1
 800380c:	e7ee      	b.n	80037ec <__libc_init_array+0xc>
 800380e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003812:	4798      	blx	r3
 8003814:	3501      	adds	r5, #1
 8003816:	e7f2      	b.n	80037fe <__libc_init_array+0x1e>
 8003818:	0800536c 	.word	0x0800536c
 800381c:	0800536c 	.word	0x0800536c
 8003820:	0800536c 	.word	0x0800536c
 8003824:	08005370 	.word	0x08005370

08003828 <memset>:
 8003828:	4402      	add	r2, r0
 800382a:	4603      	mov	r3, r0
 800382c:	4293      	cmp	r3, r2
 800382e:	d100      	bne.n	8003832 <memset+0xa>
 8003830:	4770      	bx	lr
 8003832:	f803 1b01 	strb.w	r1, [r3], #1
 8003836:	e7f9      	b.n	800382c <memset+0x4>

08003838 <_init>:
 8003838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800383a:	bf00      	nop
 800383c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800383e:	bc08      	pop	{r3}
 8003840:	469e      	mov	lr, r3
 8003842:	4770      	bx	lr

08003844 <_fini>:
 8003844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003846:	bf00      	nop
 8003848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800384a:	bc08      	pop	{r3}
 800384c:	469e      	mov	lr, r3
 800384e:	4770      	bx	lr
