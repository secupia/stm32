
open103v_iap.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003304  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000674  080034e8  080034e8  000134e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b5c  08003b5c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b5c  08003b5c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b5c  08003b5c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b5c  08003b5c  00013b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b60  08003b60  00013b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  20000010  08003b70  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  08003b70  00020530  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000822b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c67  00000000  00000000  00028260  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000818  00000000  00000000  00029ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000750  00000000  00000000  0002a6e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001937f  00000000  00000000  0002ae30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007ea6  00000000  00000000  000441af  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009199e  00000000  00000000  0004c055  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dd9f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e7c  00000000  00000000  000dda70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000010 	.word	0x20000010
 8000200:	00000000 	.word	0x00000000
 8000204:	080034d0 	.word	0x080034d0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000014 	.word	0x20000014
 8000220:	080034d0 	.word	0x080034d0

08000224 <Int2Str>:
  * @param  p_str: The string output pointer
  * @param  intnum: The integer to be converted
  * @retval None
  */
void Int2Str(uint8_t *p_str, uint32_t intnum)
{
 8000224:	b480      	push	{r7}
 8000226:	b087      	sub	sp, #28
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	6039      	str	r1, [r7, #0]
  uint32_t i, divider = 1000000000, pos = 0, status = 0;
 800022e:	4b25      	ldr	r3, [pc, #148]	; (80002c4 <Int2Str+0xa0>)
 8000230:	613b      	str	r3, [r7, #16]
 8000232:	2300      	movs	r3, #0
 8000234:	60fb      	str	r3, [r7, #12]
 8000236:	2300      	movs	r3, #0
 8000238:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < 10; i++)
 800023a:	2300      	movs	r3, #0
 800023c:	617b      	str	r3, [r7, #20]
 800023e:	e038      	b.n	80002b2 <Int2Str+0x8e>
  {
    p_str[pos++] = (intnum / divider) + 48;
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	693b      	ldr	r3, [r7, #16]
 8000244:	fbb2 f3f3 	udiv	r3, r2, r3
 8000248:	b2da      	uxtb	r2, r3
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	1c59      	adds	r1, r3, #1
 800024e:	60f9      	str	r1, [r7, #12]
 8000250:	6879      	ldr	r1, [r7, #4]
 8000252:	440b      	add	r3, r1
 8000254:	3230      	adds	r2, #48	; 0x30
 8000256:	b2d2      	uxtb	r2, r2
 8000258:	701a      	strb	r2, [r3, #0]

    intnum = intnum % divider;
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	693a      	ldr	r2, [r7, #16]
 800025e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000262:	6939      	ldr	r1, [r7, #16]
 8000264:	fb01 f202 	mul.w	r2, r1, r2
 8000268:	1a9b      	subs	r3, r3, r2
 800026a:	603b      	str	r3, [r7, #0]
    divider /= 10;
 800026c:	693b      	ldr	r3, [r7, #16]
 800026e:	4a16      	ldr	r2, [pc, #88]	; (80002c8 <Int2Str+0xa4>)
 8000270:	fba2 2303 	umull	r2, r3, r2, r3
 8000274:	08db      	lsrs	r3, r3, #3
 8000276:	613b      	str	r3, [r7, #16]
    if ((p_str[pos-1] == '0') & (status == 0))
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	3b01      	subs	r3, #1
 800027c:	687a      	ldr	r2, [r7, #4]
 800027e:	4413      	add	r3, r2
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	2b30      	cmp	r3, #48	; 0x30
 8000284:	bf0c      	ite	eq
 8000286:	2301      	moveq	r3, #1
 8000288:	2300      	movne	r3, #0
 800028a:	b2da      	uxtb	r2, r3
 800028c:	68bb      	ldr	r3, [r7, #8]
 800028e:	2b00      	cmp	r3, #0
 8000290:	bf0c      	ite	eq
 8000292:	2301      	moveq	r3, #1
 8000294:	2300      	movne	r3, #0
 8000296:	b2db      	uxtb	r3, r3
 8000298:	4013      	ands	r3, r2
 800029a:	b2db      	uxtb	r3, r3
 800029c:	2b00      	cmp	r3, #0
 800029e:	d002      	beq.n	80002a6 <Int2Str+0x82>
    {
      pos = 0;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
 80002a4:	e002      	b.n	80002ac <Int2Str+0x88>
    }
    else
    {
      status++;
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	3301      	adds	r3, #1
 80002aa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < 10; i++)
 80002ac:	697b      	ldr	r3, [r7, #20]
 80002ae:	3301      	adds	r3, #1
 80002b0:	617b      	str	r3, [r7, #20]
 80002b2:	697b      	ldr	r3, [r7, #20]
 80002b4:	2b09      	cmp	r3, #9
 80002b6:	d9c3      	bls.n	8000240 <Int2Str+0x1c>
    }
  }
}
 80002b8:	bf00      	nop
 80002ba:	371c      	adds	r7, #28
 80002bc:	46bd      	mov	sp, r7
 80002be:	bc80      	pop	{r7}
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	3b9aca00 	.word	0x3b9aca00
 80002c8:	cccccccd 	.word	0xcccccccd

080002cc <Str2Int>:
  * @param  p_intnum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
uint32_t Str2Int(uint8_t *p_inputstr, uint32_t *p_intnum)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b087      	sub	sp, #28
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0, res = 0;
 80002d6:	2300      	movs	r3, #0
 80002d8:	617b      	str	r3, [r7, #20]
 80002da:	2300      	movs	r3, #0
 80002dc:	613b      	str	r3, [r7, #16]
  uint32_t val = 0;
 80002de:	2300      	movs	r3, #0
 80002e0:	60fb      	str	r3, [r7, #12]

  if ((p_inputstr[0] == '0') && ((p_inputstr[1] == 'x') || (p_inputstr[1] == 'X')))
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	2b30      	cmp	r3, #48	; 0x30
 80002e8:	f040 80d7 	bne.w	800049a <Str2Int+0x1ce>
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	3301      	adds	r3, #1
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	2b78      	cmp	r3, #120	; 0x78
 80002f4:	d005      	beq.n	8000302 <Str2Int+0x36>
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	3301      	adds	r3, #1
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	2b58      	cmp	r3, #88	; 0x58
 80002fe:	f040 80cc 	bne.w	800049a <Str2Int+0x1ce>
  {
    i = 2;
 8000302:	2302      	movs	r3, #2
 8000304:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 8000306:	e057      	b.n	80003b8 <Str2Int+0xec>
    {
      if (ISVALIDHEX(p_inputstr[i]))
 8000308:	687a      	ldr	r2, [r7, #4]
 800030a:	697b      	ldr	r3, [r7, #20]
 800030c:	4413      	add	r3, r2
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	2b40      	cmp	r3, #64	; 0x40
 8000312:	d905      	bls.n	8000320 <Str2Int+0x54>
 8000314:	687a      	ldr	r2, [r7, #4]
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	4413      	add	r3, r2
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	2b46      	cmp	r3, #70	; 0x46
 800031e:	d917      	bls.n	8000350 <Str2Int+0x84>
 8000320:	687a      	ldr	r2, [r7, #4]
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	4413      	add	r3, r2
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b60      	cmp	r3, #96	; 0x60
 800032a:	d905      	bls.n	8000338 <Str2Int+0x6c>
 800032c:	687a      	ldr	r2, [r7, #4]
 800032e:	697b      	ldr	r3, [r7, #20]
 8000330:	4413      	add	r3, r2
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	2b66      	cmp	r3, #102	; 0x66
 8000336:	d90b      	bls.n	8000350 <Str2Int+0x84>
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	4413      	add	r3, r2
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b2f      	cmp	r3, #47	; 0x2f
 8000342:	d936      	bls.n	80003b2 <Str2Int+0xe6>
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	697b      	ldr	r3, [r7, #20]
 8000348:	4413      	add	r3, r2
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	2b39      	cmp	r3, #57	; 0x39
 800034e:	d830      	bhi.n	80003b2 <Str2Int+0xe6>
      {
        val = (val << 4) + CONVERTHEX(p_inputstr[i]);
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	011b      	lsls	r3, r3, #4
 8000354:	6879      	ldr	r1, [r7, #4]
 8000356:	697a      	ldr	r2, [r7, #20]
 8000358:	440a      	add	r2, r1
 800035a:	7812      	ldrb	r2, [r2, #0]
 800035c:	2a2f      	cmp	r2, #47	; 0x2f
 800035e:	d90b      	bls.n	8000378 <Str2Int+0xac>
 8000360:	6879      	ldr	r1, [r7, #4]
 8000362:	697a      	ldr	r2, [r7, #20]
 8000364:	440a      	add	r2, r1
 8000366:	7812      	ldrb	r2, [r2, #0]
 8000368:	2a39      	cmp	r2, #57	; 0x39
 800036a:	d805      	bhi.n	8000378 <Str2Int+0xac>
 800036c:	6879      	ldr	r1, [r7, #4]
 800036e:	697a      	ldr	r2, [r7, #20]
 8000370:	440a      	add	r2, r1
 8000372:	7812      	ldrb	r2, [r2, #0]
 8000374:	3a30      	subs	r2, #48	; 0x30
 8000376:	e016      	b.n	80003a6 <Str2Int+0xda>
 8000378:	6879      	ldr	r1, [r7, #4]
 800037a:	697a      	ldr	r2, [r7, #20]
 800037c:	440a      	add	r2, r1
 800037e:	7812      	ldrb	r2, [r2, #0]
 8000380:	2a40      	cmp	r2, #64	; 0x40
 8000382:	d90b      	bls.n	800039c <Str2Int+0xd0>
 8000384:	6879      	ldr	r1, [r7, #4]
 8000386:	697a      	ldr	r2, [r7, #20]
 8000388:	440a      	add	r2, r1
 800038a:	7812      	ldrb	r2, [r2, #0]
 800038c:	2a46      	cmp	r2, #70	; 0x46
 800038e:	d805      	bhi.n	800039c <Str2Int+0xd0>
 8000390:	6879      	ldr	r1, [r7, #4]
 8000392:	697a      	ldr	r2, [r7, #20]
 8000394:	440a      	add	r2, r1
 8000396:	7812      	ldrb	r2, [r2, #0]
 8000398:	3a37      	subs	r2, #55	; 0x37
 800039a:	e004      	b.n	80003a6 <Str2Int+0xda>
 800039c:	6879      	ldr	r1, [r7, #4]
 800039e:	697a      	ldr	r2, [r7, #20]
 80003a0:	440a      	add	r2, r1
 80003a2:	7812      	ldrb	r2, [r2, #0]
 80003a4:	3a57      	subs	r2, #87	; 0x57
 80003a6:	4413      	add	r3, r2
 80003a8:	60fb      	str	r3, [r7, #12]
      {
        /* Return 0, Invalid input */
        res = 0;
        break;
      }
      i++;
 80003aa:	697b      	ldr	r3, [r7, #20]
 80003ac:	3301      	adds	r3, #1
 80003ae:	617b      	str	r3, [r7, #20]
 80003b0:	e002      	b.n	80003b8 <Str2Int+0xec>
        res = 0;
 80003b2:	2300      	movs	r3, #0
 80003b4:	613b      	str	r3, [r7, #16]
        break;
 80003b6:	e008      	b.n	80003ca <Str2Int+0xfe>
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 80003b8:	697b      	ldr	r3, [r7, #20]
 80003ba:	2b0a      	cmp	r3, #10
 80003bc:	d805      	bhi.n	80003ca <Str2Int+0xfe>
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	697b      	ldr	r3, [r7, #20]
 80003c2:	4413      	add	r3, r2
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d19e      	bne.n	8000308 <Str2Int+0x3c>
    }

    /* valid result */
    if (p_inputstr[i] == '\0')
 80003ca:	687a      	ldr	r2, [r7, #4]
 80003cc:	697b      	ldr	r3, [r7, #20]
 80003ce:	4413      	add	r3, r2
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d167      	bne.n	80004a6 <Str2Int+0x1da>
    {
      *p_intnum = val;
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	68fa      	ldr	r2, [r7, #12]
 80003da:	601a      	str	r2, [r3, #0]
      res = 1;
 80003dc:	2301      	movs	r3, #1
 80003de:	613b      	str	r3, [r7, #16]
    if (p_inputstr[i] == '\0')
 80003e0:	e061      	b.n	80004a6 <Str2Int+0x1da>
  }
  else /* max 10-digit decimal input */
  {
    while ( ( i < 11 ) && ( res != 1 ) )
    {
      if (p_inputstr[i] == '\0')
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	4413      	add	r3, r2
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d105      	bne.n	80003fa <Str2Int+0x12e>
      {
        *p_intnum = val;
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	68fa      	ldr	r2, [r7, #12]
 80003f2:	601a      	str	r2, [r3, #0]
        /* return 1 */
        res = 1;
 80003f4:	2301      	movs	r3, #1
 80003f6:	613b      	str	r3, [r7, #16]
 80003f8:	e04c      	b.n	8000494 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'k') || (p_inputstr[i] == 'K')) && (i > 0))
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	697b      	ldr	r3, [r7, #20]
 80003fe:	4413      	add	r3, r2
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b6b      	cmp	r3, #107	; 0x6b
 8000404:	d005      	beq.n	8000412 <Str2Int+0x146>
 8000406:	687a      	ldr	r2, [r7, #4]
 8000408:	697b      	ldr	r3, [r7, #20]
 800040a:	4413      	add	r3, r2
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b4b      	cmp	r3, #75	; 0x4b
 8000410:	d10b      	bne.n	800042a <Str2Int+0x15e>
 8000412:	697b      	ldr	r3, [r7, #20]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d008      	beq.n	800042a <Str2Int+0x15e>
      {
        val = val << 10;
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	029b      	lsls	r3, r3, #10
 800041c:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	68fa      	ldr	r2, [r7, #12]
 8000422:	601a      	str	r2, [r3, #0]
        res = 1;
 8000424:	2301      	movs	r3, #1
 8000426:	613b      	str	r3, [r7, #16]
 8000428:	e034      	b.n	8000494 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'm') || (p_inputstr[i] == 'M')) && (i > 0))
 800042a:	687a      	ldr	r2, [r7, #4]
 800042c:	697b      	ldr	r3, [r7, #20]
 800042e:	4413      	add	r3, r2
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2b6d      	cmp	r3, #109	; 0x6d
 8000434:	d005      	beq.n	8000442 <Str2Int+0x176>
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	697b      	ldr	r3, [r7, #20]
 800043a:	4413      	add	r3, r2
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	2b4d      	cmp	r3, #77	; 0x4d
 8000440:	d10b      	bne.n	800045a <Str2Int+0x18e>
 8000442:	697b      	ldr	r3, [r7, #20]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d008      	beq.n	800045a <Str2Int+0x18e>
      {
        val = val << 20;
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	051b      	lsls	r3, r3, #20
 800044c:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	68fa      	ldr	r2, [r7, #12]
 8000452:	601a      	str	r2, [r3, #0]
        res = 1;
 8000454:	2301      	movs	r3, #1
 8000456:	613b      	str	r3, [r7, #16]
 8000458:	e01c      	b.n	8000494 <Str2Int+0x1c8>
      }
      else if (ISVALIDDEC(p_inputstr[i]))
 800045a:	687a      	ldr	r2, [r7, #4]
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	4413      	add	r3, r2
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b2f      	cmp	r3, #47	; 0x2f
 8000464:	d913      	bls.n	800048e <Str2Int+0x1c2>
 8000466:	687a      	ldr	r2, [r7, #4]
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	4413      	add	r3, r2
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	2b39      	cmp	r3, #57	; 0x39
 8000470:	d80d      	bhi.n	800048e <Str2Int+0x1c2>
      {
        val = val * 10 + CONVERTDEC(p_inputstr[i]);
 8000472:	68fa      	ldr	r2, [r7, #12]
 8000474:	4613      	mov	r3, r2
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	4413      	add	r3, r2
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	4619      	mov	r1, r3
 800047e:	687a      	ldr	r2, [r7, #4]
 8000480:	697b      	ldr	r3, [r7, #20]
 8000482:	4413      	add	r3, r2
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	440b      	add	r3, r1
 8000488:	3b30      	subs	r3, #48	; 0x30
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	e002      	b.n	8000494 <Str2Int+0x1c8>
      }
      else
      {
        /* return 0, Invalid input */
        res = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	613b      	str	r3, [r7, #16]
        break;
 8000492:	e008      	b.n	80004a6 <Str2Int+0x1da>
      }
      i++;
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	3301      	adds	r3, #1
 8000498:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( res != 1 ) )
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	2b0a      	cmp	r3, #10
 800049e:	d802      	bhi.n	80004a6 <Str2Int+0x1da>
 80004a0:	693b      	ldr	r3, [r7, #16]
 80004a2:	2b01      	cmp	r3, #1
 80004a4:	d19d      	bne.n	80003e2 <Str2Int+0x116>
    }
  }

  return res;
 80004a6:	693b      	ldr	r3, [r7, #16]
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	371c      	adds	r7, #28
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr
	...

080004b4 <Serial_PutString>:
  * @brief  Print a string on the HyperTerminal
  * @param  p_string: The string to be printed
  * @retval None
  */
void Serial_PutString(uint8_t *p_string)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  uint16_t length = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	81fb      	strh	r3, [r7, #14]

  while (p_string[length] != '\0')
 80004c0:	e002      	b.n	80004c8 <Serial_PutString+0x14>
  {
    length++;
 80004c2:	89fb      	ldrh	r3, [r7, #14]
 80004c4:	3301      	adds	r3, #1
 80004c6:	81fb      	strh	r3, [r7, #14]
  while (p_string[length] != '\0')
 80004c8:	89fb      	ldrh	r3, [r7, #14]
 80004ca:	687a      	ldr	r2, [r7, #4]
 80004cc:	4413      	add	r3, r2
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d1f6      	bne.n	80004c2 <Serial_PutString+0xe>
  }
  HAL_UART_Transmit(&UartHandle, p_string, length, TX_TIMEOUT);
 80004d4:	89fa      	ldrh	r2, [r7, #14]
 80004d6:	2364      	movs	r3, #100	; 0x64
 80004d8:	6879      	ldr	r1, [r7, #4]
 80004da:	4803      	ldr	r0, [pc, #12]	; (80004e8 <Serial_PutString+0x34>)
 80004dc:	f002 fdbf 	bl	800305e <HAL_UART_Transmit>
}
 80004e0:	bf00      	nop
 80004e2:	3710      	adds	r7, #16
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000030 	.word	0x20000030

080004ec <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
HAL_StatusTypeDef Serial_PutByte( uint8_t param )
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
  return HAL_UART_Transmit(&UartHandle, &param, 1, TX_TIMEOUT);
 80004f6:	1df9      	adds	r1, r7, #7
 80004f8:	2364      	movs	r3, #100	; 0x64
 80004fa:	2201      	movs	r2, #1
 80004fc:	4803      	ldr	r0, [pc, #12]	; (800050c <Serial_PutByte+0x20>)
 80004fe:	f002 fdae 	bl	800305e <HAL_UART_Transmit>
 8000502:	4603      	mov	r3, r0
}
 8000504:	4618      	mov	r0, r3
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000030 	.word	0x20000030

08000510 <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* Unlock the Program memory */
  HAL_FLASH_Unlock();
 8000514:	f001 fac8 	bl	8001aa8 <HAL_FLASH_Unlock>

  /* Clear all FLASH flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR);
 8000518:	4b03      	ldr	r3, [pc, #12]	; (8000528 <FLASH_If_Init+0x18>)
 800051a:	2234      	movs	r2, #52	; 0x34
 800051c:	60da      	str	r2, [r3, #12]
  /* Unlock the Program memory */
  HAL_FLASH_Lock();
 800051e:	f001 fae9 	bl	8001af4 <HAL_FLASH_Lock>
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40022000 	.word	0x40022000

0800052c <FLASH_If_Erase>:
  * @param  start: start of user flash area
  * @retval FLASHIF_OK : user flash area successfully erased
  *         FLASHIF_ERASEKO : error occurred
  */
uint32_t FLASH_If_Erase(uint32_t start)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08a      	sub	sp, #40	; 0x28
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  uint32_t NbrOfPages = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t PageError = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;
  HAL_StatusTypeDef status = HAL_OK;
 800053c:	2300      	movs	r3, #0
 800053e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Unlock the Flash to enable the flash control register access *************/ 
  HAL_FLASH_Unlock();
 8000542:	f001 fab1 	bl	8001aa8 <HAL_FLASH_Unlock>

  /* Get the sector where start the user flash area */
  NbrOfPages = (USER_FLASH_END_ADDRESS - start)/FLASH_PAGE_SIZE;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	f1c3 6300 	rsb	r3, r3, #134217728	; 0x8000000
 800054c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8000550:	0adb      	lsrs	r3, r3, #11
 8000552:	627b      	str	r3, [r7, #36]	; 0x24

  pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
  pEraseInit.PageAddress = start;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	617b      	str	r3, [r7, #20]
  pEraseInit.Banks = FLASH_BANK_1;
 800055c:	2301      	movs	r3, #1
 800055e:	613b      	str	r3, [r7, #16]
  pEraseInit.NbPages = NbrOfPages;
 8000560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000562:	61bb      	str	r3, [r7, #24]
  status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 8000564:	f107 021c 	add.w	r2, r7, #28
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	4611      	mov	r1, r2
 800056e:	4618      	mov	r0, r3
 8000570:	f001 fba4 	bl	8001cbc <HAL_FLASHEx_Erase>
 8000574:	4603      	mov	r3, r0
 8000576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 800057a:	f001 fabb 	bl	8001af4 <HAL_FLASH_Lock>

  if (status != HAL_OK)
 800057e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <FLASH_If_Erase+0x5e>
  {
    /* Error occurred while page erase */
    return FLASHIF_ERASEKO;
 8000586:	2301      	movs	r3, #1
 8000588:	e000      	b.n	800058c <FLASH_If_Erase+0x60>
  }

  return FLASHIF_OK;
 800058a:	2300      	movs	r3, #0
}
 800058c:	4618      	mov	r0, r3
 800058e:	3728      	adds	r7, #40	; 0x28
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <FLASH_If_Write>:
  * @retval uint32_t 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(uint32_t destination, uint32_t *p_source, uint32_t length)
{
 8000594:	b590      	push	{r4, r7, lr}
 8000596:	b087      	sub	sp, #28
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  uint32_t i = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 80005a4:	f001 fa80 	bl	8001aa8 <HAL_FLASH_Unlock>

  for (i = 0; (i < length) && (destination <= (USER_FLASH_END_ADDRESS-4)); i++)
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
 80005ac:	e023      	b.n	80005f6 <FLASH_If_Write+0x62>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */ 
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, destination, *(uint32_t*)(p_source+i)) == HAL_OK)      
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	68ba      	ldr	r2, [r7, #8]
 80005b4:	4413      	add	r3, r2
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f04f 0400 	mov.w	r4, #0
 80005bc:	461a      	mov	r2, r3
 80005be:	4623      	mov	r3, r4
 80005c0:	68f9      	ldr	r1, [r7, #12]
 80005c2:	2002      	movs	r0, #2
 80005c4:	f001 fa00 	bl	80019c8 <HAL_FLASH_Program>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d10e      	bne.n	80005ec <FLASH_If_Write+0x58>
    {
     /* Check the written value */
      if (*(uint32_t*)destination != *(uint32_t*)(p_source+i))
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	68b9      	ldr	r1, [r7, #8]
 80005d8:	440b      	add	r3, r1
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d001      	beq.n	80005e4 <FLASH_If_Write+0x50>
      {
        /* Flash content doesn't match SRAM content */
        return(FLASHIF_WRITINGCTRL_ERROR);
 80005e0:	2302      	movs	r3, #2
 80005e2:	e013      	b.n	800060c <FLASH_If_Write+0x78>
      }
      /* Increment FLASH destination address */
      destination += 4;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	3304      	adds	r3, #4
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	e001      	b.n	80005f0 <FLASH_If_Write+0x5c>
    }
    else
    {
      /* Error occurred while writing data in Flash memory */
      return (FLASHIF_WRITING_ERROR);
 80005ec:	2303      	movs	r3, #3
 80005ee:	e00d      	b.n	800060c <FLASH_If_Write+0x78>
  for (i = 0; (i < length) && (destination <= (USER_FLASH_END_ADDRESS-4)); i++)
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	3301      	adds	r3, #1
 80005f4:	617b      	str	r3, [r7, #20]
 80005f6:	697a      	ldr	r2, [r7, #20]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	429a      	cmp	r2, r3
 80005fc:	d203      	bcs.n	8000606 <FLASH_If_Write+0x72>
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <FLASH_If_Write+0x80>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d9d3      	bls.n	80005ae <FLASH_If_Write+0x1a>
    }
  }

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 8000606:	f001 fa75 	bl	8001af4 <HAL_FLASH_Lock>

  return (FLASHIF_OK);
 800060a:	2300      	movs	r3, #0
}
 800060c:	4618      	mov	r0, r3
 800060e:	371c      	adds	r7, #28
 8000610:	46bd      	mov	sp, r7
 8000612:	bd90      	pop	{r4, r7, pc}
 8000614:	0803fffc 	.word	0x0803fffc

08000618 <FLASH_If_GetWriteProtectionStatus>:
  * @retval If a sector in application area is write-protected returned value is a combinaison
            of the possible values : FLASHIF_PROTECTION_WRPENABLED, FLASHIF_PROTECTION_PCROPENABLED, ...
  *         If no sector is write-protected FLASHIF_PROTECTION_NONE is returned.
  */
uint32_t FLASH_If_GetWriteProtectionStatus(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
  uint32_t ProtectedPAGE = FLASHIF_PROTECTION_NONE;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
  FLASH_OBProgramInitTypeDef OptionsBytesStruct;

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 8000622:	f001 fa41 	bl	8001aa8 <HAL_FLASH_Unlock>

  /* Check if there are write protected sectors inside the user flash area ****/
  HAL_FLASHEx_OBGetConfig(&OptionsBytesStruct);
 8000626:	463b      	mov	r3, r7
 8000628:	4618      	mov	r0, r3
 800062a:	f001 fc71 	bl	8001f10 <HAL_FLASHEx_OBGetConfig>

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 800062e:	f001 fa61 	bl	8001af4 <HAL_FLASH_Lock>

  /* Get pages already write protected ****************************************/
  ProtectedPAGE = ~(OptionsBytesStruct.WRPPage) & FLASH_PAGE_TO_BE_PROTECTED;
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	43db      	mvns	r3, r3
 8000636:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800063a:	61fb      	str	r3, [r7, #28]

  /* Check if desired pages are already write protected ***********************/
  if(ProtectedPAGE != 0)
 800063c:	69fb      	ldr	r3, [r7, #28]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <FLASH_If_GetWriteProtectionStatus+0x2e>
  {
    /* Some sectors inside the user flash area are write protected */
    return FLASHIF_PROTECTION_WRPENABLED;
 8000642:	2302      	movs	r3, #2
 8000644:	e000      	b.n	8000648 <FLASH_If_GetWriteProtectionStatus+0x30>
  }
  else
  { 
    /* No write protected sectors inside the user flash area */
    return FLASHIF_PROTECTION_NONE;
 8000646:	2300      	movs	r3, #0
  }
}
 8000648:	4618      	mov	r0, r3
 800064a:	3720      	adds	r7, #32
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <FLASH_If_WriteProtectionConfig>:
  * @brief  Configure the write protection status of user flash area.
  * @param  protectionstate : FLASHIF_WRP_DISABLE or FLASHIF_WRP_ENABLE the protection
  * @retval uint32_t FLASHIF_OK if change is applied.
  */
uint32_t FLASH_If_WriteProtectionConfig(uint32_t protectionstate)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b092      	sub	sp, #72	; 0x48
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  uint32_t ProtectedPAGE = 0x0;
 8000658:	2300      	movs	r3, #0
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
  FLASH_OBProgramInitTypeDef config_new, config_old;
  HAL_StatusTypeDef result = HAL_OK;
 800065c:	2300      	movs	r3, #0
 800065e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  

  /* Get pages write protection status ****************************************/
  HAL_FLASHEx_OBGetConfig(&config_old);
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	4618      	mov	r0, r3
 8000668:	f001 fc52 	bl	8001f10 <HAL_FLASHEx_OBGetConfig>

  /* The parameter says whether we turn the protection on or off */
  config_new.WRPState = (protectionstate == FLASHIF_WRP_ENABLE ? OB_WRPSTATE_ENABLE : OB_WRPSTATE_DISABLE);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d101      	bne.n	8000676 <FLASH_If_WriteProtectionConfig+0x26>
 8000672:	2301      	movs	r3, #1
 8000674:	e000      	b.n	8000678 <FLASH_If_WriteProtectionConfig+0x28>
 8000676:	2300      	movs	r3, #0
 8000678:	62bb      	str	r3, [r7, #40]	; 0x28

  /* We want to modify only the Write protection */
  config_new.OptionType = OPTIONBYTE_WRP;
 800067a:	2301      	movs	r3, #1
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* No read protection, keep BOR and reset settings */
  config_new.RDPLevel = OB_RDP_LEVEL_0;
 800067e:	23a5      	movs	r3, #165	; 0xa5
 8000680:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  config_new.USERConfig = config_old.USERConfig;  
 8000684:	7e7b      	ldrb	r3, [r7, #25]
 8000686:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  /* Get pages already write protected ****************************************/
  ProtectedPAGE = config_old.WRPPage | FLASH_PAGE_TO_BE_PROTECTED;
 800068a:	693b      	ldr	r3, [r7, #16]
 800068c:	f063 03ff 	orn	r3, r3, #255	; 0xff
 8000690:	643b      	str	r3, [r7, #64]	; 0x40

  /* Unlock the Flash to enable the flash control register access *************/ 
  HAL_FLASH_Unlock();
 8000692:	f001 fa09 	bl	8001aa8 <HAL_FLASH_Unlock>

  /* Unlock the Options Bytes *************************************************/
  HAL_FLASH_OB_Unlock();
 8000696:	f001 fa3d 	bl	8001b14 <HAL_FLASH_OB_Unlock>
  
  /* Erase all the option Bytes ***********************************************/
  result = HAL_FLASHEx_OBErase();
 800069a:	f001 fb7b 	bl	8001d94 <HAL_FLASHEx_OBErase>
 800069e:	4603      	mov	r3, r0
 80006a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  if (result == HAL_OK)
 80006a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d109      	bne.n	80006c0 <FLASH_If_WriteProtectionConfig+0x70>
  {
    config_new.WRPPage    = ProtectedPAGE;
 80006ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    result = HAL_FLASHEx_OBProgram(&config_new);
 80006b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 fbaf 	bl	8001e18 <HAL_FLASHEx_OBProgram>
 80006ba:	4603      	mov	r3, r0
 80006bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  
  return (result == HAL_OK ? FLASHIF_OK: FLASHIF_PROTECTION_ERRROR);
 80006c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d101      	bne.n	80006cc <FLASH_If_WriteProtectionConfig+0x7c>
 80006c8:	2300      	movs	r3, #0
 80006ca:	e000      	b.n	80006ce <FLASH_If_WriteProtectionConfig+0x7e>
 80006cc:	2304      	movs	r3, #4
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3748      	adds	r7, #72	; 0x48
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006de:	f000 fff3 	bl	80016c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e2:	f000 f849 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e6:	f000 f8b7 	bl	8000858 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006ea:	f000 f88b 	bl	8000804 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  IAP_UART_Init();
 80006ee:	f000 f90d 	bl	800090c <IAP_UART_Init>
#if 1
  if(HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET)
 80006f2:	2101      	movs	r1, #1
 80006f4:	4818      	ldr	r0, [pc, #96]	; (8000758 <main+0x80>)
 80006f6:	f002 f801 	bl	80026fc <HAL_GPIO_ReadPin>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d104      	bne.n	800070a <main+0x32>
  {
    FLASH_If_Init();
 8000700:	f7ff ff06 	bl	8000510 <FLASH_If_Init>
    Main_Menu();
 8000704:	f000 f9c6 	bl	8000a94 <Main_Menu>
 8000708:	e018      	b.n	800073c <main+0x64>

    /* MSP : 0x20005000 */
    //if (((*(__IO uint32_t*)APPLICATION_ADDRESS) & 0x2FFFEA000 ) == 0x20000000)
    //if (((*(__IO uint32_t*)APPLICATION_ADDRESS) & 0x2FFFB000 ) == 0x20000000)  // Error Code
    //if (((*(__IO uint32_t*)APPLICATION_ADDRESS) & 0x2FFE0000 ) == 0x20000000)    // MSP:0x20010000, RAM 64Kbytes
    if (((*(__IO uint32_t*)APPLICATION_ADDRESS) & 0x2FFF3000 ) == 0x20000000)    // MSP:0x2000C000, RAM 48Kbytes
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <main+0x84>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <main+0x88>)
 8000710:	4013      	ands	r3, r2
 8000712:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000716:	d111      	bne.n	800073c <main+0x64>
    {
      /* Jump to user application */
      JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <main+0x8c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a12      	ldr	r2, [pc, #72]	; (8000768 <main+0x90>)
 800071e:	6013      	str	r3, [r2, #0]
      JumpToApplication = (pFunction) JumpAddress;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <main+0x90>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	461a      	mov	r2, r3
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <main+0x94>)
 8000728:	601a      	str	r2, [r3, #0]
      /* Initialize user application's Stack Pointer */
      __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <main+0x84>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f383 8808 	msr	MSP, r3
      JumpToApplication();
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <main+0x94>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4798      	blx	r3
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800073c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000740:	480b      	ldr	r0, [pc, #44]	; (8000770 <main+0x98>)
 8000742:	f002 f80a 	bl	800275a <HAL_GPIO_TogglePin>
    //printf("Hello IAP!!\r\n");
    Serial_PutString((uint8_t *)"IAP AN4657!\r\n");
 8000746:	480b      	ldr	r0, [pc, #44]	; (8000774 <main+0x9c>)
 8000748:	f7ff feb4 	bl	80004b4 <Serial_PutString>
    HAL_Delay(1000);
 800074c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000750:	f001 f81c 	bl	800178c <HAL_Delay>
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000754:	e7f2      	b.n	800073c <main+0x64>
 8000756:	bf00      	nop
 8000758:	40011000 	.word	0x40011000
 800075c:	08004000 	.word	0x08004000
 8000760:	2fff3000 	.word	0x2fff3000
 8000764:	08004004 	.word	0x08004004
 8000768:	200000b8 	.word	0x200000b8
 800076c:	200000bc 	.word	0x200000bc
 8000770:	40010c00 	.word	0x40010c00
 8000774:	080034e8 	.word	0x080034e8

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b090      	sub	sp, #64	; 0x40
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0318 	add.w	r3, r7, #24
 8000782:	2228      	movs	r2, #40	; 0x28
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f002 fe9a 	bl	80034c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800079a:	2301      	movs	r3, #1
 800079c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800079e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a8:	2301      	movs	r3, #1
 80007aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ac:	2302      	movs	r3, #2
 80007ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007b6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007bc:	f107 0318 	add.w	r3, r7, #24
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 ffe3 	bl	800278c <HAL_RCC_OscConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80007cc:	f000 f8c8 	bl	8000960 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d0:	230f      	movs	r3, #15
 80007d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d4:	2302      	movs	r3, #2
 80007d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	2102      	movs	r1, #2
 80007ea:	4618      	mov	r0, r3
 80007ec:	f002 fa4e 	bl	8002c8c <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007f6:	f000 f8b3 	bl	8000960 <Error_Handler>
  }
}
 80007fa:	bf00      	nop
 80007fc:	3740      	adds	r7, #64	; 0x40
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 800080a:	4a12      	ldr	r2, [pc, #72]	; (8000854 <MX_USART1_UART_Init+0x50>)
 800080c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 8000810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000814:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_USART1_UART_Init+0x4c>)
 800083c:	f002 fbc2 	bl	8002fc4 <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000846:	f000 f88b 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000074 	.word	0x20000074
 8000854:	40013800 	.word	0x40013800

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b088      	sub	sp, #32
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 0310 	add.w	r3, r7, #16
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086c:	4b24      	ldr	r3, [pc, #144]	; (8000900 <MX_GPIO_Init+0xa8>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	4a23      	ldr	r2, [pc, #140]	; (8000900 <MX_GPIO_Init+0xa8>)
 8000872:	f043 0310 	orr.w	r3, r3, #16
 8000876:	6193      	str	r3, [r2, #24]
 8000878:	4b21      	ldr	r3, [pc, #132]	; (8000900 <MX_GPIO_Init+0xa8>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f003 0310 	and.w	r3, r3, #16
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000884:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <MX_GPIO_Init+0xa8>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a1d      	ldr	r2, [pc, #116]	; (8000900 <MX_GPIO_Init+0xa8>)
 800088a:	f043 0308 	orr.w	r3, r3, #8
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <MX_GPIO_Init+0xa8>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f003 0308 	and.w	r3, r3, #8
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <MX_GPIO_Init+0xa8>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a17      	ldr	r2, [pc, #92]	; (8000900 <MX_GPIO_Init+0xa8>)
 80008a2:	f043 0304 	orr.w	r3, r3, #4
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <MX_GPIO_Init+0xa8>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f003 0304 	and.w	r3, r3, #4
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008ba:	4812      	ldr	r0, [pc, #72]	; (8000904 <MX_GPIO_Init+0xac>)
 80008bc:	f001 ff35 	bl	800272a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : KEY1_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80008c0:	2301      	movs	r3, #1
 80008c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 0310 	add.w	r3, r7, #16
 80008d0:	4619      	mov	r1, r3
 80008d2:	480d      	ldr	r0, [pc, #52]	; (8000908 <MX_GPIO_Init+0xb0>)
 80008d4:	f001 fda8 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80008d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2302      	movs	r3, #2
 80008e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 0310 	add.w	r3, r7, #16
 80008ee:	4619      	mov	r1, r3
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <MX_GPIO_Init+0xac>)
 80008f2:	f001 fd99 	bl	8002428 <HAL_GPIO_Init>

}
 80008f6:	bf00      	nop
 80008f8:	3720      	adds	r7, #32
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40021000 	.word	0x40021000
 8000904:	40010c00 	.word	0x40010c00
 8000908:	40011000 	.word	0x40011000

0800090c <IAP_UART_Init>:

/* USER CODE BEGIN 4 */
static void IAP_UART_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_Init 1 */
  UartHandle.Instance = USART1;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <IAP_UART_Init+0x4c>)
 8000912:	4a12      	ldr	r2, [pc, #72]	; (800095c <IAP_UART_Init+0x50>)
 8000914:	601a      	str	r2, [r3, #0]
  UartHandle.Init.BaudRate = 115200;
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <IAP_UART_Init+0x4c>)
 8000918:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800091c:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <IAP_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits = UART_STOPBITS_1;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <IAP_UART_Init+0x4c>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity = UART_PARITY_NONE;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <IAP_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  UartHandle.Init.Mode = UART_MODE_TX_RX;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <IAP_UART_Init+0x4c>)
 8000932:	220c      	movs	r2, #12
 8000934:	615a      	str	r2, [r3, #20]
  UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <IAP_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <IAP_UART_Init+0x4c>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <IAP_UART_Init+0x4c>)
 8000944:	f002 fb3e 	bl	8002fc4 <HAL_UART_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <IAP_UART_Init+0x46>
  {
    Error_Handler();
 800094e:	f000 f807 	bl	8000960 <Error_Handler>
  }

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000030 	.word	0x20000030
 800095c:	40013800 	.word	0x40013800

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000966:	e7fe      	b.n	8000966 <Error_Handler+0x6>

08000968 <SerialDownload>:
  * @brief  Download a file via serial port
  * @param  None
  * @retval None
  */
void SerialDownload(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
  uint8_t number[11] = {0};
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	f8c3 2007 	str.w	r2, [r3, #7]
  uint32_t size = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
  COM_StatusTypeDef result;

  Serial_PutString((uint8_t *)"Waiting for the file to be sent ... (press 'a' to abort)\n\r");
 800097e:	4821      	ldr	r0, [pc, #132]	; (8000a04 <SerialDownload+0x9c>)
 8000980:	f7ff fd98 	bl	80004b4 <Serial_PutString>
  result = Ymodem_Receive( &size );
 8000984:	463b      	mov	r3, r7
 8000986:	4618      	mov	r0, r3
 8000988:	f000 fbc4 	bl	8001114 <Ymodem_Receive>
 800098c:	4603      	mov	r3, r0
 800098e:	73fb      	strb	r3, [r7, #15]
  if (result == COM_OK)
 8000990:	7bfb      	ldrb	r3, [r7, #15]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d119      	bne.n	80009ca <SerialDownload+0x62>
  {
    Serial_PutString((uint8_t *)"\n\n\r Programming Completed Successfully!\n\r--------------------------------\r\n Name: ");
 8000996:	481c      	ldr	r0, [pc, #112]	; (8000a08 <SerialDownload+0xa0>)
 8000998:	f7ff fd8c 	bl	80004b4 <Serial_PutString>
    Serial_PutString(aFileName);
 800099c:	481b      	ldr	r0, [pc, #108]	; (8000a0c <SerialDownload+0xa4>)
 800099e:	f7ff fd89 	bl	80004b4 <Serial_PutString>
    Int2Str(number, size);
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	4611      	mov	r1, r2
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fc3b 	bl	8000224 <Int2Str>
    Serial_PutString((uint8_t *)"\n\r Size: ");
 80009ae:	4818      	ldr	r0, [pc, #96]	; (8000a10 <SerialDownload+0xa8>)
 80009b0:	f7ff fd80 	bl	80004b4 <Serial_PutString>
    Serial_PutString(number);
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff fd7c 	bl	80004b4 <Serial_PutString>
    Serial_PutString((uint8_t *)" Bytes\r\n");
 80009bc:	4815      	ldr	r0, [pc, #84]	; (8000a14 <SerialDownload+0xac>)
 80009be:	f7ff fd79 	bl	80004b4 <Serial_PutString>
    Serial_PutString((uint8_t *)"-------------------\n");
 80009c2:	4815      	ldr	r0, [pc, #84]	; (8000a18 <SerialDownload+0xb0>)
 80009c4:	f7ff fd76 	bl	80004b4 <Serial_PutString>
  }
  else
  {
    Serial_PutString((uint8_t *)"\n\rFailed to receive the file!\n\r");
  }
}
 80009c8:	e017      	b.n	80009fa <SerialDownload+0x92>
  else if (result == COM_LIMIT)
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
 80009cc:	2b05      	cmp	r3, #5
 80009ce:	d103      	bne.n	80009d8 <SerialDownload+0x70>
    Serial_PutString((uint8_t *)"\n\n\rThe image size is higher than the allowed space memory!\n\r");
 80009d0:	4812      	ldr	r0, [pc, #72]	; (8000a1c <SerialDownload+0xb4>)
 80009d2:	f7ff fd6f 	bl	80004b4 <Serial_PutString>
}
 80009d6:	e010      	b.n	80009fa <SerialDownload+0x92>
  else if (result == COM_DATA)
 80009d8:	7bfb      	ldrb	r3, [r7, #15]
 80009da:	2b04      	cmp	r3, #4
 80009dc:	d103      	bne.n	80009e6 <SerialDownload+0x7e>
    Serial_PutString((uint8_t *)"\n\n\rVerification failed!\n\r");
 80009de:	4810      	ldr	r0, [pc, #64]	; (8000a20 <SerialDownload+0xb8>)
 80009e0:	f7ff fd68 	bl	80004b4 <Serial_PutString>
}
 80009e4:	e009      	b.n	80009fa <SerialDownload+0x92>
  else if (result == COM_ABORT)
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d103      	bne.n	80009f4 <SerialDownload+0x8c>
    Serial_PutString((uint8_t *)"\r\n\nAborted by user.\n\r");
 80009ec:	480d      	ldr	r0, [pc, #52]	; (8000a24 <SerialDownload+0xbc>)
 80009ee:	f7ff fd61 	bl	80004b4 <Serial_PutString>
}
 80009f2:	e002      	b.n	80009fa <SerialDownload+0x92>
    Serial_PutString((uint8_t *)"\n\rFailed to receive the file!\n\r");
 80009f4:	480c      	ldr	r0, [pc, #48]	; (8000a28 <SerialDownload+0xc0>)
 80009f6:	f7ff fd5d 	bl	80004b4 <Serial_PutString>
}
 80009fa:	bf00      	nop
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	080034f8 	.word	0x080034f8
 8000a08:	08003534 	.word	0x08003534
 8000a0c:	200000c0 	.word	0x200000c0
 8000a10:	08003588 	.word	0x08003588
 8000a14:	08003594 	.word	0x08003594
 8000a18:	080035a0 	.word	0x080035a0
 8000a1c:	080035b8 	.word	0x080035b8
 8000a20:	080035f8 	.word	0x080035f8
 8000a24:	08003614 	.word	0x08003614
 8000a28:	0800362c 	.word	0x0800362c

08000a2c <SerialUpload>:
  * @brief  Upload a file via serial port.
  * @param  None
  * @retval None
  */
void SerialUpload(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
  uint8_t status = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	71fb      	strb	r3, [r7, #7]

  Serial_PutString((uint8_t *)"\n\n\rSelect Receive File\n\r");
 8000a36:	4811      	ldr	r0, [pc, #68]	; (8000a7c <SerialUpload+0x50>)
 8000a38:	f7ff fd3c 	bl	80004b4 <Serial_PutString>

  HAL_UART_Receive(&UartHandle, &status, 1, RX_TIMEOUT);
 8000a3c:	1df9      	adds	r1, r7, #7
 8000a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a42:	2201      	movs	r2, #1
 8000a44:	480e      	ldr	r0, [pc, #56]	; (8000a80 <SerialUpload+0x54>)
 8000a46:	f002 fb9c 	bl	8003182 <HAL_UART_Receive>
  if ( status == CRC16)
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	2b43      	cmp	r3, #67	; 0x43
 8000a4e:	d111      	bne.n	8000a74 <SerialUpload+0x48>
  {
    /* Transmit the flash image through ymodem protocol */
    status = Ymodem_Transmit((uint8_t*)APPLICATION_ADDRESS, (const uint8_t*)"UploadedFlashImage.bin", USER_FLASH_SIZE);
 8000a50:	f44f 3270 	mov.w	r2, #245760	; 0x3c000
 8000a54:	490b      	ldr	r1, [pc, #44]	; (8000a84 <SerialUpload+0x58>)
 8000a56:	480c      	ldr	r0, [pc, #48]	; (8000a88 <SerialUpload+0x5c>)
 8000a58:	f000 fc82 	bl	8001360 <Ymodem_Transmit>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	71fb      	strb	r3, [r7, #7]

    if (status != 0)
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d003      	beq.n	8000a6e <SerialUpload+0x42>
    {
      Serial_PutString((uint8_t *)"\n\rError Occurred while Transmitting File\n\r");
 8000a66:	4809      	ldr	r0, [pc, #36]	; (8000a8c <SerialUpload+0x60>)
 8000a68:	f7ff fd24 	bl	80004b4 <Serial_PutString>
    else
    {
      Serial_PutString((uint8_t *)"\n\rFile uploaded successfully \n\r");
    }
  }
}
 8000a6c:	e002      	b.n	8000a74 <SerialUpload+0x48>
      Serial_PutString((uint8_t *)"\n\rFile uploaded successfully \n\r");
 8000a6e:	4808      	ldr	r0, [pc, #32]	; (8000a90 <SerialUpload+0x64>)
 8000a70:	f7ff fd20 	bl	80004b4 <Serial_PutString>
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	0800364c 	.word	0x0800364c
 8000a80:	20000030 	.word	0x20000030
 8000a84:	08003668 	.word	0x08003668
 8000a88:	08004000 	.word	0x08004000
 8000a8c:	08003680 	.word	0x08003680
 8000a90:	080036ac 	.word	0x080036ac

08000a94 <Main_Menu>:
  * @brief  Display the Main Menu on HyperTerminal
  * @param  None
  * @retval None
  */
void Main_Menu(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
  uint8_t key = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	70fb      	strb	r3, [r7, #3]

  Serial_PutString((uint8_t *)"\r\n======================================================================");
 8000a9e:	484e      	ldr	r0, [pc, #312]	; (8000bd8 <Main_Menu+0x144>)
 8000aa0:	f7ff fd08 	bl	80004b4 <Serial_PutString>
  Serial_PutString((uint8_t *)"\r\n=              (C) COPYRIGHT 2016 STMicroelectronics                 =");
 8000aa4:	484d      	ldr	r0, [pc, #308]	; (8000bdc <Main_Menu+0x148>)
 8000aa6:	f7ff fd05 	bl	80004b4 <Serial_PutString>
  Serial_PutString((uint8_t *)"\r\n=                                                                    =");
 8000aaa:	484d      	ldr	r0, [pc, #308]	; (8000be0 <Main_Menu+0x14c>)
 8000aac:	f7ff fd02 	bl	80004b4 <Serial_PutString>
  Serial_PutString((uint8_t *)"\r\n=  STM32F1xx In-Application Programming Application  (Version 1.0.0) =");
 8000ab0:	484c      	ldr	r0, [pc, #304]	; (8000be4 <Main_Menu+0x150>)
 8000ab2:	f7ff fcff 	bl	80004b4 <Serial_PutString>
  Serial_PutString((uint8_t *)"\r\n=                                                                    =");
 8000ab6:	484a      	ldr	r0, [pc, #296]	; (8000be0 <Main_Menu+0x14c>)
 8000ab8:	f7ff fcfc 	bl	80004b4 <Serial_PutString>
  Serial_PutString((uint8_t *)"\r\n=                                   By MCD Application Team          =");
 8000abc:	484a      	ldr	r0, [pc, #296]	; (8000be8 <Main_Menu+0x154>)
 8000abe:	f7ff fcf9 	bl	80004b4 <Serial_PutString>
  Serial_PutString((uint8_t *)"\r\n======================================================================");
 8000ac2:	4845      	ldr	r0, [pc, #276]	; (8000bd8 <Main_Menu+0x144>)
 8000ac4:	f7ff fcf6 	bl	80004b4 <Serial_PutString>
  Serial_PutString((uint8_t *)"\r\n\r\n");
 8000ac8:	4848      	ldr	r0, [pc, #288]	; (8000bec <Main_Menu+0x158>)
 8000aca:	f7ff fcf3 	bl	80004b4 <Serial_PutString>

  /* Test if any sector of Flash memory where user application will be loaded is write protected */
  FlashProtection = FLASH_If_GetWriteProtectionStatus();
 8000ace:	f7ff fda3 	bl	8000618 <FLASH_If_GetWriteProtectionStatus>
 8000ad2:	4602      	mov	r2, r0
 8000ad4:	4b46      	ldr	r3, [pc, #280]	; (8000bf0 <Main_Menu+0x15c>)
 8000ad6:	601a      	str	r2, [r3, #0]

  while (1)
  {

    Serial_PutString((uint8_t *)"\r\n=================== Main Menu ============================\r\n\n");
 8000ad8:	4846      	ldr	r0, [pc, #280]	; (8000bf4 <Main_Menu+0x160>)
 8000ada:	f7ff fceb 	bl	80004b4 <Serial_PutString>
    Serial_PutString((uint8_t *)"  Download image to the internal Flash ----------------- 1\r\n\n");
 8000ade:	4846      	ldr	r0, [pc, #280]	; (8000bf8 <Main_Menu+0x164>)
 8000ae0:	f7ff fce8 	bl	80004b4 <Serial_PutString>
    Serial_PutString((uint8_t *)"  Upload image from the internal Flash ----------------- 2\r\n\n");
 8000ae4:	4845      	ldr	r0, [pc, #276]	; (8000bfc <Main_Menu+0x168>)
 8000ae6:	f7ff fce5 	bl	80004b4 <Serial_PutString>
    Serial_PutString((uint8_t *)"  Execute the loaded application ----------------------- 3\r\n\n");
 8000aea:	4845      	ldr	r0, [pc, #276]	; (8000c00 <Main_Menu+0x16c>)
 8000aec:	f7ff fce2 	bl	80004b4 <Serial_PutString>


    if(FlashProtection != FLASHIF_PROTECTION_NONE)
 8000af0:	4b3f      	ldr	r3, [pc, #252]	; (8000bf0 <Main_Menu+0x15c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d003      	beq.n	8000b00 <Main_Menu+0x6c>
    {
      Serial_PutString((uint8_t *)"  Disable the write protection ------------------------- 4\r\n\n");
 8000af8:	4842      	ldr	r0, [pc, #264]	; (8000c04 <Main_Menu+0x170>)
 8000afa:	f7ff fcdb 	bl	80004b4 <Serial_PutString>
 8000afe:	e002      	b.n	8000b06 <Main_Menu+0x72>
    }
    else
    {
      Serial_PutString((uint8_t *)"  Enable the write protection -------------------------- 4\r\n\n");
 8000b00:	4841      	ldr	r0, [pc, #260]	; (8000c08 <Main_Menu+0x174>)
 8000b02:	f7ff fcd7 	bl	80004b4 <Serial_PutString>
    }
    Serial_PutString((uint8_t *)"==========================================================\r\n\n");
 8000b06:	4841      	ldr	r0, [pc, #260]	; (8000c0c <Main_Menu+0x178>)
 8000b08:	f7ff fcd4 	bl	80004b4 <Serial_PutString>

    /* Clean the input path */
    __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 8000b0c:	4b40      	ldr	r3, [pc, #256]	; (8000c10 <Main_Menu+0x17c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
	
    /* Receive key */
    HAL_UART_Receive(&UartHandle, &key, 1, RX_TIMEOUT);
 8000b12:	1cf9      	adds	r1, r7, #3
 8000b14:	f04f 33ff 	mov.w	r3, #4294967295
 8000b18:	2201      	movs	r2, #1
 8000b1a:	483d      	ldr	r0, [pc, #244]	; (8000c10 <Main_Menu+0x17c>)
 8000b1c:	f002 fb31 	bl	8003182 <HAL_UART_Receive>

    switch (key)
 8000b20:	78fb      	ldrb	r3, [r7, #3]
 8000b22:	3b31      	subs	r3, #49	; 0x31
 8000b24:	2b03      	cmp	r3, #3
 8000b26:	d851      	bhi.n	8000bcc <Main_Menu+0x138>
 8000b28:	a201      	add	r2, pc, #4	; (adr r2, 8000b30 <Main_Menu+0x9c>)
 8000b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b2e:	bf00      	nop
 8000b30:	08000b41 	.word	0x08000b41
 8000b34:	08000b47 	.word	0x08000b47
 8000b38:	08000b4d 	.word	0x08000b4d
 8000b3c:	08000b79 	.word	0x08000b79
    {
    case '1' :
      /* Download user application in the Flash */
      SerialDownload();
 8000b40:	f7ff ff12 	bl	8000968 <SerialDownload>
      break;
 8000b44:	e046      	b.n	8000bd4 <Main_Menu+0x140>
    case '2' :
      /* Upload user application from the Flash */
      SerialUpload();
 8000b46:	f7ff ff71 	bl	8000a2c <SerialUpload>
      break;
 8000b4a:	e043      	b.n	8000bd4 <Main_Menu+0x140>
    case '3' :
      Serial_PutString((uint8_t *)"Start program execution......\r\n\n");
 8000b4c:	4831      	ldr	r0, [pc, #196]	; (8000c14 <Main_Menu+0x180>)
 8000b4e:	f7ff fcb1 	bl	80004b4 <Serial_PutString>
      /* execute the new program */
      JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8000b52:	4b31      	ldr	r3, [pc, #196]	; (8000c18 <Main_Menu+0x184>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a31      	ldr	r2, [pc, #196]	; (8000c1c <Main_Menu+0x188>)
 8000b58:	6013      	str	r3, [r2, #0]
      /* Jump to user application */
      JumpToApplication = (pFunction) JumpAddress;
 8000b5a:	4b30      	ldr	r3, [pc, #192]	; (8000c1c <Main_Menu+0x188>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	4b2f      	ldr	r3, [pc, #188]	; (8000c20 <Main_Menu+0x18c>)
 8000b62:	601a      	str	r2, [r3, #0]
      /* Initialize user application's Stack Pointer */
      __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8000b64:	4b2f      	ldr	r3, [pc, #188]	; (8000c24 <Main_Menu+0x190>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f383 8808 	msr	MSP, r3
      JumpToApplication();
 8000b70:	4b2b      	ldr	r3, [pc, #172]	; (8000c20 <Main_Menu+0x18c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4798      	blx	r3
      break;
 8000b76:	e02d      	b.n	8000bd4 <Main_Menu+0x140>
    case '4' :
      if (FlashProtection != FLASHIF_PROTECTION_NONE)
 8000b78:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <Main_Menu+0x15c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d012      	beq.n	8000ba6 <Main_Menu+0x112>
      {
        /* Disable the write protection */
        if (FLASH_If_WriteProtectionConfig(FLASHIF_WRP_DISABLE) == FLASHIF_OK)
 8000b80:	2001      	movs	r0, #1
 8000b82:	f7ff fd65 	bl	8000650 <FLASH_If_WriteProtectionConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d108      	bne.n	8000b9e <Main_Menu+0x10a>
        {
          Serial_PutString((uint8_t *)"Write Protection disabled...\r\n");
 8000b8c:	4826      	ldr	r0, [pc, #152]	; (8000c28 <Main_Menu+0x194>)
 8000b8e:	f7ff fc91 	bl	80004b4 <Serial_PutString>
          Serial_PutString((uint8_t *)"System will now restart...\r\n");
 8000b92:	4826      	ldr	r0, [pc, #152]	; (8000c2c <Main_Menu+0x198>)
 8000b94:	f7ff fc8e 	bl	80004b4 <Serial_PutString>
          /* Launch the option byte loading */
          HAL_FLASH_OB_Launch();
 8000b98:	f000 ffd8 	bl	8001b4c <HAL_FLASH_OB_Launch>
        else
        {
          Serial_PutString((uint8_t *)"Error: Flash write protection failed...\r\n");
        }
      }
      break;
 8000b9c:	e01a      	b.n	8000bd4 <Main_Menu+0x140>
          Serial_PutString((uint8_t *)"Error: Flash write un-protection failed...\r\n");
 8000b9e:	4824      	ldr	r0, [pc, #144]	; (8000c30 <Main_Menu+0x19c>)
 8000ba0:	f7ff fc88 	bl	80004b4 <Serial_PutString>
      break;
 8000ba4:	e016      	b.n	8000bd4 <Main_Menu+0x140>
        if (FLASH_If_WriteProtectionConfig(FLASHIF_WRP_ENABLE) == FLASHIF_OK)
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f7ff fd52 	bl	8000650 <FLASH_If_WriteProtectionConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d108      	bne.n	8000bc4 <Main_Menu+0x130>
          Serial_PutString((uint8_t *)"Write Protection enabled...\r\n");
 8000bb2:	4820      	ldr	r0, [pc, #128]	; (8000c34 <Main_Menu+0x1a0>)
 8000bb4:	f7ff fc7e 	bl	80004b4 <Serial_PutString>
          Serial_PutString((uint8_t *)"System will now restart...\r\n");
 8000bb8:	481c      	ldr	r0, [pc, #112]	; (8000c2c <Main_Menu+0x198>)
 8000bba:	f7ff fc7b 	bl	80004b4 <Serial_PutString>
          HAL_FLASH_OB_Launch();
 8000bbe:	f000 ffc5 	bl	8001b4c <HAL_FLASH_OB_Launch>
      break;
 8000bc2:	e007      	b.n	8000bd4 <Main_Menu+0x140>
          Serial_PutString((uint8_t *)"Error: Flash write protection failed...\r\n");
 8000bc4:	481c      	ldr	r0, [pc, #112]	; (8000c38 <Main_Menu+0x1a4>)
 8000bc6:	f7ff fc75 	bl	80004b4 <Serial_PutString>
      break;
 8000bca:	e003      	b.n	8000bd4 <Main_Menu+0x140>
	default:
	Serial_PutString((uint8_t *)"Invalid Number ! ==> The number should be either 1, 2, 3 or 4\r");
 8000bcc:	481b      	ldr	r0, [pc, #108]	; (8000c3c <Main_Menu+0x1a8>)
 8000bce:	f7ff fc71 	bl	80004b4 <Serial_PutString>
	break;
 8000bd2:	bf00      	nop
    Serial_PutString((uint8_t *)"\r\n=================== Main Menu ============================\r\n\n");
 8000bd4:	e780      	b.n	8000ad8 <Main_Menu+0x44>
 8000bd6:	bf00      	nop
 8000bd8:	080036cc 	.word	0x080036cc
 8000bdc:	08003718 	.word	0x08003718
 8000be0:	08003764 	.word	0x08003764
 8000be4:	080037b0 	.word	0x080037b0
 8000be8:	080037fc 	.word	0x080037fc
 8000bec:	08003848 	.word	0x08003848
 8000bf0:	2000002c 	.word	0x2000002c
 8000bf4:	08003850 	.word	0x08003850
 8000bf8:	08003890 	.word	0x08003890
 8000bfc:	080038d0 	.word	0x080038d0
 8000c00:	08003910 	.word	0x08003910
 8000c04:	08003950 	.word	0x08003950
 8000c08:	08003990 	.word	0x08003990
 8000c0c:	080039d0 	.word	0x080039d0
 8000c10:	20000030 	.word	0x20000030
 8000c14:	08003a10 	.word	0x08003a10
 8000c18:	08004004 	.word	0x08004004
 8000c1c:	200000b8 	.word	0x200000b8
 8000c20:	200000bc 	.word	0x200000bc
 8000c24:	08004000 	.word	0x08004000
 8000c28:	08003a34 	.word	0x08003a34
 8000c2c:	08003a54 	.word	0x08003a54
 8000c30:	08003a74 	.word	0x08003a74
 8000c34:	08003aa4 	.word	0x08003aa4
 8000c38:	08003ac4 	.word	0x08003ac4
 8000c3c:	08003af0 	.word	0x08003af0

08000c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <HAL_MspInit+0x5c>)
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	4a14      	ldr	r2, [pc, #80]	; (8000c9c <HAL_MspInit+0x5c>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6193      	str	r3, [r2, #24]
 8000c52:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_MspInit+0x5c>)
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <HAL_MspInit+0x5c>)
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	4a0e      	ldr	r2, [pc, #56]	; (8000c9c <HAL_MspInit+0x5c>)
 8000c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c68:	61d3      	str	r3, [r2, #28]
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <HAL_MspInit+0x5c>)
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c76:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <HAL_MspInit+0x60>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <HAL_MspInit+0x60>)
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c92:	bf00      	nop
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40010000 	.word	0x40010000

08000ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a1c      	ldr	r2, [pc, #112]	; (8000d30 <HAL_UART_MspInit+0x8c>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d131      	bne.n	8000d28 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <HAL_UART_MspInit+0x90>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a1a      	ldr	r2, [pc, #104]	; (8000d34 <HAL_UART_MspInit+0x90>)
 8000cca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <HAL_UART_MspInit+0x90>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <HAL_UART_MspInit+0x90>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <HAL_UART_MspInit+0x90>)
 8000ce2:	f043 0304 	orr.w	r3, r3, #4
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_UART_MspInit+0x90>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cf8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 0310 	add.w	r3, r7, #16
 8000d06:	4619      	mov	r1, r3
 8000d08:	480b      	ldr	r0, [pc, #44]	; (8000d38 <HAL_UART_MspInit+0x94>)
 8000d0a:	f001 fb8d 	bl	8002428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	4619      	mov	r1, r3
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <HAL_UART_MspInit+0x94>)
 8000d24:	f001 fb80 	bl	8002428 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d28:	bf00      	nop
 8000d2a:	3720      	adds	r7, #32
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40013800 	.word	0x40013800
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40010800 	.word	0x40010800

08000d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <NMI_Handler+0x4>

08000d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <HardFault_Handler+0x4>

08000d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <MemManage_Handler+0x4>

08000d4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <BusFault_Handler+0x4>

08000d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <UsageFault_Handler+0x4>

08000d5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr

08000d66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr

08000d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr

08000d7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d82:	f000 fce7 	bl	8001754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr
	...

08000d98 <ReceivePacket>:
  * @param  timeout
  * @retval HAL_OK: normally return
  *         HAL_BUSY: abort by user
  */
static HAL_StatusTypeDef ReceivePacket(uint8_t *p_data, uint32_t *p_length, uint32_t timeout)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
  uint32_t crc;
  uint32_t packet_size = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef status;
  uint8_t char1;

  *p_length = 0;
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
  status = HAL_UART_Receive(&UartHandle, &char1, 1, timeout);
 8000dae:	f107 0113 	add.w	r1, r7, #19
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2201      	movs	r2, #1
 8000db6:	4844      	ldr	r0, [pc, #272]	; (8000ec8 <ReceivePacket+0x130>)
 8000db8:	f002 f9e3 	bl	8003182 <HAL_UART_Receive>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	76fb      	strb	r3, [r7, #27]

  if (status == HAL_OK)
 8000dc0:	7efb      	ldrb	r3, [r7, #27]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d177      	bne.n	8000eb6 <ReceivePacket+0x11e>
  {
    switch (char1)
 8000dc6:	7cfb      	ldrb	r3, [r7, #19]
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	d02d      	beq.n	8000e28 <ReceivePacket+0x90>
 8000dcc:	2b04      	cmp	r3, #4
 8000dce:	dc04      	bgt.n	8000dda <ReceivePacket+0x42>
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d009      	beq.n	8000de8 <ReceivePacket+0x50>
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d00a      	beq.n	8000dee <ReceivePacket+0x56>
 8000dd8:	e023      	b.n	8000e22 <ReceivePacket+0x8a>
 8000dda:	2b41      	cmp	r3, #65	; 0x41
 8000ddc:	d01e      	beq.n	8000e1c <ReceivePacket+0x84>
 8000dde:	2b61      	cmp	r3, #97	; 0x61
 8000de0:	d01c      	beq.n	8000e1c <ReceivePacket+0x84>
 8000de2:	2b18      	cmp	r3, #24
 8000de4:	d007      	beq.n	8000df6 <ReceivePacket+0x5e>
 8000de6:	e01c      	b.n	8000e22 <ReceivePacket+0x8a>
    {
      case SOH:
        packet_size = PACKET_SIZE;
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	61fb      	str	r3, [r7, #28]
        break;
 8000dec:	e01d      	b.n	8000e2a <ReceivePacket+0x92>
      case STX:
        packet_size = PACKET_1K_SIZE;
 8000dee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000df2:	61fb      	str	r3, [r7, #28]
        break;
 8000df4:	e019      	b.n	8000e2a <ReceivePacket+0x92>
      case EOT:
        break;
      case CA:
        if ((HAL_UART_Receive(&UartHandle, &char1, 1, timeout) == HAL_OK) && (char1 == CA))
 8000df6:	f107 0113 	add.w	r1, r7, #19
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	4832      	ldr	r0, [pc, #200]	; (8000ec8 <ReceivePacket+0x130>)
 8000e00:	f002 f9bf 	bl	8003182 <HAL_UART_Receive>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d105      	bne.n	8000e16 <ReceivePacket+0x7e>
 8000e0a:	7cfb      	ldrb	r3, [r7, #19]
 8000e0c:	2b18      	cmp	r3, #24
 8000e0e:	d102      	bne.n	8000e16 <ReceivePacket+0x7e>
        {
          packet_size = 2;
 8000e10:	2302      	movs	r3, #2
 8000e12:	61fb      	str	r3, [r7, #28]
        }
        else
        {
          status = HAL_ERROR;
        }
        break;
 8000e14:	e009      	b.n	8000e2a <ReceivePacket+0x92>
          status = HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	76fb      	strb	r3, [r7, #27]
        break;
 8000e1a:	e006      	b.n	8000e2a <ReceivePacket+0x92>
      case ABORT1:
      case ABORT2:
        status = HAL_BUSY;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	76fb      	strb	r3, [r7, #27]
        break;
 8000e20:	e003      	b.n	8000e2a <ReceivePacket+0x92>
      default:
        status = HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	76fb      	strb	r3, [r7, #27]
        break;
 8000e26:	e000      	b.n	8000e2a <ReceivePacket+0x92>
        break;
 8000e28:	bf00      	nop
    }
    *p_data = char1;
 8000e2a:	7cfa      	ldrb	r2, [r7, #19]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	701a      	strb	r2, [r3, #0]

    if (packet_size >= PACKET_SIZE )
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	2b7f      	cmp	r3, #127	; 0x7f
 8000e34:	d93f      	bls.n	8000eb6 <ReceivePacket+0x11e>
    {
      status = HAL_UART_Receive(&UartHandle, &p_data[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, timeout);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	1c99      	adds	r1, r3, #2
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	3304      	adds	r3, #4
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4820      	ldr	r0, [pc, #128]	; (8000ec8 <ReceivePacket+0x130>)
 8000e46:	f002 f99c 	bl	8003182 <HAL_UART_Receive>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	76fb      	strb	r3, [r7, #27]

      /* Simple packet sanity check */
      if (status == HAL_OK )
 8000e4e:	7efb      	ldrb	r3, [r7, #27]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d12e      	bne.n	8000eb2 <ReceivePacket+0x11a>
      {
        if (p_data[PACKET_NUMBER_INDEX] != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE))
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	3302      	adds	r3, #2
 8000e58:	781a      	ldrb	r2, [r3, #0]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	3303      	adds	r3, #3
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	43db      	mvns	r3, r3
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d004      	beq.n	8000e72 <ReceivePacket+0xda>
        {
          packet_size = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
          status = HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	76fb      	strb	r3, [r7, #27]
 8000e70:	e021      	b.n	8000eb6 <ReceivePacket+0x11e>
        }
        else
        {
          /* Check packet CRC */
          crc = p_data[ packet_size + PACKET_DATA_INDEX ] << 8;
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3304      	adds	r3, #4
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	4413      	add	r3, r2
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	021b      	lsls	r3, r3, #8
 8000e7e:	617b      	str	r3, [r7, #20]
          crc += p_data[ packet_size + PACKET_DATA_INDEX + 1 ];
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	3305      	adds	r3, #5
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	4413      	add	r3, r2
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	4413      	add	r3, r2
 8000e90:	617b      	str	r3, [r7, #20]
          if (Cal_CRC16(&p_data[PACKET_DATA_INDEX], packet_size) != crc )
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	3304      	adds	r3, #4
 8000e96:	69f9      	ldr	r1, [r7, #28]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 f90a 	bl	80010b2 <Cal_CRC16>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d006      	beq.n	8000eb6 <ReceivePacket+0x11e>
          {
            packet_size = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
            status = HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	76fb      	strb	r3, [r7, #27]
 8000eb0:	e001      	b.n	8000eb6 <ReceivePacket+0x11e>
          }
        }
      }
      else
      {
        packet_size = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  *p_length = packet_size;
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	69fa      	ldr	r2, [r7, #28]
 8000eba:	601a      	str	r2, [r3, #0]
  return status;
 8000ebc:	7efb      	ldrb	r3, [r7, #27]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3720      	adds	r7, #32
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000030 	.word	0x20000030

08000ecc <PrepareIntialPacket>:
  * @param  p_file_name: name of the file to be sent
  * @param  length: length of the file to be sent in bytes
  * @retval None
  */
static void PrepareIntialPacket(uint8_t *p_data, const uint8_t *p_file_name, uint32_t length)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  uint32_t i, j = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
  uint8_t astring[10];

  /* first 3 bytes are constant */
  p_data[PACKET_START_INDEX] = SOH;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	701a      	strb	r2, [r3, #0]
  p_data[PACKET_NUMBER_INDEX] = 0x00;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
  p_data[PACKET_CNUMBER_INDEX] = 0xff;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	3303      	adds	r3, #3
 8000ef0:	22ff      	movs	r2, #255	; 0xff
 8000ef2:	701a      	strb	r2, [r3, #0]

  /* Filename written */
  for (i = 0; (p_file_name[i] != '\0') && (i < FILE_NAME_LENGTH); i++)
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ef8:	e00b      	b.n	8000f12 <PrepareIntialPacket+0x46>
  {
    p_data[i + PACKET_DATA_INDEX] = p_file_name[i];
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efe:	441a      	add	r2, r3
 8000f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f02:	3304      	adds	r3, #4
 8000f04:	68f9      	ldr	r1, [r7, #12]
 8000f06:	440b      	add	r3, r1
 8000f08:	7812      	ldrb	r2, [r2, #0]
 8000f0a:	701a      	strb	r2, [r3, #0]
  for (i = 0; (p_file_name[i] != '\0') && (i < FILE_NAME_LENGTH); i++)
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0e:	3301      	adds	r3, #1
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f16:	4413      	add	r3, r2
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d002      	beq.n	8000f24 <PrepareIntialPacket+0x58>
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	2b3f      	cmp	r3, #63	; 0x3f
 8000f22:	d9ea      	bls.n	8000efa <PrepareIntialPacket+0x2e>
  }

  p_data[i + PACKET_DATA_INDEX] = 0x00;
 8000f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f26:	3304      	adds	r3, #4
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]

  /* file size written */
  Int2Str (astring, length);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	6879      	ldr	r1, [r7, #4]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff f974 	bl	8000224 <Int2Str>
  i = i + PACKET_DATA_INDEX + 1;
 8000f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3e:	3305      	adds	r3, #5
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  while (astring[j] != '\0')
 8000f42:	e00d      	b.n	8000f60 <PrepareIntialPacket+0x94>
  {
    p_data[i++] = astring[j++];
 8000f44:	6a3b      	ldr	r3, [r7, #32]
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	623a      	str	r2, [r7, #32]
 8000f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f4c:	1c51      	adds	r1, r2, #1
 8000f4e:	6279      	str	r1, [r7, #36]	; 0x24
 8000f50:	68f9      	ldr	r1, [r7, #12]
 8000f52:	440a      	add	r2, r1
 8000f54:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000f58:	440b      	add	r3, r1
 8000f5a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000f5e:	7013      	strb	r3, [r2, #0]
  while (astring[j] != '\0')
 8000f60:	f107 0214 	add.w	r2, r7, #20
 8000f64:	6a3b      	ldr	r3, [r7, #32]
 8000f66:	4413      	add	r3, r2
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1ea      	bne.n	8000f44 <PrepareIntialPacket+0x78>
  }

  /* padding with zeros */
  for (j = i; j < PACKET_SIZE + PACKET_DATA_INDEX; j++)
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	623b      	str	r3, [r7, #32]
 8000f72:	e007      	b.n	8000f84 <PrepareIntialPacket+0xb8>
  {
    p_data[j] = 0;
 8000f74:	68fa      	ldr	r2, [r7, #12]
 8000f76:	6a3b      	ldr	r3, [r7, #32]
 8000f78:	4413      	add	r3, r2
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
  for (j = i; j < PACKET_SIZE + PACKET_DATA_INDEX; j++)
 8000f7e:	6a3b      	ldr	r3, [r7, #32]
 8000f80:	3301      	adds	r3, #1
 8000f82:	623b      	str	r3, [r7, #32]
 8000f84:	6a3b      	ldr	r3, [r7, #32]
 8000f86:	2b83      	cmp	r3, #131	; 0x83
 8000f88:	d9f4      	bls.n	8000f74 <PrepareIntialPacket+0xa8>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3728      	adds	r7, #40	; 0x28
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <PreparePacket>:
  * @param  pkt_nr: number of the packet
  * @param  size_blk: length of the block to be sent in bytes
  * @retval None
  */
static void PreparePacket(uint8_t *p_source, uint8_t *p_packet, uint8_t pkt_nr, uint32_t size_blk)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b089      	sub	sp, #36	; 0x24
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	60f8      	str	r0, [r7, #12]
 8000f9a:	60b9      	str	r1, [r7, #8]
 8000f9c:	603b      	str	r3, [r7, #0]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_record;
  uint32_t i, size, packet_size;

  /* Make first three packet */
  packet_size = size_blk >= PACKET_1K_SIZE ? PACKET_1K_SIZE : PACKET_SIZE;
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fa8:	d302      	bcc.n	8000fb0 <PreparePacket+0x1e>
 8000faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fae:	e000      	b.n	8000fb2 <PreparePacket+0x20>
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	617b      	str	r3, [r7, #20]
  size = size_blk < packet_size ? size_blk : packet_size;
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	bf28      	it	cs
 8000fbc:	4613      	movcs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
  if (packet_size == PACKET_1K_SIZE)
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fc6:	d104      	bne.n	8000fd2 <PreparePacket+0x40>
  {
    p_packet[PACKET_START_INDEX] = STX;
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	2202      	movs	r2, #2
 8000fce:	701a      	strb	r2, [r3, #0]
 8000fd0:	e003      	b.n	8000fda <PreparePacket+0x48>
  }
  else
  {
    p_packet[PACKET_START_INDEX] = SOH;
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	701a      	strb	r2, [r3, #0]
  }
  p_packet[PACKET_NUMBER_INDEX] = pkt_nr;
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	3302      	adds	r3, #2
 8000fde:	79fa      	ldrb	r2, [r7, #7]
 8000fe0:	701a      	strb	r2, [r3, #0]
  p_packet[PACKET_CNUMBER_INDEX] = (~pkt_nr);
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	3303      	adds	r3, #3
 8000fe6:	79fa      	ldrb	r2, [r7, #7]
 8000fe8:	43d2      	mvns	r2, r2
 8000fea:	b2d2      	uxtb	r2, r2
 8000fec:	701a      	strb	r2, [r3, #0]
  p_record = p_source;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	61fb      	str	r3, [r7, #28]

  /* Filename packet has valid data */
  for (i = PACKET_DATA_INDEX; i < size + PACKET_DATA_INDEX;i++)
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	61bb      	str	r3, [r7, #24]
 8000ff6:	e00a      	b.n	800100e <PreparePacket+0x7c>
  {
    p_packet[i] = *p_record++;
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	1c5a      	adds	r2, r3, #1
 8000ffc:	61fa      	str	r2, [r7, #28]
 8000ffe:	68b9      	ldr	r1, [r7, #8]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	440a      	add	r2, r1
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	7013      	strb	r3, [r2, #0]
  for (i = PACKET_DATA_INDEX; i < size + PACKET_DATA_INDEX;i++)
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	3301      	adds	r3, #1
 800100c:	61bb      	str	r3, [r7, #24]
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	3304      	adds	r3, #4
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	429a      	cmp	r2, r3
 8001016:	d3ef      	bcc.n	8000ff8 <PreparePacket+0x66>
  }
  if ( size  <= packet_size)
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	429a      	cmp	r2, r3
 800101e:	d810      	bhi.n	8001042 <PreparePacket+0xb0>
  {
    for (i = size + PACKET_DATA_INDEX; i < packet_size + PACKET_DATA_INDEX; i++)
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	3304      	adds	r3, #4
 8001024:	61bb      	str	r3, [r7, #24]
 8001026:	e007      	b.n	8001038 <PreparePacket+0xa6>
    {
      p_packet[i] = 0x1A; /* EOF (0x1A) or 0x00 */
 8001028:	68ba      	ldr	r2, [r7, #8]
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	4413      	add	r3, r2
 800102e:	221a      	movs	r2, #26
 8001030:	701a      	strb	r2, [r3, #0]
    for (i = size + PACKET_DATA_INDEX; i < packet_size + PACKET_DATA_INDEX; i++)
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	3301      	adds	r3, #1
 8001036:	61bb      	str	r3, [r7, #24]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	3304      	adds	r3, #4
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	429a      	cmp	r2, r3
 8001040:	d3f2      	bcc.n	8001028 <PreparePacket+0x96>
    }
  }
}
 8001042:	bf00      	nop
 8001044:	3724      	adds	r7, #36	; 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr

0800104c <UpdateCRC16>:
  * @param  crc_in input value 
  * @param  input byte
  * @retval None
  */
uint16_t UpdateCRC16(uint16_t crc_in, uint8_t byte)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	460a      	mov	r2, r1
 8001056:	80fb      	strh	r3, [r7, #6]
 8001058:	4613      	mov	r3, r2
 800105a:	717b      	strb	r3, [r7, #5]
  uint32_t crc = crc_in;
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	60fb      	str	r3, [r7, #12]
  uint32_t in = byte | 0x100;
 8001060:	797b      	ldrb	r3, [r7, #5]
 8001062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001066:	60bb      	str	r3, [r7, #8]

  do
  {
    crc <<= 1;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	60fb      	str	r3, [r7, #12]
    in <<= 1;
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	60bb      	str	r3, [r7, #8]
    if(in & 0x100)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800107a:	2b00      	cmp	r3, #0
 800107c:	d002      	beq.n	8001084 <UpdateCRC16+0x38>
      ++crc;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	3301      	adds	r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
    if(crc & 0x10000)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d005      	beq.n	800109a <UpdateCRC16+0x4e>
      crc ^= 0x1021;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8001094:	f083 0301 	eor.w	r3, r3, #1
 8001098:	60fb      	str	r3, [r7, #12]
  }
  
  while(!(in & 0x10000));
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d0e1      	beq.n	8001068 <UpdateCRC16+0x1c>

  return crc & 0xffffu;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	b29b      	uxth	r3, r3
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr

080010b2 <Cal_CRC16>:
  * @param  data
  * @param  length
  * @retval None
  */
uint16_t Cal_CRC16(const uint8_t* p_data, uint32_t size)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b084      	sub	sp, #16
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	6039      	str	r1, [r7, #0]
  uint32_t crc = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
  const uint8_t* dataEnd = p_data+size;
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	4413      	add	r3, r2
 80010c6:	60bb      	str	r3, [r7, #8]

  while(p_data < dataEnd)
 80010c8:	e00a      	b.n	80010e0 <Cal_CRC16+0x2e>
    crc = UpdateCRC16(crc, *p_data++);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	b298      	uxth	r0, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	1c5a      	adds	r2, r3, #1
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	4619      	mov	r1, r3
 80010d8:	f7ff ffb8 	bl	800104c <UpdateCRC16>
 80010dc:	4603      	mov	r3, r0
 80010de:	60fb      	str	r3, [r7, #12]
  while(p_data < dataEnd)
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d3f0      	bcc.n	80010ca <Cal_CRC16+0x18>
 
  crc = UpdateCRC16(crc, 0);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ffac 	bl	800104c <UpdateCRC16>
 80010f4:	4603      	mov	r3, r0
 80010f6:	60fb      	str	r3, [r7, #12]
  crc = UpdateCRC16(crc, 0);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ffa4 	bl	800104c <UpdateCRC16>
 8001104:	4603      	mov	r3, r0
 8001106:	60fb      	str	r3, [r7, #12]

  return crc&0xffffu;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	b29b      	uxth	r3, r3
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <Ymodem_Receive>:
  * @brief  Receive a file using the ymodem protocol with CRC16.
  * @param  p_size The size of the file.
  * @retval COM_StatusTypeDef result of reception/programming
  */
COM_StatusTypeDef Ymodem_Receive ( uint32_t *p_size )
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b092      	sub	sp, #72	; 0x48
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t i, packet_length, session_done = 0, file_done, errors = 0, session_begin = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	643b      	str	r3, [r7, #64]	; 0x40
 8001120:	2300      	movs	r3, #0
 8001122:	63bb      	str	r3, [r7, #56]	; 0x38
 8001124:	2300      	movs	r3, #0
 8001126:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t flashdestination, ramsource, filesize;
  uint8_t *file_ptr;
  uint8_t file_size[FILE_SIZE_LENGTH], tmp, packets_received;
  COM_StatusTypeDef result = COM_OK;
 8001128:	2300      	movs	r3, #0
 800112a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

  /* Initialize flashdestination variable */
  flashdestination = APPLICATION_ADDRESS;
 800112e:	4b86      	ldr	r3, [pc, #536]	; (8001348 <Ymodem_Receive+0x234>)
 8001130:	633b      	str	r3, [r7, #48]	; 0x30

  while ((session_done == 0) && (result == COM_OK))
 8001132:	e0fa      	b.n	800132a <Ymodem_Receive+0x216>
  {
    packets_received = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    file_done = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while ((file_done == 0) && (result == COM_OK))
 800113e:	e0ec      	b.n	800131a <Ymodem_Receive+0x206>
    {
      switch (ReceivePacket(aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
 8001140:	f107 0320 	add.w	r3, r7, #32
 8001144:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001148:	4619      	mov	r1, r3
 800114a:	4880      	ldr	r0, [pc, #512]	; (800134c <Ymodem_Receive+0x238>)
 800114c:	f7ff fe24 	bl	8000d98 <ReceivePacket>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <Ymodem_Receive+0x4a>
 8001156:	2b02      	cmp	r3, #2
 8001158:	f000 80c1 	beq.w	80012de <Ymodem_Receive+0x1ca>
 800115c:	e0c9      	b.n	80012f2 <Ymodem_Receive+0x1de>
      {
        case HAL_OK:
          errors = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	63bb      	str	r3, [r7, #56]	; 0x38
          switch (packet_length)
 8001162:	6a3b      	ldr	r3, [r7, #32]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d008      	beq.n	800117a <Ymodem_Receive+0x66>
 8001168:	2b02      	cmp	r3, #2
 800116a:	d10c      	bne.n	8001186 <Ymodem_Receive+0x72>
          {
            case 2:
              /* Abort by sender */
              Serial_PutByte(ACK);
 800116c:	2006      	movs	r0, #6
 800116e:	f7ff f9bd 	bl	80004ec <Serial_PutByte>
              result = COM_ABORT;
 8001172:	2302      	movs	r3, #2
 8001174:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
              break;
 8001178:	e0b0      	b.n	80012dc <Ymodem_Receive+0x1c8>
            case 0:
              /* End of transmission */
              Serial_PutByte(ACK);
 800117a:	2006      	movs	r0, #6
 800117c:	f7ff f9b6 	bl	80004ec <Serial_PutByte>
              file_done = 1;
 8001180:	2301      	movs	r3, #1
 8001182:	63fb      	str	r3, [r7, #60]	; 0x3c
              break;
 8001184:	e0aa      	b.n	80012dc <Ymodem_Receive+0x1c8>
            default:
              /* Normal packet */
              if (aPacketData[PACKET_NUMBER_INDEX] != packets_received)
 8001186:	4b71      	ldr	r3, [pc, #452]	; (800134c <Ymodem_Receive+0x238>)
 8001188:	789b      	ldrb	r3, [r3, #2]
 800118a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800118e:	429a      	cmp	r2, r3
 8001190:	d003      	beq.n	800119a <Ymodem_Receive+0x86>
              {
                Serial_PutByte(NAK);
 8001192:	2015      	movs	r0, #21
 8001194:	f7ff f9aa 	bl	80004ec <Serial_PutByte>
                  }
                }
                packets_received ++;
                session_begin = 1;
              }
              break;
 8001198:	e09f      	b.n	80012da <Ymodem_Receive+0x1c6>
                if (packets_received == 0)
 800119a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d177      	bne.n	8001292 <Ymodem_Receive+0x17e>
                  if (aPacketData[PACKET_DATA_INDEX] != 0)
 80011a2:	4b6a      	ldr	r3, [pc, #424]	; (800134c <Ymodem_Receive+0x238>)
 80011a4:	791b      	ldrb	r3, [r3, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d06b      	beq.n	8001282 <Ymodem_Receive+0x16e>
                    i = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	647b      	str	r3, [r7, #68]	; 0x44
                    file_ptr = aPacketData + PACKET_DATA_INDEX;
 80011ae:	4b68      	ldr	r3, [pc, #416]	; (8001350 <Ymodem_Receive+0x23c>)
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 80011b2:	e008      	b.n	80011c6 <Ymodem_Receive+0xb2>
                      aFileName[i++] = *file_ptr++;
 80011b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011b6:	1c53      	adds	r3, r2, #1
 80011b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011bc:	1c59      	adds	r1, r3, #1
 80011be:	6479      	str	r1, [r7, #68]	; 0x44
 80011c0:	7811      	ldrb	r1, [r2, #0]
 80011c2:	4a64      	ldr	r2, [pc, #400]	; (8001354 <Ymodem_Receive+0x240>)
 80011c4:	54d1      	strb	r1, [r2, r3]
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 80011c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d002      	beq.n	80011d4 <Ymodem_Receive+0xc0>
 80011ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011d0:	2b3f      	cmp	r3, #63	; 0x3f
 80011d2:	d9ef      	bls.n	80011b4 <Ymodem_Receive+0xa0>
                    aFileName[i++] = '\0';
 80011d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011d6:	1c5a      	adds	r2, r3, #1
 80011d8:	647a      	str	r2, [r7, #68]	; 0x44
 80011da:	4a5e      	ldr	r2, [pc, #376]	; (8001354 <Ymodem_Receive+0x240>)
 80011dc:	2100      	movs	r1, #0
 80011de:	54d1      	strb	r1, [r2, r3]
                    i = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	647b      	str	r3, [r7, #68]	; 0x44
                    file_ptr ++;
 80011e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e6:	3301      	adds	r3, #1
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 80011ea:	e00b      	b.n	8001204 <Ymodem_Receive+0xf0>
                      file_size[i++] = *file_ptr++;
 80011ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011ee:	1c53      	adds	r3, r2, #1
 80011f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011f4:	1c59      	adds	r1, r3, #1
 80011f6:	6479      	str	r1, [r7, #68]	; 0x44
 80011f8:	7812      	ldrb	r2, [r2, #0]
 80011fa:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80011fe:	440b      	add	r3, r1
 8001200:	f803 2c3c 	strb.w	r2, [r3, #-60]
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 8001204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b20      	cmp	r3, #32
 800120a:	d002      	beq.n	8001212 <Ymodem_Receive+0xfe>
 800120c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800120e:	2b0f      	cmp	r3, #15
 8001210:	d9ec      	bls.n	80011ec <Ymodem_Receive+0xd8>
                    file_size[i++] = '\0';
 8001212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	647a      	str	r2, [r7, #68]	; 0x44
 8001218:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800121c:	4413      	add	r3, r2
 800121e:	2200      	movs	r2, #0
 8001220:	f803 2c3c 	strb.w	r2, [r3, #-60]
                    Str2Int(file_size, &filesize);
 8001224:	f107 021c 	add.w	r2, r7, #28
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	4611      	mov	r1, r2
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f84c 	bl	80002cc <Str2Int>
                    if (*p_size > (USER_FLASH_SIZE + 1))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a47      	ldr	r2, [pc, #284]	; (8001358 <Ymodem_Receive+0x244>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d914      	bls.n	8001268 <Ymodem_Receive+0x154>
                      tmp = CA;
 800123e:	2318      	movs	r3, #24
 8001240:	72fb      	strb	r3, [r7, #11]
                      HAL_UART_Transmit(&UartHandle, &tmp, 1, NAK_TIMEOUT);
 8001242:	f107 010b 	add.w	r1, r7, #11
 8001246:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800124a:	2201      	movs	r2, #1
 800124c:	4843      	ldr	r0, [pc, #268]	; (800135c <Ymodem_Receive+0x248>)
 800124e:	f001 ff06 	bl	800305e <HAL_UART_Transmit>
                      HAL_UART_Transmit(&UartHandle, &tmp, 1, NAK_TIMEOUT);
 8001252:	f107 010b 	add.w	r1, r7, #11
 8001256:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800125a:	2201      	movs	r2, #1
 800125c:	483f      	ldr	r0, [pc, #252]	; (800135c <Ymodem_Receive+0x248>)
 800125e:	f001 fefe 	bl	800305e <HAL_UART_Transmit>
                      result = COM_LIMIT;
 8001262:	2305      	movs	r3, #5
 8001264:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                    FLASH_If_Erase(APPLICATION_ADDRESS);
 8001268:	4837      	ldr	r0, [pc, #220]	; (8001348 <Ymodem_Receive+0x234>)
 800126a:	f7ff f95f 	bl	800052c <FLASH_If_Erase>
                    *p_size = filesize;
 800126e:	69fa      	ldr	r2, [r7, #28]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	601a      	str	r2, [r3, #0]
                    Serial_PutByte(ACK);
 8001274:	2006      	movs	r0, #6
 8001276:	f7ff f939 	bl	80004ec <Serial_PutByte>
                    Serial_PutByte(CRC16);
 800127a:	2043      	movs	r0, #67	; 0x43
 800127c:	f7ff f936 	bl	80004ec <Serial_PutByte>
 8001280:	e024      	b.n	80012cc <Ymodem_Receive+0x1b8>
                    Serial_PutByte(ACK);
 8001282:	2006      	movs	r0, #6
 8001284:	f7ff f932 	bl	80004ec <Serial_PutByte>
                    file_done = 1;
 8001288:	2301      	movs	r3, #1
 800128a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    session_done = 1;
 800128c:	2301      	movs	r3, #1
 800128e:	643b      	str	r3, [r7, #64]	; 0x40
                    break;
 8001290:	e024      	b.n	80012dc <Ymodem_Receive+0x1c8>
                  ramsource = (uint32_t) & aPacketData[PACKET_DATA_INDEX];
 8001292:	4b2f      	ldr	r3, [pc, #188]	; (8001350 <Ymodem_Receive+0x23c>)
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
                  if (FLASH_If_Write(flashdestination, (uint32_t*) ramsource, packet_length/4) == FLASHIF_OK)                   
 8001296:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001298:	6a3b      	ldr	r3, [r7, #32]
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	461a      	mov	r2, r3
 800129e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80012a0:	f7ff f978 	bl	8000594 <FLASH_If_Write>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d107      	bne.n	80012ba <Ymodem_Receive+0x1a6>
                    flashdestination += packet_length;
 80012aa:	6a3b      	ldr	r3, [r7, #32]
 80012ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012ae:	4413      	add	r3, r2
 80012b0:	633b      	str	r3, [r7, #48]	; 0x30
                    Serial_PutByte(ACK);
 80012b2:	2006      	movs	r0, #6
 80012b4:	f7ff f91a 	bl	80004ec <Serial_PutByte>
 80012b8:	e008      	b.n	80012cc <Ymodem_Receive+0x1b8>
                    Serial_PutByte(CA);
 80012ba:	2018      	movs	r0, #24
 80012bc:	f7ff f916 	bl	80004ec <Serial_PutByte>
                    Serial_PutByte(CA);
 80012c0:	2018      	movs	r0, #24
 80012c2:	f7ff f913 	bl	80004ec <Serial_PutByte>
                    result = COM_DATA;
 80012c6:	2304      	movs	r3, #4
 80012c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                packets_received ++;
 80012cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80012d0:	3301      	adds	r3, #1
 80012d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                session_begin = 1;
 80012d6:	2301      	movs	r3, #1
 80012d8:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80012da:	bf00      	nop
          }
          break;
 80012dc:	e01d      	b.n	800131a <Ymodem_Receive+0x206>
        case HAL_BUSY: /* Abort actually */
          Serial_PutByte(CA);
 80012de:	2018      	movs	r0, #24
 80012e0:	f7ff f904 	bl	80004ec <Serial_PutByte>
          Serial_PutByte(CA);
 80012e4:	2018      	movs	r0, #24
 80012e6:	f7ff f901 	bl	80004ec <Serial_PutByte>
          result = COM_ABORT;
 80012ea:	2302      	movs	r3, #2
 80012ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
          break;
 80012f0:	e013      	b.n	800131a <Ymodem_Receive+0x206>
        default:
          if (session_begin > 0)
 80012f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d002      	beq.n	80012fe <Ymodem_Receive+0x1ea>
          {
            errors ++;
 80012f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012fa:	3301      	adds	r3, #1
 80012fc:	63bb      	str	r3, [r7, #56]	; 0x38
          }
          if (errors > MAX_ERRORS)
 80012fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001300:	2b05      	cmp	r3, #5
 8001302:	d906      	bls.n	8001312 <Ymodem_Receive+0x1fe>
          {
            /* Abort communication */
            Serial_PutByte(CA);
 8001304:	2018      	movs	r0, #24
 8001306:	f7ff f8f1 	bl	80004ec <Serial_PutByte>
            Serial_PutByte(CA);
 800130a:	2018      	movs	r0, #24
 800130c:	f7ff f8ee 	bl	80004ec <Serial_PutByte>
 8001310:	e002      	b.n	8001318 <Ymodem_Receive+0x204>
          }
          else
          {
            Serial_PutByte(CRC16); /* Ask for a packet */
 8001312:	2043      	movs	r0, #67	; 0x43
 8001314:	f7ff f8ea 	bl	80004ec <Serial_PutByte>
          }
          break;
 8001318:	bf00      	nop
    while ((file_done == 0) && (result == COM_OK))
 800131a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800131c:	2b00      	cmp	r3, #0
 800131e:	d104      	bne.n	800132a <Ymodem_Receive+0x216>
 8001320:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001324:	2b00      	cmp	r3, #0
 8001326:	f43f af0b 	beq.w	8001140 <Ymodem_Receive+0x2c>
  while ((session_done == 0) && (result == COM_OK))
 800132a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800132c:	2b00      	cmp	r3, #0
 800132e:	d104      	bne.n	800133a <Ymodem_Receive+0x226>
 8001330:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001334:	2b00      	cmp	r3, #0
 8001336:	f43f aefd 	beq.w	8001134 <Ymodem_Receive+0x20>
      }
    }
  }
  return result;
 800133a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800133e:	4618      	mov	r0, r3
 8001340:	3748      	adds	r7, #72	; 0x48
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	08004000 	.word	0x08004000
 800134c:	20000100 	.word	0x20000100
 8001350:	20000104 	.word	0x20000104
 8001354:	200000c0 	.word	0x200000c0
 8001358:	0003c001 	.word	0x0003c001
 800135c:	20000030 	.word	0x20000030

08001360 <Ymodem_Transmit>:
  * @param  p_file_name: Name of the file sent
  * @param  file_size: Size of the transmission
  * @retval COM_StatusTypeDef result of the communication
  */
COM_StatusTypeDef Ymodem_Transmit (uint8_t *p_buf, const uint8_t *p_file_name, uint32_t file_size)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08e      	sub	sp, #56	; 0x38
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  uint32_t errors = 0, ack_recpt = 0, size = 0, pkt_size;
 800136c:	2300      	movs	r3, #0
 800136e:	637b      	str	r3, [r7, #52]	; 0x34
 8001370:	2300      	movs	r3, #0
 8001372:	633b      	str	r3, [r7, #48]	; 0x30
 8001374:	2300      	movs	r3, #0
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t *p_buf_int;
  COM_StatusTypeDef result = COM_OK;
 8001378:	2300      	movs	r3, #0
 800137a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t blk_number = 1;
 800137e:	2301      	movs	r3, #1
 8001380:	61fb      	str	r3, [r7, #28]
#else /* CRC16_F */   
  uint8_t temp_chksum;
#endif /* CRC16_F */  

  /* Prepare first block - header */
  PrepareIntialPacket(aPacketData, p_file_name, file_size);
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	68b9      	ldr	r1, [r7, #8]
 8001386:	4895      	ldr	r0, [pc, #596]	; (80015dc <Ymodem_Transmit+0x27c>)
 8001388:	f7ff fda0 	bl	8000ecc <PrepareIntialPacket>

  while (( !ack_recpt ) && ( result == COM_OK ))
 800138c:	e04c      	b.n	8001428 <Ymodem_Transmit+0xc8>
  {
    /* Send Packet */
    HAL_UART_Transmit(&UartHandle, &aPacketData[PACKET_START_INDEX], PACKET_SIZE + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 800138e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001392:	2283      	movs	r2, #131	; 0x83
 8001394:	4992      	ldr	r1, [pc, #584]	; (80015e0 <Ymodem_Transmit+0x280>)
 8001396:	4893      	ldr	r0, [pc, #588]	; (80015e4 <Ymodem_Transmit+0x284>)
 8001398:	f001 fe61 	bl	800305e <HAL_UART_Transmit>

    /* Send CRC or Check Sum based on CRC16_F */
#ifdef CRC16_F    
    temp_crc = Cal_CRC16(&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
 800139c:	2180      	movs	r1, #128	; 0x80
 800139e:	4892      	ldr	r0, [pc, #584]	; (80015e8 <Ymodem_Transmit+0x288>)
 80013a0:	f7ff fe87 	bl	80010b2 <Cal_CRC16>
 80013a4:	4603      	mov	r3, r0
 80013a6:	617b      	str	r3, [r7, #20]
    Serial_PutByte(temp_crc >> 8);
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	0a1b      	lsrs	r3, r3, #8
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f89c 	bl	80004ec <Serial_PutByte>
    Serial_PutByte(temp_crc & 0xFF);
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f897 	bl	80004ec <Serial_PutByte>
    temp_chksum = CalcChecksum (&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
    Serial_PutByte(temp_chksum);
#endif /* CRC16_F */

    /* Wait for Ack and 'C' */
    if (HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK)
 80013be:	f107 0110 	add.w	r1, r7, #16
 80013c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013c6:	2201      	movs	r2, #1
 80013c8:	4886      	ldr	r0, [pc, #536]	; (80015e4 <Ymodem_Transmit+0x284>)
 80013ca:	f001 feda 	bl	8003182 <HAL_UART_Receive>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d120      	bne.n	8001416 <Ymodem_Transmit+0xb6>
    {
      if (a_rx_ctrl[0] == ACK)
 80013d4:	7c3b      	ldrb	r3, [r7, #16]
 80013d6:	2b06      	cmp	r3, #6
 80013d8:	d102      	bne.n	80013e0 <Ymodem_Transmit+0x80>
      {
        ack_recpt = 1;
 80013da:	2301      	movs	r3, #1
 80013dc:	633b      	str	r3, [r7, #48]	; 0x30
 80013de:	e01d      	b.n	800141c <Ymodem_Transmit+0xbc>
      }
      else if (a_rx_ctrl[0] == CA)
 80013e0:	7c3b      	ldrb	r3, [r7, #16]
 80013e2:	2b18      	cmp	r3, #24
 80013e4:	d11a      	bne.n	800141c <Ymodem_Transmit+0xbc>
      {
        if ((HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (a_rx_ctrl[0] == CA))
 80013e6:	f107 0110 	add.w	r1, r7, #16
 80013ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013ee:	2201      	movs	r2, #1
 80013f0:	487c      	ldr	r0, [pc, #496]	; (80015e4 <Ymodem_Transmit+0x284>)
 80013f2:	f001 fec6 	bl	8003182 <HAL_UART_Receive>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d10f      	bne.n	800141c <Ymodem_Transmit+0xbc>
 80013fc:	7c3b      	ldrb	r3, [r7, #16]
 80013fe:	2b18      	cmp	r3, #24
 8001400:	d10c      	bne.n	800141c <Ymodem_Transmit+0xbc>
        {
          HAL_Delay( 2 );
 8001402:	2002      	movs	r0, #2
 8001404:	f000 f9c2 	bl	800178c <HAL_Delay>
          __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 8001408:	4b76      	ldr	r3, [pc, #472]	; (80015e4 <Ymodem_Transmit+0x284>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
          result = COM_ABORT;
 800140e:	2302      	movs	r3, #2
 8001410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001414:	e002      	b.n	800141c <Ymodem_Transmit+0xbc>
        }
      }
    }
    else
    {
      errors++;
 8001416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001418:	3301      	adds	r3, #1
 800141a:	637b      	str	r3, [r7, #52]	; 0x34
    }
    if (errors >= MAX_ERRORS)
 800141c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800141e:	2b04      	cmp	r3, #4
 8001420:	d902      	bls.n	8001428 <Ymodem_Transmit+0xc8>
    {
      result = COM_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  while (( !ack_recpt ) && ( result == COM_OK ))
 8001428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800142a:	2b00      	cmp	r3, #0
 800142c:	d103      	bne.n	8001436 <Ymodem_Transmit+0xd6>
 800142e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0ab      	beq.n	800138e <Ymodem_Transmit+0x2e>
    }
  }

  p_buf_int = p_buf;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
  size = file_size;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Here 1024 bytes length is used to send the packets */
  while ((size) && (result == COM_OK ))
 800143e:	e070      	b.n	8001522 <Ymodem_Transmit+0x1c2>
  {
    /* Prepare next packet */
    PreparePacket(p_buf_int, aPacketData, blk_number, size);
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001446:	4965      	ldr	r1, [pc, #404]	; (80015dc <Ymodem_Transmit+0x27c>)
 8001448:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800144a:	f7ff fda2 	bl	8000f92 <PreparePacket>
    ack_recpt = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	633b      	str	r3, [r7, #48]	; 0x30
    a_rx_ctrl[0] = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	743b      	strb	r3, [r7, #16]
    errors = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	637b      	str	r3, [r7, #52]	; 0x34

    /* Resend packet if NAK for few times else end of communication */
    while (( !ack_recpt ) && ( result == COM_OK ))
 800145a:	e05b      	b.n	8001514 <Ymodem_Transmit+0x1b4>
    {
      /* Send next packet */
      if (size >= PACKET_1K_SIZE)
 800145c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800145e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001462:	d303      	bcc.n	800146c <Ymodem_Transmit+0x10c>
      {
        pkt_size = PACKET_1K_SIZE;
 8001464:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001468:	62bb      	str	r3, [r7, #40]	; 0x28
 800146a:	e001      	b.n	8001470 <Ymodem_Transmit+0x110>
      }
      else
      {
        pkt_size = PACKET_SIZE;
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      HAL_UART_Transmit(&UartHandle, &aPacketData[PACKET_START_INDEX], pkt_size + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 8001470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001472:	b29b      	uxth	r3, r3
 8001474:	3303      	adds	r3, #3
 8001476:	b29a      	uxth	r2, r3
 8001478:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800147c:	4958      	ldr	r1, [pc, #352]	; (80015e0 <Ymodem_Transmit+0x280>)
 800147e:	4859      	ldr	r0, [pc, #356]	; (80015e4 <Ymodem_Transmit+0x284>)
 8001480:	f001 fded 	bl	800305e <HAL_UART_Transmit>
      
      /* Send CRC or Check Sum based on CRC16_F */
#ifdef CRC16_F    
      temp_crc = Cal_CRC16(&aPacketData[PACKET_DATA_INDEX], pkt_size);
 8001484:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001486:	4858      	ldr	r0, [pc, #352]	; (80015e8 <Ymodem_Transmit+0x288>)
 8001488:	f7ff fe13 	bl	80010b2 <Cal_CRC16>
 800148c:	4603      	mov	r3, r0
 800148e:	617b      	str	r3, [r7, #20]
      Serial_PutByte(temp_crc >> 8);
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	0a1b      	lsrs	r3, r3, #8
 8001494:	b2db      	uxtb	r3, r3
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f828 	bl	80004ec <Serial_PutByte>
      Serial_PutByte(temp_crc & 0xFF);
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff f823 	bl	80004ec <Serial_PutByte>
      temp_chksum = CalcChecksum (&aPacketData[PACKET_DATA_INDEX], pkt_size);
      Serial_PutByte(temp_chksum);
#endif /* CRC16_F */
      
      /* Wait for Ack */
      if ((HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (a_rx_ctrl[0] == ACK))
 80014a6:	f107 0110 	add.w	r1, r7, #16
 80014aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014ae:	2201      	movs	r2, #1
 80014b0:	484c      	ldr	r0, [pc, #304]	; (80015e4 <Ymodem_Transmit+0x284>)
 80014b2:	f001 fe66 	bl	8003182 <HAL_UART_Receive>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d122      	bne.n	8001502 <Ymodem_Transmit+0x1a2>
 80014bc:	7c3b      	ldrb	r3, [r7, #16]
 80014be:	2b06      	cmp	r3, #6
 80014c0:	d11f      	bne.n	8001502 <Ymodem_Transmit+0x1a2>
      {
        ack_recpt = 1;
 80014c2:	2301      	movs	r3, #1
 80014c4:	633b      	str	r3, [r7, #48]	; 0x30
        if (size > pkt_size)
 80014c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d912      	bls.n	80014f4 <Ymodem_Transmit+0x194>
        {
          p_buf_int += pkt_size;
 80014ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d2:	4413      	add	r3, r2
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
          size -= pkt_size;
 80014d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (blk_number == (USER_FLASH_SIZE / PACKET_1K_SIZE))
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	2bf0      	cmp	r3, #240	; 0xf0
 80014e2:	d103      	bne.n	80014ec <Ymodem_Transmit+0x18c>
          {
            result = COM_LIMIT; /* boundary error */
 80014e4:	2305      	movs	r3, #5
 80014e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (size > pkt_size)
 80014ea:	e00d      	b.n	8001508 <Ymodem_Transmit+0x1a8>
          }
          else
          {
            blk_number++;
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	3301      	adds	r3, #1
 80014f0:	61fb      	str	r3, [r7, #28]
        if (size > pkt_size)
 80014f2:	e009      	b.n	8001508 <Ymodem_Transmit+0x1a8>
          }
        }
        else
        {
          p_buf_int += pkt_size;
 80014f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f8:	4413      	add	r3, r2
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
          size = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (size > pkt_size)
 8001500:	e002      	b.n	8001508 <Ymodem_Transmit+0x1a8>
        }
      }
      else
      {
        errors++;
 8001502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001504:	3301      	adds	r3, #1
 8001506:	637b      	str	r3, [r7, #52]	; 0x34
      }

      /* Resend packet if NAK  for a count of 10 else end of communication */
      if (errors >= MAX_ERRORS)
 8001508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800150a:	2b04      	cmp	r3, #4
 800150c:	d902      	bls.n	8001514 <Ymodem_Transmit+0x1b4>
      {
        result = COM_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while (( !ack_recpt ) && ( result == COM_OK ))
 8001514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001516:	2b00      	cmp	r3, #0
 8001518:	d103      	bne.n	8001522 <Ymodem_Transmit+0x1c2>
 800151a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800151e:	2b00      	cmp	r3, #0
 8001520:	d09c      	beq.n	800145c <Ymodem_Transmit+0xfc>
  while ((size) && (result == COM_OK ))
 8001522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <Ymodem_Transmit+0x1d0>
 8001528:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800152c:	2b00      	cmp	r3, #0
 800152e:	d087      	beq.n	8001440 <Ymodem_Transmit+0xe0>
      }
    }
  }

  /* Sending End Of Transmission char */
  ack_recpt = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	633b      	str	r3, [r7, #48]	; 0x30
  a_rx_ctrl[0] = 0x00;
 8001534:	2300      	movs	r3, #0
 8001536:	743b      	strb	r3, [r7, #16]
  errors = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	637b      	str	r3, [r7, #52]	; 0x34
  while (( !ack_recpt ) && ( result == COM_OK ))
 800153c:	e037      	b.n	80015ae <Ymodem_Transmit+0x24e>
  {
    Serial_PutByte(EOT);
 800153e:	2004      	movs	r0, #4
 8001540:	f7fe ffd4 	bl	80004ec <Serial_PutByte>

    /* Wait for Ack */
    if (HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK)
 8001544:	f107 0110 	add.w	r1, r7, #16
 8001548:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800154c:	2201      	movs	r2, #1
 800154e:	4825      	ldr	r0, [pc, #148]	; (80015e4 <Ymodem_Transmit+0x284>)
 8001550:	f001 fe17 	bl	8003182 <HAL_UART_Receive>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d120      	bne.n	800159c <Ymodem_Transmit+0x23c>
    {
      if (a_rx_ctrl[0] == ACK)
 800155a:	7c3b      	ldrb	r3, [r7, #16]
 800155c:	2b06      	cmp	r3, #6
 800155e:	d102      	bne.n	8001566 <Ymodem_Transmit+0x206>
      {
        ack_recpt = 1;
 8001560:	2301      	movs	r3, #1
 8001562:	633b      	str	r3, [r7, #48]	; 0x30
 8001564:	e01d      	b.n	80015a2 <Ymodem_Transmit+0x242>
      }
      else if (a_rx_ctrl[0] == CA)
 8001566:	7c3b      	ldrb	r3, [r7, #16]
 8001568:	2b18      	cmp	r3, #24
 800156a:	d11a      	bne.n	80015a2 <Ymodem_Transmit+0x242>
      {
        if ((HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (a_rx_ctrl[0] == CA))
 800156c:	f107 0110 	add.w	r1, r7, #16
 8001570:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001574:	2201      	movs	r2, #1
 8001576:	481b      	ldr	r0, [pc, #108]	; (80015e4 <Ymodem_Transmit+0x284>)
 8001578:	f001 fe03 	bl	8003182 <HAL_UART_Receive>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10f      	bne.n	80015a2 <Ymodem_Transmit+0x242>
 8001582:	7c3b      	ldrb	r3, [r7, #16]
 8001584:	2b18      	cmp	r3, #24
 8001586:	d10c      	bne.n	80015a2 <Ymodem_Transmit+0x242>
        {
          HAL_Delay( 2 );
 8001588:	2002      	movs	r0, #2
 800158a:	f000 f8ff 	bl	800178c <HAL_Delay>
          __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <Ymodem_Transmit+0x284>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
          result = COM_ABORT;
 8001594:	2302      	movs	r3, #2
 8001596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800159a:	e002      	b.n	80015a2 <Ymodem_Transmit+0x242>
        }
      }
    }
    else
    {
      errors++;
 800159c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800159e:	3301      	adds	r3, #1
 80015a0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if (errors >=  MAX_ERRORS)
 80015a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a4:	2b04      	cmp	r3, #4
 80015a6:	d902      	bls.n	80015ae <Ymodem_Transmit+0x24e>
    {
      result = COM_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  while (( !ack_recpt ) && ( result == COM_OK ))
 80015ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d103      	bne.n	80015bc <Ymodem_Transmit+0x25c>
 80015b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0c0      	beq.n	800153e <Ymodem_Transmit+0x1de>
    }
  }

  /* Empty packet sent - some terminal emulators need this to close session */
  if ( result == COM_OK )
 80015bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d14c      	bne.n	800165e <Ymodem_Transmit+0x2fe>
  {
    /* Preparing an empty packet */
    aPacketData[PACKET_START_INDEX] = SOH;
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <Ymodem_Transmit+0x27c>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	705a      	strb	r2, [r3, #1]
    aPacketData[PACKET_NUMBER_INDEX] = 0;
 80015ca:	4b04      	ldr	r3, [pc, #16]	; (80015dc <Ymodem_Transmit+0x27c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	709a      	strb	r2, [r3, #2]
    aPacketData[PACKET_CNUMBER_INDEX] = 0xFF;
 80015d0:	4b02      	ldr	r3, [pc, #8]	; (80015dc <Ymodem_Transmit+0x27c>)
 80015d2:	22ff      	movs	r2, #255	; 0xff
 80015d4:	70da      	strb	r2, [r3, #3]
    for (i = PACKET_DATA_INDEX; i < (PACKET_SIZE + PACKET_DATA_INDEX); i++)
 80015d6:	2304      	movs	r3, #4
 80015d8:	76fb      	strb	r3, [r7, #27]
 80015da:	e00e      	b.n	80015fa <Ymodem_Transmit+0x29a>
 80015dc:	20000100 	.word	0x20000100
 80015e0:	20000101 	.word	0x20000101
 80015e4:	20000030 	.word	0x20000030
 80015e8:	20000104 	.word	0x20000104
    {
      aPacketData [i] = 0x00;
 80015ec:	7efb      	ldrb	r3, [r7, #27]
 80015ee:	4a1f      	ldr	r2, [pc, #124]	; (800166c <Ymodem_Transmit+0x30c>)
 80015f0:	2100      	movs	r1, #0
 80015f2:	54d1      	strb	r1, [r2, r3]
    for (i = PACKET_DATA_INDEX; i < (PACKET_SIZE + PACKET_DATA_INDEX); i++)
 80015f4:	7efb      	ldrb	r3, [r7, #27]
 80015f6:	3301      	adds	r3, #1
 80015f8:	76fb      	strb	r3, [r7, #27]
 80015fa:	7efb      	ldrb	r3, [r7, #27]
 80015fc:	2b83      	cmp	r3, #131	; 0x83
 80015fe:	d9f5      	bls.n	80015ec <Ymodem_Transmit+0x28c>
    }

    /* Send Packet */
    HAL_UART_Transmit(&UartHandle, &aPacketData[PACKET_START_INDEX], PACKET_SIZE + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 8001600:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001604:	2283      	movs	r2, #131	; 0x83
 8001606:	491a      	ldr	r1, [pc, #104]	; (8001670 <Ymodem_Transmit+0x310>)
 8001608:	481a      	ldr	r0, [pc, #104]	; (8001674 <Ymodem_Transmit+0x314>)
 800160a:	f001 fd28 	bl	800305e <HAL_UART_Transmit>

    /* Send CRC or Check Sum based on CRC16_F */
#ifdef CRC16_F    
    temp_crc = Cal_CRC16(&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
 800160e:	2180      	movs	r1, #128	; 0x80
 8001610:	4819      	ldr	r0, [pc, #100]	; (8001678 <Ymodem_Transmit+0x318>)
 8001612:	f7ff fd4e 	bl	80010b2 <Cal_CRC16>
 8001616:	4603      	mov	r3, r0
 8001618:	617b      	str	r3, [r7, #20]
    Serial_PutByte(temp_crc >> 8);
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	0a1b      	lsrs	r3, r3, #8
 800161e:	b2db      	uxtb	r3, r3
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe ff63 	bl	80004ec <Serial_PutByte>
    Serial_PutByte(temp_crc & 0xFF);
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ff5e 	bl	80004ec <Serial_PutByte>
    temp_chksum = CalcChecksum (&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
    Serial_PutByte(temp_chksum);
#endif /* CRC16_F */

    /* Wait for Ack and 'C' */
    if (HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK)
 8001630:	f107 0110 	add.w	r1, r7, #16
 8001634:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001638:	2201      	movs	r2, #1
 800163a:	480e      	ldr	r0, [pc, #56]	; (8001674 <Ymodem_Transmit+0x314>)
 800163c:	f001 fda1 	bl	8003182 <HAL_UART_Receive>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10b      	bne.n	800165e <Ymodem_Transmit+0x2fe>
    {
      if (a_rx_ctrl[0] == CA)
 8001646:	7c3b      	ldrb	r3, [r7, #16]
 8001648:	2b18      	cmp	r3, #24
 800164a:	d108      	bne.n	800165e <Ymodem_Transmit+0x2fe>
      {
          HAL_Delay( 2 );
 800164c:	2002      	movs	r0, #2
 800164e:	f000 f89d 	bl	800178c <HAL_Delay>
          __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 8001652:	4b08      	ldr	r3, [pc, #32]	; (8001674 <Ymodem_Transmit+0x314>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
          result = COM_ABORT;
 8001658:	2302      	movs	r3, #2
 800165a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
  }

  return result; /* file transmitted successfully */
 800165e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8001662:	4618      	mov	r0, r3
 8001664:	3738      	adds	r7, #56	; 0x38
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000100 	.word	0x20000100
 8001670:	20000101 	.word	0x20000101
 8001674:	20000030 	.word	0x20000030
 8001678:	20000104 	.word	0x20000104

0800167c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800167c:	480c      	ldr	r0, [pc, #48]	; (80016b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800167e:	490d      	ldr	r1, [pc, #52]	; (80016b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001680:	4a0d      	ldr	r2, [pc, #52]	; (80016b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001684:	e002      	b.n	800168c <LoopCopyDataInit>

08001686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800168a:	3304      	adds	r3, #4

0800168c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800168c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800168e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001690:	d3f9      	bcc.n	8001686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001692:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001694:	4c0a      	ldr	r4, [pc, #40]	; (80016c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001698:	e001      	b.n	800169e <LoopFillZerobss>

0800169a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800169a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800169c:	3204      	adds	r2, #4

0800169e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800169e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a0:	d3fb      	bcc.n	800169a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016a2:	f7ff fb72 	bl	8000d8a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016a6:	f001 fee7 	bl	8003478 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016aa:	f7ff f815 	bl	80006d8 <main>
  bx lr
 80016ae:	4770      	bx	lr
  ldr r0, =_sdata
 80016b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016b8:	08003b64 	.word	0x08003b64
  ldr r2, =_sbss
 80016bc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80016c0:	20000530 	.word	0x20000530

080016c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016c4:	e7fe      	b.n	80016c4 <ADC1_2_IRQHandler>
	...

080016c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <HAL_Init+0x28>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a07      	ldr	r2, [pc, #28]	; (80016f0 <HAL_Init+0x28>)
 80016d2:	f043 0310 	orr.w	r3, r3, #16
 80016d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d8:	2003      	movs	r0, #3
 80016da:	f000 f93d 	bl	8001958 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016de:	2000      	movs	r0, #0
 80016e0:	f000 f808 	bl	80016f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e4:	f7ff faac 	bl	8000c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40022000 	.word	0x40022000

080016f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_InitTick+0x54>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_InitTick+0x58>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170a:	fbb3 f3f1 	udiv	r3, r3, r1
 800170e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001712:	4618      	mov	r0, r3
 8001714:	f000 f94b 	bl	80019ae <HAL_SYSTICK_Config>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e00e      	b.n	8001740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b0f      	cmp	r3, #15
 8001726:	d80a      	bhi.n	800173e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001728:	2200      	movs	r2, #0
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	f04f 30ff 	mov.w	r0, #4294967295
 8001730:	f000 f91d 	bl	800196e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001734:	4a06      	ldr	r2, [pc, #24]	; (8001750 <HAL_InitTick+0x5c>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	e000      	b.n	8001740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000000 	.word	0x20000000
 800174c:	20000008 	.word	0x20000008
 8001750:	20000004 	.word	0x20000004

08001754 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <HAL_IncTick+0x1c>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HAL_IncTick+0x20>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4413      	add	r3, r2
 8001764:	4a03      	ldr	r2, [pc, #12]	; (8001774 <HAL_IncTick+0x20>)
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	20000008 	.word	0x20000008
 8001774:	20000508 	.word	0x20000508

08001778 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return uwTick;
 800177c:	4b02      	ldr	r3, [pc, #8]	; (8001788 <HAL_GetTick+0x10>)
 800177e:	681b      	ldr	r3, [r3, #0]
}
 8001780:	4618      	mov	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	20000508 	.word	0x20000508

0800178c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001794:	f7ff fff0 	bl	8001778 <HAL_GetTick>
 8001798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a4:	d005      	beq.n	80017b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_Delay+0x40>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4413      	add	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017b2:	bf00      	nop
 80017b4:	f7ff ffe0 	bl	8001778 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d8f7      	bhi.n	80017b4 <HAL_Delay+0x28>
  {
  }
}
 80017c4:	bf00      	nop
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000008 	.word	0x20000008

080017d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <__NVIC_SetPriorityGrouping+0x44>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017ec:	4013      	ands	r3, r2
 80017ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001802:	4a04      	ldr	r2, [pc, #16]	; (8001814 <__NVIC_SetPriorityGrouping+0x44>)
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	60d3      	str	r3, [r2, #12]
}
 8001808:	bf00      	nop
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800181c:	4b04      	ldr	r3, [pc, #16]	; (8001830 <__NVIC_GetPriorityGrouping+0x18>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	0a1b      	lsrs	r3, r3, #8
 8001822:	f003 0307 	and.w	r3, r3, #7
}
 8001826:	4618      	mov	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001844:	2b00      	cmp	r3, #0
 8001846:	db0a      	blt.n	800185e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	b2da      	uxtb	r2, r3
 800184c:	490c      	ldr	r1, [pc, #48]	; (8001880 <__NVIC_SetPriority+0x4c>)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	0112      	lsls	r2, r2, #4
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	440b      	add	r3, r1
 8001858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800185c:	e00a      	b.n	8001874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4908      	ldr	r1, [pc, #32]	; (8001884 <__NVIC_SetPriority+0x50>)
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	3b04      	subs	r3, #4
 800186c:	0112      	lsls	r2, r2, #4
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	440b      	add	r3, r1
 8001872:	761a      	strb	r2, [r3, #24]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000e100 	.word	0xe000e100
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	; 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f1c3 0307 	rsb	r3, r3, #7
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	bf28      	it	cs
 80018a6:	2304      	movcs	r3, #4
 80018a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3304      	adds	r3, #4
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d902      	bls.n	80018b8 <NVIC_EncodePriority+0x30>
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3b03      	subs	r3, #3
 80018b6:	e000      	b.n	80018ba <NVIC_EncodePriority+0x32>
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	f04f 32ff 	mov.w	r2, #4294967295
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43da      	mvns	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	401a      	ands	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d0:	f04f 31ff 	mov.w	r1, #4294967295
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	43d9      	mvns	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	4313      	orrs	r3, r2
         );
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3724      	adds	r7, #36	; 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018f0:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <__NVIC_SystemReset+0x20>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80018fc:	4903      	ldr	r1, [pc, #12]	; (800190c <__NVIC_SystemReset+0x20>)
 80018fe:	4b04      	ldr	r3, [pc, #16]	; (8001910 <__NVIC_SystemReset+0x24>)
 8001900:	4313      	orrs	r3, r2
 8001902:	60cb      	str	r3, [r1, #12]
 8001904:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <__NVIC_SystemReset+0x1c>
 800190c:	e000ed00 	.word	0xe000ed00
 8001910:	05fa0004 	.word	0x05fa0004

08001914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001924:	d301      	bcc.n	800192a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001926:	2301      	movs	r3, #1
 8001928:	e00f      	b.n	800194a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <SysTick_Config+0x40>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001932:	210f      	movs	r1, #15
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	f7ff ff7c 	bl	8001834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <SysTick_Config+0x40>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001942:	4b04      	ldr	r3, [pc, #16]	; (8001954 <SysTick_Config+0x40>)
 8001944:	2207      	movs	r2, #7
 8001946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	e000e010 	.word	0xe000e010

08001958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ff35 	bl	80017d0 <__NVIC_SetPriorityGrouping>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
 800197a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001980:	f7ff ff4a 	bl	8001818 <__NVIC_GetPriorityGrouping>
 8001984:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	68b9      	ldr	r1, [r7, #8]
 800198a:	6978      	ldr	r0, [r7, #20]
 800198c:	f7ff ff7c 	bl	8001888 <NVIC_EncodePriority>
 8001990:	4602      	mov	r2, r0
 8001992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001996:	4611      	mov	r1, r2
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff4b 	bl	8001834 <__NVIC_SetPriority>
}
 800199e:	bf00      	nop
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80019aa:	f7ff ff9f 	bl	80018ec <__NVIC_SystemReset>

080019ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ffac 	bl	8001914 <SysTick_Config>
 80019bc:	4603      	mov	r3, r0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80019c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ca:	b087      	sub	sp, #28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80019e2:	4b2f      	ldr	r3, [pc, #188]	; (8001aa0 <HAL_FLASH_Program+0xd8>)
 80019e4:	7e1b      	ldrb	r3, [r3, #24]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d101      	bne.n	80019ee <HAL_FLASH_Program+0x26>
 80019ea:	2302      	movs	r3, #2
 80019ec:	e054      	b.n	8001a98 <HAL_FLASH_Program+0xd0>
 80019ee:	4b2c      	ldr	r3, [pc, #176]	; (8001aa0 <HAL_FLASH_Program+0xd8>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80019f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019f8:	f000 f8ca 	bl	8001b90 <FLASH_WaitForLastOperation>
 80019fc:	4603      	mov	r3, r0
 80019fe:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001a00:	7dfb      	ldrb	r3, [r7, #23]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d144      	bne.n	8001a90 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d102      	bne.n	8001a12 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	757b      	strb	r3, [r7, #21]
 8001a10:	e007      	b.n	8001a22 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d102      	bne.n	8001a1e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	757b      	strb	r3, [r7, #21]
 8001a1c:	e001      	b.n	8001a22 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001a1e:	2304      	movs	r3, #4
 8001a20:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001a22:	2300      	movs	r3, #0
 8001a24:	75bb      	strb	r3, [r7, #22]
 8001a26:	e02d      	b.n	8001a84 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001a28:	7dbb      	ldrb	r3, [r7, #22]
 8001a2a:	005a      	lsls	r2, r3, #1
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	eb02 0c03 	add.w	ip, r2, r3
 8001a32:	7dbb      	ldrb	r3, [r7, #22]
 8001a34:	0119      	lsls	r1, r3, #4
 8001a36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a3a:	f1c1 0620 	rsb	r6, r1, #32
 8001a3e:	f1a1 0020 	sub.w	r0, r1, #32
 8001a42:	fa22 f401 	lsr.w	r4, r2, r1
 8001a46:	fa03 f606 	lsl.w	r6, r3, r6
 8001a4a:	4334      	orrs	r4, r6
 8001a4c:	fa23 f000 	lsr.w	r0, r3, r0
 8001a50:	4304      	orrs	r4, r0
 8001a52:	fa23 f501 	lsr.w	r5, r3, r1
 8001a56:	b2a3      	uxth	r3, r4
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4660      	mov	r0, ip
 8001a5c:	f000 f87c 	bl	8001b58 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001a60:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a64:	f000 f894 	bl	8001b90 <FLASH_WaitForLastOperation>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001a6c:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <HAL_FLASH_Program+0xdc>)
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	4a0c      	ldr	r2, [pc, #48]	; (8001aa4 <HAL_FLASH_Program+0xdc>)
 8001a72:	f023 0301 	bic.w	r3, r3, #1
 8001a76:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001a78:	7dfb      	ldrb	r3, [r7, #23]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d107      	bne.n	8001a8e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001a7e:	7dbb      	ldrb	r3, [r7, #22]
 8001a80:	3301      	adds	r3, #1
 8001a82:	75bb      	strb	r3, [r7, #22]
 8001a84:	7dba      	ldrb	r2, [r7, #22]
 8001a86:	7d7b      	ldrb	r3, [r7, #21]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d3cd      	bcc.n	8001a28 <HAL_FLASH_Program+0x60>
 8001a8c:	e000      	b.n	8001a90 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001a8e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a90:	4b03      	ldr	r3, [pc, #12]	; (8001aa0 <HAL_FLASH_Program+0xd8>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	761a      	strb	r2, [r3, #24]

  return status;
 8001a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	371c      	adds	r7, #28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aa0:	20000510 	.word	0x20000510
 8001aa4:	40022000 	.word	0x40022000

08001aa8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <HAL_FLASH_Unlock+0x40>)
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00d      	beq.n	8001ada <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_FLASH_Unlock+0x40>)
 8001ac0:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <HAL_FLASH_Unlock+0x44>)
 8001ac2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <HAL_FLASH_Unlock+0x40>)
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <HAL_FLASH_Unlock+0x48>)
 8001ac8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001aca:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <HAL_FLASH_Unlock+0x40>)
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001ada:	79fb      	ldrb	r3, [r7, #7]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40022000 	.word	0x40022000
 8001aec:	45670123 	.word	0x45670123
 8001af0:	cdef89ab 	.word	0xcdef89ab

08001af4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_FLASH_Lock+0x1c>)
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <HAL_FLASH_Lock+0x1c>)
 8001afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b02:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40022000 	.word	0x40022000

08001b14 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_FLASH_OB_Unlock+0x2c>)
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d107      	bne.n	8001b34 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_FLASH_OB_Unlock+0x2c>)
 8001b26:	4a07      	ldr	r2, [pc, #28]	; (8001b44 <HAL_FLASH_OB_Unlock+0x30>)
 8001b28:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8001b2a:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <HAL_FLASH_OB_Unlock+0x2c>)
 8001b2c:	4a06      	ldr	r2, [pc, #24]	; (8001b48 <HAL_FLASH_OB_Unlock+0x34>)
 8001b2e:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001b30:	2300      	movs	r3, #0
 8001b32:	e000      	b.n	8001b36 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40022000 	.word	0x40022000
 8001b44:	45670123 	.word	0x45670123
 8001b48:	cdef89ab 	.word	0xcdef89ab

08001b4c <HAL_FLASH_OB_Launch>:
  * @brief  Launch the option byte loading.
  * @note   This function will reset automatically the MCU.
  * @retval None
  */
void HAL_FLASH_OB_Launch(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* Initiates a system reset request to launch the option byte loading */
  HAL_NVIC_SystemReset();
 8001b50:	f7ff ff29 	bl	80019a6 <HAL_NVIC_SystemReset>
}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <FLASH_Program_HalfWord+0x30>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001b6a:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <FLASH_Program_HalfWord+0x34>)
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	4a07      	ldr	r2, [pc, #28]	; (8001b8c <FLASH_Program_HalfWord+0x34>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	887a      	ldrh	r2, [r7, #2]
 8001b7a:	801a      	strh	r2, [r3, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20000510 	.word	0x20000510
 8001b8c:	40022000 	.word	0x40022000

08001b90 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001b98:	f7ff fdee 	bl	8001778 <HAL_GetTick>
 8001b9c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001b9e:	e010      	b.n	8001bc2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba6:	d00c      	beq.n	8001bc2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d007      	beq.n	8001bbe <FLASH_WaitForLastOperation+0x2e>
 8001bae:	f7ff fde3 	bl	8001778 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d201      	bcs.n	8001bc2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e025      	b.n	8001c0e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001bc2:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <FLASH_WaitForLastOperation+0x88>)
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1e8      	bne.n	8001ba0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001bce:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <FLASH_WaitForLastOperation+0x88>)
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	f003 0320 	and.w	r3, r3, #32
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d002      	beq.n	8001be0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001bda:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <FLASH_WaitForLastOperation+0x88>)
 8001bdc:	2220      	movs	r2, #32
 8001bde:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001be0:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <FLASH_WaitForLastOperation+0x88>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	f003 0310 	and.w	r3, r3, #16
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10b      	bne.n	8001c04 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <FLASH_WaitForLastOperation+0x88>)
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d105      	bne.n	8001c04 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <FLASH_WaitForLastOperation+0x88>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001c04:	f000 f80a 	bl	8001c1c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e000      	b.n	8001c0e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40022000 	.word	0x40022000

08001c1c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001c26:	4b23      	ldr	r3, [pc, #140]	; (8001cb4 <FLASH_SetErrorCode+0x98>)
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	f003 0310 	and.w	r3, r3, #16
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d009      	beq.n	8001c46 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001c32:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <FLASH_SetErrorCode+0x9c>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f043 0302 	orr.w	r3, r3, #2
 8001c3a:	4a1f      	ldr	r2, [pc, #124]	; (8001cb8 <FLASH_SetErrorCode+0x9c>)
 8001c3c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f043 0310 	orr.w	r3, r3, #16
 8001c44:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001c46:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <FLASH_SetErrorCode+0x98>)
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d009      	beq.n	8001c66 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001c52:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <FLASH_SetErrorCode+0x9c>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	4a17      	ldr	r2, [pc, #92]	; (8001cb8 <FLASH_SetErrorCode+0x9c>)
 8001c5c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f043 0304 	orr.w	r3, r3, #4
 8001c64:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001c66:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <FLASH_SetErrorCode+0x98>)
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00b      	beq.n	8001c8a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <FLASH_SetErrorCode+0x9c>)
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	f043 0304 	orr.w	r3, r3, #4
 8001c7a:	4a0f      	ldr	r2, [pc, #60]	; (8001cb8 <FLASH_SetErrorCode+0x9c>)
 8001c7c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <FLASH_SetErrorCode+0x98>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	4a0c      	ldr	r2, [pc, #48]	; (8001cb4 <FLASH_SetErrorCode+0x98>)
 8001c84:	f023 0301 	bic.w	r3, r3, #1
 8001c88:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f240 1201 	movw	r2, #257	; 0x101
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d106      	bne.n	8001ca2 <FLASH_SetErrorCode+0x86>
 8001c94:	4b07      	ldr	r3, [pc, #28]	; (8001cb4 <FLASH_SetErrorCode+0x98>)
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	4a06      	ldr	r2, [pc, #24]	; (8001cb4 <FLASH_SetErrorCode+0x98>)
 8001c9a:	f023 0301 	bic.w	r3, r3, #1
 8001c9e:	61d3      	str	r3, [r2, #28]
}  
 8001ca0:	e002      	b.n	8001ca8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001ca2:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <FLASH_SetErrorCode+0x98>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	60d3      	str	r3, [r2, #12]
}  
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40022000 	.word	0x40022000
 8001cb8:	20000510 	.word	0x20000510

08001cbc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001cce:	4b2f      	ldr	r3, [pc, #188]	; (8001d8c <HAL_FLASHEx_Erase+0xd0>)
 8001cd0:	7e1b      	ldrb	r3, [r3, #24]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d101      	bne.n	8001cda <HAL_FLASHEx_Erase+0x1e>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e053      	b.n	8001d82 <HAL_FLASHEx_Erase+0xc6>
 8001cda:	4b2c      	ldr	r3, [pc, #176]	; (8001d8c <HAL_FLASHEx_Erase+0xd0>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d116      	bne.n	8001d16 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001ce8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001cec:	f7ff ff50 	bl	8001b90 <FLASH_WaitForLastOperation>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d141      	bne.n	8001d7a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f000 f926 	bl	8001f48 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001cfc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d00:	f7ff ff46 	bl	8001b90 <FLASH_WaitForLastOperation>
 8001d04:	4603      	mov	r3, r0
 8001d06:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001d08:	4b21      	ldr	r3, [pc, #132]	; (8001d90 <HAL_FLASHEx_Erase+0xd4>)
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	4a20      	ldr	r2, [pc, #128]	; (8001d90 <HAL_FLASHEx_Erase+0xd4>)
 8001d0e:	f023 0304 	bic.w	r3, r3, #4
 8001d12:	6113      	str	r3, [r2, #16]
 8001d14:	e031      	b.n	8001d7a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001d16:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d1a:	f7ff ff39 	bl	8001b90 <FLASH_WaitForLastOperation>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d12a      	bne.n	8001d7a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	f04f 32ff 	mov.w	r2, #4294967295
 8001d2a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	e019      	b.n	8001d68 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001d34:	68b8      	ldr	r0, [r7, #8]
 8001d36:	f000 fb57 	bl	80023e8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d3a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d3e:	f7ff ff27 	bl	8001b90 <FLASH_WaitForLastOperation>
 8001d42:	4603      	mov	r3, r0
 8001d44:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001d46:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_FLASHEx_Erase+0xd4>)
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	4a11      	ldr	r2, [pc, #68]	; (8001d90 <HAL_FLASHEx_Erase+0xd4>)
 8001d4c:	f023 0302 	bic.w	r3, r3, #2
 8001d50:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	601a      	str	r2, [r3, #0]
            break;
 8001d5e:	e00c      	b.n	8001d7a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d66:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	02da      	lsls	r2, r3, #11
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8001d74:	68ba      	ldr	r2, [r7, #8]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d3dc      	bcc.n	8001d34 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <HAL_FLASHEx_Erase+0xd0>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	761a      	strb	r2, [r3, #24]

  return status;
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000510 	.word	0x20000510
 8001d90:	40022000 	.word	0x40022000

08001d94 <HAL_FLASHEx_OBErase>:
  *         (system reset will occur)
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_FLASHEx_OBErase(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
  uint8_t rdptmp = OB_RDP_LEVEL_0;
 8001d9a:	23a5      	movs	r3, #165	; 0xa5
 8001d9c:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	71fb      	strb	r3, [r7, #7]

  /* Get the actual read protection Option Byte value */
  rdptmp = FLASH_OB_GetRDP();
 8001da2:	f000 faf5 	bl	8002390 <FLASH_OB_GetRDP>
 8001da6:	4603      	mov	r3, r0
 8001da8:	71bb      	strb	r3, [r7, #6]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001daa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001dae:	f7ff feef 	bl	8001b90 <FLASH_WaitForLastOperation>
 8001db2:	4603      	mov	r3, r0
 8001db4:	71fb      	strb	r3, [r7, #7]

  if(status == HAL_OK)
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d123      	bne.n	8001e04 <HAL_FLASHEx_OBErase+0x70>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001dbc:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <HAL_FLASHEx_OBErase+0x7c>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	61da      	str	r2, [r3, #28]

    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8001dc2:	4b14      	ldr	r3, [pc, #80]	; (8001e14 <HAL_FLASHEx_OBErase+0x80>)
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	4a13      	ldr	r2, [pc, #76]	; (8001e14 <HAL_FLASHEx_OBErase+0x80>)
 8001dc8:	f043 0320 	orr.w	r3, r3, #32
 8001dcc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001dce:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <HAL_FLASHEx_OBErase+0x80>)
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	4a10      	ldr	r2, [pc, #64]	; (8001e14 <HAL_FLASHEx_OBErase+0x80>)
 8001dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dd8:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001dda:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001dde:	f7ff fed7 	bl	8001b90 <FLASH_WaitForLastOperation>
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <HAL_FLASHEx_OBErase+0x80>)
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <HAL_FLASHEx_OBErase+0x80>)
 8001dec:	f023 0320 	bic.w	r3, r3, #32
 8001df0:	6113      	str	r3, [r2, #16]

    if(status == HAL_OK)
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d105      	bne.n	8001e04 <HAL_FLASHEx_OBErase+0x70>
    {
      /* Restore the last read protection Option Byte value */
      status = FLASH_OB_RDP_LevelConfig(rdptmp);
 8001df8:	79bb      	ldrb	r3, [r7, #6]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 fa02 	bl	8002204 <FLASH_OB_RDP_LevelConfig>
 8001e00:	4603      	mov	r3, r0
 8001e02:	71fb      	strb	r3, [r7, #7]
    }
  }

  /* Return the erase status */
  return status;
 8001e04:	79fb      	ldrb	r3, [r7, #7]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000510 	.word	0x20000510
 8001e14:	40022000 	.word	0x40022000

08001e18 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001e24:	4b39      	ldr	r3, [pc, #228]	; (8001f0c <HAL_FLASHEx_OBProgram+0xf4>)
 8001e26:	7e1b      	ldrb	r3, [r3, #24]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d101      	bne.n	8001e30 <HAL_FLASHEx_OBProgram+0x18>
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	e069      	b.n	8001f04 <HAL_FLASHEx_OBProgram+0xec>
 8001e30:	4b36      	ldr	r3, [pc, #216]	; (8001f0c <HAL_FLASHEx_OBProgram+0xf4>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d01a      	beq.n	8001e78 <HAL_FLASHEx_OBProgram+0x60>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d107      	bne.n	8001e5a <HAL_FLASHEx_OBProgram+0x42>
    {
      /* Enable of Write protection on the selected page */
      status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 f896 	bl	8001f80 <FLASH_OB_EnableWRP>
 8001e54:	4603      	mov	r3, r0
 8001e56:	73fb      	strb	r3, [r7, #15]
 8001e58:	e006      	b.n	8001e68 <HAL_FLASHEx_OBProgram+0x50>
    }
    else
    {
      /* Disable of Write protection on the selected page */
      status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 f930 	bl	80020c4 <FLASH_OB_DisableWRP>
 8001e64:	4603      	mov	r3, r0
 8001e66:	73fb      	strb	r3, [r7, #15]
    }
    if (status != HAL_OK)
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d004      	beq.n	8001e78 <HAL_FLASHEx_OBProgram+0x60>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8001e6e:	4b27      	ldr	r3, [pc, #156]	; (8001f0c <HAL_FLASHEx_OBProgram+0xf4>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	761a      	strb	r2, [r3, #24]
      return status;
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
 8001e76:	e045      	b.n	8001f04 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00e      	beq.n	8001ea2 <HAL_FLASHEx_OBProgram+0x8a>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7c1b      	ldrb	r3, [r3, #16]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f000 f9bb 	bl	8002204 <FLASH_OB_RDP_LevelConfig>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d004      	beq.n	8001ea2 <HAL_FLASHEx_OBProgram+0x8a>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8001e98:	4b1c      	ldr	r3, [pc, #112]	; (8001f0c <HAL_FLASHEx_OBProgram+0xf4>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	761a      	strb	r2, [r3, #24]
      return status;
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	e030      	b.n	8001f04 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* USER configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00e      	beq.n	8001ecc <HAL_FLASHEx_OBProgram+0xb4>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	7c5b      	ldrb	r3, [r3, #17]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 f9f6 	bl	80022a4 <FLASH_OB_UserConfig>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d004      	beq.n	8001ecc <HAL_FLASHEx_OBProgram+0xb4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8001ec2:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_FLASHEx_OBProgram+0xf4>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	761a      	strb	r2, [r3, #24]
      return status;
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	e01b      	b.n	8001f04 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* DATA configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d011      	beq.n	8001efc <HAL_FLASHEx_OBProgram+0xe4>
  {
    status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	695a      	ldr	r2, [r3, #20]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	7e1b      	ldrb	r3, [r3, #24]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	f000 fa16 	bl	8002314 <FLASH_OB_ProgramData>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d004      	beq.n	8001efc <HAL_FLASHEx_OBProgram+0xe4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_FLASHEx_OBProgram+0xf4>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	761a      	strb	r2, [r3, #24]
      return status;
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	e003      	b.n	8001f04 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001efc:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <HAL_FLASHEx_OBProgram+0xf4>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	761a      	strb	r2, [r3, #24]

  return status;
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000510 	.word	0x20000510

08001f10 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2207      	movs	r2, #7
 8001f1c:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPPage = FLASH_OB_GetWRP();
 8001f1e:	f000 fa2d 	bl	800237c <FLASH_OB_GetWRP>
 8001f22:	4602      	mov	r2, r0
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8001f28:	f000 fa32 	bl	8002390 <FLASH_OB_GetRDP>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	741a      	strb	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8001f34:	f000 fa48 	bl	80023c8 <FLASH_OB_GetUser>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	745a      	strb	r2, [r3, #17]
}
 8001f40:	bf00      	nop
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001f50:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <FLASH_MassErase+0x30>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001f56:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <FLASH_MassErase+0x34>)
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	4a08      	ldr	r2, [pc, #32]	; (8001f7c <FLASH_MassErase+0x34>)
 8001f5c:	f043 0304 	orr.w	r3, r3, #4
 8001f60:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001f62:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <FLASH_MassErase+0x34>)
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	4a05      	ldr	r2, [pc, #20]	; (8001f7c <FLASH_MassErase+0x34>)
 8001f68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f6c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr
 8001f78:	20000510 	.word	0x20000510
 8001f7c:	40022000 	.word	0x40022000

08001f80 <FLASH_OB_EnableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write protected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WriteProtectPage)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	75fb      	strb	r3, [r7, #23]
  uint16_t WRP0_Data = 0xFFFF;
 8001f8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f90:	82bb      	strh	r3, [r7, #20]
#if defined(FLASH_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFF;
 8001f92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f96:	827b      	strh	r3, [r7, #18]
#endif /* FLASH_WRP1_WRP1 */
#if defined(FLASH_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFF;
 8001f98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f9c:	823b      	strh	r3, [r7, #16]
#endif /* FLASH_WRP2_WRP2 */
#if defined(FLASH_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFF;
 8001f9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fa2:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));
    
  /* Get current write protected pages and the new pages to be protected ******/
  WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
 8001fa4:	f000 f9ea 	bl	800237c <FLASH_OB_GetWRP>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	43da      	mvns	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	607b      	str	r3, [r7, #4]
  
#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	82bb      	strh	r3, [r7, #20]
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	0a1b      	lsrs	r3, r3, #8
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	827b      	strh	r3, [r7, #18]
 
#if defined(OB_WRP_PAGES64TO95MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
#endif /* OB_WRP_PAGES64TO95MASK */
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	0c1b      	lsrs	r3, r3, #16
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	823b      	strh	r3, [r7, #16]
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES96TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
#elif defined(OB_WRP_PAGES48TO255MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO255MASK) >> 24U); 
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	0e1b      	lsrs	r3, r3, #24
 8001fd4:	81fb      	strh	r3, [r7, #14]
#elif defined(OB_WRP_PAGES48TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES96TO127MASK */
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001fd6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001fda:	f7ff fdd9 	bl	8001b90 <FLASH_WaitForLastOperation>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8001fe2:	7dfb      	ldrb	r3, [r7, #23]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d162      	bne.n	80020ae <FLASH_OB_EnableWRP+0x12e>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001fe8:	4b33      	ldr	r3, [pc, #204]	; (80020b8 <FLASH_OB_EnableWRP+0x138>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 8001fee:	f7ff fed1 	bl	8001d94 <HAL_FLASHEx_OBErase>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK)  
 8001ff6:	7dfb      	ldrb	r3, [r7, #23]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d158      	bne.n	80020ae <FLASH_OB_EnableWRP+0x12e>
    {
      /* Enable write protection */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001ffc:	4b2f      	ldr	r3, [pc, #188]	; (80020bc <FLASH_OB_EnableWRP+0x13c>)
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	4a2e      	ldr	r2, [pc, #184]	; (80020bc <FLASH_OB_EnableWRP+0x13c>)
 8002002:	f043 0310 	orr.w	r3, r3, #16
 8002006:	6113      	str	r3, [r2, #16]

#if defined(FLASH_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 8002008:	8abb      	ldrh	r3, [r7, #20]
 800200a:	2bff      	cmp	r3, #255	; 0xff
 800200c:	d00d      	beq.n	800202a <FLASH_OB_EnableWRP+0xaa>
      {
        OB->WRP0 &= WRP0_Data;
 800200e:	4b2c      	ldr	r3, [pc, #176]	; (80020c0 <FLASH_OB_EnableWRP+0x140>)
 8002010:	891b      	ldrh	r3, [r3, #8]
 8002012:	b29a      	uxth	r2, r3
 8002014:	492a      	ldr	r1, [pc, #168]	; (80020c0 <FLASH_OB_EnableWRP+0x140>)
 8002016:	8abb      	ldrh	r3, [r7, #20]
 8002018:	4013      	ands	r3, r2
 800201a:	b29b      	uxth	r3, r3
 800201c:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800201e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002022:	f7ff fdb5 	bl	8001b90 <FLASH_WaitForLastOperation>
 8002026:	4603      	mov	r3, r0
 8002028:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP0_WRP0 */

#if defined(FLASH_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 800202a:	7dfb      	ldrb	r3, [r7, #23]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d110      	bne.n	8002052 <FLASH_OB_EnableWRP+0xd2>
 8002030:	8a7b      	ldrh	r3, [r7, #18]
 8002032:	2bff      	cmp	r3, #255	; 0xff
 8002034:	d00d      	beq.n	8002052 <FLASH_OB_EnableWRP+0xd2>
      {
        OB->WRP1 &= WRP1_Data;
 8002036:	4b22      	ldr	r3, [pc, #136]	; (80020c0 <FLASH_OB_EnableWRP+0x140>)
 8002038:	895b      	ldrh	r3, [r3, #10]
 800203a:	b29a      	uxth	r2, r3
 800203c:	4920      	ldr	r1, [pc, #128]	; (80020c0 <FLASH_OB_EnableWRP+0x140>)
 800203e:	8a7b      	ldrh	r3, [r7, #18]
 8002040:	4013      	ands	r3, r2
 8002042:	b29b      	uxth	r3, r3
 8002044:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002046:	f24c 3050 	movw	r0, #50000	; 0xc350
 800204a:	f7ff fda1 	bl	8001b90 <FLASH_WaitForLastOperation>
 800204e:	4603      	mov	r3, r0
 8002050:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP1_WRP1 */

#if defined(FLASH_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8002052:	7dfb      	ldrb	r3, [r7, #23]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d110      	bne.n	800207a <FLASH_OB_EnableWRP+0xfa>
 8002058:	8a3b      	ldrh	r3, [r7, #16]
 800205a:	2bff      	cmp	r3, #255	; 0xff
 800205c:	d00d      	beq.n	800207a <FLASH_OB_EnableWRP+0xfa>
      {
        OB->WRP2 &= WRP2_Data;
 800205e:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <FLASH_OB_EnableWRP+0x140>)
 8002060:	899b      	ldrh	r3, [r3, #12]
 8002062:	b29a      	uxth	r2, r3
 8002064:	4916      	ldr	r1, [pc, #88]	; (80020c0 <FLASH_OB_EnableWRP+0x140>)
 8002066:	8a3b      	ldrh	r3, [r7, #16]
 8002068:	4013      	ands	r3, r2
 800206a:	b29b      	uxth	r3, r3
 800206c:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800206e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002072:	f7ff fd8d 	bl	8001b90 <FLASH_WaitForLastOperation>
 8002076:	4603      	mov	r3, r0
 8002078:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP2_WRP2 */

#if defined(FLASH_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 800207a:	7dfb      	ldrb	r3, [r7, #23]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d110      	bne.n	80020a2 <FLASH_OB_EnableWRP+0x122>
 8002080:	89fb      	ldrh	r3, [r7, #14]
 8002082:	2bff      	cmp	r3, #255	; 0xff
 8002084:	d00d      	beq.n	80020a2 <FLASH_OB_EnableWRP+0x122>
      {
        OB->WRP3 &= WRP3_Data;
 8002086:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <FLASH_OB_EnableWRP+0x140>)
 8002088:	89db      	ldrh	r3, [r3, #14]
 800208a:	b29a      	uxth	r2, r3
 800208c:	490c      	ldr	r1, [pc, #48]	; (80020c0 <FLASH_OB_EnableWRP+0x140>)
 800208e:	89fb      	ldrh	r3, [r7, #14]
 8002090:	4013      	ands	r3, r2
 8002092:	b29b      	uxth	r3, r3
 8002094:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002096:	f24c 3050 	movw	r0, #50000	; 0xc350
 800209a:	f7ff fd79 	bl	8001b90 <FLASH_WaitForLastOperation>
 800209e:	4603      	mov	r3, r0
 80020a0:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <FLASH_OB_EnableWRP+0x13c>)
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	4a05      	ldr	r2, [pc, #20]	; (80020bc <FLASH_OB_EnableWRP+0x13c>)
 80020a8:	f023 0310 	bic.w	r3, r3, #16
 80020ac:	6113      	str	r3, [r2, #16]
    }
  }
  
  return status;
 80020ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20000510 	.word	0x20000510
 80020bc:	40022000 	.word	0x40022000
 80020c0:	1ffff800 	.word	0x1ffff800

080020c4 <FLASH_OB_DisableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write unprotected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WriteProtectPage)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020cc:	2300      	movs	r3, #0
 80020ce:	75fb      	strb	r3, [r7, #23]
  uint16_t WRP0_Data = 0xFFFF;
 80020d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020d4:	82bb      	strh	r3, [r7, #20]
#if defined(FLASH_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFF;
 80020d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020da:	827b      	strh	r3, [r7, #18]
#endif /* FLASH_WRP1_WRP1 */
#if defined(FLASH_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFF;
 80020dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020e0:	823b      	strh	r3, [r7, #16]
#endif /* FLASH_WRP2_WRP2 */
#if defined(FLASH_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFF;
 80020e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020e6:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));

  /* Get current write protected pages and the new pages to be unprotected ******/
  WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
 80020e8:	f000 f948 	bl	800237c <FLASH_OB_GetWRP>
 80020ec:	4602      	mov	r2, r0
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	607b      	str	r3, [r7, #4]

#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	82bb      	strh	r3, [r7, #20]
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	0a1b      	lsrs	r3, r3, #8
 8002100:	b29b      	uxth	r3, r3
 8002102:	b2db      	uxtb	r3, r3
 8002104:	827b      	strh	r3, [r7, #18]
 
#if defined(OB_WRP_PAGES64TO95MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
#endif /* OB_WRP_PAGES64TO95MASK */
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	0c1b      	lsrs	r3, r3, #16
 800210a:	b29b      	uxth	r3, r3
 800210c:	b2db      	uxtb	r3, r3
 800210e:	823b      	strh	r3, [r7, #16]
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES96TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
#elif defined(OB_WRP_PAGES48TO255MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO255MASK) >> 24U); 
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	0e1b      	lsrs	r3, r3, #24
 8002114:	81fb      	strh	r3, [r7, #14]
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES96TO127MASK */

    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002116:	f24c 3050 	movw	r0, #50000	; 0xc350
 800211a:	f7ff fd39 	bl	8001b90 <FLASH_WaitForLastOperation>
 800211e:	4603      	mov	r3, r0
 8002120:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8002122:	7dfb      	ldrb	r3, [r7, #23]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d162      	bne.n	80021ee <FLASH_OB_DisableWRP+0x12a>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002128:	4b33      	ldr	r3, [pc, #204]	; (80021f8 <FLASH_OB_DisableWRP+0x134>)
 800212a:	2200      	movs	r2, #0
 800212c:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 800212e:	f7ff fe31 	bl	8001d94 <HAL_FLASHEx_OBErase>
 8002132:	4603      	mov	r3, r0
 8002134:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK)  
 8002136:	7dfb      	ldrb	r3, [r7, #23]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d158      	bne.n	80021ee <FLASH_OB_DisableWRP+0x12a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 800213c:	4b2f      	ldr	r3, [pc, #188]	; (80021fc <FLASH_OB_DisableWRP+0x138>)
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	4a2e      	ldr	r2, [pc, #184]	; (80021fc <FLASH_OB_DisableWRP+0x138>)
 8002142:	f043 0310 	orr.w	r3, r3, #16
 8002146:	6113      	str	r3, [r2, #16]

#if defined(FLASH_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 8002148:	8abb      	ldrh	r3, [r7, #20]
 800214a:	2bff      	cmp	r3, #255	; 0xff
 800214c:	d00d      	beq.n	800216a <FLASH_OB_DisableWRP+0xa6>
      {
        OB->WRP0 |= WRP0_Data;
 800214e:	4b2c      	ldr	r3, [pc, #176]	; (8002200 <FLASH_OB_DisableWRP+0x13c>)
 8002150:	891b      	ldrh	r3, [r3, #8]
 8002152:	b29a      	uxth	r2, r3
 8002154:	492a      	ldr	r1, [pc, #168]	; (8002200 <FLASH_OB_DisableWRP+0x13c>)
 8002156:	8abb      	ldrh	r3, [r7, #20]
 8002158:	4313      	orrs	r3, r2
 800215a:	b29b      	uxth	r3, r3
 800215c:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800215e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002162:	f7ff fd15 	bl	8001b90 <FLASH_WaitForLastOperation>
 8002166:	4603      	mov	r3, r0
 8002168:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP0_WRP0 */

#if defined(FLASH_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 800216a:	7dfb      	ldrb	r3, [r7, #23]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d110      	bne.n	8002192 <FLASH_OB_DisableWRP+0xce>
 8002170:	8a7b      	ldrh	r3, [r7, #18]
 8002172:	2bff      	cmp	r3, #255	; 0xff
 8002174:	d00d      	beq.n	8002192 <FLASH_OB_DisableWRP+0xce>
      {
        OB->WRP1 |= WRP1_Data;
 8002176:	4b22      	ldr	r3, [pc, #136]	; (8002200 <FLASH_OB_DisableWRP+0x13c>)
 8002178:	895b      	ldrh	r3, [r3, #10]
 800217a:	b29a      	uxth	r2, r3
 800217c:	4920      	ldr	r1, [pc, #128]	; (8002200 <FLASH_OB_DisableWRP+0x13c>)
 800217e:	8a7b      	ldrh	r3, [r7, #18]
 8002180:	4313      	orrs	r3, r2
 8002182:	b29b      	uxth	r3, r3
 8002184:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002186:	f24c 3050 	movw	r0, #50000	; 0xc350
 800218a:	f7ff fd01 	bl	8001b90 <FLASH_WaitForLastOperation>
 800218e:	4603      	mov	r3, r0
 8002190:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP1_WRP1 */

#if defined(FLASH_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8002192:	7dfb      	ldrb	r3, [r7, #23]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d110      	bne.n	80021ba <FLASH_OB_DisableWRP+0xf6>
 8002198:	8a3b      	ldrh	r3, [r7, #16]
 800219a:	2bff      	cmp	r3, #255	; 0xff
 800219c:	d00d      	beq.n	80021ba <FLASH_OB_DisableWRP+0xf6>
      {
        OB->WRP2 |= WRP2_Data;
 800219e:	4b18      	ldr	r3, [pc, #96]	; (8002200 <FLASH_OB_DisableWRP+0x13c>)
 80021a0:	899b      	ldrh	r3, [r3, #12]
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	4916      	ldr	r1, [pc, #88]	; (8002200 <FLASH_OB_DisableWRP+0x13c>)
 80021a6:	8a3b      	ldrh	r3, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021b2:	f7ff fced 	bl	8001b90 <FLASH_WaitForLastOperation>
 80021b6:	4603      	mov	r3, r0
 80021b8:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP2_WRP2 */

#if defined(FLASH_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 80021ba:	7dfb      	ldrb	r3, [r7, #23]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d110      	bne.n	80021e2 <FLASH_OB_DisableWRP+0x11e>
 80021c0:	89fb      	ldrh	r3, [r7, #14]
 80021c2:	2bff      	cmp	r3, #255	; 0xff
 80021c4:	d00d      	beq.n	80021e2 <FLASH_OB_DisableWRP+0x11e>
      {
        OB->WRP3 |= WRP3_Data;
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <FLASH_OB_DisableWRP+0x13c>)
 80021c8:	89db      	ldrh	r3, [r3, #14]
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	490c      	ldr	r1, [pc, #48]	; (8002200 <FLASH_OB_DisableWRP+0x13c>)
 80021ce:	89fb      	ldrh	r3, [r7, #14]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021d6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021da:	f7ff fcd9 	bl	8001b90 <FLASH_WaitForLastOperation>
 80021de:	4603      	mov	r3, r0
 80021e0:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <FLASH_OB_DisableWRP+0x138>)
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	4a05      	ldr	r2, [pc, #20]	; (80021fc <FLASH_OB_DisableWRP+0x138>)
 80021e8:	f023 0310 	bic.w	r3, r3, #16
 80021ec:	6113      	str	r3, [r2, #16]
    }
  }
  return status;
 80021ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000510 	.word	0x20000510
 80021fc:	40022000 	.word	0x40022000
 8002200:	1ffff800 	.word	0x1ffff800

08002204 <FLASH_OB_RDP_LevelConfig>:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800220e:	2300      	movs	r3, #0
 8002210:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(ReadProtectLevel));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002212:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002216:	f7ff fcbb 	bl	8001b90 <FLASH_WaitForLastOperation>
 800221a:	4603      	mov	r3, r0
 800221c:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d133      	bne.n	800228c <FLASH_OB_RDP_LevelConfig+0x88>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002224:	4b1c      	ldr	r3, [pc, #112]	; (8002298 <FLASH_OB_RDP_LevelConfig+0x94>)
 8002226:	2200      	movs	r2, #0
 8002228:	61da      	str	r2, [r3, #28]
    
    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 800222a:	4b1c      	ldr	r3, [pc, #112]	; (800229c <FLASH_OB_RDP_LevelConfig+0x98>)
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	4a1b      	ldr	r2, [pc, #108]	; (800229c <FLASH_OB_RDP_LevelConfig+0x98>)
 8002230:	f043 0320 	orr.w	r3, r3, #32
 8002234:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002236:	4b19      	ldr	r3, [pc, #100]	; (800229c <FLASH_OB_RDP_LevelConfig+0x98>)
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	4a18      	ldr	r2, [pc, #96]	; (800229c <FLASH_OB_RDP_LevelConfig+0x98>)
 800223c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002240:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002242:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002246:	f7ff fca3 	bl	8001b90 <FLASH_WaitForLastOperation>
 800224a:	4603      	mov	r3, r0
 800224c:	73fb      	strb	r3, [r7, #15]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 800224e:	4b13      	ldr	r3, [pc, #76]	; (800229c <FLASH_OB_RDP_LevelConfig+0x98>)
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	4a12      	ldr	r2, [pc, #72]	; (800229c <FLASH_OB_RDP_LevelConfig+0x98>)
 8002254:	f023 0320 	bic.w	r3, r3, #32
 8002258:	6113      	str	r3, [r2, #16]

    if(status == HAL_OK)
 800225a:	7bfb      	ldrb	r3, [r7, #15]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d115      	bne.n	800228c <FLASH_OB_RDP_LevelConfig+0x88>
    {
      /* Enable the Option Bytes Programming operation */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002260:	4b0e      	ldr	r3, [pc, #56]	; (800229c <FLASH_OB_RDP_LevelConfig+0x98>)
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	4a0d      	ldr	r2, [pc, #52]	; (800229c <FLASH_OB_RDP_LevelConfig+0x98>)
 8002266:	f043 0310 	orr.w	r3, r3, #16
 800226a:	6113      	str	r3, [r2, #16]
      
      WRITE_REG(OB->RDP, ReadProtectLevel);
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <FLASH_OB_RDP_LevelConfig+0x9c>)
 800226e:	79fa      	ldrb	r2, [r7, #7]
 8002270:	b292      	uxth	r2, r2
 8002272:	801a      	strh	r2, [r3, #0]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
 8002274:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002278:	f7ff fc8a 	bl	8001b90 <FLASH_WaitForLastOperation>
 800227c:	4603      	mov	r3, r0
 800227e:	73fb      	strb	r3, [r7, #15]
      
      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <FLASH_OB_RDP_LevelConfig+0x98>)
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	4a05      	ldr	r2, [pc, #20]	; (800229c <FLASH_OB_RDP_LevelConfig+0x98>)
 8002286:	f023 0310 	bic.w	r3, r3, #16
 800228a:	6113      	str	r3, [r2, #16]
    }
  }
  
  return status;
 800228c:	7bfb      	ldrb	r3, [r7, #15]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000510 	.word	0x20000510
 800229c:	40022000 	.word	0x40022000
 80022a0:	1ffff800 	.word	0x1ffff800

080022a4 <FLASH_OB_UserConfig>:
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And BFBF2(Bit5) for STM32F101xG and STM32F103xG . 
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t UserConfig)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	73fb      	strb	r3, [r7, #15]
#if defined(FLASH_BANK2_END)
  assert_param(IS_OB_BOOT1((UserConfig&OB_BOOT1_SET)));
#endif /* FLASH_BANK2_END */

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022b2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022b6:	f7ff fc6b 	bl	8001b90 <FLASH_WaitForLastOperation>
 80022ba:	4603      	mov	r3, r0
 80022bc:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 80022be:	7bfb      	ldrb	r3, [r7, #15]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d11b      	bne.n	80022fc <FLASH_OB_UserConfig+0x58>
  {     
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80022c4:	4b10      	ldr	r3, [pc, #64]	; (8002308 <FLASH_OB_UserConfig+0x64>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	61da      	str	r2, [r3, #28]

    /* Enable the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 80022ca:	4b10      	ldr	r3, [pc, #64]	; (800230c <FLASH_OB_UserConfig+0x68>)
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	4a0f      	ldr	r2, [pc, #60]	; (800230c <FLASH_OB_UserConfig+0x68>)
 80022d0:	f043 0310 	orr.w	r3, r3, #16
 80022d4:	6113      	str	r3, [r2, #16]
 
#if defined(FLASH_BANK2_END)
    OB->USER = (UserConfig | 0xF0U);
#else
    OB->USER = (UserConfig | 0x88U);
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	f063 0377 	orn	r3, r3, #119	; 0x77
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <FLASH_OB_UserConfig+0x6c>)
 80022e0:	b292      	uxth	r2, r2
 80022e2:	805a      	strh	r2, [r3, #2]
#endif /* FLASH_BANK2_END */

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022e8:	f7ff fc52 	bl	8001b90 <FLASH_WaitForLastOperation>
 80022ec:	4603      	mov	r3, r0
 80022ee:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <FLASH_OB_UserConfig+0x68>)
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	4a05      	ldr	r2, [pc, #20]	; (800230c <FLASH_OB_UserConfig+0x68>)
 80022f6:	f023 0310 	bic.w	r3, r3, #16
 80022fa:	6113      	str	r3, [r2, #16]
  }
  
  return status; 
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000510 	.word	0x20000510
 800230c:	40022000 	.word	0x40022000
 8002310:	1ffff800 	.word	0x1ffff800

08002314 <FLASH_OB_ProgramData>:
  *         This parameter can be 0x1FFFF804 or 0x1FFFF806. 
  * @param  Data specifies the data to be programmed.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_ProgramData(uint32_t Address, uint8_t Data)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002324:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002328:	f7ff fc32 	bl	8001b90 <FLASH_WaitForLastOperation>
 800232c:	4603      	mov	r3, r0
 800232e:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 8002330:	7bfb      	ldrb	r3, [r7, #15]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d118      	bne.n	8002368 <FLASH_OB_ProgramData+0x54>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002336:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <FLASH_OB_ProgramData+0x60>)
 8002338:	2200      	movs	r2, #0
 800233a:	61da      	str	r2, [r3, #28]

    /* Enables the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 800233c:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <FLASH_OB_ProgramData+0x64>)
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	4a0d      	ldr	r2, [pc, #52]	; (8002378 <FLASH_OB_ProgramData+0x64>)
 8002342:	f043 0310 	orr.w	r3, r3, #16
 8002346:	6113      	str	r3, [r2, #16]
    *(__IO uint16_t*)Address = Data;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	78fa      	ldrb	r2, [r7, #3]
 800234c:	b292      	uxth	r2, r2
 800234e:	801a      	strh	r2, [r3, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002350:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002354:	f7ff fc1c 	bl	8001b90 <FLASH_WaitForLastOperation>
 8002358:	4603      	mov	r3, r0
 800235a:	73fb      	strb	r3, [r7, #15]
    
    /* If the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <FLASH_OB_ProgramData+0x64>)
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	4a05      	ldr	r2, [pc, #20]	; (8002378 <FLASH_OB_ProgramData+0x64>)
 8002362:	f023 0310 	bic.w	r3, r3, #16
 8002366:	6113      	str	r3, [r2, #16]
  }
  /* Return the Option Byte Data Program Status */
  return status;
 8002368:	7bfb      	ldrb	r3, [r7, #15]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000510 	.word	0x20000510
 8002378:	40022000 	.word	0x40022000

0800237c <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval The FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (uint32_t)(READ_REG(FLASH->WRPR));
 8002380:	4b02      	ldr	r3, [pc, #8]	; (800238c <FLASH_OB_GetWRP+0x10>)
 8002382:	6a1b      	ldr	r3, [r3, #32]
}
 8002384:	4618      	mov	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr
 800238c:	40022000 	.word	0x40022000

08002390 <FLASH_OB_GetRDP>:
  *         This parameter can be one of the following values:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
  uint32_t readstatus = OB_RDP_LEVEL_0;
 8002396:	23a5      	movs	r3, #165	; 0xa5
 8002398:	607b      	str	r3, [r7, #4]
  uint32_t tmp_reg = 0U;
 800239a:	2300      	movs	r3, #0
 800239c:	603b      	str	r3, [r7, #0]
  
  /* Read RDP level bits */
  tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
 800239e:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <FLASH_OB_GetRDP+0x34>)
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	603b      	str	r3, [r7, #0]

  if (tmp_reg == FLASH_OBR_RDPRT)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d102      	bne.n	80023b4 <FLASH_OB_GetRDP+0x24>
  {
    readstatus = OB_RDP_LEVEL_1;
 80023ae:	2300      	movs	r3, #0
 80023b0:	607b      	str	r3, [r7, #4]
 80023b2:	e001      	b.n	80023b8 <FLASH_OB_GetRDP+0x28>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_0;
 80023b4:	23a5      	movs	r3, #165	; 0xa5
 80023b6:	607b      	str	r3, [r7, #4]
  }

  return readstatus;
 80023b8:	687b      	ldr	r3, [r7, #4]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr
 80023c4:	40022000 	.word	0x40022000

080023c8 <FLASH_OB_GetUser>:
  * @retval The FLASH User Option Bytes values: FLASH_OBR_IWDG_SW(Bit2), 
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And FLASH_OBR_BFB2(Bit5) for STM32F101xG and STM32F103xG . 
  */
static uint8_t FLASH_OB_GetUser(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
 80023cc:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <FLASH_OB_GetUser+0x1c>)
 80023ce:	69db      	ldr	r3, [r3, #28]
 80023d0:	089b      	lsrs	r3, r3, #2
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	b2db      	uxtb	r3, r3
}
 80023da:	4618      	mov	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40022000 	.word	0x40022000

080023e8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <FLASH_PageErase+0x38>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80023f6:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <FLASH_PageErase+0x3c>)
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <FLASH_PageErase+0x3c>)
 80023fc:	f043 0302 	orr.w	r3, r3, #2
 8002400:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002402:	4a08      	ldr	r2, [pc, #32]	; (8002424 <FLASH_PageErase+0x3c>)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <FLASH_PageErase+0x3c>)
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	4a05      	ldr	r2, [pc, #20]	; (8002424 <FLASH_PageErase+0x3c>)
 800240e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002412:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	20000510 	.word	0x20000510
 8002424:	40022000 	.word	0x40022000

08002428 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002428:	b480      	push	{r7}
 800242a:	b08b      	sub	sp, #44	; 0x2c
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002432:	2300      	movs	r3, #0
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002436:	2300      	movs	r3, #0
 8002438:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800243a:	e133      	b.n	80026a4 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800243c:	2201      	movs	r2, #1
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	69fa      	ldr	r2, [r7, #28]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	429a      	cmp	r2, r3
 8002456:	f040 8122 	bne.w	800269e <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b12      	cmp	r3, #18
 8002460:	d034      	beq.n	80024cc <HAL_GPIO_Init+0xa4>
 8002462:	2b12      	cmp	r3, #18
 8002464:	d80d      	bhi.n	8002482 <HAL_GPIO_Init+0x5a>
 8002466:	2b02      	cmp	r3, #2
 8002468:	d02b      	beq.n	80024c2 <HAL_GPIO_Init+0x9a>
 800246a:	2b02      	cmp	r3, #2
 800246c:	d804      	bhi.n	8002478 <HAL_GPIO_Init+0x50>
 800246e:	2b00      	cmp	r3, #0
 8002470:	d031      	beq.n	80024d6 <HAL_GPIO_Init+0xae>
 8002472:	2b01      	cmp	r3, #1
 8002474:	d01c      	beq.n	80024b0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002476:	e048      	b.n	800250a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002478:	2b03      	cmp	r3, #3
 800247a:	d043      	beq.n	8002504 <HAL_GPIO_Init+0xdc>
 800247c:	2b11      	cmp	r3, #17
 800247e:	d01b      	beq.n	80024b8 <HAL_GPIO_Init+0x90>
          break;
 8002480:	e043      	b.n	800250a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002482:	4a8f      	ldr	r2, [pc, #572]	; (80026c0 <HAL_GPIO_Init+0x298>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d026      	beq.n	80024d6 <HAL_GPIO_Init+0xae>
 8002488:	4a8d      	ldr	r2, [pc, #564]	; (80026c0 <HAL_GPIO_Init+0x298>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d806      	bhi.n	800249c <HAL_GPIO_Init+0x74>
 800248e:	4a8d      	ldr	r2, [pc, #564]	; (80026c4 <HAL_GPIO_Init+0x29c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d020      	beq.n	80024d6 <HAL_GPIO_Init+0xae>
 8002494:	4a8c      	ldr	r2, [pc, #560]	; (80026c8 <HAL_GPIO_Init+0x2a0>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d01d      	beq.n	80024d6 <HAL_GPIO_Init+0xae>
          break;
 800249a:	e036      	b.n	800250a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800249c:	4a8b      	ldr	r2, [pc, #556]	; (80026cc <HAL_GPIO_Init+0x2a4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d019      	beq.n	80024d6 <HAL_GPIO_Init+0xae>
 80024a2:	4a8b      	ldr	r2, [pc, #556]	; (80026d0 <HAL_GPIO_Init+0x2a8>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d016      	beq.n	80024d6 <HAL_GPIO_Init+0xae>
 80024a8:	4a8a      	ldr	r2, [pc, #552]	; (80026d4 <HAL_GPIO_Init+0x2ac>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d013      	beq.n	80024d6 <HAL_GPIO_Init+0xae>
          break;
 80024ae:	e02c      	b.n	800250a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	623b      	str	r3, [r7, #32]
          break;
 80024b6:	e028      	b.n	800250a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	3304      	adds	r3, #4
 80024be:	623b      	str	r3, [r7, #32]
          break;
 80024c0:	e023      	b.n	800250a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	3308      	adds	r3, #8
 80024c8:	623b      	str	r3, [r7, #32]
          break;
 80024ca:	e01e      	b.n	800250a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	330c      	adds	r3, #12
 80024d2:	623b      	str	r3, [r7, #32]
          break;
 80024d4:	e019      	b.n	800250a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d102      	bne.n	80024e4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024de:	2304      	movs	r3, #4
 80024e0:	623b      	str	r3, [r7, #32]
          break;
 80024e2:	e012      	b.n	800250a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d105      	bne.n	80024f8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024ec:	2308      	movs	r3, #8
 80024ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	69fa      	ldr	r2, [r7, #28]
 80024f4:	611a      	str	r2, [r3, #16]
          break;
 80024f6:	e008      	b.n	800250a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024f8:	2308      	movs	r3, #8
 80024fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69fa      	ldr	r2, [r7, #28]
 8002500:	615a      	str	r2, [r3, #20]
          break;
 8002502:	e002      	b.n	800250a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002504:	2300      	movs	r3, #0
 8002506:	623b      	str	r3, [r7, #32]
          break;
 8002508:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	2bff      	cmp	r3, #255	; 0xff
 800250e:	d801      	bhi.n	8002514 <HAL_GPIO_Init+0xec>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	e001      	b.n	8002518 <HAL_GPIO_Init+0xf0>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3304      	adds	r3, #4
 8002518:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	2bff      	cmp	r3, #255	; 0xff
 800251e:	d802      	bhi.n	8002526 <HAL_GPIO_Init+0xfe>
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	e002      	b.n	800252c <HAL_GPIO_Init+0x104>
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	3b08      	subs	r3, #8
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	210f      	movs	r1, #15
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	fa01 f303 	lsl.w	r3, r1, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	401a      	ands	r2, r3
 800253e:	6a39      	ldr	r1, [r7, #32]
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	fa01 f303 	lsl.w	r3, r1, r3
 8002546:	431a      	orrs	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 80a2 	beq.w	800269e <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800255a:	4b5f      	ldr	r3, [pc, #380]	; (80026d8 <HAL_GPIO_Init+0x2b0>)
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	4a5e      	ldr	r2, [pc, #376]	; (80026d8 <HAL_GPIO_Init+0x2b0>)
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	6193      	str	r3, [r2, #24]
 8002566:	4b5c      	ldr	r3, [pc, #368]	; (80026d8 <HAL_GPIO_Init+0x2b0>)
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	60bb      	str	r3, [r7, #8]
 8002570:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002572:	4a5a      	ldr	r2, [pc, #360]	; (80026dc <HAL_GPIO_Init+0x2b4>)
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	089b      	lsrs	r3, r3, #2
 8002578:	3302      	adds	r3, #2
 800257a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800257e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	220f      	movs	r2, #15
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4013      	ands	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a51      	ldr	r2, [pc, #324]	; (80026e0 <HAL_GPIO_Init+0x2b8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d01f      	beq.n	80025de <HAL_GPIO_Init+0x1b6>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a50      	ldr	r2, [pc, #320]	; (80026e4 <HAL_GPIO_Init+0x2bc>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d019      	beq.n	80025da <HAL_GPIO_Init+0x1b2>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a4f      	ldr	r2, [pc, #316]	; (80026e8 <HAL_GPIO_Init+0x2c0>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d013      	beq.n	80025d6 <HAL_GPIO_Init+0x1ae>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a4e      	ldr	r2, [pc, #312]	; (80026ec <HAL_GPIO_Init+0x2c4>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d00d      	beq.n	80025d2 <HAL_GPIO_Init+0x1aa>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a4d      	ldr	r2, [pc, #308]	; (80026f0 <HAL_GPIO_Init+0x2c8>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d007      	beq.n	80025ce <HAL_GPIO_Init+0x1a6>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a4c      	ldr	r2, [pc, #304]	; (80026f4 <HAL_GPIO_Init+0x2cc>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d101      	bne.n	80025ca <HAL_GPIO_Init+0x1a2>
 80025c6:	2305      	movs	r3, #5
 80025c8:	e00a      	b.n	80025e0 <HAL_GPIO_Init+0x1b8>
 80025ca:	2306      	movs	r3, #6
 80025cc:	e008      	b.n	80025e0 <HAL_GPIO_Init+0x1b8>
 80025ce:	2304      	movs	r3, #4
 80025d0:	e006      	b.n	80025e0 <HAL_GPIO_Init+0x1b8>
 80025d2:	2303      	movs	r3, #3
 80025d4:	e004      	b.n	80025e0 <HAL_GPIO_Init+0x1b8>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e002      	b.n	80025e0 <HAL_GPIO_Init+0x1b8>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <HAL_GPIO_Init+0x1b8>
 80025de:	2300      	movs	r3, #0
 80025e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e2:	f002 0203 	and.w	r2, r2, #3
 80025e6:	0092      	lsls	r2, r2, #2
 80025e8:	4093      	lsls	r3, r2
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025f0:	493a      	ldr	r1, [pc, #232]	; (80026dc <HAL_GPIO_Init+0x2b4>)
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	089b      	lsrs	r3, r3, #2
 80025f6:	3302      	adds	r3, #2
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d006      	beq.n	8002618 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800260a:	4b3b      	ldr	r3, [pc, #236]	; (80026f8 <HAL_GPIO_Init+0x2d0>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	493a      	ldr	r1, [pc, #232]	; (80026f8 <HAL_GPIO_Init+0x2d0>)
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]
 8002616:	e006      	b.n	8002626 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002618:	4b37      	ldr	r3, [pc, #220]	; (80026f8 <HAL_GPIO_Init+0x2d0>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	43db      	mvns	r3, r3
 8002620:	4935      	ldr	r1, [pc, #212]	; (80026f8 <HAL_GPIO_Init+0x2d0>)
 8002622:	4013      	ands	r3, r2
 8002624:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d006      	beq.n	8002640 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002632:	4b31      	ldr	r3, [pc, #196]	; (80026f8 <HAL_GPIO_Init+0x2d0>)
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	4930      	ldr	r1, [pc, #192]	; (80026f8 <HAL_GPIO_Init+0x2d0>)
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	604b      	str	r3, [r1, #4]
 800263e:	e006      	b.n	800264e <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002640:	4b2d      	ldr	r3, [pc, #180]	; (80026f8 <HAL_GPIO_Init+0x2d0>)
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	43db      	mvns	r3, r3
 8002648:	492b      	ldr	r1, [pc, #172]	; (80026f8 <HAL_GPIO_Init+0x2d0>)
 800264a:	4013      	ands	r3, r2
 800264c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d006      	beq.n	8002668 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800265a:	4b27      	ldr	r3, [pc, #156]	; (80026f8 <HAL_GPIO_Init+0x2d0>)
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	4926      	ldr	r1, [pc, #152]	; (80026f8 <HAL_GPIO_Init+0x2d0>)
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	4313      	orrs	r3, r2
 8002664:	608b      	str	r3, [r1, #8]
 8002666:	e006      	b.n	8002676 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002668:	4b23      	ldr	r3, [pc, #140]	; (80026f8 <HAL_GPIO_Init+0x2d0>)
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	43db      	mvns	r3, r3
 8002670:	4921      	ldr	r1, [pc, #132]	; (80026f8 <HAL_GPIO_Init+0x2d0>)
 8002672:	4013      	ands	r3, r2
 8002674:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d006      	beq.n	8002690 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002682:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <HAL_GPIO_Init+0x2d0>)
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	491c      	ldr	r1, [pc, #112]	; (80026f8 <HAL_GPIO_Init+0x2d0>)
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	60cb      	str	r3, [r1, #12]
 800268e:	e006      	b.n	800269e <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002690:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <HAL_GPIO_Init+0x2d0>)
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	43db      	mvns	r3, r3
 8002698:	4917      	ldr	r1, [pc, #92]	; (80026f8 <HAL_GPIO_Init+0x2d0>)
 800269a:	4013      	ands	r3, r2
 800269c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	3301      	adds	r3, #1
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	fa22 f303 	lsr.w	r3, r2, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f47f aec4 	bne.w	800243c <HAL_GPIO_Init+0x14>
  }
}
 80026b4:	bf00      	nop
 80026b6:	372c      	adds	r7, #44	; 0x2c
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	10210000 	.word	0x10210000
 80026c4:	10110000 	.word	0x10110000
 80026c8:	10120000 	.word	0x10120000
 80026cc:	10310000 	.word	0x10310000
 80026d0:	10320000 	.word	0x10320000
 80026d4:	10220000 	.word	0x10220000
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40010000 	.word	0x40010000
 80026e0:	40010800 	.word	0x40010800
 80026e4:	40010c00 	.word	0x40010c00
 80026e8:	40011000 	.word	0x40011000
 80026ec:	40011400 	.word	0x40011400
 80026f0:	40011800 	.word	0x40011800
 80026f4:	40011c00 	.word	0x40011c00
 80026f8:	40010400 	.word	0x40010400

080026fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	887b      	ldrh	r3, [r7, #2]
 800270e:	4013      	ands	r3, r2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002714:	2301      	movs	r3, #1
 8002716:	73fb      	strb	r3, [r7, #15]
 8002718:	e001      	b.n	800271e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800271a:	2300      	movs	r3, #0
 800271c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800271e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr

0800272a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	460b      	mov	r3, r1
 8002734:	807b      	strh	r3, [r7, #2]
 8002736:	4613      	mov	r3, r2
 8002738:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800273a:	787b      	ldrb	r3, [r7, #1]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002740:	887a      	ldrh	r2, [r7, #2]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002746:	e003      	b.n	8002750 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002748:	887b      	ldrh	r3, [r7, #2]
 800274a:	041a      	lsls	r2, r3, #16
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	611a      	str	r2, [r3, #16]
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr

0800275a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800275a:	b480      	push	{r7}
 800275c:	b085      	sub	sp, #20
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	460b      	mov	r3, r1
 8002764:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800276c:	887a      	ldrh	r2, [r7, #2]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	4013      	ands	r3, r2
 8002772:	041a      	lsls	r2, r3, #16
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	43d9      	mvns	r1, r3
 8002778:	887b      	ldrh	r3, [r7, #2]
 800277a:	400b      	ands	r3, r1
 800277c:	431a      	orrs	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	611a      	str	r2, [r3, #16]
}
 8002782:	bf00      	nop
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e26c      	b.n	8002c78 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 8087 	beq.w	80028ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027ac:	4b92      	ldr	r3, [pc, #584]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 030c 	and.w	r3, r3, #12
 80027b4:	2b04      	cmp	r3, #4
 80027b6:	d00c      	beq.n	80027d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027b8:	4b8f      	ldr	r3, [pc, #572]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 030c 	and.w	r3, r3, #12
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d112      	bne.n	80027ea <HAL_RCC_OscConfig+0x5e>
 80027c4:	4b8c      	ldr	r3, [pc, #560]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d0:	d10b      	bne.n	80027ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d2:	4b89      	ldr	r3, [pc, #548]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d06c      	beq.n	80028b8 <HAL_RCC_OscConfig+0x12c>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d168      	bne.n	80028b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e246      	b.n	8002c78 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f2:	d106      	bne.n	8002802 <HAL_RCC_OscConfig+0x76>
 80027f4:	4b80      	ldr	r3, [pc, #512]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a7f      	ldr	r2, [pc, #508]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 80027fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	e02e      	b.n	8002860 <HAL_RCC_OscConfig+0xd4>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10c      	bne.n	8002824 <HAL_RCC_OscConfig+0x98>
 800280a:	4b7b      	ldr	r3, [pc, #492]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a7a      	ldr	r2, [pc, #488]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 8002810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	4b78      	ldr	r3, [pc, #480]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a77      	ldr	r2, [pc, #476]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 800281c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	e01d      	b.n	8002860 <HAL_RCC_OscConfig+0xd4>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800282c:	d10c      	bne.n	8002848 <HAL_RCC_OscConfig+0xbc>
 800282e:	4b72      	ldr	r3, [pc, #456]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a71      	ldr	r2, [pc, #452]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 8002834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	4b6f      	ldr	r3, [pc, #444]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a6e      	ldr	r2, [pc, #440]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 8002840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	e00b      	b.n	8002860 <HAL_RCC_OscConfig+0xd4>
 8002848:	4b6b      	ldr	r3, [pc, #428]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a6a      	ldr	r2, [pc, #424]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 800284e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	4b68      	ldr	r3, [pc, #416]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a67      	ldr	r2, [pc, #412]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 800285a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800285e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d013      	beq.n	8002890 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002868:	f7fe ff86 	bl	8001778 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002870:	f7fe ff82 	bl	8001778 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b64      	cmp	r3, #100	; 0x64
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e1fa      	b.n	8002c78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002882:	4b5d      	ldr	r3, [pc, #372]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0xe4>
 800288e:	e014      	b.n	80028ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7fe ff72 	bl	8001778 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002898:	f7fe ff6e 	bl	8001778 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b64      	cmp	r3, #100	; 0x64
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e1e6      	b.n	8002c78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028aa:	4b53      	ldr	r3, [pc, #332]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x10c>
 80028b6:	e000      	b.n	80028ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d063      	beq.n	800298e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028c6:	4b4c      	ldr	r3, [pc, #304]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00b      	beq.n	80028ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028d2:	4b49      	ldr	r3, [pc, #292]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f003 030c 	and.w	r3, r3, #12
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d11c      	bne.n	8002918 <HAL_RCC_OscConfig+0x18c>
 80028de:	4b46      	ldr	r3, [pc, #280]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d116      	bne.n	8002918 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ea:	4b43      	ldr	r3, [pc, #268]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d005      	beq.n	8002902 <HAL_RCC_OscConfig+0x176>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d001      	beq.n	8002902 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e1ba      	b.n	8002c78 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002902:	4b3d      	ldr	r3, [pc, #244]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	4939      	ldr	r1, [pc, #228]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 8002912:	4313      	orrs	r3, r2
 8002914:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002916:	e03a      	b.n	800298e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d020      	beq.n	8002962 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002920:	4b36      	ldr	r3, [pc, #216]	; (80029fc <HAL_RCC_OscConfig+0x270>)
 8002922:	2201      	movs	r2, #1
 8002924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002926:	f7fe ff27 	bl	8001778 <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800292e:	f7fe ff23 	bl	8001778 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e19b      	b.n	8002c78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002940:	4b2d      	ldr	r3, [pc, #180]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0f0      	beq.n	800292e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294c:	4b2a      	ldr	r3, [pc, #168]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	4927      	ldr	r1, [pc, #156]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 800295c:	4313      	orrs	r3, r2
 800295e:	600b      	str	r3, [r1, #0]
 8002960:	e015      	b.n	800298e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002962:	4b26      	ldr	r3, [pc, #152]	; (80029fc <HAL_RCC_OscConfig+0x270>)
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002968:	f7fe ff06 	bl	8001778 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002970:	f7fe ff02 	bl	8001778 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e17a      	b.n	8002c78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002982:	4b1d      	ldr	r3, [pc, #116]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f0      	bne.n	8002970 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d03a      	beq.n	8002a10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d019      	beq.n	80029d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029a2:	4b17      	ldr	r3, [pc, #92]	; (8002a00 <HAL_RCC_OscConfig+0x274>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a8:	f7fe fee6 	bl	8001778 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b0:	f7fe fee2 	bl	8001778 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e15a      	b.n	8002c78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c2:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <HAL_RCC_OscConfig+0x26c>)
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029ce:	2001      	movs	r0, #1
 80029d0:	f000 fada 	bl	8002f88 <RCC_Delay>
 80029d4:	e01c      	b.n	8002a10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029d6:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <HAL_RCC_OscConfig+0x274>)
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029dc:	f7fe fecc 	bl	8001778 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e2:	e00f      	b.n	8002a04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e4:	f7fe fec8 	bl	8001778 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d908      	bls.n	8002a04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e140      	b.n	8002c78 <HAL_RCC_OscConfig+0x4ec>
 80029f6:	bf00      	nop
 80029f8:	40021000 	.word	0x40021000
 80029fc:	42420000 	.word	0x42420000
 8002a00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a04:	4b9e      	ldr	r3, [pc, #632]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1e9      	bne.n	80029e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 80a6 	beq.w	8002b6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a22:	4b97      	ldr	r3, [pc, #604]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10d      	bne.n	8002a4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2e:	4b94      	ldr	r3, [pc, #592]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	4a93      	ldr	r2, [pc, #588]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a38:	61d3      	str	r3, [r2, #28]
 8002a3a:	4b91      	ldr	r3, [pc, #580]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a46:	2301      	movs	r3, #1
 8002a48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4a:	4b8e      	ldr	r3, [pc, #568]	; (8002c84 <HAL_RCC_OscConfig+0x4f8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d118      	bne.n	8002a88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a56:	4b8b      	ldr	r3, [pc, #556]	; (8002c84 <HAL_RCC_OscConfig+0x4f8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a8a      	ldr	r2, [pc, #552]	; (8002c84 <HAL_RCC_OscConfig+0x4f8>)
 8002a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a62:	f7fe fe89 	bl	8001778 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6a:	f7fe fe85 	bl	8001778 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b64      	cmp	r3, #100	; 0x64
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e0fd      	b.n	8002c78 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7c:	4b81      	ldr	r3, [pc, #516]	; (8002c84 <HAL_RCC_OscConfig+0x4f8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0f0      	beq.n	8002a6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d106      	bne.n	8002a9e <HAL_RCC_OscConfig+0x312>
 8002a90:	4b7b      	ldr	r3, [pc, #492]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	4a7a      	ldr	r2, [pc, #488]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6213      	str	r3, [r2, #32]
 8002a9c:	e02d      	b.n	8002afa <HAL_RCC_OscConfig+0x36e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x334>
 8002aa6:	4b76      	ldr	r3, [pc, #472]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	4a75      	ldr	r2, [pc, #468]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002aac:	f023 0301 	bic.w	r3, r3, #1
 8002ab0:	6213      	str	r3, [r2, #32]
 8002ab2:	4b73      	ldr	r3, [pc, #460]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	4a72      	ldr	r2, [pc, #456]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002ab8:	f023 0304 	bic.w	r3, r3, #4
 8002abc:	6213      	str	r3, [r2, #32]
 8002abe:	e01c      	b.n	8002afa <HAL_RCC_OscConfig+0x36e>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	2b05      	cmp	r3, #5
 8002ac6:	d10c      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x356>
 8002ac8:	4b6d      	ldr	r3, [pc, #436]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	4a6c      	ldr	r2, [pc, #432]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002ace:	f043 0304 	orr.w	r3, r3, #4
 8002ad2:	6213      	str	r3, [r2, #32]
 8002ad4:	4b6a      	ldr	r3, [pc, #424]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	4a69      	ldr	r2, [pc, #420]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002ada:	f043 0301 	orr.w	r3, r3, #1
 8002ade:	6213      	str	r3, [r2, #32]
 8002ae0:	e00b      	b.n	8002afa <HAL_RCC_OscConfig+0x36e>
 8002ae2:	4b67      	ldr	r3, [pc, #412]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	4a66      	ldr	r2, [pc, #408]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002ae8:	f023 0301 	bic.w	r3, r3, #1
 8002aec:	6213      	str	r3, [r2, #32]
 8002aee:	4b64      	ldr	r3, [pc, #400]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	4a63      	ldr	r2, [pc, #396]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002af4:	f023 0304 	bic.w	r3, r3, #4
 8002af8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d015      	beq.n	8002b2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b02:	f7fe fe39 	bl	8001778 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b08:	e00a      	b.n	8002b20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0a:	f7fe fe35 	bl	8001778 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e0ab      	b.n	8002c78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b20:	4b57      	ldr	r3, [pc, #348]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0ee      	beq.n	8002b0a <HAL_RCC_OscConfig+0x37e>
 8002b2c:	e014      	b.n	8002b58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2e:	f7fe fe23 	bl	8001778 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b34:	e00a      	b.n	8002b4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b36:	f7fe fe1f 	bl	8001778 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e095      	b.n	8002c78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b4c:	4b4c      	ldr	r3, [pc, #304]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1ee      	bne.n	8002b36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b58:	7dfb      	ldrb	r3, [r7, #23]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d105      	bne.n	8002b6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b5e:	4b48      	ldr	r3, [pc, #288]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	4a47      	ldr	r2, [pc, #284]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 8081 	beq.w	8002c76 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b74:	4b42      	ldr	r3, [pc, #264]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 030c 	and.w	r3, r3, #12
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d061      	beq.n	8002c44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d146      	bne.n	8002c16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b88:	4b3f      	ldr	r3, [pc, #252]	; (8002c88 <HAL_RCC_OscConfig+0x4fc>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8e:	f7fe fdf3 	bl	8001778 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b96:	f7fe fdef 	bl	8001778 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e067      	b.n	8002c78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba8:	4b35      	ldr	r3, [pc, #212]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1f0      	bne.n	8002b96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bbc:	d108      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bbe:	4b30      	ldr	r3, [pc, #192]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	492d      	ldr	r1, [pc, #180]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bd0:	4b2b      	ldr	r3, [pc, #172]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a19      	ldr	r1, [r3, #32]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	430b      	orrs	r3, r1
 8002be2:	4927      	ldr	r1, [pc, #156]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be8:	4b27      	ldr	r3, [pc, #156]	; (8002c88 <HAL_RCC_OscConfig+0x4fc>)
 8002bea:	2201      	movs	r2, #1
 8002bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bee:	f7fe fdc3 	bl	8001778 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf6:	f7fe fdbf 	bl	8001778 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e037      	b.n	8002c78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c08:	4b1d      	ldr	r3, [pc, #116]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d0f0      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x46a>
 8002c14:	e02f      	b.n	8002c76 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c16:	4b1c      	ldr	r3, [pc, #112]	; (8002c88 <HAL_RCC_OscConfig+0x4fc>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1c:	f7fe fdac 	bl	8001778 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c24:	f7fe fda8 	bl	8001778 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e020      	b.n	8002c78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c36:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f0      	bne.n	8002c24 <HAL_RCC_OscConfig+0x498>
 8002c42:	e018      	b.n	8002c76 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e013      	b.n	8002c78 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_RCC_OscConfig+0x4f4>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d106      	bne.n	8002c72 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d001      	beq.n	8002c76 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40007000 	.word	0x40007000
 8002c88:	42420060 	.word	0x42420060

08002c8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0d0      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ca0:	4b6a      	ldr	r3, [pc, #424]	; (8002e4c <HAL_RCC_ClockConfig+0x1c0>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d910      	bls.n	8002cd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cae:	4b67      	ldr	r3, [pc, #412]	; (8002e4c <HAL_RCC_ClockConfig+0x1c0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 0207 	bic.w	r2, r3, #7
 8002cb6:	4965      	ldr	r1, [pc, #404]	; (8002e4c <HAL_RCC_ClockConfig+0x1c0>)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cbe:	4b63      	ldr	r3, [pc, #396]	; (8002e4c <HAL_RCC_ClockConfig+0x1c0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d001      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e0b8      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d020      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ce8:	4b59      	ldr	r3, [pc, #356]	; (8002e50 <HAL_RCC_ClockConfig+0x1c4>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	4a58      	ldr	r2, [pc, #352]	; (8002e50 <HAL_RCC_ClockConfig+0x1c4>)
 8002cee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cf2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0308 	and.w	r3, r3, #8
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d00:	4b53      	ldr	r3, [pc, #332]	; (8002e50 <HAL_RCC_ClockConfig+0x1c4>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	4a52      	ldr	r2, [pc, #328]	; (8002e50 <HAL_RCC_ClockConfig+0x1c4>)
 8002d06:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d0c:	4b50      	ldr	r3, [pc, #320]	; (8002e50 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	494d      	ldr	r1, [pc, #308]	; (8002e50 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d040      	beq.n	8002dac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d107      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d32:	4b47      	ldr	r3, [pc, #284]	; (8002e50 <HAL_RCC_ClockConfig+0x1c4>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d115      	bne.n	8002d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e07f      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d107      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d4a:	4b41      	ldr	r3, [pc, #260]	; (8002e50 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d109      	bne.n	8002d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e073      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5a:	4b3d      	ldr	r3, [pc, #244]	; (8002e50 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e06b      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d6a:	4b39      	ldr	r3, [pc, #228]	; (8002e50 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f023 0203 	bic.w	r2, r3, #3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	4936      	ldr	r1, [pc, #216]	; (8002e50 <HAL_RCC_ClockConfig+0x1c4>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d7c:	f7fe fcfc 	bl	8001778 <HAL_GetTick>
 8002d80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d82:	e00a      	b.n	8002d9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d84:	f7fe fcf8 	bl	8001778 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e053      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9a:	4b2d      	ldr	r3, [pc, #180]	; (8002e50 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 020c 	and.w	r2, r3, #12
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d1eb      	bne.n	8002d84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dac:	4b27      	ldr	r3, [pc, #156]	; (8002e4c <HAL_RCC_ClockConfig+0x1c0>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d210      	bcs.n	8002ddc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dba:	4b24      	ldr	r3, [pc, #144]	; (8002e4c <HAL_RCC_ClockConfig+0x1c0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f023 0207 	bic.w	r2, r3, #7
 8002dc2:	4922      	ldr	r1, [pc, #136]	; (8002e4c <HAL_RCC_ClockConfig+0x1c0>)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dca:	4b20      	ldr	r3, [pc, #128]	; (8002e4c <HAL_RCC_ClockConfig+0x1c0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e032      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d008      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002de8:	4b19      	ldr	r3, [pc, #100]	; (8002e50 <HAL_RCC_ClockConfig+0x1c4>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	4916      	ldr	r1, [pc, #88]	; (8002e50 <HAL_RCC_ClockConfig+0x1c4>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d009      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e06:	4b12      	ldr	r3, [pc, #72]	; (8002e50 <HAL_RCC_ClockConfig+0x1c4>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	490e      	ldr	r1, [pc, #56]	; (8002e50 <HAL_RCC_ClockConfig+0x1c4>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e1a:	f000 f821 	bl	8002e60 <HAL_RCC_GetSysClockFreq>
 8002e1e:	4601      	mov	r1, r0
 8002e20:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <HAL_RCC_ClockConfig+0x1c4>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	091b      	lsrs	r3, r3, #4
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	4a0a      	ldr	r2, [pc, #40]	; (8002e54 <HAL_RCC_ClockConfig+0x1c8>)
 8002e2c:	5cd3      	ldrb	r3, [r2, r3]
 8002e2e:	fa21 f303 	lsr.w	r3, r1, r3
 8002e32:	4a09      	ldr	r2, [pc, #36]	; (8002e58 <HAL_RCC_ClockConfig+0x1cc>)
 8002e34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e36:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <HAL_RCC_ClockConfig+0x1d0>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fe fc5a 	bl	80016f4 <HAL_InitTick>

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40022000 	.word	0x40022000
 8002e50:	40021000 	.word	0x40021000
 8002e54:	08003b44 	.word	0x08003b44
 8002e58:	20000000 	.word	0x20000000
 8002e5c:	20000004 	.word	0x20000004

08002e60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e60:	b490      	push	{r4, r7}
 8002e62:	b08a      	sub	sp, #40	; 0x28
 8002e64:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e66:	4b2a      	ldr	r3, [pc, #168]	; (8002f10 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e68:	1d3c      	adds	r4, r7, #4
 8002e6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e70:	4b28      	ldr	r3, [pc, #160]	; (8002f14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61fb      	str	r3, [r7, #28]
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61bb      	str	r3, [r7, #24]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
 8002e82:	2300      	movs	r3, #0
 8002e84:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e8a:	4b23      	ldr	r3, [pc, #140]	; (8002f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f003 030c 	and.w	r3, r3, #12
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d002      	beq.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x40>
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d003      	beq.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x46>
 8002e9e:	e02d      	b.n	8002efc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ea0:	4b1e      	ldr	r3, [pc, #120]	; (8002f1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ea2:	623b      	str	r3, [r7, #32]
      break;
 8002ea4:	e02d      	b.n	8002f02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	0c9b      	lsrs	r3, r3, #18
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002eb8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d013      	beq.n	8002eec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ec4:	4b14      	ldr	r3, [pc, #80]	; (8002f18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	0c5b      	lsrs	r3, r3, #17
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ed8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	4a0f      	ldr	r2, [pc, #60]	; (8002f1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ede:	fb02 f203 	mul.w	r2, r2, r3
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eea:	e004      	b.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	4a0c      	ldr	r2, [pc, #48]	; (8002f20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ef0:	fb02 f303 	mul.w	r3, r2, r3
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	623b      	str	r3, [r7, #32]
      break;
 8002efa:	e002      	b.n	8002f02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002efc:	4b07      	ldr	r3, [pc, #28]	; (8002f1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002efe:	623b      	str	r3, [r7, #32]
      break;
 8002f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f02:	6a3b      	ldr	r3, [r7, #32]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3728      	adds	r7, #40	; 0x28
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bc90      	pop	{r4, r7}
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	08003b30 	.word	0x08003b30
 8002f14:	08003b40 	.word	0x08003b40
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	007a1200 	.word	0x007a1200
 8002f20:	003d0900 	.word	0x003d0900

08002f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f28:	4b02      	ldr	r3, [pc, #8]	; (8002f34 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr
 8002f34:	20000000 	.word	0x20000000

08002f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f3c:	f7ff fff2 	bl	8002f24 <HAL_RCC_GetHCLKFreq>
 8002f40:	4601      	mov	r1, r0
 8002f42:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	0a1b      	lsrs	r3, r3, #8
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	4a03      	ldr	r2, [pc, #12]	; (8002f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f4e:	5cd3      	ldrb	r3, [r2, r3]
 8002f50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	08003b54 	.word	0x08003b54

08002f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f64:	f7ff ffde 	bl	8002f24 <HAL_RCC_GetHCLKFreq>
 8002f68:	4601      	mov	r1, r0
 8002f6a:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	0adb      	lsrs	r3, r3, #11
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	4a03      	ldr	r2, [pc, #12]	; (8002f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f76:	5cd3      	ldrb	r3, [r2, r3]
 8002f78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40021000 	.word	0x40021000
 8002f84:	08003b54 	.word	0x08003b54

08002f88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f90:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <RCC_Delay+0x34>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a0a      	ldr	r2, [pc, #40]	; (8002fc0 <RCC_Delay+0x38>)
 8002f96:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9a:	0a5b      	lsrs	r3, r3, #9
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	fb02 f303 	mul.w	r3, r2, r3
 8002fa2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fa4:	bf00      	nop
  }
  while (Delay --);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	1e5a      	subs	r2, r3, #1
 8002faa:	60fa      	str	r2, [r7, #12]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1f9      	bne.n	8002fa4 <RCC_Delay+0x1c>
}
 8002fb0:	bf00      	nop
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	20000000 	.word	0x20000000
 8002fc0:	10624dd3 	.word	0x10624dd3

08002fc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e03f      	b.n	8003056 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7fd fe5a 	bl	8000ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2224      	movs	r2, #36	; 0x24
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003006:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f9a7 	bl	800335c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800301c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	695a      	ldr	r2, [r3, #20]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800302c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800303c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2220      	movs	r2, #32
 8003050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b08a      	sub	sp, #40	; 0x28
 8003062:	af02      	add	r7, sp, #8
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	603b      	str	r3, [r7, #0]
 800306a:	4613      	mov	r3, r2
 800306c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800306e:	2300      	movs	r3, #0
 8003070:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b20      	cmp	r3, #32
 800307c:	d17c      	bne.n	8003178 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d002      	beq.n	800308a <HAL_UART_Transmit+0x2c>
 8003084:	88fb      	ldrh	r3, [r7, #6]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e075      	b.n	800317a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_UART_Transmit+0x3e>
 8003098:	2302      	movs	r3, #2
 800309a:	e06e      	b.n	800317a <HAL_UART_Transmit+0x11c>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2221      	movs	r2, #33	; 0x21
 80030ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030b2:	f7fe fb61 	bl	8001778 <HAL_GetTick>
 80030b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	88fa      	ldrh	r2, [r7, #6]
 80030bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	88fa      	ldrh	r2, [r7, #6]
 80030c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030cc:	d108      	bne.n	80030e0 <HAL_UART_Transmit+0x82>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d104      	bne.n	80030e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	61bb      	str	r3, [r7, #24]
 80030de:	e003      	b.n	80030e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80030f0:	e02a      	b.n	8003148 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2200      	movs	r2, #0
 80030fa:	2180      	movs	r1, #128	; 0x80
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 f8e2 	bl	80032c6 <UART_WaitOnFlagUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e036      	b.n	800317a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10b      	bne.n	800312a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	461a      	mov	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003120:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	3302      	adds	r3, #2
 8003126:	61bb      	str	r3, [r7, #24]
 8003128:	e007      	b.n	800313a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	781a      	ldrb	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	3301      	adds	r3, #1
 8003138:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800313e:	b29b      	uxth	r3, r3
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800314c:	b29b      	uxth	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1cf      	bne.n	80030f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2200      	movs	r2, #0
 800315a:	2140      	movs	r1, #64	; 0x40
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 f8b2 	bl	80032c6 <UART_WaitOnFlagUntilTimeout>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e006      	b.n	800317a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2220      	movs	r2, #32
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	e000      	b.n	800317a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003178:	2302      	movs	r3, #2
  }
}
 800317a:	4618      	mov	r0, r3
 800317c:	3720      	adds	r7, #32
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b08a      	sub	sp, #40	; 0x28
 8003186:	af02      	add	r7, sp, #8
 8003188:	60f8      	str	r0, [r7, #12]
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	603b      	str	r3, [r7, #0]
 800318e:	4613      	mov	r3, r2
 8003190:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003192:	2300      	movs	r3, #0
 8003194:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b20      	cmp	r3, #32
 80031a0:	f040 808c 	bne.w	80032bc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <HAL_UART_Receive+0x2e>
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e084      	b.n	80032be <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_UART_Receive+0x40>
 80031be:	2302      	movs	r3, #2
 80031c0:	e07d      	b.n	80032be <HAL_UART_Receive+0x13c>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2222      	movs	r2, #34	; 0x22
 80031d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031de:	f7fe facb 	bl	8001778 <HAL_GetTick>
 80031e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	88fa      	ldrh	r2, [r7, #6]
 80031e8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	88fa      	ldrh	r2, [r7, #6]
 80031ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031f8:	d108      	bne.n	800320c <HAL_UART_Receive+0x8a>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d104      	bne.n	800320c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003202:	2300      	movs	r3, #0
 8003204:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	61bb      	str	r3, [r7, #24]
 800320a:	e003      	b.n	8003214 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003210:	2300      	movs	r3, #0
 8003212:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800321c:	e043      	b.n	80032a6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2200      	movs	r2, #0
 8003226:	2120      	movs	r1, #32
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 f84c 	bl	80032c6 <UART_WaitOnFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e042      	b.n	80032be <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10c      	bne.n	8003258 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	b29b      	uxth	r3, r3
 8003246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800324a:	b29a      	uxth	r2, r3
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	3302      	adds	r3, #2
 8003254:	61bb      	str	r3, [r7, #24]
 8003256:	e01f      	b.n	8003298 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003260:	d007      	beq.n	8003272 <HAL_UART_Receive+0xf0>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10a      	bne.n	8003280 <HAL_UART_Receive+0xfe>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d106      	bne.n	8003280 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	b2da      	uxtb	r2, r3
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	701a      	strb	r2, [r3, #0]
 800327e:	e008      	b.n	8003292 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	b2db      	uxtb	r3, r3
 8003288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800328c:	b2da      	uxtb	r2, r3
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	3301      	adds	r3, #1
 8003296:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800329c:	b29b      	uxth	r3, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1b6      	bne.n	800321e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	e000      	b.n	80032be <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80032bc:	2302      	movs	r3, #2
  }
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3720      	adds	r7, #32
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b084      	sub	sp, #16
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	603b      	str	r3, [r7, #0]
 80032d2:	4613      	mov	r3, r2
 80032d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032d6:	e02c      	b.n	8003332 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032de:	d028      	beq.n	8003332 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d007      	beq.n	80032f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80032e6:	f7fe fa47 	bl	8001778 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d21d      	bcs.n	8003332 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003304:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695a      	ldr	r2, [r3, #20]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0201 	bic.w	r2, r2, #1
 8003314:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2220      	movs	r2, #32
 800331a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2220      	movs	r2, #32
 8003322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e00f      	b.n	8003352 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	4013      	ands	r3, r2
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	429a      	cmp	r2, r3
 8003340:	bf0c      	ite	eq
 8003342:	2301      	moveq	r3, #1
 8003344:	2300      	movne	r3, #0
 8003346:	b2db      	uxtb	r3, r3
 8003348:	461a      	mov	r2, r3
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	429a      	cmp	r2, r3
 800334e:	d0c3      	beq.n	80032d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
	...

0800335c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003396:	f023 030c 	bic.w	r3, r3, #12
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6812      	ldr	r2, [r2, #0]
 800339e:	68b9      	ldr	r1, [r7, #8]
 80033a0:	430b      	orrs	r3, r1
 80033a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699a      	ldr	r2, [r3, #24]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a2c      	ldr	r2, [pc, #176]	; (8003470 <UART_SetConfig+0x114>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d103      	bne.n	80033cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80033c4:	f7ff fdcc 	bl	8002f60 <HAL_RCC_GetPCLK2Freq>
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	e002      	b.n	80033d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80033cc:	f7ff fdb4 	bl	8002f38 <HAL_RCC_GetPCLK1Freq>
 80033d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	4613      	mov	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	009a      	lsls	r2, r3, #2
 80033dc:	441a      	add	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e8:	4a22      	ldr	r2, [pc, #136]	; (8003474 <UART_SetConfig+0x118>)
 80033ea:	fba2 2303 	umull	r2, r3, r2, r3
 80033ee:	095b      	lsrs	r3, r3, #5
 80033f0:	0119      	lsls	r1, r3, #4
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	4613      	mov	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	009a      	lsls	r2, r3, #2
 80033fc:	441a      	add	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	fbb2 f2f3 	udiv	r2, r2, r3
 8003408:	4b1a      	ldr	r3, [pc, #104]	; (8003474 <UART_SetConfig+0x118>)
 800340a:	fba3 0302 	umull	r0, r3, r3, r2
 800340e:	095b      	lsrs	r3, r3, #5
 8003410:	2064      	movs	r0, #100	; 0x64
 8003412:	fb00 f303 	mul.w	r3, r0, r3
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	3332      	adds	r3, #50	; 0x32
 800341c:	4a15      	ldr	r2, [pc, #84]	; (8003474 <UART_SetConfig+0x118>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003428:	4419      	add	r1, r3
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	009a      	lsls	r2, r3, #2
 8003434:	441a      	add	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003440:	4b0c      	ldr	r3, [pc, #48]	; (8003474 <UART_SetConfig+0x118>)
 8003442:	fba3 0302 	umull	r0, r3, r3, r2
 8003446:	095b      	lsrs	r3, r3, #5
 8003448:	2064      	movs	r0, #100	; 0x64
 800344a:	fb00 f303 	mul.w	r3, r0, r3
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	3332      	adds	r3, #50	; 0x32
 8003454:	4a07      	ldr	r2, [pc, #28]	; (8003474 <UART_SetConfig+0x118>)
 8003456:	fba2 2303 	umull	r2, r3, r2, r3
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	f003 020f 	and.w	r2, r3, #15
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	440a      	add	r2, r1
 8003466:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003468:	bf00      	nop
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40013800 	.word	0x40013800
 8003474:	51eb851f 	.word	0x51eb851f

08003478 <__libc_init_array>:
 8003478:	b570      	push	{r4, r5, r6, lr}
 800347a:	2500      	movs	r5, #0
 800347c:	4e0c      	ldr	r6, [pc, #48]	; (80034b0 <__libc_init_array+0x38>)
 800347e:	4c0d      	ldr	r4, [pc, #52]	; (80034b4 <__libc_init_array+0x3c>)
 8003480:	1ba4      	subs	r4, r4, r6
 8003482:	10a4      	asrs	r4, r4, #2
 8003484:	42a5      	cmp	r5, r4
 8003486:	d109      	bne.n	800349c <__libc_init_array+0x24>
 8003488:	f000 f822 	bl	80034d0 <_init>
 800348c:	2500      	movs	r5, #0
 800348e:	4e0a      	ldr	r6, [pc, #40]	; (80034b8 <__libc_init_array+0x40>)
 8003490:	4c0a      	ldr	r4, [pc, #40]	; (80034bc <__libc_init_array+0x44>)
 8003492:	1ba4      	subs	r4, r4, r6
 8003494:	10a4      	asrs	r4, r4, #2
 8003496:	42a5      	cmp	r5, r4
 8003498:	d105      	bne.n	80034a6 <__libc_init_array+0x2e>
 800349a:	bd70      	pop	{r4, r5, r6, pc}
 800349c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034a0:	4798      	blx	r3
 80034a2:	3501      	adds	r5, #1
 80034a4:	e7ee      	b.n	8003484 <__libc_init_array+0xc>
 80034a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034aa:	4798      	blx	r3
 80034ac:	3501      	adds	r5, #1
 80034ae:	e7f2      	b.n	8003496 <__libc_init_array+0x1e>
 80034b0:	08003b5c 	.word	0x08003b5c
 80034b4:	08003b5c 	.word	0x08003b5c
 80034b8:	08003b5c 	.word	0x08003b5c
 80034bc:	08003b60 	.word	0x08003b60

080034c0 <memset>:
 80034c0:	4603      	mov	r3, r0
 80034c2:	4402      	add	r2, r0
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d100      	bne.n	80034ca <memset+0xa>
 80034c8:	4770      	bx	lr
 80034ca:	f803 1b01 	strb.w	r1, [r3], #1
 80034ce:	e7f9      	b.n	80034c4 <memset+0x4>

080034d0 <_init>:
 80034d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034d2:	bf00      	nop
 80034d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034d6:	bc08      	pop	{r3}
 80034d8:	469e      	mov	lr, r3
 80034da:	4770      	bx	lr

080034dc <_fini>:
 80034dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034de:	bf00      	nop
 80034e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034e2:	bc08      	pop	{r3}
 80034e4:	469e      	mov	lr, r3
 80034e6:	4770      	bx	lr
