
DTU300_SPI2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002640  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08002824  08002824  00012824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080028f4  080028f4  000128f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080028f8  080028f8  000128f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000000  080028fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000510  20000078  08002974  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000588  08002974  00020588  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000fe69  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000024d9  00000000  00000000  0002ff0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000428c  00000000  00000000  000323e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000798  00000000  00000000  00036670  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009e0  00000000  00000000  00036e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000048e2  00000000  00000000  000377e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002a3b  00000000  00000000  0003c0ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003eb05  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001bfc  00000000  00000000  0003eb84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000078 	.word	0x20000078
 8000200:	00000000 	.word	0x00000000
 8000204:	0800280c 	.word	0x0800280c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000007c 	.word	0x2000007c
 8000220:	0800280c 	.word	0x0800280c

08000224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000224:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000226:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <HAL_InitTick+0x3c>)
{
 8000228:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800022a:	7818      	ldrb	r0, [r3, #0]
 800022c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000230:	fbb3 f3f0 	udiv	r3, r3, r0
 8000234:	4a0b      	ldr	r2, [pc, #44]	; (8000264 <HAL_InitTick+0x40>)
 8000236:	6810      	ldr	r0, [r2, #0]
 8000238:	fbb0 f0f3 	udiv	r0, r0, r3
 800023c:	f000 f89e 	bl	800037c <HAL_SYSTICK_Config>
 8000240:	4604      	mov	r4, r0
 8000242:	b958      	cbnz	r0, 800025c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000244:	2d0f      	cmp	r5, #15
 8000246:	d809      	bhi.n	800025c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000248:	4602      	mov	r2, r0
 800024a:	4629      	mov	r1, r5
 800024c:	f04f 30ff 	mov.w	r0, #4294967295
 8000250:	f000 f854 	bl	80002fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <HAL_InitTick+0x44>)
 8000256:	4620      	mov	r0, r4
 8000258:	601d      	str	r5, [r3, #0]
 800025a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800025c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800025e:	bd38      	pop	{r3, r4, r5, pc}
 8000260:	20000000 	.word	0x20000000
 8000264:	20000010 	.word	0x20000010
 8000268:	20000004 	.word	0x20000004

0800026c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800026c:	4a07      	ldr	r2, [pc, #28]	; (800028c <HAL_Init+0x20>)
{
 800026e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000270:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000272:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000274:	f043 0310 	orr.w	r3, r3, #16
 8000278:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800027a:	f000 f82d 	bl	80002d8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800027e:	2000      	movs	r0, #0
 8000280:	f7ff ffd0 	bl	8000224 <HAL_InitTick>
  HAL_MspInit();
 8000284:	f001 f9d8 	bl	8001638 <HAL_MspInit>
}
 8000288:	2000      	movs	r0, #0
 800028a:	bd08      	pop	{r3, pc}
 800028c:	40022000 	.word	0x40022000

08000290 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000290:	4a03      	ldr	r2, [pc, #12]	; (80002a0 <HAL_IncTick+0x10>)
 8000292:	4b04      	ldr	r3, [pc, #16]	; (80002a4 <HAL_IncTick+0x14>)
 8000294:	6811      	ldr	r1, [r2, #0]
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	440b      	add	r3, r1
 800029a:	6013      	str	r3, [r2, #0]
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	200004a4 	.word	0x200004a4
 80002a4:	20000000 	.word	0x20000000

080002a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002a8:	4b01      	ldr	r3, [pc, #4]	; (80002b0 <HAL_GetTick+0x8>)
 80002aa:	6818      	ldr	r0, [r3, #0]
}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	200004a4 	.word	0x200004a4

080002b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002b4:	b538      	push	{r3, r4, r5, lr}
 80002b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80002b8:	f7ff fff6 	bl	80002a8 <HAL_GetTick>
 80002bc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002be:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80002c0:	bf1e      	ittt	ne
 80002c2:	4b04      	ldrne	r3, [pc, #16]	; (80002d4 <HAL_Delay+0x20>)
 80002c4:	781b      	ldrbne	r3, [r3, #0]
 80002c6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80002c8:	f7ff ffee 	bl	80002a8 <HAL_GetTick>
 80002cc:	1b40      	subs	r0, r0, r5
 80002ce:	4284      	cmp	r4, r0
 80002d0:	d8fa      	bhi.n	80002c8 <HAL_Delay+0x14>
  {
  }
}
 80002d2:	bd38      	pop	{r3, r4, r5, pc}
 80002d4:	20000000 	.word	0x20000000

080002d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002d8:	4a07      	ldr	r2, [pc, #28]	; (80002f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002da:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002dc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002de:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80002e6:	041b      	lsls	r3, r3, #16
 80002e8:	0c1b      	lsrs	r3, r3, #16
 80002ea:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80002f2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80002f4:	60d3      	str	r3, [r2, #12]
 80002f6:	4770      	bx	lr
 80002f8:	e000ed00 	.word	0xe000ed00

080002fc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002fc:	4b17      	ldr	r3, [pc, #92]	; (800035c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002fe:	b530      	push	{r4, r5, lr}
 8000300:	68dc      	ldr	r4, [r3, #12]
 8000302:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000306:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800030a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800030c:	2b04      	cmp	r3, #4
 800030e:	bf28      	it	cs
 8000310:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000312:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000314:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000318:	bf98      	it	ls
 800031a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800031c:	fa05 f303 	lsl.w	r3, r5, r3
 8000320:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000324:	bf88      	it	hi
 8000326:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000328:	4019      	ands	r1, r3
 800032a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800032c:	fa05 f404 	lsl.w	r4, r5, r4
 8000330:	3c01      	subs	r4, #1
 8000332:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000334:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000336:	ea42 0201 	orr.w	r2, r2, r1
 800033a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800033e:	bfaf      	iteee	ge
 8000340:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000344:	4b06      	ldrlt	r3, [pc, #24]	; (8000360 <HAL_NVIC_SetPriority+0x64>)
 8000346:	f000 000f 	andlt.w	r0, r0, #15
 800034a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800034c:	bfa5      	ittet	ge
 800034e:	b2d2      	uxtbge	r2, r2
 8000350:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000354:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000356:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800035a:	bd30      	pop	{r4, r5, pc}
 800035c:	e000ed00 	.word	0xe000ed00
 8000360:	e000ed14 	.word	0xe000ed14

08000364 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000364:	2301      	movs	r3, #1
 8000366:	0942      	lsrs	r2, r0, #5
 8000368:	f000 001f 	and.w	r0, r0, #31
 800036c:	fa03 f000 	lsl.w	r0, r3, r0
 8000370:	4b01      	ldr	r3, [pc, #4]	; (8000378 <HAL_NVIC_EnableIRQ+0x14>)
 8000372:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000376:	4770      	bx	lr
 8000378:	e000e100 	.word	0xe000e100

0800037c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800037c:	3801      	subs	r0, #1
 800037e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000382:	d20a      	bcs.n	800039a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000384:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000386:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000388:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800038a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800038c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000390:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000392:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000394:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800039a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	e000e010 	.word	0xe000e010
 80003a4:	e000ed00 	.word	0xe000ed00

080003a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80003a8:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80003aa:	2800      	cmp	r0, #0
 80003ac:	d032      	beq.n	8000414 <HAL_DMA_Init+0x6c>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80003ae:	6801      	ldr	r1, [r0, #0]
 80003b0:	4b19      	ldr	r3, [pc, #100]	; (8000418 <HAL_DMA_Init+0x70>)
 80003b2:	2414      	movs	r4, #20
 80003b4:	4299      	cmp	r1, r3
 80003b6:	d825      	bhi.n	8000404 <HAL_DMA_Init+0x5c>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80003b8:	4a18      	ldr	r2, [pc, #96]	; (800041c <HAL_DMA_Init+0x74>)
    hdma->DmaBaseAddress = DMA1;
 80003ba:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80003be:	440a      	add	r2, r1
 80003c0:	fbb2 f2f4 	udiv	r2, r2, r4
 80003c4:	0092      	lsls	r2, r2, #2
 80003c6:	6402      	str	r2, [r0, #64]	; 0x40
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80003c8:	6884      	ldr	r4, [r0, #8]
    hdma->DmaBaseAddress = DMA2;
 80003ca:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 80003cc:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 80003ce:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 80003d0:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80003d2:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80003d4:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80003d8:	4323      	orrs	r3, r4
 80003da:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80003dc:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80003e0:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80003e2:	6944      	ldr	r4, [r0, #20]
 80003e4:	4323      	orrs	r3, r4
 80003e6:	6984      	ldr	r4, [r0, #24]
 80003e8:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80003ea:	69c4      	ldr	r4, [r0, #28]
 80003ec:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80003ee:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80003f0:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80003f2:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80003f4:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 80003f6:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80003fa:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80003fc:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8000400:	4618      	mov	r0, r3
 8000402:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <HAL_DMA_Init+0x78>)
 8000406:	440b      	add	r3, r1
 8000408:	fbb3 f3f4 	udiv	r3, r3, r4
 800040c:	009b      	lsls	r3, r3, #2
 800040e:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000410:	4b04      	ldr	r3, [pc, #16]	; (8000424 <HAL_DMA_Init+0x7c>)
 8000412:	e7d9      	b.n	80003c8 <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 8000414:	2001      	movs	r0, #1
}
 8000416:	bd10      	pop	{r4, pc}
 8000418:	40020407 	.word	0x40020407
 800041c:	bffdfff8 	.word	0xbffdfff8
 8000420:	bffdfbf8 	.word	0xbffdfbf8
 8000424:	40020400 	.word	0x40020400

08000428 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000428:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800042a:	f890 4020 	ldrb.w	r4, [r0, #32]
 800042e:	2c01      	cmp	r4, #1
 8000430:	d035      	beq.n	800049e <HAL_DMA_Start_IT+0x76>
 8000432:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000434:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000438:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800043c:	42a5      	cmp	r5, r4
 800043e:	f04f 0600 	mov.w	r6, #0
 8000442:	f04f 0402 	mov.w	r4, #2
 8000446:	d128      	bne.n	800049a <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000448:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800044c:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800044e:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000450:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000452:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8000454:	f026 0601 	bic.w	r6, r6, #1
 8000458:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800045a:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 800045c:	40bd      	lsls	r5, r7
 800045e:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000460:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000462:	6843      	ldr	r3, [r0, #4]
 8000464:	6805      	ldr	r5, [r0, #0]
 8000466:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8000468:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800046a:	bf0b      	itete	eq
 800046c:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800046e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000470:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000472:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8000474:	b14b      	cbz	r3, 800048a <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000476:	6823      	ldr	r3, [r4, #0]
 8000478:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800047c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800047e:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000480:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000482:	f043 0301 	orr.w	r3, r3, #1
 8000486:	602b      	str	r3, [r5, #0]
 8000488:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800048a:	6823      	ldr	r3, [r4, #0]
 800048c:	f023 0304 	bic.w	r3, r3, #4
 8000490:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000492:	6823      	ldr	r3, [r4, #0]
 8000494:	f043 030a 	orr.w	r3, r3, #10
 8000498:	e7f0      	b.n	800047c <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 800049a:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 800049e:	2002      	movs	r0, #2
}
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080004a4 <HAL_DMA_IRQHandler>:
{
 80004a4:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80004a6:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80004a8:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80004aa:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80004ac:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80004ae:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80004b0:	4095      	lsls	r5, r2
 80004b2:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80004b4:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80004b6:	d055      	beq.n	8000564 <HAL_DMA_IRQHandler+0xc0>
 80004b8:	074d      	lsls	r5, r1, #29
 80004ba:	d553      	bpl.n	8000564 <HAL_DMA_IRQHandler+0xc0>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80004bc:	681a      	ldr	r2, [r3, #0]
 80004be:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80004c0:	bf5e      	ittt	pl
 80004c2:	681a      	ldrpl	r2, [r3, #0]
 80004c4:	f022 0204 	bicpl.w	r2, r2, #4
 80004c8:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80004ca:	4a60      	ldr	r2, [pc, #384]	; (800064c <HAL_DMA_IRQHandler+0x1a8>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d91f      	bls.n	8000510 <HAL_DMA_IRQHandler+0x6c>
 80004d0:	f502 7262 	add.w	r2, r2, #904	; 0x388
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d014      	beq.n	8000502 <HAL_DMA_IRQHandler+0x5e>
 80004d8:	3214      	adds	r2, #20
 80004da:	4293      	cmp	r3, r2
 80004dc:	d013      	beq.n	8000506 <HAL_DMA_IRQHandler+0x62>
 80004de:	3214      	adds	r2, #20
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d012      	beq.n	800050a <HAL_DMA_IRQHandler+0x66>
 80004e4:	3214      	adds	r2, #20
 80004e6:	4293      	cmp	r3, r2
 80004e8:	bf0c      	ite	eq
 80004ea:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 80004ee:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 80004f2:	4a57      	ldr	r2, [pc, #348]	; (8000650 <HAL_DMA_IRQHandler+0x1ac>)
 80004f4:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80004f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	f000 80a5 	beq.w	8000648 <HAL_DMA_IRQHandler+0x1a4>
}
 80004fe:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000500:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000502:	2304      	movs	r3, #4
 8000504:	e7f5      	b.n	80004f2 <HAL_DMA_IRQHandler+0x4e>
 8000506:	2340      	movs	r3, #64	; 0x40
 8000508:	e7f3      	b.n	80004f2 <HAL_DMA_IRQHandler+0x4e>
 800050a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800050e:	e7f0      	b.n	80004f2 <HAL_DMA_IRQHandler+0x4e>
 8000510:	4950      	ldr	r1, [pc, #320]	; (8000654 <HAL_DMA_IRQHandler+0x1b0>)
 8000512:	428b      	cmp	r3, r1
 8000514:	d016      	beq.n	8000544 <HAL_DMA_IRQHandler+0xa0>
 8000516:	3114      	adds	r1, #20
 8000518:	428b      	cmp	r3, r1
 800051a:	d015      	beq.n	8000548 <HAL_DMA_IRQHandler+0xa4>
 800051c:	3114      	adds	r1, #20
 800051e:	428b      	cmp	r3, r1
 8000520:	d014      	beq.n	800054c <HAL_DMA_IRQHandler+0xa8>
 8000522:	3114      	adds	r1, #20
 8000524:	428b      	cmp	r3, r1
 8000526:	d014      	beq.n	8000552 <HAL_DMA_IRQHandler+0xae>
 8000528:	3114      	adds	r1, #20
 800052a:	428b      	cmp	r3, r1
 800052c:	d014      	beq.n	8000558 <HAL_DMA_IRQHandler+0xb4>
 800052e:	3114      	adds	r1, #20
 8000530:	428b      	cmp	r3, r1
 8000532:	d014      	beq.n	800055e <HAL_DMA_IRQHandler+0xba>
 8000534:	4293      	cmp	r3, r2
 8000536:	bf14      	ite	ne
 8000538:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 800053c:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
 8000540:	4a45      	ldr	r2, [pc, #276]	; (8000658 <HAL_DMA_IRQHandler+0x1b4>)
 8000542:	e7d7      	b.n	80004f4 <HAL_DMA_IRQHandler+0x50>
 8000544:	2304      	movs	r3, #4
 8000546:	e7fb      	b.n	8000540 <HAL_DMA_IRQHandler+0x9c>
 8000548:	2340      	movs	r3, #64	; 0x40
 800054a:	e7f9      	b.n	8000540 <HAL_DMA_IRQHandler+0x9c>
 800054c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000550:	e7f6      	b.n	8000540 <HAL_DMA_IRQHandler+0x9c>
 8000552:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000556:	e7f3      	b.n	8000540 <HAL_DMA_IRQHandler+0x9c>
 8000558:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800055c:	e7f0      	b.n	8000540 <HAL_DMA_IRQHandler+0x9c>
 800055e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000562:	e7ed      	b.n	8000540 <HAL_DMA_IRQHandler+0x9c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000564:	2502      	movs	r5, #2
 8000566:	4095      	lsls	r5, r2
 8000568:	4225      	tst	r5, r4
 800056a:	d057      	beq.n	800061c <HAL_DMA_IRQHandler+0x178>
 800056c:	078d      	lsls	r5, r1, #30
 800056e:	d555      	bpl.n	800061c <HAL_DMA_IRQHandler+0x178>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	0694      	lsls	r4, r2, #26
 8000574:	d406      	bmi.n	8000584 <HAL_DMA_IRQHandler+0xe0>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	f022 020a 	bic.w	r2, r2, #10
 800057c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800057e:	2201      	movs	r2, #1
 8000580:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000584:	4a31      	ldr	r2, [pc, #196]	; (800064c <HAL_DMA_IRQHandler+0x1a8>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d91e      	bls.n	80005c8 <HAL_DMA_IRQHandler+0x124>
 800058a:	f502 7262 	add.w	r2, r2, #904	; 0x388
 800058e:	4293      	cmp	r3, r2
 8000590:	d013      	beq.n	80005ba <HAL_DMA_IRQHandler+0x116>
 8000592:	3214      	adds	r2, #20
 8000594:	4293      	cmp	r3, r2
 8000596:	d012      	beq.n	80005be <HAL_DMA_IRQHandler+0x11a>
 8000598:	3214      	adds	r2, #20
 800059a:	4293      	cmp	r3, r2
 800059c:	d011      	beq.n	80005c2 <HAL_DMA_IRQHandler+0x11e>
 800059e:	3214      	adds	r2, #20
 80005a0:	4293      	cmp	r3, r2
 80005a2:	bf0c      	ite	eq
 80005a4:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 80005a8:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 80005ac:	4a28      	ldr	r2, [pc, #160]	; (8000650 <HAL_DMA_IRQHandler+0x1ac>)
 80005ae:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80005b0:	2300      	movs	r3, #0
 80005b2:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80005b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80005b8:	e79e      	b.n	80004f8 <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80005ba:	2302      	movs	r3, #2
 80005bc:	e7f6      	b.n	80005ac <HAL_DMA_IRQHandler+0x108>
 80005be:	2320      	movs	r3, #32
 80005c0:	e7f4      	b.n	80005ac <HAL_DMA_IRQHandler+0x108>
 80005c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005c6:	e7f1      	b.n	80005ac <HAL_DMA_IRQHandler+0x108>
 80005c8:	4922      	ldr	r1, [pc, #136]	; (8000654 <HAL_DMA_IRQHandler+0x1b0>)
 80005ca:	428b      	cmp	r3, r1
 80005cc:	d016      	beq.n	80005fc <HAL_DMA_IRQHandler+0x158>
 80005ce:	3114      	adds	r1, #20
 80005d0:	428b      	cmp	r3, r1
 80005d2:	d015      	beq.n	8000600 <HAL_DMA_IRQHandler+0x15c>
 80005d4:	3114      	adds	r1, #20
 80005d6:	428b      	cmp	r3, r1
 80005d8:	d014      	beq.n	8000604 <HAL_DMA_IRQHandler+0x160>
 80005da:	3114      	adds	r1, #20
 80005dc:	428b      	cmp	r3, r1
 80005de:	d014      	beq.n	800060a <HAL_DMA_IRQHandler+0x166>
 80005e0:	3114      	adds	r1, #20
 80005e2:	428b      	cmp	r3, r1
 80005e4:	d014      	beq.n	8000610 <HAL_DMA_IRQHandler+0x16c>
 80005e6:	3114      	adds	r1, #20
 80005e8:	428b      	cmp	r3, r1
 80005ea:	d014      	beq.n	8000616 <HAL_DMA_IRQHandler+0x172>
 80005ec:	4293      	cmp	r3, r2
 80005ee:	bf14      	ite	ne
 80005f0:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 80005f4:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80005f8:	4a17      	ldr	r2, [pc, #92]	; (8000658 <HAL_DMA_IRQHandler+0x1b4>)
 80005fa:	e7d8      	b.n	80005ae <HAL_DMA_IRQHandler+0x10a>
 80005fc:	2302      	movs	r3, #2
 80005fe:	e7fb      	b.n	80005f8 <HAL_DMA_IRQHandler+0x154>
 8000600:	2320      	movs	r3, #32
 8000602:	e7f9      	b.n	80005f8 <HAL_DMA_IRQHandler+0x154>
 8000604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000608:	e7f6      	b.n	80005f8 <HAL_DMA_IRQHandler+0x154>
 800060a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800060e:	e7f3      	b.n	80005f8 <HAL_DMA_IRQHandler+0x154>
 8000610:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000614:	e7f0      	b.n	80005f8 <HAL_DMA_IRQHandler+0x154>
 8000616:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800061a:	e7ed      	b.n	80005f8 <HAL_DMA_IRQHandler+0x154>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800061c:	2508      	movs	r5, #8
 800061e:	4095      	lsls	r5, r2
 8000620:	4225      	tst	r5, r4
 8000622:	d011      	beq.n	8000648 <HAL_DMA_IRQHandler+0x1a4>
 8000624:	0709      	lsls	r1, r1, #28
 8000626:	d50f      	bpl.n	8000648 <HAL_DMA_IRQHandler+0x1a4>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000628:	6819      	ldr	r1, [r3, #0]
 800062a:	f021 010e 	bic.w	r1, r1, #14
 800062e:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000630:	2301      	movs	r3, #1
 8000632:	fa03 f202 	lsl.w	r2, r3, r2
 8000636:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000638:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800063a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800063e:	2300      	movs	r3, #0
 8000640:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000644:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000646:	e757      	b.n	80004f8 <HAL_DMA_IRQHandler+0x54>
}
 8000648:	bc70      	pop	{r4, r5, r6}
 800064a:	4770      	bx	lr
 800064c:	40020080 	.word	0x40020080
 8000650:	40020400 	.word	0x40020400
 8000654:	40020008 	.word	0x40020008
 8000658:	40020000 	.word	0x40020000

0800065c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800065c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000660:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000662:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000664:	4f6c      	ldr	r7, [pc, #432]	; (8000818 <HAL_GPIO_Init+0x1bc>)
 8000666:	4b6d      	ldr	r3, [pc, #436]	; (800081c <HAL_GPIO_Init+0x1c0>)
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000668:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 8000824 <HAL_GPIO_Init+0x1c8>
      switch (GPIO_Init->Mode)
 800066c:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8000828 <HAL_GPIO_Init+0x1cc>
    ioposition = (0x01U << position);
 8000670:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000674:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000676:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800067a:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 800067e:	45a0      	cmp	r8, r4
 8000680:	f040 8085 	bne.w	800078e <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 8000684:	684d      	ldr	r5, [r1, #4]
 8000686:	2d12      	cmp	r5, #18
 8000688:	f000 80b7 	beq.w	80007fa <HAL_GPIO_Init+0x19e>
 800068c:	f200 808d 	bhi.w	80007aa <HAL_GPIO_Init+0x14e>
 8000690:	2d02      	cmp	r5, #2
 8000692:	f000 80af 	beq.w	80007f4 <HAL_GPIO_Init+0x198>
 8000696:	f200 8081 	bhi.w	800079c <HAL_GPIO_Init+0x140>
 800069a:	2d00      	cmp	r5, #0
 800069c:	f000 8091 	beq.w	80007c2 <HAL_GPIO_Init+0x166>
 80006a0:	2d01      	cmp	r5, #1
 80006a2:	f000 80a5 	beq.w	80007f0 <HAL_GPIO_Init+0x194>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80006a6:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80006aa:	2cff      	cmp	r4, #255	; 0xff
 80006ac:	bf93      	iteet	ls
 80006ae:	4682      	movls	sl, r0
 80006b0:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80006b4:	3d08      	subhi	r5, #8
 80006b6:	f8d0 b000 	ldrls.w	fp, [r0]
 80006ba:	bf92      	itee	ls
 80006bc:	00b5      	lslls	r5, r6, #2
 80006be:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80006c2:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80006c4:	fa09 f805 	lsl.w	r8, r9, r5
 80006c8:	ea2b 0808 	bic.w	r8, fp, r8
 80006cc:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80006d0:	bf88      	it	hi
 80006d2:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80006d6:	ea48 0505 	orr.w	r5, r8, r5
 80006da:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006de:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80006e2:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80006e6:	d052      	beq.n	800078e <HAL_GPIO_Init+0x132>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80006e8:	69bd      	ldr	r5, [r7, #24]
 80006ea:	f026 0803 	bic.w	r8, r6, #3
 80006ee:	f045 0501 	orr.w	r5, r5, #1
 80006f2:	61bd      	str	r5, [r7, #24]
 80006f4:	69bd      	ldr	r5, [r7, #24]
 80006f6:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80006fa:	f005 0501 	and.w	r5, r5, #1
 80006fe:	9501      	str	r5, [sp, #4]
 8000700:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000704:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000708:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800070a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800070e:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000712:	fa09 f90b 	lsl.w	r9, r9, fp
 8000716:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800071a:	4d41      	ldr	r5, [pc, #260]	; (8000820 <HAL_GPIO_Init+0x1c4>)
 800071c:	42a8      	cmp	r0, r5
 800071e:	d071      	beq.n	8000804 <HAL_GPIO_Init+0x1a8>
 8000720:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000724:	42a8      	cmp	r0, r5
 8000726:	d06f      	beq.n	8000808 <HAL_GPIO_Init+0x1ac>
 8000728:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800072c:	42a8      	cmp	r0, r5
 800072e:	d06d      	beq.n	800080c <HAL_GPIO_Init+0x1b0>
 8000730:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000734:	42a8      	cmp	r0, r5
 8000736:	d06b      	beq.n	8000810 <HAL_GPIO_Init+0x1b4>
 8000738:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800073c:	42a8      	cmp	r0, r5
 800073e:	d069      	beq.n	8000814 <HAL_GPIO_Init+0x1b8>
 8000740:	4570      	cmp	r0, lr
 8000742:	bf0c      	ite	eq
 8000744:	2505      	moveq	r5, #5
 8000746:	2506      	movne	r5, #6
 8000748:	fa05 f50b 	lsl.w	r5, r5, fp
 800074c:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000750:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000754:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000756:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800075a:	bf14      	ite	ne
 800075c:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800075e:	43a5      	biceq	r5, r4
 8000760:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000762:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000764:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000768:	bf14      	ite	ne
 800076a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800076c:	43a5      	biceq	r5, r4
 800076e:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000770:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000772:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000776:	bf14      	ite	ne
 8000778:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800077a:	43a5      	biceq	r5, r4
 800077c:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800077e:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000780:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000784:	bf14      	ite	ne
 8000786:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000788:	ea25 0404 	biceq.w	r4, r5, r4
 800078c:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800078e:	3601      	adds	r6, #1
 8000790:	2e10      	cmp	r6, #16
 8000792:	f47f af6d 	bne.w	8000670 <HAL_GPIO_Init+0x14>
        }
      }
    }
  }
}
 8000796:	b003      	add	sp, #12
 8000798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800079c:	2d03      	cmp	r5, #3
 800079e:	d025      	beq.n	80007ec <HAL_GPIO_Init+0x190>
 80007a0:	2d11      	cmp	r5, #17
 80007a2:	d180      	bne.n	80006a6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80007a4:	68ca      	ldr	r2, [r1, #12]
 80007a6:	3204      	adds	r2, #4
          break;
 80007a8:	e77d      	b.n	80006a6 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 80007aa:	4565      	cmp	r5, ip
 80007ac:	d009      	beq.n	80007c2 <HAL_GPIO_Init+0x166>
 80007ae:	d812      	bhi.n	80007d6 <HAL_GPIO_Init+0x17a>
 80007b0:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800082c <HAL_GPIO_Init+0x1d0>
 80007b4:	454d      	cmp	r5, r9
 80007b6:	d004      	beq.n	80007c2 <HAL_GPIO_Init+0x166>
 80007b8:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80007bc:	454d      	cmp	r5, r9
 80007be:	f47f af72 	bne.w	80006a6 <HAL_GPIO_Init+0x4a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80007c2:	688a      	ldr	r2, [r1, #8]
 80007c4:	b1e2      	cbz	r2, 8000800 <HAL_GPIO_Init+0x1a4>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80007c6:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80007c8:	bf0c      	ite	eq
 80007ca:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80007ce:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007d2:	2208      	movs	r2, #8
 80007d4:	e767      	b.n	80006a6 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 80007d6:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8000830 <HAL_GPIO_Init+0x1d4>
 80007da:	454d      	cmp	r5, r9
 80007dc:	d0f1      	beq.n	80007c2 <HAL_GPIO_Init+0x166>
 80007de:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80007e2:	454d      	cmp	r5, r9
 80007e4:	d0ed      	beq.n	80007c2 <HAL_GPIO_Init+0x166>
 80007e6:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80007ea:	e7e7      	b.n	80007bc <HAL_GPIO_Init+0x160>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80007ec:	2200      	movs	r2, #0
 80007ee:	e75a      	b.n	80006a6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80007f0:	68ca      	ldr	r2, [r1, #12]
          break;
 80007f2:	e758      	b.n	80006a6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80007f4:	68ca      	ldr	r2, [r1, #12]
 80007f6:	3208      	adds	r2, #8
          break;
 80007f8:	e755      	b.n	80006a6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80007fa:	68ca      	ldr	r2, [r1, #12]
 80007fc:	320c      	adds	r2, #12
          break;
 80007fe:	e752      	b.n	80006a6 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000800:	2204      	movs	r2, #4
 8000802:	e750      	b.n	80006a6 <HAL_GPIO_Init+0x4a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000804:	2500      	movs	r5, #0
 8000806:	e79f      	b.n	8000748 <HAL_GPIO_Init+0xec>
 8000808:	2501      	movs	r5, #1
 800080a:	e79d      	b.n	8000748 <HAL_GPIO_Init+0xec>
 800080c:	2502      	movs	r5, #2
 800080e:	e79b      	b.n	8000748 <HAL_GPIO_Init+0xec>
 8000810:	2503      	movs	r5, #3
 8000812:	e799      	b.n	8000748 <HAL_GPIO_Init+0xec>
 8000814:	2504      	movs	r5, #4
 8000816:	e797      	b.n	8000748 <HAL_GPIO_Init+0xec>
 8000818:	40021000 	.word	0x40021000
 800081c:	40010400 	.word	0x40010400
 8000820:	40010800 	.word	0x40010800
 8000824:	40011c00 	.word	0x40011c00
 8000828:	10210000 	.word	0x10210000
 800082c:	10110000 	.word	0x10110000
 8000830:	10310000 	.word	0x10310000

08000834 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000834:	b10a      	cbz	r2, 800083a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000836:	6101      	str	r1, [r0, #16]
 8000838:	4770      	bx	lr
 800083a:	0409      	lsls	r1, r1, #16
 800083c:	e7fb      	b.n	8000836 <HAL_GPIO_WritePin+0x2>

0800083e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800083e:	68c3      	ldr	r3, [r0, #12]
 8000840:	4059      	eors	r1, r3
 8000842:	60c1      	str	r1, [r0, #12]
 8000844:	4770      	bx	lr
	...

08000848 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000848:	6803      	ldr	r3, [r0, #0]
{
 800084a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800084e:	07db      	lsls	r3, r3, #31
{
 8000850:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000852:	d410      	bmi.n	8000876 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000854:	682b      	ldr	r3, [r5, #0]
 8000856:	079f      	lsls	r7, r3, #30
 8000858:	d45e      	bmi.n	8000918 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800085a:	682b      	ldr	r3, [r5, #0]
 800085c:	0719      	lsls	r1, r3, #28
 800085e:	f100 8095 	bmi.w	800098c <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000862:	682b      	ldr	r3, [r5, #0]
 8000864:	075a      	lsls	r2, r3, #29
 8000866:	f100 80bf 	bmi.w	80009e8 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800086a:	69ea      	ldr	r2, [r5, #28]
 800086c:	2a00      	cmp	r2, #0
 800086e:	f040 812d 	bne.w	8000acc <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000872:	2000      	movs	r0, #0
 8000874:	e014      	b.n	80008a0 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000876:	4c90      	ldr	r4, [pc, #576]	; (8000ab8 <HAL_RCC_OscConfig+0x270>)
 8000878:	6863      	ldr	r3, [r4, #4]
 800087a:	f003 030c 	and.w	r3, r3, #12
 800087e:	2b04      	cmp	r3, #4
 8000880:	d007      	beq.n	8000892 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000882:	6863      	ldr	r3, [r4, #4]
 8000884:	f003 030c 	and.w	r3, r3, #12
 8000888:	2b08      	cmp	r3, #8
 800088a:	d10c      	bne.n	80008a6 <HAL_RCC_OscConfig+0x5e>
 800088c:	6863      	ldr	r3, [r4, #4]
 800088e:	03de      	lsls	r6, r3, #15
 8000890:	d509      	bpl.n	80008a6 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000892:	6823      	ldr	r3, [r4, #0]
 8000894:	039c      	lsls	r4, r3, #14
 8000896:	d5dd      	bpl.n	8000854 <HAL_RCC_OscConfig+0xc>
 8000898:	686b      	ldr	r3, [r5, #4]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d1da      	bne.n	8000854 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800089e:	2001      	movs	r0, #1
}
 80008a0:	b002      	add	sp, #8
 80008a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008a6:	686b      	ldr	r3, [r5, #4]
 80008a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008ac:	d110      	bne.n	80008d0 <HAL_RCC_OscConfig+0x88>
 80008ae:	6823      	ldr	r3, [r4, #0]
 80008b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008b4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80008b6:	f7ff fcf7 	bl	80002a8 <HAL_GetTick>
 80008ba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008bc:	6823      	ldr	r3, [r4, #0]
 80008be:	0398      	lsls	r0, r3, #14
 80008c0:	d4c8      	bmi.n	8000854 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008c2:	f7ff fcf1 	bl	80002a8 <HAL_GetTick>
 80008c6:	1b80      	subs	r0, r0, r6
 80008c8:	2864      	cmp	r0, #100	; 0x64
 80008ca:	d9f7      	bls.n	80008bc <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80008cc:	2003      	movs	r0, #3
 80008ce:	e7e7      	b.n	80008a0 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008d0:	b99b      	cbnz	r3, 80008fa <HAL_RCC_OscConfig+0xb2>
 80008d2:	6823      	ldr	r3, [r4, #0]
 80008d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008d8:	6023      	str	r3, [r4, #0]
 80008da:	6823      	ldr	r3, [r4, #0]
 80008dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008e0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80008e2:	f7ff fce1 	bl	80002a8 <HAL_GetTick>
 80008e6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008e8:	6823      	ldr	r3, [r4, #0]
 80008ea:	0399      	lsls	r1, r3, #14
 80008ec:	d5b2      	bpl.n	8000854 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008ee:	f7ff fcdb 	bl	80002a8 <HAL_GetTick>
 80008f2:	1b80      	subs	r0, r0, r6
 80008f4:	2864      	cmp	r0, #100	; 0x64
 80008f6:	d9f7      	bls.n	80008e8 <HAL_RCC_OscConfig+0xa0>
 80008f8:	e7e8      	b.n	80008cc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008fe:	6823      	ldr	r3, [r4, #0]
 8000900:	d103      	bne.n	800090a <HAL_RCC_OscConfig+0xc2>
 8000902:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000906:	6023      	str	r3, [r4, #0]
 8000908:	e7d1      	b.n	80008ae <HAL_RCC_OscConfig+0x66>
 800090a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800090e:	6023      	str	r3, [r4, #0]
 8000910:	6823      	ldr	r3, [r4, #0]
 8000912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000916:	e7cd      	b.n	80008b4 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000918:	4c67      	ldr	r4, [pc, #412]	; (8000ab8 <HAL_RCC_OscConfig+0x270>)
 800091a:	6863      	ldr	r3, [r4, #4]
 800091c:	f013 0f0c 	tst.w	r3, #12
 8000920:	d007      	beq.n	8000932 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000922:	6863      	ldr	r3, [r4, #4]
 8000924:	f003 030c 	and.w	r3, r3, #12
 8000928:	2b08      	cmp	r3, #8
 800092a:	d110      	bne.n	800094e <HAL_RCC_OscConfig+0x106>
 800092c:	6863      	ldr	r3, [r4, #4]
 800092e:	03da      	lsls	r2, r3, #15
 8000930:	d40d      	bmi.n	800094e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000932:	6823      	ldr	r3, [r4, #0]
 8000934:	079b      	lsls	r3, r3, #30
 8000936:	d502      	bpl.n	800093e <HAL_RCC_OscConfig+0xf6>
 8000938:	692b      	ldr	r3, [r5, #16]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d1af      	bne.n	800089e <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800093e:	6823      	ldr	r3, [r4, #0]
 8000940:	696a      	ldr	r2, [r5, #20]
 8000942:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000946:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800094a:	6023      	str	r3, [r4, #0]
 800094c:	e785      	b.n	800085a <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800094e:	692a      	ldr	r2, [r5, #16]
 8000950:	4b5a      	ldr	r3, [pc, #360]	; (8000abc <HAL_RCC_OscConfig+0x274>)
 8000952:	b16a      	cbz	r2, 8000970 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000954:	2201      	movs	r2, #1
 8000956:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000958:	f7ff fca6 	bl	80002a8 <HAL_GetTick>
 800095c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800095e:	6823      	ldr	r3, [r4, #0]
 8000960:	079f      	lsls	r7, r3, #30
 8000962:	d4ec      	bmi.n	800093e <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000964:	f7ff fca0 	bl	80002a8 <HAL_GetTick>
 8000968:	1b80      	subs	r0, r0, r6
 800096a:	2802      	cmp	r0, #2
 800096c:	d9f7      	bls.n	800095e <HAL_RCC_OscConfig+0x116>
 800096e:	e7ad      	b.n	80008cc <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000970:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000972:	f7ff fc99 	bl	80002a8 <HAL_GetTick>
 8000976:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000978:	6823      	ldr	r3, [r4, #0]
 800097a:	0798      	lsls	r0, r3, #30
 800097c:	f57f af6d 	bpl.w	800085a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000980:	f7ff fc92 	bl	80002a8 <HAL_GetTick>
 8000984:	1b80      	subs	r0, r0, r6
 8000986:	2802      	cmp	r0, #2
 8000988:	d9f6      	bls.n	8000978 <HAL_RCC_OscConfig+0x130>
 800098a:	e79f      	b.n	80008cc <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800098c:	69aa      	ldr	r2, [r5, #24]
 800098e:	4c4a      	ldr	r4, [pc, #296]	; (8000ab8 <HAL_RCC_OscConfig+0x270>)
 8000990:	4b4b      	ldr	r3, [pc, #300]	; (8000ac0 <HAL_RCC_OscConfig+0x278>)
 8000992:	b1da      	cbz	r2, 80009cc <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000994:	2201      	movs	r2, #1
 8000996:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000998:	f7ff fc86 	bl	80002a8 <HAL_GetTick>
 800099c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800099e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80009a0:	079b      	lsls	r3, r3, #30
 80009a2:	d50d      	bpl.n	80009c0 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80009a4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80009a8:	4b46      	ldr	r3, [pc, #280]	; (8000ac4 <HAL_RCC_OscConfig+0x27c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80009b0:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80009b2:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80009b4:	9b01      	ldr	r3, [sp, #4]
 80009b6:	1e5a      	subs	r2, r3, #1
 80009b8:	9201      	str	r2, [sp, #4]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d1f9      	bne.n	80009b2 <HAL_RCC_OscConfig+0x16a>
 80009be:	e750      	b.n	8000862 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009c0:	f7ff fc72 	bl	80002a8 <HAL_GetTick>
 80009c4:	1b80      	subs	r0, r0, r6
 80009c6:	2802      	cmp	r0, #2
 80009c8:	d9e9      	bls.n	800099e <HAL_RCC_OscConfig+0x156>
 80009ca:	e77f      	b.n	80008cc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80009cc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009ce:	f7ff fc6b 	bl	80002a8 <HAL_GetTick>
 80009d2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80009d6:	079f      	lsls	r7, r3, #30
 80009d8:	f57f af43 	bpl.w	8000862 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009dc:	f7ff fc64 	bl	80002a8 <HAL_GetTick>
 80009e0:	1b80      	subs	r0, r0, r6
 80009e2:	2802      	cmp	r0, #2
 80009e4:	d9f6      	bls.n	80009d4 <HAL_RCC_OscConfig+0x18c>
 80009e6:	e771      	b.n	80008cc <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009e8:	4c33      	ldr	r4, [pc, #204]	; (8000ab8 <HAL_RCC_OscConfig+0x270>)
 80009ea:	69e3      	ldr	r3, [r4, #28]
 80009ec:	00d8      	lsls	r0, r3, #3
 80009ee:	d424      	bmi.n	8000a3a <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 80009f0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	69e3      	ldr	r3, [r4, #28]
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f8:	61e3      	str	r3, [r4, #28]
 80009fa:	69e3      	ldr	r3, [r4, #28]
 80009fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a04:	4e30      	ldr	r6, [pc, #192]	; (8000ac8 <HAL_RCC_OscConfig+0x280>)
 8000a06:	6833      	ldr	r3, [r6, #0]
 8000a08:	05d9      	lsls	r1, r3, #23
 8000a0a:	d518      	bpl.n	8000a3e <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a0c:	68eb      	ldr	r3, [r5, #12]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d126      	bne.n	8000a60 <HAL_RCC_OscConfig+0x218>
 8000a12:	6a23      	ldr	r3, [r4, #32]
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000a1a:	f7ff fc45 	bl	80002a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a1e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a22:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a24:	6a23      	ldr	r3, [r4, #32]
 8000a26:	079b      	lsls	r3, r3, #30
 8000a28:	d53f      	bpl.n	8000aaa <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000a2a:	2f00      	cmp	r7, #0
 8000a2c:	f43f af1d 	beq.w	800086a <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a30:	69e3      	ldr	r3, [r4, #28]
 8000a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a36:	61e3      	str	r3, [r4, #28]
 8000a38:	e717      	b.n	800086a <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000a3a:	2700      	movs	r7, #0
 8000a3c:	e7e2      	b.n	8000a04 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a3e:	6833      	ldr	r3, [r6, #0]
 8000a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a44:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000a46:	f7ff fc2f 	bl	80002a8 <HAL_GetTick>
 8000a4a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a4c:	6833      	ldr	r3, [r6, #0]
 8000a4e:	05da      	lsls	r2, r3, #23
 8000a50:	d4dc      	bmi.n	8000a0c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a52:	f7ff fc29 	bl	80002a8 <HAL_GetTick>
 8000a56:	eba0 0008 	sub.w	r0, r0, r8
 8000a5a:	2864      	cmp	r0, #100	; 0x64
 8000a5c:	d9f6      	bls.n	8000a4c <HAL_RCC_OscConfig+0x204>
 8000a5e:	e735      	b.n	80008cc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a60:	b9ab      	cbnz	r3, 8000a8e <HAL_RCC_OscConfig+0x246>
 8000a62:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a64:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a68:	f023 0301 	bic.w	r3, r3, #1
 8000a6c:	6223      	str	r3, [r4, #32]
 8000a6e:	6a23      	ldr	r3, [r4, #32]
 8000a70:	f023 0304 	bic.w	r3, r3, #4
 8000a74:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000a76:	f7ff fc17 	bl	80002a8 <HAL_GetTick>
 8000a7a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a7c:	6a23      	ldr	r3, [r4, #32]
 8000a7e:	0798      	lsls	r0, r3, #30
 8000a80:	d5d3      	bpl.n	8000a2a <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a82:	f7ff fc11 	bl	80002a8 <HAL_GetTick>
 8000a86:	1b80      	subs	r0, r0, r6
 8000a88:	4540      	cmp	r0, r8
 8000a8a:	d9f7      	bls.n	8000a7c <HAL_RCC_OscConfig+0x234>
 8000a8c:	e71e      	b.n	80008cc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a8e:	2b05      	cmp	r3, #5
 8000a90:	6a23      	ldr	r3, [r4, #32]
 8000a92:	d103      	bne.n	8000a9c <HAL_RCC_OscConfig+0x254>
 8000a94:	f043 0304 	orr.w	r3, r3, #4
 8000a98:	6223      	str	r3, [r4, #32]
 8000a9a:	e7ba      	b.n	8000a12 <HAL_RCC_OscConfig+0x1ca>
 8000a9c:	f023 0301 	bic.w	r3, r3, #1
 8000aa0:	6223      	str	r3, [r4, #32]
 8000aa2:	6a23      	ldr	r3, [r4, #32]
 8000aa4:	f023 0304 	bic.w	r3, r3, #4
 8000aa8:	e7b6      	b.n	8000a18 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aaa:	f7ff fbfd 	bl	80002a8 <HAL_GetTick>
 8000aae:	eba0 0008 	sub.w	r0, r0, r8
 8000ab2:	42b0      	cmp	r0, r6
 8000ab4:	d9b6      	bls.n	8000a24 <HAL_RCC_OscConfig+0x1dc>
 8000ab6:	e709      	b.n	80008cc <HAL_RCC_OscConfig+0x84>
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	42420000 	.word	0x42420000
 8000ac0:	42420480 	.word	0x42420480
 8000ac4:	20000010 	.word	0x20000010
 8000ac8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000acc:	4c22      	ldr	r4, [pc, #136]	; (8000b58 <HAL_RCC_OscConfig+0x310>)
 8000ace:	6863      	ldr	r3, [r4, #4]
 8000ad0:	f003 030c 	and.w	r3, r3, #12
 8000ad4:	2b08      	cmp	r3, #8
 8000ad6:	f43f aee2 	beq.w	800089e <HAL_RCC_OscConfig+0x56>
 8000ada:	2300      	movs	r3, #0
 8000adc:	4e1f      	ldr	r6, [pc, #124]	; (8000b5c <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ade:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000ae0:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ae2:	d12b      	bne.n	8000b3c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000ae4:	f7ff fbe0 	bl	80002a8 <HAL_GetTick>
 8000ae8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000aea:	6823      	ldr	r3, [r4, #0]
 8000aec:	0199      	lsls	r1, r3, #6
 8000aee:	d41f      	bmi.n	8000b30 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000af0:	6a2b      	ldr	r3, [r5, #32]
 8000af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000af6:	d105      	bne.n	8000b04 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000af8:	6862      	ldr	r2, [r4, #4]
 8000afa:	68a9      	ldr	r1, [r5, #8]
 8000afc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000b00:	430a      	orrs	r2, r1
 8000b02:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b04:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000b06:	6862      	ldr	r2, [r4, #4]
 8000b08:	430b      	orrs	r3, r1
 8000b0a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b12:	2301      	movs	r3, #1
 8000b14:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b16:	f7ff fbc7 	bl	80002a8 <HAL_GetTick>
 8000b1a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b1c:	6823      	ldr	r3, [r4, #0]
 8000b1e:	019a      	lsls	r2, r3, #6
 8000b20:	f53f aea7 	bmi.w	8000872 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b24:	f7ff fbc0 	bl	80002a8 <HAL_GetTick>
 8000b28:	1b40      	subs	r0, r0, r5
 8000b2a:	2802      	cmp	r0, #2
 8000b2c:	d9f6      	bls.n	8000b1c <HAL_RCC_OscConfig+0x2d4>
 8000b2e:	e6cd      	b.n	80008cc <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b30:	f7ff fbba 	bl	80002a8 <HAL_GetTick>
 8000b34:	1bc0      	subs	r0, r0, r7
 8000b36:	2802      	cmp	r0, #2
 8000b38:	d9d7      	bls.n	8000aea <HAL_RCC_OscConfig+0x2a2>
 8000b3a:	e6c7      	b.n	80008cc <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000b3c:	f7ff fbb4 	bl	80002a8 <HAL_GetTick>
 8000b40:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b42:	6823      	ldr	r3, [r4, #0]
 8000b44:	019b      	lsls	r3, r3, #6
 8000b46:	f57f ae94 	bpl.w	8000872 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b4a:	f7ff fbad 	bl	80002a8 <HAL_GetTick>
 8000b4e:	1b40      	subs	r0, r0, r5
 8000b50:	2802      	cmp	r0, #2
 8000b52:	d9f6      	bls.n	8000b42 <HAL_RCC_OscConfig+0x2fa>
 8000b54:	e6ba      	b.n	80008cc <HAL_RCC_OscConfig+0x84>
 8000b56:	bf00      	nop
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	42420060 	.word	0x42420060

08000b60 <HAL_RCC_GetSysClockFreq>:
{
 8000b60:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000b62:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000b64:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000b66:	ac02      	add	r4, sp, #8
 8000b68:	f103 0510 	add.w	r5, r3, #16
 8000b6c:	4622      	mov	r2, r4
 8000b6e:	6818      	ldr	r0, [r3, #0]
 8000b70:	6859      	ldr	r1, [r3, #4]
 8000b72:	3308      	adds	r3, #8
 8000b74:	c203      	stmia	r2!, {r0, r1}
 8000b76:	42ab      	cmp	r3, r5
 8000b78:	4614      	mov	r4, r2
 8000b7a:	d1f7      	bne.n	8000b6c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	f88d 3004 	strb.w	r3, [sp, #4]
 8000b82:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000b84:	4911      	ldr	r1, [pc, #68]	; (8000bcc <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000b86:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000b8a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000b8c:	f003 020c 	and.w	r2, r3, #12
 8000b90:	2a08      	cmp	r2, #8
 8000b92:	d117      	bne.n	8000bc4 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000b94:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000b98:	a806      	add	r0, sp, #24
 8000b9a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000b9c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000b9e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ba2:	d50c      	bpl.n	8000bbe <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ba4:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ba6:	480a      	ldr	r0, [pc, #40]	; (8000bd0 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ba8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000bac:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000bae:	aa06      	add	r2, sp, #24
 8000bb0:	4413      	add	r3, r2
 8000bb2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000bb6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000bba:	b007      	add	sp, #28
 8000bbc:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <HAL_RCC_GetSysClockFreq+0x74>)
 8000bc0:	4350      	muls	r0, r2
 8000bc2:	e7fa      	b.n	8000bba <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000bc6:	e7f8      	b.n	8000bba <HAL_RCC_GetSysClockFreq+0x5a>
 8000bc8:	08002824 	.word	0x08002824
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	007a1200 	.word	0x007a1200
 8000bd4:	003d0900 	.word	0x003d0900

08000bd8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bd8:	4a54      	ldr	r2, [pc, #336]	; (8000d2c <HAL_RCC_ClockConfig+0x154>)
{
 8000bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bde:	6813      	ldr	r3, [r2, #0]
{
 8000be0:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	428b      	cmp	r3, r1
{
 8000be8:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bea:	d32a      	bcc.n	8000c42 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bec:	6829      	ldr	r1, [r5, #0]
 8000bee:	078c      	lsls	r4, r1, #30
 8000bf0:	d434      	bmi.n	8000c5c <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bf2:	07ca      	lsls	r2, r1, #31
 8000bf4:	d447      	bmi.n	8000c86 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bf6:	4a4d      	ldr	r2, [pc, #308]	; (8000d2c <HAL_RCC_ClockConfig+0x154>)
 8000bf8:	6813      	ldr	r3, [r2, #0]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	429e      	cmp	r6, r3
 8000c00:	f0c0 8082 	bcc.w	8000d08 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c04:	682a      	ldr	r2, [r5, #0]
 8000c06:	4c4a      	ldr	r4, [pc, #296]	; (8000d30 <HAL_RCC_ClockConfig+0x158>)
 8000c08:	f012 0f04 	tst.w	r2, #4
 8000c0c:	f040 8087 	bne.w	8000d1e <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c10:	0713      	lsls	r3, r2, #28
 8000c12:	d506      	bpl.n	8000c22 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000c14:	6863      	ldr	r3, [r4, #4]
 8000c16:	692a      	ldr	r2, [r5, #16]
 8000c18:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000c1c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c20:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c22:	f7ff ff9d 	bl	8000b60 <HAL_RCC_GetSysClockFreq>
 8000c26:	6863      	ldr	r3, [r4, #4]
 8000c28:	4a42      	ldr	r2, [pc, #264]	; (8000d34 <HAL_RCC_ClockConfig+0x15c>)
 8000c2a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c2e:	5cd3      	ldrb	r3, [r2, r3]
 8000c30:	40d8      	lsrs	r0, r3
 8000c32:	4b41      	ldr	r3, [pc, #260]	; (8000d38 <HAL_RCC_ClockConfig+0x160>)
 8000c34:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c36:	2000      	movs	r0, #0
 8000c38:	f7ff faf4 	bl	8000224 <HAL_InitTick>
  return HAL_OK;
 8000c3c:	2000      	movs	r0, #0
}
 8000c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c42:	6813      	ldr	r3, [r2, #0]
 8000c44:	f023 0307 	bic.w	r3, r3, #7
 8000c48:	430b      	orrs	r3, r1
 8000c4a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c4c:	6813      	ldr	r3, [r2, #0]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d0ca      	beq.n	8000bec <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000c56:	2001      	movs	r0, #1
 8000c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c5c:	4b34      	ldr	r3, [pc, #208]	; (8000d30 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c5e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c62:	bf1e      	ittt	ne
 8000c64:	685a      	ldrne	r2, [r3, #4]
 8000c66:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000c6a:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c6c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c6e:	bf42      	ittt	mi
 8000c70:	685a      	ldrmi	r2, [r3, #4]
 8000c72:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000c76:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c78:	685a      	ldr	r2, [r3, #4]
 8000c7a:	68a8      	ldr	r0, [r5, #8]
 8000c7c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c80:	4302      	orrs	r2, r0
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	e7b5      	b.n	8000bf2 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c86:	686a      	ldr	r2, [r5, #4]
 8000c88:	4c29      	ldr	r4, [pc, #164]	; (8000d30 <HAL_RCC_ClockConfig+0x158>)
 8000c8a:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c8c:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c8e:	d11c      	bne.n	8000cca <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c90:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c94:	d0df      	beq.n	8000c56 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c96:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c98:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c9c:	f023 0303 	bic.w	r3, r3, #3
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000ca4:	f7ff fb00 	bl	80002a8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ca8:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000caa:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d114      	bne.n	8000cda <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cb0:	6863      	ldr	r3, [r4, #4]
 8000cb2:	f003 030c 	and.w	r3, r3, #12
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	d09d      	beq.n	8000bf6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cba:	f7ff faf5 	bl	80002a8 <HAL_GetTick>
 8000cbe:	1bc0      	subs	r0, r0, r7
 8000cc0:	4540      	cmp	r0, r8
 8000cc2:	d9f5      	bls.n	8000cb0 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cca:	2a02      	cmp	r2, #2
 8000ccc:	d102      	bne.n	8000cd4 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cce:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000cd2:	e7df      	b.n	8000c94 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cd4:	f013 0f02 	tst.w	r3, #2
 8000cd8:	e7dc      	b.n	8000c94 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d10f      	bne.n	8000cfe <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cde:	6863      	ldr	r3, [r4, #4]
 8000ce0:	f003 030c 	and.w	r3, r3, #12
 8000ce4:	2b08      	cmp	r3, #8
 8000ce6:	d086      	beq.n	8000bf6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ce8:	f7ff fade 	bl	80002a8 <HAL_GetTick>
 8000cec:	1bc0      	subs	r0, r0, r7
 8000cee:	4540      	cmp	r0, r8
 8000cf0:	d9f5      	bls.n	8000cde <HAL_RCC_ClockConfig+0x106>
 8000cf2:	e7e7      	b.n	8000cc4 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cf4:	f7ff fad8 	bl	80002a8 <HAL_GetTick>
 8000cf8:	1bc0      	subs	r0, r0, r7
 8000cfa:	4540      	cmp	r0, r8
 8000cfc:	d8e2      	bhi.n	8000cc4 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cfe:	6863      	ldr	r3, [r4, #4]
 8000d00:	f013 0f0c 	tst.w	r3, #12
 8000d04:	d1f6      	bne.n	8000cf4 <HAL_RCC_ClockConfig+0x11c>
 8000d06:	e776      	b.n	8000bf6 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d08:	6813      	ldr	r3, [r2, #0]
 8000d0a:	f023 0307 	bic.w	r3, r3, #7
 8000d0e:	4333      	orrs	r3, r6
 8000d10:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d12:	6813      	ldr	r3, [r2, #0]
 8000d14:	f003 0307 	and.w	r3, r3, #7
 8000d18:	429e      	cmp	r6, r3
 8000d1a:	d19c      	bne.n	8000c56 <HAL_RCC_ClockConfig+0x7e>
 8000d1c:	e772      	b.n	8000c04 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d1e:	6863      	ldr	r3, [r4, #4]
 8000d20:	68e9      	ldr	r1, [r5, #12]
 8000d22:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d26:	430b      	orrs	r3, r1
 8000d28:	6063      	str	r3, [r4, #4]
 8000d2a:	e771      	b.n	8000c10 <HAL_RCC_ClockConfig+0x38>
 8000d2c:	40022000 	.word	0x40022000
 8000d30:	40021000 	.word	0x40021000
 8000d34:	08002844 	.word	0x08002844
 8000d38:	20000010 	.word	0x20000010

08000d3c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000d3e:	4a05      	ldr	r2, [pc, #20]	; (8000d54 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000d46:	5cd3      	ldrb	r3, [r2, r3]
 8000d48:	4a03      	ldr	r2, [pc, #12]	; (8000d58 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000d4a:	6810      	ldr	r0, [r2, #0]
}    
 8000d4c:	40d8      	lsrs	r0, r3
 8000d4e:	4770      	bx	lr
 8000d50:	40021000 	.word	0x40021000
 8000d54:	08002854 	.word	0x08002854
 8000d58:	20000010 	.word	0x20000010

08000d5c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000d66:	5cd3      	ldrb	r3, [r2, r3]
 8000d68:	4a03      	ldr	r2, [pc, #12]	; (8000d78 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000d6a:	6810      	ldr	r0, [r2, #0]
} 
 8000d6c:	40d8      	lsrs	r0, r3
 8000d6e:	4770      	bx	lr
 8000d70:	40021000 	.word	0x40021000
 8000d74:	08002854 	.word	0x08002854
 8000d78:	20000010 	.word	0x20000010

08000d7c <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d80:	4604      	mov	r4, r0
 8000d82:	4688      	mov	r8, r1
 8000d84:	4617      	mov	r7, r2
 8000d86:	461d      	mov	r5, r3
 8000d88:	9e06      	ldr	r6, [sp, #24]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000d8a:	6822      	ldr	r2, [r4, #0]
 8000d8c:	6893      	ldr	r3, [r2, #8]
 8000d8e:	ea38 0303 	bics.w	r3, r8, r3
 8000d92:	bf0c      	ite	eq
 8000d94:	2301      	moveq	r3, #1
 8000d96:	2300      	movne	r3, #0
 8000d98:	429f      	cmp	r7, r3
 8000d9a:	d102      	bne.n	8000da2 <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000d9c:	2000      	movs	r0, #0
}
 8000d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000da2:	1c6b      	adds	r3, r5, #1
 8000da4:	d0f2      	beq.n	8000d8c <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000da6:	bb55      	cbnz	r5, 8000dfe <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000da8:	6823      	ldr	r3, [r4, #0]
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000db0:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000db2:	6862      	ldr	r2, [r4, #4]
 8000db4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000db8:	d10a      	bne.n	8000dd0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8000dba:	68a2      	ldr	r2, [r4, #8]
 8000dbc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000dc0:	d002      	beq.n	8000dc8 <SPI_WaitFlagStateUntilTimeout+0x4c>
 8000dc2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000dc6:	d103      	bne.n	8000dd0 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000dce:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000dd0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000dd2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000dd6:	d109      	bne.n	8000dec <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000dde:	0412      	lsls	r2, r2, #16
 8000de0:	0c12      	lsrs	r2, r2, #16
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000dea:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8000dec:	2301      	movs	r3, #1
 8000dee:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000df2:	2300      	movs	r3, #0
 8000df4:	2003      	movs	r0, #3
 8000df6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000dfe:	f7ff fa53 	bl	80002a8 <HAL_GetTick>
 8000e02:	1b80      	subs	r0, r0, r6
 8000e04:	4285      	cmp	r5, r0
 8000e06:	d8c0      	bhi.n	8000d8a <SPI_WaitFlagStateUntilTimeout+0xe>
 8000e08:	e7ce      	b.n	8000da8 <SPI_WaitFlagStateUntilTimeout+0x2c>

08000e0a <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000e0a:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	9200      	str	r2, [sp, #0]
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	2200      	movs	r2, #0
{
 8000e14:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000e16:	f7ff ffb1 	bl	8000d7c <SPI_WaitFlagStateUntilTimeout>
 8000e1a:	b120      	cbz	r0, 8000e26 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8000e1c:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000e1e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e20:	f043 0320 	orr.w	r3, r3, #32
 8000e24:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8000e26:	b002      	add	sp, #8
 8000e28:	bd10      	pop	{r4, pc}
	...

08000e2c <HAL_SPI_TransmitReceive_DMA>:
{
 8000e2c:	b538      	push	{r3, r4, r5, lr}
 8000e2e:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8000e30:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 8000e34:	2801      	cmp	r0, #1
 8000e36:	d067      	beq.n	8000f08 <HAL_SPI_TransmitReceive_DMA+0xdc>
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  tmp  = hspi->State;
 8000e3e:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8000e42:	b2c0      	uxtb	r0, r0
  if(!((tmp == HAL_SPI_STATE_READY) ||
 8000e44:	2801      	cmp	r0, #1
 8000e46:	d008      	beq.n	8000e5a <HAL_SPI_TransmitReceive_DMA+0x2e>
 8000e48:	6865      	ldr	r5, [r4, #4]
 8000e4a:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 8000e4e:	d157      	bne.n	8000f00 <HAL_SPI_TransmitReceive_DMA+0xd4>
      ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8000e50:	68a5      	ldr	r5, [r4, #8]
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d154      	bne.n	8000f00 <HAL_SPI_TransmitReceive_DMA+0xd4>
 8000e56:	2804      	cmp	r0, #4
 8000e58:	d152      	bne.n	8000f00 <HAL_SPI_TransmitReceive_DMA+0xd4>
  if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
 8000e5a:	2900      	cmp	r1, #0
 8000e5c:	d052      	beq.n	8000f04 <HAL_SPI_TransmitReceive_DMA+0xd8>
 8000e5e:	2a00      	cmp	r2, #0
 8000e60:	d050      	beq.n	8000f04 <HAL_SPI_TransmitReceive_DMA+0xd8>
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d04e      	beq.n	8000f04 <HAL_SPI_TransmitReceive_DMA+0xd8>
  if(hspi->State == HAL_SPI_STATE_READY)
 8000e66:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  hspi->hdmarx->XferAbortCallback = NULL;
 8000e6a:	2500      	movs	r5, #0
  if(hspi->State == HAL_SPI_STATE_READY)
 8000e6c:	2801      	cmp	r0, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000e6e:	bf04      	itt	eq
 8000e70:	2005      	moveq	r0, #5
 8000e72:	f884 0051 	strbeq.w	r0, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000e76:	2000      	movs	r0, #0
 8000e78:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->TxXferCount = Size;
 8000e7a:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxXferCount = Size;
 8000e7c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8000e7e:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->RxXferSize  = Size;
 8000e80:	87a3      	strh	r3, [r4, #60]	; 0x3c
  if(hspi->State == HAL_SPI_STATE_BUSY_RX)
 8000e82:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->RxISR       = NULL;
 8000e86:	6420      	str	r0, [r4, #64]	; 0x40
  if(hspi->State == HAL_SPI_STATE_BUSY_RX)
 8000e88:	2b04      	cmp	r3, #4
  hspi->TxISR       = NULL;
 8000e8a:	6460      	str	r0, [r4, #68]	; 0x44
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8000e8c:	bf0c      	ite	eq
 8000e8e:	4b1f      	ldreq	r3, [pc, #124]	; (8000f0c <HAL_SPI_TransmitReceive_DMA+0xe0>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8000e90:	4b1f      	ldrne	r3, [pc, #124]	; (8000f10 <HAL_SPI_TransmitReceive_DMA+0xe4>)
 8000e92:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
  hspi->pTxBuffPtr  = (uint8_t*)pTxData;
 8000e94:	6321      	str	r1, [r4, #48]	; 0x30
  hspi->pRxBuffPtr  = (uint8_t*)pRxData;
 8000e96:	63a2      	str	r2, [r4, #56]	; 0x38
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8000e98:	bf0b      	itete	eq
 8000e9a:	62c3      	streq	r3, [r0, #44]	; 0x2c
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8000e9c:	62c3      	strne	r3, [r0, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8000e9e:	4b1d      	ldreq	r3, [pc, #116]	; (8000f14 <HAL_SPI_TransmitReceive_DMA+0xe8>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8000ea0:	4b1d      	ldrne	r3, [pc, #116]	; (8000f18 <HAL_SPI_TransmitReceive_DMA+0xec>)
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 8000ea2:	6821      	ldr	r1, [r4, #0]
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8000ea4:	6283      	str	r3, [r0, #40]	; 0x28
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <HAL_SPI_TransmitReceive_DMA+0xf0>)
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 8000ea8:	310c      	adds	r1, #12
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8000eaa:	6303      	str	r3, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 8000eac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  hspi->hdmarx->XferAbortCallback = NULL;
 8000eae:	6345      	str	r5, [r0, #52]	; 0x34
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	f7ff fab9 	bl	8000428 <HAL_DMA_Start_IT>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8000eb6:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8000eb8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8000eba:	6853      	ldr	r3, [r2, #4]
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 8000ebc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6053      	str	r3, [r2, #4]
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 8000ec4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000ec6:	320c      	adds	r2, #12
 8000ec8:	b29b      	uxth	r3, r3
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8000eca:	62c5      	str	r5, [r0, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8000ecc:	6285      	str	r5, [r0, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8000ece:	6305      	str	r5, [r0, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8000ed0:	6345      	str	r5, [r0, #52]	; 0x34
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 8000ed2:	f7ff faa9 	bl	8000428 <HAL_DMA_Start_IT>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8000ed6:	2000      	movs	r0, #0
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000ed8:	6823      	ldr	r3, [r4, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000ede:	bf5e      	ittt	pl
 8000ee0:	681a      	ldrpl	r2, [r3, #0]
 8000ee2:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8000ee6:	601a      	strpl	r2, [r3, #0]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	f042 0220 	orr.w	r2, r2, #32
 8000eee:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8000ef0:	685a      	ldr	r2, [r3, #4]
 8000ef2:	f042 0202 	orr.w	r2, r2, #2
 8000ef6:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hspi);
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000efe:	bd38      	pop	{r3, r4, r5, pc}
    errorcode = HAL_BUSY;
 8000f00:	2002      	movs	r0, #2
 8000f02:	e7f9      	b.n	8000ef8 <HAL_SPI_TransmitReceive_DMA+0xcc>
    errorcode = HAL_ERROR;
 8000f04:	2001      	movs	r0, #1
 8000f06:	e7f7      	b.n	8000ef8 <HAL_SPI_TransmitReceive_DMA+0xcc>
  __HAL_LOCK(hspi);
 8000f08:	2002      	movs	r0, #2
}
 8000f0a:	bd38      	pop	{r3, r4, r5, pc}
 8000f0c:	08000ff3 	.word	0x08000ff3
 8000f10:	08000fff 	.word	0x08000fff
 8000f14:	0800102d 	.word	0x0800102d
 8000f18:	0800107d 	.word	0x0800107d
 8000f1c:	0800100b 	.word	0x0800100b

08000f20 <HAL_SPI_Receive_DMA>:
{
 8000f20:	4613      	mov	r3, r2
  if((hspi->Init.Direction == SPI_DIRECTION_2LINES)&&(hspi->Init.Mode == SPI_MODE_MASTER))
 8000f22:	6882      	ldr	r2, [r0, #8]
{
 8000f24:	b570      	push	{r4, r5, r6, lr}
 8000f26:	4604      	mov	r4, r0
 8000f28:	460d      	mov	r5, r1
  if((hspi->Init.Direction == SPI_DIRECTION_2LINES)&&(hspi->Init.Mode == SPI_MODE_MASTER))
 8000f2a:	b95a      	cbnz	r2, 8000f44 <HAL_SPI_Receive_DMA+0x24>
 8000f2c:	6846      	ldr	r6, [r0, #4]
 8000f2e:	f5b6 7f82 	cmp.w	r6, #260	; 0x104
 8000f32:	d107      	bne.n	8000f44 <HAL_SPI_Receive_DMA+0x24>
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 8000f34:	2204      	movs	r2, #4
}
 8000f36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 8000f3a:	f880 2051 	strb.w	r2, [r0, #81]	; 0x51
     return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8000f3e:	460a      	mov	r2, r1
 8000f40:	f7ff bf74 	b.w	8000e2c <HAL_SPI_TransmitReceive_DMA>
  __HAL_LOCK(hspi);
 8000f44:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
 8000f48:	2901      	cmp	r1, #1
 8000f4a:	d046      	beq.n	8000fda <HAL_SPI_Receive_DMA+0xba>
 8000f4c:	2101      	movs	r1, #1
  if(hspi->State != HAL_SPI_STATE_READY)
 8000f4e:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  __HAL_LOCK(hspi);
 8000f52:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
  if(hspi->State != HAL_SPI_STATE_READY)
 8000f56:	b2c0      	uxtb	r0, r0
 8000f58:	4288      	cmp	r0, r1
 8000f5a:	d13c      	bne.n	8000fd6 <HAL_SPI_Receive_DMA+0xb6>
  if((pData == NULL) || (Size == 0U))
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d036      	beq.n	8000fce <HAL_SPI_Receive_DMA+0xae>
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d034      	beq.n	8000fce <HAL_SPI_Receive_DMA+0xae>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8000f64:	2104      	movs	r1, #4
 8000f66:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	6561      	str	r1, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8000f6e:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8000f70:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000f72:	6461      	str	r1, [r4, #68]	; 0x44
  hspi->TxXferCount = 0U;
 8000f74:	86e1      	strh	r1, [r4, #54]	; 0x36
  hspi->TxXferSize  = 0U;
 8000f76:	86a1      	strh	r1, [r4, #52]	; 0x34
 8000f78:	6821      	ldr	r1, [r4, #0]
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000f7a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->RxXferSize  = Size;
 8000f7e:	87a3      	strh	r3, [r4, #60]	; 0x3c
    SPI_1LINE_RX(hspi);
 8000f80:	bf08      	it	eq
 8000f82:	680b      	ldreq	r3, [r1, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8000f84:	63a5      	str	r5, [r4, #56]	; 0x38
    SPI_1LINE_RX(hspi);
 8000f86:	bf04      	itt	eq
 8000f88:	f423 4380 	biceq.w	r3, r3, #16384	; 0x4000
 8000f8c:	600b      	streq	r3, [r1, #0]
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8000f8e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000f90:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <HAL_SPI_Receive_DMA+0xc0>)
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 8000f92:	462a      	mov	r2, r5
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8000f94:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <HAL_SPI_Receive_DMA+0xc4>)
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 8000f98:	310c      	adds	r1, #12
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8000f9a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_SPI_Receive_DMA+0xc8>)
 8000f9e:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmarx->XferAbortCallback = NULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	6343      	str	r3, [r0, #52]	; 0x34
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 8000fa4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	f7ff fa3e 	bl	8000428 <HAL_DMA_Start_IT>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8000fac:	2000      	movs	r0, #0
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000fae:	6823      	ldr	r3, [r4, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000fb4:	bf5e      	ittt	pl
 8000fb6:	681a      	ldrpl	r2, [r3, #0]
 8000fb8:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8000fbc:	601a      	strpl	r2, [r3, #0]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	f042 0220 	orr.w	r2, r2, #32
 8000fc4:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8000fc6:	685a      	ldr	r2, [r3, #4]
 8000fc8:	f042 0201 	orr.w	r2, r2, #1
 8000fcc:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hspi);
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8000fd4:	bd70      	pop	{r4, r5, r6, pc}
    errorcode = HAL_BUSY;
 8000fd6:	2002      	movs	r0, #2
 8000fd8:	e7f9      	b.n	8000fce <HAL_SPI_Receive_DMA+0xae>
  __HAL_LOCK(hspi);
 8000fda:	2002      	movs	r0, #2
}
 8000fdc:	bd70      	pop	{r4, r5, r6, pc}
 8000fde:	bf00      	nop
 8000fe0:	08000ff3 	.word	0x08000ff3
 8000fe4:	0800102d 	.word	0x0800102d
 8000fe8:	0800100b 	.word	0x0800100b

08000fec <HAL_SPI_RxCpltCallback>:
 8000fec:	4770      	bx	lr

08000fee <HAL_SPI_TxRxCpltCallback>:
 8000fee:	4770      	bx	lr

08000ff0 <HAL_SPI_RxHalfCpltCallback>:
 8000ff0:	4770      	bx	lr

08000ff2 <SPI_DMAHalfReceiveCplt>:
{
 8000ff2:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8000ff4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000ff6:	f7ff fffb 	bl	8000ff0 <HAL_SPI_RxHalfCpltCallback>
 8000ffa:	bd08      	pop	{r3, pc}

08000ffc <HAL_SPI_TxRxHalfCpltCallback>:
 8000ffc:	4770      	bx	lr

08000ffe <SPI_DMAHalfTransmitReceiveCplt>:
{
 8000ffe:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8001000:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001002:	f7ff fffb 	bl	8000ffc <HAL_SPI_TxRxHalfCpltCallback>
 8001006:	bd08      	pop	{r3, pc}

08001008 <HAL_SPI_ErrorCallback>:
 8001008:	4770      	bx	lr

0800100a <SPI_DMAError>:
  SPI_HandleTypeDef* hspi = (SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800100a:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800100c:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800100e:	6802      	ldr	r2, [r0, #0]
 8001010:	6853      	ldr	r3, [r2, #4]
 8001012:	f023 0303 	bic.w	r3, r3, #3
 8001016:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001018:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800101a:	f043 0310 	orr.w	r3, r3, #16
 800101e:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001020:	2301      	movs	r3, #1
 8001022:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 8001026:	f7ff ffef 	bl	8001008 <HAL_SPI_ErrorCallback>
 800102a:	bd08      	pop	{r3, pc}

0800102c <SPI_DMAReceiveCplt>:
{
 800102c:	b508      	push	{r3, lr}
 800102e:	4603      	mov	r3, r0
  if((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8001030:	681b      	ldr	r3, [r3, #0]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001032:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	069b      	lsls	r3, r3, #26
 8001038:	d41d      	bmi.n	8001076 <SPI_DMAReceiveCplt+0x4a>
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800103a:	6803      	ldr	r3, [r0, #0]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	f022 0203 	bic.w	r2, r2, #3
 8001042:	605a      	str	r2, [r3, #4]
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001044:	6842      	ldr	r2, [r0, #4]
 8001046:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800104a:	d10a      	bne.n	8001062 <SPI_DMAReceiveCplt+0x36>
 800104c:	6882      	ldr	r2, [r0, #8]
 800104e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001052:	d002      	beq.n	800105a <SPI_DMAReceiveCplt+0x2e>
 8001054:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001058:	d103      	bne.n	8001062 <SPI_DMAReceiveCplt+0x36>
      __HAL_SPI_DISABLE(hspi);
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001060:	601a      	str	r2, [r3, #0]
    hspi->RxXferCount = 0U;
 8001062:	2300      	movs	r3, #0
 8001064:	87c3      	strh	r3, [r0, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8001066:	2301      	movs	r3, #1
 8001068:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800106c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800106e:	b113      	cbz	r3, 8001076 <SPI_DMAReceiveCplt+0x4a>
      HAL_SPI_ErrorCallback(hspi);
 8001070:	f7ff ffca 	bl	8001008 <HAL_SPI_ErrorCallback>
      return;
 8001074:	bd08      	pop	{r3, pc}
  HAL_SPI_RxCpltCallback(hspi);
 8001076:	f7ff ffb9 	bl	8000fec <HAL_SPI_RxCpltCallback>
 800107a:	bd08      	pop	{r3, pc}

0800107c <SPI_DMATransmitReceiveCplt>:
{
 800107c:	b538      	push	{r3, r4, r5, lr}
 800107e:	4605      	mov	r5, r0
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001080:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 8001082:	f7ff f911 	bl	80002a8 <HAL_GetTick>
  if((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8001086:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8001088:	4602      	mov	r2, r0
  if((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	069b      	lsls	r3, r3, #26
 800108e:	d419      	bmi.n	80010c4 <SPI_DMATransmitReceiveCplt+0x48>
    if(SPI_CheckFlag_BSY(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001090:	2164      	movs	r1, #100	; 0x64
 8001092:	4620      	mov	r0, r4
 8001094:	f7ff feb9 	bl	8000e0a <SPI_CheckFlag_BSY>
 8001098:	b118      	cbz	r0, 80010a2 <SPI_DMATransmitReceiveCplt+0x26>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800109a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800109c:	f043 0320 	orr.w	r3, r3, #32
 80010a0:	6563      	str	r3, [r4, #84]	; 0x54
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80010a2:	6822      	ldr	r2, [r4, #0]
 80010a4:	6853      	ldr	r3, [r2, #4]
 80010a6:	f023 0303 	bic.w	r3, r3, #3
 80010aa:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 80010ac:	2300      	movs	r3, #0
 80010ae:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80010b0:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80010b2:	2301      	movs	r3, #1
 80010b4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80010b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80010ba:	b11b      	cbz	r3, 80010c4 <SPI_DMATransmitReceiveCplt+0x48>
      HAL_SPI_ErrorCallback(hspi);
 80010bc:	4620      	mov	r0, r4
 80010be:	f7ff ffa3 	bl	8001008 <HAL_SPI_ErrorCallback>
      return;
 80010c2:	bd38      	pop	{r3, r4, r5, pc}
  HAL_SPI_TxRxCpltCallback(hspi);
 80010c4:	4620      	mov	r0, r4
 80010c6:	f7ff ff92 	bl	8000fee <HAL_SPI_TxRxCpltCallback>
 80010ca:	bd38      	pop	{r3, r4, r5, pc}

080010cc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80010cc:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80010ce:	4604      	mov	r4, r0
 80010d0:	2800      	cmp	r0, #0
 80010d2:	d034      	beq.n	800113e <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 80010d8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80010dc:	b90b      	cbnz	r3, 80010e2 <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80010de:	f000 facd 	bl	800167c <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 80010e2:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80010e4:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80010e6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80010ea:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80010ec:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80010ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010f2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80010f4:	6863      	ldr	r3, [r4, #4]
 80010f6:	69a2      	ldr	r2, [r4, #24]
 80010f8:	4303      	orrs	r3, r0
 80010fa:	68e0      	ldr	r0, [r4, #12]
 80010fc:	4303      	orrs	r3, r0
 80010fe:	6920      	ldr	r0, [r4, #16]
 8001100:	4303      	orrs	r3, r0
 8001102:	6960      	ldr	r0, [r4, #20]
 8001104:	4303      	orrs	r3, r0
 8001106:	69e0      	ldr	r0, [r4, #28]
 8001108:	4303      	orrs	r3, r0
 800110a:	6a20      	ldr	r0, [r4, #32]
 800110c:	4303      	orrs	r3, r0
 800110e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001110:	4303      	orrs	r3, r0
 8001112:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001116:	4303      	orrs	r3, r0
 8001118:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800111a:	0c12      	lsrs	r2, r2, #16
 800111c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800111e:	f002 0204 	and.w	r2, r2, #4
 8001122:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001124:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001126:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001128:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800112a:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800112c:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800112e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001132:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8001134:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001136:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001138:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 800113c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800113e:	2001      	movs	r0, #1
}
 8001140:	bd10      	pop	{r4, pc}
	...

08001144 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001148:	6805      	ldr	r5, [r0, #0]
 800114a:	68c2      	ldr	r2, [r0, #12]
 800114c:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800114e:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001150:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001154:	4313      	orrs	r3, r2
 8001156:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001158:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 800115a:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800115c:	430b      	orrs	r3, r1
 800115e:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001160:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001164:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001168:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 800116a:	4313      	orrs	r3, r2
 800116c:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800116e:	696b      	ldr	r3, [r5, #20]
 8001170:	6982      	ldr	r2, [r0, #24]
 8001172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001176:	4313      	orrs	r3, r2
 8001178:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800117a:	4b40      	ldr	r3, [pc, #256]	; (800127c <UART_SetConfig+0x138>)
{
 800117c:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 800117e:	429d      	cmp	r5, r3
 8001180:	f04f 0419 	mov.w	r4, #25
 8001184:	d146      	bne.n	8001214 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001186:	f7ff fde9 	bl	8000d5c <HAL_RCC_GetPCLK2Freq>
 800118a:	fb04 f300 	mul.w	r3, r4, r0
 800118e:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001192:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001196:	00b6      	lsls	r6, r6, #2
 8001198:	fbb3 f3f6 	udiv	r3, r3, r6
 800119c:	fbb3 f3f8 	udiv	r3, r3, r8
 80011a0:	011e      	lsls	r6, r3, #4
 80011a2:	f7ff fddb 	bl	8000d5c <HAL_RCC_GetPCLK2Freq>
 80011a6:	4360      	muls	r0, r4
 80011a8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	fbb0 f7f3 	udiv	r7, r0, r3
 80011b2:	f7ff fdd3 	bl	8000d5c <HAL_RCC_GetPCLK2Freq>
 80011b6:	4360      	muls	r0, r4
 80011b8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	fbb0 f3f3 	udiv	r3, r0, r3
 80011c2:	fbb3 f3f8 	udiv	r3, r3, r8
 80011c6:	fb08 7313 	mls	r3, r8, r3, r7
 80011ca:	011b      	lsls	r3, r3, #4
 80011cc:	3332      	adds	r3, #50	; 0x32
 80011ce:	fbb3 f3f8 	udiv	r3, r3, r8
 80011d2:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80011d6:	f7ff fdc1 	bl	8000d5c <HAL_RCC_GetPCLK2Freq>
 80011da:	4360      	muls	r0, r4
 80011dc:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80011e0:	0092      	lsls	r2, r2, #2
 80011e2:	fbb0 faf2 	udiv	sl, r0, r2
 80011e6:	f7ff fdb9 	bl	8000d5c <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80011ea:	4360      	muls	r0, r4
 80011ec:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80011f6:	fbb3 f3f8 	udiv	r3, r3, r8
 80011fa:	fb08 a313 	mls	r3, r8, r3, sl
 80011fe:	011b      	lsls	r3, r3, #4
 8001200:	3332      	adds	r3, #50	; 0x32
 8001202:	fbb3 f3f8 	udiv	r3, r3, r8
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	433b      	orrs	r3, r7
 800120c:	4433      	add	r3, r6
 800120e:	60ab      	str	r3, [r5, #8]
 8001210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001214:	f7ff fd92 	bl	8000d3c <HAL_RCC_GetPCLK1Freq>
 8001218:	fb04 f300 	mul.w	r3, r4, r0
 800121c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001220:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001224:	00b6      	lsls	r6, r6, #2
 8001226:	fbb3 f3f6 	udiv	r3, r3, r6
 800122a:	fbb3 f3f8 	udiv	r3, r3, r8
 800122e:	011e      	lsls	r6, r3, #4
 8001230:	f7ff fd84 	bl	8000d3c <HAL_RCC_GetPCLK1Freq>
 8001234:	4360      	muls	r0, r4
 8001236:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	fbb0 f7f3 	udiv	r7, r0, r3
 8001240:	f7ff fd7c 	bl	8000d3c <HAL_RCC_GetPCLK1Freq>
 8001244:	4360      	muls	r0, r4
 8001246:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001250:	fbb3 f3f8 	udiv	r3, r3, r8
 8001254:	fb08 7313 	mls	r3, r8, r3, r7
 8001258:	011b      	lsls	r3, r3, #4
 800125a:	3332      	adds	r3, #50	; 0x32
 800125c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001260:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001264:	f7ff fd6a 	bl	8000d3c <HAL_RCC_GetPCLK1Freq>
 8001268:	4360      	muls	r0, r4
 800126a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800126e:	0092      	lsls	r2, r2, #2
 8001270:	fbb0 faf2 	udiv	sl, r0, r2
 8001274:	f7ff fd62 	bl	8000d3c <HAL_RCC_GetPCLK1Freq>
 8001278:	e7b7      	b.n	80011ea <UART_SetConfig+0xa6>
 800127a:	bf00      	nop
 800127c:	40013800 	.word	0x40013800

08001280 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001282:	4604      	mov	r4, r0
 8001284:	460e      	mov	r6, r1
 8001286:	4617      	mov	r7, r2
 8001288:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800128a:	6821      	ldr	r1, [r4, #0]
 800128c:	680b      	ldr	r3, [r1, #0]
 800128e:	ea36 0303 	bics.w	r3, r6, r3
 8001292:	d101      	bne.n	8001298 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001294:	2000      	movs	r0, #0
}
 8001296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001298:	1c6b      	adds	r3, r5, #1
 800129a:	d0f7      	beq.n	800128c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800129c:	b995      	cbnz	r5, 80012c4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800129e:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80012a0:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80012a2:	68da      	ldr	r2, [r3, #12]
 80012a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80012a8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012aa:	695a      	ldr	r2, [r3, #20]
 80012ac:	f022 0201 	bic.w	r2, r2, #1
 80012b0:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80012b2:	2320      	movs	r3, #32
 80012b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80012b8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80012bc:	2300      	movs	r3, #0
 80012be:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80012c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80012c4:	f7fe fff0 	bl	80002a8 <HAL_GetTick>
 80012c8:	1bc0      	subs	r0, r0, r7
 80012ca:	4285      	cmp	r5, r0
 80012cc:	d2dd      	bcs.n	800128a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80012ce:	e7e6      	b.n	800129e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080012d0 <HAL_UART_Init>:
{
 80012d0:	b510      	push	{r4, lr}
  if(huart == NULL)
 80012d2:	4604      	mov	r4, r0
 80012d4:	b340      	cbz	r0, 8001328 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80012d6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80012da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80012de:	b91b      	cbnz	r3, 80012e8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80012e0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80012e4:	f000 fa10 	bl	8001708 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80012e8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80012ea:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80012ec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80012f0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80012f2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80012f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80012f8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80012fa:	f7ff ff23 	bl	8001144 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80012fe:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001300:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001302:	691a      	ldr	r2, [r3, #16]
 8001304:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001308:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800130a:	695a      	ldr	r2, [r3, #20]
 800130c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001310:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001312:	68da      	ldr	r2, [r3, #12]
 8001314:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001318:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 800131a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800131c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800131e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001322:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001326:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001328:	2001      	movs	r0, #1
}
 800132a:	bd10      	pop	{r4, pc}

0800132c <HAL_UART_Transmit>:
{
 800132c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001330:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001332:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8001336:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8001338:	2b20      	cmp	r3, #32
{
 800133a:	460d      	mov	r5, r1
 800133c:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800133e:	d14e      	bne.n	80013de <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8001340:	2900      	cmp	r1, #0
 8001342:	d049      	beq.n	80013d8 <HAL_UART_Transmit+0xac>
 8001344:	2a00      	cmp	r2, #0
 8001346:	d047      	beq.n	80013d8 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8001348:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800134c:	2b01      	cmp	r3, #1
 800134e:	d046      	beq.n	80013de <HAL_UART_Transmit+0xb2>
 8001350:	2301      	movs	r3, #1
 8001352:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001356:	2300      	movs	r3, #0
 8001358:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800135a:	2321      	movs	r3, #33	; 0x21
 800135c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001360:	f7fe ffa2 	bl	80002a8 <HAL_GetTick>
 8001364:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8001366:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800136a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800136e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001370:	b29b      	uxth	r3, r3
 8001372:	b96b      	cbnz	r3, 8001390 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001374:	463b      	mov	r3, r7
 8001376:	4632      	mov	r2, r6
 8001378:	2140      	movs	r1, #64	; 0x40
 800137a:	4620      	mov	r0, r4
 800137c:	f7ff ff80 	bl	8001280 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001380:	b9a8      	cbnz	r0, 80013ae <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8001382:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001384:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8001388:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 800138c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001390:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001392:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8001394:	3b01      	subs	r3, #1
 8001396:	b29b      	uxth	r3, r3
 8001398:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800139a:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800139c:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800139e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013a2:	4620      	mov	r0, r4
 80013a4:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013a6:	d10e      	bne.n	80013c6 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013a8:	f7ff ff6a 	bl	8001280 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80013ac:	b110      	cbz	r0, 80013b4 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 80013ae:	2003      	movs	r0, #3
 80013b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80013b4:	882b      	ldrh	r3, [r5, #0]
 80013b6:	6822      	ldr	r2, [r4, #0]
 80013b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013bc:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80013be:	6923      	ldr	r3, [r4, #16]
 80013c0:	b943      	cbnz	r3, 80013d4 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 80013c2:	3502      	adds	r5, #2
 80013c4:	e7d3      	b.n	800136e <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013c6:	f7ff ff5b 	bl	8001280 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80013ca:	2800      	cmp	r0, #0
 80013cc:	d1ef      	bne.n	80013ae <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80013ce:	6823      	ldr	r3, [r4, #0]
 80013d0:	782a      	ldrb	r2, [r5, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	3501      	adds	r5, #1
 80013d6:	e7ca      	b.n	800136e <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80013d8:	2001      	movs	r0, #1
 80013da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80013de:	2002      	movs	r0, #2
}
 80013e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080013e4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* p, int len)
{
 80013e4:	b510      	push	{r4, lr}
 80013e6:	4614      	mov	r4, r2
  HAL_UART_Transmit(&huart2, p, len, 10);
 80013e8:	230a      	movs	r3, #10
 80013ea:	b292      	uxth	r2, r2
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <_write+0x14>)
 80013ee:	f7ff ff9d 	bl	800132c <HAL_UART_Transmit>
  return len;
}
 80013f2:	4620      	mov	r0, r4
 80013f4:	bd10      	pop	{r4, pc}
 80013f6:	bf00      	nop
 80013f8:	20000544 	.word	0x20000544

080013fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013fc:	b510      	push	{r4, lr}
 80013fe:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001400:	2228      	movs	r2, #40	; 0x28
 8001402:	2100      	movs	r1, #0
 8001404:	a806      	add	r0, sp, #24
 8001406:	f000 fc0c 	bl	8001c22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800140a:	2100      	movs	r1, #0
 800140c:	2214      	movs	r2, #20
 800140e:	a801      	add	r0, sp, #4
 8001410:	f000 fc07 	bl	8001c22 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001414:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001418:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800141a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800141c:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800141e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001420:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001424:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001426:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001428:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800142a:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800142c:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800142e:	f7ff fa0b 	bl	8000848 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001432:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001434:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001438:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143a:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800143c:	4621      	mov	r1, r4
 800143e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001440:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001442:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001444:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001446:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001448:	f7ff fbc6 	bl	8000bd8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800144c:	b010      	add	sp, #64	; 0x40
 800144e:	bd10      	pop	{r4, pc}

08001450 <spi_proc>:

    //임시 버퍼
    uint8_t spi_buf[MAX_DMA_BUFFER_SIZE];

    //DMA 버퍼 카운트
    spiCurIndex = (uint16_t)(MAX_DMA_BUFFER_SIZE-hdma_spi2_rx.Instance->CNDTR);
 8001450:	4b22      	ldr	r3, [pc, #136]	; (80014dc <spi_proc+0x8c>)
{
 8001452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    spiCurIndex = (uint16_t)(MAX_DMA_BUFFER_SIZE-hdma_spi2_rx.Instance->CNDTR);
 8001456:	681b      	ldr	r3, [r3, #0]
    //printf("%02X", (uint8_t)(spiCurIndex & 0x00FF));  // Lower value of 16
    //printf("\r\n");

    //이전까지 읽은 버퍼 위치와 DMA 버퍼 위치가 다르면
    //데이터가 들어 왔으므로 현재 DMA 버퍼 위치까지 읽어온다.
    if(spiCurIndex != spiPrevIndex)
 8001458:	4e21      	ldr	r6, [pc, #132]	; (80014e0 <spi_proc+0x90>)
    spiCurIndex = (uint16_t)(MAX_DMA_BUFFER_SIZE-hdma_spi2_rx.Instance->CNDTR);
 800145a:	685c      	ldr	r4, [r3, #4]
    if(spiCurIndex != spiPrevIndex)
 800145c:	8831      	ldrh	r1, [r6, #0]
    spiCurIndex = (uint16_t)(MAX_DMA_BUFFER_SIZE-hdma_spi2_rx.Instance->CNDTR);
 800145e:	f5c4 6480 	rsb	r4, r4, #1024	; 0x400
 8001462:	b2a4      	uxth	r4, r4
 8001464:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <spi_proc+0x94>)
    if(spiCurIndex != spiPrevIndex)
 8001466:	428c      	cmp	r4, r1
{
 8001468:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
    spiCurIndex = (uint16_t)(MAX_DMA_BUFFER_SIZE-hdma_spi2_rx.Instance->CNDTR);
 800146c:	801c      	strh	r4, [r3, #0]
    if(spiCurIndex != spiPrevIndex)
 800146e:	d031      	beq.n	80014d4 <spi_proc+0x84>
 8001470:	4d1d      	ldr	r5, [pc, #116]	; (80014e8 <spi_proc+0x98>)
    {
        //이전까지 읽은 위치가 DMA 버퍼 위치보다 크다면
        //한바퀴가 돌아간 것이기 때문에 아래와 같이 처리해준다.
        if(spiPrevIndex > spiCurIndex)
 8001472:	d22a      	bcs.n	80014ca <spi_proc+0x7a>
        {
            tail = (MAX_DMA_BUFFER_SIZE - spiPrevIndex);
 8001474:	f5c1 6780 	rsb	r7, r1, #1024	; 0x400
            rxlen = spiCurIndex - tail;
            //memcpy(spi_buf, &spiDMABuf[spiPrevIndex], tail);
            memcpy(spi_buf, &Rx[spiPrevIndex], tail);
 8001478:	b2bf      	uxth	r7, r7
 800147a:	463a      	mov	r2, r7
 800147c:	4429      	add	r1, r5
 800147e:	4668      	mov	r0, sp
 8001480:	f000 fbc4 	bl	8001c0c <memcpy>
            memcpy(&spi_buf[tail], &Rx[0], spiCurIndex);
 8001484:	4622      	mov	r2, r4
 8001486:	4629      	mov	r1, r5
 8001488:	eb0d 0007 	add.w	r0, sp, r7
            rxlen = spiCurIndex + tail;
        }
        else
        {
            rxlen = spiCurIndex - spiPrevIndex;
            memcpy(spi_buf, &Rx[spiPrevIndex], rxlen);
 800148c:	f000 fbbe 	bl	8001c0c <memcpy>
        }
        //지금까지 읽은 버퍼 위치 기억
        spiPrevIndex = spiCurIndex;
 8001490:	2300      	movs	r3, #0
 8001492:	8034      	strh	r4, [r6, #0]
        {
          if(((i+1) % 4) == 0 )
            printf("%02X \r\n", Rx[i]);

          else
            printf("%02X ", Rx[i]);
 8001494:	4f15      	ldr	r7, [pc, #84]	; (80014ec <spi_proc+0x9c>)
            printf("%02X \r\n", Rx[i]);
 8001496:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80014f8 <spi_proc+0xa8>
            fflush (stdout);
 800149a:	4e15      	ldr	r6, [pc, #84]	; (80014f0 <spi_proc+0xa0>)
 800149c:	1c5c      	adds	r4, r3, #1
            printf("%02X \r\n", Rx[i]);
 800149e:	5ce9      	ldrb	r1, [r5, r3]
          if(((i+1) % 4) == 0 )
 80014a0:	07a3      	lsls	r3, r4, #30
            printf("%02X \r\n", Rx[i]);
 80014a2:	bf0c      	ite	eq
 80014a4:	4640      	moveq	r0, r8
            printf("%02X ", Rx[i]);
 80014a6:	4638      	movne	r0, r7
 80014a8:	f000 fc6e 	bl	8001d88 <iprintf>
            fflush (stdout);
 80014ac:	6833      	ldr	r3, [r6, #0]
 80014ae:	6898      	ldr	r0, [r3, #8]
 80014b0:	f000 faac 	bl	8001a0c <fflush>
        for(i=0; i<MAX_DMA_BUFFER_SIZE; i++)
 80014b4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80014b8:	4623      	mov	r3, r4
 80014ba:	d1ef      	bne.n	800149c <spi_proc+0x4c>
        }
        printf("\r\n");
 80014bc:	480d      	ldr	r0, [pc, #52]	; (80014f4 <spi_proc+0xa4>)
        //
    }
}
 80014be:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
 80014c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        printf("\r\n");
 80014c6:	f000 bcd3 	b.w	8001e70 <puts>
            rxlen = spiCurIndex - spiPrevIndex;
 80014ca:	1a62      	subs	r2, r4, r1
            memcpy(spi_buf, &Rx[spiPrevIndex], rxlen);
 80014cc:	b292      	uxth	r2, r2
 80014ce:	4429      	add	r1, r5
 80014d0:	4668      	mov	r0, sp
 80014d2:	e7db      	b.n	800148c <spi_proc+0x3c>
}
 80014d4:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
 80014d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014dc:	20000500 	.word	0x20000500
 80014e0:	20000496 	.word	0x20000496
 80014e4:	20000494 	.word	0x20000494
 80014e8:	20000094 	.word	0x20000094
 80014ec:	0800283c 	.word	0x0800283c
 80014f0:	20000014 	.word	0x20000014
 80014f4:	08002842 	.word	0x08002842
 80014f8:	08002834 	.word	0x08002834

080014fc <main>:
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
  HAL_Init();
 8001500:	f7fe feb4 	bl	800026c <HAL_Init>
  SystemClock_Config();
 8001504:	f7ff ff7a 	bl	80013fc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	2210      	movs	r2, #16
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	4d42      	ldr	r5, [pc, #264]	; (8001614 <main+0x118>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	2100      	movs	r1, #0
 800150e:	eb0d 0002 	add.w	r0, sp, r2
 8001512:	f000 fb86 	bl	8001c22 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOD, COL_LED_Pin|SOCKET_LED_Pin, GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	f043 0304 	orr.w	r3, r3, #4
 800151e:	61ab      	str	r3, [r5, #24]
 8001520:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOD, COL_LED_Pin|SOCKET_LED_Pin, GPIO_PIN_RESET);
 8001522:	210c      	movs	r1, #12
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152c:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOD, COL_LED_Pin|SOCKET_LED_Pin, GPIO_PIN_RESET);
 800152e:	483a      	ldr	r0, [pc, #232]	; (8001618 <main+0x11c>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001530:	f043 0308 	orr.w	r3, r3, #8
 8001534:	61ab      	str	r3, [r5, #24]
 8001536:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	9302      	str	r3, [sp, #8]
 8001540:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001542:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pin = COL_LED_Pin|SOCKET_LED_Pin;
 8001544:	270c      	movs	r7, #12
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001546:	f043 0320 	orr.w	r3, r3, #32
 800154a:	61ab      	str	r3, [r5, #24]
 800154c:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001552:	f003 0320 	and.w	r3, r3, #32
 8001556:	9303      	str	r3, [sp, #12]
 8001558:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOD, COL_LED_Pin|SOCKET_LED_Pin, GPIO_PIN_RESET);
 800155a:	f7ff f96b 	bl	8000834 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155e:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001560:	a904      	add	r1, sp, #16
 8001562:	482d      	ldr	r0, [pc, #180]	; (8001618 <main+0x11c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001564:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = COL_LED_Pin|SOCKET_LED_Pin;
 8001568:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800156e:	f7ff f875 	bl	800065c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001572:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001574:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	616b      	str	r3, [r5, #20]
 800157c:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800157e:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	9304      	str	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001586:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001588:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800158a:	f7fe feb7 	bl	80002fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800158e:	200e      	movs	r0, #14
 8001590:	f7fe fee8 	bl	8000364 <HAL_NVIC_EnableIRQ>
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001594:	f44f 6980 	mov.w	r9, #1024	; 0x400
  hspi2.Init.CRCPolynomial = 10;
 8001598:	230a      	movs	r3, #10
  hspi2.Instance = SPI2;
 800159a:	4d20      	ldr	r5, [pc, #128]	; (800161c <main+0x120>)
 800159c:	4e20      	ldr	r6, [pc, #128]	; (8001620 <main+0x124>)
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800159e:	4628      	mov	r0, r5
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80015a0:	606c      	str	r4, [r5, #4]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015a2:	60ec      	str	r4, [r5, #12]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015a4:	616c      	str	r4, [r5, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80015a6:	61ac      	str	r4, [r5, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015a8:	61ec      	str	r4, [r5, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015aa:	622c      	str	r4, [r5, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015ac:	626c      	str	r4, [r5, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ae:	62ac      	str	r4, [r5, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80015b0:	62eb      	str	r3, [r5, #44]	; 0x2c
  hspi2.Instance = SPI2;
 80015b2:	602e      	str	r6, [r5, #0]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80015b4:	f8c5 9008 	str.w	r9, [r5, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80015b8:	f8c5 8010 	str.w	r8, [r5, #16]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015bc:	f7ff fd86 	bl	80010cc <HAL_SPI_Init>
  huart2.Init.BaudRate = 115200;
 80015c0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Instance = USART2;
 80015c4:	4817      	ldr	r0, [pc, #92]	; (8001624 <main+0x128>)
  huart2.Init.BaudRate = 115200;
 80015c6:	4a18      	ldr	r2, [pc, #96]	; (8001628 <main+0x12c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015c8:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 80015ca:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015ce:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015d0:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d2:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d4:	61c4      	str	r4, [r0, #28]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015d6:	6147      	str	r7, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015d8:	f7ff fe7a 	bl	80012d0 <HAL_UART_Init>
  SPI2->CR2 |= 0x0040;    // RXNE interrupt enable
 80015dc:	6873      	ldr	r3, [r6, #4]
  HAL_SPI_Receive_DMA(&hspi2, Rx, RX_BUF_SIZE);
 80015de:	464a      	mov	r2, r9
  SPI2->CR2 |= 0x0040;    // RXNE interrupt enable
 80015e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015e4:	6073      	str	r3, [r6, #4]
  SPI2->CR1 |= 0x0040;    // SPI enable
 80015e6:	6833      	ldr	r3, [r6, #0]
  HAL_SPI_Receive_DMA(&hspi2, Rx, RX_BUF_SIZE);
 80015e8:	4910      	ldr	r1, [pc, #64]	; (800162c <main+0x130>)
  SPI2->CR1 |= 0x0040;    // SPI enable
 80015ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015ee:	6033      	str	r3, [r6, #0]
  SPI2->DR = Tx[0];       // Write initial byte
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <main+0x134>)
  HAL_SPI_Receive_DMA(&hspi2, Rx, RX_BUF_SIZE);
 80015f2:	4628      	mov	r0, r5
  SPI2->DR = Tx[0];       // Write initial byte
 80015f4:	781b      	ldrb	r3, [r3, #0]
    HAL_GPIO_TogglePin(SOCKET_LED_GPIO_Port, SOCKET_LED_Pin);
 80015f6:	4c08      	ldr	r4, [pc, #32]	; (8001618 <main+0x11c>)
  SPI2->DR = Tx[0];       // Write initial byte
 80015f8:	60f3      	str	r3, [r6, #12]
  HAL_SPI_Receive_DMA(&hspi2, Rx, RX_BUF_SIZE);
 80015fa:	f7ff fc91 	bl	8000f20 <HAL_SPI_Receive_DMA>
    HAL_GPIO_TogglePin(SOCKET_LED_GPIO_Port, SOCKET_LED_Pin);
 80015fe:	4620      	mov	r0, r4
 8001600:	2108      	movs	r1, #8
 8001602:	f7ff f91c 	bl	800083e <HAL_GPIO_TogglePin>
    spi_proc();
 8001606:	f7ff ff23 	bl	8001450 <spi_proc>
    HAL_Delay(200);
 800160a:	20c8      	movs	r0, #200	; 0xc8
 800160c:	f7fe fe52 	bl	80002b4 <HAL_Delay>
 8001610:	e7f5      	b.n	80015fe <main+0x102>
 8001612:	bf00      	nop
 8001614:	40021000 	.word	0x40021000
 8001618:	40011400 	.word	0x40011400
 800161c:	200004a8 	.word	0x200004a8
 8001620:	40003800 	.word	0x40003800
 8001624:	20000544 	.word	0x20000544
 8001628:	40004400 	.word	0x40004400
 800162c:	20000094 	.word	0x20000094
 8001630:	20000008 	.word	0x20000008

08001634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001634:	4770      	bx	lr
	...

08001638 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001638:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <HAL_MspInit+0x3c>)
{
 800163a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800163c:	699a      	ldr	r2, [r3, #24]
 800163e:	f042 0201 	orr.w	r2, r2, #1
 8001642:	619a      	str	r2, [r3, #24]
 8001644:	699a      	ldr	r2, [r3, #24]
 8001646:	f002 0201 	and.w	r2, r2, #1
 800164a:	9200      	str	r2, [sp, #0]
 800164c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	69da      	ldr	r2, [r3, #28]
 8001650:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001654:	61da      	str	r2, [r3, #28]
 8001656:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001658:	4a07      	ldr	r2, [pc, #28]	; (8001678 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	9301      	str	r3, [sp, #4]
 8001660:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001662:	6853      	ldr	r3, [r2, #4]
 8001664:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001668:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800166c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166e:	b002      	add	sp, #8
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000
 8001678:	40010000 	.word	0x40010000

0800167c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800167c:	b530      	push	{r4, r5, lr}
 800167e:	4605      	mov	r5, r0
 8001680:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001682:	2210      	movs	r2, #16
 8001684:	2100      	movs	r1, #0
 8001686:	a802      	add	r0, sp, #8
 8001688:	f000 facb 	bl	8001c22 <memset>
  if(hspi->Instance==SPI2)
 800168c:	682a      	ldr	r2, [r5, #0]
 800168e:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <HAL_SPI_MspInit+0x7c>)
 8001690:	429a      	cmp	r2, r3
 8001692:	d12f      	bne.n	80016f4 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001694:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 8001698:	69da      	ldr	r2, [r3, #28]
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169a:	4818      	ldr	r0, [pc, #96]	; (80016fc <HAL_SPI_MspInit+0x80>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800169c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016a0:	61da      	str	r2, [r3, #28]
 80016a2:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a4:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016a6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80016aa:	9200      	str	r2, [sp, #0]
 80016ac:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ae:	699a      	ldr	r2, [r3, #24]

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80016b0:	4c13      	ldr	r4, [pc, #76]	; (8001700 <HAL_SPI_MspInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b2:	f042 0208 	orr.w	r2, r2, #8
 80016b6:	619a      	str	r2, [r3, #24]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80016c2:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80016c6:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c8:	f7fe ffc8 	bl	800065c <HAL_GPIO_Init>
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016cc:	2280      	movs	r2, #128	; 0x80
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80016ce:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <HAL_SPI_MspInit+0x88>)
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016d0:	60e2      	str	r2, [r4, #12]
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80016d2:	6023      	str	r3, [r4, #0]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80016d4:	2220      	movs	r2, #32
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016d6:	2300      	movs	r3, #0
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80016d8:	4620      	mov	r0, r4
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016da:	6063      	str	r3, [r4, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016dc:	60a3      	str	r3, [r4, #8]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016de:	6123      	str	r3, [r4, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016e0:	6163      	str	r3, [r4, #20]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80016e2:	61a2      	str	r2, [r4, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016e4:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80016e6:	f7fe fe5f 	bl	80003a8 <HAL_DMA_Init>
 80016ea:	b108      	cbz	r0, 80016f0 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 80016ec:	f7ff ffa2 	bl	8001634 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80016f0:	64ec      	str	r4, [r5, #76]	; 0x4c
 80016f2:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80016f4:	b007      	add	sp, #28
 80016f6:	bd30      	pop	{r4, r5, pc}
 80016f8:	40003800 	.word	0x40003800
 80016fc:	40010c00 	.word	0x40010c00
 8001700:	20000500 	.word	0x20000500
 8001704:	40020044 	.word	0x40020044

08001708 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001708:	b510      	push	{r4, lr}
 800170a:	4604      	mov	r4, r0
 800170c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170e:	2210      	movs	r2, #16
 8001710:	2100      	movs	r1, #0
 8001712:	a802      	add	r0, sp, #8
 8001714:	f000 fa85 	bl	8001c22 <memset>
  if(huart->Instance==USART2)
 8001718:	6822      	ldr	r2, [r4, #0]
 800171a:	4b16      	ldr	r3, [pc, #88]	; (8001774 <HAL_UART_MspInit+0x6c>)
 800171c:	429a      	cmp	r2, r3
 800171e:	d126      	bne.n	800176e <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001720:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001724:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001726:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8001728:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800172c:	61da      	str	r2, [r3, #28]
 800172e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	4811      	ldr	r0, [pc, #68]	; (8001778 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001732:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001736:	9200      	str	r2, [sp, #0]
 8001738:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	699a      	ldr	r2, [r3, #24]
 800173c:	f042 0204 	orr.w	r2, r2, #4
 8001740:	619a      	str	r2, [r3, #24]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	9301      	str	r3, [sp, #4]
 800174a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800174c:	2304      	movs	r3, #4
 800174e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001754:	2303      	movs	r3, #3
 8001756:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001758:	f7fe ff80 	bl	800065c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800175c:	2308      	movs	r3, #8
 800175e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001760:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	a902      	add	r1, sp, #8
 8001764:	4804      	ldr	r0, [pc, #16]	; (8001778 <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001766:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176a:	f7fe ff77 	bl	800065c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800176e:	b006      	add	sp, #24
 8001770:	bd10      	pop	{r4, pc}
 8001772:	bf00      	nop
 8001774:	40004400 	.word	0x40004400
 8001778:	40010800 	.word	0x40010800

0800177c <NMI_Handler>:
 800177c:	4770      	bx	lr

0800177e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800177e:	e7fe      	b.n	800177e <HardFault_Handler>

08001780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001780:	e7fe      	b.n	8001780 <MemManage_Handler>

08001782 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001782:	e7fe      	b.n	8001782 <BusFault_Handler>

08001784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001784:	e7fe      	b.n	8001784 <UsageFault_Handler>

08001786 <SVC_Handler>:
 8001786:	4770      	bx	lr

08001788 <DebugMon_Handler>:
 8001788:	4770      	bx	lr

0800178a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178a:	4770      	bx	lr

0800178c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178c:	f7fe bd80 	b.w	8000290 <HAL_IncTick>

08001790 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001790:	4801      	ldr	r0, [pc, #4]	; (8001798 <DMA1_Channel4_IRQHandler+0x8>)
 8001792:	f7fe be87 	b.w	80004a4 <HAL_DMA_IRQHandler>
 8001796:	bf00      	nop
 8001798:	20000500 	.word	0x20000500

0800179c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800179c:	b570      	push	{r4, r5, r6, lr}
 800179e:	460e      	mov	r6, r1
 80017a0:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a2:	460c      	mov	r4, r1
 80017a4:	1ba3      	subs	r3, r4, r6
 80017a6:	429d      	cmp	r5, r3
 80017a8:	dc01      	bgt.n	80017ae <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80017aa:	4628      	mov	r0, r5
 80017ac:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80017ae:	f3af 8000 	nop.w
 80017b2:	f804 0b01 	strb.w	r0, [r4], #1
 80017b6:	e7f5      	b.n	80017a4 <_read+0x8>

080017b8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80017b8:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80017ba:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <_sbrk+0x2c>)
{
 80017bc:	4602      	mov	r2, r0
	if (heap_end == 0)
 80017be:	6819      	ldr	r1, [r3, #0]
 80017c0:	b909      	cbnz	r1, 80017c6 <_sbrk+0xe>
		heap_end = &end;
 80017c2:	4909      	ldr	r1, [pc, #36]	; (80017e8 <_sbrk+0x30>)
 80017c4:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80017c6:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80017c8:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80017ca:	4402      	add	r2, r0
 80017cc:	428a      	cmp	r2, r1
 80017ce:	d906      	bls.n	80017de <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80017d0:	f000 f864 	bl	800189c <__errno>
 80017d4:	230c      	movs	r3, #12
 80017d6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295
 80017dc:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80017de:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80017e0:	bd08      	pop	{r3, pc}
 80017e2:	bf00      	nop
 80017e4:	20000498 	.word	0x20000498
 80017e8:	20000588 	.word	0x20000588

080017ec <_close>:

int _close(int file)
{
	return -1;
}
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	4770      	bx	lr

080017f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80017f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80017f6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80017f8:	604b      	str	r3, [r1, #4]
}
 80017fa:	4770      	bx	lr

080017fc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80017fc:	2001      	movs	r0, #1
 80017fe:	4770      	bx	lr

08001800 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001800:	2000      	movs	r0, #0
 8001802:	4770      	bx	lr

08001804 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <SystemInit+0x40>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	f042 0201 	orr.w	r2, r2, #1
 800180c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800180e:	6859      	ldr	r1, [r3, #4]
 8001810:	4a0d      	ldr	r2, [pc, #52]	; (8001848 <SystemInit+0x44>)
 8001812:	400a      	ands	r2, r1
 8001814:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800181c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001820:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001828:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001830:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001832:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001836:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001838:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800183c:	4b03      	ldr	r3, [pc, #12]	; (800184c <SystemInit+0x48>)
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40021000 	.word	0x40021000
 8001848:	f8ff0000 	.word	0xf8ff0000
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001850:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001852:	e003      	b.n	800185c <LoopCopyDataInit>

08001854 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001856:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001858:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800185a:	3104      	adds	r1, #4

0800185c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800185c:	480a      	ldr	r0, [pc, #40]	; (8001888 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001860:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001862:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001864:	d3f6      	bcc.n	8001854 <CopyDataInit>
  ldr r2, =_sbss
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001868:	e002      	b.n	8001870 <LoopFillZerobss>

0800186a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800186c:	f842 3b04 	str.w	r3, [r2], #4

08001870 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001872:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001874:	d3f9      	bcc.n	800186a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001876:	f7ff ffc5 	bl	8001804 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800187a:	f000 f9a3 	bl	8001bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800187e:	f7ff fe3d 	bl	80014fc <main>
  bx lr
 8001882:	4770      	bx	lr
  ldr r3, =_sidata
 8001884:	080028fc 	.word	0x080028fc
  ldr r0, =_sdata
 8001888:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800188c:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8001890:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8001894:	20000588 	.word	0x20000588

08001898 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001898:	e7fe      	b.n	8001898 <ADC1_2_IRQHandler>
	...

0800189c <__errno>:
 800189c:	4b01      	ldr	r3, [pc, #4]	; (80018a4 <__errno+0x8>)
 800189e:	6818      	ldr	r0, [r3, #0]
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20000014 	.word	0x20000014

080018a8 <__sflush_r>:
 80018a8:	898a      	ldrh	r2, [r1, #12]
 80018aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018ae:	4605      	mov	r5, r0
 80018b0:	0710      	lsls	r0, r2, #28
 80018b2:	460c      	mov	r4, r1
 80018b4:	d45a      	bmi.n	800196c <__sflush_r+0xc4>
 80018b6:	684b      	ldr	r3, [r1, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	dc05      	bgt.n	80018c8 <__sflush_r+0x20>
 80018bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80018be:	2b00      	cmp	r3, #0
 80018c0:	dc02      	bgt.n	80018c8 <__sflush_r+0x20>
 80018c2:	2000      	movs	r0, #0
 80018c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80018ca:	2e00      	cmp	r6, #0
 80018cc:	d0f9      	beq.n	80018c2 <__sflush_r+0x1a>
 80018ce:	2300      	movs	r3, #0
 80018d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80018d4:	682f      	ldr	r7, [r5, #0]
 80018d6:	602b      	str	r3, [r5, #0]
 80018d8:	d033      	beq.n	8001942 <__sflush_r+0x9a>
 80018da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80018dc:	89a3      	ldrh	r3, [r4, #12]
 80018de:	075a      	lsls	r2, r3, #29
 80018e0:	d505      	bpl.n	80018ee <__sflush_r+0x46>
 80018e2:	6863      	ldr	r3, [r4, #4]
 80018e4:	1ac0      	subs	r0, r0, r3
 80018e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80018e8:	b10b      	cbz	r3, 80018ee <__sflush_r+0x46>
 80018ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018ec:	1ac0      	subs	r0, r0, r3
 80018ee:	2300      	movs	r3, #0
 80018f0:	4602      	mov	r2, r0
 80018f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80018f4:	6a21      	ldr	r1, [r4, #32]
 80018f6:	4628      	mov	r0, r5
 80018f8:	47b0      	blx	r6
 80018fa:	1c43      	adds	r3, r0, #1
 80018fc:	89a3      	ldrh	r3, [r4, #12]
 80018fe:	d106      	bne.n	800190e <__sflush_r+0x66>
 8001900:	6829      	ldr	r1, [r5, #0]
 8001902:	291d      	cmp	r1, #29
 8001904:	d84b      	bhi.n	800199e <__sflush_r+0xf6>
 8001906:	4a2b      	ldr	r2, [pc, #172]	; (80019b4 <__sflush_r+0x10c>)
 8001908:	40ca      	lsrs	r2, r1
 800190a:	07d6      	lsls	r6, r2, #31
 800190c:	d547      	bpl.n	800199e <__sflush_r+0xf6>
 800190e:	2200      	movs	r2, #0
 8001910:	6062      	str	r2, [r4, #4]
 8001912:	6922      	ldr	r2, [r4, #16]
 8001914:	04d9      	lsls	r1, r3, #19
 8001916:	6022      	str	r2, [r4, #0]
 8001918:	d504      	bpl.n	8001924 <__sflush_r+0x7c>
 800191a:	1c42      	adds	r2, r0, #1
 800191c:	d101      	bne.n	8001922 <__sflush_r+0x7a>
 800191e:	682b      	ldr	r3, [r5, #0]
 8001920:	b903      	cbnz	r3, 8001924 <__sflush_r+0x7c>
 8001922:	6560      	str	r0, [r4, #84]	; 0x54
 8001924:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001926:	602f      	str	r7, [r5, #0]
 8001928:	2900      	cmp	r1, #0
 800192a:	d0ca      	beq.n	80018c2 <__sflush_r+0x1a>
 800192c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001930:	4299      	cmp	r1, r3
 8001932:	d002      	beq.n	800193a <__sflush_r+0x92>
 8001934:	4628      	mov	r0, r5
 8001936:	f000 f97d 	bl	8001c34 <_free_r>
 800193a:	2000      	movs	r0, #0
 800193c:	6360      	str	r0, [r4, #52]	; 0x34
 800193e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001942:	6a21      	ldr	r1, [r4, #32]
 8001944:	2301      	movs	r3, #1
 8001946:	4628      	mov	r0, r5
 8001948:	47b0      	blx	r6
 800194a:	1c41      	adds	r1, r0, #1
 800194c:	d1c6      	bne.n	80018dc <__sflush_r+0x34>
 800194e:	682b      	ldr	r3, [r5, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0c3      	beq.n	80018dc <__sflush_r+0x34>
 8001954:	2b1d      	cmp	r3, #29
 8001956:	d001      	beq.n	800195c <__sflush_r+0xb4>
 8001958:	2b16      	cmp	r3, #22
 800195a:	d101      	bne.n	8001960 <__sflush_r+0xb8>
 800195c:	602f      	str	r7, [r5, #0]
 800195e:	e7b0      	b.n	80018c2 <__sflush_r+0x1a>
 8001960:	89a3      	ldrh	r3, [r4, #12]
 8001962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001966:	81a3      	strh	r3, [r4, #12]
 8001968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800196c:	690f      	ldr	r7, [r1, #16]
 800196e:	2f00      	cmp	r7, #0
 8001970:	d0a7      	beq.n	80018c2 <__sflush_r+0x1a>
 8001972:	0793      	lsls	r3, r2, #30
 8001974:	bf18      	it	ne
 8001976:	2300      	movne	r3, #0
 8001978:	680e      	ldr	r6, [r1, #0]
 800197a:	bf08      	it	eq
 800197c:	694b      	ldreq	r3, [r1, #20]
 800197e:	eba6 0807 	sub.w	r8, r6, r7
 8001982:	600f      	str	r7, [r1, #0]
 8001984:	608b      	str	r3, [r1, #8]
 8001986:	f1b8 0f00 	cmp.w	r8, #0
 800198a:	dd9a      	ble.n	80018c2 <__sflush_r+0x1a>
 800198c:	4643      	mov	r3, r8
 800198e:	463a      	mov	r2, r7
 8001990:	6a21      	ldr	r1, [r4, #32]
 8001992:	4628      	mov	r0, r5
 8001994:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001996:	47b0      	blx	r6
 8001998:	2800      	cmp	r0, #0
 800199a:	dc07      	bgt.n	80019ac <__sflush_r+0x104>
 800199c:	89a3      	ldrh	r3, [r4, #12]
 800199e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019a2:	81a3      	strh	r3, [r4, #12]
 80019a4:	f04f 30ff 	mov.w	r0, #4294967295
 80019a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019ac:	4407      	add	r7, r0
 80019ae:	eba8 0800 	sub.w	r8, r8, r0
 80019b2:	e7e8      	b.n	8001986 <__sflush_r+0xde>
 80019b4:	20400001 	.word	0x20400001

080019b8 <_fflush_r>:
 80019b8:	b538      	push	{r3, r4, r5, lr}
 80019ba:	690b      	ldr	r3, [r1, #16]
 80019bc:	4605      	mov	r5, r0
 80019be:	460c      	mov	r4, r1
 80019c0:	b1db      	cbz	r3, 80019fa <_fflush_r+0x42>
 80019c2:	b118      	cbz	r0, 80019cc <_fflush_r+0x14>
 80019c4:	6983      	ldr	r3, [r0, #24]
 80019c6:	b90b      	cbnz	r3, 80019cc <_fflush_r+0x14>
 80019c8:	f000 f872 	bl	8001ab0 <__sinit>
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <_fflush_r+0x48>)
 80019ce:	429c      	cmp	r4, r3
 80019d0:	d109      	bne.n	80019e6 <_fflush_r+0x2e>
 80019d2:	686c      	ldr	r4, [r5, #4]
 80019d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019d8:	b17b      	cbz	r3, 80019fa <_fflush_r+0x42>
 80019da:	4621      	mov	r1, r4
 80019dc:	4628      	mov	r0, r5
 80019de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80019e2:	f7ff bf61 	b.w	80018a8 <__sflush_r>
 80019e6:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <_fflush_r+0x4c>)
 80019e8:	429c      	cmp	r4, r3
 80019ea:	d101      	bne.n	80019f0 <_fflush_r+0x38>
 80019ec:	68ac      	ldr	r4, [r5, #8]
 80019ee:	e7f1      	b.n	80019d4 <_fflush_r+0x1c>
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <_fflush_r+0x50>)
 80019f2:	429c      	cmp	r4, r3
 80019f4:	bf08      	it	eq
 80019f6:	68ec      	ldreq	r4, [r5, #12]
 80019f8:	e7ec      	b.n	80019d4 <_fflush_r+0x1c>
 80019fa:	2000      	movs	r0, #0
 80019fc:	bd38      	pop	{r3, r4, r5, pc}
 80019fe:	bf00      	nop
 8001a00:	0800287c 	.word	0x0800287c
 8001a04:	0800289c 	.word	0x0800289c
 8001a08:	0800285c 	.word	0x0800285c

08001a0c <fflush>:
 8001a0c:	4601      	mov	r1, r0
 8001a0e:	b920      	cbnz	r0, 8001a1a <fflush+0xe>
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <fflush+0x18>)
 8001a12:	4905      	ldr	r1, [pc, #20]	; (8001a28 <fflush+0x1c>)
 8001a14:	6818      	ldr	r0, [r3, #0]
 8001a16:	f000 b8b7 	b.w	8001b88 <_fwalk_reent>
 8001a1a:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <fflush+0x20>)
 8001a1c:	6818      	ldr	r0, [r3, #0]
 8001a1e:	f7ff bfcb 	b.w	80019b8 <_fflush_r>
 8001a22:	bf00      	nop
 8001a24:	080028bc 	.word	0x080028bc
 8001a28:	080019b9 	.word	0x080019b9
 8001a2c:	20000014 	.word	0x20000014

08001a30 <_cleanup_r>:
 8001a30:	4901      	ldr	r1, [pc, #4]	; (8001a38 <_cleanup_r+0x8>)
 8001a32:	f000 b8a9 	b.w	8001b88 <_fwalk_reent>
 8001a36:	bf00      	nop
 8001a38:	080019b9 	.word	0x080019b9

08001a3c <std.isra.0>:
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	b510      	push	{r4, lr}
 8001a40:	4604      	mov	r4, r0
 8001a42:	6003      	str	r3, [r0, #0]
 8001a44:	6043      	str	r3, [r0, #4]
 8001a46:	6083      	str	r3, [r0, #8]
 8001a48:	8181      	strh	r1, [r0, #12]
 8001a4a:	6643      	str	r3, [r0, #100]	; 0x64
 8001a4c:	81c2      	strh	r2, [r0, #14]
 8001a4e:	6103      	str	r3, [r0, #16]
 8001a50:	6143      	str	r3, [r0, #20]
 8001a52:	6183      	str	r3, [r0, #24]
 8001a54:	4619      	mov	r1, r3
 8001a56:	2208      	movs	r2, #8
 8001a58:	305c      	adds	r0, #92	; 0x5c
 8001a5a:	f000 f8e2 	bl	8001c22 <memset>
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <std.isra.0+0x38>)
 8001a60:	6224      	str	r4, [r4, #32]
 8001a62:	6263      	str	r3, [r4, #36]	; 0x24
 8001a64:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <std.isra.0+0x3c>)
 8001a66:	62a3      	str	r3, [r4, #40]	; 0x28
 8001a68:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <std.isra.0+0x40>)
 8001a6a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <std.isra.0+0x44>)
 8001a6e:	6323      	str	r3, [r4, #48]	; 0x30
 8001a70:	bd10      	pop	{r4, pc}
 8001a72:	bf00      	nop
 8001a74:	08001ea1 	.word	0x08001ea1
 8001a78:	08001ec3 	.word	0x08001ec3
 8001a7c:	08001efb 	.word	0x08001efb
 8001a80:	08001f1f 	.word	0x08001f1f

08001a84 <__sfmoreglue>:
 8001a84:	b570      	push	{r4, r5, r6, lr}
 8001a86:	2568      	movs	r5, #104	; 0x68
 8001a88:	1e4a      	subs	r2, r1, #1
 8001a8a:	4355      	muls	r5, r2
 8001a8c:	460e      	mov	r6, r1
 8001a8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001a92:	f000 f91b 	bl	8001ccc <_malloc_r>
 8001a96:	4604      	mov	r4, r0
 8001a98:	b140      	cbz	r0, 8001aac <__sfmoreglue+0x28>
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	e880 0042 	stmia.w	r0, {r1, r6}
 8001aa0:	300c      	adds	r0, #12
 8001aa2:	60a0      	str	r0, [r4, #8]
 8001aa4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001aa8:	f000 f8bb 	bl	8001c22 <memset>
 8001aac:	4620      	mov	r0, r4
 8001aae:	bd70      	pop	{r4, r5, r6, pc}

08001ab0 <__sinit>:
 8001ab0:	6983      	ldr	r3, [r0, #24]
 8001ab2:	b510      	push	{r4, lr}
 8001ab4:	4604      	mov	r4, r0
 8001ab6:	bb33      	cbnz	r3, 8001b06 <__sinit+0x56>
 8001ab8:	6483      	str	r3, [r0, #72]	; 0x48
 8001aba:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001abc:	6503      	str	r3, [r0, #80]	; 0x50
 8001abe:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <__sinit+0x58>)
 8001ac0:	4a12      	ldr	r2, [pc, #72]	; (8001b0c <__sinit+0x5c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6282      	str	r2, [r0, #40]	; 0x28
 8001ac6:	4298      	cmp	r0, r3
 8001ac8:	bf04      	itt	eq
 8001aca:	2301      	moveq	r3, #1
 8001acc:	6183      	streq	r3, [r0, #24]
 8001ace:	f000 f81f 	bl	8001b10 <__sfp>
 8001ad2:	6060      	str	r0, [r4, #4]
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	f000 f81b 	bl	8001b10 <__sfp>
 8001ada:	60a0      	str	r0, [r4, #8]
 8001adc:	4620      	mov	r0, r4
 8001ade:	f000 f817 	bl	8001b10 <__sfp>
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60e0      	str	r0, [r4, #12]
 8001ae6:	2104      	movs	r1, #4
 8001ae8:	6860      	ldr	r0, [r4, #4]
 8001aea:	f7ff ffa7 	bl	8001a3c <std.isra.0>
 8001aee:	2201      	movs	r2, #1
 8001af0:	2109      	movs	r1, #9
 8001af2:	68a0      	ldr	r0, [r4, #8]
 8001af4:	f7ff ffa2 	bl	8001a3c <std.isra.0>
 8001af8:	2202      	movs	r2, #2
 8001afa:	2112      	movs	r1, #18
 8001afc:	68e0      	ldr	r0, [r4, #12]
 8001afe:	f7ff ff9d 	bl	8001a3c <std.isra.0>
 8001b02:	2301      	movs	r3, #1
 8001b04:	61a3      	str	r3, [r4, #24]
 8001b06:	bd10      	pop	{r4, pc}
 8001b08:	080028bc 	.word	0x080028bc
 8001b0c:	08001a31 	.word	0x08001a31

08001b10 <__sfp>:
 8001b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b12:	4b1c      	ldr	r3, [pc, #112]	; (8001b84 <__sfp+0x74>)
 8001b14:	4607      	mov	r7, r0
 8001b16:	681e      	ldr	r6, [r3, #0]
 8001b18:	69b3      	ldr	r3, [r6, #24]
 8001b1a:	b913      	cbnz	r3, 8001b22 <__sfp+0x12>
 8001b1c:	4630      	mov	r0, r6
 8001b1e:	f7ff ffc7 	bl	8001ab0 <__sinit>
 8001b22:	3648      	adds	r6, #72	; 0x48
 8001b24:	68b4      	ldr	r4, [r6, #8]
 8001b26:	6873      	ldr	r3, [r6, #4]
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	d503      	bpl.n	8001b34 <__sfp+0x24>
 8001b2c:	6833      	ldr	r3, [r6, #0]
 8001b2e:	b133      	cbz	r3, 8001b3e <__sfp+0x2e>
 8001b30:	6836      	ldr	r6, [r6, #0]
 8001b32:	e7f7      	b.n	8001b24 <__sfp+0x14>
 8001b34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001b38:	b16d      	cbz	r5, 8001b56 <__sfp+0x46>
 8001b3a:	3468      	adds	r4, #104	; 0x68
 8001b3c:	e7f4      	b.n	8001b28 <__sfp+0x18>
 8001b3e:	2104      	movs	r1, #4
 8001b40:	4638      	mov	r0, r7
 8001b42:	f7ff ff9f 	bl	8001a84 <__sfmoreglue>
 8001b46:	6030      	str	r0, [r6, #0]
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	d1f1      	bne.n	8001b30 <__sfp+0x20>
 8001b4c:	230c      	movs	r3, #12
 8001b4e:	4604      	mov	r4, r0
 8001b50:	603b      	str	r3, [r7, #0]
 8001b52:	4620      	mov	r0, r4
 8001b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b5a:	81e3      	strh	r3, [r4, #14]
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	6665      	str	r5, [r4, #100]	; 0x64
 8001b60:	81a3      	strh	r3, [r4, #12]
 8001b62:	6025      	str	r5, [r4, #0]
 8001b64:	60a5      	str	r5, [r4, #8]
 8001b66:	6065      	str	r5, [r4, #4]
 8001b68:	6125      	str	r5, [r4, #16]
 8001b6a:	6165      	str	r5, [r4, #20]
 8001b6c:	61a5      	str	r5, [r4, #24]
 8001b6e:	2208      	movs	r2, #8
 8001b70:	4629      	mov	r1, r5
 8001b72:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001b76:	f000 f854 	bl	8001c22 <memset>
 8001b7a:	6365      	str	r5, [r4, #52]	; 0x34
 8001b7c:	63a5      	str	r5, [r4, #56]	; 0x38
 8001b7e:	64a5      	str	r5, [r4, #72]	; 0x48
 8001b80:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001b82:	e7e6      	b.n	8001b52 <__sfp+0x42>
 8001b84:	080028bc 	.word	0x080028bc

08001b88 <_fwalk_reent>:
 8001b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b8c:	4680      	mov	r8, r0
 8001b8e:	4689      	mov	r9, r1
 8001b90:	2600      	movs	r6, #0
 8001b92:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001b96:	b914      	cbnz	r4, 8001b9e <_fwalk_reent+0x16>
 8001b98:	4630      	mov	r0, r6
 8001b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b9e:	68a5      	ldr	r5, [r4, #8]
 8001ba0:	6867      	ldr	r7, [r4, #4]
 8001ba2:	3f01      	subs	r7, #1
 8001ba4:	d501      	bpl.n	8001baa <_fwalk_reent+0x22>
 8001ba6:	6824      	ldr	r4, [r4, #0]
 8001ba8:	e7f5      	b.n	8001b96 <_fwalk_reent+0xe>
 8001baa:	89ab      	ldrh	r3, [r5, #12]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d907      	bls.n	8001bc0 <_fwalk_reent+0x38>
 8001bb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	d003      	beq.n	8001bc0 <_fwalk_reent+0x38>
 8001bb8:	4629      	mov	r1, r5
 8001bba:	4640      	mov	r0, r8
 8001bbc:	47c8      	blx	r9
 8001bbe:	4306      	orrs	r6, r0
 8001bc0:	3568      	adds	r5, #104	; 0x68
 8001bc2:	e7ee      	b.n	8001ba2 <_fwalk_reent+0x1a>

08001bc4 <__libc_init_array>:
 8001bc4:	b570      	push	{r4, r5, r6, lr}
 8001bc6:	2500      	movs	r5, #0
 8001bc8:	4e0c      	ldr	r6, [pc, #48]	; (8001bfc <__libc_init_array+0x38>)
 8001bca:	4c0d      	ldr	r4, [pc, #52]	; (8001c00 <__libc_init_array+0x3c>)
 8001bcc:	1ba4      	subs	r4, r4, r6
 8001bce:	10a4      	asrs	r4, r4, #2
 8001bd0:	42a5      	cmp	r5, r4
 8001bd2:	d109      	bne.n	8001be8 <__libc_init_array+0x24>
 8001bd4:	f000 fe1a 	bl	800280c <_init>
 8001bd8:	2500      	movs	r5, #0
 8001bda:	4e0a      	ldr	r6, [pc, #40]	; (8001c04 <__libc_init_array+0x40>)
 8001bdc:	4c0a      	ldr	r4, [pc, #40]	; (8001c08 <__libc_init_array+0x44>)
 8001bde:	1ba4      	subs	r4, r4, r6
 8001be0:	10a4      	asrs	r4, r4, #2
 8001be2:	42a5      	cmp	r5, r4
 8001be4:	d105      	bne.n	8001bf2 <__libc_init_array+0x2e>
 8001be6:	bd70      	pop	{r4, r5, r6, pc}
 8001be8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bec:	4798      	blx	r3
 8001bee:	3501      	adds	r5, #1
 8001bf0:	e7ee      	b.n	8001bd0 <__libc_init_array+0xc>
 8001bf2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bf6:	4798      	blx	r3
 8001bf8:	3501      	adds	r5, #1
 8001bfa:	e7f2      	b.n	8001be2 <__libc_init_array+0x1e>
 8001bfc:	080028f4 	.word	0x080028f4
 8001c00:	080028f4 	.word	0x080028f4
 8001c04:	080028f4 	.word	0x080028f4
 8001c08:	080028f8 	.word	0x080028f8

08001c0c <memcpy>:
 8001c0c:	b510      	push	{r4, lr}
 8001c0e:	1e43      	subs	r3, r0, #1
 8001c10:	440a      	add	r2, r1
 8001c12:	4291      	cmp	r1, r2
 8001c14:	d100      	bne.n	8001c18 <memcpy+0xc>
 8001c16:	bd10      	pop	{r4, pc}
 8001c18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001c1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001c20:	e7f7      	b.n	8001c12 <memcpy+0x6>

08001c22 <memset>:
 8001c22:	4603      	mov	r3, r0
 8001c24:	4402      	add	r2, r0
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d100      	bne.n	8001c2c <memset+0xa>
 8001c2a:	4770      	bx	lr
 8001c2c:	f803 1b01 	strb.w	r1, [r3], #1
 8001c30:	e7f9      	b.n	8001c26 <memset+0x4>
	...

08001c34 <_free_r>:
 8001c34:	b538      	push	{r3, r4, r5, lr}
 8001c36:	4605      	mov	r5, r0
 8001c38:	2900      	cmp	r1, #0
 8001c3a:	d043      	beq.n	8001cc4 <_free_r+0x90>
 8001c3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c40:	1f0c      	subs	r4, r1, #4
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	bfb8      	it	lt
 8001c46:	18e4      	addlt	r4, r4, r3
 8001c48:	f000 fac6 	bl	80021d8 <__malloc_lock>
 8001c4c:	4a1e      	ldr	r2, [pc, #120]	; (8001cc8 <_free_r+0x94>)
 8001c4e:	6813      	ldr	r3, [r2, #0]
 8001c50:	4610      	mov	r0, r2
 8001c52:	b933      	cbnz	r3, 8001c62 <_free_r+0x2e>
 8001c54:	6063      	str	r3, [r4, #4]
 8001c56:	6014      	str	r4, [r2, #0]
 8001c58:	4628      	mov	r0, r5
 8001c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c5e:	f000 babc 	b.w	80021da <__malloc_unlock>
 8001c62:	42a3      	cmp	r3, r4
 8001c64:	d90b      	bls.n	8001c7e <_free_r+0x4a>
 8001c66:	6821      	ldr	r1, [r4, #0]
 8001c68:	1862      	adds	r2, r4, r1
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	bf01      	itttt	eq
 8001c6e:	681a      	ldreq	r2, [r3, #0]
 8001c70:	685b      	ldreq	r3, [r3, #4]
 8001c72:	1852      	addeq	r2, r2, r1
 8001c74:	6022      	streq	r2, [r4, #0]
 8001c76:	6063      	str	r3, [r4, #4]
 8001c78:	6004      	str	r4, [r0, #0]
 8001c7a:	e7ed      	b.n	8001c58 <_free_r+0x24>
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	b10a      	cbz	r2, 8001c86 <_free_r+0x52>
 8001c82:	42a2      	cmp	r2, r4
 8001c84:	d9fa      	bls.n	8001c7c <_free_r+0x48>
 8001c86:	6819      	ldr	r1, [r3, #0]
 8001c88:	1858      	adds	r0, r3, r1
 8001c8a:	42a0      	cmp	r0, r4
 8001c8c:	d10b      	bne.n	8001ca6 <_free_r+0x72>
 8001c8e:	6820      	ldr	r0, [r4, #0]
 8001c90:	4401      	add	r1, r0
 8001c92:	1858      	adds	r0, r3, r1
 8001c94:	4282      	cmp	r2, r0
 8001c96:	6019      	str	r1, [r3, #0]
 8001c98:	d1de      	bne.n	8001c58 <_free_r+0x24>
 8001c9a:	6810      	ldr	r0, [r2, #0]
 8001c9c:	6852      	ldr	r2, [r2, #4]
 8001c9e:	4401      	add	r1, r0
 8001ca0:	6019      	str	r1, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	e7d8      	b.n	8001c58 <_free_r+0x24>
 8001ca6:	d902      	bls.n	8001cae <_free_r+0x7a>
 8001ca8:	230c      	movs	r3, #12
 8001caa:	602b      	str	r3, [r5, #0]
 8001cac:	e7d4      	b.n	8001c58 <_free_r+0x24>
 8001cae:	6820      	ldr	r0, [r4, #0]
 8001cb0:	1821      	adds	r1, r4, r0
 8001cb2:	428a      	cmp	r2, r1
 8001cb4:	bf01      	itttt	eq
 8001cb6:	6811      	ldreq	r1, [r2, #0]
 8001cb8:	6852      	ldreq	r2, [r2, #4]
 8001cba:	1809      	addeq	r1, r1, r0
 8001cbc:	6021      	streq	r1, [r4, #0]
 8001cbe:	6062      	str	r2, [r4, #4]
 8001cc0:	605c      	str	r4, [r3, #4]
 8001cc2:	e7c9      	b.n	8001c58 <_free_r+0x24>
 8001cc4:	bd38      	pop	{r3, r4, r5, pc}
 8001cc6:	bf00      	nop
 8001cc8:	2000049c 	.word	0x2000049c

08001ccc <_malloc_r>:
 8001ccc:	b570      	push	{r4, r5, r6, lr}
 8001cce:	1ccd      	adds	r5, r1, #3
 8001cd0:	f025 0503 	bic.w	r5, r5, #3
 8001cd4:	3508      	adds	r5, #8
 8001cd6:	2d0c      	cmp	r5, #12
 8001cd8:	bf38      	it	cc
 8001cda:	250c      	movcc	r5, #12
 8001cdc:	2d00      	cmp	r5, #0
 8001cde:	4606      	mov	r6, r0
 8001ce0:	db01      	blt.n	8001ce6 <_malloc_r+0x1a>
 8001ce2:	42a9      	cmp	r1, r5
 8001ce4:	d903      	bls.n	8001cee <_malloc_r+0x22>
 8001ce6:	230c      	movs	r3, #12
 8001ce8:	6033      	str	r3, [r6, #0]
 8001cea:	2000      	movs	r0, #0
 8001cec:	bd70      	pop	{r4, r5, r6, pc}
 8001cee:	f000 fa73 	bl	80021d8 <__malloc_lock>
 8001cf2:	4a23      	ldr	r2, [pc, #140]	; (8001d80 <_malloc_r+0xb4>)
 8001cf4:	6814      	ldr	r4, [r2, #0]
 8001cf6:	4621      	mov	r1, r4
 8001cf8:	b991      	cbnz	r1, 8001d20 <_malloc_r+0x54>
 8001cfa:	4c22      	ldr	r4, [pc, #136]	; (8001d84 <_malloc_r+0xb8>)
 8001cfc:	6823      	ldr	r3, [r4, #0]
 8001cfe:	b91b      	cbnz	r3, 8001d08 <_malloc_r+0x3c>
 8001d00:	4630      	mov	r0, r6
 8001d02:	f000 f8bd 	bl	8001e80 <_sbrk_r>
 8001d06:	6020      	str	r0, [r4, #0]
 8001d08:	4629      	mov	r1, r5
 8001d0a:	4630      	mov	r0, r6
 8001d0c:	f000 f8b8 	bl	8001e80 <_sbrk_r>
 8001d10:	1c43      	adds	r3, r0, #1
 8001d12:	d126      	bne.n	8001d62 <_malloc_r+0x96>
 8001d14:	230c      	movs	r3, #12
 8001d16:	4630      	mov	r0, r6
 8001d18:	6033      	str	r3, [r6, #0]
 8001d1a:	f000 fa5e 	bl	80021da <__malloc_unlock>
 8001d1e:	e7e4      	b.n	8001cea <_malloc_r+0x1e>
 8001d20:	680b      	ldr	r3, [r1, #0]
 8001d22:	1b5b      	subs	r3, r3, r5
 8001d24:	d41a      	bmi.n	8001d5c <_malloc_r+0x90>
 8001d26:	2b0b      	cmp	r3, #11
 8001d28:	d90f      	bls.n	8001d4a <_malloc_r+0x7e>
 8001d2a:	600b      	str	r3, [r1, #0]
 8001d2c:	18cc      	adds	r4, r1, r3
 8001d2e:	50cd      	str	r5, [r1, r3]
 8001d30:	4630      	mov	r0, r6
 8001d32:	f000 fa52 	bl	80021da <__malloc_unlock>
 8001d36:	f104 000b 	add.w	r0, r4, #11
 8001d3a:	1d23      	adds	r3, r4, #4
 8001d3c:	f020 0007 	bic.w	r0, r0, #7
 8001d40:	1ac3      	subs	r3, r0, r3
 8001d42:	d01b      	beq.n	8001d7c <_malloc_r+0xb0>
 8001d44:	425a      	negs	r2, r3
 8001d46:	50e2      	str	r2, [r4, r3]
 8001d48:	bd70      	pop	{r4, r5, r6, pc}
 8001d4a:	428c      	cmp	r4, r1
 8001d4c:	bf0b      	itete	eq
 8001d4e:	6863      	ldreq	r3, [r4, #4]
 8001d50:	684b      	ldrne	r3, [r1, #4]
 8001d52:	6013      	streq	r3, [r2, #0]
 8001d54:	6063      	strne	r3, [r4, #4]
 8001d56:	bf18      	it	ne
 8001d58:	460c      	movne	r4, r1
 8001d5a:	e7e9      	b.n	8001d30 <_malloc_r+0x64>
 8001d5c:	460c      	mov	r4, r1
 8001d5e:	6849      	ldr	r1, [r1, #4]
 8001d60:	e7ca      	b.n	8001cf8 <_malloc_r+0x2c>
 8001d62:	1cc4      	adds	r4, r0, #3
 8001d64:	f024 0403 	bic.w	r4, r4, #3
 8001d68:	42a0      	cmp	r0, r4
 8001d6a:	d005      	beq.n	8001d78 <_malloc_r+0xac>
 8001d6c:	1a21      	subs	r1, r4, r0
 8001d6e:	4630      	mov	r0, r6
 8001d70:	f000 f886 	bl	8001e80 <_sbrk_r>
 8001d74:	3001      	adds	r0, #1
 8001d76:	d0cd      	beq.n	8001d14 <_malloc_r+0x48>
 8001d78:	6025      	str	r5, [r4, #0]
 8001d7a:	e7d9      	b.n	8001d30 <_malloc_r+0x64>
 8001d7c:	bd70      	pop	{r4, r5, r6, pc}
 8001d7e:	bf00      	nop
 8001d80:	2000049c 	.word	0x2000049c
 8001d84:	200004a0 	.word	0x200004a0

08001d88 <iprintf>:
 8001d88:	b40f      	push	{r0, r1, r2, r3}
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <iprintf+0x2c>)
 8001d8c:	b513      	push	{r0, r1, r4, lr}
 8001d8e:	681c      	ldr	r4, [r3, #0]
 8001d90:	b124      	cbz	r4, 8001d9c <iprintf+0x14>
 8001d92:	69a3      	ldr	r3, [r4, #24]
 8001d94:	b913      	cbnz	r3, 8001d9c <iprintf+0x14>
 8001d96:	4620      	mov	r0, r4
 8001d98:	f7ff fe8a 	bl	8001ab0 <__sinit>
 8001d9c:	ab05      	add	r3, sp, #20
 8001d9e:	9a04      	ldr	r2, [sp, #16]
 8001da0:	68a1      	ldr	r1, [r4, #8]
 8001da2:	4620      	mov	r0, r4
 8001da4:	9301      	str	r3, [sp, #4]
 8001da6:	f000 fa41 	bl	800222c <_vfiprintf_r>
 8001daa:	b002      	add	sp, #8
 8001dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001db0:	b004      	add	sp, #16
 8001db2:	4770      	bx	lr
 8001db4:	20000014 	.word	0x20000014

08001db8 <_puts_r>:
 8001db8:	b570      	push	{r4, r5, r6, lr}
 8001dba:	460e      	mov	r6, r1
 8001dbc:	4605      	mov	r5, r0
 8001dbe:	b118      	cbz	r0, 8001dc8 <_puts_r+0x10>
 8001dc0:	6983      	ldr	r3, [r0, #24]
 8001dc2:	b90b      	cbnz	r3, 8001dc8 <_puts_r+0x10>
 8001dc4:	f7ff fe74 	bl	8001ab0 <__sinit>
 8001dc8:	69ab      	ldr	r3, [r5, #24]
 8001dca:	68ac      	ldr	r4, [r5, #8]
 8001dcc:	b913      	cbnz	r3, 8001dd4 <_puts_r+0x1c>
 8001dce:	4628      	mov	r0, r5
 8001dd0:	f7ff fe6e 	bl	8001ab0 <__sinit>
 8001dd4:	4b23      	ldr	r3, [pc, #140]	; (8001e64 <_puts_r+0xac>)
 8001dd6:	429c      	cmp	r4, r3
 8001dd8:	d117      	bne.n	8001e0a <_puts_r+0x52>
 8001dda:	686c      	ldr	r4, [r5, #4]
 8001ddc:	89a3      	ldrh	r3, [r4, #12]
 8001dde:	071b      	lsls	r3, r3, #28
 8001de0:	d51d      	bpl.n	8001e1e <_puts_r+0x66>
 8001de2:	6923      	ldr	r3, [r4, #16]
 8001de4:	b1db      	cbz	r3, 8001e1e <_puts_r+0x66>
 8001de6:	3e01      	subs	r6, #1
 8001de8:	68a3      	ldr	r3, [r4, #8]
 8001dea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001dee:	3b01      	subs	r3, #1
 8001df0:	60a3      	str	r3, [r4, #8]
 8001df2:	b9e9      	cbnz	r1, 8001e30 <_puts_r+0x78>
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	da2e      	bge.n	8001e56 <_puts_r+0x9e>
 8001df8:	4622      	mov	r2, r4
 8001dfa:	210a      	movs	r1, #10
 8001dfc:	4628      	mov	r0, r5
 8001dfe:	f000 f893 	bl	8001f28 <__swbuf_r>
 8001e02:	3001      	adds	r0, #1
 8001e04:	d011      	beq.n	8001e2a <_puts_r+0x72>
 8001e06:	200a      	movs	r0, #10
 8001e08:	bd70      	pop	{r4, r5, r6, pc}
 8001e0a:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <_puts_r+0xb0>)
 8001e0c:	429c      	cmp	r4, r3
 8001e0e:	d101      	bne.n	8001e14 <_puts_r+0x5c>
 8001e10:	68ac      	ldr	r4, [r5, #8]
 8001e12:	e7e3      	b.n	8001ddc <_puts_r+0x24>
 8001e14:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <_puts_r+0xb4>)
 8001e16:	429c      	cmp	r4, r3
 8001e18:	bf08      	it	eq
 8001e1a:	68ec      	ldreq	r4, [r5, #12]
 8001e1c:	e7de      	b.n	8001ddc <_puts_r+0x24>
 8001e1e:	4621      	mov	r1, r4
 8001e20:	4628      	mov	r0, r5
 8001e22:	f000 f8e5 	bl	8001ff0 <__swsetup_r>
 8001e26:	2800      	cmp	r0, #0
 8001e28:	d0dd      	beq.n	8001de6 <_puts_r+0x2e>
 8001e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2e:	bd70      	pop	{r4, r5, r6, pc}
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	da04      	bge.n	8001e3e <_puts_r+0x86>
 8001e34:	69a2      	ldr	r2, [r4, #24]
 8001e36:	4293      	cmp	r3, r2
 8001e38:	db06      	blt.n	8001e48 <_puts_r+0x90>
 8001e3a:	290a      	cmp	r1, #10
 8001e3c:	d004      	beq.n	8001e48 <_puts_r+0x90>
 8001e3e:	6823      	ldr	r3, [r4, #0]
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	6022      	str	r2, [r4, #0]
 8001e44:	7019      	strb	r1, [r3, #0]
 8001e46:	e7cf      	b.n	8001de8 <_puts_r+0x30>
 8001e48:	4622      	mov	r2, r4
 8001e4a:	4628      	mov	r0, r5
 8001e4c:	f000 f86c 	bl	8001f28 <__swbuf_r>
 8001e50:	3001      	adds	r0, #1
 8001e52:	d1c9      	bne.n	8001de8 <_puts_r+0x30>
 8001e54:	e7e9      	b.n	8001e2a <_puts_r+0x72>
 8001e56:	200a      	movs	r0, #10
 8001e58:	6823      	ldr	r3, [r4, #0]
 8001e5a:	1c5a      	adds	r2, r3, #1
 8001e5c:	6022      	str	r2, [r4, #0]
 8001e5e:	7018      	strb	r0, [r3, #0]
 8001e60:	bd70      	pop	{r4, r5, r6, pc}
 8001e62:	bf00      	nop
 8001e64:	0800287c 	.word	0x0800287c
 8001e68:	0800289c 	.word	0x0800289c
 8001e6c:	0800285c 	.word	0x0800285c

08001e70 <puts>:
 8001e70:	4b02      	ldr	r3, [pc, #8]	; (8001e7c <puts+0xc>)
 8001e72:	4601      	mov	r1, r0
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	f7ff bf9f 	b.w	8001db8 <_puts_r>
 8001e7a:	bf00      	nop
 8001e7c:	20000014 	.word	0x20000014

08001e80 <_sbrk_r>:
 8001e80:	b538      	push	{r3, r4, r5, lr}
 8001e82:	2300      	movs	r3, #0
 8001e84:	4c05      	ldr	r4, [pc, #20]	; (8001e9c <_sbrk_r+0x1c>)
 8001e86:	4605      	mov	r5, r0
 8001e88:	4608      	mov	r0, r1
 8001e8a:	6023      	str	r3, [r4, #0]
 8001e8c:	f7ff fc94 	bl	80017b8 <_sbrk>
 8001e90:	1c43      	adds	r3, r0, #1
 8001e92:	d102      	bne.n	8001e9a <_sbrk_r+0x1a>
 8001e94:	6823      	ldr	r3, [r4, #0]
 8001e96:	b103      	cbz	r3, 8001e9a <_sbrk_r+0x1a>
 8001e98:	602b      	str	r3, [r5, #0]
 8001e9a:	bd38      	pop	{r3, r4, r5, pc}
 8001e9c:	20000584 	.word	0x20000584

08001ea0 <__sread>:
 8001ea0:	b510      	push	{r4, lr}
 8001ea2:	460c      	mov	r4, r1
 8001ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ea8:	f000 fc6e 	bl	8002788 <_read_r>
 8001eac:	2800      	cmp	r0, #0
 8001eae:	bfab      	itete	ge
 8001eb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001eb2:	89a3      	ldrhlt	r3, [r4, #12]
 8001eb4:	181b      	addge	r3, r3, r0
 8001eb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001eba:	bfac      	ite	ge
 8001ebc:	6563      	strge	r3, [r4, #84]	; 0x54
 8001ebe:	81a3      	strhlt	r3, [r4, #12]
 8001ec0:	bd10      	pop	{r4, pc}

08001ec2 <__swrite>:
 8001ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ec6:	461f      	mov	r7, r3
 8001ec8:	898b      	ldrh	r3, [r1, #12]
 8001eca:	4605      	mov	r5, r0
 8001ecc:	05db      	lsls	r3, r3, #23
 8001ece:	460c      	mov	r4, r1
 8001ed0:	4616      	mov	r6, r2
 8001ed2:	d505      	bpl.n	8001ee0 <__swrite+0x1e>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001edc:	f000 f906 	bl	80020ec <_lseek_r>
 8001ee0:	89a3      	ldrh	r3, [r4, #12]
 8001ee2:	4632      	mov	r2, r6
 8001ee4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ee8:	81a3      	strh	r3, [r4, #12]
 8001eea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001eee:	463b      	mov	r3, r7
 8001ef0:	4628      	mov	r0, r5
 8001ef2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ef6:	f000 b869 	b.w	8001fcc <_write_r>

08001efa <__sseek>:
 8001efa:	b510      	push	{r4, lr}
 8001efc:	460c      	mov	r4, r1
 8001efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f02:	f000 f8f3 	bl	80020ec <_lseek_r>
 8001f06:	1c43      	adds	r3, r0, #1
 8001f08:	89a3      	ldrh	r3, [r4, #12]
 8001f0a:	bf15      	itete	ne
 8001f0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8001f0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001f12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001f16:	81a3      	strheq	r3, [r4, #12]
 8001f18:	bf18      	it	ne
 8001f1a:	81a3      	strhne	r3, [r4, #12]
 8001f1c:	bd10      	pop	{r4, pc}

08001f1e <__sclose>:
 8001f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f22:	f000 b8d3 	b.w	80020cc <_close_r>
	...

08001f28 <__swbuf_r>:
 8001f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f2a:	460e      	mov	r6, r1
 8001f2c:	4614      	mov	r4, r2
 8001f2e:	4605      	mov	r5, r0
 8001f30:	b118      	cbz	r0, 8001f3a <__swbuf_r+0x12>
 8001f32:	6983      	ldr	r3, [r0, #24]
 8001f34:	b90b      	cbnz	r3, 8001f3a <__swbuf_r+0x12>
 8001f36:	f7ff fdbb 	bl	8001ab0 <__sinit>
 8001f3a:	4b21      	ldr	r3, [pc, #132]	; (8001fc0 <__swbuf_r+0x98>)
 8001f3c:	429c      	cmp	r4, r3
 8001f3e:	d12a      	bne.n	8001f96 <__swbuf_r+0x6e>
 8001f40:	686c      	ldr	r4, [r5, #4]
 8001f42:	69a3      	ldr	r3, [r4, #24]
 8001f44:	60a3      	str	r3, [r4, #8]
 8001f46:	89a3      	ldrh	r3, [r4, #12]
 8001f48:	071a      	lsls	r2, r3, #28
 8001f4a:	d52e      	bpl.n	8001faa <__swbuf_r+0x82>
 8001f4c:	6923      	ldr	r3, [r4, #16]
 8001f4e:	b363      	cbz	r3, 8001faa <__swbuf_r+0x82>
 8001f50:	6923      	ldr	r3, [r4, #16]
 8001f52:	6820      	ldr	r0, [r4, #0]
 8001f54:	b2f6      	uxtb	r6, r6
 8001f56:	1ac0      	subs	r0, r0, r3
 8001f58:	6963      	ldr	r3, [r4, #20]
 8001f5a:	4637      	mov	r7, r6
 8001f5c:	4298      	cmp	r0, r3
 8001f5e:	db04      	blt.n	8001f6a <__swbuf_r+0x42>
 8001f60:	4621      	mov	r1, r4
 8001f62:	4628      	mov	r0, r5
 8001f64:	f7ff fd28 	bl	80019b8 <_fflush_r>
 8001f68:	bb28      	cbnz	r0, 8001fb6 <__swbuf_r+0x8e>
 8001f6a:	68a3      	ldr	r3, [r4, #8]
 8001f6c:	3001      	adds	r0, #1
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	60a3      	str	r3, [r4, #8]
 8001f72:	6823      	ldr	r3, [r4, #0]
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	6022      	str	r2, [r4, #0]
 8001f78:	701e      	strb	r6, [r3, #0]
 8001f7a:	6963      	ldr	r3, [r4, #20]
 8001f7c:	4298      	cmp	r0, r3
 8001f7e:	d004      	beq.n	8001f8a <__swbuf_r+0x62>
 8001f80:	89a3      	ldrh	r3, [r4, #12]
 8001f82:	07db      	lsls	r3, r3, #31
 8001f84:	d519      	bpl.n	8001fba <__swbuf_r+0x92>
 8001f86:	2e0a      	cmp	r6, #10
 8001f88:	d117      	bne.n	8001fba <__swbuf_r+0x92>
 8001f8a:	4621      	mov	r1, r4
 8001f8c:	4628      	mov	r0, r5
 8001f8e:	f7ff fd13 	bl	80019b8 <_fflush_r>
 8001f92:	b190      	cbz	r0, 8001fba <__swbuf_r+0x92>
 8001f94:	e00f      	b.n	8001fb6 <__swbuf_r+0x8e>
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <__swbuf_r+0x9c>)
 8001f98:	429c      	cmp	r4, r3
 8001f9a:	d101      	bne.n	8001fa0 <__swbuf_r+0x78>
 8001f9c:	68ac      	ldr	r4, [r5, #8]
 8001f9e:	e7d0      	b.n	8001f42 <__swbuf_r+0x1a>
 8001fa0:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <__swbuf_r+0xa0>)
 8001fa2:	429c      	cmp	r4, r3
 8001fa4:	bf08      	it	eq
 8001fa6:	68ec      	ldreq	r4, [r5, #12]
 8001fa8:	e7cb      	b.n	8001f42 <__swbuf_r+0x1a>
 8001faa:	4621      	mov	r1, r4
 8001fac:	4628      	mov	r0, r5
 8001fae:	f000 f81f 	bl	8001ff0 <__swsetup_r>
 8001fb2:	2800      	cmp	r0, #0
 8001fb4:	d0cc      	beq.n	8001f50 <__swbuf_r+0x28>
 8001fb6:	f04f 37ff 	mov.w	r7, #4294967295
 8001fba:	4638      	mov	r0, r7
 8001fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	0800287c 	.word	0x0800287c
 8001fc4:	0800289c 	.word	0x0800289c
 8001fc8:	0800285c 	.word	0x0800285c

08001fcc <_write_r>:
 8001fcc:	b538      	push	{r3, r4, r5, lr}
 8001fce:	4605      	mov	r5, r0
 8001fd0:	4608      	mov	r0, r1
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	4c05      	ldr	r4, [pc, #20]	; (8001fec <_write_r+0x20>)
 8001fd8:	6022      	str	r2, [r4, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	f7ff fa02 	bl	80013e4 <_write>
 8001fe0:	1c43      	adds	r3, r0, #1
 8001fe2:	d102      	bne.n	8001fea <_write_r+0x1e>
 8001fe4:	6823      	ldr	r3, [r4, #0]
 8001fe6:	b103      	cbz	r3, 8001fea <_write_r+0x1e>
 8001fe8:	602b      	str	r3, [r5, #0]
 8001fea:	bd38      	pop	{r3, r4, r5, pc}
 8001fec:	20000584 	.word	0x20000584

08001ff0 <__swsetup_r>:
 8001ff0:	4b32      	ldr	r3, [pc, #200]	; (80020bc <__swsetup_r+0xcc>)
 8001ff2:	b570      	push	{r4, r5, r6, lr}
 8001ff4:	681d      	ldr	r5, [r3, #0]
 8001ff6:	4606      	mov	r6, r0
 8001ff8:	460c      	mov	r4, r1
 8001ffa:	b125      	cbz	r5, 8002006 <__swsetup_r+0x16>
 8001ffc:	69ab      	ldr	r3, [r5, #24]
 8001ffe:	b913      	cbnz	r3, 8002006 <__swsetup_r+0x16>
 8002000:	4628      	mov	r0, r5
 8002002:	f7ff fd55 	bl	8001ab0 <__sinit>
 8002006:	4b2e      	ldr	r3, [pc, #184]	; (80020c0 <__swsetup_r+0xd0>)
 8002008:	429c      	cmp	r4, r3
 800200a:	d10f      	bne.n	800202c <__swsetup_r+0x3c>
 800200c:	686c      	ldr	r4, [r5, #4]
 800200e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002012:	b29a      	uxth	r2, r3
 8002014:	0715      	lsls	r5, r2, #28
 8002016:	d42c      	bmi.n	8002072 <__swsetup_r+0x82>
 8002018:	06d0      	lsls	r0, r2, #27
 800201a:	d411      	bmi.n	8002040 <__swsetup_r+0x50>
 800201c:	2209      	movs	r2, #9
 800201e:	6032      	str	r2, [r6, #0]
 8002020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002024:	81a3      	strh	r3, [r4, #12]
 8002026:	f04f 30ff 	mov.w	r0, #4294967295
 800202a:	bd70      	pop	{r4, r5, r6, pc}
 800202c:	4b25      	ldr	r3, [pc, #148]	; (80020c4 <__swsetup_r+0xd4>)
 800202e:	429c      	cmp	r4, r3
 8002030:	d101      	bne.n	8002036 <__swsetup_r+0x46>
 8002032:	68ac      	ldr	r4, [r5, #8]
 8002034:	e7eb      	b.n	800200e <__swsetup_r+0x1e>
 8002036:	4b24      	ldr	r3, [pc, #144]	; (80020c8 <__swsetup_r+0xd8>)
 8002038:	429c      	cmp	r4, r3
 800203a:	bf08      	it	eq
 800203c:	68ec      	ldreq	r4, [r5, #12]
 800203e:	e7e6      	b.n	800200e <__swsetup_r+0x1e>
 8002040:	0751      	lsls	r1, r2, #29
 8002042:	d512      	bpl.n	800206a <__swsetup_r+0x7a>
 8002044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002046:	b141      	cbz	r1, 800205a <__swsetup_r+0x6a>
 8002048:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800204c:	4299      	cmp	r1, r3
 800204e:	d002      	beq.n	8002056 <__swsetup_r+0x66>
 8002050:	4630      	mov	r0, r6
 8002052:	f7ff fdef 	bl	8001c34 <_free_r>
 8002056:	2300      	movs	r3, #0
 8002058:	6363      	str	r3, [r4, #52]	; 0x34
 800205a:	89a3      	ldrh	r3, [r4, #12]
 800205c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002060:	81a3      	strh	r3, [r4, #12]
 8002062:	2300      	movs	r3, #0
 8002064:	6063      	str	r3, [r4, #4]
 8002066:	6923      	ldr	r3, [r4, #16]
 8002068:	6023      	str	r3, [r4, #0]
 800206a:	89a3      	ldrh	r3, [r4, #12]
 800206c:	f043 0308 	orr.w	r3, r3, #8
 8002070:	81a3      	strh	r3, [r4, #12]
 8002072:	6923      	ldr	r3, [r4, #16]
 8002074:	b94b      	cbnz	r3, 800208a <__swsetup_r+0x9a>
 8002076:	89a3      	ldrh	r3, [r4, #12]
 8002078:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800207c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002080:	d003      	beq.n	800208a <__swsetup_r+0x9a>
 8002082:	4621      	mov	r1, r4
 8002084:	4630      	mov	r0, r6
 8002086:	f000 f867 	bl	8002158 <__smakebuf_r>
 800208a:	89a2      	ldrh	r2, [r4, #12]
 800208c:	f012 0301 	ands.w	r3, r2, #1
 8002090:	d00c      	beq.n	80020ac <__swsetup_r+0xbc>
 8002092:	2300      	movs	r3, #0
 8002094:	60a3      	str	r3, [r4, #8]
 8002096:	6963      	ldr	r3, [r4, #20]
 8002098:	425b      	negs	r3, r3
 800209a:	61a3      	str	r3, [r4, #24]
 800209c:	6923      	ldr	r3, [r4, #16]
 800209e:	b953      	cbnz	r3, 80020b6 <__swsetup_r+0xc6>
 80020a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80020a8:	d1ba      	bne.n	8002020 <__swsetup_r+0x30>
 80020aa:	bd70      	pop	{r4, r5, r6, pc}
 80020ac:	0792      	lsls	r2, r2, #30
 80020ae:	bf58      	it	pl
 80020b0:	6963      	ldrpl	r3, [r4, #20]
 80020b2:	60a3      	str	r3, [r4, #8]
 80020b4:	e7f2      	b.n	800209c <__swsetup_r+0xac>
 80020b6:	2000      	movs	r0, #0
 80020b8:	e7f7      	b.n	80020aa <__swsetup_r+0xba>
 80020ba:	bf00      	nop
 80020bc:	20000014 	.word	0x20000014
 80020c0:	0800287c 	.word	0x0800287c
 80020c4:	0800289c 	.word	0x0800289c
 80020c8:	0800285c 	.word	0x0800285c

080020cc <_close_r>:
 80020cc:	b538      	push	{r3, r4, r5, lr}
 80020ce:	2300      	movs	r3, #0
 80020d0:	4c05      	ldr	r4, [pc, #20]	; (80020e8 <_close_r+0x1c>)
 80020d2:	4605      	mov	r5, r0
 80020d4:	4608      	mov	r0, r1
 80020d6:	6023      	str	r3, [r4, #0]
 80020d8:	f7ff fb88 	bl	80017ec <_close>
 80020dc:	1c43      	adds	r3, r0, #1
 80020de:	d102      	bne.n	80020e6 <_close_r+0x1a>
 80020e0:	6823      	ldr	r3, [r4, #0]
 80020e2:	b103      	cbz	r3, 80020e6 <_close_r+0x1a>
 80020e4:	602b      	str	r3, [r5, #0]
 80020e6:	bd38      	pop	{r3, r4, r5, pc}
 80020e8:	20000584 	.word	0x20000584

080020ec <_lseek_r>:
 80020ec:	b538      	push	{r3, r4, r5, lr}
 80020ee:	4605      	mov	r5, r0
 80020f0:	4608      	mov	r0, r1
 80020f2:	4611      	mov	r1, r2
 80020f4:	2200      	movs	r2, #0
 80020f6:	4c05      	ldr	r4, [pc, #20]	; (800210c <_lseek_r+0x20>)
 80020f8:	6022      	str	r2, [r4, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	f7ff fb80 	bl	8001800 <_lseek>
 8002100:	1c43      	adds	r3, r0, #1
 8002102:	d102      	bne.n	800210a <_lseek_r+0x1e>
 8002104:	6823      	ldr	r3, [r4, #0]
 8002106:	b103      	cbz	r3, 800210a <_lseek_r+0x1e>
 8002108:	602b      	str	r3, [r5, #0]
 800210a:	bd38      	pop	{r3, r4, r5, pc}
 800210c:	20000584 	.word	0x20000584

08002110 <__swhatbuf_r>:
 8002110:	b570      	push	{r4, r5, r6, lr}
 8002112:	460e      	mov	r6, r1
 8002114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002118:	b090      	sub	sp, #64	; 0x40
 800211a:	2900      	cmp	r1, #0
 800211c:	4614      	mov	r4, r2
 800211e:	461d      	mov	r5, r3
 8002120:	da07      	bge.n	8002132 <__swhatbuf_r+0x22>
 8002122:	2300      	movs	r3, #0
 8002124:	602b      	str	r3, [r5, #0]
 8002126:	89b3      	ldrh	r3, [r6, #12]
 8002128:	061a      	lsls	r2, r3, #24
 800212a:	d410      	bmi.n	800214e <__swhatbuf_r+0x3e>
 800212c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002130:	e00e      	b.n	8002150 <__swhatbuf_r+0x40>
 8002132:	aa01      	add	r2, sp, #4
 8002134:	f000 fb3a 	bl	80027ac <_fstat_r>
 8002138:	2800      	cmp	r0, #0
 800213a:	dbf2      	blt.n	8002122 <__swhatbuf_r+0x12>
 800213c:	9a02      	ldr	r2, [sp, #8]
 800213e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002142:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002146:	425a      	negs	r2, r3
 8002148:	415a      	adcs	r2, r3
 800214a:	602a      	str	r2, [r5, #0]
 800214c:	e7ee      	b.n	800212c <__swhatbuf_r+0x1c>
 800214e:	2340      	movs	r3, #64	; 0x40
 8002150:	2000      	movs	r0, #0
 8002152:	6023      	str	r3, [r4, #0]
 8002154:	b010      	add	sp, #64	; 0x40
 8002156:	bd70      	pop	{r4, r5, r6, pc}

08002158 <__smakebuf_r>:
 8002158:	898b      	ldrh	r3, [r1, #12]
 800215a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800215c:	079d      	lsls	r5, r3, #30
 800215e:	4606      	mov	r6, r0
 8002160:	460c      	mov	r4, r1
 8002162:	d507      	bpl.n	8002174 <__smakebuf_r+0x1c>
 8002164:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002168:	6023      	str	r3, [r4, #0]
 800216a:	6123      	str	r3, [r4, #16]
 800216c:	2301      	movs	r3, #1
 800216e:	6163      	str	r3, [r4, #20]
 8002170:	b002      	add	sp, #8
 8002172:	bd70      	pop	{r4, r5, r6, pc}
 8002174:	ab01      	add	r3, sp, #4
 8002176:	466a      	mov	r2, sp
 8002178:	f7ff ffca 	bl	8002110 <__swhatbuf_r>
 800217c:	9900      	ldr	r1, [sp, #0]
 800217e:	4605      	mov	r5, r0
 8002180:	4630      	mov	r0, r6
 8002182:	f7ff fda3 	bl	8001ccc <_malloc_r>
 8002186:	b948      	cbnz	r0, 800219c <__smakebuf_r+0x44>
 8002188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800218c:	059a      	lsls	r2, r3, #22
 800218e:	d4ef      	bmi.n	8002170 <__smakebuf_r+0x18>
 8002190:	f023 0303 	bic.w	r3, r3, #3
 8002194:	f043 0302 	orr.w	r3, r3, #2
 8002198:	81a3      	strh	r3, [r4, #12]
 800219a:	e7e3      	b.n	8002164 <__smakebuf_r+0xc>
 800219c:	4b0d      	ldr	r3, [pc, #52]	; (80021d4 <__smakebuf_r+0x7c>)
 800219e:	62b3      	str	r3, [r6, #40]	; 0x28
 80021a0:	89a3      	ldrh	r3, [r4, #12]
 80021a2:	6020      	str	r0, [r4, #0]
 80021a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a8:	81a3      	strh	r3, [r4, #12]
 80021aa:	9b00      	ldr	r3, [sp, #0]
 80021ac:	6120      	str	r0, [r4, #16]
 80021ae:	6163      	str	r3, [r4, #20]
 80021b0:	9b01      	ldr	r3, [sp, #4]
 80021b2:	b15b      	cbz	r3, 80021cc <__smakebuf_r+0x74>
 80021b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021b8:	4630      	mov	r0, r6
 80021ba:	f000 fb09 	bl	80027d0 <_isatty_r>
 80021be:	b128      	cbz	r0, 80021cc <__smakebuf_r+0x74>
 80021c0:	89a3      	ldrh	r3, [r4, #12]
 80021c2:	f023 0303 	bic.w	r3, r3, #3
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	81a3      	strh	r3, [r4, #12]
 80021cc:	89a3      	ldrh	r3, [r4, #12]
 80021ce:	431d      	orrs	r5, r3
 80021d0:	81a5      	strh	r5, [r4, #12]
 80021d2:	e7cd      	b.n	8002170 <__smakebuf_r+0x18>
 80021d4:	08001a31 	.word	0x08001a31

080021d8 <__malloc_lock>:
 80021d8:	4770      	bx	lr

080021da <__malloc_unlock>:
 80021da:	4770      	bx	lr

080021dc <__sfputc_r>:
 80021dc:	6893      	ldr	r3, [r2, #8]
 80021de:	b410      	push	{r4}
 80021e0:	3b01      	subs	r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	6093      	str	r3, [r2, #8]
 80021e6:	da08      	bge.n	80021fa <__sfputc_r+0x1e>
 80021e8:	6994      	ldr	r4, [r2, #24]
 80021ea:	42a3      	cmp	r3, r4
 80021ec:	db02      	blt.n	80021f4 <__sfputc_r+0x18>
 80021ee:	b2cb      	uxtb	r3, r1
 80021f0:	2b0a      	cmp	r3, #10
 80021f2:	d102      	bne.n	80021fa <__sfputc_r+0x1e>
 80021f4:	bc10      	pop	{r4}
 80021f6:	f7ff be97 	b.w	8001f28 <__swbuf_r>
 80021fa:	6813      	ldr	r3, [r2, #0]
 80021fc:	1c58      	adds	r0, r3, #1
 80021fe:	6010      	str	r0, [r2, #0]
 8002200:	7019      	strb	r1, [r3, #0]
 8002202:	b2c8      	uxtb	r0, r1
 8002204:	bc10      	pop	{r4}
 8002206:	4770      	bx	lr

08002208 <__sfputs_r>:
 8002208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800220a:	4606      	mov	r6, r0
 800220c:	460f      	mov	r7, r1
 800220e:	4614      	mov	r4, r2
 8002210:	18d5      	adds	r5, r2, r3
 8002212:	42ac      	cmp	r4, r5
 8002214:	d101      	bne.n	800221a <__sfputs_r+0x12>
 8002216:	2000      	movs	r0, #0
 8002218:	e007      	b.n	800222a <__sfputs_r+0x22>
 800221a:	463a      	mov	r2, r7
 800221c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002220:	4630      	mov	r0, r6
 8002222:	f7ff ffdb 	bl	80021dc <__sfputc_r>
 8002226:	1c43      	adds	r3, r0, #1
 8002228:	d1f3      	bne.n	8002212 <__sfputs_r+0xa>
 800222a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800222c <_vfiprintf_r>:
 800222c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002230:	b09d      	sub	sp, #116	; 0x74
 8002232:	460c      	mov	r4, r1
 8002234:	4617      	mov	r7, r2
 8002236:	9303      	str	r3, [sp, #12]
 8002238:	4606      	mov	r6, r0
 800223a:	b118      	cbz	r0, 8002244 <_vfiprintf_r+0x18>
 800223c:	6983      	ldr	r3, [r0, #24]
 800223e:	b90b      	cbnz	r3, 8002244 <_vfiprintf_r+0x18>
 8002240:	f7ff fc36 	bl	8001ab0 <__sinit>
 8002244:	4b7c      	ldr	r3, [pc, #496]	; (8002438 <_vfiprintf_r+0x20c>)
 8002246:	429c      	cmp	r4, r3
 8002248:	d157      	bne.n	80022fa <_vfiprintf_r+0xce>
 800224a:	6874      	ldr	r4, [r6, #4]
 800224c:	89a3      	ldrh	r3, [r4, #12]
 800224e:	0718      	lsls	r0, r3, #28
 8002250:	d55d      	bpl.n	800230e <_vfiprintf_r+0xe2>
 8002252:	6923      	ldr	r3, [r4, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d05a      	beq.n	800230e <_vfiprintf_r+0xe2>
 8002258:	2300      	movs	r3, #0
 800225a:	9309      	str	r3, [sp, #36]	; 0x24
 800225c:	2320      	movs	r3, #32
 800225e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002262:	2330      	movs	r3, #48	; 0x30
 8002264:	f04f 0b01 	mov.w	fp, #1
 8002268:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800226c:	46b8      	mov	r8, r7
 800226e:	4645      	mov	r5, r8
 8002270:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002274:	2b00      	cmp	r3, #0
 8002276:	d155      	bne.n	8002324 <_vfiprintf_r+0xf8>
 8002278:	ebb8 0a07 	subs.w	sl, r8, r7
 800227c:	d00b      	beq.n	8002296 <_vfiprintf_r+0x6a>
 800227e:	4653      	mov	r3, sl
 8002280:	463a      	mov	r2, r7
 8002282:	4621      	mov	r1, r4
 8002284:	4630      	mov	r0, r6
 8002286:	f7ff ffbf 	bl	8002208 <__sfputs_r>
 800228a:	3001      	adds	r0, #1
 800228c:	f000 80c4 	beq.w	8002418 <_vfiprintf_r+0x1ec>
 8002290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002292:	4453      	add	r3, sl
 8002294:	9309      	str	r3, [sp, #36]	; 0x24
 8002296:	f898 3000 	ldrb.w	r3, [r8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 80bc 	beq.w	8002418 <_vfiprintf_r+0x1ec>
 80022a0:	2300      	movs	r3, #0
 80022a2:	f04f 32ff 	mov.w	r2, #4294967295
 80022a6:	9304      	str	r3, [sp, #16]
 80022a8:	9307      	str	r3, [sp, #28]
 80022aa:	9205      	str	r2, [sp, #20]
 80022ac:	9306      	str	r3, [sp, #24]
 80022ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80022b2:	931a      	str	r3, [sp, #104]	; 0x68
 80022b4:	2205      	movs	r2, #5
 80022b6:	7829      	ldrb	r1, [r5, #0]
 80022b8:	4860      	ldr	r0, [pc, #384]	; (800243c <_vfiprintf_r+0x210>)
 80022ba:	f000 fa99 	bl	80027f0 <memchr>
 80022be:	f105 0801 	add.w	r8, r5, #1
 80022c2:	9b04      	ldr	r3, [sp, #16]
 80022c4:	2800      	cmp	r0, #0
 80022c6:	d131      	bne.n	800232c <_vfiprintf_r+0x100>
 80022c8:	06d9      	lsls	r1, r3, #27
 80022ca:	bf44      	itt	mi
 80022cc:	2220      	movmi	r2, #32
 80022ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80022d2:	071a      	lsls	r2, r3, #28
 80022d4:	bf44      	itt	mi
 80022d6:	222b      	movmi	r2, #43	; 0x2b
 80022d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80022dc:	782a      	ldrb	r2, [r5, #0]
 80022de:	2a2a      	cmp	r2, #42	; 0x2a
 80022e0:	d02c      	beq.n	800233c <_vfiprintf_r+0x110>
 80022e2:	2100      	movs	r1, #0
 80022e4:	200a      	movs	r0, #10
 80022e6:	9a07      	ldr	r2, [sp, #28]
 80022e8:	46a8      	mov	r8, r5
 80022ea:	f898 3000 	ldrb.w	r3, [r8]
 80022ee:	3501      	adds	r5, #1
 80022f0:	3b30      	subs	r3, #48	; 0x30
 80022f2:	2b09      	cmp	r3, #9
 80022f4:	d96d      	bls.n	80023d2 <_vfiprintf_r+0x1a6>
 80022f6:	b371      	cbz	r1, 8002356 <_vfiprintf_r+0x12a>
 80022f8:	e026      	b.n	8002348 <_vfiprintf_r+0x11c>
 80022fa:	4b51      	ldr	r3, [pc, #324]	; (8002440 <_vfiprintf_r+0x214>)
 80022fc:	429c      	cmp	r4, r3
 80022fe:	d101      	bne.n	8002304 <_vfiprintf_r+0xd8>
 8002300:	68b4      	ldr	r4, [r6, #8]
 8002302:	e7a3      	b.n	800224c <_vfiprintf_r+0x20>
 8002304:	4b4f      	ldr	r3, [pc, #316]	; (8002444 <_vfiprintf_r+0x218>)
 8002306:	429c      	cmp	r4, r3
 8002308:	bf08      	it	eq
 800230a:	68f4      	ldreq	r4, [r6, #12]
 800230c:	e79e      	b.n	800224c <_vfiprintf_r+0x20>
 800230e:	4621      	mov	r1, r4
 8002310:	4630      	mov	r0, r6
 8002312:	f7ff fe6d 	bl	8001ff0 <__swsetup_r>
 8002316:	2800      	cmp	r0, #0
 8002318:	d09e      	beq.n	8002258 <_vfiprintf_r+0x2c>
 800231a:	f04f 30ff 	mov.w	r0, #4294967295
 800231e:	b01d      	add	sp, #116	; 0x74
 8002320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002324:	2b25      	cmp	r3, #37	; 0x25
 8002326:	d0a7      	beq.n	8002278 <_vfiprintf_r+0x4c>
 8002328:	46a8      	mov	r8, r5
 800232a:	e7a0      	b.n	800226e <_vfiprintf_r+0x42>
 800232c:	4a43      	ldr	r2, [pc, #268]	; (800243c <_vfiprintf_r+0x210>)
 800232e:	4645      	mov	r5, r8
 8002330:	1a80      	subs	r0, r0, r2
 8002332:	fa0b f000 	lsl.w	r0, fp, r0
 8002336:	4318      	orrs	r0, r3
 8002338:	9004      	str	r0, [sp, #16]
 800233a:	e7bb      	b.n	80022b4 <_vfiprintf_r+0x88>
 800233c:	9a03      	ldr	r2, [sp, #12]
 800233e:	1d11      	adds	r1, r2, #4
 8002340:	6812      	ldr	r2, [r2, #0]
 8002342:	9103      	str	r1, [sp, #12]
 8002344:	2a00      	cmp	r2, #0
 8002346:	db01      	blt.n	800234c <_vfiprintf_r+0x120>
 8002348:	9207      	str	r2, [sp, #28]
 800234a:	e004      	b.n	8002356 <_vfiprintf_r+0x12a>
 800234c:	4252      	negs	r2, r2
 800234e:	f043 0302 	orr.w	r3, r3, #2
 8002352:	9207      	str	r2, [sp, #28]
 8002354:	9304      	str	r3, [sp, #16]
 8002356:	f898 3000 	ldrb.w	r3, [r8]
 800235a:	2b2e      	cmp	r3, #46	; 0x2e
 800235c:	d110      	bne.n	8002380 <_vfiprintf_r+0x154>
 800235e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002362:	f108 0101 	add.w	r1, r8, #1
 8002366:	2b2a      	cmp	r3, #42	; 0x2a
 8002368:	d137      	bne.n	80023da <_vfiprintf_r+0x1ae>
 800236a:	9b03      	ldr	r3, [sp, #12]
 800236c:	f108 0802 	add.w	r8, r8, #2
 8002370:	1d1a      	adds	r2, r3, #4
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	9203      	str	r2, [sp, #12]
 8002376:	2b00      	cmp	r3, #0
 8002378:	bfb8      	it	lt
 800237a:	f04f 33ff 	movlt.w	r3, #4294967295
 800237e:	9305      	str	r3, [sp, #20]
 8002380:	4d31      	ldr	r5, [pc, #196]	; (8002448 <_vfiprintf_r+0x21c>)
 8002382:	2203      	movs	r2, #3
 8002384:	f898 1000 	ldrb.w	r1, [r8]
 8002388:	4628      	mov	r0, r5
 800238a:	f000 fa31 	bl	80027f0 <memchr>
 800238e:	b140      	cbz	r0, 80023a2 <_vfiprintf_r+0x176>
 8002390:	2340      	movs	r3, #64	; 0x40
 8002392:	1b40      	subs	r0, r0, r5
 8002394:	fa03 f000 	lsl.w	r0, r3, r0
 8002398:	9b04      	ldr	r3, [sp, #16]
 800239a:	f108 0801 	add.w	r8, r8, #1
 800239e:	4303      	orrs	r3, r0
 80023a0:	9304      	str	r3, [sp, #16]
 80023a2:	f898 1000 	ldrb.w	r1, [r8]
 80023a6:	2206      	movs	r2, #6
 80023a8:	4828      	ldr	r0, [pc, #160]	; (800244c <_vfiprintf_r+0x220>)
 80023aa:	f108 0701 	add.w	r7, r8, #1
 80023ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80023b2:	f000 fa1d 	bl	80027f0 <memchr>
 80023b6:	2800      	cmp	r0, #0
 80023b8:	d034      	beq.n	8002424 <_vfiprintf_r+0x1f8>
 80023ba:	4b25      	ldr	r3, [pc, #148]	; (8002450 <_vfiprintf_r+0x224>)
 80023bc:	bb03      	cbnz	r3, 8002400 <_vfiprintf_r+0x1d4>
 80023be:	9b03      	ldr	r3, [sp, #12]
 80023c0:	3307      	adds	r3, #7
 80023c2:	f023 0307 	bic.w	r3, r3, #7
 80023c6:	3308      	adds	r3, #8
 80023c8:	9303      	str	r3, [sp, #12]
 80023ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023cc:	444b      	add	r3, r9
 80023ce:	9309      	str	r3, [sp, #36]	; 0x24
 80023d0:	e74c      	b.n	800226c <_vfiprintf_r+0x40>
 80023d2:	fb00 3202 	mla	r2, r0, r2, r3
 80023d6:	2101      	movs	r1, #1
 80023d8:	e786      	b.n	80022e8 <_vfiprintf_r+0xbc>
 80023da:	2300      	movs	r3, #0
 80023dc:	250a      	movs	r5, #10
 80023de:	4618      	mov	r0, r3
 80023e0:	9305      	str	r3, [sp, #20]
 80023e2:	4688      	mov	r8, r1
 80023e4:	f898 2000 	ldrb.w	r2, [r8]
 80023e8:	3101      	adds	r1, #1
 80023ea:	3a30      	subs	r2, #48	; 0x30
 80023ec:	2a09      	cmp	r2, #9
 80023ee:	d903      	bls.n	80023f8 <_vfiprintf_r+0x1cc>
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0c5      	beq.n	8002380 <_vfiprintf_r+0x154>
 80023f4:	9005      	str	r0, [sp, #20]
 80023f6:	e7c3      	b.n	8002380 <_vfiprintf_r+0x154>
 80023f8:	fb05 2000 	mla	r0, r5, r0, r2
 80023fc:	2301      	movs	r3, #1
 80023fe:	e7f0      	b.n	80023e2 <_vfiprintf_r+0x1b6>
 8002400:	ab03      	add	r3, sp, #12
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	4622      	mov	r2, r4
 8002406:	4b13      	ldr	r3, [pc, #76]	; (8002454 <_vfiprintf_r+0x228>)
 8002408:	a904      	add	r1, sp, #16
 800240a:	4630      	mov	r0, r6
 800240c:	f3af 8000 	nop.w
 8002410:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002414:	4681      	mov	r9, r0
 8002416:	d1d8      	bne.n	80023ca <_vfiprintf_r+0x19e>
 8002418:	89a3      	ldrh	r3, [r4, #12]
 800241a:	065b      	lsls	r3, r3, #25
 800241c:	f53f af7d 	bmi.w	800231a <_vfiprintf_r+0xee>
 8002420:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002422:	e77c      	b.n	800231e <_vfiprintf_r+0xf2>
 8002424:	ab03      	add	r3, sp, #12
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	4622      	mov	r2, r4
 800242a:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <_vfiprintf_r+0x228>)
 800242c:	a904      	add	r1, sp, #16
 800242e:	4630      	mov	r0, r6
 8002430:	f000 f88a 	bl	8002548 <_printf_i>
 8002434:	e7ec      	b.n	8002410 <_vfiprintf_r+0x1e4>
 8002436:	bf00      	nop
 8002438:	0800287c 	.word	0x0800287c
 800243c:	080028c0 	.word	0x080028c0
 8002440:	0800289c 	.word	0x0800289c
 8002444:	0800285c 	.word	0x0800285c
 8002448:	080028c6 	.word	0x080028c6
 800244c:	080028ca 	.word	0x080028ca
 8002450:	00000000 	.word	0x00000000
 8002454:	08002209 	.word	0x08002209

08002458 <_printf_common>:
 8002458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800245c:	4691      	mov	r9, r2
 800245e:	461f      	mov	r7, r3
 8002460:	688a      	ldr	r2, [r1, #8]
 8002462:	690b      	ldr	r3, [r1, #16]
 8002464:	4606      	mov	r6, r0
 8002466:	4293      	cmp	r3, r2
 8002468:	bfb8      	it	lt
 800246a:	4613      	movlt	r3, r2
 800246c:	f8c9 3000 	str.w	r3, [r9]
 8002470:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002474:	460c      	mov	r4, r1
 8002476:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800247a:	b112      	cbz	r2, 8002482 <_printf_common+0x2a>
 800247c:	3301      	adds	r3, #1
 800247e:	f8c9 3000 	str.w	r3, [r9]
 8002482:	6823      	ldr	r3, [r4, #0]
 8002484:	0699      	lsls	r1, r3, #26
 8002486:	bf42      	ittt	mi
 8002488:	f8d9 3000 	ldrmi.w	r3, [r9]
 800248c:	3302      	addmi	r3, #2
 800248e:	f8c9 3000 	strmi.w	r3, [r9]
 8002492:	6825      	ldr	r5, [r4, #0]
 8002494:	f015 0506 	ands.w	r5, r5, #6
 8002498:	d107      	bne.n	80024aa <_printf_common+0x52>
 800249a:	f104 0a19 	add.w	sl, r4, #25
 800249e:	68e3      	ldr	r3, [r4, #12]
 80024a0:	f8d9 2000 	ldr.w	r2, [r9]
 80024a4:	1a9b      	subs	r3, r3, r2
 80024a6:	429d      	cmp	r5, r3
 80024a8:	db2a      	blt.n	8002500 <_printf_common+0xa8>
 80024aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80024ae:	6822      	ldr	r2, [r4, #0]
 80024b0:	3300      	adds	r3, #0
 80024b2:	bf18      	it	ne
 80024b4:	2301      	movne	r3, #1
 80024b6:	0692      	lsls	r2, r2, #26
 80024b8:	d42f      	bmi.n	800251a <_printf_common+0xc2>
 80024ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80024be:	4639      	mov	r1, r7
 80024c0:	4630      	mov	r0, r6
 80024c2:	47c0      	blx	r8
 80024c4:	3001      	adds	r0, #1
 80024c6:	d022      	beq.n	800250e <_printf_common+0xb6>
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	68e5      	ldr	r5, [r4, #12]
 80024cc:	f003 0306 	and.w	r3, r3, #6
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	bf18      	it	ne
 80024d4:	2500      	movne	r5, #0
 80024d6:	f8d9 2000 	ldr.w	r2, [r9]
 80024da:	f04f 0900 	mov.w	r9, #0
 80024de:	bf08      	it	eq
 80024e0:	1aad      	subeq	r5, r5, r2
 80024e2:	68a3      	ldr	r3, [r4, #8]
 80024e4:	6922      	ldr	r2, [r4, #16]
 80024e6:	bf08      	it	eq
 80024e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80024ec:	4293      	cmp	r3, r2
 80024ee:	bfc4      	itt	gt
 80024f0:	1a9b      	subgt	r3, r3, r2
 80024f2:	18ed      	addgt	r5, r5, r3
 80024f4:	341a      	adds	r4, #26
 80024f6:	454d      	cmp	r5, r9
 80024f8:	d11b      	bne.n	8002532 <_printf_common+0xda>
 80024fa:	2000      	movs	r0, #0
 80024fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002500:	2301      	movs	r3, #1
 8002502:	4652      	mov	r2, sl
 8002504:	4639      	mov	r1, r7
 8002506:	4630      	mov	r0, r6
 8002508:	47c0      	blx	r8
 800250a:	3001      	adds	r0, #1
 800250c:	d103      	bne.n	8002516 <_printf_common+0xbe>
 800250e:	f04f 30ff 	mov.w	r0, #4294967295
 8002512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002516:	3501      	adds	r5, #1
 8002518:	e7c1      	b.n	800249e <_printf_common+0x46>
 800251a:	2030      	movs	r0, #48	; 0x30
 800251c:	18e1      	adds	r1, r4, r3
 800251e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002522:	1c5a      	adds	r2, r3, #1
 8002524:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002528:	4422      	add	r2, r4
 800252a:	3302      	adds	r3, #2
 800252c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002530:	e7c3      	b.n	80024ba <_printf_common+0x62>
 8002532:	2301      	movs	r3, #1
 8002534:	4622      	mov	r2, r4
 8002536:	4639      	mov	r1, r7
 8002538:	4630      	mov	r0, r6
 800253a:	47c0      	blx	r8
 800253c:	3001      	adds	r0, #1
 800253e:	d0e6      	beq.n	800250e <_printf_common+0xb6>
 8002540:	f109 0901 	add.w	r9, r9, #1
 8002544:	e7d7      	b.n	80024f6 <_printf_common+0x9e>
	...

08002548 <_printf_i>:
 8002548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800254c:	4617      	mov	r7, r2
 800254e:	7e0a      	ldrb	r2, [r1, #24]
 8002550:	b085      	sub	sp, #20
 8002552:	2a6e      	cmp	r2, #110	; 0x6e
 8002554:	4698      	mov	r8, r3
 8002556:	4606      	mov	r6, r0
 8002558:	460c      	mov	r4, r1
 800255a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800255c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002560:	f000 80bc 	beq.w	80026dc <_printf_i+0x194>
 8002564:	d81a      	bhi.n	800259c <_printf_i+0x54>
 8002566:	2a63      	cmp	r2, #99	; 0x63
 8002568:	d02e      	beq.n	80025c8 <_printf_i+0x80>
 800256a:	d80a      	bhi.n	8002582 <_printf_i+0x3a>
 800256c:	2a00      	cmp	r2, #0
 800256e:	f000 80c8 	beq.w	8002702 <_printf_i+0x1ba>
 8002572:	2a58      	cmp	r2, #88	; 0x58
 8002574:	f000 808a 	beq.w	800268c <_printf_i+0x144>
 8002578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800257c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002580:	e02a      	b.n	80025d8 <_printf_i+0x90>
 8002582:	2a64      	cmp	r2, #100	; 0x64
 8002584:	d001      	beq.n	800258a <_printf_i+0x42>
 8002586:	2a69      	cmp	r2, #105	; 0x69
 8002588:	d1f6      	bne.n	8002578 <_printf_i+0x30>
 800258a:	6821      	ldr	r1, [r4, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002592:	d023      	beq.n	80025dc <_printf_i+0x94>
 8002594:	1d11      	adds	r1, r2, #4
 8002596:	6019      	str	r1, [r3, #0]
 8002598:	6813      	ldr	r3, [r2, #0]
 800259a:	e027      	b.n	80025ec <_printf_i+0xa4>
 800259c:	2a73      	cmp	r2, #115	; 0x73
 800259e:	f000 80b4 	beq.w	800270a <_printf_i+0x1c2>
 80025a2:	d808      	bhi.n	80025b6 <_printf_i+0x6e>
 80025a4:	2a6f      	cmp	r2, #111	; 0x6f
 80025a6:	d02a      	beq.n	80025fe <_printf_i+0xb6>
 80025a8:	2a70      	cmp	r2, #112	; 0x70
 80025aa:	d1e5      	bne.n	8002578 <_printf_i+0x30>
 80025ac:	680a      	ldr	r2, [r1, #0]
 80025ae:	f042 0220 	orr.w	r2, r2, #32
 80025b2:	600a      	str	r2, [r1, #0]
 80025b4:	e003      	b.n	80025be <_printf_i+0x76>
 80025b6:	2a75      	cmp	r2, #117	; 0x75
 80025b8:	d021      	beq.n	80025fe <_printf_i+0xb6>
 80025ba:	2a78      	cmp	r2, #120	; 0x78
 80025bc:	d1dc      	bne.n	8002578 <_printf_i+0x30>
 80025be:	2278      	movs	r2, #120	; 0x78
 80025c0:	496f      	ldr	r1, [pc, #444]	; (8002780 <_printf_i+0x238>)
 80025c2:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80025c6:	e064      	b.n	8002692 <_printf_i+0x14a>
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80025ce:	1d11      	adds	r1, r2, #4
 80025d0:	6019      	str	r1, [r3, #0]
 80025d2:	6813      	ldr	r3, [r2, #0]
 80025d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80025d8:	2301      	movs	r3, #1
 80025da:	e0a3      	b.n	8002724 <_printf_i+0x1dc>
 80025dc:	f011 0f40 	tst.w	r1, #64	; 0x40
 80025e0:	f102 0104 	add.w	r1, r2, #4
 80025e4:	6019      	str	r1, [r3, #0]
 80025e6:	d0d7      	beq.n	8002598 <_printf_i+0x50>
 80025e8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	da03      	bge.n	80025f8 <_printf_i+0xb0>
 80025f0:	222d      	movs	r2, #45	; 0x2d
 80025f2:	425b      	negs	r3, r3
 80025f4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80025f8:	4962      	ldr	r1, [pc, #392]	; (8002784 <_printf_i+0x23c>)
 80025fa:	220a      	movs	r2, #10
 80025fc:	e017      	b.n	800262e <_printf_i+0xe6>
 80025fe:	6820      	ldr	r0, [r4, #0]
 8002600:	6819      	ldr	r1, [r3, #0]
 8002602:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002606:	d003      	beq.n	8002610 <_printf_i+0xc8>
 8002608:	1d08      	adds	r0, r1, #4
 800260a:	6018      	str	r0, [r3, #0]
 800260c:	680b      	ldr	r3, [r1, #0]
 800260e:	e006      	b.n	800261e <_printf_i+0xd6>
 8002610:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002614:	f101 0004 	add.w	r0, r1, #4
 8002618:	6018      	str	r0, [r3, #0]
 800261a:	d0f7      	beq.n	800260c <_printf_i+0xc4>
 800261c:	880b      	ldrh	r3, [r1, #0]
 800261e:	2a6f      	cmp	r2, #111	; 0x6f
 8002620:	bf14      	ite	ne
 8002622:	220a      	movne	r2, #10
 8002624:	2208      	moveq	r2, #8
 8002626:	4957      	ldr	r1, [pc, #348]	; (8002784 <_printf_i+0x23c>)
 8002628:	2000      	movs	r0, #0
 800262a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800262e:	6865      	ldr	r5, [r4, #4]
 8002630:	2d00      	cmp	r5, #0
 8002632:	60a5      	str	r5, [r4, #8]
 8002634:	f2c0 809c 	blt.w	8002770 <_printf_i+0x228>
 8002638:	6820      	ldr	r0, [r4, #0]
 800263a:	f020 0004 	bic.w	r0, r0, #4
 800263e:	6020      	str	r0, [r4, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d13f      	bne.n	80026c4 <_printf_i+0x17c>
 8002644:	2d00      	cmp	r5, #0
 8002646:	f040 8095 	bne.w	8002774 <_printf_i+0x22c>
 800264a:	4675      	mov	r5, lr
 800264c:	2a08      	cmp	r2, #8
 800264e:	d10b      	bne.n	8002668 <_printf_i+0x120>
 8002650:	6823      	ldr	r3, [r4, #0]
 8002652:	07da      	lsls	r2, r3, #31
 8002654:	d508      	bpl.n	8002668 <_printf_i+0x120>
 8002656:	6923      	ldr	r3, [r4, #16]
 8002658:	6862      	ldr	r2, [r4, #4]
 800265a:	429a      	cmp	r2, r3
 800265c:	bfde      	ittt	le
 800265e:	2330      	movle	r3, #48	; 0x30
 8002660:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002664:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002668:	ebae 0305 	sub.w	r3, lr, r5
 800266c:	6123      	str	r3, [r4, #16]
 800266e:	f8cd 8000 	str.w	r8, [sp]
 8002672:	463b      	mov	r3, r7
 8002674:	aa03      	add	r2, sp, #12
 8002676:	4621      	mov	r1, r4
 8002678:	4630      	mov	r0, r6
 800267a:	f7ff feed 	bl	8002458 <_printf_common>
 800267e:	3001      	adds	r0, #1
 8002680:	d155      	bne.n	800272e <_printf_i+0x1e6>
 8002682:	f04f 30ff 	mov.w	r0, #4294967295
 8002686:	b005      	add	sp, #20
 8002688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800268c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002690:	493c      	ldr	r1, [pc, #240]	; (8002784 <_printf_i+0x23c>)
 8002692:	6822      	ldr	r2, [r4, #0]
 8002694:	6818      	ldr	r0, [r3, #0]
 8002696:	f012 0f80 	tst.w	r2, #128	; 0x80
 800269a:	f100 0504 	add.w	r5, r0, #4
 800269e:	601d      	str	r5, [r3, #0]
 80026a0:	d001      	beq.n	80026a6 <_printf_i+0x15e>
 80026a2:	6803      	ldr	r3, [r0, #0]
 80026a4:	e002      	b.n	80026ac <_printf_i+0x164>
 80026a6:	0655      	lsls	r5, r2, #25
 80026a8:	d5fb      	bpl.n	80026a2 <_printf_i+0x15a>
 80026aa:	8803      	ldrh	r3, [r0, #0]
 80026ac:	07d0      	lsls	r0, r2, #31
 80026ae:	bf44      	itt	mi
 80026b0:	f042 0220 	orrmi.w	r2, r2, #32
 80026b4:	6022      	strmi	r2, [r4, #0]
 80026b6:	b91b      	cbnz	r3, 80026c0 <_printf_i+0x178>
 80026b8:	6822      	ldr	r2, [r4, #0]
 80026ba:	f022 0220 	bic.w	r2, r2, #32
 80026be:	6022      	str	r2, [r4, #0]
 80026c0:	2210      	movs	r2, #16
 80026c2:	e7b1      	b.n	8002628 <_printf_i+0xe0>
 80026c4:	4675      	mov	r5, lr
 80026c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80026ca:	fb02 3310 	mls	r3, r2, r0, r3
 80026ce:	5ccb      	ldrb	r3, [r1, r3]
 80026d0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80026d4:	4603      	mov	r3, r0
 80026d6:	2800      	cmp	r0, #0
 80026d8:	d1f5      	bne.n	80026c6 <_printf_i+0x17e>
 80026da:	e7b7      	b.n	800264c <_printf_i+0x104>
 80026dc:	6808      	ldr	r0, [r1, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	f010 0f80 	tst.w	r0, #128	; 0x80
 80026e4:	6949      	ldr	r1, [r1, #20]
 80026e6:	d004      	beq.n	80026f2 <_printf_i+0x1aa>
 80026e8:	1d10      	adds	r0, r2, #4
 80026ea:	6018      	str	r0, [r3, #0]
 80026ec:	6813      	ldr	r3, [r2, #0]
 80026ee:	6019      	str	r1, [r3, #0]
 80026f0:	e007      	b.n	8002702 <_printf_i+0x1ba>
 80026f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80026f6:	f102 0004 	add.w	r0, r2, #4
 80026fa:	6018      	str	r0, [r3, #0]
 80026fc:	6813      	ldr	r3, [r2, #0]
 80026fe:	d0f6      	beq.n	80026ee <_printf_i+0x1a6>
 8002700:	8019      	strh	r1, [r3, #0]
 8002702:	2300      	movs	r3, #0
 8002704:	4675      	mov	r5, lr
 8002706:	6123      	str	r3, [r4, #16]
 8002708:	e7b1      	b.n	800266e <_printf_i+0x126>
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	1d11      	adds	r1, r2, #4
 800270e:	6019      	str	r1, [r3, #0]
 8002710:	6815      	ldr	r5, [r2, #0]
 8002712:	2100      	movs	r1, #0
 8002714:	6862      	ldr	r2, [r4, #4]
 8002716:	4628      	mov	r0, r5
 8002718:	f000 f86a 	bl	80027f0 <memchr>
 800271c:	b108      	cbz	r0, 8002722 <_printf_i+0x1da>
 800271e:	1b40      	subs	r0, r0, r5
 8002720:	6060      	str	r0, [r4, #4]
 8002722:	6863      	ldr	r3, [r4, #4]
 8002724:	6123      	str	r3, [r4, #16]
 8002726:	2300      	movs	r3, #0
 8002728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800272c:	e79f      	b.n	800266e <_printf_i+0x126>
 800272e:	6923      	ldr	r3, [r4, #16]
 8002730:	462a      	mov	r2, r5
 8002732:	4639      	mov	r1, r7
 8002734:	4630      	mov	r0, r6
 8002736:	47c0      	blx	r8
 8002738:	3001      	adds	r0, #1
 800273a:	d0a2      	beq.n	8002682 <_printf_i+0x13a>
 800273c:	6823      	ldr	r3, [r4, #0]
 800273e:	079b      	lsls	r3, r3, #30
 8002740:	d507      	bpl.n	8002752 <_printf_i+0x20a>
 8002742:	2500      	movs	r5, #0
 8002744:	f104 0919 	add.w	r9, r4, #25
 8002748:	68e3      	ldr	r3, [r4, #12]
 800274a:	9a03      	ldr	r2, [sp, #12]
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	429d      	cmp	r5, r3
 8002750:	db05      	blt.n	800275e <_printf_i+0x216>
 8002752:	68e0      	ldr	r0, [r4, #12]
 8002754:	9b03      	ldr	r3, [sp, #12]
 8002756:	4298      	cmp	r0, r3
 8002758:	bfb8      	it	lt
 800275a:	4618      	movlt	r0, r3
 800275c:	e793      	b.n	8002686 <_printf_i+0x13e>
 800275e:	2301      	movs	r3, #1
 8002760:	464a      	mov	r2, r9
 8002762:	4639      	mov	r1, r7
 8002764:	4630      	mov	r0, r6
 8002766:	47c0      	blx	r8
 8002768:	3001      	adds	r0, #1
 800276a:	d08a      	beq.n	8002682 <_printf_i+0x13a>
 800276c:	3501      	adds	r5, #1
 800276e:	e7eb      	b.n	8002748 <_printf_i+0x200>
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1a7      	bne.n	80026c4 <_printf_i+0x17c>
 8002774:	780b      	ldrb	r3, [r1, #0]
 8002776:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800277a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800277e:	e765      	b.n	800264c <_printf_i+0x104>
 8002780:	080028e2 	.word	0x080028e2
 8002784:	080028d1 	.word	0x080028d1

08002788 <_read_r>:
 8002788:	b538      	push	{r3, r4, r5, lr}
 800278a:	4605      	mov	r5, r0
 800278c:	4608      	mov	r0, r1
 800278e:	4611      	mov	r1, r2
 8002790:	2200      	movs	r2, #0
 8002792:	4c05      	ldr	r4, [pc, #20]	; (80027a8 <_read_r+0x20>)
 8002794:	6022      	str	r2, [r4, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	f7ff f800 	bl	800179c <_read>
 800279c:	1c43      	adds	r3, r0, #1
 800279e:	d102      	bne.n	80027a6 <_read_r+0x1e>
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	b103      	cbz	r3, 80027a6 <_read_r+0x1e>
 80027a4:	602b      	str	r3, [r5, #0]
 80027a6:	bd38      	pop	{r3, r4, r5, pc}
 80027a8:	20000584 	.word	0x20000584

080027ac <_fstat_r>:
 80027ac:	b538      	push	{r3, r4, r5, lr}
 80027ae:	2300      	movs	r3, #0
 80027b0:	4c06      	ldr	r4, [pc, #24]	; (80027cc <_fstat_r+0x20>)
 80027b2:	4605      	mov	r5, r0
 80027b4:	4608      	mov	r0, r1
 80027b6:	4611      	mov	r1, r2
 80027b8:	6023      	str	r3, [r4, #0]
 80027ba:	f7ff f81a 	bl	80017f2 <_fstat>
 80027be:	1c43      	adds	r3, r0, #1
 80027c0:	d102      	bne.n	80027c8 <_fstat_r+0x1c>
 80027c2:	6823      	ldr	r3, [r4, #0]
 80027c4:	b103      	cbz	r3, 80027c8 <_fstat_r+0x1c>
 80027c6:	602b      	str	r3, [r5, #0]
 80027c8:	bd38      	pop	{r3, r4, r5, pc}
 80027ca:	bf00      	nop
 80027cc:	20000584 	.word	0x20000584

080027d0 <_isatty_r>:
 80027d0:	b538      	push	{r3, r4, r5, lr}
 80027d2:	2300      	movs	r3, #0
 80027d4:	4c05      	ldr	r4, [pc, #20]	; (80027ec <_isatty_r+0x1c>)
 80027d6:	4605      	mov	r5, r0
 80027d8:	4608      	mov	r0, r1
 80027da:	6023      	str	r3, [r4, #0]
 80027dc:	f7ff f80e 	bl	80017fc <_isatty>
 80027e0:	1c43      	adds	r3, r0, #1
 80027e2:	d102      	bne.n	80027ea <_isatty_r+0x1a>
 80027e4:	6823      	ldr	r3, [r4, #0]
 80027e6:	b103      	cbz	r3, 80027ea <_isatty_r+0x1a>
 80027e8:	602b      	str	r3, [r5, #0]
 80027ea:	bd38      	pop	{r3, r4, r5, pc}
 80027ec:	20000584 	.word	0x20000584

080027f0 <memchr>:
 80027f0:	b510      	push	{r4, lr}
 80027f2:	b2c9      	uxtb	r1, r1
 80027f4:	4402      	add	r2, r0
 80027f6:	4290      	cmp	r0, r2
 80027f8:	4603      	mov	r3, r0
 80027fa:	d101      	bne.n	8002800 <memchr+0x10>
 80027fc:	2000      	movs	r0, #0
 80027fe:	bd10      	pop	{r4, pc}
 8002800:	781c      	ldrb	r4, [r3, #0]
 8002802:	3001      	adds	r0, #1
 8002804:	428c      	cmp	r4, r1
 8002806:	d1f6      	bne.n	80027f6 <memchr+0x6>
 8002808:	4618      	mov	r0, r3
 800280a:	bd10      	pop	{r4, pc}

0800280c <_init>:
 800280c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280e:	bf00      	nop
 8002810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002812:	bc08      	pop	{r3}
 8002814:	469e      	mov	lr, r3
 8002816:	4770      	bx	lr

08002818 <_fini>:
 8002818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281a:	bf00      	nop
 800281c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800281e:	bc08      	pop	{r3}
 8002820:	469e      	mov	lr, r3
 8002822:	4770      	bx	lr
