
DTU0300_W5500_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f44  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08005128  08005128  00015128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005290  08005290  00015290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005294  08005294  00015294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000e4  20000000  08005298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000950  200000e4  0800537c  000200e4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000a34  0800537c  00020a34  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
  9 .debug_info   000119ec  00000000  00000000  0002010d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000298d  00000000  00000000  00031af9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b70  00000000  00000000  00034488  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a58  00000000  00000000  00034ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005f73  00000000  00000000  00035a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000034cc  00000000  00000000  0003b9c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003ee8f  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003488  00000000  00000000  0003ef0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000e4 	.word	0x200000e4
 8000200:	00000000 	.word	0x00000000
 8000204:	08005110 	.word	0x08005110

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000e8 	.word	0x200000e8
 8000220:	08005110 	.word	0x08005110

08000224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000228:	4a08      	ldr	r2, [pc, #32]	; (800024c <HAL_Init+0x28>)
 800022a:	4b08      	ldr	r3, [pc, #32]	; (800024c <HAL_Init+0x28>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f043 0310 	orr.w	r3, r3, #16
 8000232:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000234:	2003      	movs	r0, #3
 8000236:	f000 f93f 	bl	80004b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f808 	bl	8000250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000240:	f003 fd4a 	bl	8003cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000244:	2300      	movs	r3, #0
}
 8000246:	4618      	mov	r0, r3
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40022000 	.word	0x40022000

08000250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000258:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <HAL_InitTick+0x54>)
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <HAL_InitTick+0x58>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	4619      	mov	r1, r3
 8000262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000266:	fbb3 f3f1 	udiv	r3, r3, r1
 800026a:	fbb2 f3f3 	udiv	r3, r2, r3
 800026e:	4618      	mov	r0, r3
 8000270:	f000 f957 	bl	8000522 <HAL_SYSTICK_Config>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800027a:	2301      	movs	r3, #1
 800027c:	e00e      	b.n	800029c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2b0f      	cmp	r3, #15
 8000282:	d80a      	bhi.n	800029a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000284:	2200      	movs	r2, #0
 8000286:	6879      	ldr	r1, [r7, #4]
 8000288:	f04f 30ff 	mov.w	r0, #4294967295
 800028c:	f000 f91f 	bl	80004ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000290:	4a06      	ldr	r2, [pc, #24]	; (80002ac <HAL_InitTick+0x5c>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000296:	2300      	movs	r3, #0
 8000298:	e000      	b.n	800029c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800029a:	2301      	movs	r3, #1
}
 800029c:	4618      	mov	r0, r3
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	2000007c 	.word	0x2000007c
 80002a8:	20000004 	.word	0x20000004
 80002ac:	20000000 	.word	0x20000000

080002b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002b4:	4b05      	ldr	r3, [pc, #20]	; (80002cc <HAL_IncTick+0x1c>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	461a      	mov	r2, r3
 80002ba:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <HAL_IncTick+0x20>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4413      	add	r3, r2
 80002c0:	4a03      	ldr	r2, [pc, #12]	; (80002d0 <HAL_IncTick+0x20>)
 80002c2:	6013      	str	r3, [r2, #0]
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	20000004 	.word	0x20000004
 80002d0:	2000013c 	.word	0x2000013c

080002d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  return uwTick;
 80002d8:	4b02      	ldr	r3, [pc, #8]	; (80002e4 <HAL_GetTick+0x10>)
 80002da:	681b      	ldr	r3, [r3, #0]
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	2000013c 	.word	0x2000013c

080002e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002f0:	f7ff fff0 	bl	80002d4 <HAL_GetTick>
 80002f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000300:	d005      	beq.n	800030e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000302:	4b09      	ldr	r3, [pc, #36]	; (8000328 <HAL_Delay+0x40>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	461a      	mov	r2, r3
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	4413      	add	r3, r2
 800030c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800030e:	bf00      	nop
 8000310:	f7ff ffe0 	bl	80002d4 <HAL_GetTick>
 8000314:	4602      	mov	r2, r0
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	1ad2      	subs	r2, r2, r3
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	429a      	cmp	r2, r3
 800031e:	d3f7      	bcc.n	8000310 <HAL_Delay+0x28>
  {
  }
}
 8000320:	bf00      	nop
 8000322:	3710      	adds	r7, #16
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000004 	.word	0x20000004

0800032c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f003 0307 	and.w	r3, r3, #7
 800033a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <NVIC_SetPriorityGrouping+0x44>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000342:	68ba      	ldr	r2, [r7, #8]
 8000344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000348:	4013      	ands	r3, r2
 800034a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800035c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800035e:	4a04      	ldr	r2, [pc, #16]	; (8000370 <NVIC_SetPriorityGrouping+0x44>)
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	60d3      	str	r3, [r2, #12]
}
 8000364:	bf00      	nop
 8000366:	3714      	adds	r7, #20
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	e000ed00 	.word	0xe000ed00

08000374 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <NVIC_GetPriorityGrouping+0x18>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	0a1b      	lsrs	r3, r3, #8
 800037e:	f003 0307 	and.w	r3, r3, #7
}
 8000382:	4618      	mov	r0, r3
 8000384:	46bd      	mov	sp, r7
 8000386:	bc80      	pop	{r7}
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	e000ed00 	.word	0xe000ed00

08000390 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800039a:	4908      	ldr	r1, [pc, #32]	; (80003bc <NVIC_EnableIRQ+0x2c>)
 800039c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a0:	095b      	lsrs	r3, r3, #5
 80003a2:	79fa      	ldrb	r2, [r7, #7]
 80003a4:	f002 021f 	and.w	r2, r2, #31
 80003a8:	2001      	movs	r0, #1
 80003aa:	fa00 f202 	lsl.w	r2, r0, r2
 80003ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr
 80003bc:	e000e100 	.word	0xe000e100

080003c0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	6039      	str	r1, [r7, #0]
 80003ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80003cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	da0b      	bge.n	80003ec <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d4:	490d      	ldr	r1, [pc, #52]	; (800040c <NVIC_SetPriority+0x4c>)
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	f003 030f 	and.w	r3, r3, #15
 80003dc:	3b04      	subs	r3, #4
 80003de:	683a      	ldr	r2, [r7, #0]
 80003e0:	b2d2      	uxtb	r2, r2
 80003e2:	0112      	lsls	r2, r2, #4
 80003e4:	b2d2      	uxtb	r2, r2
 80003e6:	440b      	add	r3, r1
 80003e8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003ea:	e009      	b.n	8000400 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ec:	4908      	ldr	r1, [pc, #32]	; (8000410 <NVIC_SetPriority+0x50>)
 80003ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003f2:	683a      	ldr	r2, [r7, #0]
 80003f4:	b2d2      	uxtb	r2, r2
 80003f6:	0112      	lsls	r2, r2, #4
 80003f8:	b2d2      	uxtb	r2, r2
 80003fa:	440b      	add	r3, r1
 80003fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	e000ed00 	.word	0xe000ed00
 8000410:	e000e100 	.word	0xe000e100

08000414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000414:	b480      	push	{r7}
 8000416:	b089      	sub	sp, #36	; 0x24
 8000418:	af00      	add	r7, sp, #0
 800041a:	60f8      	str	r0, [r7, #12]
 800041c:	60b9      	str	r1, [r7, #8]
 800041e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	f003 0307 	and.w	r3, r3, #7
 8000426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000428:	69fb      	ldr	r3, [r7, #28]
 800042a:	f1c3 0307 	rsb	r3, r3, #7
 800042e:	2b04      	cmp	r3, #4
 8000430:	bf28      	it	cs
 8000432:	2304      	movcs	r3, #4
 8000434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000436:	69fb      	ldr	r3, [r7, #28]
 8000438:	3304      	adds	r3, #4
 800043a:	2b06      	cmp	r3, #6
 800043c:	d902      	bls.n	8000444 <NVIC_EncodePriority+0x30>
 800043e:	69fb      	ldr	r3, [r7, #28]
 8000440:	3b03      	subs	r3, #3
 8000442:	e000      	b.n	8000446 <NVIC_EncodePriority+0x32>
 8000444:	2300      	movs	r3, #0
 8000446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000448:	2201      	movs	r2, #1
 800044a:	69bb      	ldr	r3, [r7, #24]
 800044c:	fa02 f303 	lsl.w	r3, r2, r3
 8000450:	1e5a      	subs	r2, r3, #1
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	401a      	ands	r2, r3
 8000456:	697b      	ldr	r3, [r7, #20]
 8000458:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800045a:	2101      	movs	r1, #1
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	fa01 f303 	lsl.w	r3, r1, r3
 8000462:	1e59      	subs	r1, r3, #1
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000468:	4313      	orrs	r3, r2
         );
}
 800046a:	4618      	mov	r0, r3
 800046c:	3724      	adds	r7, #36	; 0x24
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr

08000474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	3b01      	subs	r3, #1
 8000480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000484:	d301      	bcc.n	800048a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000486:	2301      	movs	r3, #1
 8000488:	e00f      	b.n	80004aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800048a:	4a0a      	ldr	r2, [pc, #40]	; (80004b4 <SysTick_Config+0x40>)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	3b01      	subs	r3, #1
 8000490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000492:	210f      	movs	r1, #15
 8000494:	f04f 30ff 	mov.w	r0, #4294967295
 8000498:	f7ff ff92 	bl	80003c0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800049c:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <SysTick_Config+0x40>)
 800049e:	2200      	movs	r2, #0
 80004a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004a2:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <SysTick_Config+0x40>)
 80004a4:	2207      	movs	r2, #7
 80004a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004a8:	2300      	movs	r3, #0
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3708      	adds	r7, #8
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	e000e010 	.word	0xe000e010

080004b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004c0:	6878      	ldr	r0, [r7, #4]
 80004c2:	f7ff ff33 	bl	800032c <NVIC_SetPriorityGrouping>
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b086      	sub	sp, #24
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	4603      	mov	r3, r0
 80004d6:	60b9      	str	r1, [r7, #8]
 80004d8:	607a      	str	r2, [r7, #4]
 80004da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80004dc:	2300      	movs	r3, #0
 80004de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80004e0:	f7ff ff48 	bl	8000374 <NVIC_GetPriorityGrouping>
 80004e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	68b9      	ldr	r1, [r7, #8]
 80004ea:	6978      	ldr	r0, [r7, #20]
 80004ec:	f7ff ff92 	bl	8000414 <NVIC_EncodePriority>
 80004f0:	4602      	mov	r2, r0
 80004f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004f6:	4611      	mov	r1, r2
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff ff61 	bl	80003c0 <NVIC_SetPriority>
}
 80004fe:	bf00      	nop
 8000500:	3718      	adds	r7, #24
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}

08000506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000506:	b580      	push	{r7, lr}
 8000508:	b082      	sub	sp, #8
 800050a:	af00      	add	r7, sp, #0
 800050c:	4603      	mov	r3, r0
 800050e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000514:	4618      	mov	r0, r3
 8000516:	f7ff ff3b 	bl	8000390 <NVIC_EnableIRQ>
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}

08000522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000522:	b580      	push	{r7, lr}
 8000524:	b082      	sub	sp, #8
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	f7ff ffa2 	bl	8000474 <SysTick_Config>
 8000530:	4603      	mov	r3, r0
}
 8000532:	4618      	mov	r0, r3
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
	...

0800053c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000544:	2300      	movs	r3, #0
 8000546:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800054e:	2b02      	cmp	r3, #2
 8000550:	d005      	beq.n	800055e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2204      	movs	r2, #4
 8000556:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000558:	2301      	movs	r3, #1
 800055a:	73fb      	strb	r3, [r7, #15]
 800055c:	e0ec      	b.n	8000738 <HAL_DMA_Abort_IT+0x1fc>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	687a      	ldr	r2, [r7, #4]
 8000564:	6812      	ldr	r2, [r2, #0]
 8000566:	6812      	ldr	r2, [r2, #0]
 8000568:	f022 020e 	bic.w	r2, r2, #14
 800056c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	6812      	ldr	r2, [r2, #0]
 8000576:	6812      	ldr	r2, [r2, #0]
 8000578:	f022 0201 	bic.w	r2, r2, #1
 800057c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	461a      	mov	r2, r3
 8000584:	4b6f      	ldr	r3, [pc, #444]	; (8000744 <HAL_DMA_Abort_IT+0x208>)
 8000586:	429a      	cmp	r2, r3
 8000588:	d963      	bls.n	8000652 <HAL_DMA_Abort_IT+0x116>
 800058a:	4a6f      	ldr	r2, [pc, #444]	; (8000748 <HAL_DMA_Abort_IT+0x20c>)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4619      	mov	r1, r3
 8000592:	4b6e      	ldr	r3, [pc, #440]	; (800074c <HAL_DMA_Abort_IT+0x210>)
 8000594:	4299      	cmp	r1, r3
 8000596:	d059      	beq.n	800064c <HAL_DMA_Abort_IT+0x110>
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4619      	mov	r1, r3
 800059e:	4b6c      	ldr	r3, [pc, #432]	; (8000750 <HAL_DMA_Abort_IT+0x214>)
 80005a0:	4299      	cmp	r1, r3
 80005a2:	d051      	beq.n	8000648 <HAL_DMA_Abort_IT+0x10c>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4619      	mov	r1, r3
 80005aa:	4b6a      	ldr	r3, [pc, #424]	; (8000754 <HAL_DMA_Abort_IT+0x218>)
 80005ac:	4299      	cmp	r1, r3
 80005ae:	d048      	beq.n	8000642 <HAL_DMA_Abort_IT+0x106>
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4619      	mov	r1, r3
 80005b6:	4b68      	ldr	r3, [pc, #416]	; (8000758 <HAL_DMA_Abort_IT+0x21c>)
 80005b8:	4299      	cmp	r1, r3
 80005ba:	d03f      	beq.n	800063c <HAL_DMA_Abort_IT+0x100>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4619      	mov	r1, r3
 80005c2:	4b66      	ldr	r3, [pc, #408]	; (800075c <HAL_DMA_Abort_IT+0x220>)
 80005c4:	4299      	cmp	r1, r3
 80005c6:	d036      	beq.n	8000636 <HAL_DMA_Abort_IT+0xfa>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4619      	mov	r1, r3
 80005ce:	4b64      	ldr	r3, [pc, #400]	; (8000760 <HAL_DMA_Abort_IT+0x224>)
 80005d0:	4299      	cmp	r1, r3
 80005d2:	d02d      	beq.n	8000630 <HAL_DMA_Abort_IT+0xf4>
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4619      	mov	r1, r3
 80005da:	4b5a      	ldr	r3, [pc, #360]	; (8000744 <HAL_DMA_Abort_IT+0x208>)
 80005dc:	4299      	cmp	r1, r3
 80005de:	d024      	beq.n	800062a <HAL_DMA_Abort_IT+0xee>
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	4b5f      	ldr	r3, [pc, #380]	; (8000764 <HAL_DMA_Abort_IT+0x228>)
 80005e8:	4299      	cmp	r1, r3
 80005ea:	d01c      	beq.n	8000626 <HAL_DMA_Abort_IT+0xea>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4619      	mov	r1, r3
 80005f2:	4b5d      	ldr	r3, [pc, #372]	; (8000768 <HAL_DMA_Abort_IT+0x22c>)
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d014      	beq.n	8000622 <HAL_DMA_Abort_IT+0xe6>
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4619      	mov	r1, r3
 80005fe:	4b5b      	ldr	r3, [pc, #364]	; (800076c <HAL_DMA_Abort_IT+0x230>)
 8000600:	4299      	cmp	r1, r3
 8000602:	d00b      	beq.n	800061c <HAL_DMA_Abort_IT+0xe0>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4619      	mov	r1, r3
 800060a:	4b59      	ldr	r3, [pc, #356]	; (8000770 <HAL_DMA_Abort_IT+0x234>)
 800060c:	4299      	cmp	r1, r3
 800060e:	d102      	bne.n	8000616 <HAL_DMA_Abort_IT+0xda>
 8000610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000614:	e01b      	b.n	800064e <HAL_DMA_Abort_IT+0x112>
 8000616:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061a:	e018      	b.n	800064e <HAL_DMA_Abort_IT+0x112>
 800061c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000620:	e015      	b.n	800064e <HAL_DMA_Abort_IT+0x112>
 8000622:	2310      	movs	r3, #16
 8000624:	e013      	b.n	800064e <HAL_DMA_Abort_IT+0x112>
 8000626:	2301      	movs	r3, #1
 8000628:	e011      	b.n	800064e <HAL_DMA_Abort_IT+0x112>
 800062a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800062e:	e00e      	b.n	800064e <HAL_DMA_Abort_IT+0x112>
 8000630:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000634:	e00b      	b.n	800064e <HAL_DMA_Abort_IT+0x112>
 8000636:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800063a:	e008      	b.n	800064e <HAL_DMA_Abort_IT+0x112>
 800063c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000640:	e005      	b.n	800064e <HAL_DMA_Abort_IT+0x112>
 8000642:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000646:	e002      	b.n	800064e <HAL_DMA_Abort_IT+0x112>
 8000648:	2310      	movs	r3, #16
 800064a:	e000      	b.n	800064e <HAL_DMA_Abort_IT+0x112>
 800064c:	2301      	movs	r3, #1
 800064e:	6053      	str	r3, [r2, #4]
 8000650:	e062      	b.n	8000718 <HAL_DMA_Abort_IT+0x1dc>
 8000652:	4a48      	ldr	r2, [pc, #288]	; (8000774 <HAL_DMA_Abort_IT+0x238>)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4619      	mov	r1, r3
 800065a:	4b3c      	ldr	r3, [pc, #240]	; (800074c <HAL_DMA_Abort_IT+0x210>)
 800065c:	4299      	cmp	r1, r3
 800065e:	d059      	beq.n	8000714 <HAL_DMA_Abort_IT+0x1d8>
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4619      	mov	r1, r3
 8000666:	4b3a      	ldr	r3, [pc, #232]	; (8000750 <HAL_DMA_Abort_IT+0x214>)
 8000668:	4299      	cmp	r1, r3
 800066a:	d051      	beq.n	8000710 <HAL_DMA_Abort_IT+0x1d4>
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	4b38      	ldr	r3, [pc, #224]	; (8000754 <HAL_DMA_Abort_IT+0x218>)
 8000674:	4299      	cmp	r1, r3
 8000676:	d048      	beq.n	800070a <HAL_DMA_Abort_IT+0x1ce>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4619      	mov	r1, r3
 800067e:	4b36      	ldr	r3, [pc, #216]	; (8000758 <HAL_DMA_Abort_IT+0x21c>)
 8000680:	4299      	cmp	r1, r3
 8000682:	d03f      	beq.n	8000704 <HAL_DMA_Abort_IT+0x1c8>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4619      	mov	r1, r3
 800068a:	4b34      	ldr	r3, [pc, #208]	; (800075c <HAL_DMA_Abort_IT+0x220>)
 800068c:	4299      	cmp	r1, r3
 800068e:	d036      	beq.n	80006fe <HAL_DMA_Abort_IT+0x1c2>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4619      	mov	r1, r3
 8000696:	4b32      	ldr	r3, [pc, #200]	; (8000760 <HAL_DMA_Abort_IT+0x224>)
 8000698:	4299      	cmp	r1, r3
 800069a:	d02d      	beq.n	80006f8 <HAL_DMA_Abort_IT+0x1bc>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4619      	mov	r1, r3
 80006a2:	4b28      	ldr	r3, [pc, #160]	; (8000744 <HAL_DMA_Abort_IT+0x208>)
 80006a4:	4299      	cmp	r1, r3
 80006a6:	d024      	beq.n	80006f2 <HAL_DMA_Abort_IT+0x1b6>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4619      	mov	r1, r3
 80006ae:	4b2d      	ldr	r3, [pc, #180]	; (8000764 <HAL_DMA_Abort_IT+0x228>)
 80006b0:	4299      	cmp	r1, r3
 80006b2:	d01c      	beq.n	80006ee <HAL_DMA_Abort_IT+0x1b2>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4619      	mov	r1, r3
 80006ba:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <HAL_DMA_Abort_IT+0x22c>)
 80006bc:	4299      	cmp	r1, r3
 80006be:	d014      	beq.n	80006ea <HAL_DMA_Abort_IT+0x1ae>
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4619      	mov	r1, r3
 80006c6:	4b29      	ldr	r3, [pc, #164]	; (800076c <HAL_DMA_Abort_IT+0x230>)
 80006c8:	4299      	cmp	r1, r3
 80006ca:	d00b      	beq.n	80006e4 <HAL_DMA_Abort_IT+0x1a8>
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4619      	mov	r1, r3
 80006d2:	4b27      	ldr	r3, [pc, #156]	; (8000770 <HAL_DMA_Abort_IT+0x234>)
 80006d4:	4299      	cmp	r1, r3
 80006d6:	d102      	bne.n	80006de <HAL_DMA_Abort_IT+0x1a2>
 80006d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006dc:	e01b      	b.n	8000716 <HAL_DMA_Abort_IT+0x1da>
 80006de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e2:	e018      	b.n	8000716 <HAL_DMA_Abort_IT+0x1da>
 80006e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e8:	e015      	b.n	8000716 <HAL_DMA_Abort_IT+0x1da>
 80006ea:	2310      	movs	r3, #16
 80006ec:	e013      	b.n	8000716 <HAL_DMA_Abort_IT+0x1da>
 80006ee:	2301      	movs	r3, #1
 80006f0:	e011      	b.n	8000716 <HAL_DMA_Abort_IT+0x1da>
 80006f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006f6:	e00e      	b.n	8000716 <HAL_DMA_Abort_IT+0x1da>
 80006f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80006fc:	e00b      	b.n	8000716 <HAL_DMA_Abort_IT+0x1da>
 80006fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000702:	e008      	b.n	8000716 <HAL_DMA_Abort_IT+0x1da>
 8000704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000708:	e005      	b.n	8000716 <HAL_DMA_Abort_IT+0x1da>
 800070a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800070e:	e002      	b.n	8000716 <HAL_DMA_Abort_IT+0x1da>
 8000710:	2310      	movs	r3, #16
 8000712:	e000      	b.n	8000716 <HAL_DMA_Abort_IT+0x1da>
 8000714:	2301      	movs	r3, #1
 8000716:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2201      	movs	r2, #1
 800071c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800072c:	2b00      	cmp	r3, #0
 800072e:	d003      	beq.n	8000738 <HAL_DMA_Abort_IT+0x1fc>
    {
      hdma->XferAbortCallback(hdma);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	4798      	blx	r3
    } 
  }
  return status;
 8000738:	7bfb      	ldrb	r3, [r7, #15]
}
 800073a:	4618      	mov	r0, r3
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40020080 	.word	0x40020080
 8000748:	40020400 	.word	0x40020400
 800074c:	40020008 	.word	0x40020008
 8000750:	4002001c 	.word	0x4002001c
 8000754:	40020030 	.word	0x40020030
 8000758:	40020044 	.word	0x40020044
 800075c:	40020058 	.word	0x40020058
 8000760:	4002006c 	.word	0x4002006c
 8000764:	40020408 	.word	0x40020408
 8000768:	4002041c 	.word	0x4002041c
 800076c:	40020430 	.word	0x40020430
 8000770:	40020444 	.word	0x40020444
 8000774:	40020000 	.word	0x40020000

08000778 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000778:	b480      	push	{r7}
 800077a:	b08b      	sub	sp, #44	; 0x2c
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000782:	2300      	movs	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800078e:	2300      	movs	r3, #0
 8000790:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000796:	2300      	movs	r3, #0
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
 800079a:	e133      	b.n	8000a04 <HAL_GPIO_Init+0x28c>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 800079c:	2201      	movs	r2, #1
 800079e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a0:	fa02 f303 	lsl.w	r3, r2, r3
 80007a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	4013      	ands	r3, r2
 80007ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007b0:	69ba      	ldr	r2, [r7, #24]
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	f040 8122 	bne.w	80009fe <HAL_GPIO_Init+0x286>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	2b12      	cmp	r3, #18
 80007c0:	d034      	beq.n	800082c <HAL_GPIO_Init+0xb4>
 80007c2:	2b12      	cmp	r3, #18
 80007c4:	d80d      	bhi.n	80007e2 <HAL_GPIO_Init+0x6a>
 80007c6:	2b02      	cmp	r3, #2
 80007c8:	d02b      	beq.n	8000822 <HAL_GPIO_Init+0xaa>
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d804      	bhi.n	80007d8 <HAL_GPIO_Init+0x60>
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d031      	beq.n	8000836 <HAL_GPIO_Init+0xbe>
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d01c      	beq.n	8000810 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80007d6:	e048      	b.n	800086a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80007d8:	2b03      	cmp	r3, #3
 80007da:	d043      	beq.n	8000864 <HAL_GPIO_Init+0xec>
 80007dc:	2b11      	cmp	r3, #17
 80007de:	d01b      	beq.n	8000818 <HAL_GPIO_Init+0xa0>
          break;
 80007e0:	e043      	b.n	800086a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80007e2:	4a8d      	ldr	r2, [pc, #564]	; (8000a18 <HAL_GPIO_Init+0x2a0>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d026      	beq.n	8000836 <HAL_GPIO_Init+0xbe>
 80007e8:	4a8b      	ldr	r2, [pc, #556]	; (8000a18 <HAL_GPIO_Init+0x2a0>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d806      	bhi.n	80007fc <HAL_GPIO_Init+0x84>
 80007ee:	4a8b      	ldr	r2, [pc, #556]	; (8000a1c <HAL_GPIO_Init+0x2a4>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d020      	beq.n	8000836 <HAL_GPIO_Init+0xbe>
 80007f4:	4a8a      	ldr	r2, [pc, #552]	; (8000a20 <HAL_GPIO_Init+0x2a8>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d01d      	beq.n	8000836 <HAL_GPIO_Init+0xbe>
          break;
 80007fa:	e036      	b.n	800086a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80007fc:	4a89      	ldr	r2, [pc, #548]	; (8000a24 <HAL_GPIO_Init+0x2ac>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d019      	beq.n	8000836 <HAL_GPIO_Init+0xbe>
 8000802:	4a89      	ldr	r2, [pc, #548]	; (8000a28 <HAL_GPIO_Init+0x2b0>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d016      	beq.n	8000836 <HAL_GPIO_Init+0xbe>
 8000808:	4a88      	ldr	r2, [pc, #544]	; (8000a2c <HAL_GPIO_Init+0x2b4>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d013      	beq.n	8000836 <HAL_GPIO_Init+0xbe>
          break;
 800080e:	e02c      	b.n	800086a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	623b      	str	r3, [r7, #32]
          break;
 8000816:	e028      	b.n	800086a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	3304      	adds	r3, #4
 800081e:	623b      	str	r3, [r7, #32]
          break;
 8000820:	e023      	b.n	800086a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	68db      	ldr	r3, [r3, #12]
 8000826:	3308      	adds	r3, #8
 8000828:	623b      	str	r3, [r7, #32]
          break;
 800082a:	e01e      	b.n	800086a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	330c      	adds	r3, #12
 8000832:	623b      	str	r3, [r7, #32]
          break;
 8000834:	e019      	b.n	800086a <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d102      	bne.n	8000844 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800083e:	2304      	movs	r3, #4
 8000840:	623b      	str	r3, [r7, #32]
          break;
 8000842:	e012      	b.n	800086a <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d105      	bne.n	8000858 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800084c:	2308      	movs	r3, #8
 800084e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	69fa      	ldr	r2, [r7, #28]
 8000854:	611a      	str	r2, [r3, #16]
          break;
 8000856:	e008      	b.n	800086a <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000858:	2308      	movs	r3, #8
 800085a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	69fa      	ldr	r2, [r7, #28]
 8000860:	615a      	str	r2, [r3, #20]
          break;
 8000862:	e002      	b.n	800086a <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
          break;
 8000868:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800086a:	69bb      	ldr	r3, [r7, #24]
 800086c:	2bff      	cmp	r3, #255	; 0xff
 800086e:	d801      	bhi.n	8000874 <HAL_GPIO_Init+0xfc>
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	e001      	b.n	8000878 <HAL_GPIO_Init+0x100>
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3304      	adds	r3, #4
 8000878:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	2bff      	cmp	r3, #255	; 0xff
 800087e:	d802      	bhi.n	8000886 <HAL_GPIO_Init+0x10e>
 8000880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	e002      	b.n	800088c <HAL_GPIO_Init+0x114>
 8000886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000888:	3b08      	subs	r3, #8
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	210f      	movs	r1, #15
 8000894:	693b      	ldr	r3, [r7, #16]
 8000896:	fa01 f303 	lsl.w	r3, r1, r3
 800089a:	43db      	mvns	r3, r3
 800089c:	401a      	ands	r2, r3
 800089e:	6a39      	ldr	r1, [r7, #32]
 80008a0:	693b      	ldr	r3, [r7, #16]
 80008a2:	fa01 f303 	lsl.w	r3, r1, r3
 80008a6:	431a      	orrs	r2, r3
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	f000 80a2 	beq.w	80009fe <HAL_GPIO_Init+0x286>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008ba:	4a5d      	ldr	r2, [pc, #372]	; (8000a30 <HAL_GPIO_Init+0x2b8>)
 80008bc:	4b5c      	ldr	r3, [pc, #368]	; (8000a30 <HAL_GPIO_Init+0x2b8>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6193      	str	r3, [r2, #24]
 80008c6:	4b5a      	ldr	r3, [pc, #360]	; (8000a30 <HAL_GPIO_Init+0x2b8>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 80008d2:	4a58      	ldr	r2, [pc, #352]	; (8000a34 <HAL_GPIO_Init+0x2bc>)
 80008d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d6:	089b      	lsrs	r3, r3, #2
 80008d8:	3302      	adds	r3, #2
 80008da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008de:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80008e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e2:	f003 0303 	and.w	r3, r3, #3
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	220f      	movs	r2, #15
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	43db      	mvns	r3, r3
 80008f0:	697a      	ldr	r2, [r7, #20]
 80008f2:	4013      	ands	r3, r2
 80008f4:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a4f      	ldr	r2, [pc, #316]	; (8000a38 <HAL_GPIO_Init+0x2c0>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d01f      	beq.n	800093e <HAL_GPIO_Init+0x1c6>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a4e      	ldr	r2, [pc, #312]	; (8000a3c <HAL_GPIO_Init+0x2c4>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d019      	beq.n	800093a <HAL_GPIO_Init+0x1c2>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a4d      	ldr	r2, [pc, #308]	; (8000a40 <HAL_GPIO_Init+0x2c8>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d013      	beq.n	8000936 <HAL_GPIO_Init+0x1be>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a4c      	ldr	r2, [pc, #304]	; (8000a44 <HAL_GPIO_Init+0x2cc>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d00d      	beq.n	8000932 <HAL_GPIO_Init+0x1ba>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a4b      	ldr	r2, [pc, #300]	; (8000a48 <HAL_GPIO_Init+0x2d0>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d007      	beq.n	800092e <HAL_GPIO_Init+0x1b6>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a4a      	ldr	r2, [pc, #296]	; (8000a4c <HAL_GPIO_Init+0x2d4>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d101      	bne.n	800092a <HAL_GPIO_Init+0x1b2>
 8000926:	2305      	movs	r3, #5
 8000928:	e00a      	b.n	8000940 <HAL_GPIO_Init+0x1c8>
 800092a:	2306      	movs	r3, #6
 800092c:	e008      	b.n	8000940 <HAL_GPIO_Init+0x1c8>
 800092e:	2304      	movs	r3, #4
 8000930:	e006      	b.n	8000940 <HAL_GPIO_Init+0x1c8>
 8000932:	2303      	movs	r3, #3
 8000934:	e004      	b.n	8000940 <HAL_GPIO_Init+0x1c8>
 8000936:	2302      	movs	r3, #2
 8000938:	e002      	b.n	8000940 <HAL_GPIO_Init+0x1c8>
 800093a:	2301      	movs	r3, #1
 800093c:	e000      	b.n	8000940 <HAL_GPIO_Init+0x1c8>
 800093e:	2300      	movs	r3, #0
 8000940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000942:	f002 0203 	and.w	r2, r2, #3
 8000946:	0092      	lsls	r2, r2, #2
 8000948:	4093      	lsls	r3, r2
 800094a:	697a      	ldr	r2, [r7, #20]
 800094c:	4313      	orrs	r3, r2
 800094e:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000950:	4938      	ldr	r1, [pc, #224]	; (8000a34 <HAL_GPIO_Init+0x2bc>)
 8000952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000954:	089b      	lsrs	r3, r3, #2
 8000956:	3302      	adds	r3, #2
 8000958:	697a      	ldr	r2, [r7, #20]
 800095a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000966:	2b00      	cmp	r3, #0
 8000968:	d006      	beq.n	8000978 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800096a:	4939      	ldr	r1, [pc, #228]	; (8000a50 <HAL_GPIO_Init+0x2d8>)
 800096c:	4b38      	ldr	r3, [pc, #224]	; (8000a50 <HAL_GPIO_Init+0x2d8>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	4313      	orrs	r3, r2
 8000974:	600b      	str	r3, [r1, #0]
 8000976:	e006      	b.n	8000986 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000978:	4935      	ldr	r1, [pc, #212]	; (8000a50 <HAL_GPIO_Init+0x2d8>)
 800097a:	4b35      	ldr	r3, [pc, #212]	; (8000a50 <HAL_GPIO_Init+0x2d8>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	69bb      	ldr	r3, [r7, #24]
 8000980:	43db      	mvns	r3, r3
 8000982:	4013      	ands	r3, r2
 8000984:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098e:	2b00      	cmp	r3, #0
 8000990:	d006      	beq.n	80009a0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000992:	492f      	ldr	r1, [pc, #188]	; (8000a50 <HAL_GPIO_Init+0x2d8>)
 8000994:	4b2e      	ldr	r3, [pc, #184]	; (8000a50 <HAL_GPIO_Init+0x2d8>)
 8000996:	685a      	ldr	r2, [r3, #4]
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	4313      	orrs	r3, r2
 800099c:	604b      	str	r3, [r1, #4]
 800099e:	e006      	b.n	80009ae <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80009a0:	492b      	ldr	r1, [pc, #172]	; (8000a50 <HAL_GPIO_Init+0x2d8>)
 80009a2:	4b2b      	ldr	r3, [pc, #172]	; (8000a50 <HAL_GPIO_Init+0x2d8>)
 80009a4:	685a      	ldr	r2, [r3, #4]
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	43db      	mvns	r3, r3
 80009aa:	4013      	ands	r3, r2
 80009ac:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d006      	beq.n	80009c8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009ba:	4925      	ldr	r1, [pc, #148]	; (8000a50 <HAL_GPIO_Init+0x2d8>)
 80009bc:	4b24      	ldr	r3, [pc, #144]	; (8000a50 <HAL_GPIO_Init+0x2d8>)
 80009be:	689a      	ldr	r2, [r3, #8]
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	608b      	str	r3, [r1, #8]
 80009c6:	e006      	b.n	80009d6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009c8:	4921      	ldr	r1, [pc, #132]	; (8000a50 <HAL_GPIO_Init+0x2d8>)
 80009ca:	4b21      	ldr	r3, [pc, #132]	; (8000a50 <HAL_GPIO_Init+0x2d8>)
 80009cc:	689a      	ldr	r2, [r3, #8]
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	43db      	mvns	r3, r3
 80009d2:	4013      	ands	r3, r2
 80009d4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d006      	beq.n	80009f0 <HAL_GPIO_Init+0x278>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009e2:	491b      	ldr	r1, [pc, #108]	; (8000a50 <HAL_GPIO_Init+0x2d8>)
 80009e4:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <HAL_GPIO_Init+0x2d8>)
 80009e6:	68da      	ldr	r2, [r3, #12]
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	60cb      	str	r3, [r1, #12]
 80009ee:	e006      	b.n	80009fe <HAL_GPIO_Init+0x286>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009f0:	4917      	ldr	r1, [pc, #92]	; (8000a50 <HAL_GPIO_Init+0x2d8>)
 80009f2:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <HAL_GPIO_Init+0x2d8>)
 80009f4:	68da      	ldr	r2, [r3, #12]
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	43db      	mvns	r3, r3
 80009fa:	4013      	ands	r3, r2
 80009fc:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80009fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a00:	3301      	adds	r3, #1
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
 8000a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a06:	2b0f      	cmp	r3, #15
 8000a08:	f67f aec8 	bls.w	800079c <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	372c      	adds	r7, #44	; 0x2c
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	10210000 	.word	0x10210000
 8000a1c:	10110000 	.word	0x10110000
 8000a20:	10120000 	.word	0x10120000
 8000a24:	10310000 	.word	0x10310000
 8000a28:	10320000 	.word	0x10320000
 8000a2c:	10220000 	.word	0x10220000
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40010000 	.word	0x40010000
 8000a38:	40010800 	.word	0x40010800
 8000a3c:	40010c00 	.word	0x40010c00
 8000a40:	40011000 	.word	0x40011000
 8000a44:	40011400 	.word	0x40011400
 8000a48:	40011800 	.word	0x40011800
 8000a4c:	40011c00 	.word	0x40011c00
 8000a50:	40010400 	.word	0x40010400

08000a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	807b      	strh	r3, [r7, #2]
 8000a60:	4613      	mov	r3, r2
 8000a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a64:	787b      	ldrb	r3, [r7, #1]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d003      	beq.n	8000a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a6a:	887a      	ldrh	r2, [r7, #2]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000a70:	e003      	b.n	8000a7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a72:	887b      	ldrh	r3, [r7, #2]
 8000a74:	041a      	lsls	r2, r3, #16
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	611a      	str	r2, [r3, #16]
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr

08000a84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	68da      	ldr	r2, [r3, #12]
 8000a94:	887b      	ldrh	r3, [r7, #2]
 8000a96:	405a      	eors	r2, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	60da      	str	r2, [r3, #12]
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
	...

08000aa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	f000 8087 	beq.w	8000bd0 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ac2:	4b92      	ldr	r3, [pc, #584]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f003 030c 	and.w	r3, r3, #12
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	d00c      	beq.n	8000ae8 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ace:	4b8f      	ldr	r3, [pc, #572]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f003 030c 	and.w	r3, r3, #12
 8000ad6:	2b08      	cmp	r3, #8
 8000ad8:	d112      	bne.n	8000b00 <HAL_RCC_OscConfig+0x58>
 8000ada:	4b8c      	ldr	r3, [pc, #560]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ae6:	d10b      	bne.n	8000b00 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ae8:	4b88      	ldr	r3, [pc, #544]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d06c      	beq.n	8000bce <HAL_RCC_OscConfig+0x126>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d168      	bne.n	8000bce <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000afc:	2301      	movs	r3, #1
 8000afe:	e22d      	b.n	8000f5c <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b08:	d106      	bne.n	8000b18 <HAL_RCC_OscConfig+0x70>
 8000b0a:	4a80      	ldr	r2, [pc, #512]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000b0c:	4b7f      	ldr	r3, [pc, #508]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b14:	6013      	str	r3, [r2, #0]
 8000b16:	e02e      	b.n	8000b76 <HAL_RCC_OscConfig+0xce>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d10c      	bne.n	8000b3a <HAL_RCC_OscConfig+0x92>
 8000b20:	4a7a      	ldr	r2, [pc, #488]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000b22:	4b7a      	ldr	r3, [pc, #488]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b2a:	6013      	str	r3, [r2, #0]
 8000b2c:	4a77      	ldr	r2, [pc, #476]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000b2e:	4b77      	ldr	r3, [pc, #476]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b36:	6013      	str	r3, [r2, #0]
 8000b38:	e01d      	b.n	8000b76 <HAL_RCC_OscConfig+0xce>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b42:	d10c      	bne.n	8000b5e <HAL_RCC_OscConfig+0xb6>
 8000b44:	4a71      	ldr	r2, [pc, #452]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000b46:	4b71      	ldr	r3, [pc, #452]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b4e:	6013      	str	r3, [r2, #0]
 8000b50:	4a6e      	ldr	r2, [pc, #440]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000b52:	4b6e      	ldr	r3, [pc, #440]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b5a:	6013      	str	r3, [r2, #0]
 8000b5c:	e00b      	b.n	8000b76 <HAL_RCC_OscConfig+0xce>
 8000b5e:	4a6b      	ldr	r2, [pc, #428]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000b60:	4b6a      	ldr	r3, [pc, #424]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b68:	6013      	str	r3, [r2, #0]
 8000b6a:	4a68      	ldr	r2, [pc, #416]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000b6c:	4b67      	ldr	r3, [pc, #412]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b74:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d013      	beq.n	8000ba6 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b7e:	f7ff fba9 	bl	80002d4 <HAL_GetTick>
 8000b82:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b84:	e008      	b.n	8000b98 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b86:	f7ff fba5 	bl	80002d4 <HAL_GetTick>
 8000b8a:	4602      	mov	r2, r0
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	1ad3      	subs	r3, r2, r3
 8000b90:	2b64      	cmp	r3, #100	; 0x64
 8000b92:	d901      	bls.n	8000b98 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8000b94:	2303      	movs	r3, #3
 8000b96:	e1e1      	b.n	8000f5c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b98:	4b5c      	ldr	r3, [pc, #368]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d0f0      	beq.n	8000b86 <HAL_RCC_OscConfig+0xde>
 8000ba4:	e014      	b.n	8000bd0 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ba6:	f7ff fb95 	bl	80002d4 <HAL_GetTick>
 8000baa:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bac:	e008      	b.n	8000bc0 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bae:	f7ff fb91 	bl	80002d4 <HAL_GetTick>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	1ad3      	subs	r3, r2, r3
 8000bb8:	2b64      	cmp	r3, #100	; 0x64
 8000bba:	d901      	bls.n	8000bc0 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	e1cd      	b.n	8000f5c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bc0:	4b52      	ldr	r3, [pc, #328]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d1f0      	bne.n	8000bae <HAL_RCC_OscConfig+0x106>
 8000bcc:	e000      	b.n	8000bd0 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f003 0302 	and.w	r3, r3, #2
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d063      	beq.n	8000ca4 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000bdc:	4b4b      	ldr	r3, [pc, #300]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f003 030c 	and.w	r3, r3, #12
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d00b      	beq.n	8000c00 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000be8:	4b48      	ldr	r3, [pc, #288]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f003 030c 	and.w	r3, r3, #12
 8000bf0:	2b08      	cmp	r3, #8
 8000bf2:	d11c      	bne.n	8000c2e <HAL_RCC_OscConfig+0x186>
 8000bf4:	4b45      	ldr	r3, [pc, #276]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d116      	bne.n	8000c2e <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c00:	4b42      	ldr	r3, [pc, #264]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f003 0302 	and.w	r3, r3, #2
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d005      	beq.n	8000c18 <HAL_RCC_OscConfig+0x170>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	691b      	ldr	r3, [r3, #16]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d001      	beq.n	8000c18 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	e1a1      	b.n	8000f5c <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c18:	493c      	ldr	r1, [pc, #240]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000c1a:	4b3c      	ldr	r3, [pc, #240]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c2c:	e03a      	b.n	8000ca4 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	691b      	ldr	r3, [r3, #16]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d020      	beq.n	8000c78 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c36:	4b36      	ldr	r3, [pc, #216]	; (8000d10 <HAL_RCC_OscConfig+0x268>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c3c:	f7ff fb4a 	bl	80002d4 <HAL_GetTick>
 8000c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c42:	e008      	b.n	8000c56 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c44:	f7ff fb46 	bl	80002d4 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d901      	bls.n	8000c56 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8000c52:	2303      	movs	r3, #3
 8000c54:	e182      	b.n	8000f5c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c56:	4b2d      	ldr	r3, [pc, #180]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d0f0      	beq.n	8000c44 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c62:	492a      	ldr	r1, [pc, #168]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000c64:	4b29      	ldr	r3, [pc, #164]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	695b      	ldr	r3, [r3, #20]
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	4313      	orrs	r3, r2
 8000c74:	600b      	str	r3, [r1, #0]
 8000c76:	e015      	b.n	8000ca4 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c78:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <HAL_RCC_OscConfig+0x268>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c7e:	f7ff fb29 	bl	80002d4 <HAL_GetTick>
 8000c82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c84:	e008      	b.n	8000c98 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c86:	f7ff fb25 	bl	80002d4 <HAL_GetTick>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d901      	bls.n	8000c98 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8000c94:	2303      	movs	r3, #3
 8000c96:	e161      	b.n	8000f5c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c98:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f003 0302 	and.w	r3, r3, #2
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d1f0      	bne.n	8000c86 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f003 0308 	and.w	r3, r3, #8
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d039      	beq.n	8000d24 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d019      	beq.n	8000cec <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cb8:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cbe:	f7ff fb09 	bl	80002d4 <HAL_GetTick>
 8000cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cc4:	e008      	b.n	8000cd8 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cc6:	f7ff fb05 	bl	80002d4 <HAL_GetTick>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d901      	bls.n	8000cd8 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	e141      	b.n	8000f5c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <HAL_RCC_OscConfig+0x264>)
 8000cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cdc:	f003 0302 	and.w	r3, r3, #2
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d0f0      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	f000 fae3 	bl	80012b0 <RCC_Delay>
 8000cea:	e01b      	b.n	8000d24 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cf2:	f7ff faef 	bl	80002d4 <HAL_GetTick>
 8000cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cf8:	e00e      	b.n	8000d18 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cfa:	f7ff faeb 	bl	80002d4 <HAL_GetTick>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d907      	bls.n	8000d18 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	e127      	b.n	8000f5c <HAL_RCC_OscConfig+0x4b4>
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	42420000 	.word	0x42420000
 8000d14:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d18:	4b92      	ldr	r3, [pc, #584]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1c:	f003 0302 	and.w	r3, r3, #2
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d1ea      	bne.n	8000cfa <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	f000 80a6 	beq.w	8000e7e <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d32:	2300      	movs	r3, #0
 8000d34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d36:	4b8b      	ldr	r3, [pc, #556]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d10d      	bne.n	8000d5e <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	4a88      	ldr	r2, [pc, #544]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000d44:	4b87      	ldr	r3, [pc, #540]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000d46:	69db      	ldr	r3, [r3, #28]
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	61d3      	str	r3, [r2, #28]
 8000d4e:	4b85      	ldr	r3, [pc, #532]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d5e:	4b82      	ldr	r3, [pc, #520]	; (8000f68 <HAL_RCC_OscConfig+0x4c0>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d118      	bne.n	8000d9c <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d6a:	4a7f      	ldr	r2, [pc, #508]	; (8000f68 <HAL_RCC_OscConfig+0x4c0>)
 8000d6c:	4b7e      	ldr	r3, [pc, #504]	; (8000f68 <HAL_RCC_OscConfig+0x4c0>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d76:	f7ff faad 	bl	80002d4 <HAL_GetTick>
 8000d7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d7c:	e008      	b.n	8000d90 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d7e:	f7ff faa9 	bl	80002d4 <HAL_GetTick>
 8000d82:	4602      	mov	r2, r0
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	2b64      	cmp	r3, #100	; 0x64
 8000d8a:	d901      	bls.n	8000d90 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	e0e5      	b.n	8000f5c <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d90:	4b75      	ldr	r3, [pc, #468]	; (8000f68 <HAL_RCC_OscConfig+0x4c0>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d0f0      	beq.n	8000d7e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d106      	bne.n	8000db2 <HAL_RCC_OscConfig+0x30a>
 8000da4:	4a6f      	ldr	r2, [pc, #444]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000da6:	4b6f      	ldr	r3, [pc, #444]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000da8:	6a1b      	ldr	r3, [r3, #32]
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	6213      	str	r3, [r2, #32]
 8000db0:	e02d      	b.n	8000e0e <HAL_RCC_OscConfig+0x366>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d10c      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x32c>
 8000dba:	4a6a      	ldr	r2, [pc, #424]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000dbc:	4b69      	ldr	r3, [pc, #420]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000dbe:	6a1b      	ldr	r3, [r3, #32]
 8000dc0:	f023 0301 	bic.w	r3, r3, #1
 8000dc4:	6213      	str	r3, [r2, #32]
 8000dc6:	4a67      	ldr	r2, [pc, #412]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000dc8:	4b66      	ldr	r3, [pc, #408]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000dca:	6a1b      	ldr	r3, [r3, #32]
 8000dcc:	f023 0304 	bic.w	r3, r3, #4
 8000dd0:	6213      	str	r3, [r2, #32]
 8000dd2:	e01c      	b.n	8000e0e <HAL_RCC_OscConfig+0x366>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	2b05      	cmp	r3, #5
 8000dda:	d10c      	bne.n	8000df6 <HAL_RCC_OscConfig+0x34e>
 8000ddc:	4a61      	ldr	r2, [pc, #388]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000dde:	4b61      	ldr	r3, [pc, #388]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000de0:	6a1b      	ldr	r3, [r3, #32]
 8000de2:	f043 0304 	orr.w	r3, r3, #4
 8000de6:	6213      	str	r3, [r2, #32]
 8000de8:	4a5e      	ldr	r2, [pc, #376]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000dea:	4b5e      	ldr	r3, [pc, #376]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000dec:	6a1b      	ldr	r3, [r3, #32]
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	6213      	str	r3, [r2, #32]
 8000df4:	e00b      	b.n	8000e0e <HAL_RCC_OscConfig+0x366>
 8000df6:	4a5b      	ldr	r2, [pc, #364]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000df8:	4b5a      	ldr	r3, [pc, #360]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000dfa:	6a1b      	ldr	r3, [r3, #32]
 8000dfc:	f023 0301 	bic.w	r3, r3, #1
 8000e00:	6213      	str	r3, [r2, #32]
 8000e02:	4a58      	ldr	r2, [pc, #352]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000e04:	4b57      	ldr	r3, [pc, #348]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000e06:	6a1b      	ldr	r3, [r3, #32]
 8000e08:	f023 0304 	bic.w	r3, r3, #4
 8000e0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d015      	beq.n	8000e42 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e16:	f7ff fa5d 	bl	80002d4 <HAL_GetTick>
 8000e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e1c:	e00a      	b.n	8000e34 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e1e:	f7ff fa59 	bl	80002d4 <HAL_GetTick>
 8000e22:	4602      	mov	r2, r0
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d901      	bls.n	8000e34 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8000e30:	2303      	movs	r3, #3
 8000e32:	e093      	b.n	8000f5c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e34:	4b4b      	ldr	r3, [pc, #300]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000e36:	6a1b      	ldr	r3, [r3, #32]
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0ee      	beq.n	8000e1e <HAL_RCC_OscConfig+0x376>
 8000e40:	e014      	b.n	8000e6c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e42:	f7ff fa47 	bl	80002d4 <HAL_GetTick>
 8000e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e48:	e00a      	b.n	8000e60 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e4a:	f7ff fa43 	bl	80002d4 <HAL_GetTick>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d901      	bls.n	8000e60 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	e07d      	b.n	8000f5c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e60:	4b40      	ldr	r3, [pc, #256]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000e62:	6a1b      	ldr	r3, [r3, #32]
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d1ee      	bne.n	8000e4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e6c:	7dfb      	ldrb	r3, [r7, #23]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d105      	bne.n	8000e7e <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e72:	4a3c      	ldr	r2, [pc, #240]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000e74:	4b3b      	ldr	r3, [pc, #236]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000e76:	69db      	ldr	r3, [r3, #28]
 8000e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d069      	beq.n	8000f5a <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e86:	4b37      	ldr	r3, [pc, #220]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 030c 	and.w	r3, r3, #12
 8000e8e:	2b08      	cmp	r3, #8
 8000e90:	d061      	beq.n	8000f56 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d146      	bne.n	8000f28 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e9a:	4b34      	ldr	r3, [pc, #208]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea0:	f7ff fa18 	bl	80002d4 <HAL_GetTick>
 8000ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ea6:	e008      	b.n	8000eba <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ea8:	f7ff fa14 	bl	80002d4 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d901      	bls.n	8000eba <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e050      	b.n	8000f5c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eba:	4b2a      	ldr	r3, [pc, #168]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1f0      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6a1b      	ldr	r3, [r3, #32]
 8000eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ece:	d108      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ed0:	4924      	ldr	r1, [pc, #144]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000ed2:	4b24      	ldr	r3, [pc, #144]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ee2:	4820      	ldr	r0, [pc, #128]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000ee4:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6a19      	ldr	r1, [r3, #32]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef4:	430b      	orrs	r3, r1
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f00:	f7ff f9e8 	bl	80002d4 <HAL_GetTick>
 8000f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f06:	e008      	b.n	8000f1a <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f08:	f7ff f9e4 	bl	80002d4 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d901      	bls.n	8000f1a <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	e020      	b.n	8000f5c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f1a:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d0f0      	beq.n	8000f08 <HAL_RCC_OscConfig+0x460>
 8000f26:	e018      	b.n	8000f5a <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f28:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2e:	f7ff f9d1 	bl	80002d4 <HAL_GetTick>
 8000f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f34:	e008      	b.n	8000f48 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f36:	f7ff f9cd 	bl	80002d4 <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d901      	bls.n	8000f48 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e009      	b.n	8000f5c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_RCC_OscConfig+0x4bc>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1f0      	bne.n	8000f36 <HAL_RCC_OscConfig+0x48e>
 8000f54:	e001      	b.n	8000f5a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8000f5a:	2300      	movs	r3, #0
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40007000 	.word	0x40007000
 8000f6c:	42420060 	.word	0x42420060

08000f70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f7e:	4b7e      	ldr	r3, [pc, #504]	; (8001178 <HAL_RCC_ClockConfig+0x208>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0207 	and.w	r2, r3, #7
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d210      	bcs.n	8000fae <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f8c:	497a      	ldr	r1, [pc, #488]	; (8001178 <HAL_RCC_ClockConfig+0x208>)
 8000f8e:	4b7a      	ldr	r3, [pc, #488]	; (8001178 <HAL_RCC_ClockConfig+0x208>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f023 0207 	bic.w	r2, r3, #7
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f9c:	4b76      	ldr	r3, [pc, #472]	; (8001178 <HAL_RCC_ClockConfig+0x208>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 0207 	and.w	r2, r3, #7
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d001      	beq.n	8000fae <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e0e0      	b.n	8001170 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d020      	beq.n	8000ffc <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d005      	beq.n	8000fd2 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fc6:	4a6d      	ldr	r2, [pc, #436]	; (800117c <HAL_RCC_ClockConfig+0x20c>)
 8000fc8:	4b6c      	ldr	r3, [pc, #432]	; (800117c <HAL_RCC_ClockConfig+0x20c>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000fd0:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0308 	and.w	r3, r3, #8
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d005      	beq.n	8000fea <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fde:	4a67      	ldr	r2, [pc, #412]	; (800117c <HAL_RCC_ClockConfig+0x20c>)
 8000fe0:	4b66      	ldr	r3, [pc, #408]	; (800117c <HAL_RCC_ClockConfig+0x20c>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000fe8:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fea:	4964      	ldr	r1, [pc, #400]	; (800117c <HAL_RCC_ClockConfig+0x20c>)
 8000fec:	4b63      	ldr	r3, [pc, #396]	; (800117c <HAL_RCC_ClockConfig+0x20c>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b00      	cmp	r3, #0
 8001006:	d06a      	beq.n	80010de <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d107      	bne.n	8001020 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001010:	4b5a      	ldr	r3, [pc, #360]	; (800117c <HAL_RCC_ClockConfig+0x20c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d115      	bne.n	8001048 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e0a7      	b.n	8001170 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	2b02      	cmp	r3, #2
 8001026:	d107      	bne.n	8001038 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001028:	4b54      	ldr	r3, [pc, #336]	; (800117c <HAL_RCC_ClockConfig+0x20c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d109      	bne.n	8001048 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e09b      	b.n	8001170 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001038:	4b50      	ldr	r3, [pc, #320]	; (800117c <HAL_RCC_ClockConfig+0x20c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d101      	bne.n	8001048 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e093      	b.n	8001170 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001048:	494c      	ldr	r1, [pc, #304]	; (800117c <HAL_RCC_ClockConfig+0x20c>)
 800104a:	4b4c      	ldr	r3, [pc, #304]	; (800117c <HAL_RCC_ClockConfig+0x20c>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f023 0203 	bic.w	r2, r3, #3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	4313      	orrs	r3, r2
 8001058:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800105a:	f7ff f93b 	bl	80002d4 <HAL_GetTick>
 800105e:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d112      	bne.n	800108e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001068:	e00a      	b.n	8001080 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800106a:	f7ff f933 	bl	80002d4 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	f241 3288 	movw	r2, #5000	; 0x1388
 8001078:	4293      	cmp	r3, r2
 800107a:	d901      	bls.n	8001080 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e077      	b.n	8001170 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001080:	4b3e      	ldr	r3, [pc, #248]	; (800117c <HAL_RCC_ClockConfig+0x20c>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 030c 	and.w	r3, r3, #12
 8001088:	2b04      	cmp	r3, #4
 800108a:	d1ee      	bne.n	800106a <HAL_RCC_ClockConfig+0xfa>
 800108c:	e027      	b.n	80010de <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2b02      	cmp	r3, #2
 8001094:	d11d      	bne.n	80010d2 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001096:	e00a      	b.n	80010ae <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001098:	f7ff f91c 	bl	80002d4 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e060      	b.n	8001170 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010ae:	4b33      	ldr	r3, [pc, #204]	; (800117c <HAL_RCC_ClockConfig+0x20c>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 030c 	and.w	r3, r3, #12
 80010b6:	2b08      	cmp	r3, #8
 80010b8:	d1ee      	bne.n	8001098 <HAL_RCC_ClockConfig+0x128>
 80010ba:	e010      	b.n	80010de <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010bc:	f7ff f90a 	bl	80002d4 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e04e      	b.n	8001170 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80010d2:	4b2a      	ldr	r3, [pc, #168]	; (800117c <HAL_RCC_ClockConfig+0x20c>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 030c 	and.w	r3, r3, #12
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1ee      	bne.n	80010bc <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80010de:	4b26      	ldr	r3, [pc, #152]	; (8001178 <HAL_RCC_ClockConfig+0x208>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0207 	and.w	r2, r3, #7
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d910      	bls.n	800110e <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ec:	4922      	ldr	r1, [pc, #136]	; (8001178 <HAL_RCC_ClockConfig+0x208>)
 80010ee:	4b22      	ldr	r3, [pc, #136]	; (8001178 <HAL_RCC_ClockConfig+0x208>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f023 0207 	bic.w	r2, r3, #7
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010fc:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <HAL_RCC_ClockConfig+0x208>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0207 	and.w	r2, r3, #7
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	429a      	cmp	r2, r3
 8001108:	d001      	beq.n	800110e <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e030      	b.n	8001170 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	2b00      	cmp	r3, #0
 8001118:	d008      	beq.n	800112c <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800111a:	4918      	ldr	r1, [pc, #96]	; (800117c <HAL_RCC_ClockConfig+0x20c>)
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <HAL_RCC_ClockConfig+0x20c>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	4313      	orrs	r3, r2
 800112a:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0308 	and.w	r3, r3, #8
 8001134:	2b00      	cmp	r3, #0
 8001136:	d009      	beq.n	800114c <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001138:	4910      	ldr	r1, [pc, #64]	; (800117c <HAL_RCC_ClockConfig+0x20c>)
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <HAL_RCC_ClockConfig+0x20c>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	4313      	orrs	r3, r2
 800114a:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800114c:	f000 f81c 	bl	8001188 <HAL_RCC_GetSysClockFreq>
 8001150:	4601      	mov	r1, r0
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <HAL_RCC_ClockConfig+0x20c>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	091b      	lsrs	r3, r3, #4
 8001158:	f003 030f 	and.w	r3, r3, #15
 800115c:	4a08      	ldr	r2, [pc, #32]	; (8001180 <HAL_RCC_ClockConfig+0x210>)
 800115e:	5cd3      	ldrb	r3, [r2, r3]
 8001160:	fa21 f303 	lsr.w	r3, r1, r3
 8001164:	4a07      	ldr	r2, [pc, #28]	; (8001184 <HAL_RCC_ClockConfig+0x214>)
 8001166:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001168:	2000      	movs	r0, #0
 800116a:	f7ff f871 	bl	8000250 <HAL_InitTick>
  
  return HAL_OK;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40022000 	.word	0x40022000
 800117c:	40021000 	.word	0x40021000
 8001180:	080051e0 	.word	0x080051e0
 8001184:	2000007c 	.word	0x2000007c

08001188 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001188:	b490      	push	{r4, r7}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800118e:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001190:	1d3c      	adds	r4, r7, #4
 8001192:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001194:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001198:	4b28      	ldr	r3, [pc, #160]	; (800123c <HAL_RCC_GetSysClockFreq+0xb4>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80011b2:	4b23      	ldr	r3, [pc, #140]	; (8001240 <HAL_RCC_GetSysClockFreq+0xb8>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f003 030c 	and.w	r3, r3, #12
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d002      	beq.n	80011c8 <HAL_RCC_GetSysClockFreq+0x40>
 80011c2:	2b08      	cmp	r3, #8
 80011c4:	d003      	beq.n	80011ce <HAL_RCC_GetSysClockFreq+0x46>
 80011c6:	e02d      	b.n	8001224 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80011c8:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <HAL_RCC_GetSysClockFreq+0xbc>)
 80011ca:	623b      	str	r3, [r7, #32]
      break;
 80011cc:	e02d      	b.n	800122a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	0c9b      	lsrs	r3, r3, #18
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80011da:	4413      	add	r3, r2
 80011dc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011e0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d013      	beq.n	8001214 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <HAL_RCC_GetSysClockFreq+0xb8>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	0c5b      	lsrs	r3, r3, #17
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80011fa:	4413      	add	r3, r2
 80011fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001200:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001206:	fb02 f203 	mul.w	r2, r2, r3
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
 8001212:	e004      	b.n	800121e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	4a0c      	ldr	r2, [pc, #48]	; (8001248 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001218:	fb02 f303 	mul.w	r3, r2, r3
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	623b      	str	r3, [r7, #32]
      break;
 8001222:	e002      	b.n	800122a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001226:	623b      	str	r3, [r7, #32]
      break;
 8001228:	bf00      	nop
    }
  }
  return sysclockfreq;
 800122a:	6a3b      	ldr	r3, [r7, #32]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3728      	adds	r7, #40	; 0x28
 8001230:	46bd      	mov	sp, r7
 8001232:	bc90      	pop	{r4, r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	08005128 	.word	0x08005128
 800123c:	08005138 	.word	0x08005138
 8001240:	40021000 	.word	0x40021000
 8001244:	007a1200 	.word	0x007a1200
 8001248:	003d0900 	.word	0x003d0900

0800124c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001250:	4b02      	ldr	r3, [pc, #8]	; (800125c <HAL_RCC_GetHCLKFreq+0x10>)
 8001252:	681b      	ldr	r3, [r3, #0]
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	2000007c 	.word	0x2000007c

08001260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001264:	f7ff fff2 	bl	800124c <HAL_RCC_GetHCLKFreq>
 8001268:	4601      	mov	r1, r0
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_RCC_GetPCLK1Freq+0x20>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	0a1b      	lsrs	r3, r3, #8
 8001270:	f003 0307 	and.w	r3, r3, #7
 8001274:	4a03      	ldr	r2, [pc, #12]	; (8001284 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001276:	5cd3      	ldrb	r3, [r2, r3]
 8001278:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800127c:	4618      	mov	r0, r3
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40021000 	.word	0x40021000
 8001284:	080051f0 	.word	0x080051f0

08001288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800128c:	f7ff ffde 	bl	800124c <HAL_RCC_GetHCLKFreq>
 8001290:	4601      	mov	r1, r0
 8001292:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	0adb      	lsrs	r3, r3, #11
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	4a03      	ldr	r2, [pc, #12]	; (80012ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800129e:	5cd3      	ldrb	r3, [r2, r3]
 80012a0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80012a4:	4618      	mov	r0, r3
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40021000 	.word	0x40021000
 80012ac:	080051f0 	.word	0x080051f0

080012b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80012b8:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <RCC_Delay+0x34>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <RCC_Delay+0x38>)
 80012be:	fba2 2303 	umull	r2, r3, r2, r3
 80012c2:	0a5b      	lsrs	r3, r3, #9
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	fb02 f303 	mul.w	r3, r2, r3
 80012ca:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80012cc:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	1e5a      	subs	r2, r3, #1
 80012d2:	60fa      	str	r2, [r7, #12]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1f9      	bne.n	80012cc <RCC_Delay+0x1c>
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	2000007c 	.word	0x2000007c
 80012e8:	10624dd3 	.word	0x10624dd3

080012ec <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 80012f0:	af02      	add	r7, sp, #8
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	4613      	mov	r3, r2
 80012fa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001300:	2300      	movs	r3, #0
 8001302:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800130a:	2b01      	cmp	r3, #1
 800130c:	d101      	bne.n	8001312 <HAL_SPI_Transmit+0x26>
 800130e:	2302      	movs	r3, #2
 8001310:	e123      	b.n	800155a <HAL_SPI_Transmit+0x26e>
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2201      	movs	r2, #1
 8001316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800131a:	f7fe ffdb 	bl	80002d4 <HAL_GetTick>
 800131e:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001326:	b2db      	uxtb	r3, r3
 8001328:	2b01      	cmp	r3, #1
 800132a:	d002      	beq.n	8001332 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800132c:	2302      	movs	r3, #2
 800132e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001330:	e10a      	b.n	8001548 <HAL_SPI_Transmit+0x25c>
  }

  if((pData == NULL ) || (Size == 0U))
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <HAL_SPI_Transmit+0x52>
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d102      	bne.n	8001344 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001342:	e101      	b.n	8001548 <HAL_SPI_Transmit+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2203      	movs	r2, #3
 8001348:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2200      	movs	r2, #0
 8001350:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	68ba      	ldr	r2, [r7, #8]
 8001356:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	88fa      	ldrh	r2, [r7, #6]
 800135c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	88fa      	ldrh	r2, [r7, #6]
 8001362:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2200      	movs	r2, #0
 8001368:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2200      	movs	r2, #0
 800136e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2200      	movs	r2, #0
 8001374:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2200      	movs	r2, #0
 800137a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2200      	movs	r2, #0
 8001380:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800138a:	d107      	bne.n	800139c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	6812      	ldr	r2, [r2, #0]
 8001394:	6812      	ldr	r2, [r2, #0]
 8001396:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800139a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a6:	2b40      	cmp	r3, #64	; 0x40
 80013a8:	d007      	beq.n	80013ba <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	6812      	ldr	r2, [r2, #0]
 80013b2:	6812      	ldr	r2, [r2, #0]
 80013b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013c2:	d147      	bne.n	8001454 <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d004      	beq.n	80013d6 <HAL_SPI_Transmit+0xea>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d138      	bne.n	8001448 <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	8812      	ldrh	r2, [r2, #0]
 80013de:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	3302      	adds	r3, #2
 80013e4:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	3b01      	subs	r3, #1
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80013f4:	e028      	b.n	8001448 <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b02      	cmp	r3, #2
 8001402:	d10f      	bne.n	8001424 <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	68ba      	ldr	r2, [r7, #8]
 800140a:	8812      	ldrh	r2, [r2, #0]
 800140c:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	3302      	adds	r3, #2
 8001412:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001418:	b29b      	uxth	r3, r3
 800141a:	3b01      	subs	r3, #1
 800141c:	b29a      	uxth	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	86da      	strh	r2, [r3, #54]	; 0x36
 8001422:	e011      	b.n	8001448 <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00b      	beq.n	8001442 <HAL_SPI_Transmit+0x156>
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001430:	d00a      	beq.n	8001448 <HAL_SPI_Transmit+0x15c>
 8001432:	f7fe ff4f 	bl	80002d4 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	1ad2      	subs	r2, r2, r3
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	d302      	bcc.n	8001448 <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001446:	e07f      	b.n	8001548 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800144c:	b29b      	uxth	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1d1      	bne.n	80013f6 <HAL_SPI_Transmit+0x10a>
 8001452:	e048      	b.n	80014e6 <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d004      	beq.n	8001466 <HAL_SPI_Transmit+0x17a>
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001460:	b29b      	uxth	r3, r3
 8001462:	2b01      	cmp	r3, #1
 8001464:	d13a      	bne.n	80014dc <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	330c      	adds	r3, #12
 800146c:	68ba      	ldr	r2, [r7, #8]
 800146e:	7812      	ldrb	r2, [r2, #0]
 8001470:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	3301      	adds	r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800147c:	b29b      	uxth	r3, r3
 800147e:	3b01      	subs	r3, #1
 8001480:	b29a      	uxth	r2, r3
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001486:	e029      	b.n	80014dc <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b02      	cmp	r3, #2
 8001494:	d110      	bne.n	80014b8 <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	330c      	adds	r3, #12
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	7812      	ldrb	r2, [r2, #0]
 80014a0:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	3301      	adds	r3, #1
 80014a6:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	3b01      	subs	r3, #1
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80014b6:	e011      	b.n	80014dc <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00b      	beq.n	80014d6 <HAL_SPI_Transmit+0x1ea>
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c4:	d00a      	beq.n	80014dc <HAL_SPI_Transmit+0x1f0>
 80014c6:	f7fe ff05 	bl	80002d4 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	1ad2      	subs	r2, r2, r3
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d302      	bcc.n	80014dc <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80014da:	e035      	b.n	8001548 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1d0      	bne.n	8001488 <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	2201      	movs	r2, #1
 80014ee:	2102      	movs	r1, #2
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f000 fac5 	bl	8001a80 <SPI_WaitFlagStateUntilTimeout>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d002      	beq.n	8001502 <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001500:	e022      	b.n	8001548 <HAL_SPI_Transmit+0x25c>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	6839      	ldr	r1, [r7, #0]
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 fb23 	bl	8001b52 <SPI_CheckFlag_BSY>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d005      	beq.n	800151e <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2220      	movs	r2, #32
 800151a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800151c:	e014      	b.n	8001548 <HAL_SPI_Transmit+0x25c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10a      	bne.n	800153c <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001558:	7ffb      	ldrb	r3, [r7, #31]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3720      	adds	r7, #32
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b08c      	sub	sp, #48	; 0x30
 8001566:	af02      	add	r7, sp, #8
 8001568:	60f8      	str	r0, [r7, #12]
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
 8001574:	2300      	movs	r3, #0
 8001576:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 800157c:	2301      	movs	r3, #1
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001580:	2300      	movs	r3, #0
 8001582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800158c:	2b01      	cmp	r3, #1
 800158e:	d101      	bne.n	8001594 <HAL_SPI_TransmitReceive+0x32>
 8001590:	2302      	movs	r3, #2
 8001592:	e181      	b.n	8001898 <HAL_SPI_TransmitReceive+0x336>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800159c:	f7fe fe9a 	bl	80002d4 <HAL_GetTick>
 80015a0:	6178      	str	r0, [r7, #20]
  
  tmp  = hspi->State;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	61bb      	str	r3, [r7, #24]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d00e      	beq.n	80015d6 <HAL_SPI_TransmitReceive+0x74>
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80015be:	d106      	bne.n	80015ce <HAL_SPI_TransmitReceive+0x6c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d102      	bne.n	80015ce <HAL_SPI_TransmitReceive+0x6c>
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	d003      	beq.n	80015d6 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 80015ce:	2302      	movs	r3, #2
 80015d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80015d4:	e156      	b.n	8001884 <HAL_SPI_TransmitReceive+0x322>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <HAL_SPI_TransmitReceive+0x86>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d002      	beq.n	80015e8 <HAL_SPI_TransmitReceive+0x86>
 80015e2:	887b      	ldrh	r3, [r7, #2]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d103      	bne.n	80015f0 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80015ee:	e149      	b.n	8001884 <HAL_SPI_TransmitReceive+0x322>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d103      	bne.n	8001604 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2205      	movs	r2, #5
 8001600:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2200      	movs	r2, #0
 8001608:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	887a      	ldrh	r2, [r7, #2]
 8001614:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	887a      	ldrh	r2, [r7, #2]
 800161a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	887a      	ldrh	r2, [r7, #2]
 8001626:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	887a      	ldrh	r2, [r7, #2]
 800162c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2200      	movs	r2, #0
 8001632:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2200      	movs	r2, #0
 8001638:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001644:	2b40      	cmp	r3, #64	; 0x40
 8001646:	d007      	beq.n	8001658 <HAL_SPI_TransmitReceive+0xf6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	6812      	ldr	r2, [r2, #0]
 8001652:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001656:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001660:	d171      	bne.n	8001746 <HAL_SPI_TransmitReceive+0x1e4>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d004      	beq.n	8001674 <HAL_SPI_TransmitReceive+0x112>
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800166e:	b29b      	uxth	r3, r3
 8001670:	2b01      	cmp	r3, #1
 8001672:	d15d      	bne.n	8001730 <HAL_SPI_TransmitReceive+0x1ce>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	8812      	ldrh	r2, [r2, #0]
 800167c:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	3302      	adds	r3, #2
 8001682:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001688:	b29b      	uxth	r3, r3
 800168a:	3b01      	subs	r3, #1
 800168c:	b29a      	uxth	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001692:	e04d      	b.n	8001730 <HAL_SPI_TransmitReceive+0x1ce>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	2b00      	cmp	r3, #0
 8001698:	d01c      	beq.n	80016d4 <HAL_SPI_TransmitReceive+0x172>
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800169e:	b29b      	uxth	r3, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d017      	beq.n	80016d4 <HAL_SPI_TransmitReceive+0x172>
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d110      	bne.n	80016d4 <HAL_SPI_TransmitReceive+0x172>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	8812      	ldrh	r2, [r2, #0]
 80016ba:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	3302      	adds	r3, #2
 80016c0:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	3b01      	subs	r3, #1
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80016d8:	b29b      	uxth	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d018      	beq.n	8001710 <HAL_SPI_TransmitReceive+0x1ae>
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d111      	bne.n	8001710 <HAL_SPI_TransmitReceive+0x1ae>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3302      	adds	r3, #2
 80016fc:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001702:	b29b      	uxth	r3, r3
 8001704:	3b01      	subs	r3, #1
 8001706:	b29a      	uxth	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 800170c:	2301      	movs	r3, #1
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001716:	d00b      	beq.n	8001730 <HAL_SPI_TransmitReceive+0x1ce>
 8001718:	f7fe fddc 	bl	80002d4 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	1ad2      	subs	r2, r2, r3
 8001722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001724:	429a      	cmp	r2, r3
 8001726:	d303      	bcc.n	8001730 <HAL_SPI_TransmitReceive+0x1ce>
      {
        errorcode = HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800172e:	e0a9      	b.n	8001884 <HAL_SPI_TransmitReceive+0x322>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001734:	b29b      	uxth	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1ac      	bne.n	8001694 <HAL_SPI_TransmitReceive+0x132>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800173e:	b29b      	uxth	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1a7      	bne.n	8001694 <HAL_SPI_TransmitReceive+0x132>
 8001744:	e071      	b.n	800182a <HAL_SPI_TransmitReceive+0x2c8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d004      	beq.n	8001758 <HAL_SPI_TransmitReceive+0x1f6>
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001752:	b29b      	uxth	r3, r3
 8001754:	2b01      	cmp	r3, #1
 8001756:	d15e      	bne.n	8001816 <HAL_SPI_TransmitReceive+0x2b4>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	330c      	adds	r3, #12
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	7812      	ldrb	r2, [r2, #0]
 8001762:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	3301      	adds	r3, #1
 8001768:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800176e:	b29b      	uxth	r3, r3
 8001770:	3b01      	subs	r3, #1
 8001772:	b29a      	uxth	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001778:	e04d      	b.n	8001816 <HAL_SPI_TransmitReceive+0x2b4>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	2b00      	cmp	r3, #0
 800177e:	d01d      	beq.n	80017bc <HAL_SPI_TransmitReceive+0x25a>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001784:	b29b      	uxth	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d018      	beq.n	80017bc <HAL_SPI_TransmitReceive+0x25a>
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b02      	cmp	r3, #2
 8001796:	d111      	bne.n	80017bc <HAL_SPI_TransmitReceive+0x25a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f103 020c 	add.w	r2, r3, #12
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	1c59      	adds	r1, r3, #1
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	3b01      	subs	r3, #1
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d017      	beq.n	80017f6 <HAL_SPI_TransmitReceive+0x294>
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d110      	bne.n	80017f6 <HAL_SPI_TransmitReceive+0x294>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	6812      	ldr	r2, [r2, #0]
 80017de:	68d2      	ldr	r2, [r2, #12]
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	3b01      	subs	r3, #1
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 80017f2:	2301      	movs	r3, #1
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80017f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017fc:	d00b      	beq.n	8001816 <HAL_SPI_TransmitReceive+0x2b4>
 80017fe:	f7fe fd69 	bl	80002d4 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	1ad2      	subs	r2, r2, r3
 8001808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800180a:	429a      	cmp	r2, r3
 800180c:	d303      	bcc.n	8001816 <HAL_SPI_TransmitReceive+0x2b4>
      {
        errorcode = HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8001814:	e036      	b.n	8001884 <HAL_SPI_TransmitReceive+0x322>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800181a:	b29b      	uxth	r3, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1ac      	bne.n	800177a <HAL_SPI_TransmitReceive+0x218>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001824:	b29b      	uxth	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1a7      	bne.n	800177a <HAL_SPI_TransmitReceive+0x218>
    }
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001830:	2201      	movs	r2, #1
 8001832:	2102      	movs	r1, #2
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f000 f923 	bl	8001a80 <SPI_WaitFlagStateUntilTimeout>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_SPI_TransmitReceive+0x2e6>
  {
    errorcode = HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001846:	e01d      	b.n	8001884 <HAL_SPI_TransmitReceive+0x322>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f000 f980 	bl	8001b52 <SPI_CheckFlag_BSY>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d006      	beq.n	8001866 <HAL_SPI_TransmitReceive+0x304>
  {
    errorcode = HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2220      	movs	r2, #32
 8001862:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001864:	e00e      	b.n	8001884 <HAL_SPI_TransmitReceive+0x322>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10a      	bne.n	8001884 <HAL_SPI_TransmitReceive+0x322>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	693b      	ldr	r3, [r7, #16]
  }
  
error :
  hspi->State = HAL_SPI_STATE_READY;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001894:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8001898:	4618      	mov	r0, r3
 800189a:	3728      	adds	r7, #40	; 0x28
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10e      	bne.n	80018e0 <HAL_SPI_IRQHandler+0x40>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	f003 0301 	and.w	r3, r3, #1
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d009      	beq.n	80018e0 <HAL_SPI_IRQHandler+0x40>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d004      	beq.n	80018e0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	4798      	blx	r3
    return;
 80018de:	e09f      	b.n	8001a20 <HAL_SPI_IRQHandler+0x180>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d009      	beq.n	80018fe <HAL_SPI_IRQHandler+0x5e>
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d004      	beq.n	80018fe <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	4798      	blx	r3
    return;
 80018fc:	e090      	b.n	8001a20 <HAL_SPI_IRQHandler+0x180>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 808b 	beq.w	8001a20 <HAL_SPI_IRQHandler+0x180>
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	f003 0320 	and.w	r3, r3, #32
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 8085 	beq.w	8001a20 <HAL_SPI_IRQHandler+0x180>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if((itflag & SPI_FLAG_OVR) != RESET)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800191c:	2b00      	cmp	r3, #0
 800191e:	d023      	beq.n	8001968 <HAL_SPI_IRQHandler+0xc8>
    {
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b03      	cmp	r3, #3
 800192a:	d011      	beq.n	8001950 <HAL_SPI_IRQHandler+0xb0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001930:	f043 0204 	orr.w	r2, r3, #4
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	e00b      	b.n	8001968 <HAL_SPI_IRQHandler+0xc8>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001950:	2300      	movs	r3, #0
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]
        return;
 8001966:	e05b      	b.n	8001a20 <HAL_SPI_IRQHandler+0x180>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if((itflag & SPI_FLAG_MODF) != RESET)
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	f003 0320 	and.w	r3, r3, #32
 800196e:	2b00      	cmp	r3, #0
 8001970:	d014      	beq.n	800199c <HAL_SPI_IRQHandler+0xfc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001976:	f043 0201 	orr.w	r2, r3, #1
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6812      	ldr	r2, [r2, #0]
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
    }

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d03c      	beq.n	8001a1e <HAL_SPI_IRQHandler+0x17e>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	6852      	ldr	r2, [r2, #4]
 80019ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80019b2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d104      	bne.n	80019d0 <HAL_SPI_IRQHandler+0x130>
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d022      	beq.n	8001a16 <HAL_SPI_IRQHandler+0x176>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	6852      	ldr	r2, [r2, #4]
 80019da:	f022 0203 	bic.w	r2, r2, #3
 80019de:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if(hspi->hdmarx != NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d008      	beq.n	80019fa <HAL_SPI_IRQHandler+0x15a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ec:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <HAL_SPI_IRQHandler+0x188>)
 80019ee:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmarx);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fda1 	bl	800053c <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if(hspi->hdmatx != NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00c      	beq.n	8001a1c <HAL_SPI_IRQHandler+0x17c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a06:	4a08      	ldr	r2, [pc, #32]	; (8001a28 <HAL_SPI_IRQHandler+0x188>)
 8001a08:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fd94 	bl	800053c <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 8001a14:	e002      	b.n	8001a1c <HAL_SPI_IRQHandler+0x17c>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 f808 	bl	8001a2c <HAL_SPI_ErrorCallback>
      }
    }
    return;
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
  }
}
 8001a20:	3720      	adds	r7, #32
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	08001a59 	.word	0x08001a59

08001a2c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
  */
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr

08001a3e <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a4c:	b2db      	uxtb	r3, r3
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	86da      	strh	r2, [r3, #54]	; 0x36

  HAL_SPI_ErrorCallback(hspi);
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f7ff ffda 	bl	8001a2c <HAL_SPI_ErrorCallback>
}
 8001a78:	bf00      	nop
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
 8001a8c:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001a8e:	e04d      	b.n	8001b2c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a96:	d049      	beq.n	8001b2c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d007      	beq.n	8001aae <SPI_WaitFlagStateUntilTimeout+0x2e>
 8001a9e:	f7fe fc19 	bl	80002d4 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	1ad2      	subs	r2, r2, r3
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d33e      	bcc.n	8001b2c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	6812      	ldr	r2, [r2, #0]
 8001ab6:	6852      	ldr	r2, [r2, #4]
 8001ab8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001abc:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ac6:	d111      	bne.n	8001aec <SPI_WaitFlagStateUntilTimeout+0x6c>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ad0:	d004      	beq.n	8001adc <SPI_WaitFlagStateUntilTimeout+0x5c>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ada:	d107      	bne.n	8001aec <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001aea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001af4:	d110      	bne.n	8001b18 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6819      	ldr	r1, [r3, #0]
 8001b00:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001b04:	400b      	ands	r3, r1
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b16:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e00e      	b.n	8001b4a <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	401a      	ands	r2, r3
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d101      	bne.n	8001b40 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	e000      	b.n	8001b42 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8001b40:	2200      	movs	r2, #0
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d1a3      	bne.n	8001a90 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b086      	sub	sp, #24
 8001b56:	af02      	add	r7, sp, #8
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	2200      	movs	r2, #0
 8001b66:	2180      	movs	r1, #128	; 0x80
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f7ff ff89 	bl	8001a80 <SPI_WaitFlagStateUntilTimeout>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d007      	beq.n	8001b84 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b78:	f043 0220 	orr.w	r2, r3, #32
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e000      	b.n	8001b86 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e056      	b.n	8001c4e <HAL_SPI_Init+0xc0>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d102      	bne.n	8001bb8 <HAL_SPI_Init+0x2a>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f002 f8c2 	bl	8003d3c <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	6812      	ldr	r2, [r2, #0]
 8001bca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6851      	ldr	r1, [r2, #4]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6892      	ldr	r2, [r2, #8]
 8001bdc:	4311      	orrs	r1, r2
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	68d2      	ldr	r2, [r2, #12]
 8001be2:	4311      	orrs	r1, r2
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6912      	ldr	r2, [r2, #16]
 8001be8:	4311      	orrs	r1, r2
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6952      	ldr	r2, [r2, #20]
 8001bee:	4311      	orrs	r1, r2
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6992      	ldr	r2, [r2, #24]
 8001bf4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001bf8:	4311      	orrs	r1, r2
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	69d2      	ldr	r2, [r2, #28]
 8001bfe:	4311      	orrs	r1, r2
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6a12      	ldr	r2, [r2, #32]
 8001c04:	4311      	orrs	r1, r2
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6992      	ldr	r2, [r2, #24]
 8001c16:	0c12      	lsrs	r2, r2, #16
 8001c18:	f002 0104 	and.w	r1, r2, #4
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c20:	430a      	orrs	r2, r1
 8001c22:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c2c:	611a      	str	r2, [r3, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	69d2      	ldr	r2, [r2, #28]
 8001c38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c3c:	61da      	str	r2, [r3, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  
  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e03f      	b.n	8001ce8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d106      	bne.n	8001c82 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f002 f8df 	bl	8003e40 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2224      	movs	r2, #36	; 0x24
 8001c86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	68d2      	ldr	r2, [r2, #12]
 8001c94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c98:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f90a 	bl	8001eb4 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6812      	ldr	r2, [r2, #0]
 8001ca8:	6912      	ldr	r2, [r2, #16]
 8001caa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	6952      	ldr	r2, [r2, #20]
 8001cba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cbe:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	68d2      	ldr	r2, [r2, #12]
 8001cca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cce:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2220      	movs	r2, #32
 8001ce2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b088      	sub	sp, #32
 8001cf4:	af02      	add	r7, sp, #8
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b20      	cmp	r3, #32
 8001d0e:	f040 8082 	bne.w	8001e16 <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL) || (Size == 0U))
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d002      	beq.n	8001d1e <HAL_UART_Transmit+0x2e>
 8001d18:	88fb      	ldrh	r3, [r7, #6]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e07a      	b.n	8001e18 <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d101      	bne.n	8001d30 <HAL_UART_Transmit+0x40>
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	e073      	b.n	8001e18 <HAL_UART_Transmit+0x128>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2221      	movs	r2, #33	; 0x21
 8001d42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001d46:	f7fe fac5 	bl	80002d4 <HAL_GetTick>
 8001d4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	88fa      	ldrh	r2, [r7, #6]
 8001d50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001d58:	e041      	b.n	8001dde <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	3b01      	subs	r3, #1
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d70:	d121      	bne.n	8001db6 <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2180      	movs	r1, #128	; 0x80
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f000 f84f 	bl	8001e20 <UART_WaitOnFlagUntilTimeout>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e045      	b.n	8001e18 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	8812      	ldrh	r2, [r2, #0]
 8001d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d9c:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d103      	bne.n	8001dae <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	3302      	adds	r3, #2
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	e017      	b.n	8001dde <HAL_UART_Transmit+0xee>
        }
        else
        {
          pData +=1U;
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	3301      	adds	r3, #1
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	e013      	b.n	8001dde <HAL_UART_Transmit+0xee>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2180      	movs	r1, #128	; 0x80
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 f82d 	bl	8001e20 <UART_WaitOnFlagUntilTimeout>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e023      	b.n	8001e18 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	1c59      	adds	r1, r3, #1
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1b8      	bne.n	8001d5a <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	2200      	movs	r2, #0
 8001df0:	2140      	movs	r1, #64	; 0x40
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 f814 	bl	8001e20 <UART_WaitOnFlagUntilTimeout>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e00a      	b.n	8001e18 <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2220      	movs	r2, #32
 8001e06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e000      	b.n	8001e18 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8001e16:	2302      	movs	r3, #2
  }
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001e30:	e02c      	b.n	8001e8c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e38:	d028      	beq.n	8001e8c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d007      	beq.n	8001e50 <UART_WaitOnFlagUntilTimeout+0x30>
 8001e40:	f7fe fa48 	bl	80002d4 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	1ad2      	subs	r2, r2, r3
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d91d      	bls.n	8001e8c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	68d2      	ldr	r2, [r2, #12]
 8001e5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e5e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	6952      	ldr	r2, [r2, #20]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2220      	movs	r2, #32
 8001e74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e00f      	b.n	8001eac <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	401a      	ands	r2, r3
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	bf0c      	ite	eq
 8001e9c:	2301      	moveq	r3, #1
 8001e9e:	2300      	movne	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d0c3      	beq.n	8001e32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	6912      	ldr	r2, [r2, #16]
 8001eca:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68d2      	ldr	r2, [r2, #12]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001efa:	f023 030c 	bic.w	r3, r3, #12
 8001efe:	68f9      	ldr	r1, [r7, #12]
 8001f00:	430b      	orrs	r3, r1
 8001f02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	6952      	ldr	r2, [r2, #20]
 8001f0e:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6992      	ldr	r2, [r2, #24]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a6f      	ldr	r2, [pc, #444]	; (80020dc <UART_SetConfig+0x228>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d16b      	bne.n	8001ffc <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681c      	ldr	r4, [r3, #0]
 8001f28:	f7ff f9ae 	bl	8001288 <HAL_RCC_GetPCLK2Freq>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	009a      	lsls	r2, r3, #2
 8001f36:	441a      	add	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f42:	4a67      	ldr	r2, [pc, #412]	; (80020e0 <UART_SetConfig+0x22c>)
 8001f44:	fba2 2303 	umull	r2, r3, r2, r3
 8001f48:	095b      	lsrs	r3, r3, #5
 8001f4a:	011d      	lsls	r5, r3, #4
 8001f4c:	f7ff f99c 	bl	8001288 <HAL_RCC_GetPCLK2Freq>
 8001f50:	4602      	mov	r2, r0
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	009a      	lsls	r2, r3, #2
 8001f5a:	441a      	add	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	fbb2 f6f3 	udiv	r6, r2, r3
 8001f66:	f7ff f98f 	bl	8001288 <HAL_RCC_GetPCLK2Freq>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	009a      	lsls	r2, r3, #2
 8001f74:	441a      	add	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f80:	4a57      	ldr	r2, [pc, #348]	; (80020e0 <UART_SetConfig+0x22c>)
 8001f82:	fba2 2303 	umull	r2, r3, r2, r3
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	2264      	movs	r2, #100	; 0x64
 8001f8a:	fb02 f303 	mul.w	r3, r2, r3
 8001f8e:	1af3      	subs	r3, r6, r3
 8001f90:	011b      	lsls	r3, r3, #4
 8001f92:	3332      	adds	r3, #50	; 0x32
 8001f94:	4a52      	ldr	r2, [pc, #328]	; (80020e0 <UART_SetConfig+0x22c>)
 8001f96:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fa0:	441d      	add	r5, r3
 8001fa2:	f7ff f971 	bl	8001288 <HAL_RCC_GetPCLK2Freq>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	009a      	lsls	r2, r3, #2
 8001fb0:	441a      	add	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	fbb2 f6f3 	udiv	r6, r2, r3
 8001fbc:	f7ff f964 	bl	8001288 <HAL_RCC_GetPCLK2Freq>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	009a      	lsls	r2, r3, #2
 8001fca:	441a      	add	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd6:	4a42      	ldr	r2, [pc, #264]	; (80020e0 <UART_SetConfig+0x22c>)
 8001fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fdc:	095b      	lsrs	r3, r3, #5
 8001fde:	2264      	movs	r2, #100	; 0x64
 8001fe0:	fb02 f303 	mul.w	r3, r2, r3
 8001fe4:	1af3      	subs	r3, r6, r3
 8001fe6:	011b      	lsls	r3, r3, #4
 8001fe8:	3332      	adds	r3, #50	; 0x32
 8001fea:	4a3d      	ldr	r2, [pc, #244]	; (80020e0 <UART_SetConfig+0x22c>)
 8001fec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff0:	095b      	lsrs	r3, r3, #5
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	442b      	add	r3, r5
 8001ff8:	60a3      	str	r3, [r4, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001ffa:	e06a      	b.n	80020d2 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681c      	ldr	r4, [r3, #0]
 8002000:	f7ff f92e 	bl	8001260 <HAL_RCC_GetPCLK1Freq>
 8002004:	4602      	mov	r2, r0
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	009a      	lsls	r2, r3, #2
 800200e:	441a      	add	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	fbb2 f3f3 	udiv	r3, r2, r3
 800201a:	4a31      	ldr	r2, [pc, #196]	; (80020e0 <UART_SetConfig+0x22c>)
 800201c:	fba2 2303 	umull	r2, r3, r2, r3
 8002020:	095b      	lsrs	r3, r3, #5
 8002022:	011d      	lsls	r5, r3, #4
 8002024:	f7ff f91c 	bl	8001260 <HAL_RCC_GetPCLK1Freq>
 8002028:	4602      	mov	r2, r0
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	009a      	lsls	r2, r3, #2
 8002032:	441a      	add	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	fbb2 f6f3 	udiv	r6, r2, r3
 800203e:	f7ff f90f 	bl	8001260 <HAL_RCC_GetPCLK1Freq>
 8002042:	4602      	mov	r2, r0
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	009a      	lsls	r2, r3, #2
 800204c:	441a      	add	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	fbb2 f3f3 	udiv	r3, r2, r3
 8002058:	4a21      	ldr	r2, [pc, #132]	; (80020e0 <UART_SetConfig+0x22c>)
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	2264      	movs	r2, #100	; 0x64
 8002062:	fb02 f303 	mul.w	r3, r2, r3
 8002066:	1af3      	subs	r3, r6, r3
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	3332      	adds	r3, #50	; 0x32
 800206c:	4a1c      	ldr	r2, [pc, #112]	; (80020e0 <UART_SetConfig+0x22c>)
 800206e:	fba2 2303 	umull	r2, r3, r2, r3
 8002072:	095b      	lsrs	r3, r3, #5
 8002074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002078:	441d      	add	r5, r3
 800207a:	f7ff f8f1 	bl	8001260 <HAL_RCC_GetPCLK1Freq>
 800207e:	4602      	mov	r2, r0
 8002080:	4613      	mov	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	009a      	lsls	r2, r3, #2
 8002088:	441a      	add	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	fbb2 f6f3 	udiv	r6, r2, r3
 8002094:	f7ff f8e4 	bl	8001260 <HAL_RCC_GetPCLK1Freq>
 8002098:	4602      	mov	r2, r0
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	009a      	lsls	r2, r3, #2
 80020a2:	441a      	add	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ae:	4a0c      	ldr	r2, [pc, #48]	; (80020e0 <UART_SetConfig+0x22c>)
 80020b0:	fba2 2303 	umull	r2, r3, r2, r3
 80020b4:	095b      	lsrs	r3, r3, #5
 80020b6:	2264      	movs	r2, #100	; 0x64
 80020b8:	fb02 f303 	mul.w	r3, r2, r3
 80020bc:	1af3      	subs	r3, r6, r3
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	3332      	adds	r3, #50	; 0x32
 80020c2:	4a07      	ldr	r2, [pc, #28]	; (80020e0 <UART_SetConfig+0x22c>)
 80020c4:	fba2 2303 	umull	r2, r3, r2, r3
 80020c8:	095b      	lsrs	r3, r3, #5
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	442b      	add	r3, r5
 80020d0:	60a3      	str	r3, [r4, #8]
}
 80020d2:	bf00      	nop
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020da:	bf00      	nop
 80020dc:	40013800 	.word	0x40013800
 80020e0:	51eb851f 	.word	0x51eb851f

080020e4 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80020ec:	4b22      	ldr	r3, [pc, #136]	; (8002178 <WIZCHIP_READ+0x94>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80020f2:	4b21      	ldr	r3, [pc, #132]	; (8002178 <WIZCHIP_READ+0x94>)
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80020f8:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <WIZCHIP_READ+0x94>)
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <WIZCHIP_READ+0x24>
 8002100:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <WIZCHIP_READ+0x94>)
 8002102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002104:	2b00      	cmp	r3, #0
 8002106:	d114      	bne.n	8002132 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002108:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <WIZCHIP_READ+0x94>)
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	0c12      	lsrs	r2, r2, #16
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	4610      	mov	r0, r2
 8002114:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002116:	4b18      	ldr	r3, [pc, #96]	; (8002178 <WIZCHIP_READ+0x94>)
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	0a12      	lsrs	r2, r2, #8
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	4610      	mov	r0, r2
 8002122:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002124:	4b14      	ldr	r3, [pc, #80]	; (8002178 <WIZCHIP_READ+0x94>)
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	4610      	mov	r0, r2
 800212e:	4798      	blx	r3
 8002130:	e011      	b.n	8002156 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	0c1b      	lsrs	r3, r3, #16
 8002136:	b2db      	uxtb	r3, r3
 8002138:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	0a1b      	lsrs	r3, r3, #8
 800213e:	b2db      	uxtb	r3, r3
 8002140:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <WIZCHIP_READ+0x94>)
 800214a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214c:	f107 020c 	add.w	r2, r7, #12
 8002150:	2103      	movs	r1, #3
 8002152:	4610      	mov	r0, r2
 8002154:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8002156:	4b08      	ldr	r3, [pc, #32]	; (8002178 <WIZCHIP_READ+0x94>)
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	4798      	blx	r3
 800215c:	4603      	mov	r3, r0
 800215e:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <WIZCHIP_READ+0x94>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002166:	4b04      	ldr	r3, [pc, #16]	; (8002178 <WIZCHIP_READ+0x94>)
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	4798      	blx	r3
   return ret;
 800216c:	7bfb      	ldrb	r3, [r7, #15]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000008 	.word	0x20000008

0800217c <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8002188:	4b22      	ldr	r3, [pc, #136]	; (8002214 <WIZCHIP_WRITE+0x98>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800218e:	4b21      	ldr	r3, [pc, #132]	; (8002214 <WIZCHIP_WRITE+0x98>)
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f043 0304 	orr.w	r3, r3, #4
 800219a:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800219c:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <WIZCHIP_WRITE+0x98>)
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d119      	bne.n	80021d8 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80021a4:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <WIZCHIP_WRITE+0x98>)
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	0c12      	lsrs	r2, r2, #16
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	4610      	mov	r0, r2
 80021b0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80021b2:	4b18      	ldr	r3, [pc, #96]	; (8002214 <WIZCHIP_WRITE+0x98>)
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	0a12      	lsrs	r2, r2, #8
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	4610      	mov	r0, r2
 80021be:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80021c0:	4b14      	ldr	r3, [pc, #80]	; (8002214 <WIZCHIP_WRITE+0x98>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	4610      	mov	r0, r2
 80021ca:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80021cc:	4b11      	ldr	r3, [pc, #68]	; (8002214 <WIZCHIP_WRITE+0x98>)
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	78fa      	ldrb	r2, [r7, #3]
 80021d2:	4610      	mov	r0, r2
 80021d4:	4798      	blx	r3
 80021d6:	e013      	b.n	8002200 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	0c1b      	lsrs	r3, r3, #16
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80021ee:	78fb      	ldrb	r3, [r7, #3]
 80021f0:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80021f2:	4b08      	ldr	r3, [pc, #32]	; (8002214 <WIZCHIP_WRITE+0x98>)
 80021f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f6:	f107 020c 	add.w	r2, r7, #12
 80021fa:	2104      	movs	r1, #4
 80021fc:	4610      	mov	r0, r2
 80021fe:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <WIZCHIP_WRITE+0x98>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002206:	4b03      	ldr	r3, [pc, #12]	; (8002214 <WIZCHIP_WRITE+0x98>)
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	4798      	blx	r3
}
 800220c:	bf00      	nop
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000008 	.word	0x20000008

08002218 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002218:	b590      	push	{r4, r7, lr}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	4613      	mov	r3, r2
 8002224:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002226:	4b2b      	ldr	r3, [pc, #172]	; (80022d4 <WIZCHIP_READ_BUF+0xbc>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800222c:	4b29      	ldr	r3, [pc, #164]	; (80022d4 <WIZCHIP_READ_BUF+0xbc>)
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002232:	4b28      	ldr	r3, [pc, #160]	; (80022d4 <WIZCHIP_READ_BUF+0xbc>)
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <WIZCHIP_READ_BUF+0x2a>
 800223a:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <WIZCHIP_READ_BUF+0xbc>)
 800223c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223e:	2b00      	cmp	r3, #0
 8002240:	d126      	bne.n	8002290 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002242:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <WIZCHIP_READ_BUF+0xbc>)
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	0c12      	lsrs	r2, r2, #16
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	4610      	mov	r0, r2
 800224e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002250:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <WIZCHIP_READ_BUF+0xbc>)
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	0a12      	lsrs	r2, r2, #8
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	4610      	mov	r0, r2
 800225c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800225e:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <WIZCHIP_READ_BUF+0xbc>)
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	4610      	mov	r0, r2
 8002268:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800226a:	2300      	movs	r3, #0
 800226c:	82fb      	strh	r3, [r7, #22]
 800226e:	e00a      	b.n	8002286 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8002270:	8afb      	ldrh	r3, [r7, #22]
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	18d4      	adds	r4, r2, r3
 8002276:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <WIZCHIP_READ_BUF+0xbc>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	4798      	blx	r3
 800227c:	4603      	mov	r3, r0
 800227e:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8002280:	8afb      	ldrh	r3, [r7, #22]
 8002282:	3301      	adds	r3, #1
 8002284:	82fb      	strh	r3, [r7, #22]
 8002286:	8afa      	ldrh	r2, [r7, #22]
 8002288:	88fb      	ldrh	r3, [r7, #6]
 800228a:	429a      	cmp	r2, r3
 800228c:	d3f0      	bcc.n	8002270 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800228e:	e017      	b.n	80022c0 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	0c1b      	lsrs	r3, r3, #16
 8002294:	b2db      	uxtb	r3, r3
 8002296:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	0a1b      	lsrs	r3, r3, #8
 800229c:	b2db      	uxtb	r3, r3
 800229e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80022a6:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <WIZCHIP_READ_BUF+0xbc>)
 80022a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022aa:	f107 0210 	add.w	r2, r7, #16
 80022ae:	2103      	movs	r1, #3
 80022b0:	4610      	mov	r0, r2
 80022b2:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80022b4:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <WIZCHIP_READ_BUF+0xbc>)
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	88fa      	ldrh	r2, [r7, #6]
 80022ba:	4611      	mov	r1, r2
 80022bc:	68b8      	ldr	r0, [r7, #8]
 80022be:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80022c0:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <WIZCHIP_READ_BUF+0xbc>)
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80022c6:	4b03      	ldr	r3, [pc, #12]	; (80022d4 <WIZCHIP_READ_BUF+0xbc>)
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	4798      	blx	r3
}
 80022cc:	bf00      	nop
 80022ce:	371c      	adds	r7, #28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd90      	pop	{r4, r7, pc}
 80022d4:	20000008 	.word	0x20000008

080022d8 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	4613      	mov	r3, r2
 80022e4:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80022e6:	4b2b      	ldr	r3, [pc, #172]	; (8002394 <WIZCHIP_WRITE_BUF+0xbc>)
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	4798      	blx	r3
   WIZCHIP.CS._select();
 80022ec:	4b29      	ldr	r3, [pc, #164]	; (8002394 <WIZCHIP_WRITE_BUF+0xbc>)
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f043 0304 	orr.w	r3, r3, #4
 80022f8:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80022fa:	4b26      	ldr	r3, [pc, #152]	; (8002394 <WIZCHIP_WRITE_BUF+0xbc>)
 80022fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d126      	bne.n	8002350 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002302:	4b24      	ldr	r3, [pc, #144]	; (8002394 <WIZCHIP_WRITE_BUF+0xbc>)
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	0c12      	lsrs	r2, r2, #16
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	4610      	mov	r0, r2
 800230e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002310:	4b20      	ldr	r3, [pc, #128]	; (8002394 <WIZCHIP_WRITE_BUF+0xbc>)
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	0a12      	lsrs	r2, r2, #8
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	4610      	mov	r0, r2
 800231c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800231e:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <WIZCHIP_WRITE_BUF+0xbc>)
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	4610      	mov	r0, r2
 8002328:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800232a:	2300      	movs	r3, #0
 800232c:	82fb      	strh	r3, [r7, #22]
 800232e:	e00a      	b.n	8002346 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8002330:	4b18      	ldr	r3, [pc, #96]	; (8002394 <WIZCHIP_WRITE_BUF+0xbc>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	8afa      	ldrh	r2, [r7, #22]
 8002336:	68b9      	ldr	r1, [r7, #8]
 8002338:	440a      	add	r2, r1
 800233a:	7812      	ldrb	r2, [r2, #0]
 800233c:	4610      	mov	r0, r2
 800233e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002340:	8afb      	ldrh	r3, [r7, #22]
 8002342:	3301      	adds	r3, #1
 8002344:	82fb      	strh	r3, [r7, #22]
 8002346:	8afa      	ldrh	r2, [r7, #22]
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	429a      	cmp	r2, r3
 800234c:	d3f0      	bcc.n	8002330 <WIZCHIP_WRITE_BUF+0x58>
 800234e:	e017      	b.n	8002380 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	0c1b      	lsrs	r3, r3, #16
 8002354:	b2db      	uxtb	r3, r3
 8002356:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	0a1b      	lsrs	r3, r3, #8
 800235c:	b2db      	uxtb	r3, r3
 800235e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	b2db      	uxtb	r3, r3
 8002364:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002366:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <WIZCHIP_WRITE_BUF+0xbc>)
 8002368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236a:	f107 0210 	add.w	r2, r7, #16
 800236e:	2103      	movs	r1, #3
 8002370:	4610      	mov	r0, r2
 8002372:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8002374:	4b07      	ldr	r3, [pc, #28]	; (8002394 <WIZCHIP_WRITE_BUF+0xbc>)
 8002376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002378:	88fa      	ldrh	r2, [r7, #6]
 800237a:	4611      	mov	r1, r2
 800237c:	68b8      	ldr	r0, [r7, #8]
 800237e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002380:	4b04      	ldr	r3, [pc, #16]	; (8002394 <WIZCHIP_WRITE_BUF+0xbc>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002386:	4b03      	ldr	r3, [pc, #12]	; (8002394 <WIZCHIP_WRITE_BUF+0xbc>)
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	4798      	blx	r3
}
 800238c:	bf00      	nop
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20000008 	.word	0x20000008

08002398 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002398:	b590      	push	{r4, r7, lr}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	81fb      	strh	r3, [r7, #14]
 80023a6:	2300      	movs	r3, #0
 80023a8:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	3301      	adds	r3, #1
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fe94 	bl	80020e4 <WIZCHIP_READ>
 80023bc:	4603      	mov	r3, r0
 80023be:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80023c0:	89bb      	ldrh	r3, [r7, #12]
 80023c2:	021b      	lsls	r3, r3, #8
 80023c4:	b29c      	uxth	r4, r3
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	3301      	adds	r3, #1
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fe86 	bl	80020e4 <WIZCHIP_READ>
 80023d8:	4603      	mov	r3, r0
 80023da:	b29b      	uxth	r3, r3
 80023dc:	4423      	add	r3, r4
 80023de:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80023e0:	89bb      	ldrh	r3, [r7, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d01a      	beq.n	800241c <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	3301      	adds	r3, #1
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fe76 	bl	80020e4 <WIZCHIP_READ>
 80023f8:	4603      	mov	r3, r0
 80023fa:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80023fc:	89fb      	ldrh	r3, [r7, #14]
 80023fe:	021b      	lsls	r3, r3, #8
 8002400:	b29c      	uxth	r4, r3
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	3301      	adds	r3, #1
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff fe68 	bl	80020e4 <WIZCHIP_READ>
 8002414:	4603      	mov	r3, r0
 8002416:	b29b      	uxth	r3, r3
 8002418:	4423      	add	r3, r4
 800241a:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800241c:	89fa      	ldrh	r2, [r7, #14]
 800241e:	89bb      	ldrh	r3, [r7, #12]
 8002420:	429a      	cmp	r2, r3
 8002422:	d1c2      	bne.n	80023aa <getSn_TX_FSR+0x12>
   return val;
 8002424:	89fb      	ldrh	r3, [r7, #14]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	bd90      	pop	{r4, r7, pc}

0800242e <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800242e:	b590      	push	{r4, r7, lr}
 8002430:	b085      	sub	sp, #20
 8002432:	af00      	add	r7, sp, #0
 8002434:	4603      	mov	r3, r0
 8002436:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002438:	2300      	movs	r3, #0
 800243a:	81fb      	strh	r3, [r7, #14]
 800243c:	2300      	movs	r3, #0
 800243e:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	3301      	adds	r3, #1
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff fe49 	bl	80020e4 <WIZCHIP_READ>
 8002452:	4603      	mov	r3, r0
 8002454:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002456:	89bb      	ldrh	r3, [r7, #12]
 8002458:	021b      	lsls	r3, r3, #8
 800245a:	b29c      	uxth	r4, r3
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	3301      	adds	r3, #1
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fe3b 	bl	80020e4 <WIZCHIP_READ>
 800246e:	4603      	mov	r3, r0
 8002470:	b29b      	uxth	r3, r3
 8002472:	4423      	add	r3, r4
 8002474:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002476:	89bb      	ldrh	r3, [r7, #12]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d01a      	beq.n	80024b2 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	3301      	adds	r3, #1
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff fe2b 	bl	80020e4 <WIZCHIP_READ>
 800248e:	4603      	mov	r3, r0
 8002490:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002492:	89fb      	ldrh	r3, [r7, #14]
 8002494:	021b      	lsls	r3, r3, #8
 8002496:	b29c      	uxth	r4, r3
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	3301      	adds	r3, #1
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff fe1d 	bl	80020e4 <WIZCHIP_READ>
 80024aa:	4603      	mov	r3, r0
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	4423      	add	r3, r4
 80024b0:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80024b2:	89fa      	ldrh	r2, [r7, #14]
 80024b4:	89bb      	ldrh	r3, [r7, #12]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d1c2      	bne.n	8002440 <getSn_RX_RSR+0x12>
   return val;
 80024ba:	89fb      	ldrh	r3, [r7, #14]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd90      	pop	{r4, r7, pc}

080024c4 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	6039      	str	r1, [r7, #0]
 80024ce:	71fb      	strb	r3, [r7, #7]
 80024d0:	4613      	mov	r3, r2
 80024d2:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80024dc:	88bb      	ldrh	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d048      	beq.n	8002574 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	3301      	adds	r3, #1
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fdf8 	bl	80020e4 <WIZCHIP_READ>
 80024f4:	4603      	mov	r3, r0
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	021b      	lsls	r3, r3, #8
 80024fa:	b29c      	uxth	r4, r3
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	3301      	adds	r3, #1
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fdeb 	bl	80020e4 <WIZCHIP_READ>
 800250e:	4603      	mov	r3, r0
 8002510:	b29b      	uxth	r3, r3
 8002512:	4423      	add	r3, r4
 8002514:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8002516:	89fb      	ldrh	r3, [r7, #14]
 8002518:	021b      	lsls	r3, r3, #8
 800251a:	79fa      	ldrb	r2, [r7, #7]
 800251c:	0092      	lsls	r2, r2, #2
 800251e:	3202      	adds	r2, #2
 8002520:	00d2      	lsls	r2, r2, #3
 8002522:	4413      	add	r3, r2
 8002524:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8002526:	88bb      	ldrh	r3, [r7, #4]
 8002528:	461a      	mov	r2, r3
 800252a:	6839      	ldr	r1, [r7, #0]
 800252c:	68b8      	ldr	r0, [r7, #8]
 800252e:	f7ff fed3 	bl	80022d8 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8002532:	89fa      	ldrh	r2, [r7, #14]
 8002534:	88bb      	ldrh	r3, [r7, #4]
 8002536:	4413      	add	r3, r2
 8002538:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	3301      	adds	r3, #1
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002546:	461a      	mov	r2, r3
 8002548:	89fb      	ldrh	r3, [r7, #14]
 800254a:	0a1b      	lsrs	r3, r3, #8
 800254c:	b29b      	uxth	r3, r3
 800254e:	b2db      	uxtb	r3, r3
 8002550:	4619      	mov	r1, r3
 8002552:	4610      	mov	r0, r2
 8002554:	f7ff fe12 	bl	800217c <WIZCHIP_WRITE>
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	3301      	adds	r3, #1
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002564:	461a      	mov	r2, r3
 8002566:	89fb      	ldrh	r3, [r7, #14]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	4619      	mov	r1, r3
 800256c:	4610      	mov	r0, r2
 800256e:	f7ff fe05 	bl	800217c <WIZCHIP_WRITE>
 8002572:	e000      	b.n	8002576 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8002574:	bf00      	nop
}
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	bd90      	pop	{r4, r7, pc}

0800257c <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800257c:	b590      	push	{r4, r7, lr}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	6039      	str	r1, [r7, #0]
 8002586:	71fb      	strb	r3, [r7, #7]
 8002588:	4613      	mov	r3, r2
 800258a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002590:	2300      	movs	r3, #0
 8002592:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8002594:	88bb      	ldrh	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d048      	beq.n	800262c <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	3301      	adds	r3, #1
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fd9c 	bl	80020e4 <WIZCHIP_READ>
 80025ac:	4603      	mov	r3, r0
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	021b      	lsls	r3, r3, #8
 80025b2:	b29c      	uxth	r4, r3
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	3301      	adds	r3, #1
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fd8f 	bl	80020e4 <WIZCHIP_READ>
 80025c6:	4603      	mov	r3, r0
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	4423      	add	r3, r4
 80025cc:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80025ce:	89fb      	ldrh	r3, [r7, #14]
 80025d0:	021b      	lsls	r3, r3, #8
 80025d2:	79fa      	ldrb	r2, [r7, #7]
 80025d4:	0092      	lsls	r2, r2, #2
 80025d6:	3203      	adds	r2, #3
 80025d8:	00d2      	lsls	r2, r2, #3
 80025da:	4413      	add	r3, r2
 80025dc:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80025de:	88bb      	ldrh	r3, [r7, #4]
 80025e0:	461a      	mov	r2, r3
 80025e2:	6839      	ldr	r1, [r7, #0]
 80025e4:	68b8      	ldr	r0, [r7, #8]
 80025e6:	f7ff fe17 	bl	8002218 <WIZCHIP_READ_BUF>
   ptr += len;
 80025ea:	89fa      	ldrh	r2, [r7, #14]
 80025ec:	88bb      	ldrh	r3, [r7, #4]
 80025ee:	4413      	add	r3, r2
 80025f0:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	3301      	adds	r3, #1
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80025fe:	461a      	mov	r2, r3
 8002600:	89fb      	ldrh	r3, [r7, #14]
 8002602:	0a1b      	lsrs	r3, r3, #8
 8002604:	b29b      	uxth	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	4619      	mov	r1, r3
 800260a:	4610      	mov	r0, r2
 800260c:	f7ff fdb6 	bl	800217c <WIZCHIP_WRITE>
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	3301      	adds	r3, #1
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800261c:	461a      	mov	r2, r3
 800261e:	89fb      	ldrh	r3, [r7, #14]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	4619      	mov	r1, r3
 8002624:	4610      	mov	r0, r2
 8002626:	f7ff fda9 	bl	800217c <WIZCHIP_WRITE>
 800262a:	e000      	b.n	800262e <wiz_recv_data+0xb2>
   if(len == 0) return;
 800262c:	bf00      	nop
}
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	bd90      	pop	{r4, r7, pc}

08002634 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002634:	b590      	push	{r4, r7, lr}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	4604      	mov	r4, r0
 800263c:	4608      	mov	r0, r1
 800263e:	4611      	mov	r1, r2
 8002640:	461a      	mov	r2, r3
 8002642:	4623      	mov	r3, r4
 8002644:	71fb      	strb	r3, [r7, #7]
 8002646:	4603      	mov	r3, r0
 8002648:	71bb      	strb	r3, [r7, #6]
 800264a:	460b      	mov	r3, r1
 800264c:	80bb      	strh	r3, [r7, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	2b08      	cmp	r3, #8
 8002656:	d902      	bls.n	800265e <socket+0x2a>
 8002658:	f04f 33ff 	mov.w	r3, #4294967295
 800265c:	e0ef      	b.n	800283e <socket+0x20a>
	switch(protocol)
 800265e:	79bb      	ldrb	r3, [r7, #6]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d004      	beq.n	800266e <socket+0x3a>
 8002664:	2b01      	cmp	r3, #1
 8002666:	db10      	blt.n	800268a <socket+0x56>
 8002668:	2b04      	cmp	r3, #4
 800266a:	dc0e      	bgt.n	800268a <socket+0x56>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800266c:	e010      	b.n	8002690 <socket+0x5c>
            getSIPR((uint8_t*)&taddr);
 800266e:	f107 030c 	add.w	r3, r7, #12
 8002672:	2204      	movs	r2, #4
 8002674:	4619      	mov	r1, r3
 8002676:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800267a:	f7ff fdcd 	bl	8002218 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d105      	bne.n	8002690 <socket+0x5c>
 8002684:	f06f 0302 	mvn.w	r3, #2
 8002688:	e0d9      	b.n	800283e <socket+0x20a>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 800268a:	f06f 0304 	mvn.w	r3, #4
 800268e:	e0d6      	b.n	800283e <socket+0x20a>
         break;
 8002690:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8002692:	78fb      	ldrb	r3, [r7, #3]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	d002      	beq.n	80026a2 <socket+0x6e>
 800269c:	f06f 0305 	mvn.w	r3, #5
 80026a0:	e0cd      	b.n	800283e <socket+0x20a>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80026a2:	78fb      	ldrb	r3, [r7, #3]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d028      	beq.n	80026fa <socket+0xc6>
	{
   	switch(protocol)
 80026a8:	79bb      	ldrb	r3, [r7, #6]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d002      	beq.n	80026b4 <socket+0x80>
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d008      	beq.n	80026c4 <socket+0x90>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80026b2:	e022      	b.n	80026fa <socket+0xc6>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d11a      	bne.n	80026f4 <socket+0xc0>
 80026be:	f06f 0305 	mvn.w	r3, #5
 80026c2:	e0bc      	b.n	800283e <socket+0x20a>
   	      if(flag & SF_IGMP_VER2)
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	f003 0320 	and.w	r3, r3, #32
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d006      	beq.n	80026dc <socket+0xa8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80026ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	db02      	blt.n	80026dc <socket+0xa8>
 80026d6:	f06f 0305 	mvn.w	r3, #5
 80026da:	e0b0      	b.n	800283e <socket+0x20a>
      	      if(flag & SF_UNI_BLOCK)
 80026dc:	78fb      	ldrb	r3, [r7, #3]
 80026de:	f003 0310 	and.w	r3, r3, #16
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d008      	beq.n	80026f8 <socket+0xc4>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80026e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	db04      	blt.n	80026f8 <socket+0xc4>
 80026ee:	f06f 0305 	mvn.w	r3, #5
 80026f2:	e0a4      	b.n	800283e <socket+0x20a>
   	      break;
 80026f4:	bf00      	nop
 80026f6:	e000      	b.n	80026fa <socket+0xc6>
   	      break;
 80026f8:	bf00      	nop
   	}
   }
	close(sn);
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 f8ad 	bl	800285c <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	3301      	adds	r3, #1
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4618      	mov	r0, r3
 800270c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002710:	f023 030f 	bic.w	r3, r3, #15
 8002714:	b25a      	sxtb	r2, r3
 8002716:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800271a:	4313      	orrs	r3, r2
 800271c:	b25b      	sxtb	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	4619      	mov	r1, r3
 8002722:	f7ff fd2b 	bl	800217c <WIZCHIP_WRITE>
    #endif
	if(!port)
 8002726:	88bb      	ldrh	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d110      	bne.n	800274e <socket+0x11a>
	{
	   port = sock_any_port++;
 800272c:	4b46      	ldr	r3, [pc, #280]	; (8002848 <socket+0x214>)
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	b291      	uxth	r1, r2
 8002734:	4a44      	ldr	r2, [pc, #272]	; (8002848 <socket+0x214>)
 8002736:	8011      	strh	r1, [r2, #0]
 8002738:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 800273a:	4b43      	ldr	r3, [pc, #268]	; (8002848 <socket+0x214>)
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8002742:	4293      	cmp	r3, r2
 8002744:	d103      	bne.n	800274e <socket+0x11a>
 8002746:	4b40      	ldr	r3, [pc, #256]	; (8002848 <socket+0x214>)
 8002748:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800274c:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	3301      	adds	r3, #1
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800275a:	461a      	mov	r2, r3
 800275c:	88bb      	ldrh	r3, [r7, #4]
 800275e:	0a1b      	lsrs	r3, r3, #8
 8002760:	b29b      	uxth	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	4619      	mov	r1, r3
 8002766:	4610      	mov	r0, r2
 8002768:	f7ff fd08 	bl	800217c <WIZCHIP_WRITE>
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	3301      	adds	r3, #1
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002778:	461a      	mov	r2, r3
 800277a:	88bb      	ldrh	r3, [r7, #4]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	4619      	mov	r1, r3
 8002780:	4610      	mov	r0, r2
 8002782:	f7ff fcfb 	bl	800217c <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	3301      	adds	r3, #1
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002792:	2101      	movs	r1, #1
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fcf1 	bl	800217c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800279a:	bf00      	nop
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	3301      	adds	r3, #1
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fc9b 	bl	80020e4 <WIZCHIP_READ>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f3      	bne.n	800279c <socket+0x168>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	2201      	movs	r2, #1
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	b21b      	sxth	r3, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	b21a      	sxth	r2, r3
 80027c2:	4b22      	ldr	r3, [pc, #136]	; (800284c <socket+0x218>)
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	b21b      	sxth	r3, r3
 80027c8:	4013      	ands	r3, r2
 80027ca:	b21b      	sxth	r3, r3
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	4b1f      	ldr	r3, [pc, #124]	; (800284c <socket+0x218>)
 80027d0:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80027d2:	78fb      	ldrb	r3, [r7, #3]
 80027d4:	f003 0201 	and.w	r2, r3, #1
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	b21a      	sxth	r2, r3
 80027e0:	4b1a      	ldr	r3, [pc, #104]	; (800284c <socket+0x218>)
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	b21b      	sxth	r3, r3
 80027e6:	4313      	orrs	r3, r2
 80027e8:	b21b      	sxth	r3, r3
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	4b17      	ldr	r3, [pc, #92]	; (800284c <socket+0x218>)
 80027ee:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	2201      	movs	r2, #1
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	b21b      	sxth	r3, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	b21a      	sxth	r2, r3
 80027fe:	4b14      	ldr	r3, [pc, #80]	; (8002850 <socket+0x21c>)
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	b21b      	sxth	r3, r3
 8002804:	4013      	ands	r3, r2
 8002806:	b21b      	sxth	r3, r3
 8002808:	b29a      	uxth	r2, r3
 800280a:	4b11      	ldr	r3, [pc, #68]	; (8002850 <socket+0x21c>)
 800280c:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	4a10      	ldr	r2, [pc, #64]	; (8002854 <socket+0x220>)
 8002812:	2100      	movs	r1, #0
 8002814:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	4a0f      	ldr	r2, [pc, #60]	; (8002858 <socket+0x224>)
 800281c:	2100      	movs	r1, #0
 800281e:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002820:	bf00      	nop
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	3301      	adds	r3, #1
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff fc58 	bl	80020e4 <WIZCHIP_READ>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f3      	beq.n	8002822 <socket+0x1ee>
   return (int8_t)sn;
 800283a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800283e:	4618      	mov	r0, r3
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	bd90      	pop	{r4, r7, pc}
 8002846:	bf00      	nop
 8002848:	20000006 	.word	0x20000006
 800284c:	20000100 	.word	0x20000100
 8002850:	20000102 	.word	0x20000102
 8002854:	20000104 	.word	0x20000104
 8002858:	20000114 	.word	0x20000114

0800285c <close>:

int8_t close(uint8_t sn)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	2b08      	cmp	r3, #8
 800286a:	d902      	bls.n	8002872 <close+0x16>
 800286c:	f04f 33ff 	mov.w	r3, #4294967295
 8002870:	e055      	b.n	800291e <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	3301      	adds	r3, #1
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800287e:	2110      	movs	r1, #16
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff fc7b 	bl	800217c <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8002886:	bf00      	nop
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	3301      	adds	r3, #1
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff fc25 	bl	80020e4 <WIZCHIP_READ>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1f3      	bne.n	8002888 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	3301      	adds	r3, #1
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80028ac:	211f      	movs	r1, #31
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff fc64 	bl	800217c <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	2201      	movs	r2, #1
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	b21b      	sxth	r3, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	b21a      	sxth	r2, r3
 80028c2:	4b19      	ldr	r3, [pc, #100]	; (8002928 <close+0xcc>)
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	b21b      	sxth	r3, r3
 80028c8:	4013      	ands	r3, r2
 80028ca:	b21b      	sxth	r3, r3
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	4b16      	ldr	r3, [pc, #88]	; (8002928 <close+0xcc>)
 80028d0:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	2201      	movs	r2, #1
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	b21b      	sxth	r3, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	b21a      	sxth	r2, r3
 80028e0:	4b12      	ldr	r3, [pc, #72]	; (800292c <close+0xd0>)
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	b21b      	sxth	r3, r3
 80028e6:	4013      	ands	r3, r2
 80028e8:	b21b      	sxth	r3, r3
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	4b0f      	ldr	r3, [pc, #60]	; (800292c <close+0xd0>)
 80028ee:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	4a0f      	ldr	r2, [pc, #60]	; (8002930 <close+0xd4>)
 80028f4:	2100      	movs	r1, #0
 80028f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	4a0d      	ldr	r2, [pc, #52]	; (8002934 <close+0xd8>)
 80028fe:	2100      	movs	r1, #0
 8002900:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8002902:	bf00      	nop
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	3301      	adds	r3, #1
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff fbe7 	bl	80020e4 <WIZCHIP_READ>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1f3      	bne.n	8002904 <close+0xa8>
	return SOCK_OK;
 800291c:	2301      	movs	r3, #1
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20000100 	.word	0x20000100
 800292c:	20000102 	.word	0x20000102
 8002930:	20000104 	.word	0x20000104
 8002934:	20000114 	.word	0x20000114

08002938 <listen>:

int8_t listen(uint8_t sn)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	2b08      	cmp	r3, #8
 8002946:	d902      	bls.n	800294e <listen+0x16>
 8002948:	f04f 33ff 	mov.w	r3, #4294967295
 800294c:	e049      	b.n	80029e2 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	3301      	adds	r3, #1
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff fbc4 	bl	80020e4 <WIZCHIP_READ>
 800295c:	4603      	mov	r3, r0
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	2b01      	cmp	r3, #1
 8002964:	d002      	beq.n	800296c <listen+0x34>
 8002966:	f06f 0304 	mvn.w	r3, #4
 800296a:	e03a      	b.n	80029e2 <listen+0xaa>
	CHECK_SOCKINIT();
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	3301      	adds	r3, #1
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fbb3 	bl	80020e4 <WIZCHIP_READ>
 800297e:	4603      	mov	r3, r0
 8002980:	2b13      	cmp	r3, #19
 8002982:	d002      	beq.n	800298a <listen+0x52>
 8002984:	f06f 0302 	mvn.w	r3, #2
 8002988:	e02b      	b.n	80029e2 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	3301      	adds	r3, #1
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002996:	2102      	movs	r1, #2
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff fbef 	bl	800217c <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 800299e:	bf00      	nop
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	3301      	adds	r3, #1
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff fb99 	bl	80020e4 <WIZCHIP_READ>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1f3      	bne.n	80029a0 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80029b8:	e006      	b.n	80029c8 <listen+0x90>
   {
         close(sn);
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ff4d 	bl	800285c <close>
         return SOCKERR_SOCKCLOSED;
 80029c2:	f06f 0303 	mvn.w	r3, #3
 80029c6:	e00c      	b.n	80029e2 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	3301      	adds	r3, #1
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff fb85 	bl	80020e4 <WIZCHIP_READ>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b14      	cmp	r3, #20
 80029de:	d1ec      	bne.n	80029ba <listen+0x82>
   }
   return SOCK_OK;
 80029e0:	2301      	movs	r3, #1
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d902      	bls.n	8002a02 <disconnect+0x16>
 80029fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002a00:	e062      	b.n	8002ac8 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	3301      	adds	r3, #1
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff fb6a 	bl	80020e4 <WIZCHIP_READ>
 8002a10:	4603      	mov	r3, r0
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d002      	beq.n	8002a20 <disconnect+0x34>
 8002a1a:	f06f 0304 	mvn.w	r3, #4
 8002a1e:	e053      	b.n	8002ac8 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	3301      	adds	r3, #1
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002a2c:	2108      	movs	r1, #8
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fba4 	bl	800217c <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002a34:	bf00      	nop
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff fb4e 	bl	80020e4 <WIZCHIP_READ>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f3      	bne.n	8002a36 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	2201      	movs	r2, #1
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	b21b      	sxth	r3, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	b21a      	sxth	r2, r3
 8002a5c:	4b1c      	ldr	r3, [pc, #112]	; (8002ad0 <disconnect+0xe4>)
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	b21b      	sxth	r3, r3
 8002a62:	4013      	ands	r3, r2
 8002a64:	b21b      	sxth	r3, r3
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	4b19      	ldr	r3, [pc, #100]	; (8002ad0 <disconnect+0xe4>)
 8002a6a:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002a6c:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <disconnect+0xe8>)
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	461a      	mov	r2, r3
 8002a72:	79fb      	ldrb	r3, [r7, #7]
 8002a74:	fa42 f303 	asr.w	r3, r2, r3
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d016      	beq.n	8002aae <disconnect+0xc2>
 8002a80:	2300      	movs	r3, #0
 8002a82:	e021      	b.n	8002ac8 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	3301      	adds	r3, #1
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff fb27 	bl	80020e4 <WIZCHIP_READ>
 8002a96:	4603      	mov	r3, r0
 8002a98:	f003 0308 	and.w	r3, r3, #8
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d006      	beq.n	8002aae <disconnect+0xc2>
	   {
	      close(sn);
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff feda 	bl	800285c <close>
	      return SOCKERR_TIMEOUT;
 8002aa8:	f06f 030c 	mvn.w	r3, #12
 8002aac:	e00c      	b.n	8002ac8 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8002aae:	79fb      	ldrb	r3, [r7, #7]
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff fb12 	bl	80020e4 <WIZCHIP_READ>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1de      	bne.n	8002a84 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8002ac6:	2301      	movs	r3, #1
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000102 	.word	0x20000102
 8002ad4:	20000100 	.word	0x20000100

08002ad8 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	6039      	str	r1, [r7, #0]
 8002ae2:	71fb      	strb	r3, [r7, #7]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8002af0:	79fb      	ldrb	r3, [r7, #7]
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d902      	bls.n	8002afc <send+0x24>
 8002af6:	f04f 33ff 	mov.w	r3, #4294967295
 8002afa:	e0de      	b.n	8002cba <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	3301      	adds	r3, #1
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff faed 	bl	80020e4 <WIZCHIP_READ>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f003 030f 	and.w	r3, r3, #15
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d002      	beq.n	8002b1a <send+0x42>
 8002b14:	f06f 0304 	mvn.w	r3, #4
 8002b18:	e0cf      	b.n	8002cba <send+0x1e2>
   CHECK_SOCKDATA();
 8002b1a:	88bb      	ldrh	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d102      	bne.n	8002b26 <send+0x4e>
 8002b20:	f06f 030d 	mvn.w	r3, #13
 8002b24:	e0c9      	b.n	8002cba <send+0x1e2>
   tmp = getSn_SR(sn);
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff fad6 	bl	80020e4 <WIZCHIP_READ>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8002b3c:	7bfb      	ldrb	r3, [r7, #15]
 8002b3e:	2b17      	cmp	r3, #23
 8002b40:	d005      	beq.n	8002b4e <send+0x76>
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
 8002b44:	2b1c      	cmp	r3, #28
 8002b46:	d002      	beq.n	8002b4e <send+0x76>
 8002b48:	f06f 0306 	mvn.w	r3, #6
 8002b4c:	e0b5      	b.n	8002cba <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8002b4e:	4b5d      	ldr	r3, [pc, #372]	; (8002cc4 <send+0x1ec>)
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	fa42 f303 	asr.w	r3, r2, r3
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d039      	beq.n	8002bd6 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	3301      	adds	r3, #1
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fab8 	bl	80020e4 <WIZCHIP_READ>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f003 031f 	and.w	r3, r3, #31
 8002b7a:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8002b7c:	7bfb      	ldrb	r3, [r7, #15]
 8002b7e:	f003 0310 	and.w	r3, r3, #16
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d019      	beq.n	8002bba <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002b92:	2110      	movs	r1, #16
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff faf1 	bl	800217c <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	b21b      	sxth	r3, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	b21a      	sxth	r2, r3
 8002ba8:	4b46      	ldr	r3, [pc, #280]	; (8002cc4 <send+0x1ec>)
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	b21b      	sxth	r3, r3
 8002bae:	4013      	ands	r3, r2
 8002bb0:	b21b      	sxth	r3, r3
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	4b43      	ldr	r3, [pc, #268]	; (8002cc4 <send+0x1ec>)
 8002bb6:	801a      	strh	r2, [r3, #0]
 8002bb8:	e00d      	b.n	8002bd6 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d006      	beq.n	8002bd2 <send+0xfa>
      {
         close(sn);
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff fe48 	bl	800285c <close>
         return SOCKERR_TIMEOUT;
 8002bcc:	f06f 030c 	mvn.w	r3, #12
 8002bd0:	e073      	b.n	8002cba <send+0x1e2>
      }
      else return SOCK_BUSY;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	e071      	b.n	8002cba <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	3301      	adds	r3, #1
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fa7e 	bl	80020e4 <WIZCHIP_READ>
 8002be8:	4603      	mov	r3, r0
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	029b      	lsls	r3, r3, #10
 8002bee:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8002bf0:	88ba      	ldrh	r2, [r7, #4]
 8002bf2:	89bb      	ldrh	r3, [r7, #12]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d901      	bls.n	8002bfc <send+0x124>
 8002bf8:	89bb      	ldrh	r3, [r7, #12]
 8002bfa:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8002bfc:	79fb      	ldrb	r3, [r7, #7]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fbca 	bl	8002398 <getSn_TX_FSR>
 8002c04:	4603      	mov	r3, r0
 8002c06:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff fa65 	bl	80020e4 <WIZCHIP_READ>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
 8002c20:	2b17      	cmp	r3, #23
 8002c22:	d009      	beq.n	8002c38 <send+0x160>
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
 8002c26:	2b1c      	cmp	r3, #28
 8002c28:	d006      	beq.n	8002c38 <send+0x160>
      {
         close(sn);
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fe15 	bl	800285c <close>
         return SOCKERR_SOCKSTATUS;
 8002c32:	f06f 0306 	mvn.w	r3, #6
 8002c36:	e040      	b.n	8002cba <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002c38:	4b23      	ldr	r3, [pc, #140]	; (8002cc8 <send+0x1f0>)
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	fa42 f303 	asr.w	r3, r2, r3
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d005      	beq.n	8002c58 <send+0x180>
 8002c4c:	88ba      	ldrh	r2, [r7, #4]
 8002c4e:	89bb      	ldrh	r3, [r7, #12]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d901      	bls.n	8002c58 <send+0x180>
 8002c54:	2300      	movs	r3, #0
 8002c56:	e030      	b.n	8002cba <send+0x1e2>
      if(len <= freesize) break;
 8002c58:	88ba      	ldrh	r2, [r7, #4]
 8002c5a:	89bb      	ldrh	r3, [r7, #12]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d900      	bls.n	8002c62 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8002c60:	e7cc      	b.n	8002bfc <send+0x124>
      if(len <= freesize) break;
 8002c62:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8002c64:	88ba      	ldrh	r2, [r7, #4]
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	6839      	ldr	r1, [r7, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff fc2a 	bl	80024c4 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8002c70:	79fb      	ldrb	r3, [r7, #7]
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	3301      	adds	r3, #1
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c7c:	2120      	movs	r1, #32
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff fa7c 	bl	800217c <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8002c84:	bf00      	nop
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff fa26 	bl	80020e4 <WIZCHIP_READ>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f3      	bne.n	8002c86 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	b21a      	sxth	r2, r3
 8002ca8:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <send+0x1ec>)
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	b21b      	sxth	r3, r3
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	b21b      	sxth	r3, r3
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	4b03      	ldr	r3, [pc, #12]	; (8002cc4 <send+0x1ec>)
 8002cb6:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002cb8:	88bb      	ldrh	r3, [r7, #4]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000102 	.word	0x20000102
 8002cc8:	20000100 	.word	0x20000100

08002ccc <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8002ccc:	b590      	push	{r4, r7, lr}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	6039      	str	r1, [r7, #0]
 8002cd6:	71fb      	strb	r3, [r7, #7]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	d902      	bls.n	8002cf0 <recv+0x24>
 8002cea:	f04f 33ff 	mov.w	r3, #4294967295
 8002cee:	e09c      	b.n	8002e2a <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff f9f3 	bl	80020e4 <WIZCHIP_READ>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d002      	beq.n	8002d0e <recv+0x42>
 8002d08:	f06f 0304 	mvn.w	r3, #4
 8002d0c:	e08d      	b.n	8002e2a <recv+0x15e>
   CHECK_SOCKDATA();
 8002d0e:	88bb      	ldrh	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d102      	bne.n	8002d1a <recv+0x4e>
 8002d14:	f06f 030d 	mvn.w	r3, #13
 8002d18:	e087      	b.n	8002e2a <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	3301      	adds	r3, #1
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff f9dc 	bl	80020e4 <WIZCHIP_READ>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	029b      	lsls	r3, r3, #10
 8002d32:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8002d34:	89ba      	ldrh	r2, [r7, #12]
 8002d36:	88bb      	ldrh	r3, [r7, #4]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d201      	bcs.n	8002d40 <recv+0x74>
 8002d3c:	89bb      	ldrh	r3, [r7, #12]
 8002d3e:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff fb73 	bl	800242e <getSn_RX_RSR>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	3301      	adds	r3, #1
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff f9c3 	bl	80020e4 <WIZCHIP_READ>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	2b17      	cmp	r3, #23
 8002d66:	d026      	beq.n	8002db6 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	2b1c      	cmp	r3, #28
 8002d6c:	d11c      	bne.n	8002da8 <recv+0xdc>
            {
               if(recvsize != 0) break;
 8002d6e:	89bb      	ldrh	r3, [r7, #12]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d133      	bne.n	8002ddc <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff fb0e 	bl	8002398 <getSn_TX_FSR>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	461c      	mov	r4, r3
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	3301      	adds	r3, #1
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff f9a9 	bl	80020e4 <WIZCHIP_READ>
 8002d92:	4603      	mov	r3, r0
 8002d94:	029b      	lsls	r3, r3, #10
 8002d96:	429c      	cmp	r4, r3
 8002d98:	d10d      	bne.n	8002db6 <recv+0xea>
               {
                  close(sn);
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fd5d 	bl	800285c <close>
                  return SOCKERR_SOCKSTATUS;
 8002da2:	f06f 0306 	mvn.w	r3, #6
 8002da6:	e040      	b.n	8002e2a <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fd56 	bl	800285c <close>
               return SOCKERR_SOCKSTATUS;
 8002db0:	f06f 0306 	mvn.w	r3, #6
 8002db4:	e039      	b.n	8002e2a <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8002db6:	4b1f      	ldr	r3, [pc, #124]	; (8002e34 <recv+0x168>)
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	fa42 f303 	asr.w	r3, r2, r3
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d004      	beq.n	8002dd4 <recv+0x108>
 8002dca:	89bb      	ldrh	r3, [r7, #12]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <recv+0x108>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	e02a      	b.n	8002e2a <recv+0x15e>
         if(recvsize != 0) break;
 8002dd4:	89bb      	ldrh	r3, [r7, #12]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d102      	bne.n	8002de0 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 8002dda:	e7b1      	b.n	8002d40 <recv+0x74>
               if(recvsize != 0) break;
 8002ddc:	bf00      	nop
 8002dde:	e000      	b.n	8002de2 <recv+0x116>
         if(recvsize != 0) break;
 8002de0:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8002de2:	89ba      	ldrh	r2, [r7, #12]
 8002de4:	88bb      	ldrh	r3, [r7, #4]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d201      	bcs.n	8002dee <recv+0x122>
 8002dea:	89bb      	ldrh	r3, [r7, #12]
 8002dec:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8002dee:	88ba      	ldrh	r2, [r7, #4]
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	6839      	ldr	r1, [r7, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff fbc1 	bl	800257c <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	3301      	adds	r3, #1
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e06:	2140      	movs	r1, #64	; 0x40
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff f9b7 	bl	800217c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002e0e:	bf00      	nop
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	3301      	adds	r3, #1
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff f961 	bl	80020e4 <WIZCHIP_READ>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1f3      	bne.n	8002e10 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002e28:	88bb      	ldrh	r3, [r7, #4]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd90      	pop	{r4, r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20000100 	.word	0x20000100

08002e38 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	bf00      	nop
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr

08002e50 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	bf00      	nop
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr

08002e68 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	70fb      	strb	r3, [r7, #3]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	701a      	strb	r2, [r3, #0]
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr

08002e9c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	71fb      	strb	r3, [r7, #7]
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr
	...

08002ec0 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <reg_wizchip_cs_cbfunc+0x16>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8002ed6:	4b09      	ldr	r3, [pc, #36]	; (8002efc <reg_wizchip_cs_cbfunc+0x3c>)
 8002ed8:	4a09      	ldr	r2, [pc, #36]	; (8002f00 <reg_wizchip_cs_cbfunc+0x40>)
 8002eda:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8002edc:	4b07      	ldr	r3, [pc, #28]	; (8002efc <reg_wizchip_cs_cbfunc+0x3c>)
 8002ede:	4a09      	ldr	r2, [pc, #36]	; (8002f04 <reg_wizchip_cs_cbfunc+0x44>)
 8002ee0:	619a      	str	r2, [r3, #24]
 8002ee2:	e005      	b.n	8002ef0 <reg_wizchip_cs_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8002ee4:	4a05      	ldr	r2, [pc, #20]	; (8002efc <reg_wizchip_cs_cbfunc+0x3c>)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8002eea:	4a04      	ldr	r2, [pc, #16]	; (8002efc <reg_wizchip_cs_cbfunc+0x3c>)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	6193      	str	r3, [r2, #24]
   }
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	20000008 	.word	0x20000008
 8002f00:	08002e51 	.word	0x08002e51
 8002f04:	08002e5d 	.word	0x08002e5d

08002f08 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8002f12:	bf00      	nop
 8002f14:	4b0e      	ldr	r3, [pc, #56]	; (8002f50 <reg_wizchip_spi_cbfunc+0x48>)
 8002f16:	881b      	ldrh	r3, [r3, #0]
 8002f18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0f9      	beq.n	8002f14 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <reg_wizchip_spi_cbfunc+0x24>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d106      	bne.n	8002f3a <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8002f2c:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <reg_wizchip_spi_cbfunc+0x48>)
 8002f2e:	4a09      	ldr	r2, [pc, #36]	; (8002f54 <reg_wizchip_spi_cbfunc+0x4c>)
 8002f30:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8002f32:	4b07      	ldr	r3, [pc, #28]	; (8002f50 <reg_wizchip_spi_cbfunc+0x48>)
 8002f34:	4a08      	ldr	r2, [pc, #32]	; (8002f58 <reg_wizchip_spi_cbfunc+0x50>)
 8002f36:	621a      	str	r2, [r3, #32]
 8002f38:	e005      	b.n	8002f46 <reg_wizchip_spi_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8002f3a:	4a05      	ldr	r2, [pc, #20]	; (8002f50 <reg_wizchip_spi_cbfunc+0x48>)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8002f40:	4a03      	ldr	r2, [pc, #12]	; (8002f50 <reg_wizchip_spi_cbfunc+0x48>)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	6213      	str	r3, [r2, #32]
   }
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr
 8002f50:	20000008 	.word	0x20000008
 8002f54:	08002e9d 	.word	0x08002e9d
 8002f58:	08002eab 	.word	0x08002eab

08002f5c <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8002f5c:	b590      	push	{r4, r7, lr}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	6039      	str	r1, [r7, #0]
 8002f66:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	2300      	movs	r3, #0
 8002f72:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	2b0f      	cmp	r3, #15
 8002f78:	f200 80c2 	bhi.w	8003100 <ctlwizchip+0x1a4>
 8002f7c:	a201      	add	r2, pc, #4	; (adr r2, 8002f84 <ctlwizchip+0x28>)
 8002f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f82:	bf00      	nop
 8002f84:	08002fc5 	.word	0x08002fc5
 8002f88:	08002fcb 	.word	0x08002fcb
 8002f8c:	08002ff7 	.word	0x08002ff7
 8002f90:	08002feb 	.word	0x08002feb
 8002f94:	08003005 	.word	0x08003005
 8002f98:	08003011 	.word	0x08003011
 8002f9c:	0800301f 	.word	0x0800301f
 8002fa0:	08003045 	.word	0x08003045
 8002fa4:	0800306b 	.word	0x0800306b
 8002fa8:	080030a5 	.word	0x080030a5
 8002fac:	080030ab 	.word	0x080030ab
 8002fb0:	080030b3 	.word	0x080030b3
 8002fb4:	08003107 	.word	0x08003107
 8002fb8:	080030bb 	.word	0x080030bb
 8002fbc:	080030c9 	.word	0x080030c9
 8002fc0:	080030e5 	.word	0x080030e5
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8002fc4:	f000 f8a8 	bl	8003118 <wizchip_sw_reset>
         break;
 8002fc8:	e09e      	b.n	8003108 <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d004      	beq.n	8002fda <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	3308      	adds	r3, #8
 8002fd8:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4611      	mov	r1, r2
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 f8e5 	bl	80031b0 <wizchip_init>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	e08f      	b.n	800310a <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 f96a 	bl	80032c8 <wizchip_clrinterrupt>
         break;
 8002ff4:	e088      	b.n	8003108 <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8002ff6:	f000 f985 	bl	8003304 <wizchip_getinterrupt>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	801a      	strh	r2, [r3, #0]
         break;
 8003002:	e081      	b.n	8003108 <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f000 f9a0 	bl	800334e <wizchip_setinterruptmask>
         break;         
 800300e:	e07b      	b.n	8003108 <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8003010:	f000 f9b8 	bl	8003384 <wizchip_getinterruptmask>
 8003014:	4603      	mov	r3, r0
 8003016:	461a      	mov	r2, r3
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	801a      	strh	r2, [r3, #0]
         break;
 800301c:	e074      	b.n	8003108 <ctlwizchip+0x1ac>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	0a1b      	lsrs	r3, r3, #8
 8003024:	b29b      	uxth	r3, r3
 8003026:	b2db      	uxtb	r3, r3
 8003028:	4619      	mov	r1, r3
 800302a:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 800302e:	f7ff f8a5 	bl	800217c <WIZCHIP_WRITE>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	881b      	ldrh	r3, [r3, #0]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	4619      	mov	r1, r3
 800303a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800303e:	f7ff f89d 	bl	800217c <WIZCHIP_WRITE>
         break;
 8003042:	e061      	b.n	8003108 <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8003044:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8003048:	f7ff f84c 	bl	80020e4 <WIZCHIP_READ>
 800304c:	4603      	mov	r3, r0
 800304e:	b29b      	uxth	r3, r3
 8003050:	021b      	lsls	r3, r3, #8
 8003052:	b29c      	uxth	r4, r3
 8003054:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003058:	f7ff f844 	bl	80020e4 <WIZCHIP_READ>
 800305c:	4603      	mov	r3, r0
 800305e:	b29b      	uxth	r3, r3
 8003060:	4423      	add	r3, r4
 8003062:	b29a      	uxth	r2, r3
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	801a      	strh	r2, [r3, #0]
         break;
 8003068:	e04e      	b.n	8003108 <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800306a:	4b2a      	ldr	r3, [pc, #168]	; (8003114 <ctlwizchip+0x1b8>)
 800306c:	789a      	ldrb	r2, [r3, #2]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	3301      	adds	r3, #1
 8003076:	4a27      	ldr	r2, [pc, #156]	; (8003114 <ctlwizchip+0x1b8>)
 8003078:	78d2      	ldrb	r2, [r2, #3]
 800307a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	3302      	adds	r3, #2
 8003080:	4a24      	ldr	r2, [pc, #144]	; (8003114 <ctlwizchip+0x1b8>)
 8003082:	7912      	ldrb	r2, [r2, #4]
 8003084:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	3303      	adds	r3, #3
 800308a:	4a22      	ldr	r2, [pc, #136]	; (8003114 <ctlwizchip+0x1b8>)
 800308c:	7952      	ldrb	r2, [r2, #5]
 800308e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	3304      	adds	r3, #4
 8003094:	4a1f      	ldr	r2, [pc, #124]	; (8003114 <ctlwizchip+0x1b8>)
 8003096:	7992      	ldrb	r2, [r2, #6]
 8003098:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	3305      	adds	r3, #5
 800309e:	2200      	movs	r2, #0
 80030a0:	701a      	strb	r2, [r3, #0]
         break;
 80030a2:	e031      	b.n	8003108 <ctlwizchip+0x1ac>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 80030a4:	f000 f9c0 	bl	8003428 <wizphy_reset>
         break;
 80030a8:	e02e      	b.n	8003108 <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 80030aa:	6838      	ldr	r0, [r7, #0]
 80030ac:	f000 f9e3 	bl	8003476 <wizphy_setphyconf>
         break;
 80030b0:	e02a      	b.n	8003108 <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 80030b2:	6838      	ldr	r0, [r7, #0]
 80030b4:	f000 fa21 	bl	80034fa <wizphy_getphyconf>
         break;
 80030b8:	e026      	b.n	8003108 <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 fa67 	bl	8003592 <wizphy_setphypmode>
 80030c4:	4603      	mov	r3, r0
 80030c6:	e020      	b.n	800310a <ctlwizchip+0x1ae>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 80030c8:	f000 f995 	bl	80033f6 <wizphy_getphypmode>
 80030cc:	4603      	mov	r3, r0
 80030ce:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80030d0:	7dfb      	ldrb	r3, [r7, #23]
 80030d2:	2bff      	cmp	r3, #255	; 0xff
 80030d4:	d102      	bne.n	80030dc <ctlwizchip+0x180>
 80030d6:	f04f 33ff 	mov.w	r3, #4294967295
 80030da:	e016      	b.n	800310a <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	7dfa      	ldrb	r2, [r7, #23]
 80030e0:	701a      	strb	r2, [r3, #0]
         break;
 80030e2:	e011      	b.n	8003108 <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80030e4:	f000 f971 	bl	80033ca <wizphy_getphylink>
 80030e8:	4603      	mov	r3, r0
 80030ea:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80030ec:	7dfb      	ldrb	r3, [r7, #23]
 80030ee:	2bff      	cmp	r3, #255	; 0xff
 80030f0:	d102      	bne.n	80030f8 <ctlwizchip+0x19c>
 80030f2:	f04f 33ff 	mov.w	r3, #4294967295
 80030f6:	e008      	b.n	800310a <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	7dfa      	ldrb	r2, [r7, #23]
 80030fc:	701a      	strb	r2, [r3, #0]
         break;
 80030fe:	e003      	b.n	8003108 <ctlwizchip+0x1ac>
   #endif      
      default:
         return -1;
 8003100:	f04f 33ff 	mov.w	r3, #4294967295
 8003104:	e001      	b.n	800310a <ctlwizchip+0x1ae>
         break;
 8003106:	bf00      	nop
   }
   return 0;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	371c      	adds	r7, #28
 800310e:	46bd      	mov	sp, r7
 8003110:	bd90      	pop	{r4, r7, pc}
 8003112:	bf00      	nop
 8003114:	20000008 	.word	0x20000008

08003118 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800311e:	1d3b      	adds	r3, r7, #4
 8003120:	2206      	movs	r2, #6
 8003122:	4619      	mov	r1, r3
 8003124:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003128:	f7ff f876 	bl	8002218 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800312c:	f107 0314 	add.w	r3, r7, #20
 8003130:	2204      	movs	r2, #4
 8003132:	4619      	mov	r1, r3
 8003134:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003138:	f7ff f86e 	bl	8002218 <WIZCHIP_READ_BUF>
 800313c:	f107 0310 	add.w	r3, r7, #16
 8003140:	2204      	movs	r2, #4
 8003142:	4619      	mov	r1, r3
 8003144:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003148:	f7ff f866 	bl	8002218 <WIZCHIP_READ_BUF>
 800314c:	f107 030c 	add.w	r3, r7, #12
 8003150:	2204      	movs	r2, #4
 8003152:	4619      	mov	r1, r3
 8003154:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003158:	f7ff f85e 	bl	8002218 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 800315c:	2180      	movs	r1, #128	; 0x80
 800315e:	2000      	movs	r0, #0
 8003160:	f7ff f80c 	bl	800217c <WIZCHIP_WRITE>
   getMR(); // for delay
 8003164:	2000      	movs	r0, #0
 8003166:	f7fe ffbd 	bl	80020e4 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800316a:	1d3b      	adds	r3, r7, #4
 800316c:	2206      	movs	r2, #6
 800316e:	4619      	mov	r1, r3
 8003170:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003174:	f7ff f8b0 	bl	80022d8 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8003178:	f107 0314 	add.w	r3, r7, #20
 800317c:	2204      	movs	r2, #4
 800317e:	4619      	mov	r1, r3
 8003180:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003184:	f7ff f8a8 	bl	80022d8 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8003188:	f107 0310 	add.w	r3, r7, #16
 800318c:	2204      	movs	r2, #4
 800318e:	4619      	mov	r1, r3
 8003190:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003194:	f7ff f8a0 	bl	80022d8 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8003198:	f107 030c 	add.w	r3, r7, #12
 800319c:	2204      	movs	r2, #4
 800319e:	4619      	mov	r1, r3
 80031a0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80031a4:	f7ff f898 	bl	80022d8 <WIZCHIP_WRITE_BUF>
}
 80031a8:	bf00      	nop
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80031ba:	2300      	movs	r3, #0
 80031bc:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80031be:	f7ff ffab 	bl	8003118 <wizchip_sw_reset>
   if(txsize)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d03b      	beq.n	8003240 <wizchip_init+0x90>
   {
      tmp = 0;
 80031c8:	2300      	movs	r3, #0
 80031ca:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80031cc:	2300      	movs	r3, #0
 80031ce:	73fb      	strb	r3, [r7, #15]
 80031d0:	e015      	b.n	80031fe <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80031d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	4413      	add	r3, r2
 80031da:	781a      	ldrb	r2, [r3, #0]
 80031dc:	7bbb      	ldrb	r3, [r7, #14]
 80031de:	4413      	add	r3, r2
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80031e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031e8:	2b10      	cmp	r3, #16
 80031ea:	dd02      	ble.n	80031f2 <wizchip_init+0x42>
 80031ec:	f04f 33ff 	mov.w	r3, #4294967295
 80031f0:	e066      	b.n	80032c0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80031f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	3301      	adds	r3, #1
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	73fb      	strb	r3, [r7, #15]
 80031fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003202:	2b07      	cmp	r3, #7
 8003204:	dde5      	ble.n	80031d2 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003206:	2300      	movs	r3, #0
 8003208:	73fb      	strb	r3, [r7, #15]
 800320a:	e015      	b.n	8003238 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 800320c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	3301      	adds	r3, #1
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800321a:	4618      	mov	r0, r3
 800321c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	4413      	add	r3, r2
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	4619      	mov	r1, r3
 8003228:	f7fe ffa8 	bl	800217c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800322c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003230:	b2db      	uxtb	r3, r3
 8003232:	3301      	adds	r3, #1
 8003234:	b2db      	uxtb	r3, r3
 8003236:	73fb      	strb	r3, [r7, #15]
 8003238:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800323c:	2b07      	cmp	r3, #7
 800323e:	dde5      	ble.n	800320c <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d03b      	beq.n	80032be <wizchip_init+0x10e>
   {
      tmp = 0;
 8003246:	2300      	movs	r3, #0
 8003248:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800324a:	2300      	movs	r3, #0
 800324c:	73fb      	strb	r3, [r7, #15]
 800324e:	e015      	b.n	800327c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8003250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	4413      	add	r3, r2
 8003258:	781a      	ldrb	r2, [r3, #0]
 800325a:	7bbb      	ldrb	r3, [r7, #14]
 800325c:	4413      	add	r3, r2
 800325e:	b2db      	uxtb	r3, r3
 8003260:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8003262:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003266:	2b10      	cmp	r3, #16
 8003268:	dd02      	ble.n	8003270 <wizchip_init+0xc0>
 800326a:	f04f 33ff 	mov.w	r3, #4294967295
 800326e:	e027      	b.n	80032c0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003270:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003274:	b2db      	uxtb	r3, r3
 8003276:	3301      	adds	r3, #1
 8003278:	b2db      	uxtb	r3, r3
 800327a:	73fb      	strb	r3, [r7, #15]
 800327c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003280:	2b07      	cmp	r3, #7
 8003282:	dde5      	ble.n	8003250 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003284:	2300      	movs	r3, #0
 8003286:	73fb      	strb	r3, [r7, #15]
 8003288:	e015      	b.n	80032b6 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800328a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	3301      	adds	r3, #1
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8003298:	4618      	mov	r0, r3
 800329a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	4413      	add	r3, r2
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	4619      	mov	r1, r3
 80032a6:	f7fe ff69 	bl	800217c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80032aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	3301      	adds	r3, #1
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	73fb      	strb	r3, [r7, #15]
 80032b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ba:	2b07      	cmp	r3, #7
 80032bc:	dde5      	ble.n	800328a <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80032d2:	88fb      	ldrh	r3, [r7, #6]
 80032d4:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80032d6:	88fb      	ldrh	r3, [r7, #6]
 80032d8:	0a1b      	lsrs	r3, r3, #8
 80032da:	b29b      	uxth	r3, r3
 80032dc:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 80032de:	7bfb      	ldrb	r3, [r7, #15]
 80032e0:	f023 030f 	bic.w	r3, r3, #15
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	4619      	mov	r1, r3
 80032e8:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80032ec:	f7fe ff46 	bl	800217c <WIZCHIP_WRITE>
   setSIR(sir);
 80032f0:	7bbb      	ldrb	r3, [r7, #14]
 80032f2:	4619      	mov	r1, r3
 80032f4:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 80032f8:	f7fe ff40 	bl	800217c <WIZCHIP_WRITE>
#endif   
}
 80032fc:	bf00      	nop
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 800330a:	2300      	movs	r3, #0
 800330c:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 800330e:	2300      	movs	r3, #0
 8003310:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8003316:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 800331a:	f7fe fee3 	bl	80020e4 <WIZCHIP_READ>
 800331e:	4603      	mov	r3, r0
 8003320:	f023 030f 	bic.w	r3, r3, #15
 8003324:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8003326:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 800332a:	f7fe fedb 	bl	80020e4 <WIZCHIP_READ>
 800332e:	4603      	mov	r3, r0
 8003330:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8003332:	79bb      	ldrb	r3, [r7, #6]
 8003334:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8003336:	88bb      	ldrh	r3, [r7, #4]
 8003338:	021b      	lsls	r3, r3, #8
 800333a:	b29a      	uxth	r2, r3
 800333c:	79fb      	ldrb	r3, [r7, #7]
 800333e:	b29b      	uxth	r3, r3
 8003340:	4413      	add	r3, r2
 8003342:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003344:	88bb      	ldrh	r3, [r7, #4]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b084      	sub	sp, #16
 8003352:	af00      	add	r7, sp, #0
 8003354:	4603      	mov	r3, r0
 8003356:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8003358:	88fb      	ldrh	r3, [r7, #6]
 800335a:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 800335c:	88fb      	ldrh	r3, [r7, #6]
 800335e:	0a1b      	lsrs	r3, r3, #8
 8003360:	b29b      	uxth	r3, r3
 8003362:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8003364:	7bfb      	ldrb	r3, [r7, #15]
 8003366:	4619      	mov	r1, r3
 8003368:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800336c:	f7fe ff06 	bl	800217c <WIZCHIP_WRITE>
   setSIMR(simr);
 8003370:	7bbb      	ldrb	r3, [r7, #14]
 8003372:	4619      	mov	r1, r3
 8003374:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003378:	f7fe ff00 	bl	800217c <WIZCHIP_WRITE>
#endif   
}
 800337c:	bf00      	nop
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 800338a:	2300      	movs	r3, #0
 800338c:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 800338e:	2300      	movs	r3, #0
 8003390:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003392:	2300      	movs	r3, #0
 8003394:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8003396:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800339a:	f7fe fea3 	bl	80020e4 <WIZCHIP_READ>
 800339e:	4603      	mov	r3, r0
 80033a0:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 80033a2:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80033a6:	f7fe fe9d 	bl	80020e4 <WIZCHIP_READ>
 80033aa:	4603      	mov	r3, r0
 80033ac:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80033ae:	79bb      	ldrb	r3, [r7, #6]
 80033b0:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 80033b2:	88bb      	ldrh	r3, [r7, #4]
 80033b4:	021b      	lsls	r3, r3, #8
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	4413      	add	r3, r2
 80033be:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80033c0:	88bb      	ldrh	r3, [r7, #4]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 80033d0:	2300      	movs	r3, #0
 80033d2:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 80033d4:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80033d8:	f7fe fe84 	bl	80020e4 <WIZCHIP_READ>
 80033dc:	4603      	mov	r3, r0
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80033e6:	2301      	movs	r3, #1
 80033e8:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80033ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b082      	sub	sp, #8
 80033fa:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8003400:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003404:	f7fe fe6e 	bl	80020e4 <WIZCHIP_READ>
 8003408:	4603      	mov	r3, r0
 800340a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800340e:	2b30      	cmp	r3, #48	; 0x30
 8003410:	d102      	bne.n	8003418 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8003412:	2301      	movs	r3, #1
 8003414:	71fb      	strb	r3, [r7, #7]
 8003416:	e001      	b.n	800341c <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8003418:	2300      	movs	r3, #0
 800341a:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 800341c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 800342e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003432:	f7fe fe57 	bl	80020e4 <WIZCHIP_READ>
 8003436:	4603      	mov	r3, r0
 8003438:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003440:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8003442:	79fb      	ldrb	r3, [r7, #7]
 8003444:	4619      	mov	r1, r3
 8003446:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800344a:	f7fe fe97 	bl	800217c <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 800344e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003452:	f7fe fe47 	bl	80020e4 <WIZCHIP_READ>
 8003456:	4603      	mov	r3, r0
 8003458:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 800345a:	79fb      	ldrb	r3, [r7, #7]
 800345c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003460:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	4619      	mov	r1, r3
 8003466:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800346a:	f7fe fe87 	bl	800217c <WIZCHIP_WRITE>
}
 800346e:	bf00      	nop
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b084      	sub	sp, #16
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800347e:	2300      	movs	r3, #0
 8003480:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d104      	bne.n	8003494 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 800348a:	7bfb      	ldrb	r3, [r7, #15]
 800348c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003490:	73fb      	strb	r3, [r7, #15]
 8003492:	e003      	b.n	800349c <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800349a:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	785b      	ldrb	r3, [r3, #1]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d104      	bne.n	80034ae <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
 80034a6:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80034aa:	73fb      	strb	r3, [r7, #15]
 80034ac:	e019      	b.n	80034e2 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	78db      	ldrb	r3, [r3, #3]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d10d      	bne.n	80034d2 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	789b      	ldrb	r3, [r3, #2]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d104      	bne.n	80034c8 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 80034be:	7bfb      	ldrb	r3, [r7, #15]
 80034c0:	f043 0318 	orr.w	r3, r3, #24
 80034c4:	73fb      	strb	r3, [r7, #15]
 80034c6:	e00c      	b.n	80034e2 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
 80034ca:	f043 0308 	orr.w	r3, r3, #8
 80034ce:	73fb      	strb	r3, [r7, #15]
 80034d0:	e007      	b.n	80034e2 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	789b      	ldrb	r3, [r3, #2]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d103      	bne.n	80034e2 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	f043 0310 	orr.w	r3, r3, #16
 80034e0:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
 80034e4:	4619      	mov	r1, r3
 80034e6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80034ea:	f7fe fe47 	bl	800217c <WIZCHIP_WRITE>
   wizphy_reset();
 80034ee:	f7ff ff9b 	bl	8003428 <wizphy_reset>
}
 80034f2:	bf00      	nop
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b084      	sub	sp, #16
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8003502:	2300      	movs	r3, #0
 8003504:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8003506:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800350a:	f7fe fdeb 	bl	80020e4 <WIZCHIP_READ>
 800350e:	4603      	mov	r3, r0
 8003510:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8003512:	7bfb      	ldrb	r3, [r7, #15]
 8003514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003518:	2b00      	cmp	r3, #0
 800351a:	bf14      	ite	ne
 800351c:	2301      	movne	r3, #1
 800351e:	2300      	moveq	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	461a      	mov	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003528:	7bfb      	ldrb	r3, [r7, #15]
 800352a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800352e:	2b20      	cmp	r3, #32
 8003530:	d001      	beq.n	8003536 <wizphy_getphyconf+0x3c>
 8003532:	2b38      	cmp	r3, #56	; 0x38
 8003534:	d103      	bne.n	800353e <wizphy_getphyconf+0x44>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	705a      	strb	r2, [r3, #1]
         break;
 800353c:	e003      	b.n	8003546 <wizphy_getphyconf+0x4c>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	705a      	strb	r2, [r3, #1]
         break;
 8003544:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003546:	7bfb      	ldrb	r3, [r7, #15]
 8003548:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800354c:	2b18      	cmp	r3, #24
 800354e:	d003      	beq.n	8003558 <wizphy_getphyconf+0x5e>
 8003550:	2b20      	cmp	r3, #32
 8003552:	d001      	beq.n	8003558 <wizphy_getphyconf+0x5e>
 8003554:	2b10      	cmp	r3, #16
 8003556:	d103      	bne.n	8003560 <wizphy_getphyconf+0x66>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	709a      	strb	r2, [r3, #2]
         break;
 800355e:	e003      	b.n	8003568 <wizphy_getphyconf+0x6e>
      default:
         phyconf->speed = PHY_SPEED_10;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	709a      	strb	r2, [r3, #2]
         break;
 8003566:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003568:	7bfb      	ldrb	r3, [r7, #15]
 800356a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800356e:	2b18      	cmp	r3, #24
 8003570:	d003      	beq.n	800357a <wizphy_getphyconf+0x80>
 8003572:	2b20      	cmp	r3, #32
 8003574:	d001      	beq.n	800357a <wizphy_getphyconf+0x80>
 8003576:	2b08      	cmp	r3, #8
 8003578:	d103      	bne.n	8003582 <wizphy_getphyconf+0x88>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	70da      	strb	r2, [r3, #3]
         break;
 8003580:	e003      	b.n	800358a <wizphy_getphyconf+0x90>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	70da      	strb	r2, [r3, #3]
         break;
 8003588:	bf00      	nop
   }
}
 800358a:	bf00      	nop
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b084      	sub	sp, #16
 8003596:	af00      	add	r7, sp, #0
 8003598:	4603      	mov	r3, r0
 800359a:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800359c:	2300      	movs	r3, #0
 800359e:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80035a0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80035a4:	f7fe fd9e 	bl	80020e4 <WIZCHIP_READ>
 80035a8:	4603      	mov	r3, r0
 80035aa:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d102      	bne.n	80035bc <wizphy_setphypmode+0x2a>
 80035b6:	f04f 33ff 	mov.w	r3, #4294967295
 80035ba:	e030      	b.n	800361e <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
 80035be:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80035c2:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d104      	bne.n	80035d4 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
 80035cc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80035d0:	73fb      	strb	r3, [r7, #15]
 80035d2:	e003      	b.n	80035dc <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
 80035d6:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80035da:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	4619      	mov	r1, r3
 80035e0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80035e4:	f7fe fdca 	bl	800217c <WIZCHIP_WRITE>
   wizphy_reset();
 80035e8:	f7ff ff1e 	bl	8003428 <wizphy_reset>
   tmp = getPHYCFGR();
 80035ec:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80035f0:	f7fe fd78 	bl	80020e4 <WIZCHIP_READ>
 80035f4:	4603      	mov	r3, r0
 80035f6:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d106      	bne.n	800360c <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
 8003600:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003604:	2b00      	cmp	r3, #0
 8003606:	d008      	beq.n	800361a <wizphy_setphypmode+0x88>
 8003608:	2300      	movs	r3, #0
 800360a:	e008      	b.n	800361e <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <wizphy_setphypmode+0x88>
 8003616:	2300      	movs	r3, #0
 8003618:	e001      	b.n	800361e <wizphy_setphypmode+0x8c>
   }
   return -1;
 800361a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2206      	movs	r2, #6
 8003634:	4619      	mov	r1, r3
 8003636:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800363a:	f7fe fe4d 	bl	80022d8 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	330e      	adds	r3, #14
 8003642:	2204      	movs	r2, #4
 8003644:	4619      	mov	r1, r3
 8003646:	f44f 7080 	mov.w	r0, #256	; 0x100
 800364a:	f7fe fe45 	bl	80022d8 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	330a      	adds	r3, #10
 8003652:	2204      	movs	r2, #4
 8003654:	4619      	mov	r1, r3
 8003656:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800365a:	f7fe fe3d 	bl	80022d8 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3306      	adds	r3, #6
 8003662:	2204      	movs	r2, #4
 8003664:	4619      	mov	r1, r3
 8003666:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800366a:	f7fe fe35 	bl	80022d8 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	7c9a      	ldrb	r2, [r3, #18]
 8003672:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <wizchip_setnetinfo+0x78>)
 8003674:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	7cda      	ldrb	r2, [r3, #19]
 800367a:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <wizchip_setnetinfo+0x78>)
 800367c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	7d1a      	ldrb	r2, [r3, #20]
 8003682:	4b07      	ldr	r3, [pc, #28]	; (80036a0 <wizchip_setnetinfo+0x78>)
 8003684:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	7d5a      	ldrb	r2, [r3, #21]
 800368a:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <wizchip_setnetinfo+0x78>)
 800368c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	7d9a      	ldrb	r2, [r3, #22]
 8003692:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <wizchip_setnetinfo+0x7c>)
 8003694:	701a      	strb	r2, [r3, #0]
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	2000011c 	.word	0x2000011c
 80036a4:	20000120 	.word	0x20000120

080036a8 <_write>:
  HAL_GPIO_WritePin(WATCHDOG_GPIO_Port, WATCHDOG_Pin, GPIO_PIN_SET);

}

int _write(int file, char* p, int len)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, p, len, 10);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	230a      	movs	r3, #10
 80036ba:	68b9      	ldr	r1, [r7, #8]
 80036bc:	4803      	ldr	r0, [pc, #12]	; (80036cc <_write+0x24>)
 80036be:	f7fe fb17 	bl	8001cf0 <HAL_UART_Transmit>
  return len;
 80036c2:	687b      	ldr	r3, [r7, #4]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	200009f0 	.word	0x200009f0

080036d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036d0:	b5b0      	push	{r4, r5, r7, lr}
 80036d2:	b088      	sub	sp, #32
 80036d4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  uint8_t w5500_s0_status = 0x10;
 80036d6:	2310      	movs	r3, #16
 80036d8:	73fb      	strb	r3, [r7, #15]
  uint8_t w5500_s1_status = 0x10;
 80036da:	2310      	movs	r3, #16
 80036dc:	73bb      	strb	r3, [r7, #14]

  //uint8_t buf2[]   = "This is DTU-3000 using W5500";
  uint8_t address_target[]  = {192,168,11,101};
 80036de:	4b2f      	ldr	r3, [pc, #188]	; (800379c <main+0xcc>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	607b      	str	r3, [r7, #4]
  uint8_t count = 0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	737b      	strb	r3, [r7, #13]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036e8:	f7fc fd9c 	bl	8000224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036ec:	f000 f866 	bl	80037bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036f0:	f000 f93c 	bl	800396c <MX_GPIO_Init>
  MX_SPI1_Init();
 80036f4:	f000 f8a4 	bl	8003840 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80036f8:	f000 f90e 	bl	8003918 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80036fc:	f000 f8d6 	bl	80038ac <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  W5500_hw_Rst();
 8003700:	f000 fd46 	bl	8004190 <W5500_hw_Rst>
  W5500_init();
 8003704:	f000 fd5e 	bl	80041c4 <W5500_init>

  socket(0, Sn_MR_TCP, 5000, SF_TCP_NODELAY);
 8003708:	2320      	movs	r3, #32
 800370a:	f241 3288 	movw	r2, #5000	; 0x1388
 800370e:	2101      	movs	r1, #1
 8003710:	2000      	movs	r0, #0
 8003712:	f7fe ff8f 	bl	8002634 <socket>
  listen(0);
 8003716:	2000      	movs	r0, #0
 8003718:	f7ff f90e 	bl	8002938 <listen>

  SPI2->CR2 |= 0x0040;    // RXNE interrupt enable
 800371c:	4a20      	ldr	r2, [pc, #128]	; (80037a0 <main+0xd0>)
 800371e:	4b20      	ldr	r3, [pc, #128]	; (80037a0 <main+0xd0>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003726:	6053      	str	r3, [r2, #4]
  SPI2->CR1 |= 0x0040;    // SPI enable
 8003728:	4a1d      	ldr	r2, [pc, #116]	; (80037a0 <main+0xd0>)
 800372a:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <main+0xd0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003732:	6013      	str	r3, [r2, #0]

  SPI2->DR = Tx[0];       // Write initial byte
 8003734:	4b1a      	ldr	r3, [pc, #104]	; (80037a0 <main+0xd0>)
 8003736:	4a1b      	ldr	r2, [pc, #108]	; (80037a4 <main+0xd4>)
 8003738:	7812      	ldrb	r2, [r2, #0]
 800373a:	60da      	str	r2, [r3, #12]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin(LED_SOCKET_GPIO_Port, LED_SOCKET_Pin);
 800373c:	2108      	movs	r1, #8
 800373e:	481a      	ldr	r0, [pc, #104]	; (80037a8 <main+0xd8>)
 8003740:	f7fd f9a0 	bl	8000a84 <HAL_GPIO_TogglePin>
	  //printf("0x0A \r \n");
	  //w5500_s0_status = getSn_SR(0);
    //w5500_s1_status = getSn_SR(1);

	  //printf("W5500 Status Socket0 == 0x%X Socket1 == 0x%X \r \n", w5500_s0_status , w5500_s1_status);
	  printf("%d %d %d %d %d %d \r \n", Rx[0], Rx[1], Rx[2], Rx[3], Rx[4], Rx[5]);
 8003744:	4b19      	ldr	r3, [pc, #100]	; (80037ac <main+0xdc>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	4b18      	ldr	r3, [pc, #96]	; (80037ac <main+0xdc>)
 800374c:	785b      	ldrb	r3, [r3, #1]
 800374e:	461c      	mov	r4, r3
 8003750:	4b16      	ldr	r3, [pc, #88]	; (80037ac <main+0xdc>)
 8003752:	789b      	ldrb	r3, [r3, #2]
 8003754:	461d      	mov	r5, r3
 8003756:	4b15      	ldr	r3, [pc, #84]	; (80037ac <main+0xdc>)
 8003758:	78db      	ldrb	r3, [r3, #3]
 800375a:	461a      	mov	r2, r3
 800375c:	4b13      	ldr	r3, [pc, #76]	; (80037ac <main+0xdc>)
 800375e:	791b      	ldrb	r3, [r3, #4]
 8003760:	4619      	mov	r1, r3
 8003762:	4b12      	ldr	r3, [pc, #72]	; (80037ac <main+0xdc>)
 8003764:	795b      	ldrb	r3, [r3, #5]
 8003766:	9302      	str	r3, [sp, #8]
 8003768:	9101      	str	r1, [sp, #4]
 800376a:	9200      	str	r2, [sp, #0]
 800376c:	462b      	mov	r3, r5
 800376e:	4622      	mov	r2, r4
 8003770:	4601      	mov	r1, r0
 8003772:	480f      	ldr	r0, [pc, #60]	; (80037b0 <main+0xe0>)
 8003774:	f000 fe72 	bl	800445c <iprintf>
	  HAL_Delay(100);
 8003778:	2064      	movs	r0, #100	; 0x64
 800377a:	f7fc fdb5 	bl	80002e8 <HAL_Delay>
	  }
	  */

    // Loopback Test

    if((ret = myLoopback_tcps(SOCK_TCPS0, gDATABUF, 5000)) < 0)
 800377e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003782:	490c      	ldr	r1, [pc, #48]	; (80037b4 <main+0xe4>)
 8003784:	2000      	movs	r0, #0
 8003786:	f000 f991 	bl	8003aac <myLoopback_tcps>
 800378a:	60b8      	str	r0, [r7, #8]
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	dad4      	bge.n	800373c <main+0x6c>
    {
      printf("WSOCKET ERROR : %d \r \n", ret);
 8003792:	68b9      	ldr	r1, [r7, #8]
 8003794:	4808      	ldr	r0, [pc, #32]	; (80037b8 <main+0xe8>)
 8003796:	f000 fe61 	bl	800445c <iprintf>
	  HAL_GPIO_TogglePin(LED_SOCKET_GPIO_Port, LED_SOCKET_Pin);
 800379a:	e7cf      	b.n	800373c <main+0x6c>
 800379c:	0800516c 	.word	0x0800516c
 80037a0:	40003800 	.word	0x40003800
 80037a4:	20000074 	.word	0x20000074
 80037a8:	40011400 	.word	0x40011400
 80037ac:	20000124 	.word	0x20000124
 80037b0:	0800513c 	.word	0x0800513c
 80037b4:	20000198 	.word	0x20000198
 80037b8:	08005154 	.word	0x08005154

080037bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b090      	sub	sp, #64	; 0x40
 80037c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037c2:	f107 0318 	add.w	r3, r7, #24
 80037c6:	2228      	movs	r2, #40	; 0x28
 80037c8:	2100      	movs	r1, #0
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 fd94 	bl	80042f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037d0:	1d3b      	adds	r3, r7, #4
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	605a      	str	r2, [r3, #4]
 80037d8:	609a      	str	r2, [r3, #8]
 80037da:	60da      	str	r2, [r3, #12]
 80037dc:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80037de:	2302      	movs	r3, #2
 80037e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037e2:	2301      	movs	r3, #1
 80037e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037e6:	2310      	movs	r3, #16
 80037e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037ea:	2302      	movs	r3, #2
 80037ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80037ee:	2300      	movs	r3, #0
 80037f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80037f2:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80037f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037f8:	f107 0318 	add.w	r3, r7, #24
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fd f953 	bl	8000aa8 <HAL_RCC_OscConfig>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8003808:	f000 fa60 	bl	8003ccc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800380c:	230f      	movs	r3, #15
 800380e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003810:	2302      	movs	r3, #2
 8003812:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003814:	2300      	movs	r3, #0
 8003816:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800381c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800381e:	2300      	movs	r3, #0
 8003820:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003822:	1d3b      	adds	r3, r7, #4
 8003824:	2101      	movs	r1, #1
 8003826:	4618      	mov	r0, r3
 8003828:	f7fd fba2 	bl	8000f70 <HAL_RCC_ClockConfig>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8003832:	f000 fa4b 	bl	8003ccc <Error_Handler>
  }
}
 8003836:	bf00      	nop
 8003838:	3740      	adds	r7, #64	; 0x40
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
	...

08003840 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003844:	4b17      	ldr	r3, [pc, #92]	; (80038a4 <MX_SPI1_Init+0x64>)
 8003846:	4a18      	ldr	r2, [pc, #96]	; (80038a8 <MX_SPI1_Init+0x68>)
 8003848:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800384a:	4b16      	ldr	r3, [pc, #88]	; (80038a4 <MX_SPI1_Init+0x64>)
 800384c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003850:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003852:	4b14      	ldr	r3, [pc, #80]	; (80038a4 <MX_SPI1_Init+0x64>)
 8003854:	2200      	movs	r2, #0
 8003856:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003858:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <MX_SPI1_Init+0x64>)
 800385a:	2200      	movs	r2, #0
 800385c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800385e:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <MX_SPI1_Init+0x64>)
 8003860:	2202      	movs	r2, #2
 8003862:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003864:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <MX_SPI1_Init+0x64>)
 8003866:	2201      	movs	r2, #1
 8003868:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800386a:	4b0e      	ldr	r3, [pc, #56]	; (80038a4 <MX_SPI1_Init+0x64>)
 800386c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003870:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003872:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <MX_SPI1_Init+0x64>)
 8003874:	2208      	movs	r2, #8
 8003876:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003878:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <MX_SPI1_Init+0x64>)
 800387a:	2200      	movs	r2, #0
 800387c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800387e:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <MX_SPI1_Init+0x64>)
 8003880:	2200      	movs	r2, #0
 8003882:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003884:	4b07      	ldr	r3, [pc, #28]	; (80038a4 <MX_SPI1_Init+0x64>)
 8003886:	2200      	movs	r2, #0
 8003888:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800388a:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <MX_SPI1_Init+0x64>)
 800388c:	220a      	movs	r2, #10
 800388e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003890:	4804      	ldr	r0, [pc, #16]	; (80038a4 <MX_SPI1_Init+0x64>)
 8003892:	f7fe f97c 	bl	8001b8e <HAL_SPI_Init>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800389c:	f000 fa16 	bl	8003ccc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80038a0:	bf00      	nop
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	20000998 	.word	0x20000998
 80038a8:	40013000 	.word	0x40013000

080038ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80038b0:	4b17      	ldr	r3, [pc, #92]	; (8003910 <MX_SPI2_Init+0x64>)
 80038b2:	4a18      	ldr	r2, [pc, #96]	; (8003914 <MX_SPI2_Init+0x68>)
 80038b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80038b6:	4b16      	ldr	r3, [pc, #88]	; (8003910 <MX_SPI2_Init+0x64>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80038bc:	4b14      	ldr	r3, [pc, #80]	; (8003910 <MX_SPI2_Init+0x64>)
 80038be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80038c4:	4b12      	ldr	r3, [pc, #72]	; (8003910 <MX_SPI2_Init+0x64>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80038ca:	4b11      	ldr	r3, [pc, #68]	; (8003910 <MX_SPI2_Init+0x64>)
 80038cc:	2202      	movs	r2, #2
 80038ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038d0:	4b0f      	ldr	r3, [pc, #60]	; (8003910 <MX_SPI2_Init+0x64>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80038d6:	4b0e      	ldr	r3, [pc, #56]	; (8003910 <MX_SPI2_Init+0x64>)
 80038d8:	2200      	movs	r2, #0
 80038da:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038dc:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <MX_SPI2_Init+0x64>)
 80038de:	2200      	movs	r2, #0
 80038e0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038e2:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <MX_SPI2_Init+0x64>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80038e8:	4b09      	ldr	r3, [pc, #36]	; (8003910 <MX_SPI2_Init+0x64>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038ee:	4b08      	ldr	r3, [pc, #32]	; (8003910 <MX_SPI2_Init+0x64>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80038f4:	4b06      	ldr	r3, [pc, #24]	; (8003910 <MX_SPI2_Init+0x64>)
 80038f6:	220a      	movs	r2, #10
 80038f8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80038fa:	4805      	ldr	r0, [pc, #20]	; (8003910 <MX_SPI2_Init+0x64>)
 80038fc:	f7fe f947 	bl	8001b8e <HAL_SPI_Init>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 8003906:	f000 f9e1 	bl	8003ccc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20000140 	.word	0x20000140
 8003914:	40003800 	.word	0x40003800

08003918 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800391c:	4b11      	ldr	r3, [pc, #68]	; (8003964 <MX_USART2_UART_Init+0x4c>)
 800391e:	4a12      	ldr	r2, [pc, #72]	; (8003968 <MX_USART2_UART_Init+0x50>)
 8003920:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003922:	4b10      	ldr	r3, [pc, #64]	; (8003964 <MX_USART2_UART_Init+0x4c>)
 8003924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003928:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800392a:	4b0e      	ldr	r3, [pc, #56]	; (8003964 <MX_USART2_UART_Init+0x4c>)
 800392c:	2200      	movs	r2, #0
 800392e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003930:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <MX_USART2_UART_Init+0x4c>)
 8003932:	2200      	movs	r2, #0
 8003934:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003936:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <MX_USART2_UART_Init+0x4c>)
 8003938:	2200      	movs	r2, #0
 800393a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800393c:	4b09      	ldr	r3, [pc, #36]	; (8003964 <MX_USART2_UART_Init+0x4c>)
 800393e:	220c      	movs	r2, #12
 8003940:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003942:	4b08      	ldr	r3, [pc, #32]	; (8003964 <MX_USART2_UART_Init+0x4c>)
 8003944:	2200      	movs	r2, #0
 8003946:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003948:	4b06      	ldr	r3, [pc, #24]	; (8003964 <MX_USART2_UART_Init+0x4c>)
 800394a:	2200      	movs	r2, #0
 800394c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800394e:	4805      	ldr	r0, [pc, #20]	; (8003964 <MX_USART2_UART_Init+0x4c>)
 8003950:	f7fe f981 	bl	8001c56 <HAL_UART_Init>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800395a:	f000 f9b7 	bl	8003ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800395e:	bf00      	nop
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	200009f0 	.word	0x200009f0
 8003968:	40004400 	.word	0x40004400

0800396c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08a      	sub	sp, #40	; 0x28
 8003970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003972:	f107 0318 	add.w	r3, r7, #24
 8003976:	2200      	movs	r2, #0
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	605a      	str	r2, [r3, #4]
 800397c:	609a      	str	r2, [r3, #8]
 800397e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003980:	4a45      	ldr	r2, [pc, #276]	; (8003a98 <MX_GPIO_Init+0x12c>)
 8003982:	4b45      	ldr	r3, [pc, #276]	; (8003a98 <MX_GPIO_Init+0x12c>)
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800398a:	6193      	str	r3, [r2, #24]
 800398c:	4b42      	ldr	r3, [pc, #264]	; (8003a98 <MX_GPIO_Init+0x12c>)
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003994:	617b      	str	r3, [r7, #20]
 8003996:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003998:	4a3f      	ldr	r2, [pc, #252]	; (8003a98 <MX_GPIO_Init+0x12c>)
 800399a:	4b3f      	ldr	r3, [pc, #252]	; (8003a98 <MX_GPIO_Init+0x12c>)
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	f043 0304 	orr.w	r3, r3, #4
 80039a2:	6193      	str	r3, [r2, #24]
 80039a4:	4b3c      	ldr	r3, [pc, #240]	; (8003a98 <MX_GPIO_Init+0x12c>)
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	613b      	str	r3, [r7, #16]
 80039ae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80039b0:	4a39      	ldr	r2, [pc, #228]	; (8003a98 <MX_GPIO_Init+0x12c>)
 80039b2:	4b39      	ldr	r3, [pc, #228]	; (8003a98 <MX_GPIO_Init+0x12c>)
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	f043 0310 	orr.w	r3, r3, #16
 80039ba:	6193      	str	r3, [r2, #24]
 80039bc:	4b36      	ldr	r3, [pc, #216]	; (8003a98 <MX_GPIO_Init+0x12c>)
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039c8:	4a33      	ldr	r2, [pc, #204]	; (8003a98 <MX_GPIO_Init+0x12c>)
 80039ca:	4b33      	ldr	r3, [pc, #204]	; (8003a98 <MX_GPIO_Init+0x12c>)
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	f043 0308 	orr.w	r3, r3, #8
 80039d2:	6193      	str	r3, [r2, #24]
 80039d4:	4b30      	ldr	r3, [pc, #192]	; (8003a98 <MX_GPIO_Init+0x12c>)
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80039e0:	4a2d      	ldr	r2, [pc, #180]	; (8003a98 <MX_GPIO_Init+0x12c>)
 80039e2:	4b2d      	ldr	r3, [pc, #180]	; (8003a98 <MX_GPIO_Init+0x12c>)
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	f043 0320 	orr.w	r3, r3, #32
 80039ea:	6193      	str	r3, [r2, #24]
 80039ec:	4b2a      	ldr	r3, [pc, #168]	; (8003a98 <MX_GPIO_Init+0x12c>)
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	f003 0320 	and.w	r3, r3, #32
 80039f4:	607b      	str	r3, [r7, #4]
 80039f6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WATCHDOG_GPIO_Port, WATCHDOG_Pin, GPIO_PIN_RESET);
 80039f8:	2200      	movs	r2, #0
 80039fa:	2104      	movs	r1, #4
 80039fc:	4827      	ldr	r0, [pc, #156]	; (8003a9c <MX_GPIO_Init+0x130>)
 80039fe:	f7fd f829 	bl	8000a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 8003a02:	2200      	movs	r2, #0
 8003a04:	2110      	movs	r1, #16
 8003a06:	4826      	ldr	r0, [pc, #152]	; (8003aa0 <MX_GPIO_Init+0x134>)
 8003a08:	f7fd f824 	bl	8000a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_RESET);
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	2110      	movs	r1, #16
 8003a10:	4824      	ldr	r0, [pc, #144]	; (8003aa4 <MX_GPIO_Init+0x138>)
 8003a12:	f7fd f81f 	bl	8000a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_SOCKET_GPIO_Port, LED_SOCKET_Pin, GPIO_PIN_RESET);
 8003a16:	2200      	movs	r2, #0
 8003a18:	2108      	movs	r1, #8
 8003a1a:	4823      	ldr	r0, [pc, #140]	; (8003aa8 <MX_GPIO_Init+0x13c>)
 8003a1c:	f7fd f81a 	bl	8000a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WATCHDOG_Pin */
  GPIO_InitStruct.Pin = WATCHDOG_Pin;
 8003a20:	2304      	movs	r3, #4
 8003a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a24:	2301      	movs	r3, #1
 8003a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(WATCHDOG_GPIO_Port, &GPIO_InitStruct);
 8003a30:	f107 0318 	add.w	r3, r7, #24
 8003a34:	4619      	mov	r1, r3
 8003a36:	4819      	ldr	r0, [pc, #100]	; (8003a9c <MX_GPIO_Init+0x130>)
 8003a38:	f7fc fe9e 	bl	8000778 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_CS_Pin;
 8003a3c:	2310      	movs	r3, #16
 8003a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a40:	2301      	movs	r3, #1
 8003a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a48:	2302      	movs	r3, #2
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(W5500_CS_GPIO_Port, &GPIO_InitStruct);
 8003a4c:	f107 0318 	add.w	r3, r7, #24
 8003a50:	4619      	mov	r1, r3
 8003a52:	4813      	ldr	r0, [pc, #76]	; (8003aa0 <MX_GPIO_Init+0x134>)
 8003a54:	f7fc fe90 	bl	8000778 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_RST_Pin */
  GPIO_InitStruct.Pin = W5500_RST_Pin;
 8003a58:	2310      	movs	r3, #16
 8003a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a64:	2302      	movs	r3, #2
 8003a66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(W5500_RST_GPIO_Port, &GPIO_InitStruct);
 8003a68:	f107 0318 	add.w	r3, r7, #24
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	480d      	ldr	r0, [pc, #52]	; (8003aa4 <MX_GPIO_Init+0x138>)
 8003a70:	f7fc fe82 	bl	8000778 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_SOCKET_Pin */
  GPIO_InitStruct.Pin = LED_SOCKET_Pin;
 8003a74:	2308      	movs	r3, #8
 8003a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a80:	2302      	movs	r3, #2
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED_SOCKET_GPIO_Port, &GPIO_InitStruct);
 8003a84:	f107 0318 	add.w	r3, r7, #24
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4807      	ldr	r0, [pc, #28]	; (8003aa8 <MX_GPIO_Init+0x13c>)
 8003a8c:	f7fc fe74 	bl	8000778 <HAL_GPIO_Init>

}
 8003a90:	bf00      	nop
 8003a92:	3728      	adds	r7, #40	; 0x28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	40011800 	.word	0x40011800
 8003aa0:	40010800 	.word	0x40010800
 8003aa4:	40011000 	.word	0x40011000
 8003aa8:	40011400 	.word	0x40011400

08003aac <myLoopback_tcps>:

/* USER CODE BEGIN 4 */
int32_t myLoopback_tcps(uint8_t sn, uint8_t* buf, uint16_t port)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	6039      	str	r1, [r7, #0]
 8003ab6:	71fb      	strb	r3, [r7, #7]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	80bb      	strh	r3, [r7, #4]
   int32_t ret;
   uint16_t size = 0, sentsize=0;
 8003abc:	2300      	movs	r3, #0
 8003abe:	81fb      	strh	r3, [r7, #14]
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	81bb      	strh	r3, [r7, #12]

   switch(getSn_SR(sn))
 8003ac4:	79fb      	ldrb	r3, [r7, #7]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	3301      	adds	r3, #1
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fe fb07 	bl	80020e4 <WIZCHIP_READ>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b1c      	cmp	r3, #28
 8003ada:	f200 80de 	bhi.w	8003c9a <myLoopback_tcps+0x1ee>
 8003ade:	a201      	add	r2, pc, #4	; (adr r2, 8003ae4 <myLoopback_tcps+0x38>)
 8003ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae4:	08003c69 	.word	0x08003c69
 8003ae8:	08003c9b 	.word	0x08003c9b
 8003aec:	08003c9b 	.word	0x08003c9b
 8003af0:	08003c9b 	.word	0x08003c9b
 8003af4:	08003c9b 	.word	0x08003c9b
 8003af8:	08003c9b 	.word	0x08003c9b
 8003afc:	08003c9b 	.word	0x08003c9b
 8003b00:	08003c9b 	.word	0x08003c9b
 8003b04:	08003c9b 	.word	0x08003c9b
 8003b08:	08003c9b 	.word	0x08003c9b
 8003b0c:	08003c9b 	.word	0x08003c9b
 8003b10:	08003c9b 	.word	0x08003c9b
 8003b14:	08003c9b 	.word	0x08003c9b
 8003b18:	08003c9b 	.word	0x08003c9b
 8003b1c:	08003c9b 	.word	0x08003c9b
 8003b20:	08003c9b 	.word	0x08003c9b
 8003b24:	08003c9b 	.word	0x08003c9b
 8003b28:	08003c9b 	.word	0x08003c9b
 8003b2c:	08003c9b 	.word	0x08003c9b
 8003b30:	08003c47 	.word	0x08003c47
 8003b34:	08003c9b 	.word	0x08003c9b
 8003b38:	08003c9b 	.word	0x08003c9b
 8003b3c:	08003c9b 	.word	0x08003c9b
 8003b40:	08003b59 	.word	0x08003b59
 8003b44:	08003c9b 	.word	0x08003c9b
 8003b48:	08003c9b 	.word	0x08003c9b
 8003b4c:	08003c9b 	.word	0x08003c9b
 8003b50:	08003c9b 	.word	0x08003c9b
 8003b54:	08003c1b 	.word	0x08003c1b
   {
      case SOCK_ESTABLISHED :
         if(getSn_IR(sn) & Sn_IR_CON)
 8003b58:	79fb      	ldrb	r3, [r7, #7]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fe fabd 	bl	80020e4 <WIZCHIP_READ>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00e      	beq.n	8003b92 <myLoopback_tcps+0xe6>
         {
            //myprintf("%d:Connected\r\n",sn);
            printf("%d:Connected\r\n",sn);
 8003b74:	79fb      	ldrb	r3, [r7, #7]
 8003b76:	4619      	mov	r1, r3
 8003b78:	484d      	ldr	r0, [pc, #308]	; (8003cb0 <myLoopback_tcps+0x204>)
 8003b7a:	f000 fc6f 	bl	800445c <iprintf>

            setSn_IR(sn,Sn_IR_CON);
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	3301      	adds	r3, #1
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fe faf5 	bl	800217c <WIZCHIP_WRITE>
         }
         if((size = getSn_RX_RSR(sn)) > 0)
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7fe fc4a 	bl	800242e <getSn_RX_RSR>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	81fb      	strh	r3, [r7, #14]
 8003b9e:	89fb      	ldrh	r3, [r7, #14]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d07c      	beq.n	8003c9e <myLoopback_tcps+0x1f2>
         {
            if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 8003ba4:	89fb      	ldrh	r3, [r7, #14]
 8003ba6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003baa:	d902      	bls.n	8003bb2 <myLoopback_tcps+0x106>
 8003bac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003bb0:	81fb      	strh	r3, [r7, #14]
            ret = recv(sn,buf,size);
 8003bb2:	89fa      	ldrh	r2, [r7, #14]
 8003bb4:	79fb      	ldrb	r3, [r7, #7]
 8003bb6:	6839      	ldr	r1, [r7, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff f887 	bl	8002ccc <recv>
 8003bbe:	60b8      	str	r0, [r7, #8]
            if(ret <= 0) return ret;
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	dc01      	bgt.n	8003bca <myLoopback_tcps+0x11e>
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	e06d      	b.n	8003ca6 <myLoopback_tcps+0x1fa>

            //printf("%d:Receive message\r\n",sn);
            send(sn, buf2, sizeof(buf2));
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	2227      	movs	r2, #39	; 0x27
 8003bce:	4939      	ldr	r1, [pc, #228]	; (8003cb4 <myLoopback_tcps+0x208>)
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fe ff81 	bl	8002ad8 <send>

            sentsize = 0;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	81bb      	strh	r3, [r7, #12]
            while(size != sentsize)
 8003bda:	e019      	b.n	8003c10 <myLoopback_tcps+0x164>
            {
               ret = send(sn,buf+sentsize,size-sentsize);
 8003bdc:	89bb      	ldrh	r3, [r7, #12]
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	18d1      	adds	r1, r2, r3
 8003be2:	89fa      	ldrh	r2, [r7, #14]
 8003be4:	89bb      	ldrh	r3, [r7, #12]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	79fb      	ldrb	r3, [r7, #7]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7fe ff73 	bl	8002ad8 <send>
 8003bf2:	60b8      	str	r0, [r7, #8]
               if(ret < 0)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	da05      	bge.n	8003c06 <myLoopback_tcps+0x15a>
               {
                  close(sn);
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fe fe2d 	bl	800285c <close>
                  return ret;
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	e04f      	b.n	8003ca6 <myLoopback_tcps+0x1fa>
               }
               sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	89bb      	ldrh	r3, [r7, #12]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	81bb      	strh	r3, [r7, #12]
            while(size != sentsize)
 8003c10:	89fa      	ldrh	r2, [r7, #14]
 8003c12:	89bb      	ldrh	r3, [r7, #12]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d1e1      	bne.n	8003bdc <myLoopback_tcps+0x130>
            }
         }
         break;
 8003c18:	e041      	b.n	8003c9e <myLoopback_tcps+0x1f2>

      case SOCK_CLOSE_WAIT :
         //myprintf("%d:CloseWait\r\n",sn);
         printf("%d:CloseWait\r\n",sn);
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4826      	ldr	r0, [pc, #152]	; (8003cb8 <myLoopback_tcps+0x20c>)
 8003c20:	f000 fc1c 	bl	800445c <iprintf>

         if((ret=disconnect(sn)) != SOCK_OK) return ret;
 8003c24:	79fb      	ldrb	r3, [r7, #7]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fe fee0 	bl	80029ec <disconnect>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	60bb      	str	r3, [r7, #8]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d001      	beq.n	8003c3a <myLoopback_tcps+0x18e>
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	e035      	b.n	8003ca6 <myLoopback_tcps+0x1fa>
         //myprintf("%d:Closed\r\n",sn);
         printf("%d:Closed\r\n",sn);
 8003c3a:	79fb      	ldrb	r3, [r7, #7]
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	481f      	ldr	r0, [pc, #124]	; (8003cbc <myLoopback_tcps+0x210>)
 8003c40:	f000 fc0c 	bl	800445c <iprintf>
         break;
 8003c44:	e02e      	b.n	8003ca4 <myLoopback_tcps+0x1f8>

      case SOCK_INIT :
          //myprintf("%d:Listen, port [%d]\r\n",sn, port);
         printf("%d:Listen, port [%d]\r\n",sn, port);
 8003c46:	79fb      	ldrb	r3, [r7, #7]
 8003c48:	88ba      	ldrh	r2, [r7, #4]
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	481c      	ldr	r0, [pc, #112]	; (8003cc0 <myLoopback_tcps+0x214>)
 8003c4e:	f000 fc05 	bl	800445c <iprintf>

         if( (ret = listen(sn)) != SOCK_OK) return ret;
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fe fe6f 	bl	8002938 <listen>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d01e      	beq.n	8003ca2 <myLoopback_tcps+0x1f6>
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	e01e      	b.n	8003ca6 <myLoopback_tcps+0x1fa>
         break;

      case SOCK_CLOSED:
         //myprintf("%d:LBTStart\r\n",sn);
         printf("%d:LBTStart\r\n",sn);
 8003c68:	79fb      	ldrb	r3, [r7, #7]
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4815      	ldr	r0, [pc, #84]	; (8003cc4 <myLoopback_tcps+0x218>)
 8003c6e:	f000 fbf5 	bl	800445c <iprintf>

         if((ret=socket(sn,Sn_MR_TCP,port,0x00)) != sn)
 8003c72:	88ba      	ldrh	r2, [r7, #4]
 8003c74:	79f8      	ldrb	r0, [r7, #7]
 8003c76:	2300      	movs	r3, #0
 8003c78:	2101      	movs	r1, #1
 8003c7a:	f7fe fcdb 	bl	8002634 <socket>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	79fb      	ldrb	r3, [r7, #7]
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d001      	beq.n	8003c8e <myLoopback_tcps+0x1e2>
            return ret;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	e00b      	b.n	8003ca6 <myLoopback_tcps+0x1fa>
         //myprintf("%d:Opened\r\n",sn);
         printf("%d:Opened\r\n",sn);
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	4619      	mov	r1, r3
 8003c92:	480d      	ldr	r0, [pc, #52]	; (8003cc8 <myLoopback_tcps+0x21c>)
 8003c94:	f000 fbe2 	bl	800445c <iprintf>
         break;
 8003c98:	e004      	b.n	8003ca4 <myLoopback_tcps+0x1f8>

      default:
         break;
 8003c9a:	bf00      	nop
 8003c9c:	e002      	b.n	8003ca4 <myLoopback_tcps+0x1f8>
         break;
 8003c9e:	bf00      	nop
 8003ca0:	e000      	b.n	8003ca4 <myLoopback_tcps+0x1f8>
         break;
 8003ca2:	bf00      	nop
   }
   return 1;
 8003ca4:	2301      	movs	r3, #1
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	08005170 	.word	0x08005170
 8003cb4:	20000034 	.word	0x20000034
 8003cb8:	08005180 	.word	0x08005180
 8003cbc:	08005190 	.word	0x08005190
 8003cc0:	0800519c 	.word	0x0800519c
 8003cc4:	080051b4 	.word	0x080051b4
 8003cc8:	080051c4 	.word	0x080051c4

08003ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003cd0:	bf00      	nop
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003cde:	4a15      	ldr	r2, [pc, #84]	; (8003d34 <HAL_MspInit+0x5c>)
 8003ce0:	4b14      	ldr	r3, [pc, #80]	; (8003d34 <HAL_MspInit+0x5c>)
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f043 0301 	orr.w	r3, r3, #1
 8003ce8:	6193      	str	r3, [r2, #24]
 8003cea:	4b12      	ldr	r3, [pc, #72]	; (8003d34 <HAL_MspInit+0x5c>)
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	60bb      	str	r3, [r7, #8]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cf6:	4a0f      	ldr	r2, [pc, #60]	; (8003d34 <HAL_MspInit+0x5c>)
 8003cf8:	4b0e      	ldr	r3, [pc, #56]	; (8003d34 <HAL_MspInit+0x5c>)
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d00:	61d3      	str	r3, [r2, #28]
 8003d02:	4b0c      	ldr	r3, [pc, #48]	; (8003d34 <HAL_MspInit+0x5c>)
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0a:	607b      	str	r3, [r7, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003d0e:	4b0a      	ldr	r3, [pc, #40]	; (8003d38 <HAL_MspInit+0x60>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	4a04      	ldr	r2, [pc, #16]	; (8003d38 <HAL_MspInit+0x60>)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d2a:	bf00      	nop
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr
 8003d34:	40021000 	.word	0x40021000
 8003d38:	40010000 	.word	0x40010000

08003d3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08a      	sub	sp, #40	; 0x28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d44:	f107 0318 	add.w	r3, r7, #24
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	605a      	str	r2, [r3, #4]
 8003d4e:	609a      	str	r2, [r3, #8]
 8003d50:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a35      	ldr	r2, [pc, #212]	; (8003e2c <HAL_SPI_MspInit+0xf0>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d130      	bne.n	8003dbe <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d5c:	4a34      	ldr	r2, [pc, #208]	; (8003e30 <HAL_SPI_MspInit+0xf4>)
 8003d5e:	4b34      	ldr	r3, [pc, #208]	; (8003e30 <HAL_SPI_MspInit+0xf4>)
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d66:	6193      	str	r3, [r2, #24]
 8003d68:	4b31      	ldr	r3, [pc, #196]	; (8003e30 <HAL_SPI_MspInit+0xf4>)
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d74:	4a2e      	ldr	r2, [pc, #184]	; (8003e30 <HAL_SPI_MspInit+0xf4>)
 8003d76:	4b2e      	ldr	r3, [pc, #184]	; (8003e30 <HAL_SPI_MspInit+0xf4>)
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	f043 0304 	orr.w	r3, r3, #4
 8003d7e:	6193      	str	r3, [r2, #24]
 8003d80:	4b2b      	ldr	r3, [pc, #172]	; (8003e30 <HAL_SPI_MspInit+0xf4>)
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	613b      	str	r3, [r7, #16]
 8003d8a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
 8003d8c:	23a0      	movs	r3, #160	; 0xa0
 8003d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d90:	2302      	movs	r3, #2
 8003d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d94:	2303      	movs	r3, #3
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d98:	f107 0318 	add.w	r3, r7, #24
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4825      	ldr	r0, [pc, #148]	; (8003e34 <HAL_SPI_MspInit+0xf8>)
 8003da0:	f7fc fcea 	bl	8000778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8003da4:	2340      	movs	r3, #64	; 0x40
 8003da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003da8:	2300      	movs	r3, #0
 8003daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dac:	2300      	movs	r3, #0
 8003dae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8003db0:	f107 0318 	add.w	r3, r7, #24
 8003db4:	4619      	mov	r1, r3
 8003db6:	481f      	ldr	r0, [pc, #124]	; (8003e34 <HAL_SPI_MspInit+0xf8>)
 8003db8:	f7fc fcde 	bl	8000778 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003dbc:	e031      	b.n	8003e22 <HAL_SPI_MspInit+0xe6>
  else if(hspi->Instance==SPI2)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a1d      	ldr	r2, [pc, #116]	; (8003e38 <HAL_SPI_MspInit+0xfc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d12c      	bne.n	8003e22 <HAL_SPI_MspInit+0xe6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003dc8:	4a19      	ldr	r2, [pc, #100]	; (8003e30 <HAL_SPI_MspInit+0xf4>)
 8003dca:	4b19      	ldr	r3, [pc, #100]	; (8003e30 <HAL_SPI_MspInit+0xf4>)
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dd2:	61d3      	str	r3, [r2, #28]
 8003dd4:	4b16      	ldr	r3, [pc, #88]	; (8003e30 <HAL_SPI_MspInit+0xf4>)
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003de0:	4a13      	ldr	r2, [pc, #76]	; (8003e30 <HAL_SPI_MspInit+0xf4>)
 8003de2:	4b13      	ldr	r3, [pc, #76]	; (8003e30 <HAL_SPI_MspInit+0xf4>)
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	f043 0308 	orr.w	r3, r3, #8
 8003dea:	6193      	str	r3, [r2, #24]
 8003dec:	4b10      	ldr	r3, [pc, #64]	; (8003e30 <HAL_SPI_MspInit+0xf4>)
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	f003 0308 	and.w	r3, r3, #8
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003df8:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e02:	2300      	movs	r3, #0
 8003e04:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e06:	f107 0318 	add.w	r3, r7, #24
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	480b      	ldr	r0, [pc, #44]	; (8003e3c <HAL_SPI_MspInit+0x100>)
 8003e0e:	f7fc fcb3 	bl	8000778 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003e12:	2200      	movs	r2, #0
 8003e14:	2100      	movs	r1, #0
 8003e16:	2024      	movs	r0, #36	; 0x24
 8003e18:	f7fc fb59 	bl	80004ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003e1c:	2024      	movs	r0, #36	; 0x24
 8003e1e:	f7fc fb72 	bl	8000506 <HAL_NVIC_EnableIRQ>
}
 8003e22:	bf00      	nop
 8003e24:	3728      	adds	r7, #40	; 0x28
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40013000 	.word	0x40013000
 8003e30:	40021000 	.word	0x40021000
 8003e34:	40010800 	.word	0x40010800
 8003e38:	40003800 	.word	0x40003800
 8003e3c:	40010c00 	.word	0x40010c00

08003e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e48:	f107 0310 	add.w	r3, r7, #16
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	605a      	str	r2, [r3, #4]
 8003e52:	609a      	str	r2, [r3, #8]
 8003e54:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a1b      	ldr	r2, [pc, #108]	; (8003ec8 <HAL_UART_MspInit+0x88>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d12f      	bne.n	8003ec0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e60:	4a1a      	ldr	r2, [pc, #104]	; (8003ecc <HAL_UART_MspInit+0x8c>)
 8003e62:	4b1a      	ldr	r3, [pc, #104]	; (8003ecc <HAL_UART_MspInit+0x8c>)
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e6a:	61d3      	str	r3, [r2, #28]
 8003e6c:	4b17      	ldr	r3, [pc, #92]	; (8003ecc <HAL_UART_MspInit+0x8c>)
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e78:	4a14      	ldr	r2, [pc, #80]	; (8003ecc <HAL_UART_MspInit+0x8c>)
 8003e7a:	4b14      	ldr	r3, [pc, #80]	; (8003ecc <HAL_UART_MspInit+0x8c>)
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	f043 0304 	orr.w	r3, r3, #4
 8003e82:	6193      	str	r3, [r2, #24]
 8003e84:	4b11      	ldr	r3, [pc, #68]	; (8003ecc <HAL_UART_MspInit+0x8c>)
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	60bb      	str	r3, [r7, #8]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e90:	2304      	movs	r3, #4
 8003e92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e94:	2302      	movs	r3, #2
 8003e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e9c:	f107 0310 	add.w	r3, r7, #16
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	480b      	ldr	r0, [pc, #44]	; (8003ed0 <HAL_UART_MspInit+0x90>)
 8003ea4:	f7fc fc68 	bl	8000778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003ea8:	2308      	movs	r3, #8
 8003eaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eb4:	f107 0310 	add.w	r3, r7, #16
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4805      	ldr	r0, [pc, #20]	; (8003ed0 <HAL_UART_MspInit+0x90>)
 8003ebc:	f7fc fc5c 	bl	8000778 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003ec0:	bf00      	nop
 8003ec2:	3720      	adds	r7, #32
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40004400 	.word	0x40004400
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	40010800 	.word	0x40010800

08003ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003ed8:	bf00      	nop
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr

08003ee0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ee4:	e7fe      	b.n	8003ee4 <HardFault_Handler+0x4>

08003ee6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003eea:	e7fe      	b.n	8003eea <MemManage_Handler+0x4>

08003eec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ef0:	e7fe      	b.n	8003ef0 <BusFault_Handler+0x4>

08003ef2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ef6:	e7fe      	b.n	8003ef6 <UsageFault_Handler+0x4>

08003ef8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003efc:	bf00      	nop
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr

08003f04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f08:	bf00      	nop
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr

08003f10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f14:	bf00      	nop
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bc80      	pop	{r7}
 8003f1a:	4770      	bx	lr

08003f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f20:	f7fc f9c6 	bl	80002b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f24:	bf00      	nop
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  //HAL_GPIO_TogglePin(LED_SOCKET_GPIO_Port, LED_SOCKET_Pin);
  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003f2c:	4810      	ldr	r0, [pc, #64]	; (8003f70 <SPI2_IRQHandler+0x48>)
 8003f2e:	f7fd fcb7 	bl	80018a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */
  //if(SPI2->DR == 0xFE)
  //  Rx[0] = SPI2->DR;
  //else
  Rx[buf_index] = SPI2->DR;   // Read from RXFIFO
 8003f32:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <SPI2_IRQHandler+0x4c>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	461a      	mov	r2, r3
 8003f38:	4b0f      	ldr	r3, [pc, #60]	; (8003f78 <SPI2_IRQHandler+0x50>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	b2d9      	uxtb	r1, r3
 8003f3e:	4b0f      	ldr	r3, [pc, #60]	; (8003f7c <SPI2_IRQHandler+0x54>)
 8003f40:	5499      	strb	r1, [r3, r2]

  SPI2->DR = Tx[buf_index+1]; // Write to TXFIFO
 8003f42:	4a0d      	ldr	r2, [pc, #52]	; (8003f78 <SPI2_IRQHandler+0x50>)
 8003f44:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <SPI2_IRQHandler+0x4c>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	490d      	ldr	r1, [pc, #52]	; (8003f80 <SPI2_IRQHandler+0x58>)
 8003f4c:	5ccb      	ldrb	r3, [r1, r3]
 8003f4e:	60d3      	str	r3, [r2, #12]

  if(buf_index < 5)
 8003f50:	4b08      	ldr	r3, [pc, #32]	; (8003f74 <SPI2_IRQHandler+0x4c>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b04      	cmp	r3, #4
 8003f56:	d806      	bhi.n	8003f66 <SPI2_IRQHandler+0x3e>
  {
    buf_index++;
 8003f58:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <SPI2_IRQHandler+0x4c>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	4b04      	ldr	r3, [pc, #16]	; (8003f74 <SPI2_IRQHandler+0x4c>)
 8003f62:	701a      	strb	r2, [r3, #0]
  else
  {
    buf_index = 0;
  }
  /* USER CODE END SPI2_IRQn 1 */
}
 8003f64:	e002      	b.n	8003f6c <SPI2_IRQHandler+0x44>
    buf_index = 0;
 8003f66:	4b03      	ldr	r3, [pc, #12]	; (8003f74 <SPI2_IRQHandler+0x4c>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	701a      	strb	r2, [r3, #0]
}
 8003f6c:	bf00      	nop
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	20000140 	.word	0x20000140
 8003f74:	20000121 	.word	0x20000121
 8003f78:	40003800 	.word	0x40003800
 8003f7c:	20000124 	.word	0x20000124
 8003f80:	20000074 	.word	0x20000074

08003f84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f84:	b590      	push	{r4, r7, lr}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f90:	2300      	movs	r3, #0
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	e00a      	b.n	8003fac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003f96:	68bc      	ldr	r4, [r7, #8]
 8003f98:	1c63      	adds	r3, r4, #1
 8003f9a:	60bb      	str	r3, [r7, #8]
 8003f9c:	f3af 8000 	nop.w
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	dbf0      	blt.n	8003f96 <_read+0x12>
	}

return len;
 8003fb4:	687b      	ldr	r3, [r7, #4]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	371c      	adds	r7, #28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd90      	pop	{r4, r7, pc}
	...

08003fc0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003fc8:	4b11      	ldr	r3, [pc, #68]	; (8004010 <_sbrk+0x50>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d102      	bne.n	8003fd6 <_sbrk+0x16>
		heap_end = &end;
 8003fd0:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <_sbrk+0x50>)
 8003fd2:	4a10      	ldr	r2, [pc, #64]	; (8004014 <_sbrk+0x54>)
 8003fd4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003fd6:	4b0e      	ldr	r3, [pc, #56]	; (8004010 <_sbrk+0x50>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003fdc:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <_sbrk+0x50>)
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	466a      	mov	r2, sp
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d907      	bls.n	8003ffa <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003fea:	f000 f95b 	bl	80042a4 <__errno>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	230c      	movs	r3, #12
 8003ff2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff8:	e006      	b.n	8004008 <_sbrk+0x48>
	}

	heap_end += incr;
 8003ffa:	4b05      	ldr	r3, [pc, #20]	; (8004010 <_sbrk+0x50>)
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4413      	add	r3, r2
 8004002:	4a03      	ldr	r2, [pc, #12]	; (8004010 <_sbrk+0x50>)
 8004004:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004006:	68fb      	ldr	r3, [r7, #12]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	2000012c 	.word	0x2000012c
 8004014:	20000a34 	.word	0x20000a34

08004018 <_close>:

int _close(int file)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
	return -1;
 8004020:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004024:	4618      	mov	r0, r3
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	bc80      	pop	{r7}
 800402c:	4770      	bx	lr

0800402e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800403e:	605a      	str	r2, [r3, #4]
	return 0;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr

0800404c <_isatty>:

int _isatty(int file)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
	return 1;
 8004054:	2301      	movs	r3, #1
}
 8004056:	4618      	mov	r0, r3
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr

08004060 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
	return 0;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr

08004078 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800407c:	4a15      	ldr	r2, [pc, #84]	; (80040d4 <SystemInit+0x5c>)
 800407e:	4b15      	ldr	r3, [pc, #84]	; (80040d4 <SystemInit+0x5c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f043 0301 	orr.w	r3, r3, #1
 8004086:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004088:	4912      	ldr	r1, [pc, #72]	; (80040d4 <SystemInit+0x5c>)
 800408a:	4b12      	ldr	r3, [pc, #72]	; (80040d4 <SystemInit+0x5c>)
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	4b12      	ldr	r3, [pc, #72]	; (80040d8 <SystemInit+0x60>)
 8004090:	4013      	ands	r3, r2
 8004092:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004094:	4a0f      	ldr	r2, [pc, #60]	; (80040d4 <SystemInit+0x5c>)
 8004096:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <SystemInit+0x5c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800409e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80040a4:	4a0b      	ldr	r2, [pc, #44]	; (80040d4 <SystemInit+0x5c>)
 80040a6:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <SystemInit+0x5c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ae:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80040b0:	4a08      	ldr	r2, [pc, #32]	; (80040d4 <SystemInit+0x5c>)
 80040b2:	4b08      	ldr	r3, [pc, #32]	; (80040d4 <SystemInit+0x5c>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80040ba:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80040bc:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <SystemInit+0x5c>)
 80040be:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80040c2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80040c4:	4b05      	ldr	r3, [pc, #20]	; (80040dc <SystemInit+0x64>)
 80040c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80040ca:	609a      	str	r2, [r3, #8]
#endif 
}
 80040cc:	bf00      	nop
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr
 80040d4:	40021000 	.word	0x40021000
 80040d8:	f8ff0000 	.word	0xf8ff0000
 80040dc:	e000ed00 	.word	0xe000ed00

080040e0 <W5500_dataRead>:

static uint32_t randomKey;


uint8_t W5500_dataRead() // SPI ������ ����
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af02      	add	r7, sp, #8
	uint8_t Dummy = 0xFF;
 80040e6:	23ff      	movs	r3, #255	; 0xff
 80040e8:	71fb      	strb	r3, [r7, #7]
	uint8_t RxData;
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80040ea:	bf00      	nop
 80040ec:	4809      	ldr	r0, [pc, #36]	; (8004114 <W5500_dataRead+0x34>)
 80040ee:	f7fd fca6 	bl	8001a3e <HAL_SPI_GetState>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d1f9      	bne.n	80040ec <W5500_dataRead+0xc>
	HAL_SPI_TransmitReceive(&hspi1,&Dummy,&RxData,1,10); // SPI�� ���Ž� ���̵����͸� ������� Ŭ���� �����ǰ� �����̺갡 ���� �ش�.
 80040f8:	1dba      	adds	r2, r7, #6
 80040fa:	1df9      	adds	r1, r7, #7
 80040fc:	230a      	movs	r3, #10
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	2301      	movs	r3, #1
 8004102:	4804      	ldr	r0, [pc, #16]	; (8004114 <W5500_dataRead+0x34>)
 8004104:	f7fd fa2d 	bl	8001562 <HAL_SPI_TransmitReceive>
	return RxData;
 8004108:	79bb      	ldrb	r3, [r7, #6]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20000998 	.word	0x20000998

08004118 <W5500_dataSend>:
void W5500_dataSend(uint8_t Txdata) // SPI ������ �۽�
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	4603      	mov	r3, r0
 8004120:	71fb      	strb	r3, [r7, #7]
	 while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8004122:	bf00      	nop
 8004124:	4807      	ldr	r0, [pc, #28]	; (8004144 <W5500_dataSend+0x2c>)
 8004126:	f7fd fc8a 	bl	8001a3e <HAL_SPI_GetState>
 800412a:	4603      	mov	r3, r0
 800412c:	2b01      	cmp	r3, #1
 800412e:	d1f9      	bne.n	8004124 <W5500_dataSend+0xc>
	 HAL_SPI_Transmit(&hspi1, (uint8_t *) &Txdata, 1, 10);
 8004130:	1df9      	adds	r1, r7, #7
 8004132:	230a      	movs	r3, #10
 8004134:	2201      	movs	r2, #1
 8004136:	4803      	ldr	r0, [pc, #12]	; (8004144 <W5500_dataSend+0x2c>)
 8004138:	f7fd f8d8 	bl	80012ec <HAL_SPI_Transmit>
}
 800413c:	bf00      	nop
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	20000998 	.word	0x20000998

08004148 <W5500_CS_select>:

void W5500_CS_select()
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
	//GPIOA->BRR = GPIO_PIN_3; // CS���� Low
  GPIOA->BRR = GPIO_PIN_4;
 800414c:	4b03      	ldr	r3, [pc, #12]	; (800415c <W5500_CS_select+0x14>)
 800414e:	2210      	movs	r2, #16
 8004150:	615a      	str	r2, [r3, #20]
}
 8004152:	bf00      	nop
 8004154:	46bd      	mov	sp, r7
 8004156:	bc80      	pop	{r7}
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	40010800 	.word	0x40010800

08004160 <W5500_CS_deselect>:

void W5500_CS_deselect()
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
	//GPIOA->BSRR = GPIO_PIN_3; // CS���� High
  GPIOA->BSRR = GPIO_PIN_4;
 8004164:	4b03      	ldr	r3, [pc, #12]	; (8004174 <W5500_CS_deselect+0x14>)
 8004166:	2210      	movs	r2, #16
 8004168:	611a      	str	r2, [r3, #16]
}
 800416a:	bf00      	nop
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	40010800 	.word	0x40010800

08004178 <isLinked>:

int isLinked(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
	return (getPHYCFGR() & PHYCFGR_LNK_ON);
 800417c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004180:	f7fd ffb0 	bl	80020e4 <WIZCHIP_READ>
 8004184:	4603      	mov	r3, r0
 8004186:	f003 0301 	and.w	r3, r3, #1
}
 800418a:	4618      	mov	r0, r3
 800418c:	bd80      	pop	{r7, pc}
	...

08004190 <W5500_hw_Rst>:

void W5500_hw_Rst(void) // �ϵ���� ����
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
  uint32_t tempTick;
  //GPIOA->BRR = GPIO_PIN_4; // RST ���� Low�� ����
  GPIOC->BRR = GPIO_PIN_4;
 8004196:	4b0a      	ldr	r3, [pc, #40]	; (80041c0 <W5500_hw_Rst+0x30>)
 8004198:	2210      	movs	r2, #16
 800419a:	615a      	str	r2, [r3, #20]

  tempTick = HAL_GetTick();
 800419c:	f7fc f89a 	bl	80002d4 <HAL_GetTick>
 80041a0:	6078      	str	r0, [r7, #4]
  while((HAL_GetTick() - tempTick) < 1 ); // 1ms �� ������
 80041a2:	bf00      	nop
 80041a4:	f7fc f896 	bl	80002d4 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d0f9      	beq.n	80041a4 <W5500_hw_Rst+0x14>

  //GPIOA->BSRR = GPIO_PIN_4; // RST ���� High ��.
  GPIOC->BSRR = GPIO_PIN_4;
 80041b0:	4b03      	ldr	r3, [pc, #12]	; (80041c0 <W5500_hw_Rst+0x30>)
 80041b2:	2210      	movs	r2, #16
 80041b4:	611a      	str	r2, [r3, #16]
}
 80041b6:	bf00      	nop
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	40011000 	.word	0x40011000

080041c4 <W5500_init>:
{
	wizchip_getnetinfo(&gWIZNETINFO); // W5500 ���� ���� ��������
}

uint8_t W5500_init() // �ʱ�ȭ �Լ�
{
 80041c4:	b590      	push	{r4, r7, lr}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
	uint8_t W5500SockBufSize[2][8] = {{2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 80041ca:	4b1c      	ldr	r3, [pc, #112]	; (800423c <W5500_init+0x78>)
 80041cc:	1d3c      	adds	r4, r7, #4
 80041ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t tickStart;

	reg_wizchip_spi_cbfunc(W5500_dataRead, W5500_dataSend); // SPI ��� ����, �۽� ��ɵ�� (�ݹ��Լ�)
 80041d4:	491a      	ldr	r1, [pc, #104]	; (8004240 <W5500_init+0x7c>)
 80041d6:	481b      	ldr	r0, [pc, #108]	; (8004244 <W5500_init+0x80>)
 80041d8:	f7fe fe96 	bl	8002f08 <reg_wizchip_spi_cbfunc>
	reg_wizchip_cs_cbfunc(W5500_CS_select, W5500_CS_deselect); // CS �� ���� ��ɵ�� (�ݹ��Լ�)
 80041dc:	491a      	ldr	r1, [pc, #104]	; (8004248 <W5500_init+0x84>)
 80041de:	481b      	ldr	r0, [pc, #108]	; (800424c <W5500_init+0x88>)
 80041e0:	f7fe fe6e 	bl	8002ec0 <reg_wizchip_cs_cbfunc>

	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)W5500SockBufSize) == -1)
 80041e4:	1d3b      	adds	r3, r7, #4
 80041e6:	4619      	mov	r1, r3
 80041e8:	2001      	movs	r0, #1
 80041ea:	f7fe feb7 	bl	8002f5c <ctlwizchip>
 80041ee:	4603      	mov	r3, r0
 80041f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f4:	d101      	bne.n	80041fa <W5500_init+0x36>
		{
			//printf("W5500 initialized fail.\r\n");
			return -1; // �ʱ�ȭ ����
 80041f6:	23ff      	movs	r3, #255	; 0xff
 80041f8:	e01b      	b.n	8004232 <W5500_init+0x6e>
		}
		/*Set network information by default*/
		wizchip_setnetinfo(&gWIZNETINFO);
 80041fa:	4815      	ldr	r0, [pc, #84]	; (8004250 <W5500_init+0x8c>)
 80041fc:	f7ff fa14 	bl	8003628 <wizchip_setnetinfo>
		tickStart = HAL_GetTick();
 8004200:	f7fc f868 	bl	80002d4 <HAL_GetTick>
 8004204:	6178      	str	r0, [r7, #20]
		do{ // PHY ����üũ
			randomKey++;
 8004206:	4b13      	ldr	r3, [pc, #76]	; (8004254 <W5500_init+0x90>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	3301      	adds	r3, #1
 800420c:	4a11      	ldr	r2, [pc, #68]	; (8004254 <W5500_init+0x90>)
 800420e:	6013      	str	r3, [r2, #0]
			if((HAL_GetTick() - tickStart) > 3000 )
 8004210:	f7fc f860 	bl	80002d4 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800421e:	4293      	cmp	r3, r2
 8004220:	d901      	bls.n	8004226 <W5500_init+0x62>
			{
				//printf("Ethernet Link timeout.\r\n");
				return -1; // �̴��� Ÿ�Ӿƿ� ����
 8004222:	23ff      	movs	r3, #255	; 0xff
 8004224:	e005      	b.n	8004232 <W5500_init+0x6e>
			}
		}while(!isLinked());
 8004226:	f7ff ffa7 	bl	8004178 <isLinked>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0ea      	beq.n	8004206 <W5500_init+0x42>
		return 1;
 8004230:	2301      	movs	r3, #1
}
 8004232:	4618      	mov	r0, r3
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	bd90      	pop	{r4, r7, pc}
 800423a:	bf00      	nop
 800423c:	080051d0 	.word	0x080051d0
 8004240:	08004119 	.word	0x08004119
 8004244:	080040e1 	.word	0x080040e1
 8004248:	08004161 	.word	0x08004161
 800424c:	08004149 	.word	0x08004149
 8004250:	2000005c 	.word	0x2000005c
 8004254:	20000130 	.word	0x20000130

08004258 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004258:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800425a:	e003      	b.n	8004264 <LoopCopyDataInit>

0800425c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800425c:	4b0b      	ldr	r3, [pc, #44]	; (800428c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800425e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004260:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004262:	3104      	adds	r1, #4

08004264 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004264:	480a      	ldr	r0, [pc, #40]	; (8004290 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004266:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004268:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800426a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800426c:	d3f6      	bcc.n	800425c <CopyDataInit>
  ldr r2, =_sbss
 800426e:	4a0a      	ldr	r2, [pc, #40]	; (8004298 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004270:	e002      	b.n	8004278 <LoopFillZerobss>

08004272 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004272:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004274:	f842 3b04 	str.w	r3, [r2], #4

08004278 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004278:	4b08      	ldr	r3, [pc, #32]	; (800429c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800427a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800427c:	d3f9      	bcc.n	8004272 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800427e:	f7ff fefb 	bl	8004078 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004282:	f000 f815 	bl	80042b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004286:	f7ff fa23 	bl	80036d0 <main>
  bx lr
 800428a:	4770      	bx	lr
  ldr r3, =_sidata
 800428c:	08005298 	.word	0x08005298
  ldr r0, =_sdata
 8004290:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004294:	200000e4 	.word	0x200000e4
  ldr r2, =_sbss
 8004298:	200000e4 	.word	0x200000e4
  ldr r3, = _ebss
 800429c:	20000a34 	.word	0x20000a34

080042a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80042a0:	e7fe      	b.n	80042a0 <ADC1_2_IRQHandler>
	...

080042a4 <__errno>:
 80042a4:	4b01      	ldr	r3, [pc, #4]	; (80042ac <__errno+0x8>)
 80042a6:	6818      	ldr	r0, [r3, #0]
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	20000080 	.word	0x20000080

080042b0 <__libc_init_array>:
 80042b0:	b570      	push	{r4, r5, r6, lr}
 80042b2:	2500      	movs	r5, #0
 80042b4:	4e0c      	ldr	r6, [pc, #48]	; (80042e8 <__libc_init_array+0x38>)
 80042b6:	4c0d      	ldr	r4, [pc, #52]	; (80042ec <__libc_init_array+0x3c>)
 80042b8:	1ba4      	subs	r4, r4, r6
 80042ba:	10a4      	asrs	r4, r4, #2
 80042bc:	42a5      	cmp	r5, r4
 80042be:	d109      	bne.n	80042d4 <__libc_init_array+0x24>
 80042c0:	f000 ff26 	bl	8005110 <_init>
 80042c4:	2500      	movs	r5, #0
 80042c6:	4e0a      	ldr	r6, [pc, #40]	; (80042f0 <__libc_init_array+0x40>)
 80042c8:	4c0a      	ldr	r4, [pc, #40]	; (80042f4 <__libc_init_array+0x44>)
 80042ca:	1ba4      	subs	r4, r4, r6
 80042cc:	10a4      	asrs	r4, r4, #2
 80042ce:	42a5      	cmp	r5, r4
 80042d0:	d105      	bne.n	80042de <__libc_init_array+0x2e>
 80042d2:	bd70      	pop	{r4, r5, r6, pc}
 80042d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042d8:	4798      	blx	r3
 80042da:	3501      	adds	r5, #1
 80042dc:	e7ee      	b.n	80042bc <__libc_init_array+0xc>
 80042de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042e2:	4798      	blx	r3
 80042e4:	3501      	adds	r5, #1
 80042e6:	e7f2      	b.n	80042ce <__libc_init_array+0x1e>
 80042e8:	08005290 	.word	0x08005290
 80042ec:	08005290 	.word	0x08005290
 80042f0:	08005290 	.word	0x08005290
 80042f4:	08005294 	.word	0x08005294

080042f8 <memset>:
 80042f8:	4603      	mov	r3, r0
 80042fa:	4402      	add	r2, r0
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d100      	bne.n	8004302 <memset+0xa>
 8004300:	4770      	bx	lr
 8004302:	f803 1b01 	strb.w	r1, [r3], #1
 8004306:	e7f9      	b.n	80042fc <memset+0x4>

08004308 <_free_r>:
 8004308:	b538      	push	{r3, r4, r5, lr}
 800430a:	4605      	mov	r5, r0
 800430c:	2900      	cmp	r1, #0
 800430e:	d043      	beq.n	8004398 <_free_r+0x90>
 8004310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004314:	1f0c      	subs	r4, r1, #4
 8004316:	2b00      	cmp	r3, #0
 8004318:	bfb8      	it	lt
 800431a:	18e4      	addlt	r4, r4, r3
 800431c:	f000 fbde 	bl	8004adc <__malloc_lock>
 8004320:	4a1e      	ldr	r2, [pc, #120]	; (800439c <_free_r+0x94>)
 8004322:	6813      	ldr	r3, [r2, #0]
 8004324:	4610      	mov	r0, r2
 8004326:	b933      	cbnz	r3, 8004336 <_free_r+0x2e>
 8004328:	6063      	str	r3, [r4, #4]
 800432a:	6014      	str	r4, [r2, #0]
 800432c:	4628      	mov	r0, r5
 800432e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004332:	f000 bbd4 	b.w	8004ade <__malloc_unlock>
 8004336:	42a3      	cmp	r3, r4
 8004338:	d90b      	bls.n	8004352 <_free_r+0x4a>
 800433a:	6821      	ldr	r1, [r4, #0]
 800433c:	1862      	adds	r2, r4, r1
 800433e:	4293      	cmp	r3, r2
 8004340:	bf01      	itttt	eq
 8004342:	681a      	ldreq	r2, [r3, #0]
 8004344:	685b      	ldreq	r3, [r3, #4]
 8004346:	1852      	addeq	r2, r2, r1
 8004348:	6022      	streq	r2, [r4, #0]
 800434a:	6063      	str	r3, [r4, #4]
 800434c:	6004      	str	r4, [r0, #0]
 800434e:	e7ed      	b.n	800432c <_free_r+0x24>
 8004350:	4613      	mov	r3, r2
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	b10a      	cbz	r2, 800435a <_free_r+0x52>
 8004356:	42a2      	cmp	r2, r4
 8004358:	d9fa      	bls.n	8004350 <_free_r+0x48>
 800435a:	6819      	ldr	r1, [r3, #0]
 800435c:	1858      	adds	r0, r3, r1
 800435e:	42a0      	cmp	r0, r4
 8004360:	d10b      	bne.n	800437a <_free_r+0x72>
 8004362:	6820      	ldr	r0, [r4, #0]
 8004364:	4401      	add	r1, r0
 8004366:	1858      	adds	r0, r3, r1
 8004368:	4282      	cmp	r2, r0
 800436a:	6019      	str	r1, [r3, #0]
 800436c:	d1de      	bne.n	800432c <_free_r+0x24>
 800436e:	6810      	ldr	r0, [r2, #0]
 8004370:	6852      	ldr	r2, [r2, #4]
 8004372:	4401      	add	r1, r0
 8004374:	6019      	str	r1, [r3, #0]
 8004376:	605a      	str	r2, [r3, #4]
 8004378:	e7d8      	b.n	800432c <_free_r+0x24>
 800437a:	d902      	bls.n	8004382 <_free_r+0x7a>
 800437c:	230c      	movs	r3, #12
 800437e:	602b      	str	r3, [r5, #0]
 8004380:	e7d4      	b.n	800432c <_free_r+0x24>
 8004382:	6820      	ldr	r0, [r4, #0]
 8004384:	1821      	adds	r1, r4, r0
 8004386:	428a      	cmp	r2, r1
 8004388:	bf01      	itttt	eq
 800438a:	6811      	ldreq	r1, [r2, #0]
 800438c:	6852      	ldreq	r2, [r2, #4]
 800438e:	1809      	addeq	r1, r1, r0
 8004390:	6021      	streq	r1, [r4, #0]
 8004392:	6062      	str	r2, [r4, #4]
 8004394:	605c      	str	r4, [r3, #4]
 8004396:	e7c9      	b.n	800432c <_free_r+0x24>
 8004398:	bd38      	pop	{r3, r4, r5, pc}
 800439a:	bf00      	nop
 800439c:	20000134 	.word	0x20000134

080043a0 <_malloc_r>:
 80043a0:	b570      	push	{r4, r5, r6, lr}
 80043a2:	1ccd      	adds	r5, r1, #3
 80043a4:	f025 0503 	bic.w	r5, r5, #3
 80043a8:	3508      	adds	r5, #8
 80043aa:	2d0c      	cmp	r5, #12
 80043ac:	bf38      	it	cc
 80043ae:	250c      	movcc	r5, #12
 80043b0:	2d00      	cmp	r5, #0
 80043b2:	4606      	mov	r6, r0
 80043b4:	db01      	blt.n	80043ba <_malloc_r+0x1a>
 80043b6:	42a9      	cmp	r1, r5
 80043b8:	d903      	bls.n	80043c2 <_malloc_r+0x22>
 80043ba:	230c      	movs	r3, #12
 80043bc:	6033      	str	r3, [r6, #0]
 80043be:	2000      	movs	r0, #0
 80043c0:	bd70      	pop	{r4, r5, r6, pc}
 80043c2:	f000 fb8b 	bl	8004adc <__malloc_lock>
 80043c6:	4a23      	ldr	r2, [pc, #140]	; (8004454 <_malloc_r+0xb4>)
 80043c8:	6814      	ldr	r4, [r2, #0]
 80043ca:	4621      	mov	r1, r4
 80043cc:	b991      	cbnz	r1, 80043f4 <_malloc_r+0x54>
 80043ce:	4c22      	ldr	r4, [pc, #136]	; (8004458 <_malloc_r+0xb8>)
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	b91b      	cbnz	r3, 80043dc <_malloc_r+0x3c>
 80043d4:	4630      	mov	r0, r6
 80043d6:	f000 f859 	bl	800448c <_sbrk_r>
 80043da:	6020      	str	r0, [r4, #0]
 80043dc:	4629      	mov	r1, r5
 80043de:	4630      	mov	r0, r6
 80043e0:	f000 f854 	bl	800448c <_sbrk_r>
 80043e4:	1c43      	adds	r3, r0, #1
 80043e6:	d126      	bne.n	8004436 <_malloc_r+0x96>
 80043e8:	230c      	movs	r3, #12
 80043ea:	4630      	mov	r0, r6
 80043ec:	6033      	str	r3, [r6, #0]
 80043ee:	f000 fb76 	bl	8004ade <__malloc_unlock>
 80043f2:	e7e4      	b.n	80043be <_malloc_r+0x1e>
 80043f4:	680b      	ldr	r3, [r1, #0]
 80043f6:	1b5b      	subs	r3, r3, r5
 80043f8:	d41a      	bmi.n	8004430 <_malloc_r+0x90>
 80043fa:	2b0b      	cmp	r3, #11
 80043fc:	d90f      	bls.n	800441e <_malloc_r+0x7e>
 80043fe:	600b      	str	r3, [r1, #0]
 8004400:	18cc      	adds	r4, r1, r3
 8004402:	50cd      	str	r5, [r1, r3]
 8004404:	4630      	mov	r0, r6
 8004406:	f000 fb6a 	bl	8004ade <__malloc_unlock>
 800440a:	f104 000b 	add.w	r0, r4, #11
 800440e:	1d23      	adds	r3, r4, #4
 8004410:	f020 0007 	bic.w	r0, r0, #7
 8004414:	1ac3      	subs	r3, r0, r3
 8004416:	d01b      	beq.n	8004450 <_malloc_r+0xb0>
 8004418:	425a      	negs	r2, r3
 800441a:	50e2      	str	r2, [r4, r3]
 800441c:	bd70      	pop	{r4, r5, r6, pc}
 800441e:	428c      	cmp	r4, r1
 8004420:	bf0b      	itete	eq
 8004422:	6863      	ldreq	r3, [r4, #4]
 8004424:	684b      	ldrne	r3, [r1, #4]
 8004426:	6013      	streq	r3, [r2, #0]
 8004428:	6063      	strne	r3, [r4, #4]
 800442a:	bf18      	it	ne
 800442c:	460c      	movne	r4, r1
 800442e:	e7e9      	b.n	8004404 <_malloc_r+0x64>
 8004430:	460c      	mov	r4, r1
 8004432:	6849      	ldr	r1, [r1, #4]
 8004434:	e7ca      	b.n	80043cc <_malloc_r+0x2c>
 8004436:	1cc4      	adds	r4, r0, #3
 8004438:	f024 0403 	bic.w	r4, r4, #3
 800443c:	42a0      	cmp	r0, r4
 800443e:	d005      	beq.n	800444c <_malloc_r+0xac>
 8004440:	1a21      	subs	r1, r4, r0
 8004442:	4630      	mov	r0, r6
 8004444:	f000 f822 	bl	800448c <_sbrk_r>
 8004448:	3001      	adds	r0, #1
 800444a:	d0cd      	beq.n	80043e8 <_malloc_r+0x48>
 800444c:	6025      	str	r5, [r4, #0]
 800444e:	e7d9      	b.n	8004404 <_malloc_r+0x64>
 8004450:	bd70      	pop	{r4, r5, r6, pc}
 8004452:	bf00      	nop
 8004454:	20000134 	.word	0x20000134
 8004458:	20000138 	.word	0x20000138

0800445c <iprintf>:
 800445c:	b40f      	push	{r0, r1, r2, r3}
 800445e:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <iprintf+0x2c>)
 8004460:	b513      	push	{r0, r1, r4, lr}
 8004462:	681c      	ldr	r4, [r3, #0]
 8004464:	b124      	cbz	r4, 8004470 <iprintf+0x14>
 8004466:	69a3      	ldr	r3, [r4, #24]
 8004468:	b913      	cbnz	r3, 8004470 <iprintf+0x14>
 800446a:	4620      	mov	r0, r4
 800446c:	f000 fa36 	bl	80048dc <__sinit>
 8004470:	ab05      	add	r3, sp, #20
 8004472:	9a04      	ldr	r2, [sp, #16]
 8004474:	68a1      	ldr	r1, [r4, #8]
 8004476:	4620      	mov	r0, r4
 8004478:	9301      	str	r3, [sp, #4]
 800447a:	f000 fb59 	bl	8004b30 <_vfiprintf_r>
 800447e:	b002      	add	sp, #8
 8004480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004484:	b004      	add	sp, #16
 8004486:	4770      	bx	lr
 8004488:	20000080 	.word	0x20000080

0800448c <_sbrk_r>:
 800448c:	b538      	push	{r3, r4, r5, lr}
 800448e:	2300      	movs	r3, #0
 8004490:	4c05      	ldr	r4, [pc, #20]	; (80044a8 <_sbrk_r+0x1c>)
 8004492:	4605      	mov	r5, r0
 8004494:	4608      	mov	r0, r1
 8004496:	6023      	str	r3, [r4, #0]
 8004498:	f7ff fd92 	bl	8003fc0 <_sbrk>
 800449c:	1c43      	adds	r3, r0, #1
 800449e:	d102      	bne.n	80044a6 <_sbrk_r+0x1a>
 80044a0:	6823      	ldr	r3, [r4, #0]
 80044a2:	b103      	cbz	r3, 80044a6 <_sbrk_r+0x1a>
 80044a4:	602b      	str	r3, [r5, #0]
 80044a6:	bd38      	pop	{r3, r4, r5, pc}
 80044a8:	20000a30 	.word	0x20000a30

080044ac <__sread>:
 80044ac:	b510      	push	{r4, lr}
 80044ae:	460c      	mov	r4, r1
 80044b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044b4:	f000 fdea 	bl	800508c <_read_r>
 80044b8:	2800      	cmp	r0, #0
 80044ba:	bfab      	itete	ge
 80044bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80044be:	89a3      	ldrhlt	r3, [r4, #12]
 80044c0:	181b      	addge	r3, r3, r0
 80044c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80044c6:	bfac      	ite	ge
 80044c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80044ca:	81a3      	strhlt	r3, [r4, #12]
 80044cc:	bd10      	pop	{r4, pc}

080044ce <__swrite>:
 80044ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044d2:	461f      	mov	r7, r3
 80044d4:	898b      	ldrh	r3, [r1, #12]
 80044d6:	4605      	mov	r5, r0
 80044d8:	05db      	lsls	r3, r3, #23
 80044da:	460c      	mov	r4, r1
 80044dc:	4616      	mov	r6, r2
 80044de:	d505      	bpl.n	80044ec <__swrite+0x1e>
 80044e0:	2302      	movs	r3, #2
 80044e2:	2200      	movs	r2, #0
 80044e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044e8:	f000 fa82 	bl	80049f0 <_lseek_r>
 80044ec:	89a3      	ldrh	r3, [r4, #12]
 80044ee:	4632      	mov	r2, r6
 80044f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044f4:	81a3      	strh	r3, [r4, #12]
 80044f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044fa:	463b      	mov	r3, r7
 80044fc:	4628      	mov	r0, r5
 80044fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004502:	f000 b869 	b.w	80045d8 <_write_r>

08004506 <__sseek>:
 8004506:	b510      	push	{r4, lr}
 8004508:	460c      	mov	r4, r1
 800450a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800450e:	f000 fa6f 	bl	80049f0 <_lseek_r>
 8004512:	1c43      	adds	r3, r0, #1
 8004514:	89a3      	ldrh	r3, [r4, #12]
 8004516:	bf15      	itete	ne
 8004518:	6560      	strne	r0, [r4, #84]	; 0x54
 800451a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800451e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004522:	81a3      	strheq	r3, [r4, #12]
 8004524:	bf18      	it	ne
 8004526:	81a3      	strhne	r3, [r4, #12]
 8004528:	bd10      	pop	{r4, pc}

0800452a <__sclose>:
 800452a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800452e:	f000 b8d3 	b.w	80046d8 <_close_r>
	...

08004534 <__swbuf_r>:
 8004534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004536:	460e      	mov	r6, r1
 8004538:	4614      	mov	r4, r2
 800453a:	4605      	mov	r5, r0
 800453c:	b118      	cbz	r0, 8004546 <__swbuf_r+0x12>
 800453e:	6983      	ldr	r3, [r0, #24]
 8004540:	b90b      	cbnz	r3, 8004546 <__swbuf_r+0x12>
 8004542:	f000 f9cb 	bl	80048dc <__sinit>
 8004546:	4b21      	ldr	r3, [pc, #132]	; (80045cc <__swbuf_r+0x98>)
 8004548:	429c      	cmp	r4, r3
 800454a:	d12a      	bne.n	80045a2 <__swbuf_r+0x6e>
 800454c:	686c      	ldr	r4, [r5, #4]
 800454e:	69a3      	ldr	r3, [r4, #24]
 8004550:	60a3      	str	r3, [r4, #8]
 8004552:	89a3      	ldrh	r3, [r4, #12]
 8004554:	071a      	lsls	r2, r3, #28
 8004556:	d52e      	bpl.n	80045b6 <__swbuf_r+0x82>
 8004558:	6923      	ldr	r3, [r4, #16]
 800455a:	b363      	cbz	r3, 80045b6 <__swbuf_r+0x82>
 800455c:	6923      	ldr	r3, [r4, #16]
 800455e:	6820      	ldr	r0, [r4, #0]
 8004560:	b2f6      	uxtb	r6, r6
 8004562:	1ac0      	subs	r0, r0, r3
 8004564:	6963      	ldr	r3, [r4, #20]
 8004566:	4637      	mov	r7, r6
 8004568:	4298      	cmp	r0, r3
 800456a:	db04      	blt.n	8004576 <__swbuf_r+0x42>
 800456c:	4621      	mov	r1, r4
 800456e:	4628      	mov	r0, r5
 8004570:	f000 f94a 	bl	8004808 <_fflush_r>
 8004574:	bb28      	cbnz	r0, 80045c2 <__swbuf_r+0x8e>
 8004576:	68a3      	ldr	r3, [r4, #8]
 8004578:	3001      	adds	r0, #1
 800457a:	3b01      	subs	r3, #1
 800457c:	60a3      	str	r3, [r4, #8]
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	6022      	str	r2, [r4, #0]
 8004584:	701e      	strb	r6, [r3, #0]
 8004586:	6963      	ldr	r3, [r4, #20]
 8004588:	4298      	cmp	r0, r3
 800458a:	d004      	beq.n	8004596 <__swbuf_r+0x62>
 800458c:	89a3      	ldrh	r3, [r4, #12]
 800458e:	07db      	lsls	r3, r3, #31
 8004590:	d519      	bpl.n	80045c6 <__swbuf_r+0x92>
 8004592:	2e0a      	cmp	r6, #10
 8004594:	d117      	bne.n	80045c6 <__swbuf_r+0x92>
 8004596:	4621      	mov	r1, r4
 8004598:	4628      	mov	r0, r5
 800459a:	f000 f935 	bl	8004808 <_fflush_r>
 800459e:	b190      	cbz	r0, 80045c6 <__swbuf_r+0x92>
 80045a0:	e00f      	b.n	80045c2 <__swbuf_r+0x8e>
 80045a2:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <__swbuf_r+0x9c>)
 80045a4:	429c      	cmp	r4, r3
 80045a6:	d101      	bne.n	80045ac <__swbuf_r+0x78>
 80045a8:	68ac      	ldr	r4, [r5, #8]
 80045aa:	e7d0      	b.n	800454e <__swbuf_r+0x1a>
 80045ac:	4b09      	ldr	r3, [pc, #36]	; (80045d4 <__swbuf_r+0xa0>)
 80045ae:	429c      	cmp	r4, r3
 80045b0:	bf08      	it	eq
 80045b2:	68ec      	ldreq	r4, [r5, #12]
 80045b4:	e7cb      	b.n	800454e <__swbuf_r+0x1a>
 80045b6:	4621      	mov	r1, r4
 80045b8:	4628      	mov	r0, r5
 80045ba:	f000 f81f 	bl	80045fc <__swsetup_r>
 80045be:	2800      	cmp	r0, #0
 80045c0:	d0cc      	beq.n	800455c <__swbuf_r+0x28>
 80045c2:	f04f 37ff 	mov.w	r7, #4294967295
 80045c6:	4638      	mov	r0, r7
 80045c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045ca:	bf00      	nop
 80045cc:	0800521c 	.word	0x0800521c
 80045d0:	0800523c 	.word	0x0800523c
 80045d4:	080051fc 	.word	0x080051fc

080045d8 <_write_r>:
 80045d8:	b538      	push	{r3, r4, r5, lr}
 80045da:	4605      	mov	r5, r0
 80045dc:	4608      	mov	r0, r1
 80045de:	4611      	mov	r1, r2
 80045e0:	2200      	movs	r2, #0
 80045e2:	4c05      	ldr	r4, [pc, #20]	; (80045f8 <_write_r+0x20>)
 80045e4:	6022      	str	r2, [r4, #0]
 80045e6:	461a      	mov	r2, r3
 80045e8:	f7ff f85e 	bl	80036a8 <_write>
 80045ec:	1c43      	adds	r3, r0, #1
 80045ee:	d102      	bne.n	80045f6 <_write_r+0x1e>
 80045f0:	6823      	ldr	r3, [r4, #0]
 80045f2:	b103      	cbz	r3, 80045f6 <_write_r+0x1e>
 80045f4:	602b      	str	r3, [r5, #0]
 80045f6:	bd38      	pop	{r3, r4, r5, pc}
 80045f8:	20000a30 	.word	0x20000a30

080045fc <__swsetup_r>:
 80045fc:	4b32      	ldr	r3, [pc, #200]	; (80046c8 <__swsetup_r+0xcc>)
 80045fe:	b570      	push	{r4, r5, r6, lr}
 8004600:	681d      	ldr	r5, [r3, #0]
 8004602:	4606      	mov	r6, r0
 8004604:	460c      	mov	r4, r1
 8004606:	b125      	cbz	r5, 8004612 <__swsetup_r+0x16>
 8004608:	69ab      	ldr	r3, [r5, #24]
 800460a:	b913      	cbnz	r3, 8004612 <__swsetup_r+0x16>
 800460c:	4628      	mov	r0, r5
 800460e:	f000 f965 	bl	80048dc <__sinit>
 8004612:	4b2e      	ldr	r3, [pc, #184]	; (80046cc <__swsetup_r+0xd0>)
 8004614:	429c      	cmp	r4, r3
 8004616:	d10f      	bne.n	8004638 <__swsetup_r+0x3c>
 8004618:	686c      	ldr	r4, [r5, #4]
 800461a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800461e:	b29a      	uxth	r2, r3
 8004620:	0715      	lsls	r5, r2, #28
 8004622:	d42c      	bmi.n	800467e <__swsetup_r+0x82>
 8004624:	06d0      	lsls	r0, r2, #27
 8004626:	d411      	bmi.n	800464c <__swsetup_r+0x50>
 8004628:	2209      	movs	r2, #9
 800462a:	6032      	str	r2, [r6, #0]
 800462c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004630:	81a3      	strh	r3, [r4, #12]
 8004632:	f04f 30ff 	mov.w	r0, #4294967295
 8004636:	bd70      	pop	{r4, r5, r6, pc}
 8004638:	4b25      	ldr	r3, [pc, #148]	; (80046d0 <__swsetup_r+0xd4>)
 800463a:	429c      	cmp	r4, r3
 800463c:	d101      	bne.n	8004642 <__swsetup_r+0x46>
 800463e:	68ac      	ldr	r4, [r5, #8]
 8004640:	e7eb      	b.n	800461a <__swsetup_r+0x1e>
 8004642:	4b24      	ldr	r3, [pc, #144]	; (80046d4 <__swsetup_r+0xd8>)
 8004644:	429c      	cmp	r4, r3
 8004646:	bf08      	it	eq
 8004648:	68ec      	ldreq	r4, [r5, #12]
 800464a:	e7e6      	b.n	800461a <__swsetup_r+0x1e>
 800464c:	0751      	lsls	r1, r2, #29
 800464e:	d512      	bpl.n	8004676 <__swsetup_r+0x7a>
 8004650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004652:	b141      	cbz	r1, 8004666 <__swsetup_r+0x6a>
 8004654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004658:	4299      	cmp	r1, r3
 800465a:	d002      	beq.n	8004662 <__swsetup_r+0x66>
 800465c:	4630      	mov	r0, r6
 800465e:	f7ff fe53 	bl	8004308 <_free_r>
 8004662:	2300      	movs	r3, #0
 8004664:	6363      	str	r3, [r4, #52]	; 0x34
 8004666:	89a3      	ldrh	r3, [r4, #12]
 8004668:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800466c:	81a3      	strh	r3, [r4, #12]
 800466e:	2300      	movs	r3, #0
 8004670:	6063      	str	r3, [r4, #4]
 8004672:	6923      	ldr	r3, [r4, #16]
 8004674:	6023      	str	r3, [r4, #0]
 8004676:	89a3      	ldrh	r3, [r4, #12]
 8004678:	f043 0308 	orr.w	r3, r3, #8
 800467c:	81a3      	strh	r3, [r4, #12]
 800467e:	6923      	ldr	r3, [r4, #16]
 8004680:	b94b      	cbnz	r3, 8004696 <__swsetup_r+0x9a>
 8004682:	89a3      	ldrh	r3, [r4, #12]
 8004684:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800468c:	d003      	beq.n	8004696 <__swsetup_r+0x9a>
 800468e:	4621      	mov	r1, r4
 8004690:	4630      	mov	r0, r6
 8004692:	f000 f9e3 	bl	8004a5c <__smakebuf_r>
 8004696:	89a2      	ldrh	r2, [r4, #12]
 8004698:	f012 0301 	ands.w	r3, r2, #1
 800469c:	d00c      	beq.n	80046b8 <__swsetup_r+0xbc>
 800469e:	2300      	movs	r3, #0
 80046a0:	60a3      	str	r3, [r4, #8]
 80046a2:	6963      	ldr	r3, [r4, #20]
 80046a4:	425b      	negs	r3, r3
 80046a6:	61a3      	str	r3, [r4, #24]
 80046a8:	6923      	ldr	r3, [r4, #16]
 80046aa:	b953      	cbnz	r3, 80046c2 <__swsetup_r+0xc6>
 80046ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046b0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80046b4:	d1ba      	bne.n	800462c <__swsetup_r+0x30>
 80046b6:	bd70      	pop	{r4, r5, r6, pc}
 80046b8:	0792      	lsls	r2, r2, #30
 80046ba:	bf58      	it	pl
 80046bc:	6963      	ldrpl	r3, [r4, #20]
 80046be:	60a3      	str	r3, [r4, #8]
 80046c0:	e7f2      	b.n	80046a8 <__swsetup_r+0xac>
 80046c2:	2000      	movs	r0, #0
 80046c4:	e7f7      	b.n	80046b6 <__swsetup_r+0xba>
 80046c6:	bf00      	nop
 80046c8:	20000080 	.word	0x20000080
 80046cc:	0800521c 	.word	0x0800521c
 80046d0:	0800523c 	.word	0x0800523c
 80046d4:	080051fc 	.word	0x080051fc

080046d8 <_close_r>:
 80046d8:	b538      	push	{r3, r4, r5, lr}
 80046da:	2300      	movs	r3, #0
 80046dc:	4c05      	ldr	r4, [pc, #20]	; (80046f4 <_close_r+0x1c>)
 80046de:	4605      	mov	r5, r0
 80046e0:	4608      	mov	r0, r1
 80046e2:	6023      	str	r3, [r4, #0]
 80046e4:	f7ff fc98 	bl	8004018 <_close>
 80046e8:	1c43      	adds	r3, r0, #1
 80046ea:	d102      	bne.n	80046f2 <_close_r+0x1a>
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	b103      	cbz	r3, 80046f2 <_close_r+0x1a>
 80046f0:	602b      	str	r3, [r5, #0]
 80046f2:	bd38      	pop	{r3, r4, r5, pc}
 80046f4:	20000a30 	.word	0x20000a30

080046f8 <__sflush_r>:
 80046f8:	898a      	ldrh	r2, [r1, #12]
 80046fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046fe:	4605      	mov	r5, r0
 8004700:	0710      	lsls	r0, r2, #28
 8004702:	460c      	mov	r4, r1
 8004704:	d45a      	bmi.n	80047bc <__sflush_r+0xc4>
 8004706:	684b      	ldr	r3, [r1, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	dc05      	bgt.n	8004718 <__sflush_r+0x20>
 800470c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800470e:	2b00      	cmp	r3, #0
 8004710:	dc02      	bgt.n	8004718 <__sflush_r+0x20>
 8004712:	2000      	movs	r0, #0
 8004714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004718:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800471a:	2e00      	cmp	r6, #0
 800471c:	d0f9      	beq.n	8004712 <__sflush_r+0x1a>
 800471e:	2300      	movs	r3, #0
 8004720:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004724:	682f      	ldr	r7, [r5, #0]
 8004726:	602b      	str	r3, [r5, #0]
 8004728:	d033      	beq.n	8004792 <__sflush_r+0x9a>
 800472a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800472c:	89a3      	ldrh	r3, [r4, #12]
 800472e:	075a      	lsls	r2, r3, #29
 8004730:	d505      	bpl.n	800473e <__sflush_r+0x46>
 8004732:	6863      	ldr	r3, [r4, #4]
 8004734:	1ac0      	subs	r0, r0, r3
 8004736:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004738:	b10b      	cbz	r3, 800473e <__sflush_r+0x46>
 800473a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800473c:	1ac0      	subs	r0, r0, r3
 800473e:	2300      	movs	r3, #0
 8004740:	4602      	mov	r2, r0
 8004742:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004744:	6a21      	ldr	r1, [r4, #32]
 8004746:	4628      	mov	r0, r5
 8004748:	47b0      	blx	r6
 800474a:	1c43      	adds	r3, r0, #1
 800474c:	89a3      	ldrh	r3, [r4, #12]
 800474e:	d106      	bne.n	800475e <__sflush_r+0x66>
 8004750:	6829      	ldr	r1, [r5, #0]
 8004752:	291d      	cmp	r1, #29
 8004754:	d84b      	bhi.n	80047ee <__sflush_r+0xf6>
 8004756:	4a2b      	ldr	r2, [pc, #172]	; (8004804 <__sflush_r+0x10c>)
 8004758:	40ca      	lsrs	r2, r1
 800475a:	07d6      	lsls	r6, r2, #31
 800475c:	d547      	bpl.n	80047ee <__sflush_r+0xf6>
 800475e:	2200      	movs	r2, #0
 8004760:	6062      	str	r2, [r4, #4]
 8004762:	6922      	ldr	r2, [r4, #16]
 8004764:	04d9      	lsls	r1, r3, #19
 8004766:	6022      	str	r2, [r4, #0]
 8004768:	d504      	bpl.n	8004774 <__sflush_r+0x7c>
 800476a:	1c42      	adds	r2, r0, #1
 800476c:	d101      	bne.n	8004772 <__sflush_r+0x7a>
 800476e:	682b      	ldr	r3, [r5, #0]
 8004770:	b903      	cbnz	r3, 8004774 <__sflush_r+0x7c>
 8004772:	6560      	str	r0, [r4, #84]	; 0x54
 8004774:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004776:	602f      	str	r7, [r5, #0]
 8004778:	2900      	cmp	r1, #0
 800477a:	d0ca      	beq.n	8004712 <__sflush_r+0x1a>
 800477c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004780:	4299      	cmp	r1, r3
 8004782:	d002      	beq.n	800478a <__sflush_r+0x92>
 8004784:	4628      	mov	r0, r5
 8004786:	f7ff fdbf 	bl	8004308 <_free_r>
 800478a:	2000      	movs	r0, #0
 800478c:	6360      	str	r0, [r4, #52]	; 0x34
 800478e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004792:	6a21      	ldr	r1, [r4, #32]
 8004794:	2301      	movs	r3, #1
 8004796:	4628      	mov	r0, r5
 8004798:	47b0      	blx	r6
 800479a:	1c41      	adds	r1, r0, #1
 800479c:	d1c6      	bne.n	800472c <__sflush_r+0x34>
 800479e:	682b      	ldr	r3, [r5, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0c3      	beq.n	800472c <__sflush_r+0x34>
 80047a4:	2b1d      	cmp	r3, #29
 80047a6:	d001      	beq.n	80047ac <__sflush_r+0xb4>
 80047a8:	2b16      	cmp	r3, #22
 80047aa:	d101      	bne.n	80047b0 <__sflush_r+0xb8>
 80047ac:	602f      	str	r7, [r5, #0]
 80047ae:	e7b0      	b.n	8004712 <__sflush_r+0x1a>
 80047b0:	89a3      	ldrh	r3, [r4, #12]
 80047b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047b6:	81a3      	strh	r3, [r4, #12]
 80047b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047bc:	690f      	ldr	r7, [r1, #16]
 80047be:	2f00      	cmp	r7, #0
 80047c0:	d0a7      	beq.n	8004712 <__sflush_r+0x1a>
 80047c2:	0793      	lsls	r3, r2, #30
 80047c4:	bf18      	it	ne
 80047c6:	2300      	movne	r3, #0
 80047c8:	680e      	ldr	r6, [r1, #0]
 80047ca:	bf08      	it	eq
 80047cc:	694b      	ldreq	r3, [r1, #20]
 80047ce:	eba6 0807 	sub.w	r8, r6, r7
 80047d2:	600f      	str	r7, [r1, #0]
 80047d4:	608b      	str	r3, [r1, #8]
 80047d6:	f1b8 0f00 	cmp.w	r8, #0
 80047da:	dd9a      	ble.n	8004712 <__sflush_r+0x1a>
 80047dc:	4643      	mov	r3, r8
 80047de:	463a      	mov	r2, r7
 80047e0:	6a21      	ldr	r1, [r4, #32]
 80047e2:	4628      	mov	r0, r5
 80047e4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80047e6:	47b0      	blx	r6
 80047e8:	2800      	cmp	r0, #0
 80047ea:	dc07      	bgt.n	80047fc <__sflush_r+0x104>
 80047ec:	89a3      	ldrh	r3, [r4, #12]
 80047ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047f2:	81a3      	strh	r3, [r4, #12]
 80047f4:	f04f 30ff 	mov.w	r0, #4294967295
 80047f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047fc:	4407      	add	r7, r0
 80047fe:	eba8 0800 	sub.w	r8, r8, r0
 8004802:	e7e8      	b.n	80047d6 <__sflush_r+0xde>
 8004804:	20400001 	.word	0x20400001

08004808 <_fflush_r>:
 8004808:	b538      	push	{r3, r4, r5, lr}
 800480a:	690b      	ldr	r3, [r1, #16]
 800480c:	4605      	mov	r5, r0
 800480e:	460c      	mov	r4, r1
 8004810:	b1db      	cbz	r3, 800484a <_fflush_r+0x42>
 8004812:	b118      	cbz	r0, 800481c <_fflush_r+0x14>
 8004814:	6983      	ldr	r3, [r0, #24]
 8004816:	b90b      	cbnz	r3, 800481c <_fflush_r+0x14>
 8004818:	f000 f860 	bl	80048dc <__sinit>
 800481c:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <_fflush_r+0x48>)
 800481e:	429c      	cmp	r4, r3
 8004820:	d109      	bne.n	8004836 <_fflush_r+0x2e>
 8004822:	686c      	ldr	r4, [r5, #4]
 8004824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004828:	b17b      	cbz	r3, 800484a <_fflush_r+0x42>
 800482a:	4621      	mov	r1, r4
 800482c:	4628      	mov	r0, r5
 800482e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004832:	f7ff bf61 	b.w	80046f8 <__sflush_r>
 8004836:	4b07      	ldr	r3, [pc, #28]	; (8004854 <_fflush_r+0x4c>)
 8004838:	429c      	cmp	r4, r3
 800483a:	d101      	bne.n	8004840 <_fflush_r+0x38>
 800483c:	68ac      	ldr	r4, [r5, #8]
 800483e:	e7f1      	b.n	8004824 <_fflush_r+0x1c>
 8004840:	4b05      	ldr	r3, [pc, #20]	; (8004858 <_fflush_r+0x50>)
 8004842:	429c      	cmp	r4, r3
 8004844:	bf08      	it	eq
 8004846:	68ec      	ldreq	r4, [r5, #12]
 8004848:	e7ec      	b.n	8004824 <_fflush_r+0x1c>
 800484a:	2000      	movs	r0, #0
 800484c:	bd38      	pop	{r3, r4, r5, pc}
 800484e:	bf00      	nop
 8004850:	0800521c 	.word	0x0800521c
 8004854:	0800523c 	.word	0x0800523c
 8004858:	080051fc 	.word	0x080051fc

0800485c <_cleanup_r>:
 800485c:	4901      	ldr	r1, [pc, #4]	; (8004864 <_cleanup_r+0x8>)
 800485e:	f000 b8a9 	b.w	80049b4 <_fwalk_reent>
 8004862:	bf00      	nop
 8004864:	08004809 	.word	0x08004809

08004868 <std.isra.0>:
 8004868:	2300      	movs	r3, #0
 800486a:	b510      	push	{r4, lr}
 800486c:	4604      	mov	r4, r0
 800486e:	6003      	str	r3, [r0, #0]
 8004870:	6043      	str	r3, [r0, #4]
 8004872:	6083      	str	r3, [r0, #8]
 8004874:	8181      	strh	r1, [r0, #12]
 8004876:	6643      	str	r3, [r0, #100]	; 0x64
 8004878:	81c2      	strh	r2, [r0, #14]
 800487a:	6103      	str	r3, [r0, #16]
 800487c:	6143      	str	r3, [r0, #20]
 800487e:	6183      	str	r3, [r0, #24]
 8004880:	4619      	mov	r1, r3
 8004882:	2208      	movs	r2, #8
 8004884:	305c      	adds	r0, #92	; 0x5c
 8004886:	f7ff fd37 	bl	80042f8 <memset>
 800488a:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <std.isra.0+0x38>)
 800488c:	6224      	str	r4, [r4, #32]
 800488e:	6263      	str	r3, [r4, #36]	; 0x24
 8004890:	4b04      	ldr	r3, [pc, #16]	; (80048a4 <std.isra.0+0x3c>)
 8004892:	62a3      	str	r3, [r4, #40]	; 0x28
 8004894:	4b04      	ldr	r3, [pc, #16]	; (80048a8 <std.isra.0+0x40>)
 8004896:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004898:	4b04      	ldr	r3, [pc, #16]	; (80048ac <std.isra.0+0x44>)
 800489a:	6323      	str	r3, [r4, #48]	; 0x30
 800489c:	bd10      	pop	{r4, pc}
 800489e:	bf00      	nop
 80048a0:	080044ad 	.word	0x080044ad
 80048a4:	080044cf 	.word	0x080044cf
 80048a8:	08004507 	.word	0x08004507
 80048ac:	0800452b 	.word	0x0800452b

080048b0 <__sfmoreglue>:
 80048b0:	b570      	push	{r4, r5, r6, lr}
 80048b2:	2568      	movs	r5, #104	; 0x68
 80048b4:	1e4a      	subs	r2, r1, #1
 80048b6:	4355      	muls	r5, r2
 80048b8:	460e      	mov	r6, r1
 80048ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80048be:	f7ff fd6f 	bl	80043a0 <_malloc_r>
 80048c2:	4604      	mov	r4, r0
 80048c4:	b140      	cbz	r0, 80048d8 <__sfmoreglue+0x28>
 80048c6:	2100      	movs	r1, #0
 80048c8:	e880 0042 	stmia.w	r0, {r1, r6}
 80048cc:	300c      	adds	r0, #12
 80048ce:	60a0      	str	r0, [r4, #8]
 80048d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80048d4:	f7ff fd10 	bl	80042f8 <memset>
 80048d8:	4620      	mov	r0, r4
 80048da:	bd70      	pop	{r4, r5, r6, pc}

080048dc <__sinit>:
 80048dc:	6983      	ldr	r3, [r0, #24]
 80048de:	b510      	push	{r4, lr}
 80048e0:	4604      	mov	r4, r0
 80048e2:	bb33      	cbnz	r3, 8004932 <__sinit+0x56>
 80048e4:	6483      	str	r3, [r0, #72]	; 0x48
 80048e6:	64c3      	str	r3, [r0, #76]	; 0x4c
 80048e8:	6503      	str	r3, [r0, #80]	; 0x50
 80048ea:	4b12      	ldr	r3, [pc, #72]	; (8004934 <__sinit+0x58>)
 80048ec:	4a12      	ldr	r2, [pc, #72]	; (8004938 <__sinit+0x5c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6282      	str	r2, [r0, #40]	; 0x28
 80048f2:	4298      	cmp	r0, r3
 80048f4:	bf04      	itt	eq
 80048f6:	2301      	moveq	r3, #1
 80048f8:	6183      	streq	r3, [r0, #24]
 80048fa:	f000 f81f 	bl	800493c <__sfp>
 80048fe:	6060      	str	r0, [r4, #4]
 8004900:	4620      	mov	r0, r4
 8004902:	f000 f81b 	bl	800493c <__sfp>
 8004906:	60a0      	str	r0, [r4, #8]
 8004908:	4620      	mov	r0, r4
 800490a:	f000 f817 	bl	800493c <__sfp>
 800490e:	2200      	movs	r2, #0
 8004910:	60e0      	str	r0, [r4, #12]
 8004912:	2104      	movs	r1, #4
 8004914:	6860      	ldr	r0, [r4, #4]
 8004916:	f7ff ffa7 	bl	8004868 <std.isra.0>
 800491a:	2201      	movs	r2, #1
 800491c:	2109      	movs	r1, #9
 800491e:	68a0      	ldr	r0, [r4, #8]
 8004920:	f7ff ffa2 	bl	8004868 <std.isra.0>
 8004924:	2202      	movs	r2, #2
 8004926:	2112      	movs	r1, #18
 8004928:	68e0      	ldr	r0, [r4, #12]
 800492a:	f7ff ff9d 	bl	8004868 <std.isra.0>
 800492e:	2301      	movs	r3, #1
 8004930:	61a3      	str	r3, [r4, #24]
 8004932:	bd10      	pop	{r4, pc}
 8004934:	080051f8 	.word	0x080051f8
 8004938:	0800485d 	.word	0x0800485d

0800493c <__sfp>:
 800493c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493e:	4b1c      	ldr	r3, [pc, #112]	; (80049b0 <__sfp+0x74>)
 8004940:	4607      	mov	r7, r0
 8004942:	681e      	ldr	r6, [r3, #0]
 8004944:	69b3      	ldr	r3, [r6, #24]
 8004946:	b913      	cbnz	r3, 800494e <__sfp+0x12>
 8004948:	4630      	mov	r0, r6
 800494a:	f7ff ffc7 	bl	80048dc <__sinit>
 800494e:	3648      	adds	r6, #72	; 0x48
 8004950:	68b4      	ldr	r4, [r6, #8]
 8004952:	6873      	ldr	r3, [r6, #4]
 8004954:	3b01      	subs	r3, #1
 8004956:	d503      	bpl.n	8004960 <__sfp+0x24>
 8004958:	6833      	ldr	r3, [r6, #0]
 800495a:	b133      	cbz	r3, 800496a <__sfp+0x2e>
 800495c:	6836      	ldr	r6, [r6, #0]
 800495e:	e7f7      	b.n	8004950 <__sfp+0x14>
 8004960:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004964:	b16d      	cbz	r5, 8004982 <__sfp+0x46>
 8004966:	3468      	adds	r4, #104	; 0x68
 8004968:	e7f4      	b.n	8004954 <__sfp+0x18>
 800496a:	2104      	movs	r1, #4
 800496c:	4638      	mov	r0, r7
 800496e:	f7ff ff9f 	bl	80048b0 <__sfmoreglue>
 8004972:	6030      	str	r0, [r6, #0]
 8004974:	2800      	cmp	r0, #0
 8004976:	d1f1      	bne.n	800495c <__sfp+0x20>
 8004978:	230c      	movs	r3, #12
 800497a:	4604      	mov	r4, r0
 800497c:	603b      	str	r3, [r7, #0]
 800497e:	4620      	mov	r0, r4
 8004980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004982:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004986:	81e3      	strh	r3, [r4, #14]
 8004988:	2301      	movs	r3, #1
 800498a:	6665      	str	r5, [r4, #100]	; 0x64
 800498c:	81a3      	strh	r3, [r4, #12]
 800498e:	6025      	str	r5, [r4, #0]
 8004990:	60a5      	str	r5, [r4, #8]
 8004992:	6065      	str	r5, [r4, #4]
 8004994:	6125      	str	r5, [r4, #16]
 8004996:	6165      	str	r5, [r4, #20]
 8004998:	61a5      	str	r5, [r4, #24]
 800499a:	2208      	movs	r2, #8
 800499c:	4629      	mov	r1, r5
 800499e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80049a2:	f7ff fca9 	bl	80042f8 <memset>
 80049a6:	6365      	str	r5, [r4, #52]	; 0x34
 80049a8:	63a5      	str	r5, [r4, #56]	; 0x38
 80049aa:	64a5      	str	r5, [r4, #72]	; 0x48
 80049ac:	64e5      	str	r5, [r4, #76]	; 0x4c
 80049ae:	e7e6      	b.n	800497e <__sfp+0x42>
 80049b0:	080051f8 	.word	0x080051f8

080049b4 <_fwalk_reent>:
 80049b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049b8:	4680      	mov	r8, r0
 80049ba:	4689      	mov	r9, r1
 80049bc:	2600      	movs	r6, #0
 80049be:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80049c2:	b914      	cbnz	r4, 80049ca <_fwalk_reent+0x16>
 80049c4:	4630      	mov	r0, r6
 80049c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049ca:	68a5      	ldr	r5, [r4, #8]
 80049cc:	6867      	ldr	r7, [r4, #4]
 80049ce:	3f01      	subs	r7, #1
 80049d0:	d501      	bpl.n	80049d6 <_fwalk_reent+0x22>
 80049d2:	6824      	ldr	r4, [r4, #0]
 80049d4:	e7f5      	b.n	80049c2 <_fwalk_reent+0xe>
 80049d6:	89ab      	ldrh	r3, [r5, #12]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d907      	bls.n	80049ec <_fwalk_reent+0x38>
 80049dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049e0:	3301      	adds	r3, #1
 80049e2:	d003      	beq.n	80049ec <_fwalk_reent+0x38>
 80049e4:	4629      	mov	r1, r5
 80049e6:	4640      	mov	r0, r8
 80049e8:	47c8      	blx	r9
 80049ea:	4306      	orrs	r6, r0
 80049ec:	3568      	adds	r5, #104	; 0x68
 80049ee:	e7ee      	b.n	80049ce <_fwalk_reent+0x1a>

080049f0 <_lseek_r>:
 80049f0:	b538      	push	{r3, r4, r5, lr}
 80049f2:	4605      	mov	r5, r0
 80049f4:	4608      	mov	r0, r1
 80049f6:	4611      	mov	r1, r2
 80049f8:	2200      	movs	r2, #0
 80049fa:	4c05      	ldr	r4, [pc, #20]	; (8004a10 <_lseek_r+0x20>)
 80049fc:	6022      	str	r2, [r4, #0]
 80049fe:	461a      	mov	r2, r3
 8004a00:	f7ff fb2e 	bl	8004060 <_lseek>
 8004a04:	1c43      	adds	r3, r0, #1
 8004a06:	d102      	bne.n	8004a0e <_lseek_r+0x1e>
 8004a08:	6823      	ldr	r3, [r4, #0]
 8004a0a:	b103      	cbz	r3, 8004a0e <_lseek_r+0x1e>
 8004a0c:	602b      	str	r3, [r5, #0]
 8004a0e:	bd38      	pop	{r3, r4, r5, pc}
 8004a10:	20000a30 	.word	0x20000a30

08004a14 <__swhatbuf_r>:
 8004a14:	b570      	push	{r4, r5, r6, lr}
 8004a16:	460e      	mov	r6, r1
 8004a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a1c:	b090      	sub	sp, #64	; 0x40
 8004a1e:	2900      	cmp	r1, #0
 8004a20:	4614      	mov	r4, r2
 8004a22:	461d      	mov	r5, r3
 8004a24:	da07      	bge.n	8004a36 <__swhatbuf_r+0x22>
 8004a26:	2300      	movs	r3, #0
 8004a28:	602b      	str	r3, [r5, #0]
 8004a2a:	89b3      	ldrh	r3, [r6, #12]
 8004a2c:	061a      	lsls	r2, r3, #24
 8004a2e:	d410      	bmi.n	8004a52 <__swhatbuf_r+0x3e>
 8004a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a34:	e00e      	b.n	8004a54 <__swhatbuf_r+0x40>
 8004a36:	aa01      	add	r2, sp, #4
 8004a38:	f000 fb3a 	bl	80050b0 <_fstat_r>
 8004a3c:	2800      	cmp	r0, #0
 8004a3e:	dbf2      	blt.n	8004a26 <__swhatbuf_r+0x12>
 8004a40:	9a02      	ldr	r2, [sp, #8]
 8004a42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004a46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004a4a:	425a      	negs	r2, r3
 8004a4c:	415a      	adcs	r2, r3
 8004a4e:	602a      	str	r2, [r5, #0]
 8004a50:	e7ee      	b.n	8004a30 <__swhatbuf_r+0x1c>
 8004a52:	2340      	movs	r3, #64	; 0x40
 8004a54:	2000      	movs	r0, #0
 8004a56:	6023      	str	r3, [r4, #0]
 8004a58:	b010      	add	sp, #64	; 0x40
 8004a5a:	bd70      	pop	{r4, r5, r6, pc}

08004a5c <__smakebuf_r>:
 8004a5c:	898b      	ldrh	r3, [r1, #12]
 8004a5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a60:	079d      	lsls	r5, r3, #30
 8004a62:	4606      	mov	r6, r0
 8004a64:	460c      	mov	r4, r1
 8004a66:	d507      	bpl.n	8004a78 <__smakebuf_r+0x1c>
 8004a68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004a6c:	6023      	str	r3, [r4, #0]
 8004a6e:	6123      	str	r3, [r4, #16]
 8004a70:	2301      	movs	r3, #1
 8004a72:	6163      	str	r3, [r4, #20]
 8004a74:	b002      	add	sp, #8
 8004a76:	bd70      	pop	{r4, r5, r6, pc}
 8004a78:	ab01      	add	r3, sp, #4
 8004a7a:	466a      	mov	r2, sp
 8004a7c:	f7ff ffca 	bl	8004a14 <__swhatbuf_r>
 8004a80:	9900      	ldr	r1, [sp, #0]
 8004a82:	4605      	mov	r5, r0
 8004a84:	4630      	mov	r0, r6
 8004a86:	f7ff fc8b 	bl	80043a0 <_malloc_r>
 8004a8a:	b948      	cbnz	r0, 8004aa0 <__smakebuf_r+0x44>
 8004a8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a90:	059a      	lsls	r2, r3, #22
 8004a92:	d4ef      	bmi.n	8004a74 <__smakebuf_r+0x18>
 8004a94:	f023 0303 	bic.w	r3, r3, #3
 8004a98:	f043 0302 	orr.w	r3, r3, #2
 8004a9c:	81a3      	strh	r3, [r4, #12]
 8004a9e:	e7e3      	b.n	8004a68 <__smakebuf_r+0xc>
 8004aa0:	4b0d      	ldr	r3, [pc, #52]	; (8004ad8 <__smakebuf_r+0x7c>)
 8004aa2:	62b3      	str	r3, [r6, #40]	; 0x28
 8004aa4:	89a3      	ldrh	r3, [r4, #12]
 8004aa6:	6020      	str	r0, [r4, #0]
 8004aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aac:	81a3      	strh	r3, [r4, #12]
 8004aae:	9b00      	ldr	r3, [sp, #0]
 8004ab0:	6120      	str	r0, [r4, #16]
 8004ab2:	6163      	str	r3, [r4, #20]
 8004ab4:	9b01      	ldr	r3, [sp, #4]
 8004ab6:	b15b      	cbz	r3, 8004ad0 <__smakebuf_r+0x74>
 8004ab8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004abc:	4630      	mov	r0, r6
 8004abe:	f000 fb09 	bl	80050d4 <_isatty_r>
 8004ac2:	b128      	cbz	r0, 8004ad0 <__smakebuf_r+0x74>
 8004ac4:	89a3      	ldrh	r3, [r4, #12]
 8004ac6:	f023 0303 	bic.w	r3, r3, #3
 8004aca:	f043 0301 	orr.w	r3, r3, #1
 8004ace:	81a3      	strh	r3, [r4, #12]
 8004ad0:	89a3      	ldrh	r3, [r4, #12]
 8004ad2:	431d      	orrs	r5, r3
 8004ad4:	81a5      	strh	r5, [r4, #12]
 8004ad6:	e7cd      	b.n	8004a74 <__smakebuf_r+0x18>
 8004ad8:	0800485d 	.word	0x0800485d

08004adc <__malloc_lock>:
 8004adc:	4770      	bx	lr

08004ade <__malloc_unlock>:
 8004ade:	4770      	bx	lr

08004ae0 <__sfputc_r>:
 8004ae0:	6893      	ldr	r3, [r2, #8]
 8004ae2:	b410      	push	{r4}
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	6093      	str	r3, [r2, #8]
 8004aea:	da08      	bge.n	8004afe <__sfputc_r+0x1e>
 8004aec:	6994      	ldr	r4, [r2, #24]
 8004aee:	42a3      	cmp	r3, r4
 8004af0:	db02      	blt.n	8004af8 <__sfputc_r+0x18>
 8004af2:	b2cb      	uxtb	r3, r1
 8004af4:	2b0a      	cmp	r3, #10
 8004af6:	d102      	bne.n	8004afe <__sfputc_r+0x1e>
 8004af8:	bc10      	pop	{r4}
 8004afa:	f7ff bd1b 	b.w	8004534 <__swbuf_r>
 8004afe:	6813      	ldr	r3, [r2, #0]
 8004b00:	1c58      	adds	r0, r3, #1
 8004b02:	6010      	str	r0, [r2, #0]
 8004b04:	7019      	strb	r1, [r3, #0]
 8004b06:	b2c8      	uxtb	r0, r1
 8004b08:	bc10      	pop	{r4}
 8004b0a:	4770      	bx	lr

08004b0c <__sfputs_r>:
 8004b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0e:	4606      	mov	r6, r0
 8004b10:	460f      	mov	r7, r1
 8004b12:	4614      	mov	r4, r2
 8004b14:	18d5      	adds	r5, r2, r3
 8004b16:	42ac      	cmp	r4, r5
 8004b18:	d101      	bne.n	8004b1e <__sfputs_r+0x12>
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	e007      	b.n	8004b2e <__sfputs_r+0x22>
 8004b1e:	463a      	mov	r2, r7
 8004b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b24:	4630      	mov	r0, r6
 8004b26:	f7ff ffdb 	bl	8004ae0 <__sfputc_r>
 8004b2a:	1c43      	adds	r3, r0, #1
 8004b2c:	d1f3      	bne.n	8004b16 <__sfputs_r+0xa>
 8004b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004b30 <_vfiprintf_r>:
 8004b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b34:	b09d      	sub	sp, #116	; 0x74
 8004b36:	460c      	mov	r4, r1
 8004b38:	4617      	mov	r7, r2
 8004b3a:	9303      	str	r3, [sp, #12]
 8004b3c:	4606      	mov	r6, r0
 8004b3e:	b118      	cbz	r0, 8004b48 <_vfiprintf_r+0x18>
 8004b40:	6983      	ldr	r3, [r0, #24]
 8004b42:	b90b      	cbnz	r3, 8004b48 <_vfiprintf_r+0x18>
 8004b44:	f7ff feca 	bl	80048dc <__sinit>
 8004b48:	4b7c      	ldr	r3, [pc, #496]	; (8004d3c <_vfiprintf_r+0x20c>)
 8004b4a:	429c      	cmp	r4, r3
 8004b4c:	d157      	bne.n	8004bfe <_vfiprintf_r+0xce>
 8004b4e:	6874      	ldr	r4, [r6, #4]
 8004b50:	89a3      	ldrh	r3, [r4, #12]
 8004b52:	0718      	lsls	r0, r3, #28
 8004b54:	d55d      	bpl.n	8004c12 <_vfiprintf_r+0xe2>
 8004b56:	6923      	ldr	r3, [r4, #16]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d05a      	beq.n	8004c12 <_vfiprintf_r+0xe2>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b60:	2320      	movs	r3, #32
 8004b62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b66:	2330      	movs	r3, #48	; 0x30
 8004b68:	f04f 0b01 	mov.w	fp, #1
 8004b6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b70:	46b8      	mov	r8, r7
 8004b72:	4645      	mov	r5, r8
 8004b74:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d155      	bne.n	8004c28 <_vfiprintf_r+0xf8>
 8004b7c:	ebb8 0a07 	subs.w	sl, r8, r7
 8004b80:	d00b      	beq.n	8004b9a <_vfiprintf_r+0x6a>
 8004b82:	4653      	mov	r3, sl
 8004b84:	463a      	mov	r2, r7
 8004b86:	4621      	mov	r1, r4
 8004b88:	4630      	mov	r0, r6
 8004b8a:	f7ff ffbf 	bl	8004b0c <__sfputs_r>
 8004b8e:	3001      	adds	r0, #1
 8004b90:	f000 80c4 	beq.w	8004d1c <_vfiprintf_r+0x1ec>
 8004b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b96:	4453      	add	r3, sl
 8004b98:	9309      	str	r3, [sp, #36]	; 0x24
 8004b9a:	f898 3000 	ldrb.w	r3, [r8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 80bc 	beq.w	8004d1c <_vfiprintf_r+0x1ec>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8004baa:	9304      	str	r3, [sp, #16]
 8004bac:	9307      	str	r3, [sp, #28]
 8004bae:	9205      	str	r2, [sp, #20]
 8004bb0:	9306      	str	r3, [sp, #24]
 8004bb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bb6:	931a      	str	r3, [sp, #104]	; 0x68
 8004bb8:	2205      	movs	r2, #5
 8004bba:	7829      	ldrb	r1, [r5, #0]
 8004bbc:	4860      	ldr	r0, [pc, #384]	; (8004d40 <_vfiprintf_r+0x210>)
 8004bbe:	f000 fa99 	bl	80050f4 <memchr>
 8004bc2:	f105 0801 	add.w	r8, r5, #1
 8004bc6:	9b04      	ldr	r3, [sp, #16]
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	d131      	bne.n	8004c30 <_vfiprintf_r+0x100>
 8004bcc:	06d9      	lsls	r1, r3, #27
 8004bce:	bf44      	itt	mi
 8004bd0:	2220      	movmi	r2, #32
 8004bd2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004bd6:	071a      	lsls	r2, r3, #28
 8004bd8:	bf44      	itt	mi
 8004bda:	222b      	movmi	r2, #43	; 0x2b
 8004bdc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004be0:	782a      	ldrb	r2, [r5, #0]
 8004be2:	2a2a      	cmp	r2, #42	; 0x2a
 8004be4:	d02c      	beq.n	8004c40 <_vfiprintf_r+0x110>
 8004be6:	2100      	movs	r1, #0
 8004be8:	200a      	movs	r0, #10
 8004bea:	9a07      	ldr	r2, [sp, #28]
 8004bec:	46a8      	mov	r8, r5
 8004bee:	f898 3000 	ldrb.w	r3, [r8]
 8004bf2:	3501      	adds	r5, #1
 8004bf4:	3b30      	subs	r3, #48	; 0x30
 8004bf6:	2b09      	cmp	r3, #9
 8004bf8:	d96d      	bls.n	8004cd6 <_vfiprintf_r+0x1a6>
 8004bfa:	b371      	cbz	r1, 8004c5a <_vfiprintf_r+0x12a>
 8004bfc:	e026      	b.n	8004c4c <_vfiprintf_r+0x11c>
 8004bfe:	4b51      	ldr	r3, [pc, #324]	; (8004d44 <_vfiprintf_r+0x214>)
 8004c00:	429c      	cmp	r4, r3
 8004c02:	d101      	bne.n	8004c08 <_vfiprintf_r+0xd8>
 8004c04:	68b4      	ldr	r4, [r6, #8]
 8004c06:	e7a3      	b.n	8004b50 <_vfiprintf_r+0x20>
 8004c08:	4b4f      	ldr	r3, [pc, #316]	; (8004d48 <_vfiprintf_r+0x218>)
 8004c0a:	429c      	cmp	r4, r3
 8004c0c:	bf08      	it	eq
 8004c0e:	68f4      	ldreq	r4, [r6, #12]
 8004c10:	e79e      	b.n	8004b50 <_vfiprintf_r+0x20>
 8004c12:	4621      	mov	r1, r4
 8004c14:	4630      	mov	r0, r6
 8004c16:	f7ff fcf1 	bl	80045fc <__swsetup_r>
 8004c1a:	2800      	cmp	r0, #0
 8004c1c:	d09e      	beq.n	8004b5c <_vfiprintf_r+0x2c>
 8004c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c22:	b01d      	add	sp, #116	; 0x74
 8004c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c28:	2b25      	cmp	r3, #37	; 0x25
 8004c2a:	d0a7      	beq.n	8004b7c <_vfiprintf_r+0x4c>
 8004c2c:	46a8      	mov	r8, r5
 8004c2e:	e7a0      	b.n	8004b72 <_vfiprintf_r+0x42>
 8004c30:	4a43      	ldr	r2, [pc, #268]	; (8004d40 <_vfiprintf_r+0x210>)
 8004c32:	4645      	mov	r5, r8
 8004c34:	1a80      	subs	r0, r0, r2
 8004c36:	fa0b f000 	lsl.w	r0, fp, r0
 8004c3a:	4318      	orrs	r0, r3
 8004c3c:	9004      	str	r0, [sp, #16]
 8004c3e:	e7bb      	b.n	8004bb8 <_vfiprintf_r+0x88>
 8004c40:	9a03      	ldr	r2, [sp, #12]
 8004c42:	1d11      	adds	r1, r2, #4
 8004c44:	6812      	ldr	r2, [r2, #0]
 8004c46:	9103      	str	r1, [sp, #12]
 8004c48:	2a00      	cmp	r2, #0
 8004c4a:	db01      	blt.n	8004c50 <_vfiprintf_r+0x120>
 8004c4c:	9207      	str	r2, [sp, #28]
 8004c4e:	e004      	b.n	8004c5a <_vfiprintf_r+0x12a>
 8004c50:	4252      	negs	r2, r2
 8004c52:	f043 0302 	orr.w	r3, r3, #2
 8004c56:	9207      	str	r2, [sp, #28]
 8004c58:	9304      	str	r3, [sp, #16]
 8004c5a:	f898 3000 	ldrb.w	r3, [r8]
 8004c5e:	2b2e      	cmp	r3, #46	; 0x2e
 8004c60:	d110      	bne.n	8004c84 <_vfiprintf_r+0x154>
 8004c62:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004c66:	f108 0101 	add.w	r1, r8, #1
 8004c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8004c6c:	d137      	bne.n	8004cde <_vfiprintf_r+0x1ae>
 8004c6e:	9b03      	ldr	r3, [sp, #12]
 8004c70:	f108 0802 	add.w	r8, r8, #2
 8004c74:	1d1a      	adds	r2, r3, #4
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	9203      	str	r2, [sp, #12]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	bfb8      	it	lt
 8004c7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c82:	9305      	str	r3, [sp, #20]
 8004c84:	4d31      	ldr	r5, [pc, #196]	; (8004d4c <_vfiprintf_r+0x21c>)
 8004c86:	2203      	movs	r2, #3
 8004c88:	f898 1000 	ldrb.w	r1, [r8]
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	f000 fa31 	bl	80050f4 <memchr>
 8004c92:	b140      	cbz	r0, 8004ca6 <_vfiprintf_r+0x176>
 8004c94:	2340      	movs	r3, #64	; 0x40
 8004c96:	1b40      	subs	r0, r0, r5
 8004c98:	fa03 f000 	lsl.w	r0, r3, r0
 8004c9c:	9b04      	ldr	r3, [sp, #16]
 8004c9e:	f108 0801 	add.w	r8, r8, #1
 8004ca2:	4303      	orrs	r3, r0
 8004ca4:	9304      	str	r3, [sp, #16]
 8004ca6:	f898 1000 	ldrb.w	r1, [r8]
 8004caa:	2206      	movs	r2, #6
 8004cac:	4828      	ldr	r0, [pc, #160]	; (8004d50 <_vfiprintf_r+0x220>)
 8004cae:	f108 0701 	add.w	r7, r8, #1
 8004cb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cb6:	f000 fa1d 	bl	80050f4 <memchr>
 8004cba:	2800      	cmp	r0, #0
 8004cbc:	d034      	beq.n	8004d28 <_vfiprintf_r+0x1f8>
 8004cbe:	4b25      	ldr	r3, [pc, #148]	; (8004d54 <_vfiprintf_r+0x224>)
 8004cc0:	bb03      	cbnz	r3, 8004d04 <_vfiprintf_r+0x1d4>
 8004cc2:	9b03      	ldr	r3, [sp, #12]
 8004cc4:	3307      	adds	r3, #7
 8004cc6:	f023 0307 	bic.w	r3, r3, #7
 8004cca:	3308      	adds	r3, #8
 8004ccc:	9303      	str	r3, [sp, #12]
 8004cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cd0:	444b      	add	r3, r9
 8004cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8004cd4:	e74c      	b.n	8004b70 <_vfiprintf_r+0x40>
 8004cd6:	fb00 3202 	mla	r2, r0, r2, r3
 8004cda:	2101      	movs	r1, #1
 8004cdc:	e786      	b.n	8004bec <_vfiprintf_r+0xbc>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	250a      	movs	r5, #10
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	9305      	str	r3, [sp, #20]
 8004ce6:	4688      	mov	r8, r1
 8004ce8:	f898 2000 	ldrb.w	r2, [r8]
 8004cec:	3101      	adds	r1, #1
 8004cee:	3a30      	subs	r2, #48	; 0x30
 8004cf0:	2a09      	cmp	r2, #9
 8004cf2:	d903      	bls.n	8004cfc <_vfiprintf_r+0x1cc>
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0c5      	beq.n	8004c84 <_vfiprintf_r+0x154>
 8004cf8:	9005      	str	r0, [sp, #20]
 8004cfa:	e7c3      	b.n	8004c84 <_vfiprintf_r+0x154>
 8004cfc:	fb05 2000 	mla	r0, r5, r0, r2
 8004d00:	2301      	movs	r3, #1
 8004d02:	e7f0      	b.n	8004ce6 <_vfiprintf_r+0x1b6>
 8004d04:	ab03      	add	r3, sp, #12
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	4622      	mov	r2, r4
 8004d0a:	4b13      	ldr	r3, [pc, #76]	; (8004d58 <_vfiprintf_r+0x228>)
 8004d0c:	a904      	add	r1, sp, #16
 8004d0e:	4630      	mov	r0, r6
 8004d10:	f3af 8000 	nop.w
 8004d14:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004d18:	4681      	mov	r9, r0
 8004d1a:	d1d8      	bne.n	8004cce <_vfiprintf_r+0x19e>
 8004d1c:	89a3      	ldrh	r3, [r4, #12]
 8004d1e:	065b      	lsls	r3, r3, #25
 8004d20:	f53f af7d 	bmi.w	8004c1e <_vfiprintf_r+0xee>
 8004d24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d26:	e77c      	b.n	8004c22 <_vfiprintf_r+0xf2>
 8004d28:	ab03      	add	r3, sp, #12
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	4622      	mov	r2, r4
 8004d2e:	4b0a      	ldr	r3, [pc, #40]	; (8004d58 <_vfiprintf_r+0x228>)
 8004d30:	a904      	add	r1, sp, #16
 8004d32:	4630      	mov	r0, r6
 8004d34:	f000 f88a 	bl	8004e4c <_printf_i>
 8004d38:	e7ec      	b.n	8004d14 <_vfiprintf_r+0x1e4>
 8004d3a:	bf00      	nop
 8004d3c:	0800521c 	.word	0x0800521c
 8004d40:	0800525c 	.word	0x0800525c
 8004d44:	0800523c 	.word	0x0800523c
 8004d48:	080051fc 	.word	0x080051fc
 8004d4c:	08005262 	.word	0x08005262
 8004d50:	08005266 	.word	0x08005266
 8004d54:	00000000 	.word	0x00000000
 8004d58:	08004b0d 	.word	0x08004b0d

08004d5c <_printf_common>:
 8004d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d60:	4691      	mov	r9, r2
 8004d62:	461f      	mov	r7, r3
 8004d64:	688a      	ldr	r2, [r1, #8]
 8004d66:	690b      	ldr	r3, [r1, #16]
 8004d68:	4606      	mov	r6, r0
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	bfb8      	it	lt
 8004d6e:	4613      	movlt	r3, r2
 8004d70:	f8c9 3000 	str.w	r3, [r9]
 8004d74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d78:	460c      	mov	r4, r1
 8004d7a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d7e:	b112      	cbz	r2, 8004d86 <_printf_common+0x2a>
 8004d80:	3301      	adds	r3, #1
 8004d82:	f8c9 3000 	str.w	r3, [r9]
 8004d86:	6823      	ldr	r3, [r4, #0]
 8004d88:	0699      	lsls	r1, r3, #26
 8004d8a:	bf42      	ittt	mi
 8004d8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004d90:	3302      	addmi	r3, #2
 8004d92:	f8c9 3000 	strmi.w	r3, [r9]
 8004d96:	6825      	ldr	r5, [r4, #0]
 8004d98:	f015 0506 	ands.w	r5, r5, #6
 8004d9c:	d107      	bne.n	8004dae <_printf_common+0x52>
 8004d9e:	f104 0a19 	add.w	sl, r4, #25
 8004da2:	68e3      	ldr	r3, [r4, #12]
 8004da4:	f8d9 2000 	ldr.w	r2, [r9]
 8004da8:	1a9b      	subs	r3, r3, r2
 8004daa:	429d      	cmp	r5, r3
 8004dac:	db2a      	blt.n	8004e04 <_printf_common+0xa8>
 8004dae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004db2:	6822      	ldr	r2, [r4, #0]
 8004db4:	3300      	adds	r3, #0
 8004db6:	bf18      	it	ne
 8004db8:	2301      	movne	r3, #1
 8004dba:	0692      	lsls	r2, r2, #26
 8004dbc:	d42f      	bmi.n	8004e1e <_printf_common+0xc2>
 8004dbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dc2:	4639      	mov	r1, r7
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	47c0      	blx	r8
 8004dc8:	3001      	adds	r0, #1
 8004dca:	d022      	beq.n	8004e12 <_printf_common+0xb6>
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	68e5      	ldr	r5, [r4, #12]
 8004dd0:	f003 0306 	and.w	r3, r3, #6
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	bf18      	it	ne
 8004dd8:	2500      	movne	r5, #0
 8004dda:	f8d9 2000 	ldr.w	r2, [r9]
 8004dde:	f04f 0900 	mov.w	r9, #0
 8004de2:	bf08      	it	eq
 8004de4:	1aad      	subeq	r5, r5, r2
 8004de6:	68a3      	ldr	r3, [r4, #8]
 8004de8:	6922      	ldr	r2, [r4, #16]
 8004dea:	bf08      	it	eq
 8004dec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004df0:	4293      	cmp	r3, r2
 8004df2:	bfc4      	itt	gt
 8004df4:	1a9b      	subgt	r3, r3, r2
 8004df6:	18ed      	addgt	r5, r5, r3
 8004df8:	341a      	adds	r4, #26
 8004dfa:	454d      	cmp	r5, r9
 8004dfc:	d11b      	bne.n	8004e36 <_printf_common+0xda>
 8004dfe:	2000      	movs	r0, #0
 8004e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e04:	2301      	movs	r3, #1
 8004e06:	4652      	mov	r2, sl
 8004e08:	4639      	mov	r1, r7
 8004e0a:	4630      	mov	r0, r6
 8004e0c:	47c0      	blx	r8
 8004e0e:	3001      	adds	r0, #1
 8004e10:	d103      	bne.n	8004e1a <_printf_common+0xbe>
 8004e12:	f04f 30ff 	mov.w	r0, #4294967295
 8004e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e1a:	3501      	adds	r5, #1
 8004e1c:	e7c1      	b.n	8004da2 <_printf_common+0x46>
 8004e1e:	2030      	movs	r0, #48	; 0x30
 8004e20:	18e1      	adds	r1, r4, r3
 8004e22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e2c:	4422      	add	r2, r4
 8004e2e:	3302      	adds	r3, #2
 8004e30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e34:	e7c3      	b.n	8004dbe <_printf_common+0x62>
 8004e36:	2301      	movs	r3, #1
 8004e38:	4622      	mov	r2, r4
 8004e3a:	4639      	mov	r1, r7
 8004e3c:	4630      	mov	r0, r6
 8004e3e:	47c0      	blx	r8
 8004e40:	3001      	adds	r0, #1
 8004e42:	d0e6      	beq.n	8004e12 <_printf_common+0xb6>
 8004e44:	f109 0901 	add.w	r9, r9, #1
 8004e48:	e7d7      	b.n	8004dfa <_printf_common+0x9e>
	...

08004e4c <_printf_i>:
 8004e4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e50:	4617      	mov	r7, r2
 8004e52:	7e0a      	ldrb	r2, [r1, #24]
 8004e54:	b085      	sub	sp, #20
 8004e56:	2a6e      	cmp	r2, #110	; 0x6e
 8004e58:	4698      	mov	r8, r3
 8004e5a:	4606      	mov	r6, r0
 8004e5c:	460c      	mov	r4, r1
 8004e5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e60:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004e64:	f000 80bc 	beq.w	8004fe0 <_printf_i+0x194>
 8004e68:	d81a      	bhi.n	8004ea0 <_printf_i+0x54>
 8004e6a:	2a63      	cmp	r2, #99	; 0x63
 8004e6c:	d02e      	beq.n	8004ecc <_printf_i+0x80>
 8004e6e:	d80a      	bhi.n	8004e86 <_printf_i+0x3a>
 8004e70:	2a00      	cmp	r2, #0
 8004e72:	f000 80c8 	beq.w	8005006 <_printf_i+0x1ba>
 8004e76:	2a58      	cmp	r2, #88	; 0x58
 8004e78:	f000 808a 	beq.w	8004f90 <_printf_i+0x144>
 8004e7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e80:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004e84:	e02a      	b.n	8004edc <_printf_i+0x90>
 8004e86:	2a64      	cmp	r2, #100	; 0x64
 8004e88:	d001      	beq.n	8004e8e <_printf_i+0x42>
 8004e8a:	2a69      	cmp	r2, #105	; 0x69
 8004e8c:	d1f6      	bne.n	8004e7c <_printf_i+0x30>
 8004e8e:	6821      	ldr	r1, [r4, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004e96:	d023      	beq.n	8004ee0 <_printf_i+0x94>
 8004e98:	1d11      	adds	r1, r2, #4
 8004e9a:	6019      	str	r1, [r3, #0]
 8004e9c:	6813      	ldr	r3, [r2, #0]
 8004e9e:	e027      	b.n	8004ef0 <_printf_i+0xa4>
 8004ea0:	2a73      	cmp	r2, #115	; 0x73
 8004ea2:	f000 80b4 	beq.w	800500e <_printf_i+0x1c2>
 8004ea6:	d808      	bhi.n	8004eba <_printf_i+0x6e>
 8004ea8:	2a6f      	cmp	r2, #111	; 0x6f
 8004eaa:	d02a      	beq.n	8004f02 <_printf_i+0xb6>
 8004eac:	2a70      	cmp	r2, #112	; 0x70
 8004eae:	d1e5      	bne.n	8004e7c <_printf_i+0x30>
 8004eb0:	680a      	ldr	r2, [r1, #0]
 8004eb2:	f042 0220 	orr.w	r2, r2, #32
 8004eb6:	600a      	str	r2, [r1, #0]
 8004eb8:	e003      	b.n	8004ec2 <_printf_i+0x76>
 8004eba:	2a75      	cmp	r2, #117	; 0x75
 8004ebc:	d021      	beq.n	8004f02 <_printf_i+0xb6>
 8004ebe:	2a78      	cmp	r2, #120	; 0x78
 8004ec0:	d1dc      	bne.n	8004e7c <_printf_i+0x30>
 8004ec2:	2278      	movs	r2, #120	; 0x78
 8004ec4:	496f      	ldr	r1, [pc, #444]	; (8005084 <_printf_i+0x238>)
 8004ec6:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004eca:	e064      	b.n	8004f96 <_printf_i+0x14a>
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004ed2:	1d11      	adds	r1, r2, #4
 8004ed4:	6019      	str	r1, [r3, #0]
 8004ed6:	6813      	ldr	r3, [r2, #0]
 8004ed8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004edc:	2301      	movs	r3, #1
 8004ede:	e0a3      	b.n	8005028 <_printf_i+0x1dc>
 8004ee0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004ee4:	f102 0104 	add.w	r1, r2, #4
 8004ee8:	6019      	str	r1, [r3, #0]
 8004eea:	d0d7      	beq.n	8004e9c <_printf_i+0x50>
 8004eec:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	da03      	bge.n	8004efc <_printf_i+0xb0>
 8004ef4:	222d      	movs	r2, #45	; 0x2d
 8004ef6:	425b      	negs	r3, r3
 8004ef8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004efc:	4962      	ldr	r1, [pc, #392]	; (8005088 <_printf_i+0x23c>)
 8004efe:	220a      	movs	r2, #10
 8004f00:	e017      	b.n	8004f32 <_printf_i+0xe6>
 8004f02:	6820      	ldr	r0, [r4, #0]
 8004f04:	6819      	ldr	r1, [r3, #0]
 8004f06:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004f0a:	d003      	beq.n	8004f14 <_printf_i+0xc8>
 8004f0c:	1d08      	adds	r0, r1, #4
 8004f0e:	6018      	str	r0, [r3, #0]
 8004f10:	680b      	ldr	r3, [r1, #0]
 8004f12:	e006      	b.n	8004f22 <_printf_i+0xd6>
 8004f14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f18:	f101 0004 	add.w	r0, r1, #4
 8004f1c:	6018      	str	r0, [r3, #0]
 8004f1e:	d0f7      	beq.n	8004f10 <_printf_i+0xc4>
 8004f20:	880b      	ldrh	r3, [r1, #0]
 8004f22:	2a6f      	cmp	r2, #111	; 0x6f
 8004f24:	bf14      	ite	ne
 8004f26:	220a      	movne	r2, #10
 8004f28:	2208      	moveq	r2, #8
 8004f2a:	4957      	ldr	r1, [pc, #348]	; (8005088 <_printf_i+0x23c>)
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004f32:	6865      	ldr	r5, [r4, #4]
 8004f34:	2d00      	cmp	r5, #0
 8004f36:	60a5      	str	r5, [r4, #8]
 8004f38:	f2c0 809c 	blt.w	8005074 <_printf_i+0x228>
 8004f3c:	6820      	ldr	r0, [r4, #0]
 8004f3e:	f020 0004 	bic.w	r0, r0, #4
 8004f42:	6020      	str	r0, [r4, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d13f      	bne.n	8004fc8 <_printf_i+0x17c>
 8004f48:	2d00      	cmp	r5, #0
 8004f4a:	f040 8095 	bne.w	8005078 <_printf_i+0x22c>
 8004f4e:	4675      	mov	r5, lr
 8004f50:	2a08      	cmp	r2, #8
 8004f52:	d10b      	bne.n	8004f6c <_printf_i+0x120>
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	07da      	lsls	r2, r3, #31
 8004f58:	d508      	bpl.n	8004f6c <_printf_i+0x120>
 8004f5a:	6923      	ldr	r3, [r4, #16]
 8004f5c:	6862      	ldr	r2, [r4, #4]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	bfde      	ittt	le
 8004f62:	2330      	movle	r3, #48	; 0x30
 8004f64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f6c:	ebae 0305 	sub.w	r3, lr, r5
 8004f70:	6123      	str	r3, [r4, #16]
 8004f72:	f8cd 8000 	str.w	r8, [sp]
 8004f76:	463b      	mov	r3, r7
 8004f78:	aa03      	add	r2, sp, #12
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	f7ff feed 	bl	8004d5c <_printf_common>
 8004f82:	3001      	adds	r0, #1
 8004f84:	d155      	bne.n	8005032 <_printf_i+0x1e6>
 8004f86:	f04f 30ff 	mov.w	r0, #4294967295
 8004f8a:	b005      	add	sp, #20
 8004f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f90:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004f94:	493c      	ldr	r1, [pc, #240]	; (8005088 <_printf_i+0x23c>)
 8004f96:	6822      	ldr	r2, [r4, #0]
 8004f98:	6818      	ldr	r0, [r3, #0]
 8004f9a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004f9e:	f100 0504 	add.w	r5, r0, #4
 8004fa2:	601d      	str	r5, [r3, #0]
 8004fa4:	d001      	beq.n	8004faa <_printf_i+0x15e>
 8004fa6:	6803      	ldr	r3, [r0, #0]
 8004fa8:	e002      	b.n	8004fb0 <_printf_i+0x164>
 8004faa:	0655      	lsls	r5, r2, #25
 8004fac:	d5fb      	bpl.n	8004fa6 <_printf_i+0x15a>
 8004fae:	8803      	ldrh	r3, [r0, #0]
 8004fb0:	07d0      	lsls	r0, r2, #31
 8004fb2:	bf44      	itt	mi
 8004fb4:	f042 0220 	orrmi.w	r2, r2, #32
 8004fb8:	6022      	strmi	r2, [r4, #0]
 8004fba:	b91b      	cbnz	r3, 8004fc4 <_printf_i+0x178>
 8004fbc:	6822      	ldr	r2, [r4, #0]
 8004fbe:	f022 0220 	bic.w	r2, r2, #32
 8004fc2:	6022      	str	r2, [r4, #0]
 8004fc4:	2210      	movs	r2, #16
 8004fc6:	e7b1      	b.n	8004f2c <_printf_i+0xe0>
 8004fc8:	4675      	mov	r5, lr
 8004fca:	fbb3 f0f2 	udiv	r0, r3, r2
 8004fce:	fb02 3310 	mls	r3, r2, r0, r3
 8004fd2:	5ccb      	ldrb	r3, [r1, r3]
 8004fd4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	d1f5      	bne.n	8004fca <_printf_i+0x17e>
 8004fde:	e7b7      	b.n	8004f50 <_printf_i+0x104>
 8004fe0:	6808      	ldr	r0, [r1, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004fe8:	6949      	ldr	r1, [r1, #20]
 8004fea:	d004      	beq.n	8004ff6 <_printf_i+0x1aa>
 8004fec:	1d10      	adds	r0, r2, #4
 8004fee:	6018      	str	r0, [r3, #0]
 8004ff0:	6813      	ldr	r3, [r2, #0]
 8004ff2:	6019      	str	r1, [r3, #0]
 8004ff4:	e007      	b.n	8005006 <_printf_i+0x1ba>
 8004ff6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ffa:	f102 0004 	add.w	r0, r2, #4
 8004ffe:	6018      	str	r0, [r3, #0]
 8005000:	6813      	ldr	r3, [r2, #0]
 8005002:	d0f6      	beq.n	8004ff2 <_printf_i+0x1a6>
 8005004:	8019      	strh	r1, [r3, #0]
 8005006:	2300      	movs	r3, #0
 8005008:	4675      	mov	r5, lr
 800500a:	6123      	str	r3, [r4, #16]
 800500c:	e7b1      	b.n	8004f72 <_printf_i+0x126>
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	1d11      	adds	r1, r2, #4
 8005012:	6019      	str	r1, [r3, #0]
 8005014:	6815      	ldr	r5, [r2, #0]
 8005016:	2100      	movs	r1, #0
 8005018:	6862      	ldr	r2, [r4, #4]
 800501a:	4628      	mov	r0, r5
 800501c:	f000 f86a 	bl	80050f4 <memchr>
 8005020:	b108      	cbz	r0, 8005026 <_printf_i+0x1da>
 8005022:	1b40      	subs	r0, r0, r5
 8005024:	6060      	str	r0, [r4, #4]
 8005026:	6863      	ldr	r3, [r4, #4]
 8005028:	6123      	str	r3, [r4, #16]
 800502a:	2300      	movs	r3, #0
 800502c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005030:	e79f      	b.n	8004f72 <_printf_i+0x126>
 8005032:	6923      	ldr	r3, [r4, #16]
 8005034:	462a      	mov	r2, r5
 8005036:	4639      	mov	r1, r7
 8005038:	4630      	mov	r0, r6
 800503a:	47c0      	blx	r8
 800503c:	3001      	adds	r0, #1
 800503e:	d0a2      	beq.n	8004f86 <_printf_i+0x13a>
 8005040:	6823      	ldr	r3, [r4, #0]
 8005042:	079b      	lsls	r3, r3, #30
 8005044:	d507      	bpl.n	8005056 <_printf_i+0x20a>
 8005046:	2500      	movs	r5, #0
 8005048:	f104 0919 	add.w	r9, r4, #25
 800504c:	68e3      	ldr	r3, [r4, #12]
 800504e:	9a03      	ldr	r2, [sp, #12]
 8005050:	1a9b      	subs	r3, r3, r2
 8005052:	429d      	cmp	r5, r3
 8005054:	db05      	blt.n	8005062 <_printf_i+0x216>
 8005056:	68e0      	ldr	r0, [r4, #12]
 8005058:	9b03      	ldr	r3, [sp, #12]
 800505a:	4298      	cmp	r0, r3
 800505c:	bfb8      	it	lt
 800505e:	4618      	movlt	r0, r3
 8005060:	e793      	b.n	8004f8a <_printf_i+0x13e>
 8005062:	2301      	movs	r3, #1
 8005064:	464a      	mov	r2, r9
 8005066:	4639      	mov	r1, r7
 8005068:	4630      	mov	r0, r6
 800506a:	47c0      	blx	r8
 800506c:	3001      	adds	r0, #1
 800506e:	d08a      	beq.n	8004f86 <_printf_i+0x13a>
 8005070:	3501      	adds	r5, #1
 8005072:	e7eb      	b.n	800504c <_printf_i+0x200>
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1a7      	bne.n	8004fc8 <_printf_i+0x17c>
 8005078:	780b      	ldrb	r3, [r1, #0]
 800507a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800507e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005082:	e765      	b.n	8004f50 <_printf_i+0x104>
 8005084:	0800527e 	.word	0x0800527e
 8005088:	0800526d 	.word	0x0800526d

0800508c <_read_r>:
 800508c:	b538      	push	{r3, r4, r5, lr}
 800508e:	4605      	mov	r5, r0
 8005090:	4608      	mov	r0, r1
 8005092:	4611      	mov	r1, r2
 8005094:	2200      	movs	r2, #0
 8005096:	4c05      	ldr	r4, [pc, #20]	; (80050ac <_read_r+0x20>)
 8005098:	6022      	str	r2, [r4, #0]
 800509a:	461a      	mov	r2, r3
 800509c:	f7fe ff72 	bl	8003f84 <_read>
 80050a0:	1c43      	adds	r3, r0, #1
 80050a2:	d102      	bne.n	80050aa <_read_r+0x1e>
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	b103      	cbz	r3, 80050aa <_read_r+0x1e>
 80050a8:	602b      	str	r3, [r5, #0]
 80050aa:	bd38      	pop	{r3, r4, r5, pc}
 80050ac:	20000a30 	.word	0x20000a30

080050b0 <_fstat_r>:
 80050b0:	b538      	push	{r3, r4, r5, lr}
 80050b2:	2300      	movs	r3, #0
 80050b4:	4c06      	ldr	r4, [pc, #24]	; (80050d0 <_fstat_r+0x20>)
 80050b6:	4605      	mov	r5, r0
 80050b8:	4608      	mov	r0, r1
 80050ba:	4611      	mov	r1, r2
 80050bc:	6023      	str	r3, [r4, #0]
 80050be:	f7fe ffb6 	bl	800402e <_fstat>
 80050c2:	1c43      	adds	r3, r0, #1
 80050c4:	d102      	bne.n	80050cc <_fstat_r+0x1c>
 80050c6:	6823      	ldr	r3, [r4, #0]
 80050c8:	b103      	cbz	r3, 80050cc <_fstat_r+0x1c>
 80050ca:	602b      	str	r3, [r5, #0]
 80050cc:	bd38      	pop	{r3, r4, r5, pc}
 80050ce:	bf00      	nop
 80050d0:	20000a30 	.word	0x20000a30

080050d4 <_isatty_r>:
 80050d4:	b538      	push	{r3, r4, r5, lr}
 80050d6:	2300      	movs	r3, #0
 80050d8:	4c05      	ldr	r4, [pc, #20]	; (80050f0 <_isatty_r+0x1c>)
 80050da:	4605      	mov	r5, r0
 80050dc:	4608      	mov	r0, r1
 80050de:	6023      	str	r3, [r4, #0]
 80050e0:	f7fe ffb4 	bl	800404c <_isatty>
 80050e4:	1c43      	adds	r3, r0, #1
 80050e6:	d102      	bne.n	80050ee <_isatty_r+0x1a>
 80050e8:	6823      	ldr	r3, [r4, #0]
 80050ea:	b103      	cbz	r3, 80050ee <_isatty_r+0x1a>
 80050ec:	602b      	str	r3, [r5, #0]
 80050ee:	bd38      	pop	{r3, r4, r5, pc}
 80050f0:	20000a30 	.word	0x20000a30

080050f4 <memchr>:
 80050f4:	b510      	push	{r4, lr}
 80050f6:	b2c9      	uxtb	r1, r1
 80050f8:	4402      	add	r2, r0
 80050fa:	4290      	cmp	r0, r2
 80050fc:	4603      	mov	r3, r0
 80050fe:	d101      	bne.n	8005104 <memchr+0x10>
 8005100:	2000      	movs	r0, #0
 8005102:	bd10      	pop	{r4, pc}
 8005104:	781c      	ldrb	r4, [r3, #0]
 8005106:	3001      	adds	r0, #1
 8005108:	428c      	cmp	r4, r1
 800510a:	d1f6      	bne.n	80050fa <memchr+0x6>
 800510c:	4618      	mov	r0, r3
 800510e:	bd10      	pop	{r4, pc}

08005110 <_init>:
 8005110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005112:	bf00      	nop
 8005114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005116:	bc08      	pop	{r3}
 8005118:	469e      	mov	lr, r3
 800511a:	4770      	bx	lr

0800511c <_fini>:
 800511c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511e:	bf00      	nop
 8005120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005122:	bc08      	pop	{r3}
 8005124:	469e      	mov	lr, r3
 8005126:	4770      	bx	lr
