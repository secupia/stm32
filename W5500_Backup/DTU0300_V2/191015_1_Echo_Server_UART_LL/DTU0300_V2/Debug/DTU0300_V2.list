
DTU0300_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cac  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08004e90  08004e90  00014e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004ff8  08004ff8  00014ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004ffc  08004ffc  00014ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000e4  20000000  08005000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000910  200000e4  080050e4  000200e4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200009f4  080050e4  000209f4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013401  00000000  00000000  0002010d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000317d  00000000  00000000  0003350e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b40  00000000  00000000  00036690  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009e8  00000000  00000000  000371d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005d96  00000000  00000000  00037bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003341  00000000  00000000  0003d94e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00040c8f  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000031f4  00000000  00000000  00040d0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000e4 	.word	0x200000e4
 8000200:	00000000 	.word	0x00000000
 8000204:	08004e78 	.word	0x08004e78

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000e8 	.word	0x200000e8
 8000220:	08004e78 	.word	0x08004e78

08000224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000228:	4a08      	ldr	r2, [pc, #32]	; (800024c <HAL_Init+0x28>)
 800022a:	4b08      	ldr	r3, [pc, #32]	; (800024c <HAL_Init+0x28>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f043 0310 	orr.w	r3, r3, #16
 8000232:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000234:	2003      	movs	r0, #3
 8000236:	f000 f927 	bl	8000488 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f808 	bl	8000250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000240:	f003 fc50 	bl	8003ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000244:	2300      	movs	r3, #0
}
 8000246:	4618      	mov	r0, r3
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40022000 	.word	0x40022000

08000250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000258:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <HAL_InitTick+0x54>)
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <HAL_InitTick+0x58>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	4619      	mov	r1, r3
 8000262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000266:	fbb3 f3f1 	udiv	r3, r3, r1
 800026a:	fbb2 f3f3 	udiv	r3, r2, r3
 800026e:	4618      	mov	r0, r3
 8000270:	f000 f931 	bl	80004d6 <HAL_SYSTICK_Config>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800027a:	2301      	movs	r3, #1
 800027c:	e00e      	b.n	800029c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2b0f      	cmp	r3, #15
 8000282:	d80a      	bhi.n	800029a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000284:	2200      	movs	r2, #0
 8000286:	6879      	ldr	r1, [r7, #4]
 8000288:	f04f 30ff 	mov.w	r0, #4294967295
 800028c:	f000 f907 	bl	800049e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000290:	4a06      	ldr	r2, [pc, #24]	; (80002ac <HAL_InitTick+0x5c>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000296:	2300      	movs	r3, #0
 8000298:	e000      	b.n	800029c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800029a:	2301      	movs	r3, #1
}
 800029c:	4618      	mov	r0, r3
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	2000007c 	.word	0x2000007c
 80002a8:	20000004 	.word	0x20000004
 80002ac:	20000000 	.word	0x20000000

080002b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002b4:	4b05      	ldr	r3, [pc, #20]	; (80002cc <HAL_IncTick+0x1c>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	461a      	mov	r2, r3
 80002ba:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <HAL_IncTick+0x20>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4413      	add	r3, r2
 80002c0:	4a03      	ldr	r2, [pc, #12]	; (80002d0 <HAL_IncTick+0x20>)
 80002c2:	6013      	str	r3, [r2, #0]
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	20000004 	.word	0x20000004
 80002d0:	2000013c 	.word	0x2000013c

080002d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  return uwTick;
 80002d8:	4b02      	ldr	r3, [pc, #8]	; (80002e4 <HAL_GetTick+0x10>)
 80002da:	681b      	ldr	r3, [r3, #0]
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	2000013c 	.word	0x2000013c

080002e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002f0:	f7ff fff0 	bl	80002d4 <HAL_GetTick>
 80002f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000300:	d005      	beq.n	800030e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000302:	4b09      	ldr	r3, [pc, #36]	; (8000328 <HAL_Delay+0x40>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	461a      	mov	r2, r3
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	4413      	add	r3, r2
 800030c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800030e:	bf00      	nop
 8000310:	f7ff ffe0 	bl	80002d4 <HAL_GetTick>
 8000314:	4602      	mov	r2, r0
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	1ad2      	subs	r2, r2, r3
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	429a      	cmp	r2, r3
 800031e:	d3f7      	bcc.n	8000310 <HAL_Delay+0x28>
  {
  }
}
 8000320:	bf00      	nop
 8000322:	3710      	adds	r7, #16
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000004 	.word	0x20000004

0800032c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f003 0307 	and.w	r3, r3, #7
 800033a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <NVIC_SetPriorityGrouping+0x44>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000342:	68ba      	ldr	r2, [r7, #8]
 8000344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000348:	4013      	ands	r3, r2
 800034a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800035c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800035e:	4a04      	ldr	r2, [pc, #16]	; (8000370 <NVIC_SetPriorityGrouping+0x44>)
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	60d3      	str	r3, [r2, #12]
}
 8000364:	bf00      	nop
 8000366:	3714      	adds	r7, #20
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	e000ed00 	.word	0xe000ed00

08000374 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <NVIC_GetPriorityGrouping+0x18>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	0a1b      	lsrs	r3, r3, #8
 800037e:	f003 0307 	and.w	r3, r3, #7
}
 8000382:	4618      	mov	r0, r3
 8000384:	46bd      	mov	sp, r7
 8000386:	bc80      	pop	{r7}
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	e000ed00 	.word	0xe000ed00

08000390 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	6039      	str	r1, [r7, #0]
 800039a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800039c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	da0b      	bge.n	80003bc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003a4:	490d      	ldr	r1, [pc, #52]	; (80003dc <NVIC_SetPriority+0x4c>)
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	f003 030f 	and.w	r3, r3, #15
 80003ac:	3b04      	subs	r3, #4
 80003ae:	683a      	ldr	r2, [r7, #0]
 80003b0:	b2d2      	uxtb	r2, r2
 80003b2:	0112      	lsls	r2, r2, #4
 80003b4:	b2d2      	uxtb	r2, r2
 80003b6:	440b      	add	r3, r1
 80003b8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003ba:	e009      	b.n	80003d0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003bc:	4908      	ldr	r1, [pc, #32]	; (80003e0 <NVIC_SetPriority+0x50>)
 80003be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003c2:	683a      	ldr	r2, [r7, #0]
 80003c4:	b2d2      	uxtb	r2, r2
 80003c6:	0112      	lsls	r2, r2, #4
 80003c8:	b2d2      	uxtb	r2, r2
 80003ca:	440b      	add	r3, r1
 80003cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80003d0:	bf00      	nop
 80003d2:	370c      	adds	r7, #12
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bc80      	pop	{r7}
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	e000e100 	.word	0xe000e100

080003e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b089      	sub	sp, #36	; 0x24
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	60f8      	str	r0, [r7, #12]
 80003ec:	60b9      	str	r1, [r7, #8]
 80003ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	f003 0307 	and.w	r3, r3, #7
 80003f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003f8:	69fb      	ldr	r3, [r7, #28]
 80003fa:	f1c3 0307 	rsb	r3, r3, #7
 80003fe:	2b04      	cmp	r3, #4
 8000400:	bf28      	it	cs
 8000402:	2304      	movcs	r3, #4
 8000404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000406:	69fb      	ldr	r3, [r7, #28]
 8000408:	3304      	adds	r3, #4
 800040a:	2b06      	cmp	r3, #6
 800040c:	d902      	bls.n	8000414 <NVIC_EncodePriority+0x30>
 800040e:	69fb      	ldr	r3, [r7, #28]
 8000410:	3b03      	subs	r3, #3
 8000412:	e000      	b.n	8000416 <NVIC_EncodePriority+0x32>
 8000414:	2300      	movs	r3, #0
 8000416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000418:	2201      	movs	r2, #1
 800041a:	69bb      	ldr	r3, [r7, #24]
 800041c:	fa02 f303 	lsl.w	r3, r2, r3
 8000420:	1e5a      	subs	r2, r3, #1
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	401a      	ands	r2, r3
 8000426:	697b      	ldr	r3, [r7, #20]
 8000428:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800042a:	2101      	movs	r1, #1
 800042c:	697b      	ldr	r3, [r7, #20]
 800042e:	fa01 f303 	lsl.w	r3, r1, r3
 8000432:	1e59      	subs	r1, r3, #1
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000438:	4313      	orrs	r3, r2
         );
}
 800043a:	4618      	mov	r0, r3
 800043c:	3724      	adds	r7, #36	; 0x24
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr

08000444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	3b01      	subs	r3, #1
 8000450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000454:	d301      	bcc.n	800045a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000456:	2301      	movs	r3, #1
 8000458:	e00f      	b.n	800047a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800045a:	4a0a      	ldr	r2, [pc, #40]	; (8000484 <SysTick_Config+0x40>)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	3b01      	subs	r3, #1
 8000460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000462:	210f      	movs	r1, #15
 8000464:	f04f 30ff 	mov.w	r0, #4294967295
 8000468:	f7ff ff92 	bl	8000390 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800046c:	4b05      	ldr	r3, [pc, #20]	; (8000484 <SysTick_Config+0x40>)
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000472:	4b04      	ldr	r3, [pc, #16]	; (8000484 <SysTick_Config+0x40>)
 8000474:	2207      	movs	r2, #7
 8000476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000478:	2300      	movs	r3, #0
}
 800047a:	4618      	mov	r0, r3
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	e000e010 	.word	0xe000e010

08000488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000490:	6878      	ldr	r0, [r7, #4]
 8000492:	f7ff ff4b 	bl	800032c <NVIC_SetPriorityGrouping>
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}

0800049e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800049e:	b580      	push	{r7, lr}
 80004a0:	b086      	sub	sp, #24
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	4603      	mov	r3, r0
 80004a6:	60b9      	str	r1, [r7, #8]
 80004a8:	607a      	str	r2, [r7, #4]
 80004aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80004ac:	2300      	movs	r3, #0
 80004ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80004b0:	f7ff ff60 	bl	8000374 <NVIC_GetPriorityGrouping>
 80004b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	68b9      	ldr	r1, [r7, #8]
 80004ba:	6978      	ldr	r0, [r7, #20]
 80004bc:	f7ff ff92 	bl	80003e4 <NVIC_EncodePriority>
 80004c0:	4602      	mov	r2, r0
 80004c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004c6:	4611      	mov	r1, r2
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff ff61 	bl	8000390 <NVIC_SetPriority>
}
 80004ce:	bf00      	nop
 80004d0:	3718      	adds	r7, #24
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}

080004d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004d6:	b580      	push	{r7, lr}
 80004d8:	b082      	sub	sp, #8
 80004da:	af00      	add	r7, sp, #0
 80004dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f7ff ffb0 	bl	8000444 <SysTick_Config>
 80004e4:	4603      	mov	r3, r0
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
	...

080004f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b08b      	sub	sp, #44	; 0x2c
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80004fa:	2300      	movs	r3, #0
 80004fc:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80004fe:	2300      	movs	r3, #0
 8000500:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000502:	2300      	movs	r3, #0
 8000504:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000506:	2300      	movs	r3, #0
 8000508:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800050a:	2300      	movs	r3, #0
 800050c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800050e:	2300      	movs	r3, #0
 8000510:	627b      	str	r3, [r7, #36]	; 0x24
 8000512:	e133      	b.n	800077c <HAL_GPIO_Init+0x28c>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000514:	2201      	movs	r2, #1
 8000516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000518:	fa02 f303 	lsl.w	r3, r2, r3
 800051c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	69fb      	ldr	r3, [r7, #28]
 8000524:	4013      	ands	r3, r2
 8000526:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000528:	69ba      	ldr	r2, [r7, #24]
 800052a:	69fb      	ldr	r3, [r7, #28]
 800052c:	429a      	cmp	r2, r3
 800052e:	f040 8122 	bne.w	8000776 <HAL_GPIO_Init+0x286>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	2b12      	cmp	r3, #18
 8000538:	d034      	beq.n	80005a4 <HAL_GPIO_Init+0xb4>
 800053a:	2b12      	cmp	r3, #18
 800053c:	d80d      	bhi.n	800055a <HAL_GPIO_Init+0x6a>
 800053e:	2b02      	cmp	r3, #2
 8000540:	d02b      	beq.n	800059a <HAL_GPIO_Init+0xaa>
 8000542:	2b02      	cmp	r3, #2
 8000544:	d804      	bhi.n	8000550 <HAL_GPIO_Init+0x60>
 8000546:	2b00      	cmp	r3, #0
 8000548:	d031      	beq.n	80005ae <HAL_GPIO_Init+0xbe>
 800054a:	2b01      	cmp	r3, #1
 800054c:	d01c      	beq.n	8000588 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800054e:	e048      	b.n	80005e2 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000550:	2b03      	cmp	r3, #3
 8000552:	d043      	beq.n	80005dc <HAL_GPIO_Init+0xec>
 8000554:	2b11      	cmp	r3, #17
 8000556:	d01b      	beq.n	8000590 <HAL_GPIO_Init+0xa0>
          break;
 8000558:	e043      	b.n	80005e2 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800055a:	4a8d      	ldr	r2, [pc, #564]	; (8000790 <HAL_GPIO_Init+0x2a0>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d026      	beq.n	80005ae <HAL_GPIO_Init+0xbe>
 8000560:	4a8b      	ldr	r2, [pc, #556]	; (8000790 <HAL_GPIO_Init+0x2a0>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d806      	bhi.n	8000574 <HAL_GPIO_Init+0x84>
 8000566:	4a8b      	ldr	r2, [pc, #556]	; (8000794 <HAL_GPIO_Init+0x2a4>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d020      	beq.n	80005ae <HAL_GPIO_Init+0xbe>
 800056c:	4a8a      	ldr	r2, [pc, #552]	; (8000798 <HAL_GPIO_Init+0x2a8>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d01d      	beq.n	80005ae <HAL_GPIO_Init+0xbe>
          break;
 8000572:	e036      	b.n	80005e2 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000574:	4a89      	ldr	r2, [pc, #548]	; (800079c <HAL_GPIO_Init+0x2ac>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d019      	beq.n	80005ae <HAL_GPIO_Init+0xbe>
 800057a:	4a89      	ldr	r2, [pc, #548]	; (80007a0 <HAL_GPIO_Init+0x2b0>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d016      	beq.n	80005ae <HAL_GPIO_Init+0xbe>
 8000580:	4a88      	ldr	r2, [pc, #544]	; (80007a4 <HAL_GPIO_Init+0x2b4>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d013      	beq.n	80005ae <HAL_GPIO_Init+0xbe>
          break;
 8000586:	e02c      	b.n	80005e2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	623b      	str	r3, [r7, #32]
          break;
 800058e:	e028      	b.n	80005e2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	68db      	ldr	r3, [r3, #12]
 8000594:	3304      	adds	r3, #4
 8000596:	623b      	str	r3, [r7, #32]
          break;
 8000598:	e023      	b.n	80005e2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	3308      	adds	r3, #8
 80005a0:	623b      	str	r3, [r7, #32]
          break;
 80005a2:	e01e      	b.n	80005e2 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	330c      	adds	r3, #12
 80005aa:	623b      	str	r3, [r7, #32]
          break;
 80005ac:	e019      	b.n	80005e2 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d102      	bne.n	80005bc <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80005b6:	2304      	movs	r3, #4
 80005b8:	623b      	str	r3, [r7, #32]
          break;
 80005ba:	e012      	b.n	80005e2 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d105      	bne.n	80005d0 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005c4:	2308      	movs	r3, #8
 80005c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	69fa      	ldr	r2, [r7, #28]
 80005cc:	611a      	str	r2, [r3, #16]
          break;
 80005ce:	e008      	b.n	80005e2 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005d0:	2308      	movs	r3, #8
 80005d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	69fa      	ldr	r2, [r7, #28]
 80005d8:	615a      	str	r2, [r3, #20]
          break;
 80005da:	e002      	b.n	80005e2 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80005dc:	2300      	movs	r3, #0
 80005de:	623b      	str	r3, [r7, #32]
          break;
 80005e0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80005e2:	69bb      	ldr	r3, [r7, #24]
 80005e4:	2bff      	cmp	r3, #255	; 0xff
 80005e6:	d801      	bhi.n	80005ec <HAL_GPIO_Init+0xfc>
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	e001      	b.n	80005f0 <HAL_GPIO_Init+0x100>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	3304      	adds	r3, #4
 80005f0:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80005f2:	69bb      	ldr	r3, [r7, #24]
 80005f4:	2bff      	cmp	r3, #255	; 0xff
 80005f6:	d802      	bhi.n	80005fe <HAL_GPIO_Init+0x10e>
 80005f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	e002      	b.n	8000604 <HAL_GPIO_Init+0x114>
 80005fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000600:	3b08      	subs	r3, #8
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	210f      	movs	r1, #15
 800060c:	693b      	ldr	r3, [r7, #16]
 800060e:	fa01 f303 	lsl.w	r3, r1, r3
 8000612:	43db      	mvns	r3, r3
 8000614:	401a      	ands	r2, r3
 8000616:	6a39      	ldr	r1, [r7, #32]
 8000618:	693b      	ldr	r3, [r7, #16]
 800061a:	fa01 f303 	lsl.w	r3, r1, r3
 800061e:	431a      	orrs	r2, r3
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062c:	2b00      	cmp	r3, #0
 800062e:	f000 80a2 	beq.w	8000776 <HAL_GPIO_Init+0x286>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000632:	4a5d      	ldr	r2, [pc, #372]	; (80007a8 <HAL_GPIO_Init+0x2b8>)
 8000634:	4b5c      	ldr	r3, [pc, #368]	; (80007a8 <HAL_GPIO_Init+0x2b8>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6193      	str	r3, [r2, #24]
 800063e:	4b5a      	ldr	r3, [pc, #360]	; (80007a8 <HAL_GPIO_Init+0x2b8>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 800064a:	4a58      	ldr	r2, [pc, #352]	; (80007ac <HAL_GPIO_Init+0x2bc>)
 800064c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064e:	089b      	lsrs	r3, r3, #2
 8000650:	3302      	adds	r3, #2
 8000652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000656:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800065a:	f003 0303 	and.w	r3, r3, #3
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	220f      	movs	r2, #15
 8000662:	fa02 f303 	lsl.w	r3, r2, r3
 8000666:	43db      	mvns	r3, r3
 8000668:	697a      	ldr	r2, [r7, #20]
 800066a:	4013      	ands	r3, r2
 800066c:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a4f      	ldr	r2, [pc, #316]	; (80007b0 <HAL_GPIO_Init+0x2c0>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d01f      	beq.n	80006b6 <HAL_GPIO_Init+0x1c6>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4a4e      	ldr	r2, [pc, #312]	; (80007b4 <HAL_GPIO_Init+0x2c4>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d019      	beq.n	80006b2 <HAL_GPIO_Init+0x1c2>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a4d      	ldr	r2, [pc, #308]	; (80007b8 <HAL_GPIO_Init+0x2c8>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d013      	beq.n	80006ae <HAL_GPIO_Init+0x1be>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a4c      	ldr	r2, [pc, #304]	; (80007bc <HAL_GPIO_Init+0x2cc>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d00d      	beq.n	80006aa <HAL_GPIO_Init+0x1ba>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a4b      	ldr	r2, [pc, #300]	; (80007c0 <HAL_GPIO_Init+0x2d0>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d007      	beq.n	80006a6 <HAL_GPIO_Init+0x1b6>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a4a      	ldr	r2, [pc, #296]	; (80007c4 <HAL_GPIO_Init+0x2d4>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d101      	bne.n	80006a2 <HAL_GPIO_Init+0x1b2>
 800069e:	2305      	movs	r3, #5
 80006a0:	e00a      	b.n	80006b8 <HAL_GPIO_Init+0x1c8>
 80006a2:	2306      	movs	r3, #6
 80006a4:	e008      	b.n	80006b8 <HAL_GPIO_Init+0x1c8>
 80006a6:	2304      	movs	r3, #4
 80006a8:	e006      	b.n	80006b8 <HAL_GPIO_Init+0x1c8>
 80006aa:	2303      	movs	r3, #3
 80006ac:	e004      	b.n	80006b8 <HAL_GPIO_Init+0x1c8>
 80006ae:	2302      	movs	r3, #2
 80006b0:	e002      	b.n	80006b8 <HAL_GPIO_Init+0x1c8>
 80006b2:	2301      	movs	r3, #1
 80006b4:	e000      	b.n	80006b8 <HAL_GPIO_Init+0x1c8>
 80006b6:	2300      	movs	r3, #0
 80006b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006ba:	f002 0203 	and.w	r2, r2, #3
 80006be:	0092      	lsls	r2, r2, #2
 80006c0:	4093      	lsls	r3, r2
 80006c2:	697a      	ldr	r2, [r7, #20]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80006c8:	4938      	ldr	r1, [pc, #224]	; (80007ac <HAL_GPIO_Init+0x2bc>)
 80006ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006cc:	089b      	lsrs	r3, r3, #2
 80006ce:	3302      	adds	r3, #2
 80006d0:	697a      	ldr	r2, [r7, #20]
 80006d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d006      	beq.n	80006f0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80006e2:	4939      	ldr	r1, [pc, #228]	; (80007c8 <HAL_GPIO_Init+0x2d8>)
 80006e4:	4b38      	ldr	r3, [pc, #224]	; (80007c8 <HAL_GPIO_Init+0x2d8>)
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	69bb      	ldr	r3, [r7, #24]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]
 80006ee:	e006      	b.n	80006fe <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80006f0:	4935      	ldr	r1, [pc, #212]	; (80007c8 <HAL_GPIO_Init+0x2d8>)
 80006f2:	4b35      	ldr	r3, [pc, #212]	; (80007c8 <HAL_GPIO_Init+0x2d8>)
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	69bb      	ldr	r3, [r7, #24]
 80006f8:	43db      	mvns	r3, r3
 80006fa:	4013      	ands	r3, r2
 80006fc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000706:	2b00      	cmp	r3, #0
 8000708:	d006      	beq.n	8000718 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800070a:	492f      	ldr	r1, [pc, #188]	; (80007c8 <HAL_GPIO_Init+0x2d8>)
 800070c:	4b2e      	ldr	r3, [pc, #184]	; (80007c8 <HAL_GPIO_Init+0x2d8>)
 800070e:	685a      	ldr	r2, [r3, #4]
 8000710:	69bb      	ldr	r3, [r7, #24]
 8000712:	4313      	orrs	r3, r2
 8000714:	604b      	str	r3, [r1, #4]
 8000716:	e006      	b.n	8000726 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000718:	492b      	ldr	r1, [pc, #172]	; (80007c8 <HAL_GPIO_Init+0x2d8>)
 800071a:	4b2b      	ldr	r3, [pc, #172]	; (80007c8 <HAL_GPIO_Init+0x2d8>)
 800071c:	685a      	ldr	r2, [r3, #4]
 800071e:	69bb      	ldr	r3, [r7, #24]
 8000720:	43db      	mvns	r3, r3
 8000722:	4013      	ands	r3, r2
 8000724:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800072e:	2b00      	cmp	r3, #0
 8000730:	d006      	beq.n	8000740 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000732:	4925      	ldr	r1, [pc, #148]	; (80007c8 <HAL_GPIO_Init+0x2d8>)
 8000734:	4b24      	ldr	r3, [pc, #144]	; (80007c8 <HAL_GPIO_Init+0x2d8>)
 8000736:	689a      	ldr	r2, [r3, #8]
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	4313      	orrs	r3, r2
 800073c:	608b      	str	r3, [r1, #8]
 800073e:	e006      	b.n	800074e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000740:	4921      	ldr	r1, [pc, #132]	; (80007c8 <HAL_GPIO_Init+0x2d8>)
 8000742:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <HAL_GPIO_Init+0x2d8>)
 8000744:	689a      	ldr	r2, [r3, #8]
 8000746:	69bb      	ldr	r3, [r7, #24]
 8000748:	43db      	mvns	r3, r3
 800074a:	4013      	ands	r3, r2
 800074c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000756:	2b00      	cmp	r3, #0
 8000758:	d006      	beq.n	8000768 <HAL_GPIO_Init+0x278>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800075a:	491b      	ldr	r1, [pc, #108]	; (80007c8 <HAL_GPIO_Init+0x2d8>)
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <HAL_GPIO_Init+0x2d8>)
 800075e:	68da      	ldr	r2, [r3, #12]
 8000760:	69bb      	ldr	r3, [r7, #24]
 8000762:	4313      	orrs	r3, r2
 8000764:	60cb      	str	r3, [r1, #12]
 8000766:	e006      	b.n	8000776 <HAL_GPIO_Init+0x286>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000768:	4917      	ldr	r1, [pc, #92]	; (80007c8 <HAL_GPIO_Init+0x2d8>)
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <HAL_GPIO_Init+0x2d8>)
 800076c:	68da      	ldr	r2, [r3, #12]
 800076e:	69bb      	ldr	r3, [r7, #24]
 8000770:	43db      	mvns	r3, r3
 8000772:	4013      	ands	r3, r2
 8000774:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000778:	3301      	adds	r3, #1
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
 800077c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077e:	2b0f      	cmp	r3, #15
 8000780:	f67f aec8 	bls.w	8000514 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000784:	bf00      	nop
 8000786:	372c      	adds	r7, #44	; 0x2c
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	10210000 	.word	0x10210000
 8000794:	10110000 	.word	0x10110000
 8000798:	10120000 	.word	0x10120000
 800079c:	10310000 	.word	0x10310000
 80007a0:	10320000 	.word	0x10320000
 80007a4:	10220000 	.word	0x10220000
 80007a8:	40021000 	.word	0x40021000
 80007ac:	40010000 	.word	0x40010000
 80007b0:	40010800 	.word	0x40010800
 80007b4:	40010c00 	.word	0x40010c00
 80007b8:	40011000 	.word	0x40011000
 80007bc:	40011400 	.word	0x40011400
 80007c0:	40011800 	.word	0x40011800
 80007c4:	40011c00 	.word	0x40011c00
 80007c8:	40010400 	.word	0x40010400

080007cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	807b      	strh	r3, [r7, #2]
 80007d8:	4613      	mov	r3, r2
 80007da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80007dc:	787b      	ldrb	r3, [r7, #1]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d003      	beq.n	80007ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80007e2:	887a      	ldrh	r2, [r7, #2]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80007e8:	e003      	b.n	80007f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007ea:	887b      	ldrh	r3, [r7, #2]
 80007ec:	041a      	lsls	r2, r3, #16
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	611a      	str	r2, [r3, #16]
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	460b      	mov	r3, r1
 8000806:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	68da      	ldr	r2, [r3, #12]
 800080c:	887b      	ldrh	r3, [r7, #2]
 800080e:	405a      	eors	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	60da      	str	r2, [r3, #12]
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr
	...

08000820 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000828:	2300      	movs	r3, #0
 800082a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f003 0301 	and.w	r3, r3, #1
 8000834:	2b00      	cmp	r3, #0
 8000836:	f000 8087 	beq.w	8000948 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800083a:	4b92      	ldr	r3, [pc, #584]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	f003 030c 	and.w	r3, r3, #12
 8000842:	2b04      	cmp	r3, #4
 8000844:	d00c      	beq.n	8000860 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000846:	4b8f      	ldr	r3, [pc, #572]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	f003 030c 	and.w	r3, r3, #12
 800084e:	2b08      	cmp	r3, #8
 8000850:	d112      	bne.n	8000878 <HAL_RCC_OscConfig+0x58>
 8000852:	4b8c      	ldr	r3, [pc, #560]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800085a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800085e:	d10b      	bne.n	8000878 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000860:	4b88      	ldr	r3, [pc, #544]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000868:	2b00      	cmp	r3, #0
 800086a:	d06c      	beq.n	8000946 <HAL_RCC_OscConfig+0x126>
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d168      	bne.n	8000946 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000874:	2301      	movs	r3, #1
 8000876:	e22d      	b.n	8000cd4 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000880:	d106      	bne.n	8000890 <HAL_RCC_OscConfig+0x70>
 8000882:	4a80      	ldr	r2, [pc, #512]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 8000884:	4b7f      	ldr	r3, [pc, #508]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800088c:	6013      	str	r3, [r2, #0]
 800088e:	e02e      	b.n	80008ee <HAL_RCC_OscConfig+0xce>
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d10c      	bne.n	80008b2 <HAL_RCC_OscConfig+0x92>
 8000898:	4a7a      	ldr	r2, [pc, #488]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 800089a:	4b7a      	ldr	r3, [pc, #488]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008a2:	6013      	str	r3, [r2, #0]
 80008a4:	4a77      	ldr	r2, [pc, #476]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 80008a6:	4b77      	ldr	r3, [pc, #476]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008ae:	6013      	str	r3, [r2, #0]
 80008b0:	e01d      	b.n	80008ee <HAL_RCC_OscConfig+0xce>
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008ba:	d10c      	bne.n	80008d6 <HAL_RCC_OscConfig+0xb6>
 80008bc:	4a71      	ldr	r2, [pc, #452]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 80008be:	4b71      	ldr	r3, [pc, #452]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008c6:	6013      	str	r3, [r2, #0]
 80008c8:	4a6e      	ldr	r2, [pc, #440]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 80008ca:	4b6e      	ldr	r3, [pc, #440]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008d2:	6013      	str	r3, [r2, #0]
 80008d4:	e00b      	b.n	80008ee <HAL_RCC_OscConfig+0xce>
 80008d6:	4a6b      	ldr	r2, [pc, #428]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 80008d8:	4b6a      	ldr	r3, [pc, #424]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008e0:	6013      	str	r3, [r2, #0]
 80008e2:	4a68      	ldr	r2, [pc, #416]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 80008e4:	4b67      	ldr	r3, [pc, #412]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008ec:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d013      	beq.n	800091e <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008f6:	f7ff fced 	bl	80002d4 <HAL_GetTick>
 80008fa:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008fc:	e008      	b.n	8000910 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008fe:	f7ff fce9 	bl	80002d4 <HAL_GetTick>
 8000902:	4602      	mov	r2, r0
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	1ad3      	subs	r3, r2, r3
 8000908:	2b64      	cmp	r3, #100	; 0x64
 800090a:	d901      	bls.n	8000910 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 800090c:	2303      	movs	r3, #3
 800090e:	e1e1      	b.n	8000cd4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000910:	4b5c      	ldr	r3, [pc, #368]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000918:	2b00      	cmp	r3, #0
 800091a:	d0f0      	beq.n	80008fe <HAL_RCC_OscConfig+0xde>
 800091c:	e014      	b.n	8000948 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800091e:	f7ff fcd9 	bl	80002d4 <HAL_GetTick>
 8000922:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000924:	e008      	b.n	8000938 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000926:	f7ff fcd5 	bl	80002d4 <HAL_GetTick>
 800092a:	4602      	mov	r2, r0
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	1ad3      	subs	r3, r2, r3
 8000930:	2b64      	cmp	r3, #100	; 0x64
 8000932:	d901      	bls.n	8000938 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8000934:	2303      	movs	r3, #3
 8000936:	e1cd      	b.n	8000cd4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000938:	4b52      	ldr	r3, [pc, #328]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000940:	2b00      	cmp	r3, #0
 8000942:	d1f0      	bne.n	8000926 <HAL_RCC_OscConfig+0x106>
 8000944:	e000      	b.n	8000948 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000946:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f003 0302 	and.w	r3, r3, #2
 8000950:	2b00      	cmp	r3, #0
 8000952:	d063      	beq.n	8000a1c <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000954:	4b4b      	ldr	r3, [pc, #300]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f003 030c 	and.w	r3, r3, #12
 800095c:	2b00      	cmp	r3, #0
 800095e:	d00b      	beq.n	8000978 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000960:	4b48      	ldr	r3, [pc, #288]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	f003 030c 	and.w	r3, r3, #12
 8000968:	2b08      	cmp	r3, #8
 800096a:	d11c      	bne.n	80009a6 <HAL_RCC_OscConfig+0x186>
 800096c:	4b45      	ldr	r3, [pc, #276]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000974:	2b00      	cmp	r3, #0
 8000976:	d116      	bne.n	80009a6 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000978:	4b42      	ldr	r3, [pc, #264]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f003 0302 	and.w	r3, r3, #2
 8000980:	2b00      	cmp	r3, #0
 8000982:	d005      	beq.n	8000990 <HAL_RCC_OscConfig+0x170>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	691b      	ldr	r3, [r3, #16]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d001      	beq.n	8000990 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 800098c:	2301      	movs	r3, #1
 800098e:	e1a1      	b.n	8000cd4 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000990:	493c      	ldr	r1, [pc, #240]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 8000992:	4b3c      	ldr	r3, [pc, #240]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	00db      	lsls	r3, r3, #3
 80009a0:	4313      	orrs	r3, r2
 80009a2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009a4:	e03a      	b.n	8000a1c <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	691b      	ldr	r3, [r3, #16]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d020      	beq.n	80009f0 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009ae:	4b36      	ldr	r3, [pc, #216]	; (8000a88 <HAL_RCC_OscConfig+0x268>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009b4:	f7ff fc8e 	bl	80002d4 <HAL_GetTick>
 80009b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009ba:	e008      	b.n	80009ce <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009bc:	f7ff fc8a 	bl	80002d4 <HAL_GetTick>
 80009c0:	4602      	mov	r2, r0
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d901      	bls.n	80009ce <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80009ca:	2303      	movs	r3, #3
 80009cc:	e182      	b.n	8000cd4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009ce:	4b2d      	ldr	r3, [pc, #180]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d0f0      	beq.n	80009bc <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009da:	492a      	ldr	r1, [pc, #168]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 80009dc:	4b29      	ldr	r3, [pc, #164]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	4313      	orrs	r3, r2
 80009ec:	600b      	str	r3, [r1, #0]
 80009ee:	e015      	b.n	8000a1c <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80009f0:	4b25      	ldr	r3, [pc, #148]	; (8000a88 <HAL_RCC_OscConfig+0x268>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009f6:	f7ff fc6d 	bl	80002d4 <HAL_GetTick>
 80009fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009fc:	e008      	b.n	8000a10 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009fe:	f7ff fc69 	bl	80002d4 <HAL_GetTick>
 8000a02:	4602      	mov	r2, r0
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	1ad3      	subs	r3, r2, r3
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d901      	bls.n	8000a10 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	e161      	b.n	8000cd4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a10:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f003 0302 	and.w	r3, r3, #2
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d1f0      	bne.n	80009fe <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f003 0308 	and.w	r3, r3, #8
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d039      	beq.n	8000a9c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d019      	beq.n	8000a64 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a30:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <HAL_RCC_OscConfig+0x26c>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a36:	f7ff fc4d 	bl	80002d4 <HAL_GetTick>
 8000a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a3c:	e008      	b.n	8000a50 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a3e:	f7ff fc49 	bl	80002d4 <HAL_GetTick>
 8000a42:	4602      	mov	r2, r0
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	1ad3      	subs	r3, r2, r3
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d901      	bls.n	8000a50 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	e141      	b.n	8000cd4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <HAL_RCC_OscConfig+0x264>)
 8000a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a54:	f003 0302 	and.w	r3, r3, #2
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d0f0      	beq.n	8000a3e <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f000 fab1 	bl	8000fc4 <RCC_Delay>
 8000a62:	e01b      	b.n	8000a9c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <HAL_RCC_OscConfig+0x26c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a6a:	f7ff fc33 	bl	80002d4 <HAL_GetTick>
 8000a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a70:	e00e      	b.n	8000a90 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a72:	f7ff fc2f 	bl	80002d4 <HAL_GetTick>
 8000a76:	4602      	mov	r2, r0
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	1ad3      	subs	r3, r2, r3
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d907      	bls.n	8000a90 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000a80:	2303      	movs	r3, #3
 8000a82:	e127      	b.n	8000cd4 <HAL_RCC_OscConfig+0x4b4>
 8000a84:	40021000 	.word	0x40021000
 8000a88:	42420000 	.word	0x42420000
 8000a8c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a90:	4b92      	ldr	r3, [pc, #584]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a94:	f003 0302 	and.w	r3, r3, #2
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1ea      	bne.n	8000a72 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f003 0304 	and.w	r3, r3, #4
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	f000 80a6 	beq.w	8000bf6 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000aae:	4b8b      	ldr	r3, [pc, #556]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d10d      	bne.n	8000ad6 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	4a88      	ldr	r2, [pc, #544]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000abc:	4b87      	ldr	r3, [pc, #540]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000abe:	69db      	ldr	r3, [r3, #28]
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac4:	61d3      	str	r3, [r2, #28]
 8000ac6:	4b85      	ldr	r3, [pc, #532]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ad6:	4b82      	ldr	r3, [pc, #520]	; (8000ce0 <HAL_RCC_OscConfig+0x4c0>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d118      	bne.n	8000b14 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ae2:	4a7f      	ldr	r2, [pc, #508]	; (8000ce0 <HAL_RCC_OscConfig+0x4c0>)
 8000ae4:	4b7e      	ldr	r3, [pc, #504]	; (8000ce0 <HAL_RCC_OscConfig+0x4c0>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000aee:	f7ff fbf1 	bl	80002d4 <HAL_GetTick>
 8000af2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000af4:	e008      	b.n	8000b08 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000af6:	f7ff fbed 	bl	80002d4 <HAL_GetTick>
 8000afa:	4602      	mov	r2, r0
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	1ad3      	subs	r3, r2, r3
 8000b00:	2b64      	cmp	r3, #100	; 0x64
 8000b02:	d901      	bls.n	8000b08 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8000b04:	2303      	movs	r3, #3
 8000b06:	e0e5      	b.n	8000cd4 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b08:	4b75      	ldr	r3, [pc, #468]	; (8000ce0 <HAL_RCC_OscConfig+0x4c0>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d0f0      	beq.n	8000af6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d106      	bne.n	8000b2a <HAL_RCC_OscConfig+0x30a>
 8000b1c:	4a6f      	ldr	r2, [pc, #444]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000b1e:	4b6f      	ldr	r3, [pc, #444]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000b20:	6a1b      	ldr	r3, [r3, #32]
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	6213      	str	r3, [r2, #32]
 8000b28:	e02d      	b.n	8000b86 <HAL_RCC_OscConfig+0x366>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d10c      	bne.n	8000b4c <HAL_RCC_OscConfig+0x32c>
 8000b32:	4a6a      	ldr	r2, [pc, #424]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000b34:	4b69      	ldr	r3, [pc, #420]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000b36:	6a1b      	ldr	r3, [r3, #32]
 8000b38:	f023 0301 	bic.w	r3, r3, #1
 8000b3c:	6213      	str	r3, [r2, #32]
 8000b3e:	4a67      	ldr	r2, [pc, #412]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000b40:	4b66      	ldr	r3, [pc, #408]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000b42:	6a1b      	ldr	r3, [r3, #32]
 8000b44:	f023 0304 	bic.w	r3, r3, #4
 8000b48:	6213      	str	r3, [r2, #32]
 8000b4a:	e01c      	b.n	8000b86 <HAL_RCC_OscConfig+0x366>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	2b05      	cmp	r3, #5
 8000b52:	d10c      	bne.n	8000b6e <HAL_RCC_OscConfig+0x34e>
 8000b54:	4a61      	ldr	r2, [pc, #388]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000b56:	4b61      	ldr	r3, [pc, #388]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000b58:	6a1b      	ldr	r3, [r3, #32]
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	6213      	str	r3, [r2, #32]
 8000b60:	4a5e      	ldr	r2, [pc, #376]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000b62:	4b5e      	ldr	r3, [pc, #376]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000b64:	6a1b      	ldr	r3, [r3, #32]
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	6213      	str	r3, [r2, #32]
 8000b6c:	e00b      	b.n	8000b86 <HAL_RCC_OscConfig+0x366>
 8000b6e:	4a5b      	ldr	r2, [pc, #364]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000b70:	4b5a      	ldr	r3, [pc, #360]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000b72:	6a1b      	ldr	r3, [r3, #32]
 8000b74:	f023 0301 	bic.w	r3, r3, #1
 8000b78:	6213      	str	r3, [r2, #32]
 8000b7a:	4a58      	ldr	r2, [pc, #352]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000b7c:	4b57      	ldr	r3, [pc, #348]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000b7e:	6a1b      	ldr	r3, [r3, #32]
 8000b80:	f023 0304 	bic.w	r3, r3, #4
 8000b84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d015      	beq.n	8000bba <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b8e:	f7ff fba1 	bl	80002d4 <HAL_GetTick>
 8000b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b94:	e00a      	b.n	8000bac <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b96:	f7ff fb9d 	bl	80002d4 <HAL_GetTick>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d901      	bls.n	8000bac <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	e093      	b.n	8000cd4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bac:	4b4b      	ldr	r3, [pc, #300]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000bae:	6a1b      	ldr	r3, [r3, #32]
 8000bb0:	f003 0302 	and.w	r3, r3, #2
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d0ee      	beq.n	8000b96 <HAL_RCC_OscConfig+0x376>
 8000bb8:	e014      	b.n	8000be4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bba:	f7ff fb8b 	bl	80002d4 <HAL_GetTick>
 8000bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bc0:	e00a      	b.n	8000bd8 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bc2:	f7ff fb87 	bl	80002d4 <HAL_GetTick>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d901      	bls.n	8000bd8 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	e07d      	b.n	8000cd4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bd8:	4b40      	ldr	r3, [pc, #256]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000bda:	6a1b      	ldr	r3, [r3, #32]
 8000bdc:	f003 0302 	and.w	r3, r3, #2
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d1ee      	bne.n	8000bc2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000be4:	7dfb      	ldrb	r3, [r7, #23]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d105      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bea:	4a3c      	ldr	r2, [pc, #240]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000bec:	4b3b      	ldr	r3, [pc, #236]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000bee:	69db      	ldr	r3, [r3, #28]
 8000bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d069      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bfe:	4b37      	ldr	r3, [pc, #220]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f003 030c 	and.w	r3, r3, #12
 8000c06:	2b08      	cmp	r3, #8
 8000c08:	d061      	beq.n	8000cce <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d146      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c12:	4b34      	ldr	r3, [pc, #208]	; (8000ce4 <HAL_RCC_OscConfig+0x4c4>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c18:	f7ff fb5c 	bl	80002d4 <HAL_GetTick>
 8000c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c1e:	e008      	b.n	8000c32 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c20:	f7ff fb58 	bl	80002d4 <HAL_GetTick>
 8000c24:	4602      	mov	r2, r0
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d901      	bls.n	8000c32 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	e050      	b.n	8000cd4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c32:	4b2a      	ldr	r3, [pc, #168]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d1f0      	bne.n	8000c20 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6a1b      	ldr	r3, [r3, #32]
 8000c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c46:	d108      	bne.n	8000c5a <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c48:	4924      	ldr	r1, [pc, #144]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000c4a:	4b24      	ldr	r3, [pc, #144]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c5a:	4820      	ldr	r0, [pc, #128]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a19      	ldr	r1, [r3, #32]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c6c:	430b      	orrs	r3, r1
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <HAL_RCC_OscConfig+0x4c4>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c78:	f7ff fb2c 	bl	80002d4 <HAL_GetTick>
 8000c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c7e:	e008      	b.n	8000c92 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c80:	f7ff fb28 	bl	80002d4 <HAL_GetTick>
 8000c84:	4602      	mov	r2, r0
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d901      	bls.n	8000c92 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	e020      	b.n	8000cd4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c92:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d0f0      	beq.n	8000c80 <HAL_RCC_OscConfig+0x460>
 8000c9e:	e018      	b.n	8000cd2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ca0:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <HAL_RCC_OscConfig+0x4c4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca6:	f7ff fb15 	bl	80002d4 <HAL_GetTick>
 8000caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cac:	e008      	b.n	8000cc0 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cae:	f7ff fb11 	bl	80002d4 <HAL_GetTick>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	1ad3      	subs	r3, r2, r3
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d901      	bls.n	8000cc0 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	e009      	b.n	8000cd4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_RCC_OscConfig+0x4bc>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d1f0      	bne.n	8000cae <HAL_RCC_OscConfig+0x48e>
 8000ccc:	e001      	b.n	8000cd2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e000      	b.n	8000cd4 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8000cd2:	2300      	movs	r3, #0
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40007000 	.word	0x40007000
 8000ce4:	42420060 	.word	0x42420060

08000ce8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cf6:	4b7e      	ldr	r3, [pc, #504]	; (8000ef0 <HAL_RCC_ClockConfig+0x208>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0207 	and.w	r2, r3, #7
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d210      	bcs.n	8000d26 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d04:	497a      	ldr	r1, [pc, #488]	; (8000ef0 <HAL_RCC_ClockConfig+0x208>)
 8000d06:	4b7a      	ldr	r3, [pc, #488]	; (8000ef0 <HAL_RCC_ClockConfig+0x208>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f023 0207 	bic.w	r2, r3, #7
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d14:	4b76      	ldr	r3, [pc, #472]	; (8000ef0 <HAL_RCC_ClockConfig+0x208>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f003 0207 	and.w	r2, r3, #7
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d001      	beq.n	8000d26 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e0e0      	b.n	8000ee8 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d020      	beq.n	8000d74 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 0304 	and.w	r3, r3, #4
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d005      	beq.n	8000d4a <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d3e:	4a6d      	ldr	r2, [pc, #436]	; (8000ef4 <HAL_RCC_ClockConfig+0x20c>)
 8000d40:	4b6c      	ldr	r3, [pc, #432]	; (8000ef4 <HAL_RCC_ClockConfig+0x20c>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000d48:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f003 0308 	and.w	r3, r3, #8
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d005      	beq.n	8000d62 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d56:	4a67      	ldr	r2, [pc, #412]	; (8000ef4 <HAL_RCC_ClockConfig+0x20c>)
 8000d58:	4b66      	ldr	r3, [pc, #408]	; (8000ef4 <HAL_RCC_ClockConfig+0x20c>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000d60:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d62:	4964      	ldr	r1, [pc, #400]	; (8000ef4 <HAL_RCC_ClockConfig+0x20c>)
 8000d64:	4b63      	ldr	r3, [pc, #396]	; (8000ef4 <HAL_RCC_ClockConfig+0x20c>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d06a      	beq.n	8000e56 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d107      	bne.n	8000d98 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d88:	4b5a      	ldr	r3, [pc, #360]	; (8000ef4 <HAL_RCC_ClockConfig+0x20c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d115      	bne.n	8000dc0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	e0a7      	b.n	8000ee8 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d107      	bne.n	8000db0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000da0:	4b54      	ldr	r3, [pc, #336]	; (8000ef4 <HAL_RCC_ClockConfig+0x20c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d109      	bne.n	8000dc0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	e09b      	b.n	8000ee8 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db0:	4b50      	ldr	r3, [pc, #320]	; (8000ef4 <HAL_RCC_ClockConfig+0x20c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d101      	bne.n	8000dc0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e093      	b.n	8000ee8 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dc0:	494c      	ldr	r1, [pc, #304]	; (8000ef4 <HAL_RCC_ClockConfig+0x20c>)
 8000dc2:	4b4c      	ldr	r3, [pc, #304]	; (8000ef4 <HAL_RCC_ClockConfig+0x20c>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f023 0203 	bic.w	r2, r3, #3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000dd2:	f7ff fa7f 	bl	80002d4 <HAL_GetTick>
 8000dd6:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d112      	bne.n	8000e06 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000de0:	e00a      	b.n	8000df8 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000de2:	f7ff fa77 	bl	80002d4 <HAL_GetTick>
 8000de6:	4602      	mov	r2, r0
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d901      	bls.n	8000df8 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8000df4:	2303      	movs	r3, #3
 8000df6:	e077      	b.n	8000ee8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000df8:	4b3e      	ldr	r3, [pc, #248]	; (8000ef4 <HAL_RCC_ClockConfig+0x20c>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 030c 	and.w	r3, r3, #12
 8000e00:	2b04      	cmp	r3, #4
 8000e02:	d1ee      	bne.n	8000de2 <HAL_RCC_ClockConfig+0xfa>
 8000e04:	e027      	b.n	8000e56 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d11d      	bne.n	8000e4a <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e0e:	e00a      	b.n	8000e26 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e10:	f7ff fa60 	bl	80002d4 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d901      	bls.n	8000e26 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e060      	b.n	8000ee8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e26:	4b33      	ldr	r3, [pc, #204]	; (8000ef4 <HAL_RCC_ClockConfig+0x20c>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 030c 	and.w	r3, r3, #12
 8000e2e:	2b08      	cmp	r3, #8
 8000e30:	d1ee      	bne.n	8000e10 <HAL_RCC_ClockConfig+0x128>
 8000e32:	e010      	b.n	8000e56 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e34:	f7ff fa4e 	bl	80002d4 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d901      	bls.n	8000e4a <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e04e      	b.n	8000ee8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e4a:	4b2a      	ldr	r3, [pc, #168]	; (8000ef4 <HAL_RCC_ClockConfig+0x20c>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f003 030c 	and.w	r3, r3, #12
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d1ee      	bne.n	8000e34 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e56:	4b26      	ldr	r3, [pc, #152]	; (8000ef0 <HAL_RCC_ClockConfig+0x208>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 0207 	and.w	r2, r3, #7
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d910      	bls.n	8000e86 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e64:	4922      	ldr	r1, [pc, #136]	; (8000ef0 <HAL_RCC_ClockConfig+0x208>)
 8000e66:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <HAL_RCC_ClockConfig+0x208>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f023 0207 	bic.w	r2, r3, #7
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e74:	4b1e      	ldr	r3, [pc, #120]	; (8000ef0 <HAL_RCC_ClockConfig+0x208>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0207 	and.w	r2, r3, #7
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d001      	beq.n	8000e86 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e030      	b.n	8000ee8 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0304 	and.w	r3, r3, #4
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d008      	beq.n	8000ea4 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e92:	4918      	ldr	r1, [pc, #96]	; (8000ef4 <HAL_RCC_ClockConfig+0x20c>)
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <HAL_RCC_ClockConfig+0x20c>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f003 0308 	and.w	r3, r3, #8
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d009      	beq.n	8000ec4 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000eb0:	4910      	ldr	r1, [pc, #64]	; (8000ef4 <HAL_RCC_ClockConfig+0x20c>)
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <HAL_RCC_ClockConfig+0x20c>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	691b      	ldr	r3, [r3, #16]
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ec4:	f000 f81c 	bl	8000f00 <HAL_RCC_GetSysClockFreq>
 8000ec8:	4601      	mov	r1, r0
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <HAL_RCC_ClockConfig+0x20c>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	091b      	lsrs	r3, r3, #4
 8000ed0:	f003 030f 	and.w	r3, r3, #15
 8000ed4:	4a08      	ldr	r2, [pc, #32]	; (8000ef8 <HAL_RCC_ClockConfig+0x210>)
 8000ed6:	5cd3      	ldrb	r3, [r2, r3]
 8000ed8:	fa21 f303 	lsr.w	r3, r1, r3
 8000edc:	4a07      	ldr	r2, [pc, #28]	; (8000efc <HAL_RCC_ClockConfig+0x214>)
 8000ede:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f7ff f9b5 	bl	8000250 <HAL_InitTick>
  
  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40022000 	.word	0x40022000
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	08004f48 	.word	0x08004f48
 8000efc:	2000007c 	.word	0x2000007c

08000f00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f00:	b490      	push	{r4, r7}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f06:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000f08:	1d3c      	adds	r4, r7, #4
 8000f0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f10:	4b28      	ldr	r3, [pc, #160]	; (8000fb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000f2a:	4b23      	ldr	r3, [pc, #140]	; (8000fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f003 030c 	and.w	r3, r3, #12
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	d002      	beq.n	8000f40 <HAL_RCC_GetSysClockFreq+0x40>
 8000f3a:	2b08      	cmp	r3, #8
 8000f3c:	d003      	beq.n	8000f46 <HAL_RCC_GetSysClockFreq+0x46>
 8000f3e:	e02d      	b.n	8000f9c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f40:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f42:	623b      	str	r3, [r7, #32]
      break;
 8000f44:	e02d      	b.n	8000fa2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	0c9b      	lsrs	r3, r3, #18
 8000f4a:	f003 030f 	and.w	r3, r3, #15
 8000f4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f52:	4413      	add	r3, r2
 8000f54:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000f58:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d013      	beq.n	8000f8c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	0c5b      	lsrs	r3, r3, #17
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f72:	4413      	add	r3, r2
 8000f74:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000f78:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	4a0f      	ldr	r2, [pc, #60]	; (8000fbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f7e:	fb02 f203 	mul.w	r2, r2, r3
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
 8000f8a:	e004      	b.n	8000f96 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	4a0c      	ldr	r2, [pc, #48]	; (8000fc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000f90:	fb02 f303 	mul.w	r3, r2, r3
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	623b      	str	r3, [r7, #32]
      break;
 8000f9a:	e002      	b.n	8000fa2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f9e:	623b      	str	r3, [r7, #32]
      break;
 8000fa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000fa2:	6a3b      	ldr	r3, [r7, #32]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3728      	adds	r7, #40	; 0x28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc90      	pop	{r4, r7}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	08004e90 	.word	0x08004e90
 8000fb4:	08004ea0 	.word	0x08004ea0
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	007a1200 	.word	0x007a1200
 8000fc0:	003d0900 	.word	0x003d0900

08000fc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <RCC_Delay+0x34>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <RCC_Delay+0x38>)
 8000fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd6:	0a5b      	lsrs	r3, r3, #9
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	fb02 f303 	mul.w	r3, r2, r3
 8000fde:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000fe0:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	1e5a      	subs	r2, r3, #1
 8000fe6:	60fa      	str	r2, [r7, #12]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1f9      	bne.n	8000fe0 <RCC_Delay+0x1c>
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	2000007c 	.word	0x2000007c
 8000ffc:	10624dd3 	.word	0x10624dd3

08001000 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af02      	add	r7, sp, #8
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	4613      	mov	r3, r2
 800100e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8001010:	2300      	movs	r3, #0
 8001012:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001014:	2300      	movs	r3, #0
 8001016:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800101e:	2b01      	cmp	r3, #1
 8001020:	d101      	bne.n	8001026 <HAL_SPI_Transmit+0x26>
 8001022:	2302      	movs	r3, #2
 8001024:	e123      	b.n	800126e <HAL_SPI_Transmit+0x26e>
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2201      	movs	r2, #1
 800102a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800102e:	f7ff f951 	bl	80002d4 <HAL_GetTick>
 8001032:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b01      	cmp	r3, #1
 800103e:	d002      	beq.n	8001046 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001040:	2302      	movs	r3, #2
 8001042:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001044:	e10a      	b.n	800125c <HAL_SPI_Transmit+0x25c>
  }

  if((pData == NULL ) || (Size == 0U))
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d002      	beq.n	8001052 <HAL_SPI_Transmit+0x52>
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d102      	bne.n	8001058 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001056:	e101      	b.n	800125c <HAL_SPI_Transmit+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2203      	movs	r2, #3
 800105c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2200      	movs	r2, #0
 8001064:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	68ba      	ldr	r2, [r7, #8]
 800106a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	88fa      	ldrh	r2, [r7, #6]
 8001070:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	88fa      	ldrh	r2, [r7, #6]
 8001076:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2200      	movs	r2, #0
 800107c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2200      	movs	r2, #0
 8001082:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2200      	movs	r2, #0
 8001088:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2200      	movs	r2, #0
 800108e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2200      	movs	r2, #0
 8001094:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800109e:	d107      	bne.n	80010b0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	6812      	ldr	r2, [r2, #0]
 80010a8:	6812      	ldr	r2, [r2, #0]
 80010aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ba:	2b40      	cmp	r3, #64	; 0x40
 80010bc:	d007      	beq.n	80010ce <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	6812      	ldr	r2, [r2, #0]
 80010c6:	6812      	ldr	r2, [r2, #0]
 80010c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010d6:	d147      	bne.n	8001168 <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d004      	beq.n	80010ea <HAL_SPI_Transmit+0xea>
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d138      	bne.n	800115c <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	8812      	ldrh	r2, [r2, #0]
 80010f2:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	3302      	adds	r3, #2
 80010f8:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80010fe:	b29b      	uxth	r3, r3
 8001100:	3b01      	subs	r3, #1
 8001102:	b29a      	uxth	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001108:	e028      	b.n	800115c <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b02      	cmp	r3, #2
 8001116:	d10f      	bne.n	8001138 <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	8812      	ldrh	r2, [r2, #0]
 8001120:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	3302      	adds	r3, #2
 8001126:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800112c:	b29b      	uxth	r3, r3
 800112e:	3b01      	subs	r3, #1
 8001130:	b29a      	uxth	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	86da      	strh	r2, [r3, #54]	; 0x36
 8001136:	e011      	b.n	800115c <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d00b      	beq.n	8001156 <HAL_SPI_Transmit+0x156>
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001144:	d00a      	beq.n	800115c <HAL_SPI_Transmit+0x15c>
 8001146:	f7ff f8c5 	bl	80002d4 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	1ad2      	subs	r2, r2, r3
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	429a      	cmp	r2, r3
 8001154:	d302      	bcc.n	800115c <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	77fb      	strb	r3, [r7, #31]
          goto error;
 800115a:	e07f      	b.n	800125c <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001160:	b29b      	uxth	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1d1      	bne.n	800110a <HAL_SPI_Transmit+0x10a>
 8001166:	e048      	b.n	80011fa <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d004      	beq.n	800117a <HAL_SPI_Transmit+0x17a>
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001174:	b29b      	uxth	r3, r3
 8001176:	2b01      	cmp	r3, #1
 8001178:	d13a      	bne.n	80011f0 <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	330c      	adds	r3, #12
 8001180:	68ba      	ldr	r2, [r7, #8]
 8001182:	7812      	ldrb	r2, [r2, #0]
 8001184:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	3301      	adds	r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001190:	b29b      	uxth	r3, r3
 8001192:	3b01      	subs	r3, #1
 8001194:	b29a      	uxth	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800119a:	e029      	b.n	80011f0 <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d110      	bne.n	80011cc <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	330c      	adds	r3, #12
 80011b0:	68ba      	ldr	r2, [r7, #8]
 80011b2:	7812      	ldrb	r2, [r2, #0]
 80011b4:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	3301      	adds	r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	3b01      	subs	r3, #1
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80011ca:	e011      	b.n	80011f0 <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00b      	beq.n	80011ea <HAL_SPI_Transmit+0x1ea>
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d8:	d00a      	beq.n	80011f0 <HAL_SPI_Transmit+0x1f0>
 80011da:	f7ff f87b 	bl	80002d4 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	1ad2      	subs	r2, r2, r3
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d302      	bcc.n	80011f0 <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80011ee:	e035      	b.n	800125c <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1d0      	bne.n	800119c <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	2201      	movs	r2, #1
 8001202:	2102      	movs	r1, #2
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f000 f9e2 	bl	80015ce <SPI_WaitFlagStateUntilTimeout>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d002      	beq.n	8001216 <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001214:	e022      	b.n	800125c <HAL_SPI_Transmit+0x25c>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	6839      	ldr	r1, [r7, #0]
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f000 fa40 	bl	80016a0 <SPI_CheckFlag_BSY>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d005      	beq.n	8001232 <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2220      	movs	r2, #32
 800122e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001230:	e014      	b.n	800125c <HAL_SPI_Transmit+0x25c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10a      	bne.n	8001250 <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	617b      	str	r3, [r7, #20]
 800124e:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2201      	movs	r2, #1
 8001260:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800126c:	7ffb      	ldrb	r3, [r7, #31]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3720      	adds	r7, #32
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b08c      	sub	sp, #48	; 0x30
 800127a:	af02      	add	r7, sp, #8
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
 8001288:	2300      	movs	r3, #0
 800128a:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8001290:	2301      	movs	r3, #1
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d101      	bne.n	80012a8 <HAL_SPI_TransmitReceive+0x32>
 80012a4:	2302      	movs	r3, #2
 80012a6:	e181      	b.n	80015ac <HAL_SPI_TransmitReceive+0x336>
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80012b0:	f7ff f810 	bl	80002d4 <HAL_GetTick>
 80012b4:	6178      	str	r0, [r7, #20]
  
  tmp  = hspi->State;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	61bb      	str	r3, [r7, #24]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d00e      	beq.n	80012ea <HAL_SPI_TransmitReceive+0x74>
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80012d2:	d106      	bne.n	80012e2 <HAL_SPI_TransmitReceive+0x6c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d102      	bne.n	80012e2 <HAL_SPI_TransmitReceive+0x6c>
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	2b04      	cmp	r3, #4
 80012e0:	d003      	beq.n	80012ea <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 80012e2:	2302      	movs	r3, #2
 80012e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80012e8:	e156      	b.n	8001598 <HAL_SPI_TransmitReceive+0x322>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d005      	beq.n	80012fc <HAL_SPI_TransmitReceive+0x86>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d002      	beq.n	80012fc <HAL_SPI_TransmitReceive+0x86>
 80012f6:	887b      	ldrh	r3, [r7, #2]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d103      	bne.n	8001304 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001302:	e149      	b.n	8001598 <HAL_SPI_TransmitReceive+0x322>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b01      	cmp	r3, #1
 800130e:	d103      	bne.n	8001318 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2205      	movs	r2, #5
 8001314:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2200      	movs	r2, #0
 800131c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	887a      	ldrh	r2, [r7, #2]
 800132e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	887a      	ldrh	r2, [r7, #2]
 800133a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	887a      	ldrh	r2, [r7, #2]
 8001340:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2200      	movs	r2, #0
 8001346:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2200      	movs	r2, #0
 800134c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001358:	2b40      	cmp	r3, #64	; 0x40
 800135a:	d007      	beq.n	800136c <HAL_SPI_TransmitReceive+0xf6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	6812      	ldr	r2, [r2, #0]
 8001364:	6812      	ldr	r2, [r2, #0]
 8001366:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800136a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001374:	d171      	bne.n	800145a <HAL_SPI_TransmitReceive+0x1e4>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d004      	beq.n	8001388 <HAL_SPI_TransmitReceive+0x112>
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001382:	b29b      	uxth	r3, r3
 8001384:	2b01      	cmp	r3, #1
 8001386:	d15d      	bne.n	8001444 <HAL_SPI_TransmitReceive+0x1ce>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	8812      	ldrh	r2, [r2, #0]
 8001390:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	3302      	adds	r3, #2
 8001396:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800139c:	b29b      	uxth	r3, r3
 800139e:	3b01      	subs	r3, #1
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80013a6:	e04d      	b.n	8001444 <HAL_SPI_TransmitReceive+0x1ce>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d01c      	beq.n	80013e8 <HAL_SPI_TransmitReceive+0x172>
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d017      	beq.n	80013e8 <HAL_SPI_TransmitReceive+0x172>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d110      	bne.n	80013e8 <HAL_SPI_TransmitReceive+0x172>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	8812      	ldrh	r2, [r2, #0]
 80013ce:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	3302      	adds	r3, #2
 80013d4:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013da:	b29b      	uxth	r3, r3
 80013dc:	3b01      	subs	r3, #1
 80013de:	b29a      	uxth	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d018      	beq.n	8001424 <HAL_SPI_TransmitReceive+0x1ae>
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d111      	bne.n	8001424 <HAL_SPI_TransmitReceive+0x1ae>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	b29a      	uxth	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3302      	adds	r3, #2
 8001410:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001416:	b29b      	uxth	r3, r3
 8001418:	3b01      	subs	r3, #1
 800141a:	b29a      	uxth	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8001420:	2301      	movs	r3, #1
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800142a:	d00b      	beq.n	8001444 <HAL_SPI_TransmitReceive+0x1ce>
 800142c:	f7fe ff52 	bl	80002d4 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	1ad2      	subs	r2, r2, r3
 8001436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001438:	429a      	cmp	r2, r3
 800143a:	d303      	bcc.n	8001444 <HAL_SPI_TransmitReceive+0x1ce>
      {
        errorcode = HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8001442:	e0a9      	b.n	8001598 <HAL_SPI_TransmitReceive+0x322>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001448:	b29b      	uxth	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1ac      	bne.n	80013a8 <HAL_SPI_TransmitReceive+0x132>
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001452:	b29b      	uxth	r3, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1a7      	bne.n	80013a8 <HAL_SPI_TransmitReceive+0x132>
 8001458:	e071      	b.n	800153e <HAL_SPI_TransmitReceive+0x2c8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d004      	beq.n	800146c <HAL_SPI_TransmitReceive+0x1f6>
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001466:	b29b      	uxth	r3, r3
 8001468:	2b01      	cmp	r3, #1
 800146a:	d15e      	bne.n	800152a <HAL_SPI_TransmitReceive+0x2b4>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	330c      	adds	r3, #12
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	7812      	ldrb	r2, [r2, #0]
 8001476:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	3301      	adds	r3, #1
 800147c:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001482:	b29b      	uxth	r3, r3
 8001484:	3b01      	subs	r3, #1
 8001486:	b29a      	uxth	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800148c:	e04d      	b.n	800152a <HAL_SPI_TransmitReceive+0x2b4>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	2b00      	cmp	r3, #0
 8001492:	d01d      	beq.n	80014d0 <HAL_SPI_TransmitReceive+0x25a>
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001498:	b29b      	uxth	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d018      	beq.n	80014d0 <HAL_SPI_TransmitReceive+0x25a>
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d111      	bne.n	80014d0 <HAL_SPI_TransmitReceive+0x25a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f103 020c 	add.w	r2, r3, #12
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	1c59      	adds	r1, r3, #1
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	3b01      	subs	r3, #1
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d017      	beq.n	800150a <HAL_SPI_TransmitReceive+0x294>
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d110      	bne.n	800150a <HAL_SPI_TransmitReceive+0x294>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	6812      	ldr	r2, [r2, #0]
 80014f2:	68d2      	ldr	r2, [r2, #12]
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	3b01      	subs	r3, #1
 8001500:	b29a      	uxth	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8001506:	2301      	movs	r3, #1
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800150a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800150c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001510:	d00b      	beq.n	800152a <HAL_SPI_TransmitReceive+0x2b4>
 8001512:	f7fe fedf 	bl	80002d4 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	1ad2      	subs	r2, r2, r3
 800151c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800151e:	429a      	cmp	r2, r3
 8001520:	d303      	bcc.n	800152a <HAL_SPI_TransmitReceive+0x2b4>
      {
        errorcode = HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8001528:	e036      	b.n	8001598 <HAL_SPI_TransmitReceive+0x322>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800152e:	b29b      	uxth	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1ac      	bne.n	800148e <HAL_SPI_TransmitReceive+0x218>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001538:	b29b      	uxth	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1a7      	bne.n	800148e <HAL_SPI_TransmitReceive+0x218>
    }
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001544:	2201      	movs	r2, #1
 8001546:	2102      	movs	r1, #2
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f000 f840 	bl	80015ce <SPI_WaitFlagStateUntilTimeout>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_SPI_TransmitReceive+0x2e6>
  {
    errorcode = HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800155a:	e01d      	b.n	8001598 <HAL_SPI_TransmitReceive+0x322>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f000 f89d 	bl	80016a0 <SPI_CheckFlag_BSY>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d006      	beq.n	800157a <HAL_SPI_TransmitReceive+0x304>
  {
    errorcode = HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2220      	movs	r2, #32
 8001576:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001578:	e00e      	b.n	8001598 <HAL_SPI_TransmitReceive+0x322>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10a      	bne.n	8001598 <HAL_SPI_TransmitReceive+0x322>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	693b      	ldr	r3, [r7, #16]
  }
  
error :
  hspi->State = HAL_SPI_STATE_READY;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80015a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3728      	adds	r7, #40	; 0x28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80015c2:	b2db      	uxtb	r3, r3
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr

080015ce <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b084      	sub	sp, #16
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	60f8      	str	r0, [r7, #12]
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80015dc:	e04d      	b.n	800167a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e4:	d049      	beq.n	800167a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d007      	beq.n	80015fc <SPI_WaitFlagStateUntilTimeout+0x2e>
 80015ec:	f7fe fe72 	bl	80002d4 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	1ad2      	subs	r2, r2, r3
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d33e      	bcc.n	800167a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	6852      	ldr	r2, [r2, #4]
 8001606:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800160a:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001614:	d111      	bne.n	800163a <SPI_WaitFlagStateUntilTimeout+0x6c>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800161e:	d004      	beq.n	800162a <SPI_WaitFlagStateUntilTimeout+0x5c>
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001628:	d107      	bne.n	800163a <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	6812      	ldr	r2, [r2, #0]
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001638:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001642:	d110      	bne.n	8001666 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6819      	ldr	r1, [r3, #0]
 800164e:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001652:	400b      	ands	r3, r1
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001664:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e00e      	b.n	8001698 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	401a      	ands	r2, r3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	429a      	cmp	r2, r3
 8001688:	d101      	bne.n	800168e <SPI_WaitFlagStateUntilTimeout+0xc0>
 800168a:	2201      	movs	r2, #1
 800168c:	e000      	b.n	8001690 <SPI_WaitFlagStateUntilTimeout+0xc2>
 800168e:	2200      	movs	r2, #0
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	429a      	cmp	r2, r3
 8001694:	d1a3      	bne.n	80015de <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af02      	add	r7, sp, #8
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	2200      	movs	r2, #0
 80016b4:	2180      	movs	r1, #128	; 0x80
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f7ff ff89 	bl	80015ce <SPI_WaitFlagStateUntilTimeout>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d007      	beq.n	80016d2 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c6:	f043 0220 	orr.w	r2, r3, #32
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e000      	b.n	80016d4 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e056      	b.n	800179c <HAL_SPI_Init+0xc0>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <HAL_SPI_Init+0x2a>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f002 f975 	bl	80039f0 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2202      	movs	r2, #2
 800170a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	6812      	ldr	r2, [r2, #0]
 8001718:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800171c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6851      	ldr	r1, [r2, #4]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6892      	ldr	r2, [r2, #8]
 800172a:	4311      	orrs	r1, r2
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	68d2      	ldr	r2, [r2, #12]
 8001730:	4311      	orrs	r1, r2
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6912      	ldr	r2, [r2, #16]
 8001736:	4311      	orrs	r1, r2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6952      	ldr	r2, [r2, #20]
 800173c:	4311      	orrs	r1, r2
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6992      	ldr	r2, [r2, #24]
 8001742:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001746:	4311      	orrs	r1, r2
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	69d2      	ldr	r2, [r2, #28]
 800174c:	4311      	orrs	r1, r2
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6a12      	ldr	r2, [r2, #32]
 8001752:	4311      	orrs	r1, r2
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001758:	430a      	orrs	r2, r1
 800175a:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6992      	ldr	r2, [r2, #24]
 8001764:	0c12      	lsrs	r2, r2, #16
 8001766:	f002 0104 	and.w	r1, r2, #4
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800176e:	430a      	orrs	r2, r1
 8001770:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800177a:	611a      	str	r2, [r3, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	69d2      	ldr	r2, [r2, #28]
 8001786:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800178a:	61da      	str	r2, [r3, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  
  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80017a4:	b490      	push	{r4, r7}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	461a      	mov	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	0e1b      	lsrs	r3, r3, #24
 80017b8:	4413      	add	r3, r2
 80017ba:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80017bc:	6822      	ldr	r2, [r4, #0]
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	fa93 f3a3 	rbit	r3, r3
 80017c8:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	fab3 f383 	clz	r3, r3
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	210f      	movs	r1, #15
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	401a      	ands	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	fa93 f3a3 	rbit	r3, r3
 80017e6:	61bb      	str	r3, [r7, #24]
  return(result);
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	fab3 f383 	clz	r3, r3
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	fa01 f303 	lsl.w	r3, r1, r3
 80017f6:	4313      	orrs	r3, r2
 80017f8:	6023      	str	r3, [r4, #0]
}
 80017fa:	bf00      	nop
 80017fc:	3720      	adds	r7, #32
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc90      	pop	{r4, r7}
 8001802:	4770      	bx	lr

08001804 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001804:	b490      	push	{r4, r7}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	461a      	mov	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	0e1b      	lsrs	r3, r3, #24
 8001818:	4413      	add	r3, r2
 800181a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800181c:	6822      	ldr	r2, [r4, #0]
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	fa93 f3a3 	rbit	r3, r3
 8001828:	613b      	str	r3, [r7, #16]
  return(result);
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	fab3 f383 	clz	r3, r3
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	2103      	movs	r1, #3
 8001834:	fa01 f303 	lsl.w	r3, r1, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	401a      	ands	r2, r3
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	fa93 f3a3 	rbit	r3, r3
 8001846:	61bb      	str	r3, [r7, #24]
  return(result);
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	fab3 f383 	clz	r3, r3
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	fa01 f303 	lsl.w	r3, r1, r3
 8001856:	4313      	orrs	r3, r2
 8001858:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 800185a:	bf00      	nop
 800185c:	3720      	adds	r7, #32
 800185e:	46bd      	mov	sp, r7
 8001860:	bc90      	pop	{r4, r7}
 8001862:	4770      	bx	lr

08001864 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 8001864:	b490      	push	{r4, r7}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	461a      	mov	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	0e1b      	lsrs	r3, r3, #24
 8001878:	4413      	add	r3, r2
 800187a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800187c:	6822      	ldr	r2, [r4, #0]
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	fa93 f3a3 	rbit	r3, r3
 8001888:	613b      	str	r3, [r7, #16]
  return(result);
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	fab3 f383 	clz	r3, r3
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	2104      	movs	r1, #4
 8001894:	fa01 f303 	lsl.w	r3, r1, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	401a      	ands	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	fa93 f3a3 	rbit	r3, r3
 80018a6:	61bb      	str	r3, [r7, #24]
  return(result);
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	fab3 f383 	clz	r3, r3
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	4313      	orrs	r3, r2
 80018b8:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 80018ba:	bf00      	nop
 80018bc:	3720      	adds	r7, #32
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc90      	pop	{r4, r7}
 80018c2:	4770      	bx	lr

080018c4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b087      	sub	sp, #28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	68da      	ldr	r2, [r3, #12]
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	0a1b      	lsrs	r3, r3, #8
 80018d8:	43db      	mvns	r3, r3
 80018da:	401a      	ands	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	0a1b      	lsrs	r3, r3, #8
 80018e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	fa93 f3a3 	rbit	r3, r3
 80018e8:	613b      	str	r3, [r7, #16]
  return(result);
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	fab3 f383 	clz	r3, r3
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	fa01 f303 	lsl.w	r3, r1, r3
 80018f6:	431a      	orrs	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	60da      	str	r2, [r3, #12]
}
 80018fc:	bf00      	nop
 80018fe:	371c      	adds	r7, #28
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr

08001906 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b088      	sub	sp, #32
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	021b      	lsls	r3, r3, #8
 8001916:	0c1b      	lsrs	r3, r3, #16
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	fa93 f3a3 	rbit	r3, r3
 8001924:	60fb      	str	r3, [r7, #12]
  return(result);
 8001926:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8001928:	fab3 f383 	clz	r3, r3
 800192c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0U)
 800192e:	e040      	b.n	80019b2 <LL_GPIO_Init+0xac>
  {
    /* skip if bit is not set */
    if ((pinmask & (1U << pinpos)) != 0U)
 8001930:	2201      	movs	r2, #1
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	409a      	lsls	r2, r3
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	4013      	ands	r3, r2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d036      	beq.n	80019ac <LL_GPIO_Init+0xa6>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	2b07      	cmp	r3, #7
 8001942:	d806      	bhi.n	8001952 <LL_GPIO_Init+0x4c>
      {
        currentpin = (0x00000101U << pinpos);
 8001944:	f240 1201 	movw	r2, #257	; 0x101
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	61bb      	str	r3, [r7, #24]
 8001950:	e008      	b.n	8001964 <LL_GPIO_Init+0x5e>
      }
      else
      {
        currentpin = ((0x00010001U << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000U);
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3b08      	subs	r3, #8
 8001956:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001962:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	461a      	mov	r2, r3
 800196a:	69b9      	ldr	r1, [r7, #24]
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ff19 	bl	80017a4 <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	461a      	mov	r2, r3
 8001978:	69b9      	ldr	r1, [r7, #24]
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ffa2 	bl	80018c4 <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d003      	beq.n	8001990 <LL_GPIO_Init+0x8a>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b09      	cmp	r3, #9
 800198e:	d10d      	bne.n	80019ac <LL_GPIO_Init+0xa6>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	461a      	mov	r2, r3
 8001996:	69b9      	ldr	r1, [r7, #24]
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff ff33 	bl	8001804 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	461a      	mov	r2, r3
 80019a4:	69b9      	ldr	r1, [r7, #24]
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ff5c 	bl	8001864 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	3301      	adds	r3, #1
 80019b0:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0U)
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1b8      	bne.n	8001930 <LL_GPIO_Init+0x2a>
  }
  return (SUCCESS);
 80019be:	2301      	movs	r3, #1
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3720      	adds	r7, #32
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80019cc:	4b03      	ldr	r3, [pc, #12]	; (80019dc <LL_RCC_GetSysClkSource+0x14>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 030c 	and.w	r3, r3, #12
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr
 80019dc:	40021000 	.word	0x40021000

080019e0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <LL_RCC_GetAHBPrescaler+0x14>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr
 80019f4:	40021000 	.word	0x40021000

080019f8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <LL_RCC_GetAPB1Prescaler+0x14>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr
 8001a0c:	40021000 	.word	0x40021000

08001a10 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <LL_RCC_GetAPB2Prescaler+0x14>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr
 8001a24:	40021000 	.word	0x40021000

08001a28 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001a2c:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <LL_RCC_PLL_GetMainSource+0x14>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	40021000 	.word	0x40021000

08001a40 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8001a44:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr
 8001a54:	40021000 	.word	0x40021000

08001a58 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8001a5c:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <LL_RCC_PLL_GetPrediv+0x18>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	0c5b      	lsrs	r3, r3, #17
 8001a62:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000

08001a74 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001a7c:	f000 f820 	bl	8001ac0 <RCC_GetSystemClockFreq>
 8001a80:	4602      	mov	r2, r0
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 f83a 	bl	8001b04 <RCC_GetHCLKClockFreq>
 8001a90:	4602      	mov	r2, r0
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 f848 	bl	8001b30 <RCC_GetPCLK1ClockFreq>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 f854 	bl	8001b58 <RCC_GetPCLK2ClockFreq>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	60da      	str	r2, [r3, #12]
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001aca:	f7ff ff7d 	bl	80019c8 <LL_RCC_GetSysClkSource>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b04      	cmp	r3, #4
 8001ad2:	d006      	beq.n	8001ae2 <RCC_GetSystemClockFreq+0x22>
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d007      	beq.n	8001ae8 <RCC_GetSystemClockFreq+0x28>
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d109      	bne.n	8001af0 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <RCC_GetSystemClockFreq+0x40>)
 8001ade:	607b      	str	r3, [r7, #4]
      break;
 8001ae0:	e009      	b.n	8001af6 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001ae2:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <RCC_GetSystemClockFreq+0x40>)
 8001ae4:	607b      	str	r3, [r7, #4]
      break;
 8001ae6:	e006      	b.n	8001af6 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001ae8:	f000 f84a 	bl	8001b80 <RCC_PLL_GetFreqDomain_SYS>
 8001aec:	6078      	str	r0, [r7, #4]
      break;
 8001aee:	e002      	b.n	8001af6 <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <RCC_GetSystemClockFreq+0x40>)
 8001af2:	607b      	str	r3, [r7, #4]
      break;
 8001af4:	bf00      	nop
  }

  return frequency;
 8001af6:	687b      	ldr	r3, [r7, #4]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	007a1200 	.word	0x007a1200

08001b04 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001b0c:	f7ff ff68 	bl	80019e0 <LL_RCC_GetAHBPrescaler>
 8001b10:	4603      	mov	r3, r0
 8001b12:	091b      	lsrs	r3, r3, #4
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <RCC_GetHCLKClockFreq+0x28>)
 8001b1a:	5cd3      	ldrb	r3, [r2, r3]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	40d3      	lsrs	r3, r2
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	08004f48 	.word	0x08004f48

08001b30 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001b38:	f7ff ff5e 	bl	80019f8 <LL_RCC_GetAPB1Prescaler>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	0a1b      	lsrs	r3, r3, #8
 8001b40:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <RCC_GetPCLK1ClockFreq+0x24>)
 8001b42:	5cd3      	ldrb	r3, [r2, r3]
 8001b44:	461a      	mov	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	40d3      	lsrs	r3, r2
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	08004f58 	.word	0x08004f58

08001b58 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001b60:	f7ff ff56 	bl	8001a10 <LL_RCC_GetAPB2Prescaler>
 8001b64:	4603      	mov	r3, r0
 8001b66:	0adb      	lsrs	r3, r3, #11
 8001b68:	4a04      	ldr	r2, [pc, #16]	; (8001b7c <RCC_GetPCLK2ClockFreq+0x24>)
 8001b6a:	5cd3      	ldrb	r3, [r2, r3]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	40d3      	lsrs	r3, r2
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	08004f58 	.word	0x08004f58

08001b80 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001b8e:	f7ff ff4b 	bl	8001a28 <LL_RCC_PLL_GetMainSource>
 8001b92:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <RCC_PLL_GetFreqDomain_SYS+0x22>
 8001b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b9e:	d003      	beq.n	8001ba8 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8001ba0:	e00b      	b.n	8001bba <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8001ba4:	607b      	str	r3, [r7, #4]
      break;
 8001ba6:	e00b      	b.n	8001bc0 <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8001ba8:	f7ff ff56 	bl	8001a58 <LL_RCC_PLL_GetPrediv>
 8001bac:	4603      	mov	r3, r0
 8001bae:	3301      	adds	r3, #1
 8001bb0:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8001bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb6:	607b      	str	r3, [r7, #4]
      break;
 8001bb8:	e002      	b.n	8001bc0 <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8001bba:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8001bbc:	607b      	str	r3, [r7, #4]
      break;
 8001bbe:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8001bc0:	f7ff ff3e 	bl	8001a40 <LL_RCC_PLL_GetMultiplicator>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	0c9b      	lsrs	r3, r3, #18
 8001bc8:	3302      	adds	r3, #2
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	fb02 f303 	mul.w	r3, r2, r3
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	003d0900 	.word	0x003d0900
 8001bdc:	007a1200 	.word	0x007a1200

08001be0 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bf4:	bf0c      	ite	eq
 8001bf6:	2301      	moveq	r3, #1
 8001bf8:	2300      	movne	r3, #0
 8001bfa:	b2db      	uxtb	r3, r3
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr

08001c06 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	611a      	str	r2, [r3, #16]
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr

08001c2a <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	615a      	str	r2, [r3, #20]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr
	...

08001c50 <LL_USART_SetBaudRate>:
  * @param  PeriphClk Peripheral Clock
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001c5c:	68ba      	ldr	r2, [r7, #8]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	009a      	lsls	r2, r3, #2
 8001c66:	441a      	add	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c70:	4a25      	ldr	r2, [pc, #148]	; (8001d08 <LL_USART_SetBaudRate+0xb8>)
 8001c72:	fba2 2303 	umull	r2, r3, r2, r3
 8001c76:	095b      	lsrs	r3, r3, #5
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	011b      	lsls	r3, r3, #4
 8001c7c:	b299      	uxth	r1, r3
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	009a      	lsls	r2, r3, #2
 8001c88:	441a      	add	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c92:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <LL_USART_SetBaudRate+0xb8>)
 8001c94:	fba3 0302 	umull	r0, r3, r3, r2
 8001c98:	095b      	lsrs	r3, r3, #5
 8001c9a:	2064      	movs	r0, #100	; 0x64
 8001c9c:	fb00 f303 	mul.w	r3, r0, r3
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	3332      	adds	r3, #50	; 0x32
 8001ca6:	4a18      	ldr	r2, [pc, #96]	; (8001d08 <LL_USART_SetBaudRate+0xb8>)
 8001ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cac:	095b      	lsrs	r3, r3, #5
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	440b      	add	r3, r1
 8001cb8:	b299      	uxth	r1, r3
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009a      	lsls	r2, r3, #2
 8001cc4:	441a      	add	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cce:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <LL_USART_SetBaudRate+0xb8>)
 8001cd0:	fba3 0302 	umull	r0, r3, r3, r2
 8001cd4:	095b      	lsrs	r3, r3, #5
 8001cd6:	2064      	movs	r0, #100	; 0x64
 8001cd8:	fb00 f303 	mul.w	r3, r0, r3
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	3332      	adds	r3, #50	; 0x32
 8001ce2:	4a09      	ldr	r2, [pc, #36]	; (8001d08 <LL_USART_SetBaudRate+0xb8>)
 8001ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce8:	095b      	lsrs	r3, r3, #5
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	440b      	add	r3, r1
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	609a      	str	r2, [r3, #8]
}
 8001cfc:	bf00      	nop
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	51eb851f 	.word	0x51eb851f

08001d0c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b088      	sub	sp, #32
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001d16:	2300      	movs	r3, #0
 8001d18:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ff5e 	bl	8001be0 <LL_USART_IsEnabled>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d153      	bne.n	8001dd2 <LL_USART_Init+0xc6>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001d32:	f023 030c 	bic.w	r3, r3, #12
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	6851      	ldr	r1, [r2, #4]
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	68d2      	ldr	r2, [r2, #12]
 8001d3e:	4311      	orrs	r1, r2
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	6912      	ldr	r2, [r2, #16]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	4619      	mov	r1, r3
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff ff57 	bl	8001c06 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff ff63 	bl	8001c2a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8001d64:	f107 0308 	add.w	r3, r7, #8
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff fe83 	bl	8001a74 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a1a      	ldr	r2, [pc, #104]	; (8001ddc <LL_USART_Init+0xd0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d102      	bne.n	8001d7c <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	61bb      	str	r3, [r7, #24]
 8001d7a:	e01a      	b.n	8001db2 <LL_USART_Init+0xa6>
    }
    else if (USARTx == USART2)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a18      	ldr	r2, [pc, #96]	; (8001de0 <LL_USART_Init+0xd4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d102      	bne.n	8001d8a <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	61bb      	str	r3, [r7, #24]
 8001d88:	e013      	b.n	8001db2 <LL_USART_Init+0xa6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a15      	ldr	r2, [pc, #84]	; (8001de4 <LL_USART_Init+0xd8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d102      	bne.n	8001d98 <LL_USART_Init+0x8c>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	61bb      	str	r3, [r7, #24]
 8001d96:	e00c      	b.n	8001db2 <LL_USART_Init+0xa6>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a13      	ldr	r2, [pc, #76]	; (8001de8 <LL_USART_Init+0xdc>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d102      	bne.n	8001da6 <LL_USART_Init+0x9a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	61bb      	str	r3, [r7, #24]
 8001da4:	e005      	b.n	8001db2 <LL_USART_Init+0xa6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a10      	ldr	r2, [pc, #64]	; (8001dec <LL_USART_Init+0xe0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d101      	bne.n	8001db2 <LL_USART_Init+0xa6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00c      	beq.n	8001dd2 <LL_USART_Init+0xc6>
        && (USART_InitStruct->BaudRate != 0U))
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d008      	beq.n	8001dd2 <LL_USART_Init+0xc6>
    {
      status = SUCCESS;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	69b9      	ldr	r1, [r7, #24]
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff ff3f 	bl	8001c50 <LL_USART_SetBaudRate>
#endif /* USART_OverSampling_Feature */
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001dd2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3720      	adds	r7, #32
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40013800 	.word	0x40013800
 8001de0:	40004400 	.word	0x40004400
 8001de4:	40004800 	.word	0x40004800
 8001de8:	40004c00 	.word	0x40004c00
 8001dec:	40005000 	.word	0x40005000

08001df0 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8001df8:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <WIZCHIP_READ+0x94>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001dfe:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <WIZCHIP_READ+0x94>)
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001e04:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <WIZCHIP_READ+0x94>)
 8001e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <WIZCHIP_READ+0x24>
 8001e0c:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <WIZCHIP_READ+0x94>)
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d114      	bne.n	8001e3e <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001e14:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <WIZCHIP_READ+0x94>)
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	0c12      	lsrs	r2, r2, #16
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	4610      	mov	r0, r2
 8001e20:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001e22:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <WIZCHIP_READ+0x94>)
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	0a12      	lsrs	r2, r2, #8
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001e30:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <WIZCHIP_READ+0x94>)
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	4610      	mov	r0, r2
 8001e3a:	4798      	blx	r3
 8001e3c:	e011      	b.n	8001e62 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	0c1b      	lsrs	r3, r3, #16
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	0a1b      	lsrs	r3, r3, #8
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001e54:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <WIZCHIP_READ+0x94>)
 8001e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e58:	f107 020c 	add.w	r2, r7, #12
 8001e5c:	2103      	movs	r1, #3
 8001e5e:	4610      	mov	r0, r2
 8001e60:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8001e62:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <WIZCHIP_READ+0x94>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	4798      	blx	r3
 8001e68:	4603      	mov	r3, r0
 8001e6a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <WIZCHIP_READ+0x94>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001e72:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <WIZCHIP_READ+0x94>)
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	4798      	blx	r3
   return ret;
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000008 	.word	0x20000008

08001e88 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8001e94:	4b22      	ldr	r3, [pc, #136]	; (8001f20 <WIZCHIP_WRITE+0x98>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001e9a:	4b21      	ldr	r3, [pc, #132]	; (8001f20 <WIZCHIP_WRITE+0x98>)
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f043 0304 	orr.w	r3, r3, #4
 8001ea6:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001ea8:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <WIZCHIP_WRITE+0x98>)
 8001eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d119      	bne.n	8001ee4 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001eb0:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <WIZCHIP_WRITE+0x98>)
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	0c12      	lsrs	r2, r2, #16
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	4610      	mov	r0, r2
 8001ebc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001ebe:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <WIZCHIP_WRITE+0x98>)
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	0a12      	lsrs	r2, r2, #8
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <WIZCHIP_WRITE+0x98>)
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8001ed8:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <WIZCHIP_WRITE+0x98>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	78fa      	ldrb	r2, [r7, #3]
 8001ede:	4610      	mov	r0, r2
 8001ee0:	4798      	blx	r3
 8001ee2:	e013      	b.n	8001f0c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	0c1b      	lsrs	r3, r3, #16
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	0a1b      	lsrs	r3, r3, #8
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8001efa:	78fb      	ldrb	r3, [r7, #3]
 8001efc:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001efe:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <WIZCHIP_WRITE+0x98>)
 8001f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f02:	f107 020c 	add.w	r2, r7, #12
 8001f06:	2104      	movs	r1, #4
 8001f08:	4610      	mov	r0, r2
 8001f0a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <WIZCHIP_WRITE+0x98>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001f12:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <WIZCHIP_WRITE+0x98>)
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	4798      	blx	r3
}
 8001f18:	bf00      	nop
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000008 	.word	0x20000008

08001f24 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001f24:	b590      	push	{r4, r7, lr}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001f32:	4b2b      	ldr	r3, [pc, #172]	; (8001fe0 <WIZCHIP_READ_BUF+0xbc>)
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001f38:	4b29      	ldr	r3, [pc, #164]	; (8001fe0 <WIZCHIP_READ_BUF+0xbc>)
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001f3e:	4b28      	ldr	r3, [pc, #160]	; (8001fe0 <WIZCHIP_READ_BUF+0xbc>)
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <WIZCHIP_READ_BUF+0x2a>
 8001f46:	4b26      	ldr	r3, [pc, #152]	; (8001fe0 <WIZCHIP_READ_BUF+0xbc>)
 8001f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d126      	bne.n	8001f9c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001f4e:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <WIZCHIP_READ_BUF+0xbc>)
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	0c12      	lsrs	r2, r2, #16
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	4610      	mov	r0, r2
 8001f5a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001f5c:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <WIZCHIP_READ_BUF+0xbc>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	0a12      	lsrs	r2, r2, #8
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	4610      	mov	r0, r2
 8001f68:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001f6a:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <WIZCHIP_READ_BUF+0xbc>)
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	4610      	mov	r0, r2
 8001f74:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001f76:	2300      	movs	r3, #0
 8001f78:	82fb      	strh	r3, [r7, #22]
 8001f7a:	e00a      	b.n	8001f92 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8001f7c:	8afb      	ldrh	r3, [r7, #22]
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	18d4      	adds	r4, r2, r3
 8001f82:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <WIZCHIP_READ_BUF+0xbc>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	4798      	blx	r3
 8001f88:	4603      	mov	r3, r0
 8001f8a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8001f8c:	8afb      	ldrh	r3, [r7, #22]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	82fb      	strh	r3, [r7, #22]
 8001f92:	8afa      	ldrh	r2, [r7, #22]
 8001f94:	88fb      	ldrh	r3, [r7, #6]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d3f0      	bcc.n	8001f7c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001f9a:	e017      	b.n	8001fcc <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	0c1b      	lsrs	r3, r3, #16
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	0a1b      	lsrs	r3, r3, #8
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <WIZCHIP_READ_BUF+0xbc>)
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb6:	f107 0210 	add.w	r2, r7, #16
 8001fba:	2103      	movs	r1, #3
 8001fbc:	4610      	mov	r0, r2
 8001fbe:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001fc0:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <WIZCHIP_READ_BUF+0xbc>)
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	88fa      	ldrh	r2, [r7, #6]
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	68b8      	ldr	r0, [r7, #8]
 8001fca:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001fcc:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <WIZCHIP_READ_BUF+0xbc>)
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001fd2:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <WIZCHIP_READ_BUF+0xbc>)
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	4798      	blx	r3
}
 8001fd8:	bf00      	nop
 8001fda:	371c      	adds	r7, #28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd90      	pop	{r4, r7, pc}
 8001fe0:	20000008 	.word	0x20000008

08001fe4 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001ff2:	4b2b      	ldr	r3, [pc, #172]	; (80020a0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001ff8:	4b29      	ldr	r3, [pc, #164]	; (80020a0 <WIZCHIP_WRITE_BUF+0xbc>)
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f043 0304 	orr.w	r3, r3, #4
 8002004:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002006:	4b26      	ldr	r3, [pc, #152]	; (80020a0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200a:	2b00      	cmp	r3, #0
 800200c:	d126      	bne.n	800205c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800200e:	4b24      	ldr	r3, [pc, #144]	; (80020a0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	0c12      	lsrs	r2, r2, #16
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	4610      	mov	r0, r2
 800201a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800201c:	4b20      	ldr	r3, [pc, #128]	; (80020a0 <WIZCHIP_WRITE_BUF+0xbc>)
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	0a12      	lsrs	r2, r2, #8
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	4610      	mov	r0, r2
 8002028:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800202a:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <WIZCHIP_WRITE_BUF+0xbc>)
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	4610      	mov	r0, r2
 8002034:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002036:	2300      	movs	r3, #0
 8002038:	82fb      	strh	r3, [r7, #22]
 800203a:	e00a      	b.n	8002052 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 800203c:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <WIZCHIP_WRITE_BUF+0xbc>)
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	8afa      	ldrh	r2, [r7, #22]
 8002042:	68b9      	ldr	r1, [r7, #8]
 8002044:	440a      	add	r2, r1
 8002046:	7812      	ldrb	r2, [r2, #0]
 8002048:	4610      	mov	r0, r2
 800204a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800204c:	8afb      	ldrh	r3, [r7, #22]
 800204e:	3301      	adds	r3, #1
 8002050:	82fb      	strh	r3, [r7, #22]
 8002052:	8afa      	ldrh	r2, [r7, #22]
 8002054:	88fb      	ldrh	r3, [r7, #6]
 8002056:	429a      	cmp	r2, r3
 8002058:	d3f0      	bcc.n	800203c <WIZCHIP_WRITE_BUF+0x58>
 800205a:	e017      	b.n	800208c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	0c1b      	lsrs	r3, r3, #16
 8002060:	b2db      	uxtb	r3, r3
 8002062:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	0a1b      	lsrs	r3, r3, #8
 8002068:	b2db      	uxtb	r3, r3
 800206a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	b2db      	uxtb	r3, r3
 8002070:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002072:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002076:	f107 0210 	add.w	r2, r7, #16
 800207a:	2103      	movs	r1, #3
 800207c:	4610      	mov	r0, r2
 800207e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8002080:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	88fa      	ldrh	r2, [r7, #6]
 8002086:	4611      	mov	r1, r2
 8002088:	68b8      	ldr	r0, [r7, #8]
 800208a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800208c:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <WIZCHIP_WRITE_BUF+0xbc>)
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002092:	4b03      	ldr	r3, [pc, #12]	; (80020a0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	4798      	blx	r3
}
 8002098:	bf00      	nop
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20000008 	.word	0x20000008

080020a4 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	81fb      	strh	r3, [r7, #14]
 80020b2:	2300      	movs	r3, #0
 80020b4:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	3301      	adds	r3, #1
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff fe94 	bl	8001df0 <WIZCHIP_READ>
 80020c8:	4603      	mov	r3, r0
 80020ca:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80020cc:	89bb      	ldrh	r3, [r7, #12]
 80020ce:	021b      	lsls	r3, r3, #8
 80020d0:	b29c      	uxth	r4, r3
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	3301      	adds	r3, #1
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fe86 	bl	8001df0 <WIZCHIP_READ>
 80020e4:	4603      	mov	r3, r0
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	4423      	add	r3, r4
 80020ea:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80020ec:	89bb      	ldrh	r3, [r7, #12]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d01a      	beq.n	8002128 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	3301      	adds	r3, #1
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff fe76 	bl	8001df0 <WIZCHIP_READ>
 8002104:	4603      	mov	r3, r0
 8002106:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002108:	89fb      	ldrh	r3, [r7, #14]
 800210a:	021b      	lsls	r3, r3, #8
 800210c:	b29c      	uxth	r4, r3
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	3301      	adds	r3, #1
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fe68 	bl	8001df0 <WIZCHIP_READ>
 8002120:	4603      	mov	r3, r0
 8002122:	b29b      	uxth	r3, r3
 8002124:	4423      	add	r3, r4
 8002126:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002128:	89fa      	ldrh	r2, [r7, #14]
 800212a:	89bb      	ldrh	r3, [r7, #12]
 800212c:	429a      	cmp	r2, r3
 800212e:	d1c2      	bne.n	80020b6 <getSn_TX_FSR+0x12>
   return val;
 8002130:	89fb      	ldrh	r3, [r7, #14]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	bd90      	pop	{r4, r7, pc}

0800213a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800213a:	b590      	push	{r4, r7, lr}
 800213c:	b085      	sub	sp, #20
 800213e:	af00      	add	r7, sp, #0
 8002140:	4603      	mov	r3, r0
 8002142:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002144:	2300      	movs	r3, #0
 8002146:	81fb      	strh	r3, [r7, #14]
 8002148:	2300      	movs	r3, #0
 800214a:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	3301      	adds	r3, #1
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fe49 	bl	8001df0 <WIZCHIP_READ>
 800215e:	4603      	mov	r3, r0
 8002160:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002162:	89bb      	ldrh	r3, [r7, #12]
 8002164:	021b      	lsls	r3, r3, #8
 8002166:	b29c      	uxth	r4, r3
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	3301      	adds	r3, #1
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fe3b 	bl	8001df0 <WIZCHIP_READ>
 800217a:	4603      	mov	r3, r0
 800217c:	b29b      	uxth	r3, r3
 800217e:	4423      	add	r3, r4
 8002180:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002182:	89bb      	ldrh	r3, [r7, #12]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d01a      	beq.n	80021be <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	3301      	adds	r3, #1
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff fe2b 	bl	8001df0 <WIZCHIP_READ>
 800219a:	4603      	mov	r3, r0
 800219c:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800219e:	89fb      	ldrh	r3, [r7, #14]
 80021a0:	021b      	lsls	r3, r3, #8
 80021a2:	b29c      	uxth	r4, r3
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	3301      	adds	r3, #1
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fe1d 	bl	8001df0 <WIZCHIP_READ>
 80021b6:	4603      	mov	r3, r0
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	4423      	add	r3, r4
 80021bc:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80021be:	89fa      	ldrh	r2, [r7, #14]
 80021c0:	89bb      	ldrh	r3, [r7, #12]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d1c2      	bne.n	800214c <getSn_RX_RSR+0x12>
   return val;
 80021c6:	89fb      	ldrh	r3, [r7, #14]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd90      	pop	{r4, r7, pc}

080021d0 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80021d0:	b590      	push	{r4, r7, lr}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	6039      	str	r1, [r7, #0]
 80021da:	71fb      	strb	r3, [r7, #7]
 80021dc:	4613      	mov	r3, r2
 80021de:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80021e8:	88bb      	ldrh	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d048      	beq.n	8002280 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	3301      	adds	r3, #1
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff fdf8 	bl	8001df0 <WIZCHIP_READ>
 8002200:	4603      	mov	r3, r0
 8002202:	b29b      	uxth	r3, r3
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	b29c      	uxth	r4, r3
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	3301      	adds	r3, #1
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fdeb 	bl	8001df0 <WIZCHIP_READ>
 800221a:	4603      	mov	r3, r0
 800221c:	b29b      	uxth	r3, r3
 800221e:	4423      	add	r3, r4
 8002220:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8002222:	89fb      	ldrh	r3, [r7, #14]
 8002224:	021b      	lsls	r3, r3, #8
 8002226:	79fa      	ldrb	r2, [r7, #7]
 8002228:	0092      	lsls	r2, r2, #2
 800222a:	3202      	adds	r2, #2
 800222c:	00d2      	lsls	r2, r2, #3
 800222e:	4413      	add	r3, r2
 8002230:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8002232:	88bb      	ldrh	r3, [r7, #4]
 8002234:	461a      	mov	r2, r3
 8002236:	6839      	ldr	r1, [r7, #0]
 8002238:	68b8      	ldr	r0, [r7, #8]
 800223a:	f7ff fed3 	bl	8001fe4 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800223e:	89fa      	ldrh	r2, [r7, #14]
 8002240:	88bb      	ldrh	r3, [r7, #4]
 8002242:	4413      	add	r3, r2
 8002244:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	3301      	adds	r3, #1
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002252:	461a      	mov	r2, r3
 8002254:	89fb      	ldrh	r3, [r7, #14]
 8002256:	0a1b      	lsrs	r3, r3, #8
 8002258:	b29b      	uxth	r3, r3
 800225a:	b2db      	uxtb	r3, r3
 800225c:	4619      	mov	r1, r3
 800225e:	4610      	mov	r0, r2
 8002260:	f7ff fe12 	bl	8001e88 <WIZCHIP_WRITE>
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	3301      	adds	r3, #1
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002270:	461a      	mov	r2, r3
 8002272:	89fb      	ldrh	r3, [r7, #14]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	4619      	mov	r1, r3
 8002278:	4610      	mov	r0, r2
 800227a:	f7ff fe05 	bl	8001e88 <WIZCHIP_WRITE>
 800227e:	e000      	b.n	8002282 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8002280:	bf00      	nop
}
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	bd90      	pop	{r4, r7, pc}

08002288 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002288:	b590      	push	{r4, r7, lr}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	6039      	str	r1, [r7, #0]
 8002292:	71fb      	strb	r3, [r7, #7]
 8002294:	4613      	mov	r3, r2
 8002296:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80022a0:	88bb      	ldrh	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d048      	beq.n	8002338 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	3301      	adds	r3, #1
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fd9c 	bl	8001df0 <WIZCHIP_READ>
 80022b8:	4603      	mov	r3, r0
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	021b      	lsls	r3, r3, #8
 80022be:	b29c      	uxth	r4, r3
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	3301      	adds	r3, #1
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fd8f 	bl	8001df0 <WIZCHIP_READ>
 80022d2:	4603      	mov	r3, r0
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	4423      	add	r3, r4
 80022d8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80022da:	89fb      	ldrh	r3, [r7, #14]
 80022dc:	021b      	lsls	r3, r3, #8
 80022de:	79fa      	ldrb	r2, [r7, #7]
 80022e0:	0092      	lsls	r2, r2, #2
 80022e2:	3203      	adds	r2, #3
 80022e4:	00d2      	lsls	r2, r2, #3
 80022e6:	4413      	add	r3, r2
 80022e8:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80022ea:	88bb      	ldrh	r3, [r7, #4]
 80022ec:	461a      	mov	r2, r3
 80022ee:	6839      	ldr	r1, [r7, #0]
 80022f0:	68b8      	ldr	r0, [r7, #8]
 80022f2:	f7ff fe17 	bl	8001f24 <WIZCHIP_READ_BUF>
   ptr += len;
 80022f6:	89fa      	ldrh	r2, [r7, #14]
 80022f8:	88bb      	ldrh	r3, [r7, #4]
 80022fa:	4413      	add	r3, r2
 80022fc:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	3301      	adds	r3, #1
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800230a:	461a      	mov	r2, r3
 800230c:	89fb      	ldrh	r3, [r7, #14]
 800230e:	0a1b      	lsrs	r3, r3, #8
 8002310:	b29b      	uxth	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	4619      	mov	r1, r3
 8002316:	4610      	mov	r0, r2
 8002318:	f7ff fdb6 	bl	8001e88 <WIZCHIP_WRITE>
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	3301      	adds	r3, #1
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002328:	461a      	mov	r2, r3
 800232a:	89fb      	ldrh	r3, [r7, #14]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	4619      	mov	r1, r3
 8002330:	4610      	mov	r0, r2
 8002332:	f7ff fda9 	bl	8001e88 <WIZCHIP_WRITE>
 8002336:	e000      	b.n	800233a <wiz_recv_data+0xb2>
   if(len == 0) return;
 8002338:	bf00      	nop
}
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	bd90      	pop	{r4, r7, pc}

08002340 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002340:	b590      	push	{r4, r7, lr}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	4604      	mov	r4, r0
 8002348:	4608      	mov	r0, r1
 800234a:	4611      	mov	r1, r2
 800234c:	461a      	mov	r2, r3
 800234e:	4623      	mov	r3, r4
 8002350:	71fb      	strb	r3, [r7, #7]
 8002352:	4603      	mov	r3, r0
 8002354:	71bb      	strb	r3, [r7, #6]
 8002356:	460b      	mov	r3, r1
 8002358:	80bb      	strh	r3, [r7, #4]
 800235a:	4613      	mov	r3, r2
 800235c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	2b08      	cmp	r3, #8
 8002362:	d902      	bls.n	800236a <socket+0x2a>
 8002364:	f04f 33ff 	mov.w	r3, #4294967295
 8002368:	e0ef      	b.n	800254a <socket+0x20a>
	switch(protocol)
 800236a:	79bb      	ldrb	r3, [r7, #6]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d004      	beq.n	800237a <socket+0x3a>
 8002370:	2b01      	cmp	r3, #1
 8002372:	db10      	blt.n	8002396 <socket+0x56>
 8002374:	2b04      	cmp	r3, #4
 8002376:	dc0e      	bgt.n	8002396 <socket+0x56>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8002378:	e010      	b.n	800239c <socket+0x5c>
            getSIPR((uint8_t*)&taddr);
 800237a:	f107 030c 	add.w	r3, r7, #12
 800237e:	2204      	movs	r2, #4
 8002380:	4619      	mov	r1, r3
 8002382:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002386:	f7ff fdcd 	bl	8001f24 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d105      	bne.n	800239c <socket+0x5c>
 8002390:	f06f 0302 	mvn.w	r3, #2
 8002394:	e0d9      	b.n	800254a <socket+0x20a>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002396:	f06f 0304 	mvn.w	r3, #4
 800239a:	e0d6      	b.n	800254a <socket+0x20a>
         break;
 800239c:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <socket+0x6e>
 80023a8:	f06f 0305 	mvn.w	r3, #5
 80023ac:	e0cd      	b.n	800254a <socket+0x20a>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80023ae:	78fb      	ldrb	r3, [r7, #3]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d028      	beq.n	8002406 <socket+0xc6>
	{
   	switch(protocol)
 80023b4:	79bb      	ldrb	r3, [r7, #6]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d002      	beq.n	80023c0 <socket+0x80>
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d008      	beq.n	80023d0 <socket+0x90>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80023be:	e022      	b.n	8002406 <socket+0xc6>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d11a      	bne.n	8002400 <socket+0xc0>
 80023ca:	f06f 0305 	mvn.w	r3, #5
 80023ce:	e0bc      	b.n	800254a <socket+0x20a>
   	      if(flag & SF_IGMP_VER2)
 80023d0:	78fb      	ldrb	r3, [r7, #3]
 80023d2:	f003 0320 	and.w	r3, r3, #32
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d006      	beq.n	80023e8 <socket+0xa8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80023da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	db02      	blt.n	80023e8 <socket+0xa8>
 80023e2:	f06f 0305 	mvn.w	r3, #5
 80023e6:	e0b0      	b.n	800254a <socket+0x20a>
      	      if(flag & SF_UNI_BLOCK)
 80023e8:	78fb      	ldrb	r3, [r7, #3]
 80023ea:	f003 0310 	and.w	r3, r3, #16
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d008      	beq.n	8002404 <socket+0xc4>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80023f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	db04      	blt.n	8002404 <socket+0xc4>
 80023fa:	f06f 0305 	mvn.w	r3, #5
 80023fe:	e0a4      	b.n	800254a <socket+0x20a>
   	      break;
 8002400:	bf00      	nop
 8002402:	e000      	b.n	8002406 <socket+0xc6>
   	      break;
 8002404:	bf00      	nop
   	}
   }
	close(sn);
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	4618      	mov	r0, r3
 800240a:	f000 f8ad 	bl	8002568 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	3301      	adds	r3, #1
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	4618      	mov	r0, r3
 8002418:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800241c:	f023 030f 	bic.w	r3, r3, #15
 8002420:	b25a      	sxtb	r2, r3
 8002422:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002426:	4313      	orrs	r3, r2
 8002428:	b25b      	sxtb	r3, r3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	4619      	mov	r1, r3
 800242e:	f7ff fd2b 	bl	8001e88 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8002432:	88bb      	ldrh	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d110      	bne.n	800245a <socket+0x11a>
	{
	   port = sock_any_port++;
 8002438:	4b46      	ldr	r3, [pc, #280]	; (8002554 <socket+0x214>)
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	b291      	uxth	r1, r2
 8002440:	4a44      	ldr	r2, [pc, #272]	; (8002554 <socket+0x214>)
 8002442:	8011      	strh	r1, [r2, #0]
 8002444:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002446:	4b43      	ldr	r3, [pc, #268]	; (8002554 <socket+0x214>)
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800244e:	4293      	cmp	r3, r2
 8002450:	d103      	bne.n	800245a <socket+0x11a>
 8002452:	4b40      	ldr	r3, [pc, #256]	; (8002554 <socket+0x214>)
 8002454:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002458:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	3301      	adds	r3, #1
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002466:	461a      	mov	r2, r3
 8002468:	88bb      	ldrh	r3, [r7, #4]
 800246a:	0a1b      	lsrs	r3, r3, #8
 800246c:	b29b      	uxth	r3, r3
 800246e:	b2db      	uxtb	r3, r3
 8002470:	4619      	mov	r1, r3
 8002472:	4610      	mov	r0, r2
 8002474:	f7ff fd08 	bl	8001e88 <WIZCHIP_WRITE>
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	3301      	adds	r3, #1
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002484:	461a      	mov	r2, r3
 8002486:	88bb      	ldrh	r3, [r7, #4]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	4619      	mov	r1, r3
 800248c:	4610      	mov	r0, r2
 800248e:	f7ff fcfb 	bl	8001e88 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	3301      	adds	r3, #1
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800249e:	2101      	movs	r1, #1
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fcf1 	bl	8001e88 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80024a6:	bf00      	nop
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	3301      	adds	r3, #1
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff fc9b 	bl	8001df0 <WIZCHIP_READ>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1f3      	bne.n	80024a8 <socket+0x168>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	2201      	movs	r2, #1
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	b21b      	sxth	r3, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	b21a      	sxth	r2, r3
 80024ce:	4b22      	ldr	r3, [pc, #136]	; (8002558 <socket+0x218>)
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	b21b      	sxth	r3, r3
 80024d4:	4013      	ands	r3, r2
 80024d6:	b21b      	sxth	r3, r3
 80024d8:	b29a      	uxth	r2, r3
 80024da:	4b1f      	ldr	r3, [pc, #124]	; (8002558 <socket+0x218>)
 80024dc:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80024de:	78fb      	ldrb	r3, [r7, #3]
 80024e0:	f003 0201 	and.w	r2, r3, #1
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	b21a      	sxth	r2, r3
 80024ec:	4b1a      	ldr	r3, [pc, #104]	; (8002558 <socket+0x218>)
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	b21b      	sxth	r3, r3
 80024f2:	4313      	orrs	r3, r2
 80024f4:	b21b      	sxth	r3, r3
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	4b17      	ldr	r3, [pc, #92]	; (8002558 <socket+0x218>)
 80024fa:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	2201      	movs	r2, #1
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	b21b      	sxth	r3, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	b21a      	sxth	r2, r3
 800250a:	4b14      	ldr	r3, [pc, #80]	; (800255c <socket+0x21c>)
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	b21b      	sxth	r3, r3
 8002510:	4013      	ands	r3, r2
 8002512:	b21b      	sxth	r3, r3
 8002514:	b29a      	uxth	r2, r3
 8002516:	4b11      	ldr	r3, [pc, #68]	; (800255c <socket+0x21c>)
 8002518:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	4a10      	ldr	r2, [pc, #64]	; (8002560 <socket+0x220>)
 800251e:	2100      	movs	r1, #0
 8002520:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	4a0f      	ldr	r2, [pc, #60]	; (8002564 <socket+0x224>)
 8002528:	2100      	movs	r1, #0
 800252a:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800252c:	bf00      	nop
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	3301      	adds	r3, #1
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff fc58 	bl	8001df0 <WIZCHIP_READ>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f3      	beq.n	800252e <socket+0x1ee>
   return (int8_t)sn;
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800254a:	4618      	mov	r0, r3
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	bd90      	pop	{r4, r7, pc}
 8002552:	bf00      	nop
 8002554:	20000006 	.word	0x20000006
 8002558:	20000100 	.word	0x20000100
 800255c:	20000102 	.word	0x20000102
 8002560:	20000104 	.word	0x20000104
 8002564:	20000114 	.word	0x20000114

08002568 <close>:

int8_t close(uint8_t sn)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	2b08      	cmp	r3, #8
 8002576:	d902      	bls.n	800257e <close+0x16>
 8002578:	f04f 33ff 	mov.w	r3, #4294967295
 800257c:	e055      	b.n	800262a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	3301      	adds	r3, #1
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800258a:	2110      	movs	r1, #16
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fc7b 	bl	8001e88 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8002592:	bf00      	nop
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	3301      	adds	r3, #1
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fc25 	bl	8001df0 <WIZCHIP_READ>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1f3      	bne.n	8002594 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	3301      	adds	r3, #1
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80025b8:	211f      	movs	r1, #31
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff fc64 	bl	8001e88 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	2201      	movs	r2, #1
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	b21b      	sxth	r3, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	b21a      	sxth	r2, r3
 80025ce:	4b19      	ldr	r3, [pc, #100]	; (8002634 <close+0xcc>)
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	b21b      	sxth	r3, r3
 80025d4:	4013      	ands	r3, r2
 80025d6:	b21b      	sxth	r3, r3
 80025d8:	b29a      	uxth	r2, r3
 80025da:	4b16      	ldr	r3, [pc, #88]	; (8002634 <close+0xcc>)
 80025dc:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	2201      	movs	r2, #1
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	b21b      	sxth	r3, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	b21a      	sxth	r2, r3
 80025ec:	4b12      	ldr	r3, [pc, #72]	; (8002638 <close+0xd0>)
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	b21b      	sxth	r3, r3
 80025f2:	4013      	ands	r3, r2
 80025f4:	b21b      	sxth	r3, r3
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <close+0xd0>)
 80025fa:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	4a0f      	ldr	r2, [pc, #60]	; (800263c <close+0xd4>)
 8002600:	2100      	movs	r1, #0
 8002602:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	4a0d      	ldr	r2, [pc, #52]	; (8002640 <close+0xd8>)
 800260a:	2100      	movs	r1, #0
 800260c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800260e:	bf00      	nop
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	3301      	adds	r3, #1
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fbe7 	bl	8001df0 <WIZCHIP_READ>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f3      	bne.n	8002610 <close+0xa8>
	return SOCK_OK;
 8002628:	2301      	movs	r3, #1
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000100 	.word	0x20000100
 8002638:	20000102 	.word	0x20000102
 800263c:	20000104 	.word	0x20000104
 8002640:	20000114 	.word	0x20000114

08002644 <listen>:

int8_t listen(uint8_t sn)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	2b08      	cmp	r3, #8
 8002652:	d902      	bls.n	800265a <listen+0x16>
 8002654:	f04f 33ff 	mov.w	r3, #4294967295
 8002658:	e049      	b.n	80026ee <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	3301      	adds	r3, #1
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fbc4 	bl	8001df0 <WIZCHIP_READ>
 8002668:	4603      	mov	r3, r0
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	2b01      	cmp	r3, #1
 8002670:	d002      	beq.n	8002678 <listen+0x34>
 8002672:	f06f 0304 	mvn.w	r3, #4
 8002676:	e03a      	b.n	80026ee <listen+0xaa>
	CHECK_SOCKINIT();
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	3301      	adds	r3, #1
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fbb3 	bl	8001df0 <WIZCHIP_READ>
 800268a:	4603      	mov	r3, r0
 800268c:	2b13      	cmp	r3, #19
 800268e:	d002      	beq.n	8002696 <listen+0x52>
 8002690:	f06f 0302 	mvn.w	r3, #2
 8002694:	e02b      	b.n	80026ee <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	3301      	adds	r3, #1
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80026a2:	2102      	movs	r1, #2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff fbef 	bl	8001e88 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 80026aa:	bf00      	nop
 80026ac:	79fb      	ldrb	r3, [r7, #7]
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	3301      	adds	r3, #1
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff fb99 	bl	8001df0 <WIZCHIP_READ>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1f3      	bne.n	80026ac <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80026c4:	e006      	b.n	80026d4 <listen+0x90>
   {
         close(sn);
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff ff4d 	bl	8002568 <close>
         return SOCKERR_SOCKCLOSED;
 80026ce:	f06f 0303 	mvn.w	r3, #3
 80026d2:	e00c      	b.n	80026ee <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	3301      	adds	r3, #1
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fb85 	bl	8001df0 <WIZCHIP_READ>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b14      	cmp	r3, #20
 80026ea:	d1ec      	bne.n	80026c6 <listen+0x82>
   }
   return SOCK_OK;
 80026ec:	2301      	movs	r3, #1
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	2b08      	cmp	r3, #8
 8002706:	d902      	bls.n	800270e <disconnect+0x16>
 8002708:	f04f 33ff 	mov.w	r3, #4294967295
 800270c:	e062      	b.n	80027d4 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	3301      	adds	r3, #1
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fb6a 	bl	8001df0 <WIZCHIP_READ>
 800271c:	4603      	mov	r3, r0
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	2b01      	cmp	r3, #1
 8002724:	d002      	beq.n	800272c <disconnect+0x34>
 8002726:	f06f 0304 	mvn.w	r3, #4
 800272a:	e053      	b.n	80027d4 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	3301      	adds	r3, #1
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002738:	2108      	movs	r1, #8
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff fba4 	bl	8001e88 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002740:	bf00      	nop
 8002742:	79fb      	ldrb	r3, [r7, #7]
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	3301      	adds	r3, #1
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fb4e 	bl	8001df0 <WIZCHIP_READ>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f3      	bne.n	8002742 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	2201      	movs	r2, #1
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	b21b      	sxth	r3, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	b21a      	sxth	r2, r3
 8002768:	4b1c      	ldr	r3, [pc, #112]	; (80027dc <disconnect+0xe4>)
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	b21b      	sxth	r3, r3
 800276e:	4013      	ands	r3, r2
 8002770:	b21b      	sxth	r3, r3
 8002772:	b29a      	uxth	r2, r3
 8002774:	4b19      	ldr	r3, [pc, #100]	; (80027dc <disconnect+0xe4>)
 8002776:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8002778:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <disconnect+0xe8>)
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	fa42 f303 	asr.w	r3, r2, r3
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d016      	beq.n	80027ba <disconnect+0xc2>
 800278c:	2300      	movs	r3, #0
 800278e:	e021      	b.n	80027d4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	3301      	adds	r3, #1
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fb27 	bl	8001df0 <WIZCHIP_READ>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f003 0308 	and.w	r3, r3, #8
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d006      	beq.n	80027ba <disconnect+0xc2>
	   {
	      close(sn);
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff feda 	bl	8002568 <close>
	      return SOCKERR_TIMEOUT;
 80027b4:	f06f 030c 	mvn.w	r3, #12
 80027b8:	e00c      	b.n	80027d4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	3301      	adds	r3, #1
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff fb12 	bl	8001df0 <WIZCHIP_READ>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1de      	bne.n	8002790 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80027d2:	2301      	movs	r3, #1
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	20000102 	.word	0x20000102
 80027e0:	20000100 	.word	0x20000100

080027e4 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	6039      	str	r1, [r7, #0]
 80027ee:	71fb      	strb	r3, [r7, #7]
 80027f0:	4613      	mov	r3, r2
 80027f2:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d902      	bls.n	8002808 <send+0x24>
 8002802:	f04f 33ff 	mov.w	r3, #4294967295
 8002806:	e0de      	b.n	80029c6 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	3301      	adds	r3, #1
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff faed 	bl	8001df0 <WIZCHIP_READ>
 8002816:	4603      	mov	r3, r0
 8002818:	f003 030f 	and.w	r3, r3, #15
 800281c:	2b01      	cmp	r3, #1
 800281e:	d002      	beq.n	8002826 <send+0x42>
 8002820:	f06f 0304 	mvn.w	r3, #4
 8002824:	e0cf      	b.n	80029c6 <send+0x1e2>
   CHECK_SOCKDATA();
 8002826:	88bb      	ldrh	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d102      	bne.n	8002832 <send+0x4e>
 800282c:	f06f 030d 	mvn.w	r3, #13
 8002830:	e0c9      	b.n	80029c6 <send+0x1e2>
   tmp = getSn_SR(sn);
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	3301      	adds	r3, #1
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff fad6 	bl	8001df0 <WIZCHIP_READ>
 8002844:	4603      	mov	r3, r0
 8002846:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	2b17      	cmp	r3, #23
 800284c:	d005      	beq.n	800285a <send+0x76>
 800284e:	7bfb      	ldrb	r3, [r7, #15]
 8002850:	2b1c      	cmp	r3, #28
 8002852:	d002      	beq.n	800285a <send+0x76>
 8002854:	f06f 0306 	mvn.w	r3, #6
 8002858:	e0b5      	b.n	80029c6 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 800285a:	4b5d      	ldr	r3, [pc, #372]	; (80029d0 <send+0x1ec>)
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	461a      	mov	r2, r3
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	fa42 f303 	asr.w	r3, r2, r3
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d039      	beq.n	80028e2 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	3301      	adds	r3, #1
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fab8 	bl	8001df0 <WIZCHIP_READ>
 8002880:	4603      	mov	r3, r0
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	f003 0310 	and.w	r3, r3, #16
 800288e:	2b00      	cmp	r3, #0
 8002890:	d019      	beq.n	80028c6 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	3301      	adds	r3, #1
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800289e:	2110      	movs	r1, #16
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff faf1 	bl	8001e88 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	2201      	movs	r2, #1
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	b21b      	sxth	r3, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	b21a      	sxth	r2, r3
 80028b4:	4b46      	ldr	r3, [pc, #280]	; (80029d0 <send+0x1ec>)
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	b21b      	sxth	r3, r3
 80028ba:	4013      	ands	r3, r2
 80028bc:	b21b      	sxth	r3, r3
 80028be:	b29a      	uxth	r2, r3
 80028c0:	4b43      	ldr	r3, [pc, #268]	; (80029d0 <send+0x1ec>)
 80028c2:	801a      	strh	r2, [r3, #0]
 80028c4:	e00d      	b.n	80028e2 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d006      	beq.n	80028de <send+0xfa>
      {
         close(sn);
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff fe48 	bl	8002568 <close>
         return SOCKERR_TIMEOUT;
 80028d8:	f06f 030c 	mvn.w	r3, #12
 80028dc:	e073      	b.n	80029c6 <send+0x1e2>
      }
      else return SOCK_BUSY;
 80028de:	2300      	movs	r3, #0
 80028e0:	e071      	b.n	80029c6 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	3301      	adds	r3, #1
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff fa7e 	bl	8001df0 <WIZCHIP_READ>
 80028f4:	4603      	mov	r3, r0
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	029b      	lsls	r3, r3, #10
 80028fa:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80028fc:	88ba      	ldrh	r2, [r7, #4]
 80028fe:	89bb      	ldrh	r3, [r7, #12]
 8002900:	429a      	cmp	r2, r3
 8002902:	d901      	bls.n	8002908 <send+0x124>
 8002904:	89bb      	ldrh	r3, [r7, #12]
 8002906:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fbca 	bl	80020a4 <getSn_TX_FSR>
 8002910:	4603      	mov	r3, r0
 8002912:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	3301      	adds	r3, #1
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fa65 	bl	8001df0 <WIZCHIP_READ>
 8002926:	4603      	mov	r3, r0
 8002928:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800292a:	7bfb      	ldrb	r3, [r7, #15]
 800292c:	2b17      	cmp	r3, #23
 800292e:	d009      	beq.n	8002944 <send+0x160>
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	2b1c      	cmp	r3, #28
 8002934:	d006      	beq.n	8002944 <send+0x160>
      {
         close(sn);
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fe15 	bl	8002568 <close>
         return SOCKERR_SOCKSTATUS;
 800293e:	f06f 0306 	mvn.w	r3, #6
 8002942:	e040      	b.n	80029c6 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002944:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <send+0x1f0>)
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	461a      	mov	r2, r3
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	fa42 f303 	asr.w	r3, r2, r3
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <send+0x180>
 8002958:	88ba      	ldrh	r2, [r7, #4]
 800295a:	89bb      	ldrh	r3, [r7, #12]
 800295c:	429a      	cmp	r2, r3
 800295e:	d901      	bls.n	8002964 <send+0x180>
 8002960:	2300      	movs	r3, #0
 8002962:	e030      	b.n	80029c6 <send+0x1e2>
      if(len <= freesize) break;
 8002964:	88ba      	ldrh	r2, [r7, #4]
 8002966:	89bb      	ldrh	r3, [r7, #12]
 8002968:	429a      	cmp	r2, r3
 800296a:	d900      	bls.n	800296e <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 800296c:	e7cc      	b.n	8002908 <send+0x124>
      if(len <= freesize) break;
 800296e:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8002970:	88ba      	ldrh	r2, [r7, #4]
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	6839      	ldr	r1, [r7, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff fc2a 	bl	80021d0 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	3301      	adds	r3, #1
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002988:	2120      	movs	r1, #32
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff fa7c 	bl	8001e88 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8002990:	bf00      	nop
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	3301      	adds	r3, #1
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff fa26 	bl	8001df0 <WIZCHIP_READ>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f3      	bne.n	8002992 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	2201      	movs	r2, #1
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	b21a      	sxth	r2, r3
 80029b4:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <send+0x1ec>)
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	b21b      	sxth	r3, r3
 80029ba:	4313      	orrs	r3, r2
 80029bc:	b21b      	sxth	r3, r3
 80029be:	b29a      	uxth	r2, r3
 80029c0:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <send+0x1ec>)
 80029c2:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80029c4:	88bb      	ldrh	r3, [r7, #4]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20000102 	.word	0x20000102
 80029d4:	20000100 	.word	0x20000100

080029d8 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80029d8:	b590      	push	{r4, r7, lr}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	6039      	str	r1, [r7, #0]
 80029e2:	71fb      	strb	r3, [r7, #7]
 80029e4:	4613      	mov	r3, r2
 80029e6:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d902      	bls.n	80029fc <recv+0x24>
 80029f6:	f04f 33ff 	mov.w	r3, #4294967295
 80029fa:	e09c      	b.n	8002b36 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	3301      	adds	r3, #1
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff f9f3 	bl	8001df0 <WIZCHIP_READ>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	f003 030f 	and.w	r3, r3, #15
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d002      	beq.n	8002a1a <recv+0x42>
 8002a14:	f06f 0304 	mvn.w	r3, #4
 8002a18:	e08d      	b.n	8002b36 <recv+0x15e>
   CHECK_SOCKDATA();
 8002a1a:	88bb      	ldrh	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d102      	bne.n	8002a26 <recv+0x4e>
 8002a20:	f06f 030d 	mvn.w	r3, #13
 8002a24:	e087      	b.n	8002b36 <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff f9dc 	bl	8001df0 <WIZCHIP_READ>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	029b      	lsls	r3, r3, #10
 8002a3e:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8002a40:	89ba      	ldrh	r2, [r7, #12]
 8002a42:	88bb      	ldrh	r3, [r7, #4]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d201      	bcs.n	8002a4c <recv+0x74>
 8002a48:	89bb      	ldrh	r3, [r7, #12]
 8002a4a:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8002a4c:	79fb      	ldrb	r3, [r7, #7]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff fb73 	bl	800213a <getSn_RX_RSR>
 8002a54:	4603      	mov	r3, r0
 8002a56:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff f9c3 	bl	8001df0 <WIZCHIP_READ>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	2b17      	cmp	r3, #23
 8002a72:	d026      	beq.n	8002ac2 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	2b1c      	cmp	r3, #28
 8002a78:	d11c      	bne.n	8002ab4 <recv+0xdc>
            {
               if(recvsize != 0) break;
 8002a7a:	89bb      	ldrh	r3, [r7, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d133      	bne.n	8002ae8 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff fb0e 	bl	80020a4 <getSn_TX_FSR>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	461c      	mov	r4, r3
 8002a8c:	79fb      	ldrb	r3, [r7, #7]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	3301      	adds	r3, #1
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff f9a9 	bl	8001df0 <WIZCHIP_READ>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	029b      	lsls	r3, r3, #10
 8002aa2:	429c      	cmp	r4, r3
 8002aa4:	d10d      	bne.n	8002ac2 <recv+0xea>
               {
                  close(sn);
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff fd5d 	bl	8002568 <close>
                  return SOCKERR_SOCKSTATUS;
 8002aae:	f06f 0306 	mvn.w	r3, #6
 8002ab2:	e040      	b.n	8002b36 <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff fd56 	bl	8002568 <close>
               return SOCKERR_SOCKSTATUS;
 8002abc:	f06f 0306 	mvn.w	r3, #6
 8002ac0:	e039      	b.n	8002b36 <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8002ac2:	4b1f      	ldr	r3, [pc, #124]	; (8002b40 <recv+0x168>)
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	fa42 f303 	asr.w	r3, r2, r3
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d004      	beq.n	8002ae0 <recv+0x108>
 8002ad6:	89bb      	ldrh	r3, [r7, #12]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <recv+0x108>
 8002adc:	2300      	movs	r3, #0
 8002ade:	e02a      	b.n	8002b36 <recv+0x15e>
         if(recvsize != 0) break;
 8002ae0:	89bb      	ldrh	r3, [r7, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d102      	bne.n	8002aec <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 8002ae6:	e7b1      	b.n	8002a4c <recv+0x74>
               if(recvsize != 0) break;
 8002ae8:	bf00      	nop
 8002aea:	e000      	b.n	8002aee <recv+0x116>
         if(recvsize != 0) break;
 8002aec:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8002aee:	89ba      	ldrh	r2, [r7, #12]
 8002af0:	88bb      	ldrh	r3, [r7, #4]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d201      	bcs.n	8002afa <recv+0x122>
 8002af6:	89bb      	ldrh	r3, [r7, #12]
 8002af8:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8002afa:	88ba      	ldrh	r2, [r7, #4]
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	6839      	ldr	r1, [r7, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff fbc1 	bl	8002288 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8002b06:	79fb      	ldrb	r3, [r7, #7]
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002b12:	2140      	movs	r1, #64	; 0x40
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff f9b7 	bl	8001e88 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002b1a:	bf00      	nop
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	3301      	adds	r3, #1
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff f961 	bl	8001df0 <WIZCHIP_READ>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1f3      	bne.n	8002b1c <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002b34:	88bb      	ldrh	r3, [r7, #4]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd90      	pop	{r4, r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000100 	.word	0x20000100

08002b44 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	bf00      	nop
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	bf00      	nop
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr

08002b5c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	bf00      	nop
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	bf00      	nop
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	70fb      	strb	r3, [r7, #3]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	78fa      	ldrb	r2, [r7, #3]
 8002b9c:	701a      	strb	r2, [r3, #0]
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr

08002ba8 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	2300      	movs	r3, #0
 8002bae:	4618      	mov	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr

08002bb6 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	71fb      	strb	r3, [r7, #7]
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr
	...

08002bcc <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <reg_wizchip_cs_cbfunc+0x16>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d106      	bne.n	8002bf0 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8002be2:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <reg_wizchip_cs_cbfunc+0x3c>)
 8002be4:	4a09      	ldr	r2, [pc, #36]	; (8002c0c <reg_wizchip_cs_cbfunc+0x40>)
 8002be6:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8002be8:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <reg_wizchip_cs_cbfunc+0x3c>)
 8002bea:	4a09      	ldr	r2, [pc, #36]	; (8002c10 <reg_wizchip_cs_cbfunc+0x44>)
 8002bec:	619a      	str	r2, [r3, #24]
 8002bee:	e005      	b.n	8002bfc <reg_wizchip_cs_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8002bf0:	4a05      	ldr	r2, [pc, #20]	; (8002c08 <reg_wizchip_cs_cbfunc+0x3c>)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8002bf6:	4a04      	ldr	r2, [pc, #16]	; (8002c08 <reg_wizchip_cs_cbfunc+0x3c>)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	6193      	str	r3, [r2, #24]
   }
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	20000008 	.word	0x20000008
 8002c0c:	08002b5d 	.word	0x08002b5d
 8002c10:	08002b69 	.word	0x08002b69

08002c14 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8002c1e:	bf00      	nop
 8002c20:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <reg_wizchip_spi_cbfunc+0x48>)
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0f9      	beq.n	8002c20 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d002      	beq.n	8002c38 <reg_wizchip_spi_cbfunc+0x24>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d106      	bne.n	8002c46 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8002c38:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <reg_wizchip_spi_cbfunc+0x48>)
 8002c3a:	4a09      	ldr	r2, [pc, #36]	; (8002c60 <reg_wizchip_spi_cbfunc+0x4c>)
 8002c3c:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8002c3e:	4b07      	ldr	r3, [pc, #28]	; (8002c5c <reg_wizchip_spi_cbfunc+0x48>)
 8002c40:	4a08      	ldr	r2, [pc, #32]	; (8002c64 <reg_wizchip_spi_cbfunc+0x50>)
 8002c42:	621a      	str	r2, [r3, #32]
 8002c44:	e005      	b.n	8002c52 <reg_wizchip_spi_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8002c46:	4a05      	ldr	r2, [pc, #20]	; (8002c5c <reg_wizchip_spi_cbfunc+0x48>)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8002c4c:	4a03      	ldr	r2, [pc, #12]	; (8002c5c <reg_wizchip_spi_cbfunc+0x48>)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	6213      	str	r3, [r2, #32]
   }
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr
 8002c5c:	20000008 	.word	0x20000008
 8002c60:	08002ba9 	.word	0x08002ba9
 8002c64:	08002bb7 	.word	0x08002bb7

08002c68 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8002c68:	b590      	push	{r4, r7, lr}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	6039      	str	r1, [r7, #0]
 8002c72:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	2b0f      	cmp	r3, #15
 8002c84:	f200 80c2 	bhi.w	8002e0c <ctlwizchip+0x1a4>
 8002c88:	a201      	add	r2, pc, #4	; (adr r2, 8002c90 <ctlwizchip+0x28>)
 8002c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8e:	bf00      	nop
 8002c90:	08002cd1 	.word	0x08002cd1
 8002c94:	08002cd7 	.word	0x08002cd7
 8002c98:	08002d03 	.word	0x08002d03
 8002c9c:	08002cf7 	.word	0x08002cf7
 8002ca0:	08002d11 	.word	0x08002d11
 8002ca4:	08002d1d 	.word	0x08002d1d
 8002ca8:	08002d2b 	.word	0x08002d2b
 8002cac:	08002d51 	.word	0x08002d51
 8002cb0:	08002d77 	.word	0x08002d77
 8002cb4:	08002db1 	.word	0x08002db1
 8002cb8:	08002db7 	.word	0x08002db7
 8002cbc:	08002dbf 	.word	0x08002dbf
 8002cc0:	08002e13 	.word	0x08002e13
 8002cc4:	08002dc7 	.word	0x08002dc7
 8002cc8:	08002dd5 	.word	0x08002dd5
 8002ccc:	08002df1 	.word	0x08002df1
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8002cd0:	f000 f8a8 	bl	8002e24 <wizchip_sw_reset>
         break;
 8002cd4:	e09e      	b.n	8002e14 <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d004      	beq.n	8002ce6 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	3308      	adds	r3, #8
 8002ce4:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4611      	mov	r1, r2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 f8e5 	bl	8002ebc <wizchip_init>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	e08f      	b.n	8002e16 <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 f96a 	bl	8002fd4 <wizchip_clrinterrupt>
         break;
 8002d00:	e088      	b.n	8002e14 <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8002d02:	f000 f985 	bl	8003010 <wizchip_getinterrupt>
 8002d06:	4603      	mov	r3, r0
 8002d08:	461a      	mov	r2, r3
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	801a      	strh	r2, [r3, #0]
         break;
 8002d0e:	e081      	b.n	8002e14 <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 f9a0 	bl	800305a <wizchip_setinterruptmask>
         break;         
 8002d1a:	e07b      	b.n	8002e14 <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8002d1c:	f000 f9b8 	bl	8003090 <wizchip_getinterruptmask>
 8002d20:	4603      	mov	r3, r0
 8002d22:	461a      	mov	r2, r3
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	801a      	strh	r2, [r3, #0]
         break;
 8002d28:	e074      	b.n	8002e14 <ctlwizchip+0x1ac>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	0a1b      	lsrs	r3, r3, #8
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	4619      	mov	r1, r3
 8002d36:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8002d3a:	f7ff f8a5 	bl	8001e88 <WIZCHIP_WRITE>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	4619      	mov	r1, r3
 8002d46:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8002d4a:	f7ff f89d 	bl	8001e88 <WIZCHIP_WRITE>
         break;
 8002d4e:	e061      	b.n	8002e14 <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8002d50:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8002d54:	f7ff f84c 	bl	8001df0 <WIZCHIP_READ>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	021b      	lsls	r3, r3, #8
 8002d5e:	b29c      	uxth	r4, r3
 8002d60:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8002d64:	f7ff f844 	bl	8001df0 <WIZCHIP_READ>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	4423      	add	r3, r4
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	801a      	strh	r2, [r3, #0]
         break;
 8002d74:	e04e      	b.n	8002e14 <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8002d76:	4b2a      	ldr	r3, [pc, #168]	; (8002e20 <ctlwizchip+0x1b8>)
 8002d78:	789a      	ldrb	r2, [r3, #2]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	3301      	adds	r3, #1
 8002d82:	4a27      	ldr	r2, [pc, #156]	; (8002e20 <ctlwizchip+0x1b8>)
 8002d84:	78d2      	ldrb	r2, [r2, #3]
 8002d86:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	3302      	adds	r3, #2
 8002d8c:	4a24      	ldr	r2, [pc, #144]	; (8002e20 <ctlwizchip+0x1b8>)
 8002d8e:	7912      	ldrb	r2, [r2, #4]
 8002d90:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	3303      	adds	r3, #3
 8002d96:	4a22      	ldr	r2, [pc, #136]	; (8002e20 <ctlwizchip+0x1b8>)
 8002d98:	7952      	ldrb	r2, [r2, #5]
 8002d9a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	3304      	adds	r3, #4
 8002da0:	4a1f      	ldr	r2, [pc, #124]	; (8002e20 <ctlwizchip+0x1b8>)
 8002da2:	7992      	ldrb	r2, [r2, #6]
 8002da4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	3305      	adds	r3, #5
 8002daa:	2200      	movs	r2, #0
 8002dac:	701a      	strb	r2, [r3, #0]
         break;
 8002dae:	e031      	b.n	8002e14 <ctlwizchip+0x1ac>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8002db0:	f000 f9c0 	bl	8003134 <wizphy_reset>
         break;
 8002db4:	e02e      	b.n	8002e14 <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8002db6:	6838      	ldr	r0, [r7, #0]
 8002db8:	f000 f9e3 	bl	8003182 <wizphy_setphyconf>
         break;
 8002dbc:	e02a      	b.n	8002e14 <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8002dbe:	6838      	ldr	r0, [r7, #0]
 8002dc0:	f000 fa21 	bl	8003206 <wizphy_getphyconf>
         break;
 8002dc4:	e026      	b.n	8002e14 <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 fa67 	bl	800329e <wizphy_setphypmode>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	e020      	b.n	8002e16 <ctlwizchip+0x1ae>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8002dd4:	f000 f995 	bl	8003102 <wizphy_getphypmode>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8002ddc:	7dfb      	ldrb	r3, [r7, #23]
 8002dde:	2bff      	cmp	r3, #255	; 0xff
 8002de0:	d102      	bne.n	8002de8 <ctlwizchip+0x180>
 8002de2:	f04f 33ff 	mov.w	r3, #4294967295
 8002de6:	e016      	b.n	8002e16 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	7dfa      	ldrb	r2, [r7, #23]
 8002dec:	701a      	strb	r2, [r3, #0]
         break;
 8002dee:	e011      	b.n	8002e14 <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8002df0:	f000 f971 	bl	80030d6 <wizphy_getphylink>
 8002df4:	4603      	mov	r3, r0
 8002df6:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8002df8:	7dfb      	ldrb	r3, [r7, #23]
 8002dfa:	2bff      	cmp	r3, #255	; 0xff
 8002dfc:	d102      	bne.n	8002e04 <ctlwizchip+0x19c>
 8002dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002e02:	e008      	b.n	8002e16 <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	7dfa      	ldrb	r2, [r7, #23]
 8002e08:	701a      	strb	r2, [r3, #0]
         break;
 8002e0a:	e003      	b.n	8002e14 <ctlwizchip+0x1ac>
   #endif      
      default:
         return -1;
 8002e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e10:	e001      	b.n	8002e16 <ctlwizchip+0x1ae>
         break;
 8002e12:	bf00      	nop
   }
   return 0;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	371c      	adds	r7, #28
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd90      	pop	{r4, r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000008 	.word	0x20000008

08002e24 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8002e2a:	1d3b      	adds	r3, r7, #4
 8002e2c:	2206      	movs	r2, #6
 8002e2e:	4619      	mov	r1, r3
 8002e30:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002e34:	f7ff f876 	bl	8001f24 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8002e38:	f107 0314 	add.w	r3, r7, #20
 8002e3c:	2204      	movs	r2, #4
 8002e3e:	4619      	mov	r1, r3
 8002e40:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002e44:	f7ff f86e 	bl	8001f24 <WIZCHIP_READ_BUF>
 8002e48:	f107 0310 	add.w	r3, r7, #16
 8002e4c:	2204      	movs	r2, #4
 8002e4e:	4619      	mov	r1, r3
 8002e50:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002e54:	f7ff f866 	bl	8001f24 <WIZCHIP_READ_BUF>
 8002e58:	f107 030c 	add.w	r3, r7, #12
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	4619      	mov	r1, r3
 8002e60:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002e64:	f7ff f85e 	bl	8001f24 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8002e68:	2180      	movs	r1, #128	; 0x80
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	f7ff f80c 	bl	8001e88 <WIZCHIP_WRITE>
   getMR(); // for delay
 8002e70:	2000      	movs	r0, #0
 8002e72:	f7fe ffbd 	bl	8001df0 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8002e76:	1d3b      	adds	r3, r7, #4
 8002e78:	2206      	movs	r2, #6
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002e80:	f7ff f8b0 	bl	8001fe4 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8002e84:	f107 0314 	add.w	r3, r7, #20
 8002e88:	2204      	movs	r2, #4
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002e90:	f7ff f8a8 	bl	8001fe4 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8002e94:	f107 0310 	add.w	r3, r7, #16
 8002e98:	2204      	movs	r2, #4
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002ea0:	f7ff f8a0 	bl	8001fe4 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8002ea4:	f107 030c 	add.w	r3, r7, #12
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	4619      	mov	r1, r3
 8002eac:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002eb0:	f7ff f898 	bl	8001fe4 <WIZCHIP_WRITE_BUF>
}
 8002eb4:	bf00      	nop
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8002eca:	f7ff ffab 	bl	8002e24 <wizchip_sw_reset>
   if(txsize)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d03b      	beq.n	8002f4c <wizchip_init+0x90>
   {
      tmp = 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002ed8:	2300      	movs	r3, #0
 8002eda:	73fb      	strb	r3, [r7, #15]
 8002edc:	e015      	b.n	8002f0a <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8002ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	781a      	ldrb	r2, [r3, #0]
 8002ee8:	7bbb      	ldrb	r3, [r7, #14]
 8002eea:	4413      	add	r3, r2
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8002ef0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ef4:	2b10      	cmp	r3, #16
 8002ef6:	dd02      	ble.n	8002efe <wizchip_init+0x42>
 8002ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8002efc:	e066      	b.n	8002fcc <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	3301      	adds	r3, #1
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	73fb      	strb	r3, [r7, #15]
 8002f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f0e:	2b07      	cmp	r3, #7
 8002f10:	dde5      	ble.n	8002ede <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	73fb      	strb	r3, [r7, #15]
 8002f16:	e015      	b.n	8002f44 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8002f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	3301      	adds	r3, #1
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002f26:	4618      	mov	r0, r3
 8002f28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	4413      	add	r3, r2
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	4619      	mov	r1, r3
 8002f34:	f7fe ffa8 	bl	8001e88 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002f38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	3301      	adds	r3, #1
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	73fb      	strb	r3, [r7, #15]
 8002f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f48:	2b07      	cmp	r3, #7
 8002f4a:	dde5      	ble.n	8002f18 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d03b      	beq.n	8002fca <wizchip_init+0x10e>
   {
      tmp = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002f56:	2300      	movs	r3, #0
 8002f58:	73fb      	strb	r3, [r7, #15]
 8002f5a:	e015      	b.n	8002f88 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8002f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	4413      	add	r3, r2
 8002f64:	781a      	ldrb	r2, [r3, #0]
 8002f66:	7bbb      	ldrb	r3, [r7, #14]
 8002f68:	4413      	add	r3, r2
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8002f6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f72:	2b10      	cmp	r3, #16
 8002f74:	dd02      	ble.n	8002f7c <wizchip_init+0xc0>
 8002f76:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7a:	e027      	b.n	8002fcc <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002f7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	3301      	adds	r3, #1
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	73fb      	strb	r3, [r7, #15]
 8002f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f8c:	2b07      	cmp	r3, #7
 8002f8e:	dde5      	ble.n	8002f5c <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002f90:	2300      	movs	r3, #0
 8002f92:	73fb      	strb	r3, [r7, #15]
 8002f94:	e015      	b.n	8002fc2 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8002f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	4413      	add	r3, r2
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	f7fe ff69 	bl	8001e88 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	73fb      	strb	r3, [r7, #15]
 8002fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc6:	2b07      	cmp	r3, #7
 8002fc8:	dde5      	ble.n	8002f96 <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8002fde:	88fb      	ldrh	r3, [r7, #6]
 8002fe0:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8002fe2:	88fb      	ldrh	r3, [r7, #6]
 8002fe4:	0a1b      	lsrs	r3, r3, #8
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
 8002fec:	f023 030f 	bic.w	r3, r3, #15
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002ff8:	f7fe ff46 	bl	8001e88 <WIZCHIP_WRITE>
   setSIR(sir);
 8002ffc:	7bbb      	ldrb	r3, [r7, #14]
 8002ffe:	4619      	mov	r1, r3
 8003000:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8003004:	f7fe ff40 	bl	8001e88 <WIZCHIP_WRITE>
#endif   
}
 8003008:	bf00      	nop
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8003016:	2300      	movs	r3, #0
 8003018:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 800301a:	2300      	movs	r3, #0
 800301c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800301e:	2300      	movs	r3, #0
 8003020:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8003022:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8003026:	f7fe fee3 	bl	8001df0 <WIZCHIP_READ>
 800302a:	4603      	mov	r3, r0
 800302c:	f023 030f 	bic.w	r3, r3, #15
 8003030:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8003032:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8003036:	f7fe fedb 	bl	8001df0 <WIZCHIP_READ>
 800303a:	4603      	mov	r3, r0
 800303c:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 800303e:	79bb      	ldrb	r3, [r7, #6]
 8003040:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8003042:	88bb      	ldrh	r3, [r7, #4]
 8003044:	021b      	lsls	r3, r3, #8
 8003046:	b29a      	uxth	r2, r3
 8003048:	79fb      	ldrb	r3, [r7, #7]
 800304a:	b29b      	uxth	r3, r3
 800304c:	4413      	add	r3, r2
 800304e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003050:	88bb      	ldrh	r3, [r7, #4]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	4603      	mov	r3, r0
 8003062:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8003064:	88fb      	ldrh	r3, [r7, #6]
 8003066:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8003068:	88fb      	ldrh	r3, [r7, #6]
 800306a:	0a1b      	lsrs	r3, r3, #8
 800306c:	b29b      	uxth	r3, r3
 800306e:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8003070:	7bfb      	ldrb	r3, [r7, #15]
 8003072:	4619      	mov	r1, r3
 8003074:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8003078:	f7fe ff06 	bl	8001e88 <WIZCHIP_WRITE>
   setSIMR(simr);
 800307c:	7bbb      	ldrb	r3, [r7, #14]
 800307e:	4619      	mov	r1, r3
 8003080:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003084:	f7fe ff00 	bl	8001e88 <WIZCHIP_WRITE>
#endif   
}
 8003088:	bf00      	nop
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8003096:	2300      	movs	r3, #0
 8003098:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 800309a:	2300      	movs	r3, #0
 800309c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 80030a2:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80030a6:	f7fe fea3 	bl	8001df0 <WIZCHIP_READ>
 80030aa:	4603      	mov	r3, r0
 80030ac:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 80030ae:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80030b2:	f7fe fe9d 	bl	8001df0 <WIZCHIP_READ>
 80030b6:	4603      	mov	r3, r0
 80030b8:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80030ba:	79bb      	ldrb	r3, [r7, #6]
 80030bc:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 80030be:	88bb      	ldrh	r3, [r7, #4]
 80030c0:	021b      	lsls	r3, r3, #8
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	79fb      	ldrb	r3, [r7, #7]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	4413      	add	r3, r2
 80030ca:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80030cc:	88bb      	ldrh	r3, [r7, #4]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 80030dc:	2300      	movs	r3, #0
 80030de:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 80030e0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80030e4:	f7fe fe84 	bl	8001df0 <WIZCHIP_READ>
 80030e8:	4603      	mov	r3, r0
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80030f2:	2301      	movs	r3, #1
 80030f4:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80030f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 800310c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003110:	f7fe fe6e 	bl	8001df0 <WIZCHIP_READ>
 8003114:	4603      	mov	r3, r0
 8003116:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800311a:	2b30      	cmp	r3, #48	; 0x30
 800311c:	d102      	bne.n	8003124 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 800311e:	2301      	movs	r3, #1
 8003120:	71fb      	strb	r3, [r7, #7]
 8003122:	e001      	b.n	8003128 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8003124:	2300      	movs	r3, #0
 8003126:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8003128:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 800313a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800313e:	f7fe fe57 	bl	8001df0 <WIZCHIP_READ>
 8003142:	4603      	mov	r3, r0
 8003144:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800314c:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	4619      	mov	r1, r3
 8003152:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003156:	f7fe fe97 	bl	8001e88 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 800315a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800315e:	f7fe fe47 	bl	8001df0 <WIZCHIP_READ>
 8003162:	4603      	mov	r3, r0
 8003164:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800316c:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	4619      	mov	r1, r3
 8003172:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003176:	f7fe fe87 	bl	8001e88 <WIZCHIP_WRITE>
}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b084      	sub	sp, #16
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800318a:	2300      	movs	r3, #0
 800318c:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d104      	bne.n	80031a0 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8003196:	7bfb      	ldrb	r3, [r7, #15]
 8003198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800319c:	73fb      	strb	r3, [r7, #15]
 800319e:	e003      	b.n	80031a8 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031a6:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	785b      	ldrb	r3, [r3, #1]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d104      	bne.n	80031ba <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
 80031b2:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80031b6:	73fb      	strb	r3, [r7, #15]
 80031b8:	e019      	b.n	80031ee <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	78db      	ldrb	r3, [r3, #3]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d10d      	bne.n	80031de <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	789b      	ldrb	r3, [r3, #2]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d104      	bne.n	80031d4 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
 80031cc:	f043 0318 	orr.w	r3, r3, #24
 80031d0:	73fb      	strb	r3, [r7, #15]
 80031d2:	e00c      	b.n	80031ee <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	f043 0308 	orr.w	r3, r3, #8
 80031da:	73fb      	strb	r3, [r7, #15]
 80031dc:	e007      	b.n	80031ee <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	789b      	ldrb	r3, [r3, #2]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d103      	bne.n	80031ee <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 80031e6:	7bfb      	ldrb	r3, [r7, #15]
 80031e8:	f043 0310 	orr.w	r3, r3, #16
 80031ec:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
 80031f0:	4619      	mov	r1, r3
 80031f2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80031f6:	f7fe fe47 	bl	8001e88 <WIZCHIP_WRITE>
   wizphy_reset();
 80031fa:	f7ff ff9b 	bl	8003134 <wizphy_reset>
}
 80031fe:	bf00      	nop
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b084      	sub	sp, #16
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800320e:	2300      	movs	r3, #0
 8003210:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8003212:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003216:	f7fe fdeb 	bl	8001df0 <WIZCHIP_READ>
 800321a:	4603      	mov	r3, r0
 800321c:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 800321e:	7bfb      	ldrb	r3, [r7, #15]
 8003220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003224:	2b00      	cmp	r3, #0
 8003226:	bf14      	ite	ne
 8003228:	2301      	movne	r3, #1
 800322a:	2300      	moveq	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	461a      	mov	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003234:	7bfb      	ldrb	r3, [r7, #15]
 8003236:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800323a:	2b20      	cmp	r3, #32
 800323c:	d001      	beq.n	8003242 <wizphy_getphyconf+0x3c>
 800323e:	2b38      	cmp	r3, #56	; 0x38
 8003240:	d103      	bne.n	800324a <wizphy_getphyconf+0x44>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	705a      	strb	r2, [r3, #1]
         break;
 8003248:	e003      	b.n	8003252 <wizphy_getphyconf+0x4c>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	705a      	strb	r2, [r3, #1]
         break;
 8003250:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003252:	7bfb      	ldrb	r3, [r7, #15]
 8003254:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003258:	2b18      	cmp	r3, #24
 800325a:	d003      	beq.n	8003264 <wizphy_getphyconf+0x5e>
 800325c:	2b20      	cmp	r3, #32
 800325e:	d001      	beq.n	8003264 <wizphy_getphyconf+0x5e>
 8003260:	2b10      	cmp	r3, #16
 8003262:	d103      	bne.n	800326c <wizphy_getphyconf+0x66>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	709a      	strb	r2, [r3, #2]
         break;
 800326a:	e003      	b.n	8003274 <wizphy_getphyconf+0x6e>
      default:
         phyconf->speed = PHY_SPEED_10;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	709a      	strb	r2, [r3, #2]
         break;
 8003272:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003274:	7bfb      	ldrb	r3, [r7, #15]
 8003276:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800327a:	2b18      	cmp	r3, #24
 800327c:	d003      	beq.n	8003286 <wizphy_getphyconf+0x80>
 800327e:	2b20      	cmp	r3, #32
 8003280:	d001      	beq.n	8003286 <wizphy_getphyconf+0x80>
 8003282:	2b08      	cmp	r3, #8
 8003284:	d103      	bne.n	800328e <wizphy_getphyconf+0x88>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	70da      	strb	r2, [r3, #3]
         break;
 800328c:	e003      	b.n	8003296 <wizphy_getphyconf+0x90>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	70da      	strb	r2, [r3, #3]
         break;
 8003294:	bf00      	nop
   }
}
 8003296:	bf00      	nop
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b084      	sub	sp, #16
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	4603      	mov	r3, r0
 80032a6:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80032a8:	2300      	movs	r3, #0
 80032aa:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80032ac:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80032b0:	f7fe fd9e 	bl	8001df0 <WIZCHIP_READ>
 80032b4:	4603      	mov	r3, r0
 80032b6:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d102      	bne.n	80032c8 <wizphy_setphypmode+0x2a>
 80032c2:	f04f 33ff 	mov.w	r3, #4294967295
 80032c6:	e030      	b.n	800332a <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
 80032ca:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80032ce:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80032d0:	79fb      	ldrb	r3, [r7, #7]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d104      	bne.n	80032e0 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
 80032d8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80032dc:	73fb      	strb	r3, [r7, #15]
 80032de:	e003      	b.n	80032e8 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80032e6:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
 80032ea:	4619      	mov	r1, r3
 80032ec:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80032f0:	f7fe fdca 	bl	8001e88 <WIZCHIP_WRITE>
   wizphy_reset();
 80032f4:	f7ff ff1e 	bl	8003134 <wizphy_reset>
   tmp = getPHYCFGR();
 80032f8:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80032fc:	f7fe fd78 	bl	8001df0 <WIZCHIP_READ>
 8003300:	4603      	mov	r3, r0
 8003302:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8003304:	79fb      	ldrb	r3, [r7, #7]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d106      	bne.n	8003318 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 800330a:	7bfb      	ldrb	r3, [r7, #15]
 800330c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <wizphy_setphypmode+0x88>
 8003314:	2300      	movs	r3, #0
 8003316:	e008      	b.n	800332a <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8003318:	7bfb      	ldrb	r3, [r7, #15]
 800331a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <wizphy_setphypmode+0x88>
 8003322:	2300      	movs	r3, #0
 8003324:	e001      	b.n	800332a <wizphy_setphypmode+0x8c>
   }
   return -1;
 8003326:	f04f 33ff 	mov.w	r3, #4294967295
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2206      	movs	r2, #6
 8003340:	4619      	mov	r1, r3
 8003342:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003346:	f7fe fe4d 	bl	8001fe4 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	330e      	adds	r3, #14
 800334e:	2204      	movs	r2, #4
 8003350:	4619      	mov	r1, r3
 8003352:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003356:	f7fe fe45 	bl	8001fe4 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	330a      	adds	r3, #10
 800335e:	2204      	movs	r2, #4
 8003360:	4619      	mov	r1, r3
 8003362:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003366:	f7fe fe3d 	bl	8001fe4 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	3306      	adds	r3, #6
 800336e:	2204      	movs	r2, #4
 8003370:	4619      	mov	r1, r3
 8003372:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003376:	f7fe fe35 	bl	8001fe4 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	7c9a      	ldrb	r2, [r3, #18]
 800337e:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <wizchip_setnetinfo+0x78>)
 8003380:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	7cda      	ldrb	r2, [r3, #19]
 8003386:	4b09      	ldr	r3, [pc, #36]	; (80033ac <wizchip_setnetinfo+0x78>)
 8003388:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	7d1a      	ldrb	r2, [r3, #20]
 800338e:	4b07      	ldr	r3, [pc, #28]	; (80033ac <wizchip_setnetinfo+0x78>)
 8003390:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	7d5a      	ldrb	r2, [r3, #21]
 8003396:	4b05      	ldr	r3, [pc, #20]	; (80033ac <wizchip_setnetinfo+0x78>)
 8003398:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	7d9a      	ldrb	r2, [r3, #22]
 800339e:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <wizchip_setnetinfo+0x7c>)
 80033a0:	701a      	strb	r2, [r3, #0]
}
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	2000011c 	.word	0x2000011c
 80033b0:	20000120 	.word	0x20000120

080033b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08a      	sub	sp, #40	; 0x28
 80033b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ba:	f107 0318 	add.w	r3, r7, #24
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	605a      	str	r2, [r3, #4]
 80033c4:	609a      	str	r2, [r3, #8]
 80033c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80033c8:	4a45      	ldr	r2, [pc, #276]	; (80034e0 <MX_GPIO_Init+0x12c>)
 80033ca:	4b45      	ldr	r3, [pc, #276]	; (80034e0 <MX_GPIO_Init+0x12c>)
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033d2:	6193      	str	r3, [r2, #24]
 80033d4:	4b42      	ldr	r3, [pc, #264]	; (80034e0 <MX_GPIO_Init+0x12c>)
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e0:	4a3f      	ldr	r2, [pc, #252]	; (80034e0 <MX_GPIO_Init+0x12c>)
 80033e2:	4b3f      	ldr	r3, [pc, #252]	; (80034e0 <MX_GPIO_Init+0x12c>)
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	f043 0304 	orr.w	r3, r3, #4
 80033ea:	6193      	str	r3, [r2, #24]
 80033ec:	4b3c      	ldr	r3, [pc, #240]	; (80034e0 <MX_GPIO_Init+0x12c>)
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033f8:	4a39      	ldr	r2, [pc, #228]	; (80034e0 <MX_GPIO_Init+0x12c>)
 80033fa:	4b39      	ldr	r3, [pc, #228]	; (80034e0 <MX_GPIO_Init+0x12c>)
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	f043 0310 	orr.w	r3, r3, #16
 8003402:	6193      	str	r3, [r2, #24]
 8003404:	4b36      	ldr	r3, [pc, #216]	; (80034e0 <MX_GPIO_Init+0x12c>)
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	f003 0310 	and.w	r3, r3, #16
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003410:	4a33      	ldr	r2, [pc, #204]	; (80034e0 <MX_GPIO_Init+0x12c>)
 8003412:	4b33      	ldr	r3, [pc, #204]	; (80034e0 <MX_GPIO_Init+0x12c>)
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	f043 0308 	orr.w	r3, r3, #8
 800341a:	6193      	str	r3, [r2, #24]
 800341c:	4b30      	ldr	r3, [pc, #192]	; (80034e0 <MX_GPIO_Init+0x12c>)
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003428:	4a2d      	ldr	r2, [pc, #180]	; (80034e0 <MX_GPIO_Init+0x12c>)
 800342a:	4b2d      	ldr	r3, [pc, #180]	; (80034e0 <MX_GPIO_Init+0x12c>)
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	f043 0320 	orr.w	r3, r3, #32
 8003432:	6193      	str	r3, [r2, #24]
 8003434:	4b2a      	ldr	r3, [pc, #168]	; (80034e0 <MX_GPIO_Init+0x12c>)
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	607b      	str	r3, [r7, #4]
 800343e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WATCHDOG_GPIO_Port, WATCHDOG_Pin, GPIO_PIN_RESET);
 8003440:	2200      	movs	r2, #0
 8003442:	2104      	movs	r1, #4
 8003444:	4827      	ldr	r0, [pc, #156]	; (80034e4 <MX_GPIO_Init+0x130>)
 8003446:	f7fd f9c1 	bl	80007cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 800344a:	2200      	movs	r2, #0
 800344c:	2110      	movs	r1, #16
 800344e:	4826      	ldr	r0, [pc, #152]	; (80034e8 <MX_GPIO_Init+0x134>)
 8003450:	f7fd f9bc 	bl	80007cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_RESET);
 8003454:	2200      	movs	r2, #0
 8003456:	2110      	movs	r1, #16
 8003458:	4824      	ldr	r0, [pc, #144]	; (80034ec <MX_GPIO_Init+0x138>)
 800345a:	f7fd f9b7 	bl	80007cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_SOCKET_GPIO_Port, LED_SOCKET_Pin, GPIO_PIN_RESET);
 800345e:	2200      	movs	r2, #0
 8003460:	2108      	movs	r1, #8
 8003462:	4823      	ldr	r0, [pc, #140]	; (80034f0 <MX_GPIO_Init+0x13c>)
 8003464:	f7fd f9b2 	bl	80007cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WATCHDOG_Pin;
 8003468:	2304      	movs	r3, #4
 800346a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800346c:	2301      	movs	r3, #1
 800346e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003470:	2300      	movs	r3, #0
 8003472:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003474:	2302      	movs	r3, #2
 8003476:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(WATCHDOG_GPIO_Port, &GPIO_InitStruct);
 8003478:	f107 0318 	add.w	r3, r7, #24
 800347c:	4619      	mov	r1, r3
 800347e:	4819      	ldr	r0, [pc, #100]	; (80034e4 <MX_GPIO_Init+0x130>)
 8003480:	f7fd f836 	bl	80004f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = W5500_CS_Pin;
 8003484:	2310      	movs	r3, #16
 8003486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003488:	2301      	movs	r3, #1
 800348a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348c:	2300      	movs	r3, #0
 800348e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003490:	2302      	movs	r3, #2
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(W5500_CS_GPIO_Port, &GPIO_InitStruct);
 8003494:	f107 0318 	add.w	r3, r7, #24
 8003498:	4619      	mov	r1, r3
 800349a:	4813      	ldr	r0, [pc, #76]	; (80034e8 <MX_GPIO_Init+0x134>)
 800349c:	f7fd f828 	bl	80004f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = W5500_RST_Pin;
 80034a0:	2310      	movs	r3, #16
 80034a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034a4:	2301      	movs	r3, #1
 80034a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ac:	2302      	movs	r3, #2
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(W5500_RST_GPIO_Port, &GPIO_InitStruct);
 80034b0:	f107 0318 	add.w	r3, r7, #24
 80034b4:	4619      	mov	r1, r3
 80034b6:	480d      	ldr	r0, [pc, #52]	; (80034ec <MX_GPIO_Init+0x138>)
 80034b8:	f7fd f81a 	bl	80004f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_SOCKET_Pin;
 80034bc:	2308      	movs	r3, #8
 80034be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034c0:	2301      	movs	r3, #1
 80034c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c4:	2300      	movs	r3, #0
 80034c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c8:	2302      	movs	r3, #2
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED_SOCKET_GPIO_Port, &GPIO_InitStruct);
 80034cc:	f107 0318 	add.w	r3, r7, #24
 80034d0:	4619      	mov	r1, r3
 80034d2:	4807      	ldr	r0, [pc, #28]	; (80034f0 <MX_GPIO_Init+0x13c>)
 80034d4:	f7fd f80c 	bl	80004f0 <HAL_GPIO_Init>

}
 80034d8:	bf00      	nop
 80034da:	3728      	adds	r7, #40	; 0x28
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40021000 	.word	0x40021000
 80034e4:	40011800 	.word	0x40011800
 80034e8:	40010800 	.word	0x40010800
 80034ec:	40011000 	.word	0x40011000
 80034f0:	40011400 	.word	0x40011400

080034f4 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003504:	2b80      	cmp	r3, #128	; 0x80
 8003506:	bf0c      	ite	eq
 8003508:	2301      	moveq	r3, #1
 800350a:	2300      	movne	r3, #0
 800350c:	b2db      	uxtb	r3, r3
}
 800350e:	4618      	mov	r0, r3
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr

08003518 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	460b      	mov	r3, r1
 8003522:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8003524:	78fa      	ldrb	r2, [r7, #3]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	605a      	str	r2, [r3, #4]
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr

08003534 <_write>:
  HAL_UART_Transmit(&huart2, p, len, 10);
  return len;
}
*/
int _write(int file, char* ptr, int len)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  //HAL_UART_Transmit(&huart2, p, len, 10);
  int DataIdx;

  for(DataIdx = 0; DataIdx < len; DataIdx++)
 8003540:	2300      	movs	r3, #0
 8003542:	617b      	str	r3, [r7, #20]
 8003544:	e011      	b.n	800356a <_write+0x36>
  {
    while(!LL_USART_IsActiveFlag_TXE(USART2))
 8003546:	bf00      	nop
 8003548:	480c      	ldr	r0, [pc, #48]	; (800357c <_write+0x48>)
 800354a:	f7ff ffd3 	bl	80034f4 <LL_USART_IsActiveFlag_TXE>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0f9      	beq.n	8003548 <_write+0x14>
    {
      //We can put some timeout here
    }
    LL_USART_TransmitData8(USART2, *ptr++);
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	60ba      	str	r2, [r7, #8]
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	4619      	mov	r1, r3
 800355e:	4807      	ldr	r0, [pc, #28]	; (800357c <_write+0x48>)
 8003560:	f7ff ffda 	bl	8003518 <LL_USART_TransmitData8>
  for(DataIdx = 0; DataIdx < len; DataIdx++)
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	3301      	adds	r3, #1
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	429a      	cmp	r2, r3
 8003570:	dbe9      	blt.n	8003546 <_write+0x12>
  }
  return len;
 8003572:	687b      	ldr	r3, [r7, #4]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40004400 	.word	0x40004400

08003580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003580:	b5b0      	push	{r4, r5, r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  uint8_t w5500_s0_status = 0x10;
 8003586:	2310      	movs	r3, #16
 8003588:	73fb      	strb	r3, [r7, #15]
  uint8_t w5500_s1_status = 0x10;
 800358a:	2310      	movs	r3, #16
 800358c:	73bb      	strb	r3, [r7, #14]

  //uint8_t buf2[]   = "This is DTU-3000 using W5500";
  uint8_t address_target[]  = {192,168,11,101};
 800358e:	4b2c      	ldr	r3, [pc, #176]	; (8003640 <main+0xc0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	607b      	str	r3, [r7, #4]
  uint8_t count = 0;
 8003594:	2300      	movs	r3, #0
 8003596:	737b      	strb	r3, [r7, #13]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003598:	f7fc fe44 	bl	8000224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800359c:	f000 f860 	bl	8003660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035a0:	f7ff ff08 	bl	80033b4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80035a4:	f000 f9b8 	bl	8003918 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80035a8:	f000 fbfa 	bl	8003da0 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80035ac:	f000 f9ea 	bl	8003984 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  W5500_hw_Rst();
 80035b0:	f000 fca2 	bl	8003ef8 <W5500_hw_Rst>
  W5500_init();
 80035b4:	f000 fcba 	bl	8003f2c <W5500_init>

  socket(0, Sn_MR_TCP, 5000, SF_TCP_NODELAY);
 80035b8:	2320      	movs	r3, #32
 80035ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80035be:	2101      	movs	r1, #1
 80035c0:	2000      	movs	r0, #0
 80035c2:	f7fe febd 	bl	8002340 <socket>
  listen(0);
 80035c6:	2000      	movs	r0, #0
 80035c8:	f7ff f83c 	bl	8002644 <listen>

  //SPI2->CR2 |= 0x0040;    // RXNE interrupt enable
  SPI2->CR1 |= 0x0040;    // SPI enable
 80035cc:	4a1d      	ldr	r2, [pc, #116]	; (8003644 <main+0xc4>)
 80035ce:	4b1d      	ldr	r3, [pc, #116]	; (8003644 <main+0xc4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035d6:	6013      	str	r3, [r2, #0]

  SPI2->DR = Tx[0];       // Write initial byte
 80035d8:	4b1a      	ldr	r3, [pc, #104]	; (8003644 <main+0xc4>)
 80035da:	4a1b      	ldr	r2, [pc, #108]	; (8003648 <main+0xc8>)
 80035dc:	7812      	ldrb	r2, [r2, #0]
 80035de:	60da      	str	r2, [r3, #12]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin(LED_SOCKET_GPIO_Port, LED_SOCKET_Pin);
 80035e0:	2108      	movs	r1, #8
 80035e2:	481a      	ldr	r0, [pc, #104]	; (800364c <main+0xcc>)
 80035e4:	f7fd f90a 	bl	80007fc <HAL_GPIO_TogglePin>
	  //printf("0x0A \r \n");
	  //w5500_s0_status = getSn_SR(0);
    //w5500_s1_status = getSn_SR(1);

	  //printf("W5500 Status Socket0 == 0x%X Socket1 == 0x%X \r \n", w5500_s0_status , w5500_s1_status);
	  printf("%d %d %d %d %d %d \r \n", Rx[0], Rx[1], Rx[2], Rx[3], Rx[4], Rx[5]);
 80035e8:	4b19      	ldr	r3, [pc, #100]	; (8003650 <main+0xd0>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	4b18      	ldr	r3, [pc, #96]	; (8003650 <main+0xd0>)
 80035f0:	785b      	ldrb	r3, [r3, #1]
 80035f2:	461c      	mov	r4, r3
 80035f4:	4b16      	ldr	r3, [pc, #88]	; (8003650 <main+0xd0>)
 80035f6:	789b      	ldrb	r3, [r3, #2]
 80035f8:	461d      	mov	r5, r3
 80035fa:	4b15      	ldr	r3, [pc, #84]	; (8003650 <main+0xd0>)
 80035fc:	78db      	ldrb	r3, [r3, #3]
 80035fe:	461a      	mov	r2, r3
 8003600:	4b13      	ldr	r3, [pc, #76]	; (8003650 <main+0xd0>)
 8003602:	791b      	ldrb	r3, [r3, #4]
 8003604:	4619      	mov	r1, r3
 8003606:	4b12      	ldr	r3, [pc, #72]	; (8003650 <main+0xd0>)
 8003608:	795b      	ldrb	r3, [r3, #5]
 800360a:	9302      	str	r3, [sp, #8]
 800360c:	9101      	str	r1, [sp, #4]
 800360e:	9200      	str	r2, [sp, #0]
 8003610:	462b      	mov	r3, r5
 8003612:	4622      	mov	r2, r4
 8003614:	4601      	mov	r1, r0
 8003616:	480f      	ldr	r0, [pc, #60]	; (8003654 <main+0xd4>)
 8003618:	f000 fdd4 	bl	80041c4 <iprintf>
	  HAL_Delay(100);
 800361c:	2064      	movs	r0, #100	; 0x64
 800361e:	f7fc fe63 	bl	80002e8 <HAL_Delay>
	  }
	  */

    // Loopback Test

    if((ret = myLoopback_tcps(SOCK_TCPS0, gDATABUF, 5000)) < 0)
 8003622:	f241 3288 	movw	r2, #5000	; 0x1388
 8003626:	490c      	ldr	r1, [pc, #48]	; (8003658 <main+0xd8>)
 8003628:	2000      	movs	r0, #0
 800362a:	f000 f85f 	bl	80036ec <myLoopback_tcps>
 800362e:	60b8      	str	r0, [r7, #8]
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	dad4      	bge.n	80035e0 <main+0x60>
    {
      printf("WSOCKET ERROR : %d \r \n", ret);
 8003636:	68b9      	ldr	r1, [r7, #8]
 8003638:	4808      	ldr	r0, [pc, #32]	; (800365c <main+0xdc>)
 800363a:	f000 fdc3 	bl	80041c4 <iprintf>
	  HAL_GPIO_TogglePin(LED_SOCKET_GPIO_Port, LED_SOCKET_Pin);
 800363e:	e7cf      	b.n	80035e0 <main+0x60>
 8003640:	08004ed4 	.word	0x08004ed4
 8003644:	40003800 	.word	0x40003800
 8003648:	20000074 	.word	0x20000074
 800364c:	40011400 	.word	0x40011400
 8003650:	20000124 	.word	0x20000124
 8003654:	08004ea4 	.word	0x08004ea4
 8003658:	20000140 	.word	0x20000140
 800365c:	08004ebc 	.word	0x08004ebc

08003660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b090      	sub	sp, #64	; 0x40
 8003664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003666:	f107 0318 	add.w	r3, r7, #24
 800366a:	2228      	movs	r2, #40	; 0x28
 800366c:	2100      	movs	r1, #0
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fcf6 	bl	8004060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003674:	1d3b      	adds	r3, r7, #4
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	605a      	str	r2, [r3, #4]
 800367c:	609a      	str	r2, [r3, #8]
 800367e:	60da      	str	r2, [r3, #12]
 8003680:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003682:	2301      	movs	r3, #1
 8003684:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003686:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800368a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800368c:	2300      	movs	r3, #0
 800368e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003690:	2301      	movs	r3, #1
 8003692:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003694:	2302      	movs	r3, #2
 8003696:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800369c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800369e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80036a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036a4:	f107 0318 	add.w	r3, r7, #24
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fd f8b9 	bl	8000820 <HAL_RCC_OscConfig>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80036b4:	f000 f92a 	bl	800390c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036b8:	230f      	movs	r3, #15
 80036ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036bc:	2302      	movs	r3, #2
 80036be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80036c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036ca:	2300      	movs	r3, #0
 80036cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80036ce:	1d3b      	adds	r3, r7, #4
 80036d0:	2102      	movs	r1, #2
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fd fb08 	bl	8000ce8 <HAL_RCC_ClockConfig>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80036de:	f000 f915 	bl	800390c <Error_Handler>
  }
}
 80036e2:	bf00      	nop
 80036e4:	3740      	adds	r7, #64	; 0x40
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
	...

080036ec <myLoopback_tcps>:

/* USER CODE BEGIN 4 */
int32_t myLoopback_tcps(uint8_t sn, uint8_t* buf, uint16_t port)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	6039      	str	r1, [r7, #0]
 80036f6:	71fb      	strb	r3, [r7, #7]
 80036f8:	4613      	mov	r3, r2
 80036fa:	80bb      	strh	r3, [r7, #4]
   int32_t ret;
   uint16_t size = 0, sentsize=0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	81fb      	strh	r3, [r7, #14]
 8003700:	2300      	movs	r3, #0
 8003702:	81bb      	strh	r3, [r7, #12]

   switch(getSn_SR(sn))
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	3301      	adds	r3, #1
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003710:	4618      	mov	r0, r3
 8003712:	f7fe fb6d 	bl	8001df0 <WIZCHIP_READ>
 8003716:	4603      	mov	r3, r0
 8003718:	2b1c      	cmp	r3, #28
 800371a:	f200 80de 	bhi.w	80038da <myLoopback_tcps+0x1ee>
 800371e:	a201      	add	r2, pc, #4	; (adr r2, 8003724 <myLoopback_tcps+0x38>)
 8003720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003724:	080038a9 	.word	0x080038a9
 8003728:	080038db 	.word	0x080038db
 800372c:	080038db 	.word	0x080038db
 8003730:	080038db 	.word	0x080038db
 8003734:	080038db 	.word	0x080038db
 8003738:	080038db 	.word	0x080038db
 800373c:	080038db 	.word	0x080038db
 8003740:	080038db 	.word	0x080038db
 8003744:	080038db 	.word	0x080038db
 8003748:	080038db 	.word	0x080038db
 800374c:	080038db 	.word	0x080038db
 8003750:	080038db 	.word	0x080038db
 8003754:	080038db 	.word	0x080038db
 8003758:	080038db 	.word	0x080038db
 800375c:	080038db 	.word	0x080038db
 8003760:	080038db 	.word	0x080038db
 8003764:	080038db 	.word	0x080038db
 8003768:	080038db 	.word	0x080038db
 800376c:	080038db 	.word	0x080038db
 8003770:	08003887 	.word	0x08003887
 8003774:	080038db 	.word	0x080038db
 8003778:	080038db 	.word	0x080038db
 800377c:	080038db 	.word	0x080038db
 8003780:	08003799 	.word	0x08003799
 8003784:	080038db 	.word	0x080038db
 8003788:	080038db 	.word	0x080038db
 800378c:	080038db 	.word	0x080038db
 8003790:	080038db 	.word	0x080038db
 8003794:	0800385b 	.word	0x0800385b
   {
      case SOCK_ESTABLISHED :
         if(getSn_IR(sn) & Sn_IR_CON)
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	3301      	adds	r3, #1
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fe fb23 	bl	8001df0 <WIZCHIP_READ>
 80037aa:	4603      	mov	r3, r0
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00e      	beq.n	80037d2 <myLoopback_tcps+0xe6>
         {
            //myprintf("%d:Connected\r\n",sn);
            printf("%d:Connected\r\n",sn);
 80037b4:	79fb      	ldrb	r3, [r7, #7]
 80037b6:	4619      	mov	r1, r3
 80037b8:	484d      	ldr	r0, [pc, #308]	; (80038f0 <myLoopback_tcps+0x204>)
 80037ba:	f000 fd03 	bl	80041c4 <iprintf>

            setSn_IR(sn,Sn_IR_CON);
 80037be:	79fb      	ldrb	r3, [r7, #7]
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	3301      	adds	r3, #1
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80037ca:	2101      	movs	r1, #1
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fe fb5b 	bl	8001e88 <WIZCHIP_WRITE>
         }
         if((size = getSn_RX_RSR(sn)) > 0)
 80037d2:	79fb      	ldrb	r3, [r7, #7]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fe fcb0 	bl	800213a <getSn_RX_RSR>
 80037da:	4603      	mov	r3, r0
 80037dc:	81fb      	strh	r3, [r7, #14]
 80037de:	89fb      	ldrh	r3, [r7, #14]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d07c      	beq.n	80038de <myLoopback_tcps+0x1f2>
         {
            if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 80037e4:	89fb      	ldrh	r3, [r7, #14]
 80037e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ea:	d902      	bls.n	80037f2 <myLoopback_tcps+0x106>
 80037ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80037f0:	81fb      	strh	r3, [r7, #14]
            ret = recv(sn,buf,size);
 80037f2:	89fa      	ldrh	r2, [r7, #14]
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	6839      	ldr	r1, [r7, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff f8ed 	bl	80029d8 <recv>
 80037fe:	60b8      	str	r0, [r7, #8]
            if(ret <= 0) return ret;
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2b00      	cmp	r3, #0
 8003804:	dc01      	bgt.n	800380a <myLoopback_tcps+0x11e>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	e06d      	b.n	80038e6 <myLoopback_tcps+0x1fa>

            //printf("%d:Receive message\r\n",sn);
            send(sn, buf2, sizeof(buf2));
 800380a:	79fb      	ldrb	r3, [r7, #7]
 800380c:	2227      	movs	r2, #39	; 0x27
 800380e:	4939      	ldr	r1, [pc, #228]	; (80038f4 <myLoopback_tcps+0x208>)
 8003810:	4618      	mov	r0, r3
 8003812:	f7fe ffe7 	bl	80027e4 <send>

            sentsize = 0;
 8003816:	2300      	movs	r3, #0
 8003818:	81bb      	strh	r3, [r7, #12]
            while(size != sentsize)
 800381a:	e019      	b.n	8003850 <myLoopback_tcps+0x164>
            {
               ret = send(sn,buf+sentsize,size-sentsize);
 800381c:	89bb      	ldrh	r3, [r7, #12]
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	18d1      	adds	r1, r2, r3
 8003822:	89fa      	ldrh	r2, [r7, #14]
 8003824:	89bb      	ldrh	r3, [r7, #12]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	b29a      	uxth	r2, r3
 800382a:	79fb      	ldrb	r3, [r7, #7]
 800382c:	4618      	mov	r0, r3
 800382e:	f7fe ffd9 	bl	80027e4 <send>
 8003832:	60b8      	str	r0, [r7, #8]
               if(ret < 0)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	da05      	bge.n	8003846 <myLoopback_tcps+0x15a>
               {
                  close(sn);
 800383a:	79fb      	ldrb	r3, [r7, #7]
 800383c:	4618      	mov	r0, r3
 800383e:	f7fe fe93 	bl	8002568 <close>
                  return ret;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	e04f      	b.n	80038e6 <myLoopback_tcps+0x1fa>
               }
               sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	b29a      	uxth	r2, r3
 800384a:	89bb      	ldrh	r3, [r7, #12]
 800384c:	4413      	add	r3, r2
 800384e:	81bb      	strh	r3, [r7, #12]
            while(size != sentsize)
 8003850:	89fa      	ldrh	r2, [r7, #14]
 8003852:	89bb      	ldrh	r3, [r7, #12]
 8003854:	429a      	cmp	r2, r3
 8003856:	d1e1      	bne.n	800381c <myLoopback_tcps+0x130>
            }
         }
         break;
 8003858:	e041      	b.n	80038de <myLoopback_tcps+0x1f2>

      case SOCK_CLOSE_WAIT :
         //myprintf("%d:CloseWait\r\n",sn);
         printf("%d:CloseWait\r\n",sn);
 800385a:	79fb      	ldrb	r3, [r7, #7]
 800385c:	4619      	mov	r1, r3
 800385e:	4826      	ldr	r0, [pc, #152]	; (80038f8 <myLoopback_tcps+0x20c>)
 8003860:	f000 fcb0 	bl	80041c4 <iprintf>

         if((ret=disconnect(sn)) != SOCK_OK) return ret;
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	4618      	mov	r0, r3
 8003868:	f7fe ff46 	bl	80026f8 <disconnect>
 800386c:	4603      	mov	r3, r0
 800386e:	60bb      	str	r3, [r7, #8]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d001      	beq.n	800387a <myLoopback_tcps+0x18e>
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	e035      	b.n	80038e6 <myLoopback_tcps+0x1fa>
         //myprintf("%d:Closed\r\n",sn);
         printf("%d:Closed\r\n",sn);
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	4619      	mov	r1, r3
 800387e:	481f      	ldr	r0, [pc, #124]	; (80038fc <myLoopback_tcps+0x210>)
 8003880:	f000 fca0 	bl	80041c4 <iprintf>
         break;
 8003884:	e02e      	b.n	80038e4 <myLoopback_tcps+0x1f8>

      case SOCK_INIT :
          //myprintf("%d:Listen, port [%d]\r\n",sn, port);
         printf("%d:Listen, port [%d]\r\n",sn, port);
 8003886:	79fb      	ldrb	r3, [r7, #7]
 8003888:	88ba      	ldrh	r2, [r7, #4]
 800388a:	4619      	mov	r1, r3
 800388c:	481c      	ldr	r0, [pc, #112]	; (8003900 <myLoopback_tcps+0x214>)
 800388e:	f000 fc99 	bl	80041c4 <iprintf>

         if( (ret = listen(sn)) != SOCK_OK) return ret;
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	4618      	mov	r0, r3
 8003896:	f7fe fed5 	bl	8002644 <listen>
 800389a:	4603      	mov	r3, r0
 800389c:	60bb      	str	r3, [r7, #8]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d01e      	beq.n	80038e2 <myLoopback_tcps+0x1f6>
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	e01e      	b.n	80038e6 <myLoopback_tcps+0x1fa>
         break;

      case SOCK_CLOSED:
         //myprintf("%d:LBTStart\r\n",sn);
         printf("%d:LBTStart\r\n",sn);
 80038a8:	79fb      	ldrb	r3, [r7, #7]
 80038aa:	4619      	mov	r1, r3
 80038ac:	4815      	ldr	r0, [pc, #84]	; (8003904 <myLoopback_tcps+0x218>)
 80038ae:	f000 fc89 	bl	80041c4 <iprintf>

         if((ret=socket(sn,Sn_MR_TCP,port,0x00)) != sn)
 80038b2:	88ba      	ldrh	r2, [r7, #4]
 80038b4:	79f8      	ldrb	r0, [r7, #7]
 80038b6:	2300      	movs	r3, #0
 80038b8:	2101      	movs	r1, #1
 80038ba:	f7fe fd41 	bl	8002340 <socket>
 80038be:	4603      	mov	r3, r0
 80038c0:	60bb      	str	r3, [r7, #8]
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d001      	beq.n	80038ce <myLoopback_tcps+0x1e2>
            return ret;
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	e00b      	b.n	80038e6 <myLoopback_tcps+0x1fa>
         //myprintf("%d:Opened\r\n",sn);
         printf("%d:Opened\r\n",sn);
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	4619      	mov	r1, r3
 80038d2:	480d      	ldr	r0, [pc, #52]	; (8003908 <myLoopback_tcps+0x21c>)
 80038d4:	f000 fc76 	bl	80041c4 <iprintf>
         break;
 80038d8:	e004      	b.n	80038e4 <myLoopback_tcps+0x1f8>

      default:
         break;
 80038da:	bf00      	nop
 80038dc:	e002      	b.n	80038e4 <myLoopback_tcps+0x1f8>
         break;
 80038de:	bf00      	nop
 80038e0:	e000      	b.n	80038e4 <myLoopback_tcps+0x1f8>
         break;
 80038e2:	bf00      	nop
   }
   return 1;
 80038e4:	2301      	movs	r3, #1
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	08004ed8 	.word	0x08004ed8
 80038f4:	20000034 	.word	0x20000034
 80038f8:	08004ee8 	.word	0x08004ee8
 80038fc:	08004ef8 	.word	0x08004ef8
 8003900:	08004f04 	.word	0x08004f04
 8003904:	08004f1c 	.word	0x08004f1c
 8003908:	08004f2c 	.word	0x08004f2c

0800390c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003910:	bf00      	nop
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr

08003918 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800391c:	4b17      	ldr	r3, [pc, #92]	; (800397c <MX_SPI1_Init+0x64>)
 800391e:	4a18      	ldr	r2, [pc, #96]	; (8003980 <MX_SPI1_Init+0x68>)
 8003920:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003922:	4b16      	ldr	r3, [pc, #88]	; (800397c <MX_SPI1_Init+0x64>)
 8003924:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003928:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800392a:	4b14      	ldr	r3, [pc, #80]	; (800397c <MX_SPI1_Init+0x64>)
 800392c:	2200      	movs	r2, #0
 800392e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003930:	4b12      	ldr	r3, [pc, #72]	; (800397c <MX_SPI1_Init+0x64>)
 8003932:	2200      	movs	r2, #0
 8003934:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003936:	4b11      	ldr	r3, [pc, #68]	; (800397c <MX_SPI1_Init+0x64>)
 8003938:	2202      	movs	r2, #2
 800393a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800393c:	4b0f      	ldr	r3, [pc, #60]	; (800397c <MX_SPI1_Init+0x64>)
 800393e:	2201      	movs	r2, #1
 8003940:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003942:	4b0e      	ldr	r3, [pc, #56]	; (800397c <MX_SPI1_Init+0x64>)
 8003944:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003948:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800394a:	4b0c      	ldr	r3, [pc, #48]	; (800397c <MX_SPI1_Init+0x64>)
 800394c:	2208      	movs	r2, #8
 800394e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003950:	4b0a      	ldr	r3, [pc, #40]	; (800397c <MX_SPI1_Init+0x64>)
 8003952:	2200      	movs	r2, #0
 8003954:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003956:	4b09      	ldr	r3, [pc, #36]	; (800397c <MX_SPI1_Init+0x64>)
 8003958:	2200      	movs	r2, #0
 800395a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800395c:	4b07      	ldr	r3, [pc, #28]	; (800397c <MX_SPI1_Init+0x64>)
 800395e:	2200      	movs	r2, #0
 8003960:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003962:	4b06      	ldr	r3, [pc, #24]	; (800397c <MX_SPI1_Init+0x64>)
 8003964:	220a      	movs	r2, #10
 8003966:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003968:	4804      	ldr	r0, [pc, #16]	; (800397c <MX_SPI1_Init+0x64>)
 800396a:	f7fd feb7 	bl	80016dc <HAL_SPI_Init>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003974:	f7ff ffca 	bl	800390c <Error_Handler>
  }

}
 8003978:	bf00      	nop
 800397a:	bd80      	pop	{r7, pc}
 800397c:	20000998 	.word	0x20000998
 8003980:	40013000 	.word	0x40013000

08003984 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8003988:	4b17      	ldr	r3, [pc, #92]	; (80039e8 <MX_SPI2_Init+0x64>)
 800398a:	4a18      	ldr	r2, [pc, #96]	; (80039ec <MX_SPI2_Init+0x68>)
 800398c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800398e:	4b16      	ldr	r3, [pc, #88]	; (80039e8 <MX_SPI2_Init+0x64>)
 8003990:	2200      	movs	r2, #0
 8003992:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8003994:	4b14      	ldr	r3, [pc, #80]	; (80039e8 <MX_SPI2_Init+0x64>)
 8003996:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800399a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800399c:	4b12      	ldr	r3, [pc, #72]	; (80039e8 <MX_SPI2_Init+0x64>)
 800399e:	2200      	movs	r2, #0
 80039a0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80039a2:	4b11      	ldr	r3, [pc, #68]	; (80039e8 <MX_SPI2_Init+0x64>)
 80039a4:	2202      	movs	r2, #2
 80039a6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039a8:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <MX_SPI2_Init+0x64>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80039ae:	4b0e      	ldr	r3, [pc, #56]	; (80039e8 <MX_SPI2_Init+0x64>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039b4:	4b0c      	ldr	r3, [pc, #48]	; (80039e8 <MX_SPI2_Init+0x64>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039ba:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <MX_SPI2_Init+0x64>)
 80039bc:	2200      	movs	r2, #0
 80039be:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80039c0:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <MX_SPI2_Init+0x64>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039c6:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <MX_SPI2_Init+0x64>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80039cc:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <MX_SPI2_Init+0x64>)
 80039ce:	220a      	movs	r2, #10
 80039d0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80039d2:	4805      	ldr	r0, [pc, #20]	; (80039e8 <MX_SPI2_Init+0x64>)
 80039d4:	f7fd fe82 	bl	80016dc <HAL_SPI_Init>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 80039de:	f7ff ff95 	bl	800390c <Error_Handler>
  }

}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	20000940 	.word	0x20000940
 80039ec:	40003800 	.word	0x40003800

080039f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08a      	sub	sp, #40	; 0x28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f8:	f107 0318 	add.w	r3, r7, #24
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	605a      	str	r2, [r3, #4]
 8003a02:	609a      	str	r2, [r3, #8]
 8003a04:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a31      	ldr	r2, [pc, #196]	; (8003ad0 <HAL_SPI_MspInit+0xe0>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d130      	bne.n	8003a72 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a10:	4a30      	ldr	r2, [pc, #192]	; (8003ad4 <HAL_SPI_MspInit+0xe4>)
 8003a12:	4b30      	ldr	r3, [pc, #192]	; (8003ad4 <HAL_SPI_MspInit+0xe4>)
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a1a:	6193      	str	r3, [r2, #24]
 8003a1c:	4b2d      	ldr	r3, [pc, #180]	; (8003ad4 <HAL_SPI_MspInit+0xe4>)
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a24:	617b      	str	r3, [r7, #20]
 8003a26:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a28:	4a2a      	ldr	r2, [pc, #168]	; (8003ad4 <HAL_SPI_MspInit+0xe4>)
 8003a2a:	4b2a      	ldr	r3, [pc, #168]	; (8003ad4 <HAL_SPI_MspInit+0xe4>)
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	f043 0304 	orr.w	r3, r3, #4
 8003a32:	6193      	str	r3, [r2, #24]
 8003a34:	4b27      	ldr	r3, [pc, #156]	; (8003ad4 <HAL_SPI_MspInit+0xe4>)
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
 8003a40:	23a0      	movs	r3, #160	; 0xa0
 8003a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a44:	2302      	movs	r3, #2
 8003a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a4c:	f107 0318 	add.w	r3, r7, #24
 8003a50:	4619      	mov	r1, r3
 8003a52:	4821      	ldr	r0, [pc, #132]	; (8003ad8 <HAL_SPI_MspInit+0xe8>)
 8003a54:	f7fc fd4c 	bl	80004f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8003a58:	2340      	movs	r3, #64	; 0x40
 8003a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8003a64:	f107 0318 	add.w	r3, r7, #24
 8003a68:	4619      	mov	r1, r3
 8003a6a:	481b      	ldr	r0, [pc, #108]	; (8003ad8 <HAL_SPI_MspInit+0xe8>)
 8003a6c:	f7fc fd40 	bl	80004f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003a70:	e029      	b.n	8003ac6 <HAL_SPI_MspInit+0xd6>
  else if(spiHandle->Instance==SPI2)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a19      	ldr	r2, [pc, #100]	; (8003adc <HAL_SPI_MspInit+0xec>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d124      	bne.n	8003ac6 <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003a7c:	4a15      	ldr	r2, [pc, #84]	; (8003ad4 <HAL_SPI_MspInit+0xe4>)
 8003a7e:	4b15      	ldr	r3, [pc, #84]	; (8003ad4 <HAL_SPI_MspInit+0xe4>)
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a86:	61d3      	str	r3, [r2, #28]
 8003a88:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <HAL_SPI_MspInit+0xe4>)
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a94:	4a0f      	ldr	r2, [pc, #60]	; (8003ad4 <HAL_SPI_MspInit+0xe4>)
 8003a96:	4b0f      	ldr	r3, [pc, #60]	; (8003ad4 <HAL_SPI_MspInit+0xe4>)
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	f043 0308 	orr.w	r3, r3, #8
 8003a9e:	6193      	str	r3, [r2, #24]
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	; (8003ad4 <HAL_SPI_MspInit+0xe4>)
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	60bb      	str	r3, [r7, #8]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003aac:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aba:	f107 0318 	add.w	r3, r7, #24
 8003abe:	4619      	mov	r1, r3
 8003ac0:	4807      	ldr	r0, [pc, #28]	; (8003ae0 <HAL_SPI_MspInit+0xf0>)
 8003ac2:	f7fc fd15 	bl	80004f0 <HAL_GPIO_Init>
}
 8003ac6:	bf00      	nop
 8003ac8:	3728      	adds	r7, #40	; 0x28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40013000 	.word	0x40013000
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	40010800 	.word	0x40010800
 8003adc:	40003800 	.word	0x40003800
 8003ae0:	40010c00 	.word	0x40010c00

08003ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003aea:	4a15      	ldr	r2, [pc, #84]	; (8003b40 <HAL_MspInit+0x5c>)
 8003aec:	4b14      	ldr	r3, [pc, #80]	; (8003b40 <HAL_MspInit+0x5c>)
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	6193      	str	r3, [r2, #24]
 8003af6:	4b12      	ldr	r3, [pc, #72]	; (8003b40 <HAL_MspInit+0x5c>)
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	60bb      	str	r3, [r7, #8]
 8003b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b02:	4a0f      	ldr	r2, [pc, #60]	; (8003b40 <HAL_MspInit+0x5c>)
 8003b04:	4b0e      	ldr	r3, [pc, #56]	; (8003b40 <HAL_MspInit+0x5c>)
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b0c:	61d3      	str	r3, [r2, #28]
 8003b0e:	4b0c      	ldr	r3, [pc, #48]	; (8003b40 <HAL_MspInit+0x5c>)
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b16:	607b      	str	r3, [r7, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003b1a:	4b0a      	ldr	r3, [pc, #40]	; (8003b44 <HAL_MspInit+0x60>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	4a04      	ldr	r2, [pc, #16]	; (8003b44 <HAL_MspInit+0x60>)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b36:	bf00      	nop
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40010000 	.word	0x40010000

08003b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b4c:	bf00      	nop
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr

08003b54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b58:	e7fe      	b.n	8003b58 <HardFault_Handler+0x4>

08003b5a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b5e:	e7fe      	b.n	8003b5e <MemManage_Handler+0x4>

08003b60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b64:	e7fe      	b.n	8003b64 <BusFault_Handler+0x4>

08003b66 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b66:	b480      	push	{r7}
 8003b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b6a:	e7fe      	b.n	8003b6a <UsageFault_Handler+0x4>

08003b6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b70:	bf00      	nop
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr

08003b78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b7c:	bf00      	nop
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr

08003b84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b88:	bf00      	nop
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr

08003b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b94:	f7fc fb8c 	bl	80002b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b98:	bf00      	nop
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b9c:	b590      	push	{r4, r7, lr}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ba8:	2300      	movs	r3, #0
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	e00a      	b.n	8003bc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003bae:	68bc      	ldr	r4, [r7, #8]
 8003bb0:	1c63      	adds	r3, r4, #1
 8003bb2:	60bb      	str	r3, [r7, #8]
 8003bb4:	f3af 8000 	nop.w
 8003bb8:	4603      	mov	r3, r0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	dbf0      	blt.n	8003bae <_read+0x12>
	}

return len;
 8003bcc:	687b      	ldr	r3, [r7, #4]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	371c      	adds	r7, #28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd90      	pop	{r4, r7, pc}
	...

08003bd8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003be0:	4b11      	ldr	r3, [pc, #68]	; (8003c28 <_sbrk+0x50>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d102      	bne.n	8003bee <_sbrk+0x16>
		heap_end = &end;
 8003be8:	4b0f      	ldr	r3, [pc, #60]	; (8003c28 <_sbrk+0x50>)
 8003bea:	4a10      	ldr	r2, [pc, #64]	; (8003c2c <_sbrk+0x54>)
 8003bec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003bee:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <_sbrk+0x50>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003bf4:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <_sbrk+0x50>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	466a      	mov	r2, sp
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d907      	bls.n	8003c12 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003c02:	f000 fa03 	bl	800400c <__errno>
 8003c06:	4602      	mov	r2, r0
 8003c08:	230c      	movs	r3, #12
 8003c0a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c10:	e006      	b.n	8003c20 <_sbrk+0x48>
	}

	heap_end += incr;
 8003c12:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <_sbrk+0x50>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4413      	add	r3, r2
 8003c1a:	4a03      	ldr	r2, [pc, #12]	; (8003c28 <_sbrk+0x50>)
 8003c1c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	2000012c 	.word	0x2000012c
 8003c2c:	200009f4 	.word	0x200009f4

08003c30 <_close>:

int _close(int file)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
	return -1;
 8003c38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bc80      	pop	{r7}
 8003c44:	4770      	bx	lr

08003c46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c56:	605a      	str	r2, [r3, #4]
	return 0;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bc80      	pop	{r7}
 8003c62:	4770      	bx	lr

08003c64 <_isatty>:

int _isatty(int file)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
	return 1;
 8003c6c:	2301      	movs	r3, #1
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bc80      	pop	{r7}
 8003c76:	4770      	bx	lr

08003c78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
	return 0;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bc80      	pop	{r7}
 8003c8e:	4770      	bx	lr

08003c90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003c94:	4a15      	ldr	r2, [pc, #84]	; (8003cec <SystemInit+0x5c>)
 8003c96:	4b15      	ldr	r3, [pc, #84]	; (8003cec <SystemInit+0x5c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003ca0:	4912      	ldr	r1, [pc, #72]	; (8003cec <SystemInit+0x5c>)
 8003ca2:	4b12      	ldr	r3, [pc, #72]	; (8003cec <SystemInit+0x5c>)
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <SystemInit+0x60>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003cac:	4a0f      	ldr	r2, [pc, #60]	; (8003cec <SystemInit+0x5c>)
 8003cae:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <SystemInit+0x5c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003cbc:	4a0b      	ldr	r2, [pc, #44]	; (8003cec <SystemInit+0x5c>)
 8003cbe:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <SystemInit+0x5c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cc6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003cc8:	4a08      	ldr	r2, [pc, #32]	; (8003cec <SystemInit+0x5c>)
 8003cca:	4b08      	ldr	r3, [pc, #32]	; (8003cec <SystemInit+0x5c>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003cd2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003cd4:	4b05      	ldr	r3, [pc, #20]	; (8003cec <SystemInit+0x5c>)
 8003cd6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003cda:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003cdc:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <SystemInit+0x64>)
 8003cde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ce2:	609a      	str	r2, [r3, #8]
#endif 
}
 8003ce4:	bf00      	nop
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	f8ff0000 	.word	0xf8ff0000
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <LL_USART_Enable>:
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	60da      	str	r2, [r3, #12]
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bc80      	pop	{r7}
 8003d14:	4770      	bx	lr

08003d16 <LL_USART_ConfigAsyncMode>:
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	615a      	str	r2, [r3, #20]
}
 8003d36:	bf00      	nop
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr

08003d40 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8003d48:	4908      	ldr	r1, [pc, #32]	; (8003d6c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003d4a:	4b08      	ldr	r3, [pc, #32]	; (8003d6c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003d4c:	69da      	ldr	r2, [r3, #28]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003d54:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003d56:	69da      	ldr	r2, [r3, #28]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
}
 8003d60:	bf00      	nop
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40021000 	.word	0x40021000

08003d70 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003d78:	4908      	ldr	r1, [pc, #32]	; (8003d9c <LL_APB2_GRP1_EnableClock+0x2c>)
 8003d7a:	4b08      	ldr	r3, [pc, #32]	; (8003d9c <LL_APB2_GRP1_EnableClock+0x2c>)
 8003d7c:	699a      	ldr	r2, [r3, #24]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003d84:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <LL_APB2_GRP1_EnableClock+0x2c>)
 8003d86:	699a      	ldr	r2, [r3, #24]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
}
 8003d90:	bf00      	nop
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bc80      	pop	{r7}
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	40021000 	.word	0x40021000

08003da0 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b08c      	sub	sp, #48	; 0x30
 8003da4:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003da6:	f107 0318 	add.w	r3, r7, #24
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	605a      	str	r2, [r3, #4]
 8003db0:	609a      	str	r2, [r3, #8]
 8003db2:	60da      	str	r2, [r3, #12]
 8003db4:	611a      	str	r2, [r3, #16]
 8003db6:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db8:	1d3b      	adds	r3, r7, #4
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	605a      	str	r2, [r3, #4]
 8003dc0:	609a      	str	r2, [r3, #8]
 8003dc2:	60da      	str	r2, [r3, #12]
 8003dc4:	611a      	str	r2, [r3, #16]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8003dc6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003dca:	f7ff ffb9 	bl	8003d40 <LL_APB1_GRP1_EnableClock>
  
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8003dce:	2004      	movs	r0, #4
 8003dd0:	f7ff ffce 	bl	8003d70 <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8003dd4:	f240 4304 	movw	r3, #1028	; 0x404
 8003dd8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003dda:	2309      	movs	r3, #9
 8003ddc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003dde:	2303      	movs	r3, #3
 8003de0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003de2:	2300      	movs	r3, #0
 8003de4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003de6:	1d3b      	adds	r3, r7, #4
 8003de8:	4619      	mov	r1, r3
 8003dea:	4815      	ldr	r0, [pc, #84]	; (8003e40 <MX_USART2_UART_Init+0xa0>)
 8003dec:	f7fd fd8b 	bl	8001906 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8003df0:	f640 0308 	movw	r3, #2056	; 0x808
 8003df4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8003df6:	2304      	movs	r3, #4
 8003df8:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dfa:	1d3b      	adds	r3, r7, #4
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4810      	ldr	r0, [pc, #64]	; (8003e40 <MX_USART2_UART_Init+0xa0>)
 8003e00:	f7fd fd81 	bl	8001906 <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 8003e04:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003e08:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	623b      	str	r3, [r7, #32]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003e12:	2300      	movs	r3, #0
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003e16:	230c      	movs	r3, #12
 8003e18:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 8003e1e:	f107 0318 	add.w	r3, r7, #24
 8003e22:	4619      	mov	r1, r3
 8003e24:	4807      	ldr	r0, [pc, #28]	; (8003e44 <MX_USART2_UART_Init+0xa4>)
 8003e26:	f7fd ff71 	bl	8001d0c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8003e2a:	4806      	ldr	r0, [pc, #24]	; (8003e44 <MX_USART2_UART_Init+0xa4>)
 8003e2c:	f7ff ff73 	bl	8003d16 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8003e30:	4804      	ldr	r0, [pc, #16]	; (8003e44 <MX_USART2_UART_Init+0xa4>)
 8003e32:	f7ff ff61 	bl	8003cf8 <LL_USART_Enable>

}
 8003e36:	bf00      	nop
 8003e38:	3730      	adds	r7, #48	; 0x30
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40010800 	.word	0x40010800
 8003e44:	40004400 	.word	0x40004400

08003e48 <W5500_dataRead>:

static uint32_t randomKey;


uint8_t W5500_dataRead() // SPI ������ ����
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af02      	add	r7, sp, #8
	uint8_t Dummy = 0xFF;
 8003e4e:	23ff      	movs	r3, #255	; 0xff
 8003e50:	71fb      	strb	r3, [r7, #7]
	uint8_t RxData;
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8003e52:	bf00      	nop
 8003e54:	4809      	ldr	r0, [pc, #36]	; (8003e7c <W5500_dataRead+0x34>)
 8003e56:	f7fd fbad 	bl	80015b4 <HAL_SPI_GetState>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d1f9      	bne.n	8003e54 <W5500_dataRead+0xc>
	HAL_SPI_TransmitReceive(&hspi1,&Dummy,&RxData,1,10); // SPI�� ���Ž� ���̵����͸� ������� Ŭ���� �����ǰ� �����̺갡 ���� �ش�.
 8003e60:	1dba      	adds	r2, r7, #6
 8003e62:	1df9      	adds	r1, r7, #7
 8003e64:	230a      	movs	r3, #10
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	2301      	movs	r3, #1
 8003e6a:	4804      	ldr	r0, [pc, #16]	; (8003e7c <W5500_dataRead+0x34>)
 8003e6c:	f7fd fa03 	bl	8001276 <HAL_SPI_TransmitReceive>
	return RxData;
 8003e70:	79bb      	ldrb	r3, [r7, #6]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20000998 	.word	0x20000998

08003e80 <W5500_dataSend>:
void W5500_dataSend(uint8_t Txdata) // SPI ������ �۽�
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	71fb      	strb	r3, [r7, #7]
	 while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8003e8a:	bf00      	nop
 8003e8c:	4807      	ldr	r0, [pc, #28]	; (8003eac <W5500_dataSend+0x2c>)
 8003e8e:	f7fd fb91 	bl	80015b4 <HAL_SPI_GetState>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d1f9      	bne.n	8003e8c <W5500_dataSend+0xc>
	 HAL_SPI_Transmit(&hspi1, (uint8_t *) &Txdata, 1, 10);
 8003e98:	1df9      	adds	r1, r7, #7
 8003e9a:	230a      	movs	r3, #10
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	4803      	ldr	r0, [pc, #12]	; (8003eac <W5500_dataSend+0x2c>)
 8003ea0:	f7fd f8ae 	bl	8001000 <HAL_SPI_Transmit>
}
 8003ea4:	bf00      	nop
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	20000998 	.word	0x20000998

08003eb0 <W5500_CS_select>:

void W5500_CS_select()
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
	//GPIOA->BRR = GPIO_PIN_3; // CS���� Low
  GPIOA->BRR = GPIO_PIN_4;
 8003eb4:	4b03      	ldr	r3, [pc, #12]	; (8003ec4 <W5500_CS_select+0x14>)
 8003eb6:	2210      	movs	r2, #16
 8003eb8:	615a      	str	r2, [r3, #20]
}
 8003eba:	bf00      	nop
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bc80      	pop	{r7}
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	40010800 	.word	0x40010800

08003ec8 <W5500_CS_deselect>:

void W5500_CS_deselect()
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
	//GPIOA->BSRR = GPIO_PIN_3; // CS���� High
  GPIOA->BSRR = GPIO_PIN_4;
 8003ecc:	4b03      	ldr	r3, [pc, #12]	; (8003edc <W5500_CS_deselect+0x14>)
 8003ece:	2210      	movs	r2, #16
 8003ed0:	611a      	str	r2, [r3, #16]
}
 8003ed2:	bf00      	nop
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bc80      	pop	{r7}
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	40010800 	.word	0x40010800

08003ee0 <isLinked>:

int isLinked(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
	return (getPHYCFGR() & PHYCFGR_LNK_ON);
 8003ee4:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003ee8:	f7fd ff82 	bl	8001df0 <WIZCHIP_READ>
 8003eec:	4603      	mov	r3, r0
 8003eee:	f003 0301 	and.w	r3, r3, #1
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <W5500_hw_Rst>:

void W5500_hw_Rst(void) // �ϵ���� ����
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
  uint32_t tempTick;
  //GPIOA->BRR = GPIO_PIN_4; // RST ���� Low�� ����
  GPIOC->BRR = GPIO_PIN_4;
 8003efe:	4b0a      	ldr	r3, [pc, #40]	; (8003f28 <W5500_hw_Rst+0x30>)
 8003f00:	2210      	movs	r2, #16
 8003f02:	615a      	str	r2, [r3, #20]

  tempTick = HAL_GetTick();
 8003f04:	f7fc f9e6 	bl	80002d4 <HAL_GetTick>
 8003f08:	6078      	str	r0, [r7, #4]
  while((HAL_GetTick() - tempTick) < 1 ); // 1ms �� ������
 8003f0a:	bf00      	nop
 8003f0c:	f7fc f9e2 	bl	80002d4 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d0f9      	beq.n	8003f0c <W5500_hw_Rst+0x14>

  //GPIOA->BSRR = GPIO_PIN_4; // RST ���� High ��.
  GPIOC->BSRR = GPIO_PIN_4;
 8003f18:	4b03      	ldr	r3, [pc, #12]	; (8003f28 <W5500_hw_Rst+0x30>)
 8003f1a:	2210      	movs	r2, #16
 8003f1c:	611a      	str	r2, [r3, #16]
}
 8003f1e:	bf00      	nop
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	40011000 	.word	0x40011000

08003f2c <W5500_init>:
{
	wizchip_getnetinfo(&gWIZNETINFO); // W5500 ���� ���� ��������
}

uint8_t W5500_init() // �ʱ�ȭ �Լ�
{
 8003f2c:	b590      	push	{r4, r7, lr}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
	uint8_t W5500SockBufSize[2][8] = {{2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 8003f32:	4b1c      	ldr	r3, [pc, #112]	; (8003fa4 <W5500_init+0x78>)
 8003f34:	1d3c      	adds	r4, r7, #4
 8003f36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t tickStart;

	reg_wizchip_spi_cbfunc(W5500_dataRead, W5500_dataSend); // SPI ��� ����, �۽� ��ɵ�� (�ݹ��Լ�)
 8003f3c:	491a      	ldr	r1, [pc, #104]	; (8003fa8 <W5500_init+0x7c>)
 8003f3e:	481b      	ldr	r0, [pc, #108]	; (8003fac <W5500_init+0x80>)
 8003f40:	f7fe fe68 	bl	8002c14 <reg_wizchip_spi_cbfunc>
	reg_wizchip_cs_cbfunc(W5500_CS_select, W5500_CS_deselect); // CS �� ���� ��ɵ�� (�ݹ��Լ�)
 8003f44:	491a      	ldr	r1, [pc, #104]	; (8003fb0 <W5500_init+0x84>)
 8003f46:	481b      	ldr	r0, [pc, #108]	; (8003fb4 <W5500_init+0x88>)
 8003f48:	f7fe fe40 	bl	8002bcc <reg_wizchip_cs_cbfunc>

	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)W5500SockBufSize) == -1)
 8003f4c:	1d3b      	adds	r3, r7, #4
 8003f4e:	4619      	mov	r1, r3
 8003f50:	2001      	movs	r0, #1
 8003f52:	f7fe fe89 	bl	8002c68 <ctlwizchip>
 8003f56:	4603      	mov	r3, r0
 8003f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5c:	d101      	bne.n	8003f62 <W5500_init+0x36>
		{
			//printf("W5500 initialized fail.\r\n");
			return -1; // �ʱ�ȭ ����
 8003f5e:	23ff      	movs	r3, #255	; 0xff
 8003f60:	e01b      	b.n	8003f9a <W5500_init+0x6e>
		}
		/*Set network information by default*/
		wizchip_setnetinfo(&gWIZNETINFO);
 8003f62:	4815      	ldr	r0, [pc, #84]	; (8003fb8 <W5500_init+0x8c>)
 8003f64:	f7ff f9e6 	bl	8003334 <wizchip_setnetinfo>
		tickStart = HAL_GetTick();
 8003f68:	f7fc f9b4 	bl	80002d4 <HAL_GetTick>
 8003f6c:	6178      	str	r0, [r7, #20]
		do{ // PHY ����üũ
			randomKey++;
 8003f6e:	4b13      	ldr	r3, [pc, #76]	; (8003fbc <W5500_init+0x90>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3301      	adds	r3, #1
 8003f74:	4a11      	ldr	r2, [pc, #68]	; (8003fbc <W5500_init+0x90>)
 8003f76:	6013      	str	r3, [r2, #0]
			if((HAL_GetTick() - tickStart) > 3000 )
 8003f78:	f7fc f9ac 	bl	80002d4 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d901      	bls.n	8003f8e <W5500_init+0x62>
			{
				//printf("Ethernet Link timeout.\r\n");
				return -1; // �̴��� Ÿ�Ӿƿ� ����
 8003f8a:	23ff      	movs	r3, #255	; 0xff
 8003f8c:	e005      	b.n	8003f9a <W5500_init+0x6e>
			}
		}while(!isLinked());
 8003f8e:	f7ff ffa7 	bl	8003ee0 <isLinked>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d0ea      	beq.n	8003f6e <W5500_init+0x42>
		return 1;
 8003f98:	2301      	movs	r3, #1
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	371c      	adds	r7, #28
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd90      	pop	{r4, r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	08004f38 	.word	0x08004f38
 8003fa8:	08003e81 	.word	0x08003e81
 8003fac:	08003e49 	.word	0x08003e49
 8003fb0:	08003ec9 	.word	0x08003ec9
 8003fb4:	08003eb1 	.word	0x08003eb1
 8003fb8:	2000005c 	.word	0x2000005c
 8003fbc:	20000130 	.word	0x20000130

08003fc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003fc0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003fc2:	e003      	b.n	8003fcc <LoopCopyDataInit>

08003fc4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003fc4:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003fc6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003fc8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003fca:	3104      	adds	r1, #4

08003fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003fcc:	480a      	ldr	r0, [pc, #40]	; (8003ff8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003fce:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003fd0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003fd2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003fd4:	d3f6      	bcc.n	8003fc4 <CopyDataInit>
  ldr r2, =_sbss
 8003fd6:	4a0a      	ldr	r2, [pc, #40]	; (8004000 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003fd8:	e002      	b.n	8003fe0 <LoopFillZerobss>

08003fda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003fda:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003fdc:	f842 3b04 	str.w	r3, [r2], #4

08003fe0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003fe0:	4b08      	ldr	r3, [pc, #32]	; (8004004 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003fe2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003fe4:	d3f9      	bcc.n	8003fda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003fe6:	f7ff fe53 	bl	8003c90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fea:	f000 f815 	bl	8004018 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003fee:	f7ff fac7 	bl	8003580 <main>
  bx lr
 8003ff2:	4770      	bx	lr
  ldr r3, =_sidata
 8003ff4:	08005000 	.word	0x08005000
  ldr r0, =_sdata
 8003ff8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003ffc:	200000e4 	.word	0x200000e4
  ldr r2, =_sbss
 8004000:	200000e4 	.word	0x200000e4
  ldr r3, = _ebss
 8004004:	200009f4 	.word	0x200009f4

08004008 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004008:	e7fe      	b.n	8004008 <ADC1_2_IRQHandler>
	...

0800400c <__errno>:
 800400c:	4b01      	ldr	r3, [pc, #4]	; (8004014 <__errno+0x8>)
 800400e:	6818      	ldr	r0, [r3, #0]
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	20000080 	.word	0x20000080

08004018 <__libc_init_array>:
 8004018:	b570      	push	{r4, r5, r6, lr}
 800401a:	2500      	movs	r5, #0
 800401c:	4e0c      	ldr	r6, [pc, #48]	; (8004050 <__libc_init_array+0x38>)
 800401e:	4c0d      	ldr	r4, [pc, #52]	; (8004054 <__libc_init_array+0x3c>)
 8004020:	1ba4      	subs	r4, r4, r6
 8004022:	10a4      	asrs	r4, r4, #2
 8004024:	42a5      	cmp	r5, r4
 8004026:	d109      	bne.n	800403c <__libc_init_array+0x24>
 8004028:	f000 ff26 	bl	8004e78 <_init>
 800402c:	2500      	movs	r5, #0
 800402e:	4e0a      	ldr	r6, [pc, #40]	; (8004058 <__libc_init_array+0x40>)
 8004030:	4c0a      	ldr	r4, [pc, #40]	; (800405c <__libc_init_array+0x44>)
 8004032:	1ba4      	subs	r4, r4, r6
 8004034:	10a4      	asrs	r4, r4, #2
 8004036:	42a5      	cmp	r5, r4
 8004038:	d105      	bne.n	8004046 <__libc_init_array+0x2e>
 800403a:	bd70      	pop	{r4, r5, r6, pc}
 800403c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004040:	4798      	blx	r3
 8004042:	3501      	adds	r5, #1
 8004044:	e7ee      	b.n	8004024 <__libc_init_array+0xc>
 8004046:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800404a:	4798      	blx	r3
 800404c:	3501      	adds	r5, #1
 800404e:	e7f2      	b.n	8004036 <__libc_init_array+0x1e>
 8004050:	08004ff8 	.word	0x08004ff8
 8004054:	08004ff8 	.word	0x08004ff8
 8004058:	08004ff8 	.word	0x08004ff8
 800405c:	08004ffc 	.word	0x08004ffc

08004060 <memset>:
 8004060:	4603      	mov	r3, r0
 8004062:	4402      	add	r2, r0
 8004064:	4293      	cmp	r3, r2
 8004066:	d100      	bne.n	800406a <memset+0xa>
 8004068:	4770      	bx	lr
 800406a:	f803 1b01 	strb.w	r1, [r3], #1
 800406e:	e7f9      	b.n	8004064 <memset+0x4>

08004070 <_free_r>:
 8004070:	b538      	push	{r3, r4, r5, lr}
 8004072:	4605      	mov	r5, r0
 8004074:	2900      	cmp	r1, #0
 8004076:	d043      	beq.n	8004100 <_free_r+0x90>
 8004078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800407c:	1f0c      	subs	r4, r1, #4
 800407e:	2b00      	cmp	r3, #0
 8004080:	bfb8      	it	lt
 8004082:	18e4      	addlt	r4, r4, r3
 8004084:	f000 fbde 	bl	8004844 <__malloc_lock>
 8004088:	4a1e      	ldr	r2, [pc, #120]	; (8004104 <_free_r+0x94>)
 800408a:	6813      	ldr	r3, [r2, #0]
 800408c:	4610      	mov	r0, r2
 800408e:	b933      	cbnz	r3, 800409e <_free_r+0x2e>
 8004090:	6063      	str	r3, [r4, #4]
 8004092:	6014      	str	r4, [r2, #0]
 8004094:	4628      	mov	r0, r5
 8004096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800409a:	f000 bbd4 	b.w	8004846 <__malloc_unlock>
 800409e:	42a3      	cmp	r3, r4
 80040a0:	d90b      	bls.n	80040ba <_free_r+0x4a>
 80040a2:	6821      	ldr	r1, [r4, #0]
 80040a4:	1862      	adds	r2, r4, r1
 80040a6:	4293      	cmp	r3, r2
 80040a8:	bf01      	itttt	eq
 80040aa:	681a      	ldreq	r2, [r3, #0]
 80040ac:	685b      	ldreq	r3, [r3, #4]
 80040ae:	1852      	addeq	r2, r2, r1
 80040b0:	6022      	streq	r2, [r4, #0]
 80040b2:	6063      	str	r3, [r4, #4]
 80040b4:	6004      	str	r4, [r0, #0]
 80040b6:	e7ed      	b.n	8004094 <_free_r+0x24>
 80040b8:	4613      	mov	r3, r2
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	b10a      	cbz	r2, 80040c2 <_free_r+0x52>
 80040be:	42a2      	cmp	r2, r4
 80040c0:	d9fa      	bls.n	80040b8 <_free_r+0x48>
 80040c2:	6819      	ldr	r1, [r3, #0]
 80040c4:	1858      	adds	r0, r3, r1
 80040c6:	42a0      	cmp	r0, r4
 80040c8:	d10b      	bne.n	80040e2 <_free_r+0x72>
 80040ca:	6820      	ldr	r0, [r4, #0]
 80040cc:	4401      	add	r1, r0
 80040ce:	1858      	adds	r0, r3, r1
 80040d0:	4282      	cmp	r2, r0
 80040d2:	6019      	str	r1, [r3, #0]
 80040d4:	d1de      	bne.n	8004094 <_free_r+0x24>
 80040d6:	6810      	ldr	r0, [r2, #0]
 80040d8:	6852      	ldr	r2, [r2, #4]
 80040da:	4401      	add	r1, r0
 80040dc:	6019      	str	r1, [r3, #0]
 80040de:	605a      	str	r2, [r3, #4]
 80040e0:	e7d8      	b.n	8004094 <_free_r+0x24>
 80040e2:	d902      	bls.n	80040ea <_free_r+0x7a>
 80040e4:	230c      	movs	r3, #12
 80040e6:	602b      	str	r3, [r5, #0]
 80040e8:	e7d4      	b.n	8004094 <_free_r+0x24>
 80040ea:	6820      	ldr	r0, [r4, #0]
 80040ec:	1821      	adds	r1, r4, r0
 80040ee:	428a      	cmp	r2, r1
 80040f0:	bf01      	itttt	eq
 80040f2:	6811      	ldreq	r1, [r2, #0]
 80040f4:	6852      	ldreq	r2, [r2, #4]
 80040f6:	1809      	addeq	r1, r1, r0
 80040f8:	6021      	streq	r1, [r4, #0]
 80040fa:	6062      	str	r2, [r4, #4]
 80040fc:	605c      	str	r4, [r3, #4]
 80040fe:	e7c9      	b.n	8004094 <_free_r+0x24>
 8004100:	bd38      	pop	{r3, r4, r5, pc}
 8004102:	bf00      	nop
 8004104:	20000134 	.word	0x20000134

08004108 <_malloc_r>:
 8004108:	b570      	push	{r4, r5, r6, lr}
 800410a:	1ccd      	adds	r5, r1, #3
 800410c:	f025 0503 	bic.w	r5, r5, #3
 8004110:	3508      	adds	r5, #8
 8004112:	2d0c      	cmp	r5, #12
 8004114:	bf38      	it	cc
 8004116:	250c      	movcc	r5, #12
 8004118:	2d00      	cmp	r5, #0
 800411a:	4606      	mov	r6, r0
 800411c:	db01      	blt.n	8004122 <_malloc_r+0x1a>
 800411e:	42a9      	cmp	r1, r5
 8004120:	d903      	bls.n	800412a <_malloc_r+0x22>
 8004122:	230c      	movs	r3, #12
 8004124:	6033      	str	r3, [r6, #0]
 8004126:	2000      	movs	r0, #0
 8004128:	bd70      	pop	{r4, r5, r6, pc}
 800412a:	f000 fb8b 	bl	8004844 <__malloc_lock>
 800412e:	4a23      	ldr	r2, [pc, #140]	; (80041bc <_malloc_r+0xb4>)
 8004130:	6814      	ldr	r4, [r2, #0]
 8004132:	4621      	mov	r1, r4
 8004134:	b991      	cbnz	r1, 800415c <_malloc_r+0x54>
 8004136:	4c22      	ldr	r4, [pc, #136]	; (80041c0 <_malloc_r+0xb8>)
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	b91b      	cbnz	r3, 8004144 <_malloc_r+0x3c>
 800413c:	4630      	mov	r0, r6
 800413e:	f000 f859 	bl	80041f4 <_sbrk_r>
 8004142:	6020      	str	r0, [r4, #0]
 8004144:	4629      	mov	r1, r5
 8004146:	4630      	mov	r0, r6
 8004148:	f000 f854 	bl	80041f4 <_sbrk_r>
 800414c:	1c43      	adds	r3, r0, #1
 800414e:	d126      	bne.n	800419e <_malloc_r+0x96>
 8004150:	230c      	movs	r3, #12
 8004152:	4630      	mov	r0, r6
 8004154:	6033      	str	r3, [r6, #0]
 8004156:	f000 fb76 	bl	8004846 <__malloc_unlock>
 800415a:	e7e4      	b.n	8004126 <_malloc_r+0x1e>
 800415c:	680b      	ldr	r3, [r1, #0]
 800415e:	1b5b      	subs	r3, r3, r5
 8004160:	d41a      	bmi.n	8004198 <_malloc_r+0x90>
 8004162:	2b0b      	cmp	r3, #11
 8004164:	d90f      	bls.n	8004186 <_malloc_r+0x7e>
 8004166:	600b      	str	r3, [r1, #0]
 8004168:	18cc      	adds	r4, r1, r3
 800416a:	50cd      	str	r5, [r1, r3]
 800416c:	4630      	mov	r0, r6
 800416e:	f000 fb6a 	bl	8004846 <__malloc_unlock>
 8004172:	f104 000b 	add.w	r0, r4, #11
 8004176:	1d23      	adds	r3, r4, #4
 8004178:	f020 0007 	bic.w	r0, r0, #7
 800417c:	1ac3      	subs	r3, r0, r3
 800417e:	d01b      	beq.n	80041b8 <_malloc_r+0xb0>
 8004180:	425a      	negs	r2, r3
 8004182:	50e2      	str	r2, [r4, r3]
 8004184:	bd70      	pop	{r4, r5, r6, pc}
 8004186:	428c      	cmp	r4, r1
 8004188:	bf0b      	itete	eq
 800418a:	6863      	ldreq	r3, [r4, #4]
 800418c:	684b      	ldrne	r3, [r1, #4]
 800418e:	6013      	streq	r3, [r2, #0]
 8004190:	6063      	strne	r3, [r4, #4]
 8004192:	bf18      	it	ne
 8004194:	460c      	movne	r4, r1
 8004196:	e7e9      	b.n	800416c <_malloc_r+0x64>
 8004198:	460c      	mov	r4, r1
 800419a:	6849      	ldr	r1, [r1, #4]
 800419c:	e7ca      	b.n	8004134 <_malloc_r+0x2c>
 800419e:	1cc4      	adds	r4, r0, #3
 80041a0:	f024 0403 	bic.w	r4, r4, #3
 80041a4:	42a0      	cmp	r0, r4
 80041a6:	d005      	beq.n	80041b4 <_malloc_r+0xac>
 80041a8:	1a21      	subs	r1, r4, r0
 80041aa:	4630      	mov	r0, r6
 80041ac:	f000 f822 	bl	80041f4 <_sbrk_r>
 80041b0:	3001      	adds	r0, #1
 80041b2:	d0cd      	beq.n	8004150 <_malloc_r+0x48>
 80041b4:	6025      	str	r5, [r4, #0]
 80041b6:	e7d9      	b.n	800416c <_malloc_r+0x64>
 80041b8:	bd70      	pop	{r4, r5, r6, pc}
 80041ba:	bf00      	nop
 80041bc:	20000134 	.word	0x20000134
 80041c0:	20000138 	.word	0x20000138

080041c4 <iprintf>:
 80041c4:	b40f      	push	{r0, r1, r2, r3}
 80041c6:	4b0a      	ldr	r3, [pc, #40]	; (80041f0 <iprintf+0x2c>)
 80041c8:	b513      	push	{r0, r1, r4, lr}
 80041ca:	681c      	ldr	r4, [r3, #0]
 80041cc:	b124      	cbz	r4, 80041d8 <iprintf+0x14>
 80041ce:	69a3      	ldr	r3, [r4, #24]
 80041d0:	b913      	cbnz	r3, 80041d8 <iprintf+0x14>
 80041d2:	4620      	mov	r0, r4
 80041d4:	f000 fa36 	bl	8004644 <__sinit>
 80041d8:	ab05      	add	r3, sp, #20
 80041da:	9a04      	ldr	r2, [sp, #16]
 80041dc:	68a1      	ldr	r1, [r4, #8]
 80041de:	4620      	mov	r0, r4
 80041e0:	9301      	str	r3, [sp, #4]
 80041e2:	f000 fb59 	bl	8004898 <_vfiprintf_r>
 80041e6:	b002      	add	sp, #8
 80041e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041ec:	b004      	add	sp, #16
 80041ee:	4770      	bx	lr
 80041f0:	20000080 	.word	0x20000080

080041f4 <_sbrk_r>:
 80041f4:	b538      	push	{r3, r4, r5, lr}
 80041f6:	2300      	movs	r3, #0
 80041f8:	4c05      	ldr	r4, [pc, #20]	; (8004210 <_sbrk_r+0x1c>)
 80041fa:	4605      	mov	r5, r0
 80041fc:	4608      	mov	r0, r1
 80041fe:	6023      	str	r3, [r4, #0]
 8004200:	f7ff fcea 	bl	8003bd8 <_sbrk>
 8004204:	1c43      	adds	r3, r0, #1
 8004206:	d102      	bne.n	800420e <_sbrk_r+0x1a>
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	b103      	cbz	r3, 800420e <_sbrk_r+0x1a>
 800420c:	602b      	str	r3, [r5, #0]
 800420e:	bd38      	pop	{r3, r4, r5, pc}
 8004210:	200009f0 	.word	0x200009f0

08004214 <__sread>:
 8004214:	b510      	push	{r4, lr}
 8004216:	460c      	mov	r4, r1
 8004218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800421c:	f000 fdea 	bl	8004df4 <_read_r>
 8004220:	2800      	cmp	r0, #0
 8004222:	bfab      	itete	ge
 8004224:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004226:	89a3      	ldrhlt	r3, [r4, #12]
 8004228:	181b      	addge	r3, r3, r0
 800422a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800422e:	bfac      	ite	ge
 8004230:	6563      	strge	r3, [r4, #84]	; 0x54
 8004232:	81a3      	strhlt	r3, [r4, #12]
 8004234:	bd10      	pop	{r4, pc}

08004236 <__swrite>:
 8004236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800423a:	461f      	mov	r7, r3
 800423c:	898b      	ldrh	r3, [r1, #12]
 800423e:	4605      	mov	r5, r0
 8004240:	05db      	lsls	r3, r3, #23
 8004242:	460c      	mov	r4, r1
 8004244:	4616      	mov	r6, r2
 8004246:	d505      	bpl.n	8004254 <__swrite+0x1e>
 8004248:	2302      	movs	r3, #2
 800424a:	2200      	movs	r2, #0
 800424c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004250:	f000 fa82 	bl	8004758 <_lseek_r>
 8004254:	89a3      	ldrh	r3, [r4, #12]
 8004256:	4632      	mov	r2, r6
 8004258:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800425c:	81a3      	strh	r3, [r4, #12]
 800425e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004262:	463b      	mov	r3, r7
 8004264:	4628      	mov	r0, r5
 8004266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800426a:	f000 b869 	b.w	8004340 <_write_r>

0800426e <__sseek>:
 800426e:	b510      	push	{r4, lr}
 8004270:	460c      	mov	r4, r1
 8004272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004276:	f000 fa6f 	bl	8004758 <_lseek_r>
 800427a:	1c43      	adds	r3, r0, #1
 800427c:	89a3      	ldrh	r3, [r4, #12]
 800427e:	bf15      	itete	ne
 8004280:	6560      	strne	r0, [r4, #84]	; 0x54
 8004282:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004286:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800428a:	81a3      	strheq	r3, [r4, #12]
 800428c:	bf18      	it	ne
 800428e:	81a3      	strhne	r3, [r4, #12]
 8004290:	bd10      	pop	{r4, pc}

08004292 <__sclose>:
 8004292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004296:	f000 b8d3 	b.w	8004440 <_close_r>
	...

0800429c <__swbuf_r>:
 800429c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429e:	460e      	mov	r6, r1
 80042a0:	4614      	mov	r4, r2
 80042a2:	4605      	mov	r5, r0
 80042a4:	b118      	cbz	r0, 80042ae <__swbuf_r+0x12>
 80042a6:	6983      	ldr	r3, [r0, #24]
 80042a8:	b90b      	cbnz	r3, 80042ae <__swbuf_r+0x12>
 80042aa:	f000 f9cb 	bl	8004644 <__sinit>
 80042ae:	4b21      	ldr	r3, [pc, #132]	; (8004334 <__swbuf_r+0x98>)
 80042b0:	429c      	cmp	r4, r3
 80042b2:	d12a      	bne.n	800430a <__swbuf_r+0x6e>
 80042b4:	686c      	ldr	r4, [r5, #4]
 80042b6:	69a3      	ldr	r3, [r4, #24]
 80042b8:	60a3      	str	r3, [r4, #8]
 80042ba:	89a3      	ldrh	r3, [r4, #12]
 80042bc:	071a      	lsls	r2, r3, #28
 80042be:	d52e      	bpl.n	800431e <__swbuf_r+0x82>
 80042c0:	6923      	ldr	r3, [r4, #16]
 80042c2:	b363      	cbz	r3, 800431e <__swbuf_r+0x82>
 80042c4:	6923      	ldr	r3, [r4, #16]
 80042c6:	6820      	ldr	r0, [r4, #0]
 80042c8:	b2f6      	uxtb	r6, r6
 80042ca:	1ac0      	subs	r0, r0, r3
 80042cc:	6963      	ldr	r3, [r4, #20]
 80042ce:	4637      	mov	r7, r6
 80042d0:	4298      	cmp	r0, r3
 80042d2:	db04      	blt.n	80042de <__swbuf_r+0x42>
 80042d4:	4621      	mov	r1, r4
 80042d6:	4628      	mov	r0, r5
 80042d8:	f000 f94a 	bl	8004570 <_fflush_r>
 80042dc:	bb28      	cbnz	r0, 800432a <__swbuf_r+0x8e>
 80042de:	68a3      	ldr	r3, [r4, #8]
 80042e0:	3001      	adds	r0, #1
 80042e2:	3b01      	subs	r3, #1
 80042e4:	60a3      	str	r3, [r4, #8]
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	6022      	str	r2, [r4, #0]
 80042ec:	701e      	strb	r6, [r3, #0]
 80042ee:	6963      	ldr	r3, [r4, #20]
 80042f0:	4298      	cmp	r0, r3
 80042f2:	d004      	beq.n	80042fe <__swbuf_r+0x62>
 80042f4:	89a3      	ldrh	r3, [r4, #12]
 80042f6:	07db      	lsls	r3, r3, #31
 80042f8:	d519      	bpl.n	800432e <__swbuf_r+0x92>
 80042fa:	2e0a      	cmp	r6, #10
 80042fc:	d117      	bne.n	800432e <__swbuf_r+0x92>
 80042fe:	4621      	mov	r1, r4
 8004300:	4628      	mov	r0, r5
 8004302:	f000 f935 	bl	8004570 <_fflush_r>
 8004306:	b190      	cbz	r0, 800432e <__swbuf_r+0x92>
 8004308:	e00f      	b.n	800432a <__swbuf_r+0x8e>
 800430a:	4b0b      	ldr	r3, [pc, #44]	; (8004338 <__swbuf_r+0x9c>)
 800430c:	429c      	cmp	r4, r3
 800430e:	d101      	bne.n	8004314 <__swbuf_r+0x78>
 8004310:	68ac      	ldr	r4, [r5, #8]
 8004312:	e7d0      	b.n	80042b6 <__swbuf_r+0x1a>
 8004314:	4b09      	ldr	r3, [pc, #36]	; (800433c <__swbuf_r+0xa0>)
 8004316:	429c      	cmp	r4, r3
 8004318:	bf08      	it	eq
 800431a:	68ec      	ldreq	r4, [r5, #12]
 800431c:	e7cb      	b.n	80042b6 <__swbuf_r+0x1a>
 800431e:	4621      	mov	r1, r4
 8004320:	4628      	mov	r0, r5
 8004322:	f000 f81f 	bl	8004364 <__swsetup_r>
 8004326:	2800      	cmp	r0, #0
 8004328:	d0cc      	beq.n	80042c4 <__swbuf_r+0x28>
 800432a:	f04f 37ff 	mov.w	r7, #4294967295
 800432e:	4638      	mov	r0, r7
 8004330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004332:	bf00      	nop
 8004334:	08004f84 	.word	0x08004f84
 8004338:	08004fa4 	.word	0x08004fa4
 800433c:	08004f64 	.word	0x08004f64

08004340 <_write_r>:
 8004340:	b538      	push	{r3, r4, r5, lr}
 8004342:	4605      	mov	r5, r0
 8004344:	4608      	mov	r0, r1
 8004346:	4611      	mov	r1, r2
 8004348:	2200      	movs	r2, #0
 800434a:	4c05      	ldr	r4, [pc, #20]	; (8004360 <_write_r+0x20>)
 800434c:	6022      	str	r2, [r4, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	f7ff f8f0 	bl	8003534 <_write>
 8004354:	1c43      	adds	r3, r0, #1
 8004356:	d102      	bne.n	800435e <_write_r+0x1e>
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	b103      	cbz	r3, 800435e <_write_r+0x1e>
 800435c:	602b      	str	r3, [r5, #0]
 800435e:	bd38      	pop	{r3, r4, r5, pc}
 8004360:	200009f0 	.word	0x200009f0

08004364 <__swsetup_r>:
 8004364:	4b32      	ldr	r3, [pc, #200]	; (8004430 <__swsetup_r+0xcc>)
 8004366:	b570      	push	{r4, r5, r6, lr}
 8004368:	681d      	ldr	r5, [r3, #0]
 800436a:	4606      	mov	r6, r0
 800436c:	460c      	mov	r4, r1
 800436e:	b125      	cbz	r5, 800437a <__swsetup_r+0x16>
 8004370:	69ab      	ldr	r3, [r5, #24]
 8004372:	b913      	cbnz	r3, 800437a <__swsetup_r+0x16>
 8004374:	4628      	mov	r0, r5
 8004376:	f000 f965 	bl	8004644 <__sinit>
 800437a:	4b2e      	ldr	r3, [pc, #184]	; (8004434 <__swsetup_r+0xd0>)
 800437c:	429c      	cmp	r4, r3
 800437e:	d10f      	bne.n	80043a0 <__swsetup_r+0x3c>
 8004380:	686c      	ldr	r4, [r5, #4]
 8004382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004386:	b29a      	uxth	r2, r3
 8004388:	0715      	lsls	r5, r2, #28
 800438a:	d42c      	bmi.n	80043e6 <__swsetup_r+0x82>
 800438c:	06d0      	lsls	r0, r2, #27
 800438e:	d411      	bmi.n	80043b4 <__swsetup_r+0x50>
 8004390:	2209      	movs	r2, #9
 8004392:	6032      	str	r2, [r6, #0]
 8004394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004398:	81a3      	strh	r3, [r4, #12]
 800439a:	f04f 30ff 	mov.w	r0, #4294967295
 800439e:	bd70      	pop	{r4, r5, r6, pc}
 80043a0:	4b25      	ldr	r3, [pc, #148]	; (8004438 <__swsetup_r+0xd4>)
 80043a2:	429c      	cmp	r4, r3
 80043a4:	d101      	bne.n	80043aa <__swsetup_r+0x46>
 80043a6:	68ac      	ldr	r4, [r5, #8]
 80043a8:	e7eb      	b.n	8004382 <__swsetup_r+0x1e>
 80043aa:	4b24      	ldr	r3, [pc, #144]	; (800443c <__swsetup_r+0xd8>)
 80043ac:	429c      	cmp	r4, r3
 80043ae:	bf08      	it	eq
 80043b0:	68ec      	ldreq	r4, [r5, #12]
 80043b2:	e7e6      	b.n	8004382 <__swsetup_r+0x1e>
 80043b4:	0751      	lsls	r1, r2, #29
 80043b6:	d512      	bpl.n	80043de <__swsetup_r+0x7a>
 80043b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043ba:	b141      	cbz	r1, 80043ce <__swsetup_r+0x6a>
 80043bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043c0:	4299      	cmp	r1, r3
 80043c2:	d002      	beq.n	80043ca <__swsetup_r+0x66>
 80043c4:	4630      	mov	r0, r6
 80043c6:	f7ff fe53 	bl	8004070 <_free_r>
 80043ca:	2300      	movs	r3, #0
 80043cc:	6363      	str	r3, [r4, #52]	; 0x34
 80043ce:	89a3      	ldrh	r3, [r4, #12]
 80043d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80043d4:	81a3      	strh	r3, [r4, #12]
 80043d6:	2300      	movs	r3, #0
 80043d8:	6063      	str	r3, [r4, #4]
 80043da:	6923      	ldr	r3, [r4, #16]
 80043dc:	6023      	str	r3, [r4, #0]
 80043de:	89a3      	ldrh	r3, [r4, #12]
 80043e0:	f043 0308 	orr.w	r3, r3, #8
 80043e4:	81a3      	strh	r3, [r4, #12]
 80043e6:	6923      	ldr	r3, [r4, #16]
 80043e8:	b94b      	cbnz	r3, 80043fe <__swsetup_r+0x9a>
 80043ea:	89a3      	ldrh	r3, [r4, #12]
 80043ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80043f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f4:	d003      	beq.n	80043fe <__swsetup_r+0x9a>
 80043f6:	4621      	mov	r1, r4
 80043f8:	4630      	mov	r0, r6
 80043fa:	f000 f9e3 	bl	80047c4 <__smakebuf_r>
 80043fe:	89a2      	ldrh	r2, [r4, #12]
 8004400:	f012 0301 	ands.w	r3, r2, #1
 8004404:	d00c      	beq.n	8004420 <__swsetup_r+0xbc>
 8004406:	2300      	movs	r3, #0
 8004408:	60a3      	str	r3, [r4, #8]
 800440a:	6963      	ldr	r3, [r4, #20]
 800440c:	425b      	negs	r3, r3
 800440e:	61a3      	str	r3, [r4, #24]
 8004410:	6923      	ldr	r3, [r4, #16]
 8004412:	b953      	cbnz	r3, 800442a <__swsetup_r+0xc6>
 8004414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004418:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800441c:	d1ba      	bne.n	8004394 <__swsetup_r+0x30>
 800441e:	bd70      	pop	{r4, r5, r6, pc}
 8004420:	0792      	lsls	r2, r2, #30
 8004422:	bf58      	it	pl
 8004424:	6963      	ldrpl	r3, [r4, #20]
 8004426:	60a3      	str	r3, [r4, #8]
 8004428:	e7f2      	b.n	8004410 <__swsetup_r+0xac>
 800442a:	2000      	movs	r0, #0
 800442c:	e7f7      	b.n	800441e <__swsetup_r+0xba>
 800442e:	bf00      	nop
 8004430:	20000080 	.word	0x20000080
 8004434:	08004f84 	.word	0x08004f84
 8004438:	08004fa4 	.word	0x08004fa4
 800443c:	08004f64 	.word	0x08004f64

08004440 <_close_r>:
 8004440:	b538      	push	{r3, r4, r5, lr}
 8004442:	2300      	movs	r3, #0
 8004444:	4c05      	ldr	r4, [pc, #20]	; (800445c <_close_r+0x1c>)
 8004446:	4605      	mov	r5, r0
 8004448:	4608      	mov	r0, r1
 800444a:	6023      	str	r3, [r4, #0]
 800444c:	f7ff fbf0 	bl	8003c30 <_close>
 8004450:	1c43      	adds	r3, r0, #1
 8004452:	d102      	bne.n	800445a <_close_r+0x1a>
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	b103      	cbz	r3, 800445a <_close_r+0x1a>
 8004458:	602b      	str	r3, [r5, #0]
 800445a:	bd38      	pop	{r3, r4, r5, pc}
 800445c:	200009f0 	.word	0x200009f0

08004460 <__sflush_r>:
 8004460:	898a      	ldrh	r2, [r1, #12]
 8004462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004466:	4605      	mov	r5, r0
 8004468:	0710      	lsls	r0, r2, #28
 800446a:	460c      	mov	r4, r1
 800446c:	d45a      	bmi.n	8004524 <__sflush_r+0xc4>
 800446e:	684b      	ldr	r3, [r1, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	dc05      	bgt.n	8004480 <__sflush_r+0x20>
 8004474:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004476:	2b00      	cmp	r3, #0
 8004478:	dc02      	bgt.n	8004480 <__sflush_r+0x20>
 800447a:	2000      	movs	r0, #0
 800447c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004482:	2e00      	cmp	r6, #0
 8004484:	d0f9      	beq.n	800447a <__sflush_r+0x1a>
 8004486:	2300      	movs	r3, #0
 8004488:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800448c:	682f      	ldr	r7, [r5, #0]
 800448e:	602b      	str	r3, [r5, #0]
 8004490:	d033      	beq.n	80044fa <__sflush_r+0x9a>
 8004492:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004494:	89a3      	ldrh	r3, [r4, #12]
 8004496:	075a      	lsls	r2, r3, #29
 8004498:	d505      	bpl.n	80044a6 <__sflush_r+0x46>
 800449a:	6863      	ldr	r3, [r4, #4]
 800449c:	1ac0      	subs	r0, r0, r3
 800449e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044a0:	b10b      	cbz	r3, 80044a6 <__sflush_r+0x46>
 80044a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044a4:	1ac0      	subs	r0, r0, r3
 80044a6:	2300      	movs	r3, #0
 80044a8:	4602      	mov	r2, r0
 80044aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044ac:	6a21      	ldr	r1, [r4, #32]
 80044ae:	4628      	mov	r0, r5
 80044b0:	47b0      	blx	r6
 80044b2:	1c43      	adds	r3, r0, #1
 80044b4:	89a3      	ldrh	r3, [r4, #12]
 80044b6:	d106      	bne.n	80044c6 <__sflush_r+0x66>
 80044b8:	6829      	ldr	r1, [r5, #0]
 80044ba:	291d      	cmp	r1, #29
 80044bc:	d84b      	bhi.n	8004556 <__sflush_r+0xf6>
 80044be:	4a2b      	ldr	r2, [pc, #172]	; (800456c <__sflush_r+0x10c>)
 80044c0:	40ca      	lsrs	r2, r1
 80044c2:	07d6      	lsls	r6, r2, #31
 80044c4:	d547      	bpl.n	8004556 <__sflush_r+0xf6>
 80044c6:	2200      	movs	r2, #0
 80044c8:	6062      	str	r2, [r4, #4]
 80044ca:	6922      	ldr	r2, [r4, #16]
 80044cc:	04d9      	lsls	r1, r3, #19
 80044ce:	6022      	str	r2, [r4, #0]
 80044d0:	d504      	bpl.n	80044dc <__sflush_r+0x7c>
 80044d2:	1c42      	adds	r2, r0, #1
 80044d4:	d101      	bne.n	80044da <__sflush_r+0x7a>
 80044d6:	682b      	ldr	r3, [r5, #0]
 80044d8:	b903      	cbnz	r3, 80044dc <__sflush_r+0x7c>
 80044da:	6560      	str	r0, [r4, #84]	; 0x54
 80044dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044de:	602f      	str	r7, [r5, #0]
 80044e0:	2900      	cmp	r1, #0
 80044e2:	d0ca      	beq.n	800447a <__sflush_r+0x1a>
 80044e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044e8:	4299      	cmp	r1, r3
 80044ea:	d002      	beq.n	80044f2 <__sflush_r+0x92>
 80044ec:	4628      	mov	r0, r5
 80044ee:	f7ff fdbf 	bl	8004070 <_free_r>
 80044f2:	2000      	movs	r0, #0
 80044f4:	6360      	str	r0, [r4, #52]	; 0x34
 80044f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044fa:	6a21      	ldr	r1, [r4, #32]
 80044fc:	2301      	movs	r3, #1
 80044fe:	4628      	mov	r0, r5
 8004500:	47b0      	blx	r6
 8004502:	1c41      	adds	r1, r0, #1
 8004504:	d1c6      	bne.n	8004494 <__sflush_r+0x34>
 8004506:	682b      	ldr	r3, [r5, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0c3      	beq.n	8004494 <__sflush_r+0x34>
 800450c:	2b1d      	cmp	r3, #29
 800450e:	d001      	beq.n	8004514 <__sflush_r+0xb4>
 8004510:	2b16      	cmp	r3, #22
 8004512:	d101      	bne.n	8004518 <__sflush_r+0xb8>
 8004514:	602f      	str	r7, [r5, #0]
 8004516:	e7b0      	b.n	800447a <__sflush_r+0x1a>
 8004518:	89a3      	ldrh	r3, [r4, #12]
 800451a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800451e:	81a3      	strh	r3, [r4, #12]
 8004520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004524:	690f      	ldr	r7, [r1, #16]
 8004526:	2f00      	cmp	r7, #0
 8004528:	d0a7      	beq.n	800447a <__sflush_r+0x1a>
 800452a:	0793      	lsls	r3, r2, #30
 800452c:	bf18      	it	ne
 800452e:	2300      	movne	r3, #0
 8004530:	680e      	ldr	r6, [r1, #0]
 8004532:	bf08      	it	eq
 8004534:	694b      	ldreq	r3, [r1, #20]
 8004536:	eba6 0807 	sub.w	r8, r6, r7
 800453a:	600f      	str	r7, [r1, #0]
 800453c:	608b      	str	r3, [r1, #8]
 800453e:	f1b8 0f00 	cmp.w	r8, #0
 8004542:	dd9a      	ble.n	800447a <__sflush_r+0x1a>
 8004544:	4643      	mov	r3, r8
 8004546:	463a      	mov	r2, r7
 8004548:	6a21      	ldr	r1, [r4, #32]
 800454a:	4628      	mov	r0, r5
 800454c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800454e:	47b0      	blx	r6
 8004550:	2800      	cmp	r0, #0
 8004552:	dc07      	bgt.n	8004564 <__sflush_r+0x104>
 8004554:	89a3      	ldrh	r3, [r4, #12]
 8004556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800455a:	81a3      	strh	r3, [r4, #12]
 800455c:	f04f 30ff 	mov.w	r0, #4294967295
 8004560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004564:	4407      	add	r7, r0
 8004566:	eba8 0800 	sub.w	r8, r8, r0
 800456a:	e7e8      	b.n	800453e <__sflush_r+0xde>
 800456c:	20400001 	.word	0x20400001

08004570 <_fflush_r>:
 8004570:	b538      	push	{r3, r4, r5, lr}
 8004572:	690b      	ldr	r3, [r1, #16]
 8004574:	4605      	mov	r5, r0
 8004576:	460c      	mov	r4, r1
 8004578:	b1db      	cbz	r3, 80045b2 <_fflush_r+0x42>
 800457a:	b118      	cbz	r0, 8004584 <_fflush_r+0x14>
 800457c:	6983      	ldr	r3, [r0, #24]
 800457e:	b90b      	cbnz	r3, 8004584 <_fflush_r+0x14>
 8004580:	f000 f860 	bl	8004644 <__sinit>
 8004584:	4b0c      	ldr	r3, [pc, #48]	; (80045b8 <_fflush_r+0x48>)
 8004586:	429c      	cmp	r4, r3
 8004588:	d109      	bne.n	800459e <_fflush_r+0x2e>
 800458a:	686c      	ldr	r4, [r5, #4]
 800458c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004590:	b17b      	cbz	r3, 80045b2 <_fflush_r+0x42>
 8004592:	4621      	mov	r1, r4
 8004594:	4628      	mov	r0, r5
 8004596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800459a:	f7ff bf61 	b.w	8004460 <__sflush_r>
 800459e:	4b07      	ldr	r3, [pc, #28]	; (80045bc <_fflush_r+0x4c>)
 80045a0:	429c      	cmp	r4, r3
 80045a2:	d101      	bne.n	80045a8 <_fflush_r+0x38>
 80045a4:	68ac      	ldr	r4, [r5, #8]
 80045a6:	e7f1      	b.n	800458c <_fflush_r+0x1c>
 80045a8:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <_fflush_r+0x50>)
 80045aa:	429c      	cmp	r4, r3
 80045ac:	bf08      	it	eq
 80045ae:	68ec      	ldreq	r4, [r5, #12]
 80045b0:	e7ec      	b.n	800458c <_fflush_r+0x1c>
 80045b2:	2000      	movs	r0, #0
 80045b4:	bd38      	pop	{r3, r4, r5, pc}
 80045b6:	bf00      	nop
 80045b8:	08004f84 	.word	0x08004f84
 80045bc:	08004fa4 	.word	0x08004fa4
 80045c0:	08004f64 	.word	0x08004f64

080045c4 <_cleanup_r>:
 80045c4:	4901      	ldr	r1, [pc, #4]	; (80045cc <_cleanup_r+0x8>)
 80045c6:	f000 b8a9 	b.w	800471c <_fwalk_reent>
 80045ca:	bf00      	nop
 80045cc:	08004571 	.word	0x08004571

080045d0 <std.isra.0>:
 80045d0:	2300      	movs	r3, #0
 80045d2:	b510      	push	{r4, lr}
 80045d4:	4604      	mov	r4, r0
 80045d6:	6003      	str	r3, [r0, #0]
 80045d8:	6043      	str	r3, [r0, #4]
 80045da:	6083      	str	r3, [r0, #8]
 80045dc:	8181      	strh	r1, [r0, #12]
 80045de:	6643      	str	r3, [r0, #100]	; 0x64
 80045e0:	81c2      	strh	r2, [r0, #14]
 80045e2:	6103      	str	r3, [r0, #16]
 80045e4:	6143      	str	r3, [r0, #20]
 80045e6:	6183      	str	r3, [r0, #24]
 80045e8:	4619      	mov	r1, r3
 80045ea:	2208      	movs	r2, #8
 80045ec:	305c      	adds	r0, #92	; 0x5c
 80045ee:	f7ff fd37 	bl	8004060 <memset>
 80045f2:	4b05      	ldr	r3, [pc, #20]	; (8004608 <std.isra.0+0x38>)
 80045f4:	6224      	str	r4, [r4, #32]
 80045f6:	6263      	str	r3, [r4, #36]	; 0x24
 80045f8:	4b04      	ldr	r3, [pc, #16]	; (800460c <std.isra.0+0x3c>)
 80045fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80045fc:	4b04      	ldr	r3, [pc, #16]	; (8004610 <std.isra.0+0x40>)
 80045fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004600:	4b04      	ldr	r3, [pc, #16]	; (8004614 <std.isra.0+0x44>)
 8004602:	6323      	str	r3, [r4, #48]	; 0x30
 8004604:	bd10      	pop	{r4, pc}
 8004606:	bf00      	nop
 8004608:	08004215 	.word	0x08004215
 800460c:	08004237 	.word	0x08004237
 8004610:	0800426f 	.word	0x0800426f
 8004614:	08004293 	.word	0x08004293

08004618 <__sfmoreglue>:
 8004618:	b570      	push	{r4, r5, r6, lr}
 800461a:	2568      	movs	r5, #104	; 0x68
 800461c:	1e4a      	subs	r2, r1, #1
 800461e:	4355      	muls	r5, r2
 8004620:	460e      	mov	r6, r1
 8004622:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004626:	f7ff fd6f 	bl	8004108 <_malloc_r>
 800462a:	4604      	mov	r4, r0
 800462c:	b140      	cbz	r0, 8004640 <__sfmoreglue+0x28>
 800462e:	2100      	movs	r1, #0
 8004630:	e880 0042 	stmia.w	r0, {r1, r6}
 8004634:	300c      	adds	r0, #12
 8004636:	60a0      	str	r0, [r4, #8]
 8004638:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800463c:	f7ff fd10 	bl	8004060 <memset>
 8004640:	4620      	mov	r0, r4
 8004642:	bd70      	pop	{r4, r5, r6, pc}

08004644 <__sinit>:
 8004644:	6983      	ldr	r3, [r0, #24]
 8004646:	b510      	push	{r4, lr}
 8004648:	4604      	mov	r4, r0
 800464a:	bb33      	cbnz	r3, 800469a <__sinit+0x56>
 800464c:	6483      	str	r3, [r0, #72]	; 0x48
 800464e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004650:	6503      	str	r3, [r0, #80]	; 0x50
 8004652:	4b12      	ldr	r3, [pc, #72]	; (800469c <__sinit+0x58>)
 8004654:	4a12      	ldr	r2, [pc, #72]	; (80046a0 <__sinit+0x5c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6282      	str	r2, [r0, #40]	; 0x28
 800465a:	4298      	cmp	r0, r3
 800465c:	bf04      	itt	eq
 800465e:	2301      	moveq	r3, #1
 8004660:	6183      	streq	r3, [r0, #24]
 8004662:	f000 f81f 	bl	80046a4 <__sfp>
 8004666:	6060      	str	r0, [r4, #4]
 8004668:	4620      	mov	r0, r4
 800466a:	f000 f81b 	bl	80046a4 <__sfp>
 800466e:	60a0      	str	r0, [r4, #8]
 8004670:	4620      	mov	r0, r4
 8004672:	f000 f817 	bl	80046a4 <__sfp>
 8004676:	2200      	movs	r2, #0
 8004678:	60e0      	str	r0, [r4, #12]
 800467a:	2104      	movs	r1, #4
 800467c:	6860      	ldr	r0, [r4, #4]
 800467e:	f7ff ffa7 	bl	80045d0 <std.isra.0>
 8004682:	2201      	movs	r2, #1
 8004684:	2109      	movs	r1, #9
 8004686:	68a0      	ldr	r0, [r4, #8]
 8004688:	f7ff ffa2 	bl	80045d0 <std.isra.0>
 800468c:	2202      	movs	r2, #2
 800468e:	2112      	movs	r1, #18
 8004690:	68e0      	ldr	r0, [r4, #12]
 8004692:	f7ff ff9d 	bl	80045d0 <std.isra.0>
 8004696:	2301      	movs	r3, #1
 8004698:	61a3      	str	r3, [r4, #24]
 800469a:	bd10      	pop	{r4, pc}
 800469c:	08004f60 	.word	0x08004f60
 80046a0:	080045c5 	.word	0x080045c5

080046a4 <__sfp>:
 80046a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a6:	4b1c      	ldr	r3, [pc, #112]	; (8004718 <__sfp+0x74>)
 80046a8:	4607      	mov	r7, r0
 80046aa:	681e      	ldr	r6, [r3, #0]
 80046ac:	69b3      	ldr	r3, [r6, #24]
 80046ae:	b913      	cbnz	r3, 80046b6 <__sfp+0x12>
 80046b0:	4630      	mov	r0, r6
 80046b2:	f7ff ffc7 	bl	8004644 <__sinit>
 80046b6:	3648      	adds	r6, #72	; 0x48
 80046b8:	68b4      	ldr	r4, [r6, #8]
 80046ba:	6873      	ldr	r3, [r6, #4]
 80046bc:	3b01      	subs	r3, #1
 80046be:	d503      	bpl.n	80046c8 <__sfp+0x24>
 80046c0:	6833      	ldr	r3, [r6, #0]
 80046c2:	b133      	cbz	r3, 80046d2 <__sfp+0x2e>
 80046c4:	6836      	ldr	r6, [r6, #0]
 80046c6:	e7f7      	b.n	80046b8 <__sfp+0x14>
 80046c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80046cc:	b16d      	cbz	r5, 80046ea <__sfp+0x46>
 80046ce:	3468      	adds	r4, #104	; 0x68
 80046d0:	e7f4      	b.n	80046bc <__sfp+0x18>
 80046d2:	2104      	movs	r1, #4
 80046d4:	4638      	mov	r0, r7
 80046d6:	f7ff ff9f 	bl	8004618 <__sfmoreglue>
 80046da:	6030      	str	r0, [r6, #0]
 80046dc:	2800      	cmp	r0, #0
 80046de:	d1f1      	bne.n	80046c4 <__sfp+0x20>
 80046e0:	230c      	movs	r3, #12
 80046e2:	4604      	mov	r4, r0
 80046e4:	603b      	str	r3, [r7, #0]
 80046e6:	4620      	mov	r0, r4
 80046e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046ee:	81e3      	strh	r3, [r4, #14]
 80046f0:	2301      	movs	r3, #1
 80046f2:	6665      	str	r5, [r4, #100]	; 0x64
 80046f4:	81a3      	strh	r3, [r4, #12]
 80046f6:	6025      	str	r5, [r4, #0]
 80046f8:	60a5      	str	r5, [r4, #8]
 80046fa:	6065      	str	r5, [r4, #4]
 80046fc:	6125      	str	r5, [r4, #16]
 80046fe:	6165      	str	r5, [r4, #20]
 8004700:	61a5      	str	r5, [r4, #24]
 8004702:	2208      	movs	r2, #8
 8004704:	4629      	mov	r1, r5
 8004706:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800470a:	f7ff fca9 	bl	8004060 <memset>
 800470e:	6365      	str	r5, [r4, #52]	; 0x34
 8004710:	63a5      	str	r5, [r4, #56]	; 0x38
 8004712:	64a5      	str	r5, [r4, #72]	; 0x48
 8004714:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004716:	e7e6      	b.n	80046e6 <__sfp+0x42>
 8004718:	08004f60 	.word	0x08004f60

0800471c <_fwalk_reent>:
 800471c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004720:	4680      	mov	r8, r0
 8004722:	4689      	mov	r9, r1
 8004724:	2600      	movs	r6, #0
 8004726:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800472a:	b914      	cbnz	r4, 8004732 <_fwalk_reent+0x16>
 800472c:	4630      	mov	r0, r6
 800472e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004732:	68a5      	ldr	r5, [r4, #8]
 8004734:	6867      	ldr	r7, [r4, #4]
 8004736:	3f01      	subs	r7, #1
 8004738:	d501      	bpl.n	800473e <_fwalk_reent+0x22>
 800473a:	6824      	ldr	r4, [r4, #0]
 800473c:	e7f5      	b.n	800472a <_fwalk_reent+0xe>
 800473e:	89ab      	ldrh	r3, [r5, #12]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d907      	bls.n	8004754 <_fwalk_reent+0x38>
 8004744:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004748:	3301      	adds	r3, #1
 800474a:	d003      	beq.n	8004754 <_fwalk_reent+0x38>
 800474c:	4629      	mov	r1, r5
 800474e:	4640      	mov	r0, r8
 8004750:	47c8      	blx	r9
 8004752:	4306      	orrs	r6, r0
 8004754:	3568      	adds	r5, #104	; 0x68
 8004756:	e7ee      	b.n	8004736 <_fwalk_reent+0x1a>

08004758 <_lseek_r>:
 8004758:	b538      	push	{r3, r4, r5, lr}
 800475a:	4605      	mov	r5, r0
 800475c:	4608      	mov	r0, r1
 800475e:	4611      	mov	r1, r2
 8004760:	2200      	movs	r2, #0
 8004762:	4c05      	ldr	r4, [pc, #20]	; (8004778 <_lseek_r+0x20>)
 8004764:	6022      	str	r2, [r4, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	f7ff fa86 	bl	8003c78 <_lseek>
 800476c:	1c43      	adds	r3, r0, #1
 800476e:	d102      	bne.n	8004776 <_lseek_r+0x1e>
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	b103      	cbz	r3, 8004776 <_lseek_r+0x1e>
 8004774:	602b      	str	r3, [r5, #0]
 8004776:	bd38      	pop	{r3, r4, r5, pc}
 8004778:	200009f0 	.word	0x200009f0

0800477c <__swhatbuf_r>:
 800477c:	b570      	push	{r4, r5, r6, lr}
 800477e:	460e      	mov	r6, r1
 8004780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004784:	b090      	sub	sp, #64	; 0x40
 8004786:	2900      	cmp	r1, #0
 8004788:	4614      	mov	r4, r2
 800478a:	461d      	mov	r5, r3
 800478c:	da07      	bge.n	800479e <__swhatbuf_r+0x22>
 800478e:	2300      	movs	r3, #0
 8004790:	602b      	str	r3, [r5, #0]
 8004792:	89b3      	ldrh	r3, [r6, #12]
 8004794:	061a      	lsls	r2, r3, #24
 8004796:	d410      	bmi.n	80047ba <__swhatbuf_r+0x3e>
 8004798:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800479c:	e00e      	b.n	80047bc <__swhatbuf_r+0x40>
 800479e:	aa01      	add	r2, sp, #4
 80047a0:	f000 fb3a 	bl	8004e18 <_fstat_r>
 80047a4:	2800      	cmp	r0, #0
 80047a6:	dbf2      	blt.n	800478e <__swhatbuf_r+0x12>
 80047a8:	9a02      	ldr	r2, [sp, #8]
 80047aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80047ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80047b2:	425a      	negs	r2, r3
 80047b4:	415a      	adcs	r2, r3
 80047b6:	602a      	str	r2, [r5, #0]
 80047b8:	e7ee      	b.n	8004798 <__swhatbuf_r+0x1c>
 80047ba:	2340      	movs	r3, #64	; 0x40
 80047bc:	2000      	movs	r0, #0
 80047be:	6023      	str	r3, [r4, #0]
 80047c0:	b010      	add	sp, #64	; 0x40
 80047c2:	bd70      	pop	{r4, r5, r6, pc}

080047c4 <__smakebuf_r>:
 80047c4:	898b      	ldrh	r3, [r1, #12]
 80047c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80047c8:	079d      	lsls	r5, r3, #30
 80047ca:	4606      	mov	r6, r0
 80047cc:	460c      	mov	r4, r1
 80047ce:	d507      	bpl.n	80047e0 <__smakebuf_r+0x1c>
 80047d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80047d4:	6023      	str	r3, [r4, #0]
 80047d6:	6123      	str	r3, [r4, #16]
 80047d8:	2301      	movs	r3, #1
 80047da:	6163      	str	r3, [r4, #20]
 80047dc:	b002      	add	sp, #8
 80047de:	bd70      	pop	{r4, r5, r6, pc}
 80047e0:	ab01      	add	r3, sp, #4
 80047e2:	466a      	mov	r2, sp
 80047e4:	f7ff ffca 	bl	800477c <__swhatbuf_r>
 80047e8:	9900      	ldr	r1, [sp, #0]
 80047ea:	4605      	mov	r5, r0
 80047ec:	4630      	mov	r0, r6
 80047ee:	f7ff fc8b 	bl	8004108 <_malloc_r>
 80047f2:	b948      	cbnz	r0, 8004808 <__smakebuf_r+0x44>
 80047f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047f8:	059a      	lsls	r2, r3, #22
 80047fa:	d4ef      	bmi.n	80047dc <__smakebuf_r+0x18>
 80047fc:	f023 0303 	bic.w	r3, r3, #3
 8004800:	f043 0302 	orr.w	r3, r3, #2
 8004804:	81a3      	strh	r3, [r4, #12]
 8004806:	e7e3      	b.n	80047d0 <__smakebuf_r+0xc>
 8004808:	4b0d      	ldr	r3, [pc, #52]	; (8004840 <__smakebuf_r+0x7c>)
 800480a:	62b3      	str	r3, [r6, #40]	; 0x28
 800480c:	89a3      	ldrh	r3, [r4, #12]
 800480e:	6020      	str	r0, [r4, #0]
 8004810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004814:	81a3      	strh	r3, [r4, #12]
 8004816:	9b00      	ldr	r3, [sp, #0]
 8004818:	6120      	str	r0, [r4, #16]
 800481a:	6163      	str	r3, [r4, #20]
 800481c:	9b01      	ldr	r3, [sp, #4]
 800481e:	b15b      	cbz	r3, 8004838 <__smakebuf_r+0x74>
 8004820:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004824:	4630      	mov	r0, r6
 8004826:	f000 fb09 	bl	8004e3c <_isatty_r>
 800482a:	b128      	cbz	r0, 8004838 <__smakebuf_r+0x74>
 800482c:	89a3      	ldrh	r3, [r4, #12]
 800482e:	f023 0303 	bic.w	r3, r3, #3
 8004832:	f043 0301 	orr.w	r3, r3, #1
 8004836:	81a3      	strh	r3, [r4, #12]
 8004838:	89a3      	ldrh	r3, [r4, #12]
 800483a:	431d      	orrs	r5, r3
 800483c:	81a5      	strh	r5, [r4, #12]
 800483e:	e7cd      	b.n	80047dc <__smakebuf_r+0x18>
 8004840:	080045c5 	.word	0x080045c5

08004844 <__malloc_lock>:
 8004844:	4770      	bx	lr

08004846 <__malloc_unlock>:
 8004846:	4770      	bx	lr

08004848 <__sfputc_r>:
 8004848:	6893      	ldr	r3, [r2, #8]
 800484a:	b410      	push	{r4}
 800484c:	3b01      	subs	r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	6093      	str	r3, [r2, #8]
 8004852:	da08      	bge.n	8004866 <__sfputc_r+0x1e>
 8004854:	6994      	ldr	r4, [r2, #24]
 8004856:	42a3      	cmp	r3, r4
 8004858:	db02      	blt.n	8004860 <__sfputc_r+0x18>
 800485a:	b2cb      	uxtb	r3, r1
 800485c:	2b0a      	cmp	r3, #10
 800485e:	d102      	bne.n	8004866 <__sfputc_r+0x1e>
 8004860:	bc10      	pop	{r4}
 8004862:	f7ff bd1b 	b.w	800429c <__swbuf_r>
 8004866:	6813      	ldr	r3, [r2, #0]
 8004868:	1c58      	adds	r0, r3, #1
 800486a:	6010      	str	r0, [r2, #0]
 800486c:	7019      	strb	r1, [r3, #0]
 800486e:	b2c8      	uxtb	r0, r1
 8004870:	bc10      	pop	{r4}
 8004872:	4770      	bx	lr

08004874 <__sfputs_r>:
 8004874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004876:	4606      	mov	r6, r0
 8004878:	460f      	mov	r7, r1
 800487a:	4614      	mov	r4, r2
 800487c:	18d5      	adds	r5, r2, r3
 800487e:	42ac      	cmp	r4, r5
 8004880:	d101      	bne.n	8004886 <__sfputs_r+0x12>
 8004882:	2000      	movs	r0, #0
 8004884:	e007      	b.n	8004896 <__sfputs_r+0x22>
 8004886:	463a      	mov	r2, r7
 8004888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800488c:	4630      	mov	r0, r6
 800488e:	f7ff ffdb 	bl	8004848 <__sfputc_r>
 8004892:	1c43      	adds	r3, r0, #1
 8004894:	d1f3      	bne.n	800487e <__sfputs_r+0xa>
 8004896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004898 <_vfiprintf_r>:
 8004898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489c:	b09d      	sub	sp, #116	; 0x74
 800489e:	460c      	mov	r4, r1
 80048a0:	4617      	mov	r7, r2
 80048a2:	9303      	str	r3, [sp, #12]
 80048a4:	4606      	mov	r6, r0
 80048a6:	b118      	cbz	r0, 80048b0 <_vfiprintf_r+0x18>
 80048a8:	6983      	ldr	r3, [r0, #24]
 80048aa:	b90b      	cbnz	r3, 80048b0 <_vfiprintf_r+0x18>
 80048ac:	f7ff feca 	bl	8004644 <__sinit>
 80048b0:	4b7c      	ldr	r3, [pc, #496]	; (8004aa4 <_vfiprintf_r+0x20c>)
 80048b2:	429c      	cmp	r4, r3
 80048b4:	d157      	bne.n	8004966 <_vfiprintf_r+0xce>
 80048b6:	6874      	ldr	r4, [r6, #4]
 80048b8:	89a3      	ldrh	r3, [r4, #12]
 80048ba:	0718      	lsls	r0, r3, #28
 80048bc:	d55d      	bpl.n	800497a <_vfiprintf_r+0xe2>
 80048be:	6923      	ldr	r3, [r4, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d05a      	beq.n	800497a <_vfiprintf_r+0xe2>
 80048c4:	2300      	movs	r3, #0
 80048c6:	9309      	str	r3, [sp, #36]	; 0x24
 80048c8:	2320      	movs	r3, #32
 80048ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048ce:	2330      	movs	r3, #48	; 0x30
 80048d0:	f04f 0b01 	mov.w	fp, #1
 80048d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048d8:	46b8      	mov	r8, r7
 80048da:	4645      	mov	r5, r8
 80048dc:	f815 3b01 	ldrb.w	r3, [r5], #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d155      	bne.n	8004990 <_vfiprintf_r+0xf8>
 80048e4:	ebb8 0a07 	subs.w	sl, r8, r7
 80048e8:	d00b      	beq.n	8004902 <_vfiprintf_r+0x6a>
 80048ea:	4653      	mov	r3, sl
 80048ec:	463a      	mov	r2, r7
 80048ee:	4621      	mov	r1, r4
 80048f0:	4630      	mov	r0, r6
 80048f2:	f7ff ffbf 	bl	8004874 <__sfputs_r>
 80048f6:	3001      	adds	r0, #1
 80048f8:	f000 80c4 	beq.w	8004a84 <_vfiprintf_r+0x1ec>
 80048fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048fe:	4453      	add	r3, sl
 8004900:	9309      	str	r3, [sp, #36]	; 0x24
 8004902:	f898 3000 	ldrb.w	r3, [r8]
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 80bc 	beq.w	8004a84 <_vfiprintf_r+0x1ec>
 800490c:	2300      	movs	r3, #0
 800490e:	f04f 32ff 	mov.w	r2, #4294967295
 8004912:	9304      	str	r3, [sp, #16]
 8004914:	9307      	str	r3, [sp, #28]
 8004916:	9205      	str	r2, [sp, #20]
 8004918:	9306      	str	r3, [sp, #24]
 800491a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800491e:	931a      	str	r3, [sp, #104]	; 0x68
 8004920:	2205      	movs	r2, #5
 8004922:	7829      	ldrb	r1, [r5, #0]
 8004924:	4860      	ldr	r0, [pc, #384]	; (8004aa8 <_vfiprintf_r+0x210>)
 8004926:	f000 fa99 	bl	8004e5c <memchr>
 800492a:	f105 0801 	add.w	r8, r5, #1
 800492e:	9b04      	ldr	r3, [sp, #16]
 8004930:	2800      	cmp	r0, #0
 8004932:	d131      	bne.n	8004998 <_vfiprintf_r+0x100>
 8004934:	06d9      	lsls	r1, r3, #27
 8004936:	bf44      	itt	mi
 8004938:	2220      	movmi	r2, #32
 800493a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800493e:	071a      	lsls	r2, r3, #28
 8004940:	bf44      	itt	mi
 8004942:	222b      	movmi	r2, #43	; 0x2b
 8004944:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004948:	782a      	ldrb	r2, [r5, #0]
 800494a:	2a2a      	cmp	r2, #42	; 0x2a
 800494c:	d02c      	beq.n	80049a8 <_vfiprintf_r+0x110>
 800494e:	2100      	movs	r1, #0
 8004950:	200a      	movs	r0, #10
 8004952:	9a07      	ldr	r2, [sp, #28]
 8004954:	46a8      	mov	r8, r5
 8004956:	f898 3000 	ldrb.w	r3, [r8]
 800495a:	3501      	adds	r5, #1
 800495c:	3b30      	subs	r3, #48	; 0x30
 800495e:	2b09      	cmp	r3, #9
 8004960:	d96d      	bls.n	8004a3e <_vfiprintf_r+0x1a6>
 8004962:	b371      	cbz	r1, 80049c2 <_vfiprintf_r+0x12a>
 8004964:	e026      	b.n	80049b4 <_vfiprintf_r+0x11c>
 8004966:	4b51      	ldr	r3, [pc, #324]	; (8004aac <_vfiprintf_r+0x214>)
 8004968:	429c      	cmp	r4, r3
 800496a:	d101      	bne.n	8004970 <_vfiprintf_r+0xd8>
 800496c:	68b4      	ldr	r4, [r6, #8]
 800496e:	e7a3      	b.n	80048b8 <_vfiprintf_r+0x20>
 8004970:	4b4f      	ldr	r3, [pc, #316]	; (8004ab0 <_vfiprintf_r+0x218>)
 8004972:	429c      	cmp	r4, r3
 8004974:	bf08      	it	eq
 8004976:	68f4      	ldreq	r4, [r6, #12]
 8004978:	e79e      	b.n	80048b8 <_vfiprintf_r+0x20>
 800497a:	4621      	mov	r1, r4
 800497c:	4630      	mov	r0, r6
 800497e:	f7ff fcf1 	bl	8004364 <__swsetup_r>
 8004982:	2800      	cmp	r0, #0
 8004984:	d09e      	beq.n	80048c4 <_vfiprintf_r+0x2c>
 8004986:	f04f 30ff 	mov.w	r0, #4294967295
 800498a:	b01d      	add	sp, #116	; 0x74
 800498c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004990:	2b25      	cmp	r3, #37	; 0x25
 8004992:	d0a7      	beq.n	80048e4 <_vfiprintf_r+0x4c>
 8004994:	46a8      	mov	r8, r5
 8004996:	e7a0      	b.n	80048da <_vfiprintf_r+0x42>
 8004998:	4a43      	ldr	r2, [pc, #268]	; (8004aa8 <_vfiprintf_r+0x210>)
 800499a:	4645      	mov	r5, r8
 800499c:	1a80      	subs	r0, r0, r2
 800499e:	fa0b f000 	lsl.w	r0, fp, r0
 80049a2:	4318      	orrs	r0, r3
 80049a4:	9004      	str	r0, [sp, #16]
 80049a6:	e7bb      	b.n	8004920 <_vfiprintf_r+0x88>
 80049a8:	9a03      	ldr	r2, [sp, #12]
 80049aa:	1d11      	adds	r1, r2, #4
 80049ac:	6812      	ldr	r2, [r2, #0]
 80049ae:	9103      	str	r1, [sp, #12]
 80049b0:	2a00      	cmp	r2, #0
 80049b2:	db01      	blt.n	80049b8 <_vfiprintf_r+0x120>
 80049b4:	9207      	str	r2, [sp, #28]
 80049b6:	e004      	b.n	80049c2 <_vfiprintf_r+0x12a>
 80049b8:	4252      	negs	r2, r2
 80049ba:	f043 0302 	orr.w	r3, r3, #2
 80049be:	9207      	str	r2, [sp, #28]
 80049c0:	9304      	str	r3, [sp, #16]
 80049c2:	f898 3000 	ldrb.w	r3, [r8]
 80049c6:	2b2e      	cmp	r3, #46	; 0x2e
 80049c8:	d110      	bne.n	80049ec <_vfiprintf_r+0x154>
 80049ca:	f898 3001 	ldrb.w	r3, [r8, #1]
 80049ce:	f108 0101 	add.w	r1, r8, #1
 80049d2:	2b2a      	cmp	r3, #42	; 0x2a
 80049d4:	d137      	bne.n	8004a46 <_vfiprintf_r+0x1ae>
 80049d6:	9b03      	ldr	r3, [sp, #12]
 80049d8:	f108 0802 	add.w	r8, r8, #2
 80049dc:	1d1a      	adds	r2, r3, #4
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	9203      	str	r2, [sp, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	bfb8      	it	lt
 80049e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80049ea:	9305      	str	r3, [sp, #20]
 80049ec:	4d31      	ldr	r5, [pc, #196]	; (8004ab4 <_vfiprintf_r+0x21c>)
 80049ee:	2203      	movs	r2, #3
 80049f0:	f898 1000 	ldrb.w	r1, [r8]
 80049f4:	4628      	mov	r0, r5
 80049f6:	f000 fa31 	bl	8004e5c <memchr>
 80049fa:	b140      	cbz	r0, 8004a0e <_vfiprintf_r+0x176>
 80049fc:	2340      	movs	r3, #64	; 0x40
 80049fe:	1b40      	subs	r0, r0, r5
 8004a00:	fa03 f000 	lsl.w	r0, r3, r0
 8004a04:	9b04      	ldr	r3, [sp, #16]
 8004a06:	f108 0801 	add.w	r8, r8, #1
 8004a0a:	4303      	orrs	r3, r0
 8004a0c:	9304      	str	r3, [sp, #16]
 8004a0e:	f898 1000 	ldrb.w	r1, [r8]
 8004a12:	2206      	movs	r2, #6
 8004a14:	4828      	ldr	r0, [pc, #160]	; (8004ab8 <_vfiprintf_r+0x220>)
 8004a16:	f108 0701 	add.w	r7, r8, #1
 8004a1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a1e:	f000 fa1d 	bl	8004e5c <memchr>
 8004a22:	2800      	cmp	r0, #0
 8004a24:	d034      	beq.n	8004a90 <_vfiprintf_r+0x1f8>
 8004a26:	4b25      	ldr	r3, [pc, #148]	; (8004abc <_vfiprintf_r+0x224>)
 8004a28:	bb03      	cbnz	r3, 8004a6c <_vfiprintf_r+0x1d4>
 8004a2a:	9b03      	ldr	r3, [sp, #12]
 8004a2c:	3307      	adds	r3, #7
 8004a2e:	f023 0307 	bic.w	r3, r3, #7
 8004a32:	3308      	adds	r3, #8
 8004a34:	9303      	str	r3, [sp, #12]
 8004a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a38:	444b      	add	r3, r9
 8004a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a3c:	e74c      	b.n	80048d8 <_vfiprintf_r+0x40>
 8004a3e:	fb00 3202 	mla	r2, r0, r2, r3
 8004a42:	2101      	movs	r1, #1
 8004a44:	e786      	b.n	8004954 <_vfiprintf_r+0xbc>
 8004a46:	2300      	movs	r3, #0
 8004a48:	250a      	movs	r5, #10
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	9305      	str	r3, [sp, #20]
 8004a4e:	4688      	mov	r8, r1
 8004a50:	f898 2000 	ldrb.w	r2, [r8]
 8004a54:	3101      	adds	r1, #1
 8004a56:	3a30      	subs	r2, #48	; 0x30
 8004a58:	2a09      	cmp	r2, #9
 8004a5a:	d903      	bls.n	8004a64 <_vfiprintf_r+0x1cc>
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0c5      	beq.n	80049ec <_vfiprintf_r+0x154>
 8004a60:	9005      	str	r0, [sp, #20]
 8004a62:	e7c3      	b.n	80049ec <_vfiprintf_r+0x154>
 8004a64:	fb05 2000 	mla	r0, r5, r0, r2
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e7f0      	b.n	8004a4e <_vfiprintf_r+0x1b6>
 8004a6c:	ab03      	add	r3, sp, #12
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	4622      	mov	r2, r4
 8004a72:	4b13      	ldr	r3, [pc, #76]	; (8004ac0 <_vfiprintf_r+0x228>)
 8004a74:	a904      	add	r1, sp, #16
 8004a76:	4630      	mov	r0, r6
 8004a78:	f3af 8000 	nop.w
 8004a7c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004a80:	4681      	mov	r9, r0
 8004a82:	d1d8      	bne.n	8004a36 <_vfiprintf_r+0x19e>
 8004a84:	89a3      	ldrh	r3, [r4, #12]
 8004a86:	065b      	lsls	r3, r3, #25
 8004a88:	f53f af7d 	bmi.w	8004986 <_vfiprintf_r+0xee>
 8004a8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a8e:	e77c      	b.n	800498a <_vfiprintf_r+0xf2>
 8004a90:	ab03      	add	r3, sp, #12
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	4622      	mov	r2, r4
 8004a96:	4b0a      	ldr	r3, [pc, #40]	; (8004ac0 <_vfiprintf_r+0x228>)
 8004a98:	a904      	add	r1, sp, #16
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	f000 f88a 	bl	8004bb4 <_printf_i>
 8004aa0:	e7ec      	b.n	8004a7c <_vfiprintf_r+0x1e4>
 8004aa2:	bf00      	nop
 8004aa4:	08004f84 	.word	0x08004f84
 8004aa8:	08004fc4 	.word	0x08004fc4
 8004aac:	08004fa4 	.word	0x08004fa4
 8004ab0:	08004f64 	.word	0x08004f64
 8004ab4:	08004fca 	.word	0x08004fca
 8004ab8:	08004fce 	.word	0x08004fce
 8004abc:	00000000 	.word	0x00000000
 8004ac0:	08004875 	.word	0x08004875

08004ac4 <_printf_common>:
 8004ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac8:	4691      	mov	r9, r2
 8004aca:	461f      	mov	r7, r3
 8004acc:	688a      	ldr	r2, [r1, #8]
 8004ace:	690b      	ldr	r3, [r1, #16]
 8004ad0:	4606      	mov	r6, r0
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	bfb8      	it	lt
 8004ad6:	4613      	movlt	r3, r2
 8004ad8:	f8c9 3000 	str.w	r3, [r9]
 8004adc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ae0:	460c      	mov	r4, r1
 8004ae2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ae6:	b112      	cbz	r2, 8004aee <_printf_common+0x2a>
 8004ae8:	3301      	adds	r3, #1
 8004aea:	f8c9 3000 	str.w	r3, [r9]
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	0699      	lsls	r1, r3, #26
 8004af2:	bf42      	ittt	mi
 8004af4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004af8:	3302      	addmi	r3, #2
 8004afa:	f8c9 3000 	strmi.w	r3, [r9]
 8004afe:	6825      	ldr	r5, [r4, #0]
 8004b00:	f015 0506 	ands.w	r5, r5, #6
 8004b04:	d107      	bne.n	8004b16 <_printf_common+0x52>
 8004b06:	f104 0a19 	add.w	sl, r4, #25
 8004b0a:	68e3      	ldr	r3, [r4, #12]
 8004b0c:	f8d9 2000 	ldr.w	r2, [r9]
 8004b10:	1a9b      	subs	r3, r3, r2
 8004b12:	429d      	cmp	r5, r3
 8004b14:	db2a      	blt.n	8004b6c <_printf_common+0xa8>
 8004b16:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004b1a:	6822      	ldr	r2, [r4, #0]
 8004b1c:	3300      	adds	r3, #0
 8004b1e:	bf18      	it	ne
 8004b20:	2301      	movne	r3, #1
 8004b22:	0692      	lsls	r2, r2, #26
 8004b24:	d42f      	bmi.n	8004b86 <_printf_common+0xc2>
 8004b26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b2a:	4639      	mov	r1, r7
 8004b2c:	4630      	mov	r0, r6
 8004b2e:	47c0      	blx	r8
 8004b30:	3001      	adds	r0, #1
 8004b32:	d022      	beq.n	8004b7a <_printf_common+0xb6>
 8004b34:	6823      	ldr	r3, [r4, #0]
 8004b36:	68e5      	ldr	r5, [r4, #12]
 8004b38:	f003 0306 	and.w	r3, r3, #6
 8004b3c:	2b04      	cmp	r3, #4
 8004b3e:	bf18      	it	ne
 8004b40:	2500      	movne	r5, #0
 8004b42:	f8d9 2000 	ldr.w	r2, [r9]
 8004b46:	f04f 0900 	mov.w	r9, #0
 8004b4a:	bf08      	it	eq
 8004b4c:	1aad      	subeq	r5, r5, r2
 8004b4e:	68a3      	ldr	r3, [r4, #8]
 8004b50:	6922      	ldr	r2, [r4, #16]
 8004b52:	bf08      	it	eq
 8004b54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	bfc4      	itt	gt
 8004b5c:	1a9b      	subgt	r3, r3, r2
 8004b5e:	18ed      	addgt	r5, r5, r3
 8004b60:	341a      	adds	r4, #26
 8004b62:	454d      	cmp	r5, r9
 8004b64:	d11b      	bne.n	8004b9e <_printf_common+0xda>
 8004b66:	2000      	movs	r0, #0
 8004b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	4652      	mov	r2, sl
 8004b70:	4639      	mov	r1, r7
 8004b72:	4630      	mov	r0, r6
 8004b74:	47c0      	blx	r8
 8004b76:	3001      	adds	r0, #1
 8004b78:	d103      	bne.n	8004b82 <_printf_common+0xbe>
 8004b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b82:	3501      	adds	r5, #1
 8004b84:	e7c1      	b.n	8004b0a <_printf_common+0x46>
 8004b86:	2030      	movs	r0, #48	; 0x30
 8004b88:	18e1      	adds	r1, r4, r3
 8004b8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b94:	4422      	add	r2, r4
 8004b96:	3302      	adds	r3, #2
 8004b98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b9c:	e7c3      	b.n	8004b26 <_printf_common+0x62>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	4622      	mov	r2, r4
 8004ba2:	4639      	mov	r1, r7
 8004ba4:	4630      	mov	r0, r6
 8004ba6:	47c0      	blx	r8
 8004ba8:	3001      	adds	r0, #1
 8004baa:	d0e6      	beq.n	8004b7a <_printf_common+0xb6>
 8004bac:	f109 0901 	add.w	r9, r9, #1
 8004bb0:	e7d7      	b.n	8004b62 <_printf_common+0x9e>
	...

08004bb4 <_printf_i>:
 8004bb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004bb8:	4617      	mov	r7, r2
 8004bba:	7e0a      	ldrb	r2, [r1, #24]
 8004bbc:	b085      	sub	sp, #20
 8004bbe:	2a6e      	cmp	r2, #110	; 0x6e
 8004bc0:	4698      	mov	r8, r3
 8004bc2:	4606      	mov	r6, r0
 8004bc4:	460c      	mov	r4, r1
 8004bc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004bc8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004bcc:	f000 80bc 	beq.w	8004d48 <_printf_i+0x194>
 8004bd0:	d81a      	bhi.n	8004c08 <_printf_i+0x54>
 8004bd2:	2a63      	cmp	r2, #99	; 0x63
 8004bd4:	d02e      	beq.n	8004c34 <_printf_i+0x80>
 8004bd6:	d80a      	bhi.n	8004bee <_printf_i+0x3a>
 8004bd8:	2a00      	cmp	r2, #0
 8004bda:	f000 80c8 	beq.w	8004d6e <_printf_i+0x1ba>
 8004bde:	2a58      	cmp	r2, #88	; 0x58
 8004be0:	f000 808a 	beq.w	8004cf8 <_printf_i+0x144>
 8004be4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004be8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004bec:	e02a      	b.n	8004c44 <_printf_i+0x90>
 8004bee:	2a64      	cmp	r2, #100	; 0x64
 8004bf0:	d001      	beq.n	8004bf6 <_printf_i+0x42>
 8004bf2:	2a69      	cmp	r2, #105	; 0x69
 8004bf4:	d1f6      	bne.n	8004be4 <_printf_i+0x30>
 8004bf6:	6821      	ldr	r1, [r4, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004bfe:	d023      	beq.n	8004c48 <_printf_i+0x94>
 8004c00:	1d11      	adds	r1, r2, #4
 8004c02:	6019      	str	r1, [r3, #0]
 8004c04:	6813      	ldr	r3, [r2, #0]
 8004c06:	e027      	b.n	8004c58 <_printf_i+0xa4>
 8004c08:	2a73      	cmp	r2, #115	; 0x73
 8004c0a:	f000 80b4 	beq.w	8004d76 <_printf_i+0x1c2>
 8004c0e:	d808      	bhi.n	8004c22 <_printf_i+0x6e>
 8004c10:	2a6f      	cmp	r2, #111	; 0x6f
 8004c12:	d02a      	beq.n	8004c6a <_printf_i+0xb6>
 8004c14:	2a70      	cmp	r2, #112	; 0x70
 8004c16:	d1e5      	bne.n	8004be4 <_printf_i+0x30>
 8004c18:	680a      	ldr	r2, [r1, #0]
 8004c1a:	f042 0220 	orr.w	r2, r2, #32
 8004c1e:	600a      	str	r2, [r1, #0]
 8004c20:	e003      	b.n	8004c2a <_printf_i+0x76>
 8004c22:	2a75      	cmp	r2, #117	; 0x75
 8004c24:	d021      	beq.n	8004c6a <_printf_i+0xb6>
 8004c26:	2a78      	cmp	r2, #120	; 0x78
 8004c28:	d1dc      	bne.n	8004be4 <_printf_i+0x30>
 8004c2a:	2278      	movs	r2, #120	; 0x78
 8004c2c:	496f      	ldr	r1, [pc, #444]	; (8004dec <_printf_i+0x238>)
 8004c2e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004c32:	e064      	b.n	8004cfe <_printf_i+0x14a>
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004c3a:	1d11      	adds	r1, r2, #4
 8004c3c:	6019      	str	r1, [r3, #0]
 8004c3e:	6813      	ldr	r3, [r2, #0]
 8004c40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c44:	2301      	movs	r3, #1
 8004c46:	e0a3      	b.n	8004d90 <_printf_i+0x1dc>
 8004c48:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004c4c:	f102 0104 	add.w	r1, r2, #4
 8004c50:	6019      	str	r1, [r3, #0]
 8004c52:	d0d7      	beq.n	8004c04 <_printf_i+0x50>
 8004c54:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	da03      	bge.n	8004c64 <_printf_i+0xb0>
 8004c5c:	222d      	movs	r2, #45	; 0x2d
 8004c5e:	425b      	negs	r3, r3
 8004c60:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004c64:	4962      	ldr	r1, [pc, #392]	; (8004df0 <_printf_i+0x23c>)
 8004c66:	220a      	movs	r2, #10
 8004c68:	e017      	b.n	8004c9a <_printf_i+0xe6>
 8004c6a:	6820      	ldr	r0, [r4, #0]
 8004c6c:	6819      	ldr	r1, [r3, #0]
 8004c6e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004c72:	d003      	beq.n	8004c7c <_printf_i+0xc8>
 8004c74:	1d08      	adds	r0, r1, #4
 8004c76:	6018      	str	r0, [r3, #0]
 8004c78:	680b      	ldr	r3, [r1, #0]
 8004c7a:	e006      	b.n	8004c8a <_printf_i+0xd6>
 8004c7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c80:	f101 0004 	add.w	r0, r1, #4
 8004c84:	6018      	str	r0, [r3, #0]
 8004c86:	d0f7      	beq.n	8004c78 <_printf_i+0xc4>
 8004c88:	880b      	ldrh	r3, [r1, #0]
 8004c8a:	2a6f      	cmp	r2, #111	; 0x6f
 8004c8c:	bf14      	ite	ne
 8004c8e:	220a      	movne	r2, #10
 8004c90:	2208      	moveq	r2, #8
 8004c92:	4957      	ldr	r1, [pc, #348]	; (8004df0 <_printf_i+0x23c>)
 8004c94:	2000      	movs	r0, #0
 8004c96:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004c9a:	6865      	ldr	r5, [r4, #4]
 8004c9c:	2d00      	cmp	r5, #0
 8004c9e:	60a5      	str	r5, [r4, #8]
 8004ca0:	f2c0 809c 	blt.w	8004ddc <_printf_i+0x228>
 8004ca4:	6820      	ldr	r0, [r4, #0]
 8004ca6:	f020 0004 	bic.w	r0, r0, #4
 8004caa:	6020      	str	r0, [r4, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d13f      	bne.n	8004d30 <_printf_i+0x17c>
 8004cb0:	2d00      	cmp	r5, #0
 8004cb2:	f040 8095 	bne.w	8004de0 <_printf_i+0x22c>
 8004cb6:	4675      	mov	r5, lr
 8004cb8:	2a08      	cmp	r2, #8
 8004cba:	d10b      	bne.n	8004cd4 <_printf_i+0x120>
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	07da      	lsls	r2, r3, #31
 8004cc0:	d508      	bpl.n	8004cd4 <_printf_i+0x120>
 8004cc2:	6923      	ldr	r3, [r4, #16]
 8004cc4:	6862      	ldr	r2, [r4, #4]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	bfde      	ittt	le
 8004cca:	2330      	movle	r3, #48	; 0x30
 8004ccc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cd4:	ebae 0305 	sub.w	r3, lr, r5
 8004cd8:	6123      	str	r3, [r4, #16]
 8004cda:	f8cd 8000 	str.w	r8, [sp]
 8004cde:	463b      	mov	r3, r7
 8004ce0:	aa03      	add	r2, sp, #12
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	4630      	mov	r0, r6
 8004ce6:	f7ff feed 	bl	8004ac4 <_printf_common>
 8004cea:	3001      	adds	r0, #1
 8004cec:	d155      	bne.n	8004d9a <_printf_i+0x1e6>
 8004cee:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf2:	b005      	add	sp, #20
 8004cf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004cf8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004cfc:	493c      	ldr	r1, [pc, #240]	; (8004df0 <_printf_i+0x23c>)
 8004cfe:	6822      	ldr	r2, [r4, #0]
 8004d00:	6818      	ldr	r0, [r3, #0]
 8004d02:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004d06:	f100 0504 	add.w	r5, r0, #4
 8004d0a:	601d      	str	r5, [r3, #0]
 8004d0c:	d001      	beq.n	8004d12 <_printf_i+0x15e>
 8004d0e:	6803      	ldr	r3, [r0, #0]
 8004d10:	e002      	b.n	8004d18 <_printf_i+0x164>
 8004d12:	0655      	lsls	r5, r2, #25
 8004d14:	d5fb      	bpl.n	8004d0e <_printf_i+0x15a>
 8004d16:	8803      	ldrh	r3, [r0, #0]
 8004d18:	07d0      	lsls	r0, r2, #31
 8004d1a:	bf44      	itt	mi
 8004d1c:	f042 0220 	orrmi.w	r2, r2, #32
 8004d20:	6022      	strmi	r2, [r4, #0]
 8004d22:	b91b      	cbnz	r3, 8004d2c <_printf_i+0x178>
 8004d24:	6822      	ldr	r2, [r4, #0]
 8004d26:	f022 0220 	bic.w	r2, r2, #32
 8004d2a:	6022      	str	r2, [r4, #0]
 8004d2c:	2210      	movs	r2, #16
 8004d2e:	e7b1      	b.n	8004c94 <_printf_i+0xe0>
 8004d30:	4675      	mov	r5, lr
 8004d32:	fbb3 f0f2 	udiv	r0, r3, r2
 8004d36:	fb02 3310 	mls	r3, r2, r0, r3
 8004d3a:	5ccb      	ldrb	r3, [r1, r3]
 8004d3c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004d40:	4603      	mov	r3, r0
 8004d42:	2800      	cmp	r0, #0
 8004d44:	d1f5      	bne.n	8004d32 <_printf_i+0x17e>
 8004d46:	e7b7      	b.n	8004cb8 <_printf_i+0x104>
 8004d48:	6808      	ldr	r0, [r1, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004d50:	6949      	ldr	r1, [r1, #20]
 8004d52:	d004      	beq.n	8004d5e <_printf_i+0x1aa>
 8004d54:	1d10      	adds	r0, r2, #4
 8004d56:	6018      	str	r0, [r3, #0]
 8004d58:	6813      	ldr	r3, [r2, #0]
 8004d5a:	6019      	str	r1, [r3, #0]
 8004d5c:	e007      	b.n	8004d6e <_printf_i+0x1ba>
 8004d5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d62:	f102 0004 	add.w	r0, r2, #4
 8004d66:	6018      	str	r0, [r3, #0]
 8004d68:	6813      	ldr	r3, [r2, #0]
 8004d6a:	d0f6      	beq.n	8004d5a <_printf_i+0x1a6>
 8004d6c:	8019      	strh	r1, [r3, #0]
 8004d6e:	2300      	movs	r3, #0
 8004d70:	4675      	mov	r5, lr
 8004d72:	6123      	str	r3, [r4, #16]
 8004d74:	e7b1      	b.n	8004cda <_printf_i+0x126>
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	1d11      	adds	r1, r2, #4
 8004d7a:	6019      	str	r1, [r3, #0]
 8004d7c:	6815      	ldr	r5, [r2, #0]
 8004d7e:	2100      	movs	r1, #0
 8004d80:	6862      	ldr	r2, [r4, #4]
 8004d82:	4628      	mov	r0, r5
 8004d84:	f000 f86a 	bl	8004e5c <memchr>
 8004d88:	b108      	cbz	r0, 8004d8e <_printf_i+0x1da>
 8004d8a:	1b40      	subs	r0, r0, r5
 8004d8c:	6060      	str	r0, [r4, #4]
 8004d8e:	6863      	ldr	r3, [r4, #4]
 8004d90:	6123      	str	r3, [r4, #16]
 8004d92:	2300      	movs	r3, #0
 8004d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d98:	e79f      	b.n	8004cda <_printf_i+0x126>
 8004d9a:	6923      	ldr	r3, [r4, #16]
 8004d9c:	462a      	mov	r2, r5
 8004d9e:	4639      	mov	r1, r7
 8004da0:	4630      	mov	r0, r6
 8004da2:	47c0      	blx	r8
 8004da4:	3001      	adds	r0, #1
 8004da6:	d0a2      	beq.n	8004cee <_printf_i+0x13a>
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	079b      	lsls	r3, r3, #30
 8004dac:	d507      	bpl.n	8004dbe <_printf_i+0x20a>
 8004dae:	2500      	movs	r5, #0
 8004db0:	f104 0919 	add.w	r9, r4, #25
 8004db4:	68e3      	ldr	r3, [r4, #12]
 8004db6:	9a03      	ldr	r2, [sp, #12]
 8004db8:	1a9b      	subs	r3, r3, r2
 8004dba:	429d      	cmp	r5, r3
 8004dbc:	db05      	blt.n	8004dca <_printf_i+0x216>
 8004dbe:	68e0      	ldr	r0, [r4, #12]
 8004dc0:	9b03      	ldr	r3, [sp, #12]
 8004dc2:	4298      	cmp	r0, r3
 8004dc4:	bfb8      	it	lt
 8004dc6:	4618      	movlt	r0, r3
 8004dc8:	e793      	b.n	8004cf2 <_printf_i+0x13e>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	464a      	mov	r2, r9
 8004dce:	4639      	mov	r1, r7
 8004dd0:	4630      	mov	r0, r6
 8004dd2:	47c0      	blx	r8
 8004dd4:	3001      	adds	r0, #1
 8004dd6:	d08a      	beq.n	8004cee <_printf_i+0x13a>
 8004dd8:	3501      	adds	r5, #1
 8004dda:	e7eb      	b.n	8004db4 <_printf_i+0x200>
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1a7      	bne.n	8004d30 <_printf_i+0x17c>
 8004de0:	780b      	ldrb	r3, [r1, #0]
 8004de2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004de6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dea:	e765      	b.n	8004cb8 <_printf_i+0x104>
 8004dec:	08004fe6 	.word	0x08004fe6
 8004df0:	08004fd5 	.word	0x08004fd5

08004df4 <_read_r>:
 8004df4:	b538      	push	{r3, r4, r5, lr}
 8004df6:	4605      	mov	r5, r0
 8004df8:	4608      	mov	r0, r1
 8004dfa:	4611      	mov	r1, r2
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	4c05      	ldr	r4, [pc, #20]	; (8004e14 <_read_r+0x20>)
 8004e00:	6022      	str	r2, [r4, #0]
 8004e02:	461a      	mov	r2, r3
 8004e04:	f7fe feca 	bl	8003b9c <_read>
 8004e08:	1c43      	adds	r3, r0, #1
 8004e0a:	d102      	bne.n	8004e12 <_read_r+0x1e>
 8004e0c:	6823      	ldr	r3, [r4, #0]
 8004e0e:	b103      	cbz	r3, 8004e12 <_read_r+0x1e>
 8004e10:	602b      	str	r3, [r5, #0]
 8004e12:	bd38      	pop	{r3, r4, r5, pc}
 8004e14:	200009f0 	.word	0x200009f0

08004e18 <_fstat_r>:
 8004e18:	b538      	push	{r3, r4, r5, lr}
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	4c06      	ldr	r4, [pc, #24]	; (8004e38 <_fstat_r+0x20>)
 8004e1e:	4605      	mov	r5, r0
 8004e20:	4608      	mov	r0, r1
 8004e22:	4611      	mov	r1, r2
 8004e24:	6023      	str	r3, [r4, #0]
 8004e26:	f7fe ff0e 	bl	8003c46 <_fstat>
 8004e2a:	1c43      	adds	r3, r0, #1
 8004e2c:	d102      	bne.n	8004e34 <_fstat_r+0x1c>
 8004e2e:	6823      	ldr	r3, [r4, #0]
 8004e30:	b103      	cbz	r3, 8004e34 <_fstat_r+0x1c>
 8004e32:	602b      	str	r3, [r5, #0]
 8004e34:	bd38      	pop	{r3, r4, r5, pc}
 8004e36:	bf00      	nop
 8004e38:	200009f0 	.word	0x200009f0

08004e3c <_isatty_r>:
 8004e3c:	b538      	push	{r3, r4, r5, lr}
 8004e3e:	2300      	movs	r3, #0
 8004e40:	4c05      	ldr	r4, [pc, #20]	; (8004e58 <_isatty_r+0x1c>)
 8004e42:	4605      	mov	r5, r0
 8004e44:	4608      	mov	r0, r1
 8004e46:	6023      	str	r3, [r4, #0]
 8004e48:	f7fe ff0c 	bl	8003c64 <_isatty>
 8004e4c:	1c43      	adds	r3, r0, #1
 8004e4e:	d102      	bne.n	8004e56 <_isatty_r+0x1a>
 8004e50:	6823      	ldr	r3, [r4, #0]
 8004e52:	b103      	cbz	r3, 8004e56 <_isatty_r+0x1a>
 8004e54:	602b      	str	r3, [r5, #0]
 8004e56:	bd38      	pop	{r3, r4, r5, pc}
 8004e58:	200009f0 	.word	0x200009f0

08004e5c <memchr>:
 8004e5c:	b510      	push	{r4, lr}
 8004e5e:	b2c9      	uxtb	r1, r1
 8004e60:	4402      	add	r2, r0
 8004e62:	4290      	cmp	r0, r2
 8004e64:	4603      	mov	r3, r0
 8004e66:	d101      	bne.n	8004e6c <memchr+0x10>
 8004e68:	2000      	movs	r0, #0
 8004e6a:	bd10      	pop	{r4, pc}
 8004e6c:	781c      	ldrb	r4, [r3, #0]
 8004e6e:	3001      	adds	r0, #1
 8004e70:	428c      	cmp	r4, r1
 8004e72:	d1f6      	bne.n	8004e62 <memchr+0x6>
 8004e74:	4618      	mov	r0, r3
 8004e76:	bd10      	pop	{r4, pc}

08004e78 <_init>:
 8004e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7a:	bf00      	nop
 8004e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7e:	bc08      	pop	{r3}
 8004e80:	469e      	mov	lr, r3
 8004e82:	4770      	bx	lr

08004e84 <_fini>:
 8004e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e86:	bf00      	nop
 8004e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8a:	bc08      	pop	{r3}
 8004e8c:	469e      	mov	lr, r3
 8004e8e:	4770      	bx	lr
