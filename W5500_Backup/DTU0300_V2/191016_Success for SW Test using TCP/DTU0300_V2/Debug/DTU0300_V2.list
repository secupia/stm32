
DTU0300_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005920  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08005b04  08005b04  00015b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005c6c  08005c6c  00015c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005c70  08005c70  00015c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000b4  20000000  08005c74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001158  200000b4  08005d28  000200b4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000120c  08005d28  0002120c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
  9 .debug_info   000153bd  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003695  00000000  00000000  0003549a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000bf0  00000000  00000000  00038b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a78  00000000  00000000  00039720  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006c57  00000000  00000000  0003a198  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000362b  00000000  00000000  00040def  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0004441a  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000034dc  00000000  00000000  00044498  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000b4 	.word	0x200000b4
 8000200:	00000000 	.word	0x00000000
 8000204:	08005aec 	.word	0x08005aec

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000b8 	.word	0x200000b8
 8000220:	08005aec 	.word	0x08005aec

08000224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000228:	4a08      	ldr	r2, [pc, #32]	; (800024c <HAL_Init+0x28>)
 800022a:	4b08      	ldr	r3, [pc, #32]	; (800024c <HAL_Init+0x28>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f043 0310 	orr.w	r3, r3, #16
 8000232:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000234:	2003      	movs	r0, #3
 8000236:	f000 f93f 	bl	80004b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f808 	bl	8000250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000240:	f004 fa10 	bl	8004664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000244:	2300      	movs	r3, #0
}
 8000246:	4618      	mov	r0, r3
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40022000 	.word	0x40022000

08000250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000258:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <HAL_InitTick+0x54>)
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <HAL_InitTick+0x58>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	4619      	mov	r1, r3
 8000262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000266:	fbb3 f3f1 	udiv	r3, r3, r1
 800026a:	fbb2 f3f3 	udiv	r3, r2, r3
 800026e:	4618      	mov	r0, r3
 8000270:	f000 f957 	bl	8000522 <HAL_SYSTICK_Config>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800027a:	2301      	movs	r3, #1
 800027c:	e00e      	b.n	800029c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2b0f      	cmp	r3, #15
 8000282:	d80a      	bhi.n	800029a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000284:	2200      	movs	r2, #0
 8000286:	6879      	ldr	r1, [r7, #4]
 8000288:	f04f 30ff 	mov.w	r0, #4294967295
 800028c:	f000 f91f 	bl	80004ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000290:	4a06      	ldr	r2, [pc, #24]	; (80002ac <HAL_InitTick+0x5c>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000296:	2300      	movs	r3, #0
 8000298:	e000      	b.n	800029c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800029a:	2301      	movs	r3, #1
}
 800029c:	4618      	mov	r0, r3
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	2000004c 	.word	0x2000004c
 80002a8:	20000004 	.word	0x20000004
 80002ac:	20000000 	.word	0x20000000

080002b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002b4:	4b05      	ldr	r3, [pc, #20]	; (80002cc <HAL_IncTick+0x1c>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	461a      	mov	r2, r3
 80002ba:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <HAL_IncTick+0x20>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4413      	add	r3, r2
 80002c0:	4a03      	ldr	r2, [pc, #12]	; (80002d0 <HAL_IncTick+0x20>)
 80002c2:	6013      	str	r3, [r2, #0]
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	20000004 	.word	0x20000004
 80002d0:	20000910 	.word	0x20000910

080002d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  return uwTick;
 80002d8:	4b02      	ldr	r3, [pc, #8]	; (80002e4 <HAL_GetTick+0x10>)
 80002da:	681b      	ldr	r3, [r3, #0]
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	20000910 	.word	0x20000910

080002e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002f0:	f7ff fff0 	bl	80002d4 <HAL_GetTick>
 80002f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000300:	d005      	beq.n	800030e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000302:	4b09      	ldr	r3, [pc, #36]	; (8000328 <HAL_Delay+0x40>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	461a      	mov	r2, r3
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	4413      	add	r3, r2
 800030c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800030e:	bf00      	nop
 8000310:	f7ff ffe0 	bl	80002d4 <HAL_GetTick>
 8000314:	4602      	mov	r2, r0
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	1ad2      	subs	r2, r2, r3
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	429a      	cmp	r2, r3
 800031e:	d3f7      	bcc.n	8000310 <HAL_Delay+0x28>
  {
  }
}
 8000320:	bf00      	nop
 8000322:	3710      	adds	r7, #16
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000004 	.word	0x20000004

0800032c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f003 0307 	and.w	r3, r3, #7
 800033a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <NVIC_SetPriorityGrouping+0x44>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000342:	68ba      	ldr	r2, [r7, #8]
 8000344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000348:	4013      	ands	r3, r2
 800034a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800035c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800035e:	4a04      	ldr	r2, [pc, #16]	; (8000370 <NVIC_SetPriorityGrouping+0x44>)
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	60d3      	str	r3, [r2, #12]
}
 8000364:	bf00      	nop
 8000366:	3714      	adds	r7, #20
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	e000ed00 	.word	0xe000ed00

08000374 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <NVIC_GetPriorityGrouping+0x18>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	0a1b      	lsrs	r3, r3, #8
 800037e:	f003 0307 	and.w	r3, r3, #7
}
 8000382:	4618      	mov	r0, r3
 8000384:	46bd      	mov	sp, r7
 8000386:	bc80      	pop	{r7}
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	e000ed00 	.word	0xe000ed00

08000390 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800039a:	4908      	ldr	r1, [pc, #32]	; (80003bc <NVIC_EnableIRQ+0x2c>)
 800039c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a0:	095b      	lsrs	r3, r3, #5
 80003a2:	79fa      	ldrb	r2, [r7, #7]
 80003a4:	f002 021f 	and.w	r2, r2, #31
 80003a8:	2001      	movs	r0, #1
 80003aa:	fa00 f202 	lsl.w	r2, r0, r2
 80003ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr
 80003bc:	e000e100 	.word	0xe000e100

080003c0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	6039      	str	r1, [r7, #0]
 80003ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80003cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	da0b      	bge.n	80003ec <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d4:	490d      	ldr	r1, [pc, #52]	; (800040c <NVIC_SetPriority+0x4c>)
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	f003 030f 	and.w	r3, r3, #15
 80003dc:	3b04      	subs	r3, #4
 80003de:	683a      	ldr	r2, [r7, #0]
 80003e0:	b2d2      	uxtb	r2, r2
 80003e2:	0112      	lsls	r2, r2, #4
 80003e4:	b2d2      	uxtb	r2, r2
 80003e6:	440b      	add	r3, r1
 80003e8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003ea:	e009      	b.n	8000400 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ec:	4908      	ldr	r1, [pc, #32]	; (8000410 <NVIC_SetPriority+0x50>)
 80003ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003f2:	683a      	ldr	r2, [r7, #0]
 80003f4:	b2d2      	uxtb	r2, r2
 80003f6:	0112      	lsls	r2, r2, #4
 80003f8:	b2d2      	uxtb	r2, r2
 80003fa:	440b      	add	r3, r1
 80003fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	e000ed00 	.word	0xe000ed00
 8000410:	e000e100 	.word	0xe000e100

08000414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000414:	b480      	push	{r7}
 8000416:	b089      	sub	sp, #36	; 0x24
 8000418:	af00      	add	r7, sp, #0
 800041a:	60f8      	str	r0, [r7, #12]
 800041c:	60b9      	str	r1, [r7, #8]
 800041e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	f003 0307 	and.w	r3, r3, #7
 8000426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000428:	69fb      	ldr	r3, [r7, #28]
 800042a:	f1c3 0307 	rsb	r3, r3, #7
 800042e:	2b04      	cmp	r3, #4
 8000430:	bf28      	it	cs
 8000432:	2304      	movcs	r3, #4
 8000434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000436:	69fb      	ldr	r3, [r7, #28]
 8000438:	3304      	adds	r3, #4
 800043a:	2b06      	cmp	r3, #6
 800043c:	d902      	bls.n	8000444 <NVIC_EncodePriority+0x30>
 800043e:	69fb      	ldr	r3, [r7, #28]
 8000440:	3b03      	subs	r3, #3
 8000442:	e000      	b.n	8000446 <NVIC_EncodePriority+0x32>
 8000444:	2300      	movs	r3, #0
 8000446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000448:	2201      	movs	r2, #1
 800044a:	69bb      	ldr	r3, [r7, #24]
 800044c:	fa02 f303 	lsl.w	r3, r2, r3
 8000450:	1e5a      	subs	r2, r3, #1
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	401a      	ands	r2, r3
 8000456:	697b      	ldr	r3, [r7, #20]
 8000458:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800045a:	2101      	movs	r1, #1
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	fa01 f303 	lsl.w	r3, r1, r3
 8000462:	1e59      	subs	r1, r3, #1
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000468:	4313      	orrs	r3, r2
         );
}
 800046a:	4618      	mov	r0, r3
 800046c:	3724      	adds	r7, #36	; 0x24
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr

08000474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	3b01      	subs	r3, #1
 8000480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000484:	d301      	bcc.n	800048a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000486:	2301      	movs	r3, #1
 8000488:	e00f      	b.n	80004aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800048a:	4a0a      	ldr	r2, [pc, #40]	; (80004b4 <SysTick_Config+0x40>)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	3b01      	subs	r3, #1
 8000490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000492:	210f      	movs	r1, #15
 8000494:	f04f 30ff 	mov.w	r0, #4294967295
 8000498:	f7ff ff92 	bl	80003c0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800049c:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <SysTick_Config+0x40>)
 800049e:	2200      	movs	r2, #0
 80004a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004a2:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <SysTick_Config+0x40>)
 80004a4:	2207      	movs	r2, #7
 80004a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004a8:	2300      	movs	r3, #0
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3708      	adds	r7, #8
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	e000e010 	.word	0xe000e010

080004b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004c0:	6878      	ldr	r0, [r7, #4]
 80004c2:	f7ff ff33 	bl	800032c <NVIC_SetPriorityGrouping>
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b086      	sub	sp, #24
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	4603      	mov	r3, r0
 80004d6:	60b9      	str	r1, [r7, #8]
 80004d8:	607a      	str	r2, [r7, #4]
 80004da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80004dc:	2300      	movs	r3, #0
 80004de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80004e0:	f7ff ff48 	bl	8000374 <NVIC_GetPriorityGrouping>
 80004e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	68b9      	ldr	r1, [r7, #8]
 80004ea:	6978      	ldr	r0, [r7, #20]
 80004ec:	f7ff ff92 	bl	8000414 <NVIC_EncodePriority>
 80004f0:	4602      	mov	r2, r0
 80004f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004f6:	4611      	mov	r1, r2
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff ff61 	bl	80003c0 <NVIC_SetPriority>
}
 80004fe:	bf00      	nop
 8000500:	3718      	adds	r7, #24
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}

08000506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000506:	b580      	push	{r7, lr}
 8000508:	b082      	sub	sp, #8
 800050a:	af00      	add	r7, sp, #0
 800050c:	4603      	mov	r3, r0
 800050e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000514:	4618      	mov	r0, r3
 8000516:	f7ff ff3b 	bl	8000390 <NVIC_EnableIRQ>
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}

08000522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000522:	b580      	push	{r7, lr}
 8000524:	b082      	sub	sp, #8
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	f7ff ffa2 	bl	8000474 <SysTick_Config>
 8000530:	4603      	mov	r3, r0
}
 8000532:	4618      	mov	r0, r3
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
	...

0800053c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d101      	bne.n	8000552 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800054e:	2301      	movs	r3, #1
 8000550:	e059      	b.n	8000606 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	461a      	mov	r2, r3
 8000558:	4b2d      	ldr	r3, [pc, #180]	; (8000610 <HAL_DMA_Init+0xd4>)
 800055a:	429a      	cmp	r2, r3
 800055c:	d80f      	bhi.n	800057e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	461a      	mov	r2, r3
 8000564:	4b2b      	ldr	r3, [pc, #172]	; (8000614 <HAL_DMA_Init+0xd8>)
 8000566:	4413      	add	r3, r2
 8000568:	4a2b      	ldr	r2, [pc, #172]	; (8000618 <HAL_DMA_Init+0xdc>)
 800056a:	fba2 2303 	umull	r2, r3, r2, r3
 800056e:	091b      	lsrs	r3, r3, #4
 8000570:	009a      	lsls	r2, r3, #2
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4a28      	ldr	r2, [pc, #160]	; (800061c <HAL_DMA_Init+0xe0>)
 800057a:	63da      	str	r2, [r3, #60]	; 0x3c
 800057c:	e00e      	b.n	800059c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	461a      	mov	r2, r3
 8000584:	4b26      	ldr	r3, [pc, #152]	; (8000620 <HAL_DMA_Init+0xe4>)
 8000586:	4413      	add	r3, r2
 8000588:	4a23      	ldr	r2, [pc, #140]	; (8000618 <HAL_DMA_Init+0xdc>)
 800058a:	fba2 2303 	umull	r2, r3, r2, r3
 800058e:	091b      	lsrs	r3, r3, #4
 8000590:	009a      	lsls	r2, r3, #2
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4a22      	ldr	r2, [pc, #136]	; (8000624 <HAL_DMA_Init+0xe8>)
 800059a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2202      	movs	r2, #2
 80005a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80005b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80005b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80005c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80005cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80005d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80005e0:	68fa      	ldr	r2, [r7, #12]
 80005e2:	4313      	orrs	r3, r2
 80005e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	68fa      	ldr	r2, [r7, #12]
 80005ec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2200      	movs	r2, #0
 80005f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2201      	movs	r2, #1
 80005f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2200      	movs	r2, #0
 8000600:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000604:	2300      	movs	r3, #0
}
 8000606:	4618      	mov	r0, r3
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	40020407 	.word	0x40020407
 8000614:	bffdfff8 	.word	0xbffdfff8
 8000618:	cccccccd 	.word	0xcccccccd
 800061c:	40020000 	.word	0x40020000
 8000620:	bffdfbf8 	.word	0xbffdfbf8
 8000624:	40020400 	.word	0x40020400

08000628 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	607a      	str	r2, [r7, #4]
 8000634:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000636:	2300      	movs	r3, #0
 8000638:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d101      	bne.n	8000648 <HAL_DMA_Start_IT+0x20>
 8000644:	2302      	movs	r3, #2
 8000646:	e04a      	b.n	80006de <HAL_DMA_Start_IT+0xb6>
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	2201      	movs	r2, #1
 800064c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000656:	2b01      	cmp	r3, #1
 8000658:	d13a      	bne.n	80006d0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	2202      	movs	r2, #2
 800065e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	2200      	movs	r2, #0
 8000666:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	68fa      	ldr	r2, [r7, #12]
 800066e:	6812      	ldr	r2, [r2, #0]
 8000670:	6812      	ldr	r2, [r2, #0]
 8000672:	f022 0201 	bic.w	r2, r2, #1
 8000676:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	68b9      	ldr	r1, [r7, #8]
 800067e:	68f8      	ldr	r0, [r7, #12]
 8000680:	f000 fa9a 	bl	8000bb8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000688:	2b00      	cmp	r3, #0
 800068a:	d008      	beq.n	800069e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	68fa      	ldr	r2, [r7, #12]
 8000692:	6812      	ldr	r2, [r2, #0]
 8000694:	6812      	ldr	r2, [r2, #0]
 8000696:	f042 020e 	orr.w	r2, r2, #14
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	e00f      	b.n	80006be <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	68fa      	ldr	r2, [r7, #12]
 80006a4:	6812      	ldr	r2, [r2, #0]
 80006a6:	6812      	ldr	r2, [r2, #0]
 80006a8:	f022 0204 	bic.w	r2, r2, #4
 80006ac:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	6812      	ldr	r2, [r2, #0]
 80006b6:	6812      	ldr	r2, [r2, #0]
 80006b8:	f042 020a 	orr.w	r2, r2, #10
 80006bc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	6812      	ldr	r2, [r2, #0]
 80006c6:	6812      	ldr	r2, [r2, #0]
 80006c8:	f042 0201 	orr.w	r2, r2, #1
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	e005      	b.n	80006dc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	2200      	movs	r2, #0
 80006d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80006d8:	2302      	movs	r3, #2
 80006da:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80006dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3718      	adds	r7, #24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	2204      	movs	r2, #4
 8000706:	409a      	lsls	r2, r3
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	4013      	ands	r3, r2
 800070c:	2b00      	cmp	r3, #0
 800070e:	f000 8107 	beq.w	8000920 <HAL_DMA_IRQHandler+0x238>
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	f003 0304 	and.w	r3, r3, #4
 8000718:	2b00      	cmp	r3, #0
 800071a:	f000 8101 	beq.w	8000920 <HAL_DMA_IRQHandler+0x238>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f003 0320 	and.w	r3, r3, #32
 8000728:	2b00      	cmp	r3, #0
 800072a:	d107      	bne.n	800073c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	6812      	ldr	r2, [r2, #0]
 8000734:	6812      	ldr	r2, [r2, #0]
 8000736:	f022 0204 	bic.w	r2, r2, #4
 800073a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	461a      	mov	r2, r3
 8000742:	4b6a      	ldr	r3, [pc, #424]	; (80008ec <HAL_DMA_IRQHandler+0x204>)
 8000744:	429a      	cmp	r2, r3
 8000746:	d963      	bls.n	8000810 <HAL_DMA_IRQHandler+0x128>
 8000748:	4a69      	ldr	r2, [pc, #420]	; (80008f0 <HAL_DMA_IRQHandler+0x208>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4619      	mov	r1, r3
 8000750:	4b68      	ldr	r3, [pc, #416]	; (80008f4 <HAL_DMA_IRQHandler+0x20c>)
 8000752:	4299      	cmp	r1, r3
 8000754:	d059      	beq.n	800080a <HAL_DMA_IRQHandler+0x122>
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4619      	mov	r1, r3
 800075c:	4b66      	ldr	r3, [pc, #408]	; (80008f8 <HAL_DMA_IRQHandler+0x210>)
 800075e:	4299      	cmp	r1, r3
 8000760:	d051      	beq.n	8000806 <HAL_DMA_IRQHandler+0x11e>
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4619      	mov	r1, r3
 8000768:	4b64      	ldr	r3, [pc, #400]	; (80008fc <HAL_DMA_IRQHandler+0x214>)
 800076a:	4299      	cmp	r1, r3
 800076c:	d048      	beq.n	8000800 <HAL_DMA_IRQHandler+0x118>
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4619      	mov	r1, r3
 8000774:	4b62      	ldr	r3, [pc, #392]	; (8000900 <HAL_DMA_IRQHandler+0x218>)
 8000776:	4299      	cmp	r1, r3
 8000778:	d03f      	beq.n	80007fa <HAL_DMA_IRQHandler+0x112>
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4619      	mov	r1, r3
 8000780:	4b60      	ldr	r3, [pc, #384]	; (8000904 <HAL_DMA_IRQHandler+0x21c>)
 8000782:	4299      	cmp	r1, r3
 8000784:	d036      	beq.n	80007f4 <HAL_DMA_IRQHandler+0x10c>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4619      	mov	r1, r3
 800078c:	4b5e      	ldr	r3, [pc, #376]	; (8000908 <HAL_DMA_IRQHandler+0x220>)
 800078e:	4299      	cmp	r1, r3
 8000790:	d02d      	beq.n	80007ee <HAL_DMA_IRQHandler+0x106>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4619      	mov	r1, r3
 8000798:	4b54      	ldr	r3, [pc, #336]	; (80008ec <HAL_DMA_IRQHandler+0x204>)
 800079a:	4299      	cmp	r1, r3
 800079c:	d024      	beq.n	80007e8 <HAL_DMA_IRQHandler+0x100>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4619      	mov	r1, r3
 80007a4:	4b59      	ldr	r3, [pc, #356]	; (800090c <HAL_DMA_IRQHandler+0x224>)
 80007a6:	4299      	cmp	r1, r3
 80007a8:	d01c      	beq.n	80007e4 <HAL_DMA_IRQHandler+0xfc>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4619      	mov	r1, r3
 80007b0:	4b57      	ldr	r3, [pc, #348]	; (8000910 <HAL_DMA_IRQHandler+0x228>)
 80007b2:	4299      	cmp	r1, r3
 80007b4:	d014      	beq.n	80007e0 <HAL_DMA_IRQHandler+0xf8>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4619      	mov	r1, r3
 80007bc:	4b55      	ldr	r3, [pc, #340]	; (8000914 <HAL_DMA_IRQHandler+0x22c>)
 80007be:	4299      	cmp	r1, r3
 80007c0:	d00b      	beq.n	80007da <HAL_DMA_IRQHandler+0xf2>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4619      	mov	r1, r3
 80007c8:	4b53      	ldr	r3, [pc, #332]	; (8000918 <HAL_DMA_IRQHandler+0x230>)
 80007ca:	4299      	cmp	r1, r3
 80007cc:	d102      	bne.n	80007d4 <HAL_DMA_IRQHandler+0xec>
 80007ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007d2:	e01b      	b.n	800080c <HAL_DMA_IRQHandler+0x124>
 80007d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80007d8:	e018      	b.n	800080c <HAL_DMA_IRQHandler+0x124>
 80007da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007de:	e015      	b.n	800080c <HAL_DMA_IRQHandler+0x124>
 80007e0:	2340      	movs	r3, #64	; 0x40
 80007e2:	e013      	b.n	800080c <HAL_DMA_IRQHandler+0x124>
 80007e4:	2304      	movs	r3, #4
 80007e6:	e011      	b.n	800080c <HAL_DMA_IRQHandler+0x124>
 80007e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80007ec:	e00e      	b.n	800080c <HAL_DMA_IRQHandler+0x124>
 80007ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007f2:	e00b      	b.n	800080c <HAL_DMA_IRQHandler+0x124>
 80007f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80007f8:	e008      	b.n	800080c <HAL_DMA_IRQHandler+0x124>
 80007fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007fe:	e005      	b.n	800080c <HAL_DMA_IRQHandler+0x124>
 8000800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000804:	e002      	b.n	800080c <HAL_DMA_IRQHandler+0x124>
 8000806:	2340      	movs	r3, #64	; 0x40
 8000808:	e000      	b.n	800080c <HAL_DMA_IRQHandler+0x124>
 800080a:	2304      	movs	r3, #4
 800080c:	6053      	str	r3, [r2, #4]
 800080e:	e062      	b.n	80008d6 <HAL_DMA_IRQHandler+0x1ee>
 8000810:	4a42      	ldr	r2, [pc, #264]	; (800091c <HAL_DMA_IRQHandler+0x234>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4619      	mov	r1, r3
 8000818:	4b36      	ldr	r3, [pc, #216]	; (80008f4 <HAL_DMA_IRQHandler+0x20c>)
 800081a:	4299      	cmp	r1, r3
 800081c:	d059      	beq.n	80008d2 <HAL_DMA_IRQHandler+0x1ea>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4619      	mov	r1, r3
 8000824:	4b34      	ldr	r3, [pc, #208]	; (80008f8 <HAL_DMA_IRQHandler+0x210>)
 8000826:	4299      	cmp	r1, r3
 8000828:	d051      	beq.n	80008ce <HAL_DMA_IRQHandler+0x1e6>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4619      	mov	r1, r3
 8000830:	4b32      	ldr	r3, [pc, #200]	; (80008fc <HAL_DMA_IRQHandler+0x214>)
 8000832:	4299      	cmp	r1, r3
 8000834:	d048      	beq.n	80008c8 <HAL_DMA_IRQHandler+0x1e0>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4619      	mov	r1, r3
 800083c:	4b30      	ldr	r3, [pc, #192]	; (8000900 <HAL_DMA_IRQHandler+0x218>)
 800083e:	4299      	cmp	r1, r3
 8000840:	d03f      	beq.n	80008c2 <HAL_DMA_IRQHandler+0x1da>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4619      	mov	r1, r3
 8000848:	4b2e      	ldr	r3, [pc, #184]	; (8000904 <HAL_DMA_IRQHandler+0x21c>)
 800084a:	4299      	cmp	r1, r3
 800084c:	d036      	beq.n	80008bc <HAL_DMA_IRQHandler+0x1d4>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4619      	mov	r1, r3
 8000854:	4b2c      	ldr	r3, [pc, #176]	; (8000908 <HAL_DMA_IRQHandler+0x220>)
 8000856:	4299      	cmp	r1, r3
 8000858:	d02d      	beq.n	80008b6 <HAL_DMA_IRQHandler+0x1ce>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4619      	mov	r1, r3
 8000860:	4b22      	ldr	r3, [pc, #136]	; (80008ec <HAL_DMA_IRQHandler+0x204>)
 8000862:	4299      	cmp	r1, r3
 8000864:	d024      	beq.n	80008b0 <HAL_DMA_IRQHandler+0x1c8>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4619      	mov	r1, r3
 800086c:	4b27      	ldr	r3, [pc, #156]	; (800090c <HAL_DMA_IRQHandler+0x224>)
 800086e:	4299      	cmp	r1, r3
 8000870:	d01c      	beq.n	80008ac <HAL_DMA_IRQHandler+0x1c4>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4619      	mov	r1, r3
 8000878:	4b25      	ldr	r3, [pc, #148]	; (8000910 <HAL_DMA_IRQHandler+0x228>)
 800087a:	4299      	cmp	r1, r3
 800087c:	d014      	beq.n	80008a8 <HAL_DMA_IRQHandler+0x1c0>
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4619      	mov	r1, r3
 8000884:	4b23      	ldr	r3, [pc, #140]	; (8000914 <HAL_DMA_IRQHandler+0x22c>)
 8000886:	4299      	cmp	r1, r3
 8000888:	d00b      	beq.n	80008a2 <HAL_DMA_IRQHandler+0x1ba>
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4619      	mov	r1, r3
 8000890:	4b21      	ldr	r3, [pc, #132]	; (8000918 <HAL_DMA_IRQHandler+0x230>)
 8000892:	4299      	cmp	r1, r3
 8000894:	d102      	bne.n	800089c <HAL_DMA_IRQHandler+0x1b4>
 8000896:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800089a:	e01b      	b.n	80008d4 <HAL_DMA_IRQHandler+0x1ec>
 800089c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80008a0:	e018      	b.n	80008d4 <HAL_DMA_IRQHandler+0x1ec>
 80008a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a6:	e015      	b.n	80008d4 <HAL_DMA_IRQHandler+0x1ec>
 80008a8:	2340      	movs	r3, #64	; 0x40
 80008aa:	e013      	b.n	80008d4 <HAL_DMA_IRQHandler+0x1ec>
 80008ac:	2304      	movs	r3, #4
 80008ae:	e011      	b.n	80008d4 <HAL_DMA_IRQHandler+0x1ec>
 80008b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80008b4:	e00e      	b.n	80008d4 <HAL_DMA_IRQHandler+0x1ec>
 80008b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ba:	e00b      	b.n	80008d4 <HAL_DMA_IRQHandler+0x1ec>
 80008bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80008c0:	e008      	b.n	80008d4 <HAL_DMA_IRQHandler+0x1ec>
 80008c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008c6:	e005      	b.n	80008d4 <HAL_DMA_IRQHandler+0x1ec>
 80008c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008cc:	e002      	b.n	80008d4 <HAL_DMA_IRQHandler+0x1ec>
 80008ce:	2340      	movs	r3, #64	; 0x40
 80008d0:	e000      	b.n	80008d4 <HAL_DMA_IRQHandler+0x1ec>
 80008d2:	2304      	movs	r3, #4
 80008d4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008da:	2b00      	cmp	r3, #0
 80008dc:	f000 814c 	beq.w	8000b78 <HAL_DMA_IRQHandler+0x490>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80008e8:	e146      	b.n	8000b78 <HAL_DMA_IRQHandler+0x490>
 80008ea:	bf00      	nop
 80008ec:	40020080 	.word	0x40020080
 80008f0:	40020400 	.word	0x40020400
 80008f4:	40020008 	.word	0x40020008
 80008f8:	4002001c 	.word	0x4002001c
 80008fc:	40020030 	.word	0x40020030
 8000900:	40020044 	.word	0x40020044
 8000904:	40020058 	.word	0x40020058
 8000908:	4002006c 	.word	0x4002006c
 800090c:	40020408 	.word	0x40020408
 8000910:	4002041c 	.word	0x4002041c
 8000914:	40020430 	.word	0x40020430
 8000918:	40020444 	.word	0x40020444
 800091c:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	2202      	movs	r2, #2
 8000926:	409a      	lsls	r2, r3
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	4013      	ands	r3, r2
 800092c:	2b00      	cmp	r3, #0
 800092e:	f000 80f3 	beq.w	8000b18 <HAL_DMA_IRQHandler+0x430>
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	f003 0302 	and.w	r3, r3, #2
 8000938:	2b00      	cmp	r3, #0
 800093a:	f000 80ed 	beq.w	8000b18 <HAL_DMA_IRQHandler+0x430>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f003 0320 	and.w	r3, r3, #32
 8000948:	2b00      	cmp	r3, #0
 800094a:	d10b      	bne.n	8000964 <HAL_DMA_IRQHandler+0x27c>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	6812      	ldr	r2, [r2, #0]
 8000954:	6812      	ldr	r2, [r2, #0]
 8000956:	f022 020a 	bic.w	r2, r2, #10
 800095a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2201      	movs	r2, #1
 8000960:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	4b86      	ldr	r3, [pc, #536]	; (8000b84 <HAL_DMA_IRQHandler+0x49c>)
 800096c:	429a      	cmp	r2, r3
 800096e:	d963      	bls.n	8000a38 <HAL_DMA_IRQHandler+0x350>
 8000970:	4a85      	ldr	r2, [pc, #532]	; (8000b88 <HAL_DMA_IRQHandler+0x4a0>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4619      	mov	r1, r3
 8000978:	4b84      	ldr	r3, [pc, #528]	; (8000b8c <HAL_DMA_IRQHandler+0x4a4>)
 800097a:	4299      	cmp	r1, r3
 800097c:	d059      	beq.n	8000a32 <HAL_DMA_IRQHandler+0x34a>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4619      	mov	r1, r3
 8000984:	4b82      	ldr	r3, [pc, #520]	; (8000b90 <HAL_DMA_IRQHandler+0x4a8>)
 8000986:	4299      	cmp	r1, r3
 8000988:	d051      	beq.n	8000a2e <HAL_DMA_IRQHandler+0x346>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4619      	mov	r1, r3
 8000990:	4b80      	ldr	r3, [pc, #512]	; (8000b94 <HAL_DMA_IRQHandler+0x4ac>)
 8000992:	4299      	cmp	r1, r3
 8000994:	d048      	beq.n	8000a28 <HAL_DMA_IRQHandler+0x340>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4619      	mov	r1, r3
 800099c:	4b7e      	ldr	r3, [pc, #504]	; (8000b98 <HAL_DMA_IRQHandler+0x4b0>)
 800099e:	4299      	cmp	r1, r3
 80009a0:	d03f      	beq.n	8000a22 <HAL_DMA_IRQHandler+0x33a>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4619      	mov	r1, r3
 80009a8:	4b7c      	ldr	r3, [pc, #496]	; (8000b9c <HAL_DMA_IRQHandler+0x4b4>)
 80009aa:	4299      	cmp	r1, r3
 80009ac:	d036      	beq.n	8000a1c <HAL_DMA_IRQHandler+0x334>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4619      	mov	r1, r3
 80009b4:	4b7a      	ldr	r3, [pc, #488]	; (8000ba0 <HAL_DMA_IRQHandler+0x4b8>)
 80009b6:	4299      	cmp	r1, r3
 80009b8:	d02d      	beq.n	8000a16 <HAL_DMA_IRQHandler+0x32e>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4619      	mov	r1, r3
 80009c0:	4b70      	ldr	r3, [pc, #448]	; (8000b84 <HAL_DMA_IRQHandler+0x49c>)
 80009c2:	4299      	cmp	r1, r3
 80009c4:	d024      	beq.n	8000a10 <HAL_DMA_IRQHandler+0x328>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4619      	mov	r1, r3
 80009cc:	4b75      	ldr	r3, [pc, #468]	; (8000ba4 <HAL_DMA_IRQHandler+0x4bc>)
 80009ce:	4299      	cmp	r1, r3
 80009d0:	d01c      	beq.n	8000a0c <HAL_DMA_IRQHandler+0x324>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4619      	mov	r1, r3
 80009d8:	4b73      	ldr	r3, [pc, #460]	; (8000ba8 <HAL_DMA_IRQHandler+0x4c0>)
 80009da:	4299      	cmp	r1, r3
 80009dc:	d014      	beq.n	8000a08 <HAL_DMA_IRQHandler+0x320>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4619      	mov	r1, r3
 80009e4:	4b71      	ldr	r3, [pc, #452]	; (8000bac <HAL_DMA_IRQHandler+0x4c4>)
 80009e6:	4299      	cmp	r1, r3
 80009e8:	d00b      	beq.n	8000a02 <HAL_DMA_IRQHandler+0x31a>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4619      	mov	r1, r3
 80009f0:	4b6f      	ldr	r3, [pc, #444]	; (8000bb0 <HAL_DMA_IRQHandler+0x4c8>)
 80009f2:	4299      	cmp	r1, r3
 80009f4:	d102      	bne.n	80009fc <HAL_DMA_IRQHandler+0x314>
 80009f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009fa:	e01b      	b.n	8000a34 <HAL_DMA_IRQHandler+0x34c>
 80009fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a00:	e018      	b.n	8000a34 <HAL_DMA_IRQHandler+0x34c>
 8000a02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a06:	e015      	b.n	8000a34 <HAL_DMA_IRQHandler+0x34c>
 8000a08:	2320      	movs	r3, #32
 8000a0a:	e013      	b.n	8000a34 <HAL_DMA_IRQHandler+0x34c>
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	e011      	b.n	8000a34 <HAL_DMA_IRQHandler+0x34c>
 8000a10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a14:	e00e      	b.n	8000a34 <HAL_DMA_IRQHandler+0x34c>
 8000a16:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000a1a:	e00b      	b.n	8000a34 <HAL_DMA_IRQHandler+0x34c>
 8000a1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a20:	e008      	b.n	8000a34 <HAL_DMA_IRQHandler+0x34c>
 8000a22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a26:	e005      	b.n	8000a34 <HAL_DMA_IRQHandler+0x34c>
 8000a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a2c:	e002      	b.n	8000a34 <HAL_DMA_IRQHandler+0x34c>
 8000a2e:	2320      	movs	r3, #32
 8000a30:	e000      	b.n	8000a34 <HAL_DMA_IRQHandler+0x34c>
 8000a32:	2302      	movs	r3, #2
 8000a34:	6053      	str	r3, [r2, #4]
 8000a36:	e062      	b.n	8000afe <HAL_DMA_IRQHandler+0x416>
 8000a38:	4a5e      	ldr	r2, [pc, #376]	; (8000bb4 <HAL_DMA_IRQHandler+0x4cc>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4b52      	ldr	r3, [pc, #328]	; (8000b8c <HAL_DMA_IRQHandler+0x4a4>)
 8000a42:	4299      	cmp	r1, r3
 8000a44:	d059      	beq.n	8000afa <HAL_DMA_IRQHandler+0x412>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4b50      	ldr	r3, [pc, #320]	; (8000b90 <HAL_DMA_IRQHandler+0x4a8>)
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	d051      	beq.n	8000af6 <HAL_DMA_IRQHandler+0x40e>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4619      	mov	r1, r3
 8000a58:	4b4e      	ldr	r3, [pc, #312]	; (8000b94 <HAL_DMA_IRQHandler+0x4ac>)
 8000a5a:	4299      	cmp	r1, r3
 8000a5c:	d048      	beq.n	8000af0 <HAL_DMA_IRQHandler+0x408>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4619      	mov	r1, r3
 8000a64:	4b4c      	ldr	r3, [pc, #304]	; (8000b98 <HAL_DMA_IRQHandler+0x4b0>)
 8000a66:	4299      	cmp	r1, r3
 8000a68:	d03f      	beq.n	8000aea <HAL_DMA_IRQHandler+0x402>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4b4a      	ldr	r3, [pc, #296]	; (8000b9c <HAL_DMA_IRQHandler+0x4b4>)
 8000a72:	4299      	cmp	r1, r3
 8000a74:	d036      	beq.n	8000ae4 <HAL_DMA_IRQHandler+0x3fc>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4b48      	ldr	r3, [pc, #288]	; (8000ba0 <HAL_DMA_IRQHandler+0x4b8>)
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d02d      	beq.n	8000ade <HAL_DMA_IRQHandler+0x3f6>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4619      	mov	r1, r3
 8000a88:	4b3e      	ldr	r3, [pc, #248]	; (8000b84 <HAL_DMA_IRQHandler+0x49c>)
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	d024      	beq.n	8000ad8 <HAL_DMA_IRQHandler+0x3f0>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4619      	mov	r1, r3
 8000a94:	4b43      	ldr	r3, [pc, #268]	; (8000ba4 <HAL_DMA_IRQHandler+0x4bc>)
 8000a96:	4299      	cmp	r1, r3
 8000a98:	d01c      	beq.n	8000ad4 <HAL_DMA_IRQHandler+0x3ec>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4b41      	ldr	r3, [pc, #260]	; (8000ba8 <HAL_DMA_IRQHandler+0x4c0>)
 8000aa2:	4299      	cmp	r1, r3
 8000aa4:	d014      	beq.n	8000ad0 <HAL_DMA_IRQHandler+0x3e8>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4b3f      	ldr	r3, [pc, #252]	; (8000bac <HAL_DMA_IRQHandler+0x4c4>)
 8000aae:	4299      	cmp	r1, r3
 8000ab0:	d00b      	beq.n	8000aca <HAL_DMA_IRQHandler+0x3e2>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4b3d      	ldr	r3, [pc, #244]	; (8000bb0 <HAL_DMA_IRQHandler+0x4c8>)
 8000aba:	4299      	cmp	r1, r3
 8000abc:	d102      	bne.n	8000ac4 <HAL_DMA_IRQHandler+0x3dc>
 8000abe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac2:	e01b      	b.n	8000afc <HAL_DMA_IRQHandler+0x414>
 8000ac4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ac8:	e018      	b.n	8000afc <HAL_DMA_IRQHandler+0x414>
 8000aca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ace:	e015      	b.n	8000afc <HAL_DMA_IRQHandler+0x414>
 8000ad0:	2320      	movs	r3, #32
 8000ad2:	e013      	b.n	8000afc <HAL_DMA_IRQHandler+0x414>
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	e011      	b.n	8000afc <HAL_DMA_IRQHandler+0x414>
 8000ad8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000adc:	e00e      	b.n	8000afc <HAL_DMA_IRQHandler+0x414>
 8000ade:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ae2:	e00b      	b.n	8000afc <HAL_DMA_IRQHandler+0x414>
 8000ae4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ae8:	e008      	b.n	8000afc <HAL_DMA_IRQHandler+0x414>
 8000aea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aee:	e005      	b.n	8000afc <HAL_DMA_IRQHandler+0x414>
 8000af0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000af4:	e002      	b.n	8000afc <HAL_DMA_IRQHandler+0x414>
 8000af6:	2320      	movs	r3, #32
 8000af8:	e000      	b.n	8000afc <HAL_DMA_IRQHandler+0x414>
 8000afa:	2302      	movs	r3, #2
 8000afc:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2200      	movs	r2, #0
 8000b02:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d034      	beq.n	8000b78 <HAL_DMA_IRQHandler+0x490>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000b16:	e02f      	b.n	8000b78 <HAL_DMA_IRQHandler+0x490>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	2208      	movs	r2, #8
 8000b1e:	409a      	lsls	r2, r3
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	4013      	ands	r3, r2
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d028      	beq.n	8000b7a <HAL_DMA_IRQHandler+0x492>
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	f003 0308 	and.w	r3, r3, #8
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d023      	beq.n	8000b7a <HAL_DMA_IRQHandler+0x492>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	6812      	ldr	r2, [r2, #0]
 8000b3a:	6812      	ldr	r2, [r2, #0]
 8000b3c:	f022 020e 	bic.w	r2, r2, #14
 8000b40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b50:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2201      	movs	r2, #1
 8000b56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d004      	beq.n	8000b7a <HAL_DMA_IRQHandler+0x492>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	4798      	blx	r3
    }
  }
  return;
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
}
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40020080 	.word	0x40020080
 8000b88:	40020400 	.word	0x40020400
 8000b8c:	40020008 	.word	0x40020008
 8000b90:	4002001c 	.word	0x4002001c
 8000b94:	40020030 	.word	0x40020030
 8000b98:	40020044 	.word	0x40020044
 8000b9c:	40020058 	.word	0x40020058
 8000ba0:	4002006c 	.word	0x4002006c
 8000ba4:	40020408 	.word	0x40020408
 8000ba8:	4002041c 	.word	0x4002041c
 8000bac:	40020430 	.word	0x40020430
 8000bb0:	40020444 	.word	0x40020444
 8000bb4:	40020000 	.word	0x40020000

08000bb8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
 8000bc4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000bce:	2101      	movs	r1, #1
 8000bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	683a      	ldr	r2, [r7, #0]
 8000bdc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2b10      	cmp	r3, #16
 8000be4:	d108      	bne.n	8000bf8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000bf6:	e007      	b.n	8000c08 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	68ba      	ldr	r2, [r7, #8]
 8000bfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	60da      	str	r2, [r3, #12]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
	...

08000c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b08b      	sub	sp, #44	; 0x2c
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000c32:	2300      	movs	r3, #0
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
 8000c36:	e133      	b.n	8000ea0 <HAL_GPIO_Init+0x28c>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	f040 8122 	bne.w	8000e9a <HAL_GPIO_Init+0x286>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	2b12      	cmp	r3, #18
 8000c5c:	d034      	beq.n	8000cc8 <HAL_GPIO_Init+0xb4>
 8000c5e:	2b12      	cmp	r3, #18
 8000c60:	d80d      	bhi.n	8000c7e <HAL_GPIO_Init+0x6a>
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d02b      	beq.n	8000cbe <HAL_GPIO_Init+0xaa>
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d804      	bhi.n	8000c74 <HAL_GPIO_Init+0x60>
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d031      	beq.n	8000cd2 <HAL_GPIO_Init+0xbe>
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d01c      	beq.n	8000cac <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c72:	e048      	b.n	8000d06 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000c74:	2b03      	cmp	r3, #3
 8000c76:	d043      	beq.n	8000d00 <HAL_GPIO_Init+0xec>
 8000c78:	2b11      	cmp	r3, #17
 8000c7a:	d01b      	beq.n	8000cb4 <HAL_GPIO_Init+0xa0>
          break;
 8000c7c:	e043      	b.n	8000d06 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000c7e:	4a8d      	ldr	r2, [pc, #564]	; (8000eb4 <HAL_GPIO_Init+0x2a0>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d026      	beq.n	8000cd2 <HAL_GPIO_Init+0xbe>
 8000c84:	4a8b      	ldr	r2, [pc, #556]	; (8000eb4 <HAL_GPIO_Init+0x2a0>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d806      	bhi.n	8000c98 <HAL_GPIO_Init+0x84>
 8000c8a:	4a8b      	ldr	r2, [pc, #556]	; (8000eb8 <HAL_GPIO_Init+0x2a4>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d020      	beq.n	8000cd2 <HAL_GPIO_Init+0xbe>
 8000c90:	4a8a      	ldr	r2, [pc, #552]	; (8000ebc <HAL_GPIO_Init+0x2a8>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d01d      	beq.n	8000cd2 <HAL_GPIO_Init+0xbe>
          break;
 8000c96:	e036      	b.n	8000d06 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000c98:	4a89      	ldr	r2, [pc, #548]	; (8000ec0 <HAL_GPIO_Init+0x2ac>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d019      	beq.n	8000cd2 <HAL_GPIO_Init+0xbe>
 8000c9e:	4a89      	ldr	r2, [pc, #548]	; (8000ec4 <HAL_GPIO_Init+0x2b0>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d016      	beq.n	8000cd2 <HAL_GPIO_Init+0xbe>
 8000ca4:	4a88      	ldr	r2, [pc, #544]	; (8000ec8 <HAL_GPIO_Init+0x2b4>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d013      	beq.n	8000cd2 <HAL_GPIO_Init+0xbe>
          break;
 8000caa:	e02c      	b.n	8000d06 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	623b      	str	r3, [r7, #32]
          break;
 8000cb2:	e028      	b.n	8000d06 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	623b      	str	r3, [r7, #32]
          break;
 8000cbc:	e023      	b.n	8000d06 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	3308      	adds	r3, #8
 8000cc4:	623b      	str	r3, [r7, #32]
          break;
 8000cc6:	e01e      	b.n	8000d06 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	330c      	adds	r3, #12
 8000cce:	623b      	str	r3, [r7, #32]
          break;
 8000cd0:	e019      	b.n	8000d06 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d102      	bne.n	8000ce0 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cda:	2304      	movs	r3, #4
 8000cdc:	623b      	str	r3, [r7, #32]
          break;
 8000cde:	e012      	b.n	8000d06 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d105      	bne.n	8000cf4 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ce8:	2308      	movs	r3, #8
 8000cea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	69fa      	ldr	r2, [r7, #28]
 8000cf0:	611a      	str	r2, [r3, #16]
          break;
 8000cf2:	e008      	b.n	8000d06 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cf4:	2308      	movs	r3, #8
 8000cf6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	69fa      	ldr	r2, [r7, #28]
 8000cfc:	615a      	str	r2, [r3, #20]
          break;
 8000cfe:	e002      	b.n	8000d06 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d00:	2300      	movs	r3, #0
 8000d02:	623b      	str	r3, [r7, #32]
          break;
 8000d04:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	2bff      	cmp	r3, #255	; 0xff
 8000d0a:	d801      	bhi.n	8000d10 <HAL_GPIO_Init+0xfc>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	e001      	b.n	8000d14 <HAL_GPIO_Init+0x100>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3304      	adds	r3, #4
 8000d14:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	2bff      	cmp	r3, #255	; 0xff
 8000d1a:	d802      	bhi.n	8000d22 <HAL_GPIO_Init+0x10e>
 8000d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	e002      	b.n	8000d28 <HAL_GPIO_Init+0x114>
 8000d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d24:	3b08      	subs	r3, #8
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	210f      	movs	r1, #15
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	43db      	mvns	r3, r3
 8000d38:	401a      	ands	r2, r3
 8000d3a:	6a39      	ldr	r1, [r7, #32]
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d42:	431a      	orrs	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	f000 80a2 	beq.w	8000e9a <HAL_GPIO_Init+0x286>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d56:	4a5d      	ldr	r2, [pc, #372]	; (8000ecc <HAL_GPIO_Init+0x2b8>)
 8000d58:	4b5c      	ldr	r3, [pc, #368]	; (8000ecc <HAL_GPIO_Init+0x2b8>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6193      	str	r3, [r2, #24]
 8000d62:	4b5a      	ldr	r3, [pc, #360]	; (8000ecc <HAL_GPIO_Init+0x2b8>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000d6e:	4a58      	ldr	r2, [pc, #352]	; (8000ed0 <HAL_GPIO_Init+0x2bc>)
 8000d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d72:	089b      	lsrs	r3, r3, #2
 8000d74:	3302      	adds	r3, #2
 8000d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d7a:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7e:	f003 0303 	and.w	r3, r3, #3
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	220f      	movs	r2, #15
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a4f      	ldr	r2, [pc, #316]	; (8000ed4 <HAL_GPIO_Init+0x2c0>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d01f      	beq.n	8000dda <HAL_GPIO_Init+0x1c6>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a4e      	ldr	r2, [pc, #312]	; (8000ed8 <HAL_GPIO_Init+0x2c4>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d019      	beq.n	8000dd6 <HAL_GPIO_Init+0x1c2>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a4d      	ldr	r2, [pc, #308]	; (8000edc <HAL_GPIO_Init+0x2c8>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d013      	beq.n	8000dd2 <HAL_GPIO_Init+0x1be>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a4c      	ldr	r2, [pc, #304]	; (8000ee0 <HAL_GPIO_Init+0x2cc>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d00d      	beq.n	8000dce <HAL_GPIO_Init+0x1ba>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a4b      	ldr	r2, [pc, #300]	; (8000ee4 <HAL_GPIO_Init+0x2d0>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d007      	beq.n	8000dca <HAL_GPIO_Init+0x1b6>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a4a      	ldr	r2, [pc, #296]	; (8000ee8 <HAL_GPIO_Init+0x2d4>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d101      	bne.n	8000dc6 <HAL_GPIO_Init+0x1b2>
 8000dc2:	2305      	movs	r3, #5
 8000dc4:	e00a      	b.n	8000ddc <HAL_GPIO_Init+0x1c8>
 8000dc6:	2306      	movs	r3, #6
 8000dc8:	e008      	b.n	8000ddc <HAL_GPIO_Init+0x1c8>
 8000dca:	2304      	movs	r3, #4
 8000dcc:	e006      	b.n	8000ddc <HAL_GPIO_Init+0x1c8>
 8000dce:	2303      	movs	r3, #3
 8000dd0:	e004      	b.n	8000ddc <HAL_GPIO_Init+0x1c8>
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	e002      	b.n	8000ddc <HAL_GPIO_Init+0x1c8>
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e000      	b.n	8000ddc <HAL_GPIO_Init+0x1c8>
 8000dda:	2300      	movs	r3, #0
 8000ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dde:	f002 0203 	and.w	r2, r2, #3
 8000de2:	0092      	lsls	r2, r2, #2
 8000de4:	4093      	lsls	r3, r2
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000dec:	4938      	ldr	r1, [pc, #224]	; (8000ed0 <HAL_GPIO_Init+0x2bc>)
 8000dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df0:	089b      	lsrs	r3, r3, #2
 8000df2:	3302      	adds	r3, #2
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d006      	beq.n	8000e14 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e06:	4939      	ldr	r1, [pc, #228]	; (8000eec <HAL_GPIO_Init+0x2d8>)
 8000e08:	4b38      	ldr	r3, [pc, #224]	; (8000eec <HAL_GPIO_Init+0x2d8>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	600b      	str	r3, [r1, #0]
 8000e12:	e006      	b.n	8000e22 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e14:	4935      	ldr	r1, [pc, #212]	; (8000eec <HAL_GPIO_Init+0x2d8>)
 8000e16:	4b35      	ldr	r3, [pc, #212]	; (8000eec <HAL_GPIO_Init+0x2d8>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	4013      	ands	r3, r2
 8000e20:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d006      	beq.n	8000e3c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e2e:	492f      	ldr	r1, [pc, #188]	; (8000eec <HAL_GPIO_Init+0x2d8>)
 8000e30:	4b2e      	ldr	r3, [pc, #184]	; (8000eec <HAL_GPIO_Init+0x2d8>)
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	604b      	str	r3, [r1, #4]
 8000e3a:	e006      	b.n	8000e4a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e3c:	492b      	ldr	r1, [pc, #172]	; (8000eec <HAL_GPIO_Init+0x2d8>)
 8000e3e:	4b2b      	ldr	r3, [pc, #172]	; (8000eec <HAL_GPIO_Init+0x2d8>)
 8000e40:	685a      	ldr	r2, [r3, #4]
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	4013      	ands	r3, r2
 8000e48:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d006      	beq.n	8000e64 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e56:	4925      	ldr	r1, [pc, #148]	; (8000eec <HAL_GPIO_Init+0x2d8>)
 8000e58:	4b24      	ldr	r3, [pc, #144]	; (8000eec <HAL_GPIO_Init+0x2d8>)
 8000e5a:	689a      	ldr	r2, [r3, #8]
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	608b      	str	r3, [r1, #8]
 8000e62:	e006      	b.n	8000e72 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e64:	4921      	ldr	r1, [pc, #132]	; (8000eec <HAL_GPIO_Init+0x2d8>)
 8000e66:	4b21      	ldr	r3, [pc, #132]	; (8000eec <HAL_GPIO_Init+0x2d8>)
 8000e68:	689a      	ldr	r2, [r3, #8]
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	4013      	ands	r3, r2
 8000e70:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d006      	beq.n	8000e8c <HAL_GPIO_Init+0x278>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e7e:	491b      	ldr	r1, [pc, #108]	; (8000eec <HAL_GPIO_Init+0x2d8>)
 8000e80:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <HAL_GPIO_Init+0x2d8>)
 8000e82:	68da      	ldr	r2, [r3, #12]
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	60cb      	str	r3, [r1, #12]
 8000e8a:	e006      	b.n	8000e9a <HAL_GPIO_Init+0x286>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e8c:	4917      	ldr	r1, [pc, #92]	; (8000eec <HAL_GPIO_Init+0x2d8>)
 8000e8e:	4b17      	ldr	r3, [pc, #92]	; (8000eec <HAL_GPIO_Init+0x2d8>)
 8000e90:	68da      	ldr	r2, [r3, #12]
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	4013      	ands	r3, r2
 8000e98:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8000ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea2:	2b0f      	cmp	r3, #15
 8000ea4:	f67f aec8 	bls.w	8000c38 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	372c      	adds	r7, #44	; 0x2c
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	10210000 	.word	0x10210000
 8000eb8:	10110000 	.word	0x10110000
 8000ebc:	10120000 	.word	0x10120000
 8000ec0:	10310000 	.word	0x10310000
 8000ec4:	10320000 	.word	0x10320000
 8000ec8:	10220000 	.word	0x10220000
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40010000 	.word	0x40010000
 8000ed4:	40010800 	.word	0x40010800
 8000ed8:	40010c00 	.word	0x40010c00
 8000edc:	40011000 	.word	0x40011000
 8000ee0:	40011400 	.word	0x40011400
 8000ee4:	40011800 	.word	0x40011800
 8000ee8:	40011c00 	.word	0x40011c00
 8000eec:	40010400 	.word	0x40010400

08000ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	807b      	strh	r3, [r7, #2]
 8000efc:	4613      	mov	r3, r2
 8000efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f00:	787b      	ldrb	r3, [r7, #1]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f06:	887a      	ldrh	r2, [r7, #2]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f0c:	e003      	b.n	8000f16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f0e:	887b      	ldrh	r3, [r7, #2]
 8000f10:	041a      	lsls	r2, r3, #16
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	611a      	str	r2, [r3, #16]
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr

08000f20 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68da      	ldr	r2, [r3, #12]
 8000f30:	887b      	ldrh	r3, [r7, #2]
 8000f32:	405a      	eors	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	60da      	str	r2, [r3, #12]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
	...

08000f44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f000 8087 	beq.w	800106c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f5e:	4b92      	ldr	r3, [pc, #584]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 030c 	and.w	r3, r3, #12
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	d00c      	beq.n	8000f84 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f6a:	4b8f      	ldr	r3, [pc, #572]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 030c 	and.w	r3, r3, #12
 8000f72:	2b08      	cmp	r3, #8
 8000f74:	d112      	bne.n	8000f9c <HAL_RCC_OscConfig+0x58>
 8000f76:	4b8c      	ldr	r3, [pc, #560]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f82:	d10b      	bne.n	8000f9c <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f84:	4b88      	ldr	r3, [pc, #544]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d06c      	beq.n	800106a <HAL_RCC_OscConfig+0x126>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d168      	bne.n	800106a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e22d      	b.n	80013f8 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fa4:	d106      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x70>
 8000fa6:	4a80      	ldr	r2, [pc, #512]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8000fa8:	4b7f      	ldr	r3, [pc, #508]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	e02e      	b.n	8001012 <HAL_RCC_OscConfig+0xce>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d10c      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x92>
 8000fbc:	4a7a      	ldr	r2, [pc, #488]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8000fbe:	4b7a      	ldr	r3, [pc, #488]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	4a77      	ldr	r2, [pc, #476]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8000fca:	4b77      	ldr	r3, [pc, #476]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fd2:	6013      	str	r3, [r2, #0]
 8000fd4:	e01d      	b.n	8001012 <HAL_RCC_OscConfig+0xce>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fde:	d10c      	bne.n	8000ffa <HAL_RCC_OscConfig+0xb6>
 8000fe0:	4a71      	ldr	r2, [pc, #452]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8000fe2:	4b71      	ldr	r3, [pc, #452]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4a6e      	ldr	r2, [pc, #440]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8000fee:	4b6e      	ldr	r3, [pc, #440]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	e00b      	b.n	8001012 <HAL_RCC_OscConfig+0xce>
 8000ffa:	4a6b      	ldr	r2, [pc, #428]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8000ffc:	4b6a      	ldr	r3, [pc, #424]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	4a68      	ldr	r2, [pc, #416]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8001008:	4b67      	ldr	r3, [pc, #412]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001010:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d013      	beq.n	8001042 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101a:	f7ff f95b 	bl	80002d4 <HAL_GetTick>
 800101e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001020:	e008      	b.n	8001034 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001022:	f7ff f957 	bl	80002d4 <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b64      	cmp	r3, #100	; 0x64
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e1e1      	b.n	80013f8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001034:	4b5c      	ldr	r3, [pc, #368]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d0f0      	beq.n	8001022 <HAL_RCC_OscConfig+0xde>
 8001040:	e014      	b.n	800106c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001042:	f7ff f947 	bl	80002d4 <HAL_GetTick>
 8001046:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001048:	e008      	b.n	800105c <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800104a:	f7ff f943 	bl	80002d4 <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b64      	cmp	r3, #100	; 0x64
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e1cd      	b.n	80013f8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800105c:	4b52      	ldr	r3, [pc, #328]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1f0      	bne.n	800104a <HAL_RCC_OscConfig+0x106>
 8001068:	e000      	b.n	800106c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800106a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d063      	beq.n	8001140 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001078:	4b4b      	ldr	r3, [pc, #300]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 030c 	and.w	r3, r3, #12
 8001080:	2b00      	cmp	r3, #0
 8001082:	d00b      	beq.n	800109c <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001084:	4b48      	ldr	r3, [pc, #288]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 030c 	and.w	r3, r3, #12
 800108c:	2b08      	cmp	r3, #8
 800108e:	d11c      	bne.n	80010ca <HAL_RCC_OscConfig+0x186>
 8001090:	4b45      	ldr	r3, [pc, #276]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d116      	bne.n	80010ca <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800109c:	4b42      	ldr	r3, [pc, #264]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d005      	beq.n	80010b4 <HAL_RCC_OscConfig+0x170>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d001      	beq.n	80010b4 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e1a1      	b.n	80013f8 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b4:	493c      	ldr	r1, [pc, #240]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 80010b6:	4b3c      	ldr	r3, [pc, #240]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010c8:	e03a      	b.n	8001140 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d020      	beq.n	8001114 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010d2:	4b36      	ldr	r3, [pc, #216]	; (80011ac <HAL_RCC_OscConfig+0x268>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d8:	f7ff f8fc 	bl	80002d4 <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010e0:	f7ff f8f8 	bl	80002d4 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e182      	b.n	80013f8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f2:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d0f0      	beq.n	80010e0 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fe:	492a      	ldr	r1, [pc, #168]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8001100:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	4313      	orrs	r3, r2
 8001110:	600b      	str	r3, [r1, #0]
 8001112:	e015      	b.n	8001140 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001114:	4b25      	ldr	r3, [pc, #148]	; (80011ac <HAL_RCC_OscConfig+0x268>)
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111a:	f7ff f8db 	bl	80002d4 <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001120:	e008      	b.n	8001134 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001122:	f7ff f8d7 	bl	80002d4 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e161      	b.n	80013f8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001134:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1f0      	bne.n	8001122 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0308 	and.w	r3, r3, #8
 8001148:	2b00      	cmp	r3, #0
 800114a:	d039      	beq.n	80011c0 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d019      	beq.n	8001188 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001154:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 8001156:	2201      	movs	r2, #1
 8001158:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115a:	f7ff f8bb 	bl	80002d4 <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001160:	e008      	b.n	8001174 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001162:	f7ff f8b7 	bl	80002d4 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e141      	b.n	80013f8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <HAL_RCC_OscConfig+0x264>)
 8001176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d0f0      	beq.n	8001162 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8001180:	2001      	movs	r0, #1
 8001182:	f000 fab1 	bl	80016e8 <RCC_Delay>
 8001186:	e01b      	b.n	80011c0 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <HAL_RCC_OscConfig+0x26c>)
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800118e:	f7ff f8a1 	bl	80002d4 <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001194:	e00e      	b.n	80011b4 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001196:	f7ff f89d 	bl	80002d4 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d907      	bls.n	80011b4 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e127      	b.n	80013f8 <HAL_RCC_OscConfig+0x4b4>
 80011a8:	40021000 	.word	0x40021000
 80011ac:	42420000 	.word	0x42420000
 80011b0:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b4:	4b92      	ldr	r3, [pc, #584]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 80011b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1ea      	bne.n	8001196 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 80a6 	beq.w	800131a <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011d2:	4b8b      	ldr	r3, [pc, #556]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d10d      	bne.n	80011fa <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	4a88      	ldr	r2, [pc, #544]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 80011e0:	4b87      	ldr	r3, [pc, #540]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 80011e2:	69db      	ldr	r3, [r3, #28]
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e8:	61d3      	str	r3, [r2, #28]
 80011ea:	4b85      	ldr	r3, [pc, #532]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011f6:	2301      	movs	r3, #1
 80011f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011fa:	4b82      	ldr	r3, [pc, #520]	; (8001404 <HAL_RCC_OscConfig+0x4c0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001202:	2b00      	cmp	r3, #0
 8001204:	d118      	bne.n	8001238 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001206:	4a7f      	ldr	r2, [pc, #508]	; (8001404 <HAL_RCC_OscConfig+0x4c0>)
 8001208:	4b7e      	ldr	r3, [pc, #504]	; (8001404 <HAL_RCC_OscConfig+0x4c0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001212:	f7ff f85f 	bl	80002d4 <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800121a:	f7ff f85b 	bl	80002d4 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b64      	cmp	r3, #100	; 0x64
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e0e5      	b.n	80013f8 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800122c:	4b75      	ldr	r3, [pc, #468]	; (8001404 <HAL_RCC_OscConfig+0x4c0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001234:	2b00      	cmp	r3, #0
 8001236:	d0f0      	beq.n	800121a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d106      	bne.n	800124e <HAL_RCC_OscConfig+0x30a>
 8001240:	4a6f      	ldr	r2, [pc, #444]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 8001242:	4b6f      	ldr	r3, [pc, #444]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6213      	str	r3, [r2, #32]
 800124c:	e02d      	b.n	80012aa <HAL_RCC_OscConfig+0x366>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10c      	bne.n	8001270 <HAL_RCC_OscConfig+0x32c>
 8001256:	4a6a      	ldr	r2, [pc, #424]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 8001258:	4b69      	ldr	r3, [pc, #420]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	f023 0301 	bic.w	r3, r3, #1
 8001260:	6213      	str	r3, [r2, #32]
 8001262:	4a67      	ldr	r2, [pc, #412]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 8001264:	4b66      	ldr	r3, [pc, #408]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	f023 0304 	bic.w	r3, r3, #4
 800126c:	6213      	str	r3, [r2, #32]
 800126e:	e01c      	b.n	80012aa <HAL_RCC_OscConfig+0x366>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	2b05      	cmp	r3, #5
 8001276:	d10c      	bne.n	8001292 <HAL_RCC_OscConfig+0x34e>
 8001278:	4a61      	ldr	r2, [pc, #388]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 800127a:	4b61      	ldr	r3, [pc, #388]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 800127c:	6a1b      	ldr	r3, [r3, #32]
 800127e:	f043 0304 	orr.w	r3, r3, #4
 8001282:	6213      	str	r3, [r2, #32]
 8001284:	4a5e      	ldr	r2, [pc, #376]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 8001286:	4b5e      	ldr	r3, [pc, #376]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6213      	str	r3, [r2, #32]
 8001290:	e00b      	b.n	80012aa <HAL_RCC_OscConfig+0x366>
 8001292:	4a5b      	ldr	r2, [pc, #364]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 8001294:	4b5a      	ldr	r3, [pc, #360]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	f023 0301 	bic.w	r3, r3, #1
 800129c:	6213      	str	r3, [r2, #32]
 800129e:	4a58      	ldr	r2, [pc, #352]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 80012a0:	4b57      	ldr	r3, [pc, #348]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	f023 0304 	bic.w	r3, r3, #4
 80012a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d015      	beq.n	80012de <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b2:	f7ff f80f 	bl	80002d4 <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b8:	e00a      	b.n	80012d0 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ba:	f7ff f80b 	bl	80002d4 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e093      	b.n	80013f8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d0:	4b4b      	ldr	r3, [pc, #300]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 80012d2:	6a1b      	ldr	r3, [r3, #32]
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0ee      	beq.n	80012ba <HAL_RCC_OscConfig+0x376>
 80012dc:	e014      	b.n	8001308 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012de:	f7fe fff9 	bl	80002d4 <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e4:	e00a      	b.n	80012fc <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012e6:	f7fe fff5 	bl	80002d4 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e07d      	b.n	80013f8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012fc:	4b40      	ldr	r3, [pc, #256]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 80012fe:	6a1b      	ldr	r3, [r3, #32]
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1ee      	bne.n	80012e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001308:	7dfb      	ldrb	r3, [r7, #23]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d105      	bne.n	800131a <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800130e:	4a3c      	ldr	r2, [pc, #240]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 8001310:	4b3b      	ldr	r3, [pc, #236]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 8001312:	69db      	ldr	r3, [r3, #28]
 8001314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001318:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d069      	beq.n	80013f6 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001322:	4b37      	ldr	r3, [pc, #220]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	2b08      	cmp	r3, #8
 800132c:	d061      	beq.n	80013f2 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	2b02      	cmp	r3, #2
 8001334:	d146      	bne.n	80013c4 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001336:	4b34      	ldr	r3, [pc, #208]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133c:	f7fe ffca 	bl	80002d4 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001344:	f7fe ffc6 	bl	80002d4 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e050      	b.n	80013f8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001356:	4b2a      	ldr	r3, [pc, #168]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f0      	bne.n	8001344 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a1b      	ldr	r3, [r3, #32]
 8001366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800136a:	d108      	bne.n	800137e <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800136c:	4924      	ldr	r1, [pc, #144]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 800136e:	4b24      	ldr	r3, [pc, #144]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	4313      	orrs	r3, r2
 800137c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800137e:	4820      	ldr	r0, [pc, #128]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 8001380:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a19      	ldr	r1, [r3, #32]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001390:	430b      	orrs	r3, r1
 8001392:	4313      	orrs	r3, r2
 8001394:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001396:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 8001398:	2201      	movs	r2, #1
 800139a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139c:	f7fe ff9a 	bl	80002d4 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013a4:	f7fe ff96 	bl	80002d4 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e020      	b.n	80013f8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0f0      	beq.n	80013a4 <HAL_RCC_OscConfig+0x460>
 80013c2:	e018      	b.n	80013f6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013c4:	4b10      	ldr	r3, [pc, #64]	; (8001408 <HAL_RCC_OscConfig+0x4c4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ca:	f7fe ff83 	bl	80002d4 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013d2:	f7fe ff7f 	bl	80002d4 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e009      	b.n	80013f8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_RCC_OscConfig+0x4bc>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f0      	bne.n	80013d2 <HAL_RCC_OscConfig+0x48e>
 80013f0:	e001      	b.n	80013f6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40021000 	.word	0x40021000
 8001404:	40007000 	.word	0x40007000
 8001408:	42420060 	.word	0x42420060

0800140c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800141a:	4b7e      	ldr	r3, [pc, #504]	; (8001614 <HAL_RCC_ClockConfig+0x208>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0207 	and.w	r2, r3, #7
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	429a      	cmp	r2, r3
 8001426:	d210      	bcs.n	800144a <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001428:	497a      	ldr	r1, [pc, #488]	; (8001614 <HAL_RCC_ClockConfig+0x208>)
 800142a:	4b7a      	ldr	r3, [pc, #488]	; (8001614 <HAL_RCC_ClockConfig+0x208>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f023 0207 	bic.w	r2, r3, #7
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	4313      	orrs	r3, r2
 8001436:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001438:	4b76      	ldr	r3, [pc, #472]	; (8001614 <HAL_RCC_ClockConfig+0x208>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0207 	and.w	r2, r3, #7
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d001      	beq.n	800144a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e0e0      	b.n	800160c <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d020      	beq.n	8001498 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	2b00      	cmp	r3, #0
 8001460:	d005      	beq.n	800146e <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001462:	4a6d      	ldr	r2, [pc, #436]	; (8001618 <HAL_RCC_ClockConfig+0x20c>)
 8001464:	4b6c      	ldr	r3, [pc, #432]	; (8001618 <HAL_RCC_ClockConfig+0x20c>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800146c:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	2b00      	cmp	r3, #0
 8001478:	d005      	beq.n	8001486 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800147a:	4a67      	ldr	r2, [pc, #412]	; (8001618 <HAL_RCC_ClockConfig+0x20c>)
 800147c:	4b66      	ldr	r3, [pc, #408]	; (8001618 <HAL_RCC_ClockConfig+0x20c>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001484:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001486:	4964      	ldr	r1, [pc, #400]	; (8001618 <HAL_RCC_ClockConfig+0x20c>)
 8001488:	4b63      	ldr	r3, [pc, #396]	; (8001618 <HAL_RCC_ClockConfig+0x20c>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	4313      	orrs	r3, r2
 8001496:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d06a      	beq.n	800157a <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d107      	bne.n	80014bc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ac:	4b5a      	ldr	r3, [pc, #360]	; (8001618 <HAL_RCC_ClockConfig+0x20c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d115      	bne.n	80014e4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e0a7      	b.n	800160c <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d107      	bne.n	80014d4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c4:	4b54      	ldr	r3, [pc, #336]	; (8001618 <HAL_RCC_ClockConfig+0x20c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d109      	bne.n	80014e4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e09b      	b.n	800160c <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d4:	4b50      	ldr	r3, [pc, #320]	; (8001618 <HAL_RCC_ClockConfig+0x20c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d101      	bne.n	80014e4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e093      	b.n	800160c <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014e4:	494c      	ldr	r1, [pc, #304]	; (8001618 <HAL_RCC_ClockConfig+0x20c>)
 80014e6:	4b4c      	ldr	r3, [pc, #304]	; (8001618 <HAL_RCC_ClockConfig+0x20c>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f023 0203 	bic.w	r2, r3, #3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014f6:	f7fe feed 	bl	80002d4 <HAL_GetTick>
 80014fa:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d112      	bne.n	800152a <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001504:	e00a      	b.n	800151c <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001506:	f7fe fee5 	bl	80002d4 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	f241 3288 	movw	r2, #5000	; 0x1388
 8001514:	4293      	cmp	r3, r2
 8001516:	d901      	bls.n	800151c <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e077      	b.n	800160c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800151c:	4b3e      	ldr	r3, [pc, #248]	; (8001618 <HAL_RCC_ClockConfig+0x20c>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 030c 	and.w	r3, r3, #12
 8001524:	2b04      	cmp	r3, #4
 8001526:	d1ee      	bne.n	8001506 <HAL_RCC_ClockConfig+0xfa>
 8001528:	e027      	b.n	800157a <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b02      	cmp	r3, #2
 8001530:	d11d      	bne.n	800156e <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001532:	e00a      	b.n	800154a <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001534:	f7fe fece 	bl	80002d4 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001542:	4293      	cmp	r3, r2
 8001544:	d901      	bls.n	800154a <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e060      	b.n	800160c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800154a:	4b33      	ldr	r3, [pc, #204]	; (8001618 <HAL_RCC_ClockConfig+0x20c>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 030c 	and.w	r3, r3, #12
 8001552:	2b08      	cmp	r3, #8
 8001554:	d1ee      	bne.n	8001534 <HAL_RCC_ClockConfig+0x128>
 8001556:	e010      	b.n	800157a <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001558:	f7fe febc 	bl	80002d4 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	f241 3288 	movw	r2, #5000	; 0x1388
 8001566:	4293      	cmp	r3, r2
 8001568:	d901      	bls.n	800156e <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e04e      	b.n	800160c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800156e:	4b2a      	ldr	r3, [pc, #168]	; (8001618 <HAL_RCC_ClockConfig+0x20c>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1ee      	bne.n	8001558 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800157a:	4b26      	ldr	r3, [pc, #152]	; (8001614 <HAL_RCC_ClockConfig+0x208>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0207 	and.w	r2, r3, #7
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	429a      	cmp	r2, r3
 8001586:	d910      	bls.n	80015aa <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001588:	4922      	ldr	r1, [pc, #136]	; (8001614 <HAL_RCC_ClockConfig+0x208>)
 800158a:	4b22      	ldr	r3, [pc, #136]	; (8001614 <HAL_RCC_ClockConfig+0x208>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f023 0207 	bic.w	r2, r3, #7
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	4313      	orrs	r3, r2
 8001596:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001598:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <HAL_RCC_ClockConfig+0x208>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0207 	and.w	r2, r3, #7
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d001      	beq.n	80015aa <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e030      	b.n	800160c <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d008      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015b6:	4918      	ldr	r1, [pc, #96]	; (8001618 <HAL_RCC_ClockConfig+0x20c>)
 80015b8:	4b17      	ldr	r3, [pc, #92]	; (8001618 <HAL_RCC_ClockConfig+0x20c>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d009      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015d4:	4910      	ldr	r1, [pc, #64]	; (8001618 <HAL_RCC_ClockConfig+0x20c>)
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <HAL_RCC_ClockConfig+0x20c>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015e8:	f000 f81c 	bl	8001624 <HAL_RCC_GetSysClockFreq>
 80015ec:	4601      	mov	r1, r0
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <HAL_RCC_ClockConfig+0x20c>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	091b      	lsrs	r3, r3, #4
 80015f4:	f003 030f 	and.w	r3, r3, #15
 80015f8:	4a08      	ldr	r2, [pc, #32]	; (800161c <HAL_RCC_ClockConfig+0x210>)
 80015fa:	5cd3      	ldrb	r3, [r2, r3]
 80015fc:	fa21 f303 	lsr.w	r3, r1, r3
 8001600:	4a07      	ldr	r2, [pc, #28]	; (8001620 <HAL_RCC_ClockConfig+0x214>)
 8001602:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001604:	2000      	movs	r0, #0
 8001606:	f7fe fe23 	bl	8000250 <HAL_InitTick>
  
  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40022000 	.word	0x40022000
 8001618:	40021000 	.word	0x40021000
 800161c:	08005bbc 	.word	0x08005bbc
 8001620:	2000004c 	.word	0x2000004c

08001624 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001624:	b490      	push	{r4, r7}
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800162a:	4b2a      	ldr	r3, [pc, #168]	; (80016d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800162c:	1d3c      	adds	r4, r7, #4
 800162e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001630:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001634:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
 800163e:	2300      	movs	r3, #0
 8001640:	61bb      	str	r3, [r7, #24]
 8001642:	2300      	movs	r3, #0
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800164e:	4b23      	ldr	r3, [pc, #140]	; (80016dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b04      	cmp	r3, #4
 800165c:	d002      	beq.n	8001664 <HAL_RCC_GetSysClockFreq+0x40>
 800165e:	2b08      	cmp	r3, #8
 8001660:	d003      	beq.n	800166a <HAL_RCC_GetSysClockFreq+0x46>
 8001662:	e02d      	b.n	80016c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001664:	4b1e      	ldr	r3, [pc, #120]	; (80016e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001666:	623b      	str	r3, [r7, #32]
      break;
 8001668:	e02d      	b.n	80016c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	0c9b      	lsrs	r3, r3, #18
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001676:	4413      	add	r3, r2
 8001678:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800167c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d013      	beq.n	80016b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001688:	4b14      	ldr	r3, [pc, #80]	; (80016dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	0c5b      	lsrs	r3, r3, #17
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001696:	4413      	add	r3, r2
 8001698:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800169c:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	4a0f      	ldr	r2, [pc, #60]	; (80016e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016a2:	fb02 f203 	mul.w	r2, r2, r3
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
 80016ae:	e004      	b.n	80016ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	4a0c      	ldr	r2, [pc, #48]	; (80016e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016b4:	fb02 f303 	mul.w	r3, r2, r3
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	623b      	str	r3, [r7, #32]
      break;
 80016be:	e002      	b.n	80016c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016c0:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016c2:	623b      	str	r3, [r7, #32]
      break;
 80016c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016c6:	6a3b      	ldr	r3, [r7, #32]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3728      	adds	r7, #40	; 0x28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc90      	pop	{r4, r7}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	08005b04 	.word	0x08005b04
 80016d8:	08005b14 	.word	0x08005b14
 80016dc:	40021000 	.word	0x40021000
 80016e0:	007a1200 	.word	0x007a1200
 80016e4:	003d0900 	.word	0x003d0900

080016e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016f0:	4b0a      	ldr	r3, [pc, #40]	; (800171c <RCC_Delay+0x34>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <RCC_Delay+0x38>)
 80016f6:	fba2 2303 	umull	r2, r3, r2, r3
 80016fa:	0a5b      	lsrs	r3, r3, #9
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	fb02 f303 	mul.w	r3, r2, r3
 8001702:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001704:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	1e5a      	subs	r2, r3, #1
 800170a:	60fa      	str	r2, [r7, #12]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1f9      	bne.n	8001704 <RCC_Delay+0x1c>
}
 8001710:	bf00      	nop
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	2000004c 	.word	0x2000004c
 8001720:	10624dd3 	.word	0x10624dd3

08001724 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	; 0x28
 8001728:	af02      	add	r7, sp, #8
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	4613      	mov	r3, r2
 8001732:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001738:	2300      	movs	r3, #0
 800173a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001742:	2b01      	cmp	r3, #1
 8001744:	d101      	bne.n	800174a <HAL_SPI_Transmit+0x26>
 8001746:	2302      	movs	r3, #2
 8001748:	e123      	b.n	8001992 <HAL_SPI_Transmit+0x26e>
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001752:	f7fe fdbf 	bl	80002d4 <HAL_GetTick>
 8001756:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b01      	cmp	r3, #1
 8001762:	d002      	beq.n	800176a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001764:	2302      	movs	r3, #2
 8001766:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001768:	e10a      	b.n	8001980 <HAL_SPI_Transmit+0x25c>
  }

  if((pData == NULL ) || (Size == 0U))
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d002      	beq.n	8001776 <HAL_SPI_Transmit+0x52>
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d102      	bne.n	800177c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	77fb      	strb	r3, [r7, #31]
    goto error;
 800177a:	e101      	b.n	8001980 <HAL_SPI_Transmit+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2203      	movs	r2, #3
 8001780:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2200      	movs	r2, #0
 8001788:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	68ba      	ldr	r2, [r7, #8]
 800178e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	88fa      	ldrh	r2, [r7, #6]
 8001794:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	88fa      	ldrh	r2, [r7, #6]
 800179a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2200      	movs	r2, #0
 80017a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2200      	movs	r2, #0
 80017a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2200      	movs	r2, #0
 80017ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2200      	movs	r2, #0
 80017b2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2200      	movs	r2, #0
 80017b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017c2:	d107      	bne.n	80017d4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017de:	2b40      	cmp	r3, #64	; 0x40
 80017e0:	d007      	beq.n	80017f2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017fa:	d147      	bne.n	800188c <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d004      	beq.n	800180e <HAL_SPI_Transmit+0xea>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001808:	b29b      	uxth	r3, r3
 800180a:	2b01      	cmp	r3, #1
 800180c:	d138      	bne.n	8001880 <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	8812      	ldrh	r2, [r2, #0]
 8001816:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	3302      	adds	r3, #2
 800181c:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001822:	b29b      	uxth	r3, r3
 8001824:	3b01      	subs	r3, #1
 8001826:	b29a      	uxth	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800182c:	e028      	b.n	8001880 <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b02      	cmp	r3, #2
 800183a:	d10f      	bne.n	800185c <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68ba      	ldr	r2, [r7, #8]
 8001842:	8812      	ldrh	r2, [r2, #0]
 8001844:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	3302      	adds	r3, #2
 800184a:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001850:	b29b      	uxth	r3, r3
 8001852:	3b01      	subs	r3, #1
 8001854:	b29a      	uxth	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	86da      	strh	r2, [r3, #54]	; 0x36
 800185a:	e011      	b.n	8001880 <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00b      	beq.n	800187a <HAL_SPI_Transmit+0x156>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001868:	d00a      	beq.n	8001880 <HAL_SPI_Transmit+0x15c>
 800186a:	f7fe fd33 	bl	80002d4 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	1ad2      	subs	r2, r2, r3
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d302      	bcc.n	8001880 <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800187e:	e07f      	b.n	8001980 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001884:	b29b      	uxth	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1d1      	bne.n	800182e <HAL_SPI_Transmit+0x10a>
 800188a:	e048      	b.n	800191e <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d004      	beq.n	800189e <HAL_SPI_Transmit+0x17a>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001898:	b29b      	uxth	r3, r3
 800189a:	2b01      	cmp	r3, #1
 800189c:	d13a      	bne.n	8001914 <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	330c      	adds	r3, #12
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	7812      	ldrb	r2, [r2, #0]
 80018a8:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	3301      	adds	r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	3b01      	subs	r3, #1
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80018be:	e029      	b.n	8001914 <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d110      	bne.n	80018f0 <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	330c      	adds	r3, #12
 80018d4:	68ba      	ldr	r2, [r7, #8]
 80018d6:	7812      	ldrb	r2, [r2, #0]
 80018d8:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	3301      	adds	r3, #1
 80018de:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	3b01      	subs	r3, #1
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80018ee:	e011      	b.n	8001914 <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00b      	beq.n	800190e <HAL_SPI_Transmit+0x1ea>
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018fc:	d00a      	beq.n	8001914 <HAL_SPI_Transmit+0x1f0>
 80018fe:	f7fe fce9 	bl	80002d4 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	1ad2      	subs	r2, r2, r3
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d302      	bcc.n	8001914 <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001912:	e035      	b.n	8001980 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001918:	b29b      	uxth	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1d0      	bne.n	80018c0 <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	2201      	movs	r2, #1
 8001926:	2102      	movs	r1, #2
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f000 fc66 	bl	80021fa <SPI_WaitFlagStateUntilTimeout>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d002      	beq.n	800193a <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001938:	e022      	b.n	8001980 <HAL_SPI_Transmit+0x25c>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	6839      	ldr	r1, [r7, #0]
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f000 fcc4 	bl	80022cc <SPI_CheckFlag_BSY>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d005      	beq.n	8001956 <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2220      	movs	r2, #32
 8001952:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001954:	e014      	b.n	8001980 <HAL_SPI_Transmit+0x25c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10a      	bne.n	8001974 <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001990:	7ffb      	ldrb	r3, [r7, #31]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3720      	adds	r7, #32
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b08c      	sub	sp, #48	; 0x30
 800199e:	af02      	add	r7, sp, #8
 80019a0:	60f8      	str	r0, [r7, #12]
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
 80019a6:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61fb      	str	r3, [r7, #28]
 80019ac:	2300      	movs	r3, #0
 80019ae:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 80019b4:	2301      	movs	r3, #1
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d101      	bne.n	80019cc <HAL_SPI_TransmitReceive+0x32>
 80019c8:	2302      	movs	r3, #2
 80019ca:	e181      	b.n	8001cd0 <HAL_SPI_TransmitReceive+0x336>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019d4:	f7fe fc7e 	bl	80002d4 <HAL_GetTick>
 80019d8:	6178      	str	r0, [r7, #20]
  
  tmp  = hspi->State;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	61bb      	str	r3, [r7, #24]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d00e      	beq.n	8001a0e <HAL_SPI_TransmitReceive+0x74>
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80019f6:	d106      	bne.n	8001a06 <HAL_SPI_TransmitReceive+0x6c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d102      	bne.n	8001a06 <HAL_SPI_TransmitReceive+0x6c>
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d003      	beq.n	8001a0e <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8001a06:	2302      	movs	r3, #2
 8001a08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001a0c:	e156      	b.n	8001cbc <HAL_SPI_TransmitReceive+0x322>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d005      	beq.n	8001a20 <HAL_SPI_TransmitReceive+0x86>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d002      	beq.n	8001a20 <HAL_SPI_TransmitReceive+0x86>
 8001a1a:	887b      	ldrh	r3, [r7, #2]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d103      	bne.n	8001a28 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001a26:	e149      	b.n	8001cbc <HAL_SPI_TransmitReceive+0x322>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d103      	bne.n	8001a3c <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2205      	movs	r2, #5
 8001a38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	887a      	ldrh	r2, [r7, #2]
 8001a4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	887a      	ldrh	r2, [r7, #2]
 8001a52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	887a      	ldrh	r2, [r7, #2]
 8001a5e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	887a      	ldrh	r2, [r7, #2]
 8001a64:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a7c:	2b40      	cmp	r3, #64	; 0x40
 8001a7e:	d007      	beq.n	8001a90 <HAL_SPI_TransmitReceive+0xf6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	6812      	ldr	r2, [r2, #0]
 8001a88:	6812      	ldr	r2, [r2, #0]
 8001a8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a98:	d171      	bne.n	8001b7e <HAL_SPI_TransmitReceive+0x1e4>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d004      	beq.n	8001aac <HAL_SPI_TransmitReceive+0x112>
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d15d      	bne.n	8001b68 <HAL_SPI_TransmitReceive+0x1ce>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	8812      	ldrh	r2, [r2, #0]
 8001ab4:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	3302      	adds	r3, #2
 8001aba:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001aca:	e04d      	b.n	8001b68 <HAL_SPI_TransmitReceive+0x1ce>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d01c      	beq.n	8001b0c <HAL_SPI_TransmitReceive+0x172>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d017      	beq.n	8001b0c <HAL_SPI_TransmitReceive+0x172>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d110      	bne.n	8001b0c <HAL_SPI_TransmitReceive+0x172>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	8812      	ldrh	r2, [r2, #0]
 8001af2:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	3302      	adds	r3, #2
 8001af8:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	3b01      	subs	r3, #1
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d018      	beq.n	8001b48 <HAL_SPI_TransmitReceive+0x1ae>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d111      	bne.n	8001b48 <HAL_SPI_TransmitReceive+0x1ae>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3302      	adds	r3, #2
 8001b34:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8001b44:	2301      	movs	r3, #1
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b4e:	d00b      	beq.n	8001b68 <HAL_SPI_TransmitReceive+0x1ce>
 8001b50:	f7fe fbc0 	bl	80002d4 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	1ad2      	subs	r2, r2, r3
 8001b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d303      	bcc.n	8001b68 <HAL_SPI_TransmitReceive+0x1ce>
      {
        errorcode = HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8001b66:	e0a9      	b.n	8001cbc <HAL_SPI_TransmitReceive+0x322>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1ac      	bne.n	8001acc <HAL_SPI_TransmitReceive+0x132>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1a7      	bne.n	8001acc <HAL_SPI_TransmitReceive+0x132>
 8001b7c:	e071      	b.n	8001c62 <HAL_SPI_TransmitReceive+0x2c8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d004      	beq.n	8001b90 <HAL_SPI_TransmitReceive+0x1f6>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d15e      	bne.n	8001c4e <HAL_SPI_TransmitReceive+0x2b4>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	330c      	adds	r3, #12
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	7812      	ldrb	r2, [r2, #0]
 8001b9a:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001bb0:	e04d      	b.n	8001c4e <HAL_SPI_TransmitReceive+0x2b4>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d01d      	beq.n	8001bf4 <HAL_SPI_TransmitReceive+0x25a>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d018      	beq.n	8001bf4 <HAL_SPI_TransmitReceive+0x25a>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d111      	bne.n	8001bf4 <HAL_SPI_TransmitReceive+0x25a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f103 020c 	add.w	r2, r3, #12
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	1c59      	adds	r1, r3, #1
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	3b01      	subs	r3, #1
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d017      	beq.n	8001c2e <HAL_SPI_TransmitReceive+0x294>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d110      	bne.n	8001c2e <HAL_SPI_TransmitReceive+0x294>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	6812      	ldr	r2, [r2, #0]
 8001c16:	68d2      	ldr	r2, [r2, #12]
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c34:	d00b      	beq.n	8001c4e <HAL_SPI_TransmitReceive+0x2b4>
 8001c36:	f7fe fb4d 	bl	80002d4 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	1ad2      	subs	r2, r2, r3
 8001c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d303      	bcc.n	8001c4e <HAL_SPI_TransmitReceive+0x2b4>
      {
        errorcode = HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8001c4c:	e036      	b.n	8001cbc <HAL_SPI_TransmitReceive+0x322>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1ac      	bne.n	8001bb2 <HAL_SPI_TransmitReceive+0x218>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1a7      	bne.n	8001bb2 <HAL_SPI_TransmitReceive+0x218>
    }
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c68:	2201      	movs	r2, #1
 8001c6a:	2102      	movs	r1, #2
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 fac4 	bl	80021fa <SPI_WaitFlagStateUntilTimeout>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_SPI_TransmitReceive+0x2e6>
  {
    errorcode = HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001c7e:	e01d      	b.n	8001cbc <HAL_SPI_TransmitReceive+0x322>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f000 fb21 	bl	80022cc <SPI_CheckFlag_BSY>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d006      	beq.n	8001c9e <HAL_SPI_TransmitReceive+0x304>
  {
    errorcode = HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2220      	movs	r2, #32
 8001c9a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001c9c:	e00e      	b.n	8001cbc <HAL_SPI_TransmitReceive+0x322>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10a      	bne.n	8001cbc <HAL_SPI_TransmitReceive+0x322>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	693b      	ldr	r3, [r7, #16]
  }
  
error :
  hspi->State = HAL_SPI_STATE_READY;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001ccc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3728      	adds	r7, #40	; 0x28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	75fb      	strb	r3, [r7, #23]

  if((hspi->Init.Direction == SPI_DIRECTION_2LINES)&&(hspi->Init.Mode == SPI_MODE_MASTER))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d110      	bne.n	8001d14 <HAL_SPI_Receive_DMA+0x3c>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cfa:	d10b      	bne.n	8001d14 <HAL_SPI_Receive_DMA+0x3c>
  {
     hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2204      	movs	r2, #4
 8001d00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
     /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
     return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8001d04:	88fb      	ldrh	r3, [r7, #6]
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	68b9      	ldr	r1, [r7, #8]
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f000 f894 	bl	8001e38 <HAL_SPI_TransmitReceive_DMA>
 8001d10:	4603      	mov	r3, r0
 8001d12:	e087      	b.n	8001e24 <HAL_SPI_Receive_DMA+0x14c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_SPI_Receive_DMA+0x4a>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e080      	b.n	8001e24 <HAL_SPI_Receive_DMA+0x14c>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if(hspi->State != HAL_SPI_STATE_READY)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d002      	beq.n	8001d3c <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8001d36:	2302      	movs	r3, #2
 8001d38:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d3a:	e06e      	b.n	8001e1a <HAL_SPI_Receive_DMA+0x142>
  }

  if((pData == NULL) || (Size == 0U))
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <HAL_SPI_Receive_DMA+0x70>
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d102      	bne.n	8001d4e <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d4c:	e065      	b.n	8001e1a <HAL_SPI_Receive_DMA+0x142>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2204      	movs	r2, #4
 8001d52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	88fa      	ldrh	r2, [r7, #6]
 8001d66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	88fa      	ldrh	r2, [r7, #6]
 8001d6c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d8e:	d107      	bne.n	8001da0 <HAL_SPI_Receive_DMA+0xc8>
  {
    SPI_1LINE_RX(hspi);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d9e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da4:	4a21      	ldr	r2, [pc, #132]	; (8001e2c <HAL_SPI_Receive_DMA+0x154>)
 8001da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dac:	4a20      	ldr	r2, [pc, #128]	; (8001e30 <HAL_SPI_Receive_DMA+0x158>)
 8001dae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db4:	4a1f      	ldr	r2, [pc, #124]	; (8001e34 <HAL_SPI_Receive_DMA+0x15c>)
 8001db6:	631a      	str	r2, [r3, #48]	; 0x30

 /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	330c      	adds	r3, #12
 8001dca:	4619      	mov	r1, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	f7fe fc26 	bl	8000628 <HAL_DMA_Start_IT>

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de6:	2b40      	cmp	r3, #64	; 0x40
 8001de8:	d007      	beq.n	8001dfa <HAL_SPI_Receive_DMA+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	6812      	ldr	r2, [r2, #0]
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001df8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	6852      	ldr	r2, [r2, #4]
 8001e04:	f042 0220 	orr.w	r2, r2, #32
 8001e08:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	6852      	ldr	r2, [r2, #4]
 8001e14:	f042 0201 	orr.w	r2, r2, #1
 8001e18:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	08002183 	.word	0x08002183
 8001e30:	0800207d 	.word	0x0800207d
 8001e34:	080021bb 	.word	0x080021bb

08001e38 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @param  Size: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61bb      	str	r3, [r7, #24]
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_SPI_TransmitReceive_DMA+0x28>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e0c4      	b.n	8001fea <HAL_SPI_TransmitReceive_DMA+0x1b2>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmp  = hspi->State;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	61bb      	str	r3, [r7, #24]
  tmp1 = hspi->Init.Mode;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	617b      	str	r3, [r7, #20]
  if(!((tmp == HAL_SPI_STATE_READY) ||
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d00d      	beq.n	8001e9a <HAL_SPI_TransmitReceive_DMA+0x62>
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e84:	d106      	bne.n	8001e94 <HAL_SPI_TransmitReceive_DMA+0x5c>
      ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d102      	bne.n	8001e94 <HAL_SPI_TransmitReceive_DMA+0x5c>
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d002      	beq.n	8001e9a <HAL_SPI_TransmitReceive_DMA+0x62>
  {
    errorcode = HAL_BUSY;
 8001e94:	2302      	movs	r3, #2
 8001e96:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e98:	e0a2      	b.n	8001fe0 <HAL_SPI_TransmitReceive_DMA+0x1a8>
  }

  if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_SPI_TransmitReceive_DMA+0x74>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <HAL_SPI_TransmitReceive_DMA+0x74>
 8001ea6:	887b      	ldrh	r3, [r7, #2]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d102      	bne.n	8001eb2 <HAL_SPI_TransmitReceive_DMA+0x7a>
  {
    errorcode = HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001eb0:	e096      	b.n	8001fe0 <HAL_SPI_TransmitReceive_DMA+0x1a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d103      	bne.n	8001ec6 <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2205      	movs	r2, #5
 8001ec2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t*)pTxData;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	887a      	ldrh	r2, [r7, #2]
 8001ed6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	887a      	ldrh	r2, [r7, #2]
 8001edc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t*)pRxData;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	887a      	ldrh	r2, [r7, #2]
 8001ee8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	887a      	ldrh	r2, [r7, #2]
 8001eee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if(hspi->State == HAL_SPI_STATE_BUSY_RX)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d108      	bne.n	8001f1a <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0c:	4a39      	ldr	r2, [pc, #228]	; (8001ff4 <HAL_SPI_TransmitReceive_DMA+0x1bc>)
 8001f0e:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f14:	4a38      	ldr	r2, [pc, #224]	; (8001ff8 <HAL_SPI_TransmitReceive_DMA+0x1c0>)
 8001f16:	629a      	str	r2, [r3, #40]	; 0x28
 8001f18:	e007      	b.n	8001f2a <HAL_SPI_TransmitReceive_DMA+0xf2>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1e:	4a37      	ldr	r2, [pc, #220]	; (8001ffc <HAL_SPI_TransmitReceive_DMA+0x1c4>)
 8001f20:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f26:	4a36      	ldr	r2, [pc, #216]	; (8002000 <HAL_SPI_TransmitReceive_DMA+0x1c8>)
 8001f28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2e:	4a35      	ldr	r2, [pc, #212]	; (8002004 <HAL_SPI_TransmitReceive_DMA+0x1cc>)
 8001f30:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f36:	2200      	movs	r2, #0
 8001f38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	330c      	adds	r3, #12
 8001f44:	4619      	mov	r1, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	f7fe fb69 	bl	8000628 <HAL_DMA_Start_IT>

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	6852      	ldr	r2, [r2, #4]
 8001f60:	f042 0201 	orr.w	r2, r2, #1
 8001f64:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f72:	2200      	movs	r2, #0
 8001f74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f82:	2200      	movs	r2, #0
 8001f84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream */
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	4619      	mov	r1, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	330c      	adds	r3, #12
 8001f96:	461a      	mov	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	f7fe fb43 	bl	8000628 <HAL_DMA_Start_IT>

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fac:	2b40      	cmp	r3, #64	; 0x40
 8001fae:	d007      	beq.n	8001fc0 <HAL_SPI_TransmitReceive_DMA+0x188>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fbe:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	6812      	ldr	r2, [r2, #0]
 8001fc8:	6852      	ldr	r2, [r2, #4]
 8001fca:	f042 0220 	orr.w	r2, r2, #32
 8001fce:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	6852      	ldr	r2, [r2, #4]
 8001fda:	f042 0202 	orr.w	r2, r2, #2
 8001fde:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001fe8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3720      	adds	r7, #32
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	08002183 	.word	0x08002183
 8001ff8:	0800207d 	.word	0x0800207d
 8001ffc:	0800219f 	.word	0x0800219f
 8002000:	08002101 	.word	0x08002101
 8002004:	080021bb 	.word	0x080021bb

08002008 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
  */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr

0800201a <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
  */
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr

0800202c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
  */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr

0800203e <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
  */
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr

08002050 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
  */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr

08002062 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002070:	b2db      	uxtb	r3, r3
}
 8002072:	4618      	mov	r0, r3
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	60fb      	str	r3, [r7, #12]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
#endif /* USE_SPI_CRC */
 
  if((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0320 	and.w	r3, r3, #32
 8002094:	2b20      	cmp	r3, #32
 8002096:	d02d      	beq.n	80020f4 <SPI_DMAReceiveCplt+0x78>
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	6852      	ldr	r2, [r2, #4]
 80020a2:	f022 0203 	bic.w	r2, r2, #3
 80020a6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020b0:	d111      	bne.n	80020d6 <SPI_DMAReceiveCplt+0x5a>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020ba:	d004      	beq.n	80020c6 <SPI_DMAReceiveCplt+0x4a>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020c4:	d107      	bne.n	80020d6 <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	6812      	ldr	r2, [r2, #0]
 80020ce:	6812      	ldr	r2, [r2, #0]
 80020d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020d4:	601a      	str	r2, [r3, #0]
    }

    hspi->RxXferCount = 0U;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <SPI_DMAReceiveCplt+0x78>
    {
      HAL_SPI_ErrorCallback(hspi);
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f7ff ffaf 	bl	8002050 <HAL_SPI_ErrorCallback>
      return;
 80020f2:	e002      	b.n	80020fa <SPI_DMAReceiveCplt+0x7e>
    }
  }
  HAL_SPI_RxCpltCallback(hspi);
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f7ff ff87 	bl	8002008 <HAL_SPI_RxCpltCallback>
}
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
#if (USE_SPI_CRC != 0U)
  __IO int16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002112:	f7fe f8df 	bl	80002d4 <HAL_GetTick>
 8002116:	60b8      	str	r0, [r7, #8]

  if((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	2b20      	cmp	r3, #32
 8002124:	d027      	beq.n	8002176 <SPI_DMATransmitReceiveCplt+0x76>
      /* To avoid GCC warning */
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */
    /* Check the end of the transaction */
    if(SPI_CheckFlag_BSY(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	2164      	movs	r1, #100	; 0x64
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 f8ce 	bl	80022cc <SPI_CheckFlag_BSY>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d005      	beq.n	8002142 <SPI_DMATransmitReceiveCplt+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213a:	f043 0220 	orr.w	r2, r3, #32
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	6852      	ldr	r2, [r2, #4]
 800214c:	f022 0203 	bic.w	r2, r2, #3
 8002150:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <SPI_DMATransmitReceiveCplt+0x76>
    {
      HAL_SPI_ErrorCallback(hspi);
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f7ff ff6e 	bl	8002050 <HAL_SPI_ErrorCallback>
      return;
 8002174:	e002      	b.n	800217c <SPI_DMATransmitReceiveCplt+0x7c>
    }
  }
  HAL_SPI_TxRxCpltCallback(hspi);
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f7ff ff4f 	bl	800201a <HAL_SPI_TxRxCpltCallback>
}
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	60fb      	str	r3, [r7, #12]

  HAL_SPI_RxHalfCpltCallback(hspi);
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f7ff ff4b 	bl	800202c <HAL_SPI_RxHalfCpltCallback>
}
 8002196:	bf00      	nop
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b084      	sub	sp, #16
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	60fb      	str	r3, [r7, #12]

  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f7ff ff46 	bl	800203e <HAL_SPI_TxRxHalfCpltCallback>
}
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = (SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	60fb      	str	r3, [r7, #12]

/* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	6812      	ldr	r2, [r2, #0]
 80021d0:	6852      	ldr	r2, [r2, #4]
 80021d2:	f022 0203 	bic.w	r2, r2, #3
 80021d6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021dc:	f043 0210 	orr.w	r2, r3, #16
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f7ff ff2f 	bl	8002050 <HAL_SPI_ErrorCallback>
}
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b084      	sub	sp, #16
 80021fe:	af00      	add	r7, sp, #0
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
 8002206:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8002208:	e04d      	b.n	80022a6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002210:	d049      	beq.n	80022a6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d007      	beq.n	8002228 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8002218:	f7fe f85c 	bl	80002d4 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	1ad2      	subs	r2, r2, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d33e      	bcc.n	80022a6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	6852      	ldr	r2, [r2, #4]
 8002232:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002236:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002240:	d111      	bne.n	8002266 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800224a:	d004      	beq.n	8002256 <SPI_WaitFlagStateUntilTimeout+0x5c>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002254:	d107      	bne.n	8002266 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	6812      	ldr	r2, [r2, #0]
 800225e:	6812      	ldr	r2, [r2, #0]
 8002260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002264:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800226e:	d110      	bne.n	8002292 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6819      	ldr	r1, [r3, #0]
 800227a:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800227e:	400b      	ands	r3, r1
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	6812      	ldr	r2, [r2, #0]
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002290:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e00e      	b.n	80022c4 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	401a      	ands	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d101      	bne.n	80022ba <SPI_WaitFlagStateUntilTimeout+0xc0>
 80022b6:	2201      	movs	r2, #1
 80022b8:	e000      	b.n	80022bc <SPI_WaitFlagStateUntilTimeout+0xc2>
 80022ba:	2200      	movs	r2, #0
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d1a3      	bne.n	800220a <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af02      	add	r7, sp, #8
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2200      	movs	r2, #0
 80022e0:	2180      	movs	r1, #128	; 0x80
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f7ff ff89 	bl	80021fa <SPI_WaitFlagStateUntilTimeout>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d007      	beq.n	80022fe <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f2:	f043 0220 	orr.w	r2, r3, #32
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e000      	b.n	8002300 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e056      	b.n	80023c8 <HAL_SPI_Init+0xc0>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d102      	bne.n	8002332 <HAL_SPI_Init+0x2a>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f002 f8f5 	bl	800451c <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2202      	movs	r2, #2
 8002336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6812      	ldr	r2, [r2, #0]
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002348:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6851      	ldr	r1, [r2, #4]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6892      	ldr	r2, [r2, #8]
 8002356:	4311      	orrs	r1, r2
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	68d2      	ldr	r2, [r2, #12]
 800235c:	4311      	orrs	r1, r2
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6912      	ldr	r2, [r2, #16]
 8002362:	4311      	orrs	r1, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6952      	ldr	r2, [r2, #20]
 8002368:	4311      	orrs	r1, r2
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6992      	ldr	r2, [r2, #24]
 800236e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002372:	4311      	orrs	r1, r2
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	69d2      	ldr	r2, [r2, #28]
 8002378:	4311      	orrs	r1, r2
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6a12      	ldr	r2, [r2, #32]
 800237e:	4311      	orrs	r1, r2
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002384:	430a      	orrs	r2, r1
 8002386:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6992      	ldr	r2, [r2, #24]
 8002390:	0c12      	lsrs	r2, r2, #16
 8002392:	f002 0104 	and.w	r1, r2, #4
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800239a:	430a      	orrs	r2, r1
 800239c:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80023a6:	611a      	str	r2, [r3, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	69d2      	ldr	r2, [r2, #28]
 80023b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023b6:	61da      	str	r2, [r3, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80023d0:	b490      	push	{r4, r7}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	461a      	mov	r2, r3
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	0e1b      	lsrs	r3, r3, #24
 80023e4:	4413      	add	r3, r2
 80023e6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80023e8:	6822      	ldr	r2, [r4, #0]
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	fab3 f383 	clz	r3, r3
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	210f      	movs	r1, #15
 8002400:	fa01 f303 	lsl.w	r3, r1, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	401a      	ands	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	fa93 f3a3 	rbit	r3, r3
 8002412:	61bb      	str	r3, [r7, #24]
  return(result);
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	fa01 f303 	lsl.w	r3, r1, r3
 8002422:	4313      	orrs	r3, r2
 8002424:	6023      	str	r3, [r4, #0]
}
 8002426:	bf00      	nop
 8002428:	3720      	adds	r7, #32
 800242a:	46bd      	mov	sp, r7
 800242c:	bc90      	pop	{r4, r7}
 800242e:	4770      	bx	lr

08002430 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002430:	b490      	push	{r4, r7}
 8002432:	b088      	sub	sp, #32
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	461a      	mov	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	0e1b      	lsrs	r3, r3, #24
 8002444:	4413      	add	r3, r2
 8002446:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8002448:	6822      	ldr	r2, [r4, #0]
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	fa93 f3a3 	rbit	r3, r3
 8002454:	613b      	str	r3, [r7, #16]
  return(result);
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	fab3 f383 	clz	r3, r3
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	2103      	movs	r1, #3
 8002460:	fa01 f303 	lsl.w	r3, r1, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	401a      	ands	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	fa93 f3a3 	rbit	r3, r3
 8002472:	61bb      	str	r3, [r7, #24]
  return(result);
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	fab3 f383 	clz	r3, r3
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	fa01 f303 	lsl.w	r3, r1, r3
 8002482:	4313      	orrs	r3, r2
 8002484:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 8002486:	bf00      	nop
 8002488:	3720      	adds	r7, #32
 800248a:	46bd      	mov	sp, r7
 800248c:	bc90      	pop	{r4, r7}
 800248e:	4770      	bx	lr

08002490 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 8002490:	b490      	push	{r4, r7}
 8002492:	b088      	sub	sp, #32
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	461a      	mov	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	0e1b      	lsrs	r3, r3, #24
 80024a4:	4413      	add	r3, r2
 80024a6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80024a8:	6822      	ldr	r2, [r4, #0]
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	fa93 f3a3 	rbit	r3, r3
 80024b4:	613b      	str	r3, [r7, #16]
  return(result);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	fab3 f383 	clz	r3, r3
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	2104      	movs	r1, #4
 80024c0:	fa01 f303 	lsl.w	r3, r1, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	401a      	ands	r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	fa93 f3a3 	rbit	r3, r3
 80024d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	fab3 f383 	clz	r3, r3
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	fa01 f303 	lsl.w	r3, r1, r3
 80024e2:	4313      	orrs	r3, r2
 80024e4:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 80024e6:	bf00      	nop
 80024e8:	3720      	adds	r7, #32
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc90      	pop	{r4, r7}
 80024ee:	4770      	bx	lr

080024f0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b087      	sub	sp, #28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	0a1b      	lsrs	r3, r3, #8
 8002504:	43db      	mvns	r3, r3
 8002506:	401a      	ands	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	0a1b      	lsrs	r3, r3, #8
 800250c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	fa93 f3a3 	rbit	r3, r3
 8002514:	613b      	str	r3, [r7, #16]
  return(result);
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	fa01 f303 	lsl.w	r3, r1, r3
 8002522:	431a      	orrs	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	60da      	str	r2, [r3, #12]
}
 8002528:	bf00      	nop
 800252a:	371c      	adds	r7, #28
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr

08002532 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b088      	sub	sp, #32
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	021b      	lsls	r3, r3, #8
 8002542:	0c1b      	lsrs	r3, r3, #16
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	fa93 f3a3 	rbit	r3, r3
 8002550:	60fb      	str	r3, [r7, #12]
  return(result);
 8002552:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8002554:	fab3 f383 	clz	r3, r3
 8002558:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0U)
 800255a:	e040      	b.n	80025de <LL_GPIO_Init+0xac>
  {
    /* skip if bit is not set */
    if ((pinmask & (1U << pinpos)) != 0U)
 800255c:	2201      	movs	r2, #1
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	409a      	lsls	r2, r3
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	4013      	ands	r3, r2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d036      	beq.n	80025d8 <LL_GPIO_Init+0xa6>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	2b07      	cmp	r3, #7
 800256e:	d806      	bhi.n	800257e <LL_GPIO_Init+0x4c>
      {
        currentpin = (0x00000101U << pinpos);
 8002570:	f240 1201 	movw	r2, #257	; 0x101
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	61bb      	str	r3, [r7, #24]
 800257c:	e008      	b.n	8002590 <LL_GPIO_Init+0x5e>
      }
      else
      {
        currentpin = ((0x00010001U << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000U);
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3b08      	subs	r3, #8
 8002582:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800258e:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	461a      	mov	r2, r3
 8002596:	69b9      	ldr	r1, [r7, #24]
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7ff ff19 	bl	80023d0 <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	461a      	mov	r2, r3
 80025a4:	69b9      	ldr	r1, [r7, #24]
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff ffa2 	bl	80024f0 <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d003      	beq.n	80025bc <LL_GPIO_Init+0x8a>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b09      	cmp	r3, #9
 80025ba:	d10d      	bne.n	80025d8 <LL_GPIO_Init+0xa6>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	461a      	mov	r2, r3
 80025c2:	69b9      	ldr	r1, [r7, #24]
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7ff ff33 	bl	8002430 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	461a      	mov	r2, r3
 80025d0:	69b9      	ldr	r1, [r7, #24]
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff ff5c 	bl	8002490 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	3301      	adds	r3, #1
 80025dc:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0U)
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	fa22 f303 	lsr.w	r3, r2, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1b8      	bne.n	800255c <LL_GPIO_Init+0x2a>
  }
  return (SUCCESS);
 80025ea:	2301      	movs	r3, #1
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3720      	adds	r7, #32
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80025f8:	4b03      	ldr	r3, [pc, #12]	; (8002608 <LL_RCC_GetSysClkSource+0x14>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 030c 	and.w	r3, r3, #12
}
 8002600:	4618      	mov	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr
 8002608:	40021000 	.word	0x40021000

0800260c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002610:	4b03      	ldr	r3, [pc, #12]	; (8002620 <LL_RCC_GetAHBPrescaler+0x14>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002618:	4618      	mov	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr
 8002620:	40021000 	.word	0x40021000

08002624 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002628:	4b03      	ldr	r3, [pc, #12]	; (8002638 <LL_RCC_GetAPB1Prescaler+0x14>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002630:	4618      	mov	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr
 8002638:	40021000 	.word	0x40021000

0800263c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002640:	4b03      	ldr	r3, [pc, #12]	; (8002650 <LL_RCC_GetAPB2Prescaler+0x14>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002648:	4618      	mov	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr
 8002650:	40021000 	.word	0x40021000

08002654 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002658:	4b03      	ldr	r3, [pc, #12]	; (8002668 <LL_RCC_PLL_GetMainSource+0x14>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8002660:	4618      	mov	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr
 8002668:	40021000 	.word	0x40021000

0800266c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8002670:	4b03      	ldr	r3, [pc, #12]	; (8002680 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002678:	4618      	mov	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr
 8002680:	40021000 	.word	0x40021000

08002684 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8002688:	4b04      	ldr	r3, [pc, #16]	; (800269c <LL_RCC_PLL_GetPrediv+0x18>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	0c5b      	lsrs	r3, r3, #17
 800268e:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8002692:	4618      	mov	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40021000 	.word	0x40021000

080026a0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80026a8:	f000 f820 	bl	80026ec <RCC_GetSystemClockFreq>
 80026ac:	4602      	mov	r2, r0
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f83a 	bl	8002730 <RCC_GetHCLKClockFreq>
 80026bc:	4602      	mov	r2, r0
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 f848 	bl	800275c <RCC_GetPCLK1ClockFreq>
 80026cc:	4602      	mov	r2, r0
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 f854 	bl	8002784 <RCC_GetPCLK2ClockFreq>
 80026dc:	4602      	mov	r2, r0
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	60da      	str	r2, [r3, #12]
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80026f6:	f7ff ff7d 	bl	80025f4 <LL_RCC_GetSysClkSource>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d006      	beq.n	800270e <RCC_GetSystemClockFreq+0x22>
 8002700:	2b08      	cmp	r3, #8
 8002702:	d007      	beq.n	8002714 <RCC_GetSystemClockFreq+0x28>
 8002704:	2b00      	cmp	r3, #0
 8002706:	d109      	bne.n	800271c <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002708:	4b08      	ldr	r3, [pc, #32]	; (800272c <RCC_GetSystemClockFreq+0x40>)
 800270a:	607b      	str	r3, [r7, #4]
      break;
 800270c:	e009      	b.n	8002722 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <RCC_GetSystemClockFreq+0x40>)
 8002710:	607b      	str	r3, [r7, #4]
      break;
 8002712:	e006      	b.n	8002722 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002714:	f000 f84a 	bl	80027ac <RCC_PLL_GetFreqDomain_SYS>
 8002718:	6078      	str	r0, [r7, #4]
      break;
 800271a:	e002      	b.n	8002722 <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 800271c:	4b03      	ldr	r3, [pc, #12]	; (800272c <RCC_GetSystemClockFreq+0x40>)
 800271e:	607b      	str	r3, [r7, #4]
      break;
 8002720:	bf00      	nop
  }

  return frequency;
 8002722:	687b      	ldr	r3, [r7, #4]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	007a1200 	.word	0x007a1200

08002730 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002738:	f7ff ff68 	bl	800260c <LL_RCC_GetAHBPrescaler>
 800273c:	4603      	mov	r3, r0
 800273e:	091b      	lsrs	r3, r3, #4
 8002740:	f003 030f 	and.w	r3, r3, #15
 8002744:	4a04      	ldr	r2, [pc, #16]	; (8002758 <RCC_GetHCLKClockFreq+0x28>)
 8002746:	5cd3      	ldrb	r3, [r2, r3]
 8002748:	461a      	mov	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	40d3      	lsrs	r3, r2
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	08005bbc 	.word	0x08005bbc

0800275c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002764:	f7ff ff5e 	bl	8002624 <LL_RCC_GetAPB1Prescaler>
 8002768:	4603      	mov	r3, r0
 800276a:	0a1b      	lsrs	r3, r3, #8
 800276c:	4a04      	ldr	r2, [pc, #16]	; (8002780 <RCC_GetPCLK1ClockFreq+0x24>)
 800276e:	5cd3      	ldrb	r3, [r2, r3]
 8002770:	461a      	mov	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	40d3      	lsrs	r3, r2
}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	08005bcc 	.word	0x08005bcc

08002784 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800278c:	f7ff ff56 	bl	800263c <LL_RCC_GetAPB2Prescaler>
 8002790:	4603      	mov	r3, r0
 8002792:	0adb      	lsrs	r3, r3, #11
 8002794:	4a04      	ldr	r2, [pc, #16]	; (80027a8 <RCC_GetPCLK2ClockFreq+0x24>)
 8002796:	5cd3      	ldrb	r3, [r2, r3]
 8002798:	461a      	mov	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	40d3      	lsrs	r3, r2
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	08005bcc 	.word	0x08005bcc

080027ac <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	607b      	str	r3, [r7, #4]
 80027b6:	2300      	movs	r3, #0
 80027b8:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80027ba:	f7ff ff4b 	bl	8002654 <LL_RCC_PLL_GetMainSource>
 80027be:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <RCC_PLL_GetFreqDomain_SYS+0x22>
 80027c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ca:	d003      	beq.n	80027d4 <RCC_PLL_GetFreqDomain_SYS+0x28>
 80027cc:	e00b      	b.n	80027e6 <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80027ce:	4b0d      	ldr	r3, [pc, #52]	; (8002804 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 80027d0:	607b      	str	r3, [r7, #4]
      break;
 80027d2:	e00b      	b.n	80027ec <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80027d4:	f7ff ff56 	bl	8002684 <LL_RCC_PLL_GetPrediv>
 80027d8:	4603      	mov	r3, r0
 80027da:	3301      	adds	r3, #1
 80027dc:	4a0a      	ldr	r2, [pc, #40]	; (8002808 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80027de:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e2:	607b      	str	r3, [r7, #4]
      break;
 80027e4:	e002      	b.n	80027ec <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80027e6:	4b07      	ldr	r3, [pc, #28]	; (8002804 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 80027e8:	607b      	str	r3, [r7, #4]
      break;
 80027ea:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80027ec:	f7ff ff3e 	bl	800266c <LL_RCC_PLL_GetMultiplicator>
 80027f0:	4603      	mov	r3, r0
 80027f2:	0c9b      	lsrs	r3, r3, #18
 80027f4:	3302      	adds	r3, #2
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	fb02 f303 	mul.w	r3, r2, r3
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	003d0900 	.word	0x003d0900
 8002808:	007a1200 	.word	0x007a1200

0800280c <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800281c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002820:	bf0c      	ite	eq
 8002822:	2301      	moveq	r3, #1
 8002824:	2300      	movne	r3, #0
 8002826:	b2db      	uxtb	r3, r3
}
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr

08002832 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
 800283a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	611a      	str	r2, [r3, #16]
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr

08002856 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	615a      	str	r2, [r3, #20]
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr
	...

0800287c <LL_USART_SetBaudRate>:
  * @param  PeriphClk Peripheral Clock
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	009a      	lsls	r2, r3, #2
 8002892:	441a      	add	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	fbb2 f3f3 	udiv	r3, r2, r3
 800289c:	4a25      	ldr	r2, [pc, #148]	; (8002934 <LL_USART_SetBaudRate+0xb8>)
 800289e:	fba2 2303 	umull	r2, r3, r2, r3
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	b299      	uxth	r1, r3
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	009a      	lsls	r2, r3, #2
 80028b4:	441a      	add	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80028be:	4b1d      	ldr	r3, [pc, #116]	; (8002934 <LL_USART_SetBaudRate+0xb8>)
 80028c0:	fba3 0302 	umull	r0, r3, r3, r2
 80028c4:	095b      	lsrs	r3, r3, #5
 80028c6:	2064      	movs	r0, #100	; 0x64
 80028c8:	fb00 f303 	mul.w	r3, r0, r3
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	3332      	adds	r3, #50	; 0x32
 80028d2:	4a18      	ldr	r2, [pc, #96]	; (8002934 <LL_USART_SetBaudRate+0xb8>)
 80028d4:	fba2 2303 	umull	r2, r3, r2, r3
 80028d8:	095b      	lsrs	r3, r3, #5
 80028da:	b29b      	uxth	r3, r3
 80028dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	440b      	add	r3, r1
 80028e4:	b299      	uxth	r1, r3
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	009a      	lsls	r2, r3, #2
 80028f0:	441a      	add	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80028fa:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <LL_USART_SetBaudRate+0xb8>)
 80028fc:	fba3 0302 	umull	r0, r3, r3, r2
 8002900:	095b      	lsrs	r3, r3, #5
 8002902:	2064      	movs	r0, #100	; 0x64
 8002904:	fb00 f303 	mul.w	r3, r0, r3
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	3332      	adds	r3, #50	; 0x32
 800290e:	4a09      	ldr	r2, [pc, #36]	; (8002934 <LL_USART_SetBaudRate+0xb8>)
 8002910:	fba2 2303 	umull	r2, r3, r2, r3
 8002914:	095b      	lsrs	r3, r3, #5
 8002916:	b29b      	uxth	r3, r3
 8002918:	f003 030f 	and.w	r3, r3, #15
 800291c:	b29b      	uxth	r3, r3
 800291e:	440b      	add	r3, r1
 8002920:	b29b      	uxth	r3, r3
 8002922:	461a      	mov	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	609a      	str	r2, [r3, #8]
}
 8002928:	bf00      	nop
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	51eb851f 	.word	0x51eb851f

08002938 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002942:	2300      	movs	r3, #0
 8002944:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002946:	2300      	movs	r3, #0
 8002948:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7ff ff5e 	bl	800280c <LL_USART_IsEnabled>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d153      	bne.n	80029fe <LL_USART_Init+0xc6>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800295e:	f023 030c 	bic.w	r3, r3, #12
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	6851      	ldr	r1, [r2, #4]
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	68d2      	ldr	r2, [r2, #12]
 800296a:	4311      	orrs	r1, r2
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	6912      	ldr	r2, [r2, #16]
 8002970:	430a      	orrs	r2, r1
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	4619      	mov	r1, r3
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff ff57 	bl	8002832 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	4619      	mov	r1, r3
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff ff63 	bl	8002856 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002990:	f107 0308 	add.w	r3, r7, #8
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff fe83 	bl	80026a0 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a1a      	ldr	r2, [pc, #104]	; (8002a08 <LL_USART_Init+0xd0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d102      	bne.n	80029a8 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	61bb      	str	r3, [r7, #24]
 80029a6:	e01a      	b.n	80029de <LL_USART_Init+0xa6>
    }
    else if (USARTx == USART2)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a18      	ldr	r2, [pc, #96]	; (8002a0c <LL_USART_Init+0xd4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d102      	bne.n	80029b6 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	61bb      	str	r3, [r7, #24]
 80029b4:	e013      	b.n	80029de <LL_USART_Init+0xa6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a15      	ldr	r2, [pc, #84]	; (8002a10 <LL_USART_Init+0xd8>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d102      	bne.n	80029c4 <LL_USART_Init+0x8c>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	61bb      	str	r3, [r7, #24]
 80029c2:	e00c      	b.n	80029de <LL_USART_Init+0xa6>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a13      	ldr	r2, [pc, #76]	; (8002a14 <LL_USART_Init+0xdc>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d102      	bne.n	80029d2 <LL_USART_Init+0x9a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	61bb      	str	r3, [r7, #24]
 80029d0:	e005      	b.n	80029de <LL_USART_Init+0xa6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a10      	ldr	r2, [pc, #64]	; (8002a18 <LL_USART_Init+0xe0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d101      	bne.n	80029de <LL_USART_Init+0xa6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00c      	beq.n	80029fe <LL_USART_Init+0xc6>
        && (USART_InitStruct->BaudRate != 0U))
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <LL_USART_Init+0xc6>
    {
      status = SUCCESS;
 80029ec:	2301      	movs	r3, #1
 80029ee:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	461a      	mov	r2, r3
 80029f6:	69b9      	ldr	r1, [r7, #24]
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7ff ff3f 	bl	800287c <LL_USART_SetBaudRate>
#endif /* USART_OverSampling_Feature */
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80029fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3720      	adds	r7, #32
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40013800 	.word	0x40013800
 8002a0c:	40004400 	.word	0x40004400
 8002a10:	40004800 	.word	0x40004800
 8002a14:	40004c00 	.word	0x40004c00
 8002a18:	40005000 	.word	0x40005000

08002a1c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8002a24:	4b22      	ldr	r3, [pc, #136]	; (8002ab0 <WIZCHIP_READ+0x94>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002a2a:	4b21      	ldr	r3, [pc, #132]	; (8002ab0 <WIZCHIP_READ+0x94>)
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002a30:	4b1f      	ldr	r3, [pc, #124]	; (8002ab0 <WIZCHIP_READ+0x94>)
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <WIZCHIP_READ+0x24>
 8002a38:	4b1d      	ldr	r3, [pc, #116]	; (8002ab0 <WIZCHIP_READ+0x94>)
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d114      	bne.n	8002a6a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002a40:	4b1b      	ldr	r3, [pc, #108]	; (8002ab0 <WIZCHIP_READ+0x94>)
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	0c12      	lsrs	r2, r2, #16
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002a4e:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <WIZCHIP_READ+0x94>)
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	0a12      	lsrs	r2, r2, #8
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	4610      	mov	r0, r2
 8002a5a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002a5c:	4b14      	ldr	r3, [pc, #80]	; (8002ab0 <WIZCHIP_READ+0x94>)
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	4610      	mov	r0, r2
 8002a66:	4798      	blx	r3
 8002a68:	e011      	b.n	8002a8e <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	0c1b      	lsrs	r3, r3, #16
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	0a1b      	lsrs	r3, r3, #8
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <WIZCHIP_READ+0x94>)
 8002a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a84:	f107 020c 	add.w	r2, r7, #12
 8002a88:	2103      	movs	r1, #3
 8002a8a:	4610      	mov	r0, r2
 8002a8c:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8002a8e:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <WIZCHIP_READ+0x94>)
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	4798      	blx	r3
 8002a94:	4603      	mov	r3, r0
 8002a96:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8002a98:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <WIZCHIP_READ+0x94>)
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002a9e:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <WIZCHIP_READ+0x94>)
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	4798      	blx	r3
   return ret;
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000008 	.word	0x20000008

08002ab4 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8002ac0:	4b22      	ldr	r3, [pc, #136]	; (8002b4c <WIZCHIP_WRITE+0x98>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002ac6:	4b21      	ldr	r3, [pc, #132]	; (8002b4c <WIZCHIP_WRITE+0x98>)
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f043 0304 	orr.w	r3, r3, #4
 8002ad2:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002ad4:	4b1d      	ldr	r3, [pc, #116]	; (8002b4c <WIZCHIP_WRITE+0x98>)
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d119      	bne.n	8002b10 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002adc:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <WIZCHIP_WRITE+0x98>)
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	0c12      	lsrs	r2, r2, #16
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002aea:	4b18      	ldr	r3, [pc, #96]	; (8002b4c <WIZCHIP_WRITE+0x98>)
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	0a12      	lsrs	r2, r2, #8
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	4610      	mov	r0, r2
 8002af6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002af8:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <WIZCHIP_WRITE+0x98>)
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	4610      	mov	r0, r2
 8002b02:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8002b04:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <WIZCHIP_WRITE+0x98>)
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	78fa      	ldrb	r2, [r7, #3]
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	4798      	blx	r3
 8002b0e:	e013      	b.n	8002b38 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	0c1b      	lsrs	r3, r3, #16
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	0a1b      	lsrs	r3, r3, #8
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8002b26:	78fb      	ldrb	r3, [r7, #3]
 8002b28:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8002b2a:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <WIZCHIP_WRITE+0x98>)
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2e:	f107 020c 	add.w	r2, r7, #12
 8002b32:	2104      	movs	r1, #4
 8002b34:	4610      	mov	r0, r2
 8002b36:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002b38:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <WIZCHIP_WRITE+0x98>)
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002b3e:	4b03      	ldr	r3, [pc, #12]	; (8002b4c <WIZCHIP_WRITE+0x98>)
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	4798      	blx	r3
}
 8002b44:	bf00      	nop
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20000008 	.word	0x20000008

08002b50 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002b50:	b590      	push	{r4, r7, lr}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002b5e:	4b2b      	ldr	r3, [pc, #172]	; (8002c0c <WIZCHIP_READ_BUF+0xbc>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002b64:	4b29      	ldr	r3, [pc, #164]	; (8002c0c <WIZCHIP_READ_BUF+0xbc>)
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002b6a:	4b28      	ldr	r3, [pc, #160]	; (8002c0c <WIZCHIP_READ_BUF+0xbc>)
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <WIZCHIP_READ_BUF+0x2a>
 8002b72:	4b26      	ldr	r3, [pc, #152]	; (8002c0c <WIZCHIP_READ_BUF+0xbc>)
 8002b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d126      	bne.n	8002bc8 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002b7a:	4b24      	ldr	r3, [pc, #144]	; (8002c0c <WIZCHIP_READ_BUF+0xbc>)
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	0c12      	lsrs	r2, r2, #16
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	4610      	mov	r0, r2
 8002b86:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002b88:	4b20      	ldr	r3, [pc, #128]	; (8002c0c <WIZCHIP_READ_BUF+0xbc>)
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	0a12      	lsrs	r2, r2, #8
 8002b90:	b2d2      	uxtb	r2, r2
 8002b92:	4610      	mov	r0, r2
 8002b94:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002b96:	4b1d      	ldr	r3, [pc, #116]	; (8002c0c <WIZCHIP_READ_BUF+0xbc>)
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	82fb      	strh	r3, [r7, #22]
 8002ba6:	e00a      	b.n	8002bbe <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8002ba8:	8afb      	ldrh	r3, [r7, #22]
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	18d4      	adds	r4, r2, r3
 8002bae:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <WIZCHIP_READ_BUF+0xbc>)
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	4798      	blx	r3
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8002bb8:	8afb      	ldrh	r3, [r7, #22]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	82fb      	strh	r3, [r7, #22]
 8002bbe:	8afa      	ldrh	r2, [r7, #22]
 8002bc0:	88fb      	ldrh	r3, [r7, #6]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d3f0      	bcc.n	8002ba8 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002bc6:	e017      	b.n	8002bf8 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	0c1b      	lsrs	r3, r3, #16
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	0a1b      	lsrs	r3, r3, #8
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002bde:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <WIZCHIP_READ_BUF+0xbc>)
 8002be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be2:	f107 0210 	add.w	r2, r7, #16
 8002be6:	2103      	movs	r1, #3
 8002be8:	4610      	mov	r0, r2
 8002bea:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8002bec:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <WIZCHIP_READ_BUF+0xbc>)
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	88fa      	ldrh	r2, [r7, #6]
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	68b8      	ldr	r0, [r7, #8]
 8002bf6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002bf8:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <WIZCHIP_READ_BUF+0xbc>)
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002bfe:	4b03      	ldr	r3, [pc, #12]	; (8002c0c <WIZCHIP_READ_BUF+0xbc>)
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	4798      	blx	r3
}
 8002c04:	bf00      	nop
 8002c06:	371c      	adds	r7, #28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd90      	pop	{r4, r7, pc}
 8002c0c:	20000008 	.word	0x20000008

08002c10 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002c1e:	4b2b      	ldr	r3, [pc, #172]	; (8002ccc <WIZCHIP_WRITE_BUF+0xbc>)
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002c24:	4b29      	ldr	r3, [pc, #164]	; (8002ccc <WIZCHIP_WRITE_BUF+0xbc>)
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f043 0304 	orr.w	r3, r3, #4
 8002c30:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002c32:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <WIZCHIP_WRITE_BUF+0xbc>)
 8002c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d126      	bne.n	8002c88 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002c3a:	4b24      	ldr	r3, [pc, #144]	; (8002ccc <WIZCHIP_WRITE_BUF+0xbc>)
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	0c12      	lsrs	r2, r2, #16
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	4610      	mov	r0, r2
 8002c46:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002c48:	4b20      	ldr	r3, [pc, #128]	; (8002ccc <WIZCHIP_WRITE_BUF+0xbc>)
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	0a12      	lsrs	r2, r2, #8
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	4610      	mov	r0, r2
 8002c54:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002c56:	4b1d      	ldr	r3, [pc, #116]	; (8002ccc <WIZCHIP_WRITE_BUF+0xbc>)
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	4610      	mov	r0, r2
 8002c60:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002c62:	2300      	movs	r3, #0
 8002c64:	82fb      	strh	r3, [r7, #22]
 8002c66:	e00a      	b.n	8002c7e <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8002c68:	4b18      	ldr	r3, [pc, #96]	; (8002ccc <WIZCHIP_WRITE_BUF+0xbc>)
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	8afa      	ldrh	r2, [r7, #22]
 8002c6e:	68b9      	ldr	r1, [r7, #8]
 8002c70:	440a      	add	r2, r1
 8002c72:	7812      	ldrb	r2, [r2, #0]
 8002c74:	4610      	mov	r0, r2
 8002c76:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002c78:	8afb      	ldrh	r3, [r7, #22]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	82fb      	strh	r3, [r7, #22]
 8002c7e:	8afa      	ldrh	r2, [r7, #22]
 8002c80:	88fb      	ldrh	r3, [r7, #6]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d3f0      	bcc.n	8002c68 <WIZCHIP_WRITE_BUF+0x58>
 8002c86:	e017      	b.n	8002cb8 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	0c1b      	lsrs	r3, r3, #16
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	0a1b      	lsrs	r3, r3, #8
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002c9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <WIZCHIP_WRITE_BUF+0xbc>)
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca2:	f107 0210 	add.w	r2, r7, #16
 8002ca6:	2103      	movs	r1, #3
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8002cac:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <WIZCHIP_WRITE_BUF+0xbc>)
 8002cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb0:	88fa      	ldrh	r2, [r7, #6]
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	68b8      	ldr	r0, [r7, #8]
 8002cb6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002cb8:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <WIZCHIP_WRITE_BUF+0xbc>)
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002cbe:	4b03      	ldr	r3, [pc, #12]	; (8002ccc <WIZCHIP_WRITE_BUF+0xbc>)
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	4798      	blx	r3
}
 8002cc4:	bf00      	nop
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	20000008 	.word	0x20000008

08002cd0 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002cd0:	b590      	push	{r4, r7, lr}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	81fb      	strh	r3, [r7, #14]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff fe94 	bl	8002a1c <WIZCHIP_READ>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002cf8:	89bb      	ldrh	r3, [r7, #12]
 8002cfa:	021b      	lsls	r3, r3, #8
 8002cfc:	b29c      	uxth	r4, r3
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	3301      	adds	r3, #1
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff fe86 	bl	8002a1c <WIZCHIP_READ>
 8002d10:	4603      	mov	r3, r0
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	4423      	add	r3, r4
 8002d16:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002d18:	89bb      	ldrh	r3, [r7, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d01a      	beq.n	8002d54 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	3301      	adds	r3, #1
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fe76 	bl	8002a1c <WIZCHIP_READ>
 8002d30:	4603      	mov	r3, r0
 8002d32:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002d34:	89fb      	ldrh	r3, [r7, #14]
 8002d36:	021b      	lsls	r3, r3, #8
 8002d38:	b29c      	uxth	r4, r3
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	3301      	adds	r3, #1
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff fe68 	bl	8002a1c <WIZCHIP_READ>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	4423      	add	r3, r4
 8002d52:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002d54:	89fa      	ldrh	r2, [r7, #14]
 8002d56:	89bb      	ldrh	r3, [r7, #12]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d1c2      	bne.n	8002ce2 <getSn_TX_FSR+0x12>
   return val;
 8002d5c:	89fb      	ldrh	r3, [r7, #14]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd90      	pop	{r4, r7, pc}

08002d66 <wiz_send_data>:
   }while (val != val1);
   return val;
}

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002d66:	b590      	push	{r4, r7, lr}
 8002d68:	b085      	sub	sp, #20
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	6039      	str	r1, [r7, #0]
 8002d70:	71fb      	strb	r3, [r7, #7]
 8002d72:	4613      	mov	r3, r2
 8002d74:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002d76:	2300      	movs	r3, #0
 8002d78:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8002d7e:	88bb      	ldrh	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d048      	beq.n	8002e16 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	3301      	adds	r3, #1
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff fe43 	bl	8002a1c <WIZCHIP_READ>
 8002d96:	4603      	mov	r3, r0
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	021b      	lsls	r3, r3, #8
 8002d9c:	b29c      	uxth	r4, r3
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	3301      	adds	r3, #1
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fe36 	bl	8002a1c <WIZCHIP_READ>
 8002db0:	4603      	mov	r3, r0
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	4423      	add	r3, r4
 8002db6:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8002db8:	89fb      	ldrh	r3, [r7, #14]
 8002dba:	021b      	lsls	r3, r3, #8
 8002dbc:	79fa      	ldrb	r2, [r7, #7]
 8002dbe:	0092      	lsls	r2, r2, #2
 8002dc0:	3202      	adds	r2, #2
 8002dc2:	00d2      	lsls	r2, r2, #3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8002dc8:	88bb      	ldrh	r3, [r7, #4]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	6839      	ldr	r1, [r7, #0]
 8002dce:	68b8      	ldr	r0, [r7, #8]
 8002dd0:	f7ff ff1e 	bl	8002c10 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8002dd4:	89fa      	ldrh	r2, [r7, #14]
 8002dd6:	88bb      	ldrh	r3, [r7, #4]
 8002dd8:	4413      	add	r3, r2
 8002dda:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8002ddc:	79fb      	ldrb	r3, [r7, #7]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	3301      	adds	r3, #1
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002de8:	461a      	mov	r2, r3
 8002dea:	89fb      	ldrh	r3, [r7, #14]
 8002dec:	0a1b      	lsrs	r3, r3, #8
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	4619      	mov	r1, r3
 8002df4:	4610      	mov	r0, r2
 8002df6:	f7ff fe5d 	bl	8002ab4 <WIZCHIP_WRITE>
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	3301      	adds	r3, #1
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002e06:	461a      	mov	r2, r3
 8002e08:	89fb      	ldrh	r3, [r7, #14]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4610      	mov	r0, r2
 8002e10:	f7ff fe50 	bl	8002ab4 <WIZCHIP_WRITE>
 8002e14:	e000      	b.n	8002e18 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8002e16:	bf00      	nop
}
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd90      	pop	{r4, r7, pc}
	...

08002e20 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002e20:	b590      	push	{r4, r7, lr}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4604      	mov	r4, r0
 8002e28:	4608      	mov	r0, r1
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4623      	mov	r3, r4
 8002e30:	71fb      	strb	r3, [r7, #7]
 8002e32:	4603      	mov	r3, r0
 8002e34:	71bb      	strb	r3, [r7, #6]
 8002e36:	460b      	mov	r3, r1
 8002e38:	80bb      	strh	r3, [r7, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d902      	bls.n	8002e4a <socket+0x2a>
 8002e44:	f04f 33ff 	mov.w	r3, #4294967295
 8002e48:	e0ef      	b.n	800302a <socket+0x20a>
	switch(protocol)
 8002e4a:	79bb      	ldrb	r3, [r7, #6]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d004      	beq.n	8002e5a <socket+0x3a>
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	db10      	blt.n	8002e76 <socket+0x56>
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	dc0e      	bgt.n	8002e76 <socket+0x56>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8002e58:	e010      	b.n	8002e7c <socket+0x5c>
            getSIPR((uint8_t*)&taddr);
 8002e5a:	f107 030c 	add.w	r3, r7, #12
 8002e5e:	2204      	movs	r2, #4
 8002e60:	4619      	mov	r1, r3
 8002e62:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002e66:	f7ff fe73 	bl	8002b50 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d105      	bne.n	8002e7c <socket+0x5c>
 8002e70:	f06f 0302 	mvn.w	r3, #2
 8002e74:	e0d9      	b.n	800302a <socket+0x20a>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002e76:	f06f 0304 	mvn.w	r3, #4
 8002e7a:	e0d6      	b.n	800302a <socket+0x20a>
         break;
 8002e7c:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8002e7e:	78fb      	ldrb	r3, [r7, #3]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <socket+0x6e>
 8002e88:	f06f 0305 	mvn.w	r3, #5
 8002e8c:	e0cd      	b.n	800302a <socket+0x20a>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8002e8e:	78fb      	ldrb	r3, [r7, #3]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d028      	beq.n	8002ee6 <socket+0xc6>
	{
   	switch(protocol)
 8002e94:	79bb      	ldrb	r3, [r7, #6]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d002      	beq.n	8002ea0 <socket+0x80>
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d008      	beq.n	8002eb0 <socket+0x90>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8002e9e:	e022      	b.n	8002ee6 <socket+0xc6>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d11a      	bne.n	8002ee0 <socket+0xc0>
 8002eaa:	f06f 0305 	mvn.w	r3, #5
 8002eae:	e0bc      	b.n	800302a <socket+0x20a>
   	      if(flag & SF_IGMP_VER2)
 8002eb0:	78fb      	ldrb	r3, [r7, #3]
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d006      	beq.n	8002ec8 <socket+0xa8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002eba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	db02      	blt.n	8002ec8 <socket+0xa8>
 8002ec2:	f06f 0305 	mvn.w	r3, #5
 8002ec6:	e0b0      	b.n	800302a <socket+0x20a>
      	      if(flag & SF_UNI_BLOCK)
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	f003 0310 	and.w	r3, r3, #16
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <socket+0xc4>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002ed2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	db04      	blt.n	8002ee4 <socket+0xc4>
 8002eda:	f06f 0305 	mvn.w	r3, #5
 8002ede:	e0a4      	b.n	800302a <socket+0x20a>
   	      break;
 8002ee0:	bf00      	nop
 8002ee2:	e000      	b.n	8002ee6 <socket+0xc6>
   	      break;
 8002ee4:	bf00      	nop
   	}
   }
	close(sn);
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f000 f8ad 	bl	8003048 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002efc:	f023 030f 	bic.w	r3, r3, #15
 8002f00:	b25a      	sxtb	r2, r3
 8002f02:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	b25b      	sxtb	r3, r3
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	f7ff fdd1 	bl	8002ab4 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8002f12:	88bb      	ldrh	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d110      	bne.n	8002f3a <socket+0x11a>
	{
	   port = sock_any_port++;
 8002f18:	4b46      	ldr	r3, [pc, #280]	; (8003034 <socket+0x214>)
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	b291      	uxth	r1, r2
 8002f20:	4a44      	ldr	r2, [pc, #272]	; (8003034 <socket+0x214>)
 8002f22:	8011      	strh	r1, [r2, #0]
 8002f24:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002f26:	4b43      	ldr	r3, [pc, #268]	; (8003034 <socket+0x214>)
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d103      	bne.n	8002f3a <socket+0x11a>
 8002f32:	4b40      	ldr	r3, [pc, #256]	; (8003034 <socket+0x214>)
 8002f34:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002f38:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	3301      	adds	r3, #1
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f46:	461a      	mov	r2, r3
 8002f48:	88bb      	ldrh	r3, [r7, #4]
 8002f4a:	0a1b      	lsrs	r3, r3, #8
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	4619      	mov	r1, r3
 8002f52:	4610      	mov	r0, r2
 8002f54:	f7ff fdae 	bl	8002ab4 <WIZCHIP_WRITE>
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f64:	461a      	mov	r2, r3
 8002f66:	88bb      	ldrh	r3, [r7, #4]
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	f7ff fda1 	bl	8002ab4 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	3301      	adds	r3, #1
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002f7e:	2101      	movs	r1, #1
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fd97 	bl	8002ab4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002f86:	bf00      	nop
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff fd41 	bl	8002a1c <WIZCHIP_READ>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1f3      	bne.n	8002f88 <socket+0x168>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	b21b      	sxth	r3, r3
 8002faa:	43db      	mvns	r3, r3
 8002fac:	b21a      	sxth	r2, r3
 8002fae:	4b22      	ldr	r3, [pc, #136]	; (8003038 <socket+0x218>)
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	b21b      	sxth	r3, r3
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	b21b      	sxth	r3, r3
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	4b1f      	ldr	r3, [pc, #124]	; (8003038 <socket+0x218>)
 8002fbc:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	f003 0201 	and.w	r2, r3, #1
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	b21a      	sxth	r2, r3
 8002fcc:	4b1a      	ldr	r3, [pc, #104]	; (8003038 <socket+0x218>)
 8002fce:	881b      	ldrh	r3, [r3, #0]
 8002fd0:	b21b      	sxth	r3, r3
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	b21b      	sxth	r3, r3
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	4b17      	ldr	r3, [pc, #92]	; (8003038 <socket+0x218>)
 8002fda:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	b21b      	sxth	r3, r3
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	b21a      	sxth	r2, r3
 8002fea:	4b14      	ldr	r3, [pc, #80]	; (800303c <socket+0x21c>)
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	b21b      	sxth	r3, r3
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	b21b      	sxth	r3, r3
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	4b11      	ldr	r3, [pc, #68]	; (800303c <socket+0x21c>)
 8002ff8:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	4a10      	ldr	r2, [pc, #64]	; (8003040 <socket+0x220>)
 8002ffe:	2100      	movs	r1, #0
 8003000:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8003004:	79fb      	ldrb	r3, [r7, #7]
 8003006:	4a0f      	ldr	r2, [pc, #60]	; (8003044 <socket+0x224>)
 8003008:	2100      	movs	r1, #0
 800300a:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800300c:	bf00      	nop
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	3301      	adds	r3, #1
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff fcfe 	bl	8002a1c <WIZCHIP_READ>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f3      	beq.n	800300e <socket+0x1ee>
   return (int8_t)sn;
 8003026:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800302a:	4618      	mov	r0, r3
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	bd90      	pop	{r4, r7, pc}
 8003032:	bf00      	nop
 8003034:	20000006 	.word	0x20000006
 8003038:	200000d0 	.word	0x200000d0
 800303c:	200000d2 	.word	0x200000d2
 8003040:	200000d4 	.word	0x200000d4
 8003044:	200000e4 	.word	0x200000e4

08003048 <close>:

int8_t close(uint8_t sn)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8003052:	79fb      	ldrb	r3, [r7, #7]
 8003054:	2b08      	cmp	r3, #8
 8003056:	d902      	bls.n	800305e <close+0x16>
 8003058:	f04f 33ff 	mov.w	r3, #4294967295
 800305c:	e055      	b.n	800310a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	3301      	adds	r3, #1
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800306a:	2110      	movs	r1, #16
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff fd21 	bl	8002ab4 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8003072:	bf00      	nop
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	3301      	adds	r3, #1
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff fccb 	bl	8002a1c <WIZCHIP_READ>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1f3      	bne.n	8003074 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	3301      	adds	r3, #1
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003098:	211f      	movs	r1, #31
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff fd0a 	bl	8002ab4 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	2201      	movs	r2, #1
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	b21b      	sxth	r3, r3
 80030aa:	43db      	mvns	r3, r3
 80030ac:	b21a      	sxth	r2, r3
 80030ae:	4b19      	ldr	r3, [pc, #100]	; (8003114 <close+0xcc>)
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	b21b      	sxth	r3, r3
 80030b4:	4013      	ands	r3, r2
 80030b6:	b21b      	sxth	r3, r3
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	4b16      	ldr	r3, [pc, #88]	; (8003114 <close+0xcc>)
 80030bc:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	2201      	movs	r2, #1
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	b21b      	sxth	r3, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	b21a      	sxth	r2, r3
 80030cc:	4b12      	ldr	r3, [pc, #72]	; (8003118 <close+0xd0>)
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	b21b      	sxth	r3, r3
 80030d2:	4013      	ands	r3, r2
 80030d4:	b21b      	sxth	r3, r3
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	4b0f      	ldr	r3, [pc, #60]	; (8003118 <close+0xd0>)
 80030da:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	4a0f      	ldr	r2, [pc, #60]	; (800311c <close+0xd4>)
 80030e0:	2100      	movs	r1, #0
 80030e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	4a0d      	ldr	r2, [pc, #52]	; (8003120 <close+0xd8>)
 80030ea:	2100      	movs	r1, #0
 80030ec:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80030ee:	bf00      	nop
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	3301      	adds	r3, #1
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff fc8d 	bl	8002a1c <WIZCHIP_READ>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f3      	bne.n	80030f0 <close+0xa8>
	return SOCK_OK;
 8003108:	2301      	movs	r3, #1
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	200000d0 	.word	0x200000d0
 8003118:	200000d2 	.word	0x200000d2
 800311c:	200000d4 	.word	0x200000d4
 8003120:	200000e4 	.word	0x200000e4

08003124 <listen>:

int8_t listen(uint8_t sn)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	2b08      	cmp	r3, #8
 8003132:	d902      	bls.n	800313a <listen+0x16>
 8003134:	f04f 33ff 	mov.w	r3, #4294967295
 8003138:	e049      	b.n	80031ce <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800313a:	79fb      	ldrb	r3, [r7, #7]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	3301      	adds	r3, #1
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff fc6a 	bl	8002a1c <WIZCHIP_READ>
 8003148:	4603      	mov	r3, r0
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	2b01      	cmp	r3, #1
 8003150:	d002      	beq.n	8003158 <listen+0x34>
 8003152:	f06f 0304 	mvn.w	r3, #4
 8003156:	e03a      	b.n	80031ce <listen+0xaa>
	CHECK_SOCKINIT();
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	3301      	adds	r3, #1
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff fc59 	bl	8002a1c <WIZCHIP_READ>
 800316a:	4603      	mov	r3, r0
 800316c:	2b13      	cmp	r3, #19
 800316e:	d002      	beq.n	8003176 <listen+0x52>
 8003170:	f06f 0302 	mvn.w	r3, #2
 8003174:	e02b      	b.n	80031ce <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8003176:	79fb      	ldrb	r3, [r7, #7]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	3301      	adds	r3, #1
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003182:	2102      	movs	r1, #2
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff fc95 	bl	8002ab4 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 800318a:	bf00      	nop
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	3301      	adds	r3, #1
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff fc3f 	bl	8002a1c <WIZCHIP_READ>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1f3      	bne.n	800318c <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80031a4:	e006      	b.n	80031b4 <listen+0x90>
   {
         close(sn);
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff ff4d 	bl	8003048 <close>
         return SOCKERR_SOCKCLOSED;
 80031ae:	f06f 0303 	mvn.w	r3, #3
 80031b2:	e00c      	b.n	80031ce <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	3301      	adds	r3, #1
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff fc2b 	bl	8002a1c <WIZCHIP_READ>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b14      	cmp	r3, #20
 80031ca:	d1ec      	bne.n	80031a6 <listen+0x82>
   }
   return SOCK_OK;
 80031cc:	2301      	movs	r3, #1
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
	...

080031d8 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	4603      	mov	r3, r0
 80031e0:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d902      	bls.n	80031ee <disconnect+0x16>
 80031e8:	f04f 33ff 	mov.w	r3, #4294967295
 80031ec:	e062      	b.n	80032b4 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	3301      	adds	r3, #1
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff fc10 	bl	8002a1c <WIZCHIP_READ>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	2b01      	cmp	r3, #1
 8003204:	d002      	beq.n	800320c <disconnect+0x34>
 8003206:	f06f 0304 	mvn.w	r3, #4
 800320a:	e053      	b.n	80032b4 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 800320c:	79fb      	ldrb	r3, [r7, #7]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	3301      	adds	r3, #1
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003218:	2108      	movs	r1, #8
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff fc4a 	bl	8002ab4 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8003220:	bf00      	nop
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	3301      	adds	r3, #1
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff fbf4 	bl	8002a1c <WIZCHIP_READ>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f3      	bne.n	8003222 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	2201      	movs	r2, #1
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	b21b      	sxth	r3, r3
 8003244:	43db      	mvns	r3, r3
 8003246:	b21a      	sxth	r2, r3
 8003248:	4b1c      	ldr	r3, [pc, #112]	; (80032bc <disconnect+0xe4>)
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	b21b      	sxth	r3, r3
 800324e:	4013      	ands	r3, r2
 8003250:	b21b      	sxth	r3, r3
 8003252:	b29a      	uxth	r2, r3
 8003254:	4b19      	ldr	r3, [pc, #100]	; (80032bc <disconnect+0xe4>)
 8003256:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8003258:	4b19      	ldr	r3, [pc, #100]	; (80032c0 <disconnect+0xe8>)
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	461a      	mov	r2, r3
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	fa42 f303 	asr.w	r3, r2, r3
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d016      	beq.n	800329a <disconnect+0xc2>
 800326c:	2300      	movs	r3, #0
 800326e:	e021      	b.n	80032b4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	3301      	adds	r3, #1
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff fbcd 	bl	8002a1c <WIZCHIP_READ>
 8003282:	4603      	mov	r3, r0
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	2b00      	cmp	r3, #0
 800328a:	d006      	beq.n	800329a <disconnect+0xc2>
	   {
	      close(sn);
 800328c:	79fb      	ldrb	r3, [r7, #7]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff feda 	bl	8003048 <close>
	      return SOCKERR_TIMEOUT;
 8003294:	f06f 030c 	mvn.w	r3, #12
 8003298:	e00c      	b.n	80032b4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	3301      	adds	r3, #1
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff fbb8 	bl	8002a1c <WIZCHIP_READ>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1de      	bne.n	8003270 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80032b2:	2301      	movs	r3, #1
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	200000d2 	.word	0x200000d2
 80032c0:	200000d0 	.word	0x200000d0

080032c4 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	6039      	str	r1, [r7, #0]
 80032ce:	71fb      	strb	r3, [r7, #7]
 80032d0:	4613      	mov	r3, r2
 80032d2:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80032d4:	2300      	movs	r3, #0
 80032d6:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80032d8:	2300      	movs	r3, #0
 80032da:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 80032dc:	79fb      	ldrb	r3, [r7, #7]
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d902      	bls.n	80032e8 <send+0x24>
 80032e2:	f04f 33ff 	mov.w	r3, #4294967295
 80032e6:	e0de      	b.n	80034a6 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	3301      	adds	r3, #1
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff fb93 	bl	8002a1c <WIZCHIP_READ>
 80032f6:	4603      	mov	r3, r0
 80032f8:	f003 030f 	and.w	r3, r3, #15
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d002      	beq.n	8003306 <send+0x42>
 8003300:	f06f 0304 	mvn.w	r3, #4
 8003304:	e0cf      	b.n	80034a6 <send+0x1e2>
   CHECK_SOCKDATA();
 8003306:	88bb      	ldrh	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d102      	bne.n	8003312 <send+0x4e>
 800330c:	f06f 030d 	mvn.w	r3, #13
 8003310:	e0c9      	b.n	80034a6 <send+0x1e2>
   tmp = getSn_SR(sn);
 8003312:	79fb      	ldrb	r3, [r7, #7]
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	3301      	adds	r3, #1
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff fb7c 	bl	8002a1c <WIZCHIP_READ>
 8003324:	4603      	mov	r3, r0
 8003326:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8003328:	7bfb      	ldrb	r3, [r7, #15]
 800332a:	2b17      	cmp	r3, #23
 800332c:	d005      	beq.n	800333a <send+0x76>
 800332e:	7bfb      	ldrb	r3, [r7, #15]
 8003330:	2b1c      	cmp	r3, #28
 8003332:	d002      	beq.n	800333a <send+0x76>
 8003334:	f06f 0306 	mvn.w	r3, #6
 8003338:	e0b5      	b.n	80034a6 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 800333a:	4b5d      	ldr	r3, [pc, #372]	; (80034b0 <send+0x1ec>)
 800333c:	881b      	ldrh	r3, [r3, #0]
 800333e:	461a      	mov	r2, r3
 8003340:	79fb      	ldrb	r3, [r7, #7]
 8003342:	fa42 f303 	asr.w	r3, r2, r3
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d039      	beq.n	80033c2 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800334e:	79fb      	ldrb	r3, [r7, #7]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	3301      	adds	r3, #1
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff fb5e 	bl	8002a1c <WIZCHIP_READ>
 8003360:	4603      	mov	r3, r0
 8003362:	f003 031f 	and.w	r3, r3, #31
 8003366:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	f003 0310 	and.w	r3, r3, #16
 800336e:	2b00      	cmp	r3, #0
 8003370:	d019      	beq.n	80033a6 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	3301      	adds	r3, #1
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800337e:	2110      	movs	r1, #16
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff fb97 	bl	8002ab4 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	2201      	movs	r2, #1
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	b21b      	sxth	r3, r3
 8003390:	43db      	mvns	r3, r3
 8003392:	b21a      	sxth	r2, r3
 8003394:	4b46      	ldr	r3, [pc, #280]	; (80034b0 <send+0x1ec>)
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	b21b      	sxth	r3, r3
 800339a:	4013      	ands	r3, r2
 800339c:	b21b      	sxth	r3, r3
 800339e:	b29a      	uxth	r2, r3
 80033a0:	4b43      	ldr	r3, [pc, #268]	; (80034b0 <send+0x1ec>)
 80033a2:	801a      	strh	r2, [r3, #0]
 80033a4:	e00d      	b.n	80033c2 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d006      	beq.n	80033be <send+0xfa>
      {
         close(sn);
 80033b0:	79fb      	ldrb	r3, [r7, #7]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff fe48 	bl	8003048 <close>
         return SOCKERR_TIMEOUT;
 80033b8:	f06f 030c 	mvn.w	r3, #12
 80033bc:	e073      	b.n	80034a6 <send+0x1e2>
      }
      else return SOCK_BUSY;
 80033be:	2300      	movs	r3, #0
 80033c0:	e071      	b.n	80034a6 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	3301      	adds	r3, #1
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff fb24 	bl	8002a1c <WIZCHIP_READ>
 80033d4:	4603      	mov	r3, r0
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	029b      	lsls	r3, r3, #10
 80033da:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80033dc:	88ba      	ldrh	r2, [r7, #4]
 80033de:	89bb      	ldrh	r3, [r7, #12]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d901      	bls.n	80033e8 <send+0x124>
 80033e4:	89bb      	ldrh	r3, [r7, #12]
 80033e6:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80033e8:	79fb      	ldrb	r3, [r7, #7]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff fc70 	bl	8002cd0 <getSn_TX_FSR>
 80033f0:	4603      	mov	r3, r0
 80033f2:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	3301      	adds	r3, #1
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff fb0b 	bl	8002a1c <WIZCHIP_READ>
 8003406:	4603      	mov	r3, r0
 8003408:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800340a:	7bfb      	ldrb	r3, [r7, #15]
 800340c:	2b17      	cmp	r3, #23
 800340e:	d009      	beq.n	8003424 <send+0x160>
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	2b1c      	cmp	r3, #28
 8003414:	d006      	beq.n	8003424 <send+0x160>
      {
         close(sn);
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff fe15 	bl	8003048 <close>
         return SOCKERR_SOCKSTATUS;
 800341e:	f06f 0306 	mvn.w	r3, #6
 8003422:	e040      	b.n	80034a6 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8003424:	4b23      	ldr	r3, [pc, #140]	; (80034b4 <send+0x1f0>)
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	461a      	mov	r2, r3
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	fa42 f303 	asr.w	r3, r2, r3
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <send+0x180>
 8003438:	88ba      	ldrh	r2, [r7, #4]
 800343a:	89bb      	ldrh	r3, [r7, #12]
 800343c:	429a      	cmp	r2, r3
 800343e:	d901      	bls.n	8003444 <send+0x180>
 8003440:	2300      	movs	r3, #0
 8003442:	e030      	b.n	80034a6 <send+0x1e2>
      if(len <= freesize) break;
 8003444:	88ba      	ldrh	r2, [r7, #4]
 8003446:	89bb      	ldrh	r3, [r7, #12]
 8003448:	429a      	cmp	r2, r3
 800344a:	d900      	bls.n	800344e <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 800344c:	e7cc      	b.n	80033e8 <send+0x124>
      if(len <= freesize) break;
 800344e:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8003450:	88ba      	ldrh	r2, [r7, #4]
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	6839      	ldr	r1, [r7, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff fc85 	bl	8002d66 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 800345c:	79fb      	ldrb	r3, [r7, #7]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	3301      	adds	r3, #1
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003468:	2120      	movs	r1, #32
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff fb22 	bl	8002ab4 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8003470:	bf00      	nop
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	3301      	adds	r3, #1
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff facc 	bl	8002a1c <WIZCHIP_READ>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f3      	bne.n	8003472 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	2201      	movs	r2, #1
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	b21a      	sxth	r2, r3
 8003494:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <send+0x1ec>)
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	b21b      	sxth	r3, r3
 800349a:	4313      	orrs	r3, r2
 800349c:	b21b      	sxth	r3, r3
 800349e:	b29a      	uxth	r2, r3
 80034a0:	4b03      	ldr	r3, [pc, #12]	; (80034b0 <send+0x1ec>)
 80034a2:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80034a4:	88bb      	ldrh	r3, [r7, #4]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	200000d2 	.word	0x200000d2
 80034b4:	200000d0 	.word	0x200000d0

080034b8 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	bf00      	nop
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr

080034c4 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	bf00      	nop
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr

080034d0 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	bf00      	nop
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr

080034dc <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
 80034e0:	bf00      	nop
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr

080034e8 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	4618      	mov	r0, r3
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr

08003500 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	70fb      	strb	r3, [r7, #3]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	78fa      	ldrb	r2, [r7, #3]
 8003510:	701a      	strb	r2, [r3, #0]
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr

0800351c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
 8003520:	2300      	movs	r3, #0
 8003522:	4618      	mov	r0, r3
 8003524:	46bd      	mov	sp, r7
 8003526:	bc80      	pop	{r7}
 8003528:	4770      	bx	lr

0800352a <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	4603      	mov	r3, r0
 8003532:	71fb      	strb	r3, [r7, #7]
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr
	...

08003540 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <reg_wizchip_cs_cbfunc+0x16>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d106      	bne.n	8003564 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8003556:	4b09      	ldr	r3, [pc, #36]	; (800357c <reg_wizchip_cs_cbfunc+0x3c>)
 8003558:	4a09      	ldr	r2, [pc, #36]	; (8003580 <reg_wizchip_cs_cbfunc+0x40>)
 800355a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 800355c:	4b07      	ldr	r3, [pc, #28]	; (800357c <reg_wizchip_cs_cbfunc+0x3c>)
 800355e:	4a09      	ldr	r2, [pc, #36]	; (8003584 <reg_wizchip_cs_cbfunc+0x44>)
 8003560:	619a      	str	r2, [r3, #24]
 8003562:	e005      	b.n	8003570 <reg_wizchip_cs_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8003564:	4a05      	ldr	r2, [pc, #20]	; (800357c <reg_wizchip_cs_cbfunc+0x3c>)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800356a:	4a04      	ldr	r2, [pc, #16]	; (800357c <reg_wizchip_cs_cbfunc+0x3c>)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	6193      	str	r3, [r2, #24]
   }
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	20000008 	.word	0x20000008
 8003580:	080034d1 	.word	0x080034d1
 8003584:	080034dd 	.word	0x080034dd

08003588 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003592:	bf00      	nop
 8003594:	4b0e      	ldr	r3, [pc, #56]	; (80035d0 <reg_wizchip_spi_cbfunc+0x48>)
 8003596:	881b      	ldrh	r3, [r3, #0]
 8003598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0f9      	beq.n	8003594 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <reg_wizchip_spi_cbfunc+0x24>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d106      	bne.n	80035ba <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80035ac:	4b08      	ldr	r3, [pc, #32]	; (80035d0 <reg_wizchip_spi_cbfunc+0x48>)
 80035ae:	4a09      	ldr	r2, [pc, #36]	; (80035d4 <reg_wizchip_spi_cbfunc+0x4c>)
 80035b0:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80035b2:	4b07      	ldr	r3, [pc, #28]	; (80035d0 <reg_wizchip_spi_cbfunc+0x48>)
 80035b4:	4a08      	ldr	r2, [pc, #32]	; (80035d8 <reg_wizchip_spi_cbfunc+0x50>)
 80035b6:	621a      	str	r2, [r3, #32]
 80035b8:	e005      	b.n	80035c6 <reg_wizchip_spi_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80035ba:	4a05      	ldr	r2, [pc, #20]	; (80035d0 <reg_wizchip_spi_cbfunc+0x48>)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80035c0:	4a03      	ldr	r2, [pc, #12]	; (80035d0 <reg_wizchip_spi_cbfunc+0x48>)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	6213      	str	r3, [r2, #32]
   }
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr
 80035d0:	20000008 	.word	0x20000008
 80035d4:	0800351d 	.word	0x0800351d
 80035d8:	0800352b 	.word	0x0800352b

080035dc <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 80035dc:	b590      	push	{r4, r7, lr}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	6039      	str	r1, [r7, #0]
 80035e6:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 80035e8:	2300      	movs	r3, #0
 80035ea:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 80035ec:	2300      	movs	r3, #0
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	2300      	movs	r3, #0
 80035f2:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	2b0f      	cmp	r3, #15
 80035f8:	f200 80c2 	bhi.w	8003780 <ctlwizchip+0x1a4>
 80035fc:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <ctlwizchip+0x28>)
 80035fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003602:	bf00      	nop
 8003604:	08003645 	.word	0x08003645
 8003608:	0800364b 	.word	0x0800364b
 800360c:	08003677 	.word	0x08003677
 8003610:	0800366b 	.word	0x0800366b
 8003614:	08003685 	.word	0x08003685
 8003618:	08003691 	.word	0x08003691
 800361c:	0800369f 	.word	0x0800369f
 8003620:	080036c5 	.word	0x080036c5
 8003624:	080036eb 	.word	0x080036eb
 8003628:	08003725 	.word	0x08003725
 800362c:	0800372b 	.word	0x0800372b
 8003630:	08003733 	.word	0x08003733
 8003634:	08003787 	.word	0x08003787
 8003638:	0800373b 	.word	0x0800373b
 800363c:	08003749 	.word	0x08003749
 8003640:	08003765 	.word	0x08003765
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8003644:	f000 f8a8 	bl	8003798 <wizchip_sw_reset>
         break;
 8003648:	e09e      	b.n	8003788 <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d004      	beq.n	800365a <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	3308      	adds	r3, #8
 8003658:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	4611      	mov	r1, r2
 8003660:	4618      	mov	r0, r3
 8003662:	f000 f8e5 	bl	8003830 <wizchip_init>
 8003666:	4603      	mov	r3, r0
 8003668:	e08f      	b.n	800378a <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f000 f96a 	bl	8003948 <wizchip_clrinterrupt>
         break;
 8003674:	e088      	b.n	8003788 <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8003676:	f000 f985 	bl	8003984 <wizchip_getinterrupt>
 800367a:	4603      	mov	r3, r0
 800367c:	461a      	mov	r2, r3
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	801a      	strh	r2, [r3, #0]
         break;
 8003682:	e081      	b.n	8003788 <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	4618      	mov	r0, r3
 800368a:	f000 f9a0 	bl	80039ce <wizchip_setinterruptmask>
         break;         
 800368e:	e07b      	b.n	8003788 <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8003690:	f000 f9b8 	bl	8003a04 <wizchip_getinterruptmask>
 8003694:	4603      	mov	r3, r0
 8003696:	461a      	mov	r2, r3
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	801a      	strh	r2, [r3, #0]
         break;
 800369c:	e074      	b.n	8003788 <ctlwizchip+0x1ac>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	0a1b      	lsrs	r3, r3, #8
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	4619      	mov	r1, r3
 80036aa:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80036ae:	f7ff fa01 	bl	8002ab4 <WIZCHIP_WRITE>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	881b      	ldrh	r3, [r3, #0]
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	4619      	mov	r1, r3
 80036ba:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80036be:	f7ff f9f9 	bl	8002ab4 <WIZCHIP_WRITE>
         break;
 80036c2:	e061      	b.n	8003788 <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 80036c4:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80036c8:	f7ff f9a8 	bl	8002a1c <WIZCHIP_READ>
 80036cc:	4603      	mov	r3, r0
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	021b      	lsls	r3, r3, #8
 80036d2:	b29c      	uxth	r4, r3
 80036d4:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80036d8:	f7ff f9a0 	bl	8002a1c <WIZCHIP_READ>
 80036dc:	4603      	mov	r3, r0
 80036de:	b29b      	uxth	r3, r3
 80036e0:	4423      	add	r3, r4
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	801a      	strh	r2, [r3, #0]
         break;
 80036e8:	e04e      	b.n	8003788 <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80036ea:	4b2a      	ldr	r3, [pc, #168]	; (8003794 <ctlwizchip+0x1b8>)
 80036ec:	789a      	ldrb	r2, [r3, #2]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	3301      	adds	r3, #1
 80036f6:	4a27      	ldr	r2, [pc, #156]	; (8003794 <ctlwizchip+0x1b8>)
 80036f8:	78d2      	ldrb	r2, [r2, #3]
 80036fa:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	3302      	adds	r3, #2
 8003700:	4a24      	ldr	r2, [pc, #144]	; (8003794 <ctlwizchip+0x1b8>)
 8003702:	7912      	ldrb	r2, [r2, #4]
 8003704:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	3303      	adds	r3, #3
 800370a:	4a22      	ldr	r2, [pc, #136]	; (8003794 <ctlwizchip+0x1b8>)
 800370c:	7952      	ldrb	r2, [r2, #5]
 800370e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	3304      	adds	r3, #4
 8003714:	4a1f      	ldr	r2, [pc, #124]	; (8003794 <ctlwizchip+0x1b8>)
 8003716:	7992      	ldrb	r2, [r2, #6]
 8003718:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	3305      	adds	r3, #5
 800371e:	2200      	movs	r2, #0
 8003720:	701a      	strb	r2, [r3, #0]
         break;
 8003722:	e031      	b.n	8003788 <ctlwizchip+0x1ac>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8003724:	f000 f9c0 	bl	8003aa8 <wizphy_reset>
         break;
 8003728:	e02e      	b.n	8003788 <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 800372a:	6838      	ldr	r0, [r7, #0]
 800372c:	f000 f9e3 	bl	8003af6 <wizphy_setphyconf>
         break;
 8003730:	e02a      	b.n	8003788 <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8003732:	6838      	ldr	r0, [r7, #0]
 8003734:	f000 fa21 	bl	8003b7a <wizphy_getphyconf>
         break;
 8003738:	e026      	b.n	8003788 <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f000 fa67 	bl	8003c12 <wizphy_setphypmode>
 8003744:	4603      	mov	r3, r0
 8003746:	e020      	b.n	800378a <ctlwizchip+0x1ae>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8003748:	f000 f995 	bl	8003a76 <wizphy_getphypmode>
 800374c:	4603      	mov	r3, r0
 800374e:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003750:	7dfb      	ldrb	r3, [r7, #23]
 8003752:	2bff      	cmp	r3, #255	; 0xff
 8003754:	d102      	bne.n	800375c <ctlwizchip+0x180>
 8003756:	f04f 33ff 	mov.w	r3, #4294967295
 800375a:	e016      	b.n	800378a <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	7dfa      	ldrb	r2, [r7, #23]
 8003760:	701a      	strb	r2, [r3, #0]
         break;
 8003762:	e011      	b.n	8003788 <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8003764:	f000 f971 	bl	8003a4a <wizphy_getphylink>
 8003768:	4603      	mov	r3, r0
 800376a:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 800376c:	7dfb      	ldrb	r3, [r7, #23]
 800376e:	2bff      	cmp	r3, #255	; 0xff
 8003770:	d102      	bne.n	8003778 <ctlwizchip+0x19c>
 8003772:	f04f 33ff 	mov.w	r3, #4294967295
 8003776:	e008      	b.n	800378a <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	7dfa      	ldrb	r2, [r7, #23]
 800377c:	701a      	strb	r2, [r3, #0]
         break;
 800377e:	e003      	b.n	8003788 <ctlwizchip+0x1ac>
   #endif      
      default:
         return -1;
 8003780:	f04f 33ff 	mov.w	r3, #4294967295
 8003784:	e001      	b.n	800378a <ctlwizchip+0x1ae>
         break;
 8003786:	bf00      	nop
   }
   return 0;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	371c      	adds	r7, #28
 800378e:	46bd      	mov	sp, r7
 8003790:	bd90      	pop	{r4, r7, pc}
 8003792:	bf00      	nop
 8003794:	20000008 	.word	0x20000008

08003798 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800379e:	1d3b      	adds	r3, r7, #4
 80037a0:	2206      	movs	r2, #6
 80037a2:	4619      	mov	r1, r3
 80037a4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80037a8:	f7ff f9d2 	bl	8002b50 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80037ac:	f107 0314 	add.w	r3, r7, #20
 80037b0:	2204      	movs	r2, #4
 80037b2:	4619      	mov	r1, r3
 80037b4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80037b8:	f7ff f9ca 	bl	8002b50 <WIZCHIP_READ_BUF>
 80037bc:	f107 0310 	add.w	r3, r7, #16
 80037c0:	2204      	movs	r2, #4
 80037c2:	4619      	mov	r1, r3
 80037c4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80037c8:	f7ff f9c2 	bl	8002b50 <WIZCHIP_READ_BUF>
 80037cc:	f107 030c 	add.w	r3, r7, #12
 80037d0:	2204      	movs	r2, #4
 80037d2:	4619      	mov	r1, r3
 80037d4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80037d8:	f7ff f9ba 	bl	8002b50 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80037dc:	2180      	movs	r1, #128	; 0x80
 80037de:	2000      	movs	r0, #0
 80037e0:	f7ff f968 	bl	8002ab4 <WIZCHIP_WRITE>
   getMR(); // for delay
 80037e4:	2000      	movs	r0, #0
 80037e6:	f7ff f919 	bl	8002a1c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80037ea:	1d3b      	adds	r3, r7, #4
 80037ec:	2206      	movs	r2, #6
 80037ee:	4619      	mov	r1, r3
 80037f0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80037f4:	f7ff fa0c 	bl	8002c10 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80037f8:	f107 0314 	add.w	r3, r7, #20
 80037fc:	2204      	movs	r2, #4
 80037fe:	4619      	mov	r1, r3
 8003800:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003804:	f7ff fa04 	bl	8002c10 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8003808:	f107 0310 	add.w	r3, r7, #16
 800380c:	2204      	movs	r2, #4
 800380e:	4619      	mov	r1, r3
 8003810:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003814:	f7ff f9fc 	bl	8002c10 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8003818:	f107 030c 	add.w	r3, r7, #12
 800381c:	2204      	movs	r2, #4
 800381e:	4619      	mov	r1, r3
 8003820:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003824:	f7ff f9f4 	bl	8002c10 <WIZCHIP_WRITE_BUF>
}
 8003828:	bf00      	nop
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800383a:	2300      	movs	r3, #0
 800383c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800383e:	f7ff ffab 	bl	8003798 <wizchip_sw_reset>
   if(txsize)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d03b      	beq.n	80038c0 <wizchip_init+0x90>
   {
      tmp = 0;
 8003848:	2300      	movs	r3, #0
 800384a:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800384c:	2300      	movs	r3, #0
 800384e:	73fb      	strb	r3, [r7, #15]
 8003850:	e015      	b.n	800387e <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8003852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	781a      	ldrb	r2, [r3, #0]
 800385c:	7bbb      	ldrb	r3, [r7, #14]
 800385e:	4413      	add	r3, r2
 8003860:	b2db      	uxtb	r3, r3
 8003862:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8003864:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003868:	2b10      	cmp	r3, #16
 800386a:	dd02      	ble.n	8003872 <wizchip_init+0x42>
 800386c:	f04f 33ff 	mov.w	r3, #4294967295
 8003870:	e066      	b.n	8003940 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003876:	b2db      	uxtb	r3, r3
 8003878:	3301      	adds	r3, #1
 800387a:	b2db      	uxtb	r3, r3
 800387c:	73fb      	strb	r3, [r7, #15]
 800387e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003882:	2b07      	cmp	r3, #7
 8003884:	dde5      	ble.n	8003852 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003886:	2300      	movs	r3, #0
 8003888:	73fb      	strb	r3, [r7, #15]
 800388a:	e015      	b.n	80038b8 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 800388c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	3301      	adds	r3, #1
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800389a:	4618      	mov	r0, r3
 800389c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	4413      	add	r3, r2
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	4619      	mov	r1, r3
 80038a8:	f7ff f904 	bl	8002ab4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80038ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	3301      	adds	r3, #1
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	73fb      	strb	r3, [r7, #15]
 80038b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038bc:	2b07      	cmp	r3, #7
 80038be:	dde5      	ble.n	800388c <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d03b      	beq.n	800393e <wizchip_init+0x10e>
   {
      tmp = 0;
 80038c6:	2300      	movs	r3, #0
 80038c8:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80038ca:	2300      	movs	r3, #0
 80038cc:	73fb      	strb	r3, [r7, #15]
 80038ce:	e015      	b.n	80038fc <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80038d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	4413      	add	r3, r2
 80038d8:	781a      	ldrb	r2, [r3, #0]
 80038da:	7bbb      	ldrb	r3, [r7, #14]
 80038dc:	4413      	add	r3, r2
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80038e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80038e6:	2b10      	cmp	r3, #16
 80038e8:	dd02      	ble.n	80038f0 <wizchip_init+0xc0>
 80038ea:	f04f 33ff 	mov.w	r3, #4294967295
 80038ee:	e027      	b.n	8003940 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80038f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	3301      	adds	r3, #1
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	73fb      	strb	r3, [r7, #15]
 80038fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003900:	2b07      	cmp	r3, #7
 8003902:	dde5      	ble.n	80038d0 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003904:	2300      	movs	r3, #0
 8003906:	73fb      	strb	r3, [r7, #15]
 8003908:	e015      	b.n	8003936 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800390a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	3301      	adds	r3, #1
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8003918:	4618      	mov	r0, r3
 800391a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	4413      	add	r3, r2
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	4619      	mov	r1, r3
 8003926:	f7ff f8c5 	bl	8002ab4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800392a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800392e:	b2db      	uxtb	r3, r3
 8003930:	3301      	adds	r3, #1
 8003932:	b2db      	uxtb	r3, r3
 8003934:	73fb      	strb	r3, [r7, #15]
 8003936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800393a:	2b07      	cmp	r3, #7
 800393c:	dde5      	ble.n	800390a <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8003952:	88fb      	ldrh	r3, [r7, #6]
 8003954:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8003956:	88fb      	ldrh	r3, [r7, #6]
 8003958:	0a1b      	lsrs	r3, r3, #8
 800395a:	b29b      	uxth	r3, r3
 800395c:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	f023 030f 	bic.w	r3, r3, #15
 8003964:	b2db      	uxtb	r3, r3
 8003966:	4619      	mov	r1, r3
 8003968:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 800396c:	f7ff f8a2 	bl	8002ab4 <WIZCHIP_WRITE>
   setSIR(sir);
 8003970:	7bbb      	ldrb	r3, [r7, #14]
 8003972:	4619      	mov	r1, r3
 8003974:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8003978:	f7ff f89c 	bl	8002ab4 <WIZCHIP_WRITE>
#endif   
}
 800397c:	bf00      	nop
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 800398a:	2300      	movs	r3, #0
 800398c:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 800398e:	2300      	movs	r3, #0
 8003990:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003992:	2300      	movs	r3, #0
 8003994:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8003996:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 800399a:	f7ff f83f 	bl	8002a1c <WIZCHIP_READ>
 800399e:	4603      	mov	r3, r0
 80039a0:	f023 030f 	bic.w	r3, r3, #15
 80039a4:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 80039a6:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 80039aa:	f7ff f837 	bl	8002a1c <WIZCHIP_READ>
 80039ae:	4603      	mov	r3, r0
 80039b0:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80039b2:	79bb      	ldrb	r3, [r7, #6]
 80039b4:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80039b6:	88bb      	ldrh	r3, [r7, #4]
 80039b8:	021b      	lsls	r3, r3, #8
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	79fb      	ldrb	r3, [r7, #7]
 80039be:	b29b      	uxth	r3, r3
 80039c0:	4413      	add	r3, r2
 80039c2:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80039c4:	88bb      	ldrh	r3, [r7, #4]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b084      	sub	sp, #16
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	4603      	mov	r3, r0
 80039d6:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 80039d8:	88fb      	ldrh	r3, [r7, #6]
 80039da:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80039dc:	88fb      	ldrh	r3, [r7, #6]
 80039de:	0a1b      	lsrs	r3, r3, #8
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
 80039e6:	4619      	mov	r1, r3
 80039e8:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80039ec:	f7ff f862 	bl	8002ab4 <WIZCHIP_WRITE>
   setSIMR(simr);
 80039f0:	7bbb      	ldrb	r3, [r7, #14]
 80039f2:	4619      	mov	r1, r3
 80039f4:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80039f8:	f7ff f85c 	bl	8002ab4 <WIZCHIP_WRITE>
#endif   
}
 80039fc:	bf00      	nop
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003a12:	2300      	movs	r3, #0
 8003a14:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8003a16:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8003a1a:	f7fe ffff 	bl	8002a1c <WIZCHIP_READ>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8003a22:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003a26:	f7fe fff9 	bl	8002a1c <WIZCHIP_READ>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8003a2e:	79bb      	ldrb	r3, [r7, #6]
 8003a30:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8003a32:	88bb      	ldrh	r3, [r7, #4]
 8003a34:	021b      	lsls	r3, r3, #8
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	79fb      	ldrb	r3, [r7, #7]
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	4413      	add	r3, r2
 8003a3e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003a40:	88bb      	ldrh	r3, [r7, #4]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b082      	sub	sp, #8
 8003a4e:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8003a50:	2300      	movs	r3, #0
 8003a52:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8003a54:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003a58:	f7fe ffe0 	bl	8002a1c <WIZCHIP_READ>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8003a66:	2301      	movs	r3, #1
 8003a68:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8003a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b082      	sub	sp, #8
 8003a7a:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8003a80:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003a84:	f7fe ffca 	bl	8002a1c <WIZCHIP_READ>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a8e:	2b30      	cmp	r3, #48	; 0x30
 8003a90:	d102      	bne.n	8003a98 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8003a92:	2301      	movs	r3, #1
 8003a94:	71fb      	strb	r3, [r7, #7]
 8003a96:	e001      	b.n	8003a9c <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8003a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8003aae:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003ab2:	f7fe ffb3 	bl	8002a1c <WIZCHIP_READ>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ac0:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8003ac2:	79fb      	ldrb	r3, [r7, #7]
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003aca:	f7fe fff3 	bl	8002ab4 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8003ace:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003ad2:	f7fe ffa3 	bl	8002a1c <WIZCHIP_READ>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8003ada:	79fb      	ldrb	r3, [r7, #7]
 8003adc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ae0:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8003ae2:	79fb      	ldrb	r3, [r7, #7]
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003aea:	f7fe ffe3 	bl	8002ab4 <WIZCHIP_WRITE>
}
 8003aee:	bf00      	nop
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b084      	sub	sp, #16
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d104      	bne.n	8003b14 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
 8003b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b10:	73fb      	strb	r3, [r7, #15]
 8003b12:	e003      	b.n	8003b1c <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b1a:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	785b      	ldrb	r3, [r3, #1]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d104      	bne.n	8003b2e <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003b2a:	73fb      	strb	r3, [r7, #15]
 8003b2c:	e019      	b.n	8003b62 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	78db      	ldrb	r3, [r3, #3]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d10d      	bne.n	8003b52 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	789b      	ldrb	r3, [r3, #2]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d104      	bne.n	8003b48 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
 8003b40:	f043 0318 	orr.w	r3, r3, #24
 8003b44:	73fb      	strb	r3, [r7, #15]
 8003b46:	e00c      	b.n	8003b62 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
 8003b4a:	f043 0308 	orr.w	r3, r3, #8
 8003b4e:	73fb      	strb	r3, [r7, #15]
 8003b50:	e007      	b.n	8003b62 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	789b      	ldrb	r3, [r3, #2]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d103      	bne.n	8003b62 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	f043 0310 	orr.w	r3, r3, #16
 8003b60:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
 8003b64:	4619      	mov	r1, r3
 8003b66:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003b6a:	f7fe ffa3 	bl	8002ab4 <WIZCHIP_WRITE>
   wizphy_reset();
 8003b6e:	f7ff ff9b 	bl	8003aa8 <wizphy_reset>
}
 8003b72:	bf00      	nop
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b084      	sub	sp, #16
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8003b82:	2300      	movs	r3, #0
 8003b84:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8003b86:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003b8a:	f7fe ff47 	bl	8002a1c <WIZCHIP_READ>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8003b92:	7bfb      	ldrb	r3, [r7, #15]
 8003b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	bf14      	ite	ne
 8003b9c:	2301      	movne	r3, #1
 8003b9e:	2300      	moveq	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
 8003baa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	d001      	beq.n	8003bb6 <wizphy_getphyconf+0x3c>
 8003bb2:	2b38      	cmp	r3, #56	; 0x38
 8003bb4:	d103      	bne.n	8003bbe <wizphy_getphyconf+0x44>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	705a      	strb	r2, [r3, #1]
         break;
 8003bbc:	e003      	b.n	8003bc6 <wizphy_getphyconf+0x4c>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	705a      	strb	r2, [r3, #1]
         break;
 8003bc4:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
 8003bc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bcc:	2b18      	cmp	r3, #24
 8003bce:	d003      	beq.n	8003bd8 <wizphy_getphyconf+0x5e>
 8003bd0:	2b20      	cmp	r3, #32
 8003bd2:	d001      	beq.n	8003bd8 <wizphy_getphyconf+0x5e>
 8003bd4:	2b10      	cmp	r3, #16
 8003bd6:	d103      	bne.n	8003be0 <wizphy_getphyconf+0x66>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	709a      	strb	r2, [r3, #2]
         break;
 8003bde:	e003      	b.n	8003be8 <wizphy_getphyconf+0x6e>
      default:
         phyconf->speed = PHY_SPEED_10;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	709a      	strb	r2, [r3, #2]
         break;
 8003be6:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
 8003bea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bee:	2b18      	cmp	r3, #24
 8003bf0:	d003      	beq.n	8003bfa <wizphy_getphyconf+0x80>
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	d001      	beq.n	8003bfa <wizphy_getphyconf+0x80>
 8003bf6:	2b08      	cmp	r3, #8
 8003bf8:	d103      	bne.n	8003c02 <wizphy_getphyconf+0x88>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	70da      	strb	r2, [r3, #3]
         break;
 8003c00:	e003      	b.n	8003c0a <wizphy_getphyconf+0x90>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	70da      	strb	r2, [r3, #3]
         break;
 8003c08:	bf00      	nop
   }
}
 8003c0a:	bf00      	nop
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b084      	sub	sp, #16
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	4603      	mov	r3, r0
 8003c1a:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8003c20:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003c24:	f7fe fefa 	bl	8002a1c <WIZCHIP_READ>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d102      	bne.n	8003c3c <wizphy_setphypmode+0x2a>
 8003c36:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3a:	e030      	b.n	8003c9e <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
 8003c3e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003c42:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8003c44:	79fb      	ldrb	r3, [r7, #7]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d104      	bne.n	8003c54 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
 8003c4c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003c50:	73fb      	strb	r3, [r7, #15]
 8003c52:	e003      	b.n	8003c5c <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
 8003c56:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003c5a:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
 8003c5e:	4619      	mov	r1, r3
 8003c60:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003c64:	f7fe ff26 	bl	8002ab4 <WIZCHIP_WRITE>
   wizphy_reset();
 8003c68:	f7ff ff1e 	bl	8003aa8 <wizphy_reset>
   tmp = getPHYCFGR();
 8003c6c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003c70:	f7fe fed4 	bl	8002a1c <WIZCHIP_READ>
 8003c74:	4603      	mov	r3, r0
 8003c76:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8003c78:	79fb      	ldrb	r3, [r7, #7]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d106      	bne.n	8003c8c <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
 8003c80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <wizphy_setphypmode+0x88>
 8003c88:	2300      	movs	r3, #0
 8003c8a:	e008      	b.n	8003c9e <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
 8003c8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <wizphy_setphypmode+0x88>
 8003c96:	2300      	movs	r3, #0
 8003c98:	e001      	b.n	8003c9e <wizphy_setphypmode+0x8c>
   }
   return -1;
 8003c9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
	...

08003ca8 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2206      	movs	r2, #6
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003cba:	f7fe ffa9 	bl	8002c10 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	330e      	adds	r3, #14
 8003cc2:	2204      	movs	r2, #4
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003cca:	f7fe ffa1 	bl	8002c10 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	330a      	adds	r3, #10
 8003cd2:	2204      	movs	r2, #4
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003cda:	f7fe ff99 	bl	8002c10 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3306      	adds	r3, #6
 8003ce2:	2204      	movs	r2, #4
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003cea:	f7fe ff91 	bl	8002c10 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	7c9a      	ldrb	r2, [r3, #18]
 8003cf2:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <wizchip_setnetinfo+0x78>)
 8003cf4:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	7cda      	ldrb	r2, [r3, #19]
 8003cfa:	4b09      	ldr	r3, [pc, #36]	; (8003d20 <wizchip_setnetinfo+0x78>)
 8003cfc:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	7d1a      	ldrb	r2, [r3, #20]
 8003d02:	4b07      	ldr	r3, [pc, #28]	; (8003d20 <wizchip_setnetinfo+0x78>)
 8003d04:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	7d5a      	ldrb	r2, [r3, #21]
 8003d0a:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <wizchip_setnetinfo+0x78>)
 8003d0c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	7d9a      	ldrb	r2, [r3, #22]
 8003d12:	4b04      	ldr	r3, [pc, #16]	; (8003d24 <wizchip_setnetinfo+0x7c>)
 8003d14:	701a      	strb	r2, [r3, #0]
}
 8003d16:	bf00      	nop
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	200000ec 	.word	0x200000ec
 8003d24:	200000f0 	.word	0x200000f0

08003d28 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003d2e:	4a0c      	ldr	r2, [pc, #48]	; (8003d60 <MX_DMA_Init+0x38>)
 8003d30:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <MX_DMA_Init+0x38>)
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	6153      	str	r3, [r2, #20]
 8003d3a:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <MX_DMA_Init+0x38>)
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	607b      	str	r3, [r7, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003d46:	2200      	movs	r2, #0
 8003d48:	2100      	movs	r1, #0
 8003d4a:	200e      	movs	r0, #14
 8003d4c:	f7fc fbbf 	bl	80004ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003d50:	200e      	movs	r0, #14
 8003d52:	f7fc fbd8 	bl	8000506 <HAL_NVIC_EnableIRQ>

}
 8003d56:	bf00      	nop
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40021000 	.word	0x40021000

08003d64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08a      	sub	sp, #40	; 0x28
 8003d68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d6a:	f107 0318 	add.w	r3, r7, #24
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	605a      	str	r2, [r3, #4]
 8003d74:	609a      	str	r2, [r3, #8]
 8003d76:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d78:	4a45      	ldr	r2, [pc, #276]	; (8003e90 <MX_GPIO_Init+0x12c>)
 8003d7a:	4b45      	ldr	r3, [pc, #276]	; (8003e90 <MX_GPIO_Init+0x12c>)
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d82:	6193      	str	r3, [r2, #24]
 8003d84:	4b42      	ldr	r3, [pc, #264]	; (8003e90 <MX_GPIO_Init+0x12c>)
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8c:	617b      	str	r3, [r7, #20]
 8003d8e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d90:	4a3f      	ldr	r2, [pc, #252]	; (8003e90 <MX_GPIO_Init+0x12c>)
 8003d92:	4b3f      	ldr	r3, [pc, #252]	; (8003e90 <MX_GPIO_Init+0x12c>)
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	f043 0304 	orr.w	r3, r3, #4
 8003d9a:	6193      	str	r3, [r2, #24]
 8003d9c:	4b3c      	ldr	r3, [pc, #240]	; (8003e90 <MX_GPIO_Init+0x12c>)
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003da8:	4a39      	ldr	r2, [pc, #228]	; (8003e90 <MX_GPIO_Init+0x12c>)
 8003daa:	4b39      	ldr	r3, [pc, #228]	; (8003e90 <MX_GPIO_Init+0x12c>)
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	f043 0310 	orr.w	r3, r3, #16
 8003db2:	6193      	str	r3, [r2, #24]
 8003db4:	4b36      	ldr	r3, [pc, #216]	; (8003e90 <MX_GPIO_Init+0x12c>)
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	f003 0310 	and.w	r3, r3, #16
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dc0:	4a33      	ldr	r2, [pc, #204]	; (8003e90 <MX_GPIO_Init+0x12c>)
 8003dc2:	4b33      	ldr	r3, [pc, #204]	; (8003e90 <MX_GPIO_Init+0x12c>)
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	f043 0308 	orr.w	r3, r3, #8
 8003dca:	6193      	str	r3, [r2, #24]
 8003dcc:	4b30      	ldr	r3, [pc, #192]	; (8003e90 <MX_GPIO_Init+0x12c>)
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	f003 0308 	and.w	r3, r3, #8
 8003dd4:	60bb      	str	r3, [r7, #8]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dd8:	4a2d      	ldr	r2, [pc, #180]	; (8003e90 <MX_GPIO_Init+0x12c>)
 8003dda:	4b2d      	ldr	r3, [pc, #180]	; (8003e90 <MX_GPIO_Init+0x12c>)
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	f043 0320 	orr.w	r3, r3, #32
 8003de2:	6193      	str	r3, [r2, #24]
 8003de4:	4b2a      	ldr	r3, [pc, #168]	; (8003e90 <MX_GPIO_Init+0x12c>)
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	f003 0320 	and.w	r3, r3, #32
 8003dec:	607b      	str	r3, [r7, #4]
 8003dee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WATCHDOG_GPIO_Port, WATCHDOG_Pin, GPIO_PIN_RESET);
 8003df0:	2200      	movs	r2, #0
 8003df2:	2104      	movs	r1, #4
 8003df4:	4827      	ldr	r0, [pc, #156]	; (8003e94 <MX_GPIO_Init+0x130>)
 8003df6:	f7fd f87b 	bl	8000ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	2110      	movs	r1, #16
 8003dfe:	4826      	ldr	r0, [pc, #152]	; (8003e98 <MX_GPIO_Init+0x134>)
 8003e00:	f7fd f876 	bl	8000ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_RESET);
 8003e04:	2200      	movs	r2, #0
 8003e06:	2110      	movs	r1, #16
 8003e08:	4824      	ldr	r0, [pc, #144]	; (8003e9c <MX_GPIO_Init+0x138>)
 8003e0a:	f7fd f871 	bl	8000ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, COL_LED_Pin|SOCKET_LED_Pin, GPIO_PIN_RESET);
 8003e0e:	2200      	movs	r2, #0
 8003e10:	210c      	movs	r1, #12
 8003e12:	4823      	ldr	r0, [pc, #140]	; (8003ea0 <MX_GPIO_Init+0x13c>)
 8003e14:	f7fd f86c 	bl	8000ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WATCHDOG_Pin;
 8003e18:	2304      	movs	r3, #4
 8003e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e20:	2300      	movs	r3, #0
 8003e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e24:	2302      	movs	r3, #2
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(WATCHDOG_GPIO_Port, &GPIO_InitStruct);
 8003e28:	f107 0318 	add.w	r3, r7, #24
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4819      	ldr	r0, [pc, #100]	; (8003e94 <MX_GPIO_Init+0x130>)
 8003e30:	f7fc fef0 	bl	8000c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = W5500_CS_Pin;
 8003e34:	2310      	movs	r3, #16
 8003e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e40:	2302      	movs	r3, #2
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(W5500_CS_GPIO_Port, &GPIO_InitStruct);
 8003e44:	f107 0318 	add.w	r3, r7, #24
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4813      	ldr	r0, [pc, #76]	; (8003e98 <MX_GPIO_Init+0x134>)
 8003e4c:	f7fc fee2 	bl	8000c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = W5500_RST_Pin;
 8003e50:	2310      	movs	r3, #16
 8003e52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e54:	2301      	movs	r3, #1
 8003e56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(W5500_RST_GPIO_Port, &GPIO_InitStruct);
 8003e60:	f107 0318 	add.w	r3, r7, #24
 8003e64:	4619      	mov	r1, r3
 8003e66:	480d      	ldr	r0, [pc, #52]	; (8003e9c <MX_GPIO_Init+0x138>)
 8003e68:	f7fc fed4 	bl	8000c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = COL_LED_Pin|SOCKET_LED_Pin;
 8003e6c:	230c      	movs	r3, #12
 8003e6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e70:	2301      	movs	r3, #1
 8003e72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e78:	2302      	movs	r3, #2
 8003e7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e7c:	f107 0318 	add.w	r3, r7, #24
 8003e80:	4619      	mov	r1, r3
 8003e82:	4807      	ldr	r0, [pc, #28]	; (8003ea0 <MX_GPIO_Init+0x13c>)
 8003e84:	f7fc fec6 	bl	8000c14 <HAL_GPIO_Init>

}
 8003e88:	bf00      	nop
 8003e8a:	3728      	adds	r7, #40	; 0x28
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40021000 	.word	0x40021000
 8003e94:	40011800 	.word	0x40011800
 8003e98:	40010800 	.word	0x40010800
 8003e9c:	40011000 	.word	0x40011000
 8003ea0:	40011400 	.word	0x40011400

08003ea4 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb4:	2b80      	cmp	r3, #128	; 0x80
 8003eb6:	bf0c      	ite	eq
 8003eb8:	2301      	moveq	r3, #1
 8003eba:	2300      	movne	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr

08003ec8 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8003ed4:	78fa      	ldrb	r2, [r7, #3]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	605a      	str	r2, [r3, #4]
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr

08003ee4 <_write>:
  HAL_UART_Transmit(&huart2, p, len, 10);
  return len;
}
*/
int _write(int file, char* ptr, int len)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  //HAL_UART_Transmit(&huart2, p, len, 10);
  int DataIdx;

  for(DataIdx = 0; DataIdx < len; DataIdx++)
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	e011      	b.n	8003f1a <_write+0x36>
  {
    while(!LL_USART_IsActiveFlag_TXE(USART2))
 8003ef6:	bf00      	nop
 8003ef8:	480c      	ldr	r0, [pc, #48]	; (8003f2c <_write+0x48>)
 8003efa:	f7ff ffd3 	bl	8003ea4 <LL_USART_IsActiveFlag_TXE>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0f9      	beq.n	8003ef8 <_write+0x14>
    {
      //We can put some timeout here
    }
    LL_USART_TransmitData8(USART2, *ptr++);
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	1c5a      	adds	r2, r3, #1
 8003f08:	60ba      	str	r2, [r7, #8]
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	4807      	ldr	r0, [pc, #28]	; (8003f2c <_write+0x48>)
 8003f10:	f7ff ffda 	bl	8003ec8 <LL_USART_TransmitData8>
  for(DataIdx = 0; DataIdx < len; DataIdx++)
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	3301      	adds	r3, #1
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	dbe9      	blt.n	8003ef6 <_write+0x12>
  }
  return len;
 8003f22:	687b      	ldr	r3, [r7, #4]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40004400 	.word	0x40004400

08003f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t w5500_s0_status = 0x10;
 8003f36:	2310      	movs	r3, #16
 8003f38:	73fb      	strb	r3, [r7, #15]
  uint8_t w5500_s1_status = 0x10;
 8003f3a:	2310      	movs	r3, #16
 8003f3c:	73bb      	strb	r3, [r7, #14]

  //uint8_t buf2[]   = "This is DTU-3000 using W5500";
  uint8_t address_target[]  = {192,168,11,101};
 8003f3e:	4b24      	ldr	r3, [pc, #144]	; (8003fd0 <main+0xa0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	607b      	str	r3, [r7, #4]
  uint8_t count = 0;
 8003f44:	2300      	movs	r3, #0
 8003f46:	737b      	strb	r3, [r7, #13]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f48:	f7fc f96c 	bl	8000224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f4c:	f000 f850 	bl	8003ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f50:	f7ff ff08 	bl	8003d64 <MX_GPIO_Init>
  MX_DMA_Init();
 8003f54:	f7ff fee8 	bl	8003d28 <MX_DMA_Init>
  MX_SPI1_Init();
 8003f58:	f000 fa74 	bl	8004444 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8003f5c:	f000 fcea 	bl	8004934 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8003f60:	f000 faa6 	bl	80044b0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  W5500_hw_Rst();
 8003f64:	f000 fd92 	bl	8004a8c <W5500_hw_Rst>
  W5500_init();
 8003f68:	f000 fdaa 	bl	8004ac0 <W5500_init>

  socket(0, Sn_MR_TCP, 5000, SF_TCP_NODELAY);
 8003f6c:	2320      	movs	r3, #32
 8003f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f72:	2101      	movs	r1, #1
 8003f74:	2000      	movs	r0, #0
 8003f76:	f7fe ff53 	bl	8002e20 <socket>
  listen(0);
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	f7ff f8d2 	bl	8003124 <listen>

  //SPI2->CR2 |= 0x0040;    // RXNE interrupt enable
  SPI2->CR1 |= 0x0040;    // SPI enable
 8003f80:	4a14      	ldr	r2, [pc, #80]	; (8003fd4 <main+0xa4>)
 8003f82:	4b14      	ldr	r3, [pc, #80]	; (8003fd4 <main+0xa4>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f8a:	6013      	str	r3, [r2, #0]
  SPI2->DR = Tx[0];       // Write initial byte
 8003f8c:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <main+0xa4>)
 8003f8e:	4a12      	ldr	r2, [pc, #72]	; (8003fd8 <main+0xa8>)
 8003f90:	7812      	ldrb	r2, [r2, #0]
 8003f92:	60da      	str	r2, [r3, #12]

  HAL_SPI_Receive_DMA(&hspi2, Rx, RX_BUF_SIZE);
 8003f94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f98:	4910      	ldr	r1, [pc, #64]	; (8003fdc <main+0xac>)
 8003f9a:	4811      	ldr	r0, [pc, #68]	; (8003fe0 <main+0xb0>)
 8003f9c:	f7fd fe9c 	bl	8001cd8 <HAL_SPI_Receive_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin(SOCKET_LED_GPIO_Port, SOCKET_LED_Pin);
 8003fa0:	2108      	movs	r1, #8
 8003fa2:	4810      	ldr	r0, [pc, #64]	; (8003fe4 <main+0xb4>)
 8003fa4:	f7fc ffbc 	bl	8000f20 <HAL_GPIO_TogglePin>
    //w5500_s1_status = getSn_SR(1);

	  //printf("W5500 Status Socket0 == 0x%X Socket1 == 0x%X \r \n", w5500_s0_status , w5500_s1_status);
	  //printf("%d %d %d %d %d %d \r \n", Rx[0], Rx[1], Rx[2], Rx[3], Rx[4], Rx[5]);

	  HAL_Delay(50);
 8003fa8:	2032      	movs	r0, #50	; 0x32
 8003faa:	f7fc f99d 	bl	80002e8 <HAL_Delay>
	  }
	  */

    // Loopback Test

    if((ret = myLoopback_tcps(SOCK_TCPS0, gDATABUF, 5000)) < 0)
 8003fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb2:	490d      	ldr	r1, [pc, #52]	; (8003fe8 <main+0xb8>)
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	f000 f861 	bl	800407c <myLoopback_tcps>
 8003fba:	60b8      	str	r0, [r7, #8]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	da03      	bge.n	8003fca <main+0x9a>
    {
      printf("WSOCKET ERROR : %d \r \n", ret);
 8003fc2:	68b9      	ldr	r1, [r7, #8]
 8003fc4:	4809      	ldr	r0, [pc, #36]	; (8003fec <main+0xbc>)
 8003fc6:	f000 fed3 	bl	8004d70 <iprintf>
    }

    spi_proc();
 8003fca:	f000 f98b 	bl	80042e4 <spi_proc>
	  HAL_GPIO_TogglePin(SOCKET_LED_GPIO_Port, SOCKET_LED_Pin);
 8003fce:	e7e7      	b.n	8003fa0 <main+0x70>
 8003fd0:	08005b30 	.word	0x08005b30
 8003fd4:	40003800 	.word	0x40003800
 8003fd8:	200000f4 	.word	0x200000f4
 8003fdc:	200004f4 	.word	0x200004f4
 8003fe0:	20001114 	.word	0x20001114
 8003fe4:	40011400 	.word	0x40011400
 8003fe8:	20000914 	.word	0x20000914
 8003fec:	08005b18 	.word	0x08005b18

08003ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b090      	sub	sp, #64	; 0x40
 8003ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ff6:	f107 0318 	add.w	r3, r7, #24
 8003ffa:	2228      	movs	r2, #40	; 0x28
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 fe03 	bl	8004c0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004004:	1d3b      	adds	r3, r7, #4
 8004006:	2200      	movs	r2, #0
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	605a      	str	r2, [r3, #4]
 800400c:	609a      	str	r2, [r3, #8]
 800400e:	60da      	str	r2, [r3, #12]
 8004010:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004012:	2301      	movs	r3, #1
 8004014:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004016:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800401a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800401c:	2300      	movs	r3, #0
 800401e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004020:	2301      	movs	r3, #1
 8004022:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004024:	2302      	movs	r3, #2
 8004026:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004028:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800402c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800402e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004032:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004034:	f107 0318 	add.w	r3, r7, #24
 8004038:	4618      	mov	r0, r3
 800403a:	f7fc ff83 	bl	8000f44 <HAL_RCC_OscConfig>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8004044:	f000 f9f8 	bl	8004438 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004048:	230f      	movs	r3, #15
 800404a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800404c:	2302      	movs	r3, #2
 800404e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004050:	2300      	movs	r3, #0
 8004052:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004058:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800405a:	2300      	movs	r3, #0
 800405c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800405e:	1d3b      	adds	r3, r7, #4
 8004060:	2102      	movs	r1, #2
 8004062:	4618      	mov	r0, r3
 8004064:	f7fd f9d2 	bl	800140c <HAL_RCC_ClockConfig>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800406e:	f000 f9e3 	bl	8004438 <Error_Handler>
  }
}
 8004072:	bf00      	nop
 8004074:	3740      	adds	r7, #64	; 0x40
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <myLoopback_tcps>:

/* USER CODE BEGIN 4 */
int32_t myLoopback_tcps(uint8_t sn, uint8_t* buf, uint16_t port)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	4603      	mov	r3, r0
 8004084:	6039      	str	r1, [r7, #0]
 8004086:	71fb      	strb	r3, [r7, #7]
 8004088:	4613      	mov	r3, r2
 800408a:	80bb      	strh	r3, [r7, #4]
   int32_t ret;
   uint16_t size = 0, sentsize=0;
 800408c:	2300      	movs	r3, #0
 800408e:	82fb      	strh	r3, [r7, #22]
 8004090:	2300      	movs	r3, #0
 8004092:	82bb      	strh	r3, [r7, #20]
#ifdef _DEBUG_STX_
   uint8_t debug_buf[] = {0xCC, 0xEE};
 8004094:	4b88      	ldr	r3, [pc, #544]	; (80042b8 <myLoopback_tcps+0x23c>)
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	81bb      	strh	r3, [r7, #12]
#endif

   switch(getSn_SR(sn))
 800409a:	79fb      	ldrb	r3, [r7, #7]
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	3301      	adds	r3, #1
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fe fcb8 	bl	8002a1c <WIZCHIP_READ>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b1c      	cmp	r3, #28
 80040b0:	f200 80f7 	bhi.w	80042a2 <myLoopback_tcps+0x226>
 80040b4:	a201      	add	r2, pc, #4	; (adr r2, 80040bc <myLoopback_tcps+0x40>)
 80040b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ba:	bf00      	nop
 80040bc:	08004271 	.word	0x08004271
 80040c0:	080042a3 	.word	0x080042a3
 80040c4:	080042a3 	.word	0x080042a3
 80040c8:	080042a3 	.word	0x080042a3
 80040cc:	080042a3 	.word	0x080042a3
 80040d0:	080042a3 	.word	0x080042a3
 80040d4:	080042a3 	.word	0x080042a3
 80040d8:	080042a3 	.word	0x080042a3
 80040dc:	080042a3 	.word	0x080042a3
 80040e0:	080042a3 	.word	0x080042a3
 80040e4:	080042a3 	.word	0x080042a3
 80040e8:	080042a3 	.word	0x080042a3
 80040ec:	080042a3 	.word	0x080042a3
 80040f0:	080042a3 	.word	0x080042a3
 80040f4:	080042a3 	.word	0x080042a3
 80040f8:	080042a3 	.word	0x080042a3
 80040fc:	080042a3 	.word	0x080042a3
 8004100:	080042a3 	.word	0x080042a3
 8004104:	080042a3 	.word	0x080042a3
 8004108:	0800424f 	.word	0x0800424f
 800410c:	080042a3 	.word	0x080042a3
 8004110:	080042a3 	.word	0x080042a3
 8004114:	080042a3 	.word	0x080042a3
 8004118:	08004131 	.word	0x08004131
 800411c:	080042a3 	.word	0x080042a3
 8004120:	080042a3 	.word	0x080042a3
 8004124:	080042a3 	.word	0x080042a3
 8004128:	080042a3 	.word	0x080042a3
 800412c:	08004223 	.word	0x08004223
   {
      case SOCK_ESTABLISHED :
         if(getSn_IR(sn) & Sn_IR_CON)
 8004130:	79fb      	ldrb	r3, [r7, #7]
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	3301      	adds	r3, #1
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800413c:	4618      	mov	r0, r3
 800413e:	f7fe fc6d 	bl	8002a1c <WIZCHIP_READ>
 8004142:	4603      	mov	r3, r0
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00e      	beq.n	800416a <myLoopback_tcps+0xee>
         {
            //myprintf("%d:Connected\r\n",sn);
            printf("%d:Connected\r\n",sn);
 800414c:	79fb      	ldrb	r3, [r7, #7]
 800414e:	4619      	mov	r1, r3
 8004150:	485a      	ldr	r0, [pc, #360]	; (80042bc <myLoopback_tcps+0x240>)
 8004152:	f000 fe0d 	bl	8004d70 <iprintf>

            setSn_IR(sn,Sn_IR_CON);
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	3301      	adds	r3, #1
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004162:	2101      	movs	r1, #1
 8004164:	4618      	mov	r0, r3
 8004166:	f7fe fca5 	bl	8002ab4 <WIZCHIP_WRITE>
               }
               sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
            }
         }
         */
         if(gU8_buf_enable)
 800416a:	4b55      	ldr	r3, [pc, #340]	; (80042c0 <myLoopback_tcps+0x244>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 8099 	beq.w	80042a6 <myLoopback_tcps+0x22a>
         {
           gU8_buf_enable = 0;
 8004174:	4b52      	ldr	r3, [pc, #328]	; (80042c0 <myLoopback_tcps+0x244>)
 8004176:	2200      	movs	r2, #0
 8004178:	701a      	strb	r2, [r3, #0]
           size = gU16_index_length;
 800417a:	4b52      	ldr	r3, [pc, #328]	; (80042c4 <myLoopback_tcps+0x248>)
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	82fb      	strh	r3, [r7, #22]

           //if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
           if(size > TX_BUF_SIZE) size = TX_BUF_SIZE;
 8004180:	8afb      	ldrh	r3, [r7, #22]
 8004182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004186:	d902      	bls.n	800418e <myLoopback_tcps+0x112>
 8004188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800418c:	82fb      	strh	r3, [r7, #22]
           //size = 10;


           //send(sn, Rx+gU16_index_start, size);

           sentsize = 0;
 800418e:	2300      	movs	r3, #0
 8004190:	82bb      	strh	r3, [r7, #20]
#ifdef _DEBUG_STX_
           send(sn,&debug_buf[0],1);
 8004192:	f107 010c 	add.w	r1, r7, #12
 8004196:	79fb      	ldrb	r3, [r7, #7]
 8004198:	2201      	movs	r2, #1
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff f892 	bl	80032c4 <send>
#endif
           while(size != sentsize)
 80041a0:	e01d      	b.n	80041de <myLoopback_tcps+0x162>
           {
             //ret = send(sn,Rx+gU16_index_start+sentsize,size-sentsize);
             ret = send(sn,Tx+gU16_index_start+sentsize,size-sentsize);
 80041a2:	4b49      	ldr	r3, [pc, #292]	; (80042c8 <myLoopback_tcps+0x24c>)
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	461a      	mov	r2, r3
 80041a8:	8abb      	ldrh	r3, [r7, #20]
 80041aa:	4413      	add	r3, r2
 80041ac:	4a47      	ldr	r2, [pc, #284]	; (80042cc <myLoopback_tcps+0x250>)
 80041ae:	1899      	adds	r1, r3, r2
 80041b0:	8afa      	ldrh	r2, [r7, #22]
 80041b2:	8abb      	ldrh	r3, [r7, #20]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	79fb      	ldrb	r3, [r7, #7]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff f882 	bl	80032c4 <send>
 80041c0:	6138      	str	r0, [r7, #16]
             if(ret < 0)
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	da05      	bge.n	80041d4 <myLoopback_tcps+0x158>
             {
               close(sn);
 80041c8:	79fb      	ldrb	r3, [r7, #7]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fe ff3c 	bl	8003048 <close>
               return ret;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	e06c      	b.n	80042ae <myLoopback_tcps+0x232>
             }
             sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	8abb      	ldrh	r3, [r7, #20]
 80041da:	4413      	add	r3, r2
 80041dc:	82bb      	strh	r3, [r7, #20]
           while(size != sentsize)
 80041de:	8afa      	ldrh	r2, [r7, #22]
 80041e0:	8abb      	ldrh	r3, [r7, #20]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d1dd      	bne.n	80041a2 <myLoopback_tcps+0x126>
           }
#ifdef _DEBUG_STX_
           sentsize = 0;
 80041e6:	2300      	movs	r3, #0
 80041e8:	82bb      	strh	r3, [r7, #20]
           while(1 != sentsize)
 80041ea:	e016      	b.n	800421a <myLoopback_tcps+0x19e>
           {

             ret = send(sn,&debug_buf[1],1);
 80041ec:	f107 030c 	add.w	r3, r7, #12
 80041f0:	1c59      	adds	r1, r3, #1
 80041f2:	79fb      	ldrb	r3, [r7, #7]
 80041f4:	2201      	movs	r2, #1
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff f864 	bl	80032c4 <send>
 80041fc:	6138      	str	r0, [r7, #16]

             if(ret < 0)
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	2b00      	cmp	r3, #0
 8004202:	da05      	bge.n	8004210 <myLoopback_tcps+0x194>
             {
               close(sn);
 8004204:	79fb      	ldrb	r3, [r7, #7]
 8004206:	4618      	mov	r0, r3
 8004208:	f7fe ff1e 	bl	8003048 <close>
               return ret;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	e04e      	b.n	80042ae <myLoopback_tcps+0x232>
             }
             sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	b29a      	uxth	r2, r3
 8004214:	8abb      	ldrh	r3, [r7, #20]
 8004216:	4413      	add	r3, r2
 8004218:	82bb      	strh	r3, [r7, #20]
           while(1 != sentsize)
 800421a:	8abb      	ldrh	r3, [r7, #20]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d1e5      	bne.n	80041ec <myLoopback_tcps+0x170>
           }
           //send(sn,&debug_buf[1],1);
#endif
         }
         // //////// 191015
         break;
 8004220:	e041      	b.n	80042a6 <myLoopback_tcps+0x22a>

      case SOCK_CLOSE_WAIT :
         //myprintf("%d:CloseWait\r\n",sn);
         printf("%d:CloseWait\r\n",sn);
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	4619      	mov	r1, r3
 8004226:	482a      	ldr	r0, [pc, #168]	; (80042d0 <myLoopback_tcps+0x254>)
 8004228:	f000 fda2 	bl	8004d70 <iprintf>

         if((ret=disconnect(sn)) != SOCK_OK) return ret;
 800422c:	79fb      	ldrb	r3, [r7, #7]
 800422e:	4618      	mov	r0, r3
 8004230:	f7fe ffd2 	bl	80031d8 <disconnect>
 8004234:	4603      	mov	r3, r0
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d001      	beq.n	8004242 <myLoopback_tcps+0x1c6>
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	e035      	b.n	80042ae <myLoopback_tcps+0x232>
         //myprintf("%d:Closed\r\n",sn);
         printf("%d:Closed\r\n",sn);
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	4619      	mov	r1, r3
 8004246:	4823      	ldr	r0, [pc, #140]	; (80042d4 <myLoopback_tcps+0x258>)
 8004248:	f000 fd92 	bl	8004d70 <iprintf>
         break;
 800424c:	e02e      	b.n	80042ac <myLoopback_tcps+0x230>

      case SOCK_INIT :
          //myprintf("%d:Listen, port [%d]\r\n",sn, port);
         printf("%d:Listen, port [%d]\r\n",sn, port);
 800424e:	79fb      	ldrb	r3, [r7, #7]
 8004250:	88ba      	ldrh	r2, [r7, #4]
 8004252:	4619      	mov	r1, r3
 8004254:	4820      	ldr	r0, [pc, #128]	; (80042d8 <myLoopback_tcps+0x25c>)
 8004256:	f000 fd8b 	bl	8004d70 <iprintf>

         if( (ret = listen(sn)) != SOCK_OK) return ret;
 800425a:	79fb      	ldrb	r3, [r7, #7]
 800425c:	4618      	mov	r0, r3
 800425e:	f7fe ff61 	bl	8003124 <listen>
 8004262:	4603      	mov	r3, r0
 8004264:	613b      	str	r3, [r7, #16]
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d01e      	beq.n	80042aa <myLoopback_tcps+0x22e>
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	e01e      	b.n	80042ae <myLoopback_tcps+0x232>
         break;

      case SOCK_CLOSED:
         //myprintf("%d:LBTStart\r\n",sn);
         printf("%d:LBTStart\r\n",sn);
 8004270:	79fb      	ldrb	r3, [r7, #7]
 8004272:	4619      	mov	r1, r3
 8004274:	4819      	ldr	r0, [pc, #100]	; (80042dc <myLoopback_tcps+0x260>)
 8004276:	f000 fd7b 	bl	8004d70 <iprintf>

         if((ret=socket(sn,Sn_MR_TCP,port,0x00)) != sn)
 800427a:	88ba      	ldrh	r2, [r7, #4]
 800427c:	79f8      	ldrb	r0, [r7, #7]
 800427e:	2300      	movs	r3, #0
 8004280:	2101      	movs	r1, #1
 8004282:	f7fe fdcd 	bl	8002e20 <socket>
 8004286:	4603      	mov	r3, r0
 8004288:	613b      	str	r3, [r7, #16]
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	429a      	cmp	r2, r3
 8004290:	d001      	beq.n	8004296 <myLoopback_tcps+0x21a>
            return ret;
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	e00b      	b.n	80042ae <myLoopback_tcps+0x232>
         //myprintf("%d:Opened\r\n",sn);
         printf("%d:Opened\r\n",sn);
 8004296:	79fb      	ldrb	r3, [r7, #7]
 8004298:	4619      	mov	r1, r3
 800429a:	4811      	ldr	r0, [pc, #68]	; (80042e0 <myLoopback_tcps+0x264>)
 800429c:	f000 fd68 	bl	8004d70 <iprintf>
         break;
 80042a0:	e004      	b.n	80042ac <myLoopback_tcps+0x230>

      default:
         break;
 80042a2:	bf00      	nop
 80042a4:	e002      	b.n	80042ac <myLoopback_tcps+0x230>
         break;
 80042a6:	bf00      	nop
 80042a8:	e000      	b.n	80042ac <myLoopback_tcps+0x230>
         break;
 80042aa:	bf00      	nop
   }
   return 1;
 80042ac:	2301      	movs	r3, #1
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	08005b94 	.word	0x08005b94
 80042bc:	08005b34 	.word	0x08005b34
 80042c0:	200008f4 	.word	0x200008f4
 80042c4:	200008f8 	.word	0x200008f8
 80042c8:	200008f6 	.word	0x200008f6
 80042cc:	200000f4 	.word	0x200000f4
 80042d0:	08005b44 	.word	0x08005b44
 80042d4:	08005b54 	.word	0x08005b54
 80042d8:	08005b60 	.word	0x08005b60
 80042dc:	08005b78 	.word	0x08005b78
 80042e0:	08005b88 	.word	0x08005b88

080042e4 <spi_proc>:

void spi_proc(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 80042ea:	af00      	add	r7, sp, #0
    //짜투￿????????? 처리?��
    uint16_t tail=0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	f8a7 3402 	strh.w	r3, [r7, #1026]	; 0x402
    uint16_t rxlen = 0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	f8a7 3406 	strh.w	r3, [r7, #1030]	; 0x406
    uint16_t i = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	f8a7 3404 	strh.w	r3, [r7, #1028]	; 0x404

    //?��?�� 버퍼
    uint8_t spi_buf[MAX_DMA_BUFFER_SIZE];

    //DMA 버퍼 카운?��
    spiCurIndex = (uint16_t)(MAX_DMA_BUFFER_SIZE-hdma_spi2_rx.Instance->CNDTR);
 80042fe:	4b43      	ldr	r3, [pc, #268]	; (800440c <spi_proc+0x128>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	b29b      	uxth	r3, r3
 8004306:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800430a:	b29a      	uxth	r2, r3
 800430c:	4b40      	ldr	r3, [pc, #256]	; (8004410 <spi_proc+0x12c>)
 800430e:	801a      	strh	r2, [r3, #0]
    //printf("%02X", (uint8_t)(spiCurIndex & 0x00FF));  // Lower value of 16
    //printf("\r\n");

    //?��?��까�? ?��?? 버퍼 ?��치�? DMA 버퍼 ?��치�? ?��르면
    //?��?��?��￿????????? ?��?�� ?��?��￿?????????￿????????? ?��?�� DMA 버퍼 ?��치까￿????????? ?��?��?��?��.
    if(spiCurIndex != spiPrevIndex)
 8004310:	4b3f      	ldr	r3, [pc, #252]	; (8004410 <spi_proc+0x12c>)
 8004312:	881a      	ldrh	r2, [r3, #0]
 8004314:	4b3f      	ldr	r3, [pc, #252]	; (8004414 <spi_proc+0x130>)
 8004316:	881b      	ldrh	r3, [r3, #0]
 8004318:	429a      	cmp	r2, r3
 800431a:	d072      	beq.n	8004402 <spi_proc+0x11e>
    {
        //?��?��까�? ?��?? ?��치�? DMA 버퍼 ?��치보?�� ?��?��￿?????????
        //?��바�?��? ?��?��￿????????? 것이￿????????? ?��문에 ?��?��?? 같이 처리?��￿??????????��.
        if(spiPrevIndex > spiCurIndex)
 800431c:	4b3d      	ldr	r3, [pc, #244]	; (8004414 <spi_proc+0x130>)
 800431e:	881a      	ldrh	r2, [r3, #0]
 8004320:	4b3b      	ldr	r3, [pc, #236]	; (8004410 <spi_proc+0x12c>)
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d922      	bls.n	800436e <spi_proc+0x8a>
        {
            tail = (MAX_DMA_BUFFER_SIZE - spiPrevIndex);
 8004328:	4b3a      	ldr	r3, [pc, #232]	; (8004414 <spi_proc+0x130>)
 800432a:	881b      	ldrh	r3, [r3, #0]
 800432c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8004330:	f8a7 3402 	strh.w	r3, [r7, #1026]	; 0x402
            //191016 rxlen = spiCurIndex - tail;
            //memcpy(spi_buf, &spiDMABuf[spiPrevIndex], tail);
            //memcpy(spi_buf, &Rx[spiPrevIndex], tail);
            memcpy(Tx, &Rx[spiPrevIndex], tail);
 8004334:	4b37      	ldr	r3, [pc, #220]	; (8004414 <spi_proc+0x130>)
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	461a      	mov	r2, r3
 800433a:	4b37      	ldr	r3, [pc, #220]	; (8004418 <spi_proc+0x134>)
 800433c:	4413      	add	r3, r2
 800433e:	f8b7 2402 	ldrh.w	r2, [r7, #1026]	; 0x402
 8004342:	4619      	mov	r1, r3
 8004344:	4835      	ldr	r0, [pc, #212]	; (800441c <spi_proc+0x138>)
 8004346:	f000 fc55 	bl	8004bf4 <memcpy>

            //memcpy(&spi_buf[tail], &Rx[0], spiCurIndex);
            memcpy(&Tx[tail], &Rx[0], spiCurIndex);
 800434a:	f8b7 3402 	ldrh.w	r3, [r7, #1026]	; 0x402
 800434e:	4a33      	ldr	r2, [pc, #204]	; (800441c <spi_proc+0x138>)
 8004350:	1898      	adds	r0, r3, r2
 8004352:	4b2f      	ldr	r3, [pc, #188]	; (8004410 <spi_proc+0x12c>)
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	461a      	mov	r2, r3
 8004358:	492f      	ldr	r1, [pc, #188]	; (8004418 <spi_proc+0x134>)
 800435a:	f000 fc4b 	bl	8004bf4 <memcpy>
            rxlen = spiCurIndex + tail;
 800435e:	4b2c      	ldr	r3, [pc, #176]	; (8004410 <spi_proc+0x12c>)
 8004360:	881a      	ldrh	r2, [r3, #0]
 8004362:	f8b7 3402 	ldrh.w	r3, [r7, #1026]	; 0x402
 8004366:	4413      	add	r3, r2
 8004368:	f8a7 3406 	strh.w	r3, [r7, #1030]	; 0x406
 800436c:	e011      	b.n	8004392 <spi_proc+0xae>
        }
        else
        {
            rxlen = spiCurIndex - spiPrevIndex;
 800436e:	4b28      	ldr	r3, [pc, #160]	; (8004410 <spi_proc+0x12c>)
 8004370:	881a      	ldrh	r2, [r3, #0]
 8004372:	4b28      	ldr	r3, [pc, #160]	; (8004414 <spi_proc+0x130>)
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	f8a7 3406 	strh.w	r3, [r7, #1030]	; 0x406
            //memcpy(spi_buf, &Rx[spiPrevIndex], rxlen);
            memcpy(Tx, &Rx[spiPrevIndex], rxlen);
 800437c:	4b25      	ldr	r3, [pc, #148]	; (8004414 <spi_proc+0x130>)
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	461a      	mov	r2, r3
 8004382:	4b25      	ldr	r3, [pc, #148]	; (8004418 <spi_proc+0x134>)
 8004384:	4413      	add	r3, r2
 8004386:	f8b7 2406 	ldrh.w	r2, [r7, #1030]	; 0x406
 800438a:	4619      	mov	r1, r3
 800438c:	4823      	ldr	r0, [pc, #140]	; (800441c <spi_proc+0x138>)
 800438e:	f000 fc31 	bl	8004bf4 <memcpy>

        //for(i=spiPrevIndex ; i<MAX_DMA_BUFFER_SIZE; i++)
        {
          //if( (Rx[i+0] == 0xFE) && (Rx[i+1] == 0xED) &&(Rx[i+2] == 0x50) && (Rx[i+3] == 0x11) )
          {
            gU8_buf_enable = 1;
 8004392:	4b23      	ldr	r3, [pc, #140]	; (8004420 <spi_proc+0x13c>)
 8004394:	2201      	movs	r2, #1
 8004396:	701a      	strb	r2, [r3, #0]
            //gU16_index_start = i;
            gU16_index_start = 0;
 8004398:	4b22      	ldr	r3, [pc, #136]	; (8004424 <spi_proc+0x140>)
 800439a:	2200      	movs	r2, #0
 800439c:	801a      	strh	r2, [r3, #0]
            //gU16_index_length = 8+4*6*Rx[i+7]+8;  // Start:8 + 4*6*Rx[i+7] * End:8
            gU16_index_length = rxlen;
 800439e:	4a22      	ldr	r2, [pc, #136]	; (8004428 <spi_proc+0x144>)
 80043a0:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	; 0x406
 80043a4:	8013      	strh	r3, [r2, #0]
        }
        ////////// 191015 End


        //￿?????????금까￿????????? ?��?? 버퍼 ?��￿????????? 기억
        spiPrevIndex = spiCurIndex;
 80043a6:	4b1a      	ldr	r3, [pc, #104]	; (8004410 <spi_proc+0x12c>)
 80043a8:	881a      	ldrh	r2, [r3, #0]
 80043aa:	4b1a      	ldr	r3, [pc, #104]	; (8004414 <spi_proc+0x130>)
 80043ac:	801a      	strh	r2, [r3, #0]

        //UART￿????????? ?��?��?�� 보냄.
        //HAL_UART_Transmit(&huart2, (uint8_t *)&spi_buf, rxlen, 0xFFFF);
        //
#ifdef _DEBUG_MAIN_
         for(i=0; i<rxlen; i++)
 80043ae:	2300      	movs	r3, #0
 80043b0:	f8a7 3404 	strh.w	r3, [r7, #1028]	; 0x404
 80043b4:	e01c      	b.n	80043f0 <spi_proc+0x10c>
         {
           if(((i+1) % 4) == 0 )
 80043b6:	f8b7 3404 	ldrh.w	r3, [r7, #1028]	; 0x404
 80043ba:	3301      	adds	r3, #1
 80043bc:	f003 0303 	and.w	r3, r3, #3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d108      	bne.n	80043d6 <spi_proc+0xf2>
             printf("%02X \r\n", Tx[i]);
 80043c4:	f8b7 3404 	ldrh.w	r3, [r7, #1028]	; 0x404
 80043c8:	4a14      	ldr	r2, [pc, #80]	; (800441c <spi_proc+0x138>)
 80043ca:	5cd3      	ldrb	r3, [r2, r3]
 80043cc:	4619      	mov	r1, r3
 80043ce:	4817      	ldr	r0, [pc, #92]	; (800442c <spi_proc+0x148>)
 80043d0:	f000 fcce 	bl	8004d70 <iprintf>
 80043d4:	e007      	b.n	80043e6 <spi_proc+0x102>
           else
             printf("%02X ", Tx[i]);        //fflush (stdout);    // for HAL Delay
 80043d6:	f8b7 3404 	ldrh.w	r3, [r7, #1028]	; 0x404
 80043da:	4a10      	ldr	r2, [pc, #64]	; (800441c <spi_proc+0x138>)
 80043dc:	5cd3      	ldrb	r3, [r2, r3]
 80043de:	4619      	mov	r1, r3
 80043e0:	4813      	ldr	r0, [pc, #76]	; (8004430 <spi_proc+0x14c>)
 80043e2:	f000 fcc5 	bl	8004d70 <iprintf>
         for(i=0; i<rxlen; i++)
 80043e6:	f8b7 3404 	ldrh.w	r3, [r7, #1028]	; 0x404
 80043ea:	3301      	adds	r3, #1
 80043ec:	f8a7 3404 	strh.w	r3, [r7, #1028]	; 0x404
 80043f0:	f8b7 2404 	ldrh.w	r2, [r7, #1028]	; 0x404
 80043f4:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	; 0x406
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d3dc      	bcc.n	80043b6 <spi_proc+0xd2>
         }
         printf("\r\n");
 80043fc:	480d      	ldr	r0, [pc, #52]	; (8004434 <spi_proc+0x150>)
 80043fe:	f000 fd2b 	bl	8004e58 <puts>
    }
    //else
    //{
    //  gU8_buf_enable = 0; // disable
    //}
}
 8004402:	bf00      	nop
 8004404:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	2000116c 	.word	0x2000116c
 8004410:	200008fa 	.word	0x200008fa
 8004414:	200008fc 	.word	0x200008fc
 8004418:	200004f4 	.word	0x200004f4
 800441c:	200000f4 	.word	0x200000f4
 8004420:	200008f4 	.word	0x200008f4
 8004424:	200008f6 	.word	0x200008f6
 8004428:	200008f8 	.word	0x200008f8
 800442c:	08005b98 	.word	0x08005b98
 8004430:	08005ba0 	.word	0x08005ba0
 8004434:	08005ba8 	.word	0x08005ba8

08004438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800443c:	bf00      	nop
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr

08004444 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8004448:	4b17      	ldr	r3, [pc, #92]	; (80044a8 <MX_SPI1_Init+0x64>)
 800444a:	4a18      	ldr	r2, [pc, #96]	; (80044ac <MX_SPI1_Init+0x68>)
 800444c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800444e:	4b16      	ldr	r3, [pc, #88]	; (80044a8 <MX_SPI1_Init+0x64>)
 8004450:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004454:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004456:	4b14      	ldr	r3, [pc, #80]	; (80044a8 <MX_SPI1_Init+0x64>)
 8004458:	2200      	movs	r2, #0
 800445a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800445c:	4b12      	ldr	r3, [pc, #72]	; (80044a8 <MX_SPI1_Init+0x64>)
 800445e:	2200      	movs	r2, #0
 8004460:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004462:	4b11      	ldr	r3, [pc, #68]	; (80044a8 <MX_SPI1_Init+0x64>)
 8004464:	2202      	movs	r2, #2
 8004466:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004468:	4b0f      	ldr	r3, [pc, #60]	; (80044a8 <MX_SPI1_Init+0x64>)
 800446a:	2201      	movs	r2, #1
 800446c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800446e:	4b0e      	ldr	r3, [pc, #56]	; (80044a8 <MX_SPI1_Init+0x64>)
 8004470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004474:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004476:	4b0c      	ldr	r3, [pc, #48]	; (80044a8 <MX_SPI1_Init+0x64>)
 8004478:	2208      	movs	r2, #8
 800447a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800447c:	4b0a      	ldr	r3, [pc, #40]	; (80044a8 <MX_SPI1_Init+0x64>)
 800447e:	2200      	movs	r2, #0
 8004480:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004482:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <MX_SPI1_Init+0x64>)
 8004484:	2200      	movs	r2, #0
 8004486:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004488:	4b07      	ldr	r3, [pc, #28]	; (80044a8 <MX_SPI1_Init+0x64>)
 800448a:	2200      	movs	r2, #0
 800448c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800448e:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <MX_SPI1_Init+0x64>)
 8004490:	220a      	movs	r2, #10
 8004492:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004494:	4804      	ldr	r0, [pc, #16]	; (80044a8 <MX_SPI1_Init+0x64>)
 8004496:	f7fd ff37 	bl	8002308 <HAL_SPI_Init>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80044a0:	f7ff ffca 	bl	8004438 <Error_Handler>
  }

}
 80044a4:	bf00      	nop
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	200011b0 	.word	0x200011b0
 80044ac:	40013000 	.word	0x40013000

080044b0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80044b4:	4b17      	ldr	r3, [pc, #92]	; (8004514 <MX_SPI2_Init+0x64>)
 80044b6:	4a18      	ldr	r2, [pc, #96]	; (8004518 <MX_SPI2_Init+0x68>)
 80044b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80044ba:	4b16      	ldr	r3, [pc, #88]	; (8004514 <MX_SPI2_Init+0x64>)
 80044bc:	2200      	movs	r2, #0
 80044be:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80044c0:	4b14      	ldr	r3, [pc, #80]	; (8004514 <MX_SPI2_Init+0x64>)
 80044c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80044c8:	4b12      	ldr	r3, [pc, #72]	; (8004514 <MX_SPI2_Init+0x64>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80044ce:	4b11      	ldr	r3, [pc, #68]	; (8004514 <MX_SPI2_Init+0x64>)
 80044d0:	2202      	movs	r2, #2
 80044d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80044d4:	4b0f      	ldr	r3, [pc, #60]	; (8004514 <MX_SPI2_Init+0x64>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80044da:	4b0e      	ldr	r3, [pc, #56]	; (8004514 <MX_SPI2_Init+0x64>)
 80044dc:	2200      	movs	r2, #0
 80044de:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044e0:	4b0c      	ldr	r3, [pc, #48]	; (8004514 <MX_SPI2_Init+0x64>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80044e6:	4b0b      	ldr	r3, [pc, #44]	; (8004514 <MX_SPI2_Init+0x64>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80044ec:	4b09      	ldr	r3, [pc, #36]	; (8004514 <MX_SPI2_Init+0x64>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044f2:	4b08      	ldr	r3, [pc, #32]	; (8004514 <MX_SPI2_Init+0x64>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80044f8:	4b06      	ldr	r3, [pc, #24]	; (8004514 <MX_SPI2_Init+0x64>)
 80044fa:	220a      	movs	r2, #10
 80044fc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80044fe:	4805      	ldr	r0, [pc, #20]	; (8004514 <MX_SPI2_Init+0x64>)
 8004500:	f7fd ff02 	bl	8002308 <HAL_SPI_Init>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 800450a:	f7ff ff95 	bl	8004438 <Error_Handler>
  }

}
 800450e:	bf00      	nop
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20001114 	.word	0x20001114
 8004518:	40003800 	.word	0x40003800

0800451c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08a      	sub	sp, #40	; 0x28
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004524:	f107 0318 	add.w	r3, r7, #24
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	605a      	str	r2, [r3, #4]
 800452e:	609a      	str	r2, [r3, #8]
 8004530:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a44      	ldr	r2, [pc, #272]	; (8004648 <HAL_SPI_MspInit+0x12c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d130      	bne.n	800459e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800453c:	4a43      	ldr	r2, [pc, #268]	; (800464c <HAL_SPI_MspInit+0x130>)
 800453e:	4b43      	ldr	r3, [pc, #268]	; (800464c <HAL_SPI_MspInit+0x130>)
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004546:	6193      	str	r3, [r2, #24]
 8004548:	4b40      	ldr	r3, [pc, #256]	; (800464c <HAL_SPI_MspInit+0x130>)
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004550:	617b      	str	r3, [r7, #20]
 8004552:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004554:	4a3d      	ldr	r2, [pc, #244]	; (800464c <HAL_SPI_MspInit+0x130>)
 8004556:	4b3d      	ldr	r3, [pc, #244]	; (800464c <HAL_SPI_MspInit+0x130>)
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	f043 0304 	orr.w	r3, r3, #4
 800455e:	6193      	str	r3, [r2, #24]
 8004560:	4b3a      	ldr	r3, [pc, #232]	; (800464c <HAL_SPI_MspInit+0x130>)
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
 800456c:	23a0      	movs	r3, #160	; 0xa0
 800456e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004570:	2302      	movs	r3, #2
 8004572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004574:	2303      	movs	r3, #3
 8004576:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004578:	f107 0318 	add.w	r3, r7, #24
 800457c:	4619      	mov	r1, r3
 800457e:	4834      	ldr	r0, [pc, #208]	; (8004650 <HAL_SPI_MspInit+0x134>)
 8004580:	f7fc fb48 	bl	8000c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8004584:	2340      	movs	r3, #64	; 0x40
 8004586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004588:	2300      	movs	r3, #0
 800458a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800458c:	2300      	movs	r3, #0
 800458e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8004590:	f107 0318 	add.w	r3, r7, #24
 8004594:	4619      	mov	r1, r3
 8004596:	482e      	ldr	r0, [pc, #184]	; (8004650 <HAL_SPI_MspInit+0x134>)
 8004598:	f7fc fb3c 	bl	8000c14 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800459c:	e04f      	b.n	800463e <HAL_SPI_MspInit+0x122>
  else if(spiHandle->Instance==SPI2)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a2c      	ldr	r2, [pc, #176]	; (8004654 <HAL_SPI_MspInit+0x138>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d14a      	bne.n	800463e <HAL_SPI_MspInit+0x122>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80045a8:	4a28      	ldr	r2, [pc, #160]	; (800464c <HAL_SPI_MspInit+0x130>)
 80045aa:	4b28      	ldr	r3, [pc, #160]	; (800464c <HAL_SPI_MspInit+0x130>)
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045b2:	61d3      	str	r3, [r2, #28]
 80045b4:	4b25      	ldr	r3, [pc, #148]	; (800464c <HAL_SPI_MspInit+0x130>)
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045bc:	60fb      	str	r3, [r7, #12]
 80045be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045c0:	4a22      	ldr	r2, [pc, #136]	; (800464c <HAL_SPI_MspInit+0x130>)
 80045c2:	4b22      	ldr	r3, [pc, #136]	; (800464c <HAL_SPI_MspInit+0x130>)
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	f043 0308 	orr.w	r3, r3, #8
 80045ca:	6193      	str	r3, [r2, #24]
 80045cc:	4b1f      	ldr	r3, [pc, #124]	; (800464c <HAL_SPI_MspInit+0x130>)
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	60bb      	str	r3, [r7, #8]
 80045d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80045d8:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80045dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045de:	2300      	movs	r3, #0
 80045e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045e6:	f107 0318 	add.w	r3, r7, #24
 80045ea:	4619      	mov	r1, r3
 80045ec:	481a      	ldr	r0, [pc, #104]	; (8004658 <HAL_SPI_MspInit+0x13c>)
 80045ee:	f7fc fb11 	bl	8000c14 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80045f2:	4b1a      	ldr	r3, [pc, #104]	; (800465c <HAL_SPI_MspInit+0x140>)
 80045f4:	4a1a      	ldr	r2, [pc, #104]	; (8004660 <HAL_SPI_MspInit+0x144>)
 80045f6:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045f8:	4b18      	ldr	r3, [pc, #96]	; (800465c <HAL_SPI_MspInit+0x140>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045fe:	4b17      	ldr	r3, [pc, #92]	; (800465c <HAL_SPI_MspInit+0x140>)
 8004600:	2200      	movs	r2, #0
 8004602:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004604:	4b15      	ldr	r3, [pc, #84]	; (800465c <HAL_SPI_MspInit+0x140>)
 8004606:	2280      	movs	r2, #128	; 0x80
 8004608:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800460a:	4b14      	ldr	r3, [pc, #80]	; (800465c <HAL_SPI_MspInit+0x140>)
 800460c:	2200      	movs	r2, #0
 800460e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004610:	4b12      	ldr	r3, [pc, #72]	; (800465c <HAL_SPI_MspInit+0x140>)
 8004612:	2200      	movs	r2, #0
 8004614:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8004616:	4b11      	ldr	r3, [pc, #68]	; (800465c <HAL_SPI_MspInit+0x140>)
 8004618:	2220      	movs	r2, #32
 800461a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800461c:	4b0f      	ldr	r3, [pc, #60]	; (800465c <HAL_SPI_MspInit+0x140>)
 800461e:	2200      	movs	r2, #0
 8004620:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004622:	480e      	ldr	r0, [pc, #56]	; (800465c <HAL_SPI_MspInit+0x140>)
 8004624:	f7fb ff8a 	bl	800053c <HAL_DMA_Init>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <HAL_SPI_MspInit+0x116>
      Error_Handler();
 800462e:	f7ff ff03 	bl	8004438 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a09      	ldr	r2, [pc, #36]	; (800465c <HAL_SPI_MspInit+0x140>)
 8004636:	64da      	str	r2, [r3, #76]	; 0x4c
 8004638:	4a08      	ldr	r2, [pc, #32]	; (800465c <HAL_SPI_MspInit+0x140>)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800463e:	bf00      	nop
 8004640:	3728      	adds	r7, #40	; 0x28
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	40013000 	.word	0x40013000
 800464c:	40021000 	.word	0x40021000
 8004650:	40010800 	.word	0x40010800
 8004654:	40003800 	.word	0x40003800
 8004658:	40010c00 	.word	0x40010c00
 800465c:	2000116c 	.word	0x2000116c
 8004660:	40020044 	.word	0x40020044

08004664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800466a:	4a15      	ldr	r2, [pc, #84]	; (80046c0 <HAL_MspInit+0x5c>)
 800466c:	4b14      	ldr	r3, [pc, #80]	; (80046c0 <HAL_MspInit+0x5c>)
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	f043 0301 	orr.w	r3, r3, #1
 8004674:	6193      	str	r3, [r2, #24]
 8004676:	4b12      	ldr	r3, [pc, #72]	; (80046c0 <HAL_MspInit+0x5c>)
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	60bb      	str	r3, [r7, #8]
 8004680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004682:	4a0f      	ldr	r2, [pc, #60]	; (80046c0 <HAL_MspInit+0x5c>)
 8004684:	4b0e      	ldr	r3, [pc, #56]	; (80046c0 <HAL_MspInit+0x5c>)
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800468c:	61d3      	str	r3, [r2, #28]
 800468e:	4b0c      	ldr	r3, [pc, #48]	; (80046c0 <HAL_MspInit+0x5c>)
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004696:	607b      	str	r3, [r7, #4]
 8004698:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800469a:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <HAL_MspInit+0x60>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	4a04      	ldr	r2, [pc, #16]	; (80046c4 <HAL_MspInit+0x60>)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046b6:	bf00      	nop
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bc80      	pop	{r7}
 80046be:	4770      	bx	lr
 80046c0:	40021000 	.word	0x40021000
 80046c4:	40010000 	.word	0x40010000

080046c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80046cc:	bf00      	nop
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr

080046d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046d8:	e7fe      	b.n	80046d8 <HardFault_Handler+0x4>

080046da <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80046da:	b480      	push	{r7}
 80046dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046de:	e7fe      	b.n	80046de <MemManage_Handler+0x4>

080046e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046e4:	e7fe      	b.n	80046e4 <BusFault_Handler+0x4>

080046e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046e6:	b480      	push	{r7}
 80046e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046ea:	e7fe      	b.n	80046ea <UsageFault_Handler+0x4>

080046ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80046f0:	bf00      	nop
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bc80      	pop	{r7}
 80046f6:	4770      	bx	lr

080046f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046fc:	bf00      	nop
 80046fe:	46bd      	mov	sp, r7
 8004700:	bc80      	pop	{r7}
 8004702:	4770      	bx	lr

08004704 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004708:	bf00      	nop
 800470a:	46bd      	mov	sp, r7
 800470c:	bc80      	pop	{r7}
 800470e:	4770      	bx	lr

08004710 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004714:	f7fb fdcc 	bl	80002b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004718:	bf00      	nop
 800471a:	bd80      	pop	{r7, pc}

0800471c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004720:	4802      	ldr	r0, [pc, #8]	; (800472c <DMA1_Channel4_IRQHandler+0x10>)
 8004722:	f7fb ffe1 	bl	80006e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004726:	bf00      	nop
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	2000116c 	.word	0x2000116c

08004730 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004730:	b590      	push	{r4, r7, lr}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800473c:	2300      	movs	r3, #0
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	e00a      	b.n	8004758 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004742:	68bc      	ldr	r4, [r7, #8]
 8004744:	1c63      	adds	r3, r4, #1
 8004746:	60bb      	str	r3, [r7, #8]
 8004748:	f3af 8000 	nop.w
 800474c:	4603      	mov	r3, r0
 800474e:	b2db      	uxtb	r3, r3
 8004750:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	3301      	adds	r3, #1
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	429a      	cmp	r2, r3
 800475e:	dbf0      	blt.n	8004742 <_read+0x12>
	}

return len;
 8004760:	687b      	ldr	r3, [r7, #4]
}
 8004762:	4618      	mov	r0, r3
 8004764:	371c      	adds	r7, #28
 8004766:	46bd      	mov	sp, r7
 8004768:	bd90      	pop	{r4, r7, pc}
	...

0800476c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004774:	4b11      	ldr	r3, [pc, #68]	; (80047bc <_sbrk+0x50>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d102      	bne.n	8004782 <_sbrk+0x16>
		heap_end = &end;
 800477c:	4b0f      	ldr	r3, [pc, #60]	; (80047bc <_sbrk+0x50>)
 800477e:	4a10      	ldr	r2, [pc, #64]	; (80047c0 <_sbrk+0x54>)
 8004780:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004782:	4b0e      	ldr	r3, [pc, #56]	; (80047bc <_sbrk+0x50>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004788:	4b0c      	ldr	r3, [pc, #48]	; (80047bc <_sbrk+0x50>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4413      	add	r3, r2
 8004790:	466a      	mov	r2, sp
 8004792:	4293      	cmp	r3, r2
 8004794:	d907      	bls.n	80047a6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004796:	f000 fa03 	bl	8004ba0 <__errno>
 800479a:	4602      	mov	r2, r0
 800479c:	230c      	movs	r3, #12
 800479e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80047a0:	f04f 33ff 	mov.w	r3, #4294967295
 80047a4:	e006      	b.n	80047b4 <_sbrk+0x48>
	}

	heap_end += incr;
 80047a6:	4b05      	ldr	r3, [pc, #20]	; (80047bc <_sbrk+0x50>)
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4413      	add	r3, r2
 80047ae:	4a03      	ldr	r2, [pc, #12]	; (80047bc <_sbrk+0x50>)
 80047b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80047b2:	68fb      	ldr	r3, [r7, #12]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	20000900 	.word	0x20000900
 80047c0:	2000120c 	.word	0x2000120c

080047c4 <_close>:

int _close(int file)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
	return -1;
 80047cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc80      	pop	{r7}
 80047d8:	4770      	bx	lr

080047da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
 80047e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047ea:	605a      	str	r2, [r3, #4]
	return 0;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr

080047f8 <_isatty>:

int _isatty(int file)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
	return 1;
 8004800:	2301      	movs	r3, #1
}
 8004802:	4618      	mov	r0, r3
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	bc80      	pop	{r7}
 800480a:	4770      	bx	lr

0800480c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
	return 0;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	bc80      	pop	{r7}
 8004822:	4770      	bx	lr

08004824 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004828:	4a15      	ldr	r2, [pc, #84]	; (8004880 <SystemInit+0x5c>)
 800482a:	4b15      	ldr	r3, [pc, #84]	; (8004880 <SystemInit+0x5c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f043 0301 	orr.w	r3, r3, #1
 8004832:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004834:	4912      	ldr	r1, [pc, #72]	; (8004880 <SystemInit+0x5c>)
 8004836:	4b12      	ldr	r3, [pc, #72]	; (8004880 <SystemInit+0x5c>)
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	4b12      	ldr	r3, [pc, #72]	; (8004884 <SystemInit+0x60>)
 800483c:	4013      	ands	r3, r2
 800483e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004840:	4a0f      	ldr	r2, [pc, #60]	; (8004880 <SystemInit+0x5c>)
 8004842:	4b0f      	ldr	r3, [pc, #60]	; (8004880 <SystemInit+0x5c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800484a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800484e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004850:	4a0b      	ldr	r2, [pc, #44]	; (8004880 <SystemInit+0x5c>)
 8004852:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <SystemInit+0x5c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800485a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800485c:	4a08      	ldr	r2, [pc, #32]	; (8004880 <SystemInit+0x5c>)
 800485e:	4b08      	ldr	r3, [pc, #32]	; (8004880 <SystemInit+0x5c>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004866:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004868:	4b05      	ldr	r3, [pc, #20]	; (8004880 <SystemInit+0x5c>)
 800486a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800486e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004870:	4b05      	ldr	r3, [pc, #20]	; (8004888 <SystemInit+0x64>)
 8004872:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004876:	609a      	str	r2, [r3, #8]
#endif 
}
 8004878:	bf00      	nop
 800487a:	46bd      	mov	sp, r7
 800487c:	bc80      	pop	{r7}
 800487e:	4770      	bx	lr
 8004880:	40021000 	.word	0x40021000
 8004884:	f8ff0000 	.word	0xf8ff0000
 8004888:	e000ed00 	.word	0xe000ed00

0800488c <LL_USART_Enable>:
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	60da      	str	r2, [r3, #12]
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bc80      	pop	{r7}
 80048a8:	4770      	bx	lr

080048aa <LL_USART_ConfigAsyncMode>:
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	615a      	str	r2, [r3, #20]
}
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bc80      	pop	{r7}
 80048d2:	4770      	bx	lr

080048d4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80048dc:	4908      	ldr	r1, [pc, #32]	; (8004900 <LL_APB1_GRP1_EnableClock+0x2c>)
 80048de:	4b08      	ldr	r3, [pc, #32]	; (8004900 <LL_APB1_GRP1_EnableClock+0x2c>)
 80048e0:	69da      	ldr	r2, [r3, #28]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80048e8:	4b05      	ldr	r3, [pc, #20]	; (8004900 <LL_APB1_GRP1_EnableClock+0x2c>)
 80048ea:	69da      	ldr	r2, [r3, #28]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4013      	ands	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80048f2:	68fb      	ldr	r3, [r7, #12]
}
 80048f4:	bf00      	nop
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bc80      	pop	{r7}
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	40021000 	.word	0x40021000

08004904 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800490c:	4908      	ldr	r1, [pc, #32]	; (8004930 <LL_APB2_GRP1_EnableClock+0x2c>)
 800490e:	4b08      	ldr	r3, [pc, #32]	; (8004930 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004910:	699a      	ldr	r2, [r3, #24]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4313      	orrs	r3, r2
 8004916:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004918:	4b05      	ldr	r3, [pc, #20]	; (8004930 <LL_APB2_GRP1_EnableClock+0x2c>)
 800491a:	699a      	ldr	r2, [r3, #24]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4013      	ands	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004922:	68fb      	ldr	r3, [r7, #12]
}
 8004924:	bf00      	nop
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	bc80      	pop	{r7}
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	40021000 	.word	0x40021000

08004934 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b08c      	sub	sp, #48	; 0x30
 8004938:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800493a:	f107 0318 	add.w	r3, r7, #24
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	605a      	str	r2, [r3, #4]
 8004944:	609a      	str	r2, [r3, #8]
 8004946:	60da      	str	r2, [r3, #12]
 8004948:	611a      	str	r2, [r3, #16]
 800494a:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800494c:	1d3b      	adds	r3, r7, #4
 800494e:	2200      	movs	r2, #0
 8004950:	601a      	str	r2, [r3, #0]
 8004952:	605a      	str	r2, [r3, #4]
 8004954:	609a      	str	r2, [r3, #8]
 8004956:	60da      	str	r2, [r3, #12]
 8004958:	611a      	str	r2, [r3, #16]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800495a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800495e:	f7ff ffb9 	bl	80048d4 <LL_APB1_GRP1_EnableClock>
  
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8004962:	2004      	movs	r0, #4
 8004964:	f7ff ffce 	bl	8004904 <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8004968:	f240 4304 	movw	r3, #1028	; 0x404
 800496c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800496e:	2309      	movs	r3, #9
 8004970:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8004972:	2303      	movs	r3, #3
 8004974:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004976:	2300      	movs	r3, #0
 8004978:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800497a:	1d3b      	adds	r3, r7, #4
 800497c:	4619      	mov	r1, r3
 800497e:	4815      	ldr	r0, [pc, #84]	; (80049d4 <MX_USART2_UART_Init+0xa0>)
 8004980:	f7fd fdd7 	bl	8002532 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8004984:	f640 0308 	movw	r3, #2056	; 0x808
 8004988:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 800498a:	2304      	movs	r3, #4
 800498c:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800498e:	1d3b      	adds	r3, r7, #4
 8004990:	4619      	mov	r1, r3
 8004992:	4810      	ldr	r0, [pc, #64]	; (80049d4 <MX_USART2_UART_Init+0xa0>)
 8004994:	f7fd fdcd 	bl	8002532 <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 8004998:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800499c:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800499e:	2300      	movs	r3, #0
 80049a0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80049a2:	2300      	movs	r3, #0
 80049a4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80049a6:	2300      	movs	r3, #0
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80049aa:	230c      	movs	r3, #12
 80049ac:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80049ae:	2300      	movs	r3, #0
 80049b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 80049b2:	f107 0318 	add.w	r3, r7, #24
 80049b6:	4619      	mov	r1, r3
 80049b8:	4807      	ldr	r0, [pc, #28]	; (80049d8 <MX_USART2_UART_Init+0xa4>)
 80049ba:	f7fd ffbd 	bl	8002938 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80049be:	4806      	ldr	r0, [pc, #24]	; (80049d8 <MX_USART2_UART_Init+0xa4>)
 80049c0:	f7ff ff73 	bl	80048aa <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80049c4:	4804      	ldr	r0, [pc, #16]	; (80049d8 <MX_USART2_UART_Init+0xa4>)
 80049c6:	f7ff ff61 	bl	800488c <LL_USART_Enable>

}
 80049ca:	bf00      	nop
 80049cc:	3730      	adds	r7, #48	; 0x30
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	40010800 	.word	0x40010800
 80049d8:	40004400 	.word	0x40004400

080049dc <W5500_dataRead>:

static uint32_t randomKey;


uint8_t W5500_dataRead() // SPI ������ ����
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af02      	add	r7, sp, #8
	uint8_t Dummy = 0xFF;
 80049e2:	23ff      	movs	r3, #255	; 0xff
 80049e4:	71fb      	strb	r3, [r7, #7]
	uint8_t RxData;
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80049e6:	bf00      	nop
 80049e8:	4809      	ldr	r0, [pc, #36]	; (8004a10 <W5500_dataRead+0x34>)
 80049ea:	f7fd fb3a 	bl	8002062 <HAL_SPI_GetState>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d1f9      	bne.n	80049e8 <W5500_dataRead+0xc>
	HAL_SPI_TransmitReceive(&hspi1,&Dummy,&RxData,1,10); // SPI�� ���Ž� ���̵����͸� ������� Ŭ���� �����ǰ� �����̺갡 ���� �ش�.
 80049f4:	1dba      	adds	r2, r7, #6
 80049f6:	1df9      	adds	r1, r7, #7
 80049f8:	230a      	movs	r3, #10
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	2301      	movs	r3, #1
 80049fe:	4804      	ldr	r0, [pc, #16]	; (8004a10 <W5500_dataRead+0x34>)
 8004a00:	f7fc ffcb 	bl	800199a <HAL_SPI_TransmitReceive>
	return RxData;
 8004a04:	79bb      	ldrb	r3, [r7, #6]
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	200011b0 	.word	0x200011b0

08004a14 <W5500_dataSend>:
void W5500_dataSend(uint8_t Txdata) // SPI ������ �۽�
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	71fb      	strb	r3, [r7, #7]
	 while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8004a1e:	bf00      	nop
 8004a20:	4807      	ldr	r0, [pc, #28]	; (8004a40 <W5500_dataSend+0x2c>)
 8004a22:	f7fd fb1e 	bl	8002062 <HAL_SPI_GetState>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d1f9      	bne.n	8004a20 <W5500_dataSend+0xc>
	 HAL_SPI_Transmit(&hspi1, (uint8_t *) &Txdata, 1, 10);
 8004a2c:	1df9      	adds	r1, r7, #7
 8004a2e:	230a      	movs	r3, #10
 8004a30:	2201      	movs	r2, #1
 8004a32:	4803      	ldr	r0, [pc, #12]	; (8004a40 <W5500_dataSend+0x2c>)
 8004a34:	f7fc fe76 	bl	8001724 <HAL_SPI_Transmit>
}
 8004a38:	bf00      	nop
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	200011b0 	.word	0x200011b0

08004a44 <W5500_CS_select>:

void W5500_CS_select()
{
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
	//GPIOA->BRR = GPIO_PIN_3; // CS���� Low
  GPIOA->BRR = GPIO_PIN_4;
 8004a48:	4b03      	ldr	r3, [pc, #12]	; (8004a58 <W5500_CS_select+0x14>)
 8004a4a:	2210      	movs	r2, #16
 8004a4c:	615a      	str	r2, [r3, #20]
}
 8004a4e:	bf00      	nop
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bc80      	pop	{r7}
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	40010800 	.word	0x40010800

08004a5c <W5500_CS_deselect>:

void W5500_CS_deselect()
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
	//GPIOA->BSRR = GPIO_PIN_3; // CS���� High
  GPIOA->BSRR = GPIO_PIN_4;
 8004a60:	4b03      	ldr	r3, [pc, #12]	; (8004a70 <W5500_CS_deselect+0x14>)
 8004a62:	2210      	movs	r2, #16
 8004a64:	611a      	str	r2, [r3, #16]
}
 8004a66:	bf00      	nop
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bc80      	pop	{r7}
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	40010800 	.word	0x40010800

08004a74 <isLinked>:

int isLinked(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
	return (getPHYCFGR() & PHYCFGR_LNK_ON);
 8004a78:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8004a7c:	f7fd ffce 	bl	8002a1c <WIZCHIP_READ>
 8004a80:	4603      	mov	r3, r0
 8004a82:	f003 0301 	and.w	r3, r3, #1
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <W5500_hw_Rst>:

void W5500_hw_Rst(void) // �ϵ���� ����
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
  uint32_t tempTick;
  //GPIOA->BRR = GPIO_PIN_4; // RST ���� Low�� ����
  GPIOC->BRR = GPIO_PIN_4;
 8004a92:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <W5500_hw_Rst+0x30>)
 8004a94:	2210      	movs	r2, #16
 8004a96:	615a      	str	r2, [r3, #20]

  tempTick = HAL_GetTick();
 8004a98:	f7fb fc1c 	bl	80002d4 <HAL_GetTick>
 8004a9c:	6078      	str	r0, [r7, #4]
  while((HAL_GetTick() - tempTick) < 1 ); // 1ms �� ������
 8004a9e:	bf00      	nop
 8004aa0:	f7fb fc18 	bl	80002d4 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d0f9      	beq.n	8004aa0 <W5500_hw_Rst+0x14>

  //GPIOA->BSRR = GPIO_PIN_4; // RST ���� High ��.
  GPIOC->BSRR = GPIO_PIN_4;
 8004aac:	4b03      	ldr	r3, [pc, #12]	; (8004abc <W5500_hw_Rst+0x30>)
 8004aae:	2210      	movs	r2, #16
 8004ab0:	611a      	str	r2, [r3, #16]
}
 8004ab2:	bf00      	nop
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	40011000 	.word	0x40011000

08004ac0 <W5500_init>:
{
	wizchip_getnetinfo(&gWIZNETINFO); // W5500 ���� ���� ��������
}

uint8_t W5500_init() // �ʱ�ȭ �Լ�
{
 8004ac0:	b590      	push	{r4, r7, lr}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	af00      	add	r7, sp, #0
	uint8_t W5500SockBufSize[2][8] = {{2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 8004ac6:	4b1c      	ldr	r3, [pc, #112]	; (8004b38 <W5500_init+0x78>)
 8004ac8:	1d3c      	adds	r4, r7, #4
 8004aca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004acc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t tickStart;

	reg_wizchip_spi_cbfunc(W5500_dataRead, W5500_dataSend); // SPI ��� ����, �۽� ��ɵ�� (�ݹ��Լ�)
 8004ad0:	491a      	ldr	r1, [pc, #104]	; (8004b3c <W5500_init+0x7c>)
 8004ad2:	481b      	ldr	r0, [pc, #108]	; (8004b40 <W5500_init+0x80>)
 8004ad4:	f7fe fd58 	bl	8003588 <reg_wizchip_spi_cbfunc>
	reg_wizchip_cs_cbfunc(W5500_CS_select, W5500_CS_deselect); // CS �� ���� ��ɵ�� (�ݹ��Լ�)
 8004ad8:	491a      	ldr	r1, [pc, #104]	; (8004b44 <W5500_init+0x84>)
 8004ada:	481b      	ldr	r0, [pc, #108]	; (8004b48 <W5500_init+0x88>)
 8004adc:	f7fe fd30 	bl	8003540 <reg_wizchip_cs_cbfunc>

	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)W5500SockBufSize) == -1)
 8004ae0:	1d3b      	adds	r3, r7, #4
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	2001      	movs	r0, #1
 8004ae6:	f7fe fd79 	bl	80035dc <ctlwizchip>
 8004aea:	4603      	mov	r3, r0
 8004aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af0:	d101      	bne.n	8004af6 <W5500_init+0x36>
		{
			//printf("W5500 initialized fail.\r\n");
			return -1; // �ʱ�ȭ ����
 8004af2:	23ff      	movs	r3, #255	; 0xff
 8004af4:	e01b      	b.n	8004b2e <W5500_init+0x6e>
		}
		/*Set network information by default*/
		wizchip_setnetinfo(&gWIZNETINFO);
 8004af6:	4815      	ldr	r0, [pc, #84]	; (8004b4c <W5500_init+0x8c>)
 8004af8:	f7ff f8d6 	bl	8003ca8 <wizchip_setnetinfo>
		tickStart = HAL_GetTick();
 8004afc:	f7fb fbea 	bl	80002d4 <HAL_GetTick>
 8004b00:	6178      	str	r0, [r7, #20]
		do{ // PHY ����üũ
			randomKey++;
 8004b02:	4b13      	ldr	r3, [pc, #76]	; (8004b50 <W5500_init+0x90>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3301      	adds	r3, #1
 8004b08:	4a11      	ldr	r2, [pc, #68]	; (8004b50 <W5500_init+0x90>)
 8004b0a:	6013      	str	r3, [r2, #0]
			if((HAL_GetTick() - tickStart) > 3000 )
 8004b0c:	f7fb fbe2 	bl	80002d4 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d901      	bls.n	8004b22 <W5500_init+0x62>
			{
				//printf("Ethernet Link timeout.\r\n");
				return -1; // �̴��� Ÿ�Ӿƿ� ����
 8004b1e:	23ff      	movs	r3, #255	; 0xff
 8004b20:	e005      	b.n	8004b2e <W5500_init+0x6e>
			}
		}while(!isLinked());
 8004b22:	f7ff ffa7 	bl	8004a74 <isLinked>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d0ea      	beq.n	8004b02 <W5500_init+0x42>
		return 1;
 8004b2c:	2301      	movs	r3, #1
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	371c      	adds	r7, #28
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd90      	pop	{r4, r7, pc}
 8004b36:	bf00      	nop
 8004b38:	08005bac 	.word	0x08005bac
 8004b3c:	08004a15 	.word	0x08004a15
 8004b40:	080049dd 	.word	0x080049dd
 8004b44:	08004a5d 	.word	0x08004a5d
 8004b48:	08004a45 	.word	0x08004a45
 8004b4c:	20000034 	.word	0x20000034
 8004b50:	20000904 	.word	0x20000904

08004b54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004b54:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004b56:	e003      	b.n	8004b60 <LoopCopyDataInit>

08004b58 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004b58:	4b0b      	ldr	r3, [pc, #44]	; (8004b88 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004b5a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004b5c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004b5e:	3104      	adds	r1, #4

08004b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004b60:	480a      	ldr	r0, [pc, #40]	; (8004b8c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004b62:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004b64:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004b66:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004b68:	d3f6      	bcc.n	8004b58 <CopyDataInit>
  ldr r2, =_sbss
 8004b6a:	4a0a      	ldr	r2, [pc, #40]	; (8004b94 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004b6c:	e002      	b.n	8004b74 <LoopFillZerobss>

08004b6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004b6e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004b70:	f842 3b04 	str.w	r3, [r2], #4

08004b74 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004b74:	4b08      	ldr	r3, [pc, #32]	; (8004b98 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004b76:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004b78:	d3f9      	bcc.n	8004b6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004b7a:	f7ff fe53 	bl	8004824 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b7e:	f000 f815 	bl	8004bac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004b82:	f7ff f9d5 	bl	8003f30 <main>
  bx lr
 8004b86:	4770      	bx	lr
  ldr r3, =_sidata
 8004b88:	08005c74 	.word	0x08005c74
  ldr r0, =_sdata
 8004b8c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004b90:	200000b4 	.word	0x200000b4
  ldr r2, =_sbss
 8004b94:	200000b4 	.word	0x200000b4
  ldr r3, = _ebss
 8004b98:	2000120c 	.word	0x2000120c

08004b9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004b9c:	e7fe      	b.n	8004b9c <ADC1_2_IRQHandler>
	...

08004ba0 <__errno>:
 8004ba0:	4b01      	ldr	r3, [pc, #4]	; (8004ba8 <__errno+0x8>)
 8004ba2:	6818      	ldr	r0, [r3, #0]
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	20000050 	.word	0x20000050

08004bac <__libc_init_array>:
 8004bac:	b570      	push	{r4, r5, r6, lr}
 8004bae:	2500      	movs	r5, #0
 8004bb0:	4e0c      	ldr	r6, [pc, #48]	; (8004be4 <__libc_init_array+0x38>)
 8004bb2:	4c0d      	ldr	r4, [pc, #52]	; (8004be8 <__libc_init_array+0x3c>)
 8004bb4:	1ba4      	subs	r4, r4, r6
 8004bb6:	10a4      	asrs	r4, r4, #2
 8004bb8:	42a5      	cmp	r5, r4
 8004bba:	d109      	bne.n	8004bd0 <__libc_init_array+0x24>
 8004bbc:	f000 ff96 	bl	8005aec <_init>
 8004bc0:	2500      	movs	r5, #0
 8004bc2:	4e0a      	ldr	r6, [pc, #40]	; (8004bec <__libc_init_array+0x40>)
 8004bc4:	4c0a      	ldr	r4, [pc, #40]	; (8004bf0 <__libc_init_array+0x44>)
 8004bc6:	1ba4      	subs	r4, r4, r6
 8004bc8:	10a4      	asrs	r4, r4, #2
 8004bca:	42a5      	cmp	r5, r4
 8004bcc:	d105      	bne.n	8004bda <__libc_init_array+0x2e>
 8004bce:	bd70      	pop	{r4, r5, r6, pc}
 8004bd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bd4:	4798      	blx	r3
 8004bd6:	3501      	adds	r5, #1
 8004bd8:	e7ee      	b.n	8004bb8 <__libc_init_array+0xc>
 8004bda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bde:	4798      	blx	r3
 8004be0:	3501      	adds	r5, #1
 8004be2:	e7f2      	b.n	8004bca <__libc_init_array+0x1e>
 8004be4:	08005c6c 	.word	0x08005c6c
 8004be8:	08005c6c 	.word	0x08005c6c
 8004bec:	08005c6c 	.word	0x08005c6c
 8004bf0:	08005c70 	.word	0x08005c70

08004bf4 <memcpy>:
 8004bf4:	b510      	push	{r4, lr}
 8004bf6:	1e43      	subs	r3, r0, #1
 8004bf8:	440a      	add	r2, r1
 8004bfa:	4291      	cmp	r1, r2
 8004bfc:	d100      	bne.n	8004c00 <memcpy+0xc>
 8004bfe:	bd10      	pop	{r4, pc}
 8004c00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c08:	e7f7      	b.n	8004bfa <memcpy+0x6>

08004c0a <memset>:
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	4402      	add	r2, r0
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d100      	bne.n	8004c14 <memset+0xa>
 8004c12:	4770      	bx	lr
 8004c14:	f803 1b01 	strb.w	r1, [r3], #1
 8004c18:	e7f9      	b.n	8004c0e <memset+0x4>
	...

08004c1c <_free_r>:
 8004c1c:	b538      	push	{r3, r4, r5, lr}
 8004c1e:	4605      	mov	r5, r0
 8004c20:	2900      	cmp	r1, #0
 8004c22:	d043      	beq.n	8004cac <_free_r+0x90>
 8004c24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c28:	1f0c      	subs	r4, r1, #4
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	bfb8      	it	lt
 8004c2e:	18e4      	addlt	r4, r4, r3
 8004c30:	f000 fc42 	bl	80054b8 <__malloc_lock>
 8004c34:	4a1e      	ldr	r2, [pc, #120]	; (8004cb0 <_free_r+0x94>)
 8004c36:	6813      	ldr	r3, [r2, #0]
 8004c38:	4610      	mov	r0, r2
 8004c3a:	b933      	cbnz	r3, 8004c4a <_free_r+0x2e>
 8004c3c:	6063      	str	r3, [r4, #4]
 8004c3e:	6014      	str	r4, [r2, #0]
 8004c40:	4628      	mov	r0, r5
 8004c42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c46:	f000 bc38 	b.w	80054ba <__malloc_unlock>
 8004c4a:	42a3      	cmp	r3, r4
 8004c4c:	d90b      	bls.n	8004c66 <_free_r+0x4a>
 8004c4e:	6821      	ldr	r1, [r4, #0]
 8004c50:	1862      	adds	r2, r4, r1
 8004c52:	4293      	cmp	r3, r2
 8004c54:	bf01      	itttt	eq
 8004c56:	681a      	ldreq	r2, [r3, #0]
 8004c58:	685b      	ldreq	r3, [r3, #4]
 8004c5a:	1852      	addeq	r2, r2, r1
 8004c5c:	6022      	streq	r2, [r4, #0]
 8004c5e:	6063      	str	r3, [r4, #4]
 8004c60:	6004      	str	r4, [r0, #0]
 8004c62:	e7ed      	b.n	8004c40 <_free_r+0x24>
 8004c64:	4613      	mov	r3, r2
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	b10a      	cbz	r2, 8004c6e <_free_r+0x52>
 8004c6a:	42a2      	cmp	r2, r4
 8004c6c:	d9fa      	bls.n	8004c64 <_free_r+0x48>
 8004c6e:	6819      	ldr	r1, [r3, #0]
 8004c70:	1858      	adds	r0, r3, r1
 8004c72:	42a0      	cmp	r0, r4
 8004c74:	d10b      	bne.n	8004c8e <_free_r+0x72>
 8004c76:	6820      	ldr	r0, [r4, #0]
 8004c78:	4401      	add	r1, r0
 8004c7a:	1858      	adds	r0, r3, r1
 8004c7c:	4282      	cmp	r2, r0
 8004c7e:	6019      	str	r1, [r3, #0]
 8004c80:	d1de      	bne.n	8004c40 <_free_r+0x24>
 8004c82:	6810      	ldr	r0, [r2, #0]
 8004c84:	6852      	ldr	r2, [r2, #4]
 8004c86:	4401      	add	r1, r0
 8004c88:	6019      	str	r1, [r3, #0]
 8004c8a:	605a      	str	r2, [r3, #4]
 8004c8c:	e7d8      	b.n	8004c40 <_free_r+0x24>
 8004c8e:	d902      	bls.n	8004c96 <_free_r+0x7a>
 8004c90:	230c      	movs	r3, #12
 8004c92:	602b      	str	r3, [r5, #0]
 8004c94:	e7d4      	b.n	8004c40 <_free_r+0x24>
 8004c96:	6820      	ldr	r0, [r4, #0]
 8004c98:	1821      	adds	r1, r4, r0
 8004c9a:	428a      	cmp	r2, r1
 8004c9c:	bf01      	itttt	eq
 8004c9e:	6811      	ldreq	r1, [r2, #0]
 8004ca0:	6852      	ldreq	r2, [r2, #4]
 8004ca2:	1809      	addeq	r1, r1, r0
 8004ca4:	6021      	streq	r1, [r4, #0]
 8004ca6:	6062      	str	r2, [r4, #4]
 8004ca8:	605c      	str	r4, [r3, #4]
 8004caa:	e7c9      	b.n	8004c40 <_free_r+0x24>
 8004cac:	bd38      	pop	{r3, r4, r5, pc}
 8004cae:	bf00      	nop
 8004cb0:	20000908 	.word	0x20000908

08004cb4 <_malloc_r>:
 8004cb4:	b570      	push	{r4, r5, r6, lr}
 8004cb6:	1ccd      	adds	r5, r1, #3
 8004cb8:	f025 0503 	bic.w	r5, r5, #3
 8004cbc:	3508      	adds	r5, #8
 8004cbe:	2d0c      	cmp	r5, #12
 8004cc0:	bf38      	it	cc
 8004cc2:	250c      	movcc	r5, #12
 8004cc4:	2d00      	cmp	r5, #0
 8004cc6:	4606      	mov	r6, r0
 8004cc8:	db01      	blt.n	8004cce <_malloc_r+0x1a>
 8004cca:	42a9      	cmp	r1, r5
 8004ccc:	d903      	bls.n	8004cd6 <_malloc_r+0x22>
 8004cce:	230c      	movs	r3, #12
 8004cd0:	6033      	str	r3, [r6, #0]
 8004cd2:	2000      	movs	r0, #0
 8004cd4:	bd70      	pop	{r4, r5, r6, pc}
 8004cd6:	f000 fbef 	bl	80054b8 <__malloc_lock>
 8004cda:	4a23      	ldr	r2, [pc, #140]	; (8004d68 <_malloc_r+0xb4>)
 8004cdc:	6814      	ldr	r4, [r2, #0]
 8004cde:	4621      	mov	r1, r4
 8004ce0:	b991      	cbnz	r1, 8004d08 <_malloc_r+0x54>
 8004ce2:	4c22      	ldr	r4, [pc, #136]	; (8004d6c <_malloc_r+0xb8>)
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	b91b      	cbnz	r3, 8004cf0 <_malloc_r+0x3c>
 8004ce8:	4630      	mov	r0, r6
 8004cea:	f000 f8bd 	bl	8004e68 <_sbrk_r>
 8004cee:	6020      	str	r0, [r4, #0]
 8004cf0:	4629      	mov	r1, r5
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	f000 f8b8 	bl	8004e68 <_sbrk_r>
 8004cf8:	1c43      	adds	r3, r0, #1
 8004cfa:	d126      	bne.n	8004d4a <_malloc_r+0x96>
 8004cfc:	230c      	movs	r3, #12
 8004cfe:	4630      	mov	r0, r6
 8004d00:	6033      	str	r3, [r6, #0]
 8004d02:	f000 fbda 	bl	80054ba <__malloc_unlock>
 8004d06:	e7e4      	b.n	8004cd2 <_malloc_r+0x1e>
 8004d08:	680b      	ldr	r3, [r1, #0]
 8004d0a:	1b5b      	subs	r3, r3, r5
 8004d0c:	d41a      	bmi.n	8004d44 <_malloc_r+0x90>
 8004d0e:	2b0b      	cmp	r3, #11
 8004d10:	d90f      	bls.n	8004d32 <_malloc_r+0x7e>
 8004d12:	600b      	str	r3, [r1, #0]
 8004d14:	18cc      	adds	r4, r1, r3
 8004d16:	50cd      	str	r5, [r1, r3]
 8004d18:	4630      	mov	r0, r6
 8004d1a:	f000 fbce 	bl	80054ba <__malloc_unlock>
 8004d1e:	f104 000b 	add.w	r0, r4, #11
 8004d22:	1d23      	adds	r3, r4, #4
 8004d24:	f020 0007 	bic.w	r0, r0, #7
 8004d28:	1ac3      	subs	r3, r0, r3
 8004d2a:	d01b      	beq.n	8004d64 <_malloc_r+0xb0>
 8004d2c:	425a      	negs	r2, r3
 8004d2e:	50e2      	str	r2, [r4, r3]
 8004d30:	bd70      	pop	{r4, r5, r6, pc}
 8004d32:	428c      	cmp	r4, r1
 8004d34:	bf0b      	itete	eq
 8004d36:	6863      	ldreq	r3, [r4, #4]
 8004d38:	684b      	ldrne	r3, [r1, #4]
 8004d3a:	6013      	streq	r3, [r2, #0]
 8004d3c:	6063      	strne	r3, [r4, #4]
 8004d3e:	bf18      	it	ne
 8004d40:	460c      	movne	r4, r1
 8004d42:	e7e9      	b.n	8004d18 <_malloc_r+0x64>
 8004d44:	460c      	mov	r4, r1
 8004d46:	6849      	ldr	r1, [r1, #4]
 8004d48:	e7ca      	b.n	8004ce0 <_malloc_r+0x2c>
 8004d4a:	1cc4      	adds	r4, r0, #3
 8004d4c:	f024 0403 	bic.w	r4, r4, #3
 8004d50:	42a0      	cmp	r0, r4
 8004d52:	d005      	beq.n	8004d60 <_malloc_r+0xac>
 8004d54:	1a21      	subs	r1, r4, r0
 8004d56:	4630      	mov	r0, r6
 8004d58:	f000 f886 	bl	8004e68 <_sbrk_r>
 8004d5c:	3001      	adds	r0, #1
 8004d5e:	d0cd      	beq.n	8004cfc <_malloc_r+0x48>
 8004d60:	6025      	str	r5, [r4, #0]
 8004d62:	e7d9      	b.n	8004d18 <_malloc_r+0x64>
 8004d64:	bd70      	pop	{r4, r5, r6, pc}
 8004d66:	bf00      	nop
 8004d68:	20000908 	.word	0x20000908
 8004d6c:	2000090c 	.word	0x2000090c

08004d70 <iprintf>:
 8004d70:	b40f      	push	{r0, r1, r2, r3}
 8004d72:	4b0a      	ldr	r3, [pc, #40]	; (8004d9c <iprintf+0x2c>)
 8004d74:	b513      	push	{r0, r1, r4, lr}
 8004d76:	681c      	ldr	r4, [r3, #0]
 8004d78:	b124      	cbz	r4, 8004d84 <iprintf+0x14>
 8004d7a:	69a3      	ldr	r3, [r4, #24]
 8004d7c:	b913      	cbnz	r3, 8004d84 <iprintf+0x14>
 8004d7e:	4620      	mov	r0, r4
 8004d80:	f000 fa9a 	bl	80052b8 <__sinit>
 8004d84:	ab05      	add	r3, sp, #20
 8004d86:	9a04      	ldr	r2, [sp, #16]
 8004d88:	68a1      	ldr	r1, [r4, #8]
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	9301      	str	r3, [sp, #4]
 8004d8e:	f000 fbbd 	bl	800550c <_vfiprintf_r>
 8004d92:	b002      	add	sp, #8
 8004d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d98:	b004      	add	sp, #16
 8004d9a:	4770      	bx	lr
 8004d9c:	20000050 	.word	0x20000050

08004da0 <_puts_r>:
 8004da0:	b570      	push	{r4, r5, r6, lr}
 8004da2:	460e      	mov	r6, r1
 8004da4:	4605      	mov	r5, r0
 8004da6:	b118      	cbz	r0, 8004db0 <_puts_r+0x10>
 8004da8:	6983      	ldr	r3, [r0, #24]
 8004daa:	b90b      	cbnz	r3, 8004db0 <_puts_r+0x10>
 8004dac:	f000 fa84 	bl	80052b8 <__sinit>
 8004db0:	69ab      	ldr	r3, [r5, #24]
 8004db2:	68ac      	ldr	r4, [r5, #8]
 8004db4:	b913      	cbnz	r3, 8004dbc <_puts_r+0x1c>
 8004db6:	4628      	mov	r0, r5
 8004db8:	f000 fa7e 	bl	80052b8 <__sinit>
 8004dbc:	4b23      	ldr	r3, [pc, #140]	; (8004e4c <_puts_r+0xac>)
 8004dbe:	429c      	cmp	r4, r3
 8004dc0:	d117      	bne.n	8004df2 <_puts_r+0x52>
 8004dc2:	686c      	ldr	r4, [r5, #4]
 8004dc4:	89a3      	ldrh	r3, [r4, #12]
 8004dc6:	071b      	lsls	r3, r3, #28
 8004dc8:	d51d      	bpl.n	8004e06 <_puts_r+0x66>
 8004dca:	6923      	ldr	r3, [r4, #16]
 8004dcc:	b1db      	cbz	r3, 8004e06 <_puts_r+0x66>
 8004dce:	3e01      	subs	r6, #1
 8004dd0:	68a3      	ldr	r3, [r4, #8]
 8004dd2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	60a3      	str	r3, [r4, #8]
 8004dda:	b9e9      	cbnz	r1, 8004e18 <_puts_r+0x78>
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	da2e      	bge.n	8004e3e <_puts_r+0x9e>
 8004de0:	4622      	mov	r2, r4
 8004de2:	210a      	movs	r1, #10
 8004de4:	4628      	mov	r0, r5
 8004de6:	f000 f893 	bl	8004f10 <__swbuf_r>
 8004dea:	3001      	adds	r0, #1
 8004dec:	d011      	beq.n	8004e12 <_puts_r+0x72>
 8004dee:	200a      	movs	r0, #10
 8004df0:	bd70      	pop	{r4, r5, r6, pc}
 8004df2:	4b17      	ldr	r3, [pc, #92]	; (8004e50 <_puts_r+0xb0>)
 8004df4:	429c      	cmp	r4, r3
 8004df6:	d101      	bne.n	8004dfc <_puts_r+0x5c>
 8004df8:	68ac      	ldr	r4, [r5, #8]
 8004dfa:	e7e3      	b.n	8004dc4 <_puts_r+0x24>
 8004dfc:	4b15      	ldr	r3, [pc, #84]	; (8004e54 <_puts_r+0xb4>)
 8004dfe:	429c      	cmp	r4, r3
 8004e00:	bf08      	it	eq
 8004e02:	68ec      	ldreq	r4, [r5, #12]
 8004e04:	e7de      	b.n	8004dc4 <_puts_r+0x24>
 8004e06:	4621      	mov	r1, r4
 8004e08:	4628      	mov	r0, r5
 8004e0a:	f000 f8e5 	bl	8004fd8 <__swsetup_r>
 8004e0e:	2800      	cmp	r0, #0
 8004e10:	d0dd      	beq.n	8004dce <_puts_r+0x2e>
 8004e12:	f04f 30ff 	mov.w	r0, #4294967295
 8004e16:	bd70      	pop	{r4, r5, r6, pc}
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	da04      	bge.n	8004e26 <_puts_r+0x86>
 8004e1c:	69a2      	ldr	r2, [r4, #24]
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	db06      	blt.n	8004e30 <_puts_r+0x90>
 8004e22:	290a      	cmp	r1, #10
 8004e24:	d004      	beq.n	8004e30 <_puts_r+0x90>
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	6022      	str	r2, [r4, #0]
 8004e2c:	7019      	strb	r1, [r3, #0]
 8004e2e:	e7cf      	b.n	8004dd0 <_puts_r+0x30>
 8004e30:	4622      	mov	r2, r4
 8004e32:	4628      	mov	r0, r5
 8004e34:	f000 f86c 	bl	8004f10 <__swbuf_r>
 8004e38:	3001      	adds	r0, #1
 8004e3a:	d1c9      	bne.n	8004dd0 <_puts_r+0x30>
 8004e3c:	e7e9      	b.n	8004e12 <_puts_r+0x72>
 8004e3e:	200a      	movs	r0, #10
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	6022      	str	r2, [r4, #0]
 8004e46:	7018      	strb	r0, [r3, #0]
 8004e48:	bd70      	pop	{r4, r5, r6, pc}
 8004e4a:	bf00      	nop
 8004e4c:	08005bf8 	.word	0x08005bf8
 8004e50:	08005c18 	.word	0x08005c18
 8004e54:	08005bd8 	.word	0x08005bd8

08004e58 <puts>:
 8004e58:	4b02      	ldr	r3, [pc, #8]	; (8004e64 <puts+0xc>)
 8004e5a:	4601      	mov	r1, r0
 8004e5c:	6818      	ldr	r0, [r3, #0]
 8004e5e:	f7ff bf9f 	b.w	8004da0 <_puts_r>
 8004e62:	bf00      	nop
 8004e64:	20000050 	.word	0x20000050

08004e68 <_sbrk_r>:
 8004e68:	b538      	push	{r3, r4, r5, lr}
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	4c05      	ldr	r4, [pc, #20]	; (8004e84 <_sbrk_r+0x1c>)
 8004e6e:	4605      	mov	r5, r0
 8004e70:	4608      	mov	r0, r1
 8004e72:	6023      	str	r3, [r4, #0]
 8004e74:	f7ff fc7a 	bl	800476c <_sbrk>
 8004e78:	1c43      	adds	r3, r0, #1
 8004e7a:	d102      	bne.n	8004e82 <_sbrk_r+0x1a>
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	b103      	cbz	r3, 8004e82 <_sbrk_r+0x1a>
 8004e80:	602b      	str	r3, [r5, #0]
 8004e82:	bd38      	pop	{r3, r4, r5, pc}
 8004e84:	20001208 	.word	0x20001208

08004e88 <__sread>:
 8004e88:	b510      	push	{r4, lr}
 8004e8a:	460c      	mov	r4, r1
 8004e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e90:	f000 fdea 	bl	8005a68 <_read_r>
 8004e94:	2800      	cmp	r0, #0
 8004e96:	bfab      	itete	ge
 8004e98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e9a:	89a3      	ldrhlt	r3, [r4, #12]
 8004e9c:	181b      	addge	r3, r3, r0
 8004e9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ea2:	bfac      	ite	ge
 8004ea4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ea6:	81a3      	strhlt	r3, [r4, #12]
 8004ea8:	bd10      	pop	{r4, pc}

08004eaa <__swrite>:
 8004eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eae:	461f      	mov	r7, r3
 8004eb0:	898b      	ldrh	r3, [r1, #12]
 8004eb2:	4605      	mov	r5, r0
 8004eb4:	05db      	lsls	r3, r3, #23
 8004eb6:	460c      	mov	r4, r1
 8004eb8:	4616      	mov	r6, r2
 8004eba:	d505      	bpl.n	8004ec8 <__swrite+0x1e>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ec4:	f000 fa82 	bl	80053cc <_lseek_r>
 8004ec8:	89a3      	ldrh	r3, [r4, #12]
 8004eca:	4632      	mov	r2, r6
 8004ecc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ed0:	81a3      	strh	r3, [r4, #12]
 8004ed2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ed6:	463b      	mov	r3, r7
 8004ed8:	4628      	mov	r0, r5
 8004eda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ede:	f000 b869 	b.w	8004fb4 <_write_r>

08004ee2 <__sseek>:
 8004ee2:	b510      	push	{r4, lr}
 8004ee4:	460c      	mov	r4, r1
 8004ee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eea:	f000 fa6f 	bl	80053cc <_lseek_r>
 8004eee:	1c43      	adds	r3, r0, #1
 8004ef0:	89a3      	ldrh	r3, [r4, #12]
 8004ef2:	bf15      	itete	ne
 8004ef4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ef6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004efa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004efe:	81a3      	strheq	r3, [r4, #12]
 8004f00:	bf18      	it	ne
 8004f02:	81a3      	strhne	r3, [r4, #12]
 8004f04:	bd10      	pop	{r4, pc}

08004f06 <__sclose>:
 8004f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f0a:	f000 b8d3 	b.w	80050b4 <_close_r>
	...

08004f10 <__swbuf_r>:
 8004f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f12:	460e      	mov	r6, r1
 8004f14:	4614      	mov	r4, r2
 8004f16:	4605      	mov	r5, r0
 8004f18:	b118      	cbz	r0, 8004f22 <__swbuf_r+0x12>
 8004f1a:	6983      	ldr	r3, [r0, #24]
 8004f1c:	b90b      	cbnz	r3, 8004f22 <__swbuf_r+0x12>
 8004f1e:	f000 f9cb 	bl	80052b8 <__sinit>
 8004f22:	4b21      	ldr	r3, [pc, #132]	; (8004fa8 <__swbuf_r+0x98>)
 8004f24:	429c      	cmp	r4, r3
 8004f26:	d12a      	bne.n	8004f7e <__swbuf_r+0x6e>
 8004f28:	686c      	ldr	r4, [r5, #4]
 8004f2a:	69a3      	ldr	r3, [r4, #24]
 8004f2c:	60a3      	str	r3, [r4, #8]
 8004f2e:	89a3      	ldrh	r3, [r4, #12]
 8004f30:	071a      	lsls	r2, r3, #28
 8004f32:	d52e      	bpl.n	8004f92 <__swbuf_r+0x82>
 8004f34:	6923      	ldr	r3, [r4, #16]
 8004f36:	b363      	cbz	r3, 8004f92 <__swbuf_r+0x82>
 8004f38:	6923      	ldr	r3, [r4, #16]
 8004f3a:	6820      	ldr	r0, [r4, #0]
 8004f3c:	b2f6      	uxtb	r6, r6
 8004f3e:	1ac0      	subs	r0, r0, r3
 8004f40:	6963      	ldr	r3, [r4, #20]
 8004f42:	4637      	mov	r7, r6
 8004f44:	4298      	cmp	r0, r3
 8004f46:	db04      	blt.n	8004f52 <__swbuf_r+0x42>
 8004f48:	4621      	mov	r1, r4
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	f000 f94a 	bl	80051e4 <_fflush_r>
 8004f50:	bb28      	cbnz	r0, 8004f9e <__swbuf_r+0x8e>
 8004f52:	68a3      	ldr	r3, [r4, #8]
 8004f54:	3001      	adds	r0, #1
 8004f56:	3b01      	subs	r3, #1
 8004f58:	60a3      	str	r3, [r4, #8]
 8004f5a:	6823      	ldr	r3, [r4, #0]
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	6022      	str	r2, [r4, #0]
 8004f60:	701e      	strb	r6, [r3, #0]
 8004f62:	6963      	ldr	r3, [r4, #20]
 8004f64:	4298      	cmp	r0, r3
 8004f66:	d004      	beq.n	8004f72 <__swbuf_r+0x62>
 8004f68:	89a3      	ldrh	r3, [r4, #12]
 8004f6a:	07db      	lsls	r3, r3, #31
 8004f6c:	d519      	bpl.n	8004fa2 <__swbuf_r+0x92>
 8004f6e:	2e0a      	cmp	r6, #10
 8004f70:	d117      	bne.n	8004fa2 <__swbuf_r+0x92>
 8004f72:	4621      	mov	r1, r4
 8004f74:	4628      	mov	r0, r5
 8004f76:	f000 f935 	bl	80051e4 <_fflush_r>
 8004f7a:	b190      	cbz	r0, 8004fa2 <__swbuf_r+0x92>
 8004f7c:	e00f      	b.n	8004f9e <__swbuf_r+0x8e>
 8004f7e:	4b0b      	ldr	r3, [pc, #44]	; (8004fac <__swbuf_r+0x9c>)
 8004f80:	429c      	cmp	r4, r3
 8004f82:	d101      	bne.n	8004f88 <__swbuf_r+0x78>
 8004f84:	68ac      	ldr	r4, [r5, #8]
 8004f86:	e7d0      	b.n	8004f2a <__swbuf_r+0x1a>
 8004f88:	4b09      	ldr	r3, [pc, #36]	; (8004fb0 <__swbuf_r+0xa0>)
 8004f8a:	429c      	cmp	r4, r3
 8004f8c:	bf08      	it	eq
 8004f8e:	68ec      	ldreq	r4, [r5, #12]
 8004f90:	e7cb      	b.n	8004f2a <__swbuf_r+0x1a>
 8004f92:	4621      	mov	r1, r4
 8004f94:	4628      	mov	r0, r5
 8004f96:	f000 f81f 	bl	8004fd8 <__swsetup_r>
 8004f9a:	2800      	cmp	r0, #0
 8004f9c:	d0cc      	beq.n	8004f38 <__swbuf_r+0x28>
 8004f9e:	f04f 37ff 	mov.w	r7, #4294967295
 8004fa2:	4638      	mov	r0, r7
 8004fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	08005bf8 	.word	0x08005bf8
 8004fac:	08005c18 	.word	0x08005c18
 8004fb0:	08005bd8 	.word	0x08005bd8

08004fb4 <_write_r>:
 8004fb4:	b538      	push	{r3, r4, r5, lr}
 8004fb6:	4605      	mov	r5, r0
 8004fb8:	4608      	mov	r0, r1
 8004fba:	4611      	mov	r1, r2
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	4c05      	ldr	r4, [pc, #20]	; (8004fd4 <_write_r+0x20>)
 8004fc0:	6022      	str	r2, [r4, #0]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	f7fe ff8e 	bl	8003ee4 <_write>
 8004fc8:	1c43      	adds	r3, r0, #1
 8004fca:	d102      	bne.n	8004fd2 <_write_r+0x1e>
 8004fcc:	6823      	ldr	r3, [r4, #0]
 8004fce:	b103      	cbz	r3, 8004fd2 <_write_r+0x1e>
 8004fd0:	602b      	str	r3, [r5, #0]
 8004fd2:	bd38      	pop	{r3, r4, r5, pc}
 8004fd4:	20001208 	.word	0x20001208

08004fd8 <__swsetup_r>:
 8004fd8:	4b32      	ldr	r3, [pc, #200]	; (80050a4 <__swsetup_r+0xcc>)
 8004fda:	b570      	push	{r4, r5, r6, lr}
 8004fdc:	681d      	ldr	r5, [r3, #0]
 8004fde:	4606      	mov	r6, r0
 8004fe0:	460c      	mov	r4, r1
 8004fe2:	b125      	cbz	r5, 8004fee <__swsetup_r+0x16>
 8004fe4:	69ab      	ldr	r3, [r5, #24]
 8004fe6:	b913      	cbnz	r3, 8004fee <__swsetup_r+0x16>
 8004fe8:	4628      	mov	r0, r5
 8004fea:	f000 f965 	bl	80052b8 <__sinit>
 8004fee:	4b2e      	ldr	r3, [pc, #184]	; (80050a8 <__swsetup_r+0xd0>)
 8004ff0:	429c      	cmp	r4, r3
 8004ff2:	d10f      	bne.n	8005014 <__swsetup_r+0x3c>
 8004ff4:	686c      	ldr	r4, [r5, #4]
 8004ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	0715      	lsls	r5, r2, #28
 8004ffe:	d42c      	bmi.n	800505a <__swsetup_r+0x82>
 8005000:	06d0      	lsls	r0, r2, #27
 8005002:	d411      	bmi.n	8005028 <__swsetup_r+0x50>
 8005004:	2209      	movs	r2, #9
 8005006:	6032      	str	r2, [r6, #0]
 8005008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800500c:	81a3      	strh	r3, [r4, #12]
 800500e:	f04f 30ff 	mov.w	r0, #4294967295
 8005012:	bd70      	pop	{r4, r5, r6, pc}
 8005014:	4b25      	ldr	r3, [pc, #148]	; (80050ac <__swsetup_r+0xd4>)
 8005016:	429c      	cmp	r4, r3
 8005018:	d101      	bne.n	800501e <__swsetup_r+0x46>
 800501a:	68ac      	ldr	r4, [r5, #8]
 800501c:	e7eb      	b.n	8004ff6 <__swsetup_r+0x1e>
 800501e:	4b24      	ldr	r3, [pc, #144]	; (80050b0 <__swsetup_r+0xd8>)
 8005020:	429c      	cmp	r4, r3
 8005022:	bf08      	it	eq
 8005024:	68ec      	ldreq	r4, [r5, #12]
 8005026:	e7e6      	b.n	8004ff6 <__swsetup_r+0x1e>
 8005028:	0751      	lsls	r1, r2, #29
 800502a:	d512      	bpl.n	8005052 <__swsetup_r+0x7a>
 800502c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800502e:	b141      	cbz	r1, 8005042 <__swsetup_r+0x6a>
 8005030:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005034:	4299      	cmp	r1, r3
 8005036:	d002      	beq.n	800503e <__swsetup_r+0x66>
 8005038:	4630      	mov	r0, r6
 800503a:	f7ff fdef 	bl	8004c1c <_free_r>
 800503e:	2300      	movs	r3, #0
 8005040:	6363      	str	r3, [r4, #52]	; 0x34
 8005042:	89a3      	ldrh	r3, [r4, #12]
 8005044:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005048:	81a3      	strh	r3, [r4, #12]
 800504a:	2300      	movs	r3, #0
 800504c:	6063      	str	r3, [r4, #4]
 800504e:	6923      	ldr	r3, [r4, #16]
 8005050:	6023      	str	r3, [r4, #0]
 8005052:	89a3      	ldrh	r3, [r4, #12]
 8005054:	f043 0308 	orr.w	r3, r3, #8
 8005058:	81a3      	strh	r3, [r4, #12]
 800505a:	6923      	ldr	r3, [r4, #16]
 800505c:	b94b      	cbnz	r3, 8005072 <__swsetup_r+0x9a>
 800505e:	89a3      	ldrh	r3, [r4, #12]
 8005060:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005068:	d003      	beq.n	8005072 <__swsetup_r+0x9a>
 800506a:	4621      	mov	r1, r4
 800506c:	4630      	mov	r0, r6
 800506e:	f000 f9e3 	bl	8005438 <__smakebuf_r>
 8005072:	89a2      	ldrh	r2, [r4, #12]
 8005074:	f012 0301 	ands.w	r3, r2, #1
 8005078:	d00c      	beq.n	8005094 <__swsetup_r+0xbc>
 800507a:	2300      	movs	r3, #0
 800507c:	60a3      	str	r3, [r4, #8]
 800507e:	6963      	ldr	r3, [r4, #20]
 8005080:	425b      	negs	r3, r3
 8005082:	61a3      	str	r3, [r4, #24]
 8005084:	6923      	ldr	r3, [r4, #16]
 8005086:	b953      	cbnz	r3, 800509e <__swsetup_r+0xc6>
 8005088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800508c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005090:	d1ba      	bne.n	8005008 <__swsetup_r+0x30>
 8005092:	bd70      	pop	{r4, r5, r6, pc}
 8005094:	0792      	lsls	r2, r2, #30
 8005096:	bf58      	it	pl
 8005098:	6963      	ldrpl	r3, [r4, #20]
 800509a:	60a3      	str	r3, [r4, #8]
 800509c:	e7f2      	b.n	8005084 <__swsetup_r+0xac>
 800509e:	2000      	movs	r0, #0
 80050a0:	e7f7      	b.n	8005092 <__swsetup_r+0xba>
 80050a2:	bf00      	nop
 80050a4:	20000050 	.word	0x20000050
 80050a8:	08005bf8 	.word	0x08005bf8
 80050ac:	08005c18 	.word	0x08005c18
 80050b0:	08005bd8 	.word	0x08005bd8

080050b4 <_close_r>:
 80050b4:	b538      	push	{r3, r4, r5, lr}
 80050b6:	2300      	movs	r3, #0
 80050b8:	4c05      	ldr	r4, [pc, #20]	; (80050d0 <_close_r+0x1c>)
 80050ba:	4605      	mov	r5, r0
 80050bc:	4608      	mov	r0, r1
 80050be:	6023      	str	r3, [r4, #0]
 80050c0:	f7ff fb80 	bl	80047c4 <_close>
 80050c4:	1c43      	adds	r3, r0, #1
 80050c6:	d102      	bne.n	80050ce <_close_r+0x1a>
 80050c8:	6823      	ldr	r3, [r4, #0]
 80050ca:	b103      	cbz	r3, 80050ce <_close_r+0x1a>
 80050cc:	602b      	str	r3, [r5, #0]
 80050ce:	bd38      	pop	{r3, r4, r5, pc}
 80050d0:	20001208 	.word	0x20001208

080050d4 <__sflush_r>:
 80050d4:	898a      	ldrh	r2, [r1, #12]
 80050d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050da:	4605      	mov	r5, r0
 80050dc:	0710      	lsls	r0, r2, #28
 80050de:	460c      	mov	r4, r1
 80050e0:	d45a      	bmi.n	8005198 <__sflush_r+0xc4>
 80050e2:	684b      	ldr	r3, [r1, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	dc05      	bgt.n	80050f4 <__sflush_r+0x20>
 80050e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	dc02      	bgt.n	80050f4 <__sflush_r+0x20>
 80050ee:	2000      	movs	r0, #0
 80050f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050f6:	2e00      	cmp	r6, #0
 80050f8:	d0f9      	beq.n	80050ee <__sflush_r+0x1a>
 80050fa:	2300      	movs	r3, #0
 80050fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005100:	682f      	ldr	r7, [r5, #0]
 8005102:	602b      	str	r3, [r5, #0]
 8005104:	d033      	beq.n	800516e <__sflush_r+0x9a>
 8005106:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005108:	89a3      	ldrh	r3, [r4, #12]
 800510a:	075a      	lsls	r2, r3, #29
 800510c:	d505      	bpl.n	800511a <__sflush_r+0x46>
 800510e:	6863      	ldr	r3, [r4, #4]
 8005110:	1ac0      	subs	r0, r0, r3
 8005112:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005114:	b10b      	cbz	r3, 800511a <__sflush_r+0x46>
 8005116:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005118:	1ac0      	subs	r0, r0, r3
 800511a:	2300      	movs	r3, #0
 800511c:	4602      	mov	r2, r0
 800511e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005120:	6a21      	ldr	r1, [r4, #32]
 8005122:	4628      	mov	r0, r5
 8005124:	47b0      	blx	r6
 8005126:	1c43      	adds	r3, r0, #1
 8005128:	89a3      	ldrh	r3, [r4, #12]
 800512a:	d106      	bne.n	800513a <__sflush_r+0x66>
 800512c:	6829      	ldr	r1, [r5, #0]
 800512e:	291d      	cmp	r1, #29
 8005130:	d84b      	bhi.n	80051ca <__sflush_r+0xf6>
 8005132:	4a2b      	ldr	r2, [pc, #172]	; (80051e0 <__sflush_r+0x10c>)
 8005134:	40ca      	lsrs	r2, r1
 8005136:	07d6      	lsls	r6, r2, #31
 8005138:	d547      	bpl.n	80051ca <__sflush_r+0xf6>
 800513a:	2200      	movs	r2, #0
 800513c:	6062      	str	r2, [r4, #4]
 800513e:	6922      	ldr	r2, [r4, #16]
 8005140:	04d9      	lsls	r1, r3, #19
 8005142:	6022      	str	r2, [r4, #0]
 8005144:	d504      	bpl.n	8005150 <__sflush_r+0x7c>
 8005146:	1c42      	adds	r2, r0, #1
 8005148:	d101      	bne.n	800514e <__sflush_r+0x7a>
 800514a:	682b      	ldr	r3, [r5, #0]
 800514c:	b903      	cbnz	r3, 8005150 <__sflush_r+0x7c>
 800514e:	6560      	str	r0, [r4, #84]	; 0x54
 8005150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005152:	602f      	str	r7, [r5, #0]
 8005154:	2900      	cmp	r1, #0
 8005156:	d0ca      	beq.n	80050ee <__sflush_r+0x1a>
 8005158:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800515c:	4299      	cmp	r1, r3
 800515e:	d002      	beq.n	8005166 <__sflush_r+0x92>
 8005160:	4628      	mov	r0, r5
 8005162:	f7ff fd5b 	bl	8004c1c <_free_r>
 8005166:	2000      	movs	r0, #0
 8005168:	6360      	str	r0, [r4, #52]	; 0x34
 800516a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800516e:	6a21      	ldr	r1, [r4, #32]
 8005170:	2301      	movs	r3, #1
 8005172:	4628      	mov	r0, r5
 8005174:	47b0      	blx	r6
 8005176:	1c41      	adds	r1, r0, #1
 8005178:	d1c6      	bne.n	8005108 <__sflush_r+0x34>
 800517a:	682b      	ldr	r3, [r5, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d0c3      	beq.n	8005108 <__sflush_r+0x34>
 8005180:	2b1d      	cmp	r3, #29
 8005182:	d001      	beq.n	8005188 <__sflush_r+0xb4>
 8005184:	2b16      	cmp	r3, #22
 8005186:	d101      	bne.n	800518c <__sflush_r+0xb8>
 8005188:	602f      	str	r7, [r5, #0]
 800518a:	e7b0      	b.n	80050ee <__sflush_r+0x1a>
 800518c:	89a3      	ldrh	r3, [r4, #12]
 800518e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005192:	81a3      	strh	r3, [r4, #12]
 8005194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005198:	690f      	ldr	r7, [r1, #16]
 800519a:	2f00      	cmp	r7, #0
 800519c:	d0a7      	beq.n	80050ee <__sflush_r+0x1a>
 800519e:	0793      	lsls	r3, r2, #30
 80051a0:	bf18      	it	ne
 80051a2:	2300      	movne	r3, #0
 80051a4:	680e      	ldr	r6, [r1, #0]
 80051a6:	bf08      	it	eq
 80051a8:	694b      	ldreq	r3, [r1, #20]
 80051aa:	eba6 0807 	sub.w	r8, r6, r7
 80051ae:	600f      	str	r7, [r1, #0]
 80051b0:	608b      	str	r3, [r1, #8]
 80051b2:	f1b8 0f00 	cmp.w	r8, #0
 80051b6:	dd9a      	ble.n	80050ee <__sflush_r+0x1a>
 80051b8:	4643      	mov	r3, r8
 80051ba:	463a      	mov	r2, r7
 80051bc:	6a21      	ldr	r1, [r4, #32]
 80051be:	4628      	mov	r0, r5
 80051c0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80051c2:	47b0      	blx	r6
 80051c4:	2800      	cmp	r0, #0
 80051c6:	dc07      	bgt.n	80051d8 <__sflush_r+0x104>
 80051c8:	89a3      	ldrh	r3, [r4, #12]
 80051ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051ce:	81a3      	strh	r3, [r4, #12]
 80051d0:	f04f 30ff 	mov.w	r0, #4294967295
 80051d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051d8:	4407      	add	r7, r0
 80051da:	eba8 0800 	sub.w	r8, r8, r0
 80051de:	e7e8      	b.n	80051b2 <__sflush_r+0xde>
 80051e0:	20400001 	.word	0x20400001

080051e4 <_fflush_r>:
 80051e4:	b538      	push	{r3, r4, r5, lr}
 80051e6:	690b      	ldr	r3, [r1, #16]
 80051e8:	4605      	mov	r5, r0
 80051ea:	460c      	mov	r4, r1
 80051ec:	b1db      	cbz	r3, 8005226 <_fflush_r+0x42>
 80051ee:	b118      	cbz	r0, 80051f8 <_fflush_r+0x14>
 80051f0:	6983      	ldr	r3, [r0, #24]
 80051f2:	b90b      	cbnz	r3, 80051f8 <_fflush_r+0x14>
 80051f4:	f000 f860 	bl	80052b8 <__sinit>
 80051f8:	4b0c      	ldr	r3, [pc, #48]	; (800522c <_fflush_r+0x48>)
 80051fa:	429c      	cmp	r4, r3
 80051fc:	d109      	bne.n	8005212 <_fflush_r+0x2e>
 80051fe:	686c      	ldr	r4, [r5, #4]
 8005200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005204:	b17b      	cbz	r3, 8005226 <_fflush_r+0x42>
 8005206:	4621      	mov	r1, r4
 8005208:	4628      	mov	r0, r5
 800520a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800520e:	f7ff bf61 	b.w	80050d4 <__sflush_r>
 8005212:	4b07      	ldr	r3, [pc, #28]	; (8005230 <_fflush_r+0x4c>)
 8005214:	429c      	cmp	r4, r3
 8005216:	d101      	bne.n	800521c <_fflush_r+0x38>
 8005218:	68ac      	ldr	r4, [r5, #8]
 800521a:	e7f1      	b.n	8005200 <_fflush_r+0x1c>
 800521c:	4b05      	ldr	r3, [pc, #20]	; (8005234 <_fflush_r+0x50>)
 800521e:	429c      	cmp	r4, r3
 8005220:	bf08      	it	eq
 8005222:	68ec      	ldreq	r4, [r5, #12]
 8005224:	e7ec      	b.n	8005200 <_fflush_r+0x1c>
 8005226:	2000      	movs	r0, #0
 8005228:	bd38      	pop	{r3, r4, r5, pc}
 800522a:	bf00      	nop
 800522c:	08005bf8 	.word	0x08005bf8
 8005230:	08005c18 	.word	0x08005c18
 8005234:	08005bd8 	.word	0x08005bd8

08005238 <_cleanup_r>:
 8005238:	4901      	ldr	r1, [pc, #4]	; (8005240 <_cleanup_r+0x8>)
 800523a:	f000 b8a9 	b.w	8005390 <_fwalk_reent>
 800523e:	bf00      	nop
 8005240:	080051e5 	.word	0x080051e5

08005244 <std.isra.0>:
 8005244:	2300      	movs	r3, #0
 8005246:	b510      	push	{r4, lr}
 8005248:	4604      	mov	r4, r0
 800524a:	6003      	str	r3, [r0, #0]
 800524c:	6043      	str	r3, [r0, #4]
 800524e:	6083      	str	r3, [r0, #8]
 8005250:	8181      	strh	r1, [r0, #12]
 8005252:	6643      	str	r3, [r0, #100]	; 0x64
 8005254:	81c2      	strh	r2, [r0, #14]
 8005256:	6103      	str	r3, [r0, #16]
 8005258:	6143      	str	r3, [r0, #20]
 800525a:	6183      	str	r3, [r0, #24]
 800525c:	4619      	mov	r1, r3
 800525e:	2208      	movs	r2, #8
 8005260:	305c      	adds	r0, #92	; 0x5c
 8005262:	f7ff fcd2 	bl	8004c0a <memset>
 8005266:	4b05      	ldr	r3, [pc, #20]	; (800527c <std.isra.0+0x38>)
 8005268:	6224      	str	r4, [r4, #32]
 800526a:	6263      	str	r3, [r4, #36]	; 0x24
 800526c:	4b04      	ldr	r3, [pc, #16]	; (8005280 <std.isra.0+0x3c>)
 800526e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005270:	4b04      	ldr	r3, [pc, #16]	; (8005284 <std.isra.0+0x40>)
 8005272:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005274:	4b04      	ldr	r3, [pc, #16]	; (8005288 <std.isra.0+0x44>)
 8005276:	6323      	str	r3, [r4, #48]	; 0x30
 8005278:	bd10      	pop	{r4, pc}
 800527a:	bf00      	nop
 800527c:	08004e89 	.word	0x08004e89
 8005280:	08004eab 	.word	0x08004eab
 8005284:	08004ee3 	.word	0x08004ee3
 8005288:	08004f07 	.word	0x08004f07

0800528c <__sfmoreglue>:
 800528c:	b570      	push	{r4, r5, r6, lr}
 800528e:	2568      	movs	r5, #104	; 0x68
 8005290:	1e4a      	subs	r2, r1, #1
 8005292:	4355      	muls	r5, r2
 8005294:	460e      	mov	r6, r1
 8005296:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800529a:	f7ff fd0b 	bl	8004cb4 <_malloc_r>
 800529e:	4604      	mov	r4, r0
 80052a0:	b140      	cbz	r0, 80052b4 <__sfmoreglue+0x28>
 80052a2:	2100      	movs	r1, #0
 80052a4:	e880 0042 	stmia.w	r0, {r1, r6}
 80052a8:	300c      	adds	r0, #12
 80052aa:	60a0      	str	r0, [r4, #8]
 80052ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80052b0:	f7ff fcab 	bl	8004c0a <memset>
 80052b4:	4620      	mov	r0, r4
 80052b6:	bd70      	pop	{r4, r5, r6, pc}

080052b8 <__sinit>:
 80052b8:	6983      	ldr	r3, [r0, #24]
 80052ba:	b510      	push	{r4, lr}
 80052bc:	4604      	mov	r4, r0
 80052be:	bb33      	cbnz	r3, 800530e <__sinit+0x56>
 80052c0:	6483      	str	r3, [r0, #72]	; 0x48
 80052c2:	64c3      	str	r3, [r0, #76]	; 0x4c
 80052c4:	6503      	str	r3, [r0, #80]	; 0x50
 80052c6:	4b12      	ldr	r3, [pc, #72]	; (8005310 <__sinit+0x58>)
 80052c8:	4a12      	ldr	r2, [pc, #72]	; (8005314 <__sinit+0x5c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6282      	str	r2, [r0, #40]	; 0x28
 80052ce:	4298      	cmp	r0, r3
 80052d0:	bf04      	itt	eq
 80052d2:	2301      	moveq	r3, #1
 80052d4:	6183      	streq	r3, [r0, #24]
 80052d6:	f000 f81f 	bl	8005318 <__sfp>
 80052da:	6060      	str	r0, [r4, #4]
 80052dc:	4620      	mov	r0, r4
 80052de:	f000 f81b 	bl	8005318 <__sfp>
 80052e2:	60a0      	str	r0, [r4, #8]
 80052e4:	4620      	mov	r0, r4
 80052e6:	f000 f817 	bl	8005318 <__sfp>
 80052ea:	2200      	movs	r2, #0
 80052ec:	60e0      	str	r0, [r4, #12]
 80052ee:	2104      	movs	r1, #4
 80052f0:	6860      	ldr	r0, [r4, #4]
 80052f2:	f7ff ffa7 	bl	8005244 <std.isra.0>
 80052f6:	2201      	movs	r2, #1
 80052f8:	2109      	movs	r1, #9
 80052fa:	68a0      	ldr	r0, [r4, #8]
 80052fc:	f7ff ffa2 	bl	8005244 <std.isra.0>
 8005300:	2202      	movs	r2, #2
 8005302:	2112      	movs	r1, #18
 8005304:	68e0      	ldr	r0, [r4, #12]
 8005306:	f7ff ff9d 	bl	8005244 <std.isra.0>
 800530a:	2301      	movs	r3, #1
 800530c:	61a3      	str	r3, [r4, #24]
 800530e:	bd10      	pop	{r4, pc}
 8005310:	08005bd4 	.word	0x08005bd4
 8005314:	08005239 	.word	0x08005239

08005318 <__sfp>:
 8005318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800531a:	4b1c      	ldr	r3, [pc, #112]	; (800538c <__sfp+0x74>)
 800531c:	4607      	mov	r7, r0
 800531e:	681e      	ldr	r6, [r3, #0]
 8005320:	69b3      	ldr	r3, [r6, #24]
 8005322:	b913      	cbnz	r3, 800532a <__sfp+0x12>
 8005324:	4630      	mov	r0, r6
 8005326:	f7ff ffc7 	bl	80052b8 <__sinit>
 800532a:	3648      	adds	r6, #72	; 0x48
 800532c:	68b4      	ldr	r4, [r6, #8]
 800532e:	6873      	ldr	r3, [r6, #4]
 8005330:	3b01      	subs	r3, #1
 8005332:	d503      	bpl.n	800533c <__sfp+0x24>
 8005334:	6833      	ldr	r3, [r6, #0]
 8005336:	b133      	cbz	r3, 8005346 <__sfp+0x2e>
 8005338:	6836      	ldr	r6, [r6, #0]
 800533a:	e7f7      	b.n	800532c <__sfp+0x14>
 800533c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005340:	b16d      	cbz	r5, 800535e <__sfp+0x46>
 8005342:	3468      	adds	r4, #104	; 0x68
 8005344:	e7f4      	b.n	8005330 <__sfp+0x18>
 8005346:	2104      	movs	r1, #4
 8005348:	4638      	mov	r0, r7
 800534a:	f7ff ff9f 	bl	800528c <__sfmoreglue>
 800534e:	6030      	str	r0, [r6, #0]
 8005350:	2800      	cmp	r0, #0
 8005352:	d1f1      	bne.n	8005338 <__sfp+0x20>
 8005354:	230c      	movs	r3, #12
 8005356:	4604      	mov	r4, r0
 8005358:	603b      	str	r3, [r7, #0]
 800535a:	4620      	mov	r0, r4
 800535c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800535e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005362:	81e3      	strh	r3, [r4, #14]
 8005364:	2301      	movs	r3, #1
 8005366:	6665      	str	r5, [r4, #100]	; 0x64
 8005368:	81a3      	strh	r3, [r4, #12]
 800536a:	6025      	str	r5, [r4, #0]
 800536c:	60a5      	str	r5, [r4, #8]
 800536e:	6065      	str	r5, [r4, #4]
 8005370:	6125      	str	r5, [r4, #16]
 8005372:	6165      	str	r5, [r4, #20]
 8005374:	61a5      	str	r5, [r4, #24]
 8005376:	2208      	movs	r2, #8
 8005378:	4629      	mov	r1, r5
 800537a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800537e:	f7ff fc44 	bl	8004c0a <memset>
 8005382:	6365      	str	r5, [r4, #52]	; 0x34
 8005384:	63a5      	str	r5, [r4, #56]	; 0x38
 8005386:	64a5      	str	r5, [r4, #72]	; 0x48
 8005388:	64e5      	str	r5, [r4, #76]	; 0x4c
 800538a:	e7e6      	b.n	800535a <__sfp+0x42>
 800538c:	08005bd4 	.word	0x08005bd4

08005390 <_fwalk_reent>:
 8005390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005394:	4680      	mov	r8, r0
 8005396:	4689      	mov	r9, r1
 8005398:	2600      	movs	r6, #0
 800539a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800539e:	b914      	cbnz	r4, 80053a6 <_fwalk_reent+0x16>
 80053a0:	4630      	mov	r0, r6
 80053a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053a6:	68a5      	ldr	r5, [r4, #8]
 80053a8:	6867      	ldr	r7, [r4, #4]
 80053aa:	3f01      	subs	r7, #1
 80053ac:	d501      	bpl.n	80053b2 <_fwalk_reent+0x22>
 80053ae:	6824      	ldr	r4, [r4, #0]
 80053b0:	e7f5      	b.n	800539e <_fwalk_reent+0xe>
 80053b2:	89ab      	ldrh	r3, [r5, #12]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d907      	bls.n	80053c8 <_fwalk_reent+0x38>
 80053b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053bc:	3301      	adds	r3, #1
 80053be:	d003      	beq.n	80053c8 <_fwalk_reent+0x38>
 80053c0:	4629      	mov	r1, r5
 80053c2:	4640      	mov	r0, r8
 80053c4:	47c8      	blx	r9
 80053c6:	4306      	orrs	r6, r0
 80053c8:	3568      	adds	r5, #104	; 0x68
 80053ca:	e7ee      	b.n	80053aa <_fwalk_reent+0x1a>

080053cc <_lseek_r>:
 80053cc:	b538      	push	{r3, r4, r5, lr}
 80053ce:	4605      	mov	r5, r0
 80053d0:	4608      	mov	r0, r1
 80053d2:	4611      	mov	r1, r2
 80053d4:	2200      	movs	r2, #0
 80053d6:	4c05      	ldr	r4, [pc, #20]	; (80053ec <_lseek_r+0x20>)
 80053d8:	6022      	str	r2, [r4, #0]
 80053da:	461a      	mov	r2, r3
 80053dc:	f7ff fa16 	bl	800480c <_lseek>
 80053e0:	1c43      	adds	r3, r0, #1
 80053e2:	d102      	bne.n	80053ea <_lseek_r+0x1e>
 80053e4:	6823      	ldr	r3, [r4, #0]
 80053e6:	b103      	cbz	r3, 80053ea <_lseek_r+0x1e>
 80053e8:	602b      	str	r3, [r5, #0]
 80053ea:	bd38      	pop	{r3, r4, r5, pc}
 80053ec:	20001208 	.word	0x20001208

080053f0 <__swhatbuf_r>:
 80053f0:	b570      	push	{r4, r5, r6, lr}
 80053f2:	460e      	mov	r6, r1
 80053f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053f8:	b090      	sub	sp, #64	; 0x40
 80053fa:	2900      	cmp	r1, #0
 80053fc:	4614      	mov	r4, r2
 80053fe:	461d      	mov	r5, r3
 8005400:	da07      	bge.n	8005412 <__swhatbuf_r+0x22>
 8005402:	2300      	movs	r3, #0
 8005404:	602b      	str	r3, [r5, #0]
 8005406:	89b3      	ldrh	r3, [r6, #12]
 8005408:	061a      	lsls	r2, r3, #24
 800540a:	d410      	bmi.n	800542e <__swhatbuf_r+0x3e>
 800540c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005410:	e00e      	b.n	8005430 <__swhatbuf_r+0x40>
 8005412:	aa01      	add	r2, sp, #4
 8005414:	f000 fb3a 	bl	8005a8c <_fstat_r>
 8005418:	2800      	cmp	r0, #0
 800541a:	dbf2      	blt.n	8005402 <__swhatbuf_r+0x12>
 800541c:	9a02      	ldr	r2, [sp, #8]
 800541e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005422:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005426:	425a      	negs	r2, r3
 8005428:	415a      	adcs	r2, r3
 800542a:	602a      	str	r2, [r5, #0]
 800542c:	e7ee      	b.n	800540c <__swhatbuf_r+0x1c>
 800542e:	2340      	movs	r3, #64	; 0x40
 8005430:	2000      	movs	r0, #0
 8005432:	6023      	str	r3, [r4, #0]
 8005434:	b010      	add	sp, #64	; 0x40
 8005436:	bd70      	pop	{r4, r5, r6, pc}

08005438 <__smakebuf_r>:
 8005438:	898b      	ldrh	r3, [r1, #12]
 800543a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800543c:	079d      	lsls	r5, r3, #30
 800543e:	4606      	mov	r6, r0
 8005440:	460c      	mov	r4, r1
 8005442:	d507      	bpl.n	8005454 <__smakebuf_r+0x1c>
 8005444:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005448:	6023      	str	r3, [r4, #0]
 800544a:	6123      	str	r3, [r4, #16]
 800544c:	2301      	movs	r3, #1
 800544e:	6163      	str	r3, [r4, #20]
 8005450:	b002      	add	sp, #8
 8005452:	bd70      	pop	{r4, r5, r6, pc}
 8005454:	ab01      	add	r3, sp, #4
 8005456:	466a      	mov	r2, sp
 8005458:	f7ff ffca 	bl	80053f0 <__swhatbuf_r>
 800545c:	9900      	ldr	r1, [sp, #0]
 800545e:	4605      	mov	r5, r0
 8005460:	4630      	mov	r0, r6
 8005462:	f7ff fc27 	bl	8004cb4 <_malloc_r>
 8005466:	b948      	cbnz	r0, 800547c <__smakebuf_r+0x44>
 8005468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800546c:	059a      	lsls	r2, r3, #22
 800546e:	d4ef      	bmi.n	8005450 <__smakebuf_r+0x18>
 8005470:	f023 0303 	bic.w	r3, r3, #3
 8005474:	f043 0302 	orr.w	r3, r3, #2
 8005478:	81a3      	strh	r3, [r4, #12]
 800547a:	e7e3      	b.n	8005444 <__smakebuf_r+0xc>
 800547c:	4b0d      	ldr	r3, [pc, #52]	; (80054b4 <__smakebuf_r+0x7c>)
 800547e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005480:	89a3      	ldrh	r3, [r4, #12]
 8005482:	6020      	str	r0, [r4, #0]
 8005484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005488:	81a3      	strh	r3, [r4, #12]
 800548a:	9b00      	ldr	r3, [sp, #0]
 800548c:	6120      	str	r0, [r4, #16]
 800548e:	6163      	str	r3, [r4, #20]
 8005490:	9b01      	ldr	r3, [sp, #4]
 8005492:	b15b      	cbz	r3, 80054ac <__smakebuf_r+0x74>
 8005494:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005498:	4630      	mov	r0, r6
 800549a:	f000 fb09 	bl	8005ab0 <_isatty_r>
 800549e:	b128      	cbz	r0, 80054ac <__smakebuf_r+0x74>
 80054a0:	89a3      	ldrh	r3, [r4, #12]
 80054a2:	f023 0303 	bic.w	r3, r3, #3
 80054a6:	f043 0301 	orr.w	r3, r3, #1
 80054aa:	81a3      	strh	r3, [r4, #12]
 80054ac:	89a3      	ldrh	r3, [r4, #12]
 80054ae:	431d      	orrs	r5, r3
 80054b0:	81a5      	strh	r5, [r4, #12]
 80054b2:	e7cd      	b.n	8005450 <__smakebuf_r+0x18>
 80054b4:	08005239 	.word	0x08005239

080054b8 <__malloc_lock>:
 80054b8:	4770      	bx	lr

080054ba <__malloc_unlock>:
 80054ba:	4770      	bx	lr

080054bc <__sfputc_r>:
 80054bc:	6893      	ldr	r3, [r2, #8]
 80054be:	b410      	push	{r4}
 80054c0:	3b01      	subs	r3, #1
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	6093      	str	r3, [r2, #8]
 80054c6:	da08      	bge.n	80054da <__sfputc_r+0x1e>
 80054c8:	6994      	ldr	r4, [r2, #24]
 80054ca:	42a3      	cmp	r3, r4
 80054cc:	db02      	blt.n	80054d4 <__sfputc_r+0x18>
 80054ce:	b2cb      	uxtb	r3, r1
 80054d0:	2b0a      	cmp	r3, #10
 80054d2:	d102      	bne.n	80054da <__sfputc_r+0x1e>
 80054d4:	bc10      	pop	{r4}
 80054d6:	f7ff bd1b 	b.w	8004f10 <__swbuf_r>
 80054da:	6813      	ldr	r3, [r2, #0]
 80054dc:	1c58      	adds	r0, r3, #1
 80054de:	6010      	str	r0, [r2, #0]
 80054e0:	7019      	strb	r1, [r3, #0]
 80054e2:	b2c8      	uxtb	r0, r1
 80054e4:	bc10      	pop	{r4}
 80054e6:	4770      	bx	lr

080054e8 <__sfputs_r>:
 80054e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ea:	4606      	mov	r6, r0
 80054ec:	460f      	mov	r7, r1
 80054ee:	4614      	mov	r4, r2
 80054f0:	18d5      	adds	r5, r2, r3
 80054f2:	42ac      	cmp	r4, r5
 80054f4:	d101      	bne.n	80054fa <__sfputs_r+0x12>
 80054f6:	2000      	movs	r0, #0
 80054f8:	e007      	b.n	800550a <__sfputs_r+0x22>
 80054fa:	463a      	mov	r2, r7
 80054fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005500:	4630      	mov	r0, r6
 8005502:	f7ff ffdb 	bl	80054bc <__sfputc_r>
 8005506:	1c43      	adds	r3, r0, #1
 8005508:	d1f3      	bne.n	80054f2 <__sfputs_r+0xa>
 800550a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800550c <_vfiprintf_r>:
 800550c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005510:	b09d      	sub	sp, #116	; 0x74
 8005512:	460c      	mov	r4, r1
 8005514:	4617      	mov	r7, r2
 8005516:	9303      	str	r3, [sp, #12]
 8005518:	4606      	mov	r6, r0
 800551a:	b118      	cbz	r0, 8005524 <_vfiprintf_r+0x18>
 800551c:	6983      	ldr	r3, [r0, #24]
 800551e:	b90b      	cbnz	r3, 8005524 <_vfiprintf_r+0x18>
 8005520:	f7ff feca 	bl	80052b8 <__sinit>
 8005524:	4b7c      	ldr	r3, [pc, #496]	; (8005718 <_vfiprintf_r+0x20c>)
 8005526:	429c      	cmp	r4, r3
 8005528:	d157      	bne.n	80055da <_vfiprintf_r+0xce>
 800552a:	6874      	ldr	r4, [r6, #4]
 800552c:	89a3      	ldrh	r3, [r4, #12]
 800552e:	0718      	lsls	r0, r3, #28
 8005530:	d55d      	bpl.n	80055ee <_vfiprintf_r+0xe2>
 8005532:	6923      	ldr	r3, [r4, #16]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d05a      	beq.n	80055ee <_vfiprintf_r+0xe2>
 8005538:	2300      	movs	r3, #0
 800553a:	9309      	str	r3, [sp, #36]	; 0x24
 800553c:	2320      	movs	r3, #32
 800553e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005542:	2330      	movs	r3, #48	; 0x30
 8005544:	f04f 0b01 	mov.w	fp, #1
 8005548:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800554c:	46b8      	mov	r8, r7
 800554e:	4645      	mov	r5, r8
 8005550:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	d155      	bne.n	8005604 <_vfiprintf_r+0xf8>
 8005558:	ebb8 0a07 	subs.w	sl, r8, r7
 800555c:	d00b      	beq.n	8005576 <_vfiprintf_r+0x6a>
 800555e:	4653      	mov	r3, sl
 8005560:	463a      	mov	r2, r7
 8005562:	4621      	mov	r1, r4
 8005564:	4630      	mov	r0, r6
 8005566:	f7ff ffbf 	bl	80054e8 <__sfputs_r>
 800556a:	3001      	adds	r0, #1
 800556c:	f000 80c4 	beq.w	80056f8 <_vfiprintf_r+0x1ec>
 8005570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005572:	4453      	add	r3, sl
 8005574:	9309      	str	r3, [sp, #36]	; 0x24
 8005576:	f898 3000 	ldrb.w	r3, [r8]
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 80bc 	beq.w	80056f8 <_vfiprintf_r+0x1ec>
 8005580:	2300      	movs	r3, #0
 8005582:	f04f 32ff 	mov.w	r2, #4294967295
 8005586:	9304      	str	r3, [sp, #16]
 8005588:	9307      	str	r3, [sp, #28]
 800558a:	9205      	str	r2, [sp, #20]
 800558c:	9306      	str	r3, [sp, #24]
 800558e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005592:	931a      	str	r3, [sp, #104]	; 0x68
 8005594:	2205      	movs	r2, #5
 8005596:	7829      	ldrb	r1, [r5, #0]
 8005598:	4860      	ldr	r0, [pc, #384]	; (800571c <_vfiprintf_r+0x210>)
 800559a:	f000 fa99 	bl	8005ad0 <memchr>
 800559e:	f105 0801 	add.w	r8, r5, #1
 80055a2:	9b04      	ldr	r3, [sp, #16]
 80055a4:	2800      	cmp	r0, #0
 80055a6:	d131      	bne.n	800560c <_vfiprintf_r+0x100>
 80055a8:	06d9      	lsls	r1, r3, #27
 80055aa:	bf44      	itt	mi
 80055ac:	2220      	movmi	r2, #32
 80055ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80055b2:	071a      	lsls	r2, r3, #28
 80055b4:	bf44      	itt	mi
 80055b6:	222b      	movmi	r2, #43	; 0x2b
 80055b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80055bc:	782a      	ldrb	r2, [r5, #0]
 80055be:	2a2a      	cmp	r2, #42	; 0x2a
 80055c0:	d02c      	beq.n	800561c <_vfiprintf_r+0x110>
 80055c2:	2100      	movs	r1, #0
 80055c4:	200a      	movs	r0, #10
 80055c6:	9a07      	ldr	r2, [sp, #28]
 80055c8:	46a8      	mov	r8, r5
 80055ca:	f898 3000 	ldrb.w	r3, [r8]
 80055ce:	3501      	adds	r5, #1
 80055d0:	3b30      	subs	r3, #48	; 0x30
 80055d2:	2b09      	cmp	r3, #9
 80055d4:	d96d      	bls.n	80056b2 <_vfiprintf_r+0x1a6>
 80055d6:	b371      	cbz	r1, 8005636 <_vfiprintf_r+0x12a>
 80055d8:	e026      	b.n	8005628 <_vfiprintf_r+0x11c>
 80055da:	4b51      	ldr	r3, [pc, #324]	; (8005720 <_vfiprintf_r+0x214>)
 80055dc:	429c      	cmp	r4, r3
 80055de:	d101      	bne.n	80055e4 <_vfiprintf_r+0xd8>
 80055e0:	68b4      	ldr	r4, [r6, #8]
 80055e2:	e7a3      	b.n	800552c <_vfiprintf_r+0x20>
 80055e4:	4b4f      	ldr	r3, [pc, #316]	; (8005724 <_vfiprintf_r+0x218>)
 80055e6:	429c      	cmp	r4, r3
 80055e8:	bf08      	it	eq
 80055ea:	68f4      	ldreq	r4, [r6, #12]
 80055ec:	e79e      	b.n	800552c <_vfiprintf_r+0x20>
 80055ee:	4621      	mov	r1, r4
 80055f0:	4630      	mov	r0, r6
 80055f2:	f7ff fcf1 	bl	8004fd8 <__swsetup_r>
 80055f6:	2800      	cmp	r0, #0
 80055f8:	d09e      	beq.n	8005538 <_vfiprintf_r+0x2c>
 80055fa:	f04f 30ff 	mov.w	r0, #4294967295
 80055fe:	b01d      	add	sp, #116	; 0x74
 8005600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005604:	2b25      	cmp	r3, #37	; 0x25
 8005606:	d0a7      	beq.n	8005558 <_vfiprintf_r+0x4c>
 8005608:	46a8      	mov	r8, r5
 800560a:	e7a0      	b.n	800554e <_vfiprintf_r+0x42>
 800560c:	4a43      	ldr	r2, [pc, #268]	; (800571c <_vfiprintf_r+0x210>)
 800560e:	4645      	mov	r5, r8
 8005610:	1a80      	subs	r0, r0, r2
 8005612:	fa0b f000 	lsl.w	r0, fp, r0
 8005616:	4318      	orrs	r0, r3
 8005618:	9004      	str	r0, [sp, #16]
 800561a:	e7bb      	b.n	8005594 <_vfiprintf_r+0x88>
 800561c:	9a03      	ldr	r2, [sp, #12]
 800561e:	1d11      	adds	r1, r2, #4
 8005620:	6812      	ldr	r2, [r2, #0]
 8005622:	9103      	str	r1, [sp, #12]
 8005624:	2a00      	cmp	r2, #0
 8005626:	db01      	blt.n	800562c <_vfiprintf_r+0x120>
 8005628:	9207      	str	r2, [sp, #28]
 800562a:	e004      	b.n	8005636 <_vfiprintf_r+0x12a>
 800562c:	4252      	negs	r2, r2
 800562e:	f043 0302 	orr.w	r3, r3, #2
 8005632:	9207      	str	r2, [sp, #28]
 8005634:	9304      	str	r3, [sp, #16]
 8005636:	f898 3000 	ldrb.w	r3, [r8]
 800563a:	2b2e      	cmp	r3, #46	; 0x2e
 800563c:	d110      	bne.n	8005660 <_vfiprintf_r+0x154>
 800563e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005642:	f108 0101 	add.w	r1, r8, #1
 8005646:	2b2a      	cmp	r3, #42	; 0x2a
 8005648:	d137      	bne.n	80056ba <_vfiprintf_r+0x1ae>
 800564a:	9b03      	ldr	r3, [sp, #12]
 800564c:	f108 0802 	add.w	r8, r8, #2
 8005650:	1d1a      	adds	r2, r3, #4
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	9203      	str	r2, [sp, #12]
 8005656:	2b00      	cmp	r3, #0
 8005658:	bfb8      	it	lt
 800565a:	f04f 33ff 	movlt.w	r3, #4294967295
 800565e:	9305      	str	r3, [sp, #20]
 8005660:	4d31      	ldr	r5, [pc, #196]	; (8005728 <_vfiprintf_r+0x21c>)
 8005662:	2203      	movs	r2, #3
 8005664:	f898 1000 	ldrb.w	r1, [r8]
 8005668:	4628      	mov	r0, r5
 800566a:	f000 fa31 	bl	8005ad0 <memchr>
 800566e:	b140      	cbz	r0, 8005682 <_vfiprintf_r+0x176>
 8005670:	2340      	movs	r3, #64	; 0x40
 8005672:	1b40      	subs	r0, r0, r5
 8005674:	fa03 f000 	lsl.w	r0, r3, r0
 8005678:	9b04      	ldr	r3, [sp, #16]
 800567a:	f108 0801 	add.w	r8, r8, #1
 800567e:	4303      	orrs	r3, r0
 8005680:	9304      	str	r3, [sp, #16]
 8005682:	f898 1000 	ldrb.w	r1, [r8]
 8005686:	2206      	movs	r2, #6
 8005688:	4828      	ldr	r0, [pc, #160]	; (800572c <_vfiprintf_r+0x220>)
 800568a:	f108 0701 	add.w	r7, r8, #1
 800568e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005692:	f000 fa1d 	bl	8005ad0 <memchr>
 8005696:	2800      	cmp	r0, #0
 8005698:	d034      	beq.n	8005704 <_vfiprintf_r+0x1f8>
 800569a:	4b25      	ldr	r3, [pc, #148]	; (8005730 <_vfiprintf_r+0x224>)
 800569c:	bb03      	cbnz	r3, 80056e0 <_vfiprintf_r+0x1d4>
 800569e:	9b03      	ldr	r3, [sp, #12]
 80056a0:	3307      	adds	r3, #7
 80056a2:	f023 0307 	bic.w	r3, r3, #7
 80056a6:	3308      	adds	r3, #8
 80056a8:	9303      	str	r3, [sp, #12]
 80056aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ac:	444b      	add	r3, r9
 80056ae:	9309      	str	r3, [sp, #36]	; 0x24
 80056b0:	e74c      	b.n	800554c <_vfiprintf_r+0x40>
 80056b2:	fb00 3202 	mla	r2, r0, r2, r3
 80056b6:	2101      	movs	r1, #1
 80056b8:	e786      	b.n	80055c8 <_vfiprintf_r+0xbc>
 80056ba:	2300      	movs	r3, #0
 80056bc:	250a      	movs	r5, #10
 80056be:	4618      	mov	r0, r3
 80056c0:	9305      	str	r3, [sp, #20]
 80056c2:	4688      	mov	r8, r1
 80056c4:	f898 2000 	ldrb.w	r2, [r8]
 80056c8:	3101      	adds	r1, #1
 80056ca:	3a30      	subs	r2, #48	; 0x30
 80056cc:	2a09      	cmp	r2, #9
 80056ce:	d903      	bls.n	80056d8 <_vfiprintf_r+0x1cc>
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d0c5      	beq.n	8005660 <_vfiprintf_r+0x154>
 80056d4:	9005      	str	r0, [sp, #20]
 80056d6:	e7c3      	b.n	8005660 <_vfiprintf_r+0x154>
 80056d8:	fb05 2000 	mla	r0, r5, r0, r2
 80056dc:	2301      	movs	r3, #1
 80056de:	e7f0      	b.n	80056c2 <_vfiprintf_r+0x1b6>
 80056e0:	ab03      	add	r3, sp, #12
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	4622      	mov	r2, r4
 80056e6:	4b13      	ldr	r3, [pc, #76]	; (8005734 <_vfiprintf_r+0x228>)
 80056e8:	a904      	add	r1, sp, #16
 80056ea:	4630      	mov	r0, r6
 80056ec:	f3af 8000 	nop.w
 80056f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80056f4:	4681      	mov	r9, r0
 80056f6:	d1d8      	bne.n	80056aa <_vfiprintf_r+0x19e>
 80056f8:	89a3      	ldrh	r3, [r4, #12]
 80056fa:	065b      	lsls	r3, r3, #25
 80056fc:	f53f af7d 	bmi.w	80055fa <_vfiprintf_r+0xee>
 8005700:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005702:	e77c      	b.n	80055fe <_vfiprintf_r+0xf2>
 8005704:	ab03      	add	r3, sp, #12
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	4622      	mov	r2, r4
 800570a:	4b0a      	ldr	r3, [pc, #40]	; (8005734 <_vfiprintf_r+0x228>)
 800570c:	a904      	add	r1, sp, #16
 800570e:	4630      	mov	r0, r6
 8005710:	f000 f88a 	bl	8005828 <_printf_i>
 8005714:	e7ec      	b.n	80056f0 <_vfiprintf_r+0x1e4>
 8005716:	bf00      	nop
 8005718:	08005bf8 	.word	0x08005bf8
 800571c:	08005c38 	.word	0x08005c38
 8005720:	08005c18 	.word	0x08005c18
 8005724:	08005bd8 	.word	0x08005bd8
 8005728:	08005c3e 	.word	0x08005c3e
 800572c:	08005c42 	.word	0x08005c42
 8005730:	00000000 	.word	0x00000000
 8005734:	080054e9 	.word	0x080054e9

08005738 <_printf_common>:
 8005738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800573c:	4691      	mov	r9, r2
 800573e:	461f      	mov	r7, r3
 8005740:	688a      	ldr	r2, [r1, #8]
 8005742:	690b      	ldr	r3, [r1, #16]
 8005744:	4606      	mov	r6, r0
 8005746:	4293      	cmp	r3, r2
 8005748:	bfb8      	it	lt
 800574a:	4613      	movlt	r3, r2
 800574c:	f8c9 3000 	str.w	r3, [r9]
 8005750:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005754:	460c      	mov	r4, r1
 8005756:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800575a:	b112      	cbz	r2, 8005762 <_printf_common+0x2a>
 800575c:	3301      	adds	r3, #1
 800575e:	f8c9 3000 	str.w	r3, [r9]
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	0699      	lsls	r1, r3, #26
 8005766:	bf42      	ittt	mi
 8005768:	f8d9 3000 	ldrmi.w	r3, [r9]
 800576c:	3302      	addmi	r3, #2
 800576e:	f8c9 3000 	strmi.w	r3, [r9]
 8005772:	6825      	ldr	r5, [r4, #0]
 8005774:	f015 0506 	ands.w	r5, r5, #6
 8005778:	d107      	bne.n	800578a <_printf_common+0x52>
 800577a:	f104 0a19 	add.w	sl, r4, #25
 800577e:	68e3      	ldr	r3, [r4, #12]
 8005780:	f8d9 2000 	ldr.w	r2, [r9]
 8005784:	1a9b      	subs	r3, r3, r2
 8005786:	429d      	cmp	r5, r3
 8005788:	db2a      	blt.n	80057e0 <_printf_common+0xa8>
 800578a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800578e:	6822      	ldr	r2, [r4, #0]
 8005790:	3300      	adds	r3, #0
 8005792:	bf18      	it	ne
 8005794:	2301      	movne	r3, #1
 8005796:	0692      	lsls	r2, r2, #26
 8005798:	d42f      	bmi.n	80057fa <_printf_common+0xc2>
 800579a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800579e:	4639      	mov	r1, r7
 80057a0:	4630      	mov	r0, r6
 80057a2:	47c0      	blx	r8
 80057a4:	3001      	adds	r0, #1
 80057a6:	d022      	beq.n	80057ee <_printf_common+0xb6>
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	68e5      	ldr	r5, [r4, #12]
 80057ac:	f003 0306 	and.w	r3, r3, #6
 80057b0:	2b04      	cmp	r3, #4
 80057b2:	bf18      	it	ne
 80057b4:	2500      	movne	r5, #0
 80057b6:	f8d9 2000 	ldr.w	r2, [r9]
 80057ba:	f04f 0900 	mov.w	r9, #0
 80057be:	bf08      	it	eq
 80057c0:	1aad      	subeq	r5, r5, r2
 80057c2:	68a3      	ldr	r3, [r4, #8]
 80057c4:	6922      	ldr	r2, [r4, #16]
 80057c6:	bf08      	it	eq
 80057c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057cc:	4293      	cmp	r3, r2
 80057ce:	bfc4      	itt	gt
 80057d0:	1a9b      	subgt	r3, r3, r2
 80057d2:	18ed      	addgt	r5, r5, r3
 80057d4:	341a      	adds	r4, #26
 80057d6:	454d      	cmp	r5, r9
 80057d8:	d11b      	bne.n	8005812 <_printf_common+0xda>
 80057da:	2000      	movs	r0, #0
 80057dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e0:	2301      	movs	r3, #1
 80057e2:	4652      	mov	r2, sl
 80057e4:	4639      	mov	r1, r7
 80057e6:	4630      	mov	r0, r6
 80057e8:	47c0      	blx	r8
 80057ea:	3001      	adds	r0, #1
 80057ec:	d103      	bne.n	80057f6 <_printf_common+0xbe>
 80057ee:	f04f 30ff 	mov.w	r0, #4294967295
 80057f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f6:	3501      	adds	r5, #1
 80057f8:	e7c1      	b.n	800577e <_printf_common+0x46>
 80057fa:	2030      	movs	r0, #48	; 0x30
 80057fc:	18e1      	adds	r1, r4, r3
 80057fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005802:	1c5a      	adds	r2, r3, #1
 8005804:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005808:	4422      	add	r2, r4
 800580a:	3302      	adds	r3, #2
 800580c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005810:	e7c3      	b.n	800579a <_printf_common+0x62>
 8005812:	2301      	movs	r3, #1
 8005814:	4622      	mov	r2, r4
 8005816:	4639      	mov	r1, r7
 8005818:	4630      	mov	r0, r6
 800581a:	47c0      	blx	r8
 800581c:	3001      	adds	r0, #1
 800581e:	d0e6      	beq.n	80057ee <_printf_common+0xb6>
 8005820:	f109 0901 	add.w	r9, r9, #1
 8005824:	e7d7      	b.n	80057d6 <_printf_common+0x9e>
	...

08005828 <_printf_i>:
 8005828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800582c:	4617      	mov	r7, r2
 800582e:	7e0a      	ldrb	r2, [r1, #24]
 8005830:	b085      	sub	sp, #20
 8005832:	2a6e      	cmp	r2, #110	; 0x6e
 8005834:	4698      	mov	r8, r3
 8005836:	4606      	mov	r6, r0
 8005838:	460c      	mov	r4, r1
 800583a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800583c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005840:	f000 80bc 	beq.w	80059bc <_printf_i+0x194>
 8005844:	d81a      	bhi.n	800587c <_printf_i+0x54>
 8005846:	2a63      	cmp	r2, #99	; 0x63
 8005848:	d02e      	beq.n	80058a8 <_printf_i+0x80>
 800584a:	d80a      	bhi.n	8005862 <_printf_i+0x3a>
 800584c:	2a00      	cmp	r2, #0
 800584e:	f000 80c8 	beq.w	80059e2 <_printf_i+0x1ba>
 8005852:	2a58      	cmp	r2, #88	; 0x58
 8005854:	f000 808a 	beq.w	800596c <_printf_i+0x144>
 8005858:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800585c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005860:	e02a      	b.n	80058b8 <_printf_i+0x90>
 8005862:	2a64      	cmp	r2, #100	; 0x64
 8005864:	d001      	beq.n	800586a <_printf_i+0x42>
 8005866:	2a69      	cmp	r2, #105	; 0x69
 8005868:	d1f6      	bne.n	8005858 <_printf_i+0x30>
 800586a:	6821      	ldr	r1, [r4, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005872:	d023      	beq.n	80058bc <_printf_i+0x94>
 8005874:	1d11      	adds	r1, r2, #4
 8005876:	6019      	str	r1, [r3, #0]
 8005878:	6813      	ldr	r3, [r2, #0]
 800587a:	e027      	b.n	80058cc <_printf_i+0xa4>
 800587c:	2a73      	cmp	r2, #115	; 0x73
 800587e:	f000 80b4 	beq.w	80059ea <_printf_i+0x1c2>
 8005882:	d808      	bhi.n	8005896 <_printf_i+0x6e>
 8005884:	2a6f      	cmp	r2, #111	; 0x6f
 8005886:	d02a      	beq.n	80058de <_printf_i+0xb6>
 8005888:	2a70      	cmp	r2, #112	; 0x70
 800588a:	d1e5      	bne.n	8005858 <_printf_i+0x30>
 800588c:	680a      	ldr	r2, [r1, #0]
 800588e:	f042 0220 	orr.w	r2, r2, #32
 8005892:	600a      	str	r2, [r1, #0]
 8005894:	e003      	b.n	800589e <_printf_i+0x76>
 8005896:	2a75      	cmp	r2, #117	; 0x75
 8005898:	d021      	beq.n	80058de <_printf_i+0xb6>
 800589a:	2a78      	cmp	r2, #120	; 0x78
 800589c:	d1dc      	bne.n	8005858 <_printf_i+0x30>
 800589e:	2278      	movs	r2, #120	; 0x78
 80058a0:	496f      	ldr	r1, [pc, #444]	; (8005a60 <_printf_i+0x238>)
 80058a2:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80058a6:	e064      	b.n	8005972 <_printf_i+0x14a>
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80058ae:	1d11      	adds	r1, r2, #4
 80058b0:	6019      	str	r1, [r3, #0]
 80058b2:	6813      	ldr	r3, [r2, #0]
 80058b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058b8:	2301      	movs	r3, #1
 80058ba:	e0a3      	b.n	8005a04 <_printf_i+0x1dc>
 80058bc:	f011 0f40 	tst.w	r1, #64	; 0x40
 80058c0:	f102 0104 	add.w	r1, r2, #4
 80058c4:	6019      	str	r1, [r3, #0]
 80058c6:	d0d7      	beq.n	8005878 <_printf_i+0x50>
 80058c8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	da03      	bge.n	80058d8 <_printf_i+0xb0>
 80058d0:	222d      	movs	r2, #45	; 0x2d
 80058d2:	425b      	negs	r3, r3
 80058d4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80058d8:	4962      	ldr	r1, [pc, #392]	; (8005a64 <_printf_i+0x23c>)
 80058da:	220a      	movs	r2, #10
 80058dc:	e017      	b.n	800590e <_printf_i+0xe6>
 80058de:	6820      	ldr	r0, [r4, #0]
 80058e0:	6819      	ldr	r1, [r3, #0]
 80058e2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80058e6:	d003      	beq.n	80058f0 <_printf_i+0xc8>
 80058e8:	1d08      	adds	r0, r1, #4
 80058ea:	6018      	str	r0, [r3, #0]
 80058ec:	680b      	ldr	r3, [r1, #0]
 80058ee:	e006      	b.n	80058fe <_printf_i+0xd6>
 80058f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058f4:	f101 0004 	add.w	r0, r1, #4
 80058f8:	6018      	str	r0, [r3, #0]
 80058fa:	d0f7      	beq.n	80058ec <_printf_i+0xc4>
 80058fc:	880b      	ldrh	r3, [r1, #0]
 80058fe:	2a6f      	cmp	r2, #111	; 0x6f
 8005900:	bf14      	ite	ne
 8005902:	220a      	movne	r2, #10
 8005904:	2208      	moveq	r2, #8
 8005906:	4957      	ldr	r1, [pc, #348]	; (8005a64 <_printf_i+0x23c>)
 8005908:	2000      	movs	r0, #0
 800590a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800590e:	6865      	ldr	r5, [r4, #4]
 8005910:	2d00      	cmp	r5, #0
 8005912:	60a5      	str	r5, [r4, #8]
 8005914:	f2c0 809c 	blt.w	8005a50 <_printf_i+0x228>
 8005918:	6820      	ldr	r0, [r4, #0]
 800591a:	f020 0004 	bic.w	r0, r0, #4
 800591e:	6020      	str	r0, [r4, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d13f      	bne.n	80059a4 <_printf_i+0x17c>
 8005924:	2d00      	cmp	r5, #0
 8005926:	f040 8095 	bne.w	8005a54 <_printf_i+0x22c>
 800592a:	4675      	mov	r5, lr
 800592c:	2a08      	cmp	r2, #8
 800592e:	d10b      	bne.n	8005948 <_printf_i+0x120>
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	07da      	lsls	r2, r3, #31
 8005934:	d508      	bpl.n	8005948 <_printf_i+0x120>
 8005936:	6923      	ldr	r3, [r4, #16]
 8005938:	6862      	ldr	r2, [r4, #4]
 800593a:	429a      	cmp	r2, r3
 800593c:	bfde      	ittt	le
 800593e:	2330      	movle	r3, #48	; 0x30
 8005940:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005944:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005948:	ebae 0305 	sub.w	r3, lr, r5
 800594c:	6123      	str	r3, [r4, #16]
 800594e:	f8cd 8000 	str.w	r8, [sp]
 8005952:	463b      	mov	r3, r7
 8005954:	aa03      	add	r2, sp, #12
 8005956:	4621      	mov	r1, r4
 8005958:	4630      	mov	r0, r6
 800595a:	f7ff feed 	bl	8005738 <_printf_common>
 800595e:	3001      	adds	r0, #1
 8005960:	d155      	bne.n	8005a0e <_printf_i+0x1e6>
 8005962:	f04f 30ff 	mov.w	r0, #4294967295
 8005966:	b005      	add	sp, #20
 8005968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800596c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005970:	493c      	ldr	r1, [pc, #240]	; (8005a64 <_printf_i+0x23c>)
 8005972:	6822      	ldr	r2, [r4, #0]
 8005974:	6818      	ldr	r0, [r3, #0]
 8005976:	f012 0f80 	tst.w	r2, #128	; 0x80
 800597a:	f100 0504 	add.w	r5, r0, #4
 800597e:	601d      	str	r5, [r3, #0]
 8005980:	d001      	beq.n	8005986 <_printf_i+0x15e>
 8005982:	6803      	ldr	r3, [r0, #0]
 8005984:	e002      	b.n	800598c <_printf_i+0x164>
 8005986:	0655      	lsls	r5, r2, #25
 8005988:	d5fb      	bpl.n	8005982 <_printf_i+0x15a>
 800598a:	8803      	ldrh	r3, [r0, #0]
 800598c:	07d0      	lsls	r0, r2, #31
 800598e:	bf44      	itt	mi
 8005990:	f042 0220 	orrmi.w	r2, r2, #32
 8005994:	6022      	strmi	r2, [r4, #0]
 8005996:	b91b      	cbnz	r3, 80059a0 <_printf_i+0x178>
 8005998:	6822      	ldr	r2, [r4, #0]
 800599a:	f022 0220 	bic.w	r2, r2, #32
 800599e:	6022      	str	r2, [r4, #0]
 80059a0:	2210      	movs	r2, #16
 80059a2:	e7b1      	b.n	8005908 <_printf_i+0xe0>
 80059a4:	4675      	mov	r5, lr
 80059a6:	fbb3 f0f2 	udiv	r0, r3, r2
 80059aa:	fb02 3310 	mls	r3, r2, r0, r3
 80059ae:	5ccb      	ldrb	r3, [r1, r3]
 80059b0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80059b4:	4603      	mov	r3, r0
 80059b6:	2800      	cmp	r0, #0
 80059b8:	d1f5      	bne.n	80059a6 <_printf_i+0x17e>
 80059ba:	e7b7      	b.n	800592c <_printf_i+0x104>
 80059bc:	6808      	ldr	r0, [r1, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	f010 0f80 	tst.w	r0, #128	; 0x80
 80059c4:	6949      	ldr	r1, [r1, #20]
 80059c6:	d004      	beq.n	80059d2 <_printf_i+0x1aa>
 80059c8:	1d10      	adds	r0, r2, #4
 80059ca:	6018      	str	r0, [r3, #0]
 80059cc:	6813      	ldr	r3, [r2, #0]
 80059ce:	6019      	str	r1, [r3, #0]
 80059d0:	e007      	b.n	80059e2 <_printf_i+0x1ba>
 80059d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059d6:	f102 0004 	add.w	r0, r2, #4
 80059da:	6018      	str	r0, [r3, #0]
 80059dc:	6813      	ldr	r3, [r2, #0]
 80059de:	d0f6      	beq.n	80059ce <_printf_i+0x1a6>
 80059e0:	8019      	strh	r1, [r3, #0]
 80059e2:	2300      	movs	r3, #0
 80059e4:	4675      	mov	r5, lr
 80059e6:	6123      	str	r3, [r4, #16]
 80059e8:	e7b1      	b.n	800594e <_printf_i+0x126>
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	1d11      	adds	r1, r2, #4
 80059ee:	6019      	str	r1, [r3, #0]
 80059f0:	6815      	ldr	r5, [r2, #0]
 80059f2:	2100      	movs	r1, #0
 80059f4:	6862      	ldr	r2, [r4, #4]
 80059f6:	4628      	mov	r0, r5
 80059f8:	f000 f86a 	bl	8005ad0 <memchr>
 80059fc:	b108      	cbz	r0, 8005a02 <_printf_i+0x1da>
 80059fe:	1b40      	subs	r0, r0, r5
 8005a00:	6060      	str	r0, [r4, #4]
 8005a02:	6863      	ldr	r3, [r4, #4]
 8005a04:	6123      	str	r3, [r4, #16]
 8005a06:	2300      	movs	r3, #0
 8005a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a0c:	e79f      	b.n	800594e <_printf_i+0x126>
 8005a0e:	6923      	ldr	r3, [r4, #16]
 8005a10:	462a      	mov	r2, r5
 8005a12:	4639      	mov	r1, r7
 8005a14:	4630      	mov	r0, r6
 8005a16:	47c0      	blx	r8
 8005a18:	3001      	adds	r0, #1
 8005a1a:	d0a2      	beq.n	8005962 <_printf_i+0x13a>
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	079b      	lsls	r3, r3, #30
 8005a20:	d507      	bpl.n	8005a32 <_printf_i+0x20a>
 8005a22:	2500      	movs	r5, #0
 8005a24:	f104 0919 	add.w	r9, r4, #25
 8005a28:	68e3      	ldr	r3, [r4, #12]
 8005a2a:	9a03      	ldr	r2, [sp, #12]
 8005a2c:	1a9b      	subs	r3, r3, r2
 8005a2e:	429d      	cmp	r5, r3
 8005a30:	db05      	blt.n	8005a3e <_printf_i+0x216>
 8005a32:	68e0      	ldr	r0, [r4, #12]
 8005a34:	9b03      	ldr	r3, [sp, #12]
 8005a36:	4298      	cmp	r0, r3
 8005a38:	bfb8      	it	lt
 8005a3a:	4618      	movlt	r0, r3
 8005a3c:	e793      	b.n	8005966 <_printf_i+0x13e>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	464a      	mov	r2, r9
 8005a42:	4639      	mov	r1, r7
 8005a44:	4630      	mov	r0, r6
 8005a46:	47c0      	blx	r8
 8005a48:	3001      	adds	r0, #1
 8005a4a:	d08a      	beq.n	8005962 <_printf_i+0x13a>
 8005a4c:	3501      	adds	r5, #1
 8005a4e:	e7eb      	b.n	8005a28 <_printf_i+0x200>
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1a7      	bne.n	80059a4 <_printf_i+0x17c>
 8005a54:	780b      	ldrb	r3, [r1, #0]
 8005a56:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a5e:	e765      	b.n	800592c <_printf_i+0x104>
 8005a60:	08005c5a 	.word	0x08005c5a
 8005a64:	08005c49 	.word	0x08005c49

08005a68 <_read_r>:
 8005a68:	b538      	push	{r3, r4, r5, lr}
 8005a6a:	4605      	mov	r5, r0
 8005a6c:	4608      	mov	r0, r1
 8005a6e:	4611      	mov	r1, r2
 8005a70:	2200      	movs	r2, #0
 8005a72:	4c05      	ldr	r4, [pc, #20]	; (8005a88 <_read_r+0x20>)
 8005a74:	6022      	str	r2, [r4, #0]
 8005a76:	461a      	mov	r2, r3
 8005a78:	f7fe fe5a 	bl	8004730 <_read>
 8005a7c:	1c43      	adds	r3, r0, #1
 8005a7e:	d102      	bne.n	8005a86 <_read_r+0x1e>
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	b103      	cbz	r3, 8005a86 <_read_r+0x1e>
 8005a84:	602b      	str	r3, [r5, #0]
 8005a86:	bd38      	pop	{r3, r4, r5, pc}
 8005a88:	20001208 	.word	0x20001208

08005a8c <_fstat_r>:
 8005a8c:	b538      	push	{r3, r4, r5, lr}
 8005a8e:	2300      	movs	r3, #0
 8005a90:	4c06      	ldr	r4, [pc, #24]	; (8005aac <_fstat_r+0x20>)
 8005a92:	4605      	mov	r5, r0
 8005a94:	4608      	mov	r0, r1
 8005a96:	4611      	mov	r1, r2
 8005a98:	6023      	str	r3, [r4, #0]
 8005a9a:	f7fe fe9e 	bl	80047da <_fstat>
 8005a9e:	1c43      	adds	r3, r0, #1
 8005aa0:	d102      	bne.n	8005aa8 <_fstat_r+0x1c>
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	b103      	cbz	r3, 8005aa8 <_fstat_r+0x1c>
 8005aa6:	602b      	str	r3, [r5, #0]
 8005aa8:	bd38      	pop	{r3, r4, r5, pc}
 8005aaa:	bf00      	nop
 8005aac:	20001208 	.word	0x20001208

08005ab0 <_isatty_r>:
 8005ab0:	b538      	push	{r3, r4, r5, lr}
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	4c05      	ldr	r4, [pc, #20]	; (8005acc <_isatty_r+0x1c>)
 8005ab6:	4605      	mov	r5, r0
 8005ab8:	4608      	mov	r0, r1
 8005aba:	6023      	str	r3, [r4, #0]
 8005abc:	f7fe fe9c 	bl	80047f8 <_isatty>
 8005ac0:	1c43      	adds	r3, r0, #1
 8005ac2:	d102      	bne.n	8005aca <_isatty_r+0x1a>
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	b103      	cbz	r3, 8005aca <_isatty_r+0x1a>
 8005ac8:	602b      	str	r3, [r5, #0]
 8005aca:	bd38      	pop	{r3, r4, r5, pc}
 8005acc:	20001208 	.word	0x20001208

08005ad0 <memchr>:
 8005ad0:	b510      	push	{r4, lr}
 8005ad2:	b2c9      	uxtb	r1, r1
 8005ad4:	4402      	add	r2, r0
 8005ad6:	4290      	cmp	r0, r2
 8005ad8:	4603      	mov	r3, r0
 8005ada:	d101      	bne.n	8005ae0 <memchr+0x10>
 8005adc:	2000      	movs	r0, #0
 8005ade:	bd10      	pop	{r4, pc}
 8005ae0:	781c      	ldrb	r4, [r3, #0]
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	428c      	cmp	r4, r1
 8005ae6:	d1f6      	bne.n	8005ad6 <memchr+0x6>
 8005ae8:	4618      	mov	r0, r3
 8005aea:	bd10      	pop	{r4, pc}

08005aec <_init>:
 8005aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aee:	bf00      	nop
 8005af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005af2:	bc08      	pop	{r3}
 8005af4:	469e      	mov	lr, r3
 8005af6:	4770      	bx	lr

08005af8 <_fini>:
 8005af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afa:	bf00      	nop
 8005afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005afe:	bc08      	pop	{r3}
 8005b00:	469e      	mov	lr, r3
 8005b02:	4770      	bx	lr
