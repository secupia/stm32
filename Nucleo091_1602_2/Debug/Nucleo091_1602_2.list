
Nucleo091_1602_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021e0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800229c  0800229c  0001229c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800233c  0800233c  0001233c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002340  08002340  00012340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000088  20000000  08002344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000fc  20000088  080023cc  00020088  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000184  080023cc  00020184  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  9 .debug_info   00009a2c  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001df5  00000000  00000000  00029adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003a99  00000000  00000000  0002b8d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000790  00000000  00000000  0002f370  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000918  00000000  00000000  0002fb00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000040e3  00000000  00000000  00030418  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002ab7  00000000  00000000  000344fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00036fb2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001760  00000000  00000000  00037030  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000088 	.word	0x20000088
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002284 	.word	0x08002284

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000008c 	.word	0x2000008c
 8000100:	08002284 	.word	0x08002284

08000104 <__gnu_thumb1_case_uqi>:
 8000104:	b402      	push	{r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0049      	lsls	r1, r1, #1
 800010c:	5c09      	ldrb	r1, [r1, r0]
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	448e      	add	lr, r1
 8000112:	bc02      	pop	{r1}
 8000114:	4770      	bx	lr
 8000116:	46c0      	nop			; (mov r8, r8)

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <micros>:
//**************************************************************************************
//**************************************************************************************
//Time

uint32_t micros(){
  return (millis()&0x3FFFFF)*1000 + (SYSTICK_LOAD-SysTick->VAL)/SYS_CLOCK;
 8000244:	21fa      	movs	r1, #250	; 0xfa
#define SYS_CLOCK       (SystemCoreClock/1000000)
#define SYSTICK_LOAD    ((SystemCoreClock/1000)-1)
extern __IO uint32_t uwTick;
static inline uint32_t millis(void)
{
  return uwTick;
 8000246:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <micros+0x3c>)
uint32_t micros(){
 8000248:	b570      	push	{r4, r5, r6, lr}
 800024a:	681c      	ldr	r4, [r3, #0]
  return (millis()&0x3FFFFF)*1000 + (SYSTICK_LOAD-SysTick->VAL)/SYS_CLOCK;
 800024c:	4b0d      	ldr	r3, [pc, #52]	; (8000284 <micros+0x40>)
 800024e:	0089      	lsls	r1, r1, #2
 8000250:	681e      	ldr	r6, [r3, #0]
 8000252:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <micros+0x44>)
 8000254:	0030      	movs	r0, r6
 8000256:	689d      	ldr	r5, [r3, #8]
 8000258:	f7ff ff68 	bl	800012c <__udivsi3>
 800025c:	490b      	ldr	r1, [pc, #44]	; (800028c <micros+0x48>)
 800025e:	1b45      	subs	r5, r0, r5
 8000260:	0030      	movs	r0, r6
 8000262:	f7ff ff63 	bl	800012c <__udivsi3>
 8000266:	3d01      	subs	r5, #1
 8000268:	0001      	movs	r1, r0
 800026a:	0028      	movs	r0, r5
 800026c:	f7ff ff5e 	bl	800012c <__udivsi3>
 8000270:	23fa      	movs	r3, #250	; 0xfa
 8000272:	02a4      	lsls	r4, r4, #10
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	0aa4      	lsrs	r4, r4, #10
 8000278:	435c      	muls	r4, r3
 800027a:	1900      	adds	r0, r0, r4
}
 800027c:	bd70      	pop	{r4, r5, r6, pc}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	200000bc 	.word	0x200000bc
 8000284:	20000020 	.word	0x20000020
 8000288:	e000e010 	.word	0xe000e010
 800028c:	000f4240 	.word	0x000f4240

08000290 <delay_us>:

void delay_us(uint32_t us){
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	0004      	movs	r4, r0
  uint32_t temp = micros();
 8000294:	f7ff ffd6 	bl	8000244 <micros>
  uint32_t comp = temp + us;
  uint8_t  flag = 0;
 8000298:	2600      	movs	r6, #0
 800029a:	2501      	movs	r5, #1
  uint32_t comp = temp + us;
 800029c:	1904      	adds	r4, r0, r4
  while(comp > temp){
 800029e:	42a0      	cmp	r0, r4
 80002a0:	d300      	bcc.n	80002a4 <delay_us+0x14>
    }
    else  {
      temp = micros();
    }
  }
}
 80002a2:	bd70      	pop	{r4, r5, r6, pc}
 80002a4:	4b07      	ldr	r3, [pc, #28]	; (80002c4 <delay_us+0x34>)
 80002a6:	681b      	ldr	r3, [r3, #0]
    if(((mil&0x3FFFFF)==0)&&(flag==0)){
 80002a8:	029b      	lsls	r3, r3, #10
 80002aa:	d001      	beq.n	80002b0 <delay_us+0x20>
    if(flag) {
 80002ac:	2e00      	cmp	r6, #0
 80002ae:	d006      	beq.n	80002be <delay_us+0x2e>
      temp = micros() + 0x400000UL * 1000;
 80002b0:	f7ff ffc8 	bl	8000244 <micros>
 80002b4:	23fa      	movs	r3, #250	; 0xfa
 80002b6:	061b      	lsls	r3, r3, #24
 80002b8:	18c0      	adds	r0, r0, r3
 80002ba:	002e      	movs	r6, r5
 80002bc:	e7ef      	b.n	800029e <delay_us+0xe>
      temp = micros();
 80002be:	f7ff ffc1 	bl	8000244 <micros>
 80002c2:	e7ec      	b.n	800029e <delay_us+0xe>
 80002c4:	200000bc 	.word	0x200000bc

080002c8 <write4bits>:
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
  delay_us(100);          // commands need > 37us to settle
}

#ifdef _LCD_4BITMODE_
void write4bits(uint8_t value) {
 80002c8:	b570      	push	{r4, r5, r6, lr}
 80002ca:	0006      	movs	r6, r0
 80002cc:	2400      	movs	r4, #0
  for (uint8_t i = 0; i < 4; i++) {
    HAL_GPIO_WritePin(hlcd.data_ports[i], hlcd.data_pins[i],  (value >> i) & 0x01 );
 80002ce:	2501      	movs	r5, #1
 80002d0:	0032      	movs	r2, r6
 80002d2:	4122      	asrs	r2, r4
 80002d4:	4b12      	ldr	r3, [pc, #72]	; (8000320 <write4bits+0x58>)
 80002d6:	0061      	lsls	r1, r4, #1
 80002d8:	6858      	ldr	r0, [r3, #4]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	5a09      	ldrh	r1, [r1, r0]
 80002de:	00a0      	lsls	r0, r4, #2
 80002e0:	402a      	ands	r2, r5
 80002e2:	58c0      	ldr	r0, [r0, r3]
 80002e4:	3401      	adds	r4, #1
 80002e6:	f000 fb4f 	bl	8000988 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 4; i++) {
 80002ea:	2c04      	cmp	r4, #4
 80002ec:	d1f0      	bne.n	80002d0 <write4bits+0x8>
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 80002ee:	2200      	movs	r2, #0
 80002f0:	2180      	movs	r1, #128	; 0x80
 80002f2:	480c      	ldr	r0, [pc, #48]	; (8000324 <write4bits+0x5c>)
 80002f4:	f000 fb48 	bl	8000988 <HAL_GPIO_WritePin>
  delay_us(1);              //
 80002f8:	2001      	movs	r0, #1
 80002fa:	f7ff ffc9 	bl	8000290 <delay_us>
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	2180      	movs	r1, #128	; 0x80
 8000302:	4808      	ldr	r0, [pc, #32]	; (8000324 <write4bits+0x5c>)
 8000304:	f000 fb40 	bl	8000988 <HAL_GPIO_WritePin>
  delay_us(1);   			   // enable pulse must be >450ns
 8000308:	2001      	movs	r0, #1
 800030a:	f7ff ffc1 	bl	8000290 <delay_us>
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 800030e:	2200      	movs	r2, #0
 8000310:	2180      	movs	r1, #128	; 0x80
 8000312:	4804      	ldr	r0, [pc, #16]	; (8000324 <write4bits+0x5c>)
 8000314:	f000 fb38 	bl	8000988 <HAL_GPIO_WritePin>
  delay_us(100);          // commands need > 37us to settle
 8000318:	2064      	movs	r0, #100	; 0x64
 800031a:	f7ff ffb9 	bl	8000290 <delay_us>
  }

  pulseEnable();
}
 800031e:	bd70      	pop	{r4, r5, r6, pc}
 8000320:	200000b0 	.word	0x200000b0
 8000324:	48000800 	.word	0x48000800

08000328 <send>:
void send(uint8_t value, GPIO_PinState mode) {
 8000328:	b510      	push	{r4, lr}
 800032a:	000a      	movs	r2, r1
 800032c:	0004      	movs	r4, r0
  HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, mode);   // digitalWrite(_rs_pin, mode);
 800032e:	2180      	movs	r1, #128	; 0x80
 8000330:	2090      	movs	r0, #144	; 0x90
 8000332:	0089      	lsls	r1, r1, #2
 8000334:	05c0      	lsls	r0, r0, #23
 8000336:	f000 fb27 	bl	8000988 <HAL_GPIO_WritePin>
    write4bits(value>>4);
 800033a:	0920      	lsrs	r0, r4, #4
 800033c:	f7ff ffc4 	bl	80002c8 <write4bits>
    write4bits(value);
 8000340:	0020      	movs	r0, r4
 8000342:	f7ff ffc1 	bl	80002c8 <write4bits>
}
 8000346:	bd10      	pop	{r4, pc}

08000348 <command>:
void command(uint8_t value) {
 8000348:	b510      	push	{r4, lr}
  send(value, GPIO_PIN_RESET);
 800034a:	2100      	movs	r1, #0
 800034c:	f7ff ffec 	bl	8000328 <send>
}
 8000350:	bd10      	pop	{r4, pc}
	...

08000354 <lcd_setCursor>:
{
 8000354:	b507      	push	{r0, r1, r2, lr}
  uint8_t row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000356:	2200      	movs	r2, #0
 8000358:	ab01      	add	r3, sp, #4
 800035a:	701a      	strb	r2, [r3, #0]
 800035c:	3240      	adds	r2, #64	; 0x40
 800035e:	705a      	strb	r2, [r3, #1]
 8000360:	3a2c      	subs	r2, #44	; 0x2c
 8000362:	709a      	strb	r2, [r3, #2]
 8000364:	3240      	adds	r2, #64	; 0x40
 8000366:	70da      	strb	r2, [r3, #3]
  if ( row > hlcd.numlines ) {
 8000368:	4a07      	ldr	r2, [pc, #28]	; (8000388 <lcd_setCursor+0x34>)
 800036a:	7ad2      	ldrb	r2, [r2, #11]
 800036c:	428a      	cmp	r2, r1
 800036e:	d201      	bcs.n	8000374 <lcd_setCursor+0x20>
    row = hlcd.numlines-1;    // we count rows starting w/0
 8000370:	3a01      	subs	r2, #1
 8000372:	b2d1      	uxtb	r1, r2
  command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000374:	5c5b      	ldrb	r3, [r3, r1]
 8000376:	18c3      	adds	r3, r0, r3
 8000378:	2080      	movs	r0, #128	; 0x80
 800037a:	4240      	negs	r0, r0
 800037c:	4318      	orrs	r0, r3
 800037e:	b2c0      	uxtb	r0, r0
 8000380:	f7ff ffe2 	bl	8000348 <command>
}
 8000384:	bd07      	pop	{r0, r1, r2, pc}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	200000b0 	.word	0x200000b0

0800038c <lcd_display>:
  hlcd.displaycontrol |= LCD_DISPLAYON;
 800038c:	2304      	movs	r3, #4
  command(LCD_DISPLAYCONTROL | hlcd.displaycontrol);
 800038e:	200c      	movs	r0, #12
void lcd_display() {
 8000390:	b510      	push	{r4, lr}
  hlcd.displaycontrol |= LCD_DISPLAYON;
 8000392:	4904      	ldr	r1, [pc, #16]	; (80003a4 <lcd_display+0x18>)
 8000394:	7a4a      	ldrb	r2, [r1, #9]
 8000396:	4313      	orrs	r3, r2
  command(LCD_DISPLAYCONTROL | hlcd.displaycontrol);
 8000398:	4310      	orrs	r0, r2
  hlcd.displaycontrol |= LCD_DISPLAYON;
 800039a:	724b      	strb	r3, [r1, #9]
  command(LCD_DISPLAYCONTROL | hlcd.displaycontrol);
 800039c:	f7ff ffd4 	bl	8000348 <command>
}
 80003a0:	bd10      	pop	{r4, pc}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	200000b0 	.word	0x200000b0

080003a8 <lcd_Init>:
void lcd_Init(uint8_t cols, uint8_t lines) {
 80003a8:	b510      	push	{r4, lr}
  hlcd.data_ports = data_ports;  // LCD Data Ports , hlcd.data_ports
 80003aa:	4b25      	ldr	r3, [pc, #148]	; (8000440 <lcd_Init+0x98>)
 80003ac:	4c25      	ldr	r4, [pc, #148]	; (8000444 <lcd_Init+0x9c>)
 80003ae:	6023      	str	r3, [r4, #0]
  hlcd.data_pins = data_pins;    // LCD Data Pins , hlcd.data_pins
 80003b0:	4b25      	ldr	r3, [pc, #148]	; (8000448 <lcd_Init+0xa0>)
 80003b2:	6063      	str	r3, [r4, #4]
    hlcd.displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80003b4:	2300      	movs	r3, #0
if (lines > 1) {
 80003b6:	2901      	cmp	r1, #1
 80003b8:	d900      	bls.n	80003bc <lcd_Init+0x14>
    hlcd.displayfunction |= LCD_2LINE;
 80003ba:	2308      	movs	r3, #8
  delay_ms(50);        //delayMicroseconds(50000); 
 80003bc:	2032      	movs	r0, #50	; 0x32
    hlcd.displayfunction |= LCD_2LINE;
 80003be:	7223      	strb	r3, [r4, #8]
  hlcd.numlines = lines;
 80003c0:	72e1      	strb	r1, [r4, #11]
  delay_ms(50);        //delayMicroseconds(50000); 
 80003c2:	f000 f8a1 	bl	8000508 <HAL_Delay>
  HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);  // digitalWrite(_rs_pin, LOW);
 80003c6:	2180      	movs	r1, #128	; 0x80
 80003c8:	2090      	movs	r0, #144	; 0x90
 80003ca:	2200      	movs	r2, #0
 80003cc:	0089      	lsls	r1, r1, #2
 80003ce:	05c0      	lsls	r0, r0, #23
 80003d0:	f000 fada 	bl	8000988 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);  // digitalWrite(_enable_pin, LOW);
 80003d4:	2200      	movs	r2, #0
 80003d6:	2180      	movs	r1, #128	; 0x80
 80003d8:	481c      	ldr	r0, [pc, #112]	; (800044c <lcd_Init+0xa4>)
 80003da:	f000 fad5 	bl	8000988 <HAL_GPIO_WritePin>
    write4bits(0x03);
 80003de:	2003      	movs	r0, #3
 80003e0:	f7ff ff72 	bl	80002c8 <write4bits>
    delay_us(4500);    //delayMicroseconds(4500); // wait min 4.1ms
 80003e4:	481a      	ldr	r0, [pc, #104]	; (8000450 <lcd_Init+0xa8>)
 80003e6:	f7ff ff53 	bl	8000290 <delay_us>
    write4bits(0x03);
 80003ea:	2003      	movs	r0, #3
 80003ec:	f7ff ff6c 	bl	80002c8 <write4bits>
    delay_us(100);    //delayMicroseconds(4500); // wait min 4.1ms
 80003f0:	2064      	movs	r0, #100	; 0x64
 80003f2:	f7ff ff4d 	bl	8000290 <delay_us>
    write4bits(0x03); 
 80003f6:	2003      	movs	r0, #3
 80003f8:	f7ff ff66 	bl	80002c8 <write4bits>
    delay_us(100);    //delayMicroseconds(150);
 80003fc:	2064      	movs	r0, #100	; 0x64
 80003fe:	f7ff ff47 	bl	8000290 <delay_us>
    write4bits(0x02);
 8000402:	2002      	movs	r0, #2
 8000404:	f7ff ff60 	bl	80002c8 <write4bits>
    delay_us(100);
 8000408:	2064      	movs	r0, #100	; 0x64
 800040a:	f7ff ff41 	bl	8000290 <delay_us>
  command(LCD_FUNCTIONSET | hlcd.displayfunction);  
 800040e:	2020      	movs	r0, #32
 8000410:	7a23      	ldrb	r3, [r4, #8]
 8000412:	4318      	orrs	r0, r3
 8000414:	f7ff ff98 	bl	8000348 <command>
  hlcd.displaycontrol = LCD_DISPLAYOFF | LCD_CURSOROFF | LCD_BLINKOFF;
 8000418:	2300      	movs	r3, #0
  command(LCD_DISPLAYCONTROL | hlcd.displaycontrol);
 800041a:	2008      	movs	r0, #8
  hlcd.displaycontrol = LCD_DISPLAYOFF | LCD_CURSOROFF | LCD_BLINKOFF;
 800041c:	7263      	strb	r3, [r4, #9]
  command(LCD_DISPLAYCONTROL | hlcd.displaycontrol);
 800041e:	f7ff ff93 	bl	8000348 <command>
  command(LCD_CLEARDISPLAY);    //200426
 8000422:	2001      	movs	r0, #1
 8000424:	f7ff ff90 	bl	8000348 <command>
  delay_ms(3);
 8000428:	2003      	movs	r0, #3
 800042a:	f000 f86d 	bl	8000508 <HAL_Delay>
  hlcd.displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800042e:	2302      	movs	r3, #2
  command(LCD_ENTRYMODESET | hlcd.displaymode);
 8000430:	2006      	movs	r0, #6
  hlcd.displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000432:	72a3      	strb	r3, [r4, #10]
  command(LCD_ENTRYMODESET | hlcd.displaymode);
 8000434:	f7ff ff88 	bl	8000348 <command>
  lcd_display();
 8000438:	f7ff ffa8 	bl	800038c <lcd_display>
}
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	20000008 	.word	0x20000008
 8000444:	200000b0 	.word	0x200000b0
 8000448:	20000000 	.word	0x20000000
 800044c:	48000800 	.word	0x48000800
 8000450:	00001194 	.word	0x00001194

08000454 <lcd_string>:
void lcd_string(char * str_data) {
 8000454:	b510      	push	{r4, lr}
 8000456:	0004      	movs	r4, r0
   while(*str_data) {
 8000458:	7820      	ldrb	r0, [r4, #0]
 800045a:	2800      	cmp	r0, #0
 800045c:	d100      	bne.n	8000460 <lcd_string+0xc>
}
 800045e:	bd10      	pop	{r4, pc}
  send(value, GPIO_PIN_SET);
 8000460:	2101      	movs	r1, #1
	  write(*str_data++);
 8000462:	3401      	adds	r4, #1
  send(value, GPIO_PIN_SET);
 8000464:	f7ff ff60 	bl	8000328 <send>
 8000468:	e7f6      	b.n	8000458 <lcd_string+0x4>

0800046a <lcd_setCurStr>:
void lcd_setCurStr(uint8_t col, uint8_t row,  char * str) {
 800046a:	b510      	push	{r4, lr}
 800046c:	0014      	movs	r4, r2
	lcd_setCursor(col, row);
 800046e:	f7ff ff71 	bl	8000354 <lcd_setCursor>
	lcd_string(str);
 8000472:	0020      	movs	r0, r4
 8000474:	f7ff ffee 	bl	8000454 <lcd_string>
}
 8000478:	bd10      	pop	{r4, pc}
	...

0800047c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800047c:	b570      	push	{r4, r5, r6, lr}
 800047e:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000480:	20fa      	movs	r0, #250	; 0xfa
 8000482:	4b0d      	ldr	r3, [pc, #52]	; (80004b8 <HAL_InitTick+0x3c>)
 8000484:	0080      	lsls	r0, r0, #2
 8000486:	7819      	ldrb	r1, [r3, #0]
 8000488:	f7ff fe50 	bl	800012c <__udivsi3>
 800048c:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <HAL_InitTick+0x40>)
 800048e:	0001      	movs	r1, r0
 8000490:	6818      	ldr	r0, [r3, #0]
 8000492:	f7ff fe4b 	bl	800012c <__udivsi3>
 8000496:	f000 f9a1 	bl	80007dc <HAL_SYSTICK_Config>
 800049a:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 800049c:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800049e:	2c00      	cmp	r4, #0
 80004a0:	d109      	bne.n	80004b6 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004a2:	2d03      	cmp	r5, #3
 80004a4:	d807      	bhi.n	80004b6 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004a6:	3802      	subs	r0, #2
 80004a8:	0022      	movs	r2, r4
 80004aa:	0029      	movs	r1, r5
 80004ac:	f000 f966 	bl	800077c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004b0:	0020      	movs	r0, r4
 80004b2:	4b03      	ldr	r3, [pc, #12]	; (80004c0 <HAL_InitTick+0x44>)
 80004b4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 80004b6:	bd70      	pop	{r4, r5, r6, pc}
 80004b8:	20000018 	.word	0x20000018
 80004bc:	20000020 	.word	0x20000020
 80004c0:	2000001c 	.word	0x2000001c

080004c4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004c4:	2310      	movs	r3, #16
 80004c6:	4a06      	ldr	r2, [pc, #24]	; (80004e0 <HAL_Init+0x1c>)
{
 80004c8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004ca:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80004cc:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004ce:	430b      	orrs	r3, r1
 80004d0:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80004d2:	f7ff ffd3 	bl	800047c <HAL_InitTick>
  HAL_MspInit();
 80004d6:	f001 f9b5 	bl	8001844 <HAL_MspInit>
}
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	40022000 	.word	0x40022000

080004e4 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80004e4:	4a03      	ldr	r2, [pc, #12]	; (80004f4 <HAL_IncTick+0x10>)
 80004e6:	4b04      	ldr	r3, [pc, #16]	; (80004f8 <HAL_IncTick+0x14>)
 80004e8:	6811      	ldr	r1, [r2, #0]
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	185b      	adds	r3, r3, r1
 80004ee:	6013      	str	r3, [r2, #0]
}
 80004f0:	4770      	bx	lr
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	200000bc 	.word	0x200000bc
 80004f8:	20000018 	.word	0x20000018

080004fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80004fc:	4b01      	ldr	r3, [pc, #4]	; (8000504 <HAL_GetTick+0x8>)
 80004fe:	6818      	ldr	r0, [r3, #0]
}
 8000500:	4770      	bx	lr
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	200000bc 	.word	0x200000bc

08000508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800050c:	f7ff fff6 	bl	80004fc <HAL_GetTick>
 8000510:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000512:	1c63      	adds	r3, r4, #1
 8000514:	d002      	beq.n	800051c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000516:	4b04      	ldr	r3, [pc, #16]	; (8000528 <HAL_Delay+0x20>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800051c:	f7ff ffee 	bl	80004fc <HAL_GetTick>
 8000520:	1b40      	subs	r0, r0, r5
 8000522:	4284      	cmp	r4, r0
 8000524:	d8fa      	bhi.n	800051c <HAL_Delay+0x14>
  {
  }
}
 8000526:	bd70      	pop	{r4, r5, r6, pc}
 8000528:	20000018 	.word	0x20000018

0800052c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800052c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800052e:	0004      	movs	r4, r0
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8000530:	2001      	movs	r0, #1
  if(hadc == NULL)
 8000532:	2c00      	cmp	r4, #0
 8000534:	d073      	beq.n	800061e <HAL_ADC_Init+0xf2>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000536:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000538:	2b00      	cmp	r3, #0
 800053a:	d106      	bne.n	800054a <HAL_ADC_Init+0x1e>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800053c:	0022      	movs	r2, r4
 800053e:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8000540:	63e3      	str	r3, [r4, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000542:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8000544:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8000546:	f001 f995 	bl	8001874 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800054a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800054c:	06db      	lsls	r3, r3, #27
 800054e:	d500      	bpl.n	8000552 <HAL_ADC_Init+0x26>
 8000550:	e07a      	b.n	8000648 <HAL_ADC_Init+0x11c>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000552:	2204      	movs	r2, #4
 8000554:	6823      	ldr	r3, [r4, #0]
 8000556:	6898      	ldr	r0, [r3, #8]
 8000558:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 800055a:	d000      	beq.n	800055e <HAL_ADC_Init+0x32>
 800055c:	e074      	b.n	8000648 <HAL_ADC_Init+0x11c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800055e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000560:	4943      	ldr	r1, [pc, #268]	; (8000670 <HAL_ADC_Init+0x144>)
 8000562:	4011      	ands	r1, r2
 8000564:	2202      	movs	r2, #2
 8000566:	430a      	orrs	r2, r1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000568:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 800056a:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 800056c:	689a      	ldr	r2, [r3, #8]
 800056e:	400a      	ands	r2, r1
 8000570:	2a01      	cmp	r2, #1
 8000572:	d000      	beq.n	8000576 <HAL_ADC_Init+0x4a>
 8000574:	e06e      	b.n	8000654 <HAL_ADC_Init+0x128>
 8000576:	6819      	ldr	r1, [r3, #0]
 8000578:	4211      	tst	r1, r2
 800057a:	d102      	bne.n	8000582 <HAL_ADC_Init+0x56>
 800057c:	68da      	ldr	r2, [r3, #12]
 800057e:	0412      	lsls	r2, r2, #16
 8000580:	d568      	bpl.n	8000654 <HAL_ADC_Init+0x128>
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000582:	68da      	ldr	r2, [r3, #12]
 8000584:	493b      	ldr	r1, [pc, #236]	; (8000674 <HAL_ADC_Init+0x148>)
 8000586:	400a      	ands	r2, r1
 8000588:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800058a:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800058c:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800058e:	03ad      	lsls	r5, r5, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000590:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000592:	4315      	orrs	r5, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000594:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000596:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000598:	3a01      	subs	r2, #1
 800059a:	1e56      	subs	r6, r2, #1
 800059c:	41b2      	sbcs	r2, r6
 800059e:	0316      	lsls	r6, r2, #12
 80005a0:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80005a2:	034f      	lsls	r7, r1, #13
 80005a4:	4315      	orrs	r5, r2
                 hadc->Init.DataAlign                                             |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80005a6:	6922      	ldr	r2, [r4, #16]
 80005a8:	432f      	orrs	r7, r5
 80005aa:	2a02      	cmp	r2, #2
 80005ac:	d100      	bne.n	80005b0 <HAL_ADC_Init+0x84>
 80005ae:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80005b0:	1d62      	adds	r2, r4, #5
 80005b2:	7fd2      	ldrb	r2, [r2, #31]
 80005b4:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80005b6:	433a      	orrs	r2, r7
 80005b8:	4332      	orrs	r2, r6
 80005ba:	4302      	orrs	r2, r0
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80005bc:	7ee0      	ldrb	r0, [r4, #27]
 80005be:	2801      	cmp	r0, #1
 80005c0:	d104      	bne.n	80005cc <HAL_ADC_Init+0xa0>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80005c2:	2900      	cmp	r1, #0
 80005c4:	d12c      	bne.n	8000620 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80005c6:	2180      	movs	r1, #128	; 0x80
 80005c8:	0249      	lsls	r1, r1, #9
 80005ca:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80005cc:	20c2      	movs	r0, #194	; 0xc2
 80005ce:	69e1      	ldr	r1, [r4, #28]
 80005d0:	30ff      	adds	r0, #255	; 0xff
 80005d2:	4281      	cmp	r1, r0
 80005d4:	d002      	beq.n	80005dc <HAL_ADC_Init+0xb0>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80005d6:	6a20      	ldr	r0, [r4, #32]
 80005d8:	4301      	orrs	r1, r0
 80005da:	430a      	orrs	r2, r1
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80005dc:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80005de:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80005e0:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80005e2:	4311      	orrs	r1, r2
 80005e4:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80005e6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80005e8:	4281      	cmp	r1, r0
 80005ea:	d002      	beq.n	80005f2 <HAL_ADC_Init+0xc6>
 80005ec:	1e48      	subs	r0, r1, #1
 80005ee:	2806      	cmp	r0, #6
 80005f0:	d807      	bhi.n	8000602 <HAL_ADC_Init+0xd6>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80005f2:	2507      	movs	r5, #7
 80005f4:	6958      	ldr	r0, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80005f6:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80005f8:	43a8      	bics	r0, r5
 80005fa:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80005fc:	6958      	ldr	r0, [r3, #20]
 80005fe:	4301      	orrs	r1, r0
 8000600:	6159      	str	r1, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	491c      	ldr	r1, [pc, #112]	; (8000678 <HAL_ADC_Init+0x14c>)
 8000606:	400b      	ands	r3, r1
 8000608:	429a      	cmp	r2, r3
 800060a:	d111      	bne.n	8000630 <HAL_ADC_Init+0x104>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800060c:	2000      	movs	r0, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800060e:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8000610:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8000612:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000614:	4393      	bics	r3, r2
 8000616:	001a      	movs	r2, r3
 8000618:	2301      	movs	r3, #1
 800061a:	4313      	orrs	r3, r2
 800061c:	63a3      	str	r3, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 800061e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000620:	2120      	movs	r1, #32
 8000622:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000624:	4329      	orrs	r1, r5
 8000626:	63a1      	str	r1, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000628:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800062a:	4308      	orrs	r0, r1
 800062c:	63e0      	str	r0, [r4, #60]	; 0x3c
 800062e:	e7cd      	b.n	80005cc <HAL_ADC_Init+0xa0>
      ADC_STATE_CLR_SET(hadc->State,
 8000630:	2212      	movs	r2, #18
 8000632:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000634:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8000636:	4393      	bics	r3, r2
 8000638:	001a      	movs	r2, r3
 800063a:	2310      	movs	r3, #16
 800063c:	4313      	orrs	r3, r2
 800063e:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000640:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000642:	4303      	orrs	r3, r0
 8000644:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000646:	e7ea      	b.n	800061e <HAL_ADC_Init+0xf2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000648:	2310      	movs	r3, #16
 800064a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 800064c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800064e:	4313      	orrs	r3, r2
 8000650:	63a3      	str	r3, [r4, #56]	; 0x38
 8000652:	e7e4      	b.n	800061e <HAL_ADC_Init+0xf2>
      MODIFY_REG(hadc->Instance->CFGR1,
 8000654:	2118      	movs	r1, #24
 8000656:	68da      	ldr	r2, [r3, #12]
 8000658:	438a      	bics	r2, r1
 800065a:	68a1      	ldr	r1, [r4, #8]
 800065c:	430a      	orrs	r2, r1
 800065e:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000660:	6919      	ldr	r1, [r3, #16]
 8000662:	6862      	ldr	r2, [r4, #4]
 8000664:	0089      	lsls	r1, r1, #2
 8000666:	0889      	lsrs	r1, r1, #2
 8000668:	4311      	orrs	r1, r2
 800066a:	6119      	str	r1, [r3, #16]
 800066c:	e789      	b.n	8000582 <HAL_ADC_Init+0x56>
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	fffffefd 	.word	0xfffffefd
 8000674:	fffe0219 	.word	0xfffe0219
 8000678:	833fffe7 	.word	0x833fffe7

0800067c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800067c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 800067e:	2300      	movs	r3, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000680:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8000682:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000684:	3434      	adds	r4, #52	; 0x34
 8000686:	7823      	ldrb	r3, [r4, #0]
{
 8000688:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 800068a:	2002      	movs	r0, #2
 800068c:	2b01      	cmp	r3, #1
 800068e:	d02b      	beq.n	80006e8 <HAL_ADC_ConfigChannel+0x6c>
 8000690:	2301      	movs	r3, #1
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000692:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000694:	6aee      	ldr	r6, [r5, #44]	; 0x2c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000696:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 8000698:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800069a:	0740      	lsls	r0, r0, #29
 800069c:	d45a      	bmi.n	8000754 <HAL_ADC_ConfigChannel+0xd8>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800069e:	4830      	ldr	r0, [pc, #192]	; (8000760 <HAL_ADC_ConfigChannel+0xe4>)
 80006a0:	684f      	ldr	r7, [r1, #4]
 80006a2:	680d      	ldr	r5, [r1, #0]
 80006a4:	4287      	cmp	r7, r0
 80006a6:	d03f      	beq.n	8000728 <HAL_ADC_ConfigChannel+0xac>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80006a8:	40ab      	lsls	r3, r5
 80006aa:	0018      	movs	r0, r3
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80006ac:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80006ae:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80006b0:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80006b2:	4338      	orrs	r0, r7
 80006b4:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80006b6:	429e      	cmp	r6, r3
 80006b8:	d00f      	beq.n	80006da <HAL_ADC_ConfigChannel+0x5e>
 80006ba:	3e01      	subs	r6, #1
 80006bc:	2e06      	cmp	r6, #6
 80006be:	d90c      	bls.n	80006da <HAL_ADC_ConfigChannel+0x5e>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80006c0:	688b      	ldr	r3, [r1, #8]
 80006c2:	2107      	movs	r1, #7
 80006c4:	6950      	ldr	r0, [r2, #20]
 80006c6:	4008      	ands	r0, r1
 80006c8:	4283      	cmp	r3, r0
 80006ca:	d006      	beq.n	80006da <HAL_ADC_ConfigChannel+0x5e>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80006cc:	6950      	ldr	r0, [r2, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80006ce:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80006d0:	4388      	bics	r0, r1
 80006d2:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80006d4:	6950      	ldr	r0, [r2, #20]
 80006d6:	4303      	orrs	r3, r0
 80006d8:	6153      	str	r3, [r2, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80006da:	002b      	movs	r3, r5
 80006dc:	3b10      	subs	r3, #16
 80006de:	2b02      	cmp	r3, #2
 80006e0:	d903      	bls.n	80006ea <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006e2:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80006e4:	2300      	movs	r3, #0
 80006e6:	7023      	strb	r3, [r4, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 80006e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80006ea:	4a1e      	ldr	r2, [pc, #120]	; (8000764 <HAL_ADC_ConfigChannel+0xe8>)
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	6811      	ldr	r1, [r2, #0]
 80006f0:	2d10      	cmp	r5, #16
 80006f2:	d015      	beq.n	8000720 <HAL_ADC_ConfigChannel+0xa4>
 80006f4:	2d11      	cmp	r5, #17
 80006f6:	d015      	beq.n	8000724 <HAL_ADC_ConfigChannel+0xa8>
 80006f8:	045b      	lsls	r3, r3, #17
 80006fa:	430b      	orrs	r3, r1
 80006fc:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80006fe:	2d10      	cmp	r5, #16
 8000700:	d1ef      	bne.n	80006e2 <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000702:	4b19      	ldr	r3, [pc, #100]	; (8000768 <HAL_ADC_ConfigChannel+0xec>)
 8000704:	4919      	ldr	r1, [pc, #100]	; (800076c <HAL_ADC_ConfigChannel+0xf0>)
 8000706:	6818      	ldr	r0, [r3, #0]
 8000708:	f7ff fd10 	bl	800012c <__udivsi3>
 800070c:	230a      	movs	r3, #10
 800070e:	4358      	muls	r0, r3
 8000710:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8000712:	9b01      	ldr	r3, [sp, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d0e4      	beq.n	80006e2 <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 8000718:	9b01      	ldr	r3, [sp, #4]
 800071a:	3b01      	subs	r3, #1
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	e7f8      	b.n	8000712 <HAL_ADC_ConfigChannel+0x96>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000720:	041b      	lsls	r3, r3, #16
 8000722:	e7ea      	b.n	80006fa <HAL_ADC_ConfigChannel+0x7e>
 8000724:	03db      	lsls	r3, r3, #15
 8000726:	e7e8      	b.n	80006fa <HAL_ADC_ConfigChannel+0x7e>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000728:	40ab      	lsls	r3, r5
 800072a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800072c:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800072e:	002b      	movs	r3, r5
 8000730:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000732:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000734:	2b02      	cmp	r3, #2
 8000736:	d8d4      	bhi.n	80006e2 <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <HAL_ADC_ConfigChannel+0xe8>)
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	2d10      	cmp	r5, #16
 800073e:	d005      	beq.n	800074c <HAL_ADC_ConfigChannel+0xd0>
 8000740:	2d11      	cmp	r5, #17
 8000742:	d005      	beq.n	8000750 <HAL_ADC_ConfigChannel+0xd4>
 8000744:	490a      	ldr	r1, [pc, #40]	; (8000770 <HAL_ADC_ConfigChannel+0xf4>)
 8000746:	400a      	ands	r2, r1
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	e7ca      	b.n	80006e2 <HAL_ADC_ConfigChannel+0x66>
 800074c:	4909      	ldr	r1, [pc, #36]	; (8000774 <HAL_ADC_ConfigChannel+0xf8>)
 800074e:	e7fa      	b.n	8000746 <HAL_ADC_ConfigChannel+0xca>
 8000750:	4909      	ldr	r1, [pc, #36]	; (8000778 <HAL_ADC_ConfigChannel+0xfc>)
 8000752:	e7f8      	b.n	8000746 <HAL_ADC_ConfigChannel+0xca>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000754:	2220      	movs	r2, #32
 8000756:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8000758:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800075a:	430a      	orrs	r2, r1
 800075c:	63aa      	str	r2, [r5, #56]	; 0x38
 800075e:	e7c1      	b.n	80006e4 <HAL_ADC_ConfigChannel+0x68>
 8000760:	00001001 	.word	0x00001001
 8000764:	40012708 	.word	0x40012708
 8000768:	20000020 	.word	0x20000020
 800076c:	000f4240 	.word	0x000f4240
 8000770:	feffffff 	.word	0xfeffffff
 8000774:	ff7fffff 	.word	0xff7fffff
 8000778:	ffbfffff 	.word	0xffbfffff

0800077c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800077c:	b570      	push	{r4, r5, r6, lr}
 800077e:	0189      	lsls	r1, r1, #6
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000780:	2800      	cmp	r0, #0
 8000782:	db12      	blt.n	80007aa <HAL_NVIC_SetPriority+0x2e>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000784:	0883      	lsrs	r3, r0, #2
 8000786:	4a13      	ldr	r2, [pc, #76]	; (80007d4 <HAL_NVIC_SetPriority+0x58>)
 8000788:	2403      	movs	r4, #3
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	189b      	adds	r3, r3, r2
 800078e:	22ff      	movs	r2, #255	; 0xff
 8000790:	4020      	ands	r0, r4
 8000792:	40a0      	lsls	r0, r4
 8000794:	0014      	movs	r4, r2
 8000796:	25c0      	movs	r5, #192	; 0xc0
 8000798:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800079a:	4011      	ands	r1, r2
 800079c:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800079e:	00ad      	lsls	r5, r5, #2
 80007a0:	595e      	ldr	r6, [r3, r5]
 80007a2:	43a6      	bics	r6, r4
 80007a4:	4331      	orrs	r1, r6
 80007a6:	5159      	str	r1, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007aa:	2403      	movs	r4, #3
 80007ac:	230f      	movs	r3, #15
 80007ae:	b2c0      	uxtb	r0, r0
 80007b0:	4003      	ands	r3, r0
 80007b2:	4020      	ands	r0, r4
 80007b4:	40a0      	lsls	r0, r4
 80007b6:	34fc      	adds	r4, #252	; 0xfc
 80007b8:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007ba:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007bc:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007be:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007c0:	3b08      	subs	r3, #8
 80007c2:	4a05      	ldr	r2, [pc, #20]	; (80007d8 <HAL_NVIC_SetPriority+0x5c>)
 80007c4:	089b      	lsrs	r3, r3, #2
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	189b      	adds	r3, r3, r2
 80007ca:	69da      	ldr	r2, [r3, #28]
 80007cc:	43aa      	bics	r2, r5
 80007ce:	4311      	orrs	r1, r2
 80007d0:	61d9      	str	r1, [r3, #28]
 80007d2:	e7e9      	b.n	80007a8 <HAL_NVIC_SetPriority+0x2c>
 80007d4:	e000e100 	.word	0xe000e100
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007dc:	4a09      	ldr	r2, [pc, #36]	; (8000804 <HAL_SYSTICK_Config+0x28>)
 80007de:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 80007e0:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d80d      	bhi.n	8000802 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007e6:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007e8:	4a07      	ldr	r2, [pc, #28]	; (8000808 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ea:	4808      	ldr	r0, [pc, #32]	; (800080c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ec:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ee:	6a03      	ldr	r3, [r0, #32]
 80007f0:	0609      	lsls	r1, r1, #24
 80007f2:	021b      	lsls	r3, r3, #8
 80007f4:	0a1b      	lsrs	r3, r3, #8
 80007f6:	430b      	orrs	r3, r1
 80007f8:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007fa:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007fc:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007fe:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000800:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000802:	4770      	bx	lr
 8000804:	00ffffff 	.word	0x00ffffff
 8000808:	e000e010 	.word	0xe000e010
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000810:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000812:	4a56      	ldr	r2, [pc, #344]	; (800096c <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000814:	680b      	ldr	r3, [r1, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000816:	1882      	adds	r2, r0, r2
 8000818:	1e54      	subs	r4, r2, #1
 800081a:	41a2      	sbcs	r2, r4
{ 
 800081c:	b089      	sub	sp, #36	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800081e:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00u;
 8000820:	2300      	movs	r3, #0
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000822:	3204      	adds	r2, #4
 8000824:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000826:	9a03      	ldr	r2, [sp, #12]
 8000828:	40da      	lsrs	r2, r3
 800082a:	d101      	bne.n	8000830 <HAL_GPIO_Init+0x20>
      }
    }

    position++;
  } 
}
 800082c:	b009      	add	sp, #36	; 0x24
 800082e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000830:	2201      	movs	r2, #1
 8000832:	409a      	lsls	r2, r3
 8000834:	4694      	mov	ip, r2
 8000836:	4664      	mov	r4, ip
 8000838:	9a03      	ldr	r2, [sp, #12]
 800083a:	4022      	ands	r2, r4
 800083c:	9202      	str	r2, [sp, #8]
    if (iocurrent != 0x00u)
 800083e:	d100      	bne.n	8000842 <HAL_GPIO_Init+0x32>
 8000840:	e092      	b.n	8000968 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000842:	684a      	ldr	r2, [r1, #4]
 8000844:	9201      	str	r2, [sp, #4]
 8000846:	2210      	movs	r2, #16
 8000848:	9e01      	ldr	r6, [sp, #4]
 800084a:	4396      	bics	r6, r2
 800084c:	2e02      	cmp	r6, #2
 800084e:	d10d      	bne.n	800086c <HAL_GPIO_Init+0x5c>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000850:	2407      	movs	r4, #7
 8000852:	270f      	movs	r7, #15
 8000854:	401c      	ands	r4, r3
 8000856:	00a4      	lsls	r4, r4, #2
 8000858:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3u];
 800085a:	08da      	lsrs	r2, r3, #3
 800085c:	0092      	lsls	r2, r2, #2
 800085e:	1882      	adds	r2, r0, r2
 8000860:	6a15      	ldr	r5, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000862:	43bd      	bics	r5, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000864:	690f      	ldr	r7, [r1, #16]
 8000866:	40a7      	lsls	r7, r4
 8000868:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3u] = temp;
 800086a:	6215      	str	r5, [r2, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800086c:	2203      	movs	r2, #3
 800086e:	0014      	movs	r4, r2
 8000870:	005d      	lsls	r5, r3, #1
 8000872:	40ac      	lsls	r4, r5
 8000874:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8000876:	6807      	ldr	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000878:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800087a:	4027      	ands	r7, r4
 800087c:	9704      	str	r7, [sp, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800087e:	9f01      	ldr	r7, [sp, #4]
 8000880:	403a      	ands	r2, r7
 8000882:	40aa      	lsls	r2, r5
 8000884:	9f04      	ldr	r7, [sp, #16]
 8000886:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 8000888:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800088a:	2e01      	cmp	r6, #1
 800088c:	d80e      	bhi.n	80008ac <HAL_GPIO_Init+0x9c>
        temp |= (GPIO_Init->Speed << (position * 2u));
 800088e:	68ca      	ldr	r2, [r1, #12]
        temp = GPIOx->OSPEEDR;
 8000890:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000892:	40aa      	lsls	r2, r5
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000894:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000896:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 8000898:	6082      	str	r2, [r0, #8]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800089a:	4662      	mov	r2, ip
        temp = GPIOx->OTYPER;
 800089c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800089e:	4396      	bics	r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008a0:	9a01      	ldr	r2, [sp, #4]
 80008a2:	06d2      	lsls	r2, r2, #27
 80008a4:	0fd2      	lsrs	r2, r2, #31
 80008a6:	409a      	lsls	r2, r3
 80008a8:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80008aa:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80008ac:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80008ae:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008b0:	688a      	ldr	r2, [r1, #8]
 80008b2:	40aa      	lsls	r2, r5
 80008b4:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008b6:	9a01      	ldr	r2, [sp, #4]
      GPIOx->PUPDR = temp;
 80008b8:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008ba:	00d2      	lsls	r2, r2, #3
 80008bc:	d554      	bpl.n	8000968 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	2601      	movs	r6, #1
 80008c0:	4a2b      	ldr	r2, [pc, #172]	; (8000970 <HAL_GPIO_Init+0x160>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80008c2:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c4:	6994      	ldr	r4, [r2, #24]
 80008c6:	4334      	orrs	r4, r6
 80008c8:	6194      	str	r4, [r2, #24]
 80008ca:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 80008cc:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	4032      	ands	r2, r6
 80008d0:	9207      	str	r2, [sp, #28]
 80008d2:	9a07      	ldr	r2, [sp, #28]
 80008d4:	4a27      	ldr	r2, [pc, #156]	; (8000974 <HAL_GPIO_Init+0x164>)
 80008d6:	00a4      	lsls	r4, r4, #2
 80008d8:	18a4      	adds	r4, r4, r2
        temp = SYSCFG->EXTICR[position >> 2u];
 80008da:	68a2      	ldr	r2, [r4, #8]
 80008dc:	4694      	mov	ip, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80008de:	2203      	movs	r2, #3
 80008e0:	4015      	ands	r5, r2
 80008e2:	00ad      	lsls	r5, r5, #2
 80008e4:	320c      	adds	r2, #12
 80008e6:	40aa      	lsls	r2, r5
 80008e8:	4667      	mov	r7, ip
 80008ea:	4397      	bics	r7, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80008ec:	2290      	movs	r2, #144	; 0x90
 80008ee:	05d2      	lsls	r2, r2, #23
 80008f0:	4694      	mov	ip, r2
 80008f2:	2200      	movs	r2, #0
 80008f4:	4560      	cmp	r0, ip
 80008f6:	d00d      	beq.n	8000914 <HAL_GPIO_Init+0x104>
 80008f8:	4a1f      	ldr	r2, [pc, #124]	; (8000978 <HAL_GPIO_Init+0x168>)
 80008fa:	4694      	mov	ip, r2
 80008fc:	0032      	movs	r2, r6
 80008fe:	4560      	cmp	r0, ip
 8000900:	d008      	beq.n	8000914 <HAL_GPIO_Init+0x104>
 8000902:	4e1e      	ldr	r6, [pc, #120]	; (800097c <HAL_GPIO_Init+0x16c>)
 8000904:	1892      	adds	r2, r2, r2
 8000906:	42b0      	cmp	r0, r6
 8000908:	d004      	beq.n	8000914 <HAL_GPIO_Init+0x104>
 800090a:	4e1d      	ldr	r6, [pc, #116]	; (8000980 <HAL_GPIO_Init+0x170>)
 800090c:	3201      	adds	r2, #1
 800090e:	42b0      	cmp	r0, r6
 8000910:	d000      	beq.n	8000914 <HAL_GPIO_Init+0x104>
 8000912:	9a05      	ldr	r2, [sp, #20]
 8000914:	40aa      	lsls	r2, r5
 8000916:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000918:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 800091a:	4a1a      	ldr	r2, [pc, #104]	; (8000984 <HAL_GPIO_Init+0x174>)
        temp &= ~(iocurrent);
 800091c:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 800091e:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8000920:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000922:	9f01      	ldr	r7, [sp, #4]
        temp &= ~(iocurrent);
 8000924:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000926:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000928:	03ff      	lsls	r7, r7, #15
 800092a:	d401      	bmi.n	8000930 <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 800092c:	0035      	movs	r5, r6
 800092e:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8000930:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000932:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000934:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000936:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8000938:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800093a:	03bf      	lsls	r7, r7, #14
 800093c:	d401      	bmi.n	8000942 <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 800093e:	0035      	movs	r5, r6
 8000940:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8000942:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000944:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000946:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000948:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 800094a:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800094c:	02ff      	lsls	r7, r7, #11
 800094e:	d401      	bmi.n	8000954 <HAL_GPIO_Init+0x144>
        temp &= ~(iocurrent);
 8000950:	0035      	movs	r5, r6
 8000952:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8000954:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000956:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8000958:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800095a:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 800095c:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800095e:	02bf      	lsls	r7, r7, #10
 8000960:	d401      	bmi.n	8000966 <HAL_GPIO_Init+0x156>
        temp &= ~(iocurrent);
 8000962:	4025      	ands	r5, r4
 8000964:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8000966:	60d6      	str	r6, [r2, #12]
    position++;
 8000968:	3301      	adds	r3, #1
 800096a:	e75c      	b.n	8000826 <HAL_GPIO_Init+0x16>
 800096c:	b7fff000 	.word	0xb7fff000
 8000970:	40021000 	.word	0x40021000
 8000974:	40010000 	.word	0x40010000
 8000978:	48000400 	.word	0x48000400
 800097c:	48000800 	.word	0x48000800
 8000980:	48000c00 	.word	0x48000c00
 8000984:	40010400 	.word	0x40010400

08000988 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000988:	2a00      	cmp	r2, #0
 800098a:	d001      	beq.n	8000990 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800098c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800098e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000990:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000992:	e7fc      	b.n	800098e <HAL_GPIO_WritePin+0x6>

08000994 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000996:	0004      	movs	r4, r0
 8000998:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800099a:	2800      	cmp	r0, #0
 800099c:	d102      	bne.n	80009a4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800099e:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 80009a0:	b005      	add	sp, #20
 80009a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009a4:	6803      	ldr	r3, [r0, #0]
 80009a6:	07db      	lsls	r3, r3, #31
 80009a8:	d433      	bmi.n	8000a12 <HAL_RCC_OscConfig+0x7e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009aa:	6823      	ldr	r3, [r4, #0]
 80009ac:	079b      	lsls	r3, r3, #30
 80009ae:	d500      	bpl.n	80009b2 <HAL_RCC_OscConfig+0x1e>
 80009b0:	e087      	b.n	8000ac2 <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009b2:	6823      	ldr	r3, [r4, #0]
 80009b4:	071b      	lsls	r3, r3, #28
 80009b6:	d500      	bpl.n	80009ba <HAL_RCC_OscConfig+0x26>
 80009b8:	e0c8      	b.n	8000b4c <HAL_RCC_OscConfig+0x1b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009ba:	6823      	ldr	r3, [r4, #0]
 80009bc:	075b      	lsls	r3, r3, #29
 80009be:	d500      	bpl.n	80009c2 <HAL_RCC_OscConfig+0x2e>
 80009c0:	e0eb      	b.n	8000b9a <HAL_RCC_OscConfig+0x206>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80009c2:	6823      	ldr	r3, [r4, #0]
 80009c4:	06db      	lsls	r3, r3, #27
 80009c6:	d51a      	bpl.n	80009fe <HAL_RCC_OscConfig+0x6a>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80009c8:	6962      	ldr	r2, [r4, #20]
 80009ca:	4dbc      	ldr	r5, [pc, #752]	; (8000cbc <HAL_RCC_OscConfig+0x328>)
 80009cc:	2304      	movs	r3, #4
 80009ce:	2a01      	cmp	r2, #1
 80009d0:	d000      	beq.n	80009d4 <HAL_RCC_OscConfig+0x40>
 80009d2:	e157      	b.n	8000c84 <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_HSI14ADC_DISABLE();
 80009d4:	6b69      	ldr	r1, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80009d6:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80009d8:	430b      	orrs	r3, r1
 80009da:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80009dc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80009de:	431a      	orrs	r2, r3
 80009e0:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80009e2:	f7ff fd8b 	bl	80004fc <HAL_GetTick>
 80009e6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80009e8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80009ea:	4233      	tst	r3, r6
 80009ec:	d100      	bne.n	80009f0 <HAL_RCC_OscConfig+0x5c>
 80009ee:	e142      	b.n	8000c76 <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80009f0:	21f8      	movs	r1, #248	; 0xf8
 80009f2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80009f4:	69a3      	ldr	r3, [r4, #24]
 80009f6:	438a      	bics	r2, r1
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	4313      	orrs	r3, r2
 80009fc:	636b      	str	r3, [r5, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80009fe:	6823      	ldr	r3, [r4, #0]
 8000a00:	069b      	lsls	r3, r3, #26
 8000a02:	d500      	bpl.n	8000a06 <HAL_RCC_OscConfig+0x72>
 8000a04:	e166      	b.n	8000cd4 <HAL_RCC_OscConfig+0x340>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a06:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a08:	2a00      	cmp	r2, #0
 8000a0a:	d000      	beq.n	8000a0e <HAL_RCC_OscConfig+0x7a>
 8000a0c:	e1a3      	b.n	8000d56 <HAL_RCC_OscConfig+0x3c2>
  return HAL_OK;
 8000a0e:	2000      	movs	r0, #0
 8000a10:	e7c6      	b.n	80009a0 <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a12:	210c      	movs	r1, #12
 8000a14:	4da9      	ldr	r5, [pc, #676]	; (8000cbc <HAL_RCC_OscConfig+0x328>)
 8000a16:	686a      	ldr	r2, [r5, #4]
 8000a18:	400a      	ands	r2, r1
 8000a1a:	2a04      	cmp	r2, #4
 8000a1c:	d00b      	beq.n	8000a36 <HAL_RCC_OscConfig+0xa2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a1e:	686b      	ldr	r3, [r5, #4]
 8000a20:	400b      	ands	r3, r1
 8000a22:	2b08      	cmp	r3, #8
 8000a24:	d10e      	bne.n	8000a44 <HAL_RCC_OscConfig+0xb0>
 8000a26:	22c0      	movs	r2, #192	; 0xc0
 8000a28:	686b      	ldr	r3, [r5, #4]
 8000a2a:	0252      	lsls	r2, r2, #9
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	2280      	movs	r2, #128	; 0x80
 8000a30:	0252      	lsls	r2, r2, #9
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d106      	bne.n	8000a44 <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a36:	682b      	ldr	r3, [r5, #0]
 8000a38:	039b      	lsls	r3, r3, #14
 8000a3a:	d5b6      	bpl.n	80009aa <HAL_RCC_OscConfig+0x16>
 8000a3c:	6863      	ldr	r3, [r4, #4]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d1b3      	bne.n	80009aa <HAL_RCC_OscConfig+0x16>
 8000a42:	e7ac      	b.n	800099e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a44:	6863      	ldr	r3, [r4, #4]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d113      	bne.n	8000a72 <HAL_RCC_OscConfig+0xde>
 8000a4a:	2380      	movs	r3, #128	; 0x80
 8000a4c:	682a      	ldr	r2, [r5, #0]
 8000a4e:	025b      	lsls	r3, r3, #9
 8000a50:	4313      	orrs	r3, r2
 8000a52:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a54:	f7ff fd52 	bl	80004fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a58:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000a5a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a5c:	02b6      	lsls	r6, r6, #10
 8000a5e:	682b      	ldr	r3, [r5, #0]
 8000a60:	4233      	tst	r3, r6
 8000a62:	d1a2      	bne.n	80009aa <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a64:	f7ff fd4a 	bl	80004fc <HAL_GetTick>
 8000a68:	1bc0      	subs	r0, r0, r7
 8000a6a:	2864      	cmp	r0, #100	; 0x64
 8000a6c:	d9f7      	bls.n	8000a5e <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8000a6e:	2003      	movs	r0, #3
 8000a70:	e796      	b.n	80009a0 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d115      	bne.n	8000aa2 <HAL_RCC_OscConfig+0x10e>
 8000a76:	682b      	ldr	r3, [r5, #0]
 8000a78:	4a91      	ldr	r2, [pc, #580]	; (8000cc0 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a7a:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	602b      	str	r3, [r5, #0]
 8000a80:	682b      	ldr	r3, [r5, #0]
 8000a82:	4a90      	ldr	r2, [pc, #576]	; (8000cc4 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a84:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a86:	4013      	ands	r3, r2
 8000a88:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a8a:	f7ff fd37 	bl	80004fc <HAL_GetTick>
 8000a8e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a90:	682b      	ldr	r3, [r5, #0]
 8000a92:	4233      	tst	r3, r6
 8000a94:	d089      	beq.n	80009aa <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a96:	f7ff fd31 	bl	80004fc <HAL_GetTick>
 8000a9a:	1bc0      	subs	r0, r0, r7
 8000a9c:	2864      	cmp	r0, #100	; 0x64
 8000a9e:	d9f7      	bls.n	8000a90 <HAL_RCC_OscConfig+0xfc>
 8000aa0:	e7e5      	b.n	8000a6e <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aa2:	2b05      	cmp	r3, #5
 8000aa4:	d105      	bne.n	8000ab2 <HAL_RCC_OscConfig+0x11e>
 8000aa6:	2380      	movs	r3, #128	; 0x80
 8000aa8:	682a      	ldr	r2, [r5, #0]
 8000aaa:	02db      	lsls	r3, r3, #11
 8000aac:	4313      	orrs	r3, r2
 8000aae:	602b      	str	r3, [r5, #0]
 8000ab0:	e7cb      	b.n	8000a4a <HAL_RCC_OscConfig+0xb6>
 8000ab2:	682b      	ldr	r3, [r5, #0]
 8000ab4:	4a82      	ldr	r2, [pc, #520]	; (8000cc0 <HAL_RCC_OscConfig+0x32c>)
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	602b      	str	r3, [r5, #0]
 8000aba:	682b      	ldr	r3, [r5, #0]
 8000abc:	4a81      	ldr	r2, [pc, #516]	; (8000cc4 <HAL_RCC_OscConfig+0x330>)
 8000abe:	4013      	ands	r3, r2
 8000ac0:	e7c7      	b.n	8000a52 <HAL_RCC_OscConfig+0xbe>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	4d7d      	ldr	r5, [pc, #500]	; (8000cbc <HAL_RCC_OscConfig+0x328>)
 8000ac6:	686b      	ldr	r3, [r5, #4]
 8000ac8:	4213      	tst	r3, r2
 8000aca:	d00b      	beq.n	8000ae4 <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000acc:	686b      	ldr	r3, [r5, #4]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	2b08      	cmp	r3, #8
 8000ad2:	d116      	bne.n	8000b02 <HAL_RCC_OscConfig+0x16e>
 8000ad4:	22c0      	movs	r2, #192	; 0xc0
 8000ad6:	686b      	ldr	r3, [r5, #4]
 8000ad8:	0252      	lsls	r2, r2, #9
 8000ada:	4013      	ands	r3, r2
 8000adc:	2280      	movs	r2, #128	; 0x80
 8000ade:	0212      	lsls	r2, r2, #8
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d10e      	bne.n	8000b02 <HAL_RCC_OscConfig+0x16e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ae4:	682b      	ldr	r3, [r5, #0]
 8000ae6:	079b      	lsls	r3, r3, #30
 8000ae8:	d503      	bpl.n	8000af2 <HAL_RCC_OscConfig+0x15e>
 8000aea:	68e3      	ldr	r3, [r4, #12]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d000      	beq.n	8000af2 <HAL_RCC_OscConfig+0x15e>
 8000af0:	e755      	b.n	800099e <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000af2:	21f8      	movs	r1, #248	; 0xf8
 8000af4:	682a      	ldr	r2, [r5, #0]
 8000af6:	6923      	ldr	r3, [r4, #16]
 8000af8:	438a      	bics	r2, r1
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	4313      	orrs	r3, r2
 8000afe:	602b      	str	r3, [r5, #0]
 8000b00:	e757      	b.n	80009b2 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b02:	68e2      	ldr	r2, [r4, #12]
 8000b04:	2301      	movs	r3, #1
 8000b06:	2a00      	cmp	r2, #0
 8000b08:	d00f      	beq.n	8000b2a <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_ENABLE();
 8000b0a:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b0c:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b12:	f7ff fcf3 	bl	80004fc <HAL_GetTick>
 8000b16:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b18:	682b      	ldr	r3, [r5, #0]
 8000b1a:	4233      	tst	r3, r6
 8000b1c:	d1e9      	bne.n	8000af2 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b1e:	f7ff fced 	bl	80004fc <HAL_GetTick>
 8000b22:	1bc0      	subs	r0, r0, r7
 8000b24:	2802      	cmp	r0, #2
 8000b26:	d9f7      	bls.n	8000b18 <HAL_RCC_OscConfig+0x184>
 8000b28:	e7a1      	b.n	8000a6e <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI_DISABLE();
 8000b2a:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b2c:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000b2e:	439a      	bics	r2, r3
 8000b30:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8000b32:	f7ff fce3 	bl	80004fc <HAL_GetTick>
 8000b36:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b38:	682b      	ldr	r3, [r5, #0]
 8000b3a:	4233      	tst	r3, r6
 8000b3c:	d100      	bne.n	8000b40 <HAL_RCC_OscConfig+0x1ac>
 8000b3e:	e738      	b.n	80009b2 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b40:	f7ff fcdc 	bl	80004fc <HAL_GetTick>
 8000b44:	1bc0      	subs	r0, r0, r7
 8000b46:	2802      	cmp	r0, #2
 8000b48:	d9f6      	bls.n	8000b38 <HAL_RCC_OscConfig+0x1a4>
 8000b4a:	e790      	b.n	8000a6e <HAL_RCC_OscConfig+0xda>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b4c:	69e2      	ldr	r2, [r4, #28]
 8000b4e:	2301      	movs	r3, #1
 8000b50:	4d5a      	ldr	r5, [pc, #360]	; (8000cbc <HAL_RCC_OscConfig+0x328>)
 8000b52:	2a00      	cmp	r2, #0
 8000b54:	d010      	beq.n	8000b78 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_LSI_ENABLE();
 8000b56:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b58:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000b5e:	f7ff fccd 	bl	80004fc <HAL_GetTick>
 8000b62:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b64:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000b66:	4233      	tst	r3, r6
 8000b68:	d000      	beq.n	8000b6c <HAL_RCC_OscConfig+0x1d8>
 8000b6a:	e726      	b.n	80009ba <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b6c:	f7ff fcc6 	bl	80004fc <HAL_GetTick>
 8000b70:	1bc0      	subs	r0, r0, r7
 8000b72:	2802      	cmp	r0, #2
 8000b74:	d9f6      	bls.n	8000b64 <HAL_RCC_OscConfig+0x1d0>
 8000b76:	e77a      	b.n	8000a6e <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_LSI_DISABLE();
 8000b78:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b7a:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000b7c:	439a      	bics	r2, r3
 8000b7e:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000b80:	f7ff fcbc 	bl	80004fc <HAL_GetTick>
 8000b84:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000b88:	4233      	tst	r3, r6
 8000b8a:	d100      	bne.n	8000b8e <HAL_RCC_OscConfig+0x1fa>
 8000b8c:	e715      	b.n	80009ba <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b8e:	f7ff fcb5 	bl	80004fc <HAL_GetTick>
 8000b92:	1bc0      	subs	r0, r0, r7
 8000b94:	2802      	cmp	r0, #2
 8000b96:	d9f6      	bls.n	8000b86 <HAL_RCC_OscConfig+0x1f2>
 8000b98:	e769      	b.n	8000a6e <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b9a:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000b9c:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b9e:	4d47      	ldr	r5, [pc, #284]	; (8000cbc <HAL_RCC_OscConfig+0x328>)
 8000ba0:	0552      	lsls	r2, r2, #21
 8000ba2:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000ba4:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ba6:	4213      	tst	r3, r2
 8000ba8:	d108      	bne.n	8000bbc <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	69eb      	ldr	r3, [r5, #28]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	61eb      	str	r3, [r5, #28]
 8000bb0:	69eb      	ldr	r3, [r5, #28]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	9303      	str	r3, [sp, #12]
 8000bb6:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bbc:	2780      	movs	r7, #128	; 0x80
 8000bbe:	4e42      	ldr	r6, [pc, #264]	; (8000cc8 <HAL_RCC_OscConfig+0x334>)
 8000bc0:	007f      	lsls	r7, r7, #1
 8000bc2:	6833      	ldr	r3, [r6, #0]
 8000bc4:	423b      	tst	r3, r7
 8000bc6:	d006      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x242>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bc8:	68a3      	ldr	r3, [r4, #8]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d113      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x262>
 8000bce:	6a2a      	ldr	r2, [r5, #32]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	622b      	str	r3, [r5, #32]
 8000bd4:	e030      	b.n	8000c38 <HAL_RCC_OscConfig+0x2a4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000bd6:	6833      	ldr	r3, [r6, #0]
 8000bd8:	433b      	orrs	r3, r7
 8000bda:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000bdc:	f7ff fc8e 	bl	80004fc <HAL_GetTick>
 8000be0:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000be2:	6833      	ldr	r3, [r6, #0]
 8000be4:	423b      	tst	r3, r7
 8000be6:	d1ef      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000be8:	f7ff fc88 	bl	80004fc <HAL_GetTick>
 8000bec:	9b01      	ldr	r3, [sp, #4]
 8000bee:	1ac0      	subs	r0, r0, r3
 8000bf0:	2864      	cmp	r0, #100	; 0x64
 8000bf2:	d9f6      	bls.n	8000be2 <HAL_RCC_OscConfig+0x24e>
 8000bf4:	e73b      	b.n	8000a6e <HAL_RCC_OscConfig+0xda>
 8000bf6:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d114      	bne.n	8000c26 <HAL_RCC_OscConfig+0x292>
 8000bfc:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bfe:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c00:	4393      	bics	r3, r2
 8000c02:	622b      	str	r3, [r5, #32]
 8000c04:	6a2b      	ldr	r3, [r5, #32]
 8000c06:	3203      	adds	r2, #3
 8000c08:	4393      	bics	r3, r2
 8000c0a:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000c0c:	f7ff fc76 	bl	80004fc <HAL_GetTick>
 8000c10:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c12:	6a2b      	ldr	r3, [r5, #32]
 8000c14:	423b      	tst	r3, r7
 8000c16:	d025      	beq.n	8000c64 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c18:	f7ff fc70 	bl	80004fc <HAL_GetTick>
 8000c1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ccc <HAL_RCC_OscConfig+0x338>)
 8000c1e:	1b80      	subs	r0, r0, r6
 8000c20:	4298      	cmp	r0, r3
 8000c22:	d9f6      	bls.n	8000c12 <HAL_RCC_OscConfig+0x27e>
 8000c24:	e723      	b.n	8000a6e <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c26:	2b05      	cmp	r3, #5
 8000c28:	d10b      	bne.n	8000c42 <HAL_RCC_OscConfig+0x2ae>
 8000c2a:	6a29      	ldr	r1, [r5, #32]
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	430b      	orrs	r3, r1
 8000c30:	622b      	str	r3, [r5, #32]
 8000c32:	6a2b      	ldr	r3, [r5, #32]
 8000c34:	431a      	orrs	r2, r3
 8000c36:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8000c38:	f7ff fc60 	bl	80004fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c3c:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000c3e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c40:	e00d      	b.n	8000c5e <HAL_RCC_OscConfig+0x2ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c42:	6a2b      	ldr	r3, [r5, #32]
 8000c44:	4393      	bics	r3, r2
 8000c46:	2204      	movs	r2, #4
 8000c48:	622b      	str	r3, [r5, #32]
 8000c4a:	6a2b      	ldr	r3, [r5, #32]
 8000c4c:	4393      	bics	r3, r2
 8000c4e:	e7c0      	b.n	8000bd2 <HAL_RCC_OscConfig+0x23e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c50:	f7ff fc54 	bl	80004fc <HAL_GetTick>
 8000c54:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <HAL_RCC_OscConfig+0x338>)
 8000c56:	1b80      	subs	r0, r0, r6
 8000c58:	4298      	cmp	r0, r3
 8000c5a:	d900      	bls.n	8000c5e <HAL_RCC_OscConfig+0x2ca>
 8000c5c:	e707      	b.n	8000a6e <HAL_RCC_OscConfig+0xda>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c5e:	6a2b      	ldr	r3, [r5, #32]
 8000c60:	423b      	tst	r3, r7
 8000c62:	d0f5      	beq.n	8000c50 <HAL_RCC_OscConfig+0x2bc>
    if(pwrclkchanged == SET)
 8000c64:	9b00      	ldr	r3, [sp, #0]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d000      	beq.n	8000c6c <HAL_RCC_OscConfig+0x2d8>
 8000c6a:	e6aa      	b.n	80009c2 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c6c:	69eb      	ldr	r3, [r5, #28]
 8000c6e:	4a18      	ldr	r2, [pc, #96]	; (8000cd0 <HAL_RCC_OscConfig+0x33c>)
 8000c70:	4013      	ands	r3, r2
 8000c72:	61eb      	str	r3, [r5, #28]
 8000c74:	e6a5      	b.n	80009c2 <HAL_RCC_OscConfig+0x2e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000c76:	f7ff fc41 	bl	80004fc <HAL_GetTick>
 8000c7a:	1bc0      	subs	r0, r0, r7
 8000c7c:	2802      	cmp	r0, #2
 8000c7e:	d800      	bhi.n	8000c82 <HAL_RCC_OscConfig+0x2ee>
 8000c80:	e6b2      	b.n	80009e8 <HAL_RCC_OscConfig+0x54>
 8000c82:	e6f4      	b.n	8000a6e <HAL_RCC_OscConfig+0xda>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000c84:	3205      	adds	r2, #5
 8000c86:	d103      	bne.n	8000c90 <HAL_RCC_OscConfig+0x2fc>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000c88:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000c8a:	439a      	bics	r2, r3
 8000c8c:	636a      	str	r2, [r5, #52]	; 0x34
 8000c8e:	e6af      	b.n	80009f0 <HAL_RCC_OscConfig+0x5c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c90:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c92:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c94:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000c96:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c98:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000c9a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000c9c:	4393      	bics	r3, r2
 8000c9e:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000ca0:	f7ff fc2c 	bl	80004fc <HAL_GetTick>
 8000ca4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000ca6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000ca8:	4233      	tst	r3, r6
 8000caa:	d100      	bne.n	8000cae <HAL_RCC_OscConfig+0x31a>
 8000cac:	e6a7      	b.n	80009fe <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000cae:	f7ff fc25 	bl	80004fc <HAL_GetTick>
 8000cb2:	1bc0      	subs	r0, r0, r7
 8000cb4:	2802      	cmp	r0, #2
 8000cb6:	d9f6      	bls.n	8000ca6 <HAL_RCC_OscConfig+0x312>
 8000cb8:	e6d9      	b.n	8000a6e <HAL_RCC_OscConfig+0xda>
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	fffeffff 	.word	0xfffeffff
 8000cc4:	fffbffff 	.word	0xfffbffff
 8000cc8:	40007000 	.word	0x40007000
 8000ccc:	00001388 	.word	0x00001388
 8000cd0:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000cd4:	210c      	movs	r1, #12
 8000cd6:	4d53      	ldr	r5, [pc, #332]	; (8000e24 <HAL_RCC_OscConfig+0x490>)
 8000cd8:	686a      	ldr	r2, [r5, #4]
 8000cda:	400a      	ands	r2, r1
 8000cdc:	428a      	cmp	r2, r1
 8000cde:	d009      	beq.n	8000cf4 <HAL_RCC_OscConfig+0x360>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000ce0:	686b      	ldr	r3, [r5, #4]
 8000ce2:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000ce4:	2b08      	cmp	r3, #8
 8000ce6:	d10e      	bne.n	8000d06 <HAL_RCC_OscConfig+0x372>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000ce8:	22c0      	movs	r2, #192	; 0xc0
 8000cea:	686b      	ldr	r3, [r5, #4]
 8000cec:	0252      	lsls	r2, r2, #9
 8000cee:	4013      	ands	r3, r2
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d108      	bne.n	8000d06 <HAL_RCC_OscConfig+0x372>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000cf4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000cf6:	03db      	lsls	r3, r3, #15
 8000cf8:	d400      	bmi.n	8000cfc <HAL_RCC_OscConfig+0x368>
 8000cfa:	e684      	b.n	8000a06 <HAL_RCC_OscConfig+0x72>
 8000cfc:	6a23      	ldr	r3, [r4, #32]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d000      	beq.n	8000d04 <HAL_RCC_OscConfig+0x370>
 8000d02:	e64c      	b.n	800099e <HAL_RCC_OscConfig+0xa>
 8000d04:	e67f      	b.n	8000a06 <HAL_RCC_OscConfig+0x72>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000d06:	6a23      	ldr	r3, [r4, #32]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d011      	beq.n	8000d30 <HAL_RCC_OscConfig+0x39c>
        __HAL_RCC_HSI48_ENABLE();
 8000d0c:	2680      	movs	r6, #128	; 0x80
 8000d0e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000d10:	0276      	lsls	r6, r6, #9
 8000d12:	4333      	orrs	r3, r6
 8000d14:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8000d16:	f7ff fbf1 	bl	80004fc <HAL_GetTick>
 8000d1a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000d1c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000d1e:	4233      	tst	r3, r6
 8000d20:	d000      	beq.n	8000d24 <HAL_RCC_OscConfig+0x390>
 8000d22:	e670      	b.n	8000a06 <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d24:	f7ff fbea 	bl	80004fc <HAL_GetTick>
 8000d28:	1bc0      	subs	r0, r0, r7
 8000d2a:	2802      	cmp	r0, #2
 8000d2c:	d9f6      	bls.n	8000d1c <HAL_RCC_OscConfig+0x388>
 8000d2e:	e69e      	b.n	8000a6e <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI48_DISABLE();
 8000d30:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000d32:	4a3d      	ldr	r2, [pc, #244]	; (8000e28 <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000d34:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 8000d36:	4013      	ands	r3, r2
 8000d38:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8000d3a:	f7ff fbdf 	bl	80004fc <HAL_GetTick>
 8000d3e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000d40:	0276      	lsls	r6, r6, #9
 8000d42:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000d44:	4233      	tst	r3, r6
 8000d46:	d100      	bne.n	8000d4a <HAL_RCC_OscConfig+0x3b6>
 8000d48:	e65d      	b.n	8000a06 <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d4a:	f7ff fbd7 	bl	80004fc <HAL_GetTick>
 8000d4e:	1bc0      	subs	r0, r0, r7
 8000d50:	2802      	cmp	r0, #2
 8000d52:	d9f6      	bls.n	8000d42 <HAL_RCC_OscConfig+0x3ae>
 8000d54:	e68b      	b.n	8000a6e <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d56:	200c      	movs	r0, #12
 8000d58:	4b32      	ldr	r3, [pc, #200]	; (8000e24 <HAL_RCC_OscConfig+0x490>)
 8000d5a:	6859      	ldr	r1, [r3, #4]
 8000d5c:	001d      	movs	r5, r3
 8000d5e:	4001      	ands	r1, r0
 8000d60:	2908      	cmp	r1, #8
 8000d62:	d044      	beq.n	8000dee <HAL_RCC_OscConfig+0x45a>
        __HAL_RCC_PLL_DISABLE();
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4931      	ldr	r1, [pc, #196]	; (8000e2c <HAL_RCC_OscConfig+0x498>)
 8000d68:	400b      	ands	r3, r1
 8000d6a:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d6c:	2a02      	cmp	r2, #2
 8000d6e:	d12f      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x43c>
        tickstart = HAL_GetTick();
 8000d70:	f7ff fbc4 	bl	80004fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d74:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000d76:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d78:	04b6      	lsls	r6, r6, #18
 8000d7a:	682b      	ldr	r3, [r5, #0]
 8000d7c:	4233      	tst	r3, r6
 8000d7e:	d121      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x430>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d80:	220f      	movs	r2, #15
 8000d82:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000d84:	4393      	bics	r3, r2
 8000d86:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000d8c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000d8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000d90:	686a      	ldr	r2, [r5, #4]
 8000d92:	430b      	orrs	r3, r1
 8000d94:	4926      	ldr	r1, [pc, #152]	; (8000e30 <HAL_RCC_OscConfig+0x49c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d96:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d98:	400a      	ands	r2, r1
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	682a      	ldr	r2, [r5, #0]
 8000da2:	045b      	lsls	r3, r3, #17
 8000da4:	4313      	orrs	r3, r2
 8000da6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000da8:	f7ff fba8 	bl	80004fc <HAL_GetTick>
 8000dac:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000dae:	04a4      	lsls	r4, r4, #18
 8000db0:	682b      	ldr	r3, [r5, #0]
 8000db2:	4223      	tst	r3, r4
 8000db4:	d000      	beq.n	8000db8 <HAL_RCC_OscConfig+0x424>
 8000db6:	e62a      	b.n	8000a0e <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000db8:	f7ff fba0 	bl	80004fc <HAL_GetTick>
 8000dbc:	1b80      	subs	r0, r0, r6
 8000dbe:	2802      	cmp	r0, #2
 8000dc0:	d9f6      	bls.n	8000db0 <HAL_RCC_OscConfig+0x41c>
 8000dc2:	e654      	b.n	8000a6e <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dc4:	f7ff fb9a 	bl	80004fc <HAL_GetTick>
 8000dc8:	1bc0      	subs	r0, r0, r7
 8000dca:	2802      	cmp	r0, #2
 8000dcc:	d9d5      	bls.n	8000d7a <HAL_RCC_OscConfig+0x3e6>
 8000dce:	e64e      	b.n	8000a6e <HAL_RCC_OscConfig+0xda>
        tickstart = HAL_GetTick();
 8000dd0:	f7ff fb94 	bl	80004fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dd4:	2480      	movs	r4, #128	; 0x80
        tickstart = HAL_GetTick();
 8000dd6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dd8:	04a4      	lsls	r4, r4, #18
 8000dda:	682b      	ldr	r3, [r5, #0]
 8000ddc:	4223      	tst	r3, r4
 8000dde:	d100      	bne.n	8000de2 <HAL_RCC_OscConfig+0x44e>
 8000de0:	e615      	b.n	8000a0e <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000de2:	f7ff fb8b 	bl	80004fc <HAL_GetTick>
 8000de6:	1b80      	subs	r0, r0, r6
 8000de8:	2802      	cmp	r0, #2
 8000dea:	d9f6      	bls.n	8000dda <HAL_RCC_OscConfig+0x446>
 8000dec:	e63f      	b.n	8000a6e <HAL_RCC_OscConfig+0xda>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000dee:	2a01      	cmp	r2, #1
 8000df0:	d100      	bne.n	8000df4 <HAL_RCC_OscConfig+0x460>
 8000df2:	e5d4      	b.n	800099e <HAL_RCC_OscConfig+0xa>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000df4:	22c0      	movs	r2, #192	; 0xc0
        pll_config  = RCC->CFGR;
 8000df6:	6858      	ldr	r0, [r3, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000df8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000dfa:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 8000dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dfe:	4002      	ands	r2, r0
 8000e00:	428a      	cmp	r2, r1
 8000e02:	d000      	beq.n	8000e06 <HAL_RCC_OscConfig+0x472>
 8000e04:	e5cb      	b.n	800099e <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000e06:	220f      	movs	r2, #15
 8000e08:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e0a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d000      	beq.n	8000e12 <HAL_RCC_OscConfig+0x47e>
 8000e10:	e5c5      	b.n	800099e <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000e12:	23f0      	movs	r3, #240	; 0xf0
 8000e14:	039b      	lsls	r3, r3, #14
 8000e16:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000e18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e1a:	1ac0      	subs	r0, r0, r3
 8000e1c:	1e43      	subs	r3, r0, #1
 8000e1e:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8000e20:	b2c0      	uxtb	r0, r0
 8000e22:	e5bd      	b.n	80009a0 <HAL_RCC_OscConfig+0xc>
 8000e24:	40021000 	.word	0x40021000
 8000e28:	fffeffff 	.word	0xfffeffff
 8000e2c:	feffffff 	.word	0xfeffffff
 8000e30:	ffc27fff 	.word	0xffc27fff

08000e34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e34:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000e36:	4c19      	ldr	r4, [pc, #100]	; (8000e9c <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000e38:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000e3a:	2210      	movs	r2, #16
 8000e3c:	0021      	movs	r1, r4
 8000e3e:	4668      	mov	r0, sp
 8000e40:	f000 fdee 	bl	8001a20 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000e44:	0021      	movs	r1, r4
 8000e46:	ad04      	add	r5, sp, #16
 8000e48:	2210      	movs	r2, #16
 8000e4a:	3110      	adds	r1, #16
 8000e4c:	0028      	movs	r0, r5
 8000e4e:	f000 fde7 	bl	8001a20 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e52:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000e54:	4e12      	ldr	r6, [pc, #72]	; (8000ea0 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000e56:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000e58:	401a      	ands	r2, r3
 8000e5a:	2a08      	cmp	r2, #8
 8000e5c:	d004      	beq.n	8000e68 <HAL_RCC_GetSysClockFreq+0x34>
 8000e5e:	2a0c      	cmp	r2, #12
 8000e60:	d11a      	bne.n	8000e98 <HAL_RCC_GetSysClockFreq+0x64>
      break;
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8000e62:	4810      	ldr	r0, [pc, #64]	; (8000ea4 <HAL_RCC_GetSysClockFreq+0x70>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000e64:	b008      	add	sp, #32
 8000e66:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000e68:	200f      	movs	r0, #15
 8000e6a:	466a      	mov	r2, sp
 8000e6c:	0c99      	lsrs	r1, r3, #18
 8000e6e:	4001      	ands	r1, r0
 8000e70:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000e72:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8000e74:	4002      	ands	r2, r0
 8000e76:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000e78:	22c0      	movs	r2, #192	; 0xc0
 8000e7a:	2080      	movs	r0, #128	; 0x80
 8000e7c:	0252      	lsls	r2, r2, #9
 8000e7e:	4013      	ands	r3, r2
 8000e80:	0240      	lsls	r0, r0, #9
 8000e82:	4283      	cmp	r3, r0
 8000e84:	d101      	bne.n	8000e8a <HAL_RCC_GetSysClockFreq+0x56>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000e86:	4808      	ldr	r0, [pc, #32]	; (8000ea8 <HAL_RCC_GetSysClockFreq+0x74>)
 8000e88:	e002      	b.n	8000e90 <HAL_RCC_GetSysClockFreq+0x5c>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d1fb      	bne.n	8000e86 <HAL_RCC_GetSysClockFreq+0x52>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <HAL_RCC_GetSysClockFreq+0x70>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000e90:	f7ff f94c 	bl	800012c <__udivsi3>
 8000e94:	4360      	muls	r0, r4
 8000e96:	e7e5      	b.n	8000e64 <HAL_RCC_GetSysClockFreq+0x30>
      sysclockfreq = HSE_VALUE;
 8000e98:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000e9a:	e7e3      	b.n	8000e64 <HAL_RCC_GetSysClockFreq+0x30>
 8000e9c:	0800229c 	.word	0x0800229c
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	02dc6c00 	.word	0x02dc6c00
 8000ea8:	007a1200 	.word	0x007a1200

08000eac <HAL_RCC_ClockConfig>:
{
 8000eac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000eae:	0005      	movs	r5, r0
 8000eb0:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 8000eb2:	2800      	cmp	r0, #0
 8000eb4:	d101      	bne.n	8000eba <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8000eb6:	2001      	movs	r0, #1
}
 8000eb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000eba:	2201      	movs	r2, #1
 8000ebc:	4c3b      	ldr	r4, [pc, #236]	; (8000fac <HAL_RCC_ClockConfig+0x100>)
 8000ebe:	6823      	ldr	r3, [r4, #0]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d31c      	bcc.n	8000f00 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ec6:	6829      	ldr	r1, [r5, #0]
 8000ec8:	078b      	lsls	r3, r1, #30
 8000eca:	d422      	bmi.n	8000f12 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ecc:	07cb      	lsls	r3, r1, #31
 8000ece:	d42f      	bmi.n	8000f30 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	6822      	ldr	r2, [r4, #0]
 8000ed4:	401a      	ands	r2, r3
 8000ed6:	4297      	cmp	r7, r2
 8000ed8:	d359      	bcc.n	8000f8e <HAL_RCC_ClockConfig+0xe2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000eda:	682b      	ldr	r3, [r5, #0]
 8000edc:	4c34      	ldr	r4, [pc, #208]	; (8000fb0 <HAL_RCC_ClockConfig+0x104>)
 8000ede:	075b      	lsls	r3, r3, #29
 8000ee0:	d45d      	bmi.n	8000f9e <HAL_RCC_ClockConfig+0xf2>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000ee2:	f7ff ffa7 	bl	8000e34 <HAL_RCC_GetSysClockFreq>
 8000ee6:	6863      	ldr	r3, [r4, #4]
 8000ee8:	4a32      	ldr	r2, [pc, #200]	; (8000fb4 <HAL_RCC_ClockConfig+0x108>)
 8000eea:	061b      	lsls	r3, r3, #24
 8000eec:	0f1b      	lsrs	r3, r3, #28
 8000eee:	5cd3      	ldrb	r3, [r2, r3]
 8000ef0:	40d8      	lsrs	r0, r3
 8000ef2:	4b31      	ldr	r3, [pc, #196]	; (8000fb8 <HAL_RCC_ClockConfig+0x10c>)
 8000ef4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f7ff fac0 	bl	800047c <HAL_InitTick>
  return HAL_OK;
 8000efc:	2000      	movs	r0, #0
 8000efe:	e7db      	b.n	8000eb8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f00:	6823      	ldr	r3, [r4, #0]
 8000f02:	4393      	bics	r3, r2
 8000f04:	430b      	orrs	r3, r1
 8000f06:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f08:	6823      	ldr	r3, [r4, #0]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d1d2      	bne.n	8000eb6 <HAL_RCC_ClockConfig+0xa>
 8000f10:	e7d9      	b.n	8000ec6 <HAL_RCC_ClockConfig+0x1a>
 8000f12:	4a27      	ldr	r2, [pc, #156]	; (8000fb0 <HAL_RCC_ClockConfig+0x104>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f14:	074b      	lsls	r3, r1, #29
 8000f16:	d504      	bpl.n	8000f22 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000f18:	23e0      	movs	r3, #224	; 0xe0
 8000f1a:	6850      	ldr	r0, [r2, #4]
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	4303      	orrs	r3, r0
 8000f20:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f22:	20f0      	movs	r0, #240	; 0xf0
 8000f24:	6853      	ldr	r3, [r2, #4]
 8000f26:	4383      	bics	r3, r0
 8000f28:	68a8      	ldr	r0, [r5, #8]
 8000f2a:	4303      	orrs	r3, r0
 8000f2c:	6053      	str	r3, [r2, #4]
 8000f2e:	e7cd      	b.n	8000ecc <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f30:	686a      	ldr	r2, [r5, #4]
 8000f32:	4e1f      	ldr	r6, [pc, #124]	; (8000fb0 <HAL_RCC_ClockConfig+0x104>)
 8000f34:	2a01      	cmp	r2, #1
 8000f36:	d11a      	bne.n	8000f6e <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f38:	6833      	ldr	r3, [r6, #0]
 8000f3a:	039b      	lsls	r3, r3, #14
 8000f3c:	d5bb      	bpl.n	8000eb6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f3e:	2103      	movs	r1, #3
 8000f40:	6873      	ldr	r3, [r6, #4]
 8000f42:	438b      	bics	r3, r1
 8000f44:	4313      	orrs	r3, r2
 8000f46:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000f48:	f7ff fad8 	bl	80004fc <HAL_GetTick>
 8000f4c:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f4e:	230c      	movs	r3, #12
 8000f50:	6872      	ldr	r2, [r6, #4]
 8000f52:	401a      	ands	r2, r3
 8000f54:	686b      	ldr	r3, [r5, #4]
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d0b9      	beq.n	8000ed0 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f5c:	f7ff face 	bl	80004fc <HAL_GetTick>
 8000f60:	9b01      	ldr	r3, [sp, #4]
 8000f62:	1ac0      	subs	r0, r0, r3
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <HAL_RCC_ClockConfig+0x110>)
 8000f66:	4298      	cmp	r0, r3
 8000f68:	d9f1      	bls.n	8000f4e <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8000f6a:	2003      	movs	r0, #3
 8000f6c:	e7a4      	b.n	8000eb8 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f6e:	2a02      	cmp	r2, #2
 8000f70:	d103      	bne.n	8000f7a <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f72:	6833      	ldr	r3, [r6, #0]
 8000f74:	019b      	lsls	r3, r3, #6
 8000f76:	d4e2      	bmi.n	8000f3e <HAL_RCC_ClockConfig+0x92>
 8000f78:	e79d      	b.n	8000eb6 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8000f7a:	2a03      	cmp	r2, #3
 8000f7c:	d103      	bne.n	8000f86 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000f7e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8000f80:	03db      	lsls	r3, r3, #15
 8000f82:	d4dc      	bmi.n	8000f3e <HAL_RCC_ClockConfig+0x92>
 8000f84:	e797      	b.n	8000eb6 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f86:	6833      	ldr	r3, [r6, #0]
 8000f88:	079b      	lsls	r3, r3, #30
 8000f8a:	d4d8      	bmi.n	8000f3e <HAL_RCC_ClockConfig+0x92>
 8000f8c:	e793      	b.n	8000eb6 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f8e:	6822      	ldr	r2, [r4, #0]
 8000f90:	439a      	bics	r2, r3
 8000f92:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f94:	6822      	ldr	r2, [r4, #0]
 8000f96:	421a      	tst	r2, r3
 8000f98:	d000      	beq.n	8000f9c <HAL_RCC_ClockConfig+0xf0>
 8000f9a:	e78c      	b.n	8000eb6 <HAL_RCC_ClockConfig+0xa>
 8000f9c:	e79d      	b.n	8000eda <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000f9e:	6863      	ldr	r3, [r4, #4]
 8000fa0:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <HAL_RCC_ClockConfig+0x114>)
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	68ea      	ldr	r2, [r5, #12]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	6063      	str	r3, [r4, #4]
 8000faa:	e79a      	b.n	8000ee2 <HAL_RCC_ClockConfig+0x36>
 8000fac:	40022000 	.word	0x40022000
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	080022ef 	.word	0x080022ef
 8000fb8:	20000020 	.word	0x20000020
 8000fbc:	00001388 	.word	0x00001388
 8000fc0:	fffff8ff 	.word	0xfffff8ff

08000fc4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000fc6:	4a05      	ldr	r2, [pc, #20]	; (8000fdc <HAL_RCC_GetPCLK1Freq+0x18>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	055b      	lsls	r3, r3, #21
 8000fcc:	0f5b      	lsrs	r3, r3, #29
 8000fce:	5cd3      	ldrb	r3, [r2, r3]
 8000fd0:	4a03      	ldr	r2, [pc, #12]	; (8000fe0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000fd2:	6810      	ldr	r0, [r2, #0]
 8000fd4:	40d8      	lsrs	r0, r3
}    
 8000fd6:	4770      	bx	lr
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	080022ff 	.word	0x080022ff
 8000fe0:	20000020 	.word	0x20000020

08000fe4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000fe4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000fe6:	6803      	ldr	r3, [r0, #0]
{
 8000fe8:	b085      	sub	sp, #20
 8000fea:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000fec:	03db      	lsls	r3, r3, #15
 8000fee:	d528      	bpl.n	8001042 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ff0:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000ff2:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ff4:	4c44      	ldr	r4, [pc, #272]	; (8001108 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8000ff6:	0552      	lsls	r2, r2, #21
 8000ff8:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000ffa:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ffc:	4213      	tst	r3, r2
 8000ffe:	d108      	bne.n	8001012 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001000:	69e3      	ldr	r3, [r4, #28]
 8001002:	4313      	orrs	r3, r2
 8001004:	61e3      	str	r3, [r4, #28]
 8001006:	69e3      	ldr	r3, [r4, #28]
 8001008:	4013      	ands	r3, r2
 800100a:	9303      	str	r3, [sp, #12]
 800100c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800100e:	2301      	movs	r3, #1
 8001010:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001012:	2780      	movs	r7, #128	; 0x80
 8001014:	4e3d      	ldr	r6, [pc, #244]	; (800110c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8001016:	007f      	lsls	r7, r7, #1
 8001018:	6833      	ldr	r3, [r6, #0]
 800101a:	423b      	tst	r3, r7
 800101c:	d041      	beq.n	80010a2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800101e:	22c0      	movs	r2, #192	; 0xc0
 8001020:	6a23      	ldr	r3, [r4, #32]
 8001022:	0092      	lsls	r2, r2, #2
 8001024:	4013      	ands	r3, r2
 8001026:	4e3a      	ldr	r6, [pc, #232]	; (8001110 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001028:	d14d      	bne.n	80010c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800102a:	6a23      	ldr	r3, [r4, #32]
 800102c:	401e      	ands	r6, r3
 800102e:	686b      	ldr	r3, [r5, #4]
 8001030:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001032:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001034:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8001036:	2b01      	cmp	r3, #1
 8001038:	d103      	bne.n	8001042 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800103a:	69e3      	ldr	r3, [r4, #28]
 800103c:	4a35      	ldr	r2, [pc, #212]	; (8001114 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800103e:	4013      	ands	r3, r2
 8001040:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001042:	682b      	ldr	r3, [r5, #0]
 8001044:	07da      	lsls	r2, r3, #31
 8001046:	d506      	bpl.n	8001056 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001048:	2003      	movs	r0, #3
 800104a:	492f      	ldr	r1, [pc, #188]	; (8001108 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800104c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800104e:	4382      	bics	r2, r0
 8001050:	68a8      	ldr	r0, [r5, #8]
 8001052:	4302      	orrs	r2, r0
 8001054:	630a      	str	r2, [r1, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001056:	079a      	lsls	r2, r3, #30
 8001058:	d506      	bpl.n	8001068 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800105a:	492b      	ldr	r1, [pc, #172]	; (8001108 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800105c:	482e      	ldr	r0, [pc, #184]	; (8001118 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800105e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8001060:	4002      	ands	r2, r0
 8001062:	68e8      	ldr	r0, [r5, #12]
 8001064:	4302      	orrs	r2, r0
 8001066:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001068:	035a      	lsls	r2, r3, #13
 800106a:	d506      	bpl.n	800107a <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800106c:	4926      	ldr	r1, [pc, #152]	; (8001108 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800106e:	482b      	ldr	r0, [pc, #172]	; (800111c <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8001070:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8001072:	4002      	ands	r2, r0
 8001074:	6928      	ldr	r0, [r5, #16]
 8001076:	4302      	orrs	r2, r0
 8001078:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800107a:	069a      	lsls	r2, r3, #26
 800107c:	d506      	bpl.n	800108c <HAL_RCCEx_PeriphCLKConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800107e:	2010      	movs	r0, #16
 8001080:	4921      	ldr	r1, [pc, #132]	; (8001108 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001082:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8001084:	4382      	bics	r2, r0
 8001086:	6968      	ldr	r0, [r5, #20]
 8001088:	4302      	orrs	r2, r0
 800108a:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800108c:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800108e:	055b      	lsls	r3, r3, #21
 8001090:	d517      	bpl.n	80010c2 <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001092:	2140      	movs	r1, #64	; 0x40
 8001094:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001096:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001098:	438b      	bics	r3, r1
 800109a:	69a9      	ldr	r1, [r5, #24]
 800109c:	430b      	orrs	r3, r1
 800109e:	6313      	str	r3, [r2, #48]	; 0x30
 80010a0:	e00f      	b.n	80010c2 <HAL_RCCEx_PeriphCLKConfig+0xde>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010a2:	6833      	ldr	r3, [r6, #0]
 80010a4:	433b      	orrs	r3, r7
 80010a6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80010a8:	f7ff fa28 	bl	80004fc <HAL_GetTick>
 80010ac:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ae:	6833      	ldr	r3, [r6, #0]
 80010b0:	423b      	tst	r3, r7
 80010b2:	d1b4      	bne.n	800101e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010b4:	f7ff fa22 	bl	80004fc <HAL_GetTick>
 80010b8:	9b01      	ldr	r3, [sp, #4]
 80010ba:	1ac0      	subs	r0, r0, r3
 80010bc:	2864      	cmp	r0, #100	; 0x64
 80010be:	d9f6      	bls.n	80010ae <HAL_RCCEx_PeriphCLKConfig+0xca>
          return HAL_TIMEOUT;
 80010c0:	2003      	movs	r0, #3
}
 80010c2:	b005      	add	sp, #20
 80010c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80010c6:	6869      	ldr	r1, [r5, #4]
 80010c8:	400a      	ands	r2, r1
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d0ad      	beq.n	800102a <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 80010ce:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80010d0:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80010d2:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80010d4:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 80010d6:	025b      	lsls	r3, r3, #9
 80010d8:	4303      	orrs	r3, r0
 80010da:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80010dc:	6a23      	ldr	r3, [r4, #32]
 80010de:	4810      	ldr	r0, [pc, #64]	; (8001120 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80010e0:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 80010e2:	4003      	ands	r3, r0
 80010e4:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 80010e6:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80010e8:	07d3      	lsls	r3, r2, #31
 80010ea:	d59e      	bpl.n	800102a <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 80010ec:	f7ff fa06 	bl	80004fc <HAL_GetTick>
 80010f0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010f2:	2202      	movs	r2, #2
 80010f4:	6a23      	ldr	r3, [r4, #32]
 80010f6:	4213      	tst	r3, r2
 80010f8:	d197      	bne.n	800102a <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010fa:	f7ff f9ff 	bl	80004fc <HAL_GetTick>
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001100:	1bc0      	subs	r0, r0, r7
 8001102:	4298      	cmp	r0, r3
 8001104:	d9f5      	bls.n	80010f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8001106:	e7db      	b.n	80010c0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8001108:	40021000 	.word	0x40021000
 800110c:	40007000 	.word	0x40007000
 8001110:	fffffcff 	.word	0xfffffcff
 8001114:	efffffff 	.word	0xefffffff
 8001118:	fffcffff 	.word	0xfffcffff
 800111c:	fff3ffff 	.word	0xfff3ffff
 8001120:	fffeffff 	.word	0xfffeffff
 8001124:	00001388 	.word	0x00001388

08001128 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001128:	b570      	push	{r4, r5, r6, lr}
 800112a:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800112c:	6925      	ldr	r5, [r4, #16]
 800112e:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001130:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001132:	432a      	orrs	r2, r5
 8001134:	6965      	ldr	r5, [r4, #20]
 8001136:	69c1      	ldr	r1, [r0, #28]
 8001138:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800113a:	6818      	ldr	r0, [r3, #0]
 800113c:	4d65      	ldr	r5, [pc, #404]	; (80012d4 <UART_SetConfig+0x1ac>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800113e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001140:	4028      	ands	r0, r5
 8001142:	4302      	orrs	r2, r0
 8001144:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	4863      	ldr	r0, [pc, #396]	; (80012d8 <UART_SetConfig+0x1b0>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 800114a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800114c:	4002      	ands	r2, r0
 800114e:	68e0      	ldr	r0, [r4, #12]
 8001150:	4302      	orrs	r2, r0
 8001152:	605a      	str	r2, [r3, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8001154:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001156:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001158:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800115a:	4d60      	ldr	r5, [pc, #384]	; (80012dc <UART_SetConfig+0x1b4>)
 800115c:	4028      	ands	r0, r5
 800115e:	4302      	orrs	r2, r0
 8001160:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001162:	4a5f      	ldr	r2, [pc, #380]	; (80012e0 <UART_SetConfig+0x1b8>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d113      	bne.n	8001190 <UART_SetConfig+0x68>
 8001168:	2203      	movs	r2, #3
 800116a:	4b5e      	ldr	r3, [pc, #376]	; (80012e4 <UART_SetConfig+0x1bc>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4013      	ands	r3, r2
 8001170:	4a5d      	ldr	r2, [pc, #372]	; (80012e8 <UART_SetConfig+0x1c0>)
 8001172:	5cd0      	ldrb	r0, [r2, r3]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	4299      	cmp	r1, r3
 800117a:	d100      	bne.n	800117e <UART_SetConfig+0x56>
 800117c:	e09c      	b.n	80012b8 <UART_SetConfig+0x190>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 800117e:	2808      	cmp	r0, #8
 8001180:	d861      	bhi.n	8001246 <UART_SetConfig+0x11e>
 8001182:	f7fe ffbf 	bl	8000104 <__gnu_thumb1_case_uqi>
 8001186:	6062      	.short	0x6062
 8001188:	60776067 	.word	0x60776067
 800118c:	6060      	.short	0x6060
 800118e:	7a          	.byte	0x7a
 800118f:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001190:	4a56      	ldr	r2, [pc, #344]	; (80012ec <UART_SetConfig+0x1c4>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d138      	bne.n	8001208 <UART_SetConfig+0xe0>
 8001196:	22c0      	movs	r2, #192	; 0xc0
 8001198:	2080      	movs	r0, #128	; 0x80
 800119a:	4b52      	ldr	r3, [pc, #328]	; (80012e4 <UART_SetConfig+0x1bc>)
 800119c:	0292      	lsls	r2, r2, #10
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	0240      	lsls	r0, r0, #9
 80011a2:	4013      	ands	r3, r2
 80011a4:	4283      	cmp	r3, r0
 80011a6:	d100      	bne.n	80011aa <UART_SetConfig+0x82>
 80011a8:	e07f      	b.n	80012aa <UART_SetConfig+0x182>
 80011aa:	d808      	bhi.n	80011be <UART_SetConfig+0x96>
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d100      	bne.n	80011b2 <UART_SetConfig+0x8a>
 80011b0:	e071      	b.n	8001296 <UART_SetConfig+0x16e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80011b2:	2380      	movs	r3, #128	; 0x80
      ret = HAL_ERROR;
 80011b4:	2001      	movs	r0, #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	4299      	cmp	r1, r3
 80011ba:	d144      	bne.n	8001246 <UART_SetConfig+0x11e>
 80011bc:	e020      	b.n	8001200 <UART_SetConfig+0xd8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80011be:	2080      	movs	r0, #128	; 0x80
 80011c0:	0280      	lsls	r0, r0, #10
 80011c2:	4283      	cmp	r3, r0
 80011c4:	d05e      	beq.n	8001284 <UART_SetConfig+0x15c>
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d1f3      	bne.n	80011b2 <UART_SetConfig+0x8a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	021b      	lsls	r3, r3, #8
 80011ce:	4299      	cmp	r1, r3
 80011d0:	d140      	bne.n	8001254 <UART_SetConfig+0x12c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80011d2:	6863      	ldr	r3, [r4, #4]
 80011d4:	0858      	lsrs	r0, r3, #1
 80011d6:	4b46      	ldr	r3, [pc, #280]	; (80012f0 <UART_SetConfig+0x1c8>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80011d8:	18c0      	adds	r0, r0, r3
 80011da:	6861      	ldr	r1, [r4, #4]
 80011dc:	f7fe ffa6 	bl	800012c <__udivsi3>
 80011e0:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80011e2:	0003      	movs	r3, r0
 80011e4:	4a43      	ldr	r2, [pc, #268]	; (80012f4 <UART_SetConfig+0x1cc>)
 80011e6:	3b10      	subs	r3, #16
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d82c      	bhi.n	8001246 <UART_SetConfig+0x11e>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80011ec:	230f      	movs	r3, #15
 80011ee:	0002      	movs	r2, r0
 80011f0:	439a      	bics	r2, r3
 80011f2:	0013      	movs	r3, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80011f4:	0700      	lsls	r0, r0, #28
      huart->Instance->BRR = brrtemp;
 80011f6:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80011f8:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 80011fa:	4318      	orrs	r0, r3
 80011fc:	60d0      	str	r0, [r2, #12]
 80011fe:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001200:	2300      	movs	r3, #0
 8001202:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001204:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001206:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001208:	4a3b      	ldr	r2, [pc, #236]	; (80012f8 <UART_SetConfig+0x1d0>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d10c      	bne.n	8001228 <UART_SetConfig+0x100>
 800120e:	22c0      	movs	r2, #192	; 0xc0
 8001210:	2080      	movs	r0, #128	; 0x80
 8001212:	4b34      	ldr	r3, [pc, #208]	; (80012e4 <UART_SetConfig+0x1bc>)
 8001214:	0312      	lsls	r2, r2, #12
 8001216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001218:	02c0      	lsls	r0, r0, #11
 800121a:	4013      	ands	r3, r2
 800121c:	4283      	cmp	r3, r0
 800121e:	d044      	beq.n	80012aa <UART_SetConfig+0x182>
 8001220:	d9c4      	bls.n	80011ac <UART_SetConfig+0x84>
 8001222:	2080      	movs	r0, #128	; 0x80
 8001224:	0300      	lsls	r0, r0, #12
 8001226:	e7cc      	b.n	80011c2 <UART_SetConfig+0x9a>
 8001228:	4a34      	ldr	r2, [pc, #208]	; (80012fc <UART_SetConfig+0x1d4>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d033      	beq.n	8001296 <UART_SetConfig+0x16e>
 800122e:	4a34      	ldr	r2, [pc, #208]	; (8001300 <UART_SetConfig+0x1d8>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d030      	beq.n	8001296 <UART_SetConfig+0x16e>
 8001234:	4a33      	ldr	r2, [pc, #204]	; (8001304 <UART_SetConfig+0x1dc>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d02d      	beq.n	8001296 <UART_SetConfig+0x16e>
 800123a:	4a33      	ldr	r2, [pc, #204]	; (8001308 <UART_SetConfig+0x1e0>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d02a      	beq.n	8001296 <UART_SetConfig+0x16e>
 8001240:	4a32      	ldr	r2, [pc, #200]	; (800130c <UART_SetConfig+0x1e4>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d027      	beq.n	8001296 <UART_SetConfig+0x16e>
      ret = HAL_ERROR;
 8001246:	2001      	movs	r0, #1
 8001248:	e7da      	b.n	8001200 <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetPCLK1Freq();
 800124a:	f7ff febb 	bl	8000fc4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800124e:	6863      	ldr	r3, [r4, #4]
 8001250:	085b      	lsrs	r3, r3, #1
 8001252:	e002      	b.n	800125a <UART_SetConfig+0x132>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001254:	6863      	ldr	r3, [r4, #4]
 8001256:	0858      	lsrs	r0, r3, #1
 8001258:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <UART_SetConfig+0x1e8>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800125a:	18c0      	adds	r0, r0, r3
 800125c:	6861      	ldr	r1, [r4, #4]
 800125e:	f7fe ff65 	bl	800012c <__udivsi3>
 8001262:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001264:	0003      	movs	r3, r0
 8001266:	4a23      	ldr	r2, [pc, #140]	; (80012f4 <UART_SetConfig+0x1cc>)
 8001268:	3b10      	subs	r3, #16
 800126a:	4293      	cmp	r3, r2
 800126c:	d8eb      	bhi.n	8001246 <UART_SetConfig+0x11e>
      huart->Instance->BRR = usartdiv;
 800126e:	6823      	ldr	r3, [r4, #0]
 8001270:	60d8      	str	r0, [r3, #12]
 8001272:	e7c4      	b.n	80011fe <UART_SetConfig+0xd6>
        pclk = HAL_RCC_GetSysClockFreq();
 8001274:	f7ff fdde 	bl	8000e34 <HAL_RCC_GetSysClockFreq>
 8001278:	e7e9      	b.n	800124e <UART_SetConfig+0x126>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800127a:	6863      	ldr	r3, [r4, #4]
 800127c:	0858      	lsrs	r0, r3, #1
 800127e:	2380      	movs	r3, #128	; 0x80
 8001280:	021b      	lsls	r3, r3, #8
 8001282:	e7ea      	b.n	800125a <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	021b      	lsls	r3, r3, #8
 8001288:	4299      	cmp	r1, r3
 800128a:	d1f6      	bne.n	800127a <UART_SetConfig+0x152>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800128c:	6863      	ldr	r3, [r4, #4]
 800128e:	0858      	lsrs	r0, r3, #1
 8001290:	2380      	movs	r3, #128	; 0x80
 8001292:	025b      	lsls	r3, r3, #9
 8001294:	e7a0      	b.n	80011d8 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	4299      	cmp	r1, r3
 800129c:	d1d5      	bne.n	800124a <UART_SetConfig+0x122>
        pclk = HAL_RCC_GetPCLK1Freq();
 800129e:	f7ff fe91 	bl	8000fc4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80012a2:	6863      	ldr	r3, [r4, #4]
 80012a4:	0040      	lsls	r0, r0, #1
 80012a6:	085b      	lsrs	r3, r3, #1
 80012a8:	e796      	b.n	80011d8 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80012aa:	2380      	movs	r3, #128	; 0x80
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	4299      	cmp	r1, r3
 80012b0:	d1e0      	bne.n	8001274 <UART_SetConfig+0x14c>
        pclk = HAL_RCC_GetSysClockFreq();
 80012b2:	f7ff fdbf 	bl	8000e34 <HAL_RCC_GetSysClockFreq>
 80012b6:	e7f4      	b.n	80012a2 <UART_SetConfig+0x17a>
    switch (clocksource)
 80012b8:	2808      	cmp	r0, #8
 80012ba:	d8c4      	bhi.n	8001246 <UART_SetConfig+0x11e>
 80012bc:	f7fe ff2c 	bl	8000118 <__gnu_thumb1_case_shi>
 80012c0:	ffc3ffef 	.word	0xffc3ffef
 80012c4:	ffc3ff89 	.word	0xffc3ff89
 80012c8:	ffc3fff9 	.word	0xffc3fff9
 80012cc:	ffc3ffc3 	.word	0xffc3ffc3
 80012d0:	ffe6      	.short	0xffe6
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	efff69f3 	.word	0xefff69f3
 80012d8:	ffffcfff 	.word	0xffffcfff
 80012dc:	fffff4ff 	.word	0xfffff4ff
 80012e0:	40013800 	.word	0x40013800
 80012e4:	40021000 	.word	0x40021000
 80012e8:	080022bc 	.word	0x080022bc
 80012ec:	40004400 	.word	0x40004400
 80012f0:	00f42400 	.word	0x00f42400
 80012f4:	0000ffef 	.word	0x0000ffef
 80012f8:	40004800 	.word	0x40004800
 80012fc:	40004c00 	.word	0x40004c00
 8001300:	40005000 	.word	0x40005000
 8001304:	40011400 	.word	0x40011400
 8001308:	40011800 	.word	0x40011800
 800130c:	40011c00 	.word	0x40011c00
 8001310:	007a1200 	.word	0x007a1200

08001314 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001314:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001316:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001318:	07da      	lsls	r2, r3, #31
 800131a:	d506      	bpl.n	800132a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800131c:	6801      	ldr	r1, [r0, #0]
 800131e:	4c28      	ldr	r4, [pc, #160]	; (80013c0 <UART_AdvFeatureConfig+0xac>)
 8001320:	684a      	ldr	r2, [r1, #4]
 8001322:	4022      	ands	r2, r4
 8001324:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001326:	4322      	orrs	r2, r4
 8001328:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800132a:	079a      	lsls	r2, r3, #30
 800132c:	d506      	bpl.n	800133c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800132e:	6801      	ldr	r1, [r0, #0]
 8001330:	4c24      	ldr	r4, [pc, #144]	; (80013c4 <UART_AdvFeatureConfig+0xb0>)
 8001332:	684a      	ldr	r2, [r1, #4]
 8001334:	4022      	ands	r2, r4
 8001336:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001338:	4322      	orrs	r2, r4
 800133a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800133c:	075a      	lsls	r2, r3, #29
 800133e:	d506      	bpl.n	800134e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001340:	6801      	ldr	r1, [r0, #0]
 8001342:	4c21      	ldr	r4, [pc, #132]	; (80013c8 <UART_AdvFeatureConfig+0xb4>)
 8001344:	684a      	ldr	r2, [r1, #4]
 8001346:	4022      	ands	r2, r4
 8001348:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800134a:	4322      	orrs	r2, r4
 800134c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800134e:	071a      	lsls	r2, r3, #28
 8001350:	d506      	bpl.n	8001360 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001352:	6801      	ldr	r1, [r0, #0]
 8001354:	4c1d      	ldr	r4, [pc, #116]	; (80013cc <UART_AdvFeatureConfig+0xb8>)
 8001356:	684a      	ldr	r2, [r1, #4]
 8001358:	4022      	ands	r2, r4
 800135a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800135c:	4322      	orrs	r2, r4
 800135e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001360:	06da      	lsls	r2, r3, #27
 8001362:	d506      	bpl.n	8001372 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001364:	6801      	ldr	r1, [r0, #0]
 8001366:	4c1a      	ldr	r4, [pc, #104]	; (80013d0 <UART_AdvFeatureConfig+0xbc>)
 8001368:	688a      	ldr	r2, [r1, #8]
 800136a:	4022      	ands	r2, r4
 800136c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800136e:	4322      	orrs	r2, r4
 8001370:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001372:	069a      	lsls	r2, r3, #26
 8001374:	d506      	bpl.n	8001384 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001376:	6801      	ldr	r1, [r0, #0]
 8001378:	4c16      	ldr	r4, [pc, #88]	; (80013d4 <UART_AdvFeatureConfig+0xc0>)
 800137a:	688a      	ldr	r2, [r1, #8]
 800137c:	4022      	ands	r2, r4
 800137e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001380:	4322      	orrs	r2, r4
 8001382:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001384:	065a      	lsls	r2, r3, #25
 8001386:	d510      	bpl.n	80013aa <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001388:	6801      	ldr	r1, [r0, #0]
 800138a:	4d13      	ldr	r5, [pc, #76]	; (80013d8 <UART_AdvFeatureConfig+0xc4>)
 800138c:	684a      	ldr	r2, [r1, #4]
 800138e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001390:	402a      	ands	r2, r5
 8001392:	4322      	orrs	r2, r4
 8001394:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001396:	2280      	movs	r2, #128	; 0x80
 8001398:	0352      	lsls	r2, r2, #13
 800139a:	4294      	cmp	r4, r2
 800139c:	d105      	bne.n	80013aa <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800139e:	684a      	ldr	r2, [r1, #4]
 80013a0:	4c0e      	ldr	r4, [pc, #56]	; (80013dc <UART_AdvFeatureConfig+0xc8>)
 80013a2:	4022      	ands	r2, r4
 80013a4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80013a6:	4322      	orrs	r2, r4
 80013a8:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80013aa:	061b      	lsls	r3, r3, #24
 80013ac:	d506      	bpl.n	80013bc <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80013ae:	6802      	ldr	r2, [r0, #0]
 80013b0:	490b      	ldr	r1, [pc, #44]	; (80013e0 <UART_AdvFeatureConfig+0xcc>)
 80013b2:	6853      	ldr	r3, [r2, #4]
 80013b4:	400b      	ands	r3, r1
 80013b6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80013b8:	430b      	orrs	r3, r1
 80013ba:	6053      	str	r3, [r2, #4]
  }
}
 80013bc:	bd30      	pop	{r4, r5, pc}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	fffdffff 	.word	0xfffdffff
 80013c4:	fffeffff 	.word	0xfffeffff
 80013c8:	fffbffff 	.word	0xfffbffff
 80013cc:	ffff7fff 	.word	0xffff7fff
 80013d0:	ffffefff 	.word	0xffffefff
 80013d4:	ffffdfff 	.word	0xffffdfff
 80013d8:	ffefffff 	.word	0xffefffff
 80013dc:	ff9fffff 	.word	0xff9fffff
 80013e0:	fff7ffff 	.word	0xfff7ffff

080013e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80013e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80013e6:	2780      	movs	r7, #128	; 0x80
{
 80013e8:	0004      	movs	r4, r0
 80013ea:	000e      	movs	r6, r1
 80013ec:	0015      	movs	r5, r2
 80013ee:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80013f0:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80013f2:	6822      	ldr	r2, [r4, #0]
 80013f4:	69d3      	ldr	r3, [r2, #28]
 80013f6:	4033      	ands	r3, r6
 80013f8:	1b9b      	subs	r3, r3, r6
 80013fa:	4259      	negs	r1, r3
 80013fc:	414b      	adcs	r3, r1
 80013fe:	42ab      	cmp	r3, r5
 8001400:	d001      	beq.n	8001406 <UART_WaitOnFlagUntilTimeout+0x22>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8001402:	2000      	movs	r0, #0
 8001404:	e01c      	b.n	8001440 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8001406:	9b08      	ldr	r3, [sp, #32]
 8001408:	3301      	adds	r3, #1
 800140a:	d0f3      	beq.n	80013f4 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800140c:	f7ff f876 	bl	80004fc <HAL_GetTick>
 8001410:	9b01      	ldr	r3, [sp, #4]
 8001412:	9a08      	ldr	r2, [sp, #32]
 8001414:	1ac0      	subs	r0, r0, r3
 8001416:	6823      	ldr	r3, [r4, #0]
 8001418:	4282      	cmp	r2, r0
 800141a:	d301      	bcc.n	8001420 <UART_WaitOnFlagUntilTimeout+0x3c>
 800141c:	2a00      	cmp	r2, #0
 800141e:	d110      	bne.n	8001442 <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4913      	ldr	r1, [pc, #76]	; (8001470 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8001424:	400a      	ands	r2, r1
 8001426:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	31a3      	adds	r1, #163	; 0xa3
 800142c:	31ff      	adds	r1, #255	; 0xff
 800142e:	438a      	bics	r2, r1
 8001430:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001432:	2320      	movs	r3, #32
 8001434:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001436:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8001438:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800143a:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800143c:	3470      	adds	r4, #112	; 0x70
 800143e:	7023      	strb	r3, [r4, #0]
}
 8001440:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001442:	2104      	movs	r1, #4
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	420a      	tst	r2, r1
 8001448:	d0d3      	beq.n	80013f2 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800144a:	69da      	ldr	r2, [r3, #28]
 800144c:	423a      	tst	r2, r7
 800144e:	d0d0      	beq.n	80013f2 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001450:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4906      	ldr	r1, [pc, #24]	; (8001470 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8001456:	400a      	ands	r2, r1
 8001458:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	31a3      	adds	r1, #163	; 0xa3
 800145e:	31ff      	adds	r1, #255	; 0xff
 8001460:	438a      	bics	r2, r1
 8001462:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8001464:	2320      	movs	r3, #32
 8001466:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001468:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800146a:	67e3      	str	r3, [r4, #124]	; 0x7c
 800146c:	e7e4      	b.n	8001438 <UART_WaitOnFlagUntilTimeout+0x54>
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	fffffe5f 	.word	0xfffffe5f

08001474 <HAL_UART_Transmit>:
{
 8001474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001476:	b087      	sub	sp, #28
 8001478:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 800147a:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 800147c:	0004      	movs	r4, r0
 800147e:	000d      	movs	r5, r1
 8001480:	0017      	movs	r7, r2
    return HAL_BUSY;
 8001482:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8001484:	2b20      	cmp	r3, #32
 8001486:	d149      	bne.n	800151c <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 8001488:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800148a:	2900      	cmp	r1, #0
 800148c:	d046      	beq.n	800151c <HAL_UART_Transmit+0xa8>
 800148e:	2a00      	cmp	r2, #0
 8001490:	d044      	beq.n	800151c <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001492:	2380      	movs	r3, #128	; 0x80
 8001494:	68a2      	ldr	r2, [r4, #8]
 8001496:	015b      	lsls	r3, r3, #5
 8001498:	429a      	cmp	r2, r3
 800149a:	d104      	bne.n	80014a6 <HAL_UART_Transmit+0x32>
 800149c:	6923      	ldr	r3, [r4, #16]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 80014a2:	4201      	tst	r1, r0
 80014a4:	d13a      	bne.n	800151c <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 80014a6:	0023      	movs	r3, r4
 80014a8:	3370      	adds	r3, #112	; 0x70
 80014aa:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 80014ac:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80014ae:	2a01      	cmp	r2, #1
 80014b0:	d034      	beq.n	800151c <HAL_UART_Transmit+0xa8>
 80014b2:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014b4:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 80014b6:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80014b8:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014ba:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80014bc:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 80014be:	f7ff f81d 	bl	80004fc <HAL_GetTick>
    huart->TxXferSize  = Size;
 80014c2:	0023      	movs	r3, r4
 80014c4:	3350      	adds	r3, #80	; 0x50
 80014c6:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 80014c8:	3302      	adds	r3, #2
 80014ca:	9303      	str	r3, [sp, #12]
 80014cc:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014ce:	2380      	movs	r3, #128	; 0x80
 80014d0:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80014d2:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014d4:	015b      	lsls	r3, r3, #5
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d104      	bne.n	80014e4 <HAL_UART_Transmit+0x70>
 80014da:	6923      	ldr	r3, [r4, #16]
 80014dc:	42b3      	cmp	r3, r6
 80014de:	d101      	bne.n	80014e4 <HAL_UART_Transmit+0x70>
 80014e0:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80014e2:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 80014e4:	0023      	movs	r3, r4
 80014e6:	3352      	adds	r3, #82	; 0x52
 80014e8:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014ea:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 80014ec:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 80014f2:	2a00      	cmp	r2, #0
 80014f4:	d10a      	bne.n	800150c <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80014f6:	2140      	movs	r1, #64	; 0x40
 80014f8:	0020      	movs	r0, r4
 80014fa:	f7ff ff73 	bl	80013e4 <UART_WaitOnFlagUntilTimeout>
 80014fe:	2800      	cmp	r0, #0
 8001500:	d10b      	bne.n	800151a <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 8001502:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001504:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 8001506:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 8001508:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800150a:	e007      	b.n	800151c <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800150c:	2200      	movs	r2, #0
 800150e:	2180      	movs	r1, #128	; 0x80
 8001510:	0020      	movs	r0, r4
 8001512:	f7ff ff67 	bl	80013e4 <UART_WaitOnFlagUntilTimeout>
 8001516:	2800      	cmp	r0, #0
 8001518:	d002      	beq.n	8001520 <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 800151a:	2003      	movs	r0, #3
}
 800151c:	b007      	add	sp, #28
 800151e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001520:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8001522:	2d00      	cmp	r5, #0
 8001524:	d10b      	bne.n	800153e <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001526:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8001528:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800152a:	05db      	lsls	r3, r3, #23
 800152c:	0ddb      	lsrs	r3, r3, #23
 800152e:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001530:	9b03      	ldr	r3, [sp, #12]
 8001532:	9a03      	ldr	r2, [sp, #12]
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	3b01      	subs	r3, #1
 8001538:	b29b      	uxth	r3, r3
 800153a:	8013      	strh	r3, [r2, #0]
 800153c:	e7d2      	b.n	80014e4 <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800153e:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8001540:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001542:	8513      	strh	r3, [r2, #40]	; 0x28
 8001544:	e7f4      	b.n	8001530 <HAL_UART_Transmit+0xbc>
	...

08001548 <UART_CheckIdleState>:
{
 8001548:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800154a:	2600      	movs	r6, #0
{
 800154c:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800154e:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001550:	f7fe ffd4 	bl	80004fc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001554:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001556:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	071b      	lsls	r3, r3, #28
 800155c:	d415      	bmi.n	800158a <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800155e:	6823      	ldr	r3, [r4, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	075b      	lsls	r3, r3, #29
 8001564:	d50a      	bpl.n	800157c <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001566:	2180      	movs	r1, #128	; 0x80
 8001568:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <UART_CheckIdleState+0x5c>)
 800156a:	2200      	movs	r2, #0
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	03c9      	lsls	r1, r1, #15
 8001570:	002b      	movs	r3, r5
 8001572:	0020      	movs	r0, r4
 8001574:	f7ff ff36 	bl	80013e4 <UART_WaitOnFlagUntilTimeout>
 8001578:	2800      	cmp	r0, #0
 800157a:	d111      	bne.n	80015a0 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800157c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800157e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001580:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001582:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001584:	3470      	adds	r4, #112	; 0x70
 8001586:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8001588:	e00b      	b.n	80015a2 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800158a:	2180      	movs	r1, #128	; 0x80
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <UART_CheckIdleState+0x5c>)
 800158e:	0032      	movs	r2, r6
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	0389      	lsls	r1, r1, #14
 8001594:	0003      	movs	r3, r0
 8001596:	0020      	movs	r0, r4
 8001598:	f7ff ff24 	bl	80013e4 <UART_WaitOnFlagUntilTimeout>
 800159c:	2800      	cmp	r0, #0
 800159e:	d0de      	beq.n	800155e <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80015a0:	2003      	movs	r0, #3
}
 80015a2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80015a4:	01ffffff 	.word	0x01ffffff

080015a8 <HAL_UART_Init>:
{
 80015a8:	b510      	push	{r4, lr}
 80015aa:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80015ac:	d101      	bne.n	80015b2 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80015ae:	2001      	movs	r0, #1
}
 80015b0:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80015b2:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d104      	bne.n	80015c2 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80015b8:	0002      	movs	r2, r0
 80015ba:	3270      	adds	r2, #112	; 0x70
 80015bc:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80015be:	f000 f987 	bl	80018d0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80015c2:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80015c4:	2101      	movs	r1, #1
 80015c6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80015c8:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80015ca:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80015cc:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80015ce:	438b      	bics	r3, r1
 80015d0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80015d2:	f7ff fda9 	bl	8001128 <UART_SetConfig>
 80015d6:	2801      	cmp	r0, #1
 80015d8:	d0e9      	beq.n	80015ae <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80015da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d002      	beq.n	80015e6 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80015e0:	0020      	movs	r0, r4
 80015e2:	f7ff fe97 	bl	8001314 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015e6:	6823      	ldr	r3, [r4, #0]
 80015e8:	4907      	ldr	r1, [pc, #28]	; (8001608 <HAL_UART_Init+0x60>)
 80015ea:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80015ec:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015ee:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015f0:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	438a      	bics	r2, r1
 80015f8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80015fa:	2201      	movs	r2, #1
 80015fc:	6819      	ldr	r1, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001602:	f7ff ffa1 	bl	8001548 <UART_CheckIdleState>
 8001606:	e7d3      	b.n	80015b0 <HAL_UART_Init+0x8>
 8001608:	ffffb7ff 	.word	0xffffb7ff

0800160c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800160c:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800160e:	2410      	movs	r4, #16
{
 8001610:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001612:	2234      	movs	r2, #52	; 0x34
 8001614:	2100      	movs	r1, #0
 8001616:	a80b      	add	r0, sp, #44	; 0x2c
 8001618:	f000 fa0b 	bl	8001a32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800161c:	0022      	movs	r2, r4
 800161e:	2100      	movs	r1, #0
 8001620:	4668      	mov	r0, sp
 8001622:	f000 fa06 	bl	8001a32 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001626:	221c      	movs	r2, #28
 8001628:	2100      	movs	r1, #0
 800162a:	a804      	add	r0, sp, #16
 800162c:	f000 fa01 	bl	8001a32 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001630:	2501      	movs	r5, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 8001632:	2330      	movs	r3, #48	; 0x30
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001634:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 8001636:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001638:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800163a:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800163c:	9510      	str	r5, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800163e:	f7ff f9a9 	bl	8000994 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001642:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001644:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001646:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001648:	0029      	movs	r1, r5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800164a:	3b04      	subs	r3, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800164c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800164e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001650:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001652:	9403      	str	r4, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001654:	f7ff fc2a 	bl	8000eac <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001658:	2302      	movs	r3, #2
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800165a:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800165c:	9304      	str	r3, [sp, #16]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800165e:	9407      	str	r4, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001660:	f7ff fcc0 	bl	8000fe4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001664:	b019      	add	sp, #100	; 0x64
 8001666:	bd30      	pop	{r4, r5, pc}

08001668 <main>:
{
 8001668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166a:	b093      	sub	sp, #76	; 0x4c
  char mystr1[] = "STM32 world!!\n\r";
 800166c:	2210      	movs	r2, #16
 800166e:	496b      	ldr	r1, [pc, #428]	; (800181c <main+0x1b4>)
 8001670:	a809      	add	r0, sp, #36	; 0x24
 8001672:	f000 f9d5 	bl	8001a20 <memcpy>
  HAL_Init();
 8001676:	f7fe ff25 	bl	80004c4 <HAL_Init>
  SystemClock_Config();
 800167a:	f7ff ffc7 	bl	800160c <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167e:	2214      	movs	r2, #20
 8001680:	2100      	movs	r1, #0
 8001682:	a80d      	add	r0, sp, #52	; 0x34
 8001684:	f000 f9d5 	bl	8001a32 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001688:	2080      	movs	r0, #128	; 0x80
 800168a:	4b65      	ldr	r3, [pc, #404]	; (8001820 <main+0x1b8>)
 800168c:	0300      	lsls	r0, r0, #12
 800168e:	6959      	ldr	r1, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin|LCD_BLC_Pin, GPIO_PIN_RESET);
 8001690:	248e      	movs	r4, #142	; 0x8e
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001692:	4301      	orrs	r1, r0
 8001694:	6159      	str	r1, [r3, #20]
 8001696:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin|LCD_BLC_Pin, GPIO_PIN_RESET);
 8001698:	00e4      	lsls	r4, r4, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800169a:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169c:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800169e:	9202      	str	r2, [sp, #8]
 80016a0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	6959      	ldr	r1, [r3, #20]
 80016a4:	0280      	lsls	r0, r0, #10
 80016a6:	4301      	orrs	r1, r0
 80016a8:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ac:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ae:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b0:	4002      	ands	r2, r0
 80016b2:	9203      	str	r2, [sp, #12]
 80016b4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b6:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin|LCD_BLC_Pin, GPIO_PIN_RESET);
 80016b8:	485a      	ldr	r0, [pc, #360]	; (8001824 <main+0x1bc>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	430a      	orrs	r2, r1
 80016bc:	615a      	str	r2, [r3, #20]
 80016be:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin|LCD_BLC_Pin, GPIO_PIN_RESET);
 80016c0:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c2:	400b      	ands	r3, r1
 80016c4:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin|LCD_BLC_Pin, GPIO_PIN_RESET);
 80016c6:	0021      	movs	r1, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c8:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 80016ca:	25c0      	movs	r5, #192	; 0xc0
  HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin|LCD_BLC_Pin, GPIO_PIN_RESET);
 80016cc:	f7ff f95c 	bl	8000988 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2180      	movs	r1, #128	; 0x80
 80016d4:	4854      	ldr	r0, [pc, #336]	; (8001828 <main+0x1c0>)
 80016d6:	f7ff f957 	bl	8000988 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 80016da:	2090      	movs	r0, #144	; 0x90
 80016dc:	00ad      	lsls	r5, r5, #2
 80016de:	2200      	movs	r2, #0
 80016e0:	0029      	movs	r1, r5
 80016e2:	05c0      	lsls	r0, r0, #23
 80016e4:	f7ff f950 	bl	8000988 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin LCD_BLC_Pin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin|LCD_BLC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e8:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin|LCD_BLC_Pin;
 80016ea:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ee:	a90d      	add	r1, sp, #52	; 0x34
 80016f0:	484c      	ldr	r0, [pc, #304]	; (8001824 <main+0x1bc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f2:	970e      	str	r7, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f8:	f7ff f88a 	bl	8000810 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_E_Pin */
  GPIO_InitStruct.Pin = LCD_E_Pin;
 80016fc:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LCD_E_GPIO_Port, &GPIO_InitStruct);
 80016fe:	a90d      	add	r1, sp, #52	; 0x34
 8001700:	4849      	ldr	r0, [pc, #292]	; (8001828 <main+0x1c0>)
  GPIO_InitStruct.Pin = LCD_E_Pin;
 8001702:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001704:	970e      	str	r7, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(LCD_E_GPIO_Port, &GPIO_InitStruct);
 800170a:	f7ff f881 	bl	8000810 <HAL_GPIO_Init>
  /*Configure GPIO pins : LCD_D7_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170e:	2090      	movs	r0, #144	; 0x90
 8001710:	a90d      	add	r1, sp, #52	; 0x34
 8001712:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_RS_Pin;
 8001714:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001716:	970e      	str	r7, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171c:	f7ff f878 	bl	8000810 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001720:	2312      	movs	r3, #18
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001722:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001724:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001726:	483f      	ldr	r0, [pc, #252]	; (8001824 <main+0x1bc>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001728:	3b0f      	subs	r3, #15
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800172a:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800172c:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800172e:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001730:	9711      	str	r7, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001732:	f7ff f86d 	bl	8000810 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8001736:	483d      	ldr	r0, [pc, #244]	; (800182c <main+0x1c4>)
 8001738:	4b3d      	ldr	r3, [pc, #244]	; (8001830 <main+0x1c8>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 800173a:	260c      	movs	r6, #12
  huart2.Instance = USART2;
 800173c:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 800173e:	23e1      	movs	r3, #225	; 0xe1
 8001740:	025b      	lsls	r3, r3, #9
 8001742:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001744:	6084      	str	r4, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001746:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001748:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800174a:	6146      	str	r6, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174c:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800174e:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001750:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001752:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001754:	f7ff ff28 	bl	80015a8 <HAL_UART_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001758:	0032      	movs	r2, r6
 800175a:	0021      	movs	r1, r4
 800175c:	a80d      	add	r0, sp, #52	; 0x34
 800175e:	f000 f968 	bl	8001a32 <memset>
  hadc.Instance = ADC1;
 8001762:	4d34      	ldr	r5, [pc, #208]	; (8001834 <main+0x1cc>)
 8001764:	4b34      	ldr	r3, [pc, #208]	; (8001838 <main+0x1d0>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001766:	0028      	movs	r0, r5
  hadc.Instance = ADC1;
 8001768:	602b      	str	r3, [r5, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800176a:	2304      	movs	r3, #4
 800176c:	616b      	str	r3, [r5, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800176e:	23c2      	movs	r3, #194	; 0xc2
 8001770:	33ff      	adds	r3, #255	; 0xff
 8001772:	61eb      	str	r3, [r5, #28]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001774:	1d6b      	adds	r3, r5, #5
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001776:	612f      	str	r7, [r5, #16]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001778:	62af      	str	r7, [r5, #40]	; 0x28
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800177a:	606c      	str	r4, [r5, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800177c:	60ac      	str	r4, [r5, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800177e:	60ec      	str	r4, [r5, #12]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001780:	762c      	strb	r4, [r5, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001782:	766c      	strb	r4, [r5, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001784:	76ac      	strb	r4, [r5, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001786:	76ec      	strb	r4, [r5, #27]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001788:	622c      	str	r4, [r5, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800178a:	77dc      	strb	r4, [r3, #31]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800178c:	f7fe fece 	bl	800052c <HAL_ADC_Init>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001790:	2380      	movs	r3, #128	; 0x80
 8001792:	015b      	lsls	r3, r3, #5
 8001794:	930e      	str	r3, [sp, #56]	; 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001796:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001798:	a90d      	add	r1, sp, #52	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800179a:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800179c:	0028      	movs	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800179e:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.Channel = ADC_CHANNEL_0;
 80017a0:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80017a2:	f7fe ff6b 	bl	800067c <HAL_ADC_ConfigChannel>
  lcd_Init(16, 2);
 80017a6:	2102      	movs	r1, #2
 80017a8:	2010      	movs	r0, #16
 80017aa:	f7fe fdfd 	bl	80003a8 <lcd_Init>
  HAL_GPIO_WritePin(BL_GPIO_Port,BL_Pin,1);
 80017ae:	003a      	movs	r2, r7
 80017b0:	2140      	movs	r1, #64	; 0x40
 80017b2:	481c      	ldr	r0, [pc, #112]	; (8001824 <main+0x1bc>)
    HAL_Delay(1000);
 80017b4:	27fa      	movs	r7, #250	; 0xfa
  HAL_GPIO_WritePin(BL_GPIO_Port,BL_Pin,1);
 80017b6:	f7ff f8e7 	bl	8000988 <HAL_GPIO_WritePin>
  uint8_t min  = 0;
 80017ba:	0025      	movs	r5, r4
    HAL_Delay(1000);
 80017bc:	00bf      	lsls	r7, r7, #2
  	HAL_UART_Transmit(&huart2, (uint8_t *)mystr1,sizeof(mystr1)/sizeof(mystr1[0]),100);
 80017be:	2364      	movs	r3, #100	; 0x64
 80017c0:	2210      	movs	r2, #16
 80017c2:	a909      	add	r1, sp, #36	; 0x24
 80017c4:	4819      	ldr	r0, [pc, #100]	; (800182c <main+0x1c4>)
 80017c6:	f7ff fe55 	bl	8001474 <HAL_UART_Transmit>
    sprintf(test_string0,"2020/05/16[SAT]");
 80017ca:	491c      	ldr	r1, [pc, #112]	; (800183c <main+0x1d4>)
 80017cc:	a805      	add	r0, sp, #20
 80017ce:	f000 f95b 	bl	8001a88 <strcpy>
    lcd_setCurStr(0, 0, test_string0);
 80017d2:	2100      	movs	r1, #0
 80017d4:	aa05      	add	r2, sp, #20
 80017d6:	0008      	movs	r0, r1
 80017d8:	f7fe fe47 	bl	800046a <lcd_setCurStr>
    sprintf(test_string1,"%02d:%02d:%02d",hour, min, sec);
 80017dc:	9400      	str	r4, [sp, #0]
    if(++sec>=60)
 80017de:	3401      	adds	r4, #1
    sprintf(test_string1,"%02d:%02d:%02d",hour, min, sec);
 80017e0:	002b      	movs	r3, r5
 80017e2:	0032      	movs	r2, r6
 80017e4:	4916      	ldr	r1, [pc, #88]	; (8001840 <main+0x1d8>)
 80017e6:	a80d      	add	r0, sp, #52	; 0x34
    if(++sec>=60)
 80017e8:	b2e4      	uxtb	r4, r4
    sprintf(test_string1,"%02d:%02d:%02d",hour, min, sec);
 80017ea:	f000 f92b 	bl	8001a44 <siprintf>
    if(++sec>=60)
 80017ee:	2c3b      	cmp	r4, #59	; 0x3b
 80017f0:	d90a      	bls.n	8001808 <main+0x1a0>
    	if(++min>=60)
 80017f2:	3501      	adds	r5, #1
 80017f4:	b2ed      	uxtb	r5, r5
    	sec=0;
 80017f6:	2400      	movs	r4, #0
    	if(++min>=60)
 80017f8:	2d3b      	cmp	r5, #59	; 0x3b
 80017fa:	d905      	bls.n	8001808 <main+0x1a0>
    		if(++hour>=24)
 80017fc:	3601      	adds	r6, #1
 80017fe:	b2f6      	uxtb	r6, r6
    		min=0;
 8001800:	0025      	movs	r5, r4
    		if(++hour>=24)
 8001802:	2e17      	cmp	r6, #23
 8001804:	d900      	bls.n	8001808 <main+0x1a0>
    			hour=0;
 8001806:	0026      	movs	r6, r4
    lcd_setCurStr(0, 1, test_string1);
 8001808:	aa0d      	add	r2, sp, #52	; 0x34
 800180a:	2101      	movs	r1, #1
 800180c:	2000      	movs	r0, #0
 800180e:	f7fe fe2c 	bl	800046a <lcd_setCurStr>
    HAL_Delay(1000);
 8001812:	0038      	movs	r0, r7
 8001814:	f7fe fe78 	bl	8000508 <HAL_Delay>
  	HAL_UART_Transmit(&huart2, (uint8_t *)mystr1,sizeof(mystr1)/sizeof(mystr1[0]),100);
 8001818:	e7d1      	b.n	80017be <main+0x156>
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	080022df 	.word	0x080022df
 8001820:	40021000 	.word	0x40021000
 8001824:	48000400 	.word	0x48000400
 8001828:	48000800 	.word	0x48000800
 800182c:	200000c0 	.word	0x200000c0
 8001830:	40004400 	.word	0x40004400
 8001834:	20000140 	.word	0x20000140
 8001838:	40012400 	.word	0x40012400
 800183c:	080022c0 	.word	0x080022c0
 8001840:	080022d0 	.word	0x080022d0

08001844 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001844:	2001      	movs	r0, #1
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_MspInit+0x2c>)
{
 8001848:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184a:	6999      	ldr	r1, [r3, #24]
 800184c:	4301      	orrs	r1, r0
 800184e:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001850:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001852:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001854:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001856:	4002      	ands	r2, r0
 8001858:	9200      	str	r2, [sp, #0]
 800185a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185c:	69da      	ldr	r2, [r3, #28]
 800185e:	430a      	orrs	r2, r1
 8001860:	61da      	str	r2, [r3, #28]
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	400b      	ands	r3, r1
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186a:	b002      	add	sp, #8
 800186c:	4770      	bx	lr
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	40021000 	.word	0x40021000

08001874 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001874:	b510      	push	{r4, lr}
 8001876:	0004      	movs	r4, r0
 8001878:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187a:	2214      	movs	r2, #20
 800187c:	2100      	movs	r1, #0
 800187e:	a803      	add	r0, sp, #12
 8001880:	f000 f8d7 	bl	8001a32 <memset>
  if(hadc->Instance==ADC1)
 8001884:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <HAL_ADC_MspInit+0x54>)
 8001886:	6822      	ldr	r2, [r4, #0]
 8001888:	429a      	cmp	r2, r3
 800188a:	d11b      	bne.n	80018c4 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800188c:	2080      	movs	r0, #128	; 0x80
 800188e:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <HAL_ADC_MspInit+0x58>)
 8001890:	0080      	lsls	r0, r0, #2
 8001892:	6999      	ldr	r1, [r3, #24]
 8001894:	4301      	orrs	r1, r0
 8001896:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001898:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 800189a:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189c:	0289      	lsls	r1, r1, #10
    __HAL_RCC_ADC1_CLK_ENABLE();
 800189e:	4002      	ands	r2, r0
 80018a0:	9201      	str	r2, [sp, #4]
 80018a2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a4:	695a      	ldr	r2, [r3, #20]
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a8:	430a      	orrs	r2, r1
 80018aa:	615a      	str	r2, [r3, #20]
 80018ac:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ae:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b0:	400b      	ands	r3, r1
 80018b2:	9302      	str	r3, [sp, #8]
 80018b4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018b6:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018bc:	3302      	adds	r3, #2
 80018be:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c0:	f7fe ffa6 	bl	8000810 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018c4:	b008      	add	sp, #32
 80018c6:	bd10      	pop	{r4, pc}
 80018c8:	40012400 	.word	0x40012400
 80018cc:	40021000 	.word	0x40021000

080018d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018d0:	b510      	push	{r4, lr}
 80018d2:	0004      	movs	r4, r0
 80018d4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d6:	2214      	movs	r2, #20
 80018d8:	2100      	movs	r1, #0
 80018da:	a803      	add	r0, sp, #12
 80018dc:	f000 f8a9 	bl	8001a32 <memset>
  if(huart->Instance==USART2)
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <HAL_UART_MspInit+0x58>)
 80018e2:	6822      	ldr	r2, [r4, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d11d      	bne.n	8001924 <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018e8:	2280      	movs	r2, #128	; 0x80
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <HAL_UART_MspInit+0x5c>)
 80018ec:	0292      	lsls	r2, r2, #10
 80018ee:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 80018f2:	4311      	orrs	r1, r2
 80018f4:	61d9      	str	r1, [r3, #28]
 80018f6:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 80018fa:	4011      	ands	r1, r2
 80018fc:	9101      	str	r1, [sp, #4]
 80018fe:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001900:	6959      	ldr	r1, [r3, #20]
 8001902:	4311      	orrs	r1, r2
 8001904:	6159      	str	r1, [r3, #20]
 8001906:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001908:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190a:	401a      	ands	r2, r3
 800190c:	9202      	str	r2, [sp, #8]
 800190e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001910:	230c      	movs	r3, #12
 8001912:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	3b0a      	subs	r3, #10
 8001916:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001918:	3301      	adds	r3, #1
 800191a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800191c:	3b02      	subs	r3, #2
 800191e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001920:	f7fe ff76 	bl	8000810 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001924:	b008      	add	sp, #32
 8001926:	bd10      	pop	{r4, pc}
 8001928:	40004400 	.word	0x40004400
 800192c:	40021000 	.word	0x40021000

08001930 <NMI_Handler>:
 8001930:	4770      	bx	lr

08001932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001932:	e7fe      	b.n	8001932 <HardFault_Handler>

08001934 <SVC_Handler>:
 8001934:	4770      	bx	lr

08001936 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001936:	4770      	bx	lr

08001938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001938:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800193a:	f7fe fdd3 	bl	80004e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800193e:	bd10      	pop	{r4, pc}

08001940 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001940:	4b0a      	ldr	r3, [pc, #40]	; (800196c <_sbrk+0x2c>)
{
 8001942:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8001944:	6819      	ldr	r1, [r3, #0]
{
 8001946:	0002      	movs	r2, r0
	if (heap_end == 0)
 8001948:	2900      	cmp	r1, #0
 800194a:	d101      	bne.n	8001950 <_sbrk+0x10>
		heap_end = &end;
 800194c:	4908      	ldr	r1, [pc, #32]	; (8001970 <_sbrk+0x30>)
 800194e:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001950:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001952:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001954:	1882      	adds	r2, r0, r2
 8001956:	428a      	cmp	r2, r1
 8001958:	d906      	bls.n	8001968 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800195a:	f000 f837 	bl	80019cc <__errno>
 800195e:	230c      	movs	r3, #12
 8001960:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001962:	2001      	movs	r0, #1
 8001964:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8001966:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8001968:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 800196a:	e7fc      	b.n	8001966 <_sbrk+0x26>
 800196c:	200000a4 	.word	0x200000a4
 8001970:	20000184 	.word	0x20000184

08001974 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001974:	4770      	bx	lr
	...

08001978 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001978:	480d      	ldr	r0, [pc, #52]	; (80019b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800197a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800197c:	480d      	ldr	r0, [pc, #52]	; (80019b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800197e:	490e      	ldr	r1, [pc, #56]	; (80019b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001980:	4a0e      	ldr	r2, [pc, #56]	; (80019bc <LoopForever+0xe>)
  movs r3, #0
 8001982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001984:	e002      	b.n	800198c <LoopCopyDataInit>

08001986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198a:	3304      	adds	r3, #4

0800198c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800198c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001990:	d3f9      	bcc.n	8001986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001992:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001994:	4c0b      	ldr	r4, [pc, #44]	; (80019c4 <LoopForever+0x16>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001998:	e001      	b.n	800199e <LoopFillZerobss>

0800199a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800199c:	3204      	adds	r2, #4

0800199e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a0:	d3fb      	bcc.n	800199a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80019a2:	f7ff ffe7 	bl	8001974 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80019a6:	f000 f817 	bl	80019d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019aa:	f7ff fe5d 	bl	8001668 <main>

080019ae <LoopForever>:

LoopForever:
    b LoopForever
 80019ae:	e7fe      	b.n	80019ae <LoopForever>
  ldr   r0, =_estack
 80019b0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80019b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80019bc:	08002344 	.word	0x08002344
  ldr r2, =_sbss
 80019c0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80019c4:	20000184 	.word	0x20000184

080019c8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019c8:	e7fe      	b.n	80019c8 <ADC1_COMP_IRQHandler>
	...

080019cc <__errno>:
 80019cc:	4b01      	ldr	r3, [pc, #4]	; (80019d4 <__errno+0x8>)
 80019ce:	6818      	ldr	r0, [r3, #0]
 80019d0:	4770      	bx	lr
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	20000024 	.word	0x20000024

080019d8 <__libc_init_array>:
 80019d8:	b570      	push	{r4, r5, r6, lr}
 80019da:	2600      	movs	r6, #0
 80019dc:	4d0c      	ldr	r5, [pc, #48]	; (8001a10 <__libc_init_array+0x38>)
 80019de:	4c0d      	ldr	r4, [pc, #52]	; (8001a14 <__libc_init_array+0x3c>)
 80019e0:	1b64      	subs	r4, r4, r5
 80019e2:	10a4      	asrs	r4, r4, #2
 80019e4:	42a6      	cmp	r6, r4
 80019e6:	d109      	bne.n	80019fc <__libc_init_array+0x24>
 80019e8:	2600      	movs	r6, #0
 80019ea:	f000 fc4b 	bl	8002284 <_init>
 80019ee:	4d0a      	ldr	r5, [pc, #40]	; (8001a18 <__libc_init_array+0x40>)
 80019f0:	4c0a      	ldr	r4, [pc, #40]	; (8001a1c <__libc_init_array+0x44>)
 80019f2:	1b64      	subs	r4, r4, r5
 80019f4:	10a4      	asrs	r4, r4, #2
 80019f6:	42a6      	cmp	r6, r4
 80019f8:	d105      	bne.n	8001a06 <__libc_init_array+0x2e>
 80019fa:	bd70      	pop	{r4, r5, r6, pc}
 80019fc:	00b3      	lsls	r3, r6, #2
 80019fe:	58eb      	ldr	r3, [r5, r3]
 8001a00:	4798      	blx	r3
 8001a02:	3601      	adds	r6, #1
 8001a04:	e7ee      	b.n	80019e4 <__libc_init_array+0xc>
 8001a06:	00b3      	lsls	r3, r6, #2
 8001a08:	58eb      	ldr	r3, [r5, r3]
 8001a0a:	4798      	blx	r3
 8001a0c:	3601      	adds	r6, #1
 8001a0e:	e7f2      	b.n	80019f6 <__libc_init_array+0x1e>
 8001a10:	0800233c 	.word	0x0800233c
 8001a14:	0800233c 	.word	0x0800233c
 8001a18:	0800233c 	.word	0x0800233c
 8001a1c:	08002340 	.word	0x08002340

08001a20 <memcpy>:
 8001a20:	2300      	movs	r3, #0
 8001a22:	b510      	push	{r4, lr}
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d100      	bne.n	8001a2a <memcpy+0xa>
 8001a28:	bd10      	pop	{r4, pc}
 8001a2a:	5ccc      	ldrb	r4, [r1, r3]
 8001a2c:	54c4      	strb	r4, [r0, r3]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	e7f8      	b.n	8001a24 <memcpy+0x4>

08001a32 <memset>:
 8001a32:	0003      	movs	r3, r0
 8001a34:	1882      	adds	r2, r0, r2
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d100      	bne.n	8001a3c <memset+0xa>
 8001a3a:	4770      	bx	lr
 8001a3c:	7019      	strb	r1, [r3, #0]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	e7f9      	b.n	8001a36 <memset+0x4>
	...

08001a44 <siprintf>:
 8001a44:	b40e      	push	{r1, r2, r3}
 8001a46:	b510      	push	{r4, lr}
 8001a48:	b09d      	sub	sp, #116	; 0x74
 8001a4a:	a902      	add	r1, sp, #8
 8001a4c:	9002      	str	r0, [sp, #8]
 8001a4e:	6108      	str	r0, [r1, #16]
 8001a50:	480b      	ldr	r0, [pc, #44]	; (8001a80 <siprintf+0x3c>)
 8001a52:	2482      	movs	r4, #130	; 0x82
 8001a54:	6088      	str	r0, [r1, #8]
 8001a56:	6148      	str	r0, [r1, #20]
 8001a58:	2001      	movs	r0, #1
 8001a5a:	4240      	negs	r0, r0
 8001a5c:	ab1f      	add	r3, sp, #124	; 0x7c
 8001a5e:	81c8      	strh	r0, [r1, #14]
 8001a60:	4808      	ldr	r0, [pc, #32]	; (8001a84 <siprintf+0x40>)
 8001a62:	cb04      	ldmia	r3!, {r2}
 8001a64:	00a4      	lsls	r4, r4, #2
 8001a66:	6800      	ldr	r0, [r0, #0]
 8001a68:	9301      	str	r3, [sp, #4]
 8001a6a:	818c      	strh	r4, [r1, #12]
 8001a6c:	f000 f876 	bl	8001b5c <_svfiprintf_r>
 8001a70:	2300      	movs	r3, #0
 8001a72:	9a02      	ldr	r2, [sp, #8]
 8001a74:	7013      	strb	r3, [r2, #0]
 8001a76:	b01d      	add	sp, #116	; 0x74
 8001a78:	bc10      	pop	{r4}
 8001a7a:	bc08      	pop	{r3}
 8001a7c:	b003      	add	sp, #12
 8001a7e:	4718      	bx	r3
 8001a80:	7fffffff 	.word	0x7fffffff
 8001a84:	20000024 	.word	0x20000024

08001a88 <strcpy>:
 8001a88:	1c03      	adds	r3, r0, #0
 8001a8a:	780a      	ldrb	r2, [r1, #0]
 8001a8c:	3101      	adds	r1, #1
 8001a8e:	701a      	strb	r2, [r3, #0]
 8001a90:	3301      	adds	r3, #1
 8001a92:	2a00      	cmp	r2, #0
 8001a94:	d1f9      	bne.n	8001a8a <strcpy+0x2>
 8001a96:	4770      	bx	lr

08001a98 <__ssputs_r>:
 8001a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a9a:	688e      	ldr	r6, [r1, #8]
 8001a9c:	b085      	sub	sp, #20
 8001a9e:	0007      	movs	r7, r0
 8001aa0:	000c      	movs	r4, r1
 8001aa2:	9203      	str	r2, [sp, #12]
 8001aa4:	9301      	str	r3, [sp, #4]
 8001aa6:	429e      	cmp	r6, r3
 8001aa8:	d839      	bhi.n	8001b1e <__ssputs_r+0x86>
 8001aaa:	2390      	movs	r3, #144	; 0x90
 8001aac:	898a      	ldrh	r2, [r1, #12]
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	421a      	tst	r2, r3
 8001ab2:	d034      	beq.n	8001b1e <__ssputs_r+0x86>
 8001ab4:	2503      	movs	r5, #3
 8001ab6:	6909      	ldr	r1, [r1, #16]
 8001ab8:	6823      	ldr	r3, [r4, #0]
 8001aba:	1a5b      	subs	r3, r3, r1
 8001abc:	9302      	str	r3, [sp, #8]
 8001abe:	6963      	ldr	r3, [r4, #20]
 8001ac0:	9802      	ldr	r0, [sp, #8]
 8001ac2:	435d      	muls	r5, r3
 8001ac4:	0feb      	lsrs	r3, r5, #31
 8001ac6:	195d      	adds	r5, r3, r5
 8001ac8:	9b01      	ldr	r3, [sp, #4]
 8001aca:	106d      	asrs	r5, r5, #1
 8001acc:	3301      	adds	r3, #1
 8001ace:	181b      	adds	r3, r3, r0
 8001ad0:	42ab      	cmp	r3, r5
 8001ad2:	d900      	bls.n	8001ad6 <__ssputs_r+0x3e>
 8001ad4:	001d      	movs	r5, r3
 8001ad6:	0553      	lsls	r3, r2, #21
 8001ad8:	d532      	bpl.n	8001b40 <__ssputs_r+0xa8>
 8001ada:	0029      	movs	r1, r5
 8001adc:	0038      	movs	r0, r7
 8001ade:	f000 fb31 	bl	8002144 <_malloc_r>
 8001ae2:	1e06      	subs	r6, r0, #0
 8001ae4:	d109      	bne.n	8001afa <__ssputs_r+0x62>
 8001ae6:	230c      	movs	r3, #12
 8001ae8:	603b      	str	r3, [r7, #0]
 8001aea:	2340      	movs	r3, #64	; 0x40
 8001aec:	2001      	movs	r0, #1
 8001aee:	89a2      	ldrh	r2, [r4, #12]
 8001af0:	4240      	negs	r0, r0
 8001af2:	4313      	orrs	r3, r2
 8001af4:	81a3      	strh	r3, [r4, #12]
 8001af6:	b005      	add	sp, #20
 8001af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001afa:	9a02      	ldr	r2, [sp, #8]
 8001afc:	6921      	ldr	r1, [r4, #16]
 8001afe:	f7ff ff8f 	bl	8001a20 <memcpy>
 8001b02:	89a3      	ldrh	r3, [r4, #12]
 8001b04:	4a14      	ldr	r2, [pc, #80]	; (8001b58 <__ssputs_r+0xc0>)
 8001b06:	401a      	ands	r2, r3
 8001b08:	2380      	movs	r3, #128	; 0x80
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	81a3      	strh	r3, [r4, #12]
 8001b0e:	9b02      	ldr	r3, [sp, #8]
 8001b10:	6126      	str	r6, [r4, #16]
 8001b12:	18f6      	adds	r6, r6, r3
 8001b14:	6026      	str	r6, [r4, #0]
 8001b16:	6165      	str	r5, [r4, #20]
 8001b18:	9e01      	ldr	r6, [sp, #4]
 8001b1a:	1aed      	subs	r5, r5, r3
 8001b1c:	60a5      	str	r5, [r4, #8]
 8001b1e:	9b01      	ldr	r3, [sp, #4]
 8001b20:	42b3      	cmp	r3, r6
 8001b22:	d200      	bcs.n	8001b26 <__ssputs_r+0x8e>
 8001b24:	001e      	movs	r6, r3
 8001b26:	0032      	movs	r2, r6
 8001b28:	9903      	ldr	r1, [sp, #12]
 8001b2a:	6820      	ldr	r0, [r4, #0]
 8001b2c:	f000 faad 	bl	800208a <memmove>
 8001b30:	68a3      	ldr	r3, [r4, #8]
 8001b32:	2000      	movs	r0, #0
 8001b34:	1b9b      	subs	r3, r3, r6
 8001b36:	60a3      	str	r3, [r4, #8]
 8001b38:	6823      	ldr	r3, [r4, #0]
 8001b3a:	199e      	adds	r6, r3, r6
 8001b3c:	6026      	str	r6, [r4, #0]
 8001b3e:	e7da      	b.n	8001af6 <__ssputs_r+0x5e>
 8001b40:	002a      	movs	r2, r5
 8001b42:	0038      	movs	r0, r7
 8001b44:	f000 fb5c 	bl	8002200 <_realloc_r>
 8001b48:	1e06      	subs	r6, r0, #0
 8001b4a:	d1e0      	bne.n	8001b0e <__ssputs_r+0x76>
 8001b4c:	6921      	ldr	r1, [r4, #16]
 8001b4e:	0038      	movs	r0, r7
 8001b50:	f000 faae 	bl	80020b0 <_free_r>
 8001b54:	e7c7      	b.n	8001ae6 <__ssputs_r+0x4e>
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	fffffb7f 	.word	0xfffffb7f

08001b5c <_svfiprintf_r>:
 8001b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b5e:	b09f      	sub	sp, #124	; 0x7c
 8001b60:	9002      	str	r0, [sp, #8]
 8001b62:	9305      	str	r3, [sp, #20]
 8001b64:	898b      	ldrh	r3, [r1, #12]
 8001b66:	000f      	movs	r7, r1
 8001b68:	0016      	movs	r6, r2
 8001b6a:	061b      	lsls	r3, r3, #24
 8001b6c:	d511      	bpl.n	8001b92 <_svfiprintf_r+0x36>
 8001b6e:	690b      	ldr	r3, [r1, #16]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d10e      	bne.n	8001b92 <_svfiprintf_r+0x36>
 8001b74:	2140      	movs	r1, #64	; 0x40
 8001b76:	f000 fae5 	bl	8002144 <_malloc_r>
 8001b7a:	6038      	str	r0, [r7, #0]
 8001b7c:	6138      	str	r0, [r7, #16]
 8001b7e:	2800      	cmp	r0, #0
 8001b80:	d105      	bne.n	8001b8e <_svfiprintf_r+0x32>
 8001b82:	230c      	movs	r3, #12
 8001b84:	9a02      	ldr	r2, [sp, #8]
 8001b86:	3801      	subs	r0, #1
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	b01f      	add	sp, #124	; 0x7c
 8001b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b8e:	2340      	movs	r3, #64	; 0x40
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	2300      	movs	r3, #0
 8001b94:	ad06      	add	r5, sp, #24
 8001b96:	616b      	str	r3, [r5, #20]
 8001b98:	3320      	adds	r3, #32
 8001b9a:	766b      	strb	r3, [r5, #25]
 8001b9c:	3310      	adds	r3, #16
 8001b9e:	76ab      	strb	r3, [r5, #26]
 8001ba0:	0034      	movs	r4, r6
 8001ba2:	7823      	ldrb	r3, [r4, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d147      	bne.n	8001c38 <_svfiprintf_r+0xdc>
 8001ba8:	1ba3      	subs	r3, r4, r6
 8001baa:	9304      	str	r3, [sp, #16]
 8001bac:	d00d      	beq.n	8001bca <_svfiprintf_r+0x6e>
 8001bae:	1ba3      	subs	r3, r4, r6
 8001bb0:	0032      	movs	r2, r6
 8001bb2:	0039      	movs	r1, r7
 8001bb4:	9802      	ldr	r0, [sp, #8]
 8001bb6:	f7ff ff6f 	bl	8001a98 <__ssputs_r>
 8001bba:	1c43      	adds	r3, r0, #1
 8001bbc:	d100      	bne.n	8001bc0 <_svfiprintf_r+0x64>
 8001bbe:	e0b5      	b.n	8001d2c <_svfiprintf_r+0x1d0>
 8001bc0:	696a      	ldr	r2, [r5, #20]
 8001bc2:	9b04      	ldr	r3, [sp, #16]
 8001bc4:	4694      	mov	ip, r2
 8001bc6:	4463      	add	r3, ip
 8001bc8:	616b      	str	r3, [r5, #20]
 8001bca:	7823      	ldrb	r3, [r4, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d100      	bne.n	8001bd2 <_svfiprintf_r+0x76>
 8001bd0:	e0ac      	b.n	8001d2c <_svfiprintf_r+0x1d0>
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	4252      	negs	r2, r2
 8001bd8:	606a      	str	r2, [r5, #4]
 8001bda:	a902      	add	r1, sp, #8
 8001bdc:	3254      	adds	r2, #84	; 0x54
 8001bde:	1852      	adds	r2, r2, r1
 8001be0:	3401      	adds	r4, #1
 8001be2:	602b      	str	r3, [r5, #0]
 8001be4:	60eb      	str	r3, [r5, #12]
 8001be6:	60ab      	str	r3, [r5, #8]
 8001be8:	7013      	strb	r3, [r2, #0]
 8001bea:	65ab      	str	r3, [r5, #88]	; 0x58
 8001bec:	4e58      	ldr	r6, [pc, #352]	; (8001d50 <_svfiprintf_r+0x1f4>)
 8001bee:	2205      	movs	r2, #5
 8001bf0:	7821      	ldrb	r1, [r4, #0]
 8001bf2:	0030      	movs	r0, r6
 8001bf4:	f000 fa3e 	bl	8002074 <memchr>
 8001bf8:	1c62      	adds	r2, r4, #1
 8001bfa:	2800      	cmp	r0, #0
 8001bfc:	d120      	bne.n	8001c40 <_svfiprintf_r+0xe4>
 8001bfe:	6829      	ldr	r1, [r5, #0]
 8001c00:	06cb      	lsls	r3, r1, #27
 8001c02:	d504      	bpl.n	8001c0e <_svfiprintf_r+0xb2>
 8001c04:	2353      	movs	r3, #83	; 0x53
 8001c06:	ae02      	add	r6, sp, #8
 8001c08:	3020      	adds	r0, #32
 8001c0a:	199b      	adds	r3, r3, r6
 8001c0c:	7018      	strb	r0, [r3, #0]
 8001c0e:	070b      	lsls	r3, r1, #28
 8001c10:	d504      	bpl.n	8001c1c <_svfiprintf_r+0xc0>
 8001c12:	2353      	movs	r3, #83	; 0x53
 8001c14:	202b      	movs	r0, #43	; 0x2b
 8001c16:	ae02      	add	r6, sp, #8
 8001c18:	199b      	adds	r3, r3, r6
 8001c1a:	7018      	strb	r0, [r3, #0]
 8001c1c:	7823      	ldrb	r3, [r4, #0]
 8001c1e:	2b2a      	cmp	r3, #42	; 0x2a
 8001c20:	d016      	beq.n	8001c50 <_svfiprintf_r+0xf4>
 8001c22:	2000      	movs	r0, #0
 8001c24:	210a      	movs	r1, #10
 8001c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c28:	7822      	ldrb	r2, [r4, #0]
 8001c2a:	3a30      	subs	r2, #48	; 0x30
 8001c2c:	2a09      	cmp	r2, #9
 8001c2e:	d955      	bls.n	8001cdc <_svfiprintf_r+0x180>
 8001c30:	2800      	cmp	r0, #0
 8001c32:	d015      	beq.n	8001c60 <_svfiprintf_r+0x104>
 8001c34:	9309      	str	r3, [sp, #36]	; 0x24
 8001c36:	e013      	b.n	8001c60 <_svfiprintf_r+0x104>
 8001c38:	2b25      	cmp	r3, #37	; 0x25
 8001c3a:	d0b5      	beq.n	8001ba8 <_svfiprintf_r+0x4c>
 8001c3c:	3401      	adds	r4, #1
 8001c3e:	e7b0      	b.n	8001ba2 <_svfiprintf_r+0x46>
 8001c40:	2301      	movs	r3, #1
 8001c42:	1b80      	subs	r0, r0, r6
 8001c44:	4083      	lsls	r3, r0
 8001c46:	6829      	ldr	r1, [r5, #0]
 8001c48:	0014      	movs	r4, r2
 8001c4a:	430b      	orrs	r3, r1
 8001c4c:	602b      	str	r3, [r5, #0]
 8001c4e:	e7cd      	b.n	8001bec <_svfiprintf_r+0x90>
 8001c50:	9b05      	ldr	r3, [sp, #20]
 8001c52:	1d18      	adds	r0, r3, #4
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	9005      	str	r0, [sp, #20]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	db39      	blt.n	8001cd0 <_svfiprintf_r+0x174>
 8001c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8001c5e:	0014      	movs	r4, r2
 8001c60:	7823      	ldrb	r3, [r4, #0]
 8001c62:	2b2e      	cmp	r3, #46	; 0x2e
 8001c64:	d10b      	bne.n	8001c7e <_svfiprintf_r+0x122>
 8001c66:	7863      	ldrb	r3, [r4, #1]
 8001c68:	1c62      	adds	r2, r4, #1
 8001c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8001c6c:	d13e      	bne.n	8001cec <_svfiprintf_r+0x190>
 8001c6e:	9b05      	ldr	r3, [sp, #20]
 8001c70:	3402      	adds	r4, #2
 8001c72:	1d1a      	adds	r2, r3, #4
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	9205      	str	r2, [sp, #20]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	db34      	blt.n	8001ce6 <_svfiprintf_r+0x18a>
 8001c7c:	9307      	str	r3, [sp, #28]
 8001c7e:	4e35      	ldr	r6, [pc, #212]	; (8001d54 <_svfiprintf_r+0x1f8>)
 8001c80:	7821      	ldrb	r1, [r4, #0]
 8001c82:	2203      	movs	r2, #3
 8001c84:	0030      	movs	r0, r6
 8001c86:	f000 f9f5 	bl	8002074 <memchr>
 8001c8a:	2800      	cmp	r0, #0
 8001c8c:	d006      	beq.n	8001c9c <_svfiprintf_r+0x140>
 8001c8e:	2340      	movs	r3, #64	; 0x40
 8001c90:	1b80      	subs	r0, r0, r6
 8001c92:	4083      	lsls	r3, r0
 8001c94:	682a      	ldr	r2, [r5, #0]
 8001c96:	3401      	adds	r4, #1
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	602b      	str	r3, [r5, #0]
 8001c9c:	7821      	ldrb	r1, [r4, #0]
 8001c9e:	2206      	movs	r2, #6
 8001ca0:	482d      	ldr	r0, [pc, #180]	; (8001d58 <_svfiprintf_r+0x1fc>)
 8001ca2:	1c66      	adds	r6, r4, #1
 8001ca4:	7629      	strb	r1, [r5, #24]
 8001ca6:	f000 f9e5 	bl	8002074 <memchr>
 8001caa:	2800      	cmp	r0, #0
 8001cac:	d046      	beq.n	8001d3c <_svfiprintf_r+0x1e0>
 8001cae:	4b2b      	ldr	r3, [pc, #172]	; (8001d5c <_svfiprintf_r+0x200>)
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d12f      	bne.n	8001d14 <_svfiprintf_r+0x1b8>
 8001cb4:	6829      	ldr	r1, [r5, #0]
 8001cb6:	9b05      	ldr	r3, [sp, #20]
 8001cb8:	2207      	movs	r2, #7
 8001cba:	05c9      	lsls	r1, r1, #23
 8001cbc:	d528      	bpl.n	8001d10 <_svfiprintf_r+0x1b4>
 8001cbe:	189b      	adds	r3, r3, r2
 8001cc0:	4393      	bics	r3, r2
 8001cc2:	3308      	adds	r3, #8
 8001cc4:	9305      	str	r3, [sp, #20]
 8001cc6:	696b      	ldr	r3, [r5, #20]
 8001cc8:	9a03      	ldr	r2, [sp, #12]
 8001cca:	189b      	adds	r3, r3, r2
 8001ccc:	616b      	str	r3, [r5, #20]
 8001cce:	e767      	b.n	8001ba0 <_svfiprintf_r+0x44>
 8001cd0:	425b      	negs	r3, r3
 8001cd2:	60eb      	str	r3, [r5, #12]
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	430b      	orrs	r3, r1
 8001cd8:	602b      	str	r3, [r5, #0]
 8001cda:	e7c0      	b.n	8001c5e <_svfiprintf_r+0x102>
 8001cdc:	434b      	muls	r3, r1
 8001cde:	3401      	adds	r4, #1
 8001ce0:	189b      	adds	r3, r3, r2
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	e7a0      	b.n	8001c28 <_svfiprintf_r+0xcc>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	425b      	negs	r3, r3
 8001cea:	e7c7      	b.n	8001c7c <_svfiprintf_r+0x120>
 8001cec:	2300      	movs	r3, #0
 8001cee:	0014      	movs	r4, r2
 8001cf0:	200a      	movs	r0, #10
 8001cf2:	001a      	movs	r2, r3
 8001cf4:	606b      	str	r3, [r5, #4]
 8001cf6:	7821      	ldrb	r1, [r4, #0]
 8001cf8:	3930      	subs	r1, #48	; 0x30
 8001cfa:	2909      	cmp	r1, #9
 8001cfc:	d903      	bls.n	8001d06 <_svfiprintf_r+0x1aa>
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0bd      	beq.n	8001c7e <_svfiprintf_r+0x122>
 8001d02:	9207      	str	r2, [sp, #28]
 8001d04:	e7bb      	b.n	8001c7e <_svfiprintf_r+0x122>
 8001d06:	4342      	muls	r2, r0
 8001d08:	3401      	adds	r4, #1
 8001d0a:	1852      	adds	r2, r2, r1
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e7f2      	b.n	8001cf6 <_svfiprintf_r+0x19a>
 8001d10:	3307      	adds	r3, #7
 8001d12:	e7d5      	b.n	8001cc0 <_svfiprintf_r+0x164>
 8001d14:	ab05      	add	r3, sp, #20
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	003a      	movs	r2, r7
 8001d1a:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <_svfiprintf_r+0x204>)
 8001d1c:	0029      	movs	r1, r5
 8001d1e:	9802      	ldr	r0, [sp, #8]
 8001d20:	e000      	b.n	8001d24 <_svfiprintf_r+0x1c8>
 8001d22:	bf00      	nop
 8001d24:	9003      	str	r0, [sp, #12]
 8001d26:	9b03      	ldr	r3, [sp, #12]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	d1cc      	bne.n	8001cc6 <_svfiprintf_r+0x16a>
 8001d2c:	89bb      	ldrh	r3, [r7, #12]
 8001d2e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001d30:	065b      	lsls	r3, r3, #25
 8001d32:	d400      	bmi.n	8001d36 <_svfiprintf_r+0x1da>
 8001d34:	e729      	b.n	8001b8a <_svfiprintf_r+0x2e>
 8001d36:	2001      	movs	r0, #1
 8001d38:	4240      	negs	r0, r0
 8001d3a:	e726      	b.n	8001b8a <_svfiprintf_r+0x2e>
 8001d3c:	ab05      	add	r3, sp, #20
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	003a      	movs	r2, r7
 8001d42:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <_svfiprintf_r+0x204>)
 8001d44:	0029      	movs	r1, r5
 8001d46:	9802      	ldr	r0, [sp, #8]
 8001d48:	f000 f87a 	bl	8001e40 <_printf_i>
 8001d4c:	e7ea      	b.n	8001d24 <_svfiprintf_r+0x1c8>
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	08002307 	.word	0x08002307
 8001d54:	0800230d 	.word	0x0800230d
 8001d58:	08002311 	.word	0x08002311
 8001d5c:	00000000 	.word	0x00000000
 8001d60:	08001a99 	.word	0x08001a99

08001d64 <_printf_common>:
 8001d64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d66:	0015      	movs	r5, r2
 8001d68:	9301      	str	r3, [sp, #4]
 8001d6a:	688a      	ldr	r2, [r1, #8]
 8001d6c:	690b      	ldr	r3, [r1, #16]
 8001d6e:	9000      	str	r0, [sp, #0]
 8001d70:	000c      	movs	r4, r1
 8001d72:	4293      	cmp	r3, r2
 8001d74:	da00      	bge.n	8001d78 <_printf_common+0x14>
 8001d76:	0013      	movs	r3, r2
 8001d78:	0022      	movs	r2, r4
 8001d7a:	602b      	str	r3, [r5, #0]
 8001d7c:	3243      	adds	r2, #67	; 0x43
 8001d7e:	7812      	ldrb	r2, [r2, #0]
 8001d80:	2a00      	cmp	r2, #0
 8001d82:	d001      	beq.n	8001d88 <_printf_common+0x24>
 8001d84:	3301      	adds	r3, #1
 8001d86:	602b      	str	r3, [r5, #0]
 8001d88:	6823      	ldr	r3, [r4, #0]
 8001d8a:	069b      	lsls	r3, r3, #26
 8001d8c:	d502      	bpl.n	8001d94 <_printf_common+0x30>
 8001d8e:	682b      	ldr	r3, [r5, #0]
 8001d90:	3302      	adds	r3, #2
 8001d92:	602b      	str	r3, [r5, #0]
 8001d94:	2706      	movs	r7, #6
 8001d96:	6823      	ldr	r3, [r4, #0]
 8001d98:	401f      	ands	r7, r3
 8001d9a:	d027      	beq.n	8001dec <_printf_common+0x88>
 8001d9c:	0023      	movs	r3, r4
 8001d9e:	3343      	adds	r3, #67	; 0x43
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	1e5a      	subs	r2, r3, #1
 8001da4:	4193      	sbcs	r3, r2
 8001da6:	6822      	ldr	r2, [r4, #0]
 8001da8:	0692      	lsls	r2, r2, #26
 8001daa:	d430      	bmi.n	8001e0e <_printf_common+0xaa>
 8001dac:	0022      	movs	r2, r4
 8001dae:	9901      	ldr	r1, [sp, #4]
 8001db0:	3243      	adds	r2, #67	; 0x43
 8001db2:	9800      	ldr	r0, [sp, #0]
 8001db4:	9e08      	ldr	r6, [sp, #32]
 8001db6:	47b0      	blx	r6
 8001db8:	1c43      	adds	r3, r0, #1
 8001dba:	d025      	beq.n	8001e08 <_printf_common+0xa4>
 8001dbc:	2306      	movs	r3, #6
 8001dbe:	6820      	ldr	r0, [r4, #0]
 8001dc0:	682a      	ldr	r2, [r5, #0]
 8001dc2:	68e1      	ldr	r1, [r4, #12]
 8001dc4:	4003      	ands	r3, r0
 8001dc6:	2500      	movs	r5, #0
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	d103      	bne.n	8001dd4 <_printf_common+0x70>
 8001dcc:	1a8d      	subs	r5, r1, r2
 8001dce:	43eb      	mvns	r3, r5
 8001dd0:	17db      	asrs	r3, r3, #31
 8001dd2:	401d      	ands	r5, r3
 8001dd4:	68a3      	ldr	r3, [r4, #8]
 8001dd6:	6922      	ldr	r2, [r4, #16]
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	dd01      	ble.n	8001de0 <_printf_common+0x7c>
 8001ddc:	1a9b      	subs	r3, r3, r2
 8001dde:	18ed      	adds	r5, r5, r3
 8001de0:	2700      	movs	r7, #0
 8001de2:	42bd      	cmp	r5, r7
 8001de4:	d120      	bne.n	8001e28 <_printf_common+0xc4>
 8001de6:	2000      	movs	r0, #0
 8001de8:	e010      	b.n	8001e0c <_printf_common+0xa8>
 8001dea:	3701      	adds	r7, #1
 8001dec:	68e3      	ldr	r3, [r4, #12]
 8001dee:	682a      	ldr	r2, [r5, #0]
 8001df0:	1a9b      	subs	r3, r3, r2
 8001df2:	429f      	cmp	r7, r3
 8001df4:	dad2      	bge.n	8001d9c <_printf_common+0x38>
 8001df6:	0022      	movs	r2, r4
 8001df8:	2301      	movs	r3, #1
 8001dfa:	3219      	adds	r2, #25
 8001dfc:	9901      	ldr	r1, [sp, #4]
 8001dfe:	9800      	ldr	r0, [sp, #0]
 8001e00:	9e08      	ldr	r6, [sp, #32]
 8001e02:	47b0      	blx	r6
 8001e04:	1c43      	adds	r3, r0, #1
 8001e06:	d1f0      	bne.n	8001dea <_printf_common+0x86>
 8001e08:	2001      	movs	r0, #1
 8001e0a:	4240      	negs	r0, r0
 8001e0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001e0e:	2030      	movs	r0, #48	; 0x30
 8001e10:	18e1      	adds	r1, r4, r3
 8001e12:	3143      	adds	r1, #67	; 0x43
 8001e14:	7008      	strb	r0, [r1, #0]
 8001e16:	0021      	movs	r1, r4
 8001e18:	1c5a      	adds	r2, r3, #1
 8001e1a:	3145      	adds	r1, #69	; 0x45
 8001e1c:	7809      	ldrb	r1, [r1, #0]
 8001e1e:	18a2      	adds	r2, r4, r2
 8001e20:	3243      	adds	r2, #67	; 0x43
 8001e22:	3302      	adds	r3, #2
 8001e24:	7011      	strb	r1, [r2, #0]
 8001e26:	e7c1      	b.n	8001dac <_printf_common+0x48>
 8001e28:	0022      	movs	r2, r4
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	321a      	adds	r2, #26
 8001e2e:	9901      	ldr	r1, [sp, #4]
 8001e30:	9800      	ldr	r0, [sp, #0]
 8001e32:	9e08      	ldr	r6, [sp, #32]
 8001e34:	47b0      	blx	r6
 8001e36:	1c43      	adds	r3, r0, #1
 8001e38:	d0e6      	beq.n	8001e08 <_printf_common+0xa4>
 8001e3a:	3701      	adds	r7, #1
 8001e3c:	e7d1      	b.n	8001de2 <_printf_common+0x7e>
	...

08001e40 <_printf_i>:
 8001e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e42:	b08b      	sub	sp, #44	; 0x2c
 8001e44:	9206      	str	r2, [sp, #24]
 8001e46:	000a      	movs	r2, r1
 8001e48:	3243      	adds	r2, #67	; 0x43
 8001e4a:	9307      	str	r3, [sp, #28]
 8001e4c:	9005      	str	r0, [sp, #20]
 8001e4e:	9204      	str	r2, [sp, #16]
 8001e50:	7e0a      	ldrb	r2, [r1, #24]
 8001e52:	000c      	movs	r4, r1
 8001e54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001e56:	2a6e      	cmp	r2, #110	; 0x6e
 8001e58:	d100      	bne.n	8001e5c <_printf_i+0x1c>
 8001e5a:	e08f      	b.n	8001f7c <_printf_i+0x13c>
 8001e5c:	d817      	bhi.n	8001e8e <_printf_i+0x4e>
 8001e5e:	2a63      	cmp	r2, #99	; 0x63
 8001e60:	d02c      	beq.n	8001ebc <_printf_i+0x7c>
 8001e62:	d808      	bhi.n	8001e76 <_printf_i+0x36>
 8001e64:	2a00      	cmp	r2, #0
 8001e66:	d100      	bne.n	8001e6a <_printf_i+0x2a>
 8001e68:	e099      	b.n	8001f9e <_printf_i+0x15e>
 8001e6a:	2a58      	cmp	r2, #88	; 0x58
 8001e6c:	d054      	beq.n	8001f18 <_printf_i+0xd8>
 8001e6e:	0026      	movs	r6, r4
 8001e70:	3642      	adds	r6, #66	; 0x42
 8001e72:	7032      	strb	r2, [r6, #0]
 8001e74:	e029      	b.n	8001eca <_printf_i+0x8a>
 8001e76:	2a64      	cmp	r2, #100	; 0x64
 8001e78:	d001      	beq.n	8001e7e <_printf_i+0x3e>
 8001e7a:	2a69      	cmp	r2, #105	; 0x69
 8001e7c:	d1f7      	bne.n	8001e6e <_printf_i+0x2e>
 8001e7e:	6821      	ldr	r1, [r4, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	0608      	lsls	r0, r1, #24
 8001e84:	d523      	bpl.n	8001ece <_printf_i+0x8e>
 8001e86:	1d11      	adds	r1, r2, #4
 8001e88:	6019      	str	r1, [r3, #0]
 8001e8a:	6815      	ldr	r5, [r2, #0]
 8001e8c:	e025      	b.n	8001eda <_printf_i+0x9a>
 8001e8e:	2a73      	cmp	r2, #115	; 0x73
 8001e90:	d100      	bne.n	8001e94 <_printf_i+0x54>
 8001e92:	e088      	b.n	8001fa6 <_printf_i+0x166>
 8001e94:	d808      	bhi.n	8001ea8 <_printf_i+0x68>
 8001e96:	2a6f      	cmp	r2, #111	; 0x6f
 8001e98:	d029      	beq.n	8001eee <_printf_i+0xae>
 8001e9a:	2a70      	cmp	r2, #112	; 0x70
 8001e9c:	d1e7      	bne.n	8001e6e <_printf_i+0x2e>
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	6809      	ldr	r1, [r1, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	6022      	str	r2, [r4, #0]
 8001ea6:	e003      	b.n	8001eb0 <_printf_i+0x70>
 8001ea8:	2a75      	cmp	r2, #117	; 0x75
 8001eaa:	d020      	beq.n	8001eee <_printf_i+0xae>
 8001eac:	2a78      	cmp	r2, #120	; 0x78
 8001eae:	d1de      	bne.n	8001e6e <_printf_i+0x2e>
 8001eb0:	0022      	movs	r2, r4
 8001eb2:	2178      	movs	r1, #120	; 0x78
 8001eb4:	3245      	adds	r2, #69	; 0x45
 8001eb6:	7011      	strb	r1, [r2, #0]
 8001eb8:	4a6c      	ldr	r2, [pc, #432]	; (800206c <_printf_i+0x22c>)
 8001eba:	e030      	b.n	8001f1e <_printf_i+0xde>
 8001ebc:	000e      	movs	r6, r1
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	3642      	adds	r6, #66	; 0x42
 8001ec2:	1d11      	adds	r1, r2, #4
 8001ec4:	6019      	str	r1, [r3, #0]
 8001ec6:	6813      	ldr	r3, [r2, #0]
 8001ec8:	7033      	strb	r3, [r6, #0]
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e079      	b.n	8001fc2 <_printf_i+0x182>
 8001ece:	0649      	lsls	r1, r1, #25
 8001ed0:	d5d9      	bpl.n	8001e86 <_printf_i+0x46>
 8001ed2:	1d11      	adds	r1, r2, #4
 8001ed4:	6019      	str	r1, [r3, #0]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	5ed5      	ldrsh	r5, [r2, r3]
 8001eda:	2d00      	cmp	r5, #0
 8001edc:	da03      	bge.n	8001ee6 <_printf_i+0xa6>
 8001ede:	232d      	movs	r3, #45	; 0x2d
 8001ee0:	9a04      	ldr	r2, [sp, #16]
 8001ee2:	426d      	negs	r5, r5
 8001ee4:	7013      	strb	r3, [r2, #0]
 8001ee6:	4b62      	ldr	r3, [pc, #392]	; (8002070 <_printf_i+0x230>)
 8001ee8:	270a      	movs	r7, #10
 8001eea:	9303      	str	r3, [sp, #12]
 8001eec:	e02f      	b.n	8001f4e <_printf_i+0x10e>
 8001eee:	6820      	ldr	r0, [r4, #0]
 8001ef0:	6819      	ldr	r1, [r3, #0]
 8001ef2:	0605      	lsls	r5, r0, #24
 8001ef4:	d503      	bpl.n	8001efe <_printf_i+0xbe>
 8001ef6:	1d08      	adds	r0, r1, #4
 8001ef8:	6018      	str	r0, [r3, #0]
 8001efa:	680d      	ldr	r5, [r1, #0]
 8001efc:	e005      	b.n	8001f0a <_printf_i+0xca>
 8001efe:	0640      	lsls	r0, r0, #25
 8001f00:	d5f9      	bpl.n	8001ef6 <_printf_i+0xb6>
 8001f02:	680d      	ldr	r5, [r1, #0]
 8001f04:	1d08      	adds	r0, r1, #4
 8001f06:	6018      	str	r0, [r3, #0]
 8001f08:	b2ad      	uxth	r5, r5
 8001f0a:	4b59      	ldr	r3, [pc, #356]	; (8002070 <_printf_i+0x230>)
 8001f0c:	2708      	movs	r7, #8
 8001f0e:	9303      	str	r3, [sp, #12]
 8001f10:	2a6f      	cmp	r2, #111	; 0x6f
 8001f12:	d018      	beq.n	8001f46 <_printf_i+0x106>
 8001f14:	270a      	movs	r7, #10
 8001f16:	e016      	b.n	8001f46 <_printf_i+0x106>
 8001f18:	3145      	adds	r1, #69	; 0x45
 8001f1a:	700a      	strb	r2, [r1, #0]
 8001f1c:	4a54      	ldr	r2, [pc, #336]	; (8002070 <_printf_i+0x230>)
 8001f1e:	9203      	str	r2, [sp, #12]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	6821      	ldr	r1, [r4, #0]
 8001f24:	1d10      	adds	r0, r2, #4
 8001f26:	6018      	str	r0, [r3, #0]
 8001f28:	6815      	ldr	r5, [r2, #0]
 8001f2a:	0608      	lsls	r0, r1, #24
 8001f2c:	d522      	bpl.n	8001f74 <_printf_i+0x134>
 8001f2e:	07cb      	lsls	r3, r1, #31
 8001f30:	d502      	bpl.n	8001f38 <_printf_i+0xf8>
 8001f32:	2320      	movs	r3, #32
 8001f34:	4319      	orrs	r1, r3
 8001f36:	6021      	str	r1, [r4, #0]
 8001f38:	2710      	movs	r7, #16
 8001f3a:	2d00      	cmp	r5, #0
 8001f3c:	d103      	bne.n	8001f46 <_printf_i+0x106>
 8001f3e:	2320      	movs	r3, #32
 8001f40:	6822      	ldr	r2, [r4, #0]
 8001f42:	439a      	bics	r2, r3
 8001f44:	6022      	str	r2, [r4, #0]
 8001f46:	0023      	movs	r3, r4
 8001f48:	2200      	movs	r2, #0
 8001f4a:	3343      	adds	r3, #67	; 0x43
 8001f4c:	701a      	strb	r2, [r3, #0]
 8001f4e:	6863      	ldr	r3, [r4, #4]
 8001f50:	60a3      	str	r3, [r4, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	db5c      	blt.n	8002010 <_printf_i+0x1d0>
 8001f56:	2204      	movs	r2, #4
 8001f58:	6821      	ldr	r1, [r4, #0]
 8001f5a:	4391      	bics	r1, r2
 8001f5c:	6021      	str	r1, [r4, #0]
 8001f5e:	2d00      	cmp	r5, #0
 8001f60:	d158      	bne.n	8002014 <_printf_i+0x1d4>
 8001f62:	9e04      	ldr	r6, [sp, #16]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d064      	beq.n	8002032 <_printf_i+0x1f2>
 8001f68:	0026      	movs	r6, r4
 8001f6a:	9b03      	ldr	r3, [sp, #12]
 8001f6c:	3642      	adds	r6, #66	; 0x42
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	7033      	strb	r3, [r6, #0]
 8001f72:	e05e      	b.n	8002032 <_printf_i+0x1f2>
 8001f74:	0648      	lsls	r0, r1, #25
 8001f76:	d5da      	bpl.n	8001f2e <_printf_i+0xee>
 8001f78:	b2ad      	uxth	r5, r5
 8001f7a:	e7d8      	b.n	8001f2e <_printf_i+0xee>
 8001f7c:	6809      	ldr	r1, [r1, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	0608      	lsls	r0, r1, #24
 8001f82:	d505      	bpl.n	8001f90 <_printf_i+0x150>
 8001f84:	1d11      	adds	r1, r2, #4
 8001f86:	6019      	str	r1, [r3, #0]
 8001f88:	6813      	ldr	r3, [r2, #0]
 8001f8a:	6962      	ldr	r2, [r4, #20]
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	e006      	b.n	8001f9e <_printf_i+0x15e>
 8001f90:	0649      	lsls	r1, r1, #25
 8001f92:	d5f7      	bpl.n	8001f84 <_printf_i+0x144>
 8001f94:	1d11      	adds	r1, r2, #4
 8001f96:	6019      	str	r1, [r3, #0]
 8001f98:	6813      	ldr	r3, [r2, #0]
 8001f9a:	8aa2      	ldrh	r2, [r4, #20]
 8001f9c:	801a      	strh	r2, [r3, #0]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	9e04      	ldr	r6, [sp, #16]
 8001fa2:	6123      	str	r3, [r4, #16]
 8001fa4:	e054      	b.n	8002050 <_printf_i+0x210>
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	1d11      	adds	r1, r2, #4
 8001faa:	6019      	str	r1, [r3, #0]
 8001fac:	6816      	ldr	r6, [r2, #0]
 8001fae:	2100      	movs	r1, #0
 8001fb0:	6862      	ldr	r2, [r4, #4]
 8001fb2:	0030      	movs	r0, r6
 8001fb4:	f000 f85e 	bl	8002074 <memchr>
 8001fb8:	2800      	cmp	r0, #0
 8001fba:	d001      	beq.n	8001fc0 <_printf_i+0x180>
 8001fbc:	1b80      	subs	r0, r0, r6
 8001fbe:	6060      	str	r0, [r4, #4]
 8001fc0:	6863      	ldr	r3, [r4, #4]
 8001fc2:	6123      	str	r3, [r4, #16]
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	9a04      	ldr	r2, [sp, #16]
 8001fc8:	7013      	strb	r3, [r2, #0]
 8001fca:	e041      	b.n	8002050 <_printf_i+0x210>
 8001fcc:	6923      	ldr	r3, [r4, #16]
 8001fce:	0032      	movs	r2, r6
 8001fd0:	9906      	ldr	r1, [sp, #24]
 8001fd2:	9805      	ldr	r0, [sp, #20]
 8001fd4:	9d07      	ldr	r5, [sp, #28]
 8001fd6:	47a8      	blx	r5
 8001fd8:	1c43      	adds	r3, r0, #1
 8001fda:	d043      	beq.n	8002064 <_printf_i+0x224>
 8001fdc:	6823      	ldr	r3, [r4, #0]
 8001fde:	2500      	movs	r5, #0
 8001fe0:	079b      	lsls	r3, r3, #30
 8001fe2:	d40f      	bmi.n	8002004 <_printf_i+0x1c4>
 8001fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fe6:	68e0      	ldr	r0, [r4, #12]
 8001fe8:	4298      	cmp	r0, r3
 8001fea:	da3d      	bge.n	8002068 <_printf_i+0x228>
 8001fec:	0018      	movs	r0, r3
 8001fee:	e03b      	b.n	8002068 <_printf_i+0x228>
 8001ff0:	0022      	movs	r2, r4
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	3219      	adds	r2, #25
 8001ff6:	9906      	ldr	r1, [sp, #24]
 8001ff8:	9805      	ldr	r0, [sp, #20]
 8001ffa:	9e07      	ldr	r6, [sp, #28]
 8001ffc:	47b0      	blx	r6
 8001ffe:	1c43      	adds	r3, r0, #1
 8002000:	d030      	beq.n	8002064 <_printf_i+0x224>
 8002002:	3501      	adds	r5, #1
 8002004:	68e3      	ldr	r3, [r4, #12]
 8002006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002008:	1a9b      	subs	r3, r3, r2
 800200a:	429d      	cmp	r5, r3
 800200c:	dbf0      	blt.n	8001ff0 <_printf_i+0x1b0>
 800200e:	e7e9      	b.n	8001fe4 <_printf_i+0x1a4>
 8002010:	2d00      	cmp	r5, #0
 8002012:	d0a9      	beq.n	8001f68 <_printf_i+0x128>
 8002014:	9e04      	ldr	r6, [sp, #16]
 8002016:	0028      	movs	r0, r5
 8002018:	0039      	movs	r1, r7
 800201a:	f7fe f90d 	bl	8000238 <__aeabi_uidivmod>
 800201e:	9b03      	ldr	r3, [sp, #12]
 8002020:	3e01      	subs	r6, #1
 8002022:	5c5b      	ldrb	r3, [r3, r1]
 8002024:	0028      	movs	r0, r5
 8002026:	7033      	strb	r3, [r6, #0]
 8002028:	0039      	movs	r1, r7
 800202a:	f7fe f87f 	bl	800012c <__udivsi3>
 800202e:	1e05      	subs	r5, r0, #0
 8002030:	d1f1      	bne.n	8002016 <_printf_i+0x1d6>
 8002032:	2f08      	cmp	r7, #8
 8002034:	d109      	bne.n	800204a <_printf_i+0x20a>
 8002036:	6823      	ldr	r3, [r4, #0]
 8002038:	07db      	lsls	r3, r3, #31
 800203a:	d506      	bpl.n	800204a <_printf_i+0x20a>
 800203c:	6863      	ldr	r3, [r4, #4]
 800203e:	6922      	ldr	r2, [r4, #16]
 8002040:	4293      	cmp	r3, r2
 8002042:	dc02      	bgt.n	800204a <_printf_i+0x20a>
 8002044:	2330      	movs	r3, #48	; 0x30
 8002046:	3e01      	subs	r6, #1
 8002048:	7033      	strb	r3, [r6, #0]
 800204a:	9b04      	ldr	r3, [sp, #16]
 800204c:	1b9b      	subs	r3, r3, r6
 800204e:	6123      	str	r3, [r4, #16]
 8002050:	9b07      	ldr	r3, [sp, #28]
 8002052:	aa09      	add	r2, sp, #36	; 0x24
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	0021      	movs	r1, r4
 8002058:	9b06      	ldr	r3, [sp, #24]
 800205a:	9805      	ldr	r0, [sp, #20]
 800205c:	f7ff fe82 	bl	8001d64 <_printf_common>
 8002060:	1c43      	adds	r3, r0, #1
 8002062:	d1b3      	bne.n	8001fcc <_printf_i+0x18c>
 8002064:	2001      	movs	r0, #1
 8002066:	4240      	negs	r0, r0
 8002068:	b00b      	add	sp, #44	; 0x2c
 800206a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800206c:	08002329 	.word	0x08002329
 8002070:	08002318 	.word	0x08002318

08002074 <memchr>:
 8002074:	b2c9      	uxtb	r1, r1
 8002076:	1882      	adds	r2, r0, r2
 8002078:	4290      	cmp	r0, r2
 800207a:	d101      	bne.n	8002080 <memchr+0xc>
 800207c:	2000      	movs	r0, #0
 800207e:	4770      	bx	lr
 8002080:	7803      	ldrb	r3, [r0, #0]
 8002082:	428b      	cmp	r3, r1
 8002084:	d0fb      	beq.n	800207e <memchr+0xa>
 8002086:	3001      	adds	r0, #1
 8002088:	e7f6      	b.n	8002078 <memchr+0x4>

0800208a <memmove>:
 800208a:	b510      	push	{r4, lr}
 800208c:	4288      	cmp	r0, r1
 800208e:	d902      	bls.n	8002096 <memmove+0xc>
 8002090:	188b      	adds	r3, r1, r2
 8002092:	4298      	cmp	r0, r3
 8002094:	d308      	bcc.n	80020a8 <memmove+0x1e>
 8002096:	2300      	movs	r3, #0
 8002098:	429a      	cmp	r2, r3
 800209a:	d007      	beq.n	80020ac <memmove+0x22>
 800209c:	5ccc      	ldrb	r4, [r1, r3]
 800209e:	54c4      	strb	r4, [r0, r3]
 80020a0:	3301      	adds	r3, #1
 80020a2:	e7f9      	b.n	8002098 <memmove+0xe>
 80020a4:	5c8b      	ldrb	r3, [r1, r2]
 80020a6:	5483      	strb	r3, [r0, r2]
 80020a8:	3a01      	subs	r2, #1
 80020aa:	d2fb      	bcs.n	80020a4 <memmove+0x1a>
 80020ac:	bd10      	pop	{r4, pc}
	...

080020b0 <_free_r>:
 80020b0:	b570      	push	{r4, r5, r6, lr}
 80020b2:	0005      	movs	r5, r0
 80020b4:	2900      	cmp	r1, #0
 80020b6:	d010      	beq.n	80020da <_free_r+0x2a>
 80020b8:	1f0c      	subs	r4, r1, #4
 80020ba:	6823      	ldr	r3, [r4, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	da00      	bge.n	80020c2 <_free_r+0x12>
 80020c0:	18e4      	adds	r4, r4, r3
 80020c2:	0028      	movs	r0, r5
 80020c4:	f000 f8d4 	bl	8002270 <__malloc_lock>
 80020c8:	4a1d      	ldr	r2, [pc, #116]	; (8002140 <_free_r+0x90>)
 80020ca:	6813      	ldr	r3, [r2, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d105      	bne.n	80020dc <_free_r+0x2c>
 80020d0:	6063      	str	r3, [r4, #4]
 80020d2:	6014      	str	r4, [r2, #0]
 80020d4:	0028      	movs	r0, r5
 80020d6:	f000 f8cc 	bl	8002272 <__malloc_unlock>
 80020da:	bd70      	pop	{r4, r5, r6, pc}
 80020dc:	42a3      	cmp	r3, r4
 80020de:	d909      	bls.n	80020f4 <_free_r+0x44>
 80020e0:	6821      	ldr	r1, [r4, #0]
 80020e2:	1860      	adds	r0, r4, r1
 80020e4:	4283      	cmp	r3, r0
 80020e6:	d1f3      	bne.n	80020d0 <_free_r+0x20>
 80020e8:	6818      	ldr	r0, [r3, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	1841      	adds	r1, r0, r1
 80020ee:	6021      	str	r1, [r4, #0]
 80020f0:	e7ee      	b.n	80020d0 <_free_r+0x20>
 80020f2:	0013      	movs	r3, r2
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	2a00      	cmp	r2, #0
 80020f8:	d001      	beq.n	80020fe <_free_r+0x4e>
 80020fa:	42a2      	cmp	r2, r4
 80020fc:	d9f9      	bls.n	80020f2 <_free_r+0x42>
 80020fe:	6819      	ldr	r1, [r3, #0]
 8002100:	1858      	adds	r0, r3, r1
 8002102:	42a0      	cmp	r0, r4
 8002104:	d10b      	bne.n	800211e <_free_r+0x6e>
 8002106:	6820      	ldr	r0, [r4, #0]
 8002108:	1809      	adds	r1, r1, r0
 800210a:	1858      	adds	r0, r3, r1
 800210c:	6019      	str	r1, [r3, #0]
 800210e:	4282      	cmp	r2, r0
 8002110:	d1e0      	bne.n	80020d4 <_free_r+0x24>
 8002112:	6810      	ldr	r0, [r2, #0]
 8002114:	6852      	ldr	r2, [r2, #4]
 8002116:	1841      	adds	r1, r0, r1
 8002118:	6019      	str	r1, [r3, #0]
 800211a:	605a      	str	r2, [r3, #4]
 800211c:	e7da      	b.n	80020d4 <_free_r+0x24>
 800211e:	42a0      	cmp	r0, r4
 8002120:	d902      	bls.n	8002128 <_free_r+0x78>
 8002122:	230c      	movs	r3, #12
 8002124:	602b      	str	r3, [r5, #0]
 8002126:	e7d5      	b.n	80020d4 <_free_r+0x24>
 8002128:	6821      	ldr	r1, [r4, #0]
 800212a:	1860      	adds	r0, r4, r1
 800212c:	4282      	cmp	r2, r0
 800212e:	d103      	bne.n	8002138 <_free_r+0x88>
 8002130:	6810      	ldr	r0, [r2, #0]
 8002132:	6852      	ldr	r2, [r2, #4]
 8002134:	1841      	adds	r1, r0, r1
 8002136:	6021      	str	r1, [r4, #0]
 8002138:	6062      	str	r2, [r4, #4]
 800213a:	605c      	str	r4, [r3, #4]
 800213c:	e7ca      	b.n	80020d4 <_free_r+0x24>
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	200000a8 	.word	0x200000a8

08002144 <_malloc_r>:
 8002144:	2303      	movs	r3, #3
 8002146:	b570      	push	{r4, r5, r6, lr}
 8002148:	1ccd      	adds	r5, r1, #3
 800214a:	439d      	bics	r5, r3
 800214c:	3508      	adds	r5, #8
 800214e:	0006      	movs	r6, r0
 8002150:	2d0c      	cmp	r5, #12
 8002152:	d21e      	bcs.n	8002192 <_malloc_r+0x4e>
 8002154:	250c      	movs	r5, #12
 8002156:	42a9      	cmp	r1, r5
 8002158:	d81d      	bhi.n	8002196 <_malloc_r+0x52>
 800215a:	0030      	movs	r0, r6
 800215c:	f000 f888 	bl	8002270 <__malloc_lock>
 8002160:	4a25      	ldr	r2, [pc, #148]	; (80021f8 <_malloc_r+0xb4>)
 8002162:	6814      	ldr	r4, [r2, #0]
 8002164:	0021      	movs	r1, r4
 8002166:	2900      	cmp	r1, #0
 8002168:	d119      	bne.n	800219e <_malloc_r+0x5a>
 800216a:	4c24      	ldr	r4, [pc, #144]	; (80021fc <_malloc_r+0xb8>)
 800216c:	6823      	ldr	r3, [r4, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d103      	bne.n	800217a <_malloc_r+0x36>
 8002172:	0030      	movs	r0, r6
 8002174:	f000 f86a 	bl	800224c <_sbrk_r>
 8002178:	6020      	str	r0, [r4, #0]
 800217a:	0029      	movs	r1, r5
 800217c:	0030      	movs	r0, r6
 800217e:	f000 f865 	bl	800224c <_sbrk_r>
 8002182:	1c43      	adds	r3, r0, #1
 8002184:	d12c      	bne.n	80021e0 <_malloc_r+0x9c>
 8002186:	230c      	movs	r3, #12
 8002188:	0030      	movs	r0, r6
 800218a:	6033      	str	r3, [r6, #0]
 800218c:	f000 f871 	bl	8002272 <__malloc_unlock>
 8002190:	e003      	b.n	800219a <_malloc_r+0x56>
 8002192:	2d00      	cmp	r5, #0
 8002194:	dadf      	bge.n	8002156 <_malloc_r+0x12>
 8002196:	230c      	movs	r3, #12
 8002198:	6033      	str	r3, [r6, #0]
 800219a:	2000      	movs	r0, #0
 800219c:	bd70      	pop	{r4, r5, r6, pc}
 800219e:	680b      	ldr	r3, [r1, #0]
 80021a0:	1b5b      	subs	r3, r3, r5
 80021a2:	d41a      	bmi.n	80021da <_malloc_r+0x96>
 80021a4:	2b0b      	cmp	r3, #11
 80021a6:	d903      	bls.n	80021b0 <_malloc_r+0x6c>
 80021a8:	600b      	str	r3, [r1, #0]
 80021aa:	18cc      	adds	r4, r1, r3
 80021ac:	6025      	str	r5, [r4, #0]
 80021ae:	e003      	b.n	80021b8 <_malloc_r+0x74>
 80021b0:	428c      	cmp	r4, r1
 80021b2:	d10e      	bne.n	80021d2 <_malloc_r+0x8e>
 80021b4:	6863      	ldr	r3, [r4, #4]
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	0030      	movs	r0, r6
 80021ba:	f000 f85a 	bl	8002272 <__malloc_unlock>
 80021be:	0020      	movs	r0, r4
 80021c0:	2207      	movs	r2, #7
 80021c2:	300b      	adds	r0, #11
 80021c4:	1d23      	adds	r3, r4, #4
 80021c6:	4390      	bics	r0, r2
 80021c8:	1ac3      	subs	r3, r0, r3
 80021ca:	d0e7      	beq.n	800219c <_malloc_r+0x58>
 80021cc:	425a      	negs	r2, r3
 80021ce:	50e2      	str	r2, [r4, r3]
 80021d0:	e7e4      	b.n	800219c <_malloc_r+0x58>
 80021d2:	684b      	ldr	r3, [r1, #4]
 80021d4:	6063      	str	r3, [r4, #4]
 80021d6:	000c      	movs	r4, r1
 80021d8:	e7ee      	b.n	80021b8 <_malloc_r+0x74>
 80021da:	000c      	movs	r4, r1
 80021dc:	6849      	ldr	r1, [r1, #4]
 80021de:	e7c2      	b.n	8002166 <_malloc_r+0x22>
 80021e0:	2303      	movs	r3, #3
 80021e2:	1cc4      	adds	r4, r0, #3
 80021e4:	439c      	bics	r4, r3
 80021e6:	42a0      	cmp	r0, r4
 80021e8:	d0e0      	beq.n	80021ac <_malloc_r+0x68>
 80021ea:	1a21      	subs	r1, r4, r0
 80021ec:	0030      	movs	r0, r6
 80021ee:	f000 f82d 	bl	800224c <_sbrk_r>
 80021f2:	1c43      	adds	r3, r0, #1
 80021f4:	d1da      	bne.n	80021ac <_malloc_r+0x68>
 80021f6:	e7c6      	b.n	8002186 <_malloc_r+0x42>
 80021f8:	200000a8 	.word	0x200000a8
 80021fc:	200000ac 	.word	0x200000ac

08002200 <_realloc_r>:
 8002200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002202:	0007      	movs	r7, r0
 8002204:	000d      	movs	r5, r1
 8002206:	0016      	movs	r6, r2
 8002208:	2900      	cmp	r1, #0
 800220a:	d105      	bne.n	8002218 <_realloc_r+0x18>
 800220c:	0011      	movs	r1, r2
 800220e:	f7ff ff99 	bl	8002144 <_malloc_r>
 8002212:	0004      	movs	r4, r0
 8002214:	0020      	movs	r0, r4
 8002216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002218:	2a00      	cmp	r2, #0
 800221a:	d103      	bne.n	8002224 <_realloc_r+0x24>
 800221c:	f7ff ff48 	bl	80020b0 <_free_r>
 8002220:	0034      	movs	r4, r6
 8002222:	e7f7      	b.n	8002214 <_realloc_r+0x14>
 8002224:	f000 f826 	bl	8002274 <_malloc_usable_size_r>
 8002228:	002c      	movs	r4, r5
 800222a:	4286      	cmp	r6, r0
 800222c:	d9f2      	bls.n	8002214 <_realloc_r+0x14>
 800222e:	0031      	movs	r1, r6
 8002230:	0038      	movs	r0, r7
 8002232:	f7ff ff87 	bl	8002144 <_malloc_r>
 8002236:	1e04      	subs	r4, r0, #0
 8002238:	d0ec      	beq.n	8002214 <_realloc_r+0x14>
 800223a:	0029      	movs	r1, r5
 800223c:	0032      	movs	r2, r6
 800223e:	f7ff fbef 	bl	8001a20 <memcpy>
 8002242:	0029      	movs	r1, r5
 8002244:	0038      	movs	r0, r7
 8002246:	f7ff ff33 	bl	80020b0 <_free_r>
 800224a:	e7e3      	b.n	8002214 <_realloc_r+0x14>

0800224c <_sbrk_r>:
 800224c:	2300      	movs	r3, #0
 800224e:	b570      	push	{r4, r5, r6, lr}
 8002250:	4c06      	ldr	r4, [pc, #24]	; (800226c <_sbrk_r+0x20>)
 8002252:	0005      	movs	r5, r0
 8002254:	0008      	movs	r0, r1
 8002256:	6023      	str	r3, [r4, #0]
 8002258:	f7ff fb72 	bl	8001940 <_sbrk>
 800225c:	1c43      	adds	r3, r0, #1
 800225e:	d103      	bne.n	8002268 <_sbrk_r+0x1c>
 8002260:	6823      	ldr	r3, [r4, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d000      	beq.n	8002268 <_sbrk_r+0x1c>
 8002266:	602b      	str	r3, [r5, #0]
 8002268:	bd70      	pop	{r4, r5, r6, pc}
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	20000180 	.word	0x20000180

08002270 <__malloc_lock>:
 8002270:	4770      	bx	lr

08002272 <__malloc_unlock>:
 8002272:	4770      	bx	lr

08002274 <_malloc_usable_size_r>:
 8002274:	1f0b      	subs	r3, r1, #4
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	1f18      	subs	r0, r3, #4
 800227a:	2b00      	cmp	r3, #0
 800227c:	da01      	bge.n	8002282 <_malloc_usable_size_r+0xe>
 800227e:	580b      	ldr	r3, [r1, r0]
 8002280:	18c0      	adds	r0, r0, r3
 8002282:	4770      	bx	lr

08002284 <_init>:
 8002284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800228a:	bc08      	pop	{r3}
 800228c:	469e      	mov	lr, r3
 800228e:	4770      	bx	lr

08002290 <_fini>:
 8002290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002296:	bc08      	pop	{r3}
 8002298:	469e      	mov	lr, r3
 800229a:	4770      	bx	lr
