
NUCLEOF103RB_IAP_M1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000698  08002a08  08002a08  00012a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080030a0  080030a0  000130a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080030a4  080030a4  000130a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  080030a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000524  20000070  08003118  00020070  2**3
                  ALLOC
  7 ._user_heap_stack 00001424  20000594  08003118  00020594  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   00011cdf  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002d4d  00000000  00000000  00031d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000041a0  00000000  00000000  00034ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000720  00000000  00000000  00038c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009b8  00000000  00000000  00039388  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004aea  00000000  00000000  00039d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002aa2  00000000  00000000  0003e82a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000412cc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001730  00000000  00000000  00041348  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080029f0 	.word	0x080029f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080029f0 	.word	0x080029f0

0800014c <__aeabi_llsr>:
 800014c:	40d0      	lsrs	r0, r2
 800014e:	1c0b      	adds	r3, r1, #0
 8000150:	40d1      	lsrs	r1, r2
 8000152:	469c      	mov	ip, r3
 8000154:	3a20      	subs	r2, #32
 8000156:	40d3      	lsrs	r3, r2
 8000158:	4318      	orrs	r0, r3
 800015a:	4252      	negs	r2, r2
 800015c:	4663      	mov	r3, ip
 800015e:	4093      	lsls	r3, r2
 8000160:	4318      	orrs	r0, r3
 8000162:	4770      	bx	lr

08000164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000164:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000166:	4b0e      	ldr	r3, [pc, #56]	; (80001a0 <HAL_InitTick+0x3c>)
{
 8000168:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800016a:	7818      	ldrb	r0, [r3, #0]
 800016c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000170:	fbb3 f3f0 	udiv	r3, r3, r0
 8000174:	4a0b      	ldr	r2, [pc, #44]	; (80001a4 <HAL_InitTick+0x40>)
 8000176:	6810      	ldr	r0, [r2, #0]
 8000178:	fbb0 f0f3 	udiv	r0, r0, r3
 800017c:	f000 f8b0 	bl	80002e0 <HAL_SYSTICK_Config>
 8000180:	4604      	mov	r4, r0
 8000182:	b958      	cbnz	r0, 800019c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000184:	2d0f      	cmp	r5, #15
 8000186:	d809      	bhi.n	800019c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000188:	4602      	mov	r2, r0
 800018a:	4629      	mov	r1, r5
 800018c:	f04f 30ff 	mov.w	r0, #4294967295
 8000190:	f000 f854 	bl	800023c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <HAL_InitTick+0x44>)
 8000196:	4620      	mov	r0, r4
 8000198:	601d      	str	r5, [r3, #0]
 800019a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800019c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800019e:	bd38      	pop	{r3, r4, r5, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	20000008 	.word	0x20000008
 80001a8:	20000004 	.word	0x20000004

080001ac <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	4a07      	ldr	r2, [pc, #28]	; (80001cc <HAL_Init+0x20>)
{
 80001ae:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001b0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001b4:	f043 0310 	orr.w	r3, r3, #16
 80001b8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001ba:	f000 f82d 	bl	8000218 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001be:	2000      	movs	r0, #0
 80001c0:	f7ff ffd0 	bl	8000164 <HAL_InitTick>
  HAL_MspInit();
 80001c4:	f001 fbc6 	bl	8001954 <HAL_MspInit>
}
 80001c8:	2000      	movs	r0, #0
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	40022000 	.word	0x40022000

080001d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001d0:	4a03      	ldr	r2, [pc, #12]	; (80001e0 <HAL_IncTick+0x10>)
 80001d2:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <HAL_IncTick+0x14>)
 80001d4:	6811      	ldr	r1, [r2, #0]
 80001d6:	781b      	ldrb	r3, [r3, #0]
 80001d8:	440b      	add	r3, r1
 80001da:	6013      	str	r3, [r2, #0]
 80001dc:	4770      	bx	lr
 80001de:	bf00      	nop
 80001e0:	2000009c 	.word	0x2000009c
 80001e4:	20000000 	.word	0x20000000

080001e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e8:	4b01      	ldr	r3, [pc, #4]	; (80001f0 <HAL_GetTick+0x8>)
 80001ea:	6818      	ldr	r0, [r3, #0]
}
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	2000009c 	.word	0x2000009c

080001f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001f4:	b538      	push	{r3, r4, r5, lr}
 80001f6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001f8:	f7ff fff6 	bl	80001e8 <HAL_GetTick>
 80001fc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001fe:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000200:	bf1e      	ittt	ne
 8000202:	4b04      	ldrne	r3, [pc, #16]	; (8000214 <HAL_Delay+0x20>)
 8000204:	781b      	ldrbne	r3, [r3, #0]
 8000206:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000208:	f7ff ffee 	bl	80001e8 <HAL_GetTick>
 800020c:	1b40      	subs	r0, r0, r5
 800020e:	4284      	cmp	r4, r0
 8000210:	d8fa      	bhi.n	8000208 <HAL_Delay+0x14>
  {
  }
}
 8000212:	bd38      	pop	{r3, r4, r5, pc}
 8000214:	20000000 	.word	0x20000000

08000218 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000218:	4a07      	ldr	r2, [pc, #28]	; (8000238 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800021a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800021c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800021e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000222:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000226:	041b      	lsls	r3, r3, #16
 8000228:	0c1b      	lsrs	r3, r3, #16
 800022a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800022e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000232:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000234:	60d3      	str	r3, [r2, #12]
 8000236:	4770      	bx	lr
 8000238:	e000ed00 	.word	0xe000ed00

0800023c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800023c:	4b17      	ldr	r3, [pc, #92]	; (800029c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800023e:	b530      	push	{r4, r5, lr}
 8000240:	68dc      	ldr	r4, [r3, #12]
 8000242:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000246:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800024c:	2b04      	cmp	r3, #4
 800024e:	bf28      	it	cs
 8000250:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000252:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000254:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000258:	bf98      	it	ls
 800025a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025c:	fa05 f303 	lsl.w	r3, r5, r3
 8000260:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000264:	bf88      	it	hi
 8000266:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000268:	4019      	ands	r1, r3
 800026a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800026c:	fa05 f404 	lsl.w	r4, r5, r4
 8000270:	3c01      	subs	r4, #1
 8000272:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000274:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000276:	ea42 0201 	orr.w	r2, r2, r1
 800027a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027e:	bfaf      	iteee	ge
 8000280:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000284:	4b06      	ldrlt	r3, [pc, #24]	; (80002a0 <HAL_NVIC_SetPriority+0x64>)
 8000286:	f000 000f 	andlt.w	r0, r0, #15
 800028a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	bfa5      	ittet	ge
 800028e:	b2d2      	uxtbge	r2, r2
 8000290:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000296:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800029a:	bd30      	pop	{r4, r5, pc}
 800029c:	e000ed00 	.word	0xe000ed00
 80002a0:	e000ed14 	.word	0xe000ed14

080002a4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002a4:	2301      	movs	r3, #1
 80002a6:	0942      	lsrs	r2, r0, #5
 80002a8:	f000 001f 	and.w	r0, r0, #31
 80002ac:	fa03 f000 	lsl.w	r0, r3, r0
 80002b0:	4b01      	ldr	r3, [pc, #4]	; (80002b8 <HAL_NVIC_EnableIRQ+0x14>)
 80002b2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002b6:	4770      	bx	lr
 80002b8:	e000e100 	.word	0xe000e100

080002bc <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80002bc:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80002c0:	4905      	ldr	r1, [pc, #20]	; (80002d8 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80002c2:	4b06      	ldr	r3, [pc, #24]	; (80002dc <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80002c4:	68ca      	ldr	r2, [r1, #12]
 80002c6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80002ca:	4313      	orrs	r3, r2
 80002cc:	60cb      	str	r3, [r1, #12]
 80002ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80002d2:	bf00      	nop
 80002d4:	e7fd      	b.n	80002d2 <HAL_NVIC_SystemReset+0x16>
 80002d6:	bf00      	nop
 80002d8:	e000ed00 	.word	0xe000ed00
 80002dc:	05fa0004 	.word	0x05fa0004

080002e0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002e0:	3801      	subs	r0, #1
 80002e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002e6:	d20a      	bcs.n	80002fe <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002ea:	4b06      	ldr	r3, [pc, #24]	; (8000304 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ec:	4a06      	ldr	r2, [pc, #24]	; (8000308 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002ee:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002f4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002f6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002f8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002fe:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	e000e010 	.word	0xe000e010
 8000308:	e000ed00 	.word	0xe000ed00

0800030c <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800030c:	4a11      	ldr	r2, [pc, #68]	; (8000354 <FLASH_SetErrorCode+0x48>)
 800030e:	68d3      	ldr	r3, [r2, #12]
 8000310:	f013 0310 	ands.w	r3, r3, #16
 8000314:	d005      	beq.n	8000322 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000316:	4910      	ldr	r1, [pc, #64]	; (8000358 <FLASH_SetErrorCode+0x4c>)
 8000318:	69cb      	ldr	r3, [r1, #28]
 800031a:	f043 0302 	orr.w	r3, r3, #2
 800031e:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000320:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000322:	68d2      	ldr	r2, [r2, #12]
 8000324:	0750      	lsls	r0, r2, #29
 8000326:	d506      	bpl.n	8000336 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000328:	490b      	ldr	r1, [pc, #44]	; (8000358 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800032a:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800032e:	69ca      	ldr	r2, [r1, #28]
 8000330:	f042 0201 	orr.w	r2, r2, #1
 8000334:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000336:	4a07      	ldr	r2, [pc, #28]	; (8000354 <FLASH_SetErrorCode+0x48>)
 8000338:	69d1      	ldr	r1, [r2, #28]
 800033a:	07c9      	lsls	r1, r1, #31
 800033c:	d508      	bpl.n	8000350 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800033e:	4806      	ldr	r0, [pc, #24]	; (8000358 <FLASH_SetErrorCode+0x4c>)
 8000340:	69c1      	ldr	r1, [r0, #28]
 8000342:	f041 0104 	orr.w	r1, r1, #4
 8000346:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000348:	69d1      	ldr	r1, [r2, #28]
 800034a:	f021 0101 	bic.w	r1, r1, #1
 800034e:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000350:	60d3      	str	r3, [r2, #12]
 8000352:	4770      	bx	lr
 8000354:	40022000 	.word	0x40022000
 8000358:	200000a0 	.word	0x200000a0

0800035c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <HAL_FLASH_Unlock+0x1c>)
 800035e:	6918      	ldr	r0, [r3, #16]
 8000360:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000364:	d007      	beq.n	8000376 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000366:	4a05      	ldr	r2, [pc, #20]	; (800037c <HAL_FLASH_Unlock+0x20>)
 8000368:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800036a:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800036e:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000370:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8000372:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8000376:	4770      	bx	lr
 8000378:	40022000 	.word	0x40022000
 800037c:	45670123 	.word	0x45670123

08000380 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000380:	4a03      	ldr	r2, [pc, #12]	; (8000390 <HAL_FLASH_Lock+0x10>)
}
 8000382:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000384:	6913      	ldr	r3, [r2, #16]
 8000386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800038a:	6113      	str	r3, [r2, #16]
}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40022000 	.word	0x40022000

08000394 <HAL_FLASH_OB_Unlock>:
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <HAL_FLASH_OB_Unlock+0x1c>)
 8000396:	6918      	ldr	r0, [r3, #16]
 8000398:	f410 7000 	ands.w	r0, r0, #512	; 0x200
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800039c:	bf09      	itett	eq
 800039e:	4a05      	ldreq	r2, [pc, #20]	; (80003b4 <HAL_FLASH_OB_Unlock+0x20>)
    return HAL_ERROR;
 80003a0:	2001      	movne	r0, #1
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 80003a2:	609a      	streq	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 80003a4:	f102 3288 	addeq.w	r2, r2, #2290649224	; 0x88888888
 80003a8:	bf08      	it	eq
 80003aa:	609a      	streq	r2, [r3, #8]
}
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	40022000 	.word	0x40022000
 80003b4:	45670123 	.word	0x45670123

080003b8 <HAL_FLASH_OB_Launch>:
  HAL_NVIC_SystemReset();
 80003b8:	f7ff bf80 	b.w	80002bc <HAL_NVIC_SystemReset>

080003bc <FLASH_WaitForLastOperation>:
{
 80003bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003be:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 80003c0:	f7ff ff12 	bl	80001e8 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80003c4:	4c11      	ldr	r4, [pc, #68]	; (800040c <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 80003c6:	4607      	mov	r7, r0
 80003c8:	4625      	mov	r5, r4
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80003ca:	68e3      	ldr	r3, [r4, #12]
 80003cc:	07d8      	lsls	r0, r3, #31
 80003ce:	d412      	bmi.n	80003f6 <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80003d0:	68e3      	ldr	r3, [r4, #12]
 80003d2:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80003d4:	bf44      	itt	mi
 80003d6:	2320      	movmi	r3, #32
 80003d8:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80003da:	68eb      	ldr	r3, [r5, #12]
 80003dc:	06da      	lsls	r2, r3, #27
 80003de:	d406      	bmi.n	80003ee <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80003e0:	69eb      	ldr	r3, [r5, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80003e2:	07db      	lsls	r3, r3, #31
 80003e4:	d403      	bmi.n	80003ee <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80003e6:	68e8      	ldr	r0, [r5, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80003e8:	f010 0004 	ands.w	r0, r0, #4
 80003ec:	d002      	beq.n	80003f4 <FLASH_WaitForLastOperation+0x38>
    FLASH_SetErrorCode();
 80003ee:	f7ff ff8d 	bl	800030c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80003f2:	2001      	movs	r0, #1
}
 80003f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80003f6:	1c73      	adds	r3, r6, #1
 80003f8:	d0e7      	beq.n	80003ca <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80003fa:	b90e      	cbnz	r6, 8000400 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 80003fc:	2003      	movs	r0, #3
 80003fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000400:	f7ff fef2 	bl	80001e8 <HAL_GetTick>
 8000404:	1bc0      	subs	r0, r0, r7
 8000406:	4286      	cmp	r6, r0
 8000408:	d2df      	bcs.n	80003ca <FLASH_WaitForLastOperation+0xe>
 800040a:	e7f7      	b.n	80003fc <FLASH_WaitForLastOperation+0x40>
 800040c:	40022000 	.word	0x40022000

08000410 <HAL_FLASH_Program>:
{
 8000410:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8000414:	4c1f      	ldr	r4, [pc, #124]	; (8000494 <HAL_FLASH_Program+0x84>)
{
 8000416:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8000418:	7e23      	ldrb	r3, [r4, #24]
{
 800041a:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 800041c:	2b01      	cmp	r3, #1
{
 800041e:	460f      	mov	r7, r1
 8000420:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 8000422:	d033      	beq.n	800048c <HAL_FLASH_Program+0x7c>
 8000424:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000426:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800042a:	7623      	strb	r3, [r4, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800042c:	f7ff ffc6 	bl	80003bc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000430:	bb40      	cbnz	r0, 8000484 <HAL_FLASH_Program+0x74>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000432:	2d01      	cmp	r5, #1
 8000434:	d003      	beq.n	800043e <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 8000436:	2d02      	cmp	r5, #2
 8000438:	bf0c      	ite	eq
 800043a:	2502      	moveq	r5, #2
 800043c:	2504      	movne	r5, #4
 800043e:	2600      	movs	r6, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000440:	46b2      	mov	sl, r6
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000442:	f8df b054 	ldr.w	fp, [pc, #84]	; 8000498 <HAL_FLASH_Program+0x88>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000446:	0132      	lsls	r2, r6, #4
 8000448:	4640      	mov	r0, r8
 800044a:	4649      	mov	r1, r9
 800044c:	f7ff fe7e 	bl	800014c <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000450:	f8c4 a01c 	str.w	sl, [r4, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000454:	f8db 3010 	ldr.w	r3, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000458:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800045a:	f043 0301 	orr.w	r3, r3, #1
 800045e:	f8cb 3010 	str.w	r3, [fp, #16]
  *(__IO uint16_t*)Address = Data;
 8000462:	f827 0016 	strh.w	r0, [r7, r6, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000466:	f24c 3050 	movw	r0, #50000	; 0xc350
 800046a:	f7ff ffa7 	bl	80003bc <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800046e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8000472:	f023 0301 	bic.w	r3, r3, #1
 8000476:	f8cb 3010 	str.w	r3, [fp, #16]
      if (status != HAL_OK)
 800047a:	b918      	cbnz	r0, 8000484 <HAL_FLASH_Program+0x74>
 800047c:	3601      	adds	r6, #1
    for (index = 0U; index < nbiterations; index++)
 800047e:	b2f3      	uxtb	r3, r6
 8000480:	429d      	cmp	r5, r3
 8000482:	d8e0      	bhi.n	8000446 <HAL_FLASH_Program+0x36>
  __HAL_UNLOCK(&pFlash);
 8000484:	2300      	movs	r3, #0
 8000486:	7623      	strb	r3, [r4, #24]
  return status;
 8000488:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 800048c:	2002      	movs	r0, #2
}
 800048e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000492:	bf00      	nop
 8000494:	200000a0 	.word	0x200000a0
 8000498:	40022000 	.word	0x40022000

0800049c <FLASH_MassErase.isra.0>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800049c:	2200      	movs	r2, #0
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <FLASH_MassErase.isra.0+0x1c>)
 80004a0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80004a2:	4b06      	ldr	r3, [pc, #24]	; (80004bc <FLASH_MassErase.isra.0+0x20>)
 80004a4:	691a      	ldr	r2, [r3, #16]
 80004a6:	f042 0204 	orr.w	r2, r2, #4
 80004aa:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80004ac:	691a      	ldr	r2, [r3, #16]
 80004ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80004b2:	611a      	str	r2, [r3, #16]
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	200000a0 	.word	0x200000a0
 80004bc:	40022000 	.word	0x40022000

080004c0 <FLASH_OB_RDP_LevelConfig>:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel)
{
 80004c0:	b538      	push	{r3, r4, r5, lr}
 80004c2:	4605      	mov	r5, r0
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(ReadProtectLevel));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80004c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80004c8:	f7ff ff78 	bl	80003bc <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 80004cc:	bb10      	cbnz	r0, 8000514 <FLASH_OB_RDP_LevelConfig+0x54>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80004ce:	4b12      	ldr	r3, [pc, #72]	; (8000518 <FLASH_OB_RDP_LevelConfig+0x58>)
    
    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 80004d0:	4c12      	ldr	r4, [pc, #72]	; (800051c <FLASH_OB_RDP_LevelConfig+0x5c>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80004d2:	61d8      	str	r0, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 80004d4:	6923      	ldr	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80004d6:	f24c 3050 	movw	r0, #50000	; 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 80004da:	f043 0320 	orr.w	r3, r3, #32
 80004de:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80004e0:	6923      	ldr	r3, [r4, #16]
 80004e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004e6:	6123      	str	r3, [r4, #16]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80004e8:	f7ff ff68 	bl	80003bc <FLASH_WaitForLastOperation>

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 80004ec:	6923      	ldr	r3, [r4, #16]
 80004ee:	f023 0320 	bic.w	r3, r3, #32
 80004f2:	6123      	str	r3, [r4, #16]

    if(status == HAL_OK)
 80004f4:	b970      	cbnz	r0, 8000514 <FLASH_OB_RDP_LevelConfig+0x54>
    {
      /* Enable the Option Bytes Programming operation */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80004f6:	6923      	ldr	r3, [r4, #16]
      
      WRITE_REG(OB->RDP, ReadProtectLevel);
 80004f8:	b2ad      	uxth	r5, r5
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80004fa:	f043 0310 	orr.w	r3, r3, #16
 80004fe:	6123      	str	r3, [r4, #16]
      WRITE_REG(OB->RDP, ReadProtectLevel);
 8000500:	4b07      	ldr	r3, [pc, #28]	; (8000520 <FLASH_OB_RDP_LevelConfig+0x60>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
 8000502:	f24c 3050 	movw	r0, #50000	; 0xc350
      WRITE_REG(OB->RDP, ReadProtectLevel);
 8000506:	801d      	strh	r5, [r3, #0]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
 8000508:	f7ff ff58 	bl	80003bc <FLASH_WaitForLastOperation>
      
      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 800050c:	6923      	ldr	r3, [r4, #16]
 800050e:	f023 0310 	bic.w	r3, r3, #16
 8000512:	6123      	str	r3, [r4, #16]
    }
  }
  
  return status;
}
 8000514:	bd38      	pop	{r3, r4, r5, pc}
 8000516:	bf00      	nop
 8000518:	200000a0 	.word	0x200000a0
 800051c:	40022000 	.word	0x40022000
 8000520:	1ffff800 	.word	0x1ffff800

08000524 <HAL_FLASHEx_OBErase>:
{
 8000524:	b538      	push	{r3, r4, r5, lr}
{
  uint32_t readstatus = OB_RDP_LEVEL_0;
  uint32_t tmp_reg = 0U;
  
  /* Read RDP level bits */
  tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
 8000526:	4c12      	ldr	r4, [pc, #72]	; (8000570 <HAL_FLASHEx_OBErase+0x4c>)
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000528:	f24c 3050 	movw	r0, #50000	; 0xc350
  tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
 800052c:	69e3      	ldr	r3, [r4, #28]

  if (tmp_reg == FLASH_OBR_RDPRT)
 800052e:	f013 0f02 	tst.w	r3, #2
  {
    readstatus = OB_RDP_LEVEL_1;
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_0;
 8000532:	bf14      	ite	ne
 8000534:	2500      	movne	r5, #0
 8000536:	25a5      	moveq	r5, #165	; 0xa5
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000538:	f7ff ff40 	bl	80003bc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800053c:	b9b8      	cbnz	r0, 800056e <HAL_FLASHEx_OBErase+0x4a>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800053e:	4a0d      	ldr	r2, [pc, #52]	; (8000574 <HAL_FLASHEx_OBErase+0x50>)
 8000540:	61d0      	str	r0, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8000542:	6923      	ldr	r3, [r4, #16]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000544:	f24c 3050 	movw	r0, #50000	; 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8000548:	f043 0320 	orr.w	r3, r3, #32
 800054c:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800054e:	6923      	ldr	r3, [r4, #16]
 8000550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000554:	6123      	str	r3, [r4, #16]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000556:	f7ff ff31 	bl	80003bc <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 800055a:	6923      	ldr	r3, [r4, #16]
 800055c:	f023 0320 	bic.w	r3, r3, #32
 8000560:	6123      	str	r3, [r4, #16]
    if(status == HAL_OK)
 8000562:	b920      	cbnz	r0, 800056e <HAL_FLASHEx_OBErase+0x4a>
      status = FLASH_OB_RDP_LevelConfig(rdptmp);
 8000564:	4628      	mov	r0, r5
}
 8000566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      status = FLASH_OB_RDP_LevelConfig(rdptmp);
 800056a:	f7ff bfa9 	b.w	80004c0 <FLASH_OB_RDP_LevelConfig>
}
 800056e:	bd38      	pop	{r3, r4, r5, pc}
 8000570:	40022000 	.word	0x40022000
 8000574:	200000a0 	.word	0x200000a0

08000578 <HAL_FLASHEx_OBProgram>:
{
 8000578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 800057c:	4d7a      	ldr	r5, [pc, #488]	; (8000768 <HAL_FLASHEx_OBProgram+0x1f0>)
{
 800057e:	4606      	mov	r6, r0
  __HAL_LOCK(&pFlash);
 8000580:	7e2b      	ldrb	r3, [r5, #24]
 8000582:	2b01      	cmp	r3, #1
 8000584:	f000 80ec 	beq.w	8000760 <HAL_FLASHEx_OBProgram+0x1e8>
 8000588:	2001      	movs	r0, #1
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800058a:	6833      	ldr	r3, [r6, #0]
  __HAL_LOCK(&pFlash);
 800058c:	7628      	strb	r0, [r5, #24]
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800058e:	07dc      	lsls	r4, r3, #31
 8000590:	f140 80a1 	bpl.w	80006d6 <HAL_FLASHEx_OBProgram+0x15e>
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8000594:	6873      	ldr	r3, [r6, #4]
 8000596:	4f75      	ldr	r7, [pc, #468]	; (800076c <HAL_FLASHEx_OBProgram+0x1f4>)
 8000598:	4283      	cmp	r3, r0
 800059a:	68b4      	ldr	r4, [r6, #8]
  return (uint32_t)(READ_REG(FLASH->WRPR));
 800059c:	f8d7 8020 	ldr.w	r8, [r7, #32]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80005a0:	f24c 3050 	movw	r0, #50000	; 0xc350
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 80005a4:	d150      	bne.n	8000648 <HAL_FLASHEx_OBProgram+0xd0>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80005a6:	f7ff ff09 	bl	80003bc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80005aa:	bb50      	cbnz	r0, 8000602 <HAL_FLASHEx_OBProgram+0x8a>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80005ac:	61e8      	str	r0, [r5, #28]
    status = HAL_FLASHEx_OBErase();
 80005ae:	f7ff ffb9 	bl	8000524 <HAL_FLASHEx_OBErase>
    if (status == HAL_OK)  
 80005b2:	bb30      	cbnz	r0, 8000602 <HAL_FLASHEx_OBProgram+0x8a>
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80005b4:	693a      	ldr	r2, [r7, #16]
  WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
 80005b6:	ea28 0404 	bic.w	r4, r8, r4
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 80005ba:	b2e3      	uxtb	r3, r4
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80005bc:	f042 0210 	orr.w	r2, r2, #16
      if(WRP0_Data != 0xFFU)
 80005c0:	2bff      	cmp	r3, #255	; 0xff
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80005c2:	613a      	str	r2, [r7, #16]
      if(WRP0_Data != 0xFFU)
 80005c4:	d10c      	bne.n	80005e0 <HAL_FLASHEx_OBProgram+0x68>
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
 80005c6:	f3c4 2307 	ubfx	r3, r4, #8, #8
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 80005ca:	2bff      	cmp	r3, #255	; 0xff
 80005cc:	d11d      	bne.n	800060a <HAL_FLASHEx_OBProgram+0x92>
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
 80005ce:	f3c4 4307 	ubfx	r3, r4, #16, #8
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 80005d2:	2bff      	cmp	r3, #255	; 0xff
 80005d4:	d124      	bne.n	8000620 <HAL_FLASHEx_OBProgram+0xa8>
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
 80005d6:	0e24      	lsrs	r4, r4, #24
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 80005d8:	2cff      	cmp	r4, #255	; 0xff
 80005da:	d12c      	bne.n	8000636 <HAL_FLASHEx_OBProgram+0xbe>
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 80005dc:	2000      	movs	r0, #0
 80005de:	e009      	b.n	80005f4 <HAL_FLASHEx_OBProgram+0x7c>
        OB->WRP0 &= WRP0_Data;
 80005e0:	4a63      	ldr	r2, [pc, #396]	; (8000770 <HAL_FLASHEx_OBProgram+0x1f8>)
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80005e2:	f24c 3050 	movw	r0, #50000	; 0xc350
        OB->WRP0 &= WRP0_Data;
 80005e6:	8911      	ldrh	r1, [r2, #8]
 80005e8:	400b      	ands	r3, r1
 80005ea:	8113      	strh	r3, [r2, #8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80005ec:	f7ff fee6 	bl	80003bc <FLASH_WaitForLastOperation>
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 80005f0:	2800      	cmp	r0, #0
 80005f2:	d0e8      	beq.n	80005c6 <HAL_FLASHEx_OBProgram+0x4e>
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80005f4:	4a5d      	ldr	r2, [pc, #372]	; (800076c <HAL_FLASHEx_OBProgram+0x1f4>)
 80005f6:	6913      	ldr	r3, [r2, #16]
 80005f8:	f023 0310 	bic.w	r3, r3, #16
 80005fc:	6113      	str	r3, [r2, #16]
    if (status != HAL_OK)
 80005fe:	2800      	cmp	r0, #0
 8000600:	d069      	beq.n	80006d6 <HAL_FLASHEx_OBProgram+0x15e>
  __HAL_UNLOCK(&pFlash);
 8000602:	2300      	movs	r3, #0
 8000604:	762b      	strb	r3, [r5, #24]
  return status;
 8000606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        OB->WRP1 &= WRP1_Data;
 800060a:	4a59      	ldr	r2, [pc, #356]	; (8000770 <HAL_FLASHEx_OBProgram+0x1f8>)
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800060c:	f24c 3050 	movw	r0, #50000	; 0xc350
        OB->WRP1 &= WRP1_Data;
 8000610:	8951      	ldrh	r1, [r2, #10]
 8000612:	400b      	ands	r3, r1
 8000614:	8153      	strh	r3, [r2, #10]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000616:	f7ff fed1 	bl	80003bc <FLASH_WaitForLastOperation>
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 800061a:	2800      	cmp	r0, #0
 800061c:	d0d7      	beq.n	80005ce <HAL_FLASHEx_OBProgram+0x56>
 800061e:	e7e9      	b.n	80005f4 <HAL_FLASHEx_OBProgram+0x7c>
        OB->WRP2 &= WRP2_Data;
 8000620:	4a53      	ldr	r2, [pc, #332]	; (8000770 <HAL_FLASHEx_OBProgram+0x1f8>)
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000622:	f24c 3050 	movw	r0, #50000	; 0xc350
        OB->WRP2 &= WRP2_Data;
 8000626:	8991      	ldrh	r1, [r2, #12]
 8000628:	400b      	ands	r3, r1
 800062a:	8193      	strh	r3, [r2, #12]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800062c:	f7ff fec6 	bl	80003bc <FLASH_WaitForLastOperation>
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 8000630:	2800      	cmp	r0, #0
 8000632:	d0d0      	beq.n	80005d6 <HAL_FLASHEx_OBProgram+0x5e>
 8000634:	e7de      	b.n	80005f4 <HAL_FLASHEx_OBProgram+0x7c>
        OB->WRP3 &= WRP3_Data;
 8000636:	4b4e      	ldr	r3, [pc, #312]	; (8000770 <HAL_FLASHEx_OBProgram+0x1f8>)
 8000638:	89da      	ldrh	r2, [r3, #14]
 800063a:	4014      	ands	r4, r2
 800063c:	81dc      	strh	r4, [r3, #14]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800063e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000642:	f7ff febb 	bl	80003bc <FLASH_WaitForLastOperation>
 8000646:	e7d5      	b.n	80005f4 <HAL_FLASHEx_OBProgram+0x7c>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000648:	f7ff feb8 	bl	80003bc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800064c:	2800      	cmp	r0, #0
 800064e:	d1d8      	bne.n	8000602 <HAL_FLASHEx_OBProgram+0x8a>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000650:	61e8      	str	r0, [r5, #28]
    status = HAL_FLASHEx_OBErase();
 8000652:	f7ff ff67 	bl	8000524 <HAL_FLASHEx_OBErase>
    if (status == HAL_OK)  
 8000656:	2800      	cmp	r0, #0
 8000658:	d1d3      	bne.n	8000602 <HAL_FLASHEx_OBProgram+0x8a>
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 800065a:	693a      	ldr	r2, [r7, #16]
  WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
 800065c:	ea44 0408 	orr.w	r4, r4, r8
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 8000660:	b2e3      	uxtb	r3, r4
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8000662:	f042 0210 	orr.w	r2, r2, #16
      if(WRP0_Data != 0xFFU)
 8000666:	2bff      	cmp	r3, #255	; 0xff
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8000668:	613a      	str	r2, [r7, #16]
      if(WRP0_Data != 0xFFU)
 800066a:	d110      	bne.n	800068e <HAL_FLASHEx_OBProgram+0x116>
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
 800066c:	f3c4 2307 	ubfx	r3, r4, #8, #8
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 8000670:	2bff      	cmp	r3, #255	; 0xff
 8000672:	d118      	bne.n	80006a6 <HAL_FLASHEx_OBProgram+0x12e>
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
 8000674:	f3c4 4307 	ubfx	r3, r4, #16, #8
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8000678:	2bff      	cmp	r3, #255	; 0xff
 800067a:	d120      	bne.n	80006be <HAL_FLASHEx_OBProgram+0x146>
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
 800067c:	0e24      	lsrs	r4, r4, #24
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 800067e:	2cff      	cmp	r4, #255	; 0xff
 8000680:	d0ac      	beq.n	80005dc <HAL_FLASHEx_OBProgram+0x64>
        OB->WRP3 |= WRP3_Data;
 8000682:	4a3b      	ldr	r2, [pc, #236]	; (8000770 <HAL_FLASHEx_OBProgram+0x1f8>)
 8000684:	89d3      	ldrh	r3, [r2, #14]
 8000686:	b29b      	uxth	r3, r3
 8000688:	431c      	orrs	r4, r3
 800068a:	81d4      	strh	r4, [r2, #14]
 800068c:	e7d7      	b.n	800063e <HAL_FLASHEx_OBProgram+0xc6>
        OB->WRP0 |= WRP0_Data;
 800068e:	4938      	ldr	r1, [pc, #224]	; (8000770 <HAL_FLASHEx_OBProgram+0x1f8>)
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000690:	f24c 3050 	movw	r0, #50000	; 0xc350
        OB->WRP0 |= WRP0_Data;
 8000694:	890a      	ldrh	r2, [r1, #8]
 8000696:	b292      	uxth	r2, r2
 8000698:	4313      	orrs	r3, r2
 800069a:	810b      	strh	r3, [r1, #8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800069c:	f7ff fe8e 	bl	80003bc <FLASH_WaitForLastOperation>
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 80006a0:	2800      	cmp	r0, #0
 80006a2:	d1a7      	bne.n	80005f4 <HAL_FLASHEx_OBProgram+0x7c>
 80006a4:	e7e2      	b.n	800066c <HAL_FLASHEx_OBProgram+0xf4>
        OB->WRP1 |= WRP1_Data;
 80006a6:	4932      	ldr	r1, [pc, #200]	; (8000770 <HAL_FLASHEx_OBProgram+0x1f8>)
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80006a8:	f24c 3050 	movw	r0, #50000	; 0xc350
        OB->WRP1 |= WRP1_Data;
 80006ac:	894a      	ldrh	r2, [r1, #10]
 80006ae:	b292      	uxth	r2, r2
 80006b0:	4313      	orrs	r3, r2
 80006b2:	814b      	strh	r3, [r1, #10]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80006b4:	f7ff fe82 	bl	80003bc <FLASH_WaitForLastOperation>
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 80006b8:	2800      	cmp	r0, #0
 80006ba:	d0db      	beq.n	8000674 <HAL_FLASHEx_OBProgram+0xfc>
 80006bc:	e79a      	b.n	80005f4 <HAL_FLASHEx_OBProgram+0x7c>
        OB->WRP2 |= WRP2_Data;
 80006be:	492c      	ldr	r1, [pc, #176]	; (8000770 <HAL_FLASHEx_OBProgram+0x1f8>)
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80006c0:	f24c 3050 	movw	r0, #50000	; 0xc350
        OB->WRP2 |= WRP2_Data;
 80006c4:	898a      	ldrh	r2, [r1, #12]
 80006c6:	b292      	uxth	r2, r2
 80006c8:	4313      	orrs	r3, r2
 80006ca:	818b      	strh	r3, [r1, #12]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80006cc:	f7ff fe76 	bl	80003bc <FLASH_WaitForLastOperation>
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 80006d0:	2800      	cmp	r0, #0
 80006d2:	d0d3      	beq.n	800067c <HAL_FLASHEx_OBProgram+0x104>
 80006d4:	e78e      	b.n	80005f4 <HAL_FLASHEx_OBProgram+0x7c>
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 80006d6:	6833      	ldr	r3, [r6, #0]
 80006d8:	0799      	lsls	r1, r3, #30
 80006da:	d504      	bpl.n	80006e6 <HAL_FLASHEx_OBProgram+0x16e>
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 80006dc:	7c30      	ldrb	r0, [r6, #16]
 80006de:	f7ff feef 	bl	80004c0 <FLASH_OB_RDP_LevelConfig>
    if (status != HAL_OK)
 80006e2:	2800      	cmp	r0, #0
 80006e4:	d18d      	bne.n	8000602 <HAL_FLASHEx_OBProgram+0x8a>
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 80006e6:	6833      	ldr	r3, [r6, #0]
 80006e8:	075a      	lsls	r2, r3, #29
 80006ea:	d51b      	bpl.n	8000724 <HAL_FLASHEx_OBProgram+0x1ac>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80006ec:	f24c 3050 	movw	r0, #50000	; 0xc350
    status = FLASH_OB_UserConfig(pOBInit->USERConfig);
 80006f0:	7c77      	ldrb	r7, [r6, #17]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80006f2:	f7ff fe63 	bl	80003bc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80006f6:	2800      	cmp	r0, #0
 80006f8:	d183      	bne.n	8000602 <HAL_FLASHEx_OBProgram+0x8a>
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 80006fa:	4c1c      	ldr	r4, [pc, #112]	; (800076c <HAL_FLASHEx_OBProgram+0x1f4>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80006fc:	61e8      	str	r0, [r5, #28]
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 80006fe:	6923      	ldr	r3, [r4, #16]
    OB->USER = (UserConfig | 0x88U);
 8000700:	f047 0788 	orr.w	r7, r7, #136	; 0x88
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8000704:	f043 0310 	orr.w	r3, r3, #16
 8000708:	6123      	str	r3, [r4, #16]
    OB->USER = (UserConfig | 0x88U);
 800070a:	4b19      	ldr	r3, [pc, #100]	; (8000770 <HAL_FLASHEx_OBProgram+0x1f8>)
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800070c:	f24c 3050 	movw	r0, #50000	; 0xc350
    OB->USER = (UserConfig | 0x88U);
 8000710:	805f      	strh	r7, [r3, #2]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000712:	f7ff fe53 	bl	80003bc <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8000716:	6923      	ldr	r3, [r4, #16]
 8000718:	f023 0310 	bic.w	r3, r3, #16
 800071c:	6123      	str	r3, [r4, #16]
    if (status != HAL_OK)
 800071e:	2800      	cmp	r0, #0
 8000720:	f47f af6f 	bne.w	8000602 <HAL_FLASHEx_OBProgram+0x8a>
  if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
 8000724:	6833      	ldr	r3, [r6, #0]
 8000726:	071b      	lsls	r3, r3, #28
 8000728:	f57f af6b 	bpl.w	8000602 <HAL_FLASHEx_OBProgram+0x8a>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800072c:	f24c 3050 	movw	r0, #50000	; 0xc350
    status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
 8000730:	6977      	ldr	r7, [r6, #20]
 8000732:	7e36      	ldrb	r6, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000734:	f7ff fe42 	bl	80003bc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000738:	2800      	cmp	r0, #0
 800073a:	f47f af62 	bne.w	8000602 <HAL_FLASHEx_OBProgram+0x8a>
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 800073e:	4c0b      	ldr	r4, [pc, #44]	; (800076c <HAL_FLASHEx_OBProgram+0x1f4>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000740:	61e8      	str	r0, [r5, #28]
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8000742:	6923      	ldr	r3, [r4, #16]
    *(__IO uint16_t*)Address = Data;
 8000744:	b2b6      	uxth	r6, r6
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8000746:	f043 0310 	orr.w	r3, r3, #16
 800074a:	6123      	str	r3, [r4, #16]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800074c:	f24c 3050 	movw	r0, #50000	; 0xc350
    *(__IO uint16_t*)Address = Data;
 8000750:	803e      	strh	r6, [r7, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000752:	f7ff fe33 	bl	80003bc <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8000756:	6923      	ldr	r3, [r4, #16]
 8000758:	f023 0310 	bic.w	r3, r3, #16
 800075c:	6123      	str	r3, [r4, #16]
 800075e:	e750      	b.n	8000602 <HAL_FLASHEx_OBProgram+0x8a>
  __HAL_LOCK(&pFlash);
 8000760:	2002      	movs	r0, #2
}
 8000762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000766:	bf00      	nop
 8000768:	200000a0 	.word	0x200000a0
 800076c:	40022000 	.word	0x40022000
 8000770:	1ffff800 	.word	0x1ffff800

08000774 <HAL_FLASHEx_OBGetConfig>:
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 8000774:	2307      	movs	r3, #7
 8000776:	6003      	str	r3, [r0, #0]
  return (uint32_t)(READ_REG(FLASH->WRPR));
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <HAL_FLASHEx_OBGetConfig+0x24>)
 800077a:	6a1a      	ldr	r2, [r3, #32]
  pOBInit->WRPPage = FLASH_OB_GetWRP();
 800077c:	6082      	str	r2, [r0, #8]
  tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
 800077e:	69da      	ldr	r2, [r3, #28]
  if (tmp_reg == FLASH_OBR_RDPRT)
 8000780:	f012 0f02 	tst.w	r2, #2
    readstatus = OB_RDP_LEVEL_0;
 8000784:	bf14      	ite	ne
 8000786:	2200      	movne	r2, #0
 8000788:	22a5      	moveq	r2, #165	; 0xa5
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800078a:	7402      	strb	r2, [r0, #16]
  *         And FLASH_OBR_BFB2(Bit5) for STM32F101xG and STM32F103xG . 
  */
static uint8_t FLASH_OB_GetUser(void)
{
  /* Return the User Option Byte */
  return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	f3c3 0382 	ubfx	r3, r3, #2, #3
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8000792:	7443      	strb	r3, [r0, #17]
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	40022000 	.word	0x40022000

0800079c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800079c:	2200      	movs	r2, #0
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <FLASH_PageErase+0x1c>)
 80007a0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <FLASH_PageErase+0x20>)
 80007a4:	691a      	ldr	r2, [r3, #16]
 80007a6:	f042 0202 	orr.w	r2, r2, #2
 80007aa:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80007ac:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80007ae:	691a      	ldr	r2, [r3, #16]
 80007b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80007b4:	611a      	str	r2, [r3, #16]
 80007b6:	4770      	bx	lr
 80007b8:	200000a0 	.word	0x200000a0
 80007bc:	40022000 	.word	0x40022000

080007c0 <HAL_FLASHEx_Erase>:
{
 80007c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80007c4:	4d23      	ldr	r5, [pc, #140]	; (8000854 <HAL_FLASHEx_Erase+0x94>)
{
 80007c6:	4607      	mov	r7, r0
  __HAL_LOCK(&pFlash);
 80007c8:	7e2b      	ldrb	r3, [r5, #24]
{
 80007ca:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d03d      	beq.n	800084c <HAL_FLASHEx_Erase+0x8c>
 80007d0:	2401      	movs	r4, #1
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80007d2:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(&pFlash);
 80007d4:	762c      	strb	r4, [r5, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80007d6:	2b02      	cmp	r3, #2
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80007d8:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80007dc:	d113      	bne.n	8000806 <HAL_FLASHEx_Erase+0x46>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80007de:	f7ff fded 	bl	80003bc <FLASH_WaitForLastOperation>
 80007e2:	b120      	cbz	r0, 80007ee <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 80007e4:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80007e6:	2300      	movs	r3, #0
 80007e8:	762b      	strb	r3, [r5, #24]
  return status;
 80007ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_MassErase(FLASH_BANK_1);
 80007ee:	f7ff fe55 	bl	800049c <FLASH_MassErase.isra.0>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80007f2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80007f6:	f7ff fde1 	bl	80003bc <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80007fa:	4a17      	ldr	r2, [pc, #92]	; (8000858 <HAL_FLASHEx_Erase+0x98>)
 80007fc:	6913      	ldr	r3, [r2, #16]
 80007fe:	f023 0304 	bic.w	r3, r3, #4
 8000802:	6113      	str	r3, [r2, #16]
 8000804:	e7ef      	b.n	80007e6 <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000806:	f7ff fdd9 	bl	80003bc <FLASH_WaitForLastOperation>
 800080a:	2800      	cmp	r0, #0
 800080c:	d1ea      	bne.n	80007e4 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 800080e:	f04f 33ff 	mov.w	r3, #4294967295
 8000812:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000816:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 8000818:	68be      	ldr	r6, [r7, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800081a:	4c0f      	ldr	r4, [pc, #60]	; (8000858 <HAL_FLASHEx_Erase+0x98>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800081c:	68fa      	ldr	r2, [r7, #12]
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 8000824:	429e      	cmp	r6, r3
 8000826:	d2de      	bcs.n	80007e6 <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8000828:	4630      	mov	r0, r6
 800082a:	f7ff ffb7 	bl	800079c <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800082e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000832:	f7ff fdc3 	bl	80003bc <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000836:	6923      	ldr	r3, [r4, #16]
 8000838:	f023 0302 	bic.w	r3, r3, #2
 800083c:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 800083e:	b110      	cbz	r0, 8000846 <HAL_FLASHEx_Erase+0x86>
            *PageError = address;
 8000840:	f8c8 6000 	str.w	r6, [r8]
            break;
 8000844:	e7cf      	b.n	80007e6 <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8000846:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800084a:	e7e7      	b.n	800081c <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 800084c:	2002      	movs	r0, #2
}
 800084e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000852:	bf00      	nop
 8000854:	200000a0 	.word	0x200000a0
 8000858:	40022000 	.word	0x40022000

0800085c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800085c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000860:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000862:	4616      	mov	r6, r2
 8000864:	4b65      	ldr	r3, [pc, #404]	; (80009fc <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000866:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000a0c <HAL_GPIO_Init+0x1b0>
 800086a:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000a10 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 800086e:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000872:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000874:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000878:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 800087c:	45a0      	cmp	r8, r4
 800087e:	d17f      	bne.n	8000980 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000880:	684d      	ldr	r5, [r1, #4]
 8000882:	2d12      	cmp	r5, #18
 8000884:	f000 80af 	beq.w	80009e6 <HAL_GPIO_Init+0x18a>
 8000888:	f200 8088 	bhi.w	800099c <HAL_GPIO_Init+0x140>
 800088c:	2d02      	cmp	r5, #2
 800088e:	f000 80a7 	beq.w	80009e0 <HAL_GPIO_Init+0x184>
 8000892:	d87c      	bhi.n	800098e <HAL_GPIO_Init+0x132>
 8000894:	2d00      	cmp	r5, #0
 8000896:	f000 808e 	beq.w	80009b6 <HAL_GPIO_Init+0x15a>
 800089a:	2d01      	cmp	r5, #1
 800089c:	f000 809e 	beq.w	80009dc <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008a0:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008a4:	2cff      	cmp	r4, #255	; 0xff
 80008a6:	bf93      	iteet	ls
 80008a8:	4682      	movls	sl, r0
 80008aa:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80008ae:	3d08      	subhi	r5, #8
 80008b0:	f8d0 b000 	ldrls.w	fp, [r0]
 80008b4:	bf92      	itee	ls
 80008b6:	00b5      	lslls	r5, r6, #2
 80008b8:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80008bc:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008be:	fa09 f805 	lsl.w	r8, r9, r5
 80008c2:	ea2b 0808 	bic.w	r8, fp, r8
 80008c6:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008ca:	bf88      	it	hi
 80008cc:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008d0:	ea48 0505 	orr.w	r5, r8, r5
 80008d4:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008d8:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80008dc:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80008e0:	d04e      	beq.n	8000980 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008e2:	4d47      	ldr	r5, [pc, #284]	; (8000a00 <HAL_GPIO_Init+0x1a4>)
 80008e4:	4f46      	ldr	r7, [pc, #280]	; (8000a00 <HAL_GPIO_Init+0x1a4>)
 80008e6:	69ad      	ldr	r5, [r5, #24]
 80008e8:	f026 0803 	bic.w	r8, r6, #3
 80008ec:	f045 0501 	orr.w	r5, r5, #1
 80008f0:	61bd      	str	r5, [r7, #24]
 80008f2:	69bd      	ldr	r5, [r7, #24]
 80008f4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80008f8:	f005 0501 	and.w	r5, r5, #1
 80008fc:	9501      	str	r5, [sp, #4]
 80008fe:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000902:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000906:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000908:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800090c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000910:	fa09 f90b 	lsl.w	r9, r9, fp
 8000914:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000918:	4d3a      	ldr	r5, [pc, #232]	; (8000a04 <HAL_GPIO_Init+0x1a8>)
 800091a:	42a8      	cmp	r0, r5
 800091c:	d068      	beq.n	80009f0 <HAL_GPIO_Init+0x194>
 800091e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000922:	42a8      	cmp	r0, r5
 8000924:	d066      	beq.n	80009f4 <HAL_GPIO_Init+0x198>
 8000926:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800092a:	42a8      	cmp	r0, r5
 800092c:	d064      	beq.n	80009f8 <HAL_GPIO_Init+0x19c>
 800092e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000932:	42a8      	cmp	r0, r5
 8000934:	bf0c      	ite	eq
 8000936:	2503      	moveq	r5, #3
 8000938:	2504      	movne	r5, #4
 800093a:	fa05 f50b 	lsl.w	r5, r5, fp
 800093e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000942:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000946:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000948:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800094c:	bf14      	ite	ne
 800094e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000950:	43a5      	biceq	r5, r4
 8000952:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000954:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000956:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800095a:	bf14      	ite	ne
 800095c:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800095e:	43a5      	biceq	r5, r4
 8000960:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000962:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000964:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000968:	bf14      	ite	ne
 800096a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800096c:	43a5      	biceq	r5, r4
 800096e:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000970:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000972:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000976:	bf14      	ite	ne
 8000978:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800097a:	ea25 0404 	biceq.w	r4, r5, r4
 800097e:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000980:	3601      	adds	r6, #1
 8000982:	2e10      	cmp	r6, #16
 8000984:	f47f af73 	bne.w	800086e <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000988:	b003      	add	sp, #12
 800098a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800098e:	2d03      	cmp	r5, #3
 8000990:	d022      	beq.n	80009d8 <HAL_GPIO_Init+0x17c>
 8000992:	2d11      	cmp	r5, #17
 8000994:	d184      	bne.n	80008a0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000996:	68ca      	ldr	r2, [r1, #12]
 8000998:	3204      	adds	r2, #4
          break;
 800099a:	e781      	b.n	80008a0 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800099c:	4f1a      	ldr	r7, [pc, #104]	; (8000a08 <HAL_GPIO_Init+0x1ac>)
 800099e:	42bd      	cmp	r5, r7
 80009a0:	d009      	beq.n	80009b6 <HAL_GPIO_Init+0x15a>
 80009a2:	d812      	bhi.n	80009ca <HAL_GPIO_Init+0x16e>
 80009a4:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000a14 <HAL_GPIO_Init+0x1b8>
 80009a8:	454d      	cmp	r5, r9
 80009aa:	d004      	beq.n	80009b6 <HAL_GPIO_Init+0x15a>
 80009ac:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80009b0:	454d      	cmp	r5, r9
 80009b2:	f47f af75 	bne.w	80008a0 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009b6:	688a      	ldr	r2, [r1, #8]
 80009b8:	b1c2      	cbz	r2, 80009ec <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009ba:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80009bc:	bf0c      	ite	eq
 80009be:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80009c2:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009c6:	2208      	movs	r2, #8
 80009c8:	e76a      	b.n	80008a0 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80009ca:	4575      	cmp	r5, lr
 80009cc:	d0f3      	beq.n	80009b6 <HAL_GPIO_Init+0x15a>
 80009ce:	4565      	cmp	r5, ip
 80009d0:	d0f1      	beq.n	80009b6 <HAL_GPIO_Init+0x15a>
 80009d2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000a18 <HAL_GPIO_Init+0x1bc>
 80009d6:	e7eb      	b.n	80009b0 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009d8:	2200      	movs	r2, #0
 80009da:	e761      	b.n	80008a0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009dc:	68ca      	ldr	r2, [r1, #12]
          break;
 80009de:	e75f      	b.n	80008a0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009e0:	68ca      	ldr	r2, [r1, #12]
 80009e2:	3208      	adds	r2, #8
          break;
 80009e4:	e75c      	b.n	80008a0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009e6:	68ca      	ldr	r2, [r1, #12]
 80009e8:	320c      	adds	r2, #12
          break;
 80009ea:	e759      	b.n	80008a0 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009ec:	2204      	movs	r2, #4
 80009ee:	e757      	b.n	80008a0 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009f0:	2500      	movs	r5, #0
 80009f2:	e7a2      	b.n	800093a <HAL_GPIO_Init+0xde>
 80009f4:	2501      	movs	r5, #1
 80009f6:	e7a0      	b.n	800093a <HAL_GPIO_Init+0xde>
 80009f8:	2502      	movs	r5, #2
 80009fa:	e79e      	b.n	800093a <HAL_GPIO_Init+0xde>
 80009fc:	40010400 	.word	0x40010400
 8000a00:	40021000 	.word	0x40021000
 8000a04:	40010800 	.word	0x40010800
 8000a08:	10210000 	.word	0x10210000
 8000a0c:	10310000 	.word	0x10310000
 8000a10:	10320000 	.word	0x10320000
 8000a14:	10110000 	.word	0x10110000
 8000a18:	10220000 	.word	0x10220000

08000a1c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000a1c:	6883      	ldr	r3, [r0, #8]
 8000a1e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000a20:	bf14      	ite	ne
 8000a22:	2001      	movne	r0, #1
 8000a24:	2000      	moveq	r0, #0
 8000a26:	4770      	bx	lr

08000a28 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a28:	b10a      	cbz	r2, 8000a2e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a2a:	6101      	str	r1, [r0, #16]
 8000a2c:	4770      	bx	lr
 8000a2e:	0409      	lsls	r1, r1, #16
 8000a30:	e7fb      	b.n	8000a2a <HAL_GPIO_WritePin+0x2>

08000a32 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a32:	4770      	bx	lr

08000a34 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000a34:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000a36:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000a38:	6959      	ldr	r1, [r3, #20]
 8000a3a:	4201      	tst	r1, r0
 8000a3c:	d002      	beq.n	8000a44 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000a3e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000a40:	f7ff fff7 	bl	8000a32 <HAL_GPIO_EXTI_Callback>
 8000a44:	bd08      	pop	{r3, pc}
 8000a46:	bf00      	nop
 8000a48:	40010400 	.word	0x40010400

08000a4c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a4c:	6803      	ldr	r3, [r0, #0]
{
 8000a4e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a52:	07db      	lsls	r3, r3, #31
{
 8000a54:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a56:	d410      	bmi.n	8000a7a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a58:	682b      	ldr	r3, [r5, #0]
 8000a5a:	079f      	lsls	r7, r3, #30
 8000a5c:	d45e      	bmi.n	8000b1c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a5e:	682b      	ldr	r3, [r5, #0]
 8000a60:	0719      	lsls	r1, r3, #28
 8000a62:	f100 8095 	bmi.w	8000b90 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a66:	682b      	ldr	r3, [r5, #0]
 8000a68:	075a      	lsls	r2, r3, #29
 8000a6a:	f100 80bf 	bmi.w	8000bec <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a6e:	69ea      	ldr	r2, [r5, #28]
 8000a70:	2a00      	cmp	r2, #0
 8000a72:	f040 812d 	bne.w	8000cd0 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000a76:	2000      	movs	r0, #0
 8000a78:	e014      	b.n	8000aa4 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a7a:	4c90      	ldr	r4, [pc, #576]	; (8000cbc <HAL_RCC_OscConfig+0x270>)
 8000a7c:	6863      	ldr	r3, [r4, #4]
 8000a7e:	f003 030c 	and.w	r3, r3, #12
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	d007      	beq.n	8000a96 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a86:	6863      	ldr	r3, [r4, #4]
 8000a88:	f003 030c 	and.w	r3, r3, #12
 8000a8c:	2b08      	cmp	r3, #8
 8000a8e:	d10c      	bne.n	8000aaa <HAL_RCC_OscConfig+0x5e>
 8000a90:	6863      	ldr	r3, [r4, #4]
 8000a92:	03de      	lsls	r6, r3, #15
 8000a94:	d509      	bpl.n	8000aaa <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a96:	6823      	ldr	r3, [r4, #0]
 8000a98:	039c      	lsls	r4, r3, #14
 8000a9a:	d5dd      	bpl.n	8000a58 <HAL_RCC_OscConfig+0xc>
 8000a9c:	686b      	ldr	r3, [r5, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d1da      	bne.n	8000a58 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000aa2:	2001      	movs	r0, #1
}
 8000aa4:	b002      	add	sp, #8
 8000aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aaa:	686b      	ldr	r3, [r5, #4]
 8000aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ab0:	d110      	bne.n	8000ad4 <HAL_RCC_OscConfig+0x88>
 8000ab2:	6823      	ldr	r3, [r4, #0]
 8000ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ab8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000aba:	f7ff fb95 	bl	80001e8 <HAL_GetTick>
 8000abe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ac0:	6823      	ldr	r3, [r4, #0]
 8000ac2:	0398      	lsls	r0, r3, #14
 8000ac4:	d4c8      	bmi.n	8000a58 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ac6:	f7ff fb8f 	bl	80001e8 <HAL_GetTick>
 8000aca:	1b80      	subs	r0, r0, r6
 8000acc:	2864      	cmp	r0, #100	; 0x64
 8000ace:	d9f7      	bls.n	8000ac0 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	e7e7      	b.n	8000aa4 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ad4:	b99b      	cbnz	r3, 8000afe <HAL_RCC_OscConfig+0xb2>
 8000ad6:	6823      	ldr	r3, [r4, #0]
 8000ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000adc:	6023      	str	r3, [r4, #0]
 8000ade:	6823      	ldr	r3, [r4, #0]
 8000ae0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ae4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ae6:	f7ff fb7f 	bl	80001e8 <HAL_GetTick>
 8000aea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000aec:	6823      	ldr	r3, [r4, #0]
 8000aee:	0399      	lsls	r1, r3, #14
 8000af0:	d5b2      	bpl.n	8000a58 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000af2:	f7ff fb79 	bl	80001e8 <HAL_GetTick>
 8000af6:	1b80      	subs	r0, r0, r6
 8000af8:	2864      	cmp	r0, #100	; 0x64
 8000afa:	d9f7      	bls.n	8000aec <HAL_RCC_OscConfig+0xa0>
 8000afc:	e7e8      	b.n	8000ad0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000afe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b02:	6823      	ldr	r3, [r4, #0]
 8000b04:	d103      	bne.n	8000b0e <HAL_RCC_OscConfig+0xc2>
 8000b06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b0a:	6023      	str	r3, [r4, #0]
 8000b0c:	e7d1      	b.n	8000ab2 <HAL_RCC_OscConfig+0x66>
 8000b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b12:	6023      	str	r3, [r4, #0]
 8000b14:	6823      	ldr	r3, [r4, #0]
 8000b16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b1a:	e7cd      	b.n	8000ab8 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b1c:	4c67      	ldr	r4, [pc, #412]	; (8000cbc <HAL_RCC_OscConfig+0x270>)
 8000b1e:	6863      	ldr	r3, [r4, #4]
 8000b20:	f013 0f0c 	tst.w	r3, #12
 8000b24:	d007      	beq.n	8000b36 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b26:	6863      	ldr	r3, [r4, #4]
 8000b28:	f003 030c 	and.w	r3, r3, #12
 8000b2c:	2b08      	cmp	r3, #8
 8000b2e:	d110      	bne.n	8000b52 <HAL_RCC_OscConfig+0x106>
 8000b30:	6863      	ldr	r3, [r4, #4]
 8000b32:	03da      	lsls	r2, r3, #15
 8000b34:	d40d      	bmi.n	8000b52 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b36:	6823      	ldr	r3, [r4, #0]
 8000b38:	079b      	lsls	r3, r3, #30
 8000b3a:	d502      	bpl.n	8000b42 <HAL_RCC_OscConfig+0xf6>
 8000b3c:	692b      	ldr	r3, [r5, #16]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d1af      	bne.n	8000aa2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b42:	6823      	ldr	r3, [r4, #0]
 8000b44:	696a      	ldr	r2, [r5, #20]
 8000b46:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000b4a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b4e:	6023      	str	r3, [r4, #0]
 8000b50:	e785      	b.n	8000a5e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b52:	692a      	ldr	r2, [r5, #16]
 8000b54:	4b5a      	ldr	r3, [pc, #360]	; (8000cc0 <HAL_RCC_OscConfig+0x274>)
 8000b56:	b16a      	cbz	r2, 8000b74 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000b58:	2201      	movs	r2, #1
 8000b5a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b5c:	f7ff fb44 	bl	80001e8 <HAL_GetTick>
 8000b60:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b62:	6823      	ldr	r3, [r4, #0]
 8000b64:	079f      	lsls	r7, r3, #30
 8000b66:	d4ec      	bmi.n	8000b42 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b68:	f7ff fb3e 	bl	80001e8 <HAL_GetTick>
 8000b6c:	1b80      	subs	r0, r0, r6
 8000b6e:	2802      	cmp	r0, #2
 8000b70:	d9f7      	bls.n	8000b62 <HAL_RCC_OscConfig+0x116>
 8000b72:	e7ad      	b.n	8000ad0 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000b74:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b76:	f7ff fb37 	bl	80001e8 <HAL_GetTick>
 8000b7a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b7c:	6823      	ldr	r3, [r4, #0]
 8000b7e:	0798      	lsls	r0, r3, #30
 8000b80:	f57f af6d 	bpl.w	8000a5e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b84:	f7ff fb30 	bl	80001e8 <HAL_GetTick>
 8000b88:	1b80      	subs	r0, r0, r6
 8000b8a:	2802      	cmp	r0, #2
 8000b8c:	d9f6      	bls.n	8000b7c <HAL_RCC_OscConfig+0x130>
 8000b8e:	e79f      	b.n	8000ad0 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b90:	69aa      	ldr	r2, [r5, #24]
 8000b92:	4c4a      	ldr	r4, [pc, #296]	; (8000cbc <HAL_RCC_OscConfig+0x270>)
 8000b94:	4b4b      	ldr	r3, [pc, #300]	; (8000cc4 <HAL_RCC_OscConfig+0x278>)
 8000b96:	b1da      	cbz	r2, 8000bd0 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000b98:	2201      	movs	r2, #1
 8000b9a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b9c:	f7ff fb24 	bl	80001e8 <HAL_GetTick>
 8000ba0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ba2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ba4:	079b      	lsls	r3, r3, #30
 8000ba6:	d50d      	bpl.n	8000bc4 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ba8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000bac:	4b46      	ldr	r3, [pc, #280]	; (8000cc8 <HAL_RCC_OscConfig+0x27c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bb4:	9301      	str	r3, [sp, #4]
 8000bb6:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000bb8:	9b01      	ldr	r3, [sp, #4]
 8000bba:	1e5a      	subs	r2, r3, #1
 8000bbc:	9201      	str	r2, [sp, #4]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1f9      	bne.n	8000bb6 <HAL_RCC_OscConfig+0x16a>
 8000bc2:	e750      	b.n	8000a66 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bc4:	f7ff fb10 	bl	80001e8 <HAL_GetTick>
 8000bc8:	1b80      	subs	r0, r0, r6
 8000bca:	2802      	cmp	r0, #2
 8000bcc:	d9e9      	bls.n	8000ba2 <HAL_RCC_OscConfig+0x156>
 8000bce:	e77f      	b.n	8000ad0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000bd0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000bd2:	f7ff fb09 	bl	80001e8 <HAL_GetTick>
 8000bd6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000bda:	079f      	lsls	r7, r3, #30
 8000bdc:	f57f af43 	bpl.w	8000a66 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000be0:	f7ff fb02 	bl	80001e8 <HAL_GetTick>
 8000be4:	1b80      	subs	r0, r0, r6
 8000be6:	2802      	cmp	r0, #2
 8000be8:	d9f6      	bls.n	8000bd8 <HAL_RCC_OscConfig+0x18c>
 8000bea:	e771      	b.n	8000ad0 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bec:	4c33      	ldr	r4, [pc, #204]	; (8000cbc <HAL_RCC_OscConfig+0x270>)
 8000bee:	69e3      	ldr	r3, [r4, #28]
 8000bf0:	00d8      	lsls	r0, r3, #3
 8000bf2:	d424      	bmi.n	8000c3e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000bf4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	69e3      	ldr	r3, [r4, #28]
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	61e3      	str	r3, [r4, #28]
 8000bfe:	69e3      	ldr	r3, [r4, #28]
 8000c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c04:	9300      	str	r3, [sp, #0]
 8000c06:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c08:	4e30      	ldr	r6, [pc, #192]	; (8000ccc <HAL_RCC_OscConfig+0x280>)
 8000c0a:	6833      	ldr	r3, [r6, #0]
 8000c0c:	05d9      	lsls	r1, r3, #23
 8000c0e:	d518      	bpl.n	8000c42 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c10:	68eb      	ldr	r3, [r5, #12]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d126      	bne.n	8000c64 <HAL_RCC_OscConfig+0x218>
 8000c16:	6a23      	ldr	r3, [r4, #32]
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000c1e:	f7ff fae3 	bl	80001e8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c22:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000c26:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c28:	6a23      	ldr	r3, [r4, #32]
 8000c2a:	079b      	lsls	r3, r3, #30
 8000c2c:	d53f      	bpl.n	8000cae <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000c2e:	2f00      	cmp	r7, #0
 8000c30:	f43f af1d 	beq.w	8000a6e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c34:	69e3      	ldr	r3, [r4, #28]
 8000c36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c3a:	61e3      	str	r3, [r4, #28]
 8000c3c:	e717      	b.n	8000a6e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000c3e:	2700      	movs	r7, #0
 8000c40:	e7e2      	b.n	8000c08 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c42:	6833      	ldr	r3, [r6, #0]
 8000c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c48:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000c4a:	f7ff facd 	bl	80001e8 <HAL_GetTick>
 8000c4e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c50:	6833      	ldr	r3, [r6, #0]
 8000c52:	05da      	lsls	r2, r3, #23
 8000c54:	d4dc      	bmi.n	8000c10 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c56:	f7ff fac7 	bl	80001e8 <HAL_GetTick>
 8000c5a:	eba0 0008 	sub.w	r0, r0, r8
 8000c5e:	2864      	cmp	r0, #100	; 0x64
 8000c60:	d9f6      	bls.n	8000c50 <HAL_RCC_OscConfig+0x204>
 8000c62:	e735      	b.n	8000ad0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c64:	b9ab      	cbnz	r3, 8000c92 <HAL_RCC_OscConfig+0x246>
 8000c66:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c68:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c6c:	f023 0301 	bic.w	r3, r3, #1
 8000c70:	6223      	str	r3, [r4, #32]
 8000c72:	6a23      	ldr	r3, [r4, #32]
 8000c74:	f023 0304 	bic.w	r3, r3, #4
 8000c78:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000c7a:	f7ff fab5 	bl	80001e8 <HAL_GetTick>
 8000c7e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c80:	6a23      	ldr	r3, [r4, #32]
 8000c82:	0798      	lsls	r0, r3, #30
 8000c84:	d5d3      	bpl.n	8000c2e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c86:	f7ff faaf 	bl	80001e8 <HAL_GetTick>
 8000c8a:	1b80      	subs	r0, r0, r6
 8000c8c:	4540      	cmp	r0, r8
 8000c8e:	d9f7      	bls.n	8000c80 <HAL_RCC_OscConfig+0x234>
 8000c90:	e71e      	b.n	8000ad0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c92:	2b05      	cmp	r3, #5
 8000c94:	6a23      	ldr	r3, [r4, #32]
 8000c96:	d103      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x254>
 8000c98:	f043 0304 	orr.w	r3, r3, #4
 8000c9c:	6223      	str	r3, [r4, #32]
 8000c9e:	e7ba      	b.n	8000c16 <HAL_RCC_OscConfig+0x1ca>
 8000ca0:	f023 0301 	bic.w	r3, r3, #1
 8000ca4:	6223      	str	r3, [r4, #32]
 8000ca6:	6a23      	ldr	r3, [r4, #32]
 8000ca8:	f023 0304 	bic.w	r3, r3, #4
 8000cac:	e7b6      	b.n	8000c1c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cae:	f7ff fa9b 	bl	80001e8 <HAL_GetTick>
 8000cb2:	eba0 0008 	sub.w	r0, r0, r8
 8000cb6:	42b0      	cmp	r0, r6
 8000cb8:	d9b6      	bls.n	8000c28 <HAL_RCC_OscConfig+0x1dc>
 8000cba:	e709      	b.n	8000ad0 <HAL_RCC_OscConfig+0x84>
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	42420000 	.word	0x42420000
 8000cc4:	42420480 	.word	0x42420480
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cd0:	4c22      	ldr	r4, [pc, #136]	; (8000d5c <HAL_RCC_OscConfig+0x310>)
 8000cd2:	6863      	ldr	r3, [r4, #4]
 8000cd4:	f003 030c 	and.w	r3, r3, #12
 8000cd8:	2b08      	cmp	r3, #8
 8000cda:	f43f aee2 	beq.w	8000aa2 <HAL_RCC_OscConfig+0x56>
 8000cde:	2300      	movs	r3, #0
 8000ce0:	4e1f      	ldr	r6, [pc, #124]	; (8000d60 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ce2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000ce4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ce6:	d12b      	bne.n	8000d40 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000ce8:	f7ff fa7e 	bl	80001e8 <HAL_GetTick>
 8000cec:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cee:	6823      	ldr	r3, [r4, #0]
 8000cf0:	0199      	lsls	r1, r3, #6
 8000cf2:	d41f      	bmi.n	8000d34 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000cf4:	6a2b      	ldr	r3, [r5, #32]
 8000cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cfa:	d105      	bne.n	8000d08 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000cfc:	6862      	ldr	r2, [r4, #4]
 8000cfe:	68a9      	ldr	r1, [r5, #8]
 8000d00:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000d04:	430a      	orrs	r2, r1
 8000d06:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d08:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000d0a:	6862      	ldr	r2, [r4, #4]
 8000d0c:	430b      	orrs	r3, r1
 8000d0e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000d12:	4313      	orrs	r3, r2
 8000d14:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000d16:	2301      	movs	r3, #1
 8000d18:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000d1a:	f7ff fa65 	bl	80001e8 <HAL_GetTick>
 8000d1e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d20:	6823      	ldr	r3, [r4, #0]
 8000d22:	019a      	lsls	r2, r3, #6
 8000d24:	f53f aea7 	bmi.w	8000a76 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d28:	f7ff fa5e 	bl	80001e8 <HAL_GetTick>
 8000d2c:	1b40      	subs	r0, r0, r5
 8000d2e:	2802      	cmp	r0, #2
 8000d30:	d9f6      	bls.n	8000d20 <HAL_RCC_OscConfig+0x2d4>
 8000d32:	e6cd      	b.n	8000ad0 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d34:	f7ff fa58 	bl	80001e8 <HAL_GetTick>
 8000d38:	1bc0      	subs	r0, r0, r7
 8000d3a:	2802      	cmp	r0, #2
 8000d3c:	d9d7      	bls.n	8000cee <HAL_RCC_OscConfig+0x2a2>
 8000d3e:	e6c7      	b.n	8000ad0 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000d40:	f7ff fa52 	bl	80001e8 <HAL_GetTick>
 8000d44:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d46:	6823      	ldr	r3, [r4, #0]
 8000d48:	019b      	lsls	r3, r3, #6
 8000d4a:	f57f ae94 	bpl.w	8000a76 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d4e:	f7ff fa4b 	bl	80001e8 <HAL_GetTick>
 8000d52:	1b40      	subs	r0, r0, r5
 8000d54:	2802      	cmp	r0, #2
 8000d56:	d9f6      	bls.n	8000d46 <HAL_RCC_OscConfig+0x2fa>
 8000d58:	e6ba      	b.n	8000ad0 <HAL_RCC_OscConfig+0x84>
 8000d5a:	bf00      	nop
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	42420060 	.word	0x42420060

08000d64 <HAL_RCC_GetSysClockFreq>:
{
 8000d64:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000d66:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000d68:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000d6a:	ac02      	add	r4, sp, #8
 8000d6c:	f103 0510 	add.w	r5, r3, #16
 8000d70:	4622      	mov	r2, r4
 8000d72:	6818      	ldr	r0, [r3, #0]
 8000d74:	6859      	ldr	r1, [r3, #4]
 8000d76:	3308      	adds	r3, #8
 8000d78:	c203      	stmia	r2!, {r0, r1}
 8000d7a:	42ab      	cmp	r3, r5
 8000d7c:	4614      	mov	r4, r2
 8000d7e:	d1f7      	bne.n	8000d70 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000d80:	2301      	movs	r3, #1
 8000d82:	f88d 3004 	strb.w	r3, [sp, #4]
 8000d86:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000d88:	4911      	ldr	r1, [pc, #68]	; (8000dd0 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000d8a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000d8e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000d90:	f003 020c 	and.w	r2, r3, #12
 8000d94:	2a08      	cmp	r2, #8
 8000d96:	d117      	bne.n	8000dc8 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000d98:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000d9c:	a806      	add	r0, sp, #24
 8000d9e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000da0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000da2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000da6:	d50c      	bpl.n	8000dc2 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000da8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000daa:	480a      	ldr	r0, [pc, #40]	; (8000dd4 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000dac:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000db0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000db2:	aa06      	add	r2, sp, #24
 8000db4:	4413      	add	r3, r2
 8000db6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000dba:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000dbe:	b007      	add	sp, #28
 8000dc0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <HAL_RCC_GetSysClockFreq+0x74>)
 8000dc4:	4350      	muls	r0, r2
 8000dc6:	e7fa      	b.n	8000dbe <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000dca:	e7f8      	b.n	8000dbe <HAL_RCC_GetSysClockFreq+0x5a>
 8000dcc:	08002a08 	.word	0x08002a08
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	007a1200 	.word	0x007a1200
 8000dd8:	003d0900 	.word	0x003d0900

08000ddc <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ddc:	4a54      	ldr	r2, [pc, #336]	; (8000f30 <HAL_RCC_ClockConfig+0x154>)
{
 8000dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000de2:	6813      	ldr	r3, [r2, #0]
{
 8000de4:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	428b      	cmp	r3, r1
{
 8000dec:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000dee:	d32a      	bcc.n	8000e46 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000df0:	6829      	ldr	r1, [r5, #0]
 8000df2:	078c      	lsls	r4, r1, #30
 8000df4:	d434      	bmi.n	8000e60 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000df6:	07ca      	lsls	r2, r1, #31
 8000df8:	d447      	bmi.n	8000e8a <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000dfa:	4a4d      	ldr	r2, [pc, #308]	; (8000f30 <HAL_RCC_ClockConfig+0x154>)
 8000dfc:	6813      	ldr	r3, [r2, #0]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	429e      	cmp	r6, r3
 8000e04:	f0c0 8082 	bcc.w	8000f0c <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e08:	682a      	ldr	r2, [r5, #0]
 8000e0a:	4c4a      	ldr	r4, [pc, #296]	; (8000f34 <HAL_RCC_ClockConfig+0x158>)
 8000e0c:	f012 0f04 	tst.w	r2, #4
 8000e10:	f040 8087 	bne.w	8000f22 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e14:	0713      	lsls	r3, r2, #28
 8000e16:	d506      	bpl.n	8000e26 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e18:	6863      	ldr	r3, [r4, #4]
 8000e1a:	692a      	ldr	r2, [r5, #16]
 8000e1c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000e20:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e24:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e26:	f7ff ff9d 	bl	8000d64 <HAL_RCC_GetSysClockFreq>
 8000e2a:	6863      	ldr	r3, [r4, #4]
 8000e2c:	4a42      	ldr	r2, [pc, #264]	; (8000f38 <HAL_RCC_ClockConfig+0x15c>)
 8000e2e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e32:	5cd3      	ldrb	r3, [r2, r3]
 8000e34:	40d8      	lsrs	r0, r3
 8000e36:	4b41      	ldr	r3, [pc, #260]	; (8000f3c <HAL_RCC_ClockConfig+0x160>)
 8000e38:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f7ff f992 	bl	8000164 <HAL_InitTick>
  return HAL_OK;
 8000e40:	2000      	movs	r0, #0
}
 8000e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e46:	6813      	ldr	r3, [r2, #0]
 8000e48:	f023 0307 	bic.w	r3, r3, #7
 8000e4c:	430b      	orrs	r3, r1
 8000e4e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e50:	6813      	ldr	r3, [r2, #0]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	4299      	cmp	r1, r3
 8000e58:	d0ca      	beq.n	8000df0 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e60:	4b34      	ldr	r3, [pc, #208]	; (8000f34 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e62:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e66:	bf1e      	ittt	ne
 8000e68:	685a      	ldrne	r2, [r3, #4]
 8000e6a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000e6e:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e70:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e72:	bf42      	ittt	mi
 8000e74:	685a      	ldrmi	r2, [r3, #4]
 8000e76:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000e7a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	68a8      	ldr	r0, [r5, #8]
 8000e80:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000e84:	4302      	orrs	r2, r0
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	e7b5      	b.n	8000df6 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e8a:	686a      	ldr	r2, [r5, #4]
 8000e8c:	4c29      	ldr	r4, [pc, #164]	; (8000f34 <HAL_RCC_ClockConfig+0x158>)
 8000e8e:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e90:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e92:	d11c      	bne.n	8000ece <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e94:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e98:	d0df      	beq.n	8000e5a <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e9a:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e9c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ea0:	f023 0303 	bic.w	r3, r3, #3
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000ea8:	f7ff f99e 	bl	80001e8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000eac:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000eae:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d114      	bne.n	8000ede <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eb4:	6863      	ldr	r3, [r4, #4]
 8000eb6:	f003 030c 	and.w	r3, r3, #12
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	d09d      	beq.n	8000dfa <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ebe:	f7ff f993 	bl	80001e8 <HAL_GetTick>
 8000ec2:	1bc0      	subs	r0, r0, r7
 8000ec4:	4540      	cmp	r0, r8
 8000ec6:	d9f5      	bls.n	8000eb4 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8000ec8:	2003      	movs	r0, #3
 8000eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ece:	2a02      	cmp	r2, #2
 8000ed0:	d102      	bne.n	8000ed8 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ed2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000ed6:	e7df      	b.n	8000e98 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ed8:	f013 0f02 	tst.w	r3, #2
 8000edc:	e7dc      	b.n	8000e98 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d10f      	bne.n	8000f02 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ee2:	6863      	ldr	r3, [r4, #4]
 8000ee4:	f003 030c 	and.w	r3, r3, #12
 8000ee8:	2b08      	cmp	r3, #8
 8000eea:	d086      	beq.n	8000dfa <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000eec:	f7ff f97c 	bl	80001e8 <HAL_GetTick>
 8000ef0:	1bc0      	subs	r0, r0, r7
 8000ef2:	4540      	cmp	r0, r8
 8000ef4:	d9f5      	bls.n	8000ee2 <HAL_RCC_ClockConfig+0x106>
 8000ef6:	e7e7      	b.n	8000ec8 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ef8:	f7ff f976 	bl	80001e8 <HAL_GetTick>
 8000efc:	1bc0      	subs	r0, r0, r7
 8000efe:	4540      	cmp	r0, r8
 8000f00:	d8e2      	bhi.n	8000ec8 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f02:	6863      	ldr	r3, [r4, #4]
 8000f04:	f013 0f0c 	tst.w	r3, #12
 8000f08:	d1f6      	bne.n	8000ef8 <HAL_RCC_ClockConfig+0x11c>
 8000f0a:	e776      	b.n	8000dfa <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f0c:	6813      	ldr	r3, [r2, #0]
 8000f0e:	f023 0307 	bic.w	r3, r3, #7
 8000f12:	4333      	orrs	r3, r6
 8000f14:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f16:	6813      	ldr	r3, [r2, #0]
 8000f18:	f003 0307 	and.w	r3, r3, #7
 8000f1c:	429e      	cmp	r6, r3
 8000f1e:	d19c      	bne.n	8000e5a <HAL_RCC_ClockConfig+0x7e>
 8000f20:	e772      	b.n	8000e08 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f22:	6863      	ldr	r3, [r4, #4]
 8000f24:	68e9      	ldr	r1, [r5, #12]
 8000f26:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f2a:	430b      	orrs	r3, r1
 8000f2c:	6063      	str	r3, [r4, #4]
 8000f2e:	e771      	b.n	8000e14 <HAL_RCC_ClockConfig+0x38>
 8000f30:	40022000 	.word	0x40022000
 8000f34:	40021000 	.word	0x40021000
 8000f38:	08003024 	.word	0x08003024
 8000f3c:	20000008 	.word	0x20000008

08000f40 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000f4a:	5cd3      	ldrb	r3, [r2, r3]
 8000f4c:	4a03      	ldr	r2, [pc, #12]	; (8000f5c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000f4e:	6810      	ldr	r0, [r2, #0]
}    
 8000f50:	40d8      	lsrs	r0, r3
 8000f52:	4770      	bx	lr
 8000f54:	40021000 	.word	0x40021000
 8000f58:	08003034 	.word	0x08003034
 8000f5c:	20000008 	.word	0x20000008

08000f60 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000f62:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000f6a:	5cd3      	ldrb	r3, [r2, r3]
 8000f6c:	4a03      	ldr	r2, [pc, #12]	; (8000f7c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000f6e:	6810      	ldr	r0, [r2, #0]
} 
 8000f70:	40d8      	lsrs	r0, r3
 8000f72:	4770      	bx	lr
 8000f74:	40021000 	.word	0x40021000
 8000f78:	08003034 	.word	0x08003034
 8000f7c:	20000008 	.word	0x20000008

08000f80 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f84:	6805      	ldr	r5, [r0, #0]
 8000f86:	68c2      	ldr	r2, [r0, #12]
 8000f88:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000f8a:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f90:	4313      	orrs	r3, r2
 8000f92:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000f94:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000f96:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000f98:	430b      	orrs	r3, r1
 8000f9a:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000f9c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000fa0:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000fa4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000faa:	696b      	ldr	r3, [r5, #20]
 8000fac:	6982      	ldr	r2, [r0, #24]
 8000fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000fb6:	4b40      	ldr	r3, [pc, #256]	; (80010b8 <UART_SetConfig+0x138>)
{
 8000fb8:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000fba:	429d      	cmp	r5, r3
 8000fbc:	f04f 0419 	mov.w	r4, #25
 8000fc0:	d146      	bne.n	8001050 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000fc2:	f7ff ffcd 	bl	8000f60 <HAL_RCC_GetPCLK2Freq>
 8000fc6:	fb04 f300 	mul.w	r3, r4, r0
 8000fca:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000fce:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000fd2:	00b6      	lsls	r6, r6, #2
 8000fd4:	fbb3 f3f6 	udiv	r3, r3, r6
 8000fd8:	fbb3 f3f8 	udiv	r3, r3, r8
 8000fdc:	011e      	lsls	r6, r3, #4
 8000fde:	f7ff ffbf 	bl	8000f60 <HAL_RCC_GetPCLK2Freq>
 8000fe2:	4360      	muls	r0, r4
 8000fe4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	fbb0 f7f3 	udiv	r7, r0, r3
 8000fee:	f7ff ffb7 	bl	8000f60 <HAL_RCC_GetPCLK2Freq>
 8000ff2:	4360      	muls	r0, r4
 8000ff4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ffe:	fbb3 f3f8 	udiv	r3, r3, r8
 8001002:	fb08 7313 	mls	r3, r8, r3, r7
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	3332      	adds	r3, #50	; 0x32
 800100a:	fbb3 f3f8 	udiv	r3, r3, r8
 800100e:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001012:	f7ff ffa5 	bl	8000f60 <HAL_RCC_GetPCLK2Freq>
 8001016:	4360      	muls	r0, r4
 8001018:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800101c:	0092      	lsls	r2, r2, #2
 800101e:	fbb0 faf2 	udiv	sl, r0, r2
 8001022:	f7ff ff9d 	bl	8000f60 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001026:	4360      	muls	r0, r4
 8001028:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001032:	fbb3 f3f8 	udiv	r3, r3, r8
 8001036:	fb08 a313 	mls	r3, r8, r3, sl
 800103a:	011b      	lsls	r3, r3, #4
 800103c:	3332      	adds	r3, #50	; 0x32
 800103e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001042:	f003 030f 	and.w	r3, r3, #15
 8001046:	433b      	orrs	r3, r7
 8001048:	4433      	add	r3, r6
 800104a:	60ab      	str	r3, [r5, #8]
 800104c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001050:	f7ff ff76 	bl	8000f40 <HAL_RCC_GetPCLK1Freq>
 8001054:	fb04 f300 	mul.w	r3, r4, r0
 8001058:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800105c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001060:	00b6      	lsls	r6, r6, #2
 8001062:	fbb3 f3f6 	udiv	r3, r3, r6
 8001066:	fbb3 f3f8 	udiv	r3, r3, r8
 800106a:	011e      	lsls	r6, r3, #4
 800106c:	f7ff ff68 	bl	8000f40 <HAL_RCC_GetPCLK1Freq>
 8001070:	4360      	muls	r0, r4
 8001072:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	fbb0 f7f3 	udiv	r7, r0, r3
 800107c:	f7ff ff60 	bl	8000f40 <HAL_RCC_GetPCLK1Freq>
 8001080:	4360      	muls	r0, r4
 8001082:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	fbb0 f3f3 	udiv	r3, r0, r3
 800108c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001090:	fb08 7313 	mls	r3, r8, r3, r7
 8001094:	011b      	lsls	r3, r3, #4
 8001096:	3332      	adds	r3, #50	; 0x32
 8001098:	fbb3 f3f8 	udiv	r3, r3, r8
 800109c:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80010a0:	f7ff ff4e 	bl	8000f40 <HAL_RCC_GetPCLK1Freq>
 80010a4:	4360      	muls	r0, r4
 80010a6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80010aa:	0092      	lsls	r2, r2, #2
 80010ac:	fbb0 faf2 	udiv	sl, r0, r2
 80010b0:	f7ff ff46 	bl	8000f40 <HAL_RCC_GetPCLK1Freq>
 80010b4:	e7b7      	b.n	8001026 <UART_SetConfig+0xa6>
 80010b6:	bf00      	nop
 80010b8:	40013800 	.word	0x40013800

080010bc <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80010bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010be:	4604      	mov	r4, r0
 80010c0:	460e      	mov	r6, r1
 80010c2:	4617      	mov	r7, r2
 80010c4:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80010c6:	6821      	ldr	r1, [r4, #0]
 80010c8:	680b      	ldr	r3, [r1, #0]
 80010ca:	ea36 0303 	bics.w	r3, r6, r3
 80010ce:	d101      	bne.n	80010d4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80010d0:	2000      	movs	r0, #0
}
 80010d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80010d4:	1c6b      	adds	r3, r5, #1
 80010d6:	d0f7      	beq.n	80010c8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80010d8:	b995      	cbnz	r5, 8001100 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80010da:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80010dc:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80010de:	68da      	ldr	r2, [r3, #12]
 80010e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80010e4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80010e6:	695a      	ldr	r2, [r3, #20]
 80010e8:	f022 0201 	bic.w	r2, r2, #1
 80010ec:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80010ee:	2320      	movs	r3, #32
 80010f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80010f4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80010f8:	2300      	movs	r3, #0
 80010fa:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80010fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001100:	f7ff f872 	bl	80001e8 <HAL_GetTick>
 8001104:	1bc0      	subs	r0, r0, r7
 8001106:	4285      	cmp	r5, r0
 8001108:	d2dd      	bcs.n	80010c6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800110a:	e7e6      	b.n	80010da <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

0800110c <HAL_UART_Init>:
{
 800110c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800110e:	4604      	mov	r4, r0
 8001110:	b340      	cbz	r0, 8001164 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001112:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001116:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800111a:	b91b      	cbnz	r3, 8001124 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800111c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001120:	f000 fc3a 	bl	8001998 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001124:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001126:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001128:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800112c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800112e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001130:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001134:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001136:	f7ff ff23 	bl	8000f80 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800113a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800113c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800113e:	691a      	ldr	r2, [r3, #16]
 8001140:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001144:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001146:	695a      	ldr	r2, [r3, #20]
 8001148:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800114c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800114e:	68da      	ldr	r2, [r3, #12]
 8001150:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001154:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8001156:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001158:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800115a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800115e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001162:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001164:	2001      	movs	r0, #1
}
 8001166:	bd10      	pop	{r4, pc}

08001168 <HAL_UART_Transmit>:
{
 8001168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800116c:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800116e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8001172:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8001174:	2b20      	cmp	r3, #32
{
 8001176:	460d      	mov	r5, r1
 8001178:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800117a:	d14e      	bne.n	800121a <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 800117c:	2900      	cmp	r1, #0
 800117e:	d049      	beq.n	8001214 <HAL_UART_Transmit+0xac>
 8001180:	2a00      	cmp	r2, #0
 8001182:	d047      	beq.n	8001214 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8001184:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001188:	2b01      	cmp	r3, #1
 800118a:	d046      	beq.n	800121a <HAL_UART_Transmit+0xb2>
 800118c:	2301      	movs	r3, #1
 800118e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001192:	2300      	movs	r3, #0
 8001194:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001196:	2321      	movs	r3, #33	; 0x21
 8001198:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800119c:	f7ff f824 	bl	80001e8 <HAL_GetTick>
 80011a0:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80011a2:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80011a6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80011aa:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	b96b      	cbnz	r3, 80011cc <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80011b0:	463b      	mov	r3, r7
 80011b2:	4632      	mov	r2, r6
 80011b4:	2140      	movs	r1, #64	; 0x40
 80011b6:	4620      	mov	r0, r4
 80011b8:	f7ff ff80 	bl	80010bc <UART_WaitOnFlagUntilTimeout.constprop.3>
 80011bc:	b9a8      	cbnz	r0, 80011ea <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80011be:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80011c0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 80011c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80011c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80011cc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80011ce:	4632      	mov	r2, r6
      huart->TxXferCount--;
 80011d0:	3b01      	subs	r3, #1
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80011d6:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80011d8:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80011da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80011de:	4620      	mov	r0, r4
 80011e0:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80011e2:	d10e      	bne.n	8001202 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80011e4:	f7ff ff6a 	bl	80010bc <UART_WaitOnFlagUntilTimeout.constprop.3>
 80011e8:	b110      	cbz	r0, 80011f0 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 80011ea:	2003      	movs	r0, #3
 80011ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80011f0:	882b      	ldrh	r3, [r5, #0]
 80011f2:	6822      	ldr	r2, [r4, #0]
 80011f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011f8:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80011fa:	6923      	ldr	r3, [r4, #16]
 80011fc:	b943      	cbnz	r3, 8001210 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 80011fe:	3502      	adds	r5, #2
 8001200:	e7d3      	b.n	80011aa <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001202:	f7ff ff5b 	bl	80010bc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001206:	2800      	cmp	r0, #0
 8001208:	d1ef      	bne.n	80011ea <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800120a:	6823      	ldr	r3, [r4, #0]
 800120c:	782a      	ldrb	r2, [r5, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	3501      	adds	r5, #1
 8001212:	e7ca      	b.n	80011aa <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001214:	2001      	movs	r0, #1
 8001216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800121a:	2002      	movs	r0, #2
}
 800121c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001220 <HAL_UART_Receive>:
{
 8001220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001224:	461f      	mov	r7, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8001226:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 800122a:	4604      	mov	r4, r0
  if(huart->RxState == HAL_UART_STATE_READY)
 800122c:	2b20      	cmp	r3, #32
{
 800122e:	460d      	mov	r5, r1
 8001230:	4690      	mov	r8, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8001232:	d151      	bne.n	80012d8 <HAL_UART_Receive+0xb8>
    if((pData == NULL) || (Size == 0U))
 8001234:	2900      	cmp	r1, #0
 8001236:	d04c      	beq.n	80012d2 <HAL_UART_Receive+0xb2>
 8001238:	2a00      	cmp	r2, #0
 800123a:	d04a      	beq.n	80012d2 <HAL_UART_Receive+0xb2>
    __HAL_LOCK(huart);
 800123c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001240:	2b01      	cmp	r3, #1
 8001242:	d049      	beq.n	80012d8 <HAL_UART_Receive+0xb8>
 8001244:	2301      	movs	r3, #1
 8001246:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800124a:	2300      	movs	r3, #0
 800124c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800124e:	2322      	movs	r3, #34	; 0x22
 8001250:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8001254:	f7fe ffc8 	bl	80001e8 <HAL_GetTick>
 8001258:	4606      	mov	r6, r0
    huart->RxXferSize = Size;
 800125a:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 800125e:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while(huart->RxXferCount > 0U)
 8001262:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8001264:	b280      	uxth	r0, r0
 8001266:	b930      	cbnz	r0, 8001276 <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 8001268:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800126a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_READY;
 800126e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 8001272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 8001276:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001278:	4632      	mov	r2, r6
      huart->RxXferCount--;
 800127a:	3b01      	subs	r3, #1
 800127c:	b29b      	uxth	r3, r3
 800127e:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001280:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001282:	2120      	movs	r1, #32
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001288:	4620      	mov	r0, r4
 800128a:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800128c:	d112      	bne.n	80012b4 <HAL_UART_Receive+0x94>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800128e:	f7ff ff15 	bl	80010bc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001292:	b110      	cbz	r0, 800129a <HAL_UART_Receive+0x7a>
          return HAL_TIMEOUT;
 8001294:	2003      	movs	r0, #3
 8001296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800129a:	6823      	ldr	r3, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800129c:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800129e:	685b      	ldr	r3, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80012a0:	b922      	cbnz	r2, 80012ac <HAL_UART_Receive+0x8c>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80012a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012a6:	f825 3b02 	strh.w	r3, [r5], #2
 80012aa:	e7da      	b.n	8001262 <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	f825 3b01 	strh.w	r3, [r5], #1
 80012b2:	e7d6      	b.n	8001262 <HAL_UART_Receive+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80012b4:	f7ff ff02 	bl	80010bc <UART_WaitOnFlagUntilTimeout.constprop.3>
 80012b8:	2800      	cmp	r0, #0
 80012ba:	d1eb      	bne.n	8001294 <HAL_UART_Receive+0x74>
 80012bc:	6823      	ldr	r3, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80012be:	6921      	ldr	r1, [r4, #16]
 80012c0:	1c6a      	adds	r2, r5, #1
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80012c2:	685b      	ldr	r3, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80012c4:	b911      	cbnz	r1, 80012cc <HAL_UART_Receive+0xac>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80012c6:	702b      	strb	r3, [r5, #0]
 80012c8:	4615      	mov	r5, r2
 80012ca:	e7ca      	b.n	8001262 <HAL_UART_Receive+0x42>
 80012cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012d0:	e7f9      	b.n	80012c6 <HAL_UART_Receive+0xa6>
      return  HAL_ERROR;
 80012d2:	2001      	movs	r0, #1
 80012d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80012d8:	2002      	movs	r0, #2
}
 80012da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080012e0 <Int2Str>:
  * @param  p_str: The string output pointer
  * @param  intnum: The integer to be converted
  * @retval None
  */
void Int2Str(uint8_t *p_str, uint32_t intnum)
{
 80012e0:	220a      	movs	r2, #10
  uint32_t i, divider = 1000000000, pos = 0, status = 0;
 80012e2:	2300      	movs	r3, #0
{
 80012e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i, divider = 1000000000, pos = 0, status = 0;
 80012e6:	461c      	mov	r4, r3
  for (i = 0; i < 10; i++)
  {
    p_str[pos++] = (intnum / divider) + 48;

    intnum = intnum % divider;
    divider /= 10;
 80012e8:	4696      	mov	lr, r2
  uint32_t i, divider = 1000000000, pos = 0, status = 0;
 80012ea:	4d0b      	ldr	r5, [pc, #44]	; (8001318 <Int2Str+0x38>)
    p_str[pos++] = (intnum / divider) + 48;
 80012ec:	fbb1 f7f5 	udiv	r7, r1, r5
 80012f0:	f107 0630 	add.w	r6, r7, #48	; 0x30
 80012f4:	b2f6      	uxtb	r6, r6
    if ((p_str[pos-1] == '0') & (status == 0))
 80012f6:	2e30      	cmp	r6, #48	; 0x30
    intnum = intnum % divider;
 80012f8:	fb05 1117 	mls	r1, r5, r7, r1
    p_str[pos++] = (intnum / divider) + 48;
 80012fc:	5506      	strb	r6, [r0, r4]
    divider /= 10;
 80012fe:	fbb5 f5fe 	udiv	r5, r5, lr
    if ((p_str[pos-1] == '0') & (status == 0))
 8001302:	d100      	bne.n	8001306 <Int2Str+0x26>
 8001304:	b123      	cbz	r3, 8001310 <Int2Str+0x30>
    p_str[pos++] = (intnum / divider) + 48;
 8001306:	3401      	adds	r4, #1
    {
      pos = 0;
    }
    else
    {
      status++;
 8001308:	3301      	adds	r3, #1
  for (i = 0; i < 10; i++)
 800130a:	3a01      	subs	r2, #1
 800130c:	d1ee      	bne.n	80012ec <Int2Str+0xc>
    }
  }
}
 800130e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001310:	2300      	movs	r3, #0
      pos = 0;
 8001312:	461c      	mov	r4, r3
 8001314:	e7f9      	b.n	800130a <Int2Str+0x2a>
 8001316:	bf00      	nop
 8001318:	3b9aca00 	.word	0x3b9aca00

0800131c <Str2Int>:
  * @param  p_intnum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
uint32_t Str2Int(uint8_t *p_inputstr, uint32_t *p_intnum)
{
 800131c:	b570      	push	{r4, r5, r6, lr}
  uint32_t i = 0, res = 0;
  uint32_t val = 0;

  if ((p_inputstr[0] == '0') && ((p_inputstr[1] == 'x') || (p_inputstr[1] == 'X')))
 800131e:	7803      	ldrb	r3, [r0, #0]
 8001320:	2b30      	cmp	r3, #48	; 0x30
 8001322:	d104      	bne.n	800132e <Str2Int+0x12>
 8001324:	7843      	ldrb	r3, [r0, #1]
 8001326:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800132a:	2b58      	cmp	r3, #88	; 0x58
 800132c:	d00c      	beq.n	8001348 <Str2Int+0x2c>
 800132e:	2300      	movs	r3, #0
        *p_intnum = val;
        res = 1;
      }
      else if (ISVALIDDEC(p_inputstr[i]))
      {
        val = val * 10 + CONVERTDEC(p_inputstr[i]);
 8001330:	260a      	movs	r6, #10
 8001332:	461c      	mov	r4, r3
      if (p_inputstr[i] == '\0')
 8001334:	5d02      	ldrb	r2, [r0, r4]
 8001336:	bb72      	cbnz	r2, 8001396 <Str2Int+0x7a>
        res = 1;
 8001338:	2201      	movs	r2, #1
        *p_intnum = val;
 800133a:	600b      	str	r3, [r1, #0]
      {
        /* return 0, Invalid input */
        res = 0;
        break;
      }
      i++;
 800133c:	3401      	adds	r4, #1
    while ( ( i < 11 ) && ( res != 1 ) )
 800133e:	2c0b      	cmp	r4, #11
 8001340:	d024      	beq.n	800138c <Str2Int+0x70>
 8001342:	2a00      	cmp	r2, #0
 8001344:	d0f6      	beq.n	8001334 <Str2Int+0x18>
 8001346:	e021      	b.n	800138c <Str2Int+0x70>
 8001348:	2400      	movs	r4, #0
 800134a:	2502      	movs	r5, #2
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 800134c:	5d42      	ldrb	r2, [r0, r5]
 800134e:	b1d2      	cbz	r2, 8001386 <Str2Int+0x6a>
      if (ISVALIDHEX(p_inputstr[i]))
 8001350:	f022 0320 	bic.w	r3, r2, #32
 8001354:	3b41      	subs	r3, #65	; 0x41
 8001356:	2b05      	cmp	r3, #5
 8001358:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800135c:	d902      	bls.n	8001364 <Str2Int+0x48>
 800135e:	b2de      	uxtb	r6, r3
 8001360:	2e09      	cmp	r6, #9
 8001362:	d810      	bhi.n	8001386 <Str2Int+0x6a>
        val = (val << 4) + CONVERTHEX(p_inputstr[i]);
 8001364:	b2de      	uxtb	r6, r3
 8001366:	2e09      	cmp	r6, #9
 8001368:	ea4f 1404 	mov.w	r4, r4, lsl #4
 800136c:	d907      	bls.n	800137e <Str2Int+0x62>
 800136e:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 8001372:	2b05      	cmp	r3, #5
 8001374:	bf94      	ite	ls
 8001376:	f1a2 0337 	subls.w	r3, r2, #55	; 0x37
 800137a:	f1a2 0357 	subhi.w	r3, r2, #87	; 0x57
      i++;
 800137e:	3501      	adds	r5, #1
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 8001380:	2d0b      	cmp	r5, #11
        val = (val << 4) + CONVERTHEX(p_inputstr[i]);
 8001382:	441c      	add	r4, r3
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 8001384:	d1e2      	bne.n	800134c <Str2Int+0x30>
    if (p_inputstr[i] == '\0')
 8001386:	5d43      	ldrb	r3, [r0, r5]
 8001388:	b113      	cbz	r3, 8001390 <Str2Int+0x74>
      res = 1;
 800138a:	2200      	movs	r2, #0
    }
  }

  return res;
}
 800138c:	4610      	mov	r0, r2
 800138e:	bd70      	pop	{r4, r5, r6, pc}
      *p_intnum = val;
 8001390:	600c      	str	r4, [r1, #0]
      res = 1;
 8001392:	2201      	movs	r2, #1
 8001394:	e7fa      	b.n	800138c <Str2Int+0x70>
      else if (((p_inputstr[i] == 'k') || (p_inputstr[i] == 'K')) && (i > 0))
 8001396:	f002 05df 	and.w	r5, r2, #223	; 0xdf
 800139a:	2d4b      	cmp	r5, #75	; 0x4b
 800139c:	d10b      	bne.n	80013b6 <Str2Int+0x9a>
 800139e:	b944      	cbnz	r4, 80013b2 <Str2Int+0x96>
      else if (ISVALIDDEC(p_inputstr[i]))
 80013a0:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80013a4:	2d09      	cmp	r5, #9
 80013a6:	d8f0      	bhi.n	800138a <Str2Int+0x6e>
 80013a8:	fb06 2303 	mla	r3, r6, r3, r2
 80013ac:	2200      	movs	r2, #0
        val = val * 10 + CONVERTDEC(p_inputstr[i]);
 80013ae:	3b30      	subs	r3, #48	; 0x30
 80013b0:	e7c4      	b.n	800133c <Str2Int+0x20>
        val = val << 10;
 80013b2:	029b      	lsls	r3, r3, #10
 80013b4:	e7c0      	b.n	8001338 <Str2Int+0x1c>
      else if (((p_inputstr[i] == 'm') || (p_inputstr[i] == 'M')) && (i > 0))
 80013b6:	2d4d      	cmp	r5, #77	; 0x4d
 80013b8:	d1f2      	bne.n	80013a0 <Str2Int+0x84>
 80013ba:	2c00      	cmp	r4, #0
 80013bc:	d0e5      	beq.n	800138a <Str2Int+0x6e>
        val = val << 20;
 80013be:	051b      	lsls	r3, r3, #20
 80013c0:	e7ba      	b.n	8001338 <Str2Int+0x1c>
	...

080013c4 <Serial_PutString>:
  * @brief  Print a string on the HyperTerminal
  * @param  p_string: The string to be printed
  * @retval None
  */
void Serial_PutString(uint8_t *p_string)
{
 80013c4:	4601      	mov	r1, r0
  uint16_t length = 0;

  while (p_string[length] != '\0')
 80013c6:	2300      	movs	r3, #0
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	5c88      	ldrb	r0, [r1, r2]
 80013cc:	3301      	adds	r3, #1
 80013ce:	2800      	cmp	r0, #0
 80013d0:	d1fa      	bne.n	80013c8 <Serial_PutString+0x4>
  {
    length++;
  }
  HAL_UART_Transmit(&UartHandle, p_string, length, TX_TIMEOUT);
 80013d2:	2364      	movs	r3, #100	; 0x64
 80013d4:	4801      	ldr	r0, [pc, #4]	; (80013dc <Serial_PutString+0x18>)
 80013d6:	f7ff bec7 	b.w	8001168 <HAL_UART_Transmit>
 80013da:	bf00      	nop
 80013dc:	200000c0 	.word	0x200000c0

080013e0 <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
HAL_StatusTypeDef Serial_PutByte( uint8_t param )
{
 80013e0:	b507      	push	{r0, r1, r2, lr}
 80013e2:	a902      	add	r1, sp, #8
 80013e4:	f801 0d01 	strb.w	r0, [r1, #-1]!
  return HAL_UART_Transmit(&UartHandle, &param, 1, TX_TIMEOUT);
 80013e8:	2364      	movs	r3, #100	; 0x64
 80013ea:	2201      	movs	r2, #1
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <Serial_PutByte+0x18>)
 80013ee:	f7ff febb 	bl	8001168 <HAL_UART_Transmit>
}
 80013f2:	b003      	add	sp, #12
 80013f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80013f8:	200000c0 	.word	0x200000c0

080013fc <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{
 80013fc:	b508      	push	{r3, lr}
  /* Unlock the Program memory */
  HAL_FLASH_Unlock();
 80013fe:	f7fe ffad 	bl	800035c <HAL_FLASH_Unlock>

  /* Clear all FLASH flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR);
 8001402:	2234      	movs	r2, #52	; 0x34
 8001404:	4b02      	ldr	r3, [pc, #8]	; (8001410 <FLASH_If_Init+0x14>)
 8001406:	60da      	str	r2, [r3, #12]
  /* Unlock the Program memory */
  HAL_FLASH_Lock();
}
 8001408:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_FLASH_Lock();
 800140c:	f7fe bfb8 	b.w	8000380 <HAL_FLASH_Lock>
 8001410:	40022000 	.word	0x40022000

08001414 <FLASH_If_Erase>:
  * @param  start: start of user flash area
  * @retval FLASHIF_OK : user flash area successfully erased
  *         FLASHIF_ERASEKO : error occurred
  */
uint32_t FLASH_If_Erase(uint32_t start)
{
 8001414:	b530      	push	{r4, r5, lr}
  uint32_t NbrOfPages = 0;
  uint32_t PageError = 0;
 8001416:	2500      	movs	r5, #0
{
 8001418:	4604      	mov	r4, r0
 800141a:	b087      	sub	sp, #28
  uint32_t PageError = 0;
 800141c:	9501      	str	r5, [sp, #4]
  FLASH_EraseInitTypeDef pEraseInit;
  HAL_StatusTypeDef status = HAL_OK;

  /* Unlock the Flash to enable the flash control register access *************/ 
  HAL_FLASH_Unlock();
 800141e:	f7fe ff9d 	bl	800035c <HAL_FLASH_Unlock>
  /* Get the sector where start the user flash area */
  NbrOfPages = (USER_FLASH_END_ADDRESS - start)/FLASH_PAGE_SIZE;

  pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
  pEraseInit.PageAddress = start;
  pEraseInit.Banks = FLASH_BANK_1;
 8001422:	2301      	movs	r3, #1
  NbrOfPages = (USER_FLASH_END_ADDRESS - start)/FLASH_PAGE_SIZE;
 8001424:	f1c4 6000 	rsb	r0, r4, #134217728	; 0x8000000
 8001428:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 800142c:	0a80      	lsrs	r0, r0, #10
  pEraseInit.NbPages = NbrOfPages;
 800142e:	9005      	str	r0, [sp, #20]
  status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 8001430:	a901      	add	r1, sp, #4
 8001432:	a802      	add	r0, sp, #8
  pEraseInit.PageAddress = start;
 8001434:	9404      	str	r4, [sp, #16]
  pEraseInit.Banks = FLASH_BANK_1;
 8001436:	9303      	str	r3, [sp, #12]
  pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8001438:	9502      	str	r5, [sp, #8]
  status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 800143a:	f7ff f9c1 	bl	80007c0 <HAL_FLASHEx_Erase>
 800143e:	4604      	mov	r4, r0

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 8001440:	f7fe ff9e 	bl	8000380 <HAL_FLASH_Lock>
    /* Error occurred while page erase */
    return FLASHIF_ERASEKO;
  }

  return FLASHIF_OK;
}
 8001444:	1b60      	subs	r0, r4, r5
 8001446:	bf18      	it	ne
 8001448:	2001      	movne	r0, #1
 800144a:	b007      	add	sp, #28
 800144c:	bd30      	pop	{r4, r5, pc}
	...

08001450 <FLASH_If_Write>:
  * @retval uint32_t 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(uint32_t destination, uint32_t *p_source, uint32_t length)
{
 8001450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001454:	460d      	mov	r5, r1
 8001456:	4604      	mov	r4, r0
 8001458:	4690      	mov	r8, r2
  uint32_t i = 0;

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();

  for (i = 0; (i < length) && (destination <= (USER_FLASH_END_ADDRESS-4)); i++)
 800145a:	2600      	movs	r6, #0
  HAL_FLASH_Unlock();
 800145c:	f7fe ff7e 	bl	800035c <HAL_FLASH_Unlock>
  for (i = 0; (i < length) && (destination <= (USER_FLASH_END_ADDRESS-4)); i++)
 8001460:	4f0f      	ldr	r7, [pc, #60]	; (80014a0 <FLASH_If_Write+0x50>)
 8001462:	3d04      	subs	r5, #4
 8001464:	4546      	cmp	r6, r8
 8001466:	d001      	beq.n	800146c <FLASH_If_Write+0x1c>
 8001468:	42bc      	cmp	r4, r7
 800146a:	d904      	bls.n	8001476 <FLASH_If_Write+0x26>
    }
  }

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 800146c:	f7fe ff88 	bl	8000380 <HAL_FLASH_Lock>

  return (FLASHIF_OK);
 8001470:	2000      	movs	r0, #0
 8001472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, destination, *(uint32_t*)(p_source+i)) == HAL_OK)      
 8001476:	f855 2f04 	ldr.w	r2, [r5, #4]!
 800147a:	2300      	movs	r3, #0
 800147c:	4621      	mov	r1, r4
 800147e:	2002      	movs	r0, #2
 8001480:	f7fe ffc6 	bl	8000410 <HAL_FLASH_Program>
 8001484:	b930      	cbnz	r0, 8001494 <FLASH_If_Write+0x44>
      if (*(uint32_t*)destination != *(uint32_t*)(p_source+i))
 8001486:	f854 2b04 	ldr.w	r2, [r4], #4
 800148a:	682b      	ldr	r3, [r5, #0]
 800148c:	429a      	cmp	r2, r3
 800148e:	d104      	bne.n	800149a <FLASH_If_Write+0x4a>
  for (i = 0; (i < length) && (destination <= (USER_FLASH_END_ADDRESS-4)); i++)
 8001490:	3601      	adds	r6, #1
 8001492:	e7e7      	b.n	8001464 <FLASH_If_Write+0x14>
      return (FLASHIF_WRITING_ERROR);
 8001494:	2003      	movs	r0, #3
 8001496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return(FLASHIF_WRITINGCTRL_ERROR);
 800149a:	2002      	movs	r0, #2
}
 800149c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014a0:	0801fffc 	.word	0x0801fffc

080014a4 <FLASH_If_GetWriteProtectionStatus>:
  * @retval If a sector in application area is write-protected returned value is a combinaison
            of the possible values : FLASHIF_PROTECTION_WRPENABLED, FLASHIF_PROTECTION_PCROPENABLED, ...
  *         If no sector is write-protected FLASHIF_PROTECTION_NONE is returned.
  */
uint32_t FLASH_If_GetWriteProtectionStatus(void)
{
 80014a4:	b500      	push	{lr}
 80014a6:	b089      	sub	sp, #36	; 0x24
  uint32_t ProtectedPAGE = FLASHIF_PROTECTION_NONE;
  FLASH_OBProgramInitTypeDef OptionsBytesStruct;

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 80014a8:	f7fe ff58 	bl	800035c <HAL_FLASH_Unlock>

  /* Check if there are write protected sectors inside the user flash area ****/
  HAL_FLASHEx_OBGetConfig(&OptionsBytesStruct);
 80014ac:	a801      	add	r0, sp, #4
 80014ae:	f7ff f961 	bl	8000774 <HAL_FLASHEx_OBGetConfig>

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 80014b2:	f7fe ff65 	bl	8000380 <HAL_FLASH_Lock>

  /* Get pages already write protected ****************************************/
  ProtectedPAGE = ~(OptionsBytesStruct.WRPPage) & FLASH_PAGE_TO_BE_PROTECTED;
 80014b6:	9803      	ldr	r0, [sp, #12]
 80014b8:	43c0      	mvns	r0, r0

  /* Check if desired pages are already write protected ***********************/
  if(ProtectedPAGE != 0)
 80014ba:	f010 0070 	ands.w	r0, r0, #112	; 0x70
  else
  { 
    /* No write protected sectors inside the user flash area */
    return FLASHIF_PROTECTION_NONE;
  }
}
 80014be:	bf18      	it	ne
 80014c0:	2002      	movne	r0, #2
 80014c2:	b009      	add	sp, #36	; 0x24
 80014c4:	f85d fb04 	ldr.w	pc, [sp], #4

080014c8 <FLASH_If_WriteProtectionConfig>:
  * @brief  Configure the write protection status of user flash area.
  * @param  protectionstate : FLASHIF_WRP_DISABLE or FLASHIF_WRP_ENABLE the protection
  * @retval uint32_t FLASHIF_OK if change is applied.
  */
uint32_t FLASH_If_WriteProtectionConfig(uint32_t protectionstate)
{
 80014c8:	b510      	push	{r4, lr}
 80014ca:	b08e      	sub	sp, #56	; 0x38
 80014cc:	4604      	mov	r4, r0
  FLASH_OBProgramInitTypeDef config_new, config_old;
  HAL_StatusTypeDef result = HAL_OK;
  

  /* Get pages write protection status ****************************************/
  HAL_FLASHEx_OBGetConfig(&config_old);
 80014ce:	a807      	add	r0, sp, #28
 80014d0:	f7ff f950 	bl	8000774 <HAL_FLASHEx_OBGetConfig>

  /* The parameter says whether we turn the protection on or off */
  config_new.WRPState = (protectionstate == FLASHIF_WRP_ENABLE ? OB_WRPSTATE_ENABLE : OB_WRPSTATE_DISABLE);

  /* We want to modify only the Write protection */
  config_new.OptionType = OPTIONBYTE_WRP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	9300      	str	r3, [sp, #0]
  
  /* No read protection, keep BOR and reset settings */
  config_new.RDPLevel = OB_RDP_LEVEL_0;
 80014d8:	23a5      	movs	r3, #165	; 0xa5
  config_new.WRPState = (protectionstate == FLASHIF_WRP_ENABLE ? OB_WRPSTATE_ENABLE : OB_WRPSTATE_DISABLE);
 80014da:	fab4 f484 	clz	r4, r4
  config_new.RDPLevel = OB_RDP_LEVEL_0;
 80014de:	f88d 3010 	strb.w	r3, [sp, #16]
  config_new.USERConfig = config_old.USERConfig;  
 80014e2:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
  config_new.WRPState = (protectionstate == FLASHIF_WRP_ENABLE ? OB_WRPSTATE_ENABLE : OB_WRPSTATE_DISABLE);
 80014e6:	0964      	lsrs	r4, r4, #5
  config_new.USERConfig = config_old.USERConfig;  
 80014e8:	f88d 3011 	strb.w	r3, [sp, #17]
  config_new.WRPState = (protectionstate == FLASHIF_WRP_ENABLE ? OB_WRPSTATE_ENABLE : OB_WRPSTATE_DISABLE);
 80014ec:	9401      	str	r4, [sp, #4]
  /* Get pages already write protected ****************************************/
  ProtectedPAGE = config_old.WRPPage | FLASH_PAGE_TO_BE_PROTECTED;
 80014ee:	9c09      	ldr	r4, [sp, #36]	; 0x24

  /* Unlock the Flash to enable the flash control register access *************/ 
  HAL_FLASH_Unlock();
 80014f0:	f7fe ff34 	bl	800035c <HAL_FLASH_Unlock>

  /* Unlock the Options Bytes *************************************************/
  HAL_FLASH_OB_Unlock();
 80014f4:	f7fe ff4e 	bl	8000394 <HAL_FLASH_OB_Unlock>
  
  /* Erase all the option Bytes ***********************************************/
  result = HAL_FLASHEx_OBErase();
 80014f8:	f7ff f814 	bl	8000524 <HAL_FLASHEx_OBErase>
    
  if (result == HAL_OK)
 80014fc:	b930      	cbnz	r0, 800150c <FLASH_If_WriteProtectionConfig+0x44>
  ProtectedPAGE = config_old.WRPPage | FLASH_PAGE_TO_BE_PROTECTED;
 80014fe:	f044 0470 	orr.w	r4, r4, #112	; 0x70
  {
    config_new.WRPPage    = ProtectedPAGE;
    result = HAL_FLASHEx_OBProgram(&config_new);
 8001502:	4668      	mov	r0, sp
    config_new.WRPPage    = ProtectedPAGE;
 8001504:	9402      	str	r4, [sp, #8]
    result = HAL_FLASHEx_OBProgram(&config_new);
 8001506:	f7ff f837 	bl	8000578 <HAL_FLASHEx_OBProgram>
  }
  
  return (result == HAL_OK ? FLASHIF_OK: FLASHIF_PROTECTION_ERRROR);
 800150a:	b100      	cbz	r0, 800150e <FLASH_If_WriteProtectionConfig+0x46>
 800150c:	2004      	movs	r0, #4
}
 800150e:	b00e      	add	sp, #56	; 0x38
 8001510:	bd10      	pop	{r4, pc}
	...

08001514 <_write>:
}
#endif

#if 1
int _write(int file, char *ptr, int len)
{
 8001514:	b510      	push	{r4, lr}
 8001516:	4614      	mov	r4, r2

  //for (DataIdx = 0; DataIdx < len; DataIdx++)
  //{
    //__io_putchar(*ptr++);
    //HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 10);
  HAL_UART_Transmit(&UartHandle, (uint8_t*)ptr, len, 10);
 8001518:	230a      	movs	r3, #10
 800151a:	b292      	uxth	r2, r2
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <_write+0x14>)
 800151e:	f7ff fe23 	bl	8001168 <HAL_UART_Transmit>
  //}
  return len;
}
 8001522:	4620      	mov	r0, r4
 8001524:	bd10      	pop	{r4, pc}
 8001526:	bf00      	nop
 8001528:	200000c0 	.word	0x200000c0

0800152c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800152c:	b510      	push	{r4, lr}
 800152e:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001530:	2228      	movs	r2, #40	; 0x28
 8001532:	2100      	movs	r1, #0
 8001534:	a806      	add	r0, sp, #24
 8001536:	f000 fde7 	bl	8002108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800153a:	2100      	movs	r1, #0
 800153c:	2214      	movs	r2, #20
 800153e:	a801      	add	r0, sp, #4
 8001540:	f000 fde2 	bl	8002108 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001544:	2301      	movs	r3, #1
 8001546:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001548:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800154a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800154e:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001550:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001554:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001556:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800155c:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800155e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001560:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001562:	f7ff fa73 	bl	8000a4c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001566:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001568:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800156c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156e:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001570:	4621      	mov	r1, r4
 8001572:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001574:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001576:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001578:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800157a:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800157c:	f7ff fc2e 	bl	8000ddc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001580:	b010      	add	sp, #64	; 0x40
 8001582:	bd10      	pop	{r4, pc}

08001584 <main>:
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0
  HAL_Init();
 800158a:	f7fe fe0f 	bl	80001ac <HAL_Init>
  SystemClock_Config();
 800158e:	f7ff ffcd 	bl	800152c <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001592:	2210      	movs	r2, #16
 8001594:	2100      	movs	r1, #0
 8001596:	18b8      	adds	r0, r7, r2
 8001598:	f000 fdb6 	bl	8002108 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800159c:	4b4a      	ldr	r3, [pc, #296]	; (80016c8 <main+0x144>)
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2500      	movs	r5, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = B1_Pin;
 80015a2:	f44f 5800 	mov.w	r8, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a6:	f042 0210 	orr.w	r2, r2, #16
 80015aa:	619a      	str	r2, [r3, #24]
 80015ac:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015ae:	2120      	movs	r1, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b0:	f002 0210 	and.w	r2, r2, #16
 80015b4:	603a      	str	r2, [r7, #0]
 80015b6:	683a      	ldr	r2, [r7, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015ba:	4844      	ldr	r0, [pc, #272]	; (80016cc <main+0x148>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015bc:	f042 0220 	orr.w	r2, r2, #32
 80015c0:	619a      	str	r2, [r3, #24]
 80015c2:	699a      	ldr	r2, [r3, #24]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015c4:	260c      	movs	r6, #12
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c6:	f002 0220 	and.w	r2, r2, #32
 80015ca:	607a      	str	r2, [r7, #4]
 80015cc:	687a      	ldr	r2, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ce:	699a      	ldr	r2, [r3, #24]
  UartHandle.Instance = USART2;
 80015d0:	4c3f      	ldr	r4, [pc, #252]	; (80016d0 <main+0x14c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	f042 0204 	orr.w	r2, r2, #4
 80015d6:	619a      	str	r2, [r3, #24]
 80015d8:	699a      	ldr	r2, [r3, #24]
 80015da:	f002 0204 	and.w	r2, r2, #4
 80015de:	60ba      	str	r2, [r7, #8]
 80015e0:	68ba      	ldr	r2, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	699a      	ldr	r2, [r3, #24]
 80015e4:	f042 0208 	orr.w	r2, r2, #8
 80015e8:	619a      	str	r2, [r3, #24]
 80015ea:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015ec:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015f6:	f7ff fa17 	bl	8000a28 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015fa:	4b36      	ldr	r3, [pc, #216]	; (80016d4 <main+0x150>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 0110 	add.w	r1, r7, #16
 8001600:	4835      	ldr	r0, [pc, #212]	; (80016d8 <main+0x154>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	61bd      	str	r5, [r7, #24]
  GPIO_InitStruct.Pin = B1_Pin;
 8001606:	f8c7 8010 	str.w	r8, [r7, #16]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800160a:	f7ff f927 	bl	800085c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800160e:	2320      	movs	r3, #32
 8001610:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001612:	2301      	movs	r3, #1
 8001614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2302      	movs	r3, #2
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001618:	f107 0110 	add.w	r1, r7, #16
 800161c:	482b      	ldr	r0, [pc, #172]	; (80016cc <main+0x148>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	61bd      	str	r5, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001622:	f7ff f91b 	bl	800085c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001626:	4629      	mov	r1, r5
 8001628:	462a      	mov	r2, r5
 800162a:	2028      	movs	r0, #40	; 0x28
 800162c:	f7fe fe06 	bl	800023c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001630:	2028      	movs	r0, #40	; 0x28
 8001632:	f7fe fe37 	bl	80002a4 <HAL_NVIC_EnableIRQ>
  huart1.Init.BaudRate = 115200;
 8001636:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 800163a:	4828      	ldr	r0, [pc, #160]	; (80016dc <main+0x158>)
  huart1.Init.BaudRate = 115200;
 800163c:	4a28      	ldr	r2, [pc, #160]	; (80016e0 <main+0x15c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800163e:	6085      	str	r5, [r0, #8]
  huart1.Init.BaudRate = 115200;
 8001640:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001644:	60c5      	str	r5, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001646:	6105      	str	r5, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001648:	6185      	str	r5, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800164a:	61c5      	str	r5, [r0, #28]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800164c:	6146      	str	r6, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800164e:	f7ff fd5d 	bl	800110c <HAL_UART_Init>
  UartHandle.Init.BaudRate = 115200;
 8001652:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001656:	4923      	ldr	r1, [pc, #140]	; (80016e4 <main+0x160>)
  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8001658:	4620      	mov	r0, r4
  UartHandle.Init.BaudRate = 115200;
 800165a:	e884 000a 	stmia.w	r4, {r1, r3}
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800165e:	60a5      	str	r5, [r4, #8]
  UartHandle.Init.StopBits = UART_STOPBITS_1;
 8001660:	60e5      	str	r5, [r4, #12]
  UartHandle.Init.Parity = UART_PARITY_NONE;
 8001662:	6125      	str	r5, [r4, #16]
  UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001664:	61a5      	str	r5, [r4, #24]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8001666:	61e5      	str	r5, [r4, #28]
  UartHandle.Init.Mode = UART_MODE_TX_RX;
 8001668:	6166      	str	r6, [r4, #20]
  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 800166a:	f7ff fd4f 	bl	800110c <HAL_UART_Init>
  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 800166e:	4641      	mov	r1, r8
 8001670:	4819      	ldr	r0, [pc, #100]	; (80016d8 <main+0x154>)
 8001672:	f7ff f9d3 	bl	8000a1c <HAL_GPIO_ReadPin>
 8001676:	4605      	mov	r5, r0
 8001678:	b9a0      	cbnz	r0, 80016a4 <main+0x120>
    FLASH_If_Init();
 800167a:	f7ff febf 	bl	80013fc <FLASH_If_Init>
        - One Stop Bit
        - No parity
        - Hardware flow control disabled (RTS and CTS signals)
        - Receive and transmit enabled
  */
  UartHandle.Init.BaudRate = 115200;
 800167e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8001682:	60a5      	str	r5, [r4, #8]
  UartHandle.Init.BaudRate = 115200;
 8001684:	6063      	str	r3, [r4, #4]
  UartHandle.Init.StopBits = UART_STOPBITS_1;
 8001686:	60e5      	str	r5, [r4, #12]
  UartHandle.Init.Parity = UART_PARITY_NONE;
 8001688:	6125      	str	r5, [r4, #16]
  UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168a:	61a5      	str	r5, [r4, #24]
  UartHandle.Init.Mode = UART_MODE_RX | UART_MODE_TX;
 800168c:	6166      	str	r6, [r4, #20]
    Main_Menu();
 800168e:	f000 f8b1 	bl	80017f4 <Main_Menu>
    printf("Hello STM32NUCLEO IAP\r\n");
 8001692:	4c15      	ldr	r4, [pc, #84]	; (80016e8 <main+0x164>)
 8001694:	4620      	mov	r0, r4
 8001696:	f000 fd9b 	bl	80021d0 <puts>
    HAL_Delay(1000);
 800169a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800169e:	f7fe fda9 	bl	80001f4 <HAL_Delay>
 80016a2:	e7f7      	b.n	8001694 <main+0x110>
    if (((*(__IO uint32_t*)APPLICATION_ADDRESS) & 0x2FFE0000 ) == 0x20000000)
 80016a4:	4a11      	ldr	r2, [pc, #68]	; (80016ec <main+0x168>)
 80016a6:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <main+0x16c>)
 80016a8:	6811      	ldr	r1, [r2, #0]
 80016aa:	400b      	ands	r3, r1
 80016ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016b0:	d1ef      	bne.n	8001692 <main+0x10e>
      JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <main+0x170>)
 80016b4:	4910      	ldr	r1, [pc, #64]	; (80016f8 <main+0x174>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	600b      	str	r3, [r1, #0]
      JumpToApplication = (pFunction) JumpAddress;
 80016ba:	4910      	ldr	r1, [pc, #64]	; (80016fc <main+0x178>)
      __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 80016bc:	6812      	ldr	r2, [r2, #0]
      JumpToApplication = (pFunction) JumpAddress;
 80016be:	600b      	str	r3, [r1, #0]
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 80016c0:	f382 8808 	msr	MSP, r2
      JumpToApplication();
 80016c4:	4798      	blx	r3
 80016c6:	e7e4      	b.n	8001692 <main+0x10e>
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40010800 	.word	0x40010800
 80016d0:	200000c0 	.word	0x200000c0
 80016d4:	10110000 	.word	0x10110000
 80016d8:	40011000 	.word	0x40011000
 80016dc:	20000100 	.word	0x20000100
 80016e0:	40013800 	.word	0x40013800
 80016e4:	40004400 	.word	0x40004400
 80016e8:	08002a18 	.word	0x08002a18
 80016ec:	08004000 	.word	0x08004000
 80016f0:	2ffe0000 	.word	0x2ffe0000
 80016f4:	08004004 	.word	0x08004004
 80016f8:	20000140 	.word	0x20000140
 80016fc:	20000144 	.word	0x20000144

08001700 <SerialDownload>:
  * @brief  Download a file via serial port
  * @param  None
  * @retval None
  */
void SerialDownload(void)
{
 8001700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t number[11] = {0};
 8001702:	2300      	movs	r3, #0
  uint32_t size = 0;
 8001704:	ac04      	add	r4, sp, #16
 8001706:	f844 3d10 	str.w	r3, [r4, #-16]!
  COM_StatusTypeDef result;

  Serial_PutString((uint8_t *)"Waiting for the file to be sent ... (press 'a' to abort)\n\r");
 800170a:	4818      	ldr	r0, [pc, #96]	; (800176c <SerialDownload+0x6c>)
  uint8_t number[11] = {0};
 800170c:	9302      	str	r3, [sp, #8]
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	f8cd 300b 	str.w	r3, [sp, #11]
  Serial_PutString((uint8_t *)"Waiting for the file to be sent ... (press 'a' to abort)\n\r");
 8001714:	f7ff fe56 	bl	80013c4 <Serial_PutString>
  result = Ymodem_Receive( &size );
 8001718:	4620      	mov	r0, r4
 800171a:	f000 fa25 	bl	8001b68 <Ymodem_Receive>
  if (result == COM_OK)
 800171e:	b9b8      	cbnz	r0, 8001750 <SerialDownload+0x50>
  {
    Serial_PutString((uint8_t *)"\n\n\r Programming Completed Successfully!\n\r--------------------------------\r\n Name: ");
 8001720:	4813      	ldr	r0, [pc, #76]	; (8001770 <SerialDownload+0x70>)
 8001722:	f7ff fe4f 	bl	80013c4 <Serial_PutString>
    Serial_PutString(aFileName);
 8001726:	4813      	ldr	r0, [pc, #76]	; (8001774 <SerialDownload+0x74>)
 8001728:	f7ff fe4c 	bl	80013c4 <Serial_PutString>
    Int2Str(number, size);
 800172c:	9900      	ldr	r1, [sp, #0]
 800172e:	a801      	add	r0, sp, #4
 8001730:	f7ff fdd6 	bl	80012e0 <Int2Str>
    Serial_PutString((uint8_t *)"\n\r Size: ");
 8001734:	4810      	ldr	r0, [pc, #64]	; (8001778 <SerialDownload+0x78>)
 8001736:	f7ff fe45 	bl	80013c4 <Serial_PutString>
    Serial_PutString(number);
 800173a:	a801      	add	r0, sp, #4
 800173c:	f7ff fe42 	bl	80013c4 <Serial_PutString>
    Serial_PutString((uint8_t *)" Bytes\r\n");
 8001740:	480e      	ldr	r0, [pc, #56]	; (800177c <SerialDownload+0x7c>)
 8001742:	f7ff fe3f 	bl	80013c4 <Serial_PutString>
    Serial_PutString((uint8_t *)"-------------------\n");
 8001746:	480e      	ldr	r0, [pc, #56]	; (8001780 <SerialDownload+0x80>)
  {
    Serial_PutString((uint8_t *)"\r\n\nAborted by user.\n\r");
  }
  else
  {
    Serial_PutString((uint8_t *)"\n\rFailed to receive the file!\n\r");
 8001748:	f7ff fe3c 	bl	80013c4 <Serial_PutString>
  }
}
 800174c:	b004      	add	sp, #16
 800174e:	bd10      	pop	{r4, pc}
  else if (result == COM_LIMIT)
 8001750:	2805      	cmp	r0, #5
 8001752:	d101      	bne.n	8001758 <SerialDownload+0x58>
    Serial_PutString((uint8_t *)"\n\n\rThe image size is higher than the allowed space memory!\n\r");
 8001754:	480b      	ldr	r0, [pc, #44]	; (8001784 <SerialDownload+0x84>)
 8001756:	e7f7      	b.n	8001748 <SerialDownload+0x48>
  else if (result == COM_DATA)
 8001758:	2804      	cmp	r0, #4
 800175a:	d101      	bne.n	8001760 <SerialDownload+0x60>
    Serial_PutString((uint8_t *)"\n\n\rVerification failed!\n\r");
 800175c:	480a      	ldr	r0, [pc, #40]	; (8001788 <SerialDownload+0x88>)
 800175e:	e7f3      	b.n	8001748 <SerialDownload+0x48>
  else if (result == COM_ABORT)
 8001760:	2802      	cmp	r0, #2
    Serial_PutString((uint8_t *)"\r\n\nAborted by user.\n\r");
 8001762:	bf0c      	ite	eq
 8001764:	4809      	ldreq	r0, [pc, #36]	; (800178c <SerialDownload+0x8c>)
    Serial_PutString((uint8_t *)"\n\rFailed to receive the file!\n\r");
 8001766:	480a      	ldrne	r0, [pc, #40]	; (8001790 <SerialDownload+0x90>)
 8001768:	e7ee      	b.n	8001748 <SerialDownload+0x48>
 800176a:	bf00      	nop
 800176c:	08002e66 	.word	0x08002e66
 8001770:	08002ea1 	.word	0x08002ea1
 8001774:	20000148 	.word	0x20000148
 8001778:	08002ef4 	.word	0x08002ef4
 800177c:	08002efe 	.word	0x08002efe
 8001780:	08002f07 	.word	0x08002f07
 8001784:	08002f1c 	.word	0x08002f1c
 8001788:	08002f59 	.word	0x08002f59
 800178c:	08002f73 	.word	0x08002f73
 8001790:	08002f89 	.word	0x08002f89

08001794 <SerialUpload>:
  * @param  None
  * @retval None
  */
void SerialUpload(void)
{
  uint8_t status = 0;
 8001794:	2300      	movs	r3, #0
{
 8001796:	b513      	push	{r0, r1, r4, lr}
  uint8_t status = 0;
 8001798:	ac02      	add	r4, sp, #8
 800179a:	f804 3d01 	strb.w	r3, [r4, #-1]!

  Serial_PutString((uint8_t *)"\n\n\rSelect Receive File\n\r");
 800179e:	480f      	ldr	r0, [pc, #60]	; (80017dc <SerialUpload+0x48>)
 80017a0:	f7ff fe10 	bl	80013c4 <Serial_PutString>

  HAL_UART_Receive(&UartHandle, &status, 1, RX_TIMEOUT);
 80017a4:	f04f 33ff 	mov.w	r3, #4294967295
 80017a8:	2201      	movs	r2, #1
 80017aa:	4621      	mov	r1, r4
 80017ac:	480c      	ldr	r0, [pc, #48]	; (80017e0 <SerialUpload+0x4c>)
 80017ae:	f7ff fd37 	bl	8001220 <HAL_UART_Receive>
  if ( status == CRC16)
 80017b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80017b6:	2b43      	cmp	r3, #67	; 0x43
 80017b8:	d10b      	bne.n	80017d2 <SerialUpload+0x3e>
  {
    /* Transmit the flash image through ymodem protocol */
    status = Ymodem_Transmit((uint8_t*)APPLICATION_ADDRESS, (const uint8_t*)"UploadedFlashImage.bin", USER_FLASH_SIZE);
 80017ba:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80017be:	4909      	ldr	r1, [pc, #36]	; (80017e4 <SerialUpload+0x50>)
 80017c0:	4809      	ldr	r0, [pc, #36]	; (80017e8 <SerialUpload+0x54>)
 80017c2:	f000 fae9 	bl	8001d98 <Ymodem_Transmit>
 80017c6:	f88d 0007 	strb.w	r0, [sp, #7]

    if (status != 0)
 80017ca:	b120      	cbz	r0, 80017d6 <SerialUpload+0x42>
    {
      Serial_PutString((uint8_t *)"\n\rError Occurred while Transmitting File\n\r");
 80017cc:	4807      	ldr	r0, [pc, #28]	; (80017ec <SerialUpload+0x58>)
    }
    else
    {
      Serial_PutString((uint8_t *)"\n\rFile uploaded successfully \n\r");
 80017ce:	f7ff fdf9 	bl	80013c4 <Serial_PutString>
    }
  }
}
 80017d2:	b002      	add	sp, #8
 80017d4:	bd10      	pop	{r4, pc}
      Serial_PutString((uint8_t *)"\n\rFile uploaded successfully \n\r");
 80017d6:	4806      	ldr	r0, [pc, #24]	; (80017f0 <SerialUpload+0x5c>)
 80017d8:	e7f9      	b.n	80017ce <SerialUpload+0x3a>
 80017da:	bf00      	nop
 80017dc:	08002fa9 	.word	0x08002fa9
 80017e0:	200000c0 	.word	0x200000c0
 80017e4:	08002fc2 	.word	0x08002fc2
 80017e8:	08004000 	.word	0x08004000
 80017ec:	08002fd9 	.word	0x08002fd9
 80017f0:	08003004 	.word	0x08003004

080017f4 <Main_Menu>:
  * @param  None
  * @retval None
  */
void Main_Menu(void)
{
  uint8_t key = 0;
 80017f4:	2300      	movs	r3, #0
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8

  Serial_PutString((uint8_t *)"\r\n======================================================================");
 80017fa:	483c      	ldr	r0, [pc, #240]	; (80018ec <Main_Menu+0xf8>)
{
 80017fc:	af00      	add	r7, sp, #0
  uint8_t key = 0;
 80017fe:	71fb      	strb	r3, [r7, #7]
  Serial_PutString((uint8_t *)"\r\n======================================================================");
 8001800:	f7ff fde0 	bl	80013c4 <Serial_PutString>
  Serial_PutString((uint8_t *)"\r\n=              (C) COPYRIGHT 2016 STMicroelectronics                 =");
 8001804:	483a      	ldr	r0, [pc, #232]	; (80018f0 <Main_Menu+0xfc>)
 8001806:	f7ff fddd 	bl	80013c4 <Serial_PutString>
  Serial_PutString((uint8_t *)"\r\n=                                                                    =");
 800180a:	483a      	ldr	r0, [pc, #232]	; (80018f4 <Main_Menu+0x100>)
 800180c:	f7ff fdda 	bl	80013c4 <Serial_PutString>
  Serial_PutString((uint8_t *)"\r\n=  STM32F1xx In-Application Programming Application  (Version 1.0.0) =");
 8001810:	4839      	ldr	r0, [pc, #228]	; (80018f8 <Main_Menu+0x104>)
 8001812:	f7ff fdd7 	bl	80013c4 <Serial_PutString>
  Serial_PutString((uint8_t *)"\r\n=                                                                    =");
 8001816:	4837      	ldr	r0, [pc, #220]	; (80018f4 <Main_Menu+0x100>)
 8001818:	f7ff fdd4 	bl	80013c4 <Serial_PutString>
  Serial_PutString((uint8_t *)"\r\n=                                   By MCD Application Team          =");
 800181c:	4837      	ldr	r0, [pc, #220]	; (80018fc <Main_Menu+0x108>)
 800181e:	f7ff fdd1 	bl	80013c4 <Serial_PutString>
  Serial_PutString((uint8_t *)"\r\n======================================================================");
 8001822:	4832      	ldr	r0, [pc, #200]	; (80018ec <Main_Menu+0xf8>)
 8001824:	f7ff fdce 	bl	80013c4 <Serial_PutString>
  Serial_PutString((uint8_t *)"\r\n\r\n");
 8001828:	4835      	ldr	r0, [pc, #212]	; (8001900 <Main_Menu+0x10c>)
 800182a:	f7ff fdcb 	bl	80013c4 <Serial_PutString>

  /* Test if any sector of Flash memory where user application will be loaded is write protected */
  FlashProtection = FLASH_If_GetWriteProtectionStatus();
 800182e:	f7ff fe39 	bl	80014a4 <FLASH_If_GetWriteProtectionStatus>
 8001832:	4c34      	ldr	r4, [pc, #208]	; (8001904 <Main_Menu+0x110>)

  while (1)
  {

    Serial_PutString((uint8_t *)"\r\n=================== Main Menu ============================\r\n\n");
 8001834:	4d34      	ldr	r5, [pc, #208]	; (8001908 <Main_Menu+0x114>)
    Serial_PutString((uint8_t *)"  Download image to the internal Flash ----------------- 1\r\n\n");
 8001836:	4e35      	ldr	r6, [pc, #212]	; (800190c <Main_Menu+0x118>)
  FlashProtection = FLASH_If_GetWriteProtectionStatus();
 8001838:	6020      	str	r0, [r4, #0]
    Serial_PutString((uint8_t *)"\r\n=================== Main Menu ============================\r\n\n");
 800183a:	4628      	mov	r0, r5
 800183c:	f7ff fdc2 	bl	80013c4 <Serial_PutString>
    Serial_PutString((uint8_t *)"  Download image to the internal Flash ----------------- 1\r\n\n");
 8001840:	4630      	mov	r0, r6
 8001842:	f7ff fdbf 	bl	80013c4 <Serial_PutString>
    Serial_PutString((uint8_t *)"  Upload image from the internal Flash ----------------- 2\r\n\n");
 8001846:	4832      	ldr	r0, [pc, #200]	; (8001910 <Main_Menu+0x11c>)
 8001848:	f7ff fdbc 	bl	80013c4 <Serial_PutString>
    Serial_PutString((uint8_t *)"  Execute the loaded application ----------------------- 3\r\n\n");
 800184c:	4831      	ldr	r0, [pc, #196]	; (8001914 <Main_Menu+0x120>)
 800184e:	f7ff fdb9 	bl	80013c4 <Serial_PutString>


    if(FlashProtection != FLASHIF_PROTECTION_NONE)
 8001852:	6823      	ldr	r3, [r4, #0]
 8001854:	b1b3      	cbz	r3, 8001884 <Main_Menu+0x90>
    {
      Serial_PutString((uint8_t *)"  Disable the write protection ------------------------- 4\r\n\n");
 8001856:	4830      	ldr	r0, [pc, #192]	; (8001918 <Main_Menu+0x124>)
    }
    else
    {
      Serial_PutString((uint8_t *)"  Enable the write protection -------------------------- 4\r\n\n");
 8001858:	f7ff fdb4 	bl	80013c4 <Serial_PutString>
    }
    Serial_PutString((uint8_t *)"==========================================================\r\n\n");
 800185c:	482f      	ldr	r0, [pc, #188]	; (800191c <Main_Menu+0x128>)
 800185e:	f7ff fdb1 	bl	80013c4 <Serial_PutString>

    /* Clean the input path */
    __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 8001862:	482f      	ldr	r0, [pc, #188]	; (8001920 <Main_Menu+0x12c>)
	
    /* Receive key */
    HAL_UART_Receive(&UartHandle, &key, 1, RX_TIMEOUT);
 8001864:	2201      	movs	r2, #1
    __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 8001866:	6803      	ldr	r3, [r0, #0]
    HAL_UART_Receive(&UartHandle, &key, 1, RX_TIMEOUT);
 8001868:	1df9      	adds	r1, r7, #7
    __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 800186a:	685b      	ldr	r3, [r3, #4]
    HAL_UART_Receive(&UartHandle, &key, 1, RX_TIMEOUT);
 800186c:	f04f 33ff 	mov.w	r3, #4294967295
 8001870:	f7ff fcd6 	bl	8001220 <HAL_UART_Receive>

    switch (key)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	3b31      	subs	r3, #49	; 0x31
 8001878:	2b03      	cmp	r3, #3
 800187a:	d834      	bhi.n	80018e6 <Main_Menu+0xf2>
 800187c:	e8df f003 	tbb	[pc, r3]
 8001880:	190a0704 	.word	0x190a0704
      Serial_PutString((uint8_t *)"  Enable the write protection -------------------------- 4\r\n\n");
 8001884:	4827      	ldr	r0, [pc, #156]	; (8001924 <Main_Menu+0x130>)
 8001886:	e7e7      	b.n	8001858 <Main_Menu+0x64>
    {
    case '1' :
      /* Download user application in the Flash */
      SerialDownload();
 8001888:	f7ff ff3a 	bl	8001700 <SerialDownload>
      break;
 800188c:	e7d5      	b.n	800183a <Main_Menu+0x46>
    case '2' :
      /* Upload user application from the Flash */
      SerialUpload();
 800188e:	f7ff ff81 	bl	8001794 <SerialUpload>
      break;
 8001892:	e7d2      	b.n	800183a <Main_Menu+0x46>
    case '3' :
      Serial_PutString((uint8_t *)"Start program execution......\r\n\n");
 8001894:	4824      	ldr	r0, [pc, #144]	; (8001928 <Main_Menu+0x134>)
 8001896:	f7ff fd95 	bl	80013c4 <Serial_PutString>
      /* execute the new program */
      JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 800189a:	4b24      	ldr	r3, [pc, #144]	; (800192c <Main_Menu+0x138>)
 800189c:	4a24      	ldr	r2, [pc, #144]	; (8001930 <Main_Menu+0x13c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6013      	str	r3, [r2, #0]
      /* Jump to user application */
      JumpToApplication = (pFunction) JumpAddress;
 80018a2:	4a24      	ldr	r2, [pc, #144]	; (8001934 <Main_Menu+0x140>)
 80018a4:	6013      	str	r3, [r2, #0]
      /* Initialize user application's Stack Pointer */
      __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 80018a6:	4a24      	ldr	r2, [pc, #144]	; (8001938 <Main_Menu+0x144>)
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	f382 8808 	msr	MSP, r2
      JumpToApplication();
 80018ae:	4798      	blx	r3
      break;
 80018b0:	e7c3      	b.n	800183a <Main_Menu+0x46>
    case '4' :
      if (FlashProtection != FLASHIF_PROTECTION_NONE)
 80018b2:	6820      	ldr	r0, [r4, #0]
 80018b4:	b180      	cbz	r0, 80018d8 <Main_Menu+0xe4>
      {
        /* Disable the write protection */
        if (FLASH_If_WriteProtectionConfig(FLASHIF_WRP_DISABLE) == FLASHIF_OK)
 80018b6:	2001      	movs	r0, #1
 80018b8:	f7ff fe06 	bl	80014c8 <FLASH_If_WriteProtectionConfig>
 80018bc:	b940      	cbnz	r0, 80018d0 <Main_Menu+0xdc>
        {
          Serial_PutString((uint8_t *)"Write Protection disabled...\r\n");
 80018be:	481f      	ldr	r0, [pc, #124]	; (800193c <Main_Menu+0x148>)
      }
      else
      {
        if (FLASH_If_WriteProtectionConfig(FLASHIF_WRP_ENABLE) == FLASHIF_OK)
        {
          Serial_PutString((uint8_t *)"Write Protection enabled...\r\n");
 80018c0:	f7ff fd80 	bl	80013c4 <Serial_PutString>
          Serial_PutString((uint8_t *)"System will now restart...\r\n");
 80018c4:	481e      	ldr	r0, [pc, #120]	; (8001940 <Main_Menu+0x14c>)
 80018c6:	f7ff fd7d 	bl	80013c4 <Serial_PutString>
          /* Launch the option byte loading */
          HAL_FLASH_OB_Launch();
 80018ca:	f7fe fd75 	bl	80003b8 <HAL_FLASH_OB_Launch>
 80018ce:	e7b4      	b.n	800183a <Main_Menu+0x46>
          Serial_PutString((uint8_t *)"Error: Flash write un-protection failed...\r\n");
 80018d0:	481c      	ldr	r0, [pc, #112]	; (8001944 <Main_Menu+0x150>)
          Serial_PutString((uint8_t *)"Error: Flash write protection failed...\r\n");
        }
      }
      break;
	default:
	Serial_PutString((uint8_t *)"Invalid Number ! ==> The number should be either 1, 2, 3 or 4\r");
 80018d2:	f7ff fd77 	bl	80013c4 <Serial_PutString>
	break;
 80018d6:	e7b0      	b.n	800183a <Main_Menu+0x46>
        if (FLASH_If_WriteProtectionConfig(FLASHIF_WRP_ENABLE) == FLASHIF_OK)
 80018d8:	f7ff fdf6 	bl	80014c8 <FLASH_If_WriteProtectionConfig>
 80018dc:	b908      	cbnz	r0, 80018e2 <Main_Menu+0xee>
          Serial_PutString((uint8_t *)"Write Protection enabled...\r\n");
 80018de:	481a      	ldr	r0, [pc, #104]	; (8001948 <Main_Menu+0x154>)
 80018e0:	e7ee      	b.n	80018c0 <Main_Menu+0xcc>
          Serial_PutString((uint8_t *)"Error: Flash write protection failed...\r\n");
 80018e2:	481a      	ldr	r0, [pc, #104]	; (800194c <Main_Menu+0x158>)
 80018e4:	e7f5      	b.n	80018d2 <Main_Menu+0xde>
	Serial_PutString((uint8_t *)"Invalid Number ! ==> The number should be either 1, 2, 3 or 4\r");
 80018e6:	481a      	ldr	r0, [pc, #104]	; (8001950 <Main_Menu+0x15c>)
 80018e8:	e7f3      	b.n	80018d2 <Main_Menu+0xde>
 80018ea:	bf00      	nop
 80018ec:	08002a2f 	.word	0x08002a2f
 80018f0:	08002a78 	.word	0x08002a78
 80018f4:	08002ac1 	.word	0x08002ac1
 80018f8:	08002b0a 	.word	0x08002b0a
 80018fc:	08002b53 	.word	0x08002b53
 8001900:	08002b9c 	.word	0x08002b9c
 8001904:	2000008c 	.word	0x2000008c
 8001908:	08002ba1 	.word	0x08002ba1
 800190c:	08002be1 	.word	0x08002be1
 8001910:	08002c1f 	.word	0x08002c1f
 8001914:	08002c5d 	.word	0x08002c5d
 8001918:	08002c9b 	.word	0x08002c9b
 800191c:	08002d17 	.word	0x08002d17
 8001920:	200000c0 	.word	0x200000c0
 8001924:	08002cd9 	.word	0x08002cd9
 8001928:	08002d55 	.word	0x08002d55
 800192c:	08004004 	.word	0x08004004
 8001930:	20000140 	.word	0x20000140
 8001934:	20000144 	.word	0x20000144
 8001938:	08004000 	.word	0x08004000
 800193c:	08002d76 	.word	0x08002d76
 8001940:	08002d95 	.word	0x08002d95
 8001944:	08002db2 	.word	0x08002db2
 8001948:	08002ddf 	.word	0x08002ddf
 800194c:	08002dfd 	.word	0x08002dfd
 8001950:	08002e27 	.word	0x08002e27

08001954 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001954:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <HAL_MspInit+0x3c>)
{
 8001956:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001958:	699a      	ldr	r2, [r3, #24]
 800195a:	f042 0201 	orr.w	r2, r2, #1
 800195e:	619a      	str	r2, [r3, #24]
 8001960:	699a      	ldr	r2, [r3, #24]
 8001962:	f002 0201 	and.w	r2, r2, #1
 8001966:	9200      	str	r2, [sp, #0]
 8001968:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800196a:	69da      	ldr	r2, [r3, #28]
 800196c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001970:	61da      	str	r2, [r3, #28]
 8001972:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001974:	4a07      	ldr	r2, [pc, #28]	; (8001994 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800197e:	6853      	ldr	r3, [r2, #4]
 8001980:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001984:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001988:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198a:	b002      	add	sp, #8
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40021000 	.word	0x40021000
 8001994:	40010000 	.word	0x40010000

08001998 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	2210      	movs	r2, #16
{
 800199a:	b510      	push	{r4, lr}
 800199c:	4604      	mov	r4, r0
 800199e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	eb0d 0002 	add.w	r0, sp, r2
 80019a4:	2100      	movs	r1, #0
 80019a6:	f000 fbaf 	bl	8002108 <memset>
  if(huart->Instance==USART1)
 80019aa:	6823      	ldr	r3, [r4, #0]
 80019ac:	4a24      	ldr	r2, [pc, #144]	; (8001a40 <HAL_UART_MspInit+0xa8>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d129      	bne.n	8001a06 <HAL_UART_MspInit+0x6e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019b2:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <HAL_UART_MspInit+0xac>)
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b4:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 80019b6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b8:	4823      	ldr	r0, [pc, #140]	; (8001a48 <HAL_UART_MspInit+0xb0>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80019ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019be:	619a      	str	r2, [r3, #24]
 80019c0:	699a      	ldr	r2, [r3, #24]
 80019c2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80019c6:	9200      	str	r2, [sp, #0]
 80019c8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ca:	699a      	ldr	r2, [r3, #24]
 80019cc:	f042 0204 	orr.w	r2, r2, #4
 80019d0:	619a      	str	r2, [r3, #24]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	9301      	str	r3, [sp, #4]
 80019da:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019e0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e6:	2303      	movs	r3, #3
 80019e8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ea:	f7fe ff37 	bl	800085c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019f2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f4:	2300      	movs	r3, #0
 80019f6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	9306      	str	r3, [sp, #24]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fa:	a904      	add	r1, sp, #16
 80019fc:	4812      	ldr	r0, [pc, #72]	; (8001a48 <HAL_UART_MspInit+0xb0>)
 80019fe:	f7fe ff2d 	bl	800085c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a02:	b008      	add	sp, #32
 8001a04:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 8001a06:	4a11      	ldr	r2, [pc, #68]	; (8001a4c <HAL_UART_MspInit+0xb4>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d1fa      	bne.n	8001a02 <HAL_UART_MspInit+0x6a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a0c:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <HAL_UART_MspInit+0xac>)
 8001a0e:	69da      	ldr	r2, [r3, #28]
 8001a10:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001a14:	61da      	str	r2, [r3, #28]
 8001a16:	69da      	ldr	r2, [r3, #28]
 8001a18:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001a1c:	9202      	str	r2, [sp, #8]
 8001a1e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a20:	699a      	ldr	r2, [r3, #24]
 8001a22:	f042 0204 	orr.w	r2, r2, #4
 8001a26:	619a      	str	r2, [r3, #24]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	9303      	str	r3, [sp, #12]
 8001a30:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a32:	230c      	movs	r3, #12
 8001a34:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	9307      	str	r3, [sp, #28]
 8001a3c:	e7dd      	b.n	80019fa <HAL_UART_MspInit+0x62>
 8001a3e:	bf00      	nop
 8001a40:	40013800 	.word	0x40013800
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40010800 	.word	0x40010800
 8001a4c:	40004400 	.word	0x40004400

08001a50 <NMI_Handler>:
 8001a50:	4770      	bx	lr

08001a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a52:	e7fe      	b.n	8001a52 <HardFault_Handler>

08001a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a54:	e7fe      	b.n	8001a54 <MemManage_Handler>

08001a56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a56:	e7fe      	b.n	8001a56 <BusFault_Handler>

08001a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a58:	e7fe      	b.n	8001a58 <UsageFault_Handler>

08001a5a <SVC_Handler>:
 8001a5a:	4770      	bx	lr

08001a5c <DebugMon_Handler>:
 8001a5c:	4770      	bx	lr

08001a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a5e:	4770      	bx	lr

08001a60 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a60:	f7fe bbb6 	b.w	80001d0 <HAL_IncTick>

08001a64 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a64:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a68:	f7fe bfe4 	b.w	8000a34 <HAL_GPIO_EXTI_IRQHandler>

08001a6c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a6c:	b570      	push	{r4, r5, r6, lr}
 8001a6e:	460e      	mov	r6, r1
 8001a70:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a72:	460c      	mov	r4, r1
 8001a74:	1ba3      	subs	r3, r4, r6
 8001a76:	429d      	cmp	r5, r3
 8001a78:	dc01      	bgt.n	8001a7e <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001a7a:	4628      	mov	r0, r5
 8001a7c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001a7e:	f3af 8000 	nop.w
 8001a82:	f804 0b01 	strb.w	r0, [r4], #1
 8001a86:	e7f5      	b.n	8001a74 <_read+0x8>

08001a88 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001a88:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <_sbrk+0x2c>)
{
 8001a8c:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001a8e:	6819      	ldr	r1, [r3, #0]
 8001a90:	b909      	cbnz	r1, 8001a96 <_sbrk+0xe>
		heap_end = &end;
 8001a92:	4909      	ldr	r1, [pc, #36]	; (8001ab8 <_sbrk+0x30>)
 8001a94:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001a96:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001a98:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001a9a:	4402      	add	r2, r0
 8001a9c:	428a      	cmp	r2, r1
 8001a9e:	d906      	bls.n	8001aae <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001aa0:	f000 fb08 	bl	80020b4 <__errno>
 8001aa4:	230c      	movs	r3, #12
 8001aa6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aac:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001aae:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001ab0:	bd08      	pop	{r3, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000090 	.word	0x20000090
 8001ab8:	20000594 	.word	0x20000594

08001abc <_close>:

int _close(int file)
{
	return -1;
}
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	4770      	bx	lr

08001ac2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001ac2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001ac6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001ac8:	604b      	str	r3, [r1, #4]
}
 8001aca:	4770      	bx	lr

08001acc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001acc:	2001      	movs	r0, #1
 8001ace:	4770      	bx	lr

08001ad0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	4770      	bx	lr

08001ad4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <SystemInit+0x40>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	f042 0201 	orr.w	r2, r2, #1
 8001adc:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001ade:	6859      	ldr	r1, [r3, #4]
 8001ae0:	4a0d      	ldr	r2, [pc, #52]	; (8001b18 <SystemInit+0x44>)
 8001ae2:	400a      	ands	r2, r1
 8001ae4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001aec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001af0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001af8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001b00:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001b02:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001b06:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001b08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b0c:	4b03      	ldr	r3, [pc, #12]	; (8001b1c <SystemInit+0x48>)
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	40021000 	.word	0x40021000
 8001b18:	f8ff0000 	.word	0xf8ff0000
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <UpdateCRC16>:
    crc <<= 1;
    in <<= 1;
    if(in & 0x100)
      ++crc;
    if(crc & 0x10000)
      crc ^= 0x1021;
 8001b20:	f241 0321 	movw	r3, #4129	; 0x1021
  uint32_t in = byte | 0x100;
 8001b24:	f441 7180 	orr.w	r1, r1, #256	; 0x100
    in <<= 1;
 8001b28:	0049      	lsls	r1, r1, #1
    crc <<= 1;
 8001b2a:	0040      	lsls	r0, r0, #1
    if(in & 0x100)
 8001b2c:	05ca      	lsls	r2, r1, #23
      ++crc;
 8001b2e:	bf48      	it	mi
 8001b30:	3001      	addmi	r0, #1
    if(crc & 0x10000)
 8001b32:	03c2      	lsls	r2, r0, #15
      crc ^= 0x1021;
 8001b34:	bf48      	it	mi
 8001b36:	4058      	eormi	r0, r3
  }
  
  while(!(in & 0x10000));
 8001b38:	03ca      	lsls	r2, r1, #15
 8001b3a:	d5f5      	bpl.n	8001b28 <UpdateCRC16+0x8>

  return crc & 0xffffu;
}
 8001b3c:	b280      	uxth	r0, r0
 8001b3e:	4770      	bx	lr

08001b40 <Cal_CRC16>:
  * @param  data
  * @param  length
  * @retval None
  */
uint16_t Cal_CRC16(const uint8_t* p_data, uint32_t size)
{
 8001b40:	b538      	push	{r3, r4, r5, lr}
 8001b42:	4604      	mov	r4, r0
  uint32_t crc = 0;
  const uint8_t* dataEnd = p_data+size;
 8001b44:	1845      	adds	r5, r0, r1
  uint32_t crc = 0;
 8001b46:	2000      	movs	r0, #0

  while(p_data < dataEnd)
 8001b48:	42ac      	cmp	r4, r5
 8001b4a:	b280      	uxth	r0, r0
 8001b4c:	d307      	bcc.n	8001b5e <Cal_CRC16+0x1e>
    crc = UpdateCRC16(crc, *p_data++);
 
  crc = UpdateCRC16(crc, 0);
 8001b4e:	2100      	movs	r1, #0
 8001b50:	f7ff ffe6 	bl	8001b20 <UpdateCRC16>
  crc = UpdateCRC16(crc, 0);

  return crc&0xffffu;
}
 8001b54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  crc = UpdateCRC16(crc, 0);
 8001b58:	2100      	movs	r1, #0
 8001b5a:	f7ff bfe1 	b.w	8001b20 <UpdateCRC16>
    crc = UpdateCRC16(crc, *p_data++);
 8001b5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b62:	f7ff ffdd 	bl	8001b20 <UpdateCRC16>
 8001b66:	e7ef      	b.n	8001b48 <Cal_CRC16+0x8>

08001b68 <Ymodem_Receive>:
  * @brief  Receive a file using the ymodem protocol with CRC16.
  * @param  p_size The size of the file.
  * @retval COM_StatusTypeDef result of reception/programming
  */
COM_StatusTypeDef Ymodem_Receive ( uint32_t *p_size )
{
 8001b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b6c:	4681      	mov	r9, r0
  uint32_t i, packet_length, session_done = 0, file_done, errors = 0, session_begin = 0;
 8001b6e:	f04f 0a00 	mov.w	sl, #0
  uint8_t *file_ptr;
  uint8_t file_size[FILE_SIZE_LENGTH], tmp, packets_received;
  COM_StatusTypeDef result = COM_OK;

  /* Initialize flashdestination variable */
  flashdestination = APPLICATION_ADDRESS;
 8001b72:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8001d94 <Ymodem_Receive+0x22c>
    *p_data = char1;
 8001b76:	4f82      	ldr	r7, [pc, #520]	; (8001d80 <Ymodem_Receive+0x218>)
{
 8001b78:	b089      	sub	sp, #36	; 0x24
    while ((file_done == 0) && (result == COM_OK))
    {
      switch (ReceivePacket(aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
      {
        case HAL_OK:
          errors = 0;
 8001b7a:	2500      	movs	r5, #0
  status = HAL_UART_Receive(&UartHandle, &char1, 1, timeout);
 8001b7c:	4e81      	ldr	r6, [pc, #516]	; (8001d84 <Ymodem_Receive+0x21c>)
          errors = 0;
 8001b7e:	462c      	mov	r4, r5
 8001b80:	e0bc      	b.n	8001cfc <Ymodem_Receive+0x194>
    switch (char1)
 8001b82:	2b41      	cmp	r3, #65	; 0x41
 8001b84:	d04c      	beq.n	8001c20 <Ymodem_Receive+0xb8>
 8001b86:	2b61      	cmp	r3, #97	; 0x61
 8001b88:	d04a      	beq.n	8001c20 <Ymodem_Receive+0xb8>
 8001b8a:	2b18      	cmp	r3, #24
 8001b8c:	f040 80cd 	bne.w	8001d2a <Ymodem_Receive+0x1c2>
        if ((HAL_UART_Receive(&UartHandle, &char1, 1, timeout) == HAL_OK) && (char1 == CA))
 8001b90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b94:	2201      	movs	r2, #1
 8001b96:	f10d 010b 	add.w	r1, sp, #11
 8001b9a:	4630      	mov	r0, r6
 8001b9c:	f7ff fb40 	bl	8001220 <HAL_UART_Receive>
 8001ba0:	2800      	cmp	r0, #0
 8001ba2:	d141      	bne.n	8001c28 <Ymodem_Receive+0xc0>
 8001ba4:	f89d 300b 	ldrb.w	r3, [sp, #11]
          packet_size = 2;
 8001ba8:	2b18      	cmp	r3, #24
 8001baa:	bf16      	itet	ne
 8001bac:	f04f 0b00 	movne.w	fp, #0
 8001bb0:	f04f 0b02 	moveq.w	fp, #2
 8001bb4:	2001      	movne	r0, #1
 8001bb6:	e001      	b.n	8001bbc <Ymodem_Receive+0x54>
        packet_size = PACKET_SIZE;
 8001bb8:	f04f 0b80 	mov.w	fp, #128	; 0x80
    *p_data = char1;
 8001bbc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    if (packet_size >= PACKET_SIZE )
 8001bc0:	f1bb 0f7f 	cmp.w	fp, #127	; 0x7f
    *p_data = char1;
 8001bc4:	703b      	strb	r3, [r7, #0]
    if (packet_size >= PACKET_SIZE )
 8001bc6:	d931      	bls.n	8001c2c <Ymodem_Receive+0xc4>
      status = HAL_UART_Receive(&UartHandle, &p_data[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, timeout);
 8001bc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bcc:	f10b 0204 	add.w	r2, fp, #4
 8001bd0:	496d      	ldr	r1, [pc, #436]	; (8001d88 <Ymodem_Receive+0x220>)
 8001bd2:	4630      	mov	r0, r6
 8001bd4:	f7ff fb24 	bl	8001220 <HAL_UART_Receive>
      if (status == HAL_OK )
 8001bd8:	bb50      	cbnz	r0, 8001c30 <Ymodem_Receive+0xc8>
        if (p_data[PACKET_NUMBER_INDEX] != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE))
 8001bda:	78fb      	ldrb	r3, [r7, #3]
 8001bdc:	78ba      	ldrb	r2, [r7, #2]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d127      	bne.n	8001c36 <Ymodem_Receive+0xce>
          crc = p_data[ packet_size + PACKET_DATA_INDEX ] << 8;
 8001be6:	4869      	ldr	r0, [pc, #420]	; (8001d8c <Ymodem_Receive+0x224>)
          if (Cal_CRC16(&p_data[PACKET_DATA_INDEX], packet_size) != crc )
 8001be8:	4659      	mov	r1, fp
          crc += p_data[ packet_size + PACKET_DATA_INDEX + 1 ];
 8001bea:	1c43      	adds	r3, r0, #1
          crc = p_data[ packet_size + PACKET_DATA_INDEX ] << 8;
 8001bec:	f81b 2000 	ldrb.w	r2, [fp, r0]
          crc += p_data[ packet_size + PACKET_DATA_INDEX + 1 ];
 8001bf0:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8001bf4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001bf8:	9301      	str	r3, [sp, #4]
          if (Cal_CRC16(&p_data[PACKET_DATA_INDEX], packet_size) != crc )
 8001bfa:	f7ff ffa1 	bl	8001b40 <Cal_CRC16>
 8001bfe:	9b01      	ldr	r3, [sp, #4]
 8001c00:	4283      	cmp	r3, r0
 8001c02:	d118      	bne.n	8001c36 <Ymodem_Receive+0xce>
          switch (packet_length)
 8001c04:	f1bb 0f00 	cmp.w	fp, #0
 8001c08:	d023      	beq.n	8001c52 <Ymodem_Receive+0xea>
 8001c0a:	f1bb 0f02 	cmp.w	fp, #2
 8001c0e:	d124      	bne.n	8001c5a <Ymodem_Receive+0xf2>
          {
            case 2:
              /* Abort by sender */
              Serial_PutByte(ACK);
 8001c10:	2006      	movs	r0, #6
              break;
          }
          break;
        case HAL_BUSY: /* Abort actually */
          Serial_PutByte(CA);
          Serial_PutByte(CA);
 8001c12:	f7ff fbe5 	bl	80013e0 <Serial_PutByte>
  uint32_t i, packet_length, session_done = 0, file_done, errors = 0, session_begin = 0;
 8001c16:	2402      	movs	r4, #2
          }
          break;
      }
    }
  }
  return result;
 8001c18:	e094      	b.n	8001d44 <Ymodem_Receive+0x1dc>
        packet_size = PACKET_1K_SIZE;
 8001c1a:	f44f 6b80 	mov.w	fp, #1024	; 0x400
 8001c1e:	e7cd      	b.n	8001bbc <Ymodem_Receive+0x54>
        status = HAL_BUSY;
 8001c20:	2002      	movs	r0, #2
  uint32_t packet_size = 0;
 8001c22:	f04f 0b00 	mov.w	fp, #0
 8001c26:	e7c9      	b.n	8001bbc <Ymodem_Receive+0x54>
          status = HAL_ERROR;
 8001c28:	2001      	movs	r0, #1
 8001c2a:	e7c7      	b.n	8001bbc <Ymodem_Receive+0x54>
      switch (ReceivePacket(aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
 8001c2c:	2800      	cmp	r0, #0
 8001c2e:	d0e9      	beq.n	8001c04 <Ymodem_Receive+0x9c>
 8001c30:	2802      	cmp	r0, #2
 8001c32:	f000 809e 	beq.w	8001d72 <Ymodem_Receive+0x20a>
          if (session_begin > 0)
 8001c36:	f1ba 0f00 	cmp.w	sl, #0
 8001c3a:	d000      	beq.n	8001c3e <Ymodem_Receive+0xd6>
            errors ++;
 8001c3c:	3401      	adds	r4, #1
          if (errors > MAX_ERRORS)
 8001c3e:	2c05      	cmp	r4, #5
 8001c40:	f240 809c 	bls.w	8001d7c <Ymodem_Receive+0x214>
            Serial_PutByte(CA);
 8001c44:	2018      	movs	r0, #24
 8001c46:	f7ff fbcb 	bl	80013e0 <Serial_PutByte>
            Serial_PutByte(CA);
 8001c4a:	2018      	movs	r0, #24
            Serial_PutByte(CRC16); /* Ask for a packet */
 8001c4c:	f7ff fbc8 	bl	80013e0 <Serial_PutByte>
 8001c50:	e054      	b.n	8001cfc <Ymodem_Receive+0x194>
              Serial_PutByte(ACK);
 8001c52:	2006      	movs	r0, #6
 8001c54:	f7ff fbc4 	bl	80013e0 <Serial_PutByte>
 8001c58:	e78f      	b.n	8001b7a <Ymodem_Receive+0x12>
              if (aPacketData[PACKET_NUMBER_INDEX] != packets_received)
 8001c5a:	78bb      	ldrb	r3, [r7, #2]
 8001c5c:	42ab      	cmp	r3, r5
 8001c5e:	d004      	beq.n	8001c6a <Ymodem_Receive+0x102>
                Serial_PutByte(NAK);
 8001c60:	2015      	movs	r0, #21
 8001c62:	f7ff fbbd 	bl	80013e0 <Serial_PutByte>
          errors = 0;
 8001c66:	2400      	movs	r4, #0
 8001c68:	e048      	b.n	8001cfc <Ymodem_Receive+0x194>
                if (packets_received == 0)
 8001c6a:	2d00      	cmp	r5, #0
 8001c6c:	d16e      	bne.n	8001d4c <Ymodem_Receive+0x1e4>
                  if (aPacketData[PACKET_DATA_INDEX] != 0)
 8001c6e:	793b      	ldrb	r3, [r7, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d063      	beq.n	8001d3c <Ymodem_Receive+0x1d4>
 8001c74:	462a      	mov	r2, r5
 8001c76:	4945      	ldr	r1, [pc, #276]	; (8001d8c <Ymodem_Receive+0x224>)
 8001c78:	4845      	ldr	r0, [pc, #276]	; (8001d90 <Ymodem_Receive+0x228>)
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	f813 4b01 	ldrb.w	r4, [r3], #1
 8001c80:	b10c      	cbz	r4, 8001c86 <Ymodem_Receive+0x11e>
 8001c82:	2a40      	cmp	r2, #64	; 0x40
 8001c84:	d153      	bne.n	8001d2e <Ymodem_Receive+0x1c6>
                    aFileName[i++] = '\0';
 8001c86:	2300      	movs	r3, #0
 8001c88:	5483      	strb	r3, [r0, r2]
 8001c8a:	a804      	add	r0, sp, #16
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 8001c8c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001c90:	2a20      	cmp	r2, #32
 8001c92:	d001      	beq.n	8001c98 <Ymodem_Receive+0x130>
 8001c94:	2b10      	cmp	r3, #16
 8001c96:	d14e      	bne.n	8001d36 <Ymodem_Receive+0x1ce>
                    file_size[i++] = '\0';
 8001c98:	2400      	movs	r4, #0
 8001c9a:	aa08      	add	r2, sp, #32
 8001c9c:	4413      	add	r3, r2
                    Str2Int(file_size, &filesize);
 8001c9e:	a903      	add	r1, sp, #12
                    file_size[i++] = '\0';
 8001ca0:	f803 4c10 	strb.w	r4, [r3, #-16]
                    Str2Int(file_size, &filesize);
 8001ca4:	f7ff fb3a 	bl	800131c <Str2Int>
                    if (*p_size > (USER_FLASH_SIZE + 1))
 8001ca8:	f243 0301 	movw	r3, #12289	; 0x3001
 8001cac:	f8d9 2000 	ldr.w	r2, [r9]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d912      	bls.n	8001cda <Ymodem_Receive+0x172>
                      tmp = CA;
 8001cb4:	2318      	movs	r3, #24
 8001cb6:	ac08      	add	r4, sp, #32
 8001cb8:	f804 3d16 	strb.w	r3, [r4, #-22]!
                      HAL_UART_Transmit(&UartHandle, &tmp, 1, NAK_TIMEOUT);
 8001cbc:	4621      	mov	r1, r4
 8001cbe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	4630      	mov	r0, r6
 8001cc6:	f7ff fa4f 	bl	8001168 <HAL_UART_Transmit>
                      HAL_UART_Transmit(&UartHandle, &tmp, 1, NAK_TIMEOUT);
 8001cca:	4621      	mov	r1, r4
 8001ccc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	4630      	mov	r0, r6
 8001cd4:	f7ff fa48 	bl	8001168 <HAL_UART_Transmit>
                      result = COM_LIMIT;
 8001cd8:	2405      	movs	r4, #5
                    FLASH_If_Erase(APPLICATION_ADDRESS);
 8001cda:	482e      	ldr	r0, [pc, #184]	; (8001d94 <Ymodem_Receive+0x22c>)
 8001cdc:	f7ff fb9a 	bl	8001414 <FLASH_If_Erase>
                    *p_size = filesize;
 8001ce0:	9b03      	ldr	r3, [sp, #12]
                    Serial_PutByte(ACK);
 8001ce2:	2006      	movs	r0, #6
                    *p_size = filesize;
 8001ce4:	f8c9 3000 	str.w	r3, [r9]
                    Serial_PutByte(ACK);
 8001ce8:	f7ff fb7a 	bl	80013e0 <Serial_PutByte>
                    Serial_PutByte(CRC16);
 8001cec:	2043      	movs	r0, #67	; 0x43
                    Serial_PutByte(ACK);
 8001cee:	f7ff fb77 	bl	80013e0 <Serial_PutByte>
                packets_received ++;
 8001cf2:	3501      	adds	r5, #1
 8001cf4:	b2ed      	uxtb	r5, r5
    while ((file_done == 0) && (result == COM_OK))
 8001cf6:	bb2c      	cbnz	r4, 8001d44 <Ymodem_Receive+0x1dc>
                session_begin = 1;
 8001cf8:	f04f 0a01 	mov.w	sl, #1
  status = HAL_UART_Receive(&UartHandle, &char1, 1, timeout);
 8001cfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d00:	2201      	movs	r2, #1
 8001d02:	f10d 010b 	add.w	r1, sp, #11
 8001d06:	4630      	mov	r0, r6
 8001d08:	f7ff fa8a 	bl	8001220 <HAL_UART_Receive>
 8001d0c:	4683      	mov	fp, r0
  if (status == HAL_OK)
 8001d0e:	2800      	cmp	r0, #0
 8001d10:	d18e      	bne.n	8001c30 <Ymodem_Receive+0xc8>
    switch (char1)
 8001d12:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d083      	beq.n	8001c22 <Ymodem_Receive+0xba>
 8001d1a:	f63f af32 	bhi.w	8001b82 <Ymodem_Receive+0x1a>
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	f43f af4a 	beq.w	8001bb8 <Ymodem_Receive+0x50>
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	f43f af78 	beq.w	8001c1a <Ymodem_Receive+0xb2>
        status = HAL_ERROR;
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	e779      	b.n	8001c22 <Ymodem_Receive+0xba>
                      aFileName[i++] = *file_ptr++;
 8001d2e:	5484      	strb	r4, [r0, r2]
 8001d30:	4619      	mov	r1, r3
 8001d32:	3201      	adds	r2, #1
 8001d34:	e7a1      	b.n	8001c7a <Ymodem_Receive+0x112>
                      file_size[i++] = *file_ptr++;
 8001d36:	54c2      	strb	r2, [r0, r3]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	e7a7      	b.n	8001c8c <Ymodem_Receive+0x124>
                    Serial_PutByte(ACK);
 8001d3c:	2006      	movs	r0, #6
 8001d3e:	f7ff fb4f 	bl	80013e0 <Serial_PutByte>
 8001d42:	462c      	mov	r4, r5
}
 8001d44:	4620      	mov	r0, r4
 8001d46:	b009      	add	sp, #36	; 0x24
 8001d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                  if (FLASH_If_Write(flashdestination, (uint32_t*) ramsource, packet_length/4) == FLASHIF_OK)                   
 8001d4c:	ea4f 029b 	mov.w	r2, fp, lsr #2
 8001d50:	490e      	ldr	r1, [pc, #56]	; (8001d8c <Ymodem_Receive+0x224>)
 8001d52:	4640      	mov	r0, r8
 8001d54:	f7ff fb7c 	bl	8001450 <FLASH_If_Write>
 8001d58:	4604      	mov	r4, r0
 8001d5a:	b910      	cbnz	r0, 8001d62 <Ymodem_Receive+0x1fa>
                    flashdestination += packet_length;
 8001d5c:	44d8      	add	r8, fp
                    Serial_PutByte(ACK);
 8001d5e:	2006      	movs	r0, #6
 8001d60:	e7c5      	b.n	8001cee <Ymodem_Receive+0x186>
                    Serial_PutByte(CA);
 8001d62:	2018      	movs	r0, #24
 8001d64:	f7ff fb3c 	bl	80013e0 <Serial_PutByte>
                    Serial_PutByte(CA);
 8001d68:	2018      	movs	r0, #24
 8001d6a:	f7ff fb39 	bl	80013e0 <Serial_PutByte>
                    result = COM_DATA;
 8001d6e:	2404      	movs	r4, #4
 8001d70:	e7bf      	b.n	8001cf2 <Ymodem_Receive+0x18a>
          Serial_PutByte(CA);
 8001d72:	2018      	movs	r0, #24
 8001d74:	f7ff fb34 	bl	80013e0 <Serial_PutByte>
          Serial_PutByte(CA);
 8001d78:	2018      	movs	r0, #24
 8001d7a:	e74a      	b.n	8001c12 <Ymodem_Receive+0xaa>
            Serial_PutByte(CRC16); /* Ask for a packet */
 8001d7c:	2043      	movs	r0, #67	; 0x43
 8001d7e:	e765      	b.n	8001c4c <Ymodem_Receive+0xe4>
 8001d80:	20000188 	.word	0x20000188
 8001d84:	200000c0 	.word	0x200000c0
 8001d88:	2000018a 	.word	0x2000018a
 8001d8c:	2000018c 	.word	0x2000018c
 8001d90:	20000148 	.word	0x20000148
 8001d94:	08004000 	.word	0x08004000

08001d98 <Ymodem_Transmit>:
  p_data[PACKET_START_INDEX] = SOH;
 8001d98:	2301      	movs	r3, #1
  * @param  p_file_name: Name of the file sent
  * @param  file_size: Size of the transmission
  * @retval COM_StatusTypeDef result of the communication
  */
COM_StatusTypeDef Ymodem_Transmit (uint8_t *p_buf, const uint8_t *p_file_name, uint32_t file_size)
{
 8001d9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  p_data[PACKET_START_INDEX] = SOH;
 8001d9e:	4dae      	ldr	r5, [pc, #696]	; (8002058 <Ymodem_Transmit+0x2c0>)
  p_data[PACKET_NUMBER_INDEX] = 0x00;
 8001da0:	2400      	movs	r4, #0
  p_data[PACKET_START_INDEX] = SOH;
 8001da2:	706b      	strb	r3, [r5, #1]
  p_data[PACKET_CNUMBER_INDEX] = 0xff;
 8001da4:	23ff      	movs	r3, #255	; 0xff
{
 8001da6:	4607      	mov	r7, r0
 8001da8:	4616      	mov	r6, r2
 8001daa:	b089      	sub	sp, #36	; 0x24
  p_data[PACKET_NUMBER_INDEX] = 0x00;
 8001dac:	70ac      	strb	r4, [r5, #2]
  p_data[PACKET_CNUMBER_INDEX] = 0xff;
 8001dae:	70eb      	strb	r3, [r5, #3]
  for (i = 0; (p_file_name[i] != '\0') && (i < FILE_NAME_LENGTH); i++)
 8001db0:	5d0b      	ldrb	r3, [r1, r4]
 8001db2:	b10b      	cbz	r3, 8001db8 <Ymodem_Transmit+0x20>
 8001db4:	2c40      	cmp	r4, #64	; 0x40
 8001db6:	d153      	bne.n	8001e60 <Ymodem_Transmit+0xc8>
  p_data[i + PACKET_DATA_INDEX] = 0x00;
 8001db8:	2200      	movs	r2, #0
 8001dba:	4ba8      	ldr	r3, [pc, #672]	; (800205c <Ymodem_Transmit+0x2c4>)
  Int2Str (astring, length);
 8001dbc:	4631      	mov	r1, r6
  p_data[i + PACKET_DATA_INDEX] = 0x00;
 8001dbe:	54e2      	strb	r2, [r4, r3]
  Int2Str (astring, length);
 8001dc0:	a805      	add	r0, sp, #20
 8001dc2:	f7ff fa8d 	bl	80012e0 <Int2Str>
  i = i + PACKET_DATA_INDEX + 1;
 8001dc6:	1d63      	adds	r3, r4, #5
  while (astring[j] != '\0')
 8001dc8:	1b1a      	subs	r2, r3, r4
 8001dca:	a905      	add	r1, sp, #20
 8001dcc:	440a      	add	r2, r1
 8001dce:	f812 2c05 	ldrb.w	r2, [r2, #-5]
 8001dd2:	2a00      	cmp	r2, #0
 8001dd4:	d148      	bne.n	8001e68 <Ymodem_Transmit+0xd0>
  for (j = i; j < PACKET_SIZE + PACKET_DATA_INDEX; j++)
 8001dd6:	2b83      	cmp	r3, #131	; 0x83
 8001dd8:	d949      	bls.n	8001e6e <Ymodem_Transmit+0xd6>
  uint32_t errors = 0, ack_recpt = 0, size = 0, pkt_size;
 8001dda:	f04f 0800 	mov.w	r8, #0
  PrepareIntialPacket(aPacketData, p_file_name, file_size);

  while (( !ack_recpt ) && ( result == COM_OK ))
  {
    /* Send Packet */
    HAL_UART_Transmit(&UartHandle, &aPacketData[PACKET_START_INDEX], PACKET_SIZE + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 8001dde:	f8df a280 	ldr.w	sl, [pc, #640]	; 8002060 <Ymodem_Transmit+0x2c8>
 8001de2:	f8df 9280 	ldr.w	r9, [pc, #640]	; 8002064 <Ymodem_Transmit+0x2cc>
 8001de6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001dea:	2283      	movs	r2, #131	; 0x83
 8001dec:	4649      	mov	r1, r9
 8001dee:	489c      	ldr	r0, [pc, #624]	; (8002060 <Ymodem_Transmit+0x2c8>)
 8001df0:	f7ff f9ba 	bl	8001168 <HAL_UART_Transmit>

    /* Send CRC or Check Sum based on CRC16_F */
#ifdef CRC16_F    
    temp_crc = Cal_CRC16(&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
 8001df4:	2180      	movs	r1, #128	; 0x80
 8001df6:	4899      	ldr	r0, [pc, #612]	; (800205c <Ymodem_Transmit+0x2c4>)
 8001df8:	f7ff fea2 	bl	8001b40 <Cal_CRC16>
 8001dfc:	4604      	mov	r4, r0
    Serial_PutByte(temp_crc >> 8);
 8001dfe:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001e02:	f7ff faed 	bl	80013e0 <Serial_PutByte>
    Serial_PutByte(temp_crc & 0xFF);
 8001e06:	b2e0      	uxtb	r0, r4
 8001e08:	f7ff faea 	bl	80013e0 <Serial_PutByte>
    temp_chksum = CalcChecksum (&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
    Serial_PutByte(temp_chksum);
#endif /* CRC16_F */

    /* Wait for Ack and 'C' */
    if (HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK)
 8001e0c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e10:	2201      	movs	r2, #1
 8001e12:	a905      	add	r1, sp, #20
 8001e14:	4892      	ldr	r0, [pc, #584]	; (8002060 <Ymodem_Transmit+0x2c8>)
 8001e16:	f7ff fa03 	bl	8001220 <HAL_UART_Receive>
 8001e1a:	4604      	mov	r4, r0
 8001e1c:	bb50      	cbnz	r0, 8001e74 <Ymodem_Transmit+0xdc>
    {
      if (a_rx_ctrl[0] == ACK)
 8001e1e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001e22:	2b06      	cmp	r3, #6
 8001e24:	f000 810d 	beq.w	8002042 <Ymodem_Transmit+0x2aa>
      {
        ack_recpt = 1;
      }
      else if (a_rx_ctrl[0] == CA)
 8001e28:	2b18      	cmp	r3, #24
 8001e2a:	d113      	bne.n	8001e54 <Ymodem_Transmit+0xbc>
      {
        if ((HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (a_rx_ctrl[0] == CA))
 8001e2c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e30:	2201      	movs	r2, #1
 8001e32:	a905      	add	r1, sp, #20
 8001e34:	4650      	mov	r0, sl
 8001e36:	f7ff f9f3 	bl	8001220 <HAL_UART_Receive>
 8001e3a:	b958      	cbnz	r0, 8001e54 <Ymodem_Transmit+0xbc>
 8001e3c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001e40:	2b18      	cmp	r3, #24
 8001e42:	f040 8104 	bne.w	800204e <Ymodem_Transmit+0x2b6>
        {
          HAL_Delay( 2 );
          __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
          result = COM_ABORT;
 8001e46:	2402      	movs	r4, #2
          HAL_Delay( 2 );
 8001e48:	2002      	movs	r0, #2
 8001e4a:	f7fe f9d3 	bl	80001f4 <HAL_Delay>
          __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 8001e4e:	f8da 3000 	ldr.w	r3, [sl]
 8001e52:	685b      	ldr	r3, [r3, #4]
    }
    else
    {
      errors++;
    }
    if (errors >= MAX_ERRORS)
 8001e54:	f1b8 0f04 	cmp.w	r8, #4
 8001e58:	d810      	bhi.n	8001e7c <Ymodem_Transmit+0xe4>
  while (( !ack_recpt ) && ( result == COM_OK ))
 8001e5a:	2c00      	cmp	r4, #0
 8001e5c:	d0c3      	beq.n	8001de6 <Ymodem_Transmit+0x4e>
 8001e5e:	e00e      	b.n	8001e7e <Ymodem_Transmit+0xe6>
    p_data[i + PACKET_DATA_INDEX] = p_file_name[i];
 8001e60:	192a      	adds	r2, r5, r4
 8001e62:	7113      	strb	r3, [r2, #4]
  for (i = 0; (p_file_name[i] != '\0') && (i < FILE_NAME_LENGTH); i++)
 8001e64:	3401      	adds	r4, #1
 8001e66:	e7a3      	b.n	8001db0 <Ymodem_Transmit+0x18>
    p_data[i++] = astring[j++];
 8001e68:	54ea      	strb	r2, [r5, r3]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	e7ac      	b.n	8001dc8 <Ymodem_Transmit+0x30>
    p_data[j] = 0;
 8001e6e:	54ea      	strb	r2, [r5, r3]
  for (j = i; j < PACKET_SIZE + PACKET_DATA_INDEX; j++)
 8001e70:	3301      	adds	r3, #1
 8001e72:	e7b0      	b.n	8001dd6 <Ymodem_Transmit+0x3e>
      errors++;
 8001e74:	f108 0801 	add.w	r8, r8, #1
 8001e78:	2400      	movs	r4, #0
 8001e7a:	e7eb      	b.n	8001e54 <Ymodem_Transmit+0xbc>
    {
      result = COM_ERROR;
 8001e7c:	2401      	movs	r4, #1
      {
        pkt_size = PACKET_1K_SIZE;
      }
      else
      {
        pkt_size = PACKET_SIZE;
 8001e7e:	f04f 0b01 	mov.w	fp, #1
 8001e82:	e06c      	b.n	8001f5e <Ymodem_Transmit+0x1c6>
    p_packet[i] = *p_record++;
 8001e84:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001e88:	54a8      	strb	r0, [r5, r2]
  for (i = PACKET_DATA_INDEX; i < size + PACKET_DATA_INDEX;i++)
 8001e8a:	3201      	adds	r2, #1
 8001e8c:	e025      	b.n	8001eda <Ymodem_Transmit+0x142>
      p_packet[i] = 0x1A; /* EOF (0x1A) or 0x00 */
 8001e8e:	542a      	strb	r2, [r5, r0]
    for (i = size + PACKET_DATA_INDEX; i < packet_size + PACKET_DATA_INDEX; i++)
 8001e90:	3001      	adds	r0, #1
 8001e92:	e02a      	b.n	8001eea <Ymodem_Transmit+0x152>
          }
        }
        else
        {
          p_buf_int += pkt_size;
          size = 0;
 8001e94:	4606      	mov	r6, r0
 8001e96:	e062      	b.n	8001f5e <Ymodem_Transmit+0x1c6>
        }
      }
      else
      {
        errors++;
 8001e98:	f108 0801 	add.w	r8, r8, #1
      }

      /* Resend packet if NAK  for a count of 10 else end of communication */
      if (errors >= MAX_ERRORS)
 8001e9c:	f1b8 0f05 	cmp.w	r8, #5
 8001ea0:	d129      	bne.n	8001ef6 <Ymodem_Transmit+0x15e>
 8001ea2:	2401      	movs	r4, #1
 8001ea4:	e060      	b.n	8001f68 <Ymodem_Transmit+0x1d0>
  while ((size) && (result == COM_OK ))
 8001ea6:	2c00      	cmp	r4, #0
 8001ea8:	d160      	bne.n	8001f6c <Ymodem_Transmit+0x1d4>
  packet_size = size_blk >= PACKET_1K_SIZE ? PACKET_1K_SIZE : PACKET_SIZE;
 8001eaa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8001eae:	bf2c      	ite	cs
 8001eb0:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 8001eb4:	2380      	movcc	r3, #128	; 0x80
  size = size_blk < packet_size ? size_blk : packet_size;
 8001eb6:	429e      	cmp	r6, r3
 8001eb8:	46b6      	mov	lr, r6
 8001eba:	bf28      	it	cs
 8001ebc:	469e      	movcs	lr, r3
  if (packet_size == PACKET_1K_SIZE)
 8001ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    p_packet[PACKET_START_INDEX] = STX;
 8001ec2:	bf0c      	ite	eq
 8001ec4:	2202      	moveq	r2, #2
    p_packet[PACKET_START_INDEX] = SOH;
 8001ec6:	2201      	movne	r2, #1
 8001ec8:	706a      	strb	r2, [r5, #1]
  p_packet[PACKET_NUMBER_INDEX] = pkt_nr;
 8001eca:	f89d 2004 	ldrb.w	r2, [sp, #4]
  p_record = p_source;
 8001ece:	4639      	mov	r1, r7
  p_packet[PACKET_NUMBER_INDEX] = pkt_nr;
 8001ed0:	70aa      	strb	r2, [r5, #2]
  p_packet[PACKET_CNUMBER_INDEX] = (~pkt_nr);
 8001ed2:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001ed6:	70ea      	strb	r2, [r5, #3]
  for (i = PACKET_DATA_INDEX; i < size + PACKET_DATA_INDEX;i++)
 8001ed8:	2204      	movs	r2, #4
 8001eda:	f10e 0004 	add.w	r0, lr, #4
 8001ede:	4282      	cmp	r2, r0
 8001ee0:	d3d0      	bcc.n	8001e84 <Ymodem_Transmit+0xec>
  if ( size  <= packet_size)
 8001ee2:	4573      	cmp	r3, lr
 8001ee4:	d303      	bcc.n	8001eee <Ymodem_Transmit+0x156>
      p_packet[i] = 0x1A; /* EOF (0x1A) or 0x00 */
 8001ee6:	221a      	movs	r2, #26
    for (i = size + PACKET_DATA_INDEX; i < packet_size + PACKET_DATA_INDEX; i++)
 8001ee8:	3304      	adds	r3, #4
 8001eea:	4298      	cmp	r0, r3
 8001eec:	d3cf      	bcc.n	8001e8e <Ymodem_Transmit+0xf6>
    a_rx_ctrl[0] = 0;
 8001eee:	f04f 0800 	mov.w	r8, #0
 8001ef2:	f88d 8014 	strb.w	r8, [sp, #20]
        pkt_size = PACKET_SIZE;
 8001ef6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8001efa:	bf2c      	ite	cs
 8001efc:	f44f 6980 	movcs.w	r9, #1024	; 0x400
 8001f00:	f04f 0980 	movcc.w	r9, #128	; 0x80
      HAL_UART_Transmit(&UartHandle, &aPacketData[PACKET_START_INDEX], pkt_size + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 8001f04:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f08:	f109 0203 	add.w	r2, r9, #3
 8001f0c:	4955      	ldr	r1, [pc, #340]	; (8002064 <Ymodem_Transmit+0x2cc>)
 8001f0e:	4854      	ldr	r0, [pc, #336]	; (8002060 <Ymodem_Transmit+0x2c8>)
 8001f10:	f7ff f92a 	bl	8001168 <HAL_UART_Transmit>
      temp_crc = Cal_CRC16(&aPacketData[PACKET_DATA_INDEX], pkt_size);
 8001f14:	4649      	mov	r1, r9
 8001f16:	4851      	ldr	r0, [pc, #324]	; (800205c <Ymodem_Transmit+0x2c4>)
 8001f18:	f7ff fe12 	bl	8001b40 <Cal_CRC16>
 8001f1c:	4603      	mov	r3, r0
      Serial_PutByte(temp_crc >> 8);
 8001f1e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001f22:	9303      	str	r3, [sp, #12]
 8001f24:	f7ff fa5c 	bl	80013e0 <Serial_PutByte>
      Serial_PutByte(temp_crc & 0xFF);
 8001f28:	9b03      	ldr	r3, [sp, #12]
 8001f2a:	b2d8      	uxtb	r0, r3
 8001f2c:	f7ff fa58 	bl	80013e0 <Serial_PutByte>
      if ((HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (a_rx_ctrl[0] == ACK))
 8001f30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f34:	2201      	movs	r2, #1
 8001f36:	a905      	add	r1, sp, #20
 8001f38:	4849      	ldr	r0, [pc, #292]	; (8002060 <Ymodem_Transmit+0x2c8>)
 8001f3a:	f7ff f971 	bl	8001220 <HAL_UART_Receive>
 8001f3e:	2800      	cmp	r0, #0
 8001f40:	d1aa      	bne.n	8001e98 <Ymodem_Transmit+0x100>
 8001f42:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001f46:	2b06      	cmp	r3, #6
 8001f48:	d1a6      	bne.n	8001e98 <Ymodem_Transmit+0x100>
        if (size > pkt_size)
 8001f4a:	45b1      	cmp	r9, r6
 8001f4c:	444f      	add	r7, r9
 8001f4e:	d2a1      	bcs.n	8001e94 <Ymodem_Transmit+0xfc>
          if (blk_number == (USER_FLASH_SIZE / PACKET_1K_SIZE))
 8001f50:	f1bb 0f0c 	cmp.w	fp, #12
          size -= pkt_size;
 8001f54:	eba6 0609 	sub.w	r6, r6, r9
          if (blk_number == (USER_FLASH_SIZE / PACKET_1K_SIZE))
 8001f58:	d07b      	beq.n	8002052 <Ymodem_Transmit+0x2ba>
            blk_number++;
 8001f5a:	f10b 0b01 	add.w	fp, fp, #1
    PreparePacket(p_buf_int, aPacketData, blk_number, size);
 8001f5e:	fa5f f38b 	uxtb.w	r3, fp
 8001f62:	9301      	str	r3, [sp, #4]
  p_packet[PACKET_CNUMBER_INDEX] = (~pkt_nr);
 8001f64:	43db      	mvns	r3, r3
 8001f66:	9302      	str	r3, [sp, #8]
  while ((size) && (result == COM_OK ))
 8001f68:	2e00      	cmp	r6, #0
 8001f6a:	d19c      	bne.n	8001ea6 <Ymodem_Transmit+0x10e>
    }
  }

  /* Sending End Of Transmission char */
  ack_recpt = 0;
  a_rx_ctrl[0] = 0x00;
 8001f6c:	2600      	movs	r6, #0
  while (( !ack_recpt ) && ( result == COM_OK ))
  {
    Serial_PutByte(EOT);

    /* Wait for Ack */
    if (HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK)
 8001f6e:	4f3c      	ldr	r7, [pc, #240]	; (8002060 <Ymodem_Transmit+0x2c8>)
  a_rx_ctrl[0] = 0x00;
 8001f70:	f88d 6014 	strb.w	r6, [sp, #20]
  while (( !ack_recpt ) && ( result == COM_OK ))
 8001f74:	bb74      	cbnz	r4, 8001fd4 <Ymodem_Transmit+0x23c>
    Serial_PutByte(EOT);
 8001f76:	2004      	movs	r0, #4
 8001f78:	f7ff fa32 	bl	80013e0 <Serial_PutByte>
    if (HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK)
 8001f7c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f80:	2201      	movs	r2, #1
 8001f82:	a905      	add	r1, sp, #20
 8001f84:	4638      	mov	r0, r7
 8001f86:	f7ff f94b 	bl	8001220 <HAL_UART_Receive>
 8001f8a:	b9e0      	cbnz	r0, 8001fc6 <Ymodem_Transmit+0x22e>
    {
      if (a_rx_ctrl[0] == ACK)
 8001f8c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001f90:	2b06      	cmp	r3, #6
 8001f92:	d01a      	beq.n	8001fca <Ymodem_Transmit+0x232>
      {
        ack_recpt = 1;
      }
      else if (a_rx_ctrl[0] == CA)
 8001f94:	2b18      	cmp	r3, #24
 8001f96:	d112      	bne.n	8001fbe <Ymodem_Transmit+0x226>
      {
        if ((HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (a_rx_ctrl[0] == CA))
 8001f98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	a905      	add	r1, sp, #20
 8001fa0:	4638      	mov	r0, r7
 8001fa2:	f7ff f93d 	bl	8001220 <HAL_UART_Receive>
 8001fa6:	b950      	cbnz	r0, 8001fbe <Ymodem_Transmit+0x226>
 8001fa8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001fac:	2b18      	cmp	r3, #24
 8001fae:	d106      	bne.n	8001fbe <Ymodem_Transmit+0x226>
        {
          HAL_Delay( 2 );
          __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
          result = COM_ABORT;
 8001fb0:	2402      	movs	r4, #2
          HAL_Delay( 2 );
 8001fb2:	2002      	movs	r0, #2
 8001fb4:	f7fe f91e 	bl	80001f4 <HAL_Delay>
          __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 8001fb8:	f8da 3000 	ldr.w	r3, [sl]
 8001fbc:	685b      	ldr	r3, [r3, #4]
      errors++;
    }

    if (errors >=  MAX_ERRORS)
    {
      result = COM_ERROR;
 8001fbe:	2e05      	cmp	r6, #5
 8001fc0:	bf28      	it	cs
 8001fc2:	2401      	movcs	r4, #1
 8001fc4:	e7d6      	b.n	8001f74 <Ymodem_Transmit+0x1dc>
      errors++;
 8001fc6:	3601      	adds	r6, #1
 8001fc8:	e7f9      	b.n	8001fbe <Ymodem_Transmit+0x226>
    }
  }

  /* Empty packet sent - some terminal emulators need this to close session */
  if ( result == COM_OK )
 8001fca:	2e04      	cmp	r6, #4
 8001fcc:	f04f 0301 	mov.w	r3, #1
 8001fd0:	d904      	bls.n	8001fdc <Ymodem_Transmit+0x244>
 8001fd2:	461c      	mov	r4, r3
      }
    }
  }

  return result; /* file transmitted successfully */
}
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	b009      	add	sp, #36	; 0x24
 8001fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aPacketData[PACKET_START_INDEX] = SOH;
 8001fdc:	706b      	strb	r3, [r5, #1]
    aPacketData[PACKET_CNUMBER_INDEX] = 0xFF;
 8001fde:	23ff      	movs	r3, #255	; 0xff
 8001fe0:	4626      	mov	r6, r4
      aPacketData [i] = 0x00;
 8001fe2:	4622      	mov	r2, r4
    aPacketData[PACKET_NUMBER_INDEX] = 0;
 8001fe4:	70ac      	strb	r4, [r5, #2]
    aPacketData[PACKET_CNUMBER_INDEX] = 0xFF;
 8001fe6:	70eb      	strb	r3, [r5, #3]
      aPacketData [i] = 0x00;
 8001fe8:	19ab      	adds	r3, r5, r6
 8001fea:	3601      	adds	r6, #1
    for (i = PACKET_DATA_INDEX; i < (PACKET_SIZE + PACKET_DATA_INDEX); i++)
 8001fec:	2e80      	cmp	r6, #128	; 0x80
      aPacketData [i] = 0x00;
 8001fee:	711a      	strb	r2, [r3, #4]
    for (i = PACKET_DATA_INDEX; i < (PACKET_SIZE + PACKET_DATA_INDEX); i++)
 8001ff0:	d1fa      	bne.n	8001fe8 <Ymodem_Transmit+0x250>
    HAL_UART_Transmit(&UartHandle, &aPacketData[PACKET_START_INDEX], PACKET_SIZE + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 8001ff2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ff6:	2283      	movs	r2, #131	; 0x83
 8001ff8:	491a      	ldr	r1, [pc, #104]	; (8002064 <Ymodem_Transmit+0x2cc>)
 8001ffa:	4819      	ldr	r0, [pc, #100]	; (8002060 <Ymodem_Transmit+0x2c8>)
 8001ffc:	f7ff f8b4 	bl	8001168 <HAL_UART_Transmit>
    temp_crc = Cal_CRC16(&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
 8002000:	4631      	mov	r1, r6
 8002002:	4816      	ldr	r0, [pc, #88]	; (800205c <Ymodem_Transmit+0x2c4>)
 8002004:	f7ff fd9c 	bl	8001b40 <Cal_CRC16>
 8002008:	4605      	mov	r5, r0
    Serial_PutByte(temp_crc >> 8);
 800200a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800200e:	f7ff f9e7 	bl	80013e0 <Serial_PutByte>
    Serial_PutByte(temp_crc & 0xFF);
 8002012:	b2e8      	uxtb	r0, r5
 8002014:	f7ff f9e4 	bl	80013e0 <Serial_PutByte>
    if (HAL_UART_Receive(&UartHandle, &a_rx_ctrl[0], 1, NAK_TIMEOUT) == HAL_OK)
 8002018:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800201c:	2201      	movs	r2, #1
 800201e:	a905      	add	r1, sp, #20
 8002020:	480f      	ldr	r0, [pc, #60]	; (8002060 <Ymodem_Transmit+0x2c8>)
 8002022:	f7ff f8fd 	bl	8001220 <HAL_UART_Receive>
 8002026:	2800      	cmp	r0, #0
 8002028:	d1d4      	bne.n	8001fd4 <Ymodem_Transmit+0x23c>
      if (a_rx_ctrl[0] == CA)
 800202a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800202e:	2b18      	cmp	r3, #24
 8002030:	d1d0      	bne.n	8001fd4 <Ymodem_Transmit+0x23c>
          HAL_Delay( 2 );
 8002032:	2002      	movs	r0, #2
 8002034:	f7fe f8de 	bl	80001f4 <HAL_Delay>
          __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 8002038:	f8da 3000 	ldr.w	r3, [sl]
          result = COM_ABORT;
 800203c:	2402      	movs	r4, #2
          __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 800203e:	685b      	ldr	r3, [r3, #4]
  return result; /* file transmitted successfully */
 8002040:	e7c8      	b.n	8001fd4 <Ymodem_Transmit+0x23c>
 8002042:	f1b8 0f04 	cmp.w	r8, #4
 8002046:	bf94      	ite	ls
 8002048:	2400      	movls	r4, #0
 800204a:	2401      	movhi	r4, #1
 800204c:	e717      	b.n	8001e7e <Ymodem_Transmit+0xe6>
 800204e:	4604      	mov	r4, r0
 8002050:	e700      	b.n	8001e54 <Ymodem_Transmit+0xbc>
            result = COM_LIMIT; /* boundary error */
 8002052:	2405      	movs	r4, #5
 8002054:	e783      	b.n	8001f5e <Ymodem_Transmit+0x1c6>
 8002056:	bf00      	nop
 8002058:	20000188 	.word	0x20000188
 800205c:	2000018c 	.word	0x2000018c
 8002060:	200000c0 	.word	0x200000c0
 8002064:	20000189 	.word	0x20000189

08002068 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002068:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800206a:	e003      	b.n	8002074 <LoopCopyDataInit>

0800206c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800206e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002070:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002072:	3104      	adds	r1, #4

08002074 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002074:	480a      	ldr	r0, [pc, #40]	; (80020a0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002076:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002078:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800207a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800207c:	d3f6      	bcc.n	800206c <CopyDataInit>
  ldr r2, =_sbss
 800207e:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002080:	e002      	b.n	8002088 <LoopFillZerobss>

08002082 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002082:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002084:	f842 3b04 	str.w	r3, [r2], #4

08002088 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002088:	4b08      	ldr	r3, [pc, #32]	; (80020ac <LoopFillZerobss+0x24>)
  cmp r2, r3
 800208a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800208c:	d3f9      	bcc.n	8002082 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800208e:	f7ff fd21 	bl	8001ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002092:	f000 f815 	bl	80020c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002096:	f7ff fa75 	bl	8001584 <main>
  bx lr
 800209a:	4770      	bx	lr
  ldr r3, =_sidata
 800209c:	080030a8 	.word	0x080030a8
  ldr r0, =_sdata
 80020a0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80020a4:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80020a8:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80020ac:	20000594 	.word	0x20000594

080020b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020b0:	e7fe      	b.n	80020b0 <ADC1_2_IRQHandler>
	...

080020b4 <__errno>:
 80020b4:	4b01      	ldr	r3, [pc, #4]	; (80020bc <__errno+0x8>)
 80020b6:	6818      	ldr	r0, [r3, #0]
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	2000000c 	.word	0x2000000c

080020c0 <__libc_init_array>:
 80020c0:	b570      	push	{r4, r5, r6, lr}
 80020c2:	2500      	movs	r5, #0
 80020c4:	4e0c      	ldr	r6, [pc, #48]	; (80020f8 <__libc_init_array+0x38>)
 80020c6:	4c0d      	ldr	r4, [pc, #52]	; (80020fc <__libc_init_array+0x3c>)
 80020c8:	1ba4      	subs	r4, r4, r6
 80020ca:	10a4      	asrs	r4, r4, #2
 80020cc:	42a5      	cmp	r5, r4
 80020ce:	d109      	bne.n	80020e4 <__libc_init_array+0x24>
 80020d0:	f000 fc8e 	bl	80029f0 <_init>
 80020d4:	2500      	movs	r5, #0
 80020d6:	4e0a      	ldr	r6, [pc, #40]	; (8002100 <__libc_init_array+0x40>)
 80020d8:	4c0a      	ldr	r4, [pc, #40]	; (8002104 <__libc_init_array+0x44>)
 80020da:	1ba4      	subs	r4, r4, r6
 80020dc:	10a4      	asrs	r4, r4, #2
 80020de:	42a5      	cmp	r5, r4
 80020e0:	d105      	bne.n	80020ee <__libc_init_array+0x2e>
 80020e2:	bd70      	pop	{r4, r5, r6, pc}
 80020e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020e8:	4798      	blx	r3
 80020ea:	3501      	adds	r5, #1
 80020ec:	e7ee      	b.n	80020cc <__libc_init_array+0xc>
 80020ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020f2:	4798      	blx	r3
 80020f4:	3501      	adds	r5, #1
 80020f6:	e7f2      	b.n	80020de <__libc_init_array+0x1e>
 80020f8:	080030a0 	.word	0x080030a0
 80020fc:	080030a0 	.word	0x080030a0
 8002100:	080030a0 	.word	0x080030a0
 8002104:	080030a4 	.word	0x080030a4

08002108 <memset>:
 8002108:	4603      	mov	r3, r0
 800210a:	4402      	add	r2, r0
 800210c:	4293      	cmp	r3, r2
 800210e:	d100      	bne.n	8002112 <memset+0xa>
 8002110:	4770      	bx	lr
 8002112:	f803 1b01 	strb.w	r1, [r3], #1
 8002116:	e7f9      	b.n	800210c <memset+0x4>

08002118 <_puts_r>:
 8002118:	b570      	push	{r4, r5, r6, lr}
 800211a:	460e      	mov	r6, r1
 800211c:	4605      	mov	r5, r0
 800211e:	b118      	cbz	r0, 8002128 <_puts_r+0x10>
 8002120:	6983      	ldr	r3, [r0, #24]
 8002122:	b90b      	cbnz	r3, 8002128 <_puts_r+0x10>
 8002124:	f000 fa0e 	bl	8002544 <__sinit>
 8002128:	69ab      	ldr	r3, [r5, #24]
 800212a:	68ac      	ldr	r4, [r5, #8]
 800212c:	b913      	cbnz	r3, 8002134 <_puts_r+0x1c>
 800212e:	4628      	mov	r0, r5
 8002130:	f000 fa08 	bl	8002544 <__sinit>
 8002134:	4b23      	ldr	r3, [pc, #140]	; (80021c4 <_puts_r+0xac>)
 8002136:	429c      	cmp	r4, r3
 8002138:	d117      	bne.n	800216a <_puts_r+0x52>
 800213a:	686c      	ldr	r4, [r5, #4]
 800213c:	89a3      	ldrh	r3, [r4, #12]
 800213e:	071b      	lsls	r3, r3, #28
 8002140:	d51d      	bpl.n	800217e <_puts_r+0x66>
 8002142:	6923      	ldr	r3, [r4, #16]
 8002144:	b1db      	cbz	r3, 800217e <_puts_r+0x66>
 8002146:	3e01      	subs	r6, #1
 8002148:	68a3      	ldr	r3, [r4, #8]
 800214a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800214e:	3b01      	subs	r3, #1
 8002150:	60a3      	str	r3, [r4, #8]
 8002152:	b9e9      	cbnz	r1, 8002190 <_puts_r+0x78>
 8002154:	2b00      	cmp	r3, #0
 8002156:	da2e      	bge.n	80021b6 <_puts_r+0x9e>
 8002158:	4622      	mov	r2, r4
 800215a:	210a      	movs	r1, #10
 800215c:	4628      	mov	r0, r5
 800215e:	f000 f83f 	bl	80021e0 <__swbuf_r>
 8002162:	3001      	adds	r0, #1
 8002164:	d011      	beq.n	800218a <_puts_r+0x72>
 8002166:	200a      	movs	r0, #10
 8002168:	bd70      	pop	{r4, r5, r6, pc}
 800216a:	4b17      	ldr	r3, [pc, #92]	; (80021c8 <_puts_r+0xb0>)
 800216c:	429c      	cmp	r4, r3
 800216e:	d101      	bne.n	8002174 <_puts_r+0x5c>
 8002170:	68ac      	ldr	r4, [r5, #8]
 8002172:	e7e3      	b.n	800213c <_puts_r+0x24>
 8002174:	4b15      	ldr	r3, [pc, #84]	; (80021cc <_puts_r+0xb4>)
 8002176:	429c      	cmp	r4, r3
 8002178:	bf08      	it	eq
 800217a:	68ec      	ldreq	r4, [r5, #12]
 800217c:	e7de      	b.n	800213c <_puts_r+0x24>
 800217e:	4621      	mov	r1, r4
 8002180:	4628      	mov	r0, r5
 8002182:	f000 f87f 	bl	8002284 <__swsetup_r>
 8002186:	2800      	cmp	r0, #0
 8002188:	d0dd      	beq.n	8002146 <_puts_r+0x2e>
 800218a:	f04f 30ff 	mov.w	r0, #4294967295
 800218e:	bd70      	pop	{r4, r5, r6, pc}
 8002190:	2b00      	cmp	r3, #0
 8002192:	da04      	bge.n	800219e <_puts_r+0x86>
 8002194:	69a2      	ldr	r2, [r4, #24]
 8002196:	4293      	cmp	r3, r2
 8002198:	db06      	blt.n	80021a8 <_puts_r+0x90>
 800219a:	290a      	cmp	r1, #10
 800219c:	d004      	beq.n	80021a8 <_puts_r+0x90>
 800219e:	6823      	ldr	r3, [r4, #0]
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	6022      	str	r2, [r4, #0]
 80021a4:	7019      	strb	r1, [r3, #0]
 80021a6:	e7cf      	b.n	8002148 <_puts_r+0x30>
 80021a8:	4622      	mov	r2, r4
 80021aa:	4628      	mov	r0, r5
 80021ac:	f000 f818 	bl	80021e0 <__swbuf_r>
 80021b0:	3001      	adds	r0, #1
 80021b2:	d1c9      	bne.n	8002148 <_puts_r+0x30>
 80021b4:	e7e9      	b.n	800218a <_puts_r+0x72>
 80021b6:	200a      	movs	r0, #10
 80021b8:	6823      	ldr	r3, [r4, #0]
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	6022      	str	r2, [r4, #0]
 80021be:	7018      	strb	r0, [r3, #0]
 80021c0:	bd70      	pop	{r4, r5, r6, pc}
 80021c2:	bf00      	nop
 80021c4:	08003060 	.word	0x08003060
 80021c8:	08003080 	.word	0x08003080
 80021cc:	08003040 	.word	0x08003040

080021d0 <puts>:
 80021d0:	4b02      	ldr	r3, [pc, #8]	; (80021dc <puts+0xc>)
 80021d2:	4601      	mov	r1, r0
 80021d4:	6818      	ldr	r0, [r3, #0]
 80021d6:	f7ff bf9f 	b.w	8002118 <_puts_r>
 80021da:	bf00      	nop
 80021dc:	2000000c 	.word	0x2000000c

080021e0 <__swbuf_r>:
 80021e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021e2:	460e      	mov	r6, r1
 80021e4:	4614      	mov	r4, r2
 80021e6:	4605      	mov	r5, r0
 80021e8:	b118      	cbz	r0, 80021f2 <__swbuf_r+0x12>
 80021ea:	6983      	ldr	r3, [r0, #24]
 80021ec:	b90b      	cbnz	r3, 80021f2 <__swbuf_r+0x12>
 80021ee:	f000 f9a9 	bl	8002544 <__sinit>
 80021f2:	4b21      	ldr	r3, [pc, #132]	; (8002278 <__swbuf_r+0x98>)
 80021f4:	429c      	cmp	r4, r3
 80021f6:	d12a      	bne.n	800224e <__swbuf_r+0x6e>
 80021f8:	686c      	ldr	r4, [r5, #4]
 80021fa:	69a3      	ldr	r3, [r4, #24]
 80021fc:	60a3      	str	r3, [r4, #8]
 80021fe:	89a3      	ldrh	r3, [r4, #12]
 8002200:	071a      	lsls	r2, r3, #28
 8002202:	d52e      	bpl.n	8002262 <__swbuf_r+0x82>
 8002204:	6923      	ldr	r3, [r4, #16]
 8002206:	b363      	cbz	r3, 8002262 <__swbuf_r+0x82>
 8002208:	6923      	ldr	r3, [r4, #16]
 800220a:	6820      	ldr	r0, [r4, #0]
 800220c:	b2f6      	uxtb	r6, r6
 800220e:	1ac0      	subs	r0, r0, r3
 8002210:	6963      	ldr	r3, [r4, #20]
 8002212:	4637      	mov	r7, r6
 8002214:	4298      	cmp	r0, r3
 8002216:	db04      	blt.n	8002222 <__swbuf_r+0x42>
 8002218:	4621      	mov	r1, r4
 800221a:	4628      	mov	r0, r5
 800221c:	f000 f928 	bl	8002470 <_fflush_r>
 8002220:	bb28      	cbnz	r0, 800226e <__swbuf_r+0x8e>
 8002222:	68a3      	ldr	r3, [r4, #8]
 8002224:	3001      	adds	r0, #1
 8002226:	3b01      	subs	r3, #1
 8002228:	60a3      	str	r3, [r4, #8]
 800222a:	6823      	ldr	r3, [r4, #0]
 800222c:	1c5a      	adds	r2, r3, #1
 800222e:	6022      	str	r2, [r4, #0]
 8002230:	701e      	strb	r6, [r3, #0]
 8002232:	6963      	ldr	r3, [r4, #20]
 8002234:	4298      	cmp	r0, r3
 8002236:	d004      	beq.n	8002242 <__swbuf_r+0x62>
 8002238:	89a3      	ldrh	r3, [r4, #12]
 800223a:	07db      	lsls	r3, r3, #31
 800223c:	d519      	bpl.n	8002272 <__swbuf_r+0x92>
 800223e:	2e0a      	cmp	r6, #10
 8002240:	d117      	bne.n	8002272 <__swbuf_r+0x92>
 8002242:	4621      	mov	r1, r4
 8002244:	4628      	mov	r0, r5
 8002246:	f000 f913 	bl	8002470 <_fflush_r>
 800224a:	b190      	cbz	r0, 8002272 <__swbuf_r+0x92>
 800224c:	e00f      	b.n	800226e <__swbuf_r+0x8e>
 800224e:	4b0b      	ldr	r3, [pc, #44]	; (800227c <__swbuf_r+0x9c>)
 8002250:	429c      	cmp	r4, r3
 8002252:	d101      	bne.n	8002258 <__swbuf_r+0x78>
 8002254:	68ac      	ldr	r4, [r5, #8]
 8002256:	e7d0      	b.n	80021fa <__swbuf_r+0x1a>
 8002258:	4b09      	ldr	r3, [pc, #36]	; (8002280 <__swbuf_r+0xa0>)
 800225a:	429c      	cmp	r4, r3
 800225c:	bf08      	it	eq
 800225e:	68ec      	ldreq	r4, [r5, #12]
 8002260:	e7cb      	b.n	80021fa <__swbuf_r+0x1a>
 8002262:	4621      	mov	r1, r4
 8002264:	4628      	mov	r0, r5
 8002266:	f000 f80d 	bl	8002284 <__swsetup_r>
 800226a:	2800      	cmp	r0, #0
 800226c:	d0cc      	beq.n	8002208 <__swbuf_r+0x28>
 800226e:	f04f 37ff 	mov.w	r7, #4294967295
 8002272:	4638      	mov	r0, r7
 8002274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002276:	bf00      	nop
 8002278:	08003060 	.word	0x08003060
 800227c:	08003080 	.word	0x08003080
 8002280:	08003040 	.word	0x08003040

08002284 <__swsetup_r>:
 8002284:	4b32      	ldr	r3, [pc, #200]	; (8002350 <__swsetup_r+0xcc>)
 8002286:	b570      	push	{r4, r5, r6, lr}
 8002288:	681d      	ldr	r5, [r3, #0]
 800228a:	4606      	mov	r6, r0
 800228c:	460c      	mov	r4, r1
 800228e:	b125      	cbz	r5, 800229a <__swsetup_r+0x16>
 8002290:	69ab      	ldr	r3, [r5, #24]
 8002292:	b913      	cbnz	r3, 800229a <__swsetup_r+0x16>
 8002294:	4628      	mov	r0, r5
 8002296:	f000 f955 	bl	8002544 <__sinit>
 800229a:	4b2e      	ldr	r3, [pc, #184]	; (8002354 <__swsetup_r+0xd0>)
 800229c:	429c      	cmp	r4, r3
 800229e:	d10f      	bne.n	80022c0 <__swsetup_r+0x3c>
 80022a0:	686c      	ldr	r4, [r5, #4]
 80022a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	0715      	lsls	r5, r2, #28
 80022aa:	d42c      	bmi.n	8002306 <__swsetup_r+0x82>
 80022ac:	06d0      	lsls	r0, r2, #27
 80022ae:	d411      	bmi.n	80022d4 <__swsetup_r+0x50>
 80022b0:	2209      	movs	r2, #9
 80022b2:	6032      	str	r2, [r6, #0]
 80022b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022b8:	81a3      	strh	r3, [r4, #12]
 80022ba:	f04f 30ff 	mov.w	r0, #4294967295
 80022be:	bd70      	pop	{r4, r5, r6, pc}
 80022c0:	4b25      	ldr	r3, [pc, #148]	; (8002358 <__swsetup_r+0xd4>)
 80022c2:	429c      	cmp	r4, r3
 80022c4:	d101      	bne.n	80022ca <__swsetup_r+0x46>
 80022c6:	68ac      	ldr	r4, [r5, #8]
 80022c8:	e7eb      	b.n	80022a2 <__swsetup_r+0x1e>
 80022ca:	4b24      	ldr	r3, [pc, #144]	; (800235c <__swsetup_r+0xd8>)
 80022cc:	429c      	cmp	r4, r3
 80022ce:	bf08      	it	eq
 80022d0:	68ec      	ldreq	r4, [r5, #12]
 80022d2:	e7e6      	b.n	80022a2 <__swsetup_r+0x1e>
 80022d4:	0751      	lsls	r1, r2, #29
 80022d6:	d512      	bpl.n	80022fe <__swsetup_r+0x7a>
 80022d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80022da:	b141      	cbz	r1, 80022ee <__swsetup_r+0x6a>
 80022dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80022e0:	4299      	cmp	r1, r3
 80022e2:	d002      	beq.n	80022ea <__swsetup_r+0x66>
 80022e4:	4630      	mov	r0, r6
 80022e6:	f000 fa1b 	bl	8002720 <_free_r>
 80022ea:	2300      	movs	r3, #0
 80022ec:	6363      	str	r3, [r4, #52]	; 0x34
 80022ee:	89a3      	ldrh	r3, [r4, #12]
 80022f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80022f4:	81a3      	strh	r3, [r4, #12]
 80022f6:	2300      	movs	r3, #0
 80022f8:	6063      	str	r3, [r4, #4]
 80022fa:	6923      	ldr	r3, [r4, #16]
 80022fc:	6023      	str	r3, [r4, #0]
 80022fe:	89a3      	ldrh	r3, [r4, #12]
 8002300:	f043 0308 	orr.w	r3, r3, #8
 8002304:	81a3      	strh	r3, [r4, #12]
 8002306:	6923      	ldr	r3, [r4, #16]
 8002308:	b94b      	cbnz	r3, 800231e <__swsetup_r+0x9a>
 800230a:	89a3      	ldrh	r3, [r4, #12]
 800230c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002314:	d003      	beq.n	800231e <__swsetup_r+0x9a>
 8002316:	4621      	mov	r1, r4
 8002318:	4630      	mov	r0, r6
 800231a:	f000 f9c1 	bl	80026a0 <__smakebuf_r>
 800231e:	89a2      	ldrh	r2, [r4, #12]
 8002320:	f012 0301 	ands.w	r3, r2, #1
 8002324:	d00c      	beq.n	8002340 <__swsetup_r+0xbc>
 8002326:	2300      	movs	r3, #0
 8002328:	60a3      	str	r3, [r4, #8]
 800232a:	6963      	ldr	r3, [r4, #20]
 800232c:	425b      	negs	r3, r3
 800232e:	61a3      	str	r3, [r4, #24]
 8002330:	6923      	ldr	r3, [r4, #16]
 8002332:	b953      	cbnz	r3, 800234a <__swsetup_r+0xc6>
 8002334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002338:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800233c:	d1ba      	bne.n	80022b4 <__swsetup_r+0x30>
 800233e:	bd70      	pop	{r4, r5, r6, pc}
 8002340:	0792      	lsls	r2, r2, #30
 8002342:	bf58      	it	pl
 8002344:	6963      	ldrpl	r3, [r4, #20]
 8002346:	60a3      	str	r3, [r4, #8]
 8002348:	e7f2      	b.n	8002330 <__swsetup_r+0xac>
 800234a:	2000      	movs	r0, #0
 800234c:	e7f7      	b.n	800233e <__swsetup_r+0xba>
 800234e:	bf00      	nop
 8002350:	2000000c 	.word	0x2000000c
 8002354:	08003060 	.word	0x08003060
 8002358:	08003080 	.word	0x08003080
 800235c:	08003040 	.word	0x08003040

08002360 <__sflush_r>:
 8002360:	898a      	ldrh	r2, [r1, #12]
 8002362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002366:	4605      	mov	r5, r0
 8002368:	0710      	lsls	r0, r2, #28
 800236a:	460c      	mov	r4, r1
 800236c:	d45a      	bmi.n	8002424 <__sflush_r+0xc4>
 800236e:	684b      	ldr	r3, [r1, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	dc05      	bgt.n	8002380 <__sflush_r+0x20>
 8002374:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002376:	2b00      	cmp	r3, #0
 8002378:	dc02      	bgt.n	8002380 <__sflush_r+0x20>
 800237a:	2000      	movs	r0, #0
 800237c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002380:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002382:	2e00      	cmp	r6, #0
 8002384:	d0f9      	beq.n	800237a <__sflush_r+0x1a>
 8002386:	2300      	movs	r3, #0
 8002388:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800238c:	682f      	ldr	r7, [r5, #0]
 800238e:	602b      	str	r3, [r5, #0]
 8002390:	d033      	beq.n	80023fa <__sflush_r+0x9a>
 8002392:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002394:	89a3      	ldrh	r3, [r4, #12]
 8002396:	075a      	lsls	r2, r3, #29
 8002398:	d505      	bpl.n	80023a6 <__sflush_r+0x46>
 800239a:	6863      	ldr	r3, [r4, #4]
 800239c:	1ac0      	subs	r0, r0, r3
 800239e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80023a0:	b10b      	cbz	r3, 80023a6 <__sflush_r+0x46>
 80023a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023a4:	1ac0      	subs	r0, r0, r3
 80023a6:	2300      	movs	r3, #0
 80023a8:	4602      	mov	r2, r0
 80023aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80023ac:	6a21      	ldr	r1, [r4, #32]
 80023ae:	4628      	mov	r0, r5
 80023b0:	47b0      	blx	r6
 80023b2:	1c43      	adds	r3, r0, #1
 80023b4:	89a3      	ldrh	r3, [r4, #12]
 80023b6:	d106      	bne.n	80023c6 <__sflush_r+0x66>
 80023b8:	6829      	ldr	r1, [r5, #0]
 80023ba:	291d      	cmp	r1, #29
 80023bc:	d84b      	bhi.n	8002456 <__sflush_r+0xf6>
 80023be:	4a2b      	ldr	r2, [pc, #172]	; (800246c <__sflush_r+0x10c>)
 80023c0:	40ca      	lsrs	r2, r1
 80023c2:	07d6      	lsls	r6, r2, #31
 80023c4:	d547      	bpl.n	8002456 <__sflush_r+0xf6>
 80023c6:	2200      	movs	r2, #0
 80023c8:	6062      	str	r2, [r4, #4]
 80023ca:	6922      	ldr	r2, [r4, #16]
 80023cc:	04d9      	lsls	r1, r3, #19
 80023ce:	6022      	str	r2, [r4, #0]
 80023d0:	d504      	bpl.n	80023dc <__sflush_r+0x7c>
 80023d2:	1c42      	adds	r2, r0, #1
 80023d4:	d101      	bne.n	80023da <__sflush_r+0x7a>
 80023d6:	682b      	ldr	r3, [r5, #0]
 80023d8:	b903      	cbnz	r3, 80023dc <__sflush_r+0x7c>
 80023da:	6560      	str	r0, [r4, #84]	; 0x54
 80023dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80023de:	602f      	str	r7, [r5, #0]
 80023e0:	2900      	cmp	r1, #0
 80023e2:	d0ca      	beq.n	800237a <__sflush_r+0x1a>
 80023e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80023e8:	4299      	cmp	r1, r3
 80023ea:	d002      	beq.n	80023f2 <__sflush_r+0x92>
 80023ec:	4628      	mov	r0, r5
 80023ee:	f000 f997 	bl	8002720 <_free_r>
 80023f2:	2000      	movs	r0, #0
 80023f4:	6360      	str	r0, [r4, #52]	; 0x34
 80023f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023fa:	6a21      	ldr	r1, [r4, #32]
 80023fc:	2301      	movs	r3, #1
 80023fe:	4628      	mov	r0, r5
 8002400:	47b0      	blx	r6
 8002402:	1c41      	adds	r1, r0, #1
 8002404:	d1c6      	bne.n	8002394 <__sflush_r+0x34>
 8002406:	682b      	ldr	r3, [r5, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0c3      	beq.n	8002394 <__sflush_r+0x34>
 800240c:	2b1d      	cmp	r3, #29
 800240e:	d001      	beq.n	8002414 <__sflush_r+0xb4>
 8002410:	2b16      	cmp	r3, #22
 8002412:	d101      	bne.n	8002418 <__sflush_r+0xb8>
 8002414:	602f      	str	r7, [r5, #0]
 8002416:	e7b0      	b.n	800237a <__sflush_r+0x1a>
 8002418:	89a3      	ldrh	r3, [r4, #12]
 800241a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800241e:	81a3      	strh	r3, [r4, #12]
 8002420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002424:	690f      	ldr	r7, [r1, #16]
 8002426:	2f00      	cmp	r7, #0
 8002428:	d0a7      	beq.n	800237a <__sflush_r+0x1a>
 800242a:	0793      	lsls	r3, r2, #30
 800242c:	bf18      	it	ne
 800242e:	2300      	movne	r3, #0
 8002430:	680e      	ldr	r6, [r1, #0]
 8002432:	bf08      	it	eq
 8002434:	694b      	ldreq	r3, [r1, #20]
 8002436:	eba6 0807 	sub.w	r8, r6, r7
 800243a:	600f      	str	r7, [r1, #0]
 800243c:	608b      	str	r3, [r1, #8]
 800243e:	f1b8 0f00 	cmp.w	r8, #0
 8002442:	dd9a      	ble.n	800237a <__sflush_r+0x1a>
 8002444:	4643      	mov	r3, r8
 8002446:	463a      	mov	r2, r7
 8002448:	6a21      	ldr	r1, [r4, #32]
 800244a:	4628      	mov	r0, r5
 800244c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800244e:	47b0      	blx	r6
 8002450:	2800      	cmp	r0, #0
 8002452:	dc07      	bgt.n	8002464 <__sflush_r+0x104>
 8002454:	89a3      	ldrh	r3, [r4, #12]
 8002456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800245a:	81a3      	strh	r3, [r4, #12]
 800245c:	f04f 30ff 	mov.w	r0, #4294967295
 8002460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002464:	4407      	add	r7, r0
 8002466:	eba8 0800 	sub.w	r8, r8, r0
 800246a:	e7e8      	b.n	800243e <__sflush_r+0xde>
 800246c:	20400001 	.word	0x20400001

08002470 <_fflush_r>:
 8002470:	b538      	push	{r3, r4, r5, lr}
 8002472:	690b      	ldr	r3, [r1, #16]
 8002474:	4605      	mov	r5, r0
 8002476:	460c      	mov	r4, r1
 8002478:	b1db      	cbz	r3, 80024b2 <_fflush_r+0x42>
 800247a:	b118      	cbz	r0, 8002484 <_fflush_r+0x14>
 800247c:	6983      	ldr	r3, [r0, #24]
 800247e:	b90b      	cbnz	r3, 8002484 <_fflush_r+0x14>
 8002480:	f000 f860 	bl	8002544 <__sinit>
 8002484:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <_fflush_r+0x48>)
 8002486:	429c      	cmp	r4, r3
 8002488:	d109      	bne.n	800249e <_fflush_r+0x2e>
 800248a:	686c      	ldr	r4, [r5, #4]
 800248c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002490:	b17b      	cbz	r3, 80024b2 <_fflush_r+0x42>
 8002492:	4621      	mov	r1, r4
 8002494:	4628      	mov	r0, r5
 8002496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800249a:	f7ff bf61 	b.w	8002360 <__sflush_r>
 800249e:	4b07      	ldr	r3, [pc, #28]	; (80024bc <_fflush_r+0x4c>)
 80024a0:	429c      	cmp	r4, r3
 80024a2:	d101      	bne.n	80024a8 <_fflush_r+0x38>
 80024a4:	68ac      	ldr	r4, [r5, #8]
 80024a6:	e7f1      	b.n	800248c <_fflush_r+0x1c>
 80024a8:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <_fflush_r+0x50>)
 80024aa:	429c      	cmp	r4, r3
 80024ac:	bf08      	it	eq
 80024ae:	68ec      	ldreq	r4, [r5, #12]
 80024b0:	e7ec      	b.n	800248c <_fflush_r+0x1c>
 80024b2:	2000      	movs	r0, #0
 80024b4:	bd38      	pop	{r3, r4, r5, pc}
 80024b6:	bf00      	nop
 80024b8:	08003060 	.word	0x08003060
 80024bc:	08003080 	.word	0x08003080
 80024c0:	08003040 	.word	0x08003040

080024c4 <_cleanup_r>:
 80024c4:	4901      	ldr	r1, [pc, #4]	; (80024cc <_cleanup_r+0x8>)
 80024c6:	f000 b8a9 	b.w	800261c <_fwalk_reent>
 80024ca:	bf00      	nop
 80024cc:	08002471 	.word	0x08002471

080024d0 <std.isra.0>:
 80024d0:	2300      	movs	r3, #0
 80024d2:	b510      	push	{r4, lr}
 80024d4:	4604      	mov	r4, r0
 80024d6:	6003      	str	r3, [r0, #0]
 80024d8:	6043      	str	r3, [r0, #4]
 80024da:	6083      	str	r3, [r0, #8]
 80024dc:	8181      	strh	r1, [r0, #12]
 80024de:	6643      	str	r3, [r0, #100]	; 0x64
 80024e0:	81c2      	strh	r2, [r0, #14]
 80024e2:	6103      	str	r3, [r0, #16]
 80024e4:	6143      	str	r3, [r0, #20]
 80024e6:	6183      	str	r3, [r0, #24]
 80024e8:	4619      	mov	r1, r3
 80024ea:	2208      	movs	r2, #8
 80024ec:	305c      	adds	r0, #92	; 0x5c
 80024ee:	f7ff fe0b 	bl	8002108 <memset>
 80024f2:	4b05      	ldr	r3, [pc, #20]	; (8002508 <std.isra.0+0x38>)
 80024f4:	6224      	str	r4, [r4, #32]
 80024f6:	6263      	str	r3, [r4, #36]	; 0x24
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <std.isra.0+0x3c>)
 80024fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80024fc:	4b04      	ldr	r3, [pc, #16]	; (8002510 <std.isra.0+0x40>)
 80024fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002500:	4b04      	ldr	r3, [pc, #16]	; (8002514 <std.isra.0+0x44>)
 8002502:	6323      	str	r3, [r4, #48]	; 0x30
 8002504:	bd10      	pop	{r4, pc}
 8002506:	bf00      	nop
 8002508:	08002895 	.word	0x08002895
 800250c:	080028b7 	.word	0x080028b7
 8002510:	080028ef 	.word	0x080028ef
 8002514:	08002913 	.word	0x08002913

08002518 <__sfmoreglue>:
 8002518:	b570      	push	{r4, r5, r6, lr}
 800251a:	2568      	movs	r5, #104	; 0x68
 800251c:	1e4a      	subs	r2, r1, #1
 800251e:	4355      	muls	r5, r2
 8002520:	460e      	mov	r6, r1
 8002522:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002526:	f000 f947 	bl	80027b8 <_malloc_r>
 800252a:	4604      	mov	r4, r0
 800252c:	b140      	cbz	r0, 8002540 <__sfmoreglue+0x28>
 800252e:	2100      	movs	r1, #0
 8002530:	e880 0042 	stmia.w	r0, {r1, r6}
 8002534:	300c      	adds	r0, #12
 8002536:	60a0      	str	r0, [r4, #8]
 8002538:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800253c:	f7ff fde4 	bl	8002108 <memset>
 8002540:	4620      	mov	r0, r4
 8002542:	bd70      	pop	{r4, r5, r6, pc}

08002544 <__sinit>:
 8002544:	6983      	ldr	r3, [r0, #24]
 8002546:	b510      	push	{r4, lr}
 8002548:	4604      	mov	r4, r0
 800254a:	bb33      	cbnz	r3, 800259a <__sinit+0x56>
 800254c:	6483      	str	r3, [r0, #72]	; 0x48
 800254e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002550:	6503      	str	r3, [r0, #80]	; 0x50
 8002552:	4b12      	ldr	r3, [pc, #72]	; (800259c <__sinit+0x58>)
 8002554:	4a12      	ldr	r2, [pc, #72]	; (80025a0 <__sinit+0x5c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6282      	str	r2, [r0, #40]	; 0x28
 800255a:	4298      	cmp	r0, r3
 800255c:	bf04      	itt	eq
 800255e:	2301      	moveq	r3, #1
 8002560:	6183      	streq	r3, [r0, #24]
 8002562:	f000 f81f 	bl	80025a4 <__sfp>
 8002566:	6060      	str	r0, [r4, #4]
 8002568:	4620      	mov	r0, r4
 800256a:	f000 f81b 	bl	80025a4 <__sfp>
 800256e:	60a0      	str	r0, [r4, #8]
 8002570:	4620      	mov	r0, r4
 8002572:	f000 f817 	bl	80025a4 <__sfp>
 8002576:	2200      	movs	r2, #0
 8002578:	60e0      	str	r0, [r4, #12]
 800257a:	2104      	movs	r1, #4
 800257c:	6860      	ldr	r0, [r4, #4]
 800257e:	f7ff ffa7 	bl	80024d0 <std.isra.0>
 8002582:	2201      	movs	r2, #1
 8002584:	2109      	movs	r1, #9
 8002586:	68a0      	ldr	r0, [r4, #8]
 8002588:	f7ff ffa2 	bl	80024d0 <std.isra.0>
 800258c:	2202      	movs	r2, #2
 800258e:	2112      	movs	r1, #18
 8002590:	68e0      	ldr	r0, [r4, #12]
 8002592:	f7ff ff9d 	bl	80024d0 <std.isra.0>
 8002596:	2301      	movs	r3, #1
 8002598:	61a3      	str	r3, [r4, #24]
 800259a:	bd10      	pop	{r4, pc}
 800259c:	0800303c 	.word	0x0800303c
 80025a0:	080024c5 	.word	0x080024c5

080025a4 <__sfp>:
 80025a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025a6:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <__sfp+0x74>)
 80025a8:	4607      	mov	r7, r0
 80025aa:	681e      	ldr	r6, [r3, #0]
 80025ac:	69b3      	ldr	r3, [r6, #24]
 80025ae:	b913      	cbnz	r3, 80025b6 <__sfp+0x12>
 80025b0:	4630      	mov	r0, r6
 80025b2:	f7ff ffc7 	bl	8002544 <__sinit>
 80025b6:	3648      	adds	r6, #72	; 0x48
 80025b8:	68b4      	ldr	r4, [r6, #8]
 80025ba:	6873      	ldr	r3, [r6, #4]
 80025bc:	3b01      	subs	r3, #1
 80025be:	d503      	bpl.n	80025c8 <__sfp+0x24>
 80025c0:	6833      	ldr	r3, [r6, #0]
 80025c2:	b133      	cbz	r3, 80025d2 <__sfp+0x2e>
 80025c4:	6836      	ldr	r6, [r6, #0]
 80025c6:	e7f7      	b.n	80025b8 <__sfp+0x14>
 80025c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80025cc:	b16d      	cbz	r5, 80025ea <__sfp+0x46>
 80025ce:	3468      	adds	r4, #104	; 0x68
 80025d0:	e7f4      	b.n	80025bc <__sfp+0x18>
 80025d2:	2104      	movs	r1, #4
 80025d4:	4638      	mov	r0, r7
 80025d6:	f7ff ff9f 	bl	8002518 <__sfmoreglue>
 80025da:	6030      	str	r0, [r6, #0]
 80025dc:	2800      	cmp	r0, #0
 80025de:	d1f1      	bne.n	80025c4 <__sfp+0x20>
 80025e0:	230c      	movs	r3, #12
 80025e2:	4604      	mov	r4, r0
 80025e4:	603b      	str	r3, [r7, #0]
 80025e6:	4620      	mov	r0, r4
 80025e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025ee:	81e3      	strh	r3, [r4, #14]
 80025f0:	2301      	movs	r3, #1
 80025f2:	6665      	str	r5, [r4, #100]	; 0x64
 80025f4:	81a3      	strh	r3, [r4, #12]
 80025f6:	6025      	str	r5, [r4, #0]
 80025f8:	60a5      	str	r5, [r4, #8]
 80025fa:	6065      	str	r5, [r4, #4]
 80025fc:	6125      	str	r5, [r4, #16]
 80025fe:	6165      	str	r5, [r4, #20]
 8002600:	61a5      	str	r5, [r4, #24]
 8002602:	2208      	movs	r2, #8
 8002604:	4629      	mov	r1, r5
 8002606:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800260a:	f7ff fd7d 	bl	8002108 <memset>
 800260e:	6365      	str	r5, [r4, #52]	; 0x34
 8002610:	63a5      	str	r5, [r4, #56]	; 0x38
 8002612:	64a5      	str	r5, [r4, #72]	; 0x48
 8002614:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002616:	e7e6      	b.n	80025e6 <__sfp+0x42>
 8002618:	0800303c 	.word	0x0800303c

0800261c <_fwalk_reent>:
 800261c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002620:	4680      	mov	r8, r0
 8002622:	4689      	mov	r9, r1
 8002624:	2600      	movs	r6, #0
 8002626:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800262a:	b914      	cbnz	r4, 8002632 <_fwalk_reent+0x16>
 800262c:	4630      	mov	r0, r6
 800262e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002632:	68a5      	ldr	r5, [r4, #8]
 8002634:	6867      	ldr	r7, [r4, #4]
 8002636:	3f01      	subs	r7, #1
 8002638:	d501      	bpl.n	800263e <_fwalk_reent+0x22>
 800263a:	6824      	ldr	r4, [r4, #0]
 800263c:	e7f5      	b.n	800262a <_fwalk_reent+0xe>
 800263e:	89ab      	ldrh	r3, [r5, #12]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d907      	bls.n	8002654 <_fwalk_reent+0x38>
 8002644:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002648:	3301      	adds	r3, #1
 800264a:	d003      	beq.n	8002654 <_fwalk_reent+0x38>
 800264c:	4629      	mov	r1, r5
 800264e:	4640      	mov	r0, r8
 8002650:	47c8      	blx	r9
 8002652:	4306      	orrs	r6, r0
 8002654:	3568      	adds	r5, #104	; 0x68
 8002656:	e7ee      	b.n	8002636 <_fwalk_reent+0x1a>

08002658 <__swhatbuf_r>:
 8002658:	b570      	push	{r4, r5, r6, lr}
 800265a:	460e      	mov	r6, r1
 800265c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002660:	b090      	sub	sp, #64	; 0x40
 8002662:	2900      	cmp	r1, #0
 8002664:	4614      	mov	r4, r2
 8002666:	461d      	mov	r5, r3
 8002668:	da07      	bge.n	800267a <__swhatbuf_r+0x22>
 800266a:	2300      	movs	r3, #0
 800266c:	602b      	str	r3, [r5, #0]
 800266e:	89b3      	ldrh	r3, [r6, #12]
 8002670:	061a      	lsls	r2, r3, #24
 8002672:	d410      	bmi.n	8002696 <__swhatbuf_r+0x3e>
 8002674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002678:	e00e      	b.n	8002698 <__swhatbuf_r+0x40>
 800267a:	aa01      	add	r2, sp, #4
 800267c:	f000 f970 	bl	8002960 <_fstat_r>
 8002680:	2800      	cmp	r0, #0
 8002682:	dbf2      	blt.n	800266a <__swhatbuf_r+0x12>
 8002684:	9a02      	ldr	r2, [sp, #8]
 8002686:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800268a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800268e:	425a      	negs	r2, r3
 8002690:	415a      	adcs	r2, r3
 8002692:	602a      	str	r2, [r5, #0]
 8002694:	e7ee      	b.n	8002674 <__swhatbuf_r+0x1c>
 8002696:	2340      	movs	r3, #64	; 0x40
 8002698:	2000      	movs	r0, #0
 800269a:	6023      	str	r3, [r4, #0]
 800269c:	b010      	add	sp, #64	; 0x40
 800269e:	bd70      	pop	{r4, r5, r6, pc}

080026a0 <__smakebuf_r>:
 80026a0:	898b      	ldrh	r3, [r1, #12]
 80026a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80026a4:	079d      	lsls	r5, r3, #30
 80026a6:	4606      	mov	r6, r0
 80026a8:	460c      	mov	r4, r1
 80026aa:	d507      	bpl.n	80026bc <__smakebuf_r+0x1c>
 80026ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80026b0:	6023      	str	r3, [r4, #0]
 80026b2:	6123      	str	r3, [r4, #16]
 80026b4:	2301      	movs	r3, #1
 80026b6:	6163      	str	r3, [r4, #20]
 80026b8:	b002      	add	sp, #8
 80026ba:	bd70      	pop	{r4, r5, r6, pc}
 80026bc:	ab01      	add	r3, sp, #4
 80026be:	466a      	mov	r2, sp
 80026c0:	f7ff ffca 	bl	8002658 <__swhatbuf_r>
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	4605      	mov	r5, r0
 80026c8:	4630      	mov	r0, r6
 80026ca:	f000 f875 	bl	80027b8 <_malloc_r>
 80026ce:	b948      	cbnz	r0, 80026e4 <__smakebuf_r+0x44>
 80026d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026d4:	059a      	lsls	r2, r3, #22
 80026d6:	d4ef      	bmi.n	80026b8 <__smakebuf_r+0x18>
 80026d8:	f023 0303 	bic.w	r3, r3, #3
 80026dc:	f043 0302 	orr.w	r3, r3, #2
 80026e0:	81a3      	strh	r3, [r4, #12]
 80026e2:	e7e3      	b.n	80026ac <__smakebuf_r+0xc>
 80026e4:	4b0d      	ldr	r3, [pc, #52]	; (800271c <__smakebuf_r+0x7c>)
 80026e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80026e8:	89a3      	ldrh	r3, [r4, #12]
 80026ea:	6020      	str	r0, [r4, #0]
 80026ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026f0:	81a3      	strh	r3, [r4, #12]
 80026f2:	9b00      	ldr	r3, [sp, #0]
 80026f4:	6120      	str	r0, [r4, #16]
 80026f6:	6163      	str	r3, [r4, #20]
 80026f8:	9b01      	ldr	r3, [sp, #4]
 80026fa:	b15b      	cbz	r3, 8002714 <__smakebuf_r+0x74>
 80026fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002700:	4630      	mov	r0, r6
 8002702:	f000 f93f 	bl	8002984 <_isatty_r>
 8002706:	b128      	cbz	r0, 8002714 <__smakebuf_r+0x74>
 8002708:	89a3      	ldrh	r3, [r4, #12]
 800270a:	f023 0303 	bic.w	r3, r3, #3
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	81a3      	strh	r3, [r4, #12]
 8002714:	89a3      	ldrh	r3, [r4, #12]
 8002716:	431d      	orrs	r5, r3
 8002718:	81a5      	strh	r5, [r4, #12]
 800271a:	e7cd      	b.n	80026b8 <__smakebuf_r+0x18>
 800271c:	080024c5 	.word	0x080024c5

08002720 <_free_r>:
 8002720:	b538      	push	{r3, r4, r5, lr}
 8002722:	4605      	mov	r5, r0
 8002724:	2900      	cmp	r1, #0
 8002726:	d043      	beq.n	80027b0 <_free_r+0x90>
 8002728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800272c:	1f0c      	subs	r4, r1, #4
 800272e:	2b00      	cmp	r3, #0
 8002730:	bfb8      	it	lt
 8002732:	18e4      	addlt	r4, r4, r3
 8002734:	f000 f948 	bl	80029c8 <__malloc_lock>
 8002738:	4a1e      	ldr	r2, [pc, #120]	; (80027b4 <_free_r+0x94>)
 800273a:	6813      	ldr	r3, [r2, #0]
 800273c:	4610      	mov	r0, r2
 800273e:	b933      	cbnz	r3, 800274e <_free_r+0x2e>
 8002740:	6063      	str	r3, [r4, #4]
 8002742:	6014      	str	r4, [r2, #0]
 8002744:	4628      	mov	r0, r5
 8002746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800274a:	f000 b93e 	b.w	80029ca <__malloc_unlock>
 800274e:	42a3      	cmp	r3, r4
 8002750:	d90b      	bls.n	800276a <_free_r+0x4a>
 8002752:	6821      	ldr	r1, [r4, #0]
 8002754:	1862      	adds	r2, r4, r1
 8002756:	4293      	cmp	r3, r2
 8002758:	bf01      	itttt	eq
 800275a:	681a      	ldreq	r2, [r3, #0]
 800275c:	685b      	ldreq	r3, [r3, #4]
 800275e:	1852      	addeq	r2, r2, r1
 8002760:	6022      	streq	r2, [r4, #0]
 8002762:	6063      	str	r3, [r4, #4]
 8002764:	6004      	str	r4, [r0, #0]
 8002766:	e7ed      	b.n	8002744 <_free_r+0x24>
 8002768:	4613      	mov	r3, r2
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	b10a      	cbz	r2, 8002772 <_free_r+0x52>
 800276e:	42a2      	cmp	r2, r4
 8002770:	d9fa      	bls.n	8002768 <_free_r+0x48>
 8002772:	6819      	ldr	r1, [r3, #0]
 8002774:	1858      	adds	r0, r3, r1
 8002776:	42a0      	cmp	r0, r4
 8002778:	d10b      	bne.n	8002792 <_free_r+0x72>
 800277a:	6820      	ldr	r0, [r4, #0]
 800277c:	4401      	add	r1, r0
 800277e:	1858      	adds	r0, r3, r1
 8002780:	4282      	cmp	r2, r0
 8002782:	6019      	str	r1, [r3, #0]
 8002784:	d1de      	bne.n	8002744 <_free_r+0x24>
 8002786:	6810      	ldr	r0, [r2, #0]
 8002788:	6852      	ldr	r2, [r2, #4]
 800278a:	4401      	add	r1, r0
 800278c:	6019      	str	r1, [r3, #0]
 800278e:	605a      	str	r2, [r3, #4]
 8002790:	e7d8      	b.n	8002744 <_free_r+0x24>
 8002792:	d902      	bls.n	800279a <_free_r+0x7a>
 8002794:	230c      	movs	r3, #12
 8002796:	602b      	str	r3, [r5, #0]
 8002798:	e7d4      	b.n	8002744 <_free_r+0x24>
 800279a:	6820      	ldr	r0, [r4, #0]
 800279c:	1821      	adds	r1, r4, r0
 800279e:	428a      	cmp	r2, r1
 80027a0:	bf01      	itttt	eq
 80027a2:	6811      	ldreq	r1, [r2, #0]
 80027a4:	6852      	ldreq	r2, [r2, #4]
 80027a6:	1809      	addeq	r1, r1, r0
 80027a8:	6021      	streq	r1, [r4, #0]
 80027aa:	6062      	str	r2, [r4, #4]
 80027ac:	605c      	str	r4, [r3, #4]
 80027ae:	e7c9      	b.n	8002744 <_free_r+0x24>
 80027b0:	bd38      	pop	{r3, r4, r5, pc}
 80027b2:	bf00      	nop
 80027b4:	20000094 	.word	0x20000094

080027b8 <_malloc_r>:
 80027b8:	b570      	push	{r4, r5, r6, lr}
 80027ba:	1ccd      	adds	r5, r1, #3
 80027bc:	f025 0503 	bic.w	r5, r5, #3
 80027c0:	3508      	adds	r5, #8
 80027c2:	2d0c      	cmp	r5, #12
 80027c4:	bf38      	it	cc
 80027c6:	250c      	movcc	r5, #12
 80027c8:	2d00      	cmp	r5, #0
 80027ca:	4606      	mov	r6, r0
 80027cc:	db01      	blt.n	80027d2 <_malloc_r+0x1a>
 80027ce:	42a9      	cmp	r1, r5
 80027d0:	d903      	bls.n	80027da <_malloc_r+0x22>
 80027d2:	230c      	movs	r3, #12
 80027d4:	6033      	str	r3, [r6, #0]
 80027d6:	2000      	movs	r0, #0
 80027d8:	bd70      	pop	{r4, r5, r6, pc}
 80027da:	f000 f8f5 	bl	80029c8 <__malloc_lock>
 80027de:	4a23      	ldr	r2, [pc, #140]	; (800286c <_malloc_r+0xb4>)
 80027e0:	6814      	ldr	r4, [r2, #0]
 80027e2:	4621      	mov	r1, r4
 80027e4:	b991      	cbnz	r1, 800280c <_malloc_r+0x54>
 80027e6:	4c22      	ldr	r4, [pc, #136]	; (8002870 <_malloc_r+0xb8>)
 80027e8:	6823      	ldr	r3, [r4, #0]
 80027ea:	b91b      	cbnz	r3, 80027f4 <_malloc_r+0x3c>
 80027ec:	4630      	mov	r0, r6
 80027ee:	f000 f841 	bl	8002874 <_sbrk_r>
 80027f2:	6020      	str	r0, [r4, #0]
 80027f4:	4629      	mov	r1, r5
 80027f6:	4630      	mov	r0, r6
 80027f8:	f000 f83c 	bl	8002874 <_sbrk_r>
 80027fc:	1c43      	adds	r3, r0, #1
 80027fe:	d126      	bne.n	800284e <_malloc_r+0x96>
 8002800:	230c      	movs	r3, #12
 8002802:	4630      	mov	r0, r6
 8002804:	6033      	str	r3, [r6, #0]
 8002806:	f000 f8e0 	bl	80029ca <__malloc_unlock>
 800280a:	e7e4      	b.n	80027d6 <_malloc_r+0x1e>
 800280c:	680b      	ldr	r3, [r1, #0]
 800280e:	1b5b      	subs	r3, r3, r5
 8002810:	d41a      	bmi.n	8002848 <_malloc_r+0x90>
 8002812:	2b0b      	cmp	r3, #11
 8002814:	d90f      	bls.n	8002836 <_malloc_r+0x7e>
 8002816:	600b      	str	r3, [r1, #0]
 8002818:	18cc      	adds	r4, r1, r3
 800281a:	50cd      	str	r5, [r1, r3]
 800281c:	4630      	mov	r0, r6
 800281e:	f000 f8d4 	bl	80029ca <__malloc_unlock>
 8002822:	f104 000b 	add.w	r0, r4, #11
 8002826:	1d23      	adds	r3, r4, #4
 8002828:	f020 0007 	bic.w	r0, r0, #7
 800282c:	1ac3      	subs	r3, r0, r3
 800282e:	d01b      	beq.n	8002868 <_malloc_r+0xb0>
 8002830:	425a      	negs	r2, r3
 8002832:	50e2      	str	r2, [r4, r3]
 8002834:	bd70      	pop	{r4, r5, r6, pc}
 8002836:	428c      	cmp	r4, r1
 8002838:	bf0b      	itete	eq
 800283a:	6863      	ldreq	r3, [r4, #4]
 800283c:	684b      	ldrne	r3, [r1, #4]
 800283e:	6013      	streq	r3, [r2, #0]
 8002840:	6063      	strne	r3, [r4, #4]
 8002842:	bf18      	it	ne
 8002844:	460c      	movne	r4, r1
 8002846:	e7e9      	b.n	800281c <_malloc_r+0x64>
 8002848:	460c      	mov	r4, r1
 800284a:	6849      	ldr	r1, [r1, #4]
 800284c:	e7ca      	b.n	80027e4 <_malloc_r+0x2c>
 800284e:	1cc4      	adds	r4, r0, #3
 8002850:	f024 0403 	bic.w	r4, r4, #3
 8002854:	42a0      	cmp	r0, r4
 8002856:	d005      	beq.n	8002864 <_malloc_r+0xac>
 8002858:	1a21      	subs	r1, r4, r0
 800285a:	4630      	mov	r0, r6
 800285c:	f000 f80a 	bl	8002874 <_sbrk_r>
 8002860:	3001      	adds	r0, #1
 8002862:	d0cd      	beq.n	8002800 <_malloc_r+0x48>
 8002864:	6025      	str	r5, [r4, #0]
 8002866:	e7d9      	b.n	800281c <_malloc_r+0x64>
 8002868:	bd70      	pop	{r4, r5, r6, pc}
 800286a:	bf00      	nop
 800286c:	20000094 	.word	0x20000094
 8002870:	20000098 	.word	0x20000098

08002874 <_sbrk_r>:
 8002874:	b538      	push	{r3, r4, r5, lr}
 8002876:	2300      	movs	r3, #0
 8002878:	4c05      	ldr	r4, [pc, #20]	; (8002890 <_sbrk_r+0x1c>)
 800287a:	4605      	mov	r5, r0
 800287c:	4608      	mov	r0, r1
 800287e:	6023      	str	r3, [r4, #0]
 8002880:	f7ff f902 	bl	8001a88 <_sbrk>
 8002884:	1c43      	adds	r3, r0, #1
 8002886:	d102      	bne.n	800288e <_sbrk_r+0x1a>
 8002888:	6823      	ldr	r3, [r4, #0]
 800288a:	b103      	cbz	r3, 800288e <_sbrk_r+0x1a>
 800288c:	602b      	str	r3, [r5, #0]
 800288e:	bd38      	pop	{r3, r4, r5, pc}
 8002890:	20000590 	.word	0x20000590

08002894 <__sread>:
 8002894:	b510      	push	{r4, lr}
 8002896:	460c      	mov	r4, r1
 8002898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800289c:	f000 f896 	bl	80029cc <_read_r>
 80028a0:	2800      	cmp	r0, #0
 80028a2:	bfab      	itete	ge
 80028a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80028a6:	89a3      	ldrhlt	r3, [r4, #12]
 80028a8:	181b      	addge	r3, r3, r0
 80028aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80028ae:	bfac      	ite	ge
 80028b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80028b2:	81a3      	strhlt	r3, [r4, #12]
 80028b4:	bd10      	pop	{r4, pc}

080028b6 <__swrite>:
 80028b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028ba:	461f      	mov	r7, r3
 80028bc:	898b      	ldrh	r3, [r1, #12]
 80028be:	4605      	mov	r5, r0
 80028c0:	05db      	lsls	r3, r3, #23
 80028c2:	460c      	mov	r4, r1
 80028c4:	4616      	mov	r6, r2
 80028c6:	d505      	bpl.n	80028d4 <__swrite+0x1e>
 80028c8:	2302      	movs	r3, #2
 80028ca:	2200      	movs	r2, #0
 80028cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028d0:	f000 f868 	bl	80029a4 <_lseek_r>
 80028d4:	89a3      	ldrh	r3, [r4, #12]
 80028d6:	4632      	mov	r2, r6
 80028d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028dc:	81a3      	strh	r3, [r4, #12]
 80028de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028e2:	463b      	mov	r3, r7
 80028e4:	4628      	mov	r0, r5
 80028e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80028ea:	f000 b817 	b.w	800291c <_write_r>

080028ee <__sseek>:
 80028ee:	b510      	push	{r4, lr}
 80028f0:	460c      	mov	r4, r1
 80028f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028f6:	f000 f855 	bl	80029a4 <_lseek_r>
 80028fa:	1c43      	adds	r3, r0, #1
 80028fc:	89a3      	ldrh	r3, [r4, #12]
 80028fe:	bf15      	itete	ne
 8002900:	6560      	strne	r0, [r4, #84]	; 0x54
 8002902:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002906:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800290a:	81a3      	strheq	r3, [r4, #12]
 800290c:	bf18      	it	ne
 800290e:	81a3      	strhne	r3, [r4, #12]
 8002910:	bd10      	pop	{r4, pc}

08002912 <__sclose>:
 8002912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002916:	f000 b813 	b.w	8002940 <_close_r>
	...

0800291c <_write_r>:
 800291c:	b538      	push	{r3, r4, r5, lr}
 800291e:	4605      	mov	r5, r0
 8002920:	4608      	mov	r0, r1
 8002922:	4611      	mov	r1, r2
 8002924:	2200      	movs	r2, #0
 8002926:	4c05      	ldr	r4, [pc, #20]	; (800293c <_write_r+0x20>)
 8002928:	6022      	str	r2, [r4, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	f7fe fdf2 	bl	8001514 <_write>
 8002930:	1c43      	adds	r3, r0, #1
 8002932:	d102      	bne.n	800293a <_write_r+0x1e>
 8002934:	6823      	ldr	r3, [r4, #0]
 8002936:	b103      	cbz	r3, 800293a <_write_r+0x1e>
 8002938:	602b      	str	r3, [r5, #0]
 800293a:	bd38      	pop	{r3, r4, r5, pc}
 800293c:	20000590 	.word	0x20000590

08002940 <_close_r>:
 8002940:	b538      	push	{r3, r4, r5, lr}
 8002942:	2300      	movs	r3, #0
 8002944:	4c05      	ldr	r4, [pc, #20]	; (800295c <_close_r+0x1c>)
 8002946:	4605      	mov	r5, r0
 8002948:	4608      	mov	r0, r1
 800294a:	6023      	str	r3, [r4, #0]
 800294c:	f7ff f8b6 	bl	8001abc <_close>
 8002950:	1c43      	adds	r3, r0, #1
 8002952:	d102      	bne.n	800295a <_close_r+0x1a>
 8002954:	6823      	ldr	r3, [r4, #0]
 8002956:	b103      	cbz	r3, 800295a <_close_r+0x1a>
 8002958:	602b      	str	r3, [r5, #0]
 800295a:	bd38      	pop	{r3, r4, r5, pc}
 800295c:	20000590 	.word	0x20000590

08002960 <_fstat_r>:
 8002960:	b538      	push	{r3, r4, r5, lr}
 8002962:	2300      	movs	r3, #0
 8002964:	4c06      	ldr	r4, [pc, #24]	; (8002980 <_fstat_r+0x20>)
 8002966:	4605      	mov	r5, r0
 8002968:	4608      	mov	r0, r1
 800296a:	4611      	mov	r1, r2
 800296c:	6023      	str	r3, [r4, #0]
 800296e:	f7ff f8a8 	bl	8001ac2 <_fstat>
 8002972:	1c43      	adds	r3, r0, #1
 8002974:	d102      	bne.n	800297c <_fstat_r+0x1c>
 8002976:	6823      	ldr	r3, [r4, #0]
 8002978:	b103      	cbz	r3, 800297c <_fstat_r+0x1c>
 800297a:	602b      	str	r3, [r5, #0]
 800297c:	bd38      	pop	{r3, r4, r5, pc}
 800297e:	bf00      	nop
 8002980:	20000590 	.word	0x20000590

08002984 <_isatty_r>:
 8002984:	b538      	push	{r3, r4, r5, lr}
 8002986:	2300      	movs	r3, #0
 8002988:	4c05      	ldr	r4, [pc, #20]	; (80029a0 <_isatty_r+0x1c>)
 800298a:	4605      	mov	r5, r0
 800298c:	4608      	mov	r0, r1
 800298e:	6023      	str	r3, [r4, #0]
 8002990:	f7ff f89c 	bl	8001acc <_isatty>
 8002994:	1c43      	adds	r3, r0, #1
 8002996:	d102      	bne.n	800299e <_isatty_r+0x1a>
 8002998:	6823      	ldr	r3, [r4, #0]
 800299a:	b103      	cbz	r3, 800299e <_isatty_r+0x1a>
 800299c:	602b      	str	r3, [r5, #0]
 800299e:	bd38      	pop	{r3, r4, r5, pc}
 80029a0:	20000590 	.word	0x20000590

080029a4 <_lseek_r>:
 80029a4:	b538      	push	{r3, r4, r5, lr}
 80029a6:	4605      	mov	r5, r0
 80029a8:	4608      	mov	r0, r1
 80029aa:	4611      	mov	r1, r2
 80029ac:	2200      	movs	r2, #0
 80029ae:	4c05      	ldr	r4, [pc, #20]	; (80029c4 <_lseek_r+0x20>)
 80029b0:	6022      	str	r2, [r4, #0]
 80029b2:	461a      	mov	r2, r3
 80029b4:	f7ff f88c 	bl	8001ad0 <_lseek>
 80029b8:	1c43      	adds	r3, r0, #1
 80029ba:	d102      	bne.n	80029c2 <_lseek_r+0x1e>
 80029bc:	6823      	ldr	r3, [r4, #0]
 80029be:	b103      	cbz	r3, 80029c2 <_lseek_r+0x1e>
 80029c0:	602b      	str	r3, [r5, #0]
 80029c2:	bd38      	pop	{r3, r4, r5, pc}
 80029c4:	20000590 	.word	0x20000590

080029c8 <__malloc_lock>:
 80029c8:	4770      	bx	lr

080029ca <__malloc_unlock>:
 80029ca:	4770      	bx	lr

080029cc <_read_r>:
 80029cc:	b538      	push	{r3, r4, r5, lr}
 80029ce:	4605      	mov	r5, r0
 80029d0:	4608      	mov	r0, r1
 80029d2:	4611      	mov	r1, r2
 80029d4:	2200      	movs	r2, #0
 80029d6:	4c05      	ldr	r4, [pc, #20]	; (80029ec <_read_r+0x20>)
 80029d8:	6022      	str	r2, [r4, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	f7ff f846 	bl	8001a6c <_read>
 80029e0:	1c43      	adds	r3, r0, #1
 80029e2:	d102      	bne.n	80029ea <_read_r+0x1e>
 80029e4:	6823      	ldr	r3, [r4, #0]
 80029e6:	b103      	cbz	r3, 80029ea <_read_r+0x1e>
 80029e8:	602b      	str	r3, [r5, #0]
 80029ea:	bd38      	pop	{r3, r4, r5, pc}
 80029ec:	20000590 	.word	0x20000590

080029f0 <_init>:
 80029f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f2:	bf00      	nop
 80029f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029f6:	bc08      	pop	{r3}
 80029f8:	469e      	mov	lr, r3
 80029fa:	4770      	bx	lr

080029fc <_fini>:
 80029fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fe:	bf00      	nop
 8002a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a02:	bc08      	pop	{r3}
 8002a04:	469e      	mov	lr, r3
 8002a06:	4770      	bx	lr
