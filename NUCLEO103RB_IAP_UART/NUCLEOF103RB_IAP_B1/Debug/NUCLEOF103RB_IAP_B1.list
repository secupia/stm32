
NUCLEOF103RB_IAP_B1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d38  0800410c  0800410c  0000410c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08005e44  08005e44  00005e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005f2c  08005f2c  00005f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005f30  08005f30  00005f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08005f34  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000070  20000070  08005fa4  00010070  2**2
                  ALLOC
  7 ._user_heap_stack 00001400  200000e0  08005fa4  000100e0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b087  00000000  00000000  00010099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001c12  00000000  00000000  0001b120  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000266d  00000000  00000000  0001cd32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000560  00000000  00000000  0001f3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006b8  00000000  00000000  0001f900  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000030c3  00000000  00000000  0001ffb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000203a  00000000  00000000  0002307b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000250b5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001448  00000000  00000000  00025134  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800410c <__do_global_dtors_aux>:
 800410c:	b510      	push	{r4, lr}
 800410e:	4c05      	ldr	r4, [pc, #20]	; (8004124 <__do_global_dtors_aux+0x18>)
 8004110:	7823      	ldrb	r3, [r4, #0]
 8004112:	b933      	cbnz	r3, 8004122 <__do_global_dtors_aux+0x16>
 8004114:	4b04      	ldr	r3, [pc, #16]	; (8004128 <__do_global_dtors_aux+0x1c>)
 8004116:	b113      	cbz	r3, 800411e <__do_global_dtors_aux+0x12>
 8004118:	4804      	ldr	r0, [pc, #16]	; (800412c <__do_global_dtors_aux+0x20>)
 800411a:	f3af 8000 	nop.w
 800411e:	2301      	movs	r3, #1
 8004120:	7023      	strb	r3, [r4, #0]
 8004122:	bd10      	pop	{r4, pc}
 8004124:	20000070 	.word	0x20000070
 8004128:	00000000 	.word	0x00000000
 800412c:	08005e2c 	.word	0x08005e2c

08004130 <frame_dummy>:
 8004130:	b508      	push	{r3, lr}
 8004132:	4b03      	ldr	r3, [pc, #12]	; (8004140 <frame_dummy+0x10>)
 8004134:	b11b      	cbz	r3, 800413e <frame_dummy+0xe>
 8004136:	4903      	ldr	r1, [pc, #12]	; (8004144 <frame_dummy+0x14>)
 8004138:	4803      	ldr	r0, [pc, #12]	; (8004148 <frame_dummy+0x18>)
 800413a:	f3af 8000 	nop.w
 800413e:	bd08      	pop	{r3, pc}
 8004140:	00000000 	.word	0x00000000
 8004144:	20000074 	.word	0x20000074
 8004148:	08005e2c 	.word	0x08005e2c

0800414c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800414c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800414e:	4b0e      	ldr	r3, [pc, #56]	; (8004188 <HAL_InitTick+0x3c>)
{
 8004150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004152:	7818      	ldrb	r0, [r3, #0]
 8004154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004158:	fbb3 f3f0 	udiv	r3, r3, r0
 800415c:	4a0b      	ldr	r2, [pc, #44]	; (800418c <HAL_InitTick+0x40>)
 800415e:	6810      	ldr	r0, [r2, #0]
 8004160:	fbb0 f0f3 	udiv	r0, r0, r3
 8004164:	f000 f89e 	bl	80042a4 <HAL_SYSTICK_Config>
 8004168:	4604      	mov	r4, r0
 800416a:	b958      	cbnz	r0, 8004184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800416c:	2d0f      	cmp	r5, #15
 800416e:	d809      	bhi.n	8004184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004170:	4602      	mov	r2, r0
 8004172:	4629      	mov	r1, r5
 8004174:	f04f 30ff 	mov.w	r0, #4294967295
 8004178:	f000 f854 	bl	8004224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800417c:	4b04      	ldr	r3, [pc, #16]	; (8004190 <HAL_InitTick+0x44>)
 800417e:	4620      	mov	r0, r4
 8004180:	601d      	str	r5, [r3, #0]
 8004182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004186:	bd38      	pop	{r3, r4, r5, pc}
 8004188:	20000000 	.word	0x20000000
 800418c:	20000008 	.word	0x20000008
 8004190:	20000004 	.word	0x20000004

08004194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004194:	4a07      	ldr	r2, [pc, #28]	; (80041b4 <HAL_Init+0x20>)
{
 8004196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800419a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800419c:	f043 0310 	orr.w	r3, r3, #16
 80041a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041a2:	f000 f82d 	bl	8004200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80041a6:	2000      	movs	r0, #0
 80041a8:	f7ff ffd0 	bl	800414c <HAL_InitTick>
  HAL_MspInit();
 80041ac:	f000 fe28 	bl	8004e00 <HAL_MspInit>
}
 80041b0:	2000      	movs	r0, #0
 80041b2:	bd08      	pop	{r3, pc}
 80041b4:	40022000 	.word	0x40022000

080041b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80041b8:	4a03      	ldr	r2, [pc, #12]	; (80041c8 <HAL_IncTick+0x10>)
 80041ba:	4b04      	ldr	r3, [pc, #16]	; (80041cc <HAL_IncTick+0x14>)
 80041bc:	6811      	ldr	r1, [r2, #0]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	440b      	add	r3, r1
 80041c2:	6013      	str	r3, [r2, #0]
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	20000098 	.word	0x20000098
 80041cc:	20000000 	.word	0x20000000

080041d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80041d0:	4b01      	ldr	r3, [pc, #4]	; (80041d8 <HAL_GetTick+0x8>)
 80041d2:	6818      	ldr	r0, [r3, #0]
}
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	20000098 	.word	0x20000098

080041dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041dc:	b538      	push	{r3, r4, r5, lr}
 80041de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80041e0:	f7ff fff6 	bl	80041d0 <HAL_GetTick>
 80041e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80041e8:	bf1e      	ittt	ne
 80041ea:	4b04      	ldrne	r3, [pc, #16]	; (80041fc <HAL_Delay+0x20>)
 80041ec:	781b      	ldrbne	r3, [r3, #0]
 80041ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041f0:	f7ff ffee 	bl	80041d0 <HAL_GetTick>
 80041f4:	1b40      	subs	r0, r0, r5
 80041f6:	4284      	cmp	r4, r0
 80041f8:	d8fa      	bhi.n	80041f0 <HAL_Delay+0x14>
  {
  }
}
 80041fa:	bd38      	pop	{r3, r4, r5, pc}
 80041fc:	20000000 	.word	0x20000000

08004200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004200:	4a07      	ldr	r2, [pc, #28]	; (8004220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8004202:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004204:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8004206:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800420a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800420e:	041b      	lsls	r3, r3, #16
 8004210:	0c1b      	lsrs	r3, r3, #16
 8004212:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800421a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800421c:	60d3      	str	r3, [r2, #12]
 800421e:	4770      	bx	lr
 8004220:	e000ed00 	.word	0xe000ed00

08004224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004224:	4b17      	ldr	r3, [pc, #92]	; (8004284 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004226:	b530      	push	{r4, r5, lr}
 8004228:	68dc      	ldr	r4, [r3, #12]
 800422a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800422e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004232:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004234:	2b04      	cmp	r3, #4
 8004236:	bf28      	it	cs
 8004238:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800423a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800423c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004240:	bf98      	it	ls
 8004242:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004244:	fa05 f303 	lsl.w	r3, r5, r3
 8004248:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800424c:	bf88      	it	hi
 800424e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004250:	4019      	ands	r1, r3
 8004252:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004254:	fa05 f404 	lsl.w	r4, r5, r4
 8004258:	3c01      	subs	r4, #1
 800425a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800425c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800425e:	ea42 0201 	orr.w	r2, r2, r1
 8004262:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004266:	bfaf      	iteee	ge
 8004268:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800426c:	4b06      	ldrlt	r3, [pc, #24]	; (8004288 <HAL_NVIC_SetPriority+0x64>)
 800426e:	f000 000f 	andlt.w	r0, r0, #15
 8004272:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004274:	bfa5      	ittet	ge
 8004276:	b2d2      	uxtbge	r2, r2
 8004278:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800427c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800427e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8004282:	bd30      	pop	{r4, r5, pc}
 8004284:	e000ed00 	.word	0xe000ed00
 8004288:	e000ed14 	.word	0xe000ed14

0800428c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800428c:	2301      	movs	r3, #1
 800428e:	0942      	lsrs	r2, r0, #5
 8004290:	f000 001f 	and.w	r0, r0, #31
 8004294:	fa03 f000 	lsl.w	r0, r3, r0
 8004298:	4b01      	ldr	r3, [pc, #4]	; (80042a0 <HAL_NVIC_EnableIRQ+0x14>)
 800429a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800429e:	4770      	bx	lr
 80042a0:	e000e100 	.word	0xe000e100

080042a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042a4:	3801      	subs	r0, #1
 80042a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80042aa:	d20a      	bcs.n	80042c2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ac:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042ae:	4b06      	ldr	r3, [pc, #24]	; (80042c8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042b0:	4a06      	ldr	r2, [pc, #24]	; (80042cc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042b2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042b4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042b8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042ba:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042bc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80042c2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	e000e010 	.word	0xe000e010
 80042cc:	e000ed00 	.word	0xe000ed00

080042d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80042d4:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80042d6:	4616      	mov	r6, r2
 80042d8:	4b65      	ldr	r3, [pc, #404]	; (8004470 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80042da:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8004480 <HAL_GPIO_Init+0x1b0>
 80042de:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8004484 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80042e2:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042e6:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80042e8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042ec:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80042f0:	45a0      	cmp	r8, r4
 80042f2:	d17f      	bne.n	80043f4 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80042f4:	684d      	ldr	r5, [r1, #4]
 80042f6:	2d12      	cmp	r5, #18
 80042f8:	f000 80af 	beq.w	800445a <HAL_GPIO_Init+0x18a>
 80042fc:	f200 8088 	bhi.w	8004410 <HAL_GPIO_Init+0x140>
 8004300:	2d02      	cmp	r5, #2
 8004302:	f000 80a7 	beq.w	8004454 <HAL_GPIO_Init+0x184>
 8004306:	d87c      	bhi.n	8004402 <HAL_GPIO_Init+0x132>
 8004308:	2d00      	cmp	r5, #0
 800430a:	f000 808e 	beq.w	800442a <HAL_GPIO_Init+0x15a>
 800430e:	2d01      	cmp	r5, #1
 8004310:	f000 809e 	beq.w	8004450 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004314:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004318:	2cff      	cmp	r4, #255	; 0xff
 800431a:	bf93      	iteet	ls
 800431c:	4682      	movls	sl, r0
 800431e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8004322:	3d08      	subhi	r5, #8
 8004324:	f8d0 b000 	ldrls.w	fp, [r0]
 8004328:	bf92      	itee	ls
 800432a:	00b5      	lslls	r5, r6, #2
 800432c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8004330:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004332:	fa09 f805 	lsl.w	r8, r9, r5
 8004336:	ea2b 0808 	bic.w	r8, fp, r8
 800433a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800433e:	bf88      	it	hi
 8004340:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004344:	ea48 0505 	orr.w	r5, r8, r5
 8004348:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800434c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8004350:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8004354:	d04e      	beq.n	80043f4 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004356:	4d47      	ldr	r5, [pc, #284]	; (8004474 <HAL_GPIO_Init+0x1a4>)
 8004358:	4f46      	ldr	r7, [pc, #280]	; (8004474 <HAL_GPIO_Init+0x1a4>)
 800435a:	69ad      	ldr	r5, [r5, #24]
 800435c:	f026 0803 	bic.w	r8, r6, #3
 8004360:	f045 0501 	orr.w	r5, r5, #1
 8004364:	61bd      	str	r5, [r7, #24]
 8004366:	69bd      	ldr	r5, [r7, #24]
 8004368:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800436c:	f005 0501 	and.w	r5, r5, #1
 8004370:	9501      	str	r5, [sp, #4]
 8004372:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8004376:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800437a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800437c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8004380:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8004384:	fa09 f90b 	lsl.w	r9, r9, fp
 8004388:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800438c:	4d3a      	ldr	r5, [pc, #232]	; (8004478 <HAL_GPIO_Init+0x1a8>)
 800438e:	42a8      	cmp	r0, r5
 8004390:	d068      	beq.n	8004464 <HAL_GPIO_Init+0x194>
 8004392:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004396:	42a8      	cmp	r0, r5
 8004398:	d066      	beq.n	8004468 <HAL_GPIO_Init+0x198>
 800439a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800439e:	42a8      	cmp	r0, r5
 80043a0:	d064      	beq.n	800446c <HAL_GPIO_Init+0x19c>
 80043a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80043a6:	42a8      	cmp	r0, r5
 80043a8:	bf0c      	ite	eq
 80043aa:	2503      	moveq	r5, #3
 80043ac:	2504      	movne	r5, #4
 80043ae:	fa05 f50b 	lsl.w	r5, r5, fp
 80043b2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80043b6:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80043ba:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043bc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80043c0:	bf14      	ite	ne
 80043c2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80043c4:	43a5      	biceq	r5, r4
 80043c6:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80043c8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043ca:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80043ce:	bf14      	ite	ne
 80043d0:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80043d2:	43a5      	biceq	r5, r4
 80043d4:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80043d6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80043d8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80043dc:	bf14      	ite	ne
 80043de:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80043e0:	43a5      	biceq	r5, r4
 80043e2:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80043e4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043e6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80043ea:	bf14      	ite	ne
 80043ec:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80043ee:	ea25 0404 	biceq.w	r4, r5, r4
 80043f2:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80043f4:	3601      	adds	r6, #1
 80043f6:	2e10      	cmp	r6, #16
 80043f8:	f47f af73 	bne.w	80042e2 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80043fc:	b003      	add	sp, #12
 80043fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8004402:	2d03      	cmp	r5, #3
 8004404:	d022      	beq.n	800444c <HAL_GPIO_Init+0x17c>
 8004406:	2d11      	cmp	r5, #17
 8004408:	d184      	bne.n	8004314 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800440a:	68ca      	ldr	r2, [r1, #12]
 800440c:	3204      	adds	r2, #4
          break;
 800440e:	e781      	b.n	8004314 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8004410:	4f1a      	ldr	r7, [pc, #104]	; (800447c <HAL_GPIO_Init+0x1ac>)
 8004412:	42bd      	cmp	r5, r7
 8004414:	d009      	beq.n	800442a <HAL_GPIO_Init+0x15a>
 8004416:	d812      	bhi.n	800443e <HAL_GPIO_Init+0x16e>
 8004418:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8004488 <HAL_GPIO_Init+0x1b8>
 800441c:	454d      	cmp	r5, r9
 800441e:	d004      	beq.n	800442a <HAL_GPIO_Init+0x15a>
 8004420:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8004424:	454d      	cmp	r5, r9
 8004426:	f47f af75 	bne.w	8004314 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800442a:	688a      	ldr	r2, [r1, #8]
 800442c:	b1c2      	cbz	r2, 8004460 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800442e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8004430:	bf0c      	ite	eq
 8004432:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8004436:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800443a:	2208      	movs	r2, #8
 800443c:	e76a      	b.n	8004314 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800443e:	4575      	cmp	r5, lr
 8004440:	d0f3      	beq.n	800442a <HAL_GPIO_Init+0x15a>
 8004442:	4565      	cmp	r5, ip
 8004444:	d0f1      	beq.n	800442a <HAL_GPIO_Init+0x15a>
 8004446:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800448c <HAL_GPIO_Init+0x1bc>
 800444a:	e7eb      	b.n	8004424 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800444c:	2200      	movs	r2, #0
 800444e:	e761      	b.n	8004314 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004450:	68ca      	ldr	r2, [r1, #12]
          break;
 8004452:	e75f      	b.n	8004314 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004454:	68ca      	ldr	r2, [r1, #12]
 8004456:	3208      	adds	r2, #8
          break;
 8004458:	e75c      	b.n	8004314 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800445a:	68ca      	ldr	r2, [r1, #12]
 800445c:	320c      	adds	r2, #12
          break;
 800445e:	e759      	b.n	8004314 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004460:	2204      	movs	r2, #4
 8004462:	e757      	b.n	8004314 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004464:	2500      	movs	r5, #0
 8004466:	e7a2      	b.n	80043ae <HAL_GPIO_Init+0xde>
 8004468:	2501      	movs	r5, #1
 800446a:	e7a0      	b.n	80043ae <HAL_GPIO_Init+0xde>
 800446c:	2502      	movs	r5, #2
 800446e:	e79e      	b.n	80043ae <HAL_GPIO_Init+0xde>
 8004470:	40010400 	.word	0x40010400
 8004474:	40021000 	.word	0x40021000
 8004478:	40010800 	.word	0x40010800
 800447c:	10210000 	.word	0x10210000
 8004480:	10310000 	.word	0x10310000
 8004484:	10320000 	.word	0x10320000
 8004488:	10110000 	.word	0x10110000
 800448c:	10220000 	.word	0x10220000

08004490 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004490:	b10a      	cbz	r2, 8004496 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004492:	6101      	str	r1, [r0, #16]
 8004494:	4770      	bx	lr
 8004496:	0409      	lsls	r1, r1, #16
 8004498:	e7fb      	b.n	8004492 <HAL_GPIO_WritePin+0x2>

0800449a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800449a:	68c3      	ldr	r3, [r0, #12]
 800449c:	4059      	eors	r1, r3
 800449e:	60c1      	str	r1, [r0, #12]
 80044a0:	4770      	bx	lr

080044a2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80044a2:	4770      	bx	lr

080044a4 <HAL_GPIO_EXTI_IRQHandler>:
{
 80044a4:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80044a6:	4b04      	ldr	r3, [pc, #16]	; (80044b8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80044a8:	6959      	ldr	r1, [r3, #20]
 80044aa:	4201      	tst	r1, r0
 80044ac:	d002      	beq.n	80044b4 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044ae:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044b0:	f7ff fff7 	bl	80044a2 <HAL_GPIO_EXTI_Callback>
 80044b4:	bd08      	pop	{r3, pc}
 80044b6:	bf00      	nop
 80044b8:	40010400 	.word	0x40010400

080044bc <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044bc:	6803      	ldr	r3, [r0, #0]
{
 80044be:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044c2:	07db      	lsls	r3, r3, #31
{
 80044c4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044c6:	d410      	bmi.n	80044ea <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044c8:	682b      	ldr	r3, [r5, #0]
 80044ca:	079f      	lsls	r7, r3, #30
 80044cc:	d45e      	bmi.n	800458c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044ce:	682b      	ldr	r3, [r5, #0]
 80044d0:	0719      	lsls	r1, r3, #28
 80044d2:	f100 8095 	bmi.w	8004600 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044d6:	682b      	ldr	r3, [r5, #0]
 80044d8:	075a      	lsls	r2, r3, #29
 80044da:	f100 80bf 	bmi.w	800465c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044de:	69ea      	ldr	r2, [r5, #28]
 80044e0:	2a00      	cmp	r2, #0
 80044e2:	f040 812d 	bne.w	8004740 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80044e6:	2000      	movs	r0, #0
 80044e8:	e014      	b.n	8004514 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80044ea:	4c90      	ldr	r4, [pc, #576]	; (800472c <HAL_RCC_OscConfig+0x270>)
 80044ec:	6863      	ldr	r3, [r4, #4]
 80044ee:	f003 030c 	and.w	r3, r3, #12
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	d007      	beq.n	8004506 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044f6:	6863      	ldr	r3, [r4, #4]
 80044f8:	f003 030c 	and.w	r3, r3, #12
 80044fc:	2b08      	cmp	r3, #8
 80044fe:	d10c      	bne.n	800451a <HAL_RCC_OscConfig+0x5e>
 8004500:	6863      	ldr	r3, [r4, #4]
 8004502:	03de      	lsls	r6, r3, #15
 8004504:	d509      	bpl.n	800451a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004506:	6823      	ldr	r3, [r4, #0]
 8004508:	039c      	lsls	r4, r3, #14
 800450a:	d5dd      	bpl.n	80044c8 <HAL_RCC_OscConfig+0xc>
 800450c:	686b      	ldr	r3, [r5, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1da      	bne.n	80044c8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8004512:	2001      	movs	r0, #1
}
 8004514:	b002      	add	sp, #8
 8004516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800451a:	686b      	ldr	r3, [r5, #4]
 800451c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004520:	d110      	bne.n	8004544 <HAL_RCC_OscConfig+0x88>
 8004522:	6823      	ldr	r3, [r4, #0]
 8004524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004528:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800452a:	f7ff fe51 	bl	80041d0 <HAL_GetTick>
 800452e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	0398      	lsls	r0, r3, #14
 8004534:	d4c8      	bmi.n	80044c8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004536:	f7ff fe4b 	bl	80041d0 <HAL_GetTick>
 800453a:	1b80      	subs	r0, r0, r6
 800453c:	2864      	cmp	r0, #100	; 0x64
 800453e:	d9f7      	bls.n	8004530 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8004540:	2003      	movs	r0, #3
 8004542:	e7e7      	b.n	8004514 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004544:	b99b      	cbnz	r3, 800456e <HAL_RCC_OscConfig+0xb2>
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800454c:	6023      	str	r3, [r4, #0]
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004554:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004556:	f7ff fe3b 	bl	80041d0 <HAL_GetTick>
 800455a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	0399      	lsls	r1, r3, #14
 8004560:	d5b2      	bpl.n	80044c8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004562:	f7ff fe35 	bl	80041d0 <HAL_GetTick>
 8004566:	1b80      	subs	r0, r0, r6
 8004568:	2864      	cmp	r0, #100	; 0x64
 800456a:	d9f7      	bls.n	800455c <HAL_RCC_OscConfig+0xa0>
 800456c:	e7e8      	b.n	8004540 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800456e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	d103      	bne.n	800457e <HAL_RCC_OscConfig+0xc2>
 8004576:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800457a:	6023      	str	r3, [r4, #0]
 800457c:	e7d1      	b.n	8004522 <HAL_RCC_OscConfig+0x66>
 800457e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004582:	6023      	str	r3, [r4, #0]
 8004584:	6823      	ldr	r3, [r4, #0]
 8004586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800458a:	e7cd      	b.n	8004528 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800458c:	4c67      	ldr	r4, [pc, #412]	; (800472c <HAL_RCC_OscConfig+0x270>)
 800458e:	6863      	ldr	r3, [r4, #4]
 8004590:	f013 0f0c 	tst.w	r3, #12
 8004594:	d007      	beq.n	80045a6 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004596:	6863      	ldr	r3, [r4, #4]
 8004598:	f003 030c 	and.w	r3, r3, #12
 800459c:	2b08      	cmp	r3, #8
 800459e:	d110      	bne.n	80045c2 <HAL_RCC_OscConfig+0x106>
 80045a0:	6863      	ldr	r3, [r4, #4]
 80045a2:	03da      	lsls	r2, r3, #15
 80045a4:	d40d      	bmi.n	80045c2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	079b      	lsls	r3, r3, #30
 80045aa:	d502      	bpl.n	80045b2 <HAL_RCC_OscConfig+0xf6>
 80045ac:	692b      	ldr	r3, [r5, #16]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d1af      	bne.n	8004512 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	696a      	ldr	r2, [r5, #20]
 80045b6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80045ba:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80045be:	6023      	str	r3, [r4, #0]
 80045c0:	e785      	b.n	80044ce <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045c2:	692a      	ldr	r2, [r5, #16]
 80045c4:	4b5a      	ldr	r3, [pc, #360]	; (8004730 <HAL_RCC_OscConfig+0x274>)
 80045c6:	b16a      	cbz	r2, 80045e4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80045c8:	2201      	movs	r2, #1
 80045ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80045cc:	f7ff fe00 	bl	80041d0 <HAL_GetTick>
 80045d0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	079f      	lsls	r7, r3, #30
 80045d6:	d4ec      	bmi.n	80045b2 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045d8:	f7ff fdfa 	bl	80041d0 <HAL_GetTick>
 80045dc:	1b80      	subs	r0, r0, r6
 80045de:	2802      	cmp	r0, #2
 80045e0:	d9f7      	bls.n	80045d2 <HAL_RCC_OscConfig+0x116>
 80045e2:	e7ad      	b.n	8004540 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80045e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80045e6:	f7ff fdf3 	bl	80041d0 <HAL_GetTick>
 80045ea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	0798      	lsls	r0, r3, #30
 80045f0:	f57f af6d 	bpl.w	80044ce <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045f4:	f7ff fdec 	bl	80041d0 <HAL_GetTick>
 80045f8:	1b80      	subs	r0, r0, r6
 80045fa:	2802      	cmp	r0, #2
 80045fc:	d9f6      	bls.n	80045ec <HAL_RCC_OscConfig+0x130>
 80045fe:	e79f      	b.n	8004540 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004600:	69aa      	ldr	r2, [r5, #24]
 8004602:	4c4a      	ldr	r4, [pc, #296]	; (800472c <HAL_RCC_OscConfig+0x270>)
 8004604:	4b4b      	ldr	r3, [pc, #300]	; (8004734 <HAL_RCC_OscConfig+0x278>)
 8004606:	b1da      	cbz	r2, 8004640 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8004608:	2201      	movs	r2, #1
 800460a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800460c:	f7ff fde0 	bl	80041d0 <HAL_GetTick>
 8004610:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004612:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004614:	079b      	lsls	r3, r3, #30
 8004616:	d50d      	bpl.n	8004634 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004618:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800461c:	4b46      	ldr	r3, [pc, #280]	; (8004738 <HAL_RCC_OscConfig+0x27c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	fbb3 f3f2 	udiv	r3, r3, r2
 8004624:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8004626:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8004628:	9b01      	ldr	r3, [sp, #4]
 800462a:	1e5a      	subs	r2, r3, #1
 800462c:	9201      	str	r2, [sp, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1f9      	bne.n	8004626 <HAL_RCC_OscConfig+0x16a>
 8004632:	e750      	b.n	80044d6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004634:	f7ff fdcc 	bl	80041d0 <HAL_GetTick>
 8004638:	1b80      	subs	r0, r0, r6
 800463a:	2802      	cmp	r0, #2
 800463c:	d9e9      	bls.n	8004612 <HAL_RCC_OscConfig+0x156>
 800463e:	e77f      	b.n	8004540 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8004640:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004642:	f7ff fdc5 	bl	80041d0 <HAL_GetTick>
 8004646:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004648:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800464a:	079f      	lsls	r7, r3, #30
 800464c:	f57f af43 	bpl.w	80044d6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004650:	f7ff fdbe 	bl	80041d0 <HAL_GetTick>
 8004654:	1b80      	subs	r0, r0, r6
 8004656:	2802      	cmp	r0, #2
 8004658:	d9f6      	bls.n	8004648 <HAL_RCC_OscConfig+0x18c>
 800465a:	e771      	b.n	8004540 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800465c:	4c33      	ldr	r4, [pc, #204]	; (800472c <HAL_RCC_OscConfig+0x270>)
 800465e:	69e3      	ldr	r3, [r4, #28]
 8004660:	00d8      	lsls	r0, r3, #3
 8004662:	d424      	bmi.n	80046ae <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8004664:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004666:	69e3      	ldr	r3, [r4, #28]
 8004668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800466c:	61e3      	str	r3, [r4, #28]
 800466e:	69e3      	ldr	r3, [r4, #28]
 8004670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004678:	4e30      	ldr	r6, [pc, #192]	; (800473c <HAL_RCC_OscConfig+0x280>)
 800467a:	6833      	ldr	r3, [r6, #0]
 800467c:	05d9      	lsls	r1, r3, #23
 800467e:	d518      	bpl.n	80046b2 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004680:	68eb      	ldr	r3, [r5, #12]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d126      	bne.n	80046d4 <HAL_RCC_OscConfig+0x218>
 8004686:	6a23      	ldr	r3, [r4, #32]
 8004688:	f043 0301 	orr.w	r3, r3, #1
 800468c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800468e:	f7ff fd9f 	bl	80041d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004692:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004696:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004698:	6a23      	ldr	r3, [r4, #32]
 800469a:	079b      	lsls	r3, r3, #30
 800469c:	d53f      	bpl.n	800471e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800469e:	2f00      	cmp	r7, #0
 80046a0:	f43f af1d 	beq.w	80044de <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80046a4:	69e3      	ldr	r3, [r4, #28]
 80046a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046aa:	61e3      	str	r3, [r4, #28]
 80046ac:	e717      	b.n	80044de <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80046ae:	2700      	movs	r7, #0
 80046b0:	e7e2      	b.n	8004678 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046b2:	6833      	ldr	r3, [r6, #0]
 80046b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046b8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80046ba:	f7ff fd89 	bl	80041d0 <HAL_GetTick>
 80046be:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c0:	6833      	ldr	r3, [r6, #0]
 80046c2:	05da      	lsls	r2, r3, #23
 80046c4:	d4dc      	bmi.n	8004680 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046c6:	f7ff fd83 	bl	80041d0 <HAL_GetTick>
 80046ca:	eba0 0008 	sub.w	r0, r0, r8
 80046ce:	2864      	cmp	r0, #100	; 0x64
 80046d0:	d9f6      	bls.n	80046c0 <HAL_RCC_OscConfig+0x204>
 80046d2:	e735      	b.n	8004540 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046d4:	b9ab      	cbnz	r3, 8004702 <HAL_RCC_OscConfig+0x246>
 80046d6:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046d8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046dc:	f023 0301 	bic.w	r3, r3, #1
 80046e0:	6223      	str	r3, [r4, #32]
 80046e2:	6a23      	ldr	r3, [r4, #32]
 80046e4:	f023 0304 	bic.w	r3, r3, #4
 80046e8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80046ea:	f7ff fd71 	bl	80041d0 <HAL_GetTick>
 80046ee:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046f0:	6a23      	ldr	r3, [r4, #32]
 80046f2:	0798      	lsls	r0, r3, #30
 80046f4:	d5d3      	bpl.n	800469e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046f6:	f7ff fd6b 	bl	80041d0 <HAL_GetTick>
 80046fa:	1b80      	subs	r0, r0, r6
 80046fc:	4540      	cmp	r0, r8
 80046fe:	d9f7      	bls.n	80046f0 <HAL_RCC_OscConfig+0x234>
 8004700:	e71e      	b.n	8004540 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004702:	2b05      	cmp	r3, #5
 8004704:	6a23      	ldr	r3, [r4, #32]
 8004706:	d103      	bne.n	8004710 <HAL_RCC_OscConfig+0x254>
 8004708:	f043 0304 	orr.w	r3, r3, #4
 800470c:	6223      	str	r3, [r4, #32]
 800470e:	e7ba      	b.n	8004686 <HAL_RCC_OscConfig+0x1ca>
 8004710:	f023 0301 	bic.w	r3, r3, #1
 8004714:	6223      	str	r3, [r4, #32]
 8004716:	6a23      	ldr	r3, [r4, #32]
 8004718:	f023 0304 	bic.w	r3, r3, #4
 800471c:	e7b6      	b.n	800468c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800471e:	f7ff fd57 	bl	80041d0 <HAL_GetTick>
 8004722:	eba0 0008 	sub.w	r0, r0, r8
 8004726:	42b0      	cmp	r0, r6
 8004728:	d9b6      	bls.n	8004698 <HAL_RCC_OscConfig+0x1dc>
 800472a:	e709      	b.n	8004540 <HAL_RCC_OscConfig+0x84>
 800472c:	40021000 	.word	0x40021000
 8004730:	42420000 	.word	0x42420000
 8004734:	42420480 	.word	0x42420480
 8004738:	20000008 	.word	0x20000008
 800473c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004740:	4c22      	ldr	r4, [pc, #136]	; (80047cc <HAL_RCC_OscConfig+0x310>)
 8004742:	6863      	ldr	r3, [r4, #4]
 8004744:	f003 030c 	and.w	r3, r3, #12
 8004748:	2b08      	cmp	r3, #8
 800474a:	f43f aee2 	beq.w	8004512 <HAL_RCC_OscConfig+0x56>
 800474e:	2300      	movs	r3, #0
 8004750:	4e1f      	ldr	r6, [pc, #124]	; (80047d0 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004752:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8004754:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004756:	d12b      	bne.n	80047b0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8004758:	f7ff fd3a 	bl	80041d0 <HAL_GetTick>
 800475c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	0199      	lsls	r1, r3, #6
 8004762:	d41f      	bmi.n	80047a4 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004764:	6a2b      	ldr	r3, [r5, #32]
 8004766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800476a:	d105      	bne.n	8004778 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800476c:	6862      	ldr	r2, [r4, #4]
 800476e:	68a9      	ldr	r1, [r5, #8]
 8004770:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004774:	430a      	orrs	r2, r1
 8004776:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004778:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800477a:	6862      	ldr	r2, [r4, #4]
 800477c:	430b      	orrs	r3, r1
 800477e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8004782:	4313      	orrs	r3, r2
 8004784:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8004786:	2301      	movs	r3, #1
 8004788:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800478a:	f7ff fd21 	bl	80041d0 <HAL_GetTick>
 800478e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004790:	6823      	ldr	r3, [r4, #0]
 8004792:	019a      	lsls	r2, r3, #6
 8004794:	f53f aea7 	bmi.w	80044e6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004798:	f7ff fd1a 	bl	80041d0 <HAL_GetTick>
 800479c:	1b40      	subs	r0, r0, r5
 800479e:	2802      	cmp	r0, #2
 80047a0:	d9f6      	bls.n	8004790 <HAL_RCC_OscConfig+0x2d4>
 80047a2:	e6cd      	b.n	8004540 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047a4:	f7ff fd14 	bl	80041d0 <HAL_GetTick>
 80047a8:	1bc0      	subs	r0, r0, r7
 80047aa:	2802      	cmp	r0, #2
 80047ac:	d9d7      	bls.n	800475e <HAL_RCC_OscConfig+0x2a2>
 80047ae:	e6c7      	b.n	8004540 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80047b0:	f7ff fd0e 	bl	80041d0 <HAL_GetTick>
 80047b4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047b6:	6823      	ldr	r3, [r4, #0]
 80047b8:	019b      	lsls	r3, r3, #6
 80047ba:	f57f ae94 	bpl.w	80044e6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047be:	f7ff fd07 	bl	80041d0 <HAL_GetTick>
 80047c2:	1b40      	subs	r0, r0, r5
 80047c4:	2802      	cmp	r0, #2
 80047c6:	d9f6      	bls.n	80047b6 <HAL_RCC_OscConfig+0x2fa>
 80047c8:	e6ba      	b.n	8004540 <HAL_RCC_OscConfig+0x84>
 80047ca:	bf00      	nop
 80047cc:	40021000 	.word	0x40021000
 80047d0:	42420060 	.word	0x42420060

080047d4 <HAL_RCC_GetSysClockFreq>:
{
 80047d4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80047d6:	4b19      	ldr	r3, [pc, #100]	; (800483c <HAL_RCC_GetSysClockFreq+0x68>)
{
 80047d8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80047da:	ac02      	add	r4, sp, #8
 80047dc:	f103 0510 	add.w	r5, r3, #16
 80047e0:	4622      	mov	r2, r4
 80047e2:	6818      	ldr	r0, [r3, #0]
 80047e4:	6859      	ldr	r1, [r3, #4]
 80047e6:	3308      	adds	r3, #8
 80047e8:	c203      	stmia	r2!, {r0, r1}
 80047ea:	42ab      	cmp	r3, r5
 80047ec:	4614      	mov	r4, r2
 80047ee:	d1f7      	bne.n	80047e0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80047f0:	2301      	movs	r3, #1
 80047f2:	f88d 3004 	strb.w	r3, [sp, #4]
 80047f6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80047f8:	4911      	ldr	r1, [pc, #68]	; (8004840 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80047fa:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80047fe:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004800:	f003 020c 	and.w	r2, r3, #12
 8004804:	2a08      	cmp	r2, #8
 8004806:	d117      	bne.n	8004838 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004808:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800480c:	a806      	add	r0, sp, #24
 800480e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004810:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004812:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004816:	d50c      	bpl.n	8004832 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004818:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800481a:	480a      	ldr	r0, [pc, #40]	; (8004844 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800481c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004820:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004822:	aa06      	add	r2, sp, #24
 8004824:	4413      	add	r3, r2
 8004826:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800482a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800482e:	b007      	add	sp, #28
 8004830:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004832:	4805      	ldr	r0, [pc, #20]	; (8004848 <HAL_RCC_GetSysClockFreq+0x74>)
 8004834:	4350      	muls	r0, r2
 8004836:	e7fa      	b.n	800482e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8004838:	4802      	ldr	r0, [pc, #8]	; (8004844 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800483a:	e7f8      	b.n	800482e <HAL_RCC_GetSysClockFreq+0x5a>
 800483c:	08005e44 	.word	0x08005e44
 8004840:	40021000 	.word	0x40021000
 8004844:	007a1200 	.word	0x007a1200
 8004848:	003d0900 	.word	0x003d0900

0800484c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800484c:	4a54      	ldr	r2, [pc, #336]	; (80049a0 <HAL_RCC_ClockConfig+0x154>)
{
 800484e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004852:	6813      	ldr	r3, [r2, #0]
{
 8004854:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	428b      	cmp	r3, r1
{
 800485c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800485e:	d32a      	bcc.n	80048b6 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004860:	6829      	ldr	r1, [r5, #0]
 8004862:	078c      	lsls	r4, r1, #30
 8004864:	d434      	bmi.n	80048d0 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004866:	07ca      	lsls	r2, r1, #31
 8004868:	d447      	bmi.n	80048fa <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800486a:	4a4d      	ldr	r2, [pc, #308]	; (80049a0 <HAL_RCC_ClockConfig+0x154>)
 800486c:	6813      	ldr	r3, [r2, #0]
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	429e      	cmp	r6, r3
 8004874:	f0c0 8082 	bcc.w	800497c <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004878:	682a      	ldr	r2, [r5, #0]
 800487a:	4c4a      	ldr	r4, [pc, #296]	; (80049a4 <HAL_RCC_ClockConfig+0x158>)
 800487c:	f012 0f04 	tst.w	r2, #4
 8004880:	f040 8087 	bne.w	8004992 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004884:	0713      	lsls	r3, r2, #28
 8004886:	d506      	bpl.n	8004896 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004888:	6863      	ldr	r3, [r4, #4]
 800488a:	692a      	ldr	r2, [r5, #16]
 800488c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004890:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004894:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004896:	f7ff ff9d 	bl	80047d4 <HAL_RCC_GetSysClockFreq>
 800489a:	6863      	ldr	r3, [r4, #4]
 800489c:	4a42      	ldr	r2, [pc, #264]	; (80049a8 <HAL_RCC_ClockConfig+0x15c>)
 800489e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80048a2:	5cd3      	ldrb	r3, [r2, r3]
 80048a4:	40d8      	lsrs	r0, r3
 80048a6:	4b41      	ldr	r3, [pc, #260]	; (80049ac <HAL_RCC_ClockConfig+0x160>)
 80048a8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80048aa:	2000      	movs	r0, #0
 80048ac:	f7ff fc4e 	bl	800414c <HAL_InitTick>
  return HAL_OK;
 80048b0:	2000      	movs	r0, #0
}
 80048b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b6:	6813      	ldr	r3, [r2, #0]
 80048b8:	f023 0307 	bic.w	r3, r3, #7
 80048bc:	430b      	orrs	r3, r1
 80048be:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80048c0:	6813      	ldr	r3, [r2, #0]
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	4299      	cmp	r1, r3
 80048c8:	d0ca      	beq.n	8004860 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80048ca:	2001      	movs	r0, #1
 80048cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048d0:	4b34      	ldr	r3, [pc, #208]	; (80049a4 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048d6:	bf1e      	ittt	ne
 80048d8:	685a      	ldrne	r2, [r3, #4]
 80048da:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80048de:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048e2:	bf42      	ittt	mi
 80048e4:	685a      	ldrmi	r2, [r3, #4]
 80048e6:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80048ea:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	68a8      	ldr	r0, [r5, #8]
 80048f0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80048f4:	4302      	orrs	r2, r0
 80048f6:	605a      	str	r2, [r3, #4]
 80048f8:	e7b5      	b.n	8004866 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048fa:	686a      	ldr	r2, [r5, #4]
 80048fc:	4c29      	ldr	r4, [pc, #164]	; (80049a4 <HAL_RCC_ClockConfig+0x158>)
 80048fe:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004900:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004902:	d11c      	bne.n	800493e <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004904:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004908:	d0df      	beq.n	80048ca <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800490a:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800490c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004910:	f023 0303 	bic.w	r3, r3, #3
 8004914:	4313      	orrs	r3, r2
 8004916:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8004918:	f7ff fc5a 	bl	80041d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800491c:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800491e:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004920:	2b01      	cmp	r3, #1
 8004922:	d114      	bne.n	800494e <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004924:	6863      	ldr	r3, [r4, #4]
 8004926:	f003 030c 	and.w	r3, r3, #12
 800492a:	2b04      	cmp	r3, #4
 800492c:	d09d      	beq.n	800486a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800492e:	f7ff fc4f 	bl	80041d0 <HAL_GetTick>
 8004932:	1bc0      	subs	r0, r0, r7
 8004934:	4540      	cmp	r0, r8
 8004936:	d9f5      	bls.n	8004924 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8004938:	2003      	movs	r0, #3
 800493a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800493e:	2a02      	cmp	r2, #2
 8004940:	d102      	bne.n	8004948 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004942:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004946:	e7df      	b.n	8004908 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004948:	f013 0f02 	tst.w	r3, #2
 800494c:	e7dc      	b.n	8004908 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800494e:	2b02      	cmp	r3, #2
 8004950:	d10f      	bne.n	8004972 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004952:	6863      	ldr	r3, [r4, #4]
 8004954:	f003 030c 	and.w	r3, r3, #12
 8004958:	2b08      	cmp	r3, #8
 800495a:	d086      	beq.n	800486a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800495c:	f7ff fc38 	bl	80041d0 <HAL_GetTick>
 8004960:	1bc0      	subs	r0, r0, r7
 8004962:	4540      	cmp	r0, r8
 8004964:	d9f5      	bls.n	8004952 <HAL_RCC_ClockConfig+0x106>
 8004966:	e7e7      	b.n	8004938 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004968:	f7ff fc32 	bl	80041d0 <HAL_GetTick>
 800496c:	1bc0      	subs	r0, r0, r7
 800496e:	4540      	cmp	r0, r8
 8004970:	d8e2      	bhi.n	8004938 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004972:	6863      	ldr	r3, [r4, #4]
 8004974:	f013 0f0c 	tst.w	r3, #12
 8004978:	d1f6      	bne.n	8004968 <HAL_RCC_ClockConfig+0x11c>
 800497a:	e776      	b.n	800486a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497c:	6813      	ldr	r3, [r2, #0]
 800497e:	f023 0307 	bic.w	r3, r3, #7
 8004982:	4333      	orrs	r3, r6
 8004984:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004986:	6813      	ldr	r3, [r2, #0]
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	429e      	cmp	r6, r3
 800498e:	d19c      	bne.n	80048ca <HAL_RCC_ClockConfig+0x7e>
 8004990:	e772      	b.n	8004878 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004992:	6863      	ldr	r3, [r4, #4]
 8004994:	68e9      	ldr	r1, [r5, #12]
 8004996:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800499a:	430b      	orrs	r3, r1
 800499c:	6063      	str	r3, [r4, #4]
 800499e:	e771      	b.n	8004884 <HAL_RCC_ClockConfig+0x38>
 80049a0:	40022000 	.word	0x40022000
 80049a4:	40021000 	.word	0x40021000
 80049a8:	08005e7a 	.word	0x08005e7a
 80049ac:	20000008 	.word	0x20000008

080049b0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049b0:	4b04      	ldr	r3, [pc, #16]	; (80049c4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80049b2:	4a05      	ldr	r2, [pc, #20]	; (80049c8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80049ba:	5cd3      	ldrb	r3, [r2, r3]
 80049bc:	4a03      	ldr	r2, [pc, #12]	; (80049cc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80049be:	6810      	ldr	r0, [r2, #0]
}    
 80049c0:	40d8      	lsrs	r0, r3
 80049c2:	4770      	bx	lr
 80049c4:	40021000 	.word	0x40021000
 80049c8:	08005e8a 	.word	0x08005e8a
 80049cc:	20000008 	.word	0x20000008

080049d0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049d0:	4b04      	ldr	r3, [pc, #16]	; (80049e4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80049d2:	4a05      	ldr	r2, [pc, #20]	; (80049e8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80049da:	5cd3      	ldrb	r3, [r2, r3]
 80049dc:	4a03      	ldr	r2, [pc, #12]	; (80049ec <HAL_RCC_GetPCLK2Freq+0x1c>)
 80049de:	6810      	ldr	r0, [r2, #0]
} 
 80049e0:	40d8      	lsrs	r0, r3
 80049e2:	4770      	bx	lr
 80049e4:	40021000 	.word	0x40021000
 80049e8:	08005e8a 	.word	0x08005e8a
 80049ec:	20000008 	.word	0x20000008

080049f0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049f4:	6805      	ldr	r5, [r0, #0]
 80049f6:	68c2      	ldr	r2, [r0, #12]
 80049f8:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80049fa:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004a00:	4313      	orrs	r3, r2
 8004a02:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a04:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8004a06:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a08:	430b      	orrs	r3, r1
 8004a0a:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8004a0c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8004a10:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a14:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a1a:	696b      	ldr	r3, [r5, #20]
 8004a1c:	6982      	ldr	r2, [r0, #24]
 8004a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a22:	4313      	orrs	r3, r2
 8004a24:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004a26:	4b40      	ldr	r3, [pc, #256]	; (8004b28 <UART_SetConfig+0x138>)
{
 8004a28:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8004a2a:	429d      	cmp	r5, r3
 8004a2c:	f04f 0419 	mov.w	r4, #25
 8004a30:	d146      	bne.n	8004ac0 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004a32:	f7ff ffcd 	bl	80049d0 <HAL_RCC_GetPCLK2Freq>
 8004a36:	fb04 f300 	mul.w	r3, r4, r0
 8004a3a:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8004a3e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8004a42:	00b6      	lsls	r6, r6, #2
 8004a44:	fbb3 f3f6 	udiv	r3, r3, r6
 8004a48:	fbb3 f3f8 	udiv	r3, r3, r8
 8004a4c:	011e      	lsls	r6, r3, #4
 8004a4e:	f7ff ffbf 	bl	80049d0 <HAL_RCC_GetPCLK2Freq>
 8004a52:	4360      	muls	r0, r4
 8004a54:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	fbb0 f7f3 	udiv	r7, r0, r3
 8004a5e:	f7ff ffb7 	bl	80049d0 <HAL_RCC_GetPCLK2Freq>
 8004a62:	4360      	muls	r0, r4
 8004a64:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a6e:	fbb3 f3f8 	udiv	r3, r3, r8
 8004a72:	fb08 7313 	mls	r3, r8, r3, r7
 8004a76:	011b      	lsls	r3, r3, #4
 8004a78:	3332      	adds	r3, #50	; 0x32
 8004a7a:	fbb3 f3f8 	udiv	r3, r3, r8
 8004a7e:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8004a82:	f7ff ffa5 	bl	80049d0 <HAL_RCC_GetPCLK2Freq>
 8004a86:	4360      	muls	r0, r4
 8004a88:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8004a8c:	0092      	lsls	r2, r2, #2
 8004a8e:	fbb0 faf2 	udiv	sl, r0, r2
 8004a92:	f7ff ff9d 	bl	80049d0 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004a96:	4360      	muls	r0, r4
 8004a98:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aa2:	fbb3 f3f8 	udiv	r3, r3, r8
 8004aa6:	fb08 a313 	mls	r3, r8, r3, sl
 8004aaa:	011b      	lsls	r3, r3, #4
 8004aac:	3332      	adds	r3, #50	; 0x32
 8004aae:	fbb3 f3f8 	udiv	r3, r3, r8
 8004ab2:	f003 030f 	and.w	r3, r3, #15
 8004ab6:	433b      	orrs	r3, r7
 8004ab8:	4433      	add	r3, r6
 8004aba:	60ab      	str	r3, [r5, #8]
 8004abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac0:	f7ff ff76 	bl	80049b0 <HAL_RCC_GetPCLK1Freq>
 8004ac4:	fb04 f300 	mul.w	r3, r4, r0
 8004ac8:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8004acc:	f04f 0864 	mov.w	r8, #100	; 0x64
 8004ad0:	00b6      	lsls	r6, r6, #2
 8004ad2:	fbb3 f3f6 	udiv	r3, r3, r6
 8004ad6:	fbb3 f3f8 	udiv	r3, r3, r8
 8004ada:	011e      	lsls	r6, r3, #4
 8004adc:	f7ff ff68 	bl	80049b0 <HAL_RCC_GetPCLK1Freq>
 8004ae0:	4360      	muls	r0, r4
 8004ae2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	fbb0 f7f3 	udiv	r7, r0, r3
 8004aec:	f7ff ff60 	bl	80049b0 <HAL_RCC_GetPCLK1Freq>
 8004af0:	4360      	muls	r0, r4
 8004af2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004afc:	fbb3 f3f8 	udiv	r3, r3, r8
 8004b00:	fb08 7313 	mls	r3, r8, r3, r7
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	3332      	adds	r3, #50	; 0x32
 8004b08:	fbb3 f3f8 	udiv	r3, r3, r8
 8004b0c:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8004b10:	f7ff ff4e 	bl	80049b0 <HAL_RCC_GetPCLK1Freq>
 8004b14:	4360      	muls	r0, r4
 8004b16:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8004b1a:	0092      	lsls	r2, r2, #2
 8004b1c:	fbb0 faf2 	udiv	sl, r0, r2
 8004b20:	f7ff ff46 	bl	80049b0 <HAL_RCC_GetPCLK1Freq>
 8004b24:	e7b7      	b.n	8004a96 <UART_SetConfig+0xa6>
 8004b26:	bf00      	nop
 8004b28:	40013800 	.word	0x40013800

08004b2c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8004b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2e:	4604      	mov	r4, r0
 8004b30:	460e      	mov	r6, r1
 8004b32:	4617      	mov	r7, r2
 8004b34:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8004b36:	6821      	ldr	r1, [r4, #0]
 8004b38:	680b      	ldr	r3, [r1, #0]
 8004b3a:	ea36 0303 	bics.w	r3, r6, r3
 8004b3e:	d101      	bne.n	8004b44 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8004b40:	2000      	movs	r0, #0
}
 8004b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8004b44:	1c6b      	adds	r3, r5, #1
 8004b46:	d0f7      	beq.n	8004b38 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004b48:	b995      	cbnz	r5, 8004b70 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b4a:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8004b4c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b54:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b56:	695a      	ldr	r2, [r3, #20]
 8004b58:	f022 0201 	bic.w	r2, r2, #1
 8004b5c:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8004b5e:	2320      	movs	r3, #32
 8004b60:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004b64:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8004b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004b70:	f7ff fb2e 	bl	80041d0 <HAL_GetTick>
 8004b74:	1bc0      	subs	r0, r0, r7
 8004b76:	4285      	cmp	r5, r0
 8004b78:	d2dd      	bcs.n	8004b36 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8004b7a:	e7e6      	b.n	8004b4a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08004b7c <HAL_UART_Init>:
{
 8004b7c:	b510      	push	{r4, lr}
  if(huart == NULL)
 8004b7e:	4604      	mov	r4, r0
 8004b80:	b340      	cbz	r0, 8004bd4 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8004b82:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004b86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004b8a:	b91b      	cbnz	r3, 8004b94 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8004b8c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8004b90:	f000 f958 	bl	8004e44 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8004b94:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004b96:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004b98:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8004b9c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8004b9e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8004ba0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ba4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004ba6:	f7ff ff23 	bl	80049f0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004baa:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bac:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bae:	691a      	ldr	r2, [r3, #16]
 8004bb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bb6:	695a      	ldr	r2, [r3, #20]
 8004bb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bbc:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bc4:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8004bc6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8004bca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8004bce:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8004bd2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004bd4:	2001      	movs	r0, #1
}
 8004bd6:	bd10      	pop	{r4, pc}

08004bd8 <HAL_UART_Transmit>:
{
 8004bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bdc:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8004bde:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8004be2:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8004be4:	2b20      	cmp	r3, #32
{
 8004be6:	460d      	mov	r5, r1
 8004be8:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8004bea:	d14e      	bne.n	8004c8a <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8004bec:	2900      	cmp	r1, #0
 8004bee:	d049      	beq.n	8004c84 <HAL_UART_Transmit+0xac>
 8004bf0:	2a00      	cmp	r2, #0
 8004bf2:	d047      	beq.n	8004c84 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8004bf4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d046      	beq.n	8004c8a <HAL_UART_Transmit+0xb2>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c02:	2300      	movs	r3, #0
 8004c04:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c06:	2321      	movs	r3, #33	; 0x21
 8004c08:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8004c0c:	f7ff fae0 	bl	80041d0 <HAL_GetTick>
 8004c10:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8004c12:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c16:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8004c1a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	b96b      	cbnz	r3, 8004c3c <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c20:	463b      	mov	r3, r7
 8004c22:	4632      	mov	r2, r6
 8004c24:	2140      	movs	r1, #64	; 0x40
 8004c26:	4620      	mov	r0, r4
 8004c28:	f7ff ff80 	bl	8004b2c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8004c2c:	b9a8      	cbnz	r0, 8004c5a <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8004c2e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8004c30:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8004c34:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8004c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8004c3c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c3e:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8004c40:	3b01      	subs	r3, #1
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c46:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c48:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c4e:	4620      	mov	r0, r4
 8004c50:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c52:	d10e      	bne.n	8004c72 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c54:	f7ff ff6a 	bl	8004b2c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8004c58:	b110      	cbz	r0, 8004c60 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8004c5a:	2003      	movs	r0, #3
 8004c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004c60:	882b      	ldrh	r3, [r5, #0]
 8004c62:	6822      	ldr	r2, [r4, #0]
 8004c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c68:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8004c6a:	6923      	ldr	r3, [r4, #16]
 8004c6c:	b943      	cbnz	r3, 8004c80 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8004c6e:	3502      	adds	r5, #2
 8004c70:	e7d3      	b.n	8004c1a <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c72:	f7ff ff5b 	bl	8004b2c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8004c76:	2800      	cmp	r0, #0
 8004c78:	d1ef      	bne.n	8004c5a <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	782a      	ldrb	r2, [r5, #0]
 8004c7e:	605a      	str	r2, [r3, #4]
 8004c80:	3501      	adds	r5, #1
 8004c82:	e7ca      	b.n	8004c1a <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8004c84:	2001      	movs	r0, #1
 8004c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004c8a:	2002      	movs	r0, #2
}
 8004c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004c90 <_write>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
{
 8004c90:	b510      	push	{r4, lr}
 8004c92:	4614      	mov	r4, r2

  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 10);
 8004c94:	230a      	movs	r3, #10
 8004c96:	b292      	uxth	r2, r2
 8004c98:	4802      	ldr	r0, [pc, #8]	; (8004ca4 <_write+0x14>)
 8004c9a:	f7ff ff9d 	bl	8004bd8 <HAL_UART_Transmit>
  //HAL_UART_Transmit(&UartHandle, (uint8_t*)ptr, len, 10);
  return len;
}
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	bd10      	pop	{r4, pc}
 8004ca2:	bf00      	nop
 8004ca4:	2000009c 	.word	0x2000009c

08004ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004ca8:	b510      	push	{r4, lr}
 8004caa:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004cac:	2228      	movs	r2, #40	; 0x28
 8004cae:	2100      	movs	r1, #0
 8004cb0:	a806      	add	r0, sp, #24
 8004cb2:	f000 f9af 	bl	8005014 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004cb6:	2214      	movs	r2, #20
 8004cb8:	2100      	movs	r1, #0
 8004cba:	a801      	add	r0, sp, #4
 8004cbc:	f000 f9aa 	bl	8005014 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004cc4:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004cc6:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004cc8:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8004cca:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004cce:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8004cd0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004cd2:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004cd4:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004cd6:	f7ff fbf1 	bl	80044bc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004cda:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004cdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ce0:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ce2:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004ce4:	4621      	mov	r1, r4
 8004ce6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ce8:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004cea:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004cec:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004cee:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004cf0:	f7ff fdac 	bl	800484c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8004cf4:	b010      	add	sp, #64	; 0x40
 8004cf6:	bd10      	pop	{r4, pc}

08004cf8 <main>:
{
 8004cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cfa:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8004cfc:	f7ff fa4a 	bl	8004194 <HAL_Init>
  SystemClock_Config();
 8004d00:	f7ff ffd2 	bl	8004ca8 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d04:	2210      	movs	r2, #16
 8004d06:	2100      	movs	r1, #0
 8004d08:	eb0d 0002 	add.w	r0, sp, r2
 8004d0c:	f000 f982 	bl	8005014 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d10:	4b34      	ldr	r3, [pc, #208]	; (8004de4 <main+0xec>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004d12:	2120      	movs	r1, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d14:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004d16:	4834      	ldr	r0, [pc, #208]	; (8004de8 <main+0xf0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d18:	f042 0210 	orr.w	r2, r2, #16
 8004d1c:	619a      	str	r2, [r3, #24]
 8004d1e:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d20:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d22:	f002 0210 	and.w	r2, r2, #16
 8004d26:	9200      	str	r2, [sp, #0]
 8004d28:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d2a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8004d2c:	4f2e      	ldr	r7, [pc, #184]	; (8004de8 <main+0xf0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d2e:	f042 0220 	orr.w	r2, r2, #32
 8004d32:	619a      	str	r2, [r3, #24]
 8004d34:	699a      	ldr	r2, [r3, #24]
    printf("This is IAP Application.bin 0x%02x \r\n", i++);
 8004d36:	4e2d      	ldr	r6, [pc, #180]	; (8004dec <main+0xf4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d38:	f002 0220 	and.w	r2, r2, #32
 8004d3c:	9201      	str	r2, [sp, #4]
 8004d3e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d40:	699a      	ldr	r2, [r3, #24]
 8004d42:	f042 0204 	orr.w	r2, r2, #4
 8004d46:	619a      	str	r2, [r3, #24]
 8004d48:	699a      	ldr	r2, [r3, #24]
 8004d4a:	f002 0204 	and.w	r2, r2, #4
 8004d4e:	9202      	str	r2, [sp, #8]
 8004d50:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d52:	699a      	ldr	r2, [r3, #24]
 8004d54:	f042 0208 	orr.w	r2, r2, #8
 8004d58:	619a      	str	r2, [r3, #24]
 8004d5a:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004d5c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d5e:	f003 0308 	and.w	r3, r3, #8
 8004d62:	9303      	str	r3, [sp, #12]
 8004d64:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004d66:	f7ff fb93 	bl	8004490 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8004d6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d6e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d70:	4b1f      	ldr	r3, [pc, #124]	; (8004df0 <main+0xf8>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004d72:	a904      	add	r1, sp, #16
 8004d74:	481f      	ldr	r0, [pc, #124]	; (8004df4 <main+0xfc>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d76:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d78:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004d7a:	f7ff faa9 	bl	80042d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004d7e:	2320      	movs	r3, #32
 8004d80:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d82:	2301      	movs	r3, #1
 8004d84:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d86:	2302      	movs	r3, #2
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004d88:	a904      	add	r1, sp, #16
 8004d8a:	4817      	ldr	r0, [pc, #92]	; (8004de8 <main+0xf0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d8c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d8e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004d90:	f7ff fa9e 	bl	80042d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004d94:	4622      	mov	r2, r4
 8004d96:	4621      	mov	r1, r4
 8004d98:	2028      	movs	r0, #40	; 0x28
 8004d9a:	f7ff fa43 	bl	8004224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004d9e:	2028      	movs	r0, #40	; 0x28
 8004da0:	f7ff fa74 	bl	800428c <HAL_NVIC_EnableIRQ>
  huart2.Init.BaudRate = 115200;
 8004da4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Instance = USART2;
 8004da8:	4813      	ldr	r0, [pc, #76]	; (8004df8 <main+0x100>)
  huart2.Init.BaudRate = 115200;
 8004daa:	4a14      	ldr	r2, [pc, #80]	; (8004dfc <main+0x104>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004dac:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8004dae:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004db2:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004db4:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004db6:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004db8:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004dba:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004dbc:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004dbe:	f7ff fedd 	bl	8004b7c <HAL_UART_Init>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8004dc2:	2120      	movs	r1, #32
 8004dc4:	4638      	mov	r0, r7
 8004dc6:	f7ff fb68 	bl	800449a <HAL_GPIO_TogglePin>
    printf("This is IAP Application.bin 0x%02x \r\n", i++);
 8004dca:	1c65      	adds	r5, r4, #1
 8004dcc:	4621      	mov	r1, r4
 8004dce:	4630      	mov	r0, r6
 8004dd0:	f000 f928 	bl	8005024 <iprintf>
 8004dd4:	b2ed      	uxtb	r5, r5
    HAL_Delay(1000);
 8004dd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004dda:	f7ff f9ff 	bl	80041dc <HAL_Delay>
    printf("This is IAP Application.bin 0x%02x \r\n", i++);
 8004dde:	462c      	mov	r4, r5
 8004de0:	e7ef      	b.n	8004dc2 <main+0xca>
 8004de2:	bf00      	nop
 8004de4:	40021000 	.word	0x40021000
 8004de8:	40010800 	.word	0x40010800
 8004dec:	08005e54 	.word	0x08005e54
 8004df0:	10110000 	.word	0x10110000
 8004df4:	40011000 	.word	0x40011000
 8004df8:	2000009c 	.word	0x2000009c
 8004dfc:	40004400 	.word	0x40004400

08004e00 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004e00:	4b0e      	ldr	r3, [pc, #56]	; (8004e3c <HAL_MspInit+0x3c>)
{
 8004e02:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004e04:	699a      	ldr	r2, [r3, #24]
 8004e06:	f042 0201 	orr.w	r2, r2, #1
 8004e0a:	619a      	str	r2, [r3, #24]
 8004e0c:	699a      	ldr	r2, [r3, #24]
 8004e0e:	f002 0201 	and.w	r2, r2, #1
 8004e12:	9200      	str	r2, [sp, #0]
 8004e14:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e16:	69da      	ldr	r2, [r3, #28]
 8004e18:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004e1c:	61da      	str	r2, [r3, #28]
 8004e1e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004e20:	4a07      	ldr	r2, [pc, #28]	; (8004e40 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e26:	9301      	str	r3, [sp, #4]
 8004e28:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004e2a:	6853      	ldr	r3, [r2, #4]
 8004e2c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004e30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e36:	b002      	add	sp, #8
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	40010000 	.word	0x40010000

08004e44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e44:	b510      	push	{r4, lr}
 8004e46:	4604      	mov	r4, r0
 8004e48:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e4a:	2210      	movs	r2, #16
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	a802      	add	r0, sp, #8
 8004e50:	f000 f8e0 	bl	8005014 <memset>
  if(huart->Instance==USART2)
 8004e54:	6822      	ldr	r2, [r4, #0]
 8004e56:	4b11      	ldr	r3, [pc, #68]	; (8004e9c <HAL_UART_MspInit+0x58>)
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d11c      	bne.n	8004e96 <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004e5c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8004e60:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e62:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8004e64:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004e68:	61da      	str	r2, [r3, #28]
 8004e6a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e6c:	480c      	ldr	r0, [pc, #48]	; (8004ea0 <HAL_UART_MspInit+0x5c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8004e6e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004e72:	9200      	str	r2, [sp, #0]
 8004e74:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e76:	699a      	ldr	r2, [r3, #24]
 8004e78:	f042 0204 	orr.w	r2, r2, #4
 8004e7c:	619a      	str	r2, [r3, #24]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	9301      	str	r3, [sp, #4]
 8004e86:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004e88:	230c      	movs	r3, #12
 8004e8a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e90:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e92:	f7ff fa1d 	bl	80042d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004e96:	b006      	add	sp, #24
 8004e98:	bd10      	pop	{r4, pc}
 8004e9a:	bf00      	nop
 8004e9c:	40004400 	.word	0x40004400
 8004ea0:	40010800 	.word	0x40010800

08004ea4 <NMI_Handler>:
 8004ea4:	4770      	bx	lr

08004ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ea6:	e7fe      	b.n	8004ea6 <HardFault_Handler>

08004ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ea8:	e7fe      	b.n	8004ea8 <MemManage_Handler>

08004eaa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004eaa:	e7fe      	b.n	8004eaa <BusFault_Handler>

08004eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004eac:	e7fe      	b.n	8004eac <UsageFault_Handler>

08004eae <SVC_Handler>:
 8004eae:	4770      	bx	lr

08004eb0 <DebugMon_Handler>:
 8004eb0:	4770      	bx	lr

08004eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004eb2:	4770      	bx	lr

08004eb4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004eb4:	f7ff b980 	b.w	80041b8 <HAL_IncTick>

08004eb8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004eb8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004ebc:	f7ff baf2 	b.w	80044a4 <HAL_GPIO_EXTI_IRQHandler>

08004ec0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ec0:	b570      	push	{r4, r5, r6, lr}
 8004ec2:	460e      	mov	r6, r1
 8004ec4:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ec6:	460c      	mov	r4, r1
 8004ec8:	1ba3      	subs	r3, r4, r6
 8004eca:	429d      	cmp	r5, r3
 8004ecc:	dc01      	bgt.n	8004ed2 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8004ece:	4628      	mov	r0, r5
 8004ed0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8004ed2:	f3af 8000 	nop.w
 8004ed6:	f804 0b01 	strb.w	r0, [r4], #1
 8004eda:	e7f5      	b.n	8004ec8 <_read+0x8>

08004edc <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8004edc:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004ede:	4b0a      	ldr	r3, [pc, #40]	; (8004f08 <_sbrk+0x2c>)
{
 8004ee0:	4602      	mov	r2, r0
	if (heap_end == 0)
 8004ee2:	6819      	ldr	r1, [r3, #0]
 8004ee4:	b909      	cbnz	r1, 8004eea <_sbrk+0xe>
		heap_end = &end;
 8004ee6:	4909      	ldr	r1, [pc, #36]	; (8004f0c <_sbrk+0x30>)
 8004ee8:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8004eea:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8004eec:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8004eee:	4402      	add	r2, r0
 8004ef0:	428a      	cmp	r2, r1
 8004ef2:	d906      	bls.n	8004f02 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004ef4:	f000 f864 	bl	8004fc0 <__errno>
 8004ef8:	230c      	movs	r3, #12
 8004efa:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004efc:	f04f 30ff 	mov.w	r0, #4294967295
 8004f00:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8004f02:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8004f04:	bd08      	pop	{r3, pc}
 8004f06:	bf00      	nop
 8004f08:	2000008c 	.word	0x2000008c
 8004f0c:	200000e0 	.word	0x200000e0

08004f10 <_close>:

int _close(int file)
{
	return -1;
}
 8004f10:	f04f 30ff 	mov.w	r0, #4294967295
 8004f14:	4770      	bx	lr

08004f16 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004f16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8004f1a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8004f1c:	604b      	str	r3, [r1, #4]
}
 8004f1e:	4770      	bx	lr

08004f20 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004f20:	2001      	movs	r0, #1
 8004f22:	4770      	bx	lr

08004f24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004f24:	2000      	movs	r0, #0
 8004f26:	4770      	bx	lr

08004f28 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004f28:	4b0e      	ldr	r3, [pc, #56]	; (8004f64 <SystemInit+0x3c>)
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	f042 0201 	orr.w	r2, r2, #1
 8004f30:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004f32:	6859      	ldr	r1, [r3, #4]
 8004f34:	4a0c      	ldr	r2, [pc, #48]	; (8004f68 <SystemInit+0x40>)
 8004f36:	400a      	ands	r2, r1
 8004f38:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004f40:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004f44:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f4c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004f54:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004f56:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004f5a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004f5c:	4a03      	ldr	r2, [pc, #12]	; (8004f6c <SystemInit+0x44>)
 8004f5e:	4b04      	ldr	r3, [pc, #16]	; (8004f70 <SystemInit+0x48>)
 8004f60:	609a      	str	r2, [r3, #8]
 8004f62:	4770      	bx	lr
 8004f64:	40021000 	.word	0x40021000
 8004f68:	f8ff0000 	.word	0xf8ff0000
 8004f6c:	08004000 	.word	0x08004000
 8004f70:	e000ed00 	.word	0xe000ed00

08004f74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004f74:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004f76:	e003      	b.n	8004f80 <LoopCopyDataInit>

08004f78 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004f78:	4b0b      	ldr	r3, [pc, #44]	; (8004fa8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004f7a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004f7c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004f7e:	3104      	adds	r1, #4

08004f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004f80:	480a      	ldr	r0, [pc, #40]	; (8004fac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004f82:	4b0b      	ldr	r3, [pc, #44]	; (8004fb0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004f84:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004f86:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004f88:	d3f6      	bcc.n	8004f78 <CopyDataInit>
  ldr r2, =_sbss
 8004f8a:	4a0a      	ldr	r2, [pc, #40]	; (8004fb4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004f8c:	e002      	b.n	8004f94 <LoopFillZerobss>

08004f8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004f8e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004f90:	f842 3b04 	str.w	r3, [r2], #4

08004f94 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004f94:	4b08      	ldr	r3, [pc, #32]	; (8004fb8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004f96:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004f98:	d3f9      	bcc.n	8004f8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004f9a:	f7ff ffc5 	bl	8004f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f9e:	f000 f815 	bl	8004fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004fa2:	f7ff fea9 	bl	8004cf8 <main>
  bx lr
 8004fa6:	4770      	bx	lr
  ldr r3, =_sidata
 8004fa8:	08005f34 	.word	0x08005f34
  ldr r0, =_sdata
 8004fac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004fb0:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8004fb4:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8004fb8:	200000e0 	.word	0x200000e0

08004fbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004fbc:	e7fe      	b.n	8004fbc <ADC1_2_IRQHandler>
	...

08004fc0 <__errno>:
 8004fc0:	4b01      	ldr	r3, [pc, #4]	; (8004fc8 <__errno+0x8>)
 8004fc2:	6818      	ldr	r0, [r3, #0]
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	2000000c 	.word	0x2000000c

08004fcc <__libc_init_array>:
 8004fcc:	b570      	push	{r4, r5, r6, lr}
 8004fce:	2500      	movs	r5, #0
 8004fd0:	4e0c      	ldr	r6, [pc, #48]	; (8005004 <__libc_init_array+0x38>)
 8004fd2:	4c0d      	ldr	r4, [pc, #52]	; (8005008 <__libc_init_array+0x3c>)
 8004fd4:	1ba4      	subs	r4, r4, r6
 8004fd6:	10a4      	asrs	r4, r4, #2
 8004fd8:	42a5      	cmp	r5, r4
 8004fda:	d109      	bne.n	8004ff0 <__libc_init_array+0x24>
 8004fdc:	f000 ff26 	bl	8005e2c <_init>
 8004fe0:	2500      	movs	r5, #0
 8004fe2:	4e0a      	ldr	r6, [pc, #40]	; (800500c <__libc_init_array+0x40>)
 8004fe4:	4c0a      	ldr	r4, [pc, #40]	; (8005010 <__libc_init_array+0x44>)
 8004fe6:	1ba4      	subs	r4, r4, r6
 8004fe8:	10a4      	asrs	r4, r4, #2
 8004fea:	42a5      	cmp	r5, r4
 8004fec:	d105      	bne.n	8004ffa <__libc_init_array+0x2e>
 8004fee:	bd70      	pop	{r4, r5, r6, pc}
 8004ff0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ff4:	4798      	blx	r3
 8004ff6:	3501      	adds	r5, #1
 8004ff8:	e7ee      	b.n	8004fd8 <__libc_init_array+0xc>
 8004ffa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ffe:	4798      	blx	r3
 8005000:	3501      	adds	r5, #1
 8005002:	e7f2      	b.n	8004fea <__libc_init_array+0x1e>
 8005004:	08005f2c 	.word	0x08005f2c
 8005008:	08005f2c 	.word	0x08005f2c
 800500c:	08005f2c 	.word	0x08005f2c
 8005010:	08005f30 	.word	0x08005f30

08005014 <memset>:
 8005014:	4603      	mov	r3, r0
 8005016:	4402      	add	r2, r0
 8005018:	4293      	cmp	r3, r2
 800501a:	d100      	bne.n	800501e <memset+0xa>
 800501c:	4770      	bx	lr
 800501e:	f803 1b01 	strb.w	r1, [r3], #1
 8005022:	e7f9      	b.n	8005018 <memset+0x4>

08005024 <iprintf>:
 8005024:	b40f      	push	{r0, r1, r2, r3}
 8005026:	4b0a      	ldr	r3, [pc, #40]	; (8005050 <iprintf+0x2c>)
 8005028:	b513      	push	{r0, r1, r4, lr}
 800502a:	681c      	ldr	r4, [r3, #0]
 800502c:	b124      	cbz	r4, 8005038 <iprintf+0x14>
 800502e:	69a3      	ldr	r3, [r4, #24]
 8005030:	b913      	cbnz	r3, 8005038 <iprintf+0x14>
 8005032:	4620      	mov	r0, r4
 8005034:	f000 f84e 	bl	80050d4 <__sinit>
 8005038:	ab05      	add	r3, sp, #20
 800503a:	9a04      	ldr	r2, [sp, #16]
 800503c:	68a1      	ldr	r1, [r4, #8]
 800503e:	4620      	mov	r0, r4
 8005040:	9301      	str	r3, [sp, #4]
 8005042:	f000 f957 	bl	80052f4 <_vfiprintf_r>
 8005046:	b002      	add	sp, #8
 8005048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800504c:	b004      	add	sp, #16
 800504e:	4770      	bx	lr
 8005050:	2000000c 	.word	0x2000000c

08005054 <_cleanup_r>:
 8005054:	4901      	ldr	r1, [pc, #4]	; (800505c <_cleanup_r+0x8>)
 8005056:	f000 b8a9 	b.w	80051ac <_fwalk_reent>
 800505a:	bf00      	nop
 800505c:	08005bcd 	.word	0x08005bcd

08005060 <std.isra.0>:
 8005060:	2300      	movs	r3, #0
 8005062:	b510      	push	{r4, lr}
 8005064:	4604      	mov	r4, r0
 8005066:	6003      	str	r3, [r0, #0]
 8005068:	6043      	str	r3, [r0, #4]
 800506a:	6083      	str	r3, [r0, #8]
 800506c:	8181      	strh	r1, [r0, #12]
 800506e:	6643      	str	r3, [r0, #100]	; 0x64
 8005070:	81c2      	strh	r2, [r0, #14]
 8005072:	6103      	str	r3, [r0, #16]
 8005074:	6143      	str	r3, [r0, #20]
 8005076:	6183      	str	r3, [r0, #24]
 8005078:	4619      	mov	r1, r3
 800507a:	2208      	movs	r2, #8
 800507c:	305c      	adds	r0, #92	; 0x5c
 800507e:	f7ff ffc9 	bl	8005014 <memset>
 8005082:	4b05      	ldr	r3, [pc, #20]	; (8005098 <std.isra.0+0x38>)
 8005084:	6224      	str	r4, [r4, #32]
 8005086:	6263      	str	r3, [r4, #36]	; 0x24
 8005088:	4b04      	ldr	r3, [pc, #16]	; (800509c <std.isra.0+0x3c>)
 800508a:	62a3      	str	r3, [r4, #40]	; 0x28
 800508c:	4b04      	ldr	r3, [pc, #16]	; (80050a0 <std.isra.0+0x40>)
 800508e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005090:	4b04      	ldr	r3, [pc, #16]	; (80050a4 <std.isra.0+0x44>)
 8005092:	6323      	str	r3, [r4, #48]	; 0x30
 8005094:	bd10      	pop	{r4, pc}
 8005096:	bf00      	nop
 8005098:	08005871 	.word	0x08005871
 800509c:	08005893 	.word	0x08005893
 80050a0:	080058cb 	.word	0x080058cb
 80050a4:	080058ef 	.word	0x080058ef

080050a8 <__sfmoreglue>:
 80050a8:	b570      	push	{r4, r5, r6, lr}
 80050aa:	2568      	movs	r5, #104	; 0x68
 80050ac:	1e4a      	subs	r2, r1, #1
 80050ae:	4355      	muls	r5, r2
 80050b0:	460e      	mov	r6, r1
 80050b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80050b6:	f000 f897 	bl	80051e8 <_malloc_r>
 80050ba:	4604      	mov	r4, r0
 80050bc:	b140      	cbz	r0, 80050d0 <__sfmoreglue+0x28>
 80050be:	2100      	movs	r1, #0
 80050c0:	e880 0042 	stmia.w	r0, {r1, r6}
 80050c4:	300c      	adds	r0, #12
 80050c6:	60a0      	str	r0, [r4, #8]
 80050c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80050cc:	f7ff ffa2 	bl	8005014 <memset>
 80050d0:	4620      	mov	r0, r4
 80050d2:	bd70      	pop	{r4, r5, r6, pc}

080050d4 <__sinit>:
 80050d4:	6983      	ldr	r3, [r0, #24]
 80050d6:	b510      	push	{r4, lr}
 80050d8:	4604      	mov	r4, r0
 80050da:	bb33      	cbnz	r3, 800512a <__sinit+0x56>
 80050dc:	6483      	str	r3, [r0, #72]	; 0x48
 80050de:	64c3      	str	r3, [r0, #76]	; 0x4c
 80050e0:	6503      	str	r3, [r0, #80]	; 0x50
 80050e2:	4b12      	ldr	r3, [pc, #72]	; (800512c <__sinit+0x58>)
 80050e4:	4a12      	ldr	r2, [pc, #72]	; (8005130 <__sinit+0x5c>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6282      	str	r2, [r0, #40]	; 0x28
 80050ea:	4298      	cmp	r0, r3
 80050ec:	bf04      	itt	eq
 80050ee:	2301      	moveq	r3, #1
 80050f0:	6183      	streq	r3, [r0, #24]
 80050f2:	f000 f81f 	bl	8005134 <__sfp>
 80050f6:	6060      	str	r0, [r4, #4]
 80050f8:	4620      	mov	r0, r4
 80050fa:	f000 f81b 	bl	8005134 <__sfp>
 80050fe:	60a0      	str	r0, [r4, #8]
 8005100:	4620      	mov	r0, r4
 8005102:	f000 f817 	bl	8005134 <__sfp>
 8005106:	2200      	movs	r2, #0
 8005108:	60e0      	str	r0, [r4, #12]
 800510a:	2104      	movs	r1, #4
 800510c:	6860      	ldr	r0, [r4, #4]
 800510e:	f7ff ffa7 	bl	8005060 <std.isra.0>
 8005112:	2201      	movs	r2, #1
 8005114:	2109      	movs	r1, #9
 8005116:	68a0      	ldr	r0, [r4, #8]
 8005118:	f7ff ffa2 	bl	8005060 <std.isra.0>
 800511c:	2202      	movs	r2, #2
 800511e:	2112      	movs	r1, #18
 8005120:	68e0      	ldr	r0, [r4, #12]
 8005122:	f7ff ff9d 	bl	8005060 <std.isra.0>
 8005126:	2301      	movs	r3, #1
 8005128:	61a3      	str	r3, [r4, #24]
 800512a:	bd10      	pop	{r4, pc}
 800512c:	08005e94 	.word	0x08005e94
 8005130:	08005055 	.word	0x08005055

08005134 <__sfp>:
 8005134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005136:	4b1c      	ldr	r3, [pc, #112]	; (80051a8 <__sfp+0x74>)
 8005138:	4607      	mov	r7, r0
 800513a:	681e      	ldr	r6, [r3, #0]
 800513c:	69b3      	ldr	r3, [r6, #24]
 800513e:	b913      	cbnz	r3, 8005146 <__sfp+0x12>
 8005140:	4630      	mov	r0, r6
 8005142:	f7ff ffc7 	bl	80050d4 <__sinit>
 8005146:	3648      	adds	r6, #72	; 0x48
 8005148:	68b4      	ldr	r4, [r6, #8]
 800514a:	6873      	ldr	r3, [r6, #4]
 800514c:	3b01      	subs	r3, #1
 800514e:	d503      	bpl.n	8005158 <__sfp+0x24>
 8005150:	6833      	ldr	r3, [r6, #0]
 8005152:	b133      	cbz	r3, 8005162 <__sfp+0x2e>
 8005154:	6836      	ldr	r6, [r6, #0]
 8005156:	e7f7      	b.n	8005148 <__sfp+0x14>
 8005158:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800515c:	b16d      	cbz	r5, 800517a <__sfp+0x46>
 800515e:	3468      	adds	r4, #104	; 0x68
 8005160:	e7f4      	b.n	800514c <__sfp+0x18>
 8005162:	2104      	movs	r1, #4
 8005164:	4638      	mov	r0, r7
 8005166:	f7ff ff9f 	bl	80050a8 <__sfmoreglue>
 800516a:	6030      	str	r0, [r6, #0]
 800516c:	2800      	cmp	r0, #0
 800516e:	d1f1      	bne.n	8005154 <__sfp+0x20>
 8005170:	230c      	movs	r3, #12
 8005172:	4604      	mov	r4, r0
 8005174:	603b      	str	r3, [r7, #0]
 8005176:	4620      	mov	r0, r4
 8005178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800517a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800517e:	81e3      	strh	r3, [r4, #14]
 8005180:	2301      	movs	r3, #1
 8005182:	6665      	str	r5, [r4, #100]	; 0x64
 8005184:	81a3      	strh	r3, [r4, #12]
 8005186:	6025      	str	r5, [r4, #0]
 8005188:	60a5      	str	r5, [r4, #8]
 800518a:	6065      	str	r5, [r4, #4]
 800518c:	6125      	str	r5, [r4, #16]
 800518e:	6165      	str	r5, [r4, #20]
 8005190:	61a5      	str	r5, [r4, #24]
 8005192:	2208      	movs	r2, #8
 8005194:	4629      	mov	r1, r5
 8005196:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800519a:	f7ff ff3b 	bl	8005014 <memset>
 800519e:	6365      	str	r5, [r4, #52]	; 0x34
 80051a0:	63a5      	str	r5, [r4, #56]	; 0x38
 80051a2:	64a5      	str	r5, [r4, #72]	; 0x48
 80051a4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80051a6:	e7e6      	b.n	8005176 <__sfp+0x42>
 80051a8:	08005e94 	.word	0x08005e94

080051ac <_fwalk_reent>:
 80051ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051b0:	4680      	mov	r8, r0
 80051b2:	4689      	mov	r9, r1
 80051b4:	2600      	movs	r6, #0
 80051b6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80051ba:	b914      	cbnz	r4, 80051c2 <_fwalk_reent+0x16>
 80051bc:	4630      	mov	r0, r6
 80051be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051c2:	68a5      	ldr	r5, [r4, #8]
 80051c4:	6867      	ldr	r7, [r4, #4]
 80051c6:	3f01      	subs	r7, #1
 80051c8:	d501      	bpl.n	80051ce <_fwalk_reent+0x22>
 80051ca:	6824      	ldr	r4, [r4, #0]
 80051cc:	e7f5      	b.n	80051ba <_fwalk_reent+0xe>
 80051ce:	89ab      	ldrh	r3, [r5, #12]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d907      	bls.n	80051e4 <_fwalk_reent+0x38>
 80051d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051d8:	3301      	adds	r3, #1
 80051da:	d003      	beq.n	80051e4 <_fwalk_reent+0x38>
 80051dc:	4629      	mov	r1, r5
 80051de:	4640      	mov	r0, r8
 80051e0:	47c8      	blx	r9
 80051e2:	4306      	orrs	r6, r0
 80051e4:	3568      	adds	r5, #104	; 0x68
 80051e6:	e7ee      	b.n	80051c6 <_fwalk_reent+0x1a>

080051e8 <_malloc_r>:
 80051e8:	b570      	push	{r4, r5, r6, lr}
 80051ea:	1ccd      	adds	r5, r1, #3
 80051ec:	f025 0503 	bic.w	r5, r5, #3
 80051f0:	3508      	adds	r5, #8
 80051f2:	2d0c      	cmp	r5, #12
 80051f4:	bf38      	it	cc
 80051f6:	250c      	movcc	r5, #12
 80051f8:	2d00      	cmp	r5, #0
 80051fa:	4606      	mov	r6, r0
 80051fc:	db01      	blt.n	8005202 <_malloc_r+0x1a>
 80051fe:	42a9      	cmp	r1, r5
 8005200:	d903      	bls.n	800520a <_malloc_r+0x22>
 8005202:	230c      	movs	r3, #12
 8005204:	6033      	str	r3, [r6, #0]
 8005206:	2000      	movs	r0, #0
 8005208:	bd70      	pop	{r4, r5, r6, pc}
 800520a:	f000 fd8d 	bl	8005d28 <__malloc_lock>
 800520e:	4a23      	ldr	r2, [pc, #140]	; (800529c <_malloc_r+0xb4>)
 8005210:	6814      	ldr	r4, [r2, #0]
 8005212:	4621      	mov	r1, r4
 8005214:	b991      	cbnz	r1, 800523c <_malloc_r+0x54>
 8005216:	4c22      	ldr	r4, [pc, #136]	; (80052a0 <_malloc_r+0xb8>)
 8005218:	6823      	ldr	r3, [r4, #0]
 800521a:	b91b      	cbnz	r3, 8005224 <_malloc_r+0x3c>
 800521c:	4630      	mov	r0, r6
 800521e:	f000 fb17 	bl	8005850 <_sbrk_r>
 8005222:	6020      	str	r0, [r4, #0]
 8005224:	4629      	mov	r1, r5
 8005226:	4630      	mov	r0, r6
 8005228:	f000 fb12 	bl	8005850 <_sbrk_r>
 800522c:	1c43      	adds	r3, r0, #1
 800522e:	d126      	bne.n	800527e <_malloc_r+0x96>
 8005230:	230c      	movs	r3, #12
 8005232:	4630      	mov	r0, r6
 8005234:	6033      	str	r3, [r6, #0]
 8005236:	f000 fd78 	bl	8005d2a <__malloc_unlock>
 800523a:	e7e4      	b.n	8005206 <_malloc_r+0x1e>
 800523c:	680b      	ldr	r3, [r1, #0]
 800523e:	1b5b      	subs	r3, r3, r5
 8005240:	d41a      	bmi.n	8005278 <_malloc_r+0x90>
 8005242:	2b0b      	cmp	r3, #11
 8005244:	d90f      	bls.n	8005266 <_malloc_r+0x7e>
 8005246:	600b      	str	r3, [r1, #0]
 8005248:	18cc      	adds	r4, r1, r3
 800524a:	50cd      	str	r5, [r1, r3]
 800524c:	4630      	mov	r0, r6
 800524e:	f000 fd6c 	bl	8005d2a <__malloc_unlock>
 8005252:	f104 000b 	add.w	r0, r4, #11
 8005256:	1d23      	adds	r3, r4, #4
 8005258:	f020 0007 	bic.w	r0, r0, #7
 800525c:	1ac3      	subs	r3, r0, r3
 800525e:	d01b      	beq.n	8005298 <_malloc_r+0xb0>
 8005260:	425a      	negs	r2, r3
 8005262:	50e2      	str	r2, [r4, r3]
 8005264:	bd70      	pop	{r4, r5, r6, pc}
 8005266:	428c      	cmp	r4, r1
 8005268:	bf0b      	itete	eq
 800526a:	6863      	ldreq	r3, [r4, #4]
 800526c:	684b      	ldrne	r3, [r1, #4]
 800526e:	6013      	streq	r3, [r2, #0]
 8005270:	6063      	strne	r3, [r4, #4]
 8005272:	bf18      	it	ne
 8005274:	460c      	movne	r4, r1
 8005276:	e7e9      	b.n	800524c <_malloc_r+0x64>
 8005278:	460c      	mov	r4, r1
 800527a:	6849      	ldr	r1, [r1, #4]
 800527c:	e7ca      	b.n	8005214 <_malloc_r+0x2c>
 800527e:	1cc4      	adds	r4, r0, #3
 8005280:	f024 0403 	bic.w	r4, r4, #3
 8005284:	42a0      	cmp	r0, r4
 8005286:	d005      	beq.n	8005294 <_malloc_r+0xac>
 8005288:	1a21      	subs	r1, r4, r0
 800528a:	4630      	mov	r0, r6
 800528c:	f000 fae0 	bl	8005850 <_sbrk_r>
 8005290:	3001      	adds	r0, #1
 8005292:	d0cd      	beq.n	8005230 <_malloc_r+0x48>
 8005294:	6025      	str	r5, [r4, #0]
 8005296:	e7d9      	b.n	800524c <_malloc_r+0x64>
 8005298:	bd70      	pop	{r4, r5, r6, pc}
 800529a:	bf00      	nop
 800529c:	20000090 	.word	0x20000090
 80052a0:	20000094 	.word	0x20000094

080052a4 <__sfputc_r>:
 80052a4:	6893      	ldr	r3, [r2, #8]
 80052a6:	b410      	push	{r4}
 80052a8:	3b01      	subs	r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	6093      	str	r3, [r2, #8]
 80052ae:	da08      	bge.n	80052c2 <__sfputc_r+0x1e>
 80052b0:	6994      	ldr	r4, [r2, #24]
 80052b2:	42a3      	cmp	r3, r4
 80052b4:	db02      	blt.n	80052bc <__sfputc_r+0x18>
 80052b6:	b2cb      	uxtb	r3, r1
 80052b8:	2b0a      	cmp	r3, #10
 80052ba:	d102      	bne.n	80052c2 <__sfputc_r+0x1e>
 80052bc:	bc10      	pop	{r4}
 80052be:	f000 bb1b 	b.w	80058f8 <__swbuf_r>
 80052c2:	6813      	ldr	r3, [r2, #0]
 80052c4:	1c58      	adds	r0, r3, #1
 80052c6:	6010      	str	r0, [r2, #0]
 80052c8:	7019      	strb	r1, [r3, #0]
 80052ca:	b2c8      	uxtb	r0, r1
 80052cc:	bc10      	pop	{r4}
 80052ce:	4770      	bx	lr

080052d0 <__sfputs_r>:
 80052d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d2:	4606      	mov	r6, r0
 80052d4:	460f      	mov	r7, r1
 80052d6:	4614      	mov	r4, r2
 80052d8:	18d5      	adds	r5, r2, r3
 80052da:	42ac      	cmp	r4, r5
 80052dc:	d101      	bne.n	80052e2 <__sfputs_r+0x12>
 80052de:	2000      	movs	r0, #0
 80052e0:	e007      	b.n	80052f2 <__sfputs_r+0x22>
 80052e2:	463a      	mov	r2, r7
 80052e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052e8:	4630      	mov	r0, r6
 80052ea:	f7ff ffdb 	bl	80052a4 <__sfputc_r>
 80052ee:	1c43      	adds	r3, r0, #1
 80052f0:	d1f3      	bne.n	80052da <__sfputs_r+0xa>
 80052f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080052f4 <_vfiprintf_r>:
 80052f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f8:	b09d      	sub	sp, #116	; 0x74
 80052fa:	460c      	mov	r4, r1
 80052fc:	4617      	mov	r7, r2
 80052fe:	9303      	str	r3, [sp, #12]
 8005300:	4606      	mov	r6, r0
 8005302:	b118      	cbz	r0, 800530c <_vfiprintf_r+0x18>
 8005304:	6983      	ldr	r3, [r0, #24]
 8005306:	b90b      	cbnz	r3, 800530c <_vfiprintf_r+0x18>
 8005308:	f7ff fee4 	bl	80050d4 <__sinit>
 800530c:	4b7c      	ldr	r3, [pc, #496]	; (8005500 <_vfiprintf_r+0x20c>)
 800530e:	429c      	cmp	r4, r3
 8005310:	d157      	bne.n	80053c2 <_vfiprintf_r+0xce>
 8005312:	6874      	ldr	r4, [r6, #4]
 8005314:	89a3      	ldrh	r3, [r4, #12]
 8005316:	0718      	lsls	r0, r3, #28
 8005318:	d55d      	bpl.n	80053d6 <_vfiprintf_r+0xe2>
 800531a:	6923      	ldr	r3, [r4, #16]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d05a      	beq.n	80053d6 <_vfiprintf_r+0xe2>
 8005320:	2300      	movs	r3, #0
 8005322:	9309      	str	r3, [sp, #36]	; 0x24
 8005324:	2320      	movs	r3, #32
 8005326:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800532a:	2330      	movs	r3, #48	; 0x30
 800532c:	f04f 0b01 	mov.w	fp, #1
 8005330:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005334:	46b8      	mov	r8, r7
 8005336:	4645      	mov	r5, r8
 8005338:	f815 3b01 	ldrb.w	r3, [r5], #1
 800533c:	2b00      	cmp	r3, #0
 800533e:	d155      	bne.n	80053ec <_vfiprintf_r+0xf8>
 8005340:	ebb8 0a07 	subs.w	sl, r8, r7
 8005344:	d00b      	beq.n	800535e <_vfiprintf_r+0x6a>
 8005346:	4653      	mov	r3, sl
 8005348:	463a      	mov	r2, r7
 800534a:	4621      	mov	r1, r4
 800534c:	4630      	mov	r0, r6
 800534e:	f7ff ffbf 	bl	80052d0 <__sfputs_r>
 8005352:	3001      	adds	r0, #1
 8005354:	f000 80c4 	beq.w	80054e0 <_vfiprintf_r+0x1ec>
 8005358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800535a:	4453      	add	r3, sl
 800535c:	9309      	str	r3, [sp, #36]	; 0x24
 800535e:	f898 3000 	ldrb.w	r3, [r8]
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 80bc 	beq.w	80054e0 <_vfiprintf_r+0x1ec>
 8005368:	2300      	movs	r3, #0
 800536a:	f04f 32ff 	mov.w	r2, #4294967295
 800536e:	9304      	str	r3, [sp, #16]
 8005370:	9307      	str	r3, [sp, #28]
 8005372:	9205      	str	r2, [sp, #20]
 8005374:	9306      	str	r3, [sp, #24]
 8005376:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800537a:	931a      	str	r3, [sp, #104]	; 0x68
 800537c:	2205      	movs	r2, #5
 800537e:	7829      	ldrb	r1, [r5, #0]
 8005380:	4860      	ldr	r0, [pc, #384]	; (8005504 <_vfiprintf_r+0x210>)
 8005382:	f000 fcc3 	bl	8005d0c <memchr>
 8005386:	f105 0801 	add.w	r8, r5, #1
 800538a:	9b04      	ldr	r3, [sp, #16]
 800538c:	2800      	cmp	r0, #0
 800538e:	d131      	bne.n	80053f4 <_vfiprintf_r+0x100>
 8005390:	06d9      	lsls	r1, r3, #27
 8005392:	bf44      	itt	mi
 8005394:	2220      	movmi	r2, #32
 8005396:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800539a:	071a      	lsls	r2, r3, #28
 800539c:	bf44      	itt	mi
 800539e:	222b      	movmi	r2, #43	; 0x2b
 80053a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80053a4:	782a      	ldrb	r2, [r5, #0]
 80053a6:	2a2a      	cmp	r2, #42	; 0x2a
 80053a8:	d02c      	beq.n	8005404 <_vfiprintf_r+0x110>
 80053aa:	2100      	movs	r1, #0
 80053ac:	200a      	movs	r0, #10
 80053ae:	9a07      	ldr	r2, [sp, #28]
 80053b0:	46a8      	mov	r8, r5
 80053b2:	f898 3000 	ldrb.w	r3, [r8]
 80053b6:	3501      	adds	r5, #1
 80053b8:	3b30      	subs	r3, #48	; 0x30
 80053ba:	2b09      	cmp	r3, #9
 80053bc:	d96d      	bls.n	800549a <_vfiprintf_r+0x1a6>
 80053be:	b371      	cbz	r1, 800541e <_vfiprintf_r+0x12a>
 80053c0:	e026      	b.n	8005410 <_vfiprintf_r+0x11c>
 80053c2:	4b51      	ldr	r3, [pc, #324]	; (8005508 <_vfiprintf_r+0x214>)
 80053c4:	429c      	cmp	r4, r3
 80053c6:	d101      	bne.n	80053cc <_vfiprintf_r+0xd8>
 80053c8:	68b4      	ldr	r4, [r6, #8]
 80053ca:	e7a3      	b.n	8005314 <_vfiprintf_r+0x20>
 80053cc:	4b4f      	ldr	r3, [pc, #316]	; (800550c <_vfiprintf_r+0x218>)
 80053ce:	429c      	cmp	r4, r3
 80053d0:	bf08      	it	eq
 80053d2:	68f4      	ldreq	r4, [r6, #12]
 80053d4:	e79e      	b.n	8005314 <_vfiprintf_r+0x20>
 80053d6:	4621      	mov	r1, r4
 80053d8:	4630      	mov	r0, r6
 80053da:	f000 faf1 	bl	80059c0 <__swsetup_r>
 80053de:	2800      	cmp	r0, #0
 80053e0:	d09e      	beq.n	8005320 <_vfiprintf_r+0x2c>
 80053e2:	f04f 30ff 	mov.w	r0, #4294967295
 80053e6:	b01d      	add	sp, #116	; 0x74
 80053e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ec:	2b25      	cmp	r3, #37	; 0x25
 80053ee:	d0a7      	beq.n	8005340 <_vfiprintf_r+0x4c>
 80053f0:	46a8      	mov	r8, r5
 80053f2:	e7a0      	b.n	8005336 <_vfiprintf_r+0x42>
 80053f4:	4a43      	ldr	r2, [pc, #268]	; (8005504 <_vfiprintf_r+0x210>)
 80053f6:	4645      	mov	r5, r8
 80053f8:	1a80      	subs	r0, r0, r2
 80053fa:	fa0b f000 	lsl.w	r0, fp, r0
 80053fe:	4318      	orrs	r0, r3
 8005400:	9004      	str	r0, [sp, #16]
 8005402:	e7bb      	b.n	800537c <_vfiprintf_r+0x88>
 8005404:	9a03      	ldr	r2, [sp, #12]
 8005406:	1d11      	adds	r1, r2, #4
 8005408:	6812      	ldr	r2, [r2, #0]
 800540a:	9103      	str	r1, [sp, #12]
 800540c:	2a00      	cmp	r2, #0
 800540e:	db01      	blt.n	8005414 <_vfiprintf_r+0x120>
 8005410:	9207      	str	r2, [sp, #28]
 8005412:	e004      	b.n	800541e <_vfiprintf_r+0x12a>
 8005414:	4252      	negs	r2, r2
 8005416:	f043 0302 	orr.w	r3, r3, #2
 800541a:	9207      	str	r2, [sp, #28]
 800541c:	9304      	str	r3, [sp, #16]
 800541e:	f898 3000 	ldrb.w	r3, [r8]
 8005422:	2b2e      	cmp	r3, #46	; 0x2e
 8005424:	d110      	bne.n	8005448 <_vfiprintf_r+0x154>
 8005426:	f898 3001 	ldrb.w	r3, [r8, #1]
 800542a:	f108 0101 	add.w	r1, r8, #1
 800542e:	2b2a      	cmp	r3, #42	; 0x2a
 8005430:	d137      	bne.n	80054a2 <_vfiprintf_r+0x1ae>
 8005432:	9b03      	ldr	r3, [sp, #12]
 8005434:	f108 0802 	add.w	r8, r8, #2
 8005438:	1d1a      	adds	r2, r3, #4
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	9203      	str	r2, [sp, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	bfb8      	it	lt
 8005442:	f04f 33ff 	movlt.w	r3, #4294967295
 8005446:	9305      	str	r3, [sp, #20]
 8005448:	4d31      	ldr	r5, [pc, #196]	; (8005510 <_vfiprintf_r+0x21c>)
 800544a:	2203      	movs	r2, #3
 800544c:	f898 1000 	ldrb.w	r1, [r8]
 8005450:	4628      	mov	r0, r5
 8005452:	f000 fc5b 	bl	8005d0c <memchr>
 8005456:	b140      	cbz	r0, 800546a <_vfiprintf_r+0x176>
 8005458:	2340      	movs	r3, #64	; 0x40
 800545a:	1b40      	subs	r0, r0, r5
 800545c:	fa03 f000 	lsl.w	r0, r3, r0
 8005460:	9b04      	ldr	r3, [sp, #16]
 8005462:	f108 0801 	add.w	r8, r8, #1
 8005466:	4303      	orrs	r3, r0
 8005468:	9304      	str	r3, [sp, #16]
 800546a:	f898 1000 	ldrb.w	r1, [r8]
 800546e:	2206      	movs	r2, #6
 8005470:	4828      	ldr	r0, [pc, #160]	; (8005514 <_vfiprintf_r+0x220>)
 8005472:	f108 0701 	add.w	r7, r8, #1
 8005476:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800547a:	f000 fc47 	bl	8005d0c <memchr>
 800547e:	2800      	cmp	r0, #0
 8005480:	d034      	beq.n	80054ec <_vfiprintf_r+0x1f8>
 8005482:	4b25      	ldr	r3, [pc, #148]	; (8005518 <_vfiprintf_r+0x224>)
 8005484:	bb03      	cbnz	r3, 80054c8 <_vfiprintf_r+0x1d4>
 8005486:	9b03      	ldr	r3, [sp, #12]
 8005488:	3307      	adds	r3, #7
 800548a:	f023 0307 	bic.w	r3, r3, #7
 800548e:	3308      	adds	r3, #8
 8005490:	9303      	str	r3, [sp, #12]
 8005492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005494:	444b      	add	r3, r9
 8005496:	9309      	str	r3, [sp, #36]	; 0x24
 8005498:	e74c      	b.n	8005334 <_vfiprintf_r+0x40>
 800549a:	fb00 3202 	mla	r2, r0, r2, r3
 800549e:	2101      	movs	r1, #1
 80054a0:	e786      	b.n	80053b0 <_vfiprintf_r+0xbc>
 80054a2:	2300      	movs	r3, #0
 80054a4:	250a      	movs	r5, #10
 80054a6:	4618      	mov	r0, r3
 80054a8:	9305      	str	r3, [sp, #20]
 80054aa:	4688      	mov	r8, r1
 80054ac:	f898 2000 	ldrb.w	r2, [r8]
 80054b0:	3101      	adds	r1, #1
 80054b2:	3a30      	subs	r2, #48	; 0x30
 80054b4:	2a09      	cmp	r2, #9
 80054b6:	d903      	bls.n	80054c0 <_vfiprintf_r+0x1cc>
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0c5      	beq.n	8005448 <_vfiprintf_r+0x154>
 80054bc:	9005      	str	r0, [sp, #20]
 80054be:	e7c3      	b.n	8005448 <_vfiprintf_r+0x154>
 80054c0:	fb05 2000 	mla	r0, r5, r0, r2
 80054c4:	2301      	movs	r3, #1
 80054c6:	e7f0      	b.n	80054aa <_vfiprintf_r+0x1b6>
 80054c8:	ab03      	add	r3, sp, #12
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	4622      	mov	r2, r4
 80054ce:	4b13      	ldr	r3, [pc, #76]	; (800551c <_vfiprintf_r+0x228>)
 80054d0:	a904      	add	r1, sp, #16
 80054d2:	4630      	mov	r0, r6
 80054d4:	f3af 8000 	nop.w
 80054d8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80054dc:	4681      	mov	r9, r0
 80054de:	d1d8      	bne.n	8005492 <_vfiprintf_r+0x19e>
 80054e0:	89a3      	ldrh	r3, [r4, #12]
 80054e2:	065b      	lsls	r3, r3, #25
 80054e4:	f53f af7d 	bmi.w	80053e2 <_vfiprintf_r+0xee>
 80054e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054ea:	e77c      	b.n	80053e6 <_vfiprintf_r+0xf2>
 80054ec:	ab03      	add	r3, sp, #12
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	4622      	mov	r2, r4
 80054f2:	4b0a      	ldr	r3, [pc, #40]	; (800551c <_vfiprintf_r+0x228>)
 80054f4:	a904      	add	r1, sp, #16
 80054f6:	4630      	mov	r0, r6
 80054f8:	f000 f88a 	bl	8005610 <_printf_i>
 80054fc:	e7ec      	b.n	80054d8 <_vfiprintf_r+0x1e4>
 80054fe:	bf00      	nop
 8005500:	08005eb8 	.word	0x08005eb8
 8005504:	08005ef8 	.word	0x08005ef8
 8005508:	08005ed8 	.word	0x08005ed8
 800550c:	08005e98 	.word	0x08005e98
 8005510:	08005efe 	.word	0x08005efe
 8005514:	08005f02 	.word	0x08005f02
 8005518:	00000000 	.word	0x00000000
 800551c:	080052d1 	.word	0x080052d1

08005520 <_printf_common>:
 8005520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005524:	4691      	mov	r9, r2
 8005526:	461f      	mov	r7, r3
 8005528:	688a      	ldr	r2, [r1, #8]
 800552a:	690b      	ldr	r3, [r1, #16]
 800552c:	4606      	mov	r6, r0
 800552e:	4293      	cmp	r3, r2
 8005530:	bfb8      	it	lt
 8005532:	4613      	movlt	r3, r2
 8005534:	f8c9 3000 	str.w	r3, [r9]
 8005538:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800553c:	460c      	mov	r4, r1
 800553e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005542:	b112      	cbz	r2, 800554a <_printf_common+0x2a>
 8005544:	3301      	adds	r3, #1
 8005546:	f8c9 3000 	str.w	r3, [r9]
 800554a:	6823      	ldr	r3, [r4, #0]
 800554c:	0699      	lsls	r1, r3, #26
 800554e:	bf42      	ittt	mi
 8005550:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005554:	3302      	addmi	r3, #2
 8005556:	f8c9 3000 	strmi.w	r3, [r9]
 800555a:	6825      	ldr	r5, [r4, #0]
 800555c:	f015 0506 	ands.w	r5, r5, #6
 8005560:	d107      	bne.n	8005572 <_printf_common+0x52>
 8005562:	f104 0a19 	add.w	sl, r4, #25
 8005566:	68e3      	ldr	r3, [r4, #12]
 8005568:	f8d9 2000 	ldr.w	r2, [r9]
 800556c:	1a9b      	subs	r3, r3, r2
 800556e:	429d      	cmp	r5, r3
 8005570:	db2a      	blt.n	80055c8 <_printf_common+0xa8>
 8005572:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005576:	6822      	ldr	r2, [r4, #0]
 8005578:	3300      	adds	r3, #0
 800557a:	bf18      	it	ne
 800557c:	2301      	movne	r3, #1
 800557e:	0692      	lsls	r2, r2, #26
 8005580:	d42f      	bmi.n	80055e2 <_printf_common+0xc2>
 8005582:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005586:	4639      	mov	r1, r7
 8005588:	4630      	mov	r0, r6
 800558a:	47c0      	blx	r8
 800558c:	3001      	adds	r0, #1
 800558e:	d022      	beq.n	80055d6 <_printf_common+0xb6>
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	68e5      	ldr	r5, [r4, #12]
 8005594:	f003 0306 	and.w	r3, r3, #6
 8005598:	2b04      	cmp	r3, #4
 800559a:	bf18      	it	ne
 800559c:	2500      	movne	r5, #0
 800559e:	f8d9 2000 	ldr.w	r2, [r9]
 80055a2:	f04f 0900 	mov.w	r9, #0
 80055a6:	bf08      	it	eq
 80055a8:	1aad      	subeq	r5, r5, r2
 80055aa:	68a3      	ldr	r3, [r4, #8]
 80055ac:	6922      	ldr	r2, [r4, #16]
 80055ae:	bf08      	it	eq
 80055b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055b4:	4293      	cmp	r3, r2
 80055b6:	bfc4      	itt	gt
 80055b8:	1a9b      	subgt	r3, r3, r2
 80055ba:	18ed      	addgt	r5, r5, r3
 80055bc:	341a      	adds	r4, #26
 80055be:	454d      	cmp	r5, r9
 80055c0:	d11b      	bne.n	80055fa <_printf_common+0xda>
 80055c2:	2000      	movs	r0, #0
 80055c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055c8:	2301      	movs	r3, #1
 80055ca:	4652      	mov	r2, sl
 80055cc:	4639      	mov	r1, r7
 80055ce:	4630      	mov	r0, r6
 80055d0:	47c0      	blx	r8
 80055d2:	3001      	adds	r0, #1
 80055d4:	d103      	bne.n	80055de <_printf_common+0xbe>
 80055d6:	f04f 30ff 	mov.w	r0, #4294967295
 80055da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055de:	3501      	adds	r5, #1
 80055e0:	e7c1      	b.n	8005566 <_printf_common+0x46>
 80055e2:	2030      	movs	r0, #48	; 0x30
 80055e4:	18e1      	adds	r1, r4, r3
 80055e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055f0:	4422      	add	r2, r4
 80055f2:	3302      	adds	r3, #2
 80055f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055f8:	e7c3      	b.n	8005582 <_printf_common+0x62>
 80055fa:	2301      	movs	r3, #1
 80055fc:	4622      	mov	r2, r4
 80055fe:	4639      	mov	r1, r7
 8005600:	4630      	mov	r0, r6
 8005602:	47c0      	blx	r8
 8005604:	3001      	adds	r0, #1
 8005606:	d0e6      	beq.n	80055d6 <_printf_common+0xb6>
 8005608:	f109 0901 	add.w	r9, r9, #1
 800560c:	e7d7      	b.n	80055be <_printf_common+0x9e>
	...

08005610 <_printf_i>:
 8005610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005614:	4617      	mov	r7, r2
 8005616:	7e0a      	ldrb	r2, [r1, #24]
 8005618:	b085      	sub	sp, #20
 800561a:	2a6e      	cmp	r2, #110	; 0x6e
 800561c:	4698      	mov	r8, r3
 800561e:	4606      	mov	r6, r0
 8005620:	460c      	mov	r4, r1
 8005622:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005624:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005628:	f000 80bc 	beq.w	80057a4 <_printf_i+0x194>
 800562c:	d81a      	bhi.n	8005664 <_printf_i+0x54>
 800562e:	2a63      	cmp	r2, #99	; 0x63
 8005630:	d02e      	beq.n	8005690 <_printf_i+0x80>
 8005632:	d80a      	bhi.n	800564a <_printf_i+0x3a>
 8005634:	2a00      	cmp	r2, #0
 8005636:	f000 80c8 	beq.w	80057ca <_printf_i+0x1ba>
 800563a:	2a58      	cmp	r2, #88	; 0x58
 800563c:	f000 808a 	beq.w	8005754 <_printf_i+0x144>
 8005640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005644:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005648:	e02a      	b.n	80056a0 <_printf_i+0x90>
 800564a:	2a64      	cmp	r2, #100	; 0x64
 800564c:	d001      	beq.n	8005652 <_printf_i+0x42>
 800564e:	2a69      	cmp	r2, #105	; 0x69
 8005650:	d1f6      	bne.n	8005640 <_printf_i+0x30>
 8005652:	6821      	ldr	r1, [r4, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	f011 0f80 	tst.w	r1, #128	; 0x80
 800565a:	d023      	beq.n	80056a4 <_printf_i+0x94>
 800565c:	1d11      	adds	r1, r2, #4
 800565e:	6019      	str	r1, [r3, #0]
 8005660:	6813      	ldr	r3, [r2, #0]
 8005662:	e027      	b.n	80056b4 <_printf_i+0xa4>
 8005664:	2a73      	cmp	r2, #115	; 0x73
 8005666:	f000 80b4 	beq.w	80057d2 <_printf_i+0x1c2>
 800566a:	d808      	bhi.n	800567e <_printf_i+0x6e>
 800566c:	2a6f      	cmp	r2, #111	; 0x6f
 800566e:	d02a      	beq.n	80056c6 <_printf_i+0xb6>
 8005670:	2a70      	cmp	r2, #112	; 0x70
 8005672:	d1e5      	bne.n	8005640 <_printf_i+0x30>
 8005674:	680a      	ldr	r2, [r1, #0]
 8005676:	f042 0220 	orr.w	r2, r2, #32
 800567a:	600a      	str	r2, [r1, #0]
 800567c:	e003      	b.n	8005686 <_printf_i+0x76>
 800567e:	2a75      	cmp	r2, #117	; 0x75
 8005680:	d021      	beq.n	80056c6 <_printf_i+0xb6>
 8005682:	2a78      	cmp	r2, #120	; 0x78
 8005684:	d1dc      	bne.n	8005640 <_printf_i+0x30>
 8005686:	2278      	movs	r2, #120	; 0x78
 8005688:	496f      	ldr	r1, [pc, #444]	; (8005848 <_printf_i+0x238>)
 800568a:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800568e:	e064      	b.n	800575a <_printf_i+0x14a>
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005696:	1d11      	adds	r1, r2, #4
 8005698:	6019      	str	r1, [r3, #0]
 800569a:	6813      	ldr	r3, [r2, #0]
 800569c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056a0:	2301      	movs	r3, #1
 80056a2:	e0a3      	b.n	80057ec <_printf_i+0x1dc>
 80056a4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80056a8:	f102 0104 	add.w	r1, r2, #4
 80056ac:	6019      	str	r1, [r3, #0]
 80056ae:	d0d7      	beq.n	8005660 <_printf_i+0x50>
 80056b0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	da03      	bge.n	80056c0 <_printf_i+0xb0>
 80056b8:	222d      	movs	r2, #45	; 0x2d
 80056ba:	425b      	negs	r3, r3
 80056bc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80056c0:	4962      	ldr	r1, [pc, #392]	; (800584c <_printf_i+0x23c>)
 80056c2:	220a      	movs	r2, #10
 80056c4:	e017      	b.n	80056f6 <_printf_i+0xe6>
 80056c6:	6820      	ldr	r0, [r4, #0]
 80056c8:	6819      	ldr	r1, [r3, #0]
 80056ca:	f010 0f80 	tst.w	r0, #128	; 0x80
 80056ce:	d003      	beq.n	80056d8 <_printf_i+0xc8>
 80056d0:	1d08      	adds	r0, r1, #4
 80056d2:	6018      	str	r0, [r3, #0]
 80056d4:	680b      	ldr	r3, [r1, #0]
 80056d6:	e006      	b.n	80056e6 <_printf_i+0xd6>
 80056d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056dc:	f101 0004 	add.w	r0, r1, #4
 80056e0:	6018      	str	r0, [r3, #0]
 80056e2:	d0f7      	beq.n	80056d4 <_printf_i+0xc4>
 80056e4:	880b      	ldrh	r3, [r1, #0]
 80056e6:	2a6f      	cmp	r2, #111	; 0x6f
 80056e8:	bf14      	ite	ne
 80056ea:	220a      	movne	r2, #10
 80056ec:	2208      	moveq	r2, #8
 80056ee:	4957      	ldr	r1, [pc, #348]	; (800584c <_printf_i+0x23c>)
 80056f0:	2000      	movs	r0, #0
 80056f2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80056f6:	6865      	ldr	r5, [r4, #4]
 80056f8:	2d00      	cmp	r5, #0
 80056fa:	60a5      	str	r5, [r4, #8]
 80056fc:	f2c0 809c 	blt.w	8005838 <_printf_i+0x228>
 8005700:	6820      	ldr	r0, [r4, #0]
 8005702:	f020 0004 	bic.w	r0, r0, #4
 8005706:	6020      	str	r0, [r4, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d13f      	bne.n	800578c <_printf_i+0x17c>
 800570c:	2d00      	cmp	r5, #0
 800570e:	f040 8095 	bne.w	800583c <_printf_i+0x22c>
 8005712:	4675      	mov	r5, lr
 8005714:	2a08      	cmp	r2, #8
 8005716:	d10b      	bne.n	8005730 <_printf_i+0x120>
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	07da      	lsls	r2, r3, #31
 800571c:	d508      	bpl.n	8005730 <_printf_i+0x120>
 800571e:	6923      	ldr	r3, [r4, #16]
 8005720:	6862      	ldr	r2, [r4, #4]
 8005722:	429a      	cmp	r2, r3
 8005724:	bfde      	ittt	le
 8005726:	2330      	movle	r3, #48	; 0x30
 8005728:	f805 3c01 	strble.w	r3, [r5, #-1]
 800572c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005730:	ebae 0305 	sub.w	r3, lr, r5
 8005734:	6123      	str	r3, [r4, #16]
 8005736:	f8cd 8000 	str.w	r8, [sp]
 800573a:	463b      	mov	r3, r7
 800573c:	aa03      	add	r2, sp, #12
 800573e:	4621      	mov	r1, r4
 8005740:	4630      	mov	r0, r6
 8005742:	f7ff feed 	bl	8005520 <_printf_common>
 8005746:	3001      	adds	r0, #1
 8005748:	d155      	bne.n	80057f6 <_printf_i+0x1e6>
 800574a:	f04f 30ff 	mov.w	r0, #4294967295
 800574e:	b005      	add	sp, #20
 8005750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005754:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005758:	493c      	ldr	r1, [pc, #240]	; (800584c <_printf_i+0x23c>)
 800575a:	6822      	ldr	r2, [r4, #0]
 800575c:	6818      	ldr	r0, [r3, #0]
 800575e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005762:	f100 0504 	add.w	r5, r0, #4
 8005766:	601d      	str	r5, [r3, #0]
 8005768:	d001      	beq.n	800576e <_printf_i+0x15e>
 800576a:	6803      	ldr	r3, [r0, #0]
 800576c:	e002      	b.n	8005774 <_printf_i+0x164>
 800576e:	0655      	lsls	r5, r2, #25
 8005770:	d5fb      	bpl.n	800576a <_printf_i+0x15a>
 8005772:	8803      	ldrh	r3, [r0, #0]
 8005774:	07d0      	lsls	r0, r2, #31
 8005776:	bf44      	itt	mi
 8005778:	f042 0220 	orrmi.w	r2, r2, #32
 800577c:	6022      	strmi	r2, [r4, #0]
 800577e:	b91b      	cbnz	r3, 8005788 <_printf_i+0x178>
 8005780:	6822      	ldr	r2, [r4, #0]
 8005782:	f022 0220 	bic.w	r2, r2, #32
 8005786:	6022      	str	r2, [r4, #0]
 8005788:	2210      	movs	r2, #16
 800578a:	e7b1      	b.n	80056f0 <_printf_i+0xe0>
 800578c:	4675      	mov	r5, lr
 800578e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005792:	fb02 3310 	mls	r3, r2, r0, r3
 8005796:	5ccb      	ldrb	r3, [r1, r3]
 8005798:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800579c:	4603      	mov	r3, r0
 800579e:	2800      	cmp	r0, #0
 80057a0:	d1f5      	bne.n	800578e <_printf_i+0x17e>
 80057a2:	e7b7      	b.n	8005714 <_printf_i+0x104>
 80057a4:	6808      	ldr	r0, [r1, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80057ac:	6949      	ldr	r1, [r1, #20]
 80057ae:	d004      	beq.n	80057ba <_printf_i+0x1aa>
 80057b0:	1d10      	adds	r0, r2, #4
 80057b2:	6018      	str	r0, [r3, #0]
 80057b4:	6813      	ldr	r3, [r2, #0]
 80057b6:	6019      	str	r1, [r3, #0]
 80057b8:	e007      	b.n	80057ca <_printf_i+0x1ba>
 80057ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057be:	f102 0004 	add.w	r0, r2, #4
 80057c2:	6018      	str	r0, [r3, #0]
 80057c4:	6813      	ldr	r3, [r2, #0]
 80057c6:	d0f6      	beq.n	80057b6 <_printf_i+0x1a6>
 80057c8:	8019      	strh	r1, [r3, #0]
 80057ca:	2300      	movs	r3, #0
 80057cc:	4675      	mov	r5, lr
 80057ce:	6123      	str	r3, [r4, #16]
 80057d0:	e7b1      	b.n	8005736 <_printf_i+0x126>
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	1d11      	adds	r1, r2, #4
 80057d6:	6019      	str	r1, [r3, #0]
 80057d8:	6815      	ldr	r5, [r2, #0]
 80057da:	2100      	movs	r1, #0
 80057dc:	6862      	ldr	r2, [r4, #4]
 80057de:	4628      	mov	r0, r5
 80057e0:	f000 fa94 	bl	8005d0c <memchr>
 80057e4:	b108      	cbz	r0, 80057ea <_printf_i+0x1da>
 80057e6:	1b40      	subs	r0, r0, r5
 80057e8:	6060      	str	r0, [r4, #4]
 80057ea:	6863      	ldr	r3, [r4, #4]
 80057ec:	6123      	str	r3, [r4, #16]
 80057ee:	2300      	movs	r3, #0
 80057f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057f4:	e79f      	b.n	8005736 <_printf_i+0x126>
 80057f6:	6923      	ldr	r3, [r4, #16]
 80057f8:	462a      	mov	r2, r5
 80057fa:	4639      	mov	r1, r7
 80057fc:	4630      	mov	r0, r6
 80057fe:	47c0      	blx	r8
 8005800:	3001      	adds	r0, #1
 8005802:	d0a2      	beq.n	800574a <_printf_i+0x13a>
 8005804:	6823      	ldr	r3, [r4, #0]
 8005806:	079b      	lsls	r3, r3, #30
 8005808:	d507      	bpl.n	800581a <_printf_i+0x20a>
 800580a:	2500      	movs	r5, #0
 800580c:	f104 0919 	add.w	r9, r4, #25
 8005810:	68e3      	ldr	r3, [r4, #12]
 8005812:	9a03      	ldr	r2, [sp, #12]
 8005814:	1a9b      	subs	r3, r3, r2
 8005816:	429d      	cmp	r5, r3
 8005818:	db05      	blt.n	8005826 <_printf_i+0x216>
 800581a:	68e0      	ldr	r0, [r4, #12]
 800581c:	9b03      	ldr	r3, [sp, #12]
 800581e:	4298      	cmp	r0, r3
 8005820:	bfb8      	it	lt
 8005822:	4618      	movlt	r0, r3
 8005824:	e793      	b.n	800574e <_printf_i+0x13e>
 8005826:	2301      	movs	r3, #1
 8005828:	464a      	mov	r2, r9
 800582a:	4639      	mov	r1, r7
 800582c:	4630      	mov	r0, r6
 800582e:	47c0      	blx	r8
 8005830:	3001      	adds	r0, #1
 8005832:	d08a      	beq.n	800574a <_printf_i+0x13a>
 8005834:	3501      	adds	r5, #1
 8005836:	e7eb      	b.n	8005810 <_printf_i+0x200>
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1a7      	bne.n	800578c <_printf_i+0x17c>
 800583c:	780b      	ldrb	r3, [r1, #0]
 800583e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005842:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005846:	e765      	b.n	8005714 <_printf_i+0x104>
 8005848:	08005f1a 	.word	0x08005f1a
 800584c:	08005f09 	.word	0x08005f09

08005850 <_sbrk_r>:
 8005850:	b538      	push	{r3, r4, r5, lr}
 8005852:	2300      	movs	r3, #0
 8005854:	4c05      	ldr	r4, [pc, #20]	; (800586c <_sbrk_r+0x1c>)
 8005856:	4605      	mov	r5, r0
 8005858:	4608      	mov	r0, r1
 800585a:	6023      	str	r3, [r4, #0]
 800585c:	f7ff fb3e 	bl	8004edc <_sbrk>
 8005860:	1c43      	adds	r3, r0, #1
 8005862:	d102      	bne.n	800586a <_sbrk_r+0x1a>
 8005864:	6823      	ldr	r3, [r4, #0]
 8005866:	b103      	cbz	r3, 800586a <_sbrk_r+0x1a>
 8005868:	602b      	str	r3, [r5, #0]
 800586a:	bd38      	pop	{r3, r4, r5, pc}
 800586c:	200000dc 	.word	0x200000dc

08005870 <__sread>:
 8005870:	b510      	push	{r4, lr}
 8005872:	460c      	mov	r4, r1
 8005874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005878:	f000 faa4 	bl	8005dc4 <_read_r>
 800587c:	2800      	cmp	r0, #0
 800587e:	bfab      	itete	ge
 8005880:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005882:	89a3      	ldrhlt	r3, [r4, #12]
 8005884:	181b      	addge	r3, r3, r0
 8005886:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800588a:	bfac      	ite	ge
 800588c:	6563      	strge	r3, [r4, #84]	; 0x54
 800588e:	81a3      	strhlt	r3, [r4, #12]
 8005890:	bd10      	pop	{r4, pc}

08005892 <__swrite>:
 8005892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005896:	461f      	mov	r7, r3
 8005898:	898b      	ldrh	r3, [r1, #12]
 800589a:	4605      	mov	r5, r0
 800589c:	05db      	lsls	r3, r3, #23
 800589e:	460c      	mov	r4, r1
 80058a0:	4616      	mov	r6, r2
 80058a2:	d505      	bpl.n	80058b0 <__swrite+0x1e>
 80058a4:	2302      	movs	r3, #2
 80058a6:	2200      	movs	r2, #0
 80058a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058ac:	f000 f9b8 	bl	8005c20 <_lseek_r>
 80058b0:	89a3      	ldrh	r3, [r4, #12]
 80058b2:	4632      	mov	r2, r6
 80058b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058b8:	81a3      	strh	r3, [r4, #12]
 80058ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058be:	463b      	mov	r3, r7
 80058c0:	4628      	mov	r0, r5
 80058c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058c6:	f000 b869 	b.w	800599c <_write_r>

080058ca <__sseek>:
 80058ca:	b510      	push	{r4, lr}
 80058cc:	460c      	mov	r4, r1
 80058ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058d2:	f000 f9a5 	bl	8005c20 <_lseek_r>
 80058d6:	1c43      	adds	r3, r0, #1
 80058d8:	89a3      	ldrh	r3, [r4, #12]
 80058da:	bf15      	itete	ne
 80058dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80058de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058e6:	81a3      	strheq	r3, [r4, #12]
 80058e8:	bf18      	it	ne
 80058ea:	81a3      	strhne	r3, [r4, #12]
 80058ec:	bd10      	pop	{r4, pc}

080058ee <__sclose>:
 80058ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058f2:	f000 b8d3 	b.w	8005a9c <_close_r>
	...

080058f8 <__swbuf_r>:
 80058f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058fa:	460e      	mov	r6, r1
 80058fc:	4614      	mov	r4, r2
 80058fe:	4605      	mov	r5, r0
 8005900:	b118      	cbz	r0, 800590a <__swbuf_r+0x12>
 8005902:	6983      	ldr	r3, [r0, #24]
 8005904:	b90b      	cbnz	r3, 800590a <__swbuf_r+0x12>
 8005906:	f7ff fbe5 	bl	80050d4 <__sinit>
 800590a:	4b21      	ldr	r3, [pc, #132]	; (8005990 <__swbuf_r+0x98>)
 800590c:	429c      	cmp	r4, r3
 800590e:	d12a      	bne.n	8005966 <__swbuf_r+0x6e>
 8005910:	686c      	ldr	r4, [r5, #4]
 8005912:	69a3      	ldr	r3, [r4, #24]
 8005914:	60a3      	str	r3, [r4, #8]
 8005916:	89a3      	ldrh	r3, [r4, #12]
 8005918:	071a      	lsls	r2, r3, #28
 800591a:	d52e      	bpl.n	800597a <__swbuf_r+0x82>
 800591c:	6923      	ldr	r3, [r4, #16]
 800591e:	b363      	cbz	r3, 800597a <__swbuf_r+0x82>
 8005920:	6923      	ldr	r3, [r4, #16]
 8005922:	6820      	ldr	r0, [r4, #0]
 8005924:	b2f6      	uxtb	r6, r6
 8005926:	1ac0      	subs	r0, r0, r3
 8005928:	6963      	ldr	r3, [r4, #20]
 800592a:	4637      	mov	r7, r6
 800592c:	4298      	cmp	r0, r3
 800592e:	db04      	blt.n	800593a <__swbuf_r+0x42>
 8005930:	4621      	mov	r1, r4
 8005932:	4628      	mov	r0, r5
 8005934:	f000 f94a 	bl	8005bcc <_fflush_r>
 8005938:	bb28      	cbnz	r0, 8005986 <__swbuf_r+0x8e>
 800593a:	68a3      	ldr	r3, [r4, #8]
 800593c:	3001      	adds	r0, #1
 800593e:	3b01      	subs	r3, #1
 8005940:	60a3      	str	r3, [r4, #8]
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	1c5a      	adds	r2, r3, #1
 8005946:	6022      	str	r2, [r4, #0]
 8005948:	701e      	strb	r6, [r3, #0]
 800594a:	6963      	ldr	r3, [r4, #20]
 800594c:	4298      	cmp	r0, r3
 800594e:	d004      	beq.n	800595a <__swbuf_r+0x62>
 8005950:	89a3      	ldrh	r3, [r4, #12]
 8005952:	07db      	lsls	r3, r3, #31
 8005954:	d519      	bpl.n	800598a <__swbuf_r+0x92>
 8005956:	2e0a      	cmp	r6, #10
 8005958:	d117      	bne.n	800598a <__swbuf_r+0x92>
 800595a:	4621      	mov	r1, r4
 800595c:	4628      	mov	r0, r5
 800595e:	f000 f935 	bl	8005bcc <_fflush_r>
 8005962:	b190      	cbz	r0, 800598a <__swbuf_r+0x92>
 8005964:	e00f      	b.n	8005986 <__swbuf_r+0x8e>
 8005966:	4b0b      	ldr	r3, [pc, #44]	; (8005994 <__swbuf_r+0x9c>)
 8005968:	429c      	cmp	r4, r3
 800596a:	d101      	bne.n	8005970 <__swbuf_r+0x78>
 800596c:	68ac      	ldr	r4, [r5, #8]
 800596e:	e7d0      	b.n	8005912 <__swbuf_r+0x1a>
 8005970:	4b09      	ldr	r3, [pc, #36]	; (8005998 <__swbuf_r+0xa0>)
 8005972:	429c      	cmp	r4, r3
 8005974:	bf08      	it	eq
 8005976:	68ec      	ldreq	r4, [r5, #12]
 8005978:	e7cb      	b.n	8005912 <__swbuf_r+0x1a>
 800597a:	4621      	mov	r1, r4
 800597c:	4628      	mov	r0, r5
 800597e:	f000 f81f 	bl	80059c0 <__swsetup_r>
 8005982:	2800      	cmp	r0, #0
 8005984:	d0cc      	beq.n	8005920 <__swbuf_r+0x28>
 8005986:	f04f 37ff 	mov.w	r7, #4294967295
 800598a:	4638      	mov	r0, r7
 800598c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800598e:	bf00      	nop
 8005990:	08005eb8 	.word	0x08005eb8
 8005994:	08005ed8 	.word	0x08005ed8
 8005998:	08005e98 	.word	0x08005e98

0800599c <_write_r>:
 800599c:	b538      	push	{r3, r4, r5, lr}
 800599e:	4605      	mov	r5, r0
 80059a0:	4608      	mov	r0, r1
 80059a2:	4611      	mov	r1, r2
 80059a4:	2200      	movs	r2, #0
 80059a6:	4c05      	ldr	r4, [pc, #20]	; (80059bc <_write_r+0x20>)
 80059a8:	6022      	str	r2, [r4, #0]
 80059aa:	461a      	mov	r2, r3
 80059ac:	f7ff f970 	bl	8004c90 <_write>
 80059b0:	1c43      	adds	r3, r0, #1
 80059b2:	d102      	bne.n	80059ba <_write_r+0x1e>
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	b103      	cbz	r3, 80059ba <_write_r+0x1e>
 80059b8:	602b      	str	r3, [r5, #0]
 80059ba:	bd38      	pop	{r3, r4, r5, pc}
 80059bc:	200000dc 	.word	0x200000dc

080059c0 <__swsetup_r>:
 80059c0:	4b32      	ldr	r3, [pc, #200]	; (8005a8c <__swsetup_r+0xcc>)
 80059c2:	b570      	push	{r4, r5, r6, lr}
 80059c4:	681d      	ldr	r5, [r3, #0]
 80059c6:	4606      	mov	r6, r0
 80059c8:	460c      	mov	r4, r1
 80059ca:	b125      	cbz	r5, 80059d6 <__swsetup_r+0x16>
 80059cc:	69ab      	ldr	r3, [r5, #24]
 80059ce:	b913      	cbnz	r3, 80059d6 <__swsetup_r+0x16>
 80059d0:	4628      	mov	r0, r5
 80059d2:	f7ff fb7f 	bl	80050d4 <__sinit>
 80059d6:	4b2e      	ldr	r3, [pc, #184]	; (8005a90 <__swsetup_r+0xd0>)
 80059d8:	429c      	cmp	r4, r3
 80059da:	d10f      	bne.n	80059fc <__swsetup_r+0x3c>
 80059dc:	686c      	ldr	r4, [r5, #4]
 80059de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	0715      	lsls	r5, r2, #28
 80059e6:	d42c      	bmi.n	8005a42 <__swsetup_r+0x82>
 80059e8:	06d0      	lsls	r0, r2, #27
 80059ea:	d411      	bmi.n	8005a10 <__swsetup_r+0x50>
 80059ec:	2209      	movs	r2, #9
 80059ee:	6032      	str	r2, [r6, #0]
 80059f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059f4:	81a3      	strh	r3, [r4, #12]
 80059f6:	f04f 30ff 	mov.w	r0, #4294967295
 80059fa:	bd70      	pop	{r4, r5, r6, pc}
 80059fc:	4b25      	ldr	r3, [pc, #148]	; (8005a94 <__swsetup_r+0xd4>)
 80059fe:	429c      	cmp	r4, r3
 8005a00:	d101      	bne.n	8005a06 <__swsetup_r+0x46>
 8005a02:	68ac      	ldr	r4, [r5, #8]
 8005a04:	e7eb      	b.n	80059de <__swsetup_r+0x1e>
 8005a06:	4b24      	ldr	r3, [pc, #144]	; (8005a98 <__swsetup_r+0xd8>)
 8005a08:	429c      	cmp	r4, r3
 8005a0a:	bf08      	it	eq
 8005a0c:	68ec      	ldreq	r4, [r5, #12]
 8005a0e:	e7e6      	b.n	80059de <__swsetup_r+0x1e>
 8005a10:	0751      	lsls	r1, r2, #29
 8005a12:	d512      	bpl.n	8005a3a <__swsetup_r+0x7a>
 8005a14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a16:	b141      	cbz	r1, 8005a2a <__swsetup_r+0x6a>
 8005a18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a1c:	4299      	cmp	r1, r3
 8005a1e:	d002      	beq.n	8005a26 <__swsetup_r+0x66>
 8005a20:	4630      	mov	r0, r6
 8005a22:	f000 f983 	bl	8005d2c <_free_r>
 8005a26:	2300      	movs	r3, #0
 8005a28:	6363      	str	r3, [r4, #52]	; 0x34
 8005a2a:	89a3      	ldrh	r3, [r4, #12]
 8005a2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a30:	81a3      	strh	r3, [r4, #12]
 8005a32:	2300      	movs	r3, #0
 8005a34:	6063      	str	r3, [r4, #4]
 8005a36:	6923      	ldr	r3, [r4, #16]
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	89a3      	ldrh	r3, [r4, #12]
 8005a3c:	f043 0308 	orr.w	r3, r3, #8
 8005a40:	81a3      	strh	r3, [r4, #12]
 8005a42:	6923      	ldr	r3, [r4, #16]
 8005a44:	b94b      	cbnz	r3, 8005a5a <__swsetup_r+0x9a>
 8005a46:	89a3      	ldrh	r3, [r4, #12]
 8005a48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a50:	d003      	beq.n	8005a5a <__swsetup_r+0x9a>
 8005a52:	4621      	mov	r1, r4
 8005a54:	4630      	mov	r0, r6
 8005a56:	f000 f919 	bl	8005c8c <__smakebuf_r>
 8005a5a:	89a2      	ldrh	r2, [r4, #12]
 8005a5c:	f012 0301 	ands.w	r3, r2, #1
 8005a60:	d00c      	beq.n	8005a7c <__swsetup_r+0xbc>
 8005a62:	2300      	movs	r3, #0
 8005a64:	60a3      	str	r3, [r4, #8]
 8005a66:	6963      	ldr	r3, [r4, #20]
 8005a68:	425b      	negs	r3, r3
 8005a6a:	61a3      	str	r3, [r4, #24]
 8005a6c:	6923      	ldr	r3, [r4, #16]
 8005a6e:	b953      	cbnz	r3, 8005a86 <__swsetup_r+0xc6>
 8005a70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a74:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005a78:	d1ba      	bne.n	80059f0 <__swsetup_r+0x30>
 8005a7a:	bd70      	pop	{r4, r5, r6, pc}
 8005a7c:	0792      	lsls	r2, r2, #30
 8005a7e:	bf58      	it	pl
 8005a80:	6963      	ldrpl	r3, [r4, #20]
 8005a82:	60a3      	str	r3, [r4, #8]
 8005a84:	e7f2      	b.n	8005a6c <__swsetup_r+0xac>
 8005a86:	2000      	movs	r0, #0
 8005a88:	e7f7      	b.n	8005a7a <__swsetup_r+0xba>
 8005a8a:	bf00      	nop
 8005a8c:	2000000c 	.word	0x2000000c
 8005a90:	08005eb8 	.word	0x08005eb8
 8005a94:	08005ed8 	.word	0x08005ed8
 8005a98:	08005e98 	.word	0x08005e98

08005a9c <_close_r>:
 8005a9c:	b538      	push	{r3, r4, r5, lr}
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	4c05      	ldr	r4, [pc, #20]	; (8005ab8 <_close_r+0x1c>)
 8005aa2:	4605      	mov	r5, r0
 8005aa4:	4608      	mov	r0, r1
 8005aa6:	6023      	str	r3, [r4, #0]
 8005aa8:	f7ff fa32 	bl	8004f10 <_close>
 8005aac:	1c43      	adds	r3, r0, #1
 8005aae:	d102      	bne.n	8005ab6 <_close_r+0x1a>
 8005ab0:	6823      	ldr	r3, [r4, #0]
 8005ab2:	b103      	cbz	r3, 8005ab6 <_close_r+0x1a>
 8005ab4:	602b      	str	r3, [r5, #0]
 8005ab6:	bd38      	pop	{r3, r4, r5, pc}
 8005ab8:	200000dc 	.word	0x200000dc

08005abc <__sflush_r>:
 8005abc:	898a      	ldrh	r2, [r1, #12]
 8005abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ac2:	4605      	mov	r5, r0
 8005ac4:	0710      	lsls	r0, r2, #28
 8005ac6:	460c      	mov	r4, r1
 8005ac8:	d45a      	bmi.n	8005b80 <__sflush_r+0xc4>
 8005aca:	684b      	ldr	r3, [r1, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	dc05      	bgt.n	8005adc <__sflush_r+0x20>
 8005ad0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	dc02      	bgt.n	8005adc <__sflush_r+0x20>
 8005ad6:	2000      	movs	r0, #0
 8005ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005adc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ade:	2e00      	cmp	r6, #0
 8005ae0:	d0f9      	beq.n	8005ad6 <__sflush_r+0x1a>
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ae8:	682f      	ldr	r7, [r5, #0]
 8005aea:	602b      	str	r3, [r5, #0]
 8005aec:	d033      	beq.n	8005b56 <__sflush_r+0x9a>
 8005aee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005af0:	89a3      	ldrh	r3, [r4, #12]
 8005af2:	075a      	lsls	r2, r3, #29
 8005af4:	d505      	bpl.n	8005b02 <__sflush_r+0x46>
 8005af6:	6863      	ldr	r3, [r4, #4]
 8005af8:	1ac0      	subs	r0, r0, r3
 8005afa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005afc:	b10b      	cbz	r3, 8005b02 <__sflush_r+0x46>
 8005afe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b00:	1ac0      	subs	r0, r0, r3
 8005b02:	2300      	movs	r3, #0
 8005b04:	4602      	mov	r2, r0
 8005b06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b08:	6a21      	ldr	r1, [r4, #32]
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	47b0      	blx	r6
 8005b0e:	1c43      	adds	r3, r0, #1
 8005b10:	89a3      	ldrh	r3, [r4, #12]
 8005b12:	d106      	bne.n	8005b22 <__sflush_r+0x66>
 8005b14:	6829      	ldr	r1, [r5, #0]
 8005b16:	291d      	cmp	r1, #29
 8005b18:	d84b      	bhi.n	8005bb2 <__sflush_r+0xf6>
 8005b1a:	4a2b      	ldr	r2, [pc, #172]	; (8005bc8 <__sflush_r+0x10c>)
 8005b1c:	40ca      	lsrs	r2, r1
 8005b1e:	07d6      	lsls	r6, r2, #31
 8005b20:	d547      	bpl.n	8005bb2 <__sflush_r+0xf6>
 8005b22:	2200      	movs	r2, #0
 8005b24:	6062      	str	r2, [r4, #4]
 8005b26:	6922      	ldr	r2, [r4, #16]
 8005b28:	04d9      	lsls	r1, r3, #19
 8005b2a:	6022      	str	r2, [r4, #0]
 8005b2c:	d504      	bpl.n	8005b38 <__sflush_r+0x7c>
 8005b2e:	1c42      	adds	r2, r0, #1
 8005b30:	d101      	bne.n	8005b36 <__sflush_r+0x7a>
 8005b32:	682b      	ldr	r3, [r5, #0]
 8005b34:	b903      	cbnz	r3, 8005b38 <__sflush_r+0x7c>
 8005b36:	6560      	str	r0, [r4, #84]	; 0x54
 8005b38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b3a:	602f      	str	r7, [r5, #0]
 8005b3c:	2900      	cmp	r1, #0
 8005b3e:	d0ca      	beq.n	8005ad6 <__sflush_r+0x1a>
 8005b40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b44:	4299      	cmp	r1, r3
 8005b46:	d002      	beq.n	8005b4e <__sflush_r+0x92>
 8005b48:	4628      	mov	r0, r5
 8005b4a:	f000 f8ef 	bl	8005d2c <_free_r>
 8005b4e:	2000      	movs	r0, #0
 8005b50:	6360      	str	r0, [r4, #52]	; 0x34
 8005b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b56:	6a21      	ldr	r1, [r4, #32]
 8005b58:	2301      	movs	r3, #1
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	47b0      	blx	r6
 8005b5e:	1c41      	adds	r1, r0, #1
 8005b60:	d1c6      	bne.n	8005af0 <__sflush_r+0x34>
 8005b62:	682b      	ldr	r3, [r5, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d0c3      	beq.n	8005af0 <__sflush_r+0x34>
 8005b68:	2b1d      	cmp	r3, #29
 8005b6a:	d001      	beq.n	8005b70 <__sflush_r+0xb4>
 8005b6c:	2b16      	cmp	r3, #22
 8005b6e:	d101      	bne.n	8005b74 <__sflush_r+0xb8>
 8005b70:	602f      	str	r7, [r5, #0]
 8005b72:	e7b0      	b.n	8005ad6 <__sflush_r+0x1a>
 8005b74:	89a3      	ldrh	r3, [r4, #12]
 8005b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b7a:	81a3      	strh	r3, [r4, #12]
 8005b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b80:	690f      	ldr	r7, [r1, #16]
 8005b82:	2f00      	cmp	r7, #0
 8005b84:	d0a7      	beq.n	8005ad6 <__sflush_r+0x1a>
 8005b86:	0793      	lsls	r3, r2, #30
 8005b88:	bf18      	it	ne
 8005b8a:	2300      	movne	r3, #0
 8005b8c:	680e      	ldr	r6, [r1, #0]
 8005b8e:	bf08      	it	eq
 8005b90:	694b      	ldreq	r3, [r1, #20]
 8005b92:	eba6 0807 	sub.w	r8, r6, r7
 8005b96:	600f      	str	r7, [r1, #0]
 8005b98:	608b      	str	r3, [r1, #8]
 8005b9a:	f1b8 0f00 	cmp.w	r8, #0
 8005b9e:	dd9a      	ble.n	8005ad6 <__sflush_r+0x1a>
 8005ba0:	4643      	mov	r3, r8
 8005ba2:	463a      	mov	r2, r7
 8005ba4:	6a21      	ldr	r1, [r4, #32]
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005baa:	47b0      	blx	r6
 8005bac:	2800      	cmp	r0, #0
 8005bae:	dc07      	bgt.n	8005bc0 <__sflush_r+0x104>
 8005bb0:	89a3      	ldrh	r3, [r4, #12]
 8005bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bb6:	81a3      	strh	r3, [r4, #12]
 8005bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bc0:	4407      	add	r7, r0
 8005bc2:	eba8 0800 	sub.w	r8, r8, r0
 8005bc6:	e7e8      	b.n	8005b9a <__sflush_r+0xde>
 8005bc8:	20400001 	.word	0x20400001

08005bcc <_fflush_r>:
 8005bcc:	b538      	push	{r3, r4, r5, lr}
 8005bce:	690b      	ldr	r3, [r1, #16]
 8005bd0:	4605      	mov	r5, r0
 8005bd2:	460c      	mov	r4, r1
 8005bd4:	b1db      	cbz	r3, 8005c0e <_fflush_r+0x42>
 8005bd6:	b118      	cbz	r0, 8005be0 <_fflush_r+0x14>
 8005bd8:	6983      	ldr	r3, [r0, #24]
 8005bda:	b90b      	cbnz	r3, 8005be0 <_fflush_r+0x14>
 8005bdc:	f7ff fa7a 	bl	80050d4 <__sinit>
 8005be0:	4b0c      	ldr	r3, [pc, #48]	; (8005c14 <_fflush_r+0x48>)
 8005be2:	429c      	cmp	r4, r3
 8005be4:	d109      	bne.n	8005bfa <_fflush_r+0x2e>
 8005be6:	686c      	ldr	r4, [r5, #4]
 8005be8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bec:	b17b      	cbz	r3, 8005c0e <_fflush_r+0x42>
 8005bee:	4621      	mov	r1, r4
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bf6:	f7ff bf61 	b.w	8005abc <__sflush_r>
 8005bfa:	4b07      	ldr	r3, [pc, #28]	; (8005c18 <_fflush_r+0x4c>)
 8005bfc:	429c      	cmp	r4, r3
 8005bfe:	d101      	bne.n	8005c04 <_fflush_r+0x38>
 8005c00:	68ac      	ldr	r4, [r5, #8]
 8005c02:	e7f1      	b.n	8005be8 <_fflush_r+0x1c>
 8005c04:	4b05      	ldr	r3, [pc, #20]	; (8005c1c <_fflush_r+0x50>)
 8005c06:	429c      	cmp	r4, r3
 8005c08:	bf08      	it	eq
 8005c0a:	68ec      	ldreq	r4, [r5, #12]
 8005c0c:	e7ec      	b.n	8005be8 <_fflush_r+0x1c>
 8005c0e:	2000      	movs	r0, #0
 8005c10:	bd38      	pop	{r3, r4, r5, pc}
 8005c12:	bf00      	nop
 8005c14:	08005eb8 	.word	0x08005eb8
 8005c18:	08005ed8 	.word	0x08005ed8
 8005c1c:	08005e98 	.word	0x08005e98

08005c20 <_lseek_r>:
 8005c20:	b538      	push	{r3, r4, r5, lr}
 8005c22:	4605      	mov	r5, r0
 8005c24:	4608      	mov	r0, r1
 8005c26:	4611      	mov	r1, r2
 8005c28:	2200      	movs	r2, #0
 8005c2a:	4c05      	ldr	r4, [pc, #20]	; (8005c40 <_lseek_r+0x20>)
 8005c2c:	6022      	str	r2, [r4, #0]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	f7ff f978 	bl	8004f24 <_lseek>
 8005c34:	1c43      	adds	r3, r0, #1
 8005c36:	d102      	bne.n	8005c3e <_lseek_r+0x1e>
 8005c38:	6823      	ldr	r3, [r4, #0]
 8005c3a:	b103      	cbz	r3, 8005c3e <_lseek_r+0x1e>
 8005c3c:	602b      	str	r3, [r5, #0]
 8005c3e:	bd38      	pop	{r3, r4, r5, pc}
 8005c40:	200000dc 	.word	0x200000dc

08005c44 <__swhatbuf_r>:
 8005c44:	b570      	push	{r4, r5, r6, lr}
 8005c46:	460e      	mov	r6, r1
 8005c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c4c:	b090      	sub	sp, #64	; 0x40
 8005c4e:	2900      	cmp	r1, #0
 8005c50:	4614      	mov	r4, r2
 8005c52:	461d      	mov	r5, r3
 8005c54:	da07      	bge.n	8005c66 <__swhatbuf_r+0x22>
 8005c56:	2300      	movs	r3, #0
 8005c58:	602b      	str	r3, [r5, #0]
 8005c5a:	89b3      	ldrh	r3, [r6, #12]
 8005c5c:	061a      	lsls	r2, r3, #24
 8005c5e:	d410      	bmi.n	8005c82 <__swhatbuf_r+0x3e>
 8005c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c64:	e00e      	b.n	8005c84 <__swhatbuf_r+0x40>
 8005c66:	aa01      	add	r2, sp, #4
 8005c68:	f000 f8be 	bl	8005de8 <_fstat_r>
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	dbf2      	blt.n	8005c56 <__swhatbuf_r+0x12>
 8005c70:	9a02      	ldr	r2, [sp, #8]
 8005c72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005c76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005c7a:	425a      	negs	r2, r3
 8005c7c:	415a      	adcs	r2, r3
 8005c7e:	602a      	str	r2, [r5, #0]
 8005c80:	e7ee      	b.n	8005c60 <__swhatbuf_r+0x1c>
 8005c82:	2340      	movs	r3, #64	; 0x40
 8005c84:	2000      	movs	r0, #0
 8005c86:	6023      	str	r3, [r4, #0]
 8005c88:	b010      	add	sp, #64	; 0x40
 8005c8a:	bd70      	pop	{r4, r5, r6, pc}

08005c8c <__smakebuf_r>:
 8005c8c:	898b      	ldrh	r3, [r1, #12]
 8005c8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c90:	079d      	lsls	r5, r3, #30
 8005c92:	4606      	mov	r6, r0
 8005c94:	460c      	mov	r4, r1
 8005c96:	d507      	bpl.n	8005ca8 <__smakebuf_r+0x1c>
 8005c98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c9c:	6023      	str	r3, [r4, #0]
 8005c9e:	6123      	str	r3, [r4, #16]
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	6163      	str	r3, [r4, #20]
 8005ca4:	b002      	add	sp, #8
 8005ca6:	bd70      	pop	{r4, r5, r6, pc}
 8005ca8:	ab01      	add	r3, sp, #4
 8005caa:	466a      	mov	r2, sp
 8005cac:	f7ff ffca 	bl	8005c44 <__swhatbuf_r>
 8005cb0:	9900      	ldr	r1, [sp, #0]
 8005cb2:	4605      	mov	r5, r0
 8005cb4:	4630      	mov	r0, r6
 8005cb6:	f7ff fa97 	bl	80051e8 <_malloc_r>
 8005cba:	b948      	cbnz	r0, 8005cd0 <__smakebuf_r+0x44>
 8005cbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cc0:	059a      	lsls	r2, r3, #22
 8005cc2:	d4ef      	bmi.n	8005ca4 <__smakebuf_r+0x18>
 8005cc4:	f023 0303 	bic.w	r3, r3, #3
 8005cc8:	f043 0302 	orr.w	r3, r3, #2
 8005ccc:	81a3      	strh	r3, [r4, #12]
 8005cce:	e7e3      	b.n	8005c98 <__smakebuf_r+0xc>
 8005cd0:	4b0d      	ldr	r3, [pc, #52]	; (8005d08 <__smakebuf_r+0x7c>)
 8005cd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8005cd4:	89a3      	ldrh	r3, [r4, #12]
 8005cd6:	6020      	str	r0, [r4, #0]
 8005cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cdc:	81a3      	strh	r3, [r4, #12]
 8005cde:	9b00      	ldr	r3, [sp, #0]
 8005ce0:	6120      	str	r0, [r4, #16]
 8005ce2:	6163      	str	r3, [r4, #20]
 8005ce4:	9b01      	ldr	r3, [sp, #4]
 8005ce6:	b15b      	cbz	r3, 8005d00 <__smakebuf_r+0x74>
 8005ce8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cec:	4630      	mov	r0, r6
 8005cee:	f000 f88d 	bl	8005e0c <_isatty_r>
 8005cf2:	b128      	cbz	r0, 8005d00 <__smakebuf_r+0x74>
 8005cf4:	89a3      	ldrh	r3, [r4, #12]
 8005cf6:	f023 0303 	bic.w	r3, r3, #3
 8005cfa:	f043 0301 	orr.w	r3, r3, #1
 8005cfe:	81a3      	strh	r3, [r4, #12]
 8005d00:	89a3      	ldrh	r3, [r4, #12]
 8005d02:	431d      	orrs	r5, r3
 8005d04:	81a5      	strh	r5, [r4, #12]
 8005d06:	e7cd      	b.n	8005ca4 <__smakebuf_r+0x18>
 8005d08:	08005055 	.word	0x08005055

08005d0c <memchr>:
 8005d0c:	b510      	push	{r4, lr}
 8005d0e:	b2c9      	uxtb	r1, r1
 8005d10:	4402      	add	r2, r0
 8005d12:	4290      	cmp	r0, r2
 8005d14:	4603      	mov	r3, r0
 8005d16:	d101      	bne.n	8005d1c <memchr+0x10>
 8005d18:	2000      	movs	r0, #0
 8005d1a:	bd10      	pop	{r4, pc}
 8005d1c:	781c      	ldrb	r4, [r3, #0]
 8005d1e:	3001      	adds	r0, #1
 8005d20:	428c      	cmp	r4, r1
 8005d22:	d1f6      	bne.n	8005d12 <memchr+0x6>
 8005d24:	4618      	mov	r0, r3
 8005d26:	bd10      	pop	{r4, pc}

08005d28 <__malloc_lock>:
 8005d28:	4770      	bx	lr

08005d2a <__malloc_unlock>:
 8005d2a:	4770      	bx	lr

08005d2c <_free_r>:
 8005d2c:	b538      	push	{r3, r4, r5, lr}
 8005d2e:	4605      	mov	r5, r0
 8005d30:	2900      	cmp	r1, #0
 8005d32:	d043      	beq.n	8005dbc <_free_r+0x90>
 8005d34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d38:	1f0c      	subs	r4, r1, #4
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	bfb8      	it	lt
 8005d3e:	18e4      	addlt	r4, r4, r3
 8005d40:	f7ff fff2 	bl	8005d28 <__malloc_lock>
 8005d44:	4a1e      	ldr	r2, [pc, #120]	; (8005dc0 <_free_r+0x94>)
 8005d46:	6813      	ldr	r3, [r2, #0]
 8005d48:	4610      	mov	r0, r2
 8005d4a:	b933      	cbnz	r3, 8005d5a <_free_r+0x2e>
 8005d4c:	6063      	str	r3, [r4, #4]
 8005d4e:	6014      	str	r4, [r2, #0]
 8005d50:	4628      	mov	r0, r5
 8005d52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d56:	f7ff bfe8 	b.w	8005d2a <__malloc_unlock>
 8005d5a:	42a3      	cmp	r3, r4
 8005d5c:	d90b      	bls.n	8005d76 <_free_r+0x4a>
 8005d5e:	6821      	ldr	r1, [r4, #0]
 8005d60:	1862      	adds	r2, r4, r1
 8005d62:	4293      	cmp	r3, r2
 8005d64:	bf01      	itttt	eq
 8005d66:	681a      	ldreq	r2, [r3, #0]
 8005d68:	685b      	ldreq	r3, [r3, #4]
 8005d6a:	1852      	addeq	r2, r2, r1
 8005d6c:	6022      	streq	r2, [r4, #0]
 8005d6e:	6063      	str	r3, [r4, #4]
 8005d70:	6004      	str	r4, [r0, #0]
 8005d72:	e7ed      	b.n	8005d50 <_free_r+0x24>
 8005d74:	4613      	mov	r3, r2
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	b10a      	cbz	r2, 8005d7e <_free_r+0x52>
 8005d7a:	42a2      	cmp	r2, r4
 8005d7c:	d9fa      	bls.n	8005d74 <_free_r+0x48>
 8005d7e:	6819      	ldr	r1, [r3, #0]
 8005d80:	1858      	adds	r0, r3, r1
 8005d82:	42a0      	cmp	r0, r4
 8005d84:	d10b      	bne.n	8005d9e <_free_r+0x72>
 8005d86:	6820      	ldr	r0, [r4, #0]
 8005d88:	4401      	add	r1, r0
 8005d8a:	1858      	adds	r0, r3, r1
 8005d8c:	4282      	cmp	r2, r0
 8005d8e:	6019      	str	r1, [r3, #0]
 8005d90:	d1de      	bne.n	8005d50 <_free_r+0x24>
 8005d92:	6810      	ldr	r0, [r2, #0]
 8005d94:	6852      	ldr	r2, [r2, #4]
 8005d96:	4401      	add	r1, r0
 8005d98:	6019      	str	r1, [r3, #0]
 8005d9a:	605a      	str	r2, [r3, #4]
 8005d9c:	e7d8      	b.n	8005d50 <_free_r+0x24>
 8005d9e:	d902      	bls.n	8005da6 <_free_r+0x7a>
 8005da0:	230c      	movs	r3, #12
 8005da2:	602b      	str	r3, [r5, #0]
 8005da4:	e7d4      	b.n	8005d50 <_free_r+0x24>
 8005da6:	6820      	ldr	r0, [r4, #0]
 8005da8:	1821      	adds	r1, r4, r0
 8005daa:	428a      	cmp	r2, r1
 8005dac:	bf01      	itttt	eq
 8005dae:	6811      	ldreq	r1, [r2, #0]
 8005db0:	6852      	ldreq	r2, [r2, #4]
 8005db2:	1809      	addeq	r1, r1, r0
 8005db4:	6021      	streq	r1, [r4, #0]
 8005db6:	6062      	str	r2, [r4, #4]
 8005db8:	605c      	str	r4, [r3, #4]
 8005dba:	e7c9      	b.n	8005d50 <_free_r+0x24>
 8005dbc:	bd38      	pop	{r3, r4, r5, pc}
 8005dbe:	bf00      	nop
 8005dc0:	20000090 	.word	0x20000090

08005dc4 <_read_r>:
 8005dc4:	b538      	push	{r3, r4, r5, lr}
 8005dc6:	4605      	mov	r5, r0
 8005dc8:	4608      	mov	r0, r1
 8005dca:	4611      	mov	r1, r2
 8005dcc:	2200      	movs	r2, #0
 8005dce:	4c05      	ldr	r4, [pc, #20]	; (8005de4 <_read_r+0x20>)
 8005dd0:	6022      	str	r2, [r4, #0]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	f7ff f874 	bl	8004ec0 <_read>
 8005dd8:	1c43      	adds	r3, r0, #1
 8005dda:	d102      	bne.n	8005de2 <_read_r+0x1e>
 8005ddc:	6823      	ldr	r3, [r4, #0]
 8005dde:	b103      	cbz	r3, 8005de2 <_read_r+0x1e>
 8005de0:	602b      	str	r3, [r5, #0]
 8005de2:	bd38      	pop	{r3, r4, r5, pc}
 8005de4:	200000dc 	.word	0x200000dc

08005de8 <_fstat_r>:
 8005de8:	b538      	push	{r3, r4, r5, lr}
 8005dea:	2300      	movs	r3, #0
 8005dec:	4c06      	ldr	r4, [pc, #24]	; (8005e08 <_fstat_r+0x20>)
 8005dee:	4605      	mov	r5, r0
 8005df0:	4608      	mov	r0, r1
 8005df2:	4611      	mov	r1, r2
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	f7ff f88e 	bl	8004f16 <_fstat>
 8005dfa:	1c43      	adds	r3, r0, #1
 8005dfc:	d102      	bne.n	8005e04 <_fstat_r+0x1c>
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	b103      	cbz	r3, 8005e04 <_fstat_r+0x1c>
 8005e02:	602b      	str	r3, [r5, #0]
 8005e04:	bd38      	pop	{r3, r4, r5, pc}
 8005e06:	bf00      	nop
 8005e08:	200000dc 	.word	0x200000dc

08005e0c <_isatty_r>:
 8005e0c:	b538      	push	{r3, r4, r5, lr}
 8005e0e:	2300      	movs	r3, #0
 8005e10:	4c05      	ldr	r4, [pc, #20]	; (8005e28 <_isatty_r+0x1c>)
 8005e12:	4605      	mov	r5, r0
 8005e14:	4608      	mov	r0, r1
 8005e16:	6023      	str	r3, [r4, #0]
 8005e18:	f7ff f882 	bl	8004f20 <_isatty>
 8005e1c:	1c43      	adds	r3, r0, #1
 8005e1e:	d102      	bne.n	8005e26 <_isatty_r+0x1a>
 8005e20:	6823      	ldr	r3, [r4, #0]
 8005e22:	b103      	cbz	r3, 8005e26 <_isatty_r+0x1a>
 8005e24:	602b      	str	r3, [r5, #0]
 8005e26:	bd38      	pop	{r3, r4, r5, pc}
 8005e28:	200000dc 	.word	0x200000dc

08005e2c <_init>:
 8005e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2e:	bf00      	nop
 8005e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e32:	bc08      	pop	{r3}
 8005e34:	469e      	mov	lr, r3
 8005e36:	4770      	bx	lr

08005e38 <_fini>:
 8005e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3a:	bf00      	nop
 8005e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e3e:	bc08      	pop	{r3}
 8005e40:	469e      	mov	lr, r3
 8005e42:	4770      	bx	lr
